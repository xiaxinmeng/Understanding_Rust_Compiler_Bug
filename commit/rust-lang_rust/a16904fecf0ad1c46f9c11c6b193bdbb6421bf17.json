{"sha": "a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNjkwNGZlY2YwYWQxYzQ2ZjljMTFjNmIxOTNiZGJiNjQyMWJmMTc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-15T00:30:36Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-15T03:19:15Z"}, "message": "Switch to Symbol for item.name\n\nThis decreases the size of `Item` from 680 to 616 bytes. It also does a\nlot less work since it no longer has to copy as much.", "tree": {"sha": "ced314a1d96cfefefe5e89b5129164ecd8014f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced314a1d96cfefefe5e89b5129164ecd8014f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "html_url": "https://github.com/rust-lang/rust/commit/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89fc5034f4f8bca86cbf2c29c8c00366a7b4a33c", "url": "https://api.github.com/repos/rust-lang/rust/commits/89fc5034f4f8bca86cbf2c29c8c00366a7b4a33c", "html_url": "https://github.com/rust-lang/rust/commit/89fc5034f4f8bca86cbf2c29c8c00366a7b4a33c"}], "stats": {"total": 123, "additions": 78, "deletions": 45}, "files": [{"sha": "f61a32a0f790e30becc86b474ccad48f2a5d7f13", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "patch": "@@ -1469,6 +1469,10 @@ impl Symbol {\n         self.0.as_u32()\n     }\n \n+    pub fn is_empty(self) -> bool {\n+        self == kw::Invalid\n+    }\n+\n     /// This method is supposed to be used in error messages, so it's expected to be\n     /// identical to printing the original identifier token written in source code\n     /// (`token_to_string`, `Ident::to_string`), except that symbols don't keep the rawness flag"}, {"sha": "d358a7a369d85a09384a4f6ab0860d51dda5812a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "patch": "@@ -124,7 +124,7 @@ crate fn try_inline(\n     let attrs = merge_attrs(cx, Some(parent_module), target_attrs, attrs_clone);\n \n     cx.renderinfo.borrow_mut().inlined.insert(did);\n-    let what_rustc_thinks = clean::Item::from_def_id_and_parts(did, Some(name.clean(cx)), kind, cx);\n+    let what_rustc_thinks = clean::Item::from_def_id_and_parts(did, Some(name), kind, cx);\n     ret.push(clean::Item { attrs, ..what_rustc_thinks });\n     Some(ret)\n }"}, {"sha": "2d2465e56f3762bfa0a939ba2e338ee428707552", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "patch": "@@ -169,7 +169,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                 for attr in attrs.lists(sym::doc) {\n                     if attr.has_name(sym::keyword) {\n                         if let Some(v) = attr.value_str() {\n-                            keyword = Some(v.to_string());\n+                            keyword = Some(v);\n                             break;\n                         }\n                     }\n@@ -253,11 +253,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             ModuleItem(Module { is_crate: self.is_crate, items }),\n             cx,\n         );\n-        Item {\n-            attrs,\n-            source: span.clean(cx),\n-            ..what_rustc_thinks\n-        }\n+        Item { attrs, source: span.clean(cx), ..what_rustc_thinks }\n     }\n }\n \n@@ -1095,7 +1091,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     AssocTypeItem(bounds.clean(cx), default.clean(cx))\n                 }\n             };\n-            Item::from_def_id_and_parts(local_did, Some(self.ident.name.clean(cx)), inner, cx)\n+            Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n         })\n     }\n }\n@@ -1123,7 +1119,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                     TypedefItem(Typedef { type_, generics: Generics::default(), item_type }, true)\n                 }\n             };\n-            Item::from_def_id_and_parts(local_did, Some(self.ident.name.clean(cx)), inner, cx)\n+            Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n         })\n     }\n }\n@@ -1280,7 +1276,7 @@ impl Clean<Item> for ty::AssocItem {\n             }\n         };\n \n-        Item::from_def_id_and_parts(self.def_id, Some(self.ident.name.clean(cx)), kind, cx)\n+        Item::from_def_id_and_parts(self.def_id, Some(self.ident.name), kind, cx)\n     }\n }\n \n@@ -1770,7 +1766,7 @@ impl Clean<Item> for ty::FieldDef {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let what_rustc_thinks = Item::from_def_id_and_parts(\n             self.did,\n-            Some(self.ident.name.clean(cx)),\n+            Some(self.ident.name),\n             StructFieldItem(cx.tcx.type_of(self.did).clean(cx)),\n             cx,\n         );\n@@ -1846,7 +1842,7 @@ impl Clean<Item> for ty::VariantDef {\n                     .fields\n                     .iter()\n                     .map(|field| {\n-                        let name = Some(field.ident.name.clean(cx));\n+                        let name = Some(field.ident.name);\n                         let kind = StructFieldItem(cx.tcx.type_of(field.did).clean(cx));\n                         let what_rustc_thinks =\n                             Item::from_def_id_and_parts(field.did, name, kind, cx);\n@@ -1858,7 +1854,7 @@ impl Clean<Item> for ty::VariantDef {\n         };\n         let what_rustc_thinks = Item::from_def_id_and_parts(\n             self.def_id,\n-            Some(self.ident.name.clean(cx)),\n+            Some(self.ident.name),\n             VariantItem(Variant { kind }),\n             cx,\n         );\n@@ -2032,7 +2028,7 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                 _ => unreachable!(\"not yet converted\"),\n             };\n \n-            vec![Item::from_def_id_and_parts(def_id, Some(name.clean(cx)), kind, cx)]\n+            vec![Item::from_def_id_and_parts(def_id, Some(name), kind, cx)]\n         })\n     }\n }"}, {"sha": "2c353a1e0819ef2b00b59d6b5fd472eb409a6b60", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "patch": "@@ -70,7 +70,7 @@ crate struct ExternalCrate {\n     crate src: FileName,\n     crate attrs: Attributes,\n     crate primitives: Vec<(DefId, PrimitiveType)>,\n-    crate keywords: Vec<(DefId, String)>,\n+    crate keywords: Vec<(DefId, Symbol)>,\n }\n \n /// Anything with a source location and set of attributes and, optionally, a\n@@ -81,7 +81,7 @@ crate struct Item {\n     /// Stringified span\n     crate source: Span,\n     /// Not everything has a name. E.g., impls\n-    crate name: Option<String>,\n+    crate name: Option<Symbol>,\n     crate attrs: Attributes,\n     crate visibility: Visibility,\n     crate kind: ItemKind,\n@@ -123,17 +123,12 @@ impl Item {\n         kind: ItemKind,\n         cx: &DocContext<'_>,\n     ) -> Item {\n-        Item::from_def_id_and_parts(\n-            cx.tcx.hir().local_def_id(hir_id).to_def_id(),\n-            name.clean(cx),\n-            kind,\n-            cx,\n-        )\n+        Item::from_def_id_and_parts(cx.tcx.hir().local_def_id(hir_id).to_def_id(), name, kind, cx)\n     }\n \n     pub fn from_def_id_and_parts(\n         def_id: DefId,\n-        name: Option<String>,\n+        name: Option<Symbol>,\n         kind: ItemKind,\n         cx: &DocContext<'_>,\n     ) -> Item {\n@@ -334,7 +329,7 @@ crate enum ItemKind {\n     AssocTypeItem(Vec<GenericBound>, Option<Type>),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemKind>),\n-    KeywordItem(String),\n+    KeywordItem(Symbol),\n }\n \n impl ItemKind {\n@@ -1163,6 +1158,8 @@ crate enum Type {\n }\n \n #[derive(Clone, PartialEq, Eq, Hash, Copy, Debug)]\n+/// N.B. this has to be different from `hir::PrimTy` because it also includes types that aren't\n+/// paths, like `Unit`.\n crate enum PrimitiveType {\n     Isize,\n     I8,\n@@ -1502,6 +1499,37 @@ impl PrimitiveType {\n     crate fn to_url_str(&self) -> &'static str {\n         self.as_str()\n     }\n+\n+    crate fn as_sym(&self) -> Symbol {\n+        use PrimitiveType::*;\n+        match self {\n+            Isize => sym::isize,\n+            I8 => sym::i8,\n+            I16 => sym::i16,\n+            I32 => sym::i32,\n+            I64 => sym::i64,\n+            I128 => sym::i128,\n+            Usize => sym::usize,\n+            U8 => sym::u8,\n+            U16 => sym::u16,\n+            U32 => sym::u32,\n+            U64 => sym::u64,\n+            U128 => sym::u128,\n+            F32 => sym::f32,\n+            F64 => sym::f64,\n+            Str => sym::str,\n+            Bool => sym::bool,\n+            Char => sym::char,\n+            Array => sym::array,\n+            Slice => sym::slice,\n+            Tuple => sym::tuple,\n+            Unit => sym::unit,\n+            RawPointer => sym::pointer,\n+            Reference => sym::reference,\n+            Fn => kw::Fn,\n+            Never => sym::never,\n+        }\n+    }\n }\n \n impl From<ast::IntTy> for PrimitiveType {"}, {"sha": "f8743a4c42e971622e2fcd08b3cf48cf87e51a5a", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "patch": "@@ -68,7 +68,7 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n         m.items.extend(primitives.iter().map(|&(def_id, prim)| {\n             Item::from_def_id_and_parts(\n                 def_id,\n-                Some(prim.to_url_str().to_owned()),\n+                Some(prim.as_sym()),\n                 ItemKind::PrimitiveItem(prim),\n                 cx,\n             )"}, {"sha": "c332da4db4ee9f420a88fe4747c607f2b47390b7", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "patch": "@@ -3,6 +3,7 @@ use std::sync::Arc;\n use rustc_data_structures::sync::Lrc;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n+use rustc_span::Symbol;\n \n use crate::clean;\n use crate::config::{RenderInfo, RenderOptions};\n@@ -75,7 +76,7 @@ crate fn run_format<T: FormatRenderer>(\n         None => return Ok(()),\n     };\n \n-    item.name = Some(krate.name.clone());\n+    item.name = Some(Symbol::intern(&krate.name));\n \n     // Render the crate documentation\n     let mut work = vec![(format_renderer.clone(), item)];"}, {"sha": "91037bc160ab453f0ba429ae1e1fec8b14c9fee0", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "patch": "@@ -76,7 +76,7 @@ crate fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n         if let Some(&(ref fqp, _)) = paths.get(&did) {\n             search_index.push(IndexItem {\n                 ty: item.type_(),\n-                name: item.name.clone().unwrap(),\n+                name: item.name.unwrap().to_string(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n                 desc: item.doc_value().map_or_else(|| String::new(), short_markdown_summary),\n                 parent: Some(did),"}, {"sha": "00f3723ce23983545386afadbc88aa582205a224", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "patch": "@@ -61,7 +61,7 @@ use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::FileName;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n@@ -665,7 +665,7 @@ impl FormatRenderer for Context {\n         if !buf.is_empty() {\n             let name = item.name.as_ref().unwrap();\n             let item_type = item.type_();\n-            let file_name = &item_path(item_type, name);\n+            let file_name = &item_path(item_type, &name.as_str());\n             self.shared.ensure_dir(&self.dst)?;\n             let joint_dst = self.dst.join(file_name);\n             self.shared.fs.write(&joint_dst, buf.as_bytes())?;\n@@ -1543,7 +1543,7 @@ impl Context {\n             if !title.is_empty() {\n                 title.push_str(\"::\");\n             }\n-            title.push_str(it.name.as_ref().unwrap());\n+            title.push_str(&it.name.unwrap().as_str());\n         }\n         title.push_str(\" - Rust\");\n         let tyname = it.type_();\n@@ -1815,7 +1815,7 @@ fn item_path(ty: ItemType, name: &str) -> String {\n fn full_path(cx: &Context, item: &clean::Item) -> String {\n     let mut s = cx.current.join(\"::\");\n     s.push_str(\"::\");\n-    s.push_str(item.name.as_ref().unwrap());\n+    s.push_str(&item.name.unwrap().as_str());\n     s\n }\n \n@@ -2065,9 +2065,9 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                 (true, false) => return Ordering::Greater,\n             }\n         }\n-        let lhs = i1.name.as_ref().map_or(\"\", |s| &**s);\n-        let rhs = i2.name.as_ref().map_or(\"\", |s| &**s);\n-        compare_names(lhs, rhs)\n+        let lhs = i1.name.unwrap_or(kw::Invalid).as_str();\n+        let rhs = i2.name.unwrap_or(kw::Invalid).as_str();\n+        compare_names(&lhs, &rhs)\n     }\n \n     if cx.shared.sort_modules_alphabetically {\n@@ -2191,7 +2191,7 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                     add = add,\n                     stab = stab.unwrap_or_else(String::new),\n                     unsafety_flag = unsafety_flag,\n-                    href = item_path(myitem.type_(), myitem.name.as_ref().unwrap()),\n+                    href = item_path(myitem.type_(), &myitem.name.unwrap().as_str()),\n                     title = [full_path(cx, myitem), myitem.type_().to_string()]\n                         .iter()\n                         .filter_map(|s| if !s.is_empty() { Some(s.as_str()) } else { None })\n@@ -2623,7 +2623,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n \n     fn trait_item(w: &mut Buffer, cx: &Context, m: &clean::Item, t: &clean::Item, cache: &Cache) {\n         let name = m.name.as_ref().unwrap();\n-        info!(\"Documenting {} on {}\", name, t.name.as_deref().unwrap_or_default());\n+        info!(\"Documenting {} on {:?}\", name, t.name);\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n         write!(w, \"<h3 id=\\\"{id}\\\" class=\\\"method\\\"><code>\", id = id,);\n@@ -2951,7 +2951,7 @@ fn render_assoc_item(\n             AssocItemLink::GotoSource(did, provided_methods) => {\n                 // We're creating a link from an impl-item to the corresponding\n                 // trait-item and need to map the anchored type accordingly.\n-                let ty = if provided_methods.contains(name) {\n+                let ty = if provided_methods.contains(&*name.as_str()) {\n                     ItemType::Method\n                 } else {\n                     ItemType::TyMethod\n@@ -3434,10 +3434,7 @@ fn render_assoc_items(\n     what: AssocItemRender<'_>,\n     cache: &Cache,\n ) {\n-    info!(\n-        \"Documenting associated items of {}\",\n-        containing_item.name.as_deref().unwrap_or_default()\n-    );\n+    info!(\"Documenting associated items of {:?}\", containing_item.name);\n     let v = match cache.impls.get(&it) {\n         Some(v) => v,\n         None => return,\n@@ -4139,7 +4136,7 @@ fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer, cache: &Ca\n                 ty: \\\"{ty}\\\", \\\n                 relpath: \\\"{path}\\\"\\\n             }};</script>\",\n-        name = it.name.as_ref().map(|x| &x[..]).unwrap_or(\"\"),\n+        name = it.name.unwrap_or(kw::Invalid),\n         ty = it.type_(),\n         path = relpath\n     );"}, {"sha": "49de4c6d2e753b5f484deb3087a962c65c8e0030", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "patch": "@@ -33,7 +33,7 @@ impl JsonRenderer {\n             _ => Some(Item {\n                 id: def_id.into(),\n                 crate_id: def_id.krate.as_u32(),\n-                name,\n+                name: name.map(|sym| sym.to_string()),\n                 source: self.convert_span(source),\n                 visibility: visibility.into(),\n                 docs: attrs.collapsed_doc_value().unwrap_or_default(),"}, {"sha": "3ec2d4b7c51bd4c026dec5dc80c3eaa5bdce4fda", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16904fecf0ad1c46f9c11c6b193bdbb6421bf17/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=a16904fecf0ad1c46f9c11c6b193bdbb6421bf17", "patch": "@@ -668,7 +668,7 @@ fn resolve_associated_trait_item(\n                     // Give precedence to methods that were overridden\n                     if !impl_.provided_trait_methods.contains(&*item_name.as_str()) {\n                         let mut items = impl_.items.into_iter().filter_map(|assoc| {\n-                            if assoc.name.as_deref() != Some(&*item_name.as_str()) {\n+                            if assoc.name != Some(item_name) {\n                                 return None;\n                             }\n                             let kind = assoc\n@@ -1942,7 +1942,14 @@ fn privacy_error(\n     dox: &str,\n     link_range: Option<Range<usize>>,\n ) {\n-    let item_name = item.name.as_deref().unwrap_or(\"<unknown>\");\n+    let sym;\n+    let item_name = match item.name {\n+        Some(name) => {\n+            sym = name.as_str();\n+            &*sym\n+        }\n+        None => \"<unknown>\",\n+    };\n     let msg =\n         format!(\"public documentation for `{}` links to private item `{}`\", item_name, path_str);\n "}]}