{"sha": "c74a3553ae2b50d6ec11ff660240fe7ba882c65e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NGEzNTUzYWUyYjUwZDZlYzExZmY2NjAyNDBmZTdiYTg4MmM2NWU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-16T22:18:00Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-16T19:07:26Z"}, "message": "Filter generics.", "tree": {"sha": "4c29217fbc47930898311670d37227bef74f18cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c29217fbc47930898311670d37227bef74f18cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74a3553ae2b50d6ec11ff660240fe7ba882c65e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74a3553ae2b50d6ec11ff660240fe7ba882c65e", "html_url": "https://github.com/rust-lang/rust/commit/c74a3553ae2b50d6ec11ff660240fe7ba882c65e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74a3553ae2b50d6ec11ff660240fe7ba882c65e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4223db76b95aab17bd00c5fe0446e70ab60aab2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4223db76b95aab17bd00c5fe0446e70ab60aab2a", "html_url": "https://github.com/rust-lang/rust/commit/4223db76b95aab17bd00c5fe0446e70ab60aab2a"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "1dd5aac926740c1998a470bb89fce5ef7bcdbd7a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c74a3553ae2b50d6ec11ff660240fe7ba882c65e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74a3553ae2b50d6ec11ff660240fe7ba882c65e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c74a3553ae2b50d6ec11ff660240fe7ba882c65e", "patch": "@@ -871,6 +871,41 @@ fn should_encode_variances(def_kind: DefKind) -> bool {\n     }\n }\n \n+fn should_encode_generics(def_kind: DefKind) -> bool {\n+    match def_kind {\n+        DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Enum\n+        | DefKind::Variant\n+        | DefKind::Trait\n+        | DefKind::TyAlias\n+        | DefKind::ForeignTy\n+        | DefKind::TraitAlias\n+        | DefKind::AssocTy\n+        | DefKind::Fn\n+        | DefKind::Const\n+        | DefKind::Static\n+        | DefKind::Ctor(..)\n+        | DefKind::AssocFn\n+        | DefKind::AssocConst\n+        | DefKind::AnonConst\n+        | DefKind::OpaqueTy\n+        | DefKind::Impl\n+        | DefKind::Closure\n+        | DefKind::Generator => true,\n+        DefKind::Mod\n+        | DefKind::Field\n+        | DefKind::ForeignMod\n+        | DefKind::TyParam\n+        | DefKind::ConstParam\n+        | DefKind::Macro(..)\n+        | DefKind::Use\n+        | DefKind::LifetimeParam\n+        | DefKind::GlobalAsm\n+        | DefKind::ExternCrate => false,\n+    }\n+}\n+\n impl EncodeContext<'a, 'tcx> {\n     fn encode_def_ids(&mut self) {\n         if self.is_proc_macro {\n@@ -903,12 +938,14 @@ impl EncodeContext<'a, 'tcx> {\n                 let v = self.tcx.variances_of(def_id);\n                 record!(self.tables.variances[def_id] <- v);\n             }\n-            let g = tcx.generics_of(def_id);\n-            record!(self.tables.generics[def_id] <- g);\n-            record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));\n-            let inferred_outlives = self.tcx.inferred_outlives_of(def_id);\n-            if !inferred_outlives.is_empty() {\n-                record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);\n+            if should_encode_generics(def_kind) {\n+                let g = tcx.generics_of(def_id);\n+                record!(self.tables.generics[def_id] <- g);\n+                record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));\n+                let inferred_outlives = self.tcx.inferred_outlives_of(def_id);\n+                if !inferred_outlives.is_empty() {\n+                    record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);\n+                }\n             }\n         }\n         let inherent_impls = tcx.crate_inherent_impls(LOCAL_CRATE);"}]}