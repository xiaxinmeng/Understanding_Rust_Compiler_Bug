{"sha": "59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YzBmNTkxM2RkYzJmNjZjMWZmOGFiNjEyZjcwMjdlMzhjODVhNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-29T15:02:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-29T15:02:39Z"}, "message": "Auto merge of #51133 - spastorino:make_borrowck_use_output, r=nikomatsakis\n\nMake borrowck use polonius output", "tree": {"sha": "41fac7fde766c9449fad1890004abc958884d49c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41fac7fde766c9449fad1890004abc958884d49c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "html_url": "https://github.com/rust-lang/rust/commit/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "889d8dcaa7546acf5b2f406b338caa708a8d93f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/889d8dcaa7546acf5b2f406b338caa708a8d93f8", "html_url": "https://github.com/rust-lang/rust/commit/889d8dcaa7546acf5b2f406b338caa708a8d93f8"}, {"sha": "c3d688962d2940a033f4b4df85b8ab8417981210", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d688962d2940a033f4b4df85b8ab8417981210", "html_url": "https://github.com/rust-lang/rust/commit/c3d688962d2940a033f4b4df85b8ab8417981210"}], "stats": {"total": 213, "additions": 139, "deletions": 74}, "files": [{"sha": "d61f007b6a5abd09dc6692589bb22cbc492cba7f", "filename": "src/Cargo.lock", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "patch": "@@ -557,6 +557,11 @@ dependencies = [\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"datafrog\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"debug_unreachable\"\n version = \"0.1.1\"\n@@ -1450,8 +1455,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"polonius-engine\"\n-version = \"0.1.1\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"datafrog 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"precomputed-hash\"\n@@ -1775,7 +1784,7 @@ dependencies = [\n  \"jobserver 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"polonius-engine 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"polonius-engine 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -2159,10 +2168,11 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"polonius-engine 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"polonius-engine 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -3069,6 +3079,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum crypto-hash 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09de9ee0fc255ace04c7fa0763c9395a945c37c8292bb554f8d48361d1dcf1b4\"\n \"checksum curl 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aaf20bbe084f285f215eef2165feed70d6b75ba29cad24469badb853a4a287d0\"\n \"checksum curl-sys 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71c63a540a9ee4e15e56c3ed9b11a2f121239b9f6d7b7fe30f616e048148df9a\"\n+\"checksum datafrog 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"16d724bf4ffe77cdceeecd461009b5f8d9e23c5d645d68bedb4586bf43e7e142\"\n \"checksum debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a032eac705ca39214d169f83e3d3da290af06d8d1d344d1baad2fd002dca4b3\"\n \"checksum derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ceed73957c449214f8440eec8ad7fa282b67dc9eacbb24a3085b15d60397a17a\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n@@ -3162,7 +3173,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum phf_generator 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b07ffcc532ccc85e3afc45865469bf5d9e4ef5bfcf9622e3cfe80c2d275ec03\"\n \"checksum phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07e24b0ca9643bdecd0632f2b3da6b1b89bbb0030e0b992afc1113b23a7bc2f2\"\n \"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n-\"checksum polonius-engine 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6201ffe79e3da53bd065fbec2a9b391e5a0dc21038b39bb300612ddc658eb7ee\"\n+\"checksum polonius-engine 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9385a6d8f8ff6fd7e48a803c6a77fb89cc929dc7e2af6bf972494bbc8ff8b9e4\"\n \"checksum precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n \"checksum pretty_assertions 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a029430f0d744bc3d15dd474d591bed2402b645d024583082b9f63bb936dac6\"\n \"checksum proc-macro2 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49b6a521dc81b643e9a51e0d1cf05df46d5a2f3c0280ea72bcb68276ba64a118\""}, {"sha": "df68bf1fd9aabe98c09b7977de39183ee745b971", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "patch": "@@ -16,7 +16,7 @@ graphviz = { path = \"../libgraphviz\" }\n jobserver = \"0.1\"\n lazy_static = \"1.0.0\"\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n-polonius-engine = \"0.1.1\"\n+polonius-engine = \"0.4.0\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "755b4af1a3aed064f5199c739e8b93d8da6f4ccb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "patch": "@@ -1296,6 +1296,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n                        \"dump facts from NLL analysis into side files\"),\n     disable_nll_user_type_assert: bool = (false, parse_bool, [UNTRACKED],\n         \"disable user provided type assertion in NLL\"),\n+    polonius: bool = (false, parse_bool, [UNTRACKED],\n+        \"enable polonius-based borrow-checker\"),\n     codegen_time_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"generate a graphical HTML report of time spent in codegen and LLVM\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "512ab53f401a6910bea2144f699af0a91de011cd", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "patch": "@@ -11,10 +11,11 @@ crate-type = [\"dylib\"]\n [dependencies]\n arena = { path = \"../libarena\" }\n bitflags = \"1.0\"\n+either = \"1.5.0\"\n graphviz = { path = \"../libgraphviz\" }\n log = \"0.4\"\n log_settings = \"0.1.1\"\n-polonius-engine = \"0.1.1\"\n+polonius-engine = \"0.4.0\"\n rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "5631356dc1e903cca4493278d1c5390856a5f48e", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "patch": "@@ -14,15 +14,22 @@\n //! but is not as ugly as it is right now.\n \n use rustc::mir::{BasicBlock, Location};\n+use rustc::ty::RegionVid;\n use rustc_data_structures::indexed_set::Iter;\n \n-use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n+use borrow_check::location::LocationIndex;\n+\n+use polonius_engine::Output;\n+\n+use dataflow::move_paths::indexes::BorrowIndex;\n+use dataflow::move_paths::HasMoveData;\n+use dataflow::Borrows;\n use dataflow::{EverInitializedPlaces, MovingOutStatements};\n-use dataflow::{Borrows};\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n-use dataflow::move_paths::HasMoveData;\n-use dataflow::move_paths::indexes::BorrowIndex;\n+use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n+use either::Either;\n use std::fmt;\n+use std::rc::Rc;\n \n // (forced to be `pub` due to its use as an associated type below.)\n crate struct Flows<'b, 'gcx: 'tcx, 'tcx: 'b> {\n@@ -31,6 +38,9 @@ crate struct Flows<'b, 'gcx: 'tcx, 'tcx: 'b> {\n     pub uninits: FlowAtLocation<MaybeUninitializedPlaces<'b, 'gcx, 'tcx>>,\n     pub move_outs: FlowAtLocation<MovingOutStatements<'b, 'gcx, 'tcx>>,\n     pub ever_inits: FlowAtLocation<EverInitializedPlaces<'b, 'gcx, 'tcx>>,\n+\n+    /// Polonius Output\n+    pub polonius_output: Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex>>>,\n }\n \n impl<'b, 'gcx, 'tcx> Flows<'b, 'gcx, 'tcx> {\n@@ -40,18 +50,27 @@ impl<'b, 'gcx, 'tcx> Flows<'b, 'gcx, 'tcx> {\n         uninits: FlowAtLocation<MaybeUninitializedPlaces<'b, 'gcx, 'tcx>>,\n         move_outs: FlowAtLocation<MovingOutStatements<'b, 'gcx, 'tcx>>,\n         ever_inits: FlowAtLocation<EverInitializedPlaces<'b, 'gcx, 'tcx>>,\n+        polonius_output: Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex>>>,\n     ) -> Self {\n         Flows {\n             borrows,\n             inits,\n             uninits,\n             move_outs,\n             ever_inits,\n+            polonius_output,\n         }\n     }\n \n-    crate fn borrows_in_scope(&self) -> impl Iterator<Item = BorrowIndex> + '_ {\n-        self.borrows.iter_incoming()\n+    crate fn borrows_in_scope(\n+        &self,\n+        location: LocationIndex,\n+    ) -> impl Iterator<Item = BorrowIndex> + '_ {\n+        if let Some(ref polonius) = self.polonius_output {\n+            Either::Left(polonius.errors_at(location).iter().cloned())\n+        } else {\n+            Either::Right(self.borrows.iter_incoming())\n+        }\n     }\n \n     crate fn with_outgoing_borrows(&self, op: impl FnOnce(Iter<BorrowIndex>)) {\n@@ -66,7 +85,7 @@ macro_rules! each_flow {\n         FlowAtLocation::$meth(&mut $this.uninits, $arg);\n         FlowAtLocation::$meth(&mut $this.move_outs, $arg);\n         FlowAtLocation::$meth(&mut $this.ever_inits, $arg);\n-    }\n+    };\n }\n \n impl<'b, 'gcx, 'tcx> FlowsAtLocation for Flows<'b, 'gcx, 'tcx> {\n@@ -134,8 +153,7 @@ impl<'b, 'gcx, 'tcx> fmt::Display for Flows<'b, 'gcx, 'tcx> {\n                 s.push_str(\", \");\n             };\n             saw_one = true;\n-            let move_path =\n-                &self.uninits.operator().move_data().move_paths[mpi_uninit];\n+            let move_path = &self.uninits.operator().move_data().move_paths[mpi_uninit];\n             s.push_str(&format!(\"{}\", move_path));\n         });\n         s.push_str(\"] \");\n@@ -159,8 +177,7 @@ impl<'b, 'gcx, 'tcx> fmt::Display for Flows<'b, 'gcx, 'tcx> {\n                 s.push_str(\", \");\n             };\n             saw_one = true;\n-            let ever_init =\n-                &self.ever_inits.operator().move_data().inits[mpi_ever_init];\n+            let ever_init = &self.ever_inits.operator().move_data().inits[mpi_ever_init];\n             s.push_str(&format!(\"{:?}\", ever_init));\n         });\n         s.push_str(\"]\");"}, {"sha": "9bfba219ccd7116e820683cd70981b5e4290f593", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "patch": "@@ -198,7 +198,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let borrow_set = Rc::new(BorrowSet::build(tcx, mir));\n \n     // If we are in non-lexical mode, compute the non-lexical lifetimes.\n-    let (regioncx, opt_closure_req) = nll::compute_regions(\n+    let (regioncx, polonius_output, opt_closure_req) = nll::compute_regions(\n         infcx,\n         def_id,\n         free_regions,\n@@ -259,6 +259,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         flow_uninits,\n         flow_move_outs,\n         flow_ever_inits,\n+        polonius_output,\n     );\n \n     mbcx.analyze_results(&mut state); // entry point for DataflowResultsConsumer\n@@ -936,6 +937,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let mut error_reported = false;\n         let tcx = self.tcx;\n         let mir = self.mir;\n+        let location_table = &LocationTable::new(mir);\n+        let location = location_table.start_index(context.loc);\n         let borrow_set = self.borrow_set.clone();\n         each_borrow_involving_path(\n             self,\n@@ -944,7 +947,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             context,\n             (sd, place_span.0),\n             &borrow_set,\n-            flow_state.borrows_in_scope(),\n+            flow_state.borrows_in_scope(location),\n             |this, borrow_index, borrow|\n             match (rw, borrow.kind) {\n                 // Obviously an activation is compatible with its own"}, {"sha": "ec1f3dbaeebf5aa6b768257bc8e8974e2d8b52b9", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 84, "deletions": 55, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n use borrow_check::borrow_set::BorrowSet;\n-use borrow_check::location::LocationTable;\n+use borrow_check::location::{LocationIndex, LocationTable};\n use borrow_check::nll::facts::AllFactsExt;\n+use dataflow::indexes::BorrowIndex;\n use dataflow::move_paths::MoveData;\n use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;\n@@ -23,22 +24,24 @@ use std::collections::BTreeSet;\n use std::fmt::Debug;\n use std::io;\n use std::path::PathBuf;\n+use std::rc::Rc;\n use transform::MirSource;\n use util::liveness::{LivenessResults, LocalSet};\n \n use self::mir_util::PassWhere;\n+use polonius_engine::{Algorithm, Output};\n use util as mir_util;\n use util::pretty::{self, ALIGN};\n \n mod constraint_generation;\n pub mod explain_borrow;\n mod facts;\n+mod invalidation;\n crate mod region_infer;\n mod renumber;\n mod subtype_constraint_generation;\n crate mod type_check;\n mod universal_regions;\n-mod invalidation;\n \n use self::facts::AllFacts;\n use self::region_infer::RegionInferenceContext;\n@@ -83,6 +86,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     borrow_set: &BorrowSet<'tcx>,\n ) -> (\n     RegionInferenceContext<'tcx>,\n+    Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex>>>,\n     Option<ClosureRegionRequirements<'gcx>>,\n ) {\n     // Run the MIR type-checker.\n@@ -98,7 +102,9 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n         move_data,\n     );\n \n-    let mut all_facts = if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n+    let mut all_facts = if infcx.tcx.sess.opts.debugging_opts.nll_facts\n+        || infcx.tcx.sess.opts.debugging_opts.polonius\n+    {\n         Some(AllFacts::default())\n     } else {\n         None\n@@ -113,8 +119,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     // Create the region inference context, taking ownership of the region inference\n     // data that was contained in `infcx`.\n     let var_origins = infcx.take_region_var_origins();\n-    let mut regioncx =\n-        RegionInferenceContext::new(var_origins, universal_regions, mir);\n+    let mut regioncx = RegionInferenceContext::new(var_origins, universal_regions, mir);\n \n     // Generate various constraints.\n     subtype_constraint_generation::generate(\n@@ -138,15 +143,28 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n         location_table,\n         &mir,\n         def_id,\n-        borrow_set\n+        borrow_set,\n     );\n \n     // Dump facts if requested.\n-    if let Some(all_facts) = all_facts {\n-        let def_path = infcx.tcx.hir.def_path(def_id);\n-        let dir_path = PathBuf::from(\"nll-facts\").join(def_path.to_filename_friendly_no_crate());\n-        all_facts.write_to_dir(dir_path, location_table).unwrap();\n-    }\n+    let polonius_output = all_facts.and_then(|all_facts| {\n+        if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n+            let def_path = infcx.tcx.hir.def_path(def_id);\n+            let dir_path =\n+                PathBuf::from(\"nll-facts\").join(def_path.to_filename_friendly_no_crate());\n+            all_facts.write_to_dir(dir_path, location_table).unwrap();\n+        }\n+\n+        if infcx.tcx.sess.opts.debugging_opts.polonius {\n+            Some(Rc::new(Output::compute(\n+                &all_facts,\n+                Algorithm::DatafrogOpt,\n+                false,\n+            )))\n+        } else {\n+            None\n+        }\n+    });\n \n     // Solve the region constraints.\n     let closure_region_requirements = regioncx.solve(infcx, &mir, def_id);\n@@ -166,7 +184,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     // information\n     dump_annotation(infcx, &mir, def_id, &regioncx, &closure_region_requirements);\n \n-    (regioncx, closure_region_requirements)\n+    (regioncx, polonius_output, closure_region_requirements)\n }\n \n fn dump_mir_results<'a, 'gcx, 'tcx>(\n@@ -181,7 +199,8 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n         return;\n     }\n \n-    let regular_liveness_per_location: FxHashMap<_, _> = mir.basic_blocks()\n+    let regular_liveness_per_location: FxHashMap<_, _> = mir\n+        .basic_blocks()\n         .indices()\n         .flat_map(|bb| {\n             let mut results = vec![];\n@@ -194,7 +213,8 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n         })\n         .collect();\n \n-    let drop_liveness_per_location: FxHashMap<_, _> = mir.basic_blocks()\n+    let drop_liveness_per_location: FxHashMap<_, _> = mir\n+        .basic_blocks()\n         .indices()\n         .flat_map(|bb| {\n             let mut results = vec![];\n@@ -207,47 +227,55 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n         })\n         .collect();\n \n-    mir_util::dump_mir(infcx.tcx, None, \"nll\", &0, source, mir, |pass_where, out| {\n-        match pass_where {\n-            // Before the CFG, dump out the values for each region variable.\n-            PassWhere::BeforeCFG => {\n-                regioncx.dump_mir(out)?;\n-\n-                if let Some(closure_region_requirements) = closure_region_requirements {\n-                    writeln!(out, \"|\")?;\n-                    writeln!(out, \"| Free Region Constraints\")?;\n-                    for_each_region_constraint(closure_region_requirements, &mut |msg| {\n-                        writeln!(out, \"| {}\", msg)\n-                    })?;\n+    mir_util::dump_mir(\n+        infcx.tcx,\n+        None,\n+        \"nll\",\n+        &0,\n+        source,\n+        mir,\n+        |pass_where, out| {\n+            match pass_where {\n+                // Before the CFG, dump out the values for each region variable.\n+                PassWhere::BeforeCFG => {\n+                    regioncx.dump_mir(out)?;\n+\n+                    if let Some(closure_region_requirements) = closure_region_requirements {\n+                        writeln!(out, \"|\")?;\n+                        writeln!(out, \"| Free Region Constraints\")?;\n+                        for_each_region_constraint(closure_region_requirements, &mut |msg| {\n+                            writeln!(out, \"| {}\", msg)\n+                        })?;\n+                    }\n+                }\n+\n+                // Before each basic block, dump out the values\n+                // that are live on entry to the basic block.\n+                PassWhere::BeforeBlock(bb) => {\n+                    let s = live_variable_set(&liveness.regular.ins[bb], &liveness.drop.ins[bb]);\n+                    writeln!(out, \"    | Live variables on entry to {:?}: {}\", bb, s)?;\n                 }\n-            }\n \n-            // Before each basic block, dump out the values\n-            // that are live on entry to the basic block.\n-            PassWhere::BeforeBlock(bb) => {\n-                let s = live_variable_set(&liveness.regular.ins[bb], &liveness.drop.ins[bb]);\n-                writeln!(out, \"    | Live variables on entry to {:?}: {}\", bb, s)?;\n-            }\n+                PassWhere::BeforeLocation(location) => {\n+                    let s = live_variable_set(\n+                        &regular_liveness_per_location[&location],\n+                        &drop_liveness_per_location[&location],\n+                    );\n+                    writeln!(\n+                        out,\n+                        \"{:ALIGN$} | Live variables on entry to {:?}: {}\",\n+                        \"\",\n+                        location,\n+                        s,\n+                        ALIGN = ALIGN\n+                    )?;\n+                }\n \n-            PassWhere::BeforeLocation(location) => {\n-                let s = live_variable_set(\n-                    &regular_liveness_per_location[&location],\n-                    &drop_liveness_per_location[&location],\n-                );\n-                writeln!(\n-                    out,\n-                    \"{:ALIGN$} | Live variables on entry to {:?}: {}\",\n-                    \"\",\n-                    location,\n-                    s,\n-                    ALIGN = ALIGN\n-                )?;\n+                PassWhere::AfterLocation(_) | PassWhere::AfterCFG => {}\n             }\n-\n-            PassWhere::AfterLocation(_) | PassWhere::AfterCFG => {}\n-        }\n-        Ok(())\n-    });\n+            Ok(())\n+        },\n+    );\n \n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = do catch {\n@@ -278,7 +306,8 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n     // better.\n \n     if let Some(closure_region_requirements) = closure_region_requirements {\n-        let mut err = tcx.sess\n+        let mut err = tcx\n+            .sess\n             .diagnostic()\n             .span_note_diag(mir.span, \"External requirements\");\n \n@@ -298,7 +327,8 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n \n         err.emit();\n     } else {\n-        let mut err = tcx.sess\n+        let mut err = tcx\n+            .sess\n             .diagnostic()\n             .span_note_diag(mir.span, \"No external requirements\");\n         regioncx.annotate(&mut err);\n@@ -317,8 +347,7 @@ fn for_each_region_constraint(\n         };\n         with_msg(&format!(\n             \"where {:?}: {:?}\",\n-            subject,\n-            req.outlived_free_region,\n+            subject, req.outlived_free_region,\n         ))?;\n     }\n     Ok(())"}, {"sha": "34eb444fdc0cbf59a0ec1d32df22a1247214ce11", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "patch": "@@ -38,6 +38,7 @@ extern crate arena;\n #[macro_use]\n extern crate bitflags;\n #[macro_use] extern crate log;\n+extern crate either;\n extern crate graphviz as dot;\n extern crate polonius_engine;\n #[macro_use]"}, {"sha": "a4eb784fa7d90f45974fd37f78383aa428702341", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=59c0f5913ddc2f66c1ff8ab612f7027e38c85a6d", "patch": "@@ -73,6 +73,7 @@ static WHITELIST: &'static [Crate] = &[\n     Crate(\"crossbeam-deque\"),\n     Crate(\"crossbeam-epoch\"),\n     Crate(\"crossbeam-utils\"),\n+    Crate(\"datafrog\"),\n     Crate(\"either\"),\n     Crate(\"ena\"),\n     Crate(\"env_logger\"),"}]}