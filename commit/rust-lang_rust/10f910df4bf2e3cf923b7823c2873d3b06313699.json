{"sha": "10f910df4bf2e3cf923b7823c2873d3b06313699", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZjkxMGRmNGJmMmUzY2Y5MjNiNzgyM2MyODczZDNiMDYzMTM2OTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-16T17:31:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-16T17:31:16Z"}, "message": "Merge #3172\n\n3172: 1-based columns r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4efa37ee370248da78eb2d63f1b0c9221b4d90f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4efa37ee370248da78eb2d63f1b0c9221b4d90f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10f910df4bf2e3cf923b7823c2873d3b06313699", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeSXxkCRBK7hj4Ov3rIwAAdHIIAHgiDDjey6xyCLLx86JOA9UB\nYEXfOBHqygcDK1u0Vgicj+H+EIU7Fc6Y2XIOWFauL3L4gFTZYzG/j61nSaRQA7Vv\nBu0AGwVv+6XdSdQqt54Roo6lCG//tI0LexbrMyz0yxYqc43Gj2DMDlSZxb4hkpV8\nYOAxCe9eg1BeI4Ik3zR1FeX2aRs+msNGv5yLqYsY66VnZAyjQRMBcjQQ6OwIp954\nWdyac+0T5t2EkMeUdz7QKrXkWpw5ikSpzKf3PZWmDka1H7N3ppG01qp5Y0g9NyyG\nZVcPliP9DKmXfbeKAc5PQj1NZpxG0KKiECmzsEFpcutDVtZjMbch4rqwJHfiMAc=\n=vlfn\n-----END PGP SIGNATURE-----\n", "payload": "tree 4efa37ee370248da78eb2d63f1b0c9221b4d90f6\nparent 742b3b5744fbca1a5587e2898cd5b74d55853a47\nparent ca7e9ab0da4f9a781db1857cd11951d296df24a9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581874276 +0000\ncommitter GitHub <noreply@github.com> 1581874276 +0000\n\nMerge #3172\n\n3172: 1-based columns r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10f910df4bf2e3cf923b7823c2873d3b06313699", "html_url": "https://github.com/rust-lang/rust/commit/10f910df4bf2e3cf923b7823c2873d3b06313699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10f910df4bf2e3cf923b7823c2873d3b06313699/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742b3b5744fbca1a5587e2898cd5b74d55853a47", "url": "https://api.github.com/repos/rust-lang/rust/commits/742b3b5744fbca1a5587e2898cd5b74d55853a47", "html_url": "https://github.com/rust-lang/rust/commit/742b3b5744fbca1a5587e2898cd5b74d55853a47"}, {"sha": "ca7e9ab0da4f9a781db1857cd11951d296df24a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7e9ab0da4f9a781db1857cd11951d296df24a9", "html_url": "https://github.com/rust-lang/rust/commit/ca7e9ab0da4f9a781db1857cd11951d296df24a9"}], "stats": {"total": 86, "additions": 54, "deletions": 32}, "files": [{"sha": "4835a68ce9cd0c8351388367eafa1d0de4117e6a", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/10f910df4bf2e3cf923b7823c2873d3b06313699/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f910df4bf2e3cf923b7823c2873d3b06313699/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=10f910df4bf2e3cf923b7823c2873d3b06313699", "patch": "@@ -2,6 +2,7 @@\n \n use std::{\n     path::{Path, PathBuf},\n+    str::FromStr,\n     sync::Arc,\n     time::Instant,\n };\n@@ -14,9 +15,30 @@ use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FilePosition, LineCol};\n \n use crate::Result;\n \n+pub(crate) struct Position {\n+    path: PathBuf,\n+    line: u32,\n+    column: u32,\n+}\n+\n+impl FromStr for Position {\n+    type Err = Box<dyn std::error::Error + Send + Sync>;\n+    fn from_str(s: &str) -> Result<Self> {\n+        let (path_line, column) = rsplit_at_char(s, ':')?;\n+        let (path, line) = rsplit_at_char(path_line, ':')?;\n+        Ok(Position { path: path.into(), line: line.parse()?, column: column.parse()? })\n+    }\n+}\n+\n+fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n+    let idx = s.rfind(':').ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n+    Ok((&s[..idx], &s[idx + 1..]))\n+}\n+\n pub(crate) enum Op {\n     Highlight { path: PathBuf },\n-    Complete { path: PathBuf, line: u32, column: u32 },\n+    Complete(Position),\n+    GotoDef(Position),\n }\n \n pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n@@ -31,7 +53,7 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n     let file_id = {\n         let path = match &op {\n             Op::Highlight { path } => path,\n-            Op::Complete { path, .. } => path,\n+            Op::Complete(pos) | Op::GotoDef(pos) => &pos.path,\n         };\n         let path = std::env::current_dir()?.join(path).canonicalize()?;\n         roots\n@@ -51,7 +73,7 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n             .ok_or_else(|| format!(\"Can't find {:?}\", path))?\n     };\n \n-    match op {\n+    match &op {\n         Op::Highlight { .. } => {\n             let res = do_work(&mut host, file_id, |analysis| {\n                 analysis.diagnostics(file_id).unwrap();\n@@ -61,16 +83,30 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n                 println!(\"\\n{}\", res);\n             }\n         }\n-        Op::Complete { line, column, .. } => {\n+        Op::Complete(pos) | Op::GotoDef(pos) => {\n+            let is_completion = match op {\n+                Op::Complete(..) => true,\n+                _ => false,\n+            };\n+\n             let offset = host\n                 .analysis()\n                 .file_line_index(file_id)?\n-                .offset(LineCol { line, col_utf16: column });\n+                .offset(LineCol { line: pos.line - 1, col_utf16: pos.column });\n             let file_postion = FilePosition { file_id, offset };\n \n-            let res = do_work(&mut host, file_id, |analysis| analysis.completions(file_postion));\n-            if verbose {\n-                println!(\"\\n{:#?}\", res);\n+            if is_completion {\n+                let res =\n+                    do_work(&mut host, file_id, |analysis| analysis.completions(file_postion));\n+                if verbose {\n+                    println!(\"\\n{:#?}\", res);\n+                }\n+            } else {\n+                let res =\n+                    do_work(&mut host, file_id, |analysis| analysis.goto_definition(file_postion));\n+                if verbose {\n+                    println!(\"\\n{:#?}\", res);\n+                }\n             }\n         }\n     }"}, {"sha": "750cbab866a15b1cb9e841324766da2a1899623f", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/10f910df4bf2e3cf923b7823c2873d3b06313699/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f910df4bf2e3cf923b7823c2873d3b06313699/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=10f910df4bf2e3cf923b7823c2873d3b06313699", "patch": "@@ -132,25 +132,16 @@ fn main() -> Result<()> {\n             }\n             let verbose = matches.contains([\"-v\", \"--verbose\"]);\n             let path: String = matches.opt_value_from_str(\"--path\")?.unwrap_or_default();\n-            let highlight_path = matches.opt_value_from_str(\"--highlight\")?;\n-            let complete_path = matches.opt_value_from_str(\"--complete\")?;\n-            if highlight_path.is_some() && complete_path.is_some() {\n-                panic!(\"either --highlight or --complete must be set, not both\")\n-            }\n-            let op = if let Some(path) = highlight_path {\n-                let path: String = path;\n-                analysis_bench::Op::Highlight { path: path.into() }\n-            } else if let Some(path_line_col) = complete_path {\n-                let path_line_col: String = path_line_col;\n-                let (path_line, column) = rsplit_at_char(path_line_col.as_str(), ':')?;\n-                let (path, line) = rsplit_at_char(path_line, ':')?;\n-                analysis_bench::Op::Complete {\n-                    path: path.into(),\n-                    line: line.parse()?,\n-                    column: column.parse()?,\n-                }\n-            } else {\n-                panic!(\"either --highlight or --complete must be set\")\n+            let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n+            let complete_path: Option<String> = matches.opt_value_from_str(\"--complete\")?;\n+            let goto_def_path: Option<String> = matches.opt_value_from_str(\"--goto-def\")?;\n+            let op = match (highlight_path, complete_path, goto_def_path) {\n+                (Some(path), None, None) => analysis_bench::Op::Highlight { path: path.into() },\n+                (None, Some(position), None) => analysis_bench::Op::Complete(position.parse()?),\n+                (None, None, Some(position)) => analysis_bench::Op::GotoDef(position.parse()?),\n+                _ => panic!(\n+                    \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n+                ),\n             };\n             matches.finish().or_else(handle_extra_flags)?;\n             analysis_bench::run(verbose, path.as_ref(), op)?;\n@@ -183,8 +174,3 @@ fn read_stdin() -> Result<String> {\n     std::io::stdin().read_to_string(&mut buff)?;\n     Ok(buff)\n }\n-\n-fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n-    let idx = s.rfind(':').ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n-    Ok((&s[..idx], &s[idx + 1..]))\n-}"}]}