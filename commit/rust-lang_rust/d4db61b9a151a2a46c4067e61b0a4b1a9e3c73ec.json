{"sha": "d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZGI2MWI5YTE1MWEyYTQ2YzQwNjdlNjFiMGE0YjFhOWUzYzczZWM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-29T21:59:18Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-04T18:12:29Z"}, "message": "Resolve the self parameter during type inference", "tree": {"sha": "67eb2ae28096c97ddc57840db39191ba31a1edcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67eb2ae28096c97ddc57840db39191ba31a1edcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec", "html_url": "https://github.com/rust-lang/rust/commit/d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "111126ed3c4f6358e0c833f80226e5192778f749", "url": "https://api.github.com/repos/rust-lang/rust/commits/111126ed3c4f6358e0c833f80226e5192778f749", "html_url": "https://github.com/rust-lang/rust/commit/111126ed3c4f6358e0c833f80226e5192778f749"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "9fdfa0d131238b5f46661babe8c626176892229e", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec", "patch": "@@ -70,6 +70,11 @@ impl Path {\n         self.kind == PathKind::Plain && self.segments.len() == 1\n     }\n \n+    /// `true` if this path is just a standalone `self`\n+    pub fn is_self(&self) -> bool {\n+        self.kind == PathKind::Self_ && self.segments.len() == 0\n+    }\n+\n     /// If this path is a single identifier, like `foo`, return its name.\n     pub fn as_ident(&self) -> Option<&Name> {\n         if self.kind != PathKind::Plain || self.segments.len() > 1 {"}, {"sha": "5ea62a14cfa398c97910baef3801dc3ccb23fcea", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec", "patch": "@@ -496,6 +496,8 @@ impl InferenceResult {\n struct InferenceContext<'a, D: HirDatabase> {\n     db: &'a D,\n     scopes: Arc<FnScopes>,\n+    /// The self param for the current method, if it exists.\n+    self_param: Option<LocalSyntaxPtr>,\n     module: Module,\n     var_unification_table: InPlaceUnificationTable<TypeVarId>,\n     type_of: FxHashMap<LocalSyntaxPtr, Ty>,\n@@ -506,6 +508,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         InferenceContext {\n             type_of: FxHashMap::default(),\n             var_unification_table: InPlaceUnificationTable::new(),\n+            self_param: None, // set during parameter typing\n             db,\n             scopes,\n             module,\n@@ -628,6 +631,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.resolve_ty_as_possible(ty.clone());\n                 return Ok(Some(ty));\n             };\n+        } else if path.is_self() {\n+            // resolve `self` param\n+            let self_param = ctry!(self.self_param);\n+            let ty = ctry!(self.type_of.get(&self_param));\n+            let ty = self.resolve_ty_as_possible(ty.clone());\n+            return Ok(Some(ty));\n         };\n \n         // resolve in module\n@@ -940,8 +949,9 @@ pub fn infer(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<InferenceRe\n                 ctx.new_type_var()\n             };\n             if let Some(self_kw) = self_param.self_kw() {\n-                ctx.type_of\n-                    .insert(LocalSyntaxPtr::new(self_kw.syntax()), self_type);\n+                let self_param = LocalSyntaxPtr::new(self_kw.syntax());\n+                ctx.self_param = Some(self_param);\n+                ctx.type_of.insert(self_param, self_type);\n             }\n         }\n         for param in param_list.params() {"}, {"sha": "0dd61da559f509dc022cd8c9a025b2b544a8f5d7", "filename": "crates/ra_hir/src/ty/tests/data/0007_self.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0007_self.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0007_self.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0007_self.txt?ref=d4db61b9a151a2a46c4067e61b0a4b1a9e3c73ec", "patch": "@@ -1,6 +1,6 @@\n-[50; 54) 'self': [unknown]\n+[50; 54) 'self': &S\n [34; 38) 'self': &S\n [40; 61) '{     ...     }': ()\n [88; 109) '{     ...     }': ()\n-[98; 102) 'self': [unknown]\n+[98; 102) 'self': &[unknown]\n [75; 79) 'self': &[unknown]"}]}