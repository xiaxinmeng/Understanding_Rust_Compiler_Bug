{"sha": "af7daa0daff91f8a58708f2d98f94d49acc28c6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmN2RhYTBkYWZmOTFmOGE1ODcwOGYyZDk4Zjk0ZDQ5YWNjMjhjNmE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-17T06:53:07Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-18T22:32:45Z"}, "message": "rustc: remove some unused UserString and Repr impls.", "tree": {"sha": "015e17a0a97ee1f638580421d1b453d0f104e4d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/015e17a0a97ee1f638580421d1b453d0f104e4d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af7daa0daff91f8a58708f2d98f94d49acc28c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af7daa0daff91f8a58708f2d98f94d49acc28c6a", "html_url": "https://github.com/rust-lang/rust/commit/af7daa0daff91f8a58708f2d98f94d49acc28c6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af7daa0daff91f8a58708f2d98f94d49acc28c6a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b510ea1487286123c00f425b368a8328637ac947", "url": "https://api.github.com/repos/rust-lang/rust/commits/b510ea1487286123c00f425b368a8328637ac947", "html_url": "https://github.com/rust-lang/rust/commit/b510ea1487286123c00f425b368a8328637ac947"}], "stats": {"total": 31, "additions": 3, "deletions": 28}, "files": [{"sha": "7b82b49dadb10bb9d2b150f416a8c0033f283191", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/af7daa0daff91f8a58708f2d98f94d49acc28c6a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7daa0daff91f8a58708f2d98f94d49acc28c6a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=af7daa0daff91f8a58708f2d98f94d49acc28c6a", "patch": "@@ -45,7 +45,7 @@ pub trait Repr {\n }\n \n /// Produces a string suitable for showing to the user.\n-pub trait UserString: Repr {\n+pub trait UserString {\n     fn user_string(&self) -> String;\n }\n \n@@ -296,14 +296,6 @@ impl<'a, T: ?Sized +UserString> UserString for &'a T {\n     }\n }\n \n-impl<T:UserString> UserString for Vec<T> {\n-    fn user_string(&self) -> String {\n-        let strs: Vec<String> =\n-            self.iter().map(|t| t.user_string()).collect();\n-        strs.connect(\", \")\n-    }\n-}\n-\n impl Repr for def::Def {\n     fn repr(&self) -> String {\n         format!(\"{:?}\", *self)\n@@ -475,17 +467,6 @@ impl<'tcx> Repr for ty::TraitDef<'tcx> {\n     }\n }\n \n-impl Repr for ast::TraitItem {\n-    fn repr(&self) -> String {\n-        let kind = match self.node {\n-            ast::ConstTraitItem(..) => \"ConstTraitItem\",\n-            ast::MethodTraitItem(..) => \"MethodTraitItem\",\n-            ast::TypeTraitItem(..) => \"TypeTraitItem\",\n-        };\n-        format!(\"{}({}, id={})\", kind, self.ident, self.id)\n-    }\n-}\n-\n impl Repr for ast::Expr {\n     fn repr(&self) -> String {\n         format!(\"expr({}: {})\", self.id, pprust::expr_to_string(self))\n@@ -794,12 +775,6 @@ impl UserString for ast::Name {\n     }\n }\n \n-impl Repr for ast::Ident {\n-    fn repr(&self) -> String {\n-        token::get_ident(*self).to_string()\n-    }\n-}\n-\n impl Repr for ast::ExplicitSelf_ {\n     fn repr(&self) -> String {\n         format!(\"{:?}\", *self)"}, {"sha": "ec95bfe483c264dcf5e4ef475dfa2128e4e918aa", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af7daa0daff91f8a58708f2d98f94d49acc28c6a/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7daa0daff91f8a58708f2d98f94d49acc28c6a/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=af7daa0daff91f8a58708f2d98f94d49acc28c6a", "patch": "@@ -62,7 +62,7 @@ pub fn trans_impl(ccx: &CrateContext,\n     let _icx = push_ctxt(\"meth::trans_impl\");\n     let tcx = ccx.tcx();\n \n-    debug!(\"trans_impl(name={}, id={})\", name.repr(), id);\n+    debug!(\"trans_impl(name={}, id={})\", name, id);\n \n     let mut v = TransItemVisitor { ccx: ccx };\n "}, {"sha": "4bb9aa495577991f7387ebe1e5797159b1eab3f0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af7daa0daff91f8a58708f2d98f94d49acc28c6a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7daa0daff91f8a58708f2d98f94d49acc28c6a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=af7daa0daff91f8a58708f2d98f94d49acc28c6a", "patch": "@@ -635,7 +635,7 @@ fn convert_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let fty = ty::mk_bare_fn(ccx.tcx, Some(def_id),\n                              ccx.tcx.mk_bare_fn(ty_method.fty.clone()));\n     debug!(\"method {} (id {}) has type {}\",\n-            ident.repr(), id, fty.repr());\n+            ident, id, fty.repr());\n     ccx.tcx.tcache.borrow_mut().insert(def_id,TypeScheme {\n         generics: ty_method.generics.clone(),\n         ty: fty"}]}