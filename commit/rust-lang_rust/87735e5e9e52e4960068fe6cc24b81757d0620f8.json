{"sha": "87735e5e9e52e4960068fe6cc24b81757d0620f8", "node_id": "C_kwDOAAsO6NoAKDg3NzM1ZTVlOWU1MmU0OTYwMDY4ZmU2Y2MyNGI4MTc1N2QwNjIwZjg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-07T13:29:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-07T13:29:58Z"}, "message": "Update item tree test output", "tree": {"sha": "152d0150acde62036461e6d32c66ab765ac45155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/152d0150acde62036461e6d32c66ab765ac45155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87735e5e9e52e4960068fe6cc24b81757d0620f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87735e5e9e52e4960068fe6cc24b81757d0620f8", "html_url": "https://github.com/rust-lang/rust/commit/87735e5e9e52e4960068fe6cc24b81757d0620f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87735e5e9e52e4960068fe6cc24b81757d0620f8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca4baa6e55258bc2a358b2ba4fbceb119342459f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca4baa6e55258bc2a358b2ba4fbceb119342459f", "html_url": "https://github.com/rust-lang/rust/commit/ca4baa6e55258bc2a358b2ba4fbceb119342459f"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "cb3fd9b94a0878414a702afdbbae48433d56e333", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/87735e5e9e52e4960068fe6cc24b81757d0620f8/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87735e5e9e52e4960068fe6cc24b81757d0620f8/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=87735e5e9e52e4960068fe6cc24b81757d0620f8", "patch": "@@ -30,9 +30,9 @@ use crate::{A, B};\n use a::{c, d::{e}};\n         \"#,\n         expect![[r##\"\n-            #![doc = \" file comment\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n-            #![no_std]  // AttrId { is_doc_comment: false, ast_index: 0 }\n-            #![doc = \" another file comment\"]  // AttrId { is_doc_comment: true, ast_index: 1 }\n+            #![doc = \" file comment\"]  // AttrId { ast_index: 0 }\n+            #![no_std]  // AttrId { ast_index: 1 }\n+            #![doc = \" another file comment\"]  // AttrId { ast_index: 2 }\n \n             pub(self) extern crate self as renamed;\n \n@@ -42,7 +42,7 @@ use a::{c, d::{e}};\n \n             pub(self) use globs::*;\n \n-            #[doc = \" docs on import\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n+            #[doc = \" docs on import\"]  // AttrId { ast_index: 0 }\n             pub(self) use crate::{A, B};\n \n             pub(self) use a::{c, d::{e}};\n@@ -67,15 +67,15 @@ extern \"C\" {\n }\n         \"#,\n         expect![[r##\"\n-            #[on_extern_block]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+            #[on_extern_block]  // AttrId { ast_index: 0 }\n             extern \"C\" {\n-                #[on_extern_type]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+                #[on_extern_type]  // AttrId { ast_index: 0 }\n                 pub(self) type ExType;\n \n-                #[on_extern_static]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+                #[on_extern_static]  // AttrId { ast_index: 0 }\n                 pub(self) static EX_STATIC: u8 = _;\n \n-                #[on_extern_fn]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+                #[on_extern_fn]  // AttrId { ast_index: 0 }\n                 // flags = 0x20\n                 pub(self) fn ex_fn() -> ();\n             }\n@@ -116,14 +116,14 @@ enum E {\n         expect![[r##\"\n             pub(self) struct Unit;\n \n-            #[derive(Debug)]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+            #[derive(Debug)]  // AttrId { ast_index: 0 }\n             pub(self) struct Struct {\n-                #[doc = \" fld docs\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n+                #[doc = \" fld docs\"]  // AttrId { ast_index: 0 }\n                 pub(self) fld: (),\n             }\n \n             pub(self) struct Tuple(\n-                #[attr]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+                #[attr]  // AttrId { ast_index: 0 }\n                 pub(self) 0: u8,\n             );\n \n@@ -133,14 +133,14 @@ enum E {\n             }\n \n             pub(self) enum E {\n-                #[doc = \" comment on Unit\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n+                #[doc = \" comment on Unit\"]  // AttrId { ast_index: 0 }\n                 Unit,\n-                #[doc = \" comment on Tuple\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n+                #[doc = \" comment on Tuple\"]  // AttrId { ast_index: 0 }\n                 Tuple(\n                     pub(self) 0: u8,\n                 ),\n                 Struct {\n-                    #[doc = \" comment on a: u8\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n+                    #[doc = \" comment on a: u8\"]  // AttrId { ast_index: 0 }\n                     pub(self) a: u8,\n                 },\n             }\n@@ -171,11 +171,11 @@ trait Tr: SuperTrait + 'lifetime {\n \n             pub(self) const _: Anon = _;\n \n-            #[attr]  // AttrId { is_doc_comment: false, ast_index: 0 }\n-            #[inner_attr_in_fn]  // AttrId { is_doc_comment: false, ast_index: 1 }\n+            #[attr]  // AttrId { ast_index: 0 }\n+            #[inner_attr_in_fn]  // AttrId { ast_index: 1 }\n             // flags = 0x2\n             pub(self) fn f(\n-                #[attr]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+                #[attr]  // AttrId { ast_index: 0 }\n                 arg: u8,\n                 _: (),\n             ) -> ();\n@@ -212,8 +212,8 @@ mod inline {\n mod outline;\n         \"#,\n         expect![[r##\"\n-            #[doc = \" outer\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n-            #[doc = \" inner\"]  // AttrId { is_doc_comment: true, ast_index: 1 }\n+            #[doc = \" outer\"]  // AttrId { ast_index: 0 }\n+            #[doc = \" inner\"]  // AttrId { ast_index: 1 }\n             pub(self) mod inline {\n                 pub(self) use super::*;\n "}]}