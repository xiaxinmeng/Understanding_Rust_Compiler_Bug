{"sha": "e513c1bd314bbeb6295a7a759de8833b52ff854d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MTNjMWJkMzE0YmJlYjYyOTVhN2E3NTlkZTg4MzNiNTJmZjg1NGQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2018-04-21T04:05:13Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2018-04-22T17:08:17Z"}, "message": "Replace GlobalAlloc::oom with a lang item", "tree": {"sha": "538d71f49b7258fb3e55fdd6245dacd829f4dcf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/538d71f49b7258fb3e55fdd6245dacd829f4dcf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e513c1bd314bbeb6295a7a759de8833b52ff854d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e513c1bd314bbeb6295a7a759de8833b52ff854d", "html_url": "https://github.com/rust-lang/rust/commit/e513c1bd314bbeb6295a7a759de8833b52ff854d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e513c1bd314bbeb6295a7a759de8833b52ff854d/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88873965137e752407d5797e7319410df2554f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/88873965137e752407d5797e7319410df2554f0c", "html_url": "https://github.com/rust-lang/rust/commit/88873965137e752407d5797e7319410df2554f0c"}], "stats": {"total": 112, "additions": 53, "deletions": 59}, "files": [{"sha": "a9c065237184de5a0173cd204d7e769ab65ce71d", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -48,9 +48,6 @@ extern \"Rust\" {\n     #[allocator]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n-    #[cold]\n-    #[rustc_allocator_nounwind]\n-    fn __rust_oom() -> !;\n     #[rustc_allocator_nounwind]\n     fn __rust_dealloc(ptr: *mut u8, size: usize, align: usize);\n     #[rustc_allocator_nounwind]\n@@ -107,16 +104,6 @@ unsafe impl GlobalAlloc for Global {\n         let ptr = __rust_alloc_zeroed(layout.size(), layout.align(), &mut 0);\n         ptr as *mut Opaque\n     }\n-\n-    #[inline]\n-    fn oom(&self) -> ! {\n-        unsafe {\n-            #[cfg(not(stage0))]\n-            __rust_oom();\n-            #[cfg(stage0)]\n-            __rust_oom(&mut 0);\n-        }\n-    }\n }\n \n unsafe impl Alloc for Global {\n@@ -147,7 +134,7 @@ unsafe impl Alloc for Global {\n \n     #[inline]\n     fn oom(&mut self) -> ! {\n-        GlobalAlloc::oom(self)\n+        oom()\n     }\n }\n \n@@ -165,7 +152,7 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n         if !ptr.is_null() {\n             ptr as *mut u8\n         } else {\n-            Global.oom()\n+            oom()\n         }\n     }\n }\n@@ -182,19 +169,33 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n     }\n }\n \n+#[cfg(stage0)]\n+pub fn oom() -> ! {\n+    unsafe { ::core::intrinsics::abort() }\n+}\n+\n+#[cfg(not(stage0))]\n+pub fn oom() -> ! {\n+    extern {\n+        #[lang = \"oom\"]\n+        fn oom_impl() -> !;\n+    }\n+    unsafe { oom_impl() }\n+}\n+\n #[cfg(test)]\n mod tests {\n     extern crate test;\n     use self::test::Bencher;\n     use boxed::Box;\n-    use alloc::{Global, Alloc, Layout};\n+    use alloc::{Global, Alloc, Layout, oom};\n \n     #[test]\n     fn allocate_zeroed() {\n         unsafe {\n             let layout = Layout::from_size_align(1024, 1).unwrap();\n             let ptr = Global.alloc_zeroed(layout.clone())\n-                .unwrap_or_else(|_| Global.oom());\n+                .unwrap_or_else(|_| oom());\n \n             let mut i = ptr.cast::<u8>().as_ptr();\n             let end = i.offset(layout.size() as isize);"}, {"sha": "f5980f4599e45ea8906263819e177dfe233eae41", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -31,7 +31,7 @@ use core::hash::{Hash, Hasher};\n use core::{isize, usize};\n use core::convert::From;\n \n-use alloc::{Global, Alloc, Layout, box_free};\n+use alloc::{Global, Alloc, Layout, box_free, oom};\n use boxed::Box;\n use string::String;\n use vec::Vec;\n@@ -553,7 +553,7 @@ impl<T: ?Sized> Arc<T> {\n         let layout = Layout::for_value(&*fake_ptr);\n \n         let mem = Global.alloc(layout)\n-            .unwrap_or_else(|_| Global.oom());\n+            .unwrap_or_else(|_| oom());\n \n         // Initialize the real ArcInner\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut ArcInner<T>;"}, {"sha": "8fb8e111754a903e49819309c66c9004e0224e11", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -259,7 +259,7 @@ use core::ops::CoerceUnsized;\n use core::ptr::{self, NonNull};\n use core::convert::From;\n \n-use alloc::{Global, Alloc, Layout, Opaque, box_free};\n+use alloc::{Global, Alloc, Layout, Opaque, box_free, oom};\n use string::String;\n use vec::Vec;\n \n@@ -668,7 +668,7 @@ impl<T: ?Sized> Rc<T> {\n         let layout = Layout::for_value(&*fake_ptr);\n \n         let mem = Global.alloc(layout)\n-            .unwrap_or_else(|_| Global.oom());\n+            .unwrap_or_else(|_| oom());\n \n         // Initialize the real RcBox\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut RcBox<T>;"}, {"sha": "8b118a2cabb9b9624abe467a38f6b36e0a8ca209", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -30,8 +30,6 @@ extern crate libc;\n pub use contents::*;\n #[cfg(not(dummy_jemalloc))]\n mod contents {\n-    use core::alloc::GlobalAlloc;\n-    use alloc_system::System;\n     use libc::{c_int, c_void, size_t};\n \n     // Note that the symbols here are prefixed by default on macOS and Windows (we\n@@ -100,10 +98,11 @@ mod contents {\n         ptr\n     }\n \n+    #[cfg(stage0)]\n     #[no_mangle]\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_oom() -> ! {\n-        System.oom()\n+        ::alloc_system::oom()\n     }\n \n     #[no_mangle]"}, {"sha": "aff98ae2f1079cc45e0b21a8ad60a42a5b66564a", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -368,7 +368,7 @@ mod platform {\n }\n \n #[inline]\n-fn oom() -> ! {\n+pub fn oom() -> ! {\n     write_to_stderr(\"fatal runtime error: memory allocation failed\");\n     unsafe {\n         ::core::intrinsics::abort();"}, {"sha": "7d893676a6cf2154fd7deeb90782f80b5c8a2842", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -451,17 +451,6 @@ pub unsafe trait GlobalAlloc {\n         }\n         new_ptr\n     }\n-\n-    /// Aborts the thread or process, optionally performing\n-    /// cleanup or logging diagnostic information before panicking or\n-    /// aborting.\n-    ///\n-    /// `oom` is meant to be used by clients unable to cope with an\n-    /// unsatisfied allocation request, and wish to abandon\n-    /// computation rather than attempt to recover locally.\n-    fn oom(&self) -> ! {\n-        unsafe { ::intrinsics::abort() }\n-    }\n }\n \n /// An implementation of `Alloc` can allocate, reallocate, and"}, {"sha": "95e92e21b09dcdd50129bad5151257cbe62bb725", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -303,7 +303,8 @@ language_item_table! {\n \n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n     BoxFreeFnLangItem,               \"box_free\",                box_free_fn;\n-    DropInPlaceFnLangItem,             \"drop_in_place\",           drop_in_place_fn;\n+    DropInPlaceFnLangItem,           \"drop_in_place\",           drop_in_place_fn;\n+    OomLangItem,                     \"oom\",                     oom;\n \n     StartFnLangItem,                 \"start\",                   start_fn;\n "}, {"sha": "a2bceb191022165f2ff59c10760ac7bfd8474671", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -151,4 +151,5 @@ weak_lang_items! {\n     panic_fmt,          PanicFmtLangItem,           rust_begin_unwind;\n     eh_personality,     EhPersonalityLangItem,      rust_eh_personality;\n     eh_unwind_resume,   EhUnwindResumeLangItem,     rust_eh_unwind_resume;\n+    oom,                OomLangItem,                rust_oom;\n }"}, {"sha": "f3103e2160698ccc679c1a04ef03478a4fff8979", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -23,11 +23,6 @@ pub static ALLOCATOR_METHODS: &[AllocatorMethod] = &[\n         inputs: &[AllocatorTy::Layout],\n         output: AllocatorTy::ResultPtr,\n     },\n-    AllocatorMethod {\n-        name: \"oom\",\n-        inputs: &[],\n-        output: AllocatorTy::Bang,\n-    },\n     AllocatorMethod {\n         name: \"dealloc\",\n         inputs: &[AllocatorTy::Ptr, AllocatorTy::Layout],"}, {"sha": "a8578404467b1d3185b4322abf2eb2ed9374f748", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -13,10 +13,18 @@\n #![unstable(issue = \"32838\", feature = \"allocator_api\")]\n \n #[doc(inline)] #[allow(deprecated)] pub use alloc_crate::alloc::Heap;\n-#[doc(inline)] pub use alloc_crate::alloc::Global;\n+#[doc(inline)] pub use alloc_crate::alloc::{Global, oom};\n #[doc(inline)] pub use alloc_system::System;\n #[doc(inline)] pub use core::alloc::*;\n \n+#[cfg(not(stage0))]\n+#[cfg(not(test))]\n+#[doc(hidden)]\n+#[lang = \"oom\"]\n+pub extern fn rust_oom() -> ! {\n+    rtabort!(\"memory allocation failed\");\n+}\n+\n #[cfg(not(test))]\n #[doc(hidden)]\n #[allow(unused_attributes)]\n@@ -35,10 +43,11 @@ pub mod __default_lib_allocator {\n         System.alloc(layout) as *mut u8\n     }\n \n+    #[cfg(stage0)]\n     #[no_mangle]\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_oom() -> ! {\n-        System.oom()\n+        super::oom()\n     }\n \n     #[no_mangle]"}, {"sha": "a8c70489f443690c3151e0cd67f84a9ad43c324b", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -11,7 +11,7 @@\n use self::Entry::*;\n use self::VacantEntryState::*;\n \n-use alloc::{Global, Alloc, CollectionAllocErr};\n+use alloc::{CollectionAllocErr, oom};\n use cell::Cell;\n use borrow::Borrow;\n use cmp::max;\n@@ -784,7 +784,7 @@ impl<K, V, S> HashMap<K, V, S>\n     pub fn reserve(&mut self, additional: usize) {\n         match self.try_reserve(additional) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr) => Global.oom(),\n+            Err(CollectionAllocErr::AllocErr) => oom(),\n             Ok(()) => { /* yay */ }\n          }\n     }"}, {"sha": "52c53dc3b1251a35f83eae4ee14a5ba380243616", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use alloc::{Global, Alloc, Layout, CollectionAllocErr};\n+use alloc::{Global, Alloc, Layout, CollectionAllocErr, oom};\n use cmp;\n use hash::{BuildHasher, Hash, Hasher};\n use marker;\n@@ -770,7 +770,7 @@ impl<K, V> RawTable<K, V> {\n     unsafe fn new_uninitialized(capacity: usize) -> RawTable<K, V> {\n         match Self::try_new_uninitialized(capacity) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr) => Global.oom(),\n+            Err(CollectionAllocErr::AllocErr) => oom(),\n             Ok(table) => { table }\n         }\n     }\n@@ -809,7 +809,7 @@ impl<K, V> RawTable<K, V> {\n     pub fn new(capacity: usize) -> RawTable<K, V> {\n         match Self::try_new(capacity) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr) => Global.oom(),\n+            Err(CollectionAllocErr::AllocErr) => oom(),\n             Ok(table) => { table }\n         }\n     }"}, {"sha": "1df7bc777d17e56b2a786bb26845134a3e1adf8e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -482,7 +482,6 @@ pub mod path;\n pub mod process;\n pub mod sync;\n pub mod time;\n-pub mod alloc;\n \n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n #[rustc_deprecated(since = \"1.27.0\", reason = \"module renamed to `alloc`\")]\n@@ -496,6 +495,8 @@ pub mod heap {\n mod sys_common;\n mod sys;\n \n+pub mod alloc;\n+\n // Private support modules\n mod panicking;\n mod memchr;"}, {"sha": "12b115d09380e3f8a3dd1b0ffdb044dde8668d5d", "filename": "src/test/run-pass/allocator-alloc-one.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -10,13 +10,11 @@\n \n #![feature(allocator_api, nonnull)]\n \n-use std::alloc::{Alloc, Global};\n+use std::alloc::{Alloc, Global, oom};\n \n fn main() {\n     unsafe {\n-        let ptr = Global.alloc_one::<i32>().unwrap_or_else(|_| {\n-            Global.oom()\n-        });\n+        let ptr = Global.alloc_one::<i32>().unwrap_or_else(|_| oom());\n         *ptr.as_ptr() = 4;\n         assert_eq!(*ptr.as_ptr(), 4);\n         Global.dealloc_one(ptr);"}, {"sha": "308792e5d8924782a13a8f812a9ce34465af4616", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -15,7 +15,7 @@\n \n #![feature(heap_api, allocator_api)]\n \n-use std::alloc::{Global, Alloc, Layout};\n+use std::alloc::{Global, Alloc, Layout, oom};\n use std::ptr::{self, NonNull};\n \n fn main() {\n@@ -50,7 +50,7 @@ unsafe fn test_triangle() -> bool {\n             println!(\"allocate({:?})\", layout);\n         }\n \n-        let ret = Global.alloc(layout.clone()).unwrap_or_else(|_| Global.oom());\n+        let ret = Global.alloc(layout.clone()).unwrap_or_else(|_| oom());\n \n         if PRINT {\n             println!(\"allocate({:?}) = {:?}\", layout, ret);\n@@ -73,7 +73,7 @@ unsafe fn test_triangle() -> bool {\n         }\n \n         let ret = Global.realloc(NonNull::new_unchecked(ptr).as_opaque(), old.clone(), new.size())\n-            .unwrap_or_else(|_| Global.oom());\n+            .unwrap_or_else(|_| oom());\n \n         if PRINT {\n             println!(\"reallocate({:?}, old={:?}, new={:?}) = {:?}\","}, {"sha": "60a7f70931d48baf6bd17232fee5c4003d2f80aa", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e513c1bd314bbeb6295a7a759de8833b52ff854d/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=e513c1bd314bbeb6295a7a759de8833b52ff854d", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(allocator_api)]\n \n-use std::alloc::{Alloc, Global, Layout};\n+use std::alloc::{Alloc, Global, Layout, oom};\n use std::ptr::NonNull;\n \n struct arena(());\n@@ -33,7 +33,7 @@ struct Ccx {\n fn alloc<'a>(_bcx : &'a arena) -> &'a Bcx<'a> {\n     unsafe {\n         let ptr = Global.alloc(Layout::new::<Bcx>())\n-            .unwrap_or_else(|_| Global.oom());\n+            .unwrap_or_else(|_| oom());\n         &*(ptr.as_ptr() as *const _)\n     }\n }"}]}