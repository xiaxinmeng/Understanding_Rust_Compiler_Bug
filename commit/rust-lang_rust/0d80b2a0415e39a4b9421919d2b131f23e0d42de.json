{"sha": "0d80b2a0415e39a4b9421919d2b131f23e0d42de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkODBiMmEwNDE1ZTM5YTRiOTQyMTkxOWQyYjEzMWYyM2UwZDQyZGU=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-23T00:32:02Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-23T00:32:02Z"}, "message": "docs: Improve descriptions for some methods in core::cell.", "tree": {"sha": "47d82edaea25d9fb5ef0fff14e16611dd1ce03ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47d82edaea25d9fb5ef0fff14e16611dd1ce03ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d80b2a0415e39a4b9421919d2b131f23e0d42de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d80b2a0415e39a4b9421919d2b131f23e0d42de", "html_url": "https://github.com/rust-lang/rust/commit/0d80b2a0415e39a4b9421919d2b131f23e0d42de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d80b2a0415e39a4b9421919d2b131f23e0d42de/comments", "author": null, "committer": null, "parents": [{"sha": "c3d60aba6c86883c79055c1a3923d4db116b644e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d60aba6c86883c79055c1a3923d4db116b644e", "html_url": "https://github.com/rust-lang/rust/commit/c3d60aba6c86883c79055c1a3923d4db116b644e"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "67ae19079c8c25e02611b2d5c5c2102c5db80786", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d80b2a0415e39a4b9421919d2b131f23e0d42de/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d80b2a0415e39a4b9421919d2b131f23e0d42de/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=0d80b2a0415e39a4b9421919d2b131f23e0d42de", "patch": "@@ -212,7 +212,7 @@ impl<T:Copy> Cell<T> {\n         }\n     }\n \n-    /// Gets a reference to the underlying `UnsafeCell`.\n+    /// Returns a reference to the underlying `UnsafeCell`.\n     ///\n     /// # Unsafety\n     ///\n@@ -439,7 +439,7 @@ impl<T: ?Sized> RefCell<T> {\n         }\n     }\n \n-    /// Gets a reference to the underlying `UnsafeCell`.\n+    /// Returns a reference to the underlying `UnsafeCell`.\n     ///\n     /// This can be used to circumvent `RefCell`'s safety checks.\n     ///\n@@ -671,8 +671,8 @@ impl<T> UnsafeCell<T> {\n     ///\n     /// # Unsafety\n     ///\n-    /// This function is unsafe because there is no guarantee that this or other threads are\n-    /// currently inspecting the inner value.\n+    /// This function is unsafe because this thread or another thread may currently be\n+    /// inspecting the inner value.\n     ///\n     /// # Examples\n     ///"}]}