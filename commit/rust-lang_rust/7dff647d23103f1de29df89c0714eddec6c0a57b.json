{"sha": "7dff647d23103f1de29df89c0714eddec6c0a57b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZmY2NDdkMjMxMDNmMWRlMjlkZjg5YzA3MTRlZGRlYzZjMGE1N2I=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-08-24T00:23:56Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-08-24T00:23:56Z"}, "message": "Ensure miri can do bit ops on pointer values", "tree": {"sha": "a0343106cfde8fc52c735715726deb76ef264989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0343106cfde8fc52c735715726deb76ef264989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dff647d23103f1de29df89c0714eddec6c0a57b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dff647d23103f1de29df89c0714eddec6c0a57b", "html_url": "https://github.com/rust-lang/rust/commit/7dff647d23103f1de29df89c0714eddec6c0a57b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dff647d23103f1de29df89c0714eddec6c0a57b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760226733e940cb375f791e894fbb554555eeb01", "url": "https://api.github.com/repos/rust-lang/rust/commits/760226733e940cb375f791e894fbb554555eeb01", "html_url": "https://github.com/rust-lang/rust/commit/760226733e940cb375f791e894fbb554555eeb01"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "334f1ea1a690140d639044bcc56421cdb0d77cc8", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7dff647d23103f1de29df89c0714eddec6c0a57b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dff647d23103f1de29df89c0714eddec6c0a57b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=7dff647d23103f1de29df89c0714eddec6c0a57b", "patch": "@@ -95,7 +95,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | \"bitreverse\" => {\n                 let ty = substs.type_at(0);\n                 let layout_of = self.layout_of(ty)?;\n-                let bits = self.read_scalar(args[0])?.to_bits(layout_of.size)?;\n+                let val = self.read_scalar(args[0])?.not_undef()?;\n+                let bits = self.force_bits(val, layout_of.size)?;\n                 let kind = match layout_of.abi {\n                     ty::layout::Abi::Scalar(ref scalar) => scalar.value,\n                     _ => throw_unsup!(TypeNotPrimitive(ty)),\n@@ -149,7 +150,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // term since the sign of the second term can be inferred from this and\n                         // the fact that the operation has overflowed (if either is 0 no\n                         // overflow can occur)\n-                        let first_term: u128 = l.to_scalar()?.to_bits(l.layout.size)?;\n+                        let first_term: u128 = self.force_bits(l.to_scalar()?, l.layout.size)?;\n                         let first_term_positive = first_term & (1 << (num_bits-1)) == 0;\n                         if first_term_positive {\n                             // Negative overflow not possible since the positive first term\n@@ -187,7 +188,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let (val, overflowed, _ty) = self.overflowing_binary_op(bin_op, l, r)?;\n                 if overflowed {\n                     let layout = self.layout_of(substs.type_at(0))?;\n-                    let r_val = r.to_scalar()?.to_bits(layout.size)?;\n+                    let r_val = self.force_bits(r.to_scalar()?, layout.size)?;\n                     throw_ub_format!(\"Overflowing shift by {} in `{}`\", r_val, intrinsic_name);\n                 }\n                 self.write_scalar(val, dest)?;\n@@ -196,8 +197,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // rotate_left: (X << (S % BW)) | (X >> ((BW - S) % BW))\n                 // rotate_right: (X << ((BW - S) % BW)) | (X >> (S % BW))\n                 let layout = self.layout_of(substs.type_at(0))?;\n-                let val_bits = self.read_scalar(args[0])?.to_bits(layout.size)?;\n-                let raw_shift_bits = self.read_scalar(args[1])?.to_bits(layout.size)?;\n+                let val = self.read_scalar(args[0])?.not_undef()?;\n+                let val_bits = self.force_bits(val, layout.size)?;\n+                let raw_shift = self.read_scalar(args[1])?.not_undef()?;\n+                let raw_shift_bits = self.force_bits(raw_shift, layout.size)?;\n                 let width_bits = layout.size.bits() as u128;\n                 let shift_bits = raw_shift_bits % width_bits;\n                 let inv_shift_bits = (width_bits - shift_bits) % width_bits;"}, {"sha": "b5aab992e3adb6f4e84750ea34987cd38bcdef3a", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7dff647d23103f1de29df89c0714eddec6c0a57b/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dff647d23103f1de29df89c0714eddec6c0a57b/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=7dff647d23103f1de29df89c0714eddec6c0a57b", "patch": "@@ -629,11 +629,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // post-process\n         Ok(match *discr_kind {\n             layout::DiscriminantKind::Tag => {\n-                let bits_discr = match raw_discr.to_bits(discr_val.layout.size) {\n-                    Ok(raw_discr) => raw_discr,\n-                    Err(_) =>\n-                        throw_unsup!(InvalidDiscriminant(raw_discr.erase_tag())),\n-                };\n+                let bits_discr = raw_discr\n+                    .not_undef()\n+                    .and_then(|raw_discr| self.force_bits(raw_discr, discr_val.layout.size))\n+                    .map_err(|_| err_unsup!(InvalidDiscriminant(raw_discr.erase_tag())))?;\n                 let real_discr = if discr_val.layout.ty.is_signed() {\n                     // going from layout tag type to typeck discriminant type\n                     // requires first sign extending with the layout discriminant"}, {"sha": "34a10de7de7fc045e130c0a899de01b1e8cf8c8a", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dff647d23103f1de29df89c0714eddec6c0a57b/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dff647d23103f1de29df89c0714eddec6c0a57b/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=7dff647d23103f1de29df89c0714eddec6c0a57b", "patch": "@@ -144,11 +144,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let size = alloc.read_ptr_sized(\n             self,\n             vtable.offset(pointer_size, self)?\n-        )?.to_bits(pointer_size)? as u64;\n+        )?.not_undef()?;\n+        let size = self.force_bits(size, pointer_size)? as u64;\n         let align = alloc.read_ptr_sized(\n             self,\n             vtable.offset(pointer_size * 2, self)?,\n-        )?.to_bits(pointer_size)? as u64;\n+        )?.not_undef()?;\n+        let align = self.force_bits(align, pointer_size)? as u64;\n         Ok((Size::from_bytes(size), Align::from_bytes(align).unwrap()))\n     }\n }"}]}