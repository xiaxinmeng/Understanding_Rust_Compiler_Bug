{"sha": "85eadf84f3945dc431643ea43d34f15193fdafb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZWFkZjg0ZjM5NDVkYzQzMTY0M2VhNDNkMzRmMTUxOTNmZGFmYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-16T10:00:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-16T10:00:33Z"}, "message": "Auto merge of #43841 - alexcrichton:fix-another-regression, r=eddyb\n\nrustc: Fix `unknown_lints` next to an unknown lint\n\nThe lint refactoring in #43522 didn't account for `#[allow(unknown_lints)]`\nhappening at the same node as an unknown lint itself, so this commit updates the\nhandling to ensure that the local set of lint configuration being built is\nqueried before looking at the chain of lint levels.\n\nCloses #43809", "tree": {"sha": "526083afee71d2a92027de01c864591500977fb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/526083afee71d2a92027de01c864591500977fb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85eadf84f3945dc431643ea43d34f15193fdafb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85eadf84f3945dc431643ea43d34f15193fdafb4", "html_url": "https://github.com/rust-lang/rust/commit/85eadf84f3945dc431643ea43d34f15193fdafb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85eadf84f3945dc431643ea43d34f15193fdafb4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fc3765c5477f98cfdf325475b2b01c6c094ed2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc3765c5477f98cfdf325475b2b01c6c094ed2d", "html_url": "https://github.com/rust-lang/rust/commit/4fc3765c5477f98cfdf325475b2b01c6c094ed2d"}, {"sha": "8b2bdc56d088d39e31100c182b3857dd7dc75f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2bdc56d088d39e31100c182b3857dd7dc75f24", "html_url": "https://github.com/rust-lang/rust/commit/8b2bdc56d088d39e31100c182b3857dd7dc75f24"}], "stats": {"total": 81, "additions": 62, "deletions": 19}, "files": [{"sha": "ab086e5b8e90ea511866305548639e36f5c658eb", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 46, "deletions": 19, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/85eadf84f3945dc431643ea43d34f15193fdafb4/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85eadf84f3945dc431643ea43d34f15193fdafb4/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=85eadf84f3945dc431643ea43d34f15193fdafb4", "patch": "@@ -83,10 +83,13 @@ impl LintLevelSets {\n         });\n     }\n \n-    fn get_lint_level(&self, lint: &'static Lint, idx: u32)\n+    fn get_lint_level(&self,\n+                      lint: &'static Lint,\n+                      idx: u32,\n+                      aux: Option<&FxHashMap<LintId, (Level, LintSource)>>)\n         -> (Level, LintSource)\n     {\n-        let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx);\n+        let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx, aux);\n \n         // If `level` is none then we actually assume the default level for this\n         // lint.\n@@ -97,7 +100,9 @@ impl LintLevelSets {\n         // `allow(warnings)` in scope then we want to respect that instead.\n         if level == Level::Warn {\n             let (warnings_level, warnings_src) =\n-                self.get_lint_id_level(LintId::of(lint::builtin::WARNINGS), idx);\n+                self.get_lint_id_level(LintId::of(lint::builtin::WARNINGS),\n+                                       idx,\n+                                       aux);\n             if let Some(configured_warning_level) = warnings_level {\n                 if configured_warning_level != Level::Warn {\n                     level = configured_warning_level;\n@@ -112,9 +117,17 @@ impl LintLevelSets {\n         return (level, src)\n     }\n \n-    fn get_lint_id_level(&self, id: LintId, mut idx: u32)\n+    fn get_lint_id_level(&self,\n+                         id: LintId,\n+                         mut idx: u32,\n+                         aux: Option<&FxHashMap<LintId, (Level, LintSource)>>)\n         -> (Option<Level>, LintSource)\n     {\n+        if let Some(specs) = aux {\n+            if let Some(&(level, src)) = specs.get(&id) {\n+                return (Some(level), src)\n+            }\n+        }\n         loop {\n             match self.list[idx as usize] {\n                 LintSet::CommandLine { ref specs } => {\n@@ -212,21 +225,35 @@ impl<'a> LintLevelsBuilder<'a> {\n                             specs.insert(*id, (level, src));\n                         }\n                     }\n+\n+                    _ if !self.warn_about_weird_lints => {}\n+\n                     CheckLintNameResult::Warning(ref msg) => {\n-                        if self.warn_about_weird_lints {\n-                            self.struct_lint(builtin::RENAMED_AND_REMOVED_LINTS,\n-                                             Some(li.span.into()),\n-                                             msg)\n-                                .emit();\n-                        }\n+                        let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n+                        let (level, src) = self.sets.get_lint_level(lint,\n+                                                                    self.cur,\n+                                                                    Some(&specs));\n+                        lint::struct_lint_level(self.sess,\n+                                                lint,\n+                                                level,\n+                                                src,\n+                                                Some(li.span.into()),\n+                                                msg)\n+                            .emit();\n                     }\n                     CheckLintNameResult::NoLint => {\n-                        if self.warn_about_weird_lints {\n-                            self.struct_lint(builtin::UNKNOWN_LINTS,\n-                                             Some(li.span.into()),\n-                                             &format!(\"unknown lint: `{}`\", name))\n-                                .emit();\n-                        }\n+                        let lint = builtin::UNKNOWN_LINTS;\n+                        let (level, src) = self.sets.get_lint_level(lint,\n+                                                                    self.cur,\n+                                                                    Some(&specs));\n+                        let msg = format!(\"unknown lint: `{}`\", name);\n+                        lint::struct_lint_level(self.sess,\n+                                                lint,\n+                                                level,\n+                                                src,\n+                                                Some(li.span.into()),\n+                                                &msg)\n+                            .emit();\n                     }\n                 }\n             }\n@@ -236,7 +263,7 @@ impl<'a> LintLevelsBuilder<'a> {\n             if level == Level::Forbid {\n                 continue\n             }\n-            let forbid_src = match self.sets.get_lint_id_level(*id, self.cur) {\n+            let forbid_src = match self.sets.get_lint_id_level(*id, self.cur, None) {\n                 (Some(Level::Forbid), src) => src,\n                 _ => continue,\n             };\n@@ -298,7 +325,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                        msg: &str)\n         -> DiagnosticBuilder<'a>\n     {\n-        let (level, src) = self.sets.get_lint_level(lint, self.cur);\n+        let (level, src) = self.sets.get_lint_level(lint, self.cur, None);\n         lint::struct_lint_level(self.sess, lint, level, src, span, msg)\n     }\n \n@@ -337,7 +364,7 @@ impl LintLevelMap {\n         -> Option<(Level, LintSource)>\n     {\n         self.id_to_set.get(&id).map(|idx| {\n-            self.sets.get_lint_level(lint, *idx)\n+            self.sets.get_lint_level(lint, *idx, None)\n         })\n     }\n }"}, {"sha": "1e510c28e7858a441e7d74b0739f444ee718bc2e", "filename": "src/test/run-pass/lint-unknown-lints-at-crate-level.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85eadf84f3945dc431643ea43d34f15193fdafb4/src%2Ftest%2Frun-pass%2Flint-unknown-lints-at-crate-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85eadf84f3945dc431643ea43d34f15193fdafb4/src%2Ftest%2Frun-pass%2Flint-unknown-lints-at-crate-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-unknown-lints-at-crate-level.rs?ref=85eadf84f3945dc431643ea43d34f15193fdafb4", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -D warnings -D unknown-lints\n+\n+#![allow(unknown_lints)]\n+#![allow(random_lint_name)]\n+\n+fn main() {}"}]}