{"sha": "3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMmI1YTRiMDhkOTY0N2Y3NDM4ZjRlOTQ1ZDRjOGIzN2MzNmE1OGM=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-08T16:36:22Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-08T16:36:22Z"}, "message": "librustc_data_structures => 2018", "tree": {"sha": "72ebf2fe2dd1821c3775916565ab37aee21b019d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72ebf2fe2dd1821c3775916565ab37aee21b019d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "html_url": "https://github.com/rust-lang/rust/commit/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43e04fb5522642b6b5230592934e9ee100f2fd56", "url": "https://api.github.com/repos/rust-lang/rust/commits/43e04fb5522642b6b5230592934e9ee100f2fd56", "html_url": "https://github.com/rust-lang/rust/commit/43e04fb5522642b6b5230592934e9ee100f2fd56"}], "stats": {"total": 193, "additions": 86, "deletions": 107}, "files": [{"sha": "f781952d4172cc874ac2320663921f8295b1109b", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_data_structures\"\n@@ -16,8 +17,8 @@ serialize = { path = \"../libserialize\" }\n graphviz = { path = \"../libgraphviz\" }\n cfg-if = \"0.1.2\"\n stable_deref_trait = \"1.0.0\"\n-rustc-rayon = \"0.1.1\"\n-rustc-rayon-core = \"0.1.1\"\n+rayon = { version = \"0.1.1\", package = \"rustc-rayon\" }\n+rayon-core = { version = \"0.1.1\", package = \"rustc-rayon-core\" }\n rustc-hash = \"1.0.1\"\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n "}, {"sha": "05d2185ae69b406d2a25b2573ace6e44ce9f9660", "filename": "src/librustc_data_structures/bit_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbit_set.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,4 +1,4 @@\n-use indexed_vec::{Idx, IndexVec};\n+use crate::indexed_vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use std::fmt;\n use std::iter;\n@@ -208,7 +208,7 @@ impl<T: Idx> SubtractFromBitSet<T> for BitSet<T> {\n }\n \n impl<T: Idx> fmt::Debug for BitSet<T> {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         w.debug_list()\n          .entries(self.iter())\n          .finish()\n@@ -366,7 +366,7 @@ impl<T: Idx> SparseBitSet<T> {\n         dense\n     }\n \n-    fn iter(&self) -> slice::Iter<T> {\n+    fn iter(&self) -> slice::Iter<'_, T> {\n         self.elems.iter()\n     }\n }\n@@ -536,7 +536,7 @@ impl<T: Idx> HybridBitSet<T> {\n         }\n     }\n \n-    pub fn iter(&self) -> HybridIter<T> {\n+    pub fn iter(&self) -> HybridIter<'_, T> {\n         match self {\n             HybridBitSet::Sparse(sparse) => HybridIter::Sparse(sparse.iter()),\n             HybridBitSet::Dense(dense) => HybridIter::Dense(dense.iter()),"}, {"sha": "c4c0db58012092783c4df0f477847814c9562656", "filename": "src/librustc_data_structures/fingerprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffingerprint.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,5 +1,5 @@\n+use crate::stable_hasher;\n use std::mem;\n-use stable_hasher;\n use serialize;\n use serialize::opaque::{EncodeResult, Encoder, Decoder};\n \n@@ -70,7 +70,7 @@ impl Fingerprint {\n }\n \n impl ::std::fmt::Display for Fingerprint {\n-    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+    fn fmt(&self, formatter: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         write!(formatter, \"{:x}-{:x}\", self.0, self.1)\n     }\n }"}, {"sha": "255c5fd7fe7ec8938e266e60c9c51b503d587c51", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -14,12 +14,9 @@ cfg_if! {\n     if #[cfg(unix)] {\n         use std::ffi::{CString, OsStr};\n         use std::os::unix::prelude::*;\n-        use libc;\n \n         #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_type: libc::c_short,\n@@ -35,8 +32,6 @@ cfg_if! {\n \n         #[cfg(target_os = \"freebsd\")]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_start: libc::off_t,\n@@ -53,8 +48,6 @@ cfg_if! {\n                   target_os = \"netbsd\",\n                   target_os = \"openbsd\"))]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_start: libc::off_t,\n@@ -70,8 +63,6 @@ cfg_if! {\n \n         #[cfg(target_os = \"haiku\")]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_type: libc::c_short,\n@@ -87,8 +78,6 @@ cfg_if! {\n \n         #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_start: libc::off_t,\n@@ -104,8 +93,6 @@ cfg_if! {\n \n         #[cfg(target_os = \"solaris\")]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_type: libc::c_short,"}, {"sha": "aaed41d9fa3620e15fb2ebe14ee1462cdbb188e6", "filename": "src/librustc_data_structures/graph/dominators/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -117,7 +117,7 @@ impl<Node: Idx> Dominators<Node> {\n         self.immediate_dominators[node].unwrap()\n     }\n \n-    pub fn dominators(&self, node: Node) -> Iter<Node> {\n+    pub fn dominators(&self, node: Node) -> Iter<'_, Node> {\n         assert!(self.is_reachable(node), \"node {:?} is not reachable\", node);\n         Iter {\n             dominators: self,\n@@ -136,7 +136,7 @@ impl<Node: Idx> Dominators<Node> {\n     }\n }\n \n-pub struct Iter<'dom, Node: Idx + 'dom> {\n+pub struct Iter<'dom, Node: Idx> {\n     dominators: &'dom Dominators<Node>,\n     node: Option<Node>,\n }\n@@ -171,7 +171,7 @@ impl<Node: Idx> DominatorTree<Node> {\n }\n \n impl<Node: Idx> fmt::Debug for DominatorTree<Node> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(\n             &DominatorTreeNode {\n                 tree: self,\n@@ -188,7 +188,7 @@ struct DominatorTreeNode<'tree, Node: Idx> {\n }\n \n impl<'tree, Node: Idx> fmt::Debug for DominatorTreeNode<'tree, Node> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let subtrees: Vec<_> = self.tree\n             .children(self.node)\n             .iter()"}, {"sha": "a8b734094064aa28218985bcdae770194a8a2b15", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -20,10 +20,10 @@\n //! the field `next_edge`). Each of those fields is an array that should\n //! be indexed by the direction (see the type `Direction`).\n \n-use bit_set::BitSet;\n+use crate::bit_set::BitSet;\n+use crate::snapshot_vec::{SnapshotVec, SnapshotVecDelegate};\n use std::fmt::Debug;\n use std::usize;\n-use snapshot_vec::{SnapshotVec, SnapshotVecDelegate};\n \n #[cfg(test)]\n mod tests;\n@@ -212,15 +212,19 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n             .all(|(edge_idx, edge)| f(edge_idx, edge))\n     }\n \n-    pub fn outgoing_edges(&self, source: NodeIndex) -> AdjacentEdges<N, E> {\n+    pub fn outgoing_edges(&self, source: NodeIndex) -> AdjacentEdges<'_, N, E> {\n         self.adjacent_edges(source, OUTGOING)\n     }\n \n-    pub fn incoming_edges(&self, source: NodeIndex) -> AdjacentEdges<N, E> {\n+    pub fn incoming_edges(&self, source: NodeIndex) -> AdjacentEdges<'_, N, E> {\n         self.adjacent_edges(source, INCOMING)\n     }\n \n-    pub fn adjacent_edges(&self, source: NodeIndex, direction: Direction) -> AdjacentEdges<N, E> {\n+    pub fn adjacent_edges(\n+        &self,\n+        source: NodeIndex,\n+        direction: Direction\n+    ) -> AdjacentEdges<'_, N, E> {\n         let first_edge = self.node(source).first_edge[direction.repr];\n         AdjacentEdges {\n             graph: self,\n@@ -291,11 +295,7 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n \n // # Iterators\n \n-pub struct AdjacentEdges<'g, N, E>\n-where\n-    N: 'g,\n-    E: 'g,\n-{\n+pub struct AdjacentEdges<'g, N, E> {\n     graph: &'g Graph<N, E>,\n     direction: Direction,\n     next: EdgeIndex,\n@@ -331,11 +331,7 @@ impl<'g, N: Debug, E: Debug> Iterator for AdjacentEdges<'g, N, E> {\n     }\n }\n \n-pub struct DepthFirstTraversal<'g, N, E>\n-where\n-    N: 'g,\n-    E: 'g,\n-{\n+pub struct DepthFirstTraversal<'g, N, E> {\n     graph: &'g Graph<N, E>,\n     stack: Vec<NodeIndex>,\n     visited: BitSet<usize>,"}, {"sha": "82c6da3f42711e368232a6ec367422c93a57db6d", "filename": "src/librustc_data_structures/graph/implementation/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Ftests.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,4 +1,4 @@\n-use graph::implementation::*;\n+use crate::graph::implementation::*;\n use std::fmt::Debug;\n \n type TestGraph = Graph<&'static str, &'static str>;"}, {"sha": "e3264fda2629c5695ecb0402d10d419978dcf10f", "filename": "src/librustc_data_structures/graph/scc/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -3,9 +3,9 @@\n //! node in the graph. This uses Tarjan's algorithm that completes in\n //! O(n) time.\n \n-use fx::FxHashSet;\n-use graph::{DirectedGraph, WithNumNodes, WithSuccessors};\n-use indexed_vec::{Idx, IndexVec};\n+use crate::fx::FxHashSet;\n+use crate::graph::{DirectedGraph, WithNumNodes, WithSuccessors};\n+use crate::indexed_vec::{Idx, IndexVec};\n use std::ops::Range;\n \n mod test;\n@@ -93,7 +93,7 @@ impl<S: Idx> SccData<S> {\n     }\n }\n \n-struct SccsConstruction<'c, G: DirectedGraph + WithNumNodes + WithSuccessors + 'c, S: Idx> {\n+struct SccsConstruction<'c, G: DirectedGraph + WithNumNodes + WithSuccessors, S: Idx> {\n     graph: &'c G,\n \n     /// The state of each node; used during walk to record the stack"}, {"sha": "da3a1ceefe94bc6fbb144253ad7e29f750007f2c", "filename": "src/librustc_data_structures/graph/scc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Ftest.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,6 +1,6 @@\n #![cfg(test)]\n \n-use graph::test::TestGraph;\n+use crate::graph::test::TestGraph;\n use super::*;\n \n #[test]"}, {"sha": "b390c4195729429b5903c8e933ef0056e77b5703", "filename": "src/librustc_data_structures/graph/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,4 +1,4 @@\n-use fx::FxHashMap;\n+use crate::fx::FxHashMap;\n use std::cmp::max;\n use std::slice;\n use std::iter;"}, {"sha": "516ea7fb7d946d405eaf6a519db1a94c8d4b730a", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -257,7 +257,7 @@ macro_rules! newtype_index {\n      @type         [$type:ident]\n      @debug_format [$debug_format:tt]) => (\n         impl ::std::fmt::Debug for $type {\n-            fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+            fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n                 write!(fmt, $debug_format, self.as_u32())\n             }\n         }\n@@ -495,7 +495,7 @@ impl<I: Idx, T: serialize::Decodable> serialize::Decodable for IndexVec<I, T> {\n }\n \n impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.raw, fmt)\n     }\n }\n@@ -573,7 +573,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn iter(&self) -> slice::Iter<T> {\n+    pub fn iter(&self) -> slice::Iter<'_, T> {\n         self.raw.iter()\n     }\n \n@@ -589,7 +589,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn iter_mut(&mut self) -> slice::IterMut<T> {\n+    pub fn iter_mut(&mut self) -> slice::IterMut<'_, T> {\n         self.raw.iter_mut()\n     }\n "}, {"sha": "08b453cf493f835dd847412d57450c78ee41d380", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -24,23 +24,16 @@\n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]\n \n-extern crate core;\n-extern crate ena;\n+#![deny(rust_2018_idioms)]\n+\n #[macro_use]\n extern crate log;\n+#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving\n #[cfg(unix)]\n extern crate libc;\n-extern crate parking_lot;\n #[macro_use]\n extern crate cfg_if;\n-extern crate stable_deref_trait;\n-extern crate rustc_rayon as rayon;\n-extern crate rustc_rayon_core as rayon_core;\n-extern crate rustc_hash;\n-extern crate serialize;\n-extern crate graphviz;\n-extern crate smallvec;\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}, {"sha": "72551b42324d087dcf7e333904fe12fb6a9e36b0", "filename": "src/librustc_data_structures/obligation_forest/graphviz.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,5 +1,5 @@\n+use crate::obligation_forest::{ForestObligation, ObligationForest};\n use graphviz as dot;\n-use obligation_forest::{ForestObligation, ObligationForest};\n use std::env::var_os;\n use std::fs::File;\n use std::path::Path;\n@@ -41,22 +41,22 @@ impl<'a, O: ForestObligation + 'a> dot::Labeller<'a> for &'a ObligationForest<O>\n     type Node = usize;\n     type Edge = (usize, usize);\n \n-    fn graph_id(&self) -> dot::Id {\n+    fn graph_id(&self) -> dot::Id<'_> {\n         dot::Id::new(\"trait_obligation_forest\").unwrap()\n     }\n \n-    fn node_id(&self, index: &Self::Node) -> dot::Id {\n+    fn node_id(&self, index: &Self::Node) -> dot::Id<'_> {\n         dot::Id::new(format!(\"obligation_{}\", index)).unwrap()\n     }\n \n-    fn node_label(&self, index: &Self::Node) -> dot::LabelText {\n+    fn node_label(&self, index: &Self::Node) -> dot::LabelText<'_> {\n         let node = &self.nodes[*index];\n         let label = format!(\"{:?} ({:?})\", node.obligation.as_predicate(), node.state.get());\n \n         dot::LabelText::LabelStr(label.into())\n     }\n \n-    fn edge_label(&self, (_index_source, _index_target): &Self::Edge) -> dot::LabelText {\n+    fn edge_label(&self, (_index_source, _index_target): &Self::Edge) -> dot::LabelText<'_> {\n         dot::LabelText::LabelStr(\"\".into())\n     }\n }\n@@ -65,11 +65,11 @@ impl<'a, O: ForestObligation + 'a> dot::GraphWalk<'a> for &'a ObligationForest<O\n     type Node = usize;\n     type Edge = (usize, usize);\n \n-    fn nodes(&self) -> dot::Nodes<Self::Node> {\n+    fn nodes(&self) -> dot::Nodes<'_, Self::Node> {\n         (0..self.nodes.len()).collect()\n     }\n \n-    fn edges(&self) -> dot::Edges<Self::Edge> {\n+    fn edges(&self) -> dot::Edges<'_, Self::Edge> {\n         (0..self.nodes.len())\n             .flat_map(|i| {\n                 let node = &self.nodes[i];"}, {"sha": "546bb64168e1481f3e1bfa67e98277e259871368", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -80,7 +80,7 @@\n //! processing step, we compress the vector to remove completed and error\n //! nodes, which aren't needed anymore.\n \n-use fx::{FxHashMap, FxHashSet};\n+use crate::fx::{FxHashMap, FxHashSet};\n \n use std::cell::Cell;\n use std::collections::hash_map::Entry;\n@@ -733,7 +733,7 @@ impl<O> Node<O> {\n \n // I need a Clone closure\n #[derive(Clone)]\n-struct GetObligation<'a, O: 'a>(&'a [Node<O>]);\n+struct GetObligation<'a, O>(&'a [Node<O>]);\n \n impl<'a, 'b, O> FnOnce<(&'b usize,)> for GetObligation<'a, O> {\n     type Output = &'a O;"}, {"sha": "30e510cc5b055909d8f7ee019fc6aaa59efdad77", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1002,7 +1002,7 @@ impl<O, T: ?Sized> Debug for OwningRef<O, T>\n     where O: Debug,\n           T: Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f,\n                \"OwningRef {{ owner: {:?}, reference: {:?} }}\",\n                self.owner(),\n@@ -1014,7 +1014,7 @@ impl<O, T: ?Sized> Debug for OwningRefMut<O, T>\n     where O: Debug,\n           T: Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f,\n                \"OwningRefMut {{ owner: {:?}, reference: {:?} }}\",\n                self.owner(),\n@@ -1047,7 +1047,7 @@ unsafe impl<O, T: ?Sized> Sync for OwningRefMut<O, T>\n     where O: Sync, for<'a> (&'a mut T): Sync {}\n \n impl Debug for dyn Erased {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"<Erased>\",)\n     }\n }"}, {"sha": "bf3ae2d7af58f77fae0d27e4ad8789856e727429", "filename": "src/librustc_data_structures/ptr_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fptr_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fptr_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fptr_key.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -4,7 +4,7 @@ use std::ops::Deref;\n /// A wrapper around reference that compares and hashes like a pointer.\n /// Can be used as a key in sets/maps indexed by pointers to avoid `unsafe`.\n #[derive(Debug)]\n-pub struct PtrKey<'a, T: 'a>(pub &'a T);\n+pub struct PtrKey<'a, T>(pub &'a T);\n \n impl<'a, T> Clone for PtrKey<'a, T> {\n     fn clone(&self) -> Self { *self }"}, {"sha": "91d6e29237002c28154673ad5e5c79324529c562", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,4 +1,4 @@\n-use fx::FxHashMap;\n+use crate::fx::FxHashMap;\n use std::hash::Hash;\n use std::ops;\n use std::mem;"}, {"sha": "1f674c1c664e4cba7927acaf2561e5990f36bf41", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -111,7 +111,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n     /// Iterate over elements, sorted by key\n     #[inline]\n-    pub fn iter(&self) -> ::std::slice::Iter<(K, V)> {\n+    pub fn iter(&self) -> ::std::slice::Iter<'_, (K, V)> {\n         self.data.iter()\n     }\n "}, {"sha": "19343a9250df3737530124d4f9c4ba6cc90aebf6", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,7 +1,9 @@\n use std::hash::{Hash, Hasher, BuildHasher};\n use std::marker::PhantomData;\n use std::mem;\n-use sip128::SipHasher128;\n+use crate::sip128::SipHasher128;\n+use crate::indexed_vec;\n+use crate::bit_set;\n \n /// When hashing something that ends up affecting properties like symbol names,\n /// we want these symbol names to be calculated independently of other factors\n@@ -17,7 +19,7 @@ pub struct StableHasher<W> {\n }\n \n impl<W: StableHasherResult> ::std::fmt::Debug for StableHasher<W> {\n-    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         write!(f, \"{:?}\", self.state)\n     }\n }\n@@ -433,7 +435,7 @@ impl<T, CTX> HashStable<CTX> for ::std::mem::Discriminant<T> {\n     }\n }\n \n-impl<I: ::indexed_vec::Idx, T, CTX> HashStable<CTX> for ::indexed_vec::IndexVec<I, T>\n+impl<I: indexed_vec::Idx, T, CTX> HashStable<CTX> for indexed_vec::IndexVec<I, T>\n     where T: HashStable<CTX>,\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -447,7 +449,7 @@ impl<I: ::indexed_vec::Idx, T, CTX> HashStable<CTX> for ::indexed_vec::IndexVec<\n }\n \n \n-impl<I: ::indexed_vec::Idx, CTX> HashStable<CTX> for ::bit_set::BitSet<I>\n+impl<I: indexed_vec::Idx, CTX> HashStable<CTX> for bit_set::BitSet<I>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           ctx: &mut CTX,"}, {"sha": "3757f921098f2d5ea13bff1d4968436b7add7ec1", "filename": "src/librustc_data_structures/svh.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsvh.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -9,7 +9,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n-use stable_hasher;\n+use crate::stable_hasher;\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct Svh {\n@@ -40,7 +40,7 @@ impl Hash for Svh {\n }\n \n impl fmt::Display for Svh {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(&self.to_string())\n     }\n }"}, {"sha": "ba1f6eb56fe886eec434fcc1c251c0f577f55a3d", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -21,7 +21,7 @@ use std::collections::HashMap;\n use std::hash::{Hash, BuildHasher};\n use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};\n-use owning_ref::{Erased, OwningRef};\n+use crate::owning_ref::{Erased, OwningRef};\n \n pub fn serial_join<A, B, RA, RB>(oper_a: A, oper_b: B) -> (RA, RB)\n     where A: FnOnce() -> RA,\n@@ -261,12 +261,12 @@ cfg_if! {\n             }\n \n             #[inline(always)]\n-            pub fn lock(&self) -> LockGuard<T> {\n+            pub fn lock(&self) -> LockGuard<'_, T> {\n                 self.0.lock()\n             }\n \n             #[inline(always)]\n-            pub fn lock_mut(&self) -> LockGuard<T> {\n+            pub fn lock_mut(&self) -> LockGuard<'_, T> {\n                 self.lock()\n             }\n         }\n@@ -490,19 +490,19 @@ impl<T> Lock<T> {\n \n     #[cfg(parallel_compiler)]\n     #[inline(always)]\n-    pub fn try_lock(&self) -> Option<LockGuard<T>> {\n+    pub fn try_lock(&self) -> Option<LockGuard<'_, T>> {\n         self.0.try_lock()\n     }\n \n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n-    pub fn try_lock(&self) -> Option<LockGuard<T>> {\n+    pub fn try_lock(&self) -> Option<LockGuard<'_, T>> {\n         self.0.try_borrow_mut().ok()\n     }\n \n     #[cfg(parallel_compiler)]\n     #[inline(always)]\n-    pub fn lock(&self) -> LockGuard<T> {\n+    pub fn lock(&self) -> LockGuard<'_, T> {\n         if ERROR_CHECKING {\n             self.0.try_lock().expect(\"lock was already held\")\n         } else {\n@@ -512,7 +512,7 @@ impl<T> Lock<T> {\n \n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n-    pub fn lock(&self) -> LockGuard<T> {\n+    pub fn lock(&self) -> LockGuard<'_, T> {\n         self.0.borrow_mut()\n     }\n \n@@ -522,12 +522,12 @@ impl<T> Lock<T> {\n     }\n \n     #[inline(always)]\n-    pub fn borrow(&self) -> LockGuard<T> {\n+    pub fn borrow(&self) -> LockGuard<'_, T> {\n         self.lock()\n     }\n \n     #[inline(always)]\n-    pub fn borrow_mut(&self) -> LockGuard<T> {\n+    pub fn borrow_mut(&self) -> LockGuard<'_, T> {\n         self.lock()\n     }\n }\n@@ -568,13 +568,13 @@ impl<T> RwLock<T> {\n \n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n-    pub fn read(&self) -> ReadGuard<T> {\n+    pub fn read(&self) -> ReadGuard<'_, T> {\n         self.0.borrow()\n     }\n \n     #[cfg(parallel_compiler)]\n     #[inline(always)]\n-    pub fn read(&self) -> ReadGuard<T> {\n+    pub fn read(&self) -> ReadGuard<'_, T> {\n         if ERROR_CHECKING {\n             self.0.try_read().expect(\"lock was already held\")\n         } else {\n@@ -589,25 +589,25 @@ impl<T> RwLock<T> {\n \n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n-    pub fn try_write(&self) -> Result<WriteGuard<T>, ()> {\n+    pub fn try_write(&self) -> Result<WriteGuard<'_, T>, ()> {\n         self.0.try_borrow_mut().map_err(|_| ())\n     }\n \n     #[cfg(parallel_compiler)]\n     #[inline(always)]\n-    pub fn try_write(&self) -> Result<WriteGuard<T>, ()> {\n+    pub fn try_write(&self) -> Result<WriteGuard<'_, T>, ()> {\n         self.0.try_write().ok_or(())\n     }\n \n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n-    pub fn write(&self) -> WriteGuard<T> {\n+    pub fn write(&self) -> WriteGuard<'_, T> {\n         self.0.borrow_mut()\n     }\n \n     #[cfg(parallel_compiler)]\n     #[inline(always)]\n-    pub fn write(&self) -> WriteGuard<T> {\n+    pub fn write(&self) -> WriteGuard<'_, T> {\n         if ERROR_CHECKING {\n             self.0.try_write().expect(\"lock was already held\")\n         } else {\n@@ -621,12 +621,12 @@ impl<T> RwLock<T> {\n     }\n \n     #[inline(always)]\n-    pub fn borrow(&self) -> ReadGuard<T> {\n+    pub fn borrow(&self) -> ReadGuard<'_, T> {\n         self.read()\n     }\n \n     #[inline(always)]\n-    pub fn borrow_mut(&self) -> WriteGuard<T> {\n+    pub fn borrow_mut(&self) -> WriteGuard<'_, T> {\n         self.write()\n     }\n }"}, {"sha": "3d74516d9c326292af58172ff3748d4791d37018", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -123,7 +123,7 @@ impl<T: PartialEq> Element<T> {\n mod test {\n     use super::*;\n     extern crate test;\n-    use self::test::Bencher;\n+    use test::Bencher;\n \n     #[test]\n     fn test_contains_and_insert() {"}, {"sha": "39aed9833607fc6b02a71a6a38af4e3add506e74", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,8 +1,8 @@\n-use bit_set::BitMatrix;\n-use fx::FxHashMap;\n-use sync::Lock;\n+use crate::bit_set::BitMatrix;\n+use crate::fx::FxHashMap;\n+use crate::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n+use crate::sync::Lock;\n use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n-use stable_hasher::{HashStable, StableHasher, StableHasherResult};\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;"}, {"sha": "c00c707a435427b985b878f6dc53dae387667c51", "filename": "src/librustc_data_structures/vec_linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fvec_linked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fvec_linked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fvec_linked_list.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,4 +1,4 @@\n-use indexed_vec::{Idx, IndexVec};\n+use crate::indexed_vec::{Idx, IndexVec};\n \n pub fn iter<Ls>(\n     first: Option<Ls::LinkIndex>,"}, {"sha": "06418b1051ac3ded53ac0c0016a5a4cced31c566", "filename": "src/librustc_data_structures/work_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c/src%2Flibrustc_data_structures%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fwork_queue.rs?ref=3e2b5a4b08d9647f7438f4e945d4c8b37c36a58c", "patch": "@@ -1,5 +1,5 @@\n-use bit_set::BitSet;\n-use indexed_vec::Idx;\n+use crate::bit_set::BitSet;\n+use crate::indexed_vec::Idx;\n use std::collections::VecDeque;\n \n /// A work queue is a handy data structure for tracking work left to"}]}