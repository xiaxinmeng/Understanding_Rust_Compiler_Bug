{"sha": "5e376b78cf22222091fd050af81fba6a634c6482", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMzc2Yjc4Y2YyMjIyMjA5MWZkMDUwYWY4MWZiYTZhNjM0YzY0ODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-17T23:46:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-18T00:00:39Z"}, "message": "rustdoc: Refactor itemdoc creation in extract pass", "tree": {"sha": "92611427c40c85e935e94b1b1ce93b7d081b4b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92611427c40c85e935e94b1b1ce93b7d081b4b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e376b78cf22222091fd050af81fba6a634c6482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e376b78cf22222091fd050af81fba6a634c6482", "html_url": "https://github.com/rust-lang/rust/commit/5e376b78cf22222091fd050af81fba6a634c6482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e376b78cf22222091fd050af81fba6a634c6482/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7ccda98d10228f39e54be258b825c2ce9514dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ccda98d10228f39e54be258b825c2ce9514dd9", "html_url": "https://github.com/rust-lang/rust/commit/e7ccda98d10228f39e54be258b825c2ce9514dd9"}], "stats": {"total": 72, "additions": 32, "deletions": 40}, "files": [{"sha": "0c44e249dfafdd76456ef130328b6f73609c6477", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5e376b78cf22222091fd050af81fba6a634c6482/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e376b78cf22222091fd050af81fba6a634c6482/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=5e376b78cf22222091fd050af81fba6a634c6482", "patch": "@@ -29,7 +29,8 @@ fn top_moddoc_from_crate(\n     crate: @ast::crate,\n     default_name: str\n ) -> doc::moddoc {\n-    moddoc_from_mod(crate.node.module, default_name, ast::crate_node_id)\n+    moddoc_from_mod(mk_itemdoc(ast::crate_node_id, default_name),\n+                    crate.node.module)\n }\n \n fn mk_itemdoc(id: ast::node_id, name: ast::ident) -> doc::itemdoc {\n@@ -43,52 +44,52 @@ fn mk_itemdoc(id: ast::node_id, name: ast::ident) -> doc::itemdoc {\n }\n \n fn moddoc_from_mod(\n-    module: ast::_mod,\n-    name: ast::ident,\n-    id: ast::node_id\n+    itemdoc: doc::itemdoc,\n+    module: ast::_mod\n ) -> doc::moddoc {\n     {\n-        item: mk_itemdoc(id, name),\n+        item: itemdoc,\n         items: ~vec::filter_map(module.items) {|item|\n+            let itemdoc = mk_itemdoc(item.id, item.ident);\n             alt item.node {\n               ast::item_mod(m) {\n                 some(doc::modtag(\n-                    moddoc_from_mod(m, item.ident, item.id)\n+                    moddoc_from_mod(itemdoc, m)\n                 ))\n               }\n               ast::item_fn(decl, _, _) {\n                 some(doc::fntag(\n-                    fndoc_from_fn(decl, item.ident, item.id)\n+                    fndoc_from_fn(itemdoc, decl)\n                 ))\n               }\n               ast::item_const(_, _) {\n                 some(doc::consttag(\n-                    constdoc_from_const(item.ident, item.id)\n+                    constdoc_from_const(itemdoc)\n                 ))\n               }\n               ast::item_enum(variants, _) {\n                 some(doc::enumtag(\n-                    enumdoc_from_enum(item.ident, item.id, variants)\n+                    enumdoc_from_enum(itemdoc, variants)\n                 ))\n               }\n               ast::item_res(decl, _, _, _, _) {\n                 some(doc::restag(\n-                    resdoc_from_resource(decl, item.ident, item.id)\n+                    resdoc_from_resource(itemdoc, decl)\n                 ))\n               }\n               ast::item_iface(_, methods) {\n                 some(doc::ifacetag(\n-                    ifacedoc_from_iface(methods, item.ident, item.id)\n+                    ifacedoc_from_iface(itemdoc, methods)\n                 ))\n               }\n               ast::item_impl(_, _, _, methods) {\n                 some(doc::impltag(\n-                    impldoc_from_impl(methods, item.ident, item.id)\n+                    impldoc_from_impl(itemdoc, methods)\n                 ))\n               }\n               ast::item_ty(_, _) {\n                 some(doc::tytag(\n-                    tydoc_from_ty(item.ident, item.id)\n+                    tydoc_from_ty(itemdoc)\n                 ))\n               }\n               _ {\n@@ -100,12 +101,11 @@ fn moddoc_from_mod(\n }\n \n fn fndoc_from_fn(\n-    decl: ast::fn_decl,\n-    name: ast::ident,\n-    id: ast::node_id\n+    itemdoc: doc::itemdoc,\n+    decl: ast::fn_decl\n ) -> doc::fndoc {\n     {\n-        item: mk_itemdoc(id, name),\n+        item: itemdoc,\n         args: argdocs_from_args(decl.inputs),\n         return: {\n             desc: none,\n@@ -138,12 +138,9 @@ fn argdoc_from_arg(arg: ast::arg) -> doc::argdoc {\n     }\n }\n \n-fn constdoc_from_const(\n-    name: ast::ident,\n-    id: ast::node_id\n-) -> doc::constdoc {\n+fn constdoc_from_const(itemdoc: doc::itemdoc) -> doc::constdoc {\n     {\n-        item: mk_itemdoc(id, name),\n+        item: itemdoc,\n         ty: none\n     }\n }\n@@ -156,12 +153,11 @@ fn should_extract_const_name_and_id() {\n }\n \n fn enumdoc_from_enum(\n-    name: ast::ident,\n-    id: ast::node_id,\n+    itemdoc: doc::itemdoc,\n     variants: [ast::variant]\n ) -> doc::enumdoc {\n     {\n-        item: mk_itemdoc(id, name),\n+        item: itemdoc,\n         variants: variantdocs_from_variants(variants)\n     }\n }\n@@ -194,12 +190,11 @@ fn should_extract_enum_variants() {\n }\n \n fn resdoc_from_resource(\n-    decl: ast::fn_decl,\n-    name: str,\n-    id: ast::node_id\n+    itemdoc: doc::itemdoc,\n+    decl: ast::fn_decl\n ) -> doc::resdoc {\n     {\n-        item: mk_itemdoc(id, name),\n+        item: itemdoc,\n         args: argdocs_from_args(decl.inputs),\n         sig: none\n     }\n@@ -219,12 +214,11 @@ fn should_extract_resource_args() {\n }\n \n fn ifacedoc_from_iface(\n-    methods: [ast::ty_method],\n-    name: str,\n-    id: ast::node_id\n+    itemdoc: doc::itemdoc,\n+    methods: [ast::ty_method]\n ) -> doc::ifacedoc {\n     {\n-        item: mk_itemdoc(id, name),\n+        item: itemdoc,\n         methods: vec::map(methods) {|method|\n             {\n                 name: method.ident,\n@@ -261,12 +255,11 @@ fn should_extract_iface_method_args() {\n }\n \n fn impldoc_from_impl(\n-    methods: [@ast::method],\n-    name: str,\n-    id: ast::node_id\n+    itemdoc: doc::itemdoc,\n+    methods: [@ast::method]\n ) -> doc::impldoc {\n     {\n-        item: mk_itemdoc(id, name),\n+        item: itemdoc,\n         iface_ty: none,\n         self_ty: none,\n         methods: vec::map(methods) {|method|\n@@ -311,11 +304,10 @@ fn should_extract_impl_method_args() {\n }\n \n fn tydoc_from_ty(\n-    name: str,\n-    id: ast::node_id\n+    itemdoc: doc::itemdoc\n ) -> doc::tydoc {\n     {\n-        item: mk_itemdoc(id, name),\n+        item: itemdoc,\n         sig: none\n     }\n }"}]}