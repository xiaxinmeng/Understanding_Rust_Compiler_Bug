{"sha": "2358e3eff604a770d5dabab9680d81148106fd68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNThlM2VmZjYwNGE3NzBkNWRhYmFiOTY4MGQ4MTE0ODEwNmZkNjg=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2019-08-07T04:19:07Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2019-08-10T13:16:35Z"}, "message": "Revert \"Rollup merge of #62150 - alex:mem-uninit-refactor, r=RalfJung\"\n\nThis reverts commit 1d45156866b54c3fc36edfdfcdd8149ad9cb5711, reversing\nchanges made to 0f92eb8a4a7d8715381f5b5d748d22315f6ff9c7.", "tree": {"sha": "9d17df8a859b78bab19b8aaefe33c43b854eaafc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d17df8a859b78bab19b8aaefe33c43b854eaafc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2358e3eff604a770d5dabab9680d81148106fd68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2358e3eff604a770d5dabab9680d81148106fd68", "html_url": "https://github.com/rust-lang/rust/commit/2358e3eff604a770d5dabab9680d81148106fd68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2358e3eff604a770d5dabab9680d81148106fd68/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c326c2e0f1761d133f295a8fe6d2b5a0b7ac6f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/c326c2e0f1761d133f295a8fe6d2b5a0b7ac6f91", "html_url": "https://github.com/rust-lang/rust/commit/c326c2e0f1761d133f295a8fe6d2b5a0b7ac6f91"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "ceaa870d2b3f71c743cc1f28af8adf1d1d2e47ae", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2358e3eff604a770d5dabab9680d81148106fd68/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2358e3eff604a770d5dabab9680d81148106fd68/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2358e3eff604a770d5dabab9680d81148106fd68", "patch": "@@ -707,11 +707,26 @@ extern \"rust-intrinsic\" {\n                          they should be used through stabilized interfaces \\\n                          in the rest of the standard library\",\n                issue = \"0\")]\n-    #[rustc_deprecated(reason = \"no longer used by rustc, will be removed - use MaybeUninit \\\n-                                 instead\",\n+    #[rustc_deprecated(reason = \"superseded by MaybeUninit, removal planned\",\n                        since = \"1.38.0\")]\n     pub fn init<T>() -> T;\n \n+    /// Creates an uninitialized value.\n+    ///\n+    /// `uninit` is unsafe because there is no guarantee of what its\n+    /// contents are. In particular its drop-flag may be set to any\n+    /// state, which means it may claim either dropped or\n+    /// undropped. In the general case one must use `ptr::write` to\n+    /// initialize memory previous set to the result of `uninit`.\n+    #[unstable(feature = \"core_intrinsics\",\n+               reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n+                         they should be used through stabilized interfaces \\\n+                         in the rest of the standard library\",\n+               issue = \"0\")]\n+    #[rustc_deprecated(reason = \"superseded by MaybeUninit, removal planned\",\n+                       since = \"1.38.0\")]\n+    pub fn uninit<T>() -> T;\n+\n     /// Moves a value out of scope without running drop glue.\n     pub fn forget<T: ?Sized>(_: T);\n "}, {"sha": "2b462f08d42dce2c39503286e85438de55b66249", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2358e3eff604a770d5dabab9680d81148106fd68/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2358e3eff604a770d5dabab9680d81148106fd68/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=2358e3eff604a770d5dabab9680d81148106fd68", "patch": "@@ -452,8 +452,11 @@ pub const fn needs_drop<T>() -> bool {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(bootstrap, allow(deprecated_in_future))]\n+#[allow(deprecated)]\n pub unsafe fn zeroed<T>() -> T {\n-    MaybeUninit::zeroed().assume_init()\n+    intrinsics::panic_if_uninhabited::<T>();\n+    intrinsics::init()\n }\n \n /// Bypasses Rust's normal memory-initialization checks by pretending to\n@@ -477,8 +480,11 @@ pub unsafe fn zeroed<T>() -> T {\n #[inline]\n #[rustc_deprecated(since = \"1.39.0\", reason = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(bootstrap, allow(deprecated_in_future))]\n+#[allow(deprecated)]\n pub unsafe fn uninitialized<T>() -> T {\n-    MaybeUninit::uninit().assume_init()\n+    intrinsics::panic_if_uninhabited::<T>();\n+    intrinsics::uninit()\n }\n \n /// Swaps the values at two mutable locations, without deinitializing either one."}, {"sha": "a9b8962f45b1b9bd5630aa149560522587e8abc4", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2358e3eff604a770d5dabab9680d81148106fd68/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2358e3eff604a770d5dabab9680d81148106fd68/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=2358e3eff604a770d5dabab9680d81148106fd68", "patch": "@@ -232,7 +232,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 return;\n             }\n             // Effectively no-ops\n-            \"forget\" => {\n+            \"uninit\" | \"forget\" => {\n                 return;\n             }\n             \"needs_drop\" => {"}, {"sha": "8bb24eef5e94c5ada9f35043a1bcfcebd84bc3cc", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2358e3eff604a770d5dabab9680d81148106fd68/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2358e3eff604a770d5dabab9680d81148106fd68/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=2358e3eff604a770d5dabab9680d81148106fd68", "patch": "@@ -145,6 +145,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n             \"init\" => (1, Vec::new(), param(0)),\n+            \"uninit\" => (1, Vec::new(), param(0)),\n             \"forget\" => (1, vec![param(0)], tcx.mk_unit()),\n             \"transmute\" => (2, vec![ param(0) ], param(1)),\n             \"move_val_init\" => {"}, {"sha": "9555efb639b50480e93a11db16d009cd23fa1f64", "filename": "src/test/ui/intrinsics/intrinsic-uninit.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2358e3eff604a770d5dabab9680d81148106fd68/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2358e3eff604a770d5dabab9680d81148106fd68/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-uninit.rs?ref=2358e3eff604a770d5dabab9680d81148106fd68", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+// pretty-expanded FIXME #23616\n+\n+#![feature(intrinsics)]\n+\n+mod rusti {\n+    extern \"rust-intrinsic\" {\n+        pub fn uninit<T>() -> T;\n+    }\n+}\n+pub fn main() {\n+    let _a : isize = unsafe {rusti::uninit()};\n+}"}]}