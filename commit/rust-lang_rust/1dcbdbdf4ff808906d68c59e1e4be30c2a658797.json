{"sha": "1dcbdbdf4ff808906d68c59e1e4be30c2a658797", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkY2JkYmRmNGZmODA4OTA2ZDY4YzU5ZTFlNGJlMzBjMmE2NTg3OTc=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-21T12:14:44Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-21T14:54:14Z"}, "message": "use let instead of match for matches with single bindings (clippy::match_single_binding)", "tree": {"sha": "f2cc69730091b30d12b9ee825f6021ca01184657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2cc69730091b30d12b9ee825f6021ca01184657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dcbdbdf4ff808906d68c59e1e4be30c2a658797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dcbdbdf4ff808906d68c59e1e4be30c2a658797", "html_url": "https://github.com/rust-lang/rust/commit/1dcbdbdf4ff808906d68c59e1e4be30c2a658797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dcbdbdf4ff808906d68c59e1e4be30c2a658797/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e103b2f9d0141ce751df3e99b3a7bc4337181b", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e103b2f9d0141ce751df3e99b3a7bc4337181b", "html_url": "https://github.com/rust-lang/rust/commit/54e103b2f9d0141ce751df3e99b3a7bc4337181b"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "9338f9afbbb3193d8ec906054c910695bb601581", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dcbdbdf4ff808906d68c59e1e4be30c2a658797/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcbdbdf4ff808906d68c59e1e4be30c2a658797/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=1dcbdbdf4ff808906d68c59e1e4be30c2a658797", "patch": "@@ -1056,8 +1056,9 @@ impl<'a> MethodDef<'a> {\n                     self_: field,\n                     other: other_fields\n                         .iter_mut()\n-                        .map(|l| match l.next().unwrap() {\n-                            (.., ex, _) => ex,\n+                        .map(|l| {\n+                            let (.., ex, _) = l.next().unwrap();\n+                            ex\n                         })\n                         .collect(),\n                     attrs,"}, {"sha": "7068e3c521c81797695c0bd8e08ca36920b364b1", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1dcbdbdf4ff808906d68c59e1e4be30c2a658797/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcbdbdf4ff808906d68c59e1e4be30c2a658797/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=1dcbdbdf4ff808906d68c59e1e4be30c2a658797", "patch": "@@ -368,11 +368,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let fn_sig = tcx.fn_sig(def_id);\n         let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, &fn_sig).0;\n         let fn_sig = fn_sig.subst(self.tcx, substs);\n-        let fn_sig = match self.normalize_associated_types_in_as_infer_ok(span, &fn_sig) {\n-            InferOk { value, obligations: o } => {\n-                obligations.extend(o);\n-                value\n-            }\n+\n+        let InferOk { value, obligations: o } =\n+            self.normalize_associated_types_in_as_infer_ok(span, &fn_sig);\n+        let fn_sig = {\n+            obligations.extend(o);\n+            value\n         };\n \n         // Register obligations for the parameters. This will include the\n@@ -384,12 +385,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Note that as the method comes from a trait, it should not have\n         // any late-bound regions appearing in its bounds.\n         let bounds = self.tcx.predicates_of(def_id).instantiate(self.tcx, substs);\n-        let bounds = match self.normalize_associated_types_in_as_infer_ok(span, &bounds) {\n-            InferOk { value, obligations: o } => {\n-                obligations.extend(o);\n-                value\n-            }\n+\n+        let InferOk { value, obligations: o } =\n+            self.normalize_associated_types_in_as_infer_ok(span, &bounds);\n+        let bounds = {\n+            obligations.extend(o);\n+            value\n         };\n+\n         assert!(!bounds.has_escaping_bound_vars());\n \n         let cause = traits::ObligationCause::misc(span, self.body_id);"}]}