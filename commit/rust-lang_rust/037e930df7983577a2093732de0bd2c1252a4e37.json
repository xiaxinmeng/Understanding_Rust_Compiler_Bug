{"sha": "037e930df7983577a2093732de0bd2c1252a4e37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzN2U5MzBkZjc5ODM1NzdhMjA5MzczMmRlMGJkMmMxMjUyYTRlMzc=", "commit": {"author": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-06-23T19:25:23Z"}, "committer": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-06-23T19:30:09Z"}, "message": "Review fixes", "tree": {"sha": "9ff25bbbb234f1c918d80423662599e296e539fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ff25bbbb234f1c918d80423662599e296e539fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/037e930df7983577a2093732de0bd2c1252a4e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/037e930df7983577a2093732de0bd2c1252a4e37", "html_url": "https://github.com/rust-lang/rust/commit/037e930df7983577a2093732de0bd2c1252a4e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/037e930df7983577a2093732de0bd2c1252a4e37/comments", "author": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "committer": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404df1cbbfac0126d256f99a12a175d9ce96fd0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/404df1cbbfac0126d256f99a12a175d9ce96fd0f", "html_url": "https://github.com/rust-lang/rust/commit/404df1cbbfac0126d256f99a12a175d9ce96fd0f"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "268974384a8d3c0176598d9bb1320f06e2fe76b1", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/037e930df7983577a2093732de0bd2c1252a4e37/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037e930df7983577a2093732de0bd2c1252a4e37/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=037e930df7983577a2093732de0bd2c1252a4e37", "patch": "@@ -659,8 +659,6 @@ impl<'a> Resolver<'a> {\n                     return;\n                 }\n \n-                let via_import = name_binding.is_import() && !name_binding.is_extern_crate();\n-\n                 let child_accessible =\n                     accessible && this.is_accessible_from(name_binding.vis, parent_scope.module);\n \n@@ -669,6 +667,13 @@ impl<'a> Resolver<'a> {\n                     return;\n                 }\n \n+                let via_import = name_binding.is_import() && !name_binding.is_extern_crate();\n+\n+                // There is an assumption elsewhere that paths of variants are in the enum's\n+                // declaration and not imported. With this assumption, the variant component is\n+                // chopped and the rest of the path is assumed to be the enum's own path. For\n+                // errors where a variant is used as the type instead of the enum, this causes\n+                // funny looking invalid suggestions, i.e `foo` instead of `foo::MyEnum`.\n                 if via_import && name_binding.is_possibly_imported_variant() {\n                     return;\n                 }"}]}