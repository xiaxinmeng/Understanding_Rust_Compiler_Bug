{"sha": "7f930b4a54fe976b68311391efce4c807205573c", "node_id": "C_kwDOAAsO6NoAKDdmOTMwYjRhNTRmZTk3NmI2ODMxMTM5MWVmY2U0YzgwNzIwNTU3M2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-31T05:26:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-31T05:26:36Z"}, "message": "Rollup merge of #106314 - jyn514:fix-panic, r=jyn514\n\nFix panic on `x build --help`\n\nFixes https://github.com/rust-lang/rust/issues/106313. This avoids trying to run `get_help` unless we actually need to see the paths that are available for the subcommand.\n\nThis originally regressed in https://github.com/rust-lang/rust/pull/106166.", "tree": {"sha": "f3a15ad8013c580859b559da9f4f8ed14757d65b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3a15ad8013c580859b559da9f4f8ed14757d65b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f930b4a54fe976b68311391efce4c807205573c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjr8gMCRBK7hj4Ov3rIwAAJsAIAGwl+wrQ3FvjQWlXlPia3nww\njLDNX/2kbKaM4XKNwW8OUOlFmF/y/5tXTAUlvJn2eUgo64khUJmaRu9BPjWqjcZR\nOqQ7YTNdGh270bFP5q0m/nsEhTk0m1t3jW+xbjh1I+bbODwx/HFlFZ/MExJGiizt\nKE3q1E3PHpniEHm9z4vQTuEg3Q5IH3+UkLE+WXVR4v0UZ8AKkKeYiMnWffYv34BD\nwZF9pE7h/anKv7ah4PtspGlw3b+gjPWVs4hKtDw7d/TA7+acROibNTFHkAZBAsxW\ndBA0XU5XNaG7I3m8DwR4xNOGMtbhxD+WCYiR/U615Qbd9kfoM50pwVH+695cNik=\n=JDtS\n-----END PGP SIGNATURE-----\n", "payload": "tree f3a15ad8013c580859b559da9f4f8ed14757d65b\nparent 96e32a49c9bdba7dae3e891e16d663f3745f30de\nparent 6d2fe52dc5065278c57542487f5d0ab31313d3bf\nauthor Michael Goulet <michael@errs.io> 1672464396 -0800\ncommitter GitHub <noreply@github.com> 1672464396 -0800\n\nRollup merge of #106314 - jyn514:fix-panic, r=jyn514\n\nFix panic on `x build --help`\n\nFixes https://github.com/rust-lang/rust/issues/106313. This avoids trying to run `get_help` unless we actually need to see the paths that are available for the subcommand.\n\nThis originally regressed in https://github.com/rust-lang/rust/pull/106166.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f930b4a54fe976b68311391efce4c807205573c", "html_url": "https://github.com/rust-lang/rust/commit/7f930b4a54fe976b68311391efce4c807205573c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f930b4a54fe976b68311391efce4c807205573c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e32a49c9bdba7dae3e891e16d663f3745f30de", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e32a49c9bdba7dae3e891e16d663f3745f30de", "html_url": "https://github.com/rust-lang/rust/commit/96e32a49c9bdba7dae3e891e16d663f3745f30de"}, {"sha": "6d2fe52dc5065278c57542487f5d0ab31313d3bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2fe52dc5065278c57542487f5d0ab31313d3bf", "html_url": "https://github.com/rust-lang/rust/commit/6d2fe52dc5065278c57542487f5d0ab31313d3bf"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "2c6d201d18fbeacc697c03f990d8770d04bfa8ff", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7f930b4a54fe976b68311391efce4c807205573c/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f930b4a54fe976b68311391efce4c807205573c/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=7f930b4a54fe976b68311391efce4c807205573c", "patch": "@@ -352,32 +352,32 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n \n         // fn usage()\n         let usage = |exit_code: i32, opts: &Options, verbose: bool, subcommand_help: &str| -> ! {\n-            // We have an unfortunate situation here: some Steps use `builder.in_tree_crates` to determine their paths.\n-            // To determine those crates, we need to run `cargo metadata`, which means we need all submodules to be checked out.\n-            // That takes a while to run, so only do it when paths were explicitly requested, not on all CLI errors.\n-            // `Build::new` won't load submodules for the `setup` command.\n-            let cmd = if verbose {\n-                println!(\"note: updating submodules before printing available paths\");\n-                \"build\"\n-            } else {\n-                \"setup\"\n-            };\n-            let config = Config::parse(&[cmd.to_string()]);\n-            let build = Build::new(config);\n-            let paths = Builder::get_help(&build, subcommand);\n-\n             println!(\"{}\", opts.usage(subcommand_help));\n-            if let Some(s) = paths {\n-                if verbose {\n+            if verbose {\n+                // We have an unfortunate situation here: some Steps use `builder.in_tree_crates` to determine their paths.\n+                // To determine those crates, we need to run `cargo metadata`, which means we need all submodules to be checked out.\n+                // That takes a while to run, so only do it when paths were explicitly requested, not on all CLI errors.\n+                // `Build::new` won't load submodules for the `setup` command.\n+                let cmd = if verbose {\n+                    println!(\"note: updating submodules before printing available paths\");\n+                    \"build\"\n+                } else {\n+                    \"setup\"\n+                };\n+                let config = Config::parse(&[cmd.to_string()]);\n+                let build = Build::new(config);\n+                let paths = Builder::get_help(&build, subcommand);\n+\n+                if let Some(s) = paths {\n                     println!(\"{}\", s);\n                 } else {\n-                    println!(\n-                        \"Run `./x.py {} -h -v` to see a list of available paths.\",\n-                        subcommand.as_str()\n-                    );\n+                    panic!(\"No paths available for subcommand `{}`\", subcommand.as_str());\n                 }\n-            } else if verbose {\n-                panic!(\"No paths available for subcommand `{}`\", subcommand.as_str());\n+            } else {\n+                println!(\n+                    \"Run `./x.py {} -h -v` to see a list of available paths.\",\n+                    subcommand.as_str()\n+                );\n             }\n             crate::detail_exit(exit_code);\n         };"}]}