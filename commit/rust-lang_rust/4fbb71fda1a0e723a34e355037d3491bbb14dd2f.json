{"sha": "4fbb71fda1a0e723a34e355037d3491bbb14dd2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYmI3MWZkYTFhMGU3MjNhMzRlMzU1MDM3ZDM0OTFiYmIxNGRkMmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-16T10:28:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-16T14:58:09Z"}, "message": "Add regression tests for #29859. However #29859 is not fully fixed.", "tree": {"sha": "616ed0cc4aa9a55d30a918911e93f549f29a7e8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/616ed0cc4aa9a55d30a918911e93f549f29a7e8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fbb71fda1a0e723a34e355037d3491bbb14dd2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbb71fda1a0e723a34e355037d3491bbb14dd2f", "html_url": "https://github.com/rust-lang/rust/commit/4fbb71fda1a0e723a34e355037d3491bbb14dd2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fbb71fda1a0e723a34e355037d3491bbb14dd2f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c14649ce859194b7b939597ea2b3c0dee0611b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c14649ce859194b7b939597ea2b3c0dee0611b9", "html_url": "https://github.com/rust-lang/rust/commit/8c14649ce859194b7b939597ea2b3c0dee0611b9"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "1362f8ac0aef5dd19627fd5b1a804a7b3927ac3b", "filename": "src/test/compile-fail/traits-inductive-overflow-supertrait-oibit.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4fbb71fda1a0e723a34e355037d3491bbb14dd2f/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbb71fda1a0e723a34e355037d3491bbb14dd2f/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs?ref=4fbb71fda1a0e723a34e355037d3491bbb14dd2f", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// OIBIT-based version of #29859, supertrait version. Test that using\n+// a simple OIBIT `..` impl alone still doesn't allow arbitary bounds\n+// to be synthesized.\n+\n+#![feature(optin_builtin_traits)]\n+\n+trait Magic: Copy {}\n+impl Magic for .. {}\n+\n+fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n+\n+#[derive(Debug)]\n+struct NoClone;\n+\n+fn main() {\n+    let (a, b) = copy(NoClone); //~ ERROR E0277\n+    println!(\"{:?} {:?}\", a, b);\n+}"}, {"sha": "c717ae9639fa9e9382cc7b81c2a892a2f8df0016", "filename": "src/test/compile-fail/traits-inductive-overflow-supertrait.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4fbb71fda1a0e723a34e355037d3491bbb14dd2f/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbb71fda1a0e723a34e355037d3491bbb14dd2f/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait.rs?ref=4fbb71fda1a0e723a34e355037d3491bbb14dd2f", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #29859, supertrait version. This example\n+// allowed arbitrary trait bounds to be synthesized.\n+\n+trait Magic: Copy {}\n+impl<T: Magic> Magic for T {}\n+\n+fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n+\n+#[derive(Debug)]\n+struct NoClone;\n+\n+fn main() {\n+    let (a, b) = copy(NoClone); //~ ERROR E0275\n+    println!(\"{:?} {:?}\", a, b);\n+}"}, {"sha": "c622dca2b4df6ddf960adc9e737103a9f7e19755", "filename": "src/test/compile-fail/traits-inductive-overflow-two-traits.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4fbb71fda1a0e723a34e355037d3491bbb14dd2f/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbb71fda1a0e723a34e355037d3491bbb14dd2f/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-two-traits.rs?ref=4fbb71fda1a0e723a34e355037d3491bbb14dd2f", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #29859, initial version. This example allowed\n+// arbitrary trait bounds to be synthesized.\n+\n+// Trait that you want all types to implement.\n+use std::marker::{Sync as Trait};\n+\n+pub trait Magic {\n+    type X: Trait;\n+}\n+impl<T: Magic> Magic for T {\n+    type X = Self;\n+}\n+\n+fn check<T: Trait>() {}\n+\n+fn wizard<T: Magic>() { check::<<T as Magic>::X>(); }\n+\n+fn main() {\n+    wizard::<*mut ()>(); //~ ERROR E0275\n+    // check::<*mut ()>();\n+}"}]}