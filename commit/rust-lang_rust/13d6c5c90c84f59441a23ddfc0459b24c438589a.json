{"sha": "13d6c5c90c84f59441a23ddfc0459b24c438589a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZDZjNWM5MGM4NGY1OTQ0MWEyM2RkZmMwNDU5YjI0YzQzODU4OWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T02:49:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T02:49:45Z"}, "message": "Auto merge of #87927 - spastorino:use-def-id-typeckresults, r=oli-obk\n\nMake concrete_opaque_types be FxHashSet<DefId>\n\nr? `@oli-obk`\n\n`@bors` rollup=always", "tree": {"sha": "7128455d9e6b38acd617b4d01f459f6afe261d09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7128455d9e6b38acd617b4d01f459f6afe261d09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d6c5c90c84f59441a23ddfc0459b24c438589a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d6c5c90c84f59441a23ddfc0459b24c438589a", "html_url": "https://github.com/rust-lang/rust/commit/13d6c5c90c84f59441a23ddfc0459b24c438589a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d6c5c90c84f59441a23ddfc0459b24c438589a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61885df263f1f4fb992189f0d149bebcf2b698ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/61885df263f1f4fb992189f0d149bebcf2b698ca", "html_url": "https://github.com/rust-lang/rust/commit/61885df263f1f4fb992189f0d149bebcf2b698ca"}, {"sha": "0aa0d59e513a53def789b4eb0ee1a982b9180243", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa0d59e513a53def789b4eb0ee1a982b9180243", "html_url": "https://github.com/rust-lang/rust/commit/0aa0d59e513a53def789b4eb0ee1a982b9180243"}], "stats": {"total": 30, "additions": 3, "deletions": 27}, "files": [{"sha": "ef0392e51970b27f96a16cdc942036e880811930", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d6c5c90c84f59441a23ddfc0459b24c438589a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d6c5c90c84f59441a23ddfc0459b24c438589a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=13d6c5c90c84f59441a23ddfc0459b24c438589a", "patch": "@@ -32,7 +32,6 @@ use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n-use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -46,7 +45,6 @@ use rustc_hir::{\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::OpaqueTypeKey;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n use rustc_session::lint::{Level, Lint};\n@@ -477,7 +475,7 @@ pub struct TypeckResults<'tcx> {\n \n     /// All the opaque types that are restricted to concrete types\n     /// by this function.\n-    pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n+    pub concrete_opaque_types: FxHashSet<DefId>,\n \n     /// Tracks the minimum captures required for a closure;\n     /// see `MinCaptureInformationMap` for more details."}, {"sha": "a13157b460828a809cf7a251dbde2164bf729a8a", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13d6c5c90c84f59441a23ddfc0459b24c438589a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d6c5c90c84f59441a23ddfc0459b24c438589a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=13d6c5c90c84f59441a23ddfc0459b24c438589a", "patch": "@@ -552,23 +552,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             // in some other location, or we'll end up emitting an error due\n             // to the lack of defining usage\n             if !skip_add {\n-                let old_concrete_ty = self\n-                    .typeck_results\n-                    .concrete_opaque_types\n-                    .insert(opaque_type_key, definition_ty);\n-                if let Some(old_concrete_ty) = old_concrete_ty {\n-                    if old_concrete_ty != definition_ty {\n-                        span_bug!(\n-                            span,\n-                            \"`visit_opaque_types` tried to write different types for the same \\\n-                                 opaque type: {:?}, {:?}, {:?}, {:?}\",\n-                            opaque_type_key.def_id,\n-                            definition_ty,\n-                            opaque_defn,\n-                            old_concrete_ty,\n-                        );\n-                    }\n-                }\n+                self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id);\n             }\n         }\n     }"}, {"sha": "e63c3346e02b1dfc5a4a2f3ae53e8f45cb6f9286", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13d6c5c90c84f59441a23ddfc0459b24c438589a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d6c5c90c84f59441a23ddfc0459b24c438589a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=13d6c5c90c84f59441a23ddfc0459b24c438589a", "patch": "@@ -540,13 +540,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             }\n             // Calling `mir_borrowck` can lead to cycle errors through\n             // const-checking, avoid calling it if we don't have to.\n-            if self\n-                .tcx\n-                .typeck(def_id)\n-                .concrete_opaque_types\n-                .any_value_matching(|(key, _)| key.def_id == self.def_id)\n-                .is_none()\n-            {\n+            if !self.tcx.typeck(def_id).concrete_opaque_types.contains(&self.def_id) {\n                 debug!(\"no constraints in typeck results\");\n                 return;\n             }"}]}