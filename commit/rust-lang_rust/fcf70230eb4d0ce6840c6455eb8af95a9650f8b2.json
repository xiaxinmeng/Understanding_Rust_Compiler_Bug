{"sha": "fcf70230eb4d0ce6840c6455eb8af95a9650f8b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjcwMjMwZWI0ZDBjZTY4NDBjNjQ1NWViOGFmOTVhOTY1MGY4YjI=", "commit": {"author": {"name": "Ivan Petkov", "email": "ivanppetkov@gmail.com", "date": "2015-02-24T06:27:27Z"}, "committer": {"name": "Ivan Petkov", "email": "ivanppetkov@gmail.com", "date": "2015-02-24T06:32:58Z"}, "message": "Properly reimplement `unsafe-code` lint to honor changing lint attributes", "tree": {"sha": "55dd1ad8099a2e98d38b16f8d176be485a3a78e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55dd1ad8099a2e98d38b16f8d176be485a3a78e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf70230eb4d0ce6840c6455eb8af95a9650f8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf70230eb4d0ce6840c6455eb8af95a9650f8b2", "html_url": "https://github.com/rust-lang/rust/commit/fcf70230eb4d0ce6840c6455eb8af95a9650f8b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf70230eb4d0ce6840c6455eb8af95a9650f8b2/comments", "author": {"login": "ipetkov", "id": 1638690, "node_id": "MDQ6VXNlcjE2Mzg2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1638690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipetkov", "html_url": "https://github.com/ipetkov", "followers_url": "https://api.github.com/users/ipetkov/followers", "following_url": "https://api.github.com/users/ipetkov/following{/other_user}", "gists_url": "https://api.github.com/users/ipetkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipetkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipetkov/subscriptions", "organizations_url": "https://api.github.com/users/ipetkov/orgs", "repos_url": "https://api.github.com/users/ipetkov/repos", "events_url": "https://api.github.com/users/ipetkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ipetkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ipetkov", "id": 1638690, "node_id": "MDQ6VXNlcjE2Mzg2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1638690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipetkov", "html_url": "https://github.com/ipetkov", "followers_url": "https://api.github.com/users/ipetkov/followers", "following_url": "https://api.github.com/users/ipetkov/following{/other_user}", "gists_url": "https://api.github.com/users/ipetkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipetkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipetkov/subscriptions", "organizations_url": "https://api.github.com/users/ipetkov/orgs", "repos_url": "https://api.github.com/users/ipetkov/repos", "events_url": "https://api.github.com/users/ipetkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ipetkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0f7ca27de6b4e03f30012656dad270cda55a363", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f7ca27de6b4e03f30012656dad270cda55a363", "html_url": "https://github.com/rust-lang/rust/commit/f0f7ca27de6b4e03f30012656dad270cda55a363"}], "stats": {"total": 103, "additions": 71, "deletions": 32}, "files": [{"sha": "36c812f440fdaafc0d96826cb141781c7f237b36", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 22, "deletions": 32, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fcf70230eb4d0ce6840c6455eb8af95a9650f8b2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf70230eb4d0ce6840c6455eb8af95a9650f8b2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=fcf70230eb4d0ce6840c6455eb8af95a9650f8b2", "patch": "@@ -1292,46 +1292,36 @@ impl LintPass for UnsafeCode {\n     }\n \n     fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n-        use syntax::ast::Unsafety::Unsafe;\n-\n-        fn check_method(cx: &Context, meth: &P<ast::Method>) {\n-            if let ast::Method_::MethDecl(_, _, _, _, Unsafe, _, _, _) = meth.node {\n-                cx.span_lint(UNSAFE_CODE, meth.span, \"implementation of an `unsafe` method\");\n-            }\n-        }\n-\n         match it.node {\n-            ast::ItemFn(_, Unsafe, _, _, _) =>\n-                cx.span_lint(UNSAFE_CODE, it.span, \"declaration of an `unsafe` function\"),\n+            ast::ItemTrait(ast::Unsafety::Unsafe, _, _, _) =>\n+                cx.span_lint(UNSAFE_CODE, it.span, \"declaration of an `unsafe` trait\"),\n \n-            ast::ItemTrait(trait_safety, _, _, ref items) => {\n-                if trait_safety == Unsafe {\n-                    cx.span_lint(UNSAFE_CODE, it.span, \"declaration of an `unsafe` trait\");\n-                }\n+            ast::ItemImpl(ast::Unsafety::Unsafe, _, _, _, _, _) =>\n+                cx.span_lint(UNSAFE_CODE, it.span, \"implementation of an `unsafe` trait\"),\n \n-                for it in items {\n-                    match *it {\n-                        ast::RequiredMethod(ast::TypeMethod { unsafety: Unsafe, span, ..}) =>\n-                            cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` method\"),\n-                        ast::ProvidedMethod(ref meth) => check_method(cx, meth),\n-                        _ => (),\n-                    }\n-                }\n-            },\n+            _ => return,\n+        }\n+    }\n \n-            ast::ItemImpl(impl_safety, _, _, _, _, ref impls) => {\n-                if impl_safety == Unsafe {\n-                    cx.span_lint(UNSAFE_CODE, it.span, \"implementation of an `unsafe` trait\");\n-                }\n+    fn check_fn(&mut self, cx: &Context, fk: visit::FnKind, _: &ast::FnDecl,\n+                _: &ast::Block, span: Span, _: ast::NodeId) {\n+        match fk {\n+            visit::FkItemFn(_, _, ast::Unsafety::Unsafe, _) =>\n+                cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` function\"),\n \n-                for item in impls {\n-                    if let ast::ImplItem::MethodImplItem(ref meth) = *item {\n-                        check_method(cx, meth);\n-                    }\n+            visit::FkMethod(_, _, m) => {\n+                if let ast::Method_::MethDecl(_, _, _, _, ast::Unsafety::Unsafe, _, _, _) = m.node {\n+                    cx.span_lint(UNSAFE_CODE, m.span, \"implementation of an `unsafe` method\")\n                 }\n             },\n \n-            _ => return,\n+            _ => (),\n+        }\n+    }\n+\n+    fn check_ty_method(&mut self, cx: &Context, ty_method: &ast::TypeMethod) {\n+        if let ast::TypeMethod { unsafety: ast::Unsafety::Unsafe, span, ..} = *ty_method {\n+            cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` method\")\n         }\n     }\n }"}, {"sha": "8440cf3a88e10adda62bc34751beb3a3d62e5548", "filename": "src/test/compile-fail/lint-unsafe-code.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fcf70230eb4d0ce6840c6455eb8af95a9650f8b2/src%2Ftest%2Fcompile-fail%2Flint-unsafe-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf70230eb4d0ce6840c6455eb8af95a9650f8b2/src%2Ftest%2Fcompile-fail%2Flint-unsafe-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unsafe-code.rs?ref=fcf70230eb4d0ce6840c6455eb8af95a9650f8b2", "patch": "@@ -15,6 +15,8 @@\n use std::marker::PhantomFn;\n \n struct Bar;\n+struct Bar2;\n+struct Bar3;\n \n #[allow(unsafe_code)]\n mod allowed_unsafe {\n@@ -46,6 +48,53 @@ impl Baz for Bar {\n     unsafe fn provided_override(&self) {} //~ ERROR: implementation of an `unsafe` method\n }\n \n+\n+#[allow(unsafe_code)]\n+trait A {\n+    unsafe fn allowed_unsafe(&self);\n+    unsafe fn allowed_unsafe_provided(&self) {}\n+}\n+\n+#[allow(unsafe_code)]\n+impl Baz for Bar2 {\n+    unsafe fn baz(&self) {}\n+    unsafe fn provided_override(&self) {}\n+}\n+\n+impl Baz for Bar3 {\n+    #[allow(unsafe_code)]\n+    unsafe fn baz(&self) {}\n+    unsafe fn provided_override(&self) {} //~ ERROR: implementation of an `unsafe` method\n+}\n+\n+#[allow(unsafe_code)]\n+unsafe trait B {\n+    fn dummy(&self) {}\n+}\n+\n+trait C {\n+    #[allow(unsafe_code)]\n+    unsafe fn baz(&self);\n+    unsafe fn provided(&self) {} //~ ERROR: implementation of an `unsafe` method\n+}\n+\n+impl C for Bar {\n+    #[allow(unsafe_code)]\n+    unsafe fn baz(&self) {}\n+    unsafe fn provided(&self) {} //~ ERROR: implementation of an `unsafe` method\n+}\n+\n+impl C for Bar2 {\n+    unsafe fn baz(&self) {} //~ ERROR: implementation of an `unsafe` method\n+}\n+\n+trait D {\n+    #[allow(unsafe_code)]\n+    unsafe fn unsafe_provided(&self) {}\n+}\n+\n+impl D for Bar {}\n+\n fn main() {\n     unsafe {} //~ ERROR: usage of an `unsafe` block\n "}]}