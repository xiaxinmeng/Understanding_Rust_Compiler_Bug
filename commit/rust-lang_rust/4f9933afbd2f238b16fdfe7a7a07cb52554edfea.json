{"sha": "4f9933afbd2f238b16fdfe7a7a07cb52554edfea", "node_id": "C_kwDOAAsO6NoAKDRmOTkzM2FmYmQyZjIzOGIxNmZkZmU3YTdhMDdjYjUyNTU0ZWRmZWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-07T12:36:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-07T12:36:50Z"}, "message": "Rollup merge of #98507 - xFrednet:rfc-2383-manual-expectation-magic, r=wesleywiser\n\nFinishing touches for `#[expect]` (RFC 2383)\n\nThis PR adds documentation and some functionality to rustc's lint passes, to manually fulfill expectations. This is needed for some lints in Clippy. Hopefully, it should be one of the last things before we can move forward with stabilizing this feature.\n\nAs part of this PR, I've also updated `clippy::duplicate_mod` to showcase how this new functionality can be used and to ensure that it works correctly.\n\n---\n\nchangelog: [`duplicate_mod`]: Fixed lint attribute interaction\n\nr? `@wesleywiser`\n\ncc: https://github.com/rust-lang/rust/issues/97660, https://github.com/rust-lang/rust/issues/85549\n\nAnd I guess that's it. Here have a magical unicorn :unicorn:", "tree": {"sha": "7307b21327473811195f50b18be4f42f43a11643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7307b21327473811195f50b18be4f42f43a11643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f9933afbd2f238b16fdfe7a7a07cb52554edfea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9933afbd2f238b16fdfe7a7a07cb52554edfea", "html_url": "https://github.com/rust-lang/rust/commit/4f9933afbd2f238b16fdfe7a7a07cb52554edfea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f9933afbd2f238b16fdfe7a7a07cb52554edfea/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5483a7dd44a91e190ba8eb1361879ac3936cc415", "url": "https://api.github.com/repos/rust-lang/rust/commits/5483a7dd44a91e190ba8eb1361879ac3936cc415", "html_url": "https://github.com/rust-lang/rust/commit/5483a7dd44a91e190ba8eb1361879ac3936cc415"}, {"sha": "0d443d17eb17450da66a76c015933f30734e99d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d443d17eb17450da66a76c015933f30734e99d8", "html_url": "https://github.com/rust-lang/rust/commit/0d443d17eb17450da66a76c015933f30734e99d8"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "4f49bb879f5035c9b66e07a354089d681046e5e9", "filename": "clippy_lints/src/duplicate_mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4f9933afbd2f238b16fdfe7a7a07cb52554edfea/clippy_lints%2Fsrc%2Fduplicate_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9933afbd2f238b16fdfe7a7a07cb52554edfea/clippy_lints%2Fsrc%2Fduplicate_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduplicate_mod.rs?ref=4f9933afbd2f238b16fdfe7a7a07cb52554edfea", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Crate, Inline, Item, ItemKind, ModKind};\n use rustc_errors::MultiSpan;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext, Level};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{FileName, Span};\n use std::collections::BTreeMap;\n@@ -49,6 +49,7 @@ declare_clippy_lint! {\n struct Modules {\n     local_path: PathBuf,\n     spans: Vec<Span>,\n+    lint_levels: Vec<Level>,\n }\n \n #[derive(Default)]\n@@ -70,13 +71,30 @@ impl EarlyLintPass for DuplicateMod {\n             let modules = self.modules.entry(absolute_path).or_insert(Modules {\n                 local_path,\n                 spans: Vec::new(),\n+                lint_levels: Vec::new(),\n             });\n             modules.spans.push(item.span_with_attributes());\n+            modules.lint_levels.push(cx.get_lint_level(DUPLICATE_MOD));\n         }\n     }\n \n     fn check_crate_post(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n-        for Modules { local_path, spans } in self.modules.values() {\n+        for Modules { local_path, spans, lint_levels } in self.modules.values() {\n+            if spans.len() < 2 {\n+                continue;\n+            }\n+\n+            // At this point the lint would be emitted\n+            assert_eq!(spans.len(), lint_levels.len());\n+            let spans: Vec<_> = spans.into_iter().zip(lint_levels).filter_map(|(span, lvl)|{\n+                if let Some(id) = lvl.get_expectation_id() {\n+                    cx.fulfill_expectation(id);\n+                }\n+\n+                (!matches!(lvl, Level::Allow | Level::Expect(_))).then_some(*span)\n+            })\n+            .collect();\n+\n             if spans.len() < 2 {\n                 continue;\n             }"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui-cargo/duplicate_mod/fail/src/d.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4f9933afbd2f238b16fdfe7a7a07cb52554edfea/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9933afbd2f238b16fdfe7a7a07cb52554edfea/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs?ref=4f9933afbd2f238b16fdfe7a7a07cb52554edfea"}, {"sha": "99ca538b6e4a58bcecd21c2ea8bc7dc04037a9d5", "filename": "tests/ui-cargo/duplicate_mod/fail/src/main.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f9933afbd2f238b16fdfe7a7a07cb52554edfea/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9933afbd2f238b16fdfe7a7a07cb52554edfea/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs?ref=4f9933afbd2f238b16fdfe7a7a07cb52554edfea", "patch": "@@ -1,3 +1,5 @@\n+#[feature(lint_reasons)]\n+\n mod a;\n \n mod b;\n@@ -13,4 +15,15 @@ mod c3;\n mod from_other_module;\n mod other_module;\n \n+mod d;\n+#[path = \"d.rs\"]\n+mod d2;\n+#[path = \"d.rs\"]\n+#[expect(clippy::duplicate_mod)]\n+mod d3;\n+#[path = \"d.rs\"]\n+#[allow(clippy::duplicate_mod)]\n+mod d4;\n+\n+\n fn main() {}"}, {"sha": "61df1ad5d501aad6d95ea089f282af0e639d7ce0", "filename": "tests/ui-cargo/duplicate_mod/fail/src/main.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f9933afbd2f238b16fdfe7a7a07cb52554edfea/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f9933afbd2f238b16fdfe7a7a07cb52554edfea/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr?ref=4f9933afbd2f238b16fdfe7a7a07cb52554edfea", "patch": "@@ -1,5 +1,5 @@\n error: file is loaded as a module multiple times: `$DIR/b.rs`\n-  --> $DIR/main.rs:3:1\n+  --> $DIR/main.rs:5:1\n    |\n LL |   mod b;\n    |   ^^^^^^ first loaded here\n@@ -11,7 +11,7 @@ LL | | mod b2;\n    = help: replace all but one `mod` item with `use` items\n \n error: file is loaded as a module multiple times: `$DIR/c.rs`\n-  --> $DIR/main.rs:7:1\n+  --> $DIR/main.rs:9:1\n    |\n LL |   mod c;\n    |   ^^^^^^ first loaded here\n@@ -25,7 +25,7 @@ LL | | mod c3;\n    = help: replace all but one `mod` item with `use` items\n \n error: file is loaded as a module multiple times: `$DIR/from_other_module.rs`\n-  --> $DIR/main.rs:13:1\n+  --> $DIR/main.rs:15:1\n    |\n LL |   mod from_other_module;\n    |   ^^^^^^^^^^^^^^^^^^^^^^ first loaded here\n@@ -38,5 +38,16 @@ LL | | mod m;\n    |\n    = help: replace all but one `mod` item with `use` items\n \n-error: aborting due to 3 previous errors\n+error: file is loaded as a module multiple times: `$DIR/b.rs`\n+  --> $DIR/main.rs:18:1\n+   |\n+LL |   mod d;\n+   |   ^^^^^^ first loaded here\n+LL | / #[path = \"d.rs\"]\n+LL | | mod d2;\n+   | |_______^ loaded again here\n+   |\n+   = help: replace all but one `mod` item with `use` items\n+\n+error: aborting due to 4 previous errors\n "}]}