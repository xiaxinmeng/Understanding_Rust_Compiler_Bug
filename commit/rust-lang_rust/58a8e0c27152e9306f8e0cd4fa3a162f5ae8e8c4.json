{"sha": "58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YThlMGMyNzE1MmU5MzA2ZjhlMGNkNGZhM2ExNjJmNWFlOGU4YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-16T15:20:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-16T15:20:10Z"}, "message": "Auto merge of #48252 - Mark-Simulacrum:exclude-paths, r=alexcrichton\n\nFix not running some steps in CI\n\nWe'd previously assumed that these paths would be relative to the src\ndir, and that for example our various CI scripts would, when calling\nx.py, use `../x.py build ../src/tools/...` but this isn't the case --\nthey use `../x.py` without using the relevant source-relative path.\n\nWe eventually may want to make this (actually somewhat logical) change,\nbut this is not that time.\n\nr? @kennytm", "tree": {"sha": "3e0c20c7c5713a68f675d0e471b1ffc08aaddbb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e0c20c7c5713a68f675d0e471b1ffc08aaddbb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4", "html_url": "https://github.com/rust-lang/rust/commit/58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5570cdcc9e7da0cca84e394e872bc16df2c6dc50", "url": "https://api.github.com/repos/rust-lang/rust/commits/5570cdcc9e7da0cca84e394e872bc16df2c6dc50", "html_url": "https://github.com/rust-lang/rust/commit/5570cdcc9e7da0cca84e394e872bc16df2c6dc50"}, {"sha": "c788433b15a81935abcb84e9644d04422bf84a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/c788433b15a81935abcb84e9644d04422bf84a48", "html_url": "https://github.com/rust-lang/rust/commit/c788433b15a81935abcb84e9644d04422bf84a48"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "66a1c97246200d5c68a94817625929bdac17d22a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4", "patch": "@@ -217,7 +217,7 @@ impl StepDescription {\n                 }\n \n                 if !attempted_run {\n-                    eprintln!(\"Warning: no rules matched {}.\", path.display());\n+                    panic!(\"Error: no rules matched {}.\", path.display());\n                 }\n             }\n         }\n@@ -385,6 +385,12 @@ impl<'a> Builder<'a> {\n             Subcommand::Clean { .. } => panic!(),\n         };\n \n+        if let Some(path) = paths.get(0) {\n+            if path == Path::new(\"nonexistent/path/to/trigger/cargo/metadata\") {\n+                return;\n+            }\n+        }\n+\n         let builder = Builder {\n             build,\n             top_stage: build.config.stage.unwrap_or(2),"}, {"sha": "42b949527e09dda2bec9818903aa65bd974fb795", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=58a8e0c27152e9306f8e0cd4fa3a162f5ae8e8c4", "patch": "@@ -278,9 +278,7 @@ Arguments:\n         let src = matches.opt_str(\"src\").map(PathBuf::from)\n             .or_else(|| env::var_os(\"SRC\").map(PathBuf::from))\n             .unwrap_or(cwd.clone());\n-        let paths = matches.free[1..].iter().map(|p| {\n-            cwd.join(p).strip_prefix(&src).expect(\"paths passed to be inside checkout\").into()\n-        }).collect::<Vec<PathBuf>>();\n+        let paths = matches.free[1..].iter().map(|p| p.into()).collect::<Vec<PathBuf>>();\n \n         let cfg_file = matches.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n             if fs::metadata(\"config.toml\").is_ok() {\n@@ -380,9 +378,7 @@ Arguments:\n             cmd,\n             incremental: matches.opt_present(\"incremental\"),\n             exclude: split(matches.opt_strs(\"exclude\"))\n-                .into_iter().map(|p| {\n-                    cwd.join(p).strip_prefix(&src).expect(\"paths to be inside checkout\").into()\n-                }).collect::<Vec<_>>(),\n+                .into_iter().map(|p| p.into()).collect::<Vec<_>>(),\n             src,\n         }\n     }"}]}