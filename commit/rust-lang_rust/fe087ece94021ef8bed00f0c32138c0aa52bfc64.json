{"sha": "fe087ece94021ef8bed00f0c32138c0aa52bfc64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMDg3ZWNlOTQwMjFlZjhiZWQwMGYwYzMyMTM4YzBhYTUyYmZjNjQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-05T00:29:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-05T00:29:31Z"}, "message": "Rollup merge of #77395 - ssomers:btree_love_the_leaf_edge_comments, r=Mark-Simulacrum\n\nBTreeMap: admit the existence of leaf edges in comments\n\nThe btree code is ambiguous about leaf edges (i.e., edges within leaf nodes). Iteration relies on them heavily, but some of the comments suggest there are no leaf edges (extracted from #77025)\n\nr? @Mark-Simulacrum", "tree": {"sha": "d9141f9614ea18f4ee79a5b3bec8d943765145a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9141f9614ea18f4ee79a5b3bec8d943765145a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe087ece94021ef8bed00f0c32138c0aa52bfc64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfemjrCRBK7hj4Ov3rIwAAdHIIAGReWxaQ6CMkvuU2OJ1RmtZY\niDqyKeMuEf2eZYbMd39J/LRppAV7YLhE/phMOr/02Cx9cYPp/lbMSYDtjds4n46U\nw1ldOd646g+NFke6NKdM+UXNKQ30AVkkIN8MoJlItVeHYVrHybCUq3y9HjhCKtDD\n7yHMMidEmL39/jvIopu7GOJmDs7hUDJCj22JvrsTXMBSYP8Ma7HmFy6tJr3eMq0T\nMXoAC5v0MrN1ZKp1yX4y+caYQjX8QLxZnQLtSCkO67eaTcdPKzOYarcZ/xsEypN0\ndWrP8B3oyJyzbDXXKId2JU+nLotfizU0ISUAb6qP5BpAoB+bxTVso0Pq3u79f0g=\n=BuDP\n-----END PGP SIGNATURE-----\n", "payload": "tree d9141f9614ea18f4ee79a5b3bec8d943765145a3\nparent 583269d8c5df4456da75ef888913c8760645f046\nparent df76cf89add1454f2ec2f11810120b90367b6921\nauthor Dylan DPC <dylan.dpc@gmail.com> 1601857771 +0200\ncommitter GitHub <noreply@github.com> 1601857771 +0200\n\nRollup merge of #77395 - ssomers:btree_love_the_leaf_edge_comments, r=Mark-Simulacrum\n\nBTreeMap: admit the existence of leaf edges in comments\n\nThe btree code is ambiguous about leaf edges (i.e., edges within leaf nodes). Iteration relies on them heavily, but some of the comments suggest there are no leaf edges (extracted from #77025)\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe087ece94021ef8bed00f0c32138c0aa52bfc64", "html_url": "https://github.com/rust-lang/rust/commit/fe087ece94021ef8bed00f0c32138c0aa52bfc64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe087ece94021ef8bed00f0c32138c0aa52bfc64/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "583269d8c5df4456da75ef888913c8760645f046", "url": "https://api.github.com/repos/rust-lang/rust/commits/583269d8c5df4456da75ef888913c8760645f046", "html_url": "https://github.com/rust-lang/rust/commit/583269d8c5df4456da75ef888913c8760645f046"}, {"sha": "df76cf89add1454f2ec2f11810120b90367b6921", "url": "https://api.github.com/repos/rust-lang/rust/commits/df76cf89add1454f2ec2f11810120b90367b6921", "html_url": "https://github.com/rust-lang/rust/commit/df76cf89add1454f2ec2f11810120b90367b6921"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "cb241d72e8252c767293578ec0b42d7a67892dc7", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fe087ece94021ef8bed00f0c32138c0aa52bfc64/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe087ece94021ef8bed00f0c32138c0aa52bfc64/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=fe087ece94021ef8bed00f0c32138c0aa52bfc64", "patch": "@@ -9,11 +9,8 @@\n // struct Node<K, V, height: usize> {\n //     keys: [K; 2 * B - 1],\n //     vals: [V; 2 * B - 1],\n-//     edges: if height > 0 {\n-//         [Box<Node<K, V, height - 1>>; 2 * B]\n-//     } else { () },\n-//     parent: Option<NonNull<Node<K, V, height + 1>>>,\n-//     parent_idx: u16,\n+//     edges: [if height > 0 { Box<Node<K, V, height - 1>> } else { () }; 2 * B],\n+//     parent: Option<(NonNull<Node<K, V, height + 1>>, u16)>,\n //     len: u16,\n // }\n // ```\n@@ -28,8 +25,8 @@\n //\n // - Trees must have uniform depth/height. This means that every path down to a leaf from a\n //   given node has exactly the same length.\n-// - A node of length `n` has `n` keys, `n` values, and (in an internal node) `n + 1` edges.\n-//   This implies that even an empty internal node has at least one edge.\n+// - A node of length `n` has `n` keys, `n` values, and `n + 1` edges.\n+//   This implies that even an empty node has at least one edge.\n \n use core::cmp::Ordering;\n use core::marker::PhantomData;\n@@ -298,9 +295,8 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n-    /// Finds the length of the node. This is the number of keys or values. In an\n-    /// internal node, the number of edges is `len() + 1`.\n-    /// For any node, the number of possible edge handles is also `len() + 1`.\n+    /// Finds the length of the node. This is the number of keys or values.\n+    /// The number of edges is `len() + 1`.\n     /// Note that, despite being safe, calling this function can have the side effect\n     /// of invalidating mutable references that unsafe code has created.\n     pub fn len(&self) -> usize {\n@@ -321,9 +317,6 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     }\n \n     /// Exposes the leaf portion of any leaf or internal node.\n-    /// If the node is a leaf, this function simply opens up its data.\n-    /// If the node is an internal node, so not a leaf, it does have all the data a leaf has\n-    /// (header, keys and values), and this function exposes that.\n     ///\n     /// Returns a raw ptr to avoid invalidating other references to this node,\n     /// which is possible when BorrowType is marker::ValMut.\n@@ -471,9 +464,6 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n \n     /// Exposes the leaf portion of any leaf or internal node for writing.\n-    /// If the node is a leaf, this function simply opens up its data.\n-    /// If the node is an internal node, so not a leaf, it does have all the data a leaf has\n-    /// (header, keys and values), and this function exposes that.\n     ///\n     /// We don't need to return a raw ptr because we have unique access to the entire node.\n     fn as_leaf_mut(&mut self) -> &'a mut LeafNode<K, V> {\n@@ -679,9 +669,9 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Removes a key/value pair from the end of this node and returns the pair.\n-    /// If this is an internal node, also removes the edge that was to the right\n-    /// of that pair and returns the orphaned node that this edge owned.\n+    /// Removes a key/value pair from the end of the node and returns the pair.\n+    /// Also removes the edge that was to the right of that pair and, if the node\n+    /// is internal, returns the orphaned subtree that this edge owned.\n     fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n         debug_assert!(self.len() > 0);\n \n@@ -705,9 +695,9 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n         }\n     }\n \n-    /// Removes a key/value pair from the beginning of this node and returns the pair.\n-    /// If this is an internal node, also removes the edge that was to the left\n-    /// of that pair and returns the orphaned node that this edge owned.\n+    /// Removes a key/value pair from the beginning of the node and returns the pair.\n+    /// Also removes the edge that was to the left of that pair and, if the node is\n+    /// internal, returns the orphaned subtree that this edge owned.\n     fn pop_front(&mut self) -> (K, V, Option<Root<K, V>>) {\n         debug_assert!(self.len() > 0);\n "}]}