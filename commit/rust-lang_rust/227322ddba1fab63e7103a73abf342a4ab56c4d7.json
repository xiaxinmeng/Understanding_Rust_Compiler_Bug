{"sha": "227322ddba1fab63e7103a73abf342a4ab56c4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNzMyMmRkYmExZmFiNjNlNzEwM2E3M2FiZjM0MmE0YWI1NmM0ZDc=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-06-04T12:08:32Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-06-04T12:08:32Z"}, "message": "Add macro for enum implementations of Decodable", "tree": {"sha": "9d86244fffa0d1bec1ab3382b182bb88d2eaae58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d86244fffa0d1bec1ab3382b182bb88d2eaae58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/227322ddba1fab63e7103a73abf342a4ab56c4d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/227322ddba1fab63e7103a73abf342a4ab56c4d7", "html_url": "https://github.com/rust-lang/rust/commit/227322ddba1fab63e7103a73abf342a4ab56c4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/227322ddba1fab63e7103a73abf342a4ab56c4d7/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef7e23dd1654b761716ab64f37f499a965c305f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef7e23dd1654b761716ab64f37f499a965c305f", "html_url": "https://github.com/rust-lang/rust/commit/1ef7e23dd1654b761716ab64f37f499a965c305f"}], "stats": {"total": 52, "additions": 20, "deletions": 32}, "files": [{"sha": "868f0ca663b944198f7897fe8d32667bf4c94ed3", "filename": "src/lib.rs", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/227322ddba1fab63e7103a73abf342a4ab56c4d7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227322ddba1fab63e7103a73abf342a4ab56c4d7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=227322ddba1fab63e7103a73abf342a4ab56c4d7", "patch": "@@ -64,6 +64,23 @@ const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n \n static mut CONFIG: Option<config::Config> = None;\n \n+// Macro for deriving implementations of Decodable for enums\n+macro_rules! impl_enum_decodable {\n+    ( $e:ident, $( $x:ident ),* ) => {\n+        impl Decodable for $e {\n+            fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+                let s = try!(d.read_str());\n+                match &*s {\n+                    $(\n+                        stringify!($x) => Ok($e::$x),\n+                    )*\n+                    _ => Err(d.error(\"Bad variant\")),\n+                }\n+            }\n+        }\n+    };\n+}\n+\n #[derive(Copy, Clone)]\n pub enum WriteMode {\n     Overwrite,\n@@ -81,16 +98,7 @@ pub enum NewlineStyle {\n     Unix, // \\n\n }\n \n-impl Decodable for NewlineStyle {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        let s = try!(d.read_str());\n-        match &*s {\n-            \"Windows\" => Ok(NewlineStyle::Windows),\n-            \"Unix\" => Ok(NewlineStyle::Unix),\n-            _ => Err(d.error(\"Bad variant\")),\n-        }\n-    }\n-}\n+impl_enum_decodable!(NewlineStyle, Windows, Unix);\n \n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n pub enum BraceStyle {\n@@ -101,17 +109,7 @@ pub enum BraceStyle {\n     SameLineWhere,\n }\n \n-impl Decodable for BraceStyle {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        let s = try!(d.read_str());\n-        match &*s {\n-            \"AlwaysNextLine\" => Ok(BraceStyle::AlwaysNextLine),\n-            \"PreferSameLine\" => Ok(BraceStyle::PreferSameLine),\n-            \"SameLineWhere\" => Ok(BraceStyle::SameLineWhere),\n-            _ => Err(d.error(\"Bad variant\")),\n-        }\n-    }\n-}\n+impl_enum_decodable!(BraceStyle, AlwaysNextLine, PreferSameLine, SameLineWhere);\n \n // How to indent a function's return type.\n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n@@ -122,17 +120,7 @@ pub enum ReturnIndent {\n     WithWhereClause,\n }\n \n-// TODO could use a macro for all these Decodable impls.\n-impl Decodable for ReturnIndent {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        let s = try!(d.read_str());\n-        match &*s {\n-            \"WithArgs\" => Ok(ReturnIndent::WithArgs),\n-            \"WithWhereClause\" => Ok(ReturnIndent::WithWhereClause),\n-            _ => Err(d.error(\"Bad variant\")),\n-        }\n-    }\n-}\n+impl_enum_decodable!(ReturnIndent, WithArgs, WithWhereClause);\n \n // Formatting which depends on the AST.\n fn fmt_ast<'a>(krate: &ast::Crate, codemap: &'a CodeMap) -> ChangeSet<'a> {"}]}