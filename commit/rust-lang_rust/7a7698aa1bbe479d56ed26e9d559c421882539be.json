{"sha": "7a7698aa1bbe479d56ed26e9d559c421882539be", "node_id": "C_kwDOAAsO6NoAKDdhNzY5OGFhMWJiZTQ3OWQ1NmVkMjZlOWQ1NTljNDIxODgyNTM5YmU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-12T21:40:20Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-17T15:52:06Z"}, "message": "rustdoc: Clean `Visibility` outside of `display_macro_source`\n\nThis change should make the code a bit clearer and easier to change.", "tree": {"sha": "abd0fd9d924c1467d5c62d1f582e29b9386c6d2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd0fd9d924c1467d5c62d1f582e29b9386c6d2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7698aa1bbe479d56ed26e9d559c421882539be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7698aa1bbe479d56ed26e9d559c421882539be", "html_url": "https://github.com/rust-lang/rust/commit/7a7698aa1bbe479d56ed26e9d559c421882539be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7698aa1bbe479d56ed26e9d559c421882539be/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41301c3b2371365b753c2ad6a74528a38f3815ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/41301c3b2371365b753c2ad6a74528a38f3815ce", "html_url": "https://github.com/rust-lang/rust/commit/41301c3b2371365b753c2ad6a74528a38f3815ce"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "bdc96cf3570f410f7b1136d82e7b58c10ce6f87a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a7698aa1bbe479d56ed26e9d559c421882539be/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7698aa1bbe479d56ed26e9d559c421882539be/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7a7698aa1bbe479d56ed26e9d559c421882539be", "patch": "@@ -592,14 +592,9 @@ fn build_macro(\n     match CStore::from_tcx(cx.tcx).load_macro_untracked(def_id, cx.sess()) {\n         LoadedMacro::MacroDef(item_def, _) => {\n             if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n+                let vis = cx.tcx.visibility(import_def_id.unwrap_or(def_id)).clean(cx);\n                 clean::MacroItem(clean::Macro {\n-                    source: utils::display_macro_source(\n-                        cx,\n-                        name,\n-                        def,\n-                        def_id,\n-                        cx.tcx.visibility(import_def_id.unwrap_or(def_id)),\n-                    ),\n+                    source: utils::display_macro_source(cx, name, def, def_id, vis),\n                 })\n             } else {\n                 unreachable!()"}, {"sha": "c527e7f97252a73e94ea5fe9991f4cf4e39ac8cb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a7698aa1bbe479d56ed26e9d559c421882539be/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7698aa1bbe479d56ed26e9d559c421882539be/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7a7698aa1bbe479d56ed26e9d559c421882539be", "patch": "@@ -1792,9 +1792,12 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                 ItemKind::Fn(ref sig, ref generics, body_id) => {\n                     clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n                 }\n-                ItemKind::Macro(ref macro_def) => MacroItem(Macro {\n-                    source: display_macro_source(cx, name, macro_def, def_id, item.vis),\n-                }),\n+                ItemKind::Macro(ref macro_def) => {\n+                    let vis = item.vis.clean(cx);\n+                    MacroItem(Macro {\n+                        source: display_macro_source(cx, name, macro_def, def_id, vis),\n+                    })\n+                }\n                 ItemKind::Trait(is_auto, unsafety, ref generics, bounds, item_ids) => {\n                     let items = item_ids\n                         .iter()"}, {"sha": "62a1569423234b689e02e6a00b92cfa6689f5391", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7698aa1bbe479d56ed26e9d559c421882539be/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7698aa1bbe479d56ed26e9d559c421882539be/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=7a7698aa1bbe479d56ed26e9d559c421882539be", "patch": "@@ -529,7 +529,7 @@ pub(super) fn display_macro_source(\n     name: Symbol,\n     def: &ast::MacroDef,\n     def_id: DefId,\n-    vis: impl Clean<Visibility>,\n+    vis: Visibility,\n ) -> String {\n     let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n     // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n@@ -538,8 +538,6 @@ pub(super) fn display_macro_source(\n     if def.macro_rules {\n         format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(matchers, \";\"))\n     } else {\n-        let vis = vis.clean(cx);\n-\n         if matchers.len() <= 1 {\n             format!(\n                 \"{}macro {}{} {{\\n    ...\\n}}\","}]}