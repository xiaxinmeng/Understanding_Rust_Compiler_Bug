{"sha": "4e142757e167ac16ce65ba1c743e131aba83cdc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMTQyNzU3ZTE2N2FjMTZjZTY1YmExYzc0M2UxMzFhYmE4M2NkYzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-16T11:18:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-16T11:18:49Z"}, "message": "minor: use uniform names", "tree": {"sha": "9d4e1061420b06c658ecbcf8c61b4acf98b31b7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d4e1061420b06c658ecbcf8c61b4acf98b31b7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e142757e167ac16ce65ba1c743e131aba83cdc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e142757e167ac16ce65ba1c743e131aba83cdc4", "html_url": "https://github.com/rust-lang/rust/commit/4e142757e167ac16ce65ba1c743e131aba83cdc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e142757e167ac16ce65ba1c743e131aba83cdc4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "html_url": "https://github.com/rust-lang/rust/commit/a57bd59f351600c408ef9d2a4df3f2c10e817d0d"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "20754a02ad07d1a5d938e990cea3c7632f928c50", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -238,8 +238,8 @@ impl AssistBuilder {\n         }\n     }\n \n-    pub(crate) fn make_ast_mut<N: AstNode>(&mut self, node: N) -> N {\n-        N::cast(self.make_mut(node.syntax().clone())).unwrap()\n+    pub(crate) fn make_mut<N: AstNode>(&mut self, node: N) -> N {\n+        self.mutated_tree.get_or_insert_with(|| TreeMutator::new(node.syntax())).make_mut(&node)\n     }\n     /// Returns a copy of the `node`, suitable for mutation.\n     ///\n@@ -251,7 +251,7 @@ impl AssistBuilder {\n     /// The typical pattern for an assist is to find specific nodes in the read\n     /// phase, and then get their mutable couterparts using `make_mut` in the\n     /// mutable state.\n-    pub(crate) fn make_mut(&mut self, node: SyntaxNode) -> SyntaxNode {\n+    pub(crate) fn make_syntax_mut(&mut self, node: SyntaxNode) -> SyntaxNode {\n         self.mutated_tree.get_or_insert_with(|| TreeMutator::new(&node)).make_syntax_mut(&node)\n     }\n "}, {"sha": "dda5a6631c8c1726f59cf69c95d92b338ea53f95", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -102,8 +102,8 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n             range,\n             |builder| {\n                 let scope = match scope.clone() {\n-                    ImportScope::File(it) => ImportScope::File(builder.make_ast_mut(it)),\n-                    ImportScope::Module(it) => ImportScope::Module(builder.make_ast_mut(it)),\n+                    ImportScope::File(it) => ImportScope::File(builder.make_mut(it)),\n+                    ImportScope::Module(it) => ImportScope::Module(builder.make_mut(it)),\n                 };\n                 insert_use(&scope, mod_path_to_ast(&import.import_path), ctx.config.insert_use);\n             },"}, {"sha": "79cb08d690336893415face3821a3feb45606d95", "filename": "crates/ide_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -61,7 +61,7 @@ pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Opti\n         \"Expand glob import\",\n         target.text_range(),\n         |builder| {\n-            let use_tree = builder.make_ast_mut(use_tree);\n+            let use_tree = builder.make_mut(use_tree);\n \n             let names_to_import = find_names_to_import(ctx, refs_in_target, imported_defs);\n             let expanded = make::use_tree_list(names_to_import.iter().map(|n| {"}, {"sha": "007aba23d216abdc5e4322074f061ec5779f15c9", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -70,7 +70,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n                     continue;\n                 }\n                 builder.edit_file(file_id);\n-                let source_file = builder.make_ast_mut(ctx.sema.parse(file_id));\n+                let source_file = builder.make_mut(ctx.sema.parse(file_id));\n                 let processed = process_references(\n                     ctx,\n                     &mut visited_modules_set,\n@@ -84,8 +84,8 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 });\n             }\n             builder.edit_file(ctx.frange.file_id);\n-            let source_file = builder.make_ast_mut(ctx.sema.parse(ctx.frange.file_id));\n-            let variant = builder.make_ast_mut(variant.clone());\n+            let source_file = builder.make_mut(ctx.sema.parse(ctx.frange.file_id));\n+            let variant = builder.make_mut(variant.clone());\n             if let Some(references) = def_file_references {\n                 let processed = process_references(\n                     ctx,"}, {"sha": "16f8f9d70ba61f48c798bf81eb18b1c252fa6679", "filename": "crates/ide_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -84,8 +84,8 @@ fn generate_fn_def_assist(\n         }\n     };\n     acc.add(AssistId(ASSIST_NAME, AssistKind::Refactor), ASSIST_LABEL, lifetime_loc, |builder| {\n-        let fn_def = builder.make_ast_mut(fn_def);\n-        let lifetime = builder.make_ast_mut(lifetime);\n+        let fn_def = builder.make_mut(fn_def);\n+        let lifetime = builder.make_mut(lifetime);\n         let loc_needing_lifetime =\n             loc_needing_lifetime.and_then(|it| it.make_mut(builder).to_position());\n \n@@ -107,8 +107,8 @@ fn generate_impl_def_assist(\n ) -> Option<()> {\n     let new_lifetime_param = generate_unique_lifetime_param_name(impl_def.generic_param_list())?;\n     acc.add(AssistId(ASSIST_NAME, AssistKind::Refactor), ASSIST_LABEL, lifetime_loc, |builder| {\n-        let impl_def = builder.make_ast_mut(impl_def);\n-        let lifetime = builder.make_ast_mut(lifetime);\n+        let impl_def = builder.make_mut(impl_def);\n+        let lifetime = builder.make_mut(lifetime);\n \n         impl_def.get_or_create_generic_param_list().add_generic_param(\n             make::lifetime_param(new_lifetime_param.clone()).clone_for_update().into(),\n@@ -141,8 +141,8 @@ enum NeedsLifetime {\n impl NeedsLifetime {\n     fn make_mut(self, builder: &mut AssistBuilder) -> Self {\n         match self {\n-            Self::SelfParam(it) => Self::SelfParam(builder.make_ast_mut(it)),\n-            Self::RefType(it) => Self::RefType(builder.make_ast_mut(it)),\n+            Self::SelfParam(it) => Self::SelfParam(builder.make_mut(it)),\n+            Self::RefType(it) => Self::RefType(builder.make_mut(it)),\n         }\n     }\n "}, {"sha": "31854840c22d345d69e345f2053a9747b3091fe6", "filename": "crates/ide_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -47,16 +47,16 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n         target,\n         |builder| {\n             if let Some((to_replace, replacement, to_remove)) = imports {\n-                let to_replace = builder.make_ast_mut(to_replace);\n-                let to_remove = builder.make_ast_mut(to_remove);\n+                let to_replace = builder.make_mut(to_replace);\n+                let to_remove = builder.make_mut(to_remove);\n \n                 ted::replace(to_replace.syntax(), replacement.syntax());\n                 to_remove.remove();\n             }\n \n             if let Some((to_replace, replacement, to_remove)) = uses {\n-                let to_replace = builder.make_ast_mut(to_replace);\n-                let to_remove = builder.make_ast_mut(to_remove);\n+                let to_replace = builder.make_mut(to_replace);\n+                let to_remove = builder.make_mut(to_remove);\n \n                 ted::replace(to_replace.syntax(), replacement.syntax());\n                 to_remove.remove()"}, {"sha": "d89d11bdf416ac561037ebfd7d5f8d25677f7a8e", "filename": "crates/ide_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -36,8 +36,8 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n         \"Move to where clause\",\n         target,\n         |edit| {\n-            let type_param_list = edit.make_ast_mut(type_param_list);\n-            let parent = edit.make_mut(parent);\n+            let type_param_list = edit.make_mut(type_param_list);\n+            let parent = edit.make_syntax_mut(parent);\n \n             let where_clause: ast::WhereClause = match_ast! {\n                 match parent {"}, {"sha": "f07b8a6c0d53de5c25a9ac4e78eed97912a656ec", "filename": "crates/ide_assists/src/handlers/pull_assignment_up.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -74,10 +74,10 @@ pub(crate) fn pull_assignment_up(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             let assignments: Vec<_> = collector\n                 .assignments\n                 .into_iter()\n-                .map(|(stmt, rhs)| (edit.make_ast_mut(stmt), rhs.clone_for_update()))\n+                .map(|(stmt, rhs)| (edit.make_mut(stmt), rhs.clone_for_update()))\n                 .collect();\n \n-            let tgt = edit.make_ast_mut(tgt);\n+            let tgt = edit.make_mut(tgt);\n \n             for (stmt, rhs) in assignments {\n                 let mut stmt = stmt.syntax().clone();"}, {"sha": "933acead1b66b6b96e9448200a7269846e8970db", "filename": "crates/ide_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -70,10 +70,10 @@ pub(crate) fn reorder_fields(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         target,\n         |builder| match fields {\n             Either::Left((sorted, field_list)) => {\n-                replace(builder.make_ast_mut(field_list).fields(), sorted)\n+                replace(builder.make_mut(field_list).fields(), sorted)\n             }\n             Either::Right((sorted, field_list)) => {\n-                replace(builder.make_ast_mut(field_list).fields(), sorted)\n+                replace(builder.make_mut(field_list).fields(), sorted)\n             }\n         },\n     )"}, {"sha": "5a6a9f158ea982a6921492c6eedf84f64357feaf", "filename": "crates/ide_assists/src/handlers/reorder_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -79,8 +79,7 @@ pub(crate) fn reorder_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         \"Sort methods\",\n         target,\n         |builder| {\n-            let methods =\n-                methods.into_iter().map(|fn_| builder.make_ast_mut(fn_)).collect::<Vec<_>>();\n+            let methods = methods.into_iter().map(|fn_| builder.make_mut(fn_)).collect::<Vec<_>>();\n             methods\n                 .into_iter()\n                 .zip(sorted)"}, {"sha": "540a905cc0843544d5376fd77c6d2d6d367323ad", "filename": "crates/ide_assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -32,8 +32,8 @@ pub(crate) fn replace_impl_trait_with_generic(\n         \"Replace impl trait with generic\",\n         target,\n         |edit| {\n-            let impl_trait_type = edit.make_ast_mut(impl_trait_type);\n-            let fn_ = edit.make_ast_mut(fn_);\n+            let impl_trait_type = edit.make_mut(impl_trait_type);\n+            let fn_ = edit.make_mut(fn_);\n \n             let type_param_name = suggest_name::for_generic_parameter(&impl_trait_type);\n "}, {"sha": "39f5eb4ff48ac4195945ab4c21b7210f31245f1a", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e142757e167ac16ce65ba1c743e131aba83cdc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=4e142757e167ac16ce65ba1c743e131aba83cdc4", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn replace_qualified_name_with_use(\n         |builder| {\n             // Now that we've brought the name into scope, re-qualify all paths that could be\n             // affected (that is, all paths inside the node we added the `use` to).\n-            let syntax = builder.make_mut(syntax.clone());\n+            let syntax = builder.make_syntax_mut(syntax.clone());\n             if let Some(ref import_scope) = ImportScope::from(syntax.clone()) {\n                 shorten_paths(&syntax, &path.clone_for_update());\n                 insert_use(import_scope, path, ctx.config.insert_use);"}]}