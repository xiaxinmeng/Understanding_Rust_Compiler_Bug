{"sha": "41a1ec723ce2ea3fa78ae468830f0a77e5658307", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYTFlYzcyM2NlMmVhM2ZhNzhhZTQ2ODgzMGYwYTc3ZTU2NTgzMDc=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T15:44:42Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T16:37:40Z"}, "message": "Remove cargo-watch from vscode extension.\n\nStill keeps tests around for reference when porting them to rust", "tree": {"sha": "7a5d9d2ba86e37734ef5dc4c87fb40148c764c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a5d9d2ba86e37734ef5dc4c87fb40148c764c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41a1ec723ce2ea3fa78ae468830f0a77e5658307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41a1ec723ce2ea3fa78ae468830f0a77e5658307", "html_url": "https://github.com/rust-lang/rust/commit/41a1ec723ce2ea3fa78ae468830f0a77e5658307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41a1ec723ce2ea3fa78ae468830f0a77e5658307/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66e8ef53a0ed018d03340577a0443030a193f773", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e8ef53a0ed018d03340577a0443030a193f773", "html_url": "https://github.com/rust-lang/rust/commit/66e8ef53a0ed018d03340577a0443030a193f773"}], "stats": {"total": 455, "additions": 1, "deletions": 454}, "files": [{"sha": "6cb24a3cec680bfab0084f82a1de91c5fd263d38", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41a1ec723ce2ea3fa78ae468830f0a77e5658307/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/41a1ec723ce2ea3fa78ae468830f0a77e5658307/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=41a1ec723ce2ea3fa78ae468830f0a77e5658307", "patch": "@@ -18,7 +18,7 @@\n     \"scripts\": {\n         \"vscode:prepublish\": \"npm run compile\",\n         \"package\": \"vsce package\",\n-        \"compile\": \"rollup -c && shx cp src/utils/terminateProcess.sh bundle/terminateProcess.sh\",\n+        \"compile\": \"rollup -c\",\n         \"watch\": \"tsc -watch -p ./\",\n         \"fix\": \"prettier **/*.{json,ts} --write && tslint --project . --fix\",\n         \"lint\": \"tslint --project .\",\n@@ -133,16 +133,6 @@\n                 \"command\": \"rust-analyzer.reload\",\n                 \"title\": \"Restart server\",\n                 \"category\": \"Rust Analyzer\"\n-            },\n-            {\n-                \"command\": \"rust-analyzer.startCargoWatch\",\n-                \"title\": \"Start Cargo Watch\",\n-                \"category\": \"Rust Analyzer\"\n-            },\n-            {\n-                \"command\": \"rust-analyzer.stopCargoWatch\",\n-                \"title\": \"Stop Cargo Watch\",\n-                \"category\": \"Rust Analyzer\"\n             }\n         ],\n         \"keybindings\": ["}, {"sha": "ac62bdd48d20144951c6c67cfa86d470c610581e", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "removed", "additions": 0, "deletions": 264, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/66e8ef53a0ed018d03340577a0443030a193f773/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/66e8ef53a0ed018d03340577a0443030a193f773/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=66e8ef53a0ed018d03340577a0443030a193f773", "patch": "@@ -1,264 +0,0 @@\n-import * as child_process from 'child_process';\n-import * as path from 'path';\n-import * as vscode from 'vscode';\n-\n-import { Server } from '../server';\n-import { terminate } from '../utils/processes';\n-import { LineBuffer } from './line_buffer';\n-import { StatusDisplay } from './watch_status';\n-\n-import {\n-    mapRustDiagnosticToVsCode,\n-    RustDiagnostic,\n-} from '../utils/diagnostics/rust';\n-import SuggestedFixCollection from '../utils/diagnostics/SuggestedFixCollection';\n-import { areDiagnosticsEqual } from '../utils/diagnostics/vscode';\n-\n-export async function registerCargoWatchProvider(\n-    subscriptions: vscode.Disposable[],\n-): Promise<CargoWatchProvider | undefined> {\n-    let cargoExists = false;\n-\n-    // Check if the working directory is valid cargo root path\n-    const cargoTomlPath = path.join(vscode.workspace.rootPath!, 'Cargo.toml');\n-    const cargoTomlUri = vscode.Uri.file(cargoTomlPath);\n-    const cargoTomlFileInfo = await vscode.workspace.fs.stat(cargoTomlUri);\n-\n-    if (cargoTomlFileInfo) {\n-        cargoExists = true;\n-    }\n-\n-    if (!cargoExists) {\n-        vscode.window.showErrorMessage(\n-            `Couldn\\'t find \\'Cargo.toml\\' at ${cargoTomlPath}`,\n-        );\n-        return;\n-    }\n-\n-    const provider = new CargoWatchProvider();\n-    subscriptions.push(provider);\n-    return provider;\n-}\n-\n-export class CargoWatchProvider implements vscode.Disposable {\n-    private readonly diagnosticCollection: vscode.DiagnosticCollection;\n-    private readonly statusDisplay: StatusDisplay;\n-    private readonly outputChannel: vscode.OutputChannel;\n-\n-    private suggestedFixCollection: SuggestedFixCollection;\n-    private codeActionDispose: vscode.Disposable;\n-\n-    private cargoProcess?: child_process.ChildProcess;\n-\n-    constructor() {\n-        this.diagnosticCollection = vscode.languages.createDiagnosticCollection(\n-            'rustc',\n-        );\n-        this.statusDisplay = new StatusDisplay(\n-            Server.config.cargoWatchOptions.command,\n-        );\n-        this.outputChannel = vscode.window.createOutputChannel(\n-            'Cargo Watch Trace',\n-        );\n-\n-        // Track `rustc`'s suggested fixes so we can convert them to code actions\n-        this.suggestedFixCollection = new SuggestedFixCollection();\n-        this.codeActionDispose = vscode.languages.registerCodeActionsProvider(\n-            [{ scheme: 'file', language: 'rust' }],\n-            this.suggestedFixCollection,\n-            {\n-                providedCodeActionKinds:\n-                    SuggestedFixCollection.PROVIDED_CODE_ACTION_KINDS,\n-            },\n-        );\n-    }\n-\n-    public start() {\n-        if (this.cargoProcess) {\n-            vscode.window.showInformationMessage(\n-                'Cargo Watch is already running',\n-            );\n-            return;\n-        }\n-\n-        let args =\n-            Server.config.cargoWatchOptions.command + ' --message-format json';\n-        if (Server.config.cargoWatchOptions.allTargets) {\n-            args += ' --all-targets';\n-        }\n-        if (Server.config.cargoWatchOptions.command.length > 0) {\n-            // Excape the double quote string:\n-            args += ' ' + Server.config.cargoWatchOptions.arguments;\n-        }\n-        // Windows handles arguments differently than the unix-likes, so we need to wrap the args in double quotes\n-        if (process.platform === 'win32') {\n-            args = '\"' + args + '\"';\n-        }\n-\n-        const ignoreFlags = Server.config.cargoWatchOptions.ignore.reduce(\n-            (flags, pattern) => [...flags, '--ignore', pattern],\n-            [] as string[],\n-        );\n-\n-        // Start the cargo watch with json message\n-        this.cargoProcess = child_process.spawn(\n-            'cargo',\n-            ['watch', '-x', args, ...ignoreFlags],\n-            {\n-                stdio: ['ignore', 'pipe', 'pipe'],\n-                cwd: vscode.workspace.rootPath,\n-                windowsVerbatimArguments: true,\n-            },\n-        );\n-\n-        if (!this.cargoProcess) {\n-            vscode.window.showErrorMessage('Cargo Watch failed to start');\n-            return;\n-        }\n-\n-        const stdoutData = new LineBuffer();\n-        this.cargoProcess.stdout?.on('data', (s: string) => {\n-            stdoutData.processOutput(s, line => {\n-                this.logInfo(line);\n-                try {\n-                    this.parseLine(line);\n-                } catch (err) {\n-                    this.logError(`Failed to parse: ${err}, content : ${line}`);\n-                }\n-            });\n-        });\n-\n-        const stderrData = new LineBuffer();\n-        this.cargoProcess.stderr?.on('data', (s: string) => {\n-            stderrData.processOutput(s, line => {\n-                this.logError('Error on cargo-watch : {\\n' + line + '}\\n');\n-            });\n-        });\n-\n-        this.cargoProcess.on('error', (err: Error) => {\n-            this.logError(\n-                'Error on cargo-watch process : {\\n' + err.message + '}\\n',\n-            );\n-        });\n-\n-        this.logInfo('cargo-watch started.');\n-    }\n-\n-    public stop() {\n-        if (this.cargoProcess) {\n-            this.cargoProcess.kill();\n-            terminate(this.cargoProcess);\n-            this.cargoProcess = undefined;\n-        } else {\n-            vscode.window.showInformationMessage('Cargo Watch is not running');\n-        }\n-    }\n-\n-    public dispose(): void {\n-        this.stop();\n-\n-        this.diagnosticCollection.clear();\n-        this.diagnosticCollection.dispose();\n-        this.outputChannel.dispose();\n-        this.statusDisplay.dispose();\n-        this.codeActionDispose.dispose();\n-    }\n-\n-    private logInfo(line: string) {\n-        if (Server.config.cargoWatchOptions.trace === 'verbose') {\n-            this.outputChannel.append(line);\n-        }\n-    }\n-\n-    private logError(line: string) {\n-        if (\n-            Server.config.cargoWatchOptions.trace === 'error' ||\n-            Server.config.cargoWatchOptions.trace === 'verbose'\n-        ) {\n-            this.outputChannel.append(line);\n-        }\n-    }\n-\n-    private parseLine(line: string) {\n-        if (line.startsWith('[Running')) {\n-            this.diagnosticCollection.clear();\n-            this.suggestedFixCollection.clear();\n-            this.statusDisplay.show();\n-        }\n-\n-        if (line.startsWith('[Finished running')) {\n-            this.statusDisplay.hide();\n-        }\n-\n-        interface CargoArtifact {\n-            reason: string;\n-            package_id: string;\n-        }\n-\n-        // https://github.com/rust-lang/cargo/blob/master/src/cargo/util/machine_message.rs\n-        interface CargoMessage {\n-            reason: string;\n-            package_id: string;\n-            message: RustDiagnostic;\n-        }\n-\n-        // cargo-watch itself output non json format\n-        // Ignore these lines\n-        let data: CargoMessage;\n-        try {\n-            data = JSON.parse(line.trim());\n-        } catch (error) {\n-            this.logError(`Fail to parse to json : { ${error} }`);\n-            return;\n-        }\n-\n-        if (data.reason === 'compiler-artifact') {\n-            const msg = data as CargoArtifact;\n-\n-            // The format of the package_id is \"{name} {version} ({source_id})\",\n-            // https://github.com/rust-lang/cargo/blob/37ad03f86e895bb80b474c1c088322634f4725f5/src/cargo/core/package_id.rs#L53\n-            this.statusDisplay.packageName = msg.package_id.split(' ')[0];\n-        } else if (data.reason === 'compiler-message') {\n-            const msg = data.message as RustDiagnostic;\n-\n-            const mapResult = mapRustDiagnosticToVsCode(msg);\n-            if (!mapResult) {\n-                return;\n-            }\n-\n-            const { location, diagnostic, suggestedFixes } = mapResult;\n-            const fileUri = location.uri;\n-\n-            const diagnostics: vscode.Diagnostic[] = [\n-                ...(this.diagnosticCollection!.get(fileUri) || []),\n-            ];\n-\n-            // If we're building multiple targets it's possible we've already seen this diagnostic\n-            const isDuplicate = diagnostics.some(d =>\n-                areDiagnosticsEqual(d, diagnostic),\n-            );\n-            if (isDuplicate) {\n-                return;\n-            }\n-\n-            diagnostics.push(diagnostic);\n-            this.diagnosticCollection!.set(fileUri, diagnostics);\n-\n-            if (suggestedFixes.length) {\n-                for (const suggestedFix of suggestedFixes) {\n-                    this.suggestedFixCollection.addSuggestedFixForDiagnostic(\n-                        suggestedFix,\n-                        diagnostic,\n-                    );\n-                }\n-\n-                // Have VsCode query us for the code actions\n-                vscode.commands.executeCommand(\n-                    'vscode.executeCodeActionProvider',\n-                    fileUri,\n-                    diagnostic.range,\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "7728541de61bd356390ffe57f6de4fece182d850", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/41a1ec723ce2ea3fa78ae468830f0a77e5658307/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/41a1ec723ce2ea3fa78ae468830f0a77e5658307/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=41a1ec723ce2ea3fa78ae468830f0a77e5658307", "patch": "@@ -1,11 +1,7 @@\n-import * as child_process from 'child_process';\n-\n-import * as util from 'util';\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import { Server } from '../server';\n-import { CargoWatchProvider, registerCargoWatchProvider } from './cargo_watch';\n \n interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;\n@@ -131,90 +127,3 @@ export async function handleSingle(runnable: Runnable) {\n \n     return vscode.tasks.executeTask(task);\n }\n-\n-/**\n- * Interactively asks the user whether we should run `cargo check` in order to\n- * provide inline diagnostics; the user is met with a series of dialog boxes\n- * that, when accepted, allow us to `cargo install cargo-watch` and then run it.\n- */\n-export async function interactivelyStartCargoWatch(\n-    context: vscode.ExtensionContext,\n-): Promise<CargoWatchProvider | undefined> {\n-    if (Server.config.cargoWatchOptions.enableOnStartup === 'disabled') {\n-        return;\n-    }\n-\n-    if (Server.config.cargoWatchOptions.enableOnStartup === 'ask') {\n-        const watch = await vscode.window.showInformationMessage(\n-            'Start watching changes with cargo? (Executes `cargo watch`, provides inline diagnostics)',\n-            'yes',\n-            'no',\n-        );\n-        if (watch !== 'yes') {\n-            return;\n-        }\n-    }\n-\n-    return startCargoWatch(context);\n-}\n-\n-export async function startCargoWatch(\n-    context: vscode.ExtensionContext,\n-): Promise<CargoWatchProvider | undefined> {\n-    const execPromise = util.promisify(child_process.exec);\n-\n-    const { stderr, code = 0 } = await execPromise(\n-        'cargo watch --version',\n-    ).catch(e => e);\n-\n-    if (stderr.includes('no such subcommand: `watch`')) {\n-        const msg =\n-            'The `cargo-watch` subcommand is not installed. Install? (takes ~1-2 minutes)';\n-        const install = await vscode.window.showInformationMessage(\n-            msg,\n-            'yes',\n-            'no',\n-        );\n-        if (install !== 'yes') {\n-            return;\n-        }\n-\n-        const label = 'install-cargo-watch';\n-        const taskFinished = new Promise((resolve, _reject) => {\n-            const disposable = vscode.tasks.onDidEndTask(({ execution }) => {\n-                if (execution.task.name === label) {\n-                    disposable.dispose();\n-                    resolve();\n-                }\n-            });\n-        });\n-\n-        vscode.tasks.executeTask(\n-            createTask({\n-                label,\n-                bin: 'cargo',\n-                args: ['install', 'cargo-watch'],\n-                env: {},\n-            }),\n-        );\n-        await taskFinished;\n-        const output = await execPromise('cargo watch --version').catch(e => e);\n-        if (output.stderr !== '') {\n-            vscode.window.showErrorMessage(\n-                `Couldn't install \\`cargo-\\`watch: ${output.stderr}`,\n-            );\n-            return;\n-        }\n-    } else if (code !== 0) {\n-        vscode.window.showErrorMessage(\n-            `\\`cargo watch\\` failed with ${code}: ${stderr}`,\n-        );\n-        return;\n-    }\n-\n-    const provider = await registerCargoWatchProvider(context.subscriptions);\n-    if (provider) {\n-        provider.start();\n-    }\n-    return provider;\n-}"}, {"sha": "72a4d4bf255b7212ff41093a5a2a14e6b131b245", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/41a1ec723ce2ea3fa78ae468830f0a77e5658307/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/41a1ec723ce2ea3fa78ae468830f0a77e5658307/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=41a1ec723ce2ea3fa78ae468830f0a77e5658307", "patch": "@@ -2,13 +2,8 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n-import { CargoWatchProvider } from './commands/cargo_watch';\n import { ExpandMacroContentProvider } from './commands/expand_macro';\n import { HintsUpdater } from './commands/inlay_hints';\n-import {\n-    interactivelyStartCargoWatch,\n-    startCargoWatch,\n-} from './commands/runnables';\n import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import * as events from './events';\n import * as notifications from './notifications';\n@@ -139,26 +134,6 @@ export async function activate(context: vscode.ExtensionContext) {\n \n     vscode.commands.registerCommand('rust-analyzer.reload', reloadCommand);\n \n-    // Executing `cargo watch` provides us with inline diagnostics on save\n-    let provider: CargoWatchProvider | undefined;\n-    interactivelyStartCargoWatch(context).then(p => {\n-        provider = p;\n-    });\n-    registerCommand('rust-analyzer.startCargoWatch', () => {\n-        if (provider) {\n-            provider.start();\n-        } else {\n-            startCargoWatch(context).then(p => {\n-                provider = p;\n-            });\n-        }\n-    });\n-    registerCommand('rust-analyzer.stopCargoWatch', () => {\n-        if (provider) {\n-            provider.stop();\n-        }\n-    });\n-\n     // Start the language server, finally!\n     try {\n         await startServer();"}, {"sha": "a1d6b7eafbc8f30eb07a5b5a5eb30d2ca48091b1", "filename": "editors/code/src/utils/processes.ts", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/66e8ef53a0ed018d03340577a0443030a193f773/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts", "raw_url": "https://github.com/rust-lang/rust/raw/66e8ef53a0ed018d03340577a0443030a193f773/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts?ref=66e8ef53a0ed018d03340577a0443030a193f773", "patch": "@@ -1,51 +0,0 @@\n-'use strict';\n-\n-import * as cp from 'child_process';\n-import ChildProcess = cp.ChildProcess;\n-\n-import { join } from 'path';\n-\n-const isWindows = process.platform === 'win32';\n-const isMacintosh = process.platform === 'darwin';\n-const isLinux = process.platform === 'linux';\n-\n-// this is very complex, but is basically copy-pased from VSCode implementation here:\n-// https://github.com/Microsoft/vscode-languageserver-node/blob/dbfd37e35953ad0ee14c4eeced8cfbc41697b47e/client/src/utils/processes.ts#L15\n-\n-// And see discussion at\n-// https://github.com/rust-analyzer/rust-analyzer/pull/1079#issuecomment-478908109\n-\n-export function terminate(process: ChildProcess, cwd?: string): boolean {\n-    if (isWindows) {\n-        try {\n-            // This we run in Atom execFileSync is available.\n-            // Ignore stderr since this is otherwise piped to parent.stderr\n-            // which might be already closed.\n-            const options: any = {\n-                stdio: ['pipe', 'pipe', 'ignore'],\n-            };\n-            if (cwd) {\n-                options.cwd = cwd;\n-            }\n-            cp.execFileSync(\n-                'taskkill',\n-                ['/T', '/F', '/PID', process.pid.toString()],\n-                options,\n-            );\n-            return true;\n-        } catch (err) {\n-            return false;\n-        }\n-    } else if (isLinux || isMacintosh) {\n-        try {\n-            const cmd = join(__dirname, 'terminateProcess.sh');\n-            const result = cp.spawnSync(cmd, [process.pid.toString()]);\n-            return result.error ? false : true;\n-        } catch (err) {\n-            return false;\n-        }\n-    } else {\n-        process.kill('SIGKILL');\n-        return true;\n-    }\n-}"}, {"sha": "2ec9e1c2ec32949ee319e96df948e0eb50084ed9", "filename": "editors/code/src/utils/terminateProcess.sh", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66e8ef53a0ed018d03340577a0443030a193f773/editors%2Fcode%2Fsrc%2Futils%2FterminateProcess.sh", "raw_url": "https://github.com/rust-lang/rust/raw/66e8ef53a0ed018d03340577a0443030a193f773/editors%2Fcode%2Fsrc%2Futils%2FterminateProcess.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2FterminateProcess.sh?ref=66e8ef53a0ed018d03340577a0443030a193f773", "patch": "@@ -1,12 +0,0 @@\n-#!/bin/bash\n-\n-terminateTree() {\n-    for cpid in $(pgrep -P $1); do\n-        terminateTree $cpid\n-    done\n-    kill -9 $1 > /dev/null 2>&1\n-}\n-\n-for pid in $*; do\n-    terminateTree $pid\n-done\n\\ No newline at end of file"}]}