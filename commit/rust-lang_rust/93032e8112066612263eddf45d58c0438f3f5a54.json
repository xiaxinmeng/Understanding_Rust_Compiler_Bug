{"sha": "93032e8112066612263eddf45d58c0438f3f5a54", "node_id": "C_kwDOAAsO6NoAKDkzMDMyZTgxMTIwNjY2MTIyNjNlZGRmNDVkNThjMDQzOGYzZjVhNTQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-31T05:26:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-31T05:26:35Z"}, "message": "Rollup merge of #106305 - jyn514:tail-args, r=Mark-Simulacrum\n\n bootstrap: Get rid of tail_args in stream_cargo\n\nBased on https://github.com/rust-lang/rust/pull/106303 for convenience.\n\nr? ````@Mark-Simulacrum````", "tree": {"sha": "2a3411aecba2604eb65f41a05dc708df3f9fb73b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a3411aecba2604eb65f41a05dc708df3f9fb73b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93032e8112066612263eddf45d58c0438f3f5a54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjr8gLCRBK7hj4Ov3rIwAAgngIAHyt3xQ7Nehox5SM7NFeYn6D\nTCS2+hq+t203xYDO9JxsfZjS7pF7h3gMJY+8okN7JoBnap7V9Cvs6LyVvp0WNHN7\nFuLdktN3KjbyLmNXf0QASRtaMbol113pvj+6k0UP3/9Yx/SxHa88i2WoSqQFm9jm\n4cyCh1+9NUGsY2QjNeYcq1/UqBnrFRCH24guuH9jRNixfOs82VU3H5qVzcWrXsOx\nBe0lCU8JZuQwwinxRkxMxvIq6LVmiOEY2ywseekOVh0Ujbczi+VIPWPAmgcBopth\n2yr6aP7tWW3VmKgD+58dVJdG7w5fA/9ov4RLc+HShr6Il+erAfCKjIfrnHsBDJ0=\n=8h6O\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a3411aecba2604eb65f41a05dc708df3f9fb73b\nparent 9644684dec97fb5353c1911dc3ca616a76fc977e\nparent 9dfe50440e6d48bd2fd40a4b7b3992998e55eace\nauthor Michael Goulet <michael@errs.io> 1672464395 -0800\ncommitter GitHub <noreply@github.com> 1672464395 -0800\n\nRollup merge of #106305 - jyn514:tail-args, r=Mark-Simulacrum\n\n bootstrap: Get rid of tail_args in stream_cargo\n\nBased on https://github.com/rust-lang/rust/pull/106303 for convenience.\n\nr? ````@Mark-Simulacrum````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93032e8112066612263eddf45d58c0438f3f5a54", "html_url": "https://github.com/rust-lang/rust/commit/93032e8112066612263eddf45d58c0438f3f5a54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93032e8112066612263eddf45d58c0438f3f5a54/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9644684dec97fb5353c1911dc3ca616a76fc977e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9644684dec97fb5353c1911dc3ca616a76fc977e", "html_url": "https://github.com/rust-lang/rust/commit/9644684dec97fb5353c1911dc3ca616a76fc977e"}, {"sha": "9dfe50440e6d48bd2fd40a4b7b3992998e55eace", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dfe50440e6d48bd2fd40a4b7b3992998e55eace", "html_url": "https://github.com/rust-lang/rust/commit/9dfe50440e6d48bd2fd40a4b7b3992998e55eace"}], "stats": {"total": 159, "additions": 82, "deletions": 77}, "files": [{"sha": "66bc0f023b6c9833c610b93d1386fbfde3412d01", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=93032e8112066612263eddf45d58c0438f3f5a54", "patch": "@@ -97,18 +97,36 @@ impl RunConfig<'_> {\n         self.builder.build.build\n     }\n \n-    /// Return a `-p=x -p=y` string suitable for passing to a cargo invocation.\n+    /// Return a list of crate names selected by `run.paths`.\n     pub fn cargo_crates_in_set(&self) -> Interned<Vec<String>> {\n         let mut crates = Vec::new();\n         for krate in &self.paths {\n             let path = krate.assert_single_path();\n             let crate_name = self.builder.crate_paths[&path.path];\n-            crates.push(format!(\"-p={crate_name}\"));\n+            crates.push(crate_name.to_string());\n         }\n         INTERNER.intern_list(crates)\n     }\n }\n \n+/// A description of the crates in this set, suitable for passing to `builder.info`.\n+///\n+/// `crates` should be generated by [`RunConfig::cargo_crates_in_set`].\n+pub fn crate_description(crates: &[impl AsRef<str>]) -> String {\n+    if crates.is_empty() {\n+        return \"\".into();\n+    }\n+\n+    let mut descr = String::from(\" {\");\n+    descr.push_str(crates[0].as_ref());\n+    for krate in &crates[1..] {\n+        descr.push_str(\", \");\n+        descr.push_str(krate.as_ref());\n+    }\n+    descr.push('}');\n+    descr\n+}\n+\n struct StepDescription {\n     default: bool,\n     only_hosts: bool,"}, {"sha": "32e5d414061eccdfe402fcc7393bdbecfac493e3", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=93032e8112066612263eddf45d58c0438f3f5a54", "patch": "@@ -99,19 +99,13 @@ impl Step for Std {\n             cargo_subcommand(builder.kind),\n         );\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n+        cargo.args(args(builder));\n \n         builder.info(&format!(\n-            \"Checking stage{} std artifacts ({} -> {})\",\n+            \"Checking stage{} library artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(\n-            builder,\n-            cargo,\n-            args(builder),\n-            &libstd_stamp(builder, compiler, target),\n-            vec![],\n-            true,\n-        );\n+        run_cargo(builder, cargo, &libstd_stamp(builder, compiler, target), vec![], true);\n \n         // We skip populating the sysroot in non-zero stage because that'll lead\n         // to rlib/rmeta conflicts if std gets built during this session.\n@@ -155,19 +149,13 @@ impl Step for Std {\n         for krate in builder.in_tree_crates(\"test\", Some(target)) {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n+        cargo.args(args(builder));\n \n         builder.info(&format!(\n-            \"Checking stage{} std test/bench/example targets ({} -> {})\",\n+            \"Checking stage{} library test/bench/example targets ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(\n-            builder,\n-            cargo,\n-            args(builder),\n-            &libstd_test_stamp(builder, compiler, target),\n-            vec![],\n-            true,\n-        );\n+        run_cargo(builder, cargo, &libstd_test_stamp(builder, compiler, target), vec![], true);\n     }\n }\n \n@@ -231,19 +219,13 @@ impl Step for Rustc {\n         for krate in builder.in_tree_crates(\"rustc-main\", Some(target)) {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n+        cargo.args(args(builder));\n \n         builder.info(&format!(\n             \"Checking stage{} compiler artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(\n-            builder,\n-            cargo,\n-            args(builder),\n-            &librustc_stamp(builder, compiler, target),\n-            vec![],\n-            true,\n-        );\n+        run_cargo(builder, cargo, &librustc_stamp(builder, compiler, target), vec![], true);\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n         let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n@@ -290,6 +272,7 @@ impl Step for CodegenBackend {\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(format!(\"compiler/rustc_codegen_{}/Cargo.toml\", backend)));\n         rustc_cargo_env(builder, &mut cargo, target);\n+        cargo.args(args(builder));\n \n         builder.info(&format!(\n             \"Checking stage{} {} artifacts ({} -> {})\",\n@@ -299,7 +282,6 @@ impl Step for CodegenBackend {\n         run_cargo(\n             builder,\n             cargo,\n-            args(builder),\n             &codegen_backend_stamp(builder, compiler, target, backend),\n             vec![],\n             true,\n@@ -355,11 +337,13 @@ impl Step for RustAnalyzer {\n             cargo.arg(\"--benches\");\n         }\n \n+        cargo.args(args(builder));\n+\n         builder.info(&format!(\n             \"Checking stage{} {} artifacts ({} -> {})\",\n             compiler.stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n         ));\n-        run_cargo(builder, cargo, args(builder), &stamp(builder, compiler, target), vec![], true);\n+        run_cargo(builder, cargo, &stamp(builder, compiler, target), vec![], true);\n \n         /// Cargo's output path in a given stage, compiled by a particular\n         /// compiler for the specified target.\n@@ -413,6 +397,8 @@ macro_rules! tool_check_step {\n                     cargo.arg(\"--all-targets\");\n                 }\n \n+                cargo.args(args(builder));\n+\n                 // Enable internal lints for clippy and rustdoc\n                 // NOTE: this doesn't enable lints for any other tools unless they explicitly add `#![warn(rustc::internal)]`\n                 // See https://github.com/rust-lang/rust/pull/80573#issuecomment-754010776\n@@ -428,7 +414,6 @@ macro_rules! tool_check_step {\n                 run_cargo(\n                     builder,\n                     cargo,\n-                    args(builder),\n                     &stamp(builder, compiler, target),\n                     vec![],\n                     true,"}, {"sha": "468efc1114c43f3ff8e6735b4e87313a8f5739bb", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=93032e8112066612263eddf45d58c0438f3f5a54", "patch": "@@ -9,11 +9,10 @@ use std::fs;\n use std::io::{self, ErrorKind};\n use std::path::Path;\n \n-use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n+use crate::builder::{crate_description, Builder, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n-use crate::config::TargetSelection;\n use crate::util::t;\n-use crate::{Build, Mode, Subcommand};\n+use crate::{Build, Compiler, Mode, Subcommand};\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct CleanAll {}\n@@ -40,7 +39,7 @@ macro_rules! clean_crate_tree {\n     ( $( $name:ident, $mode:path, $root_crate:literal);+ $(;)? ) => { $(\n         #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n         pub struct $name {\n-            target: TargetSelection,\n+            compiler: Compiler,\n             crates: Interned<Vec<String>>,\n         }\n \n@@ -54,22 +53,21 @@ macro_rules! clean_crate_tree {\n \n             fn make_run(run: RunConfig<'_>) {\n                 let builder = run.builder;\n-                if builder.top_stage != 0 {\n-                    panic!(\"non-stage-0 clean not supported for individual crates\");\n-                }\n-                builder.ensure(Self { crates: run.cargo_crates_in_set(), target: run.target });\n+                let compiler = builder.compiler(builder.top_stage, run.target);\n+                builder.ensure(Self { crates: run.cargo_crates_in_set(), compiler });\n             }\n \n             fn run(self, builder: &Builder<'_>) -> Self::Output {\n-                let compiler = builder.compiler(0, self.target);\n-                let mut cargo = builder.bare_cargo(compiler, $mode, self.target, \"clean\");\n+                let compiler = self.compiler;\n+                let target = compiler.host;\n+                let mut cargo = builder.bare_cargo(compiler, $mode, target, \"clean\");\n                 for krate in &*self.crates {\n                     cargo.arg(krate);\n                 }\n \n                 builder.info(&format!(\n-                    \"Cleaning stage{} {} artifacts ({} -> {})\",\n-                    compiler.stage, stringify!($name).to_lowercase(), &compiler.host, self.target\n+                    \"Cleaning{} stage{} {} artifacts ({} -> {})\",\n+                    crate_description(&self.crates), compiler.stage, stringify!($name).to_lowercase(), &compiler.host, target,\n                 ));\n \n                 // NOTE: doesn't use `run_cargo` because we don't want to save a stamp file,"}, {"sha": "f9a04f2e91dbf3733510d9a88d02fb61b8365128", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=93032e8112066612263eddf45d58c0438f3f5a54", "patch": "@@ -18,6 +18,7 @@ use std::str;\n \n use serde::Deserialize;\n \n+use crate::builder::crate_description;\n use crate::builder::Cargo;\n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n@@ -110,7 +111,10 @@ impl Step for Std {\n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n         if compiler_to_use != compiler {\n             builder.ensure(Std::new(compiler_to_use, target));\n-            builder.info(&format!(\"Uplifting stage1 std ({} -> {})\", compiler_to_use.host, target));\n+            builder.info(&format!(\n+                \"Uplifting stage1 library ({} -> {})\",\n+                compiler_to_use.host, target\n+            ));\n \n             // Even if we're not building std this stage, the new sysroot must\n             // still contain the third party objects needed by various targets.\n@@ -126,19 +130,18 @@ impl Step for Std {\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"build\");\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n+        }\n \n         builder.info(&format!(\n-            \"Building stage{} std artifacts ({} -> {})\",\n-            compiler.stage, &compiler.host, target\n+            \"Building{} stage{} library artifacts ({} -> {})\",\n+            crate_description(&self.crates),\n+            compiler.stage,\n+            &compiler.host,\n+            target,\n         ));\n-        run_cargo(\n-            builder,\n-            cargo,\n-            self.crates.to_vec(),\n-            &libstd_stamp(builder, compiler, target),\n-            target_deps,\n-            false,\n-        );\n+        run_cargo(builder, cargo, &libstd_stamp(builder, compiler, target), target_deps, false);\n \n         builder.ensure(StdLink::from_std(\n             self,\n@@ -425,7 +428,7 @@ impl Step for StdLink {\n         let target_compiler = self.target_compiler;\n         let target = self.target;\n         builder.info(&format!(\n-            \"Copying stage{} std from stage{} ({} -> {} / {})\",\n+            \"Copying stage{} library from stage{} ({} -> {} / {})\",\n             target_compiler.stage, compiler.stage, &compiler.host, target_compiler.host, target\n         ));\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n@@ -714,18 +717,18 @@ impl Step for Rustc {\n             }\n         }\n \n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n+        }\n+\n         builder.info(&format!(\n-            \"Building stage{} compiler artifacts ({} -> {})\",\n-            compiler.stage, &compiler.host, target\n+            \"Building{} stage{} compiler artifacts ({} -> {})\",\n+            crate_description(&self.crates),\n+            compiler.stage,\n+            &compiler.host,\n+            target,\n         ));\n-        run_cargo(\n-            builder,\n-            cargo,\n-            self.crates.to_vec(),\n-            &librustc_stamp(builder, compiler, target),\n-            vec![],\n-            false,\n-        );\n+        run_cargo(builder, cargo, &librustc_stamp(builder, compiler, target), vec![], false);\n \n         builder.ensure(RustcLink::from_rustc(\n             self,\n@@ -981,7 +984,7 @@ impl Step for CodegenBackend {\n             \"Building stage{} codegen backend {} ({} -> {})\",\n             compiler.stage, backend, &compiler.host, target\n         ));\n-        let files = run_cargo(builder, cargo, vec![], &tmp_stamp, vec![], false);\n+        let files = run_cargo(builder, cargo, &tmp_stamp, vec![], false);\n         if builder.config.dry_run() {\n             return;\n         }\n@@ -1405,7 +1408,6 @@ pub fn add_to_sysroot(\n pub fn run_cargo(\n     builder: &Builder<'_>,\n     cargo: Cargo,\n-    tail_args: Vec<String>,\n     stamp: &Path,\n     additional_target_deps: Vec<(PathBuf, DependencyType)>,\n     is_check: bool,\n@@ -1431,7 +1433,7 @@ pub fn run_cargo(\n     // files we need to probe for later.\n     let mut deps = Vec::new();\n     let mut toplevel = Vec::new();\n-    let ok = stream_cargo(builder, cargo, tail_args, &mut |msg| {\n+    let ok = stream_cargo(builder, cargo, &mut |msg| {\n         let (filenames, crate_types) = match msg {\n             CargoMessage::CompilerArtifact {\n                 filenames,\n@@ -1546,7 +1548,6 @@ pub fn run_cargo(\n pub fn stream_cargo(\n     builder: &Builder<'_>,\n     cargo: Cargo,\n-    tail_args: Vec<String>,\n     cb: &mut dyn FnMut(CargoMessage<'_>),\n ) -> bool {\n     let mut cargo = Command::from(cargo);\n@@ -1566,10 +1567,6 @@ pub fn stream_cargo(\n     }\n     cargo.arg(\"--message-format\").arg(message_format).stdout(Stdio::piped());\n \n-    for arg in tail_args {\n-        cargo.arg(arg);\n-    }\n-\n     builder.verbose(&format!(\"running: {:?}\", cargo));\n     let mut child = match cargo.spawn() {\n         Ok(child) => child,"}, {"sha": "9bad9046ecc2c4fed4a122d5d2a60ccf2adda4c1", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=93032e8112066612263eddf45d58c0438f3f5a54", "patch": "@@ -12,6 +12,7 @@ use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n \n+use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n@@ -558,7 +559,8 @@ fn doc_std(\n     requested_crates: &[String],\n ) {\n     builder.info(&format!(\n-        \"Documenting stage{} std ({}) in {} format\",\n+        \"Documenting{} stage{} library ({}) in {} format\",\n+        crate_description(requested_crates),\n         stage,\n         target,\n         format.as_str()"}, {"sha": "d5bec268a45672365183fb1b4fb7df694f23d5ca", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=93032e8112066612263eddf45d58c0438f3f5a54", "patch": "@@ -11,6 +11,7 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n+use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n use crate::compile;\n@@ -2154,8 +2155,12 @@ impl Step for Crate {\n         }\n \n         builder.info(&format!(\n-            \"{} {:?} stage{} ({} -> {})\",\n-            test_kind, self.crates, compiler.stage, &compiler.host, target\n+            \"{}{} stage{} ({} -> {})\",\n+            test_kind,\n+            crate_description(&self.crates),\n+            compiler.stage,\n+            &compiler.host,\n+            target\n         ));\n         let _time = util::timeit(&builder);\n         try_run(builder, &mut cargo.into());"}, {"sha": "63026bd44d475277d388b9a3b8d37d237a0e8842", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93032e8112066612263eddf45d58c0438f3f5a54/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=93032e8112066612263eddf45d58c0438f3f5a54", "patch": "@@ -72,7 +72,7 @@ impl Step for ToolBuild {\n \n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, cargo, vec![], &mut |msg| {\n+        let is_expected = compile::stream_cargo(builder, cargo, &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n             match tool {\n                 \"rls\" | \"cargo\" | \"clippy-driver\" | \"miri\" | \"rustfmt\" => {}"}]}