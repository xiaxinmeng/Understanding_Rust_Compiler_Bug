{"sha": "b9aba749cfc192422d879b12c7a5c3674f5ad110", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YWJhNzQ5Y2ZjMTkyNDIyZDg3OWIxMmM3YTVjMzY3NGY1YWQxMTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-14T22:43:21Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T13:47:19Z"}, "message": "improve robustness of pat walkers", "tree": {"sha": "eaeb3f4a300e3118ca479117127055ff51b75a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaeb3f4a300e3118ca479117127055ff51b75a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9aba749cfc192422d879b12c7a5c3674f5ad110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9aba749cfc192422d879b12c7a5c3674f5ad110", "html_url": "https://github.com/rust-lang/rust/commit/b9aba749cfc192422d879b12c7a5c3674f5ad110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9aba749cfc192422d879b12c7a5c3674f5ad110/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a8baa28763a706ff7a338b1492ca31cf8c615c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8baa28763a706ff7a338b1492ca31cf8c615c1", "html_url": "https://github.com/rust-lang/rust/commit/5a8baa28763a706ff7a338b1492ca31cf8c615c1"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "a85685caf7d7a01642ea70dad8497bbf2f082c1a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9aba749cfc192422d879b12c7a5c3674f5ad110/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9aba749cfc192422d879b12c7a5c3674f5ad110/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b9aba749cfc192422d879b12c7a5c3674f5ad110", "patch": "@@ -921,6 +921,16 @@ impl Pat {\n     pub fn walk(&self, mut it: impl FnMut(&Pat) -> bool) {\n         self.walk_(&mut it)\n     }\n+\n+    /// Walk the pattern in left-to-right order.\n+    ///\n+    /// If you always want to recurse, prefer this method over `walk`.\n+    pub fn walk_always(&self, mut it: impl FnMut(&Pat)) {\n+        self.walk(|p| {\n+            it(p);\n+            true\n+        })\n+    }\n }\n \n /// A single field in a struct pattern."}, {"sha": "8d3b464a8ffa1e6d67d71559dfabe53eaa83f58b", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b9aba749cfc192422d879b12c7a5c3674f5ad110/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9aba749cfc192422d879b12c7a5c3674f5ad110/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=b9aba749cfc192422d879b12c7a5c3674f5ad110", "patch": "@@ -79,11 +79,10 @@ impl hir::Pat {\n     /// Call `f` on every \"binding\" in a pattern, e.g., on `a` in\n     /// `match foo() { Some(a) => (), None => () }`\n     pub fn each_binding(&self, mut f: impl FnMut(hir::BindingAnnotation, HirId, Span, ast::Ident)) {\n-        self.walk(|p| {\n+        self.walk_always(|p| {\n             if let PatKind::Binding(binding_mode, _, ident, _) = p.kind {\n                 f(binding_mode, p.hir_id, p.span, ident);\n             }\n-            true\n         });\n     }\n "}, {"sha": "30501e4504dcc7c98c6ac36d4215872e6e70eac9", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9aba749cfc192422d879b12c7a5c3674f5ad110/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9aba749cfc192422d879b12c7a5c3674f5ad110/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=b9aba749cfc192422d879b12c7a5c3674f5ad110", "patch": "@@ -269,7 +269,7 @@ fn const_not_var(err: &mut DiagnosticBuilder<'_>, tcx: TyCtxt<'_>, pat: &Pat, pa\n }\n \n fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n-    pat.walk(|p| {\n+    pat.walk_always(|p| {\n         if let hir::PatKind::Binding(_, _, ident, None) = p.kind {\n             if let Some(ty::BindByValue(hir::Mutability::Not)) =\n                 cx.tables.extract_binding_mode(cx.tcx.sess, p.hir_id, p.span)\n@@ -303,7 +303,6 @@ fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_>, pat: &Pa\n                 }\n             }\n         }\n-        true\n     });\n }\n \n@@ -602,7 +601,7 @@ fn check_legality_of_move_bindings(cx: &mut MatchVisitor<'_, '_>, has_guard: boo\n             by_move_spans.push(p.span);\n         }\n     };\n-    pat.walk(|p| {\n+    pat.walk_always(|p| {\n         if let hir::PatKind::Binding(.., sub) = &p.kind {\n             if let Some(ty::BindByValue(_)) = tables.extract_binding_mode(sess, p.hir_id, p.span) {\n                 let pat_ty = tables.node_type(p.hir_id);\n@@ -611,7 +610,6 @@ fn check_legality_of_move_bindings(cx: &mut MatchVisitor<'_, '_>, has_guard: boo\n                 }\n             }\n         }\n-        true\n     });\n \n     // Found some bad by-move spans, error!\n@@ -640,16 +638,16 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n         ty::BindByValue(_) => None,\n         ty::BindByReference(m) => Some(m),\n     };\n-    pat.walk(|pat| {\n+    pat.walk_always(|pat| {\n         // Extract `sub` in `binding @ sub`.\n         let (name, sub) = match &pat.kind {\n             hir::PatKind::Binding(.., name, Some(sub)) => (*name, sub),\n-            _ => return true,\n+            _ => return,\n         };\n \n         // Extract the mutability.\n         let mut_outer = match extract_binding_mut(pat.hir_id, pat.span) {\n-            None => return true,\n+            None => return,\n             Some(m) => m,\n         };\n \n@@ -698,8 +696,6 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n             }\n             err.emit();\n         }\n-\n-        true\n     });\n }\n "}]}