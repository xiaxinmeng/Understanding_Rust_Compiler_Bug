{"sha": "6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "node_id": "C_kwDOAAsO6NoAKDZkM2YxYmVhZTE3MjAwNTVlNWEzMGY0ZGJlN2E5ZTdmYjgxMGM2NWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-09T13:51:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-09T13:51:33Z"}, "message": "Auto merge of #100318 - Dylan-DPC:rollup-18tzp6q, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #96478 (Implement `#[rustc_default_body_unstable]`)\n - #99787 (Rustdoc-Json: Document HRTB's on DynTrait)\n - #100181 (add method to get the mutability of an AllocId)\n - #100221 (Don't document impossible to call default trait items on impls)\n - #100228 (Don't ICE while suggesting updating item path.)\n - #100301 (Avoid `&str` to `String` conversions)\n - #100305 (Suggest adding an appropriate missing pattern excluding comments)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0f4964a0d282836bc2cd67e08c00133fe6f85a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f4964a0d282836bc2cd67e08c00133fe6f85a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "html_url": "https://github.com/rust-lang/rust/commit/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4dd6fc9f1a5c798df269933c7e442b79661a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4dd6fc9f1a5c798df269933c7e442b79661a86", "html_url": "https://github.com/rust-lang/rust/commit/cc4dd6fc9f1a5c798df269933c7e442b79661a86"}, {"sha": "467e7aae0f09ec4a42e6c3ea45aa897637265d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/467e7aae0f09ec4a42e6c3ea45aa897637265d49", "html_url": "https://github.com/rust-lang/rust/commit/467e7aae0f09ec4a42e6c3ea45aa897637265d49"}], "stats": {"total": 876, "additions": 748, "deletions": 128}, "files": [{"sha": "ededa7c2ecfb74c8be877bab297d29fdd522d512", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -4626,6 +4626,7 @@ dependencies = [\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_graphviz\",\n  \"rustc_hir\",\n  \"rustc_hir_pretty\","}, {"sha": "97eee56f948076d3379c7439c4094a1824f0eaaa", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -417,6 +417,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 || attr.has_name(sym::stable)\n                 || attr.has_name(sym::rustc_const_unstable)\n                 || attr.has_name(sym::rustc_const_stable)\n+                || attr.has_name(sym::rustc_default_body_unstable)\n             {\n                 struct_span_err!(\n                     self.sess,"}, {"sha": "62ccd734fe7206a09e255a5358cb145d7ac6253e", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -131,6 +131,14 @@ impl ConstStability {\n     }\n }\n \n+/// Represents the `#[rustc_default_body_unstable]` attribute.\n+#[derive(Encodable, Decodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n+pub struct DefaultBodyStability {\n+    pub level: StabilityLevel,\n+    pub feature: Symbol,\n+}\n+\n /// The available stability levels.\n #[derive(Encodable, Decodable, PartialEq, Copy, Clone, Debug, Eq, Hash)]\n #[derive(HashStable_Generic)]\n@@ -214,22 +222,24 @@ pub fn find_stability(\n     sess: &Session,\n     attrs: &[Attribute],\n     item_sp: Span,\n-) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>) {\n+) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>, Option<(DefaultBodyStability, Span)>)\n+{\n     find_stability_generic(sess, attrs.iter(), item_sp)\n }\n \n fn find_stability_generic<'a, I>(\n     sess: &Session,\n     attrs_iter: I,\n     item_sp: Span,\n-) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>)\n+) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>, Option<(DefaultBodyStability, Span)>)\n where\n     I: Iterator<Item = &'a Attribute>,\n {\n     use StabilityLevel::*;\n \n     let mut stab: Option<(Stability, Span)> = None;\n     let mut const_stab: Option<(ConstStability, Span)> = None;\n+    let mut body_stab: Option<(DefaultBodyStability, Span)> = None;\n     let mut promotable = false;\n     let mut allowed_through_unstable_modules = false;\n \n@@ -243,6 +253,7 @@ where\n             sym::stable,\n             sym::rustc_promotable,\n             sym::rustc_allowed_through_unstable_modules,\n+            sym::rustc_default_body_unstable,\n         ]\n         .iter()\n         .any(|&s| attr.has_name(s))\n@@ -280,7 +291,7 @@ where\n \n             let meta_name = meta.name_or_empty();\n             match meta_name {\n-                sym::rustc_const_unstable | sym::unstable => {\n+                sym::rustc_const_unstable | sym::rustc_default_body_unstable | sym::unstable => {\n                     if meta_name == sym::unstable && stab.is_some() {\n                         handle_errors(\n                             &sess.parse_sess,\n@@ -295,6 +306,13 @@ where\n                             AttrError::MultipleStabilityLevels,\n                         );\n                         break;\n+                    } else if meta_name == sym::rustc_default_body_unstable && body_stab.is_some() {\n+                        handle_errors(\n+                            &sess.parse_sess,\n+                            attr.span,\n+                            AttrError::MultipleStabilityLevels,\n+                        );\n+                        break;\n                     }\n \n                     let mut feature = None;\n@@ -405,11 +423,16 @@ where\n                             };\n                             if sym::unstable == meta_name {\n                                 stab = Some((Stability { level, feature }, attr.span));\n-                            } else {\n+                            } else if sym::rustc_const_unstable == meta_name {\n                                 const_stab = Some((\n                                     ConstStability { level, feature, promotable: false },\n                                     attr.span,\n                                 ));\n+                            } else if sym::rustc_default_body_unstable == meta_name {\n+                                body_stab =\n+                                    Some((DefaultBodyStability { level, feature }, attr.span));\n+                            } else {\n+                                unreachable!(\"Unknown stability attribute {meta_name}\");\n                             }\n                         }\n                         (None, _, _) => {\n@@ -542,7 +565,7 @@ where\n         }\n     }\n \n-    (stab, const_stab)\n+    (stab, const_stab, body_stab)\n }\n \n pub fn find_crate_name(sess: &Session, attrs: &[Attribute]) -> Option<Symbol> {"}, {"sha": "75528d6140ce5da524076c5de688394326687cde", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -520,6 +520,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Gives raw access to the `Allocation`, without bounds or alignment checks.\n     /// The caller is responsible for calling the access hooks!\n+    ///\n+    /// You almost certainly want to use `get_ptr_alloc`/`get_ptr_alloc_mut` instead.\n     fn get_alloc_raw(\n         &self,\n         id: AllocId,\n@@ -589,6 +591,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(&self.get_alloc_raw(id)?.extra)\n     }\n \n+    /// Return the `mutability` field of the given allocation.\n+    pub fn get_alloc_mutability<'a>(&'a self, id: AllocId) -> InterpResult<'tcx, Mutability> {\n+        Ok(self.get_alloc_raw(id)?.mutability)\n+    }\n+\n     /// Gives raw mutable access to the `Allocation`, without bounds or alignment checks.\n     /// The caller is responsible for calling the access hooks!\n     ///"}, {"sha": "852ea806b20ff51c64139e3b5a2b293f7496b877", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -772,7 +772,7 @@ impl SyntaxExtension {\n                 )\n             })\n             .unwrap_or_else(|| (None, helper_attrs));\n-        let (stability, const_stability) = attr::find_stability(&sess, attrs, span);\n+        let (stability, const_stability, body_stability) = attr::find_stability(&sess, attrs, span);\n         if let Some((_, sp)) = const_stability {\n             sess.parse_sess\n                 .span_diagnostic\n@@ -784,6 +784,17 @@ impl SyntaxExtension {\n                 )\n                 .emit();\n         }\n+        if let Some((_, sp)) = body_stability {\n+            sess.parse_sess\n+                .span_diagnostic\n+                .struct_span_err(sp, \"macros cannot have body stability attributes\")\n+                .span_label(sp, \"invalid body stability attribute\")\n+                .span_label(\n+                    sess.source_map().guess_head_span(span),\n+                    \"body stability attribute affects this macro\",\n+                )\n+                .emit();\n+        }\n \n         SyntaxExtension {\n             kind,"}, {"sha": "ee46a364546a92fa94cf3786bfc57698e94abddf", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -499,6 +499,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n     ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n+    ungated!(\n+        rustc_default_body_unstable, Normal,\n+        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk\n+    ),\n     gated!(\n         allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"), DuplicatesOk,\n         \"allow_internal_unstable side-steps feature gating and stability checks\","}, {"sha": "61f16be1d6b24016c21c851a9dad358bd69cb72f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -207,6 +207,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     def_ident_span => { table }\n     lookup_stability => { table }\n     lookup_const_stability => { table }\n+    lookup_default_body_stability => { table }\n     lookup_deprecation_entry => { table }\n     visibility => { table }\n     unused_generic_params => { table }"}, {"sha": "f68005c0526350192a1d19c4a9e3d27c5df9ab3c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -1029,6 +1029,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             if should_encode_stability(def_kind) {\n                 self.encode_stability(def_id);\n                 self.encode_const_stability(def_id);\n+                self.encode_default_body_stability(def_id);\n                 self.encode_deprecation(def_id);\n             }\n             if should_encode_variances(def_kind) {\n@@ -1385,6 +1386,18 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n+    fn encode_default_body_stability(&mut self, def_id: DefId) {\n+        debug!(\"EncodeContext::encode_default_body_stability({:?})\", def_id);\n+\n+        // The query lookup can take a measurable amount of time in crates with many items. Check if\n+        // the stability attributes are even enabled before using their queries.\n+        if self.feat.staged_api || self.tcx.sess.opts.unstable_opts.force_unstable_if_unmarked {\n+            if let Some(stab) = self.tcx.lookup_default_body_stability(def_id) {\n+                record!(self.tables.lookup_default_body_stability[def_id] <- stab)\n+            }\n+        }\n+    }\n+\n     fn encode_deprecation(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_deprecation({:?})\", def_id);\n         if let Some(depr) = self.tcx.lookup_deprecation(def_id) {"}, {"sha": "8efe5051b01cb928031bcffde1ed85dfb2667508", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -343,6 +343,7 @@ define_tables! {\n     def_ident_span: Table<DefIndex, LazyValue<Span>>,\n     lookup_stability: Table<DefIndex, LazyValue<attr::Stability>>,\n     lookup_const_stability: Table<DefIndex, LazyValue<attr::ConstStability>>,\n+    lookup_default_body_stability: Table<DefIndex, LazyValue<attr::DefaultBodyStability>>,\n     lookup_deprecation_entry: Table<DefIndex, LazyValue<attr::Deprecation>>,\n     // As an optimization, a missing entry indicates an empty `&[]`.\n     explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,"}, {"sha": "7a9ad44d1d9ae86cec2b46303159c13950e95674", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 68, "deletions": 7, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -5,7 +5,7 @@ pub use self::StabilityLevel::*;\n \n use crate::ty::{self, DefIdTree, TyCtxt};\n use rustc_ast::NodeId;\n-use rustc_attr::{self as attr, ConstStability, Deprecation, Stability};\n+use rustc_attr::{self as attr, ConstStability, DefaultBodyStability, Deprecation, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_feature::GateIssue;\n@@ -61,6 +61,7 @@ pub struct Index {\n     /// are filled by the annotator.\n     pub stab_map: FxHashMap<LocalDefId, Stability>,\n     pub const_stab_map: FxHashMap<LocalDefId, ConstStability>,\n+    pub default_body_stab_map: FxHashMap<LocalDefId, DefaultBodyStability>,\n     pub depr_map: FxHashMap<LocalDefId, DeprecationEntry>,\n     /// Mapping from feature name to feature name based on the `implied_by` field of `#[unstable]`\n     /// attributes. If a `#[unstable(feature = \"implier\", implied_by = \"impliee\")]` attribute\n@@ -86,6 +87,10 @@ impl Index {\n         self.const_stab_map.get(&def_id).copied()\n     }\n \n+    pub fn local_default_body_stability(&self, def_id: LocalDefId) -> Option<DefaultBodyStability> {\n+        self.default_body_stab_map.get(&def_id).copied()\n+    }\n+\n     pub fn local_deprecation_entry(&self, def_id: LocalDefId) -> Option<DeprecationEntry> {\n         self.depr_map.get(&def_id).cloned()\n     }\n@@ -416,19 +421,19 @@ impl<'tcx> TyCtxt<'tcx> {\n             return EvalResult::Allow;\n         }\n \n+        // Only the cross-crate scenario matters when checking unstable APIs\n+        let cross_crate = !def_id.is_local();\n+        if !cross_crate {\n+            return EvalResult::Allow;\n+        }\n+\n         let stability = self.lookup_stability(def_id);\n         debug!(\n             \"stability: \\\n                 inspecting def_id={:?} span={:?} of stability={:?}\",\n             def_id, span, stability\n         );\n \n-        // Only the cross-crate scenario matters when checking unstable APIs\n-        let cross_crate = !def_id.is_local();\n-        if !cross_crate {\n-            return EvalResult::Allow;\n-        }\n-\n         // Issue #38412: private items lack stability markers.\n         if skip_stability_check_due_to_privacy(self, def_id) {\n             return EvalResult::Allow;\n@@ -492,6 +497,62 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Evaluates the default-impl stability of an item.\n+    ///\n+    /// Returns `EvalResult::Allow` if the item's default implementation is stable, or unstable but the corresponding\n+    /// `#![feature]` has been provided. Returns `EvalResult::Deny` which describes the offending\n+    /// unstable feature otherwise.\n+    pub fn eval_default_body_stability(self, def_id: DefId, span: Span) -> EvalResult {\n+        let is_staged_api = self.lookup_stability(def_id.krate.as_def_id()).is_some();\n+        if !is_staged_api {\n+            return EvalResult::Allow;\n+        }\n+\n+        // Only the cross-crate scenario matters when checking unstable APIs\n+        let cross_crate = !def_id.is_local();\n+        if !cross_crate {\n+            return EvalResult::Allow;\n+        }\n+\n+        let stability = self.lookup_default_body_stability(def_id);\n+        debug!(\n+            \"body stability: inspecting def_id={def_id:?} span={span:?} of stability={stability:?}\"\n+        );\n+\n+        // Issue #38412: private items lack stability markers.\n+        if skip_stability_check_due_to_privacy(self, def_id) {\n+            return EvalResult::Allow;\n+        }\n+\n+        match stability {\n+            Some(DefaultBodyStability {\n+                level: attr::Unstable { reason, issue, is_soft, .. },\n+                feature,\n+            }) => {\n+                if span.allows_unstable(feature) {\n+                    debug!(\"body stability: skipping span={:?} since it is internal\", span);\n+                    return EvalResult::Allow;\n+                }\n+                if self.features().active(feature) {\n+                    return EvalResult::Allow;\n+                }\n+\n+                EvalResult::Deny {\n+                    feature,\n+                    reason: reason.to_opt_reason(),\n+                    issue,\n+                    suggestion: None,\n+                    is_soft,\n+                }\n+            }\n+            Some(_) => {\n+                // Stable APIs are always ok to call\n+                EvalResult::Allow\n+            }\n+            None => EvalResult::Unmarked,\n+        }\n+    }\n+\n     /// Checks if an item is stable or error out.\n     ///\n     /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not"}, {"sha": "cfc75f673c8f5bb047a051662ef550d5b52edf0c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -1094,6 +1094,11 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    query lookup_default_body_stability(def_id: DefId) -> Option<attr::DefaultBodyStability> {\n+        desc { |tcx| \"looking up default body stability of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n+    }\n+\n     query should_inherit_track_caller(def_id: DefId) -> bool {\n         desc { |tcx| \"computing should_inherit_track_caller of `{}`\", tcx.def_path_str(def_id) }\n     }\n@@ -1951,6 +1956,14 @@ rustc_queries! {\n         }\n     }\n \n+    query is_impossible_method(key: (DefId, DefId)) -> bool {\n+        desc { |tcx|\n+            \"checking if {} is impossible to call within {}\",\n+            tcx.def_path_str(key.1),\n+            tcx.def_path_str(key.0),\n+        }\n+    }\n+\n     query method_autoderef_steps(\n         goal: CanonicalTyGoal<'tcx>\n     ) -> MethodAutoderefStepsResult<'tcx> {"}, {"sha": "ae6e2eecbffb5f46516c54904a487f75c2d8ca9b", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -64,6 +64,7 @@ trivially_parameterized_over_tcx! {\n     rustc_ast::Attribute,\n     rustc_ast::MacArgs,\n     rustc_attr::ConstStability,\n+    rustc_attr::DefaultBodyStability,\n     rustc_attr::Deprecation,\n     rustc_attr::Stability,\n     rustc_hir::Constness,"}, {"sha": "69a8c98b27a3d76b72ef1c8e5bfb647b923c0279", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -849,22 +849,22 @@ fn non_exhaustive_match<'p, 'tcx>(\n             ));\n         }\n         [.., prev, last] if prev.span.eq_ctxt(last.span) => {\n-            if let Ok(snippet) = sm.span_to_snippet(prev.span.between(last.span)) {\n-                let comma = if matches!(last.body.kind, hir::ExprKind::Block(..))\n-                    && last.span.eq_ctxt(last.body.span)\n-                {\n-                    \"\"\n-                } else {\n-                    \",\"\n-                };\n+            let comma = if matches!(last.body.kind, hir::ExprKind::Block(..))\n+                && last.span.eq_ctxt(last.body.span)\n+            {\n+                \"\"\n+            } else {\n+                \",\"\n+            };\n+            let spacing = if sm.is_multiline(prev.span.between(last.span)) {\n+                sm.indentation_before(last.span).map(|indent| format!(\"\\n{indent}\"))\n+            } else {\n+                Some(\" \".to_string())\n+            };\n+            if let Some(spacing) = spacing {\n                 suggestion = Some((\n                     last.span.shrink_to_hi(),\n-                    format!(\n-                        \"{}{}{} => todo!()\",\n-                        comma,\n-                        snippet.strip_prefix(',').unwrap_or(&snippet),\n-                        pattern\n-                    ),\n+                    format!(\"{}{}{} => todo!()\", comma, spacing, pattern),\n                 ));\n             }\n         }"}, {"sha": "868887c66cdec7a95e1bc723a460718c5d365c0d", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -29,11 +29,16 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n     }\n \n     fn extract(&self, attr: &Attribute) -> Option<(Symbol, Option<Symbol>, Span)> {\n-        let stab_attrs =\n-            [sym::stable, sym::unstable, sym::rustc_const_stable, sym::rustc_const_unstable];\n+        let stab_attrs = [\n+            sym::stable,\n+            sym::unstable,\n+            sym::rustc_const_stable,\n+            sym::rustc_const_unstable,\n+            sym::rustc_default_body_unstable,\n+        ];\n \n         // Find a stability attribute: one of #[stable(\u2026)], #[unstable(\u2026)],\n-        // #[rustc_const_stable(\u2026)], or #[rustc_const_unstable(\u2026)].\n+        // #[rustc_const_stable(\u2026)], #[rustc_const_unstable(\u2026)] or #[rustc_default_body_unstable].\n         if let Some(stab_attr) = stab_attrs.iter().find(|stab_attr| attr.has_name(**stab_attr)) {\n             let meta_kind = attr.meta_kind();\n             if let Some(MetaItemKind::List(ref metas)) = meta_kind {\n@@ -53,8 +58,12 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n                     // This additional check for stability is to make sure we\n                     // don't emit additional, irrelevant errors for malformed\n                     // attributes.\n-                    let is_unstable =\n-                        matches!(*stab_attr, sym::unstable | sym::rustc_const_unstable);\n+                    let is_unstable = matches!(\n+                        *stab_attr,\n+                        sym::unstable\n+                            | sym::rustc_const_unstable\n+                            | sym::rustc_default_body_unstable\n+                    );\n                     if since.is_some() || is_unstable {\n                         return Some((feature, since, attr.span));\n                     }"}, {"sha": "be920601ee43f2c19d6b9cd43731a6ae4ec0c098", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -1,8 +1,9 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n-use attr::StabilityLevel;\n-use rustc_attr::{self as attr, ConstStability, Stability, Unstable, UnstableReason};\n+use rustc_attr::{\n+    self as attr, ConstStability, Stability, StabilityLevel, Unstable, UnstableReason,\n+};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n@@ -161,7 +162,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             return;\n         }\n \n-        let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item_sp);\n+        let (stab, const_stab, body_stab) = attr::find_stability(&self.tcx.sess, attrs, item_sp);\n         let mut const_span = None;\n \n         let const_stab = const_stab.map(|(const_stab, const_span_node)| {\n@@ -209,6 +210,13 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         }\n \n+        if let Some((body_stab, _span)) = body_stab {\n+            // FIXME: check that this item can have body stability\n+\n+            self.index.default_body_stab_map.insert(def_id, body_stab);\n+            debug!(?self.index.default_body_stab_map);\n+        }\n+\n         let stab = stab.map(|(stab, span)| {\n             // Error if prohibited, or can't inherit anything from a container.\n             if kind == AnnotationKind::Prohibited\n@@ -613,6 +621,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n     let mut index = Index {\n         stab_map: Default::default(),\n         const_stab_map: Default::default(),\n+        default_body_stab_map: Default::default(),\n         depr_map: Default::default(),\n         implications: Default::default(),\n     };\n@@ -673,6 +682,9 @@ pub(crate) fn provide(providers: &mut Providers) {\n         stability_implications: |tcx, _| tcx.stability().implications.clone(),\n         lookup_stability: |tcx, id| tcx.stability().local_stability(id.expect_local()),\n         lookup_const_stability: |tcx, id| tcx.stability().local_const_stability(id.expect_local()),\n+        lookup_default_body_stability: |tcx, id| {\n+            tcx.stability().local_default_body_stability(id.expect_local())\n+        },\n         lookup_deprecation_entry: |tcx, id| {\n             tcx.stability().local_deprecation_entry(id.expect_local())\n         },\n@@ -723,7 +735,8 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 let features = self.tcx.features();\n                 if features.staged_api {\n                     let attrs = self.tcx.hir().attrs(item.hir_id());\n-                    let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item.span);\n+                    let (stab, const_stab, _) =\n+                        attr::find_stability(&self.tcx.sess, attrs, item.span);\n \n                     // If this impl block has an #[unstable] attribute, give an\n                     // error if all involved types and traits are stable, because"}, {"sha": "325b0458638af1712904cc1e05edaf0c2259bfc4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -2544,12 +2544,15 @@ fn show_candidates(\n                 Applicability::MaybeIncorrect,\n             );\n             if let [first, .., last] = &path[..] {\n-                err.span_suggestion_verbose(\n-                    first.ident.span.until(last.ident.span),\n-                    &format!(\"if you import `{}`, refer to it directly\", last.ident),\n-                    \"\",\n-                    Applicability::Unspecified,\n-                );\n+                let sp = first.ident.span.until(last.ident.span);\n+                if sp.can_be_used_for_suggestions() {\n+                    err.span_suggestion_verbose(\n+                        sp,\n+                        &format!(\"if you import `{}`, refer to it directly\", last.ident),\n+                        \"\",\n+                        Applicability::Unspecified,\n+                    );\n+                }\n             }\n         } else {\n             msg.push(':');"}, {"sha": "2f3519e3edd778b88cb08f09c14c18158bfe7f52", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -1218,6 +1218,7 @@ symbols! {\n         rustc_conversion_suggestion,\n         rustc_deallocator,\n         rustc_def_path,\n+        rustc_default_body_unstable,\n         rustc_diagnostic_item,\n         rustc_diagnostic_macros,\n         rustc_dirty,"}, {"sha": "b6d6df1eec6a12a56d3bd570f4a61eb04a25793d", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -34,7 +34,10 @@ use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, VtblEntry};\n+use rustc_middle::ty::{\n+    self, DefIdTree, GenericParamDefKind, Subst, ToPredicate, Ty, TyCtxt, TypeSuperVisitable,\n+    VtblEntry,\n+};\n use rustc_span::{sym, Span};\n use smallvec::SmallVec;\n \n@@ -503,6 +506,77 @@ fn subst_and_check_impossible_predicates<'tcx>(\n     result\n }\n \n+/// Checks whether a trait's method is impossible to call on a given impl.\n+///\n+/// This only considers predicates that reference the impl's generics, and not\n+/// those that reference the method's generics.\n+fn is_impossible_method<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    (impl_def_id, trait_item_def_id): (DefId, DefId),\n+) -> bool {\n+    struct ReferencesOnlyParentGenerics<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        generics: &'tcx ty::Generics,\n+        trait_item_def_id: DefId,\n+    }\n+    impl<'tcx> ty::TypeVisitor<'tcx> for ReferencesOnlyParentGenerics<'tcx> {\n+        type BreakTy = ();\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+            // If this is a parameter from the trait item's own generics, then bail\n+            if let ty::Param(param) = t.kind()\n+                && let param_def_id = self.generics.type_param(param, self.tcx).def_id\n+                && self.tcx.parent(param_def_id) == self.trait_item_def_id\n+            {\n+                return ControlFlow::BREAK;\n+            }\n+            t.super_visit_with(self)\n+        }\n+        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+            if let ty::ReEarlyBound(param) = r.kind()\n+                && let param_def_id = self.generics.region_param(&param, self.tcx).def_id\n+                && self.tcx.parent(param_def_id) == self.trait_item_def_id\n+            {\n+                return ControlFlow::BREAK;\n+            }\n+            r.super_visit_with(self)\n+        }\n+        fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+            if let ty::ConstKind::Param(param) = ct.kind()\n+                && let param_def_id = self.generics.const_param(&param, self.tcx).def_id\n+                && self.tcx.parent(param_def_id) == self.trait_item_def_id\n+            {\n+                return ControlFlow::BREAK;\n+            }\n+            ct.super_visit_with(self)\n+        }\n+    }\n+\n+    let generics = tcx.generics_of(trait_item_def_id);\n+    let predicates = tcx.predicates_of(trait_item_def_id);\n+    let impl_trait_ref =\n+        tcx.impl_trait_ref(impl_def_id).expect(\"expected impl to correspond to trait\");\n+    let param_env = tcx.param_env(impl_def_id);\n+\n+    let mut visitor = ReferencesOnlyParentGenerics { tcx, generics, trait_item_def_id };\n+    let predicates_for_trait = predicates.predicates.iter().filter_map(|(pred, span)| {\n+        if pred.visit_with(&mut visitor).is_continue() {\n+            Some(Obligation::new(\n+                ObligationCause::dummy_with_span(*span),\n+                param_env,\n+                ty::EarlyBinder(*pred).subst(tcx, impl_trait_ref.substs),\n+            ))\n+        } else {\n+            None\n+        }\n+    });\n+\n+    tcx.infer_ctxt().ignoring_regions().enter(|ref infcx| {\n+        let mut fulfill_ctxt = <dyn TraitEngine<'_>>::new(tcx);\n+        fulfill_ctxt.register_predicate_obligations(infcx, predicates_for_trait);\n+        !fulfill_ctxt.select_all_or_error(infcx).is_empty()\n+    })\n+}\n+\n #[derive(Clone, Debug)]\n enum VtblSegment<'tcx> {\n     MetadataDSA,\n@@ -883,6 +957,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         vtable_entries,\n         vtable_trait_upcasting_coercion_new_vptr_slot,\n         subst_and_check_impossible_predicates,\n+        is_impossible_method,\n         try_unify_abstract_consts: |tcx, param_env_and| {\n             let (param_env, (a, b)) = param_env_and.into_parts();\n             const_evaluatable::try_unify_abstract_consts(tcx, (a, b), param_env)"}, {"sha": "cae29c1d3c5f938a2b103d103a962c2b790d77ca", "filename": "compiler/rustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2FCargo.toml?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -30,3 +30,4 @@ rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n rustc_lint = { path = \"../rustc_lint\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n+rustc_feature = { path = \"../rustc_feature\" }"}, {"sha": "6e3ef15f88433ebf4e6f83c35fb67b27aafc3f36", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -18,6 +18,7 @@ use rustc_infer::infer::{DefiningAnchor, RegionVariableOrigin, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n use rustc_lint::builtin::REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS;\n use rustc_middle::hir::nested_filter;\n+use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n@@ -1103,12 +1104,28 @@ fn check_impl_items_against_trait<'tcx>(\n                 missing_items.push(tcx.associated_item(trait_item_id));\n             }\n \n-            if let Some(required_items) = &must_implement_one_of {\n-                // true if this item is specifically implemented in this impl\n-                let is_implemented_here = ancestors\n-                    .leaf_def(tcx, trait_item_id)\n-                    .map_or(false, |node_item| !node_item.defining_node.is_from_trait());\n+            // true if this item is specifically implemented in this impl\n+            let is_implemented_here = ancestors\n+                .leaf_def(tcx, trait_item_id)\n+                .map_or(false, |node_item| !node_item.defining_node.is_from_trait());\n+\n+            if !is_implemented_here {\n+                match tcx.eval_default_body_stability(trait_item_id, full_impl_span) {\n+                    EvalResult::Deny { feature, reason, issue, .. } => default_body_is_unstable(\n+                        tcx,\n+                        full_impl_span,\n+                        trait_item_id,\n+                        feature,\n+                        reason,\n+                        issue,\n+                    ),\n \n+                    // Unmarked default bodies are considered stable (at least for now).\n+                    EvalResult::Allow | EvalResult::Unmarked => {}\n+                }\n+            }\n+\n+            if let Some(required_items) = &must_implement_one_of {\n                 if is_implemented_here {\n                     let trait_item = tcx.associated_item(trait_item_id);\n                     if required_items.contains(&trait_item.ident(tcx)) {"}, {"sha": "540a8c3a83d9576d1c25b0860de4dcd8d4e0307d", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -1589,11 +1589,11 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n     ) {\n         let hir::ExprKind::Loop(_, _, _, loop_span) = expr.kind else { return;};\n         let mut span: MultiSpan = vec![loop_span].into();\n-        span.push_span_label(loop_span, \"this might have zero elements to iterate on\".to_string());\n+        span.push_span_label(loop_span, \"this might have zero elements to iterate on\");\n         for ret_expr in ret_exprs {\n             span.push_span_label(\n                 ret_expr.span,\n-                \"if the loop doesn't execute, this value would never get returned\".to_string(),\n+                \"if the loop doesn't execute, this value would never get returned\",\n             );\n         }\n         err.span_note("}, {"sha": "b73d9a9eb7599d13081679922cc31a86dc9cdf39", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -121,13 +121,14 @@ use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, Ident};\n-use rustc_span::{self, BytePos, Span};\n+use rustc_span::{self, BytePos, Span, Symbol};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::recursive_type_with_infinite_size_error;\n use rustc_trait_selection::traits::error_reporting::suggestions::ReturnsVisitor;\n use std::cell::RefCell;\n+use std::num::NonZeroU32;\n \n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n@@ -661,6 +662,37 @@ fn missing_items_must_implement_one_of_err(\n     err.emit();\n }\n \n+fn default_body_is_unstable(\n+    tcx: TyCtxt<'_>,\n+    impl_span: Span,\n+    item_did: DefId,\n+    feature: Symbol,\n+    reason: Option<Symbol>,\n+    issue: Option<NonZeroU32>,\n+) {\n+    let missing_item_name = &tcx.associated_item(item_did).name;\n+    let use_of_unstable_library_feature_note = match reason {\n+        Some(r) => format!(\"use of unstable library feature '{feature}': {r}\"),\n+        None => format!(\"use of unstable library feature '{feature}'\"),\n+    };\n+\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        impl_span,\n+        E0046,\n+        \"not all trait items implemented, missing: `{missing_item_name}`\",\n+    );\n+    err.note(format!(\"default implementation of `{missing_item_name}` is unstable\"));\n+    err.note(use_of_unstable_library_feature_note);\n+    rustc_session::parse::add_feature_diagnostics_for_issue(\n+        &mut err,\n+        &tcx.sess.parse_sess,\n+        feature,\n+        rustc_feature::GateIssue::Library(issue),\n+    );\n+    err.emit();\n+}\n+\n /// Re-sugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions.\n fn bounds_from_generic_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "ed1d883d0dca6f4d678448eea67240e82aec3bd1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -628,6 +628,10 @@ impl Step for Miri {\n             cargo.env(\"MIRI_HOST_SYSROOT\", sysroot);\n             cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n             cargo.env(\"MIRI\", miri);\n+            // propagate --bless\n+            if builder.config.cmd.bless() {\n+                cargo.env(\"MIRI_BLESS\", \"Gesundheit\");\n+            }\n \n             cargo.arg(\"--\").args(builder.config.cmd.test_args());\n "}, {"sha": "a705e2384959f1b8ad56db2d1a2ce3d2e44d9fc7", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -88,8 +88,8 @@ def check_type(ty):\n                         for bound in binding[\"binding\"][\"constraint\"]:\n                             check_generic_bound(bound)\n             elif \"parenthesized\" in args:\n-                for ty in args[\"parenthesized\"][\"inputs\"]:\n-                    check_type(ty)\n+                for input_ty in args[\"parenthesized\"][\"inputs\"]:\n+                    check_type(input_ty)\n                 if args[\"parenthesized\"][\"output\"]:\n                     check_type(args[\"parenthesized\"][\"output\"])\n         if not valid_id(ty[\"inner\"][\"id\"]):"}, {"sha": "ae7d8c108d3eefa21cf0d1293b1dfea9432cc82d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -1550,6 +1550,15 @@ fn render_impl(\n         rendering_params: ImplRenderingParameters,\n     ) {\n         for trait_item in &t.items {\n+            // Skip over any default trait items that are impossible to call\n+            // (e.g. if it has a `Self: Sized` bound on an unsized type).\n+            if let Some(impl_def_id) = parent.item_id.as_def_id()\n+                && let Some(trait_item_def_id) = trait_item.item_id.as_def_id()\n+                && cx.tcx().is_impossible_method((impl_def_id, trait_item_def_id))\n+            {\n+                continue;\n+            }\n+\n             let n = trait_item.name;\n             if i.items.iter().any(|m| m.name == n) {\n                 continue;"}, {"sha": "8caba8cb9029cf1548c2c9892122bdf1c19767f9", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 59, "deletions": 61, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -119,6 +119,16 @@ where\n     }\n }\n \n+impl<I, T, U> FromWithTcx<I> for Vec<U>\n+where\n+    I: IntoIterator<Item = T>,\n+    U: FromWithTcx<T>,\n+{\n+    fn from_tcx(f: I, tcx: TyCtxt<'_>) -> Vec<U> {\n+        f.into_iter().map(|x| x.into_tcx(tcx)).collect()\n+    }\n+}\n+\n pub(crate) fn from_deprecation(deprecation: rustc_attr::Deprecation) -> Deprecation {\n     #[rustfmt::skip]\n     let rustc_attr::Deprecation { since, note, is_since_rustc_version: _, suggestion: _ } = deprecation;\n@@ -130,11 +140,11 @@ impl FromWithTcx<clean::GenericArgs> for GenericArgs {\n         use clean::GenericArgs::*;\n         match args {\n             AngleBracketed { args, bindings } => GenericArgs::AngleBracketed {\n-                args: args.into_vec().into_iter().map(|a| a.into_tcx(tcx)).collect(),\n-                bindings: bindings.into_iter().map(|a| a.into_tcx(tcx)).collect(),\n+                args: args.into_vec().into_tcx(tcx),\n+                bindings: bindings.into_tcx(tcx),\n             },\n             Parenthesized { inputs, output } => GenericArgs::Parenthesized {\n-                inputs: inputs.into_vec().into_iter().map(|a| a.into_tcx(tcx)).collect(),\n+                inputs: inputs.into_vec().into_tcx(tcx),\n                 output: output.map(|a| (*a).into_tcx(tcx)),\n             },\n         }\n@@ -145,7 +155,7 @@ impl FromWithTcx<clean::GenericArg> for GenericArg {\n     fn from_tcx(arg: clean::GenericArg, tcx: TyCtxt<'_>) -> Self {\n         use clean::GenericArg::*;\n         match arg {\n-            Lifetime(l) => GenericArg::Lifetime(l.0.to_string()),\n+            Lifetime(l) => GenericArg::Lifetime(convert_lifetime(l)),\n             Type(t) => GenericArg::Type(t.into_tcx(tcx)),\n             Const(box c) => GenericArg::Const(c.into_tcx(tcx)),\n             Infer => GenericArg::Infer,\n@@ -177,9 +187,7 @@ impl FromWithTcx<clean::TypeBindingKind> for TypeBindingKind {\n         use clean::TypeBindingKind::*;\n         match kind {\n             Equality { term } => TypeBindingKind::Equality(term.into_tcx(tcx)),\n-            Constraint { bounds } => {\n-                TypeBindingKind::Constraint(bounds.into_iter().map(|a| a.into_tcx(tcx)).collect())\n-            }\n+            Constraint { bounds } => TypeBindingKind::Constraint(bounds.into_tcx(tcx)),\n         }\n     }\n }\n@@ -244,7 +252,7 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         TraitAliasItem(t) => ItemEnum::TraitAlias(t.into_tcx(tcx)),\n         MethodItem(m, _) => ItemEnum::Method(from_function_method(m, true, header.unwrap(), tcx)),\n         TyMethodItem(m) => ItemEnum::Method(from_function_method(m, false, header.unwrap(), tcx)),\n-        ImplItem(i) => ItemEnum::Impl(i.into_tcx(tcx)),\n+        ImplItem(i) => ItemEnum::Impl((*i).into_tcx(tcx)),\n         StaticItem(s) => ItemEnum::Static(s.into_tcx(tcx)),\n         ForeignStaticItem(s) => ItemEnum::Static(s.into_tcx(tcx)),\n         ForeignTypeItem => ItemEnum::ForeignType,\n@@ -260,12 +268,12 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         }\n         TyAssocTypeItem(g, b) => ItemEnum::AssocType {\n             generics: (*g).into_tcx(tcx),\n-            bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            bounds: b.into_tcx(tcx),\n             default: None,\n         },\n         AssocTypeItem(t, b) => ItemEnum::AssocType {\n             generics: t.generics.into_tcx(tcx),\n-            bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            bounds: b.into_tcx(tcx),\n             default: Some(t.item_type.unwrap_or(t.type_).into_tcx(tcx)),\n         },\n         // `convert_item` early returns `None` for stripped items and keywords.\n@@ -347,15 +355,15 @@ fn convert_abi(a: RustcAbi) -> Abi {\n     }\n }\n \n+fn convert_lifetime(l: clean::Lifetime) -> String {\n+    l.0.to_string()\n+}\n+\n impl FromWithTcx<clean::Generics> for Generics {\n     fn from_tcx(generics: clean::Generics, tcx: TyCtxt<'_>) -> Self {\n         Generics {\n-            params: generics.params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-            where_predicates: generics\n-                .where_predicates\n-                .into_iter()\n-                .map(|x| x.into_tcx(tcx))\n-                .collect(),\n+            params: generics.params.into_tcx(tcx),\n+            where_predicates: generics.where_predicates.into_tcx(tcx),\n         }\n     }\n }\n@@ -374,10 +382,10 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n         use clean::GenericParamDefKind::*;\n         match kind {\n             Lifetime { outlives } => GenericParamDefKind::Lifetime {\n-                outlives: outlives.into_iter().map(|lt| lt.0.to_string()).collect(),\n+                outlives: outlives.into_iter().map(convert_lifetime).collect(),\n             },\n             Type { did: _, bounds, default, synthetic } => GenericParamDefKind::Type {\n-                bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                bounds: bounds.into_tcx(tcx),\n                 default: default.map(|x| (*x).into_tcx(tcx)),\n                 synthetic,\n             },\n@@ -395,7 +403,7 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n         match predicate {\n             BoundPredicate { ty, bounds, bound_params } => WherePredicate::BoundPredicate {\n                 type_: ty.into_tcx(tcx),\n-                bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                bounds: bounds.into_tcx(tcx),\n                 generic_params: bound_params\n                     .into_iter()\n                     .map(|x| GenericParamDef {\n@@ -405,8 +413,8 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n                     .collect(),\n             },\n             RegionPredicate { lifetime, bounds } => WherePredicate::RegionPredicate {\n-                lifetime: lifetime.0.to_string(),\n-                bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                lifetime: convert_lifetime(lifetime),\n+                bounds: bounds.into_tcx(tcx),\n             },\n             EqPredicate { lhs, rhs } => {\n                 WherePredicate::EqPredicate { lhs: lhs.into_tcx(tcx), rhs: rhs.into_tcx(tcx) }\n@@ -424,11 +432,11 @@ impl FromWithTcx<clean::GenericBound> for GenericBound {\n                 let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n                 GenericBound::TraitBound {\n                     trait_,\n-                    generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                    generic_params: generic_params.into_tcx(tcx),\n                     modifier: from_trait_bound_modifier(modifier),\n                 }\n             }\n-            Outlives(lifetime) => GenericBound::Outlives(lifetime.0.to_string()),\n+            Outlives(lifetime) => GenericBound::Outlives(convert_lifetime(lifetime)),\n         }\n     }\n }\n@@ -447,8 +455,8 @@ pub(crate) fn from_trait_bound_modifier(\n impl FromWithTcx<clean::Type> for Type {\n     fn from_tcx(ty: clean::Type, tcx: TyCtxt<'_>) -> Self {\n         use clean::Type::{\n-            Array, BareFunction, BorrowedRef, DynTrait, Generic, ImplTrait, Infer, Primitive,\n-            QPath, RawPointer, Slice, Tuple,\n+            Array, BareFunction, BorrowedRef, Generic, ImplTrait, Infer, Primitive, QPath,\n+            RawPointer, Slice, Tuple,\n         };\n \n         match ty {\n@@ -458,40 +466,24 @@ impl FromWithTcx<clean::Type> for Type {\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n                 param_names: Vec::new(),\n             },\n-            DynTrait(mut bounds, lt) => {\n-                let first_trait = bounds.remove(0).trait_;\n-\n-                Type::ResolvedPath {\n-                    name: first_trait.whole_name(),\n-                    id: from_item_id(first_trait.def_id().into(), tcx),\n-                    args: first_trait\n-                        .segments\n-                        .last()\n-                        .map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n-                    param_names: bounds\n-                        .into_iter()\n-                        .map(|t| {\n-                            clean::GenericBound::TraitBound(t, rustc_hir::TraitBoundModifier::None)\n-                        })\n-                        .chain(lt.map(clean::GenericBound::Outlives))\n-                        .map(|bound| bound.into_tcx(tcx))\n-                        .collect(),\n-                }\n-            }\n+            clean::Type::DynTrait(bounds, lt) => Type::DynTrait(DynTrait {\n+                lifetime: lt.map(convert_lifetime),\n+                traits: bounds.into_tcx(tcx),\n+            }),\n             Generic(s) => Type::Generic(s.to_string()),\n             Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n-            Tuple(t) => Type::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n+            Tuple(t) => Type::Tuple(t.into_tcx(tcx)),\n             Slice(t) => Type::Slice(Box::new((*t).into_tcx(tcx))),\n             Array(t, s) => Type::Array { type_: Box::new((*t).into_tcx(tcx)), len: s },\n-            ImplTrait(g) => Type::ImplTrait(g.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n+            ImplTrait(g) => Type::ImplTrait(g.into_tcx(tcx)),\n             Infer => Type::Infer,\n             RawPointer(mutability, type_) => Type::RawPointer {\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },\n             BorrowedRef { lifetime, mutability, type_ } => Type::BorrowedRef {\n-                lifetime: lifetime.map(|l| l.0.to_string()),\n+                lifetime: lifetime.map(convert_lifetime),\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },\n@@ -528,7 +520,7 @@ impl FromWithTcx<clean::BareFunctionDecl> for FunctionPointer {\n                 async_: false,\n                 abi: convert_abi(abi),\n             },\n-            generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            generic_params: generic_params.into_tcx(tcx),\n             decl: decl.into_tcx(tcx),\n         }\n     }\n@@ -562,16 +554,28 @@ impl FromWithTcx<clean::Trait> for Trait {\n             is_unsafe,\n             items: ids(items, tcx),\n             generics: generics.into_tcx(tcx),\n-            bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            bounds: bounds.into_tcx(tcx),\n             implementations: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n }\n \n-impl FromWithTcx<Box<clean::Impl>> for Impl {\n-    fn from_tcx(impl_: Box<clean::Impl>, tcx: TyCtxt<'_>) -> Self {\n+impl FromWithTcx<clean::PolyTrait> for PolyTrait {\n+    fn from_tcx(\n+        clean::PolyTrait { trait_, generic_params }: clean::PolyTrait,\n+        tcx: TyCtxt<'_>,\n+    ) -> Self {\n+        PolyTrait {\n+            trait_: clean::Type::Path { path: trait_ }.into_tcx(tcx),\n+            generic_params: generic_params.into_tcx(tcx),\n+        }\n+    }\n+}\n+\n+impl FromWithTcx<clean::Impl> for Impl {\n+    fn from_tcx(impl_: clean::Impl, tcx: TyCtxt<'_>) -> Self {\n         let provided_trait_methods = impl_.provided_trait_methods(tcx);\n-        let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = *impl_;\n+        let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n         // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n         let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?\n@@ -730,10 +734,7 @@ impl FromWithTcx<Box<clean::Typedef>> for Typedef {\n \n impl FromWithTcx<clean::OpaqueTy> for OpaqueTy {\n     fn from_tcx(opaque: clean::OpaqueTy, tcx: TyCtxt<'_>) -> Self {\n-        OpaqueTy {\n-            bounds: opaque.bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-            generics: opaque.generics.into_tcx(tcx),\n-        }\n+        OpaqueTy { bounds: opaque.bounds.into_tcx(tcx), generics: opaque.generics.into_tcx(tcx) }\n     }\n }\n \n@@ -749,10 +750,7 @@ impl FromWithTcx<clean::Static> for Static {\n \n impl FromWithTcx<clean::TraitAlias> for TraitAlias {\n     fn from_tcx(alias: clean::TraitAlias, tcx: TyCtxt<'_>) -> Self {\n-        TraitAlias {\n-            generics: alias.generics.into_tcx(tcx),\n-            params: alias.bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-        }\n+        TraitAlias { generics: alias.generics.into_tcx(tcx), params: alias.bounds.into_tcx(tcx) }\n     }\n }\n "}, {"sha": "bd4ea98441d66d5c6eab5bcfcf1f69fb1253d08a", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 16;\n+pub const FORMAT_VERSION: u32 = 17;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -115,6 +115,35 @@ pub enum Visibility {\n     },\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+pub struct DynTrait {\n+    /// All the traits implemented. One of them is the vtable, and the rest must be auto traits.\n+    pub traits: Vec<PolyTrait>,\n+    /// The lifetime of the whole dyn object\n+    /// ```text\n+    /// dyn Debug + 'static\n+    ///             ^^^^^^^\n+    ///             |\n+    ///             this part\n+    /// ```\n+    pub lifetime: Option<String>,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+/// A trait and potential HRTBs\n+pub struct PolyTrait {\n+    #[serde(rename = \"trait\")]\n+    pub trait_: Type,\n+    /// Used for Higher-Rank Trait Bounds (HRTBs)\n+    /// ```text\n+    /// dyn for<'a> Fn() -> &'a i32\"\n+    ///     ^^^^^^^\n+    ///       |\n+    ///       this part\n+    /// ```\n+    pub generic_params: Vec<GenericParamDef>,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericArgs {\n@@ -395,7 +424,7 @@ pub enum WherePredicate {\n         type_: Type,\n         bounds: Vec<GenericBound>,\n         /// Used for Higher-Rank Trait Bounds (HRTBs)\n-        /// ```plain\n+        /// ```text\n         /// where for<'a> &'a T: Iterator,\"\n         ///       ^^^^^^^\n         ///       |\n@@ -420,7 +449,7 @@ pub enum GenericBound {\n         #[serde(rename = \"trait\")]\n         trait_: Type,\n         /// Used for Higher-Rank Trait Bounds (HRTBs)\n-        /// ```plain\n+        /// ```text\n         /// where F: for<'a, 'b> Fn(&'a u8, &'b u8)\n         ///          ^^^^^^^^^^^\n         ///          |\n@@ -458,6 +487,7 @@ pub enum Type {\n         args: Option<Box<GenericArgs>>,\n         param_names: Vec<GenericBound>,\n     },\n+    DynTrait(DynTrait),\n     /// Parameterized types\n     Generic(String),\n     /// Fixed-size numeric types (plus int/usize/float), char, arrays, slices, and tuples\n@@ -505,7 +535,7 @@ pub enum Type {\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n     /// Used for Higher-Rank Trait Bounds (HRTBs)\n-    /// ```plain\n+    /// ```text\n     /// for<'c> fn(val: &'c i32) -> i32\n     /// ^^^^^^^\n     ///       |"}, {"sha": "c18b54d1fdf0ed18bba992190874850bed4e7a16", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -1,21 +1,49 @@\n // ignore-tidy-linelength\n+use std::fmt::Debug;\n \n-// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items\" 1\n+// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items[*]\" 3\n // @set sync_int_gen = - \"$.index[*][?(@.name=='SyncIntGen')].id\"\n-// @is - \"$.index[*][?(@.name=='dyn')].inner.items[0]\" $sync_int_gen\n+// @set ref_fn       = - \"$.index[*][?(@.name=='RefFn')].id\"\n+// @set weird_order  = - \"$.index[*][?(@.name=='WeirdOrder')].id\"\n+// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $sync_int_gen\n+// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $ref_fn\n+// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $weird_order\n \n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.kind\" \\\"resolved_path\\\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.name\" \\\"Box\\\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.bindings\" []\n // @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args\" 1\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.name\" \\\"Fn\\\"\n-// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[*]\" 3\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[0].trait_bound.trait.inner.name\" \\\"Send\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[1].trait_bound.trait.inner.name\" \\\"Sync\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[2]\" \"{\\\"outlives\\\": \\\"'static\\\"}\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"dyn_trait\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.lifetime\" \\\"\\'static\\\"\n+// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[*]\" 3\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].generic_params\" []\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].generic_params\" []\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].generic_params\" []\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.inner.name\" '\"Send\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].trait.inner.name\" '\"Sync\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;\n+\n+// @is - \"$.index[*][?(@.name=='RefFn')].kind\" \\\"typedef\\\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.generics\" '{\"params\": [{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"}],\"where_predicates\": []}'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.mutable\" 'false'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.lifetime\" \"\\\"'a\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.kind\" '\"dyn_trait\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.lifetime\" null\n+// @count - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[*]\" 1\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.kind\" '\"resolved_path\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n+pub type RefFn<'a> = &'a dyn for<'b> Fn(&'b i32) -> &'b i32;\n+\n+// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.name\" '\"Send\"'\n+// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.inner.name\" '\"Debug\"'\n+pub type WeirdOrder = Box<dyn Send + Debug>;"}, {"sha": "9311737be0fec0ead932028d4332be8e5b4b034d", "filename": "src/test/rustdoc-json/type/hrtb.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,26 @@\n+// ignore-tidy-linelength\n+\n+// @has hrtb.json\n+\n+// @is - \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\",\"kind\": \"generic\"}'\n+// @is - \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+pub fn genfn<F>(f: F)\n+where\n+    for<'a, 'b> F: Fn(&'a i32, &'b i32),\n+{\n+    let zero = 0;\n+    f(&zero, &zero);\n+}\n+\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.kind\" '\"dyn_trait\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" null\n+// @count - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[*]\" 1\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n+pub fn dynfn(f: &dyn for<'a, 'b> Fn(&'a i32, &'b i32)) {\n+    let zero = 0;\n+    f(&zero, &zero);\n+}"}, {"sha": "24d6e3bdac1bd259a6213fedd7cf55d6aa96e216", "filename": "src/test/rustdoc/impossible-default.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Frustdoc%2Fimpossible-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Frustdoc%2Fimpossible-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpossible-default.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,20 @@\n+#![crate_name = \"foo\"]\n+\n+// Check that default trait items that are impossible to satisfy\n+\n+pub trait Foo {\n+    fn needs_sized(&self)\n+    where\n+        Self: Sized,\n+    {}\n+\n+    fn no_needs_sized(&self) {}\n+}\n+\n+// @!has foo/struct.Bar.html '//*[@id=\"method.needs_sized\"]//h4[@class=\"code-header\"]' \\\n+// \"fn needs_sized\"\n+// @has foo/struct.Bar.html '//*[@id=\"method.no_needs_sized\"]//h4[@class=\"code-header\"]' \\\n+// \"fn no_needs_sized\"\n+pub struct Bar([u8]);\n+\n+impl Foo for Bar {}"}, {"sha": "9e190b542db49d438e79e22717355b363d538767", "filename": "src/test/ui/macros/auxiliary/issue-100199.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-100199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-100199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-100199.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,18 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_quote)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{quote, Ident, Span, TokenStream, TokenTree};\n+\n+#[proc_macro_attribute]\n+pub fn struct_with_bound(_: TokenStream, _: TokenStream) -> TokenStream {\n+    let crate_ident = TokenTree::Ident(Ident::new(\"crate\", Span::call_site()));\n+    let trait_ident = TokenTree::Ident(Ident::new(\"MyTrait\", Span::call_site()));\n+    quote!(\n+        struct Foo<T: $crate_ident::$trait_ident> {}\n+    )\n+}"}, {"sha": "6e50afa075984b181f266a0aea8ca93dee13bcfe", "filename": "src/test/ui/macros/issue-100199.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,16 @@\n+#[issue_100199::struct_with_bound] //~ ERROR cannot find trait `MyTrait` in the crate root\n+struct Foo {}\n+// The above must be on the first line so that it's span points to pos 0.\n+// This used to trigger an ICE because the diagnostic emitter would get\n+// an unexpected dummy span (lo == 0 == hi) while attempting to print a\n+// suggestion.\n+\n+// aux-build: issue-100199.rs\n+\n+extern crate issue_100199;\n+\n+mod traits {\n+    pub trait MyTrait {}\n+}\n+\n+fn main() {}"}, {"sha": "2cb45dc12473ef52311aeb7cfa4bda97292a1a54", "filename": "src/test/ui/macros/issue-100199.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.stderr?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,15 @@\n+error[E0405]: cannot find trait `MyTrait` in the crate root\n+  --> $DIR/issue-100199.rs:1:1\n+   |\n+LL | #[issue_100199::struct_with_bound]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in the crate root\n+   |\n+   = note: this error originates in the attribute macro `issue_100199::struct_with_bound` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider importing this trait\n+   |\n+LL | use traits::MyTrait;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0405`."}, {"sha": "b28dce8810593c8b3b1c41487456a9352245c1b7", "filename": "src/test/ui/pattern/suggest-adding-appropriate-missing-pattern-excluding-comments.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.fixed?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn main() {\n+    match Some(1) { //~ ERROR non-exhaustive patterns: `None` not covered\n+        Some(1) => {}\n+        // hello\n+        Some(_) => {}\n+        None => todo!()\n+    }\n+}"}, {"sha": "42493a6327173f30b51d6ac096454a83dafaf76f", "filename": "src/test/ui/pattern/suggest-adding-appropriate-missing-pattern-excluding-comments.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+fn main() {\n+    match Some(1) { //~ ERROR non-exhaustive patterns: `None` not covered\n+        Some(1) => {}\n+        // hello\n+        Some(_) => {}\n+    }\n+}"}, {"sha": "f3dca9bcb07d1f42b6ca0e3b628cefea64441f43", "filename": "src/test/ui/pattern/suggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,24 @@\n+error[E0004]: non-exhaustive patterns: `None` not covered\n+  --> $DIR/suggest-adding-appropriate-missing-pattern-excluding-comments.rs:4:11\n+   |\n+LL |     match Some(1) {\n+   |           ^^^^^^^ pattern `None` not covered\n+   |\n+note: `Option<i32>` defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL | pub enum Option<T> {\n+   | ------------------\n+...\n+LL |     None,\n+   |     ^^^^ not covered\n+   = note: the matched value is of type `Option<i32>`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n+   |\n+LL ~         Some(_) => {}\n+LL +         None => todo!()\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "3a177419d666ddd48d7e3b20c830b5be1ca0ce72", "filename": "src/test/ui/stability-attribute/auxiliary/default_body.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fdefault_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fdefault_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fdefault_body.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,29 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api, rustc_attrs)]\n+#![stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+pub trait JustTrait {\n+    #[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+    #[rustc_default_body_unstable(feature = \"constant_default_body\", issue = \"none\")]\n+    const CONSTANT: usize = 0;\n+\n+    #[rustc_default_body_unstable(feature = \"fun_default_body\", issue = \"none\")]\n+    #[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+    fn fun() {}\n+}\n+\n+#[rustc_must_implement_one_of(eq, neq)]\n+#[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+pub trait Equal {\n+    #[rustc_default_body_unstable(feature = \"eq_default_body\", issue = \"none\")]\n+    #[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+    fn eq(&self, other: &Self) -> bool {\n+        !self.neq(other)\n+    }\n+\n+    #[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+    fn neq(&self, other: &Self) -> bool {\n+        !self.eq(other)\n+    }\n+}"}, {"sha": "ecb281bccf604d1ed3173ee309f47b5fae92c4f9", "filename": "src/test/ui/stability-attribute/default-body-stability-err.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,19 @@\n+// aux-build:default_body.rs\n+#![crate_type = \"lib\"]\n+\n+extern crate default_body;\n+\n+use default_body::{Equal, JustTrait};\n+\n+struct Type;\n+\n+impl JustTrait for Type {}\n+//~^ ERROR not all trait items implemented, missing: `CONSTANT` [E0046]\n+//~| ERROR not all trait items implemented, missing: `fun` [E0046]\n+\n+impl Equal for Type {\n+    //~^ ERROR not all trait items implemented, missing: `eq` [E0046]\n+    fn neq(&self, other: &Self) -> bool {\n+        false\n+    }\n+}"}, {"sha": "ef666f30fc2a294fd5a3a4b6715aada8adee7f17", "filename": "src/test/ui/stability-attribute/default-body-stability-err.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.stderr?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,38 @@\n+error[E0046]: not all trait items implemented, missing: `CONSTANT`\n+  --> $DIR/default-body-stability-err.rs:10:1\n+   |\n+LL | impl JustTrait for Type {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: default implementation of `CONSTANT` is unstable\n+   = note: use of unstable library feature 'constant_default_body'\n+   = help: add `#![feature(constant_default_body)]` to the crate attributes to enable\n+\n+error[E0046]: not all trait items implemented, missing: `fun`\n+  --> $DIR/default-body-stability-err.rs:10:1\n+   |\n+LL | impl JustTrait for Type {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: default implementation of `fun` is unstable\n+   = note: use of unstable library feature 'fun_default_body'\n+   = help: add `#![feature(fun_default_body)]` to the crate attributes to enable\n+\n+error[E0046]: not all trait items implemented, missing: `eq`\n+  --> $DIR/default-body-stability-err.rs:14:1\n+   |\n+LL | / impl Equal for Type {\n+LL | |\n+LL | |     fn neq(&self, other: &Self) -> bool {\n+LL | |         false\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: default implementation of `eq` is unstable\n+   = note: use of unstable library feature 'eq_default_body'\n+   = help: add `#![feature(eq_default_body)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "bdc7522f48dde92f9fb89f5e88688484be90540a", "filename": "src/test/ui/stability-attribute/default-body-stability-ok-enables.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-enables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-enables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-enables.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// aux-build:default_body.rs\n+#![crate_type = \"lib\"]\n+#![feature(fun_default_body, eq_default_body, constant_default_body)]\n+\n+extern crate default_body;\n+\n+use default_body::{Equal, JustTrait};\n+\n+struct Type;\n+\n+impl JustTrait for Type {}\n+\n+impl Equal for Type {\n+    fn neq(&self, other: &Self) -> bool {\n+        false\n+    }\n+}"}, {"sha": "e1f5c017096ab74261933767b74020b9efaf6866", "filename": "src/test/ui/stability-attribute/default-body-stability-ok-impls.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-impls.rs?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+// aux-build:default_body.rs\n+#![crate_type = \"lib\"]\n+\n+extern crate default_body;\n+\n+use default_body::{Equal, JustTrait};\n+\n+struct Type;\n+\n+impl JustTrait for Type {\n+    const CONSTANT: usize = 1;\n+\n+    fn fun() {}\n+}\n+\n+impl Equal for Type {\n+    fn eq(&self, other: &Self) -> bool {\n+        false\n+    }\n+}"}]}