{"sha": "c1ec32d4f73f21f56675ce3e719e8f778f058935", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZWMzMmQ0ZjczZjIxZjU2Njc1Y2UzZTcxOWU4Zjc3OGYwNTg5MzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-02-18T10:20:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-02-24T23:40:39Z"}, "message": "Recurse to find test files in any subdirectory of the base path.  If a\nsubdirectory contains `compiletest-ignore-dir`, then ignore it.", "tree": {"sha": "19d57e89a7675f0b34f57c74bf010d585c2063fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d57e89a7675f0b34f57c74bf010d585c2063fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1ec32d4f73f21f56675ce3e719e8f778f058935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ec32d4f73f21f56675ce3e719e8f778f058935", "html_url": "https://github.com/rust-lang/rust/commit/c1ec32d4f73f21f56675ce3e719e8f778f058935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1ec32d4f73f21f56675ce3e719e8f778f058935/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c2e5e35a61adfee1fec69f811f79930bfd2c3b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2e5e35a61adfee1fec69f811f79930bfd2c3b9", "html_url": "https://github.com/rust-lang/rust/commit/7c2e5e35a61adfee1fec69f811f79930bfd2c3b9"}], "stats": {"total": 91, "additions": 62, "deletions": 29}, "files": [{"sha": "5818561b52d502dc8f4211ffdb6e11b2f220a57c", "filename": "mk/tests.mk", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c1ec32d4f73f21f56675ce3e719e8f778f058935/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c1ec32d4f73f21f56675ce3e719e8f778f058935/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=c1ec32d4f73f21f56675ce3e719e8f778f058935", "patch": "@@ -458,21 +458,22 @@ $(foreach host,$(CFG_HOST), \\\n # Rules for the compiletest tests (rpass, rfail, etc.)\n ######################################################################\n \n-RPASS_RS := $(wildcard $(S)src/test/run-pass/*.rs)\n-RPASS_VALGRIND_RS := $(wildcard $(S)src/test/run-pass-valgrind/*.rs)\n-RPASS_FULL_RS := $(wildcard $(S)src/test/run-pass-fulldeps/*.rs)\n-RFAIL_FULL_RS := $(wildcard $(S)src/test/run-fail-fulldeps/*.rs)\n-CFAIL_FULL_RS := $(wildcard $(S)src/test/compile-fail-fulldeps/*.rs)\n-RFAIL_RS := $(wildcard $(S)src/test/run-fail/*.rs)\n-CFAIL_RS := $(wildcard $(S)src/test/compile-fail/*.rs)\n-PFAIL_RS := $(wildcard $(S)src/test/parse-fail/*.rs)\n-PRETTY_RS := $(wildcard $(S)src/test/pretty/*.rs)\n-DEBUGINFO_GDB_RS := $(wildcard $(S)src/test/debuginfo/*.rs)\n-DEBUGINFO_LLDB_RS := $(wildcard $(S)src/test/debuginfo/*.rs)\n-CODEGEN_RS := $(wildcard $(S)src/test/codegen/*.rs)\n-CODEGEN_CC := $(wildcard $(S)src/test/codegen/*.cc)\n-CODEGEN_UNITS_RS := $(wildcard $(S)src/test/codegen-units/*.rs)\n-RUSTDOCCK_RS := $(wildcard $(S)src/test/rustdoc/*.rs)\n+RPASS_RS := $(call rwildcard,$(S)src/test/run-pass/,*.rs)\n+RPASS_VALGRIND_RS := $(call rwildcard,$(S)src/test/run-pass-valgrind/,*.rs)\n+RPASS_FULL_RS := $(call rwildcard,$(S)src/test/run-pass-fulldeps/,*.rs)\n+RFAIL_FULL_RS := $(call rwildcard,$(S)src/test/run-fail-fulldeps/,*.rs)\n+CFAIL_FULL_RS := $(call rwildcard,$(S)src/test/compile-fail-fulldeps/,*.rs)\n+RFAIL_RS := $(call rwildcard,$(S)src/test/run-fail/,*.rs)\n+RFAIL_RS := $(call rwildcard,$(S)src/test/run-fail/,*.rs)\n+CFAIL_RS := $(call rwildcard,$(S)src/test/compile-fail/,*.rs)\n+PFAIL_RS := $(call rwildcard,$(S)src/test/parse-fail/,*.rs)\n+PRETTY_RS := $(call rwildcard,$(S)src/test/pretty/,*.rs)\n+DEBUGINFO_GDB_RS := $(call rwildcard,$(S)src/test/debuginfo/,*.rs)\n+DEBUGINFO_LLDB_RS := $(call rwildcard,$(S)src/test/debuginfo/,*.rs)\n+CODEGEN_RS := $(call rwildcard,$(S)src/test/codegen/,*.rs)\n+CODEGEN_CC := $(call rwildcard,$(S)src/test/codegen/,*.cc)\n+CODEGEN_UNITS_RS := $(call rwildcard,$(S)src/test/codegen-units/,*.rs)\n+RUSTDOCCK_RS := $(call rwildcard,$(S)src/test/rustdoc/,*.rs)\n \n RPASS_TESTS := $(RPASS_RS)\n RPASS_VALGRIND_TESTS := $(RPASS_VALGRIND_RS)"}, {"sha": "d57ffe1533c0cb70e339200b35b206b7733ecafa", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c1ec32d4f73f21f56675ce3e719e8f778f058935/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ec32d4f73f21f56675ce3e719e8f778f058935/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=c1ec32d4f73f21f56675ce3e719e8f778f058935", "patch": "@@ -284,6 +284,16 @@ fn collect_tests_from_dir(config: &Config,\n                           relative_dir_path: &Path,\n                           tests: &mut Vec<test::TestDescAndFn>)\n                           -> io::Result<()> {\n+    // Ignore directories that contain a file\n+    // `compiletest-ignore-dir`.\n+    for file in try!(fs::read_dir(dir)) {\n+        let file = try!(file);\n+        if file.file_name() == *\"compiletest-ignore-dir\" {\n+            return Ok(());\n+        }\n+    }\n+\n+    let dirs = try!(fs::read_dir(dir));\n     for file in dirs {\n         let file = try!(file);\n         let file_path = file.path();\n@@ -295,6 +305,13 @@ fn collect_tests_from_dir(config: &Config,\n                 relative_dir: relative_dir_path.to_path_buf(),\n             };\n             tests.push(make_test(config, &paths))\n+        } else if file_path.is_dir() {\n+            let relative_file_path = relative_dir_path.join(file.file_name());\n+            try!(collect_tests_from_dir(config,\n+                                        base,\n+                                        &file_path,\n+                                        &relative_file_path,\n+                                        tests));\n         }\n     }\n     Ok(())\n@@ -338,17 +355,15 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n     }\n }\n \n-pub fn make_test_name(config: &Config, testfile: &Path) -> test::TestName {\n-\n-    // Try to elide redundant long paths\n-    fn shorten(path: &Path) -> String {\n-        let filename = path.file_name().unwrap().to_str();\n-        let p = path.parent().unwrap();\n-        let dir = p.file_name().unwrap().to_str();\n-        format!(\"{}/{}\", dir.unwrap_or(\"\"), filename.unwrap_or(\"\"))\n-    }\n-\n-    test::DynTestName(format!(\"[{}] {}\", config.mode, shorten(testfile)))\n+pub fn make_test_name(config: &Config, testpaths: &TestPaths) -> test::TestName {\n+    // Convert a complete path to something like\n+    //\n+    //    run-pass/foo/bar/baz.rs\n+    let path =\n+        PathBuf::from(config.mode.to_string())\n+        .join(&testpaths.relative_dir)\n+        .join(&testpaths.file.file_name().unwrap());\n+    test::DynTestName(format!(\"[{}] {}\", config.mode, path.display()))\n }\n \n pub fn make_test_closure(config: &Config, testpaths: &TestPaths) -> test::TestFn {"}, {"sha": "1e6e3d3e67944d319cb41873a3cc75e2b36bf7bd", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1ec32d4f73f21f56675ce3e719e8f778f058935/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ec32d4f73f21f56675ce3e719e8f778f058935/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c1ec32d4f73f21f56675ce3e719e8f778f058935", "patch": "@@ -1214,6 +1214,21 @@ fn exec_compiled_test(config: &Config, props: &TestProps,\n     }\n }\n \n+fn compute_aux_test_paths(config: &Config,\n+                          testpaths: &TestPaths,\n+                          rel_ab: &str)\n+                          -> TestPaths\n+{\n+    let abs_ab = config.aux_base.join(rel_ab);\n+    TestPaths {\n+        file: abs_ab,\n+        base: testpaths.base.clone(),\n+        relative_dir: Path::new(rel_ab).parent()\n+                                       .map(|p| p.to_path_buf())\n+                                       .unwrap_or_else(|| PathBuf::new())\n+    }\n+}\n+\n fn compose_and_run_compiler(config: &Config, props: &TestProps,\n                             testpaths: &TestPaths, args: ProcArgs,\n                             input: Option<String>) -> ProcRes {\n@@ -1501,9 +1516,11 @@ fn output_testname(filepath: &Path) -> PathBuf {\n     PathBuf::from(filepath.file_stem().unwrap())\n }\n \n-fn output_base_name(config: &Config, testfile: &Path) -> PathBuf {\n-    config.build_base\n-        .join(&output_testname(testfile))\n+fn output_base_name(config: &Config, testpaths: &TestPaths) -> PathBuf {\n+    let dir = config.build_base.join(&testpaths.relative_dir);\n+    fs::create_dir_all(&dir).unwrap();\n+    dir\n+        .join(&output_testname(&testpaths.file))\n         .with_extension(&config.stage_id)\n }\n "}]}