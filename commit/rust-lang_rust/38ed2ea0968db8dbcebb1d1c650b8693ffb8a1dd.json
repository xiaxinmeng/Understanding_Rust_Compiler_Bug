{"sha": "38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZWQyZWEwOTY4ZGI4ZGJjZWJiMWQxYzY1MGI4NjkzZmZiOGExZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-04T22:02:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-04T22:03:39Z"}, "message": "rustc: Allow consts to refer to other consts", "tree": {"sha": "ad47b45f5b7a8a86bcf698a398f601994c3d0876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad47b45f5b7a8a86bcf698a398f601994c3d0876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd", "html_url": "https://github.com/rust-lang/rust/commit/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad62def6a550e2ac015bdf34bcf25b7a7b4b92c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad62def6a550e2ac015bdf34bcf25b7a7b4b92c", "html_url": "https://github.com/rust-lang/rust/commit/1ad62def6a550e2ac015bdf34bcf25b7a7b4b92c"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "1b0b4a52b409f65e1b93c988a757d44bcf7cd0a4", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd", "patch": "@@ -149,8 +149,8 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         time(time_passes, \"typechecking\",\n              bind typeck::check_crate(ty_cx, impl_map, crate));\n     time(time_passes, \"const checking\",\n-         bind middle::check_const::check_crate(sess, crate, method_map,\n-                                               ty_cx));\n+         bind middle::check_const::check_crate(sess, crate, def_map,\n+                                               method_map, ty_cx));\n \n     if upto == cu_typeck { ret {crate: crate, tcx: some(ty_cx)}; }\n "}, {"sha": "caae792581b78f54025009d80b319c12cbc64457", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd", "patch": "@@ -3,12 +3,12 @@ import syntax::{visit, ast_util};\n import driver::session::session;\n import std::map::hashmap;\n \n-fn check_crate(sess: session, crate: @crate, method_map: typeck::method_map,\n-               tcx: ty::ctxt) {\n+fn check_crate(sess: session, crate: @crate, def_map: resolve::def_map,\n+                method_map: typeck::method_map, tcx: ty::ctxt) {\n     visit::visit_crate(*crate, false, visit::mk_vt(@{\n         visit_item: check_item,\n         visit_pat: check_pat,\n-        visit_expr: bind check_expr(sess, method_map, tcx, _, _, _)\n+        visit_expr: bind check_expr(sess, def_map, method_map, tcx, _, _, _)\n         with *visit::default_visitor()\n     }));\n     sess.abort_if_errors();\n@@ -43,7 +43,8 @@ fn check_pat(p: @pat, &&_is_const: bool, v: visit::vt<bool>) {\n     }\n }\n \n-fn check_expr(sess: session, method_map: typeck::method_map, tcx: ty::ctxt,\n+fn check_expr(sess: session, def_map: resolve::def_map,\n+              method_map: typeck::method_map, tcx: ty::ctxt,\n               e: @expr, &&is_const: bool, v: visit::vt<bool>) {\n     if is_const {\n         alt e.node {\n@@ -72,6 +73,21 @@ fn check_expr(sess: session, method_map: typeck::method_map, tcx: ty::ctxt,\n                               \"` in a constant expression\");\n             }\n           }\n+          expr_path(path) {\n+            alt def_map.find(e.id) {\n+              some(def_const(def_id)) {\n+                if !ast_util::is_local(def_id) {\n+                    sess.span_err(\n+                        e.span, \"paths in constants may only refer to \\\n+                                 crate-local constants\");\n+                }\n+              }\n+              _ {\n+                sess.span_err(\n+                    e.span, \"paths in constants may only refer to constants\");\n+              }\n+            }\n+          }\n           _ {\n             sess.span_err(e.span,\n                           \"constant contains unimplemented expression type\");"}, {"sha": "7cd14b7af3948405aa85560bb809fd71525bd149", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd", "patch": "@@ -4245,6 +4245,28 @@ fn trans_const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n           }\n         }\n       }\n+      ast::expr_path(path) {\n+        alt cx.tcx.def_map.find(e.id) {\n+          some(ast::def_const(def_id)) {\n+            // Don't know how to handle external consts\n+            assert ast_util::is_local(def_id);\n+            alt cx.tcx.items.get(def_id.node) {\n+              ast_map::node_item(@{\n+                node: ast::item_const(_, subexpr), _\n+              }, _) {\n+                // FIXME: Instead of recursing here to regenerate the values\n+                // for other constants, we should just look up the\n+                // already-defined value\n+                trans_const_expr(cx, subexpr)\n+              }\n+              _ {\n+                cx.sess.span_bug(e.span, \"expected item\");\n+              }\n+            }\n+          }\n+          _ { cx.sess.span_bug(e.span, \"expected to find a const def\") }\n+        }\n+      }\n       _ { cx.sess.span_bug(e.span,\n             \"bad constant expression type in trans_const_expr\"); }\n     }"}, {"sha": "4d8afb5d775ab38a3c786dc61d9f431e9d3d0293", "filename": "src/test/run-pass/const-const.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd/src%2Ftest%2Frun-pass%2Fconst-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd/src%2Ftest%2Frun-pass%2Fconst-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-const.rs?ref=38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd", "patch": "@@ -0,0 +1,6 @@\n+const a: int = 1;\n+const b: int = a + 2;\n+\n+fn main() {\n+    assert b == 3;\n+}\n\\ No newline at end of file"}]}