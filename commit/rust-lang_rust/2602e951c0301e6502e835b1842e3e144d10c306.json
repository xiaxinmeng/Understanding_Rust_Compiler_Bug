{"sha": "2602e951c0301e6502e835b1842e3e144d10c306", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MDJlOTUxYzAzMDFlNjUwMmU4MzViMTg0MmUzZTE0NGQxMGMzMDY=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-05-28T05:54:47Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-07-11T08:36:49Z"}, "message": "Handle `read`s on STDIN", "tree": {"sha": "2bb68fac36cb053bb9a4328d0253aed4ba17bff1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bb68fac36cb053bb9a4328d0253aed4ba17bff1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2602e951c0301e6502e835b1842e3e144d10c306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2602e951c0301e6502e835b1842e3e144d10c306", "html_url": "https://github.com/rust-lang/rust/commit/2602e951c0301e6502e835b1842e3e144d10c306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2602e951c0301e6502e835b1842e3e144d10c306/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ade99c3bed390c88685d4971a83d20d18d8097bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ade99c3bed390c88685d4971a83d20d18d8097bf", "html_url": "https://github.com/rust-lang/rust/commit/ade99c3bed390c88685d4971a83d20d18d8097bf"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "8efe8f0ed3fd1de441805b5e1ddd1269a0552b1b", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2602e951c0301e6502e835b1842e3e144d10c306/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2602e951c0301e6502e835b1842e3e144d10c306/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=2602e951c0301e6502e835b1842e3e144d10c306", "patch": "@@ -67,7 +67,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let buf = this.read_scalar(buf)?.not_undef()?;\n                 let count = this.read_scalar(count)?.to_machine_usize(this)?;\n                 let result = if fd == 0 {\n-                    throw_unsup_format!(\"reading from stdin is not implemented\")\n+                    use std::io::{self, Read};\n+\n+                    let mut buffer = String::new();\n+                    let res = io::stdin().read_to_string(&mut buffer);\n+\n+                    match res {\n+                        Ok(bytes) => {\n+                            this.memory.write_bytes(buf, buffer.bytes())?;\n+                            i64::try_from(bytes).unwrap()\n+                        },\n+                        Err(_) => -1,\n+                    }\n                 } else if fd == 1 || fd == 2 {\n                     throw_unsup_format!(\"cannot read from stdout/stderr\")\n                 } else {"}]}