{"sha": "f9379df630c860619813f3a2466f30b4b2c1a60b", "node_id": "C_kwDOAAsO6NoAKGY5Mzc5ZGY2MzBjODYwNjE5ODEzZjNhMjQ2NmYzMGI0YjJjMWE2MGI", "commit": {"author": {"name": "soruh", "email": "mail@soruh.de", "date": "2022-06-22T14:34:01Z"}, "committer": {"name": "soruh", "email": "mail@soruh.de", "date": "2022-06-22T14:34:01Z"}, "message": "add use_trivial_contructor.rs", "tree": {"sha": "bfe817b4fa45c1dddd84364b92825f75f82de1e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfe817b4fa45c1dddd84364b92825f75f82de1e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9379df630c860619813f3a2466f30b4b2c1a60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9379df630c860619813f3a2466f30b4b2c1a60b", "html_url": "https://github.com/rust-lang/rust/commit/f9379df630c860619813f3a2466f30b4b2c1a60b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9379df630c860619813f3a2466f30b4b2c1a60b/comments", "author": {"login": "soruh", "id": 33131839, "node_id": "MDQ6VXNlcjMzMTMxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/33131839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soruh", "html_url": "https://github.com/soruh", "followers_url": "https://api.github.com/users/soruh/followers", "following_url": "https://api.github.com/users/soruh/following{/other_user}", "gists_url": "https://api.github.com/users/soruh/gists{/gist_id}", "starred_url": "https://api.github.com/users/soruh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soruh/subscriptions", "organizations_url": "https://api.github.com/users/soruh/orgs", "repos_url": "https://api.github.com/users/soruh/repos", "events_url": "https://api.github.com/users/soruh/events{/privacy}", "received_events_url": "https://api.github.com/users/soruh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soruh", "id": 33131839, "node_id": "MDQ6VXNlcjMzMTMxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/33131839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soruh", "html_url": "https://github.com/soruh", "followers_url": "https://api.github.com/users/soruh/followers", "following_url": "https://api.github.com/users/soruh/following{/other_user}", "gists_url": "https://api.github.com/users/soruh/gists{/gist_id}", "starred_url": "https://api.github.com/users/soruh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soruh/subscriptions", "organizations_url": "https://api.github.com/users/soruh/orgs", "repos_url": "https://api.github.com/users/soruh/repos", "events_url": "https://api.github.com/users/soruh/events{/privacy}", "received_events_url": "https://api.github.com/users/soruh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f780145c4a66af76bde7b07f24fb8f0bf81e1118", "url": "https://api.github.com/repos/rust-lang/rust/commits/f780145c4a66af76bde7b07f24fb8f0bf81e1118", "html_url": "https://github.com/rust-lang/rust/commit/f780145c4a66af76bde7b07f24fb8f0bf81e1118"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "948670380f63aa4efd628bbe3af8fb5794369079", "filename": "crates/ide-db/src/use_trivial_contructor.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f9379df630c860619813f3a2466f30b4b2c1a60b/crates%2Fide-db%2Fsrc%2Fuse_trivial_contructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9379df630c860619813f3a2466f30b4b2c1a60b/crates%2Fide-db%2Fsrc%2Fuse_trivial_contructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fuse_trivial_contructor.rs?ref=f9379df630c860619813f3a2466f30b4b2c1a60b", "patch": "@@ -0,0 +1,31 @@\n+use hir::StructKind;\n+use syntax::ast;\n+\n+pub fn use_trivial_constructor(\n+    db: &crate::RootDatabase,\n+    path: ast::Path,\n+    ty: &hir::Type,\n+) -> Option<ast::Expr> {\n+    match ty.as_adt() {\n+        Some(hir::Adt::Enum(x)) => {\n+            if let &[variant] = &*x.variants(db) {\n+                if variant.kind(db) == hir::StructKind::Unit {\n+                    let path = ast::make::path_qualified(\n+                        path,\n+                        syntax::ast::make::path_segment(ast::make::name_ref(\n+                            &variant.name(db).to_smol_str(),\n+                        )),\n+                    );\n+\n+                    return Some(syntax::ast::make::expr_path(path));\n+                }\n+            }\n+        }\n+        Some(hir::Adt::Struct(x)) if x.kind(db) == StructKind::Unit => {\n+            return Some(syntax::ast::make::expr_path(path));\n+        }\n+        _ => {}\n+    }\n+\n+    None\n+}"}]}