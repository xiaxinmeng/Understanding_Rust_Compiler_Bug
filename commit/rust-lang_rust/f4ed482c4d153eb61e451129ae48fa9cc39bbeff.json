{"sha": "f4ed482c4d153eb61e451129ae48fa9cc39bbeff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZWQ0ODJjNGQxNTNlYjYxZTQ1MTEyOWFlNDhmYTljYzM5YmJlZmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-23T16:36:10Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-23T16:36:10Z"}, "message": "`print` doesn't add a stack frame, so don't write arguments", "tree": {"sha": "39986e43309ca36a57a18054f85c9542f65d9511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39986e43309ca36a57a18054f85c9542f65d9511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ed482c4d153eb61e451129ae48fa9cc39bbeff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ed482c4d153eb61e451129ae48fa9cc39bbeff", "html_url": "https://github.com/rust-lang/rust/commit/f4ed482c4d153eb61e451129ae48fa9cc39bbeff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ed482c4d153eb61e451129ae48fa9cc39bbeff/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0927829e14686684f96799dd5944190b817145a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0927829e14686684f96799dd5944190b817145a5", "html_url": "https://github.com/rust-lang/rust/commit/0927829e14686684f96799dd5944190b817145a5"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "14f0652a2b57463554521821a4e8dbd8a9f2cf6a", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f4ed482c4d153eb61e451129ae48fa9cc39bbeff/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ed482c4d153eb61e451129ae48fa9cc39bbeff/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=f4ed482c4d153eb61e451129ae48fa9cc39bbeff", "patch": "@@ -167,11 +167,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let arg_ty = self.operand_ty(arg);\n                     args.push((arg_val, arg_ty));\n                 }\n-                self.eval_fn_call_inner(\n+                if self.eval_fn_call_inner(\n                     instance,\n                     destination,\n                     span,\n-                )?;\n+                )? {\n+                    return Ok(());\n+                }\n                 let mut arg_locals = self.frame().mir.args_iter();\n                 match sig.abi {\n                     // closure as closure once\n@@ -217,11 +219,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     args.push((arg_val, arg_ty));\n                 }\n \n-                self.eval_fn_call_inner(\n+                if self.eval_fn_call_inner(\n                     instance,\n                     destination,\n                     span,\n-                )?;\n+                )? {\n+                    return Ok(());\n+                }\n \n                 let mut arg_locals = self.frame().mir.args_iter();\n                 trace!(\"ABI: {:?}\", sig.abi);\n@@ -305,11 +309,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let arg_ty = self.operand_ty(arg);\n                     args.push((arg_val, arg_ty));\n                 }\n-                self.eval_fn_call_inner(\n+                if self.eval_fn_call_inner(\n                     instance,\n                     destination,\n                     span,\n-                )?;\n+                )? {\n+                    return Ok(());\n+                }\n                 let arg_locals = self.frame().mir.args_iter();\n                 match sig.abi {\n                     Abi::Rust => {\n@@ -341,12 +347,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n+    /// Returns Ok(true) when the function was handled completely due to mir not being available\n     fn eval_fn_call_inner(\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         destination: Option<(Lvalue<'tcx>, mir::BasicBlock)>,\n         span: Span,\n-    ) -> EvalResult<'tcx> {\n+    ) -> EvalResult<'tcx, bool> {\n         trace!(\"eval_fn_call_inner: {:#?}, {:#?}\", instance, destination);\n \n         // Only trait methods can have a Self parameter.\n@@ -358,7 +365,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     // let's just ignore all output for now\n                     \"std::io::_print\" => {\n                         self.goto_block(destination.unwrap().1);\n-                        return Ok(());\n+                        return Ok(true);\n                     },\n                     \"std::thread::Builder::new\" => return Err(EvalError::Unimplemented(\"miri does not support threading\".to_owned())),\n                     \"std::env::args\" => return Err(EvalError::Unimplemented(\"miri does not support program arguments\".to_owned())),\n@@ -371,7 +378,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let bool = self.tcx.types.bool;\n                         self.write_primval(lval, PrimVal::from_bool(false), bool)?;\n                         self.goto_block(block);\n-                        return Ok(());\n+                        return Ok(true);\n                     }\n                     _ => {},\n                 }\n@@ -396,7 +403,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             return_to_block,\n         )?;\n \n-        Ok(())\n+        Ok(false)\n     }\n \n     pub fn read_discriminant_value(&self, adt_ptr: Pointer, adt_ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {"}]}