{"sha": "9351f1d0c7763ee8564e096eaa3ed607f089e5db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNTFmMWQwYzc3NjNlZTg1NjRlMDk2ZWFhM2VkNjA3ZjA4OWU1ZGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-15T13:46:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-15T13:46:58Z"}, "message": "Rustup patches to rustc 1.33.0-nightly (96d1334e5 2018-12-14)", "tree": {"sha": "c1ad1f50ceb1346f4d4c84fb1f19702bb66fdd93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1ad1f50ceb1346f4d4c84fb1f19702bb66fdd93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9351f1d0c7763ee8564e096eaa3ed607f089e5db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9351f1d0c7763ee8564e096eaa3ed607f089e5db", "html_url": "https://github.com/rust-lang/rust/commit/9351f1d0c7763ee8564e096eaa3ed607f089e5db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9351f1d0c7763ee8564e096eaa3ed607f089e5db/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d14dc9f1e02131d01906e8dcfa87861da8fe5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d14dc9f1e02131d01906e8dcfa87861da8fe5f2", "html_url": "https://github.com/rust-lang/rust/commit/2d14dc9f1e02131d01906e8dcfa87861da8fe5f2"}], "stats": {"total": 180, "additions": 94, "deletions": 86}, "files": [{"sha": "fa713271f10e3f7440cb643517ab4ac3dc7546e4", "filename": "patches/0001-Disable-stdsimd.patch", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9351f1d0c7763ee8564e096eaa3ed607f089e5db/patches%2F0001-Disable-stdsimd.patch", "raw_url": "https://github.com/rust-lang/rust/raw/9351f1d0c7763ee8564e096eaa3ed607f089e5db/patches%2F0001-Disable-stdsimd.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-Disable-stdsimd.patch?ref=9351f1d0c7763ee8564e096eaa3ed607f089e5db", "patch": "@@ -1,45 +1,54 @@\n-From fd6acae580c2be9e8ba9c32b013df4e9547d936f Mon Sep 17 00:00:00 2001\n+From 8bce7b9601aec46ee7704027dc173257d3e43492 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Mon, 12 Nov 2018 19:08:45 +0100\n+Date: Fri, 14 Dec 2018 13:09:42 +0100\n Subject: [PATCH] Disable stdsimd\n \n ---\n  src/libcore/lib.rs | 2 ++\n- src/libstd/lib.rs  | 2 ++\n- 2 files changed, 4 insertions(+)\n+ src/libstd/lib.rs  | 4 +++-\n+ 2 files changed, 5 insertions(+), 1 deletion(-)\n \n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index c69d444..1b7abad 100644\n+index a51674f..313c173 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -228,6 +228,7 @@ mod nonzero;\n- mod tuple;\n- mod unit;\n- \n+@@ -248,6 +248,7 @@ macro_rules! test_v256 { ($item:item) => {}; }\n+ macro_rules! test_v512 { ($item:item) => {}; }\n+ #[allow(unused_macros)]\n+ macro_rules! vector_impl { ($([$f:ident, $($args:tt)*]),*) => { $($f!($($args)*);)* } }\n +/*\n- // Pull in the `coresimd` crate directly into libcore. This is where all the\n- // architecture-specific (and vendor-specific) intrinsics are defined. AKA\n- // things like SIMD and such. Note that the actual source for all this lies in a\n-@@ -256,3 +257,4 @@ mod coresimd;\n+ #[path = \"../stdsimd/coresimd/mod.rs\"]\n+ #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n+ #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+@@ -255,3 +256,4 @@ mod coresimd;\n+ \n  #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n- #[cfg(not(stage0))]\n  pub use coresimd::arch;\n +*/\n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index f460d10..6110b05 100644\n+index 90c8eaf..95541c3 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -493,6 +493,7 @@ mod memchr;\n+@@ -287,7 +287,7 @@\n+ #![feature(rustc_attrs)]\n+ #![feature(rustc_const_unstable)]\n+ #![feature(std_internals)]\n+-#![feature(stdsimd)]\n++//#![feature(stdsimd)]\n+ #![feature(shrink_to)]\n+ #![feature(slice_concat_ext)]\n+ #![feature(slice_internals)]\n+@@ -503,6 +503,7 @@ mod memchr;\n  // compiler\n  pub mod rt;\n  \n +/*\n  // Pull in the `stdsimd` crate directly into libstd. This is the same as\n  // libcore's arch/simd modules where the source of truth here is in a different\n  // repository, but we pull things in here manually to get it into libstd.\n-@@ -517,6 +518,7 @@ mod coresimd {\n+@@ -526,6 +527,7 @@ mod coresimd {\n  #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n- #[cfg(all(not(stage0), not(test)))]\n+ #[cfg(not(test))]\n  pub use stdsimd::arch;\n +*/\n  "}, {"sha": "cd90c6ef1c1451ea1c4f94174ac9dc239159ab29", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9351f1d0c7763ee8564e096eaa3ed607f089e5db/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/9351f1d0c7763ee8564e096eaa3ed607f089e5db/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=9351f1d0c7763ee8564e096eaa3ed607f089e5db", "patch": "@@ -1,31 +1,31 @@\n-From 7a466d258ff8c795fa52274e0627a39becb3bdf3 Mon Sep 17 00:00:00 2001\n+From a759066c5c2c63d945b23f1e9d35d0dd0489faf1 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Tue, 13 Nov 2018 18:11:23 +0100\n+Date: Sat, 15 Dec 2018 11:28:12 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n  src/libcore/clone.rs         |   4 +-\n- src/libcore/cmp.rs           |   6 +--\n+ src/libcore/cmp.rs           |   6 +-\n  src/libcore/default.rs       |   2 -\n- src/libcore/fmt/num.rs       |   6 +--\n- src/libcore/hash/mod.rs      |  20 -------\n+ src/libcore/fmt/num.rs       |   6 +-\n+ src/libcore/hash/mod.rs      |  20 ------\n  src/libcore/iter/range.rs    |   1 -\n  src/libcore/iter/traits.rs   |   2 +-\n  src/libcore/lib.rs           |   2 -\n  src/libcore/marker.rs        |   4 +-\n  src/libcore/mem.rs           |   2 -\n- src/libcore/num/mod.rs       |  99 +++++++++-------------------------\n- src/libcore/num/wrapping.rs  |  14 ++---\n- src/libcore/ops/arith.rs     |  22 ++++----\n- src/libcore/ops/bit.rs       |  30 ++++-------\n- src/libcore/sync/atomic.rs   |  28 ----------\n- src/libcore/tests/iter.rs    |  15 ------\n- src/libcore/tests/num/mod.rs |  18 -------\n- src/libcore/time.rs          | 126 -------------------------------------------\n+ src/libcore/num/mod.rs       |  99 ++++++++-------------------\n+ src/libcore/num/wrapping.rs  |  14 ++--\n+ src/libcore/ops/arith.rs     |  22 +++---\n+ src/libcore/ops/bit.rs       |  30 +++------\n+ src/libcore/sync/atomic.rs   |  28 --------\n+ src/libcore/tests/iter.rs    |  15 -----\n+ src/libcore/tests/num/mod.rs |  18 -----\n+ src/libcore/time.rs          | 126 -----------------------------------\n  18 files changed, 62 insertions(+), 339 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n-index 46bb580..fcf9fa8 100644\n+index 225ea3d..a7f2637 100644\n --- a/src/libcore/clone.rs\n +++ b/src/libcore/clone.rs\n @@ -172,8 +172,8 @@ mod impls {\n@@ -130,7 +130,7 @@ index 51391fa..140255e 100644\n  impl_Display!(isize, usize: to_u16);\n  #[cfg(target_pointer_width = \"32\")]\n diff --git a/src/libcore/hash/mod.rs b/src/libcore/hash/mod.rs\n-index bbebadd..d6de656 100644\n+index 3e59ee1..3f8d682 100644\n --- a/src/libcore/hash/mod.rs\n +++ b/src/libcore/hash/mod.rs\n @@ -306,12 +306,6 @@ pub trait Hasher {\n@@ -189,7 +189,7 @@ index bbebadd..d6de656 100644\n  \n      #[stable(feature = \"rust1\", since = \"1.0.0\")]\n diff --git a/src/libcore/iter/range.rs b/src/libcore/iter/range.rs\n-index 55addd8..6695cfe 100644\n+index f0fd07b..72a3ec9 100644\n --- a/src/libcore/iter/range.rs\n +++ b/src/libcore/iter/range.rs\n @@ -183,7 +183,6 @@ step_impl_signed!([i64: u64]);\n@@ -201,7 +201,7 @@ index 55addd8..6695cfe 100644\n  macro_rules! range_exact_iter_impl {\n      ($($t:ty)*) => ($(\n diff --git a/src/libcore/iter/traits.rs b/src/libcore/iter/traits.rs\n-index f95f8e7..549d832 100644\n+index 45e5b61..64a3038 100644\n --- a/src/libcore/iter/traits.rs\n +++ b/src/libcore/iter/traits.rs\n @@ -843,7 +843,7 @@ macro_rules! float_sum_product {\n@@ -214,10 +214,10 @@ index f95f8e7..549d832 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 1fec2e5..04266ee 100644\n+index 313c173..4315135 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -152,14 +152,12 @@ mod uint_macros;\n+@@ -154,14 +154,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -233,10 +233,10 @@ index 1fec2e5..04266ee 100644\n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index 662a8dd..856878e 100644\n+index d3d1612..f827f64 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n-@@ -673,8 +673,8 @@ mod copy_impls {\n+@@ -674,8 +674,8 @@ mod copy_impls {\n      }\n  \n      impl_copy! {\n@@ -248,10 +248,10 @@ index 662a8dd..856878e 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index d4b7094..3b5a197 100644\n+index afd9fcb..ad3362c 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n-@@ -162,12 +162,10 @@ pub fn forget<T>(t: T) {\n+@@ -173,12 +173,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n  /// u16 | 2\n  /// u32 | 4\n  /// u64 | 8\n@@ -265,7 +265,7 @@ index d4b7094..3b5a197 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 30b7b45..88a294a 100644\n+index 4acf3a1..b5b3f54 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n @@ -112,7 +112,6 @@ nonzero_integers! {\n@@ -276,7 +276,7 @@ index 30b7b45..88a294a 100644\n      NonZeroUsize(usize);\n  }\n  \n-@@ -2087,18 +2086,6 @@ impl i64 {\n+@@ -2114,18 +2113,6 @@ impl i64 {\n           \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -295,7 +295,7 @@ index 30b7b45..88a294a 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4349,17 +4336,6 @@ impl u64 {\n+@@ -4394,17 +4381,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -313,7 +313,7 @@ index 30b7b45..88a294a 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4443,7 +4419,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4488,7 +4464,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -322,7 +322,7 @@ index 30b7b45..88a294a 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4559,30 +4535,25 @@ macro_rules! rev {\n+@@ -4604,30 +4580,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -357,7 +357,7 @@ index 30b7b45..88a294a 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4594,21 +4565,21 @@ mod ptr_try_from_impls {\n+@@ -4639,21 +4610,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -387,7 +387,7 @@ index 30b7b45..88a294a 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4617,24 +4588,24 @@ mod ptr_try_from_impls {\n+@@ -4662,24 +4633,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -420,7 +420,7 @@ index 30b7b45..88a294a 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4643,24 +4614,20 @@ mod ptr_try_from_impls {\n+@@ -4688,24 +4659,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -449,7 +449,7 @@ index 30b7b45..88a294a 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -4695,7 +4662,7 @@ macro_rules! doit {\n+@@ -4740,7 +4707,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -458,7 +458,7 @@ index 30b7b45..88a294a 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4863,52 +4830,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4931,52 +4898,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -512,7 +512,7 @@ index 30b7b45..88a294a 100644\n  // The C99 standard defines bounds on INTPTR_MIN, INTPTR_MAX, and UINTPTR_MAX\n  // which imply that pointer-sized integers must be at least 16 bits:\n diff --git a/src/libcore/num/wrapping.rs b/src/libcore/num/wrapping.rs\n-index 00134a5..ea15481 100644\n+index 94dd657..fba1319 100644\n --- a/src/libcore/num/wrapping.rs\n +++ b/src/libcore/num/wrapping.rs\n @@ -112,19 +112,17 @@ macro_rules! sh_impl_all {\n@@ -835,14 +835,14 @@ index 3900f36..66b7980 100644\n -shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n diff --git a/src/libcore/sync/atomic.rs b/src/libcore/sync/atomic.rs\n-index 56d3b42..34df75f 100644\n+index 060983a..ade04a5 100644\n --- a/src/libcore/sync/atomic.rs\n +++ b/src/libcore/sync/atomic.rs\n-@@ -1938,34 +1938,6 @@ atomic_int! {\n+@@ -1940,34 +1940,6 @@ atomic_int! {\n      8,\n      u64 AtomicU64 ATOMIC_U64_INIT\n  }\n--#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+-#[cfg(target_has_atomic = \"128\")]\n -atomic_int! {\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -856,7 +856,7 @@ index 56d3b42..34df75f 100644\n -    16,\n -    i128 AtomicI128 ATOMIC_I128_INIT\n -}\n--#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+-#[cfg(target_has_atomic = \"128\")]\n -atomic_int! {\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -874,7 +874,7 @@ index 56d3b42..34df75f 100644\n  macro_rules! ptr_width {\n      () => { 2 }\n diff --git a/src/libcore/tests/iter.rs b/src/libcore/tests/iter.rs\n-index 2476c07..2075670 100644\n+index 4efa013..717bcdc 100644\n --- a/src/libcore/tests/iter.rs\n +++ b/src/libcore/tests/iter.rs\n @@ -224,8 +224,6 @@ fn test_iterator_step_by_nth_overflow() {\n@@ -886,10 +886,11 @@ index 2476c07..2075670 100644\n  \n      #[derive(Clone)]\n      struct Test(Bigger);\n-@@ -1878,19 +1876,6 @@ fn test_step_replace_signed() {\n+@@ -1914,19 +1912,6 @@ fn test_step_replace_signed() {\n+     assert_eq!(y, 5);\n  }\n  \n- #[test]\n+-#[test]\n -fn test_step_replace_no_between() {\n -    let mut x = 4u128;\n -    let y = x.replace_zero();\n@@ -902,15 +903,14 @@ index 2476c07..2075670 100644\n -    assert_eq!(y, 5);\n -}\n -\n--#[test]\n+ #[test]\n  fn test_rev_try_folds() {\n      let f = &|acc, x| i32::checked_add(2*acc, x);\n-     assert_eq!((1..10).rev().try_fold(7, f), (1..10).try_rfold(7, f));\n diff --git a/src/libcore/tests/num/mod.rs b/src/libcore/tests/num/mod.rs\n-index ab96d31..bb5c1d0 100644\n+index 0928f75..34a5296 100644\n --- a/src/libcore/tests/num/mod.rs\n +++ b/src/libcore/tests/num/mod.rs\n-@@ -196,12 +196,10 @@ test_impl_from! { test_boolu8, bool, u8 }\n+@@ -188,12 +188,10 @@ test_impl_from! { test_boolu8, bool, u8 }\n  test_impl_from! { test_boolu16, bool, u16 }\n  test_impl_from! { test_boolu32, bool, u32 }\n  test_impl_from! { test_boolu64, bool, u64 }\n@@ -923,7 +923,7 @@ index ab96d31..bb5c1d0 100644\n  \n  // Signed -> Float\n  test_impl_from! { test_i8f32, i8, f32 }\n-@@ -283,51 +281,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n+@@ -275,51 +273,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n  test_impl_try_from_always_ok! { test_try_u8u16, u8, u16 }\n  test_impl_try_from_always_ok! { test_try_u8u32, u8, u32 }\n  test_impl_try_from_always_ok! { test_try_u8u64, u8, u64 }\n@@ -976,7 +976,7 @@ index ab96d31..bb5c1d0 100644\n  test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n  test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index 938e975..2ba930d 100644\n+index 475bb72..a8a9d42 100644\n --- a/src/libcore/time.rs\n +++ b/src/libcore/time.rs\n @@ -30,7 +30,6 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n@@ -1127,5 +1127,5 @@ index 938e975..2ba930d 100644\n      ///\n      /// # Examples\n -- \n-2.11.0\n+2.17.2 (Apple Git-113)\n "}, {"sha": "ca566deba85e83aef62c3e8968c8602aadfeff35", "filename": "patches/0007-Fix-libstd-building.patch", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9351f1d0c7763ee8564e096eaa3ed607f089e5db/patches%2F0007-Fix-libstd-building.patch", "raw_url": "https://github.com/rust-lang/rust/raw/9351f1d0c7763ee8564e096eaa3ed607f089e5db/patches%2F0007-Fix-libstd-building.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0007-Fix-libstd-building.patch?ref=9351f1d0c7763ee8564e096eaa3ed607f089e5db", "patch": "@@ -1,6 +1,6 @@\n-From d8bb60cc115960702f73f83866cde65dcdcf1cb4 Mon Sep 17 00:00:00 2001\n+From a99af7473c8b334ed6febe97294813298b6a3633 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 17 Nov 2018 11:08:10 +0100\n+Date: Sat, 15 Dec 2018 14:32:15 +0100\n Subject: [PATCH] Fix libstd building\n \n ---\n@@ -12,26 +12,25 @@ Subject: [PATCH] Fix libstd building\n  5 files changed, 1 insertion(+), 49 deletions(-)\n \n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index 6110b05..8b0c897 100644\n+index f3965f3..13e17b1 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -255,7 +255,6 @@\n+@@ -249,14 +249,12 @@\n+ #![feature(cfg_target_thread_local)]\n+ #![feature(cfg_target_vendor)]\n+ #![feature(char_error_internals)]\n+-#![feature(compiler_builtins_lib)]\n+ #![feature(const_int_ops)]\n+ #![feature(const_ip)]\n+ #![feature(const_raw_ptr_deref)]\n  #![feature(const_cstr_unchecked)]\n  #![feature(core_intrinsics)]\n  #![feature(dropck_eyepatch)]\n -#![feature(duration_as_u128)]\n  #![feature(exact_size_is_empty)]\n  #![feature(external_doc)]\n  #![feature(fixed_size_array)]\n-@@ -286,7 +285,6 @@\n- #![feature(rustc_attrs)]\n- #![feature(rustc_const_unstable)]\n- #![feature(std_internals)]\n--#![cfg_attr(not(stage0), feature(stdsimd))]\n- #![feature(shrink_to)]\n- #![feature(slice_concat_ext)]\n- #![feature(slice_internals)]\n-@@ -402,8 +400,6 @@ pub use core::i16;\n+@@ -409,8 +407,6 @@ pub use core::i16;\n  pub use core::i32;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::i64;\n@@ -40,7 +39,7 @@ index 6110b05..8b0c897 100644\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::usize;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -436,8 +432,6 @@ pub use alloc_crate::string;\n+@@ -443,8 +439,6 @@ pub use alloc_crate::string;\n  pub use alloc_crate::vec;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::char;\n@@ -94,14 +93,14 @@ index 3f90c1f..85aab83 100644\n  #[cfg(test)] use fmt;\n  #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n diff --git a/src/libstd/panic.rs b/src/libstd/panic.rs\n-index 4bc18a5..5c87035 100644\n+index 3eacc7a..b518448 100644\n --- a/src/libstd/panic.rs\n +++ b/src/libstd/panic.rs\n @@ -264,9 +264,6 @@ impl RefUnwindSafe for atomic::AtomicI32 {}\n  #[cfg(target_has_atomic = \"64\")]\n  #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n  impl RefUnwindSafe for atomic::AtomicI64 {}\n--#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+-#[cfg(target_has_atomic = \"128\")]\n -#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n -impl RefUnwindSafe for atomic::AtomicI128 {}\n  \n@@ -111,17 +110,17 @@ index 4bc18a5..5c87035 100644\n  #[cfg(target_has_atomic = \"64\")]\n  #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n  impl RefUnwindSafe for atomic::AtomicU64 {}\n--#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+-#[cfg(target_has_atomic = \"128\")]\n -#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n -impl RefUnwindSafe for atomic::AtomicU128 {}\n  \n  #[cfg(target_has_atomic = \"8\")]\n  #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n diff --git a/src/libstd/primitive_docs.rs b/src/libstd/primitive_docs.rs\n-index c2a1612..99824c5 100644\n+index 7c1654f..cc96271 100644\n --- a/src/libstd/primitive_docs.rs\n +++ b/src/libstd/primitive_docs.rs\n-@@ -809,14 +809,6 @@ mod prim_i32 { }\n+@@ -808,14 +808,6 @@ mod prim_i32 { }\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  mod prim_i64 { }\n  \n@@ -136,7 +135,7 @@ index c2a1612..99824c5 100644\n  #[doc(primitive = \"u8\")]\n  //\n  /// The 8-bit unsigned integer type.\n-@@ -849,14 +841,6 @@ mod prim_u32 { }\n+@@ -848,14 +840,6 @@ mod prim_u32 { }\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  mod prim_u64 { }\n  "}]}