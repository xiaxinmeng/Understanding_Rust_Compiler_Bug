{"sha": "0933d914a37c4ab57fda6fe95464d194dab6f80c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MzNkOTE0YTM3YzRhYjU3ZmRhNmZlOTU0NjRkMTk0ZGFiNmY4MGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-03T17:53:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-03T17:55:20Z"}, "message": "Introduce ra_db::fixture fixture module\n\nThe goal here is to share more testing infrastructure between crates.", "tree": {"sha": "50a9dcc872bc9846006d5ea14821c8d18ce6a19d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a9dcc872bc9846006d5ea14821c8d18ce6a19d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0933d914a37c4ab57fda6fe95464d194dab6f80c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0933d914a37c4ab57fda6fe95464d194dab6f80c", "html_url": "https://github.com/rust-lang/rust/commit/0933d914a37c4ab57fda6fe95464d194dab6f80c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0933d914a37c4ab57fda6fe95464d194dab6f80c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2efca2bbe5f4434f9a2522b2b94df873f3563b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2efca2bbe5f4434f9a2522b2b94df873f3563b", "html_url": "https://github.com/rust-lang/rust/commit/ba2efca2bbe5f4434f9a2522b2b94df873f3563b"}], "stats": {"total": 108, "additions": 97, "deletions": 11}, "files": [{"sha": "c96e0869cab3c84e96c0c621eaafd31d91bcb58e", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0933d914a37c4ab57fda6fe95464d194dab6f80c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0933d914a37c4ab57fda6fe95464d194dab6f80c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0933d914a37c4ab57fda6fe95464d194dab6f80c", "patch": "@@ -985,6 +985,7 @@ dependencies = [\n  \"relative-path 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"salsa 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"test_utils 0.1.0\",\n ]\n \n [[package]]"}, {"sha": "bf1f7920c583d8dfe92f2f400f52fa62f6bed961", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=0933d914a37c4ab57fda6fe95464d194dab6f80c", "patch": "@@ -12,3 +12,4 @@ rustc-hash = \"1.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_cfg = { path = \"../ra_cfg\" }\n ra_prof = { path = \"../ra_prof\" }\n+test_utils = { path = \"../test_utils\" }"}, {"sha": "469251fe9aed5ca34db0f5bf67b73af56c139ee6", "filename": "crates/ra_db/src/fixture.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=0933d914a37c4ab57fda6fe95464d194dab6f80c", "patch": "@@ -0,0 +1,40 @@\n+//! FIXME: write short doc here\n+\n+use std::sync::Arc;\n+\n+use ra_cfg::CfgOptions;\n+\n+use crate::{\n+    CrateGraph, Edition, FileId, RelativePathBuf, SourceDatabaseExt, SourceRoot, SourceRootId,\n+};\n+\n+pub const WORKSPACE: SourceRootId = SourceRootId(0);\n+\n+pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n+    fn with_single_file(text: &str) -> (Self, FileId) {\n+        let mut db = Self::default();\n+        let file_id = with_single_file(&mut db, text);\n+        (db, file_id)\n+    }\n+}\n+\n+impl<DB: SourceDatabaseExt + Default + 'static> WithFixture for DB {}\n+\n+fn with_single_file(db: &mut dyn SourceDatabaseExt, text: &str) -> FileId {\n+    let file_id = FileId(0);\n+    let rel_path: RelativePathBuf = \"/main.rs\".into();\n+\n+    let mut source_root = SourceRoot::default();\n+    source_root.insert_file(rel_path.clone(), file_id);\n+\n+    let mut crate_graph = CrateGraph::default();\n+    crate_graph.add_crate_root(file_id, Edition::Edition2018, CfgOptions::default());\n+\n+    db.set_file_text(file_id, Arc::new(text.to_string()));\n+    db.set_file_relative_path(file_id, rel_path);\n+    db.set_file_source_root(file_id, WORKSPACE);\n+    db.set_source_root(WORKSPACE, Arc::new(source_root));\n+    db.set_crate_graph(Arc::new(crate_graph));\n+\n+    file_id\n+}"}, {"sha": "b6bfd531de934029e4c19f81c8110ad0291735f1", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=0933d914a37c4ab57fda6fe95464d194dab6f80c", "patch": "@@ -1,17 +1,18 @@\n //! ra_db defines basic database traits. The concrete DB is defined by ra_ide_api.\n mod cancellation;\n mod input;\n+pub mod fixture;\n \n use std::{panic, sync::Arc};\n \n use ra_prof::profile;\n use ra_syntax::{ast, Parse, SourceFile, TextRange, TextUnit};\n-use relative_path::{RelativePath, RelativePathBuf};\n \n pub use crate::{\n     cancellation::Canceled,\n     input::{CrateGraph, CrateId, Dependency, Edition, FileId, SourceRoot, SourceRootId},\n };\n+pub use relative_path::{RelativePath, RelativePathBuf};\n pub use salsa;\n \n pub trait CheckCanceled {"}, {"sha": "02bd808fc2178975362abc1ee2ca5ff0c9c0fd85", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=0933d914a37c4ab57fda6fe95464d194dab6f80c", "patch": "@@ -15,6 +15,9 @@ pub mod builtin_type;\n pub mod adt;\n pub mod diagnostics;\n \n+#[cfg(test)]\n+mod test_db;\n+\n // FIXME: this should be private\n pub mod nameres;\n "}, {"sha": "0bc36910c3f0c4ff756b663c1f1ebe462491b0b3", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=0933d914a37c4ab57fda6fe95464d194dab6f80c", "patch": "@@ -739,17 +739,18 @@ fn is_macro_rules(path: &Path) -> bool {\n     path.as_ident() == Some(&name::MACRO_RULES)\n }\n \n-#[cfg(never)]\n+#[cfg(test)]\n mod tests {\n-    use ra_db::SourceDatabase;\n-\n-    use super::*;\n-    use crate::{db::DefDatabase, mock::MockDatabase, Crate};\n     use ra_arena::Arena;\n+    use ra_db::{fixture::WithFixture, SourceDatabase};\n     use rustc_hash::FxHashSet;\n \n+    use crate::{db::DefDatabase2, test_db::TestDB};\n+\n+    use super::*;\n+\n     fn do_collect_defs(\n-        db: &impl DefDatabase,\n+        db: &impl DefDatabase2,\n         def_map: CrateDefMap,\n         monitor: MacroStackMonitor,\n     ) -> CrateDefMap {\n@@ -768,12 +769,11 @@ mod tests {\n     }\n \n     fn do_limited_resolve(code: &str, limit: u32, poison_limit: u32) -> CrateDefMap {\n-        let (db, _source_root, _) = MockDatabase::with_single_file(&code);\n-        let crate_id = db.crate_graph().iter().next().unwrap();\n-        let krate = Crate { crate_id };\n+        let (db, _file_id) = TestDB::with_single_file(&code);\n+        let krate = db.crate_graph().iter().next().unwrap();\n \n         let def_map = {\n-            let edition = krate.edition(&db);\n+            let edition = db.crate_graph().edition(krate);\n             let mut modules: Arena<CrateModuleId, ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n             CrateDefMap {"}, {"sha": "67714c68e2e88680da9703bc2e61b8a234fa5a47", "filename": "crates/ra_hir_def/src/test_db.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0933d914a37c4ab57fda6fe95464d194dab6f80c/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs?ref=0933d914a37c4ab57fda6fe95464d194dab6f80c", "patch": "@@ -0,0 +1,40 @@\n+use std::{panic, sync::Arc};\n+\n+use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate};\n+use relative_path::RelativePath;\n+\n+#[salsa::database(\n+    ra_db::SourceDatabaseExtStorage,\n+    ra_db::SourceDatabaseStorage,\n+    hir_expand::db::AstDatabaseStorage,\n+    crate::db::InternDatabaseStorage,\n+    crate::db::DefDatabase2Storage\n+)]\n+#[derive(Debug, Default)]\n+pub struct TestDB {\n+    runtime: salsa::Runtime<TestDB>,\n+}\n+\n+impl salsa::Database for TestDB {\n+    fn salsa_runtime(&self) -> &salsa::Runtime<Self> {\n+        &self.runtime\n+    }\n+}\n+\n+impl panic::RefUnwindSafe for TestDB {}\n+\n+impl FileLoader for TestDB {\n+    fn file_text(&self, file_id: FileId) -> Arc<String> {\n+        FileLoaderDelegate(self).file_text(file_id)\n+    }\n+    fn resolve_relative_path(\n+        &self,\n+        anchor: FileId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_relative_path(anchor, relative_path)\n+    }\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+        FileLoaderDelegate(self).relevant_crates(file_id)\n+    }\n+}"}]}