{"sha": "87e373e82f1791e42d09c1adc9170879304e62cb", "node_id": "C_kwDOAAsO6NoAKDg3ZTM3M2U4MmYxNzkxZTQyZDA5YzFhZGM5MTcwODc5MzA0ZTYyY2I", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-15T10:37:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-15T10:37:14Z"}, "message": "Rollup merge of #98110 - cjgillot:closure-brace, r=Aaron1011\n\nMake `ExprKind::Closure` a struct variant.\n\nSimple refactor since we both need it to introduce additional fields in `ExprKind::Closure`.\n\nr? ``@Aaron1011``", "tree": {"sha": "d563ff456f1b285e0be45b2384e28eb270473317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d563ff456f1b285e0be45b2384e28eb270473317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87e373e82f1791e42d09c1adc9170879304e62cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqbZaCRBK7hj4Ov3rIwAAU+0IAJHWerVdf2QGIvdvI0TTNfMz\nkKQ57oa4eEgB+q92Tez2JAjyZIEJJDn/1lWDgcJ042mgSA6N0H1i6lUYYAwKQQSl\nEFCLF4XhbdxPIFrigY+lHZgpouaAmeqQaynI8Tf/MtlQ6BUvi/M4NJVNbm5rvGeS\n/mQ1vRrqagvpsKXFZ/2GnD4BFpCqBVaX/WDtZuuceD3jEJOqbIN9Kf1faEmAzBIa\ngUI+hv6QV0hjdcugDmV98mlYzxvBhjqG20OOTjQAZZa2nSYaaNiK3Kv0kz7d63FM\nEkiWLS55thiBzxas0PRM6gtqWShoGtYgKO59rUXmFKaOdHsEaMxgDMyPPLLXIBA=\n=twy5\n-----END PGP SIGNATURE-----\n", "payload": "tree d563ff456f1b285e0be45b2384e28eb270473317\nparent 40912e12f1eb35434fc5489adb6ddcb9b976a7e4\nparent 3039cfeb6a24c65ab4b7d25f1c60dc0a5df836ac\nauthor Yuki Okushi <jtitor@2k36.org> 1655289434 +0900\ncommitter GitHub <noreply@github.com> 1655289434 +0900\n\nRollup merge of #98110 - cjgillot:closure-brace, r=Aaron1011\n\nMake `ExprKind::Closure` a struct variant.\n\nSimple refactor since we both need it to introduce additional fields in `ExprKind::Closure`.\n\nr? ``@Aaron1011``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87e373e82f1791e42d09c1adc9170879304e62cb", "html_url": "https://github.com/rust-lang/rust/commit/87e373e82f1791e42d09c1adc9170879304e62cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87e373e82f1791e42d09c1adc9170879304e62cb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "html_url": "https://github.com/rust-lang/rust/commit/40912e12f1eb35434fc5489adb6ddcb9b976a7e4"}, {"sha": "3039cfeb6a24c65ab4b7d25f1c60dc0a5df836ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/3039cfeb6a24c65ab4b7d25f1c60dc0a5df836ac", "html_url": "https://github.com/rust-lang/rust/commit/3039cfeb6a24c65ab4b7d25f1c60dc0a5df836ac"}], "stats": {"total": 467, "additions": 251, "deletions": 216}, "files": [{"sha": "0786ae330e0d2be9fedb50282ef9ccacf1a4f00c", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -577,7 +577,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n \n         // The closure/generator `FnDecl` takes a single (resume) argument of type `input_ty`.\n-        let decl = self.arena.alloc(hir::FnDecl {\n+        let fn_decl = self.arena.alloc(hir::FnDecl {\n             inputs: arena_vec![self; input_ty],\n             output,\n             c_variadic: false,\n@@ -598,7 +598,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n         let params = arena_vec![self; param];\n \n-        let body_id = self.lower_body(move |this| {\n+        let body = self.lower_body(move |this| {\n             this.generator_kind = Some(hir::GeneratorKind::Async(async_gen_kind));\n \n             let old_ctx = this.task_context;\n@@ -609,13 +609,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         });\n \n         // `static |_task_context| -> <ret_ty> { body }`:\n-        let generator_kind = hir::ExprKind::Closure(\n+        let generator_kind = hir::ExprKind::Closure {\n             capture_clause,\n-            decl,\n-            body_id,\n-            self.lower_span(span),\n-            Some(hir::Movability::Static),\n-        );\n+            fn_decl,\n+            body,\n+            fn_decl_span: self.lower_span(span),\n+            movability: Some(hir::Movability::Static),\n+        };\n         let generator = hir::Expr {\n             hir_id: self.lower_node_id(closure_node_id),\n             kind: generator_kind,\n@@ -840,7 +840,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: &Expr,\n         fn_decl_span: Span,\n     ) -> hir::ExprKind<'hir> {\n-        let (body_id, generator_option) = self.with_new_scopes(move |this| {\n+        let (body, generator_option) = self.with_new_scopes(move |this| {\n             let prev = this.current_item;\n             this.current_item = Some(fn_decl_span);\n             let mut generator_kind = None;\n@@ -858,13 +858,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // Lower outside new scope to preserve `is_in_loop_condition`.\n         let fn_decl = self.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n \n-        hir::ExprKind::Closure(\n+        hir::ExprKind::Closure {\n             capture_clause,\n             fn_decl,\n-            body_id,\n-            self.lower_span(fn_decl_span),\n-            generator_option,\n-        )\n+            body,\n+            fn_decl_span: self.lower_span(fn_decl_span),\n+            movability: generator_option,\n+        }\n     }\n \n     fn generator_movability_for_fn(\n@@ -911,7 +911,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let outer_decl =\n             FnDecl { inputs: decl.inputs.clone(), output: FnRetTy::Default(fn_decl_span) };\n \n-        let body_id = self.with_new_scopes(|this| {\n+        let body = self.with_new_scopes(|this| {\n             // FIXME(cramertj): allow `async` non-`move` closures with arguments.\n             if capture_clause == CaptureBy::Ref && !decl.inputs.is_empty() {\n                 struct_span_err!(\n@@ -950,13 +950,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // closure argument types.\n         let fn_decl = self.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n \n-        hir::ExprKind::Closure(\n+        hir::ExprKind::Closure {\n             capture_clause,\n             fn_decl,\n-            body_id,\n-            self.lower_span(fn_decl_span),\n-            None,\n-        )\n+            body,\n+            fn_decl_span: self.lower_span(fn_decl_span),\n+            movability: None,\n+        }\n     }\n \n     /// Destructure the LHS of complex assignments."}, {"sha": "fbc3a8cc088fdb1504652915484730cc03dfae78", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -896,7 +896,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(local_did);\n         let expr = &self.infcx.tcx.hir().expect_expr(hir_id).kind;\n         debug!(\"closure_span: hir_id={:?} expr={:?}\", hir_id, expr);\n-        if let hir::ExprKind::Closure(.., body_id, args_span, _) = expr {\n+        if let hir::ExprKind::Closure { body, fn_decl_span, .. } = expr {\n             for (captured_place, place) in self\n                 .infcx\n                 .tcx\n@@ -909,11 +909,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         if target_place == place.as_ref() =>\n                     {\n                         debug!(\"closure_span: found captured local {:?}\", place);\n-                        let body = self.infcx.tcx.hir().body(*body_id);\n+                        let body = self.infcx.tcx.hir().body(*body);\n                         let generator_kind = body.generator_kind();\n \n                         return Some((\n-                            *args_span,\n+                            *fn_decl_span,\n                             generator_kind,\n                             captured_place.get_capture_kind_span(self.infcx.tcx),\n                             captured_place.get_path_span(self.infcx.tcx),"}, {"sha": "d6b5089712ab4ef1d3cb455af2acc7c0af9968dd", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -311,8 +311,9 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                         // Can't have BrEnv in functions, constants or generators.\n                         bug!(\"BrEnv outside of closure.\");\n                     };\n-                    let hir::ExprKind::Closure(_, _, _, args_span, _) =\n-                        tcx.hir().expect_expr(self.mir_hir_id()).kind else {\n+                    let hir::ExprKind::Closure { fn_decl_span, .. }\n+                        = tcx.hir().expect_expr(self.mir_hir_id()).kind\n+                    else {\n                         bug!(\"Closure is not defined by a closure expr\");\n                     };\n                     let region_name = self.synthesize_region_name();\n@@ -336,7 +337,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     Some(RegionName {\n                         name: region_name,\n                         source: RegionNameSource::SynthesizedFreeEnvRegion(\n-                            args_span,\n+                            fn_decl_span,\n                             note.to_string(),\n                         ),\n                     })\n@@ -683,16 +684,16 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let (return_span, mir_description, hir_ty) = match hir.get(mir_hir_id) {\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure(_, return_ty, body_id, span, _),\n+                kind: hir::ExprKind::Closure { fn_decl, body, fn_decl_span, .. },\n                 ..\n             }) => {\n-                let (mut span, mut hir_ty) = match return_ty.output {\n+                let (mut span, mut hir_ty) = match fn_decl.output {\n                     hir::FnRetTy::DefaultReturn(_) => {\n-                        (tcx.sess.source_map().end_point(*span), None)\n+                        (tcx.sess.source_map().end_point(*fn_decl_span), None)\n                     }\n-                    hir::FnRetTy::Return(hir_ty) => (return_ty.output.span(), Some(hir_ty)),\n+                    hir::FnRetTy::Return(hir_ty) => (fn_decl.output.span(), Some(hir_ty)),\n                 };\n-                let mir_description = match hir.body(*body_id).generator_kind {\n+                let mir_description = match hir.body(*body).generator_kind {\n                     Some(hir::GeneratorKind::Async(gen)) => match gen {\n                         hir::AsyncGeneratorKind::Block => \" of async block\",\n                         hir::AsyncGeneratorKind::Closure => \" of async closure\",\n@@ -822,8 +823,9 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let yield_span = match tcx.hir().get(self.mir_hir_id()) {\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure(_, _, _, span, _), ..\n-            }) => (tcx.sess.source_map().end_point(*span)),\n+                kind: hir::ExprKind::Closure { fn_decl_span, .. },\n+                ..\n+            }) => (tcx.sess.source_map().end_point(*fn_decl_span)),\n             _ => self.body.span,\n         };\n "}, {"sha": "5a06f8eab7ec98e79c9f57a75bc0c0a20bd53f1b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -1652,7 +1652,7 @@ impl Expr<'_> {\n             ExprKind::Let(..) => ExprPrecedence::Let,\n             ExprKind::Loop(..) => ExprPrecedence::Loop,\n             ExprKind::Match(..) => ExprPrecedence::Match,\n-            ExprKind::Closure(..) => ExprPrecedence::Closure,\n+            ExprKind::Closure { .. } => ExprPrecedence::Closure,\n             ExprKind::Block(..) => ExprPrecedence::Block,\n             ExprKind::Assign(..) => ExprPrecedence::Assign,\n             ExprKind::AssignOp(..) => ExprPrecedence::AssignOp,\n@@ -1712,7 +1712,7 @@ impl Expr<'_> {\n             | ExprKind::Tup(..)\n             | ExprKind::If(..)\n             | ExprKind::Match(..)\n-            | ExprKind::Closure(..)\n+            | ExprKind::Closure { .. }\n             | ExprKind::Block(..)\n             | ExprKind::Repeat(..)\n             | ExprKind::Array(..)\n@@ -1795,7 +1795,7 @@ impl Expr<'_> {\n             | ExprKind::Match(..)\n             | ExprKind::MethodCall(..)\n             | ExprKind::Call(..)\n-            | ExprKind::Closure(..)\n+            | ExprKind::Closure { .. }\n             | ExprKind::Block(..)\n             | ExprKind::Repeat(..)\n             | ExprKind::Break(..)\n@@ -1930,7 +1930,13 @@ pub enum ExprKind<'hir> {\n     ///\n     /// This may also be a generator literal or an `async block` as indicated by the\n     /// `Option<Movability>`.\n-    Closure(CaptureBy, &'hir FnDecl<'hir>, BodyId, Span, Option<Movability>),\n+    Closure {\n+        capture_clause: CaptureBy,\n+        fn_decl: &'hir FnDecl<'hir>,\n+        body: BodyId,\n+        fn_decl_span: Span,\n+        movability: Option<Movability>,\n+    },\n     /// A block (e.g., `'label: { ... }`).\n     Block(&'hir Block<'hir>, Option<Label>),\n \n@@ -3456,7 +3462,7 @@ impl<'hir> Node<'hir> {\n                 _ => None,\n             },\n             Node::Expr(e) => match e.kind {\n-                ExprKind::Closure(..) => Some(FnKind::Closure),\n+                ExprKind::Closure { .. } => Some(FnKind::Closure),\n                 _ => None,\n             },\n             _ => None,"}, {"sha": "d1da2519badce44d633ba0299ebaaeaf4b763d6c", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -1168,14 +1168,13 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }\n-        ExprKind::Closure(_, ref function_declaration, body, _fn_decl_span, _gen) => visitor\n-            .visit_fn(\n-                FnKind::Closure,\n-                function_declaration,\n-                body,\n-                expression.span,\n-                expression.hir_id,\n-            ),\n+        ExprKind::Closure {\n+            ref fn_decl,\n+            body,\n+            capture_clause: _,\n+            fn_decl_span: _,\n+            movability: _,\n+        } => visitor.visit_fn(FnKind::Closure, fn_decl, body, expression.span, expression.hir_id),\n         ExprKind::Block(ref block, ref opt_label) => {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);"}, {"sha": "7317ce7335aa5fda4fced425a08af1262ff87283", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -1078,7 +1078,9 @@ impl<'a> State<'a> {\n     // parses as the erroneous construct `if (return {})`, not `if (return) {}`.\n     fn cond_needs_par(expr: &hir::Expr<'_>) -> bool {\n         match expr.kind {\n-            hir::ExprKind::Break(..) | hir::ExprKind::Closure(..) | hir::ExprKind::Ret(..) => true,\n+            hir::ExprKind::Break(..) | hir::ExprKind::Closure { .. } | hir::ExprKind::Ret(..) => {\n+                true\n+            }\n             _ => contains_exterior_struct_lit(expr),\n         }\n     }\n@@ -1455,10 +1457,16 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(expr.span);\n             }\n-            hir::ExprKind::Closure(capture_clause, ref decl, body, _fn_decl_span, _gen) => {\n+            hir::ExprKind::Closure {\n+                capture_clause,\n+                ref fn_decl,\n+                body,\n+                fn_decl_span: _,\n+                movability: _,\n+            } => {\n                 self.print_capture_clause(capture_clause);\n \n-                self.print_closure_params(&decl, body);\n+                self.print_closure_params(&fn_decl, body);\n                 self.space();\n \n                 // This is a bare expression."}, {"sha": "20b9ed9cd7356b92d369152ca9d91aa1461c11e1", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -988,22 +988,24 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n         }\n \n         if let Some(node_ty) = self.opt_node_type(expr.hir_id) {\n-            if let (&ExprKind::Closure(_, decl, body_id, span, _), ty::Closure(_, substs)) =\n-                (&expr.kind, node_ty.kind())\n+            if let (\n+                &ExprKind::Closure { fn_decl, body, fn_decl_span, .. },\n+                ty::Closure(_, substs),\n+            ) = (&expr.kind, node_ty.kind())\n             {\n                 let output = substs.as_closure().sig().output().skip_binder();\n                 if self.generic_arg_contains_target(output.into()) {\n-                    let body = self.infcx.tcx.hir().body(body_id);\n+                    let body = self.infcx.tcx.hir().body(body);\n                     let should_wrap_expr = if matches!(body.value.kind, ExprKind::Block(..)) {\n                         None\n                     } else {\n                         Some(body.value.span.shrink_to_hi())\n                     };\n                     self.update_infer_source(InferSource {\n-                        span,\n+                        span: fn_decl_span,\n                         kind: InferSourceKind::ClosureReturn {\n                             ty: output,\n-                            data: &decl.output,\n+                            data: &fn_decl.output,\n                             should_wrap_expr,\n                         },\n                     })"}, {"sha": "b9596cd10ed972a8f72b5f106e7b236e9a4286e1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -55,7 +55,7 @@ pub fn find_param_with_region<'tcx>(\n \n     // Don't perform this on closures\n     match hir.get(hir_id) {\n-        hir::Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n+        hir::Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n             return None;\n         }\n         _ => {}"}, {"sha": "91ca4ecf3e1329c6a308d02f4655ea4679191402", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -2027,7 +2027,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     fn encode_info_for_expr(&mut self, expr: &hir::Expr<'_>) {\n-        if let hir::ExprKind::Closure(..) = expr.kind {\n+        if let hir::ExprKind::Closure { .. } = expr.kind {\n             self.encode_info_for_closure(expr.hir_id);\n         }\n     }"}, {"sha": "0826cd793755f34dd7c588a7f496a31e47ba223a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -22,7 +22,7 @@ fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {\n         Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })\n         | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })\n         | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),\n-        Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })\n+        Node::Expr(Expr { kind: ExprKind::Closure { fn_decl, .. }, .. })\n         | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {\n             Some(fn_decl)\n         }\n@@ -54,7 +54,7 @@ pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n             kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),\n             ..\n         })\n-        | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),\n+        | Node::Expr(Expr { kind: ExprKind::Closure { body, .. }, .. }) => Some(*body),\n \n         Node::AnonConst(constant) => Some(constant.body),\n \n@@ -285,8 +285,8 @@ impl<'hir> Map<'hir> {\n             }\n             Node::Field(_) => DefKind::Field,\n             Node::Expr(expr) => match expr.kind {\n-                ExprKind::Closure(.., None) => DefKind::Closure,\n-                ExprKind::Closure(.., Some(_)) => DefKind::Generator,\n+                ExprKind::Closure { movability: None, .. } => DefKind::Closure,\n+                ExprKind::Closure { movability: Some(_), .. } => DefKind::Generator,\n                 _ => bug!(\"def_kind: unsupported node: {}\", self.node_to_string(hir_id)),\n             },\n             Node::GenericParam(param) => match param.kind {\n@@ -758,7 +758,7 @@ impl<'hir> Map<'hir> {\n                 Node::Item(_)\n                 | Node::ForeignItem(_)\n                 | Node::TraitItem(_)\n-                | Node::Expr(Expr { kind: ExprKind::Closure(..), .. })\n+                | Node::Expr(Expr { kind: ExprKind::Closure { .. }, .. })\n                 | Node::ImplItem(_) => return Some(hir_id),\n                 // Ignore `return`s on the first iteration\n                 Node::Expr(Expr { kind: ExprKind::Loop(..) | ExprKind::Ret(..), .. })"}, {"sha": "85d9b6c17d222fd396e9f324b5d6c028fe3ebcbc", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -1550,7 +1550,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             Node::Item(&hir::Item { kind: ItemKind::Fn(..), .. }) => {}\n             Node::TraitItem(&hir::TraitItem { kind: TraitItemKind::Fn(..), .. }) => {}\n             Node::ImplItem(&hir::ImplItem { kind: ImplItemKind::Fn(..), .. }) => {}\n-            Node::Expr(&hir::Expr { kind: ExprKind::Closure(..), .. }) => {}\n+            Node::Expr(&hir::Expr { kind: ExprKind::Closure { .. }, .. }) => {}\n             _ => return None,\n         }\n "}, {"sha": "e2399818929123e505d6153741b1b169920038a8", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -68,8 +68,8 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n \n     // Figure out what primary body this item has.\n     let (body_id, return_ty_span, span_with_body) = match tcx.hir().get(id) {\n-        Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, decl, body_id, _, _), .. }) => {\n-            (*body_id, decl.output.span(), None)\n+        Node::Expr(hir::Expr { kind: hir::ExprKind::Closure { fn_decl, body, .. }, .. }) => {\n+            (*body, fn_decl.output.span(), None)\n         }\n         Node::Item(hir::Item {\n             kind: hir::ItemKind::Fn(hir::FnSig { decl, .. }, _, body_id),"}, {"sha": "b5f3cd828a03efd968193203f9d879002c7ae978", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -418,7 +418,7 @@ impl<'tcx> Cx<'tcx> {\n                 }\n             },\n \n-            hir::ExprKind::Closure(..) => {\n+            hir::ExprKind::Closure { .. } => {\n                 let closure_ty = self.typeck_results().expr_ty(expr);\n                 let (def_id, substs, movability) = match *closure_ty.kind() {\n                     ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs), None),"}, {"sha": "8f332ed201d97e1d9749acd954a1822495679f1d", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -2357,7 +2357,7 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         let target = match expr.kind {\n-            hir::ExprKind::Closure(..) => Target::Closure,\n+            hir::ExprKind::Closure { .. } => Target::Closure,\n             _ => Target::Expression,\n         };\n "}, {"sha": "80a263f4cb2dd09486d28737cb8294d5493cc8e5", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -405,7 +405,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n                 }\n                 intravisit::walk_expr(self, expr);\n             }\n-            hir::ExprKind::Closure(..) => {\n+            hir::ExprKind::Closure { .. } => {\n                 // Interesting control flow (for loops can contain labeled\n                 // breaks or continues)\n                 self.add_live_node_for_node(expr.hir_id, ExprNode(expr.span, expr.hir_id));\n@@ -833,7 +833,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n             hir::ExprKind::Field(ref e, _) => self.propagate_through_expr(&e, succ),\n \n-            hir::ExprKind::Closure(..) => {\n+            hir::ExprKind::Closure { .. } => {\n                 debug!(\"{:?} is an ExprKind::Closure\", expr);\n \n                 // the construction of a closure itself is not important,\n@@ -1387,7 +1387,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::AddrOf(..)\n         | hir::ExprKind::Struct(..)\n         | hir::ExprKind::Repeat(..)\n-        | hir::ExprKind::Closure(..)\n+        | hir::ExprKind::Closure { .. }\n         | hir::ExprKind::Path(_)\n         | hir::ExprKind::Yield(..)\n         | hir::ExprKind::Box(..)"}, {"sha": "9cfef26fd0310669ef7f2fc48a022df14f566e3e", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -57,14 +57,14 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n             hir::ExprKind::Loop(ref b, _, source, _) => {\n                 self.with_context(Loop(source), |v| v.visit_block(&b));\n             }\n-            hir::ExprKind::Closure(_, ref function_decl, b, span, movability) => {\n+            hir::ExprKind::Closure { ref fn_decl, body, fn_decl_span, movability, .. } => {\n                 let cx = if let Some(Movability::Static) = movability {\n-                    AsyncClosure(span)\n+                    AsyncClosure(fn_decl_span)\n                 } else {\n-                    Closure(span)\n+                    Closure(fn_decl_span)\n                 };\n-                self.visit_fn_decl(&function_decl);\n-                self.with_context(cx, |v| v.visit_nested_body(b));\n+                self.visit_fn_decl(&fn_decl);\n+                self.with_context(cx, |v| v.visit_nested_body(body));\n             }\n             hir::ExprKind::Block(ref b, Some(_label)) => {\n                 self.with_context(LabeledBlock, |v| v.visit_block(&b));"}, {"sha": "40844b84af0799f6696561dd9304f8a675945a23", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -212,7 +212,7 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n             | ExprKind::Loop(..)\n             | ExprKind::Match(..)\n             | ExprKind::If(..)\n-            | ExprKind::Closure(..)\n+            | ExprKind::Closure { .. }\n             | ExprKind::Assign(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::Field(..)"}, {"sha": "6e622ff031e00101c6202d369729c93d223db981", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -273,7 +273,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                 }\n                 hir::ImplItemKind::TyAlias(_) => {}\n             },\n-            Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(.., body, _, _), .. }) => {\n+            Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { body, .. }, .. }) => {\n                 self.visit_nested_body(body);\n             }\n             // Nothing to recurse on for these"}, {"sha": "97a461272b4687dffd7bf4d9f57387ee5b43961d", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -75,7 +75,7 @@ impl<'tcx> Visitor<'tcx> for CaptureCollector<'_, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure(..) = expr.kind {\n+        if let hir::ExprKind::Closure { .. } = expr.kind {\n             let closure_def_id = self.tcx.hir().local_def_id(expr.hir_id);\n             if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n                 // Every capture of a closure expression is a local in scope,"}, {"sha": "b27c986d0f9da2bc1d0cb9e1bfe929f3ef0c4c08", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -1981,7 +1981,7 @@ fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {\n             match tcx.hir().get(hir_id) {\n                 // Unique types created for closures participate in type privacy checking.\n                 // They have visibilities inherited from the module they are defined in.\n-                Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. })\n+                Node::Expr(hir::Expr { kind: hir::ExprKind::Closure{..}, .. })\n                 // - AST lowering creates dummy `use` items which don't\n                 //   get their entries in the resolver's visibility table.\n                 // - AST lowering also creates opaque type items with inherited visibilities."}, {"sha": "6eb2f2d929d57e11fcf16d2cd8e09f60587fa9cd", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -1360,15 +1360,15 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                     }\n                 }\n             }\n-            hir::ExprKind::Closure(_, ref decl, body, _fn_decl_span, _) => {\n+            hir::ExprKind::Closure { ref fn_decl, body, .. } => {\n                 let id = format!(\"${}\", ex.hir_id);\n \n                 // walk arg and return types\n-                for ty in decl.inputs {\n+                for ty in fn_decl.inputs {\n                     self.visit_ty(ty);\n                 }\n \n-                if let hir::FnRetTy::Return(ref ret_ty) = decl.output {\n+                if let hir::FnRetTy::Return(ref ret_ty) = fn_decl.output {\n                     self.visit_ty(ret_ty);\n                 }\n "}, {"sha": "2f999f5ffad85ac7822c15ca20cdbad8a6748b6e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -1084,11 +1084,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let hir = self.tcx.hir();\n         Some(match node {\n             Node::Expr(&hir::Expr {\n-                kind: hir::ExprKind::Closure(_, ref _decl, id, span, _),\n+                kind: hir::ExprKind::Closure { body, fn_decl_span, .. },\n                 ..\n             }) => (\n-                sm.guess_head_span(span),\n-                hir.body(id)\n+                sm.guess_head_span(fn_decl_span),\n+                hir.body(body)\n                     .params\n                     .iter()\n                     .map(|arg| {"}, {"sha": "7c9ee64a0c2b0007c08493345551a33fcbc686b3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -103,10 +103,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 })\n             }),\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure(_is_move, _, body_id, _, gen_movability),\n+                kind: hir::ExprKind::Closure { body, movability, .. },\n                 ..\n-            }) => self.describe_generator(*body_id).or_else(|| {\n-                Some(if gen_movability.is_some() { \"an async closure\" } else { \"a closure\" })\n+            }) => self.describe_generator(*body).or_else(|| {\n+                Some(if movability.is_some() { \"an async closure\" } else { \"a closure\" })\n             }),\n             hir::Node::Expr(hir::Expr { .. }) => {\n                 let parent_hid = hir.get_parent_node(hir_id);"}, {"sha": "09b73b982a0c143a9e3aeda3016efe56a7bc8e80", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -785,14 +785,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // Get the name of the callable and the arguments to be used in the suggestion.\n         let (snippet, sugg) = match hir.get_if_local(def_id) {\n             Some(hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure(_, decl, _, span, ..),\n+                kind: hir::ExprKind::Closure { fn_decl, fn_decl_span, .. },\n                 ..\n             })) => {\n-                err.span_label(*span, \"consider calling this closure\");\n+                err.span_label(*fn_decl_span, \"consider calling this closure\");\n                 let Some(name) = self.get_closure_name(def_id, err, &msg) else {\n                     return false;\n                 };\n-                let args = decl.inputs.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n+                let args = fn_decl.inputs.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n                 let sugg = format!(\"({})\", args);\n                 (format!(\"{}{}\", name, sugg), sugg)\n             }"}, {"sha": "83a8c5ea0219131336adbd3a13d7ee8790c296ec", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -283,11 +283,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let hir_id = self.tcx.hir().get_parent_node(hir_id);\n         let parent_node = self.tcx.hir().get(hir_id);\n         if let (\n-            hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, _, _, sp, ..), .. }),\n+            hir::Node::Expr(hir::Expr {\n+                kind: hir::ExprKind::Closure { fn_decl_span, .. }, ..\n+            }),\n             hir::ExprKind::Block(..),\n         ) = (parent_node, callee_node)\n         {\n-            let start = sp.shrink_to_lo();\n+            let start = fn_decl_span.shrink_to_lo();\n             let end = callee_span.shrink_to_hi();\n             err.multipart_suggestion(\n                 \"if you meant to create this closure and immediately call it, surround the \\"}, {"sha": "0425e7b074fcf096b66251343b46fb4452bf703e", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -124,7 +124,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n                     ..\n                 }) => Some(header),\n                 // Closures are RustCall, but they tuple their arguments, so shouldn't be checked\n-                Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => None,\n+                Node::Expr(hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => None,\n                 node => bug!(\"Item being checked wasn't a function/closure: {:?}\", node),\n             };\n "}, {"sha": "43fc49c6801041c6600ad444c07a9121de69d400", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -1577,8 +1577,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let parent_id = fcx.tcx.hir().get_parent_node(id);\n         let parent = fcx.tcx.hir().get(parent_id);\n         if let Some(expr) = expression\n-            && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, _, body_id, ..), .. }) = parent\n-            && !matches!(fcx.tcx.hir().get(body_id.hir_id), hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Block(..), .. }))\n+            && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure { body, .. }, .. }) = parent\n+            && !matches!(fcx.tcx.hir().body(*body).value.kind, hir::ExprKind::Block(..))\n         {\n             fcx.suggest_missing_semicolon(&mut err, expr, expected, true);\n         }"}, {"sha": "961bbc426613c5acf1b6921b7058e1338c112252", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -483,7 +483,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let param_parent = self.tcx.hir().get_parent_node(*param_hir_id);\n         let Some(Node::Expr(hir::Expr {\n             hir_id: expr_hir_id,\n-            kind: hir::ExprKind::Closure(_, closure_fn_decl, ..),\n+            kind: hir::ExprKind::Closure { fn_decl: closure_fn_decl, .. },\n             ..\n         })) = self.tcx.hir().find(param_parent) else {\n             return None;"}, {"sha": "dc9d76160c4e95b69c993d9ca07448c3787b7128", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -318,8 +318,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Match(discrim, arms, match_src) => {\n                 self.check_match(expr, &discrim, arms, expected, match_src)\n             }\n-            ExprKind::Closure(capture, decl, body_id, _, gen) => {\n-                self.check_expr_closure(expr, capture, &decl, body_id, gen, expected)\n+            ExprKind::Closure { capture_clause, fn_decl, body, movability, .. } => {\n+                self.check_expr_closure(expr, capture_clause, &fn_decl, body, movability, expected)\n             }\n             ExprKind::Block(body, _) => self.check_block_with_expected(&body, expected),\n             ExprKind::Call(callee, args) => self.check_call(expr, &callee, args, expected),"}, {"sha": "93ca8e2237f1f0780c398d2797ca43ef3aeb8e03", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     continue;\n                 }\n \n-                let is_closure = matches!(arg.kind, ExprKind::Closure(..));\n+                let is_closure = matches!(arg.kind, ExprKind::Closure { .. });\n                 if is_closure != check_closures {\n                     continue;\n                 }\n@@ -1774,10 +1774,10 @@ fn label_fn_like<'tcx>(\n     } else {\n         match tcx.hir().get_if_local(def_id) {\n             Some(hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure(_, _, _, span, ..),\n+                kind: hir::ExprKind::Closure { fn_decl_span, .. },\n                 ..\n             })) => {\n-                let spans: MultiSpan = (*span).into();\n+                let spans: MultiSpan = (*fn_decl_span).into();\n \n                 // Note: We don't point to param spans here because they overlap\n                 // with the closure span itself"}, {"sha": "03d91435e7712c5bb646110a92dcb3461c1c73d8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .join(\", \");\n                 }\n                 Some(Node::Expr(hir::Expr {\n-                    kind: ExprKind::Closure(_, _, body_id, _, _),\n+                    kind: ExprKind::Closure { body: body_id, .. },\n                     span: full_closure_span,\n                     ..\n                 })) => {"}, {"sha": "dbc309b29ff1178e166138f16edb4a817a182257", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -188,7 +188,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::If(..)\n             | ExprKind::Loop(..)\n             | ExprKind::Match(..)\n-            | ExprKind::Closure(..)\n+            | ExprKind::Closure { .. }\n             | ExprKind::Block(..)\n             | ExprKind::Assign(..)\n             | ExprKind::AssignOp(..)\n@@ -444,7 +444,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::Block(..)\n             | ExprKind::Box(..)\n             | ExprKind::Cast(..)\n-            | ExprKind::Closure(..)\n+            | ExprKind::Closure { .. }\n             | ExprKind::ConstBlock(..)\n             | ExprKind::DropTemps(..)\n             | ExprKind::Err"}, {"sha": "9f1368a3e0777d1a65f95b87f24fc097b89937ff", "filename": "compiler/rustc_typeck/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -335,7 +335,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n     match expr.kind {\n         // Manually recurse over closures and inline consts, because they are the only\n         // case of nested bodies that share the parent environment.\n-        hir::ExprKind::Closure(.., body, _, _)\n+        hir::ExprKind::Closure { body, .. }\n         | hir::ExprKind::ConstBlock(hir::AnonConst { body, .. }) => {\n             let body = visitor.tcx.hir().body(body);\n             visitor.visit_body(body);"}, {"sha": "0837d9c4a2024ce65cbee413ddc14c56777e9ff4", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -142,10 +142,10 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         match expr.kind {\n-            hir::ExprKind::Closure(cc, _, body_id, _, _) => {\n+            hir::ExprKind::Closure { capture_clause, body: body_id, .. } => {\n                 let body = self.fcx.tcx.hir().body(body_id);\n                 self.visit_body(body);\n-                self.fcx.analyze_closure(expr.hir_id, expr.span, body_id, body, cc);\n+                self.fcx.analyze_closure(expr.hir_id, expr.span, body_id, body, capture_clause);\n             }\n             hir::ExprKind::ConstBlock(anon_const) => {\n                 let body = self.fcx.tcx.hir().body(anon_const.body);"}, {"sha": "9459cf5f8ca80514ef4929516b2c119d1672aca6", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -262,7 +262,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n         self.fix_index_builtin_expr(e);\n \n         match e.kind {\n-            hir::ExprKind::Closure(_, _, body, _, _) => {\n+            hir::ExprKind::Closure { body, .. } => {\n                 let body = self.fcx.tcx.hir().body(body);\n                 for param in body.params {\n                     self.visit_node_id(e.span, param.hir_id);"}, {"sha": "1f2e6ad86bd6dcaf50c0be2ae8a2059b9ebc77e6", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -295,7 +295,7 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure(..) = expr.kind {\n+        if let hir::ExprKind::Closure { .. } = expr.kind {\n             let def_id = self.tcx.hir().local_def_id(expr.hir_id);\n             self.tcx.ensure().generics_of(def_id);\n             // We do not call `type_of` for closures here as that\n@@ -1566,7 +1566,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 }\n             }\n         }\n-        Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n+        Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n             Some(tcx.typeck_root_def_id(def_id))\n         }\n         Node::Item(item) => match item.kind {\n@@ -1717,7 +1717,9 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     // provide junk type parameter defs - the only place that\n     // cares about anything but the length is instantiation,\n     // and we don't do that for closures.\n-    if let Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(.., gen), .. }) = node {\n+    if let Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { movability: gen, .. }, .. }) =\n+        node\n+    {\n         let dummy_args = if gen.is_some() {\n             &[\"<resume_ty>\", \"<yield_ty>\", \"<return_ty>\", \"<witness>\", \"<upvars>\"][..]\n         } else {\n@@ -1880,7 +1882,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             ))\n         }\n \n-        Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n+        Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n             // Closure signatures are not like other function\n             // signatures and cannot be accessed through `fn_sig`. For\n             // example, a closure signature excludes the `self`\n@@ -2566,9 +2568,9 @@ fn is_foreign_item(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n fn generator_kind(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::GeneratorKind> {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::Expr(&rustc_hir::Expr {\n-            kind: rustc_hir::ExprKind::Closure(_, _, body_id, _, _),\n+            kind: rustc_hir::ExprKind::Closure { body, .. },\n             ..\n-        })) => tcx.hir().body(body_id).generator_kind(),\n+        })) => tcx.hir().body(body).generator_kind(),\n         Some(_) => None,\n         _ => bug!(\"generator_kind applied to non-local def-id {:?}\", def_id),\n     }"}, {"sha": "7011dd6e15c21336c8eb538e14420c1a44f1693e", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -405,7 +405,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::Field(field) => icx.to_ty(field.ty),\n \n-        Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => tcx.typeck(def_id).node_type(hir_id),\n+        Node::Expr(&Expr { kind: ExprKind::Closure{..}, .. }) => tcx.typeck(def_id).node_type(hir_id),\n \n         Node::AnonConst(_) if let Some(param) = tcx.opt_const_param_of(def_id) => {\n             // We defer to `type_of` of the corresponding parameter\n@@ -593,7 +593,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             self.tcx.hir()\n         }\n         fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n-            if let hir::ExprKind::Closure(..) = ex.kind {\n+            if let hir::ExprKind::Closure { .. } = ex.kind {\n                 let def_id = self.tcx.hir().local_def_id(ex.hir_id);\n                 self.check(def_id);\n             }"}, {"sha": "920e3d578c8129d8f26837202ede6454771776eb", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -437,7 +437,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.consume_expr(base);\n             }\n \n-            hir::ExprKind::Closure(..) => {\n+            hir::ExprKind::Closure { .. } => {\n                 self.walk_captures(expr);\n             }\n "}, {"sha": "9acae8d79e70eb8a560d039fe8aaef7d9bbaf536", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -359,7 +359,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Call(..)\n             | hir::ExprKind::Assign(..)\n             | hir::ExprKind::AssignOp(..)\n-            | hir::ExprKind::Closure(..)\n+            | hir::ExprKind::Closure { .. }\n             | hir::ExprKind::Ret(..)\n             | hir::ExprKind::Unary(..)\n             | hir::ExprKind::Yield(..)"}, {"sha": "4b3a04f1255b99465e041ebe27e87bf7538e0b85", "filename": "src/tools/clippy/clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -51,7 +51,7 @@ struct ExVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        if let ExprKind::Closure(_, _, eid, _, _) = expr.kind {\n+        if let ExprKind::Closure { body, .. } = expr.kind {\n             // do not lint if the closure is called using an iterator (see #1141)\n             if_chain! {\n                 if let Some(parent) = get_parent_expr(self.cx, expr);\n@@ -64,7 +64,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            let body = self.cx.tcx.hir().body(eid);\n+            let body = self.cx.tcx.hir().body(body);\n             let ex = &body.value;\n             if let ExprKind::Block(block, _) = ex.kind {\n                 if !body.value.span.from_expansion() && !block.stmts.is_empty() {"}, {"sha": "4e530256321ccbf764449f59c8202dff46210a59", "filename": "src/tools/clippy/clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -51,8 +51,8 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n             if count.ident.name == sym::count;\n             if let ExprKind::MethodCall(filter, [filter_recv, filter_arg], _) = count_recv.kind;\n             if filter.ident.name == sym!(filter);\n-            if let ExprKind::Closure(_, _, body_id, _, _) = filter_arg.kind;\n-            let body = cx.tcx.hir().body(body_id);\n+            if let ExprKind::Closure { body, .. } = filter_arg.kind;\n+            let body = cx.tcx.hir().body(body);\n             if let [param] = body.params;\n             if let PatKind::Binding(_, arg_id, _, _) = strip_pat_refs(param.pat).kind;\n             if let ExprKind::Binary(ref op, l, r) = body.value.kind;"}, {"sha": "527529965a96fc4d8f43df63cc7cfa634fd6e15c", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -498,7 +498,7 @@ fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId,\n         | ExprKind::Loop(..)\n         | ExprKind::Match(..)\n         | ExprKind::Let(..)\n-        | ExprKind::Closure(..)\n+        | ExprKind::Closure{..}\n         | ExprKind::Block(..)\n         | ExprKind::Assign(..)\n         | ExprKind::AssignOp(..)"}, {"sha": "197cac86a57d6d1772c2f44ef50d4cc4dcc2924a", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             return;\n         }\n         let body = match expr.kind {\n-            ExprKind::Closure(_, _, id, _, _) => cx.tcx.hir().body(id),\n+            ExprKind::Closure { body, .. } => cx.tcx.hir().body(body),\n             _ => return,\n         };\n         if body.value.span.from_expansion() {"}, {"sha": "41e1fc4e3c209e6ae15dd4aee4ccedd0f966b885", "filename": "src/tools/clippy/clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -158,8 +158,8 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n                 }\n             }\n             if method.ident.name == sym!(flat_map) && args.len() == 2 {\n-                if let ExprKind::Closure(_, _, body_id, _, _) = args[1].kind {\n-                    let body = cx.tcx.hir().body(body_id);\n+                if let ExprKind::Closure { body, .. } = args[1].kind {\n+                    let body = cx.tcx.hir().body(body);\n                     return is_infinite(cx, &body.value);\n                 }\n             }"}, {"sha": "0b6d9adb553e48f0baa6594fc3c0256ad3b43b6c", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -369,8 +369,8 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     self.visit_expr(expr);\n                 }\n             },\n-            ExprKind::Closure(_, _, body_id, ..) => {\n-                let body = self.cx.tcx.hir().body(body_id);\n+            ExprKind::Closure { body, .. } => {\n+                let body = self.cx.tcx.hir().body(body);\n                 self.visit_expr(&body.value);\n             },\n             _ => walk_expr(self, expr),"}, {"sha": "99d214669359532d83c2e4bc56c42d8c34082f60", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -182,7 +182,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             .fold(NeverLoopResult::Otherwise, combine_both),\n         ExprKind::Struct(_, _, None)\n         | ExprKind::Yield(_, _)\n-        | ExprKind::Closure(_, _, _, _, _)\n+        | ExprKind::Closure { .. }\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)\n         | ExprKind::Lit(_)"}, {"sha": "a57159750664fc0eafe052a1fc21724049d4bd0e", "filename": "src/tools/clippy/clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -220,7 +220,7 @@ fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tc\n                 if let Some(e) = e {\n                     self.visit_expr(e);\n                 }\n-            } else if let ExprKind::Closure(_, _, id, _, _) = e.kind {\n+            } else if let ExprKind::Closure { body: id, .. } = e.kind {\n                 if is_res_used(self.cx, self.iter_expr.path, id) {\n                     self.uses_iter = true;\n                 }\n@@ -260,7 +260,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure(_, _, id, _, _) = e.kind {\n+                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n                     self.used_iter = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);\n@@ -307,7 +307,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure(_, _, id, _, _) = e.kind {\n+                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n                     self.used_after = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);"}, {"sha": "d7d8a59215280d8b6ca08ea0d750f599eff20eb4", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -177,8 +177,8 @@ fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>)\n         if let Some(block_expr) = block.expr;\n         if let Some(args) = match_function_call(cx, block_expr, &FUTURE_FROM_GENERATOR);\n         if args.len() == 1;\n-        if let Expr{kind: ExprKind::Closure(_, _, body_id, ..), ..} = args[0];\n-        let closure_body = cx.tcx.hir().body(body_id);\n+        if let Expr{kind: ExprKind::Closure { body, .. }, ..} = args[0];\n+        let closure_body = cx.tcx.hir().body(body);\n         if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {\n             return Some(closure_body);"}, {"sha": "18cfd00376784448e76e91e9272be76f931fbb33", "filename": "src/tools/clippy/clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -88,8 +88,8 @@ fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n         }\n     }\n     if_chain! {\n-        if let ExprKind::Closure(_, _, body_id, ..) = map_expr.kind;\n-        let body = cx.tcx.hir().body(body_id);\n+        if let ExprKind::Closure { body, .. } = map_expr.kind;\n+        let body = cx.tcx.hir().body(body);\n         if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n         if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;\n         if is_lang_ctor(cx, ok_path, ResultOk);"}, {"sha": "3533de54a1e3d4e140caa0ddcaaba159f0a14d30", "filename": "src/tools/clippy/clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -67,9 +67,9 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             if is_type_diagnostic_item(cx, ty, sym::Option) || is_trait_method(cx, e, sym::Iterator);\n-            if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].kind;\n+            if let hir::ExprKind::Closure { body, .. } = args[1].kind;\n             then {\n-                let closure_body = cx.tcx.hir().body(body_id);\n+                let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);\n                 match closure_body.params[0].pat.kind {\n                     hir::PatKind::Ref(inner, hir::Mutability::Not) => if let hir::PatKind::Binding("}, {"sha": "0c22144104872bd345b4f567cc483d4efb98e356", "filename": "src/tools/clippy/clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -117,12 +117,19 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n             // only work if the method name is `map_err` and there are only 2 arguments (e.g. x.map_err(|_|[1]\n             // Enum::Variant[2]))\n             if method.ident.as_str() == \"map_err\" && args.len() == 2 {\n-                // make sure the first argument is a closure, and grab the CaptureRef, body_id, and body_span fields\n-                if let ExprKind::Closure(capture, _, body_id, body_span, _) = args[1].kind {\n+                // make sure the first argument is a closure, and grab the CaptureRef, BodyId, and fn_decl_span\n+                // fields\n+                if let ExprKind::Closure {\n+                    capture_clause,\n+                    body,\n+                    fn_decl_span,\n+                    ..\n+                } = args[1].kind\n+                {\n                     // check if this is by Reference (meaning there's no move statement)\n-                    if capture == CaptureBy::Ref {\n+                    if capture_clause == CaptureBy::Ref {\n                         // Get the closure body to check the parameters and values\n-                        let closure_body = cx.tcx.hir().body(body_id);\n+                        let closure_body = cx.tcx.hir().body(body);\n                         // make sure there's only one parameter (`|_|`)\n                         if closure_body.params.len() == 1 {\n                             // make sure that parameter is the wild token (`_`)\n@@ -132,7 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n                                 span_lint_and_help(\n                                     cx,\n                                     MAP_ERR_IGNORE,\n-                                    body_span,\n+                                    fn_decl_span,\n                                     \"`map_err(|_|...` wildcard pattern discards the original error\",\n                                     None,\n                                     \"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\","}, {"sha": "663246b4c8622f69a9ff4f4399eed77b31215d24", "filename": "src/tools/clippy/clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -169,12 +169,12 @@ fn unit_closure<'tcx>(\n     expr: &hir::Expr<'_>,\n ) -> Option<(&'tcx hir::Param<'tcx>, &'tcx hir::Expr<'tcx>)> {\n     if_chain! {\n-        if let hir::ExprKind::Closure(_, decl, inner_expr_id, _, _) = expr.kind;\n-        let body = cx.tcx.hir().body(inner_expr_id);\n+        if let hir::ExprKind::Closure { fn_decl, body, .. } = expr.kind;\n+        let body = cx.tcx.hir().body(body);\n         let body_expr = &body.value;\n-        if decl.inputs.len() == 1;\n+        if fn_decl.inputs.len() == 1;\n         if is_unit_expression(cx, body_expr);\n-        if let Some(binding) = iter_input_pats(decl, body).next();\n+        if let Some(binding) = iter_input_pats(fn_decl, body).next();\n         then {\n             return Some((binding, body_expr));\n         }"}, {"sha": "9df2db45dcf834eb5c6a3a186c8c9c6026286c4e", "filename": "src/tools/clippy/clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -177,7 +177,7 @@ fn sugg_with_curlies<'a>(\n \n     let (mut cbrace_start, mut cbrace_end) = (String::new(), String::new());\n     if let Some(parent_expr) = get_parent_expr(cx, match_expr) {\n-        if let ExprKind::Closure(..) = parent_expr.kind {\n+        if let ExprKind::Closure { .. } = parent_expr.kind {\n             cbrace_end = format!(\"\\n{}}}\", indent);\n             // Fix body indent due to the closure\n             indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));"}, {"sha": "dcaf6f865de3677d78bb18a2164863f8c178650d", "filename": "src/tools/clippy/clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -305,7 +305,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n             ExprKind::Break(_, _) |\n             ExprKind::Cast(_, _) |\n             // Don't want to check the closure itself, only invocation, which is covered by MethodCall\n-            ExprKind::Closure(_, _, _, _, _) |\n+            ExprKind::Closure { .. } |\n             ExprKind::ConstBlock(_) |\n             ExprKind::Continue(_) |\n             ExprKind::DropTemps(_) |"}, {"sha": "d31b736982b34715f308e2d9f6d72f8f0d6ca1cb", "filename": "src/tools/clippy/clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -150,11 +150,11 @@ pub(crate) trait BindInsteadOfMap {\n         }\n \n         match arg.kind {\n-            hir::ExprKind::Closure(_, _, body_id, closure_args_span, _) => {\n-                let closure_body = cx.tcx.hir().body(body_id);\n+            hir::ExprKind::Closure { body, fn_decl_span, .. } => {\n+                let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);\n \n-                if Self::lint_closure_autofixable(cx, expr, recv, closure_expr, closure_args_span) {\n+                if Self::lint_closure_autofixable(cx, expr, recv, closure_expr, fn_decl_span) {\n                     true\n                 } else {\n                     Self::lint_closure(cx, expr, closure_expr)"}, {"sha": "3efccd703a651e874f39303271f290347bb70a10", "filename": "src/tools/clippy/clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -22,8 +22,8 @@ fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Sy\n         hir::ExprKind::Path(QPath::Resolved(_, segments)) => {\n             segments.segments.last().unwrap().ident.name == method_name\n         },\n-        hir::ExprKind::Closure(_, _, c, _, _) => {\n-            let body = cx.tcx.hir().body(*c);\n+        hir::ExprKind::Closure { body, .. } => {\n+            let body = cx.tcx.hir().body(*body);\n             let closure_expr = peel_blocks(&body.value);\n             let arg_id = body.params[0].pat.hir_id;\n             match closure_expr.kind {\n@@ -106,7 +106,7 @@ pub(super) fn check<'tcx>(\n             if is_trait_method(cx, map_recv, sym::Iterator);\n \n             // filter(|x| ...is_some())...\n-            if let ExprKind::Closure(_, _, filter_body_id, ..) = filter_arg.kind;\n+            if let ExprKind::Closure { body: filter_body_id, .. } = filter_arg.kind;\n             let filter_body = cx.tcx.hir().body(filter_body_id);\n             if let [filter_param] = filter_body.params;\n             // optional ref pattern: `filter(|&x| ..)`\n@@ -129,7 +129,7 @@ pub(super) fn check<'tcx>(\n             if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n \n             // ...map(|x| ...unwrap())\n-            if let ExprKind::Closure(_, _, map_body_id, ..) = map_arg.kind;\n+            if let ExprKind::Closure { body: map_body_id, .. } = map_arg.kind;\n             let map_body = cx.tcx.hir().body(map_body_id);\n             if let [map_param] = map_body.params;\n             if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;"}, {"sha": "912499bf96b94457d603aff4131c8791f22a2b0d", "filename": "src/tools/clippy/clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -51,8 +51,8 @@ pub(super) fn check<'tcx>(\n             .map_or(false, |fun_def_id| {\n                 deref_aliases.iter().any(|path| match_def_path(cx, fun_def_id, path))\n             }),\n-        hir::ExprKind::Closure(_, _, body_id, _, _) => {\n-            let closure_body = cx.tcx.hir().body(body_id);\n+        hir::ExprKind::Closure { body, .. } => {\n+            let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n \n             match &closure_expr.kind {"}, {"sha": "2d71bd6f240fc14bd9ccced4d3f2162d749b1635", "filename": "src/tools/clippy/clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -71,27 +71,26 @@ pub(super) fn check<'tcx>(\n     if is_option {\n         let self_snippet = snippet(cx, recv.span, \"..\");\n         if_chain! {\n-        if let hir::ExprKind::Closure(_, _, id, span, _) = map_arg.kind;\n-            let arg_snippet = snippet(cx, span, \"..\");\n-            let body = cx.tcx.hir().body(id);\n-                if let Some((func, [arg_char])) = reduce_unit_expression(&body.value);\n-                if let Some(id) = path_def_id(cx, func).map(|ctor_id| cx.tcx.parent(ctor_id));\n-                if Some(id) == cx.tcx.lang_items().option_some_variant();\n-                then {\n-                    let func_snippet = snippet(cx, arg_char.span, \"..\");\n-                    let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n-                       `map(..)` instead\";\n-                    return span_lint_and_sugg(\n-                        cx,\n-                        OPTION_MAP_OR_NONE,\n-                        expr.span,\n-                        msg,\n-                        \"try using `map` instead\",\n-                        format!(\"{0}.map({1} {2})\", self_snippet, arg_snippet,func_snippet),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-\n+            if let hir::ExprKind::Closure { body, fn_decl_span, .. } = map_arg.kind;\n+            let arg_snippet = snippet(cx, fn_decl_span, \"..\");\n+            let body = cx.tcx.hir().body(body);\n+            if let Some((func, [arg_char])) = reduce_unit_expression(&body.value);\n+            if let Some(id) = path_def_id(cx, func).map(|ctor_id| cx.tcx.parent(ctor_id));\n+            if Some(id) == cx.tcx.lang_items().option_some_variant();\n+            then {\n+                let func_snippet = snippet(cx, arg_char.span, \"..\");\n+                let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n+                   `map(..)` instead\";\n+                return span_lint_and_sugg(\n+                    cx,\n+                    OPTION_MAP_OR_NONE,\n+                    expr.span,\n+                    msg,\n+                    \"try using `map` instead\",\n+                    format!(\"{0}.map({1} {2})\", self_snippet, arg_snippet,func_snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n         }\n \n         let func_snippet = snippet(cx, map_arg.span, \"..\");"}, {"sha": "b11f4531a912c006c27e04bd2bf7d6bdd6155a26", "filename": "src/tools/clippy/clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -41,8 +41,8 @@ pub(super) fn check<'tcx>(\n             let mut applicability = Applicability::MachineApplicable;\n             let any_search_snippet = if_chain! {\n                 if search_method == \"find\";\n-                if let hir::ExprKind::Closure(_, _, body_id, ..) = search_arg.kind;\n-                let closure_body = cx.tcx.hir().body(body_id);\n+                if let hir::ExprKind::Closure { body, .. } = search_arg.kind;\n+                let closure_body = cx.tcx.hir().body(body);\n                 if let Some(closure_arg) = closure_body.params.get(0);\n                 then {\n                     if let hir::PatKind::Ref(..) = closure_arg.pat.kind {"}, {"sha": "a405467f5e8af3e55f3b9a4209ec559f2615c163", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -18,8 +18,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n         return;\n     }\n \n-    if let hir::ExprKind::Closure(_, _, body_id, ..) = arg.kind {\n-        let body = cx.tcx.hir().body(body_id);\n+    if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+        let body = cx.tcx.hir().body(body);\n         let arg_id = body.params[0].pat.hir_id;\n         let mutates_arg =\n             mutated_variables(&body.value, cx).map_or(true, |used_mutably| used_mutably.contains(&arg_id));"}, {"sha": "913c4dbedc30113a2d193798954df144ca7d271c", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -29,8 +29,8 @@ pub(super) fn check(\n     ) {\n         if_chain! {\n             // Extract the body of the closure passed to fold\n-            if let hir::ExprKind::Closure(_, _, body_id, _, _) = acc.kind;\n-            let closure_body = cx.tcx.hir().body(body_id);\n+            if let hir::ExprKind::Closure { body, .. } = acc.kind;\n+            let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n \n             // Check if the closure body is of the form `acc <op> some_expr(x)`"}, {"sha": "865f6d0318eb9451c95b0e3bd40b9f667d419c14", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -22,8 +22,8 @@ pub(super) fn check<'tcx>(\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n     if is_option || is_result {\n-        if let hir::ExprKind::Closure(_, _, eid, _, _) = arg.kind {\n-            let body = cx.tcx.hir().body(eid);\n+        if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+            let body = cx.tcx.hir().body(body);\n             let body_expr = &body.value;\n \n             if usage::BindingUsageFinder::are_params_used(cx, body) {"}, {"sha": "c3b850fbb9dcc6823201c6dead09d7ae4a545103", "filename": "src/tools/clippy/clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -112,7 +112,7 @@ struct DivergenceVisitor<'a, 'tcx> {\n impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n     fn maybe_walk_expr(&mut self, e: &'tcx Expr<'_>) {\n         match e.kind {\n-            ExprKind::Closure(..) => {},\n+            ExprKind::Closure { .. } => {},\n             ExprKind::Match(e, arms, _) => {\n                 self.visit_expr(e);\n                 for arm in arms {\n@@ -243,7 +243,7 @@ fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr<'_>) -\n                 walk_expr(vis, expr);\n             }\n         },\n-        ExprKind::Closure(_, _, _, _, _) => {\n+        ExprKind::Closure { .. } => {\n             // Either\n             //\n             // * `var` is defined in the closure body, in which case we've reached the top of the enclosing\n@@ -315,7 +315,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n             // We're about to descend a closure. Since we don't know when (or\n             // if) the closure will be evaluated, any reads in it might not\n             // occur here (or ever). Like above, bail to avoid false positives.\n-            ExprKind::Closure(_, _, _, _, _) |\n+            ExprKind::Closure{..} |\n \n             // We want to avoid a false positive when a variable name occurs\n             // only to have its address taken, so we stop here. Technically,"}, {"sha": "48ac695f2acfb67813675b217eb17ea08cba4d33", "filename": "src/tools/clippy/clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -72,8 +72,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessForEach {\n             if has_iter_method(cx, cx.typeck_results().expr_ty(iter_recv)).is_some();\n             // Skip the lint if the body is not block because this is simpler than `for` loop.\n             // e.g. `v.iter().for_each(f)` is simpler and clearer than using `for` loop.\n-            if let ExprKind::Closure(_, _, body_id, ..) = for_each_arg.kind;\n-            let body = cx.tcx.hir().body(body_id);\n+            if let ExprKind::Closure { body, .. } = for_each_arg.kind;\n+            let body = cx.tcx.hir().body(body);\n             if let ExprKind::Block(..) = body.value.kind;\n             then {\n                 let mut ret_collector = RetCollector::default();"}, {"sha": "6598413c77eccc7733f1b21c6649943c5ffa1391", "filename": "src/tools/clippy/clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -116,7 +116,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         return false;\n     }\n     match peel_blocks(expr).kind {\n-        ExprKind::Lit(..) | ExprKind::Closure(..) => true,\n+        ExprKind::Lit(..) | ExprKind::Closure { .. } => true,\n         ExprKind::Path(..) => !has_drop(cx, cx.typeck_results().expr_ty(expr)),\n         ExprKind::Index(a, b) | ExprKind::Binary(_, a, b) => has_no_effect(cx, a) && has_no_effect(cx, b),\n         ExprKind::Array(v) | ExprKind::Tup(v) => v.iter().all(|val| has_no_effect(cx, val)),"}, {"sha": "de5f77f3ad976c025f8bdcf1ec2f1e25842ac71a", "filename": "src/tools/clippy/clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -298,8 +298,8 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n             },\n             ExprKind::Match(expr, arms, _) => self.visit_match(expr, arms),\n             // since analysing the closure is not easy, just set all variables in it to side-effect\n-            ExprKind::Closure(_, _, body_id, _, _) => {\n-                let body = self.tcx.hir().body(body_id);\n+            ExprKind::Closure { body, .. } => {\n+                let body = self.tcx.hir().body(body);\n                 self.visit_body(body);\n                 let vars = std::mem::take(&mut self.ret_vars);\n                 self.add_side_effect(vars);"}, {"sha": "4c2016fe3f723c83233b88850a969ef0afa7389a", "filename": "src/tools/clippy/clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n             if_chain! {\n                 if let hir::StmtKind::Local(local) = w[0].kind;\n                 if let Option::Some(t) = local.init;\n-                if let hir::ExprKind::Closure(..) = t.kind;\n+                if let hir::ExprKind::Closure { .. } = t.kind;\n                 if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind;\n                 if let hir::StmtKind::Semi(second) = w[1].kind;\n                 if let hir::ExprKind::Assign(_, call, _) = second.kind;"}, {"sha": "f58da7ce9b42078b9d48ef7e3dd524db3bf8bcad", "filename": "src/tools/clippy/clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -116,13 +116,13 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n \n fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Span, Option<Span>)> {\n     if_chain! {\n-        if let ExprKind::Closure(_, _fn_decl, body_id, span, _) = arg.kind;\n+        if let ExprKind::Closure { body, fn_decl_span, .. } = arg.kind;\n         if let ty::Closure(_def_id, substs) = &cx.typeck_results().node_type(arg.hir_id).kind();\n         let ret_ty = substs.as_closure().sig().output();\n         let ty = cx.tcx.erase_late_bound_regions(ret_ty);\n         if ty.is_unit();\n         then {\n-            let body = cx.tcx.hir().body(body_id);\n+            let body = cx.tcx.hir().body(body);\n             if_chain! {\n                 if let ExprKind::Block(block, _) = body.value.kind;\n                 if block.expr.is_none();\n@@ -131,9 +131,9 @@ fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Spa\n                 then {\n                     let data = stmt.span.data();\n                     // Make a span out of the semicolon for the help message\n-                    Some((span, Some(data.with_lo(data.hi-BytePos(1)))))\n+                    Some((fn_decl_span, Some(data.with_lo(data.hi-BytePos(1)))))\n                 } else {\n-                    Some((span, None))\n+                    Some((fn_decl_span, None))\n                 }\n             }\n         } else {"}, {"sha": "7d4373b2a57bcfcc6a651d5209c3f89a86c59cee", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -155,7 +155,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n         if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind;\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n-        if let [vec, Expr { kind: ExprKind::Closure(_, _, closure_body_id, _, _), .. }] = args;\n+        if let [vec, Expr { kind: ExprKind::Closure{ body: closure_body_id, .. }, .. }] = args;\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(vec), sym::Vec);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &["}, {"sha": "2c8820eb7e1a1faed0639c47926992c5e8136d2d", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -466,7 +466,13 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 self.expr(scrutinee);\n                 self.slice(arms, |arm| self.arm(arm));\n             },\n-            ExprKind::Closure(capture_by, fn_decl, body_id, _, movability) => {\n+            ExprKind::Closure {\n+                capture_clause,\n+                fn_decl,\n+                body: body_id,\n+                movability,\n+                ..\n+            } => {\n                 let movability = OptionPat::new(movability.map(|m| format!(\"Movability::{m:?}\")));\n \n                 let ret_ty = match fn_decl.output {\n@@ -475,7 +481,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 };\n \n                 bind!(self, fn_decl, body_id);\n-                kind!(\"Closure(CaptureBy::{capture_by:?}, {fn_decl}, {body_id}, _, {movability})\");\n+                kind!(\"Closure(CaptureBy::{capture_clause:?}, {fn_decl}, {body_id}, _, {movability})\");\n                 out!(\"if let {ret_ty} = {fn_decl}.output;\");\n                 self.body(body_id);\n             },"}, {"sha": "730724b95b968277082b2f72c5fed88cc6645b1d", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -198,7 +198,7 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::Let(..)\n                 | ExprKind::If(..)\n                 | ExprKind::Match(..)\n-                | ExprKind::Closure(..)\n+                | ExprKind::Closure { .. }\n                 | ExprKind::Field(..)\n                 | ExprKind::Path(_)\n                 | ExprKind::AddrOf(..)"}, {"sha": "12931c56df619d332a501b2e4f27c288d820fadb", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -622,10 +622,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(e);\n                 self.hash_ty(ty);\n             },\n-            ExprKind::Closure(cap, _, eid, _, _) => {\n-                std::mem::discriminant(&cap).hash(&mut self.s);\n+            ExprKind::Closure {\n+                capture_clause, body, ..\n+            } => {\n+                std::mem::discriminant(&capture_clause).hash(&mut self.s);\n                 // closures inherit TypeckResults\n-                self.hash_expr(&self.cx.tcx.hir().body(eid).value);\n+                self.hash_expr(&self.cx.tcx.hir().body(body).value);\n             },\n             ExprKind::Field(e, ref f) => {\n                 self.hash_expr(e);"}, {"sha": "0cf23ca626c7542186c26b55e7e9fc171f8b8eb6", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -962,7 +962,7 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n                         self.captures.entry(l).and_modify(|e| *e |= cap).or_insert(cap);\n                     }\n                 },\n-                ExprKind::Closure(..) => {\n+                ExprKind::Closure { .. } => {\n                     let closure_id = self.cx.tcx.hir().local_def_id(e.hir_id).to_def_id();\n                     for capture in self.cx.typeck_results().closure_min_captures_flattened(closure_id) {\n                         let local_id = match capture.place.base {\n@@ -1200,7 +1200,7 @@ pub fn get_enclosing_loop_or_closure<'tcx>(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -\n         match node {\n             Node::Expr(\n                 e @ Expr {\n-                    kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n+                    kind: ExprKind::Loop(..) | ExprKind::Closure { .. },\n                     ..\n                 },\n             ) => return Some(e),\n@@ -1693,7 +1693,7 @@ pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'t\n         _,\n         &[\n             Expr {\n-                kind: ExprKind::Closure(_, _, body, _, _),\n+                kind: ExprKind::Closure { body, .. },\n                 ..\n             },\n         ],\n@@ -1780,7 +1780,7 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n     }\n \n     match expr.kind {\n-        ExprKind::Closure(_, _, body_id, _, _) => is_body_identity_function(cx, cx.tcx.hir().body(body_id)),\n+        ExprKind::Closure { body, .. } => is_body_identity_function(cx, cx.tcx.hir().body(body)),\n         _ => path_def_id(cx, expr).map_or(false, |id| match_def_path(cx, id, &paths::CONVERT_IDENTITY)),\n     }\n }"}, {"sha": "4d21ba8bd1d16b2a38081c816e38eb5679862095", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -134,7 +134,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::If(..)\n             | hir::ExprKind::Let(..)\n-            | hir::ExprKind::Closure(..)\n+            | hir::ExprKind::Closure { .. }\n             | hir::ExprKind::Unary(..)\n             | hir::ExprKind::Match(..) => Sugg::MaybeParen(get_snippet(expr.span)),\n             hir::ExprKind::Continue(..)\n@@ -188,7 +188,7 @@ impl<'a> Sugg<'a> {\n         match expr.kind {\n             ast::ExprKind::AddrOf(..)\n             | ast::ExprKind::Box(..)\n-            | ast::ExprKind::Closure(..)\n+            | ast::ExprKind::Closure { .. }\n             | ast::ExprKind::If(..)\n             | ast::ExprKind::Let(..)\n             | ast::ExprKind::Unary(..)\n@@ -790,8 +790,8 @@ pub struct DerefClosure {\n ///\n /// note: this only works on single line immutable closures with exactly one input parameter.\n pub fn deref_closure_args<'tcx>(cx: &LateContext<'_>, closure: &'tcx hir::Expr<'_>) -> Option<DerefClosure> {\n-    if let hir::ExprKind::Closure(_, fn_decl, body_id, ..) = closure.kind {\n-        let closure_body = cx.tcx.hir().body(body_id);\n+    if let hir::ExprKind::Closure { fn_decl, body, .. } = closure.kind {\n+        let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`\n         let closure_arg_is_type_annotated_double_ref = if let TyKind::Rptr(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind"}, {"sha": "3af5dfb62f97e112fb6b8268f3e9f3b263375a78", "filename": "src/tools/clippy/clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e373e82f1791e42d09c1adc9170879304e62cb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs?ref=87e373e82f1791e42d09c1adc9170879304e62cb", "patch": "@@ -185,7 +185,7 @@ pub fn local_used_after_expr(cx: &LateContext<'_>, local_id: HirId, after: &Expr\n             matches!(\n                 node,\n                 Node::Expr(Expr {\n-                    kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n+                    kind: ExprKind::Loop(..) | ExprKind::Closure { .. },\n                     ..\n                 })\n             )"}]}