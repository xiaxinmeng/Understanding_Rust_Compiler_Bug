{"sha": "eac35583d2ffb5ed9e564dee0822c9a244058ee0", "node_id": "C_kwDOAAsO6NoAKGVhYzM1NTgzZDJmZmI1ZWQ5ZTU2NGRlZTA4MjJjOWEyNDQwNThlZTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-04T13:44:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-04T13:44:38Z"}, "message": "Auto merge of #111174 - matthiaskrgr:rollup-ncnqivh, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #110859 (Explicitly reject negative and reservation drop impls)\n - #111020 (Validate resolution for SelfCtor too.)\n - #111024 (Use the full Fingerprint when stringifying Svh)\n - #111027 (Remove `allow(rustc::potential_query_instability)` for `builtin_macros`)\n - #111039 (Encode def span for foreign return-position `impl Trait` in trait)\n - #111070 (Don't suffix `RibKind` variants)\n - #111094 (Add needs-unwind annotations to tests that need stack unwinding)\n - #111103 (correctly recurse when expanding anon consts)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1b4e010fb54cdbf7796655e36da371d6f378bb20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b4e010fb54cdbf7796655e36da371d6f378bb20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eac35583d2ffb5ed9e564dee0822c9a244058ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eac35583d2ffb5ed9e564dee0822c9a244058ee0", "html_url": "https://github.com/rust-lang/rust/commit/eac35583d2ffb5ed9e564dee0822c9a244058ee0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eac35583d2ffb5ed9e564dee0822c9a244058ee0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "html_url": "https://github.com/rust-lang/rust/commit/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c"}, {"sha": "b4d992fec740dc9a6ff42a0500026fe5b25db74a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d992fec740dc9a6ff42a0500026fe5b25db74a", "html_url": "https://github.com/rust-lang/rust/commit/b4d992fec740dc9a6ff42a0500026fe5b25db74a"}], "stats": {"total": 508, "additions": 326, "deletions": 182}, "files": [{"sha": "c368b4a79d3fd4254d7ea0ad188294deb7505c24", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -3165,6 +3165,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_fluent_macro\",\n+ \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_lint_defs\",\n  \"rustc_macros\","}, {"sha": "44012e802aa7bb472e8a864e756e2dd70621daaf", "filename": "compiler/rustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2FCargo.toml?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -14,6 +14,7 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_expand = { path = \"../rustc_expand\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_index = { path = \"../rustc_index\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }"}, {"sha": "bb059a120df37bc0f242c46f70c1842b1c55c7a7", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -2,9 +2,10 @@ use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter};\n use rustc_ast::tokenstream::TokenStream;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n+use rustc_index::bit_set::GrowableBitSet;\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n use rustc_session::lint;\n@@ -20,8 +21,8 @@ use crate::errors;\n pub struct AsmArgs {\n     pub templates: Vec<P<ast::Expr>>,\n     pub operands: Vec<(ast::InlineAsmOperand, Span)>,\n-    named_args: FxHashMap<Symbol, usize>,\n-    reg_args: FxHashSet<usize>,\n+    named_args: FxIndexMap<Symbol, usize>,\n+    reg_args: GrowableBitSet<usize>,\n     pub clobber_abis: Vec<(Symbol, Span)>,\n     options: ast::InlineAsmOptions,\n     pub options_spans: Vec<Span>,\n@@ -56,8 +57,8 @@ pub fn parse_asm_args<'a>(\n     let mut args = AsmArgs {\n         templates: vec![first_template],\n         operands: vec![],\n-        named_args: FxHashMap::default(),\n-        reg_args: FxHashSet::default(),\n+        named_args: Default::default(),\n+        reg_args: Default::default(),\n         clobber_abis: Vec::new(),\n         options: ast::InlineAsmOptions::empty(),\n         options_spans: vec![],\n@@ -213,7 +214,7 @@ pub fn parse_asm_args<'a>(\n         } else {\n             if !args.named_args.is_empty() || !args.reg_args.is_empty() {\n                 let named = args.named_args.values().map(|p| args.operands[*p].1).collect();\n-                let explicit = args.reg_args.iter().map(|p| args.operands[*p].1).collect();\n+                let explicit = args.reg_args.iter().map(|p| args.operands[p].1).collect();\n \n                 diag.emit_err(errors::AsmPositionalAfter { span, named, explicit });\n             }\n@@ -446,8 +447,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n     // Register operands are implicitly used since they are not allowed to be\n     // referenced in the template string.\n     let mut used = vec![false; args.operands.len()];\n-    for pos in &args.reg_args {\n-        used[*pos] = true;\n+    for pos in args.reg_args.iter() {\n+        used[pos] = true;\n     }\n     let named_pos: FxHashMap<usize, Symbol> =\n         args.named_args.iter().map(|(&sym, &idx)| (idx, sym)).collect();\n@@ -581,7 +582,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                         parse::ArgumentIs(idx) | parse::ArgumentImplicitlyIs(idx) => {\n                             if idx >= args.operands.len()\n                                 || named_pos.contains_key(&idx)\n-                                || args.reg_args.contains(&idx)\n+                                || args.reg_args.contains(idx)\n                             {\n                                 let msg = format!(\"invalid reference to argument at index {}\", idx);\n                                 let mut err = ecx.struct_span_err(span, &msg);\n@@ -608,7 +609,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                         args.operands[idx].1,\n                                         \"named arguments cannot be referenced by position\",\n                                     );\n-                                } else if args.reg_args.contains(&idx) {\n+                                } else if args.reg_args.contains(idx) {\n                                     err.span_label(\n                                         args.operands[idx].1,\n                                         \"explicit register argument\","}, {"sha": "c7da61d72b384456a69da66bf8c90dd73b4c561c", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,7 +1,6 @@\n //! This crate contains implementations of built-in macros and other code generating facilities\n //! injecting code into the crate before it is lowered to HIR.\n \n-#![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n #![feature(box_patterns)]"}, {"sha": "9995c08345c2a4eed347111ec9e85349eb495f1a", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -64,6 +64,11 @@ impl Fingerprint {\n         )\n     }\n \n+    #[inline]\n+    pub(crate) fn as_u128(self) -> u128 {\n+        u128::from(self.1) << 64 | u128::from(self.0)\n+    }\n+\n     // Combines two hashes in an order independent way. Make sure this is what\n     // you want.\n     #[inline]"}, {"sha": "71679086f16c385228d7e698b244f5933148bfcc", "filename": "compiler/rustc_data_structures/src/svh.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -23,18 +23,18 @@ impl Svh {\n         Svh { hash }\n     }\n \n-    pub fn as_u64(&self) -> u64 {\n-        self.hash.to_smaller_hash().as_u64()\n+    pub fn as_u128(self) -> u128 {\n+        self.hash.as_u128()\n     }\n \n-    pub fn to_string(&self) -> String {\n-        format!(\"{:016x}\", self.hash.to_smaller_hash())\n+    pub fn to_hex(self) -> String {\n+        format!(\"{:032x}\", self.hash.as_u128())\n     }\n }\n \n impl fmt::Display for Svh {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(&self.to_string())\n+        f.pad(&self.to_hex())\n     }\n }\n "}, {"sha": "eaa75bde6c6c4ea104ef2dcc62655872a54ac459", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -280,3 +280,7 @@ hir_analysis_const_specialize = cannot specialize on const impl with non-const i\n hir_analysis_static_specialize = cannot specialize on `'static` lifetime\n \n hir_analysis_missing_tilde_const = missing `~const` qualifier for specialization\n+\n+hir_analysis_drop_impl_negative = negative `Drop` impls are not supported\n+\n+hir_analysis_drop_impl_reservation = reservation `Drop` impls are not supported"}, {"sha": "bae80807f71b90c74672b129b8ad1b34138f1eb2", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,14 +1,16 @@\n // FIXME(@lcnr): Move this module out of `rustc_hir_analysis`.\n //\n // We don't do any drop checking during hir typeck.\n-use crate::hir::def_id::{DefId, LocalDefId};\n use rustc_errors::{struct_span_err, ErrorGuaranteed};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{self, Predicate, Ty, TyCtxt};\n \n+use crate::errors;\n+use crate::hir::def_id::{DefId, LocalDefId};\n+\n /// This function confirms that the `Drop` implementation identified by\n /// `drop_impl_did` is not any more specialized than the type it is\n /// attached to (Issue #8142).\n@@ -27,6 +29,19 @@ use rustc_middle::ty::{self, Predicate, Ty, TyCtxt};\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), ErrorGuaranteed> {\n+    match tcx.impl_polarity(drop_impl_did) {\n+        ty::ImplPolarity::Positive => {}\n+        ty::ImplPolarity::Negative => {\n+            return Err(tcx.sess.emit_err(errors::DropImplPolarity::Negative {\n+                span: tcx.def_span(drop_impl_did),\n+            }));\n+        }\n+        ty::ImplPolarity::Reservation => {\n+            return Err(tcx.sess.emit_err(errors::DropImplPolarity::Reservation {\n+                span: tcx.def_span(drop_impl_did),\n+            }));\n+        }\n+    }\n     let dtor_self_type = tcx.type_of(drop_impl_did).subst_identity();\n     let dtor_predicates = tcx.predicates_of(drop_impl_did);\n     match dtor_self_type.kind() {"}, {"sha": "c0ee777722e73c431dfcb65364ffd6eaa6f5f289", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -823,3 +823,17 @@ pub(crate) struct MissingTildeConst {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+pub(crate) enum DropImplPolarity {\n+    #[diag(hir_analysis_drop_impl_negative)]\n+    Negative {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[diag(hir_analysis_drop_impl_reservation)]\n+    Reservation {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}"}, {"sha": "e3c688b3e98cbe3a7cb17048e114b8acfcd4a878", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -346,7 +346,7 @@ pub fn finalize_session_directory(sess: &Session, svh: Option<Svh>) {\n     let mut new_sub_dir_name = String::from(&old_sub_dir_name[..=dash_indices[2]]);\n \n     // Append the svh\n-    base_n::push_str(svh.as_u64() as u128, INT_ENCODE_BASE, &mut new_sub_dir_name);\n+    base_n::push_str(svh.as_u128(), INT_ENCODE_BASE, &mut new_sub_dir_name);\n \n     // Create the full path\n     let new_path = incr_comp_session_dir.parent().unwrap().join(new_sub_dir_name);"}, {"sha": "32f9e883fd6bbd44ab378ce3ce0fa56dff1ea6ad", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -837,11 +837,12 @@ fn should_encode_span(def_kind: DefKind) -> bool {\n         | DefKind::AnonConst\n         | DefKind::InlineConst\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Field\n         | DefKind::Impl { .. }\n         | DefKind::Closure\n         | DefKind::Generator => true,\n-        DefKind::ForeignMod | DefKind::ImplTraitPlaceholder | DefKind::GlobalAsm => false,\n+        DefKind::ForeignMod | DefKind::GlobalAsm => false,\n     }\n }\n "}, {"sha": "bfb740ab3560b7a9acd76349ab41abecab2394b6", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -63,7 +63,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                         Err(e) => self.tcx.const_error_with_guaranteed(c.ty(), e),\n                         Ok(Some(bac)) => {\n                             let substs = self.tcx.erase_regions(uv.substs);\n-                            bac.subst(self.tcx, substs)\n+                            let bac = bac.subst(self.tcx, substs);\n+                            return bac.fold_with(self);\n                         }\n                         Ok(None) => c,\n                     },"}, {"sha": "e5b2d342452f33a5edd59a0933af3c1711e39bb3", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -360,16 +360,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ty = self.type_of(adt_did).subst_identity();\n         let mut dtor_candidate = None;\n         self.for_each_relevant_impl(drop_trait, ty, |impl_did| {\n-            let Some(item_id) = self.associated_item_def_ids(impl_did).first() else {\n-                self.sess.delay_span_bug(self.def_span(impl_did), \"Drop impl without drop function\");\n-                return;\n-            };\n-\n             if validate(self, impl_did).is_err() {\n                 // Already `ErrorGuaranteed`, no need to delay a span bug here.\n                 return;\n             }\n \n+            let Some(item_id) = self.associated_item_def_ids(impl_did).first() else {\n+                self.sess.delay_span_bug(self.def_span(impl_did), \"Drop impl without drop function\");\n+                return;\n+            };\n+\n             if let Some((old_item_id, _)) = dtor_candidate {\n                 self.sess\n                     .struct_span_err(self.def_span(item_id), \"multiple drop impls found\")"}, {"sha": "fae7d5495925a3b629a4a756a232e13bc39cca22", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 let sm = self.tcx.sess.source_map();\n                 let def_id = match outer_res {\n-                    Res::SelfTyParam { .. } => {\n+                    Res::SelfTyParam { .. } | Res::SelfCtor(_) => {\n                         err.span_label(span, \"can't use `Self` here\");\n                         return err;\n                     }"}, {"sha": "2db1d83d4fd5815dfb2983dbbc35e053e7bead1e", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -24,7 +24,6 @@ use crate::{ResolutionError, Resolver, Scope, ScopeSet, Segment, ToNameBinding,\n \n use Determinacy::*;\n use Namespace::*;\n-use RibKind::*;\n \n type Visibility = ty::Visibility<LocalDefId>;\n \n@@ -324,8 +323,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             module = match ribs[i].kind {\n-                ModuleRibKind(module) => module,\n-                MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {\n+                RibKind::Module(module) => module,\n+                RibKind::MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {\n                     // If an invocation of this macro created `ident`, give up on `ident`\n                     // and switch to `ident`'s source from the macro definition.\n                     ident.span.remove_mark();\n@@ -1084,7 +1083,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let ribs = &all_ribs[rib_index + 1..];\n \n         // An invalid forward use of a generic parameter from a previous default.\n-        if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {\n+        if let RibKind::ForwardGenericParamBan = all_ribs[rib_index].kind {\n             if let Some(span) = finalize {\n                 let res_error = if rib_ident.name == kw::SelfUpper {\n                     ResolutionError::SelfInGenericParamDefault\n@@ -1104,14 +1103,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 for rib in ribs {\n                     match rib.kind {\n-                        NormalRibKind\n-                        | ClosureOrAsyncRibKind\n-                        | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | ForwardGenericParamBanRibKind => {\n+                        RibKind::Normal\n+                        | RibKind::ClosureOrAsync\n+                        | RibKind::Module(..)\n+                        | RibKind::MacroDefinition(..)\n+                        | RibKind::ForwardGenericParamBan => {\n                             // Nothing to do. Continue.\n                         }\n-                        ItemRibKind(_) | AssocItemRibKind => {\n+                        RibKind::Item(_) | RibKind::AssocItem => {\n                             // This was an attempt to access an upvar inside a\n                             // named function item. This is not allowed, so we\n                             // report an error.\n@@ -1123,7 +1122,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 res_err = Some((span, CannotCaptureDynamicEnvironmentInFnItem));\n                             }\n                         }\n-                        ConstantItemRibKind(_, item) => {\n+                        RibKind::ConstantItem(_, item) => {\n                             // Still doesn't deal with upvars\n                             if let Some(span) = finalize {\n                                 let (span, resolution_error) =\n@@ -1152,13 +1151,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             }\n                             return Res::Err;\n                         }\n-                        ConstParamTyRibKind => {\n+                        RibKind::ConstParamTy => {\n                             if let Some(span) = finalize {\n                                 self.report_error(span, ParamInTyOfConstParam(rib_ident.name));\n                             }\n                             return Res::Err;\n                         }\n-                        InlineAsmSymRibKind => {\n+                        RibKind::InlineAsmSym => {\n                             if let Some(span) = finalize {\n                                 self.report_error(span, InvalidAsmSym);\n                             }\n@@ -1171,21 +1170,24 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     return Res::Err;\n                 }\n             }\n-            Res::Def(DefKind::TyParam, _) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => {\n+            Res::Def(DefKind::TyParam, _)\n+            | Res::SelfTyParam { .. }\n+            | Res::SelfTyAlias { .. }\n+            | Res::SelfCtor(_) => {\n                 for rib in ribs {\n                     let has_generic_params: HasGenericParams = match rib.kind {\n-                        NormalRibKind\n-                        | ClosureOrAsyncRibKind\n-                        | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | InlineAsmSymRibKind\n-                        | AssocItemRibKind\n-                        | ForwardGenericParamBanRibKind => {\n+                        RibKind::Normal\n+                        | RibKind::ClosureOrAsync\n+                        | RibKind::Module(..)\n+                        | RibKind::MacroDefinition(..)\n+                        | RibKind::InlineAsmSym\n+                        | RibKind::AssocItem\n+                        | RibKind::ForwardGenericParamBan => {\n                             // Nothing to do. Continue.\n                             continue;\n                         }\n \n-                        ConstantItemRibKind(trivial, _) => {\n+                        RibKind::ConstantItem(trivial, _) => {\n                             let features = self.tcx.sess.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial == ConstantHasGenerics::Yes\n@@ -1226,8 +1228,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         }\n \n                         // This was an attempt to use a type parameter outside its scope.\n-                        ItemRibKind(has_generic_params) => has_generic_params,\n-                        ConstParamTyRibKind => {\n+                        RibKind::Item(has_generic_params) => has_generic_params,\n+                        RibKind::ConstParamTy => {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n                                     span,\n@@ -1253,15 +1255,15 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Res::Def(DefKind::ConstParam, _) => {\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n-                        NormalRibKind\n-                        | ClosureOrAsyncRibKind\n-                        | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | InlineAsmSymRibKind\n-                        | AssocItemRibKind\n-                        | ForwardGenericParamBanRibKind => continue,\n-\n-                        ConstantItemRibKind(trivial, _) => {\n+                        RibKind::Normal\n+                        | RibKind::ClosureOrAsync\n+                        | RibKind::Module(..)\n+                        | RibKind::MacroDefinition(..)\n+                        | RibKind::InlineAsmSym\n+                        | RibKind::AssocItem\n+                        | RibKind::ForwardGenericParamBan => continue,\n+\n+                        RibKind::ConstantItem(trivial, _) => {\n                             let features = self.tcx.sess.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial == ConstantHasGenerics::Yes\n@@ -1284,8 +1286,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             continue;\n                         }\n \n-                        ItemRibKind(has_generic_params) => has_generic_params,\n-                        ConstParamTyRibKind => {\n+                        RibKind::Item(has_generic_params) => has_generic_params,\n+                        RibKind::ConstParamTy => {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n                                     span,"}, {"sha": "f876b8c7ae0de44480adab713e52fd0db590210c", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 78, "deletions": 80, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -6,8 +6,6 @@\n //! If you wonder why there's no `early.rs`, that's because it's split into three files -\n //! `build_reduced_graph.rs`, `macros.rs` and `imports.rs`.\n \n-use RibKind::*;\n-\n use crate::{path_names_to_string, rustdoc, BindingError, Finalize, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBinding, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n@@ -133,75 +131,75 @@ enum RecordPartialRes {\n #[derive(Copy, Clone, Debug)]\n pub(crate) enum RibKind<'a> {\n     /// No restriction needs to be applied.\n-    NormalRibKind,\n+    Normal,\n \n     /// We passed through an impl or trait and are now in one of its\n     /// methods or associated types. Allow references to ty params that impl or trait\n     /// binds. Disallow any other upvars (including other ty params that are\n     /// upvars).\n-    AssocItemRibKind,\n+    AssocItem,\n \n     /// We passed through a closure. Disallow labels.\n-    ClosureOrAsyncRibKind,\n+    ClosureOrAsync,\n \n     /// We passed through an item scope. Disallow upvars.\n-    ItemRibKind(HasGenericParams),\n+    Item(HasGenericParams),\n \n     /// We're in a constant item. Can't refer to dynamic stuff.\n     ///\n     /// The item may reference generic parameters in trivial constant expressions.\n     /// All other constants aren't allowed to use generic params at all.\n-    ConstantItemRibKind(ConstantHasGenerics, Option<(Ident, ConstantItemKind)>),\n+    ConstantItem(ConstantHasGenerics, Option<(Ident, ConstantItemKind)>),\n \n     /// We passed through a module.\n-    ModuleRibKind(Module<'a>),\n+    Module(Module<'a>),\n \n     /// We passed through a `macro_rules!` statement\n     MacroDefinition(DefId),\n \n     /// All bindings in this rib are generic parameters that can't be used\n     /// from the default of a generic parameter because they're not declared\n     /// before said generic parameter. Also see the `visit_generics` override.\n-    ForwardGenericParamBanRibKind,\n+    ForwardGenericParamBan,\n \n     /// We are inside of the type of a const parameter. Can't refer to any\n     /// parameters.\n-    ConstParamTyRibKind,\n+    ConstParamTy,\n \n     /// We are inside a `sym` inline assembly operand. Can only refer to\n     /// globals.\n-    InlineAsmSymRibKind,\n+    InlineAsmSym,\n }\n \n impl RibKind<'_> {\n     /// Whether this rib kind contains generic parameters, as opposed to local\n     /// variables.\n     pub(crate) fn contains_params(&self) -> bool {\n         match self {\n-            NormalRibKind\n-            | ClosureOrAsyncRibKind\n-            | ConstantItemRibKind(..)\n-            | ModuleRibKind(_)\n-            | MacroDefinition(_)\n-            | ConstParamTyRibKind\n-            | InlineAsmSymRibKind => false,\n-            AssocItemRibKind | ItemRibKind(_) | ForwardGenericParamBanRibKind => true,\n+            RibKind::Normal\n+            | RibKind::ClosureOrAsync\n+            | RibKind::ConstantItem(..)\n+            | RibKind::Module(_)\n+            | RibKind::MacroDefinition(_)\n+            | RibKind::ConstParamTy\n+            | RibKind::InlineAsmSym => false,\n+            RibKind::AssocItem | RibKind::Item(_) | RibKind::ForwardGenericParamBan => true,\n         }\n     }\n \n     /// This rib forbids referring to labels defined in upwards ribs.\n     fn is_label_barrier(self) -> bool {\n         match self {\n-            NormalRibKind | MacroDefinition(..) => false,\n-\n-            AssocItemRibKind\n-            | ClosureOrAsyncRibKind\n-            | ItemRibKind(..)\n-            | ConstantItemRibKind(..)\n-            | ModuleRibKind(..)\n-            | ForwardGenericParamBanRibKind\n-            | ConstParamTyRibKind\n-            | InlineAsmSymRibKind => true,\n+            RibKind::Normal | RibKind::MacroDefinition(..) => false,\n+\n+            RibKind::AssocItem\n+            | RibKind::ClosureOrAsync\n+            | RibKind::Item(..)\n+            | RibKind::ConstantItem(..)\n+            | RibKind::Module(..)\n+            | RibKind::ForwardGenericParamBan\n+            | RibKind::ConstParamTy\n+            | RibKind::InlineAsmSym => true,\n         }\n     }\n }\n@@ -702,7 +700,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                     let span = ty.span.shrink_to_lo().to(path.span.shrink_to_lo());\n                     self.with_generic_param_rib(\n                         &[],\n-                        NormalRibKind,\n+                        RibKind::Normal,\n                         LifetimeRibKind::Generics {\n                             binder: ty.id,\n                             kind: LifetimeBinderKind::PolyTrait,\n@@ -740,7 +738,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 let span = ty.span.shrink_to_lo().to(bare_fn.decl_span.shrink_to_lo());\n                 self.with_generic_param_rib(\n                     &bare_fn.generic_params,\n-                    NormalRibKind,\n+                    RibKind::Normal,\n                     LifetimeRibKind::Generics {\n                         binder: ty.id,\n                         kind: LifetimeBinderKind::BareFnType,\n@@ -780,7 +778,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n         let span = tref.span.shrink_to_lo().to(tref.trait_ref.path.span.shrink_to_lo());\n         self.with_generic_param_rib(\n             &tref.bound_generic_params,\n-            NormalRibKind,\n+            RibKind::Normal,\n             LifetimeRibKind::Generics {\n                 binder: tref.trait_ref.ref_id,\n                 kind: LifetimeBinderKind::PolyTrait,\n@@ -804,7 +802,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n             ForeignItemKind::TyAlias(box TyAlias { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: foreign_item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -816,7 +814,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n             ForeignItemKind::Fn(box Fn { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: foreign_item.id,\n                         kind: LifetimeBinderKind::Function,\n@@ -870,9 +868,9 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n         debug!(\"(resolving function) entering function\");\n \n         // Create a value rib for the function.\n-        self.with_rib(ValueNS, ClosureOrAsyncRibKind, |this| {\n+        self.with_rib(ValueNS, RibKind::ClosureOrAsync, |this| {\n             // Create a label rib for the function.\n-            this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n+            this.with_label_rib(RibKind::ClosureOrAsync, |this| {\n                 match fn_kind {\n                     FnKind::Fn(_, _, sig, _, generics, body) => {\n                         this.visit_generics(generics);\n@@ -1129,7 +1127,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 let span = predicate_span.shrink_to_lo().to(bounded_ty.span.shrink_to_lo());\n                 this.with_generic_param_rib(\n                     &bound_generic_params,\n-                    NormalRibKind,\n+                    RibKind::Normal,\n                     LifetimeRibKind::Generics {\n                         binder: bounded_ty.id,\n                         kind: LifetimeBinderKind::WhereBound,\n@@ -1175,9 +1173,9 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n \n     fn visit_inline_asm_sym(&mut self, sym: &'ast InlineAsmSym) {\n         // This is similar to the code for AnonConst.\n-        self.with_rib(ValueNS, InlineAsmSymRibKind, |this| {\n-            this.with_rib(TypeNS, InlineAsmSymRibKind, |this| {\n-                this.with_label_rib(InlineAsmSymRibKind, |this| {\n+        self.with_rib(ValueNS, RibKind::InlineAsmSym, |this| {\n+            this.with_rib(TypeNS, RibKind::InlineAsmSym, |this| {\n+                this.with_label_rib(RibKind::InlineAsmSym, |this| {\n                     this.smart_resolve_path(sym.id, &sym.qself, &sym.path, PathSource::Expr(None));\n                     visit::walk_inline_asm_sym(this, sym);\n                 });\n@@ -1202,7 +1200,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // although it may be useful to track other components as well for diagnostics.\n         let graph_root = resolver.graph_root;\n         let parent_scope = ParentScope::module(graph_root, resolver);\n-        let start_rib_kind = ModuleRibKind(graph_root);\n+        let start_rib_kind = RibKind::Module(graph_root);\n         LateResolutionVisitor {\n             r: resolver,\n             parent_scope,\n@@ -1306,8 +1304,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         if let Some(module) = self.r.get_module(self.r.local_def_id(id).to_def_id()) {\n             // Move down in the graph.\n             let orig_module = replace(&mut self.parent_scope.module, module);\n-            self.with_rib(ValueNS, ModuleRibKind(module), |this| {\n-                this.with_rib(TypeNS, ModuleRibKind(module), |this| {\n+            self.with_rib(ValueNS, RibKind::Module(module), |this| {\n+                this.with_rib(TypeNS, RibKind::Module(module), |this| {\n                     let ret = f(this);\n                     this.parent_scope.module = orig_module;\n                     ret\n@@ -1324,8 +1322,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // provide previous type parameters as they're built. We\n         // put all the parameters on the ban list and then remove\n         // them one by one as they are processed and become available.\n-        let mut forward_ty_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n-        let mut forward_const_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n+        let mut forward_ty_ban_rib = Rib::new(RibKind::ForwardGenericParamBan);\n+        let mut forward_const_ban_rib = Rib::new(RibKind::ForwardGenericParamBan);\n         for param in params.iter() {\n             match param.kind {\n                 GenericParamKind::Type { .. } => {\n@@ -1386,8 +1384,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                         // Const parameters can't have param bounds.\n                         assert!(param.bounds.is_empty());\n \n-                        this.ribs[TypeNS].push(Rib::new(ConstParamTyRibKind));\n-                        this.ribs[ValueNS].push(Rib::new(ConstParamTyRibKind));\n+                        this.ribs[TypeNS].push(Rib::new(RibKind::ConstParamTy));\n+                        this.ribs[ValueNS].push(Rib::new(RibKind::ConstParamTy));\n                         this.with_lifetime_rib(LifetimeRibKind::ConstGeneric, |this| {\n                             this.visit_ty(ty)\n                         });\n@@ -2109,7 +2107,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         for i in (0..self.label_ribs.len()).rev() {\n             let rib = &self.label_ribs[i];\n \n-            if let MacroDefinition(def) = rib.kind {\n+            if let RibKind::MacroDefinition(def) = rib.kind {\n                 // If an invocation of this macro created `ident`, give up on `ident`\n                 // and switch to `ident`'s source from the macro definition.\n                 if def == self.r.macro_def(label.span.ctxt()) {\n@@ -2157,7 +2155,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         self.with_current_self_item(item, |this| {\n             this.with_generic_param_rib(\n                 &generics.params,\n-                ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                RibKind::Item(HasGenericParams::Yes(generics.span)),\n                 LifetimeRibKind::Generics {\n                     binder: item.id,\n                     kind: LifetimeBinderKind::Item,\n@@ -2238,7 +2236,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             ItemKind::TyAlias(box TyAlias { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2251,7 +2249,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             ItemKind::Fn(box Fn { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Function,\n@@ -2290,7 +2288,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2311,7 +2309,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2414,11 +2412,11 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         let mut seen_lifetimes = FxHashSet::default();\n \n         // We also can't shadow bindings from the parent item\n-        if let AssocItemRibKind = kind {\n+        if let RibKind::AssocItem = kind {\n             let mut add_bindings_for_ns = |ns| {\n                 let parent_rib = self.ribs[ns]\n                     .iter()\n-                    .rfind(|r| matches!(r.kind, ItemRibKind(_)))\n+                    .rfind(|r| matches!(r.kind, RibKind::Item(_)))\n                     .expect(\"associated item outside of an item\");\n                 seen_bindings.extend(parent_rib.bindings.keys().map(|ident| (*ident, ident.span)));\n             };\n@@ -2507,8 +2505,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             };\n \n             let res = match kind {\n-                ItemRibKind(..) | AssocItemRibKind => Res::Def(def_kind, def_id.to_def_id()),\n-                NormalRibKind => {\n+                RibKind::Item(..) | RibKind::AssocItem => Res::Def(def_kind, def_id.to_def_id()),\n+                RibKind::Normal => {\n                     if self.r.tcx.sess.features_untracked().non_lifetime_binders {\n                         Res::Def(def_kind, def_id.to_def_id())\n                     } else {\n@@ -2554,7 +2552,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn with_static_rib(&mut self, f: impl FnOnce(&mut Self)) {\n-        let kind = ItemRibKind(HasGenericParams::No);\n+        let kind = RibKind::Item(HasGenericParams::No);\n         self.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n     }\n \n@@ -2574,15 +2572,15 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         item: Option<(Ident, ConstantItemKind)>,\n         f: impl FnOnce(&mut Self),\n     ) {\n-        self.with_rib(ValueNS, ConstantItemRibKind(may_use_generics, item), |this| {\n+        self.with_rib(ValueNS, RibKind::ConstantItem(may_use_generics, item), |this| {\n             this.with_rib(\n                 TypeNS,\n-                ConstantItemRibKind(\n+                RibKind::ConstantItem(\n                     may_use_generics.force_yes_if(is_repeat == IsRepeatExpr::Yes),\n                     item,\n                 ),\n                 |this| {\n-                    this.with_label_rib(ConstantItemRibKind(may_use_generics, item), f);\n+                    this.with_label_rib(RibKind::ConstantItem(may_use_generics, item), f);\n                 },\n             )\n         });\n@@ -2614,7 +2612,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             |this: &mut Self, generics: &Generics, kind, item: &'ast AssocItem| {\n                 this.with_generic_param_rib(\n                     &generics.params,\n-                    AssocItemRibKind,\n+                    RibKind::AssocItem,\n                     LifetimeRibKind::Generics { binder: item.id, span: generics.span, kind },\n                     |this| visit::walk_assoc_item(this, item, AssocCtxt::Trait),\n                 );\n@@ -2695,7 +2693,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn with_self_rib_ns(&mut self, ns: Namespace, self_res: Res, f: impl FnOnce(&mut Self)) {\n-        let mut self_type_rib = Rib::new(NormalRibKind);\n+        let mut self_type_rib = Rib::new(RibKind::Normal);\n \n         // Plain insert (no renaming, since types are not currently hygienic)\n         self_type_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), self_res);\n@@ -2721,7 +2719,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // If applicable, create a rib for the type parameters.\n         self.with_generic_param_rib(\n             &generics.params,\n-            ItemRibKind(HasGenericParams::Yes(generics.span)),\n+            RibKind::Item(HasGenericParams::Yes(generics.span)),\n             LifetimeRibKind::Generics {\n                 span: generics.span,\n                 binder: item_id,\n@@ -2835,7 +2833,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // We also need a new scope for the impl item type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    AssocItemRibKind,\n+                    RibKind::AssocItem,\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         span: generics.span,\n@@ -2863,7 +2861,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // We also need a new scope for the impl item type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    AssocItemRibKind,\n+                    RibKind::AssocItem,\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         span: generics.span,\n@@ -3135,7 +3133,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn resolve_arm(&mut self, arm: &'ast Arm) {\n-        self.with_rib(ValueNS, NormalRibKind, |this| {\n+        self.with_rib(ValueNS, RibKind::Normal, |this| {\n             this.resolve_pattern_top(&arm.pat, PatternSource::Match);\n             walk_list!(this, visit_expr, &arm.guard);\n             this.visit_expr(&arm.body);\n@@ -3857,7 +3855,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 diagnostics::signal_label_shadowing(self.r.tcx.sess, orig_span, label.ident)\n             }\n \n-            self.with_label_rib(NormalRibKind, |this| {\n+            self.with_label_rib(RibKind::Normal, |this| {\n                 let ident = label.ident.normalize_to_macro_rules();\n                 this.label_ribs.last_mut().unwrap().bindings.insert(ident, id);\n                 f(this);\n@@ -3880,11 +3878,11 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         let mut num_macro_definition_ribs = 0;\n         if let Some(anonymous_module) = anonymous_module {\n             debug!(\"(resolving block) found anonymous module, moving down\");\n-            self.ribs[ValueNS].push(Rib::new(ModuleRibKind(anonymous_module)));\n-            self.ribs[TypeNS].push(Rib::new(ModuleRibKind(anonymous_module)));\n+            self.ribs[ValueNS].push(Rib::new(RibKind::Module(anonymous_module)));\n+            self.ribs[TypeNS].push(Rib::new(RibKind::Module(anonymous_module)));\n             self.parent_scope.module = anonymous_module;\n         } else {\n-            self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n+            self.ribs[ValueNS].push(Rib::new(RibKind::Normal));\n         }\n \n         let prev = self.diagnostic_metadata.current_block_could_be_bare_struct_literal.take();\n@@ -3901,8 +3899,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 && let ItemKind::MacroDef(..) = item.kind {\n                 num_macro_definition_ribs += 1;\n                 let res = self.r.local_def_id(item.id).to_def_id();\n-                self.ribs[ValueNS].push(Rib::new(MacroDefinition(res)));\n-                self.label_ribs.push(Rib::new(MacroDefinition(res)));\n+                self.ribs[ValueNS].push(Rib::new(RibKind::MacroDefinition(res)));\n+                self.label_ribs.push(Rib::new(RibKind::MacroDefinition(res)));\n             }\n \n             self.visit_stmt(stmt);\n@@ -3989,7 +3987,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }\n \n             ExprKind::If(ref cond, ref then, ref opt_else) => {\n-                self.with_rib(ValueNS, NormalRibKind, |this| {\n+                self.with_rib(ValueNS, RibKind::Normal, |this| {\n                     let old = this.diagnostic_metadata.in_if_condition.replace(cond);\n                     this.visit_expr(cond);\n                     this.diagnostic_metadata.in_if_condition = old;\n@@ -4006,7 +4004,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n \n             ExprKind::While(ref cond, ref block, label) => {\n                 self.with_resolved_label(label, expr.id, |this| {\n-                    this.with_rib(ValueNS, NormalRibKind, |this| {\n+                    this.with_rib(ValueNS, RibKind::Normal, |this| {\n                         let old = this.diagnostic_metadata.in_if_condition.replace(cond);\n                         this.visit_expr(cond);\n                         this.diagnostic_metadata.in_if_condition = old;\n@@ -4017,7 +4015,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n \n             ExprKind::ForLoop(ref pat, ref iter_expr, ref block, label) => {\n                 self.visit_expr(iter_expr);\n-                self.with_rib(ValueNS, NormalRibKind, |this| {\n+                self.with_rib(ValueNS, RibKind::Normal, |this| {\n                     this.resolve_pattern_top(pat, PatternSource::For);\n                     this.resolve_labeled_block(label, expr.id, block);\n                 });\n@@ -4073,8 +4071,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 ref body,\n                 ..\n             }) => {\n-                self.with_rib(ValueNS, NormalRibKind, |this| {\n-                    this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n+                self.with_rib(ValueNS, RibKind::Normal, |this| {\n+                    this.with_label_rib(RibKind::ClosureOrAsync, |this| {\n                         // Resolve arguments:\n                         this.resolve_params(&fn_decl.inputs);\n                         // No need to resolve return type --\n@@ -4098,7 +4096,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }) => {\n                 self.with_generic_param_rib(\n                     &generic_params,\n-                    NormalRibKind,\n+                    RibKind::Normal,\n                     LifetimeRibKind::Generics {\n                         binder: expr.id,\n                         kind: LifetimeBinderKind::Closure,\n@@ -4109,7 +4107,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }\n             ExprKind::Closure(..) => visit::walk_expr(self, expr),\n             ExprKind::Async(..) => {\n-                self.with_label_rib(ClosureOrAsyncRibKind, |this| visit::walk_expr(this, expr));\n+                self.with_label_rib(RibKind::ClosureOrAsync, |this| visit::walk_expr(this, expr));\n             }\n             ExprKind::Repeat(ref elem, ref ct) => {\n                 self.visit_expr(elem);"}, {"sha": "42d498c7ee0b6e912e4003c3d485097c127e1790", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -605,7 +605,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         }\n \n         // Try to find in last block rib\n-        if let Some(rib) = &self.last_block_rib && let RibKind::NormalRibKind = rib.kind {\n+        if let Some(rib) = &self.last_block_rib && let RibKind::Normal = rib.kind {\n             for (ident, &res) in &rib.bindings {\n                 if let Res::Local(_) = res && path.len() == 1 &&\n                     ident.span.eq_ctxt(path[0].ident.span) &&\n@@ -1690,7 +1690,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 }\n \n                 // Items in scope\n-                if let RibKind::ModuleRibKind(module) = rib.kind {\n+                if let RibKind::Module(module) = rib.kind {\n                     // Items from this module\n                     self.r.add_module_candidates(module, &mut names, &filter_fn, Some(ctxt));\n "}, {"sha": "f518266016e09b962277c4a6fa75538852b468dc", "filename": "tests/incremental/change_crate_dep_kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fincremental%2Fchange_crate_dep_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fincremental%2Fchange_crate_dep_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fchange_crate_dep_kind.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -2,6 +2,7 @@\n // detected then -Zincremental-verify-ich will trigger an assertion.\n \n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph -Cpanic=unwind\n // build-pass (FIXME(62277): could be check-pass?)"}, {"sha": "ad8a338a7964f78b65956a96fd205f8bc639ac4e", "filename": "tests/incremental/issue-80691-bad-eval-cache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fincremental%2Fissue-80691-bad-eval-cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fincremental%2Fissue-80691-bad-eval-cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fissue-80691-bad-eval-cache.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,6 +1,7 @@\n // revisions: rfail1 rfail2\n // failure-status: 101\n // error-pattern: not implemented\n+// needs-unwind -Cpanic=abort causes abort instead of exit(101)\n \n pub trait Interner {\n     type InternedVariableKinds;"}, {"sha": "b8e0e9483cd9c514ffb13dfff8683b56680d218b", "filename": "tests/run-make/c-unwind-abi-catch-lib-panic/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2FMakefile?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all: archive"}, {"sha": "1760ddb30616f24d6e947416b7969acda3e4cf0f", "filename": "tests/run-make/c-unwind-abi-catch-panic/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2FMakefile?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all: $(call NATIVE_STATICLIB,add)"}, {"sha": "6d72c1227230384d742e3f789574700b5ee5fc62", "filename": "tests/run-make/const_fn_mir/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fconst_fn_mir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fconst_fn_mir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fconst_fn_mir%2FMakefile?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,3 +1,4 @@\n+# needs-unwind -Cpanic=abort gives different MIR output\n include ../tools.mk\n \n all:"}, {"sha": "4501459e9d1d828e3474d778995d42f7bc76326b", "filename": "tests/run-make/debug-assertions/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fdebug-assertions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fdebug-assertions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fdebug-assertions%2FMakefile?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all:"}, {"sha": "b5e52808d2fc572f6e48a8a0a79f7d2face65cbb", "filename": "tests/run-make/foreign-double-unwind/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fforeign-double-unwind%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fforeign-double-unwind%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-double-unwind%2FMakefile?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all: foo"}, {"sha": "56c41b274fb2ee9d9bc2f0ce5d5affc20e7431fa", "filename": "tests/run-make/foreign-exceptions/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fforeign-exceptions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fforeign-exceptions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-exceptions%2FMakefile?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all: foo"}, {"sha": "59cee2842004e40ea091914f76b96ec92eb95439", "filename": "tests/run-make/foreign-rust-exceptions/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fforeign-rust-exceptions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fforeign-rust-exceptions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-rust-exceptions%2FMakefile?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,5 +1,6 @@\n # ignore-cross-compile\n # ignore-i686-pc-windows-gnu\n+# needs-unwind\n \n # This test doesn't work on 32-bit MinGW as cdylib has its own copy of unwinder\n # so cross-DLL unwinding does not work."}, {"sha": "c8bc7b5dd4a4c17b31b8b40ffb7353cbe6dd3439", "filename": "tests/run-make/libtest-json/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Flibtest-json%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Flibtest-json%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-json%2FMakefile?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n # Test expected libtest's JSON output"}, {"sha": "4b093f936086c02bf0ebe90af70ad3ef383c85aa", "filename": "tests/run-make/static-unwinding/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fstatic-unwinding%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Fstatic-unwinding%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstatic-unwinding%2FMakefile?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all:"}, {"sha": "11aed2e4c79a6564b2772e0e1e7327d6ab8b52a5", "filename": "tests/run-make/test-benches/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Ftest-benches%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Frun-make%2Ftest-benches%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Ftest-benches%2FMakefile?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,6 +1,7 @@\n include ../tools.mk\n \n # ignore-cross-compile\n+# needs-unwind #[bench] and -Zpanic-abort-tests can't be combined\n \n all:\n \t# Smoke-test that `#[bench]` isn't entirely broken."}, {"sha": "18a99398622cacbe5b57b46a9cb84d76a7c3a097", "filename": "tests/ui/const-generics/generic_const_exprs/nested_uneval_unification-2.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -2,28 +2,30 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features, unused_parens, unused_braces)]\n \n-fn zero_init<const N: usize>() -> Substs1<{ (N) }>\n+fn zero_init<const N: usize>() -> Substs1<{{ N }}>\n where\n-    [u8; { (N) }]: ,\n+    [u8; {{ N }}]: ,\n {\n-    Substs1([0; { (N) }])\n+    Substs1([0; {{ N }}])\n }\n \n-struct Substs1<const N: usize>([u8; { (N) }])\n+struct Substs1<const N: usize>([u8; {{ N }}])\n where\n-    [(); { (N) }]: ;\n+    [(); {{ N }}]: ;\n \n-fn substs2<const M: usize>() -> Substs1<{ (M) }> {\n-    zero_init::<{ (M) }>()\n+fn substs2<const M: usize>() -> Substs1<{{ M }}> {\n+    zero_init::<{{ M }}>()\n }\n \n-fn substs3<const L: usize>() -> Substs1<{ (L) }> {\n-    substs2::<{ (L) }>()\n+fn substs3<const L: usize>() -> Substs1<{{ L }}> {\n+    substs2::<{{ L }}>()\n }\n \n fn main() {\n     assert_eq!(substs3::<2>().0, [0; 2]);\n }\n \n-// Test that the implicit ``{ (L) }`` bound on ``substs3`` satisfies the\n-// ``{ (N) }`` bound on ``Substs1``\n+// Test that the implicit ``{{ L }}`` bound on ``substs3`` satisfies the\n+// ``{{ N }}`` bound on ``Substs1``\n+// FIXME(generic_const_exprs): come up with a less brittle test for this using assoc consts\n+// once normalization is implemented for them."}, {"sha": "3704a1a5a392c0113b0a29827aa2a62bb4768feb", "filename": "tests/ui/consts/const-block-const-bound.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fconsts%2Fconst-block-const-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fconsts%2Fconst-block-const-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-block-const-bound.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -11,15 +11,9 @@ impl Drop for UnconstDrop {\n     fn drop(&mut self) {}\n }\n \n-struct NonDrop;\n-\n-impl !Drop for NonDrop {}\n-\n fn main() {\n     const {\n         f(UnconstDrop);\n         //~^ ERROR can't drop\n-        f(NonDrop);\n-        //~^ ERROR can't drop\n     }\n }"}, {"sha": "caf24e7afcf456d4ad1bc8d499771c9fdcfde4ab", "filename": "tests/ui/consts/const-block-const-bound.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-block-const-bound.stderr?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't drop `UnconstDrop` in const contexts\n-  --> $DIR/const-block-const-bound.rs:20:9\n+  --> $DIR/const-block-const-bound.rs:16:9\n    |\n LL |         f(UnconstDrop);\n    |         ^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `UnconstDrop`\n@@ -12,20 +12,6 @@ LL |         &f(UnconstDrop);\n LL |         &mut f(UnconstDrop);\n    |         ++++\n \n-error[E0277]: can't drop `NonDrop` in const contexts\n-  --> $DIR/const-block-const-bound.rs:22:9\n-   |\n-LL |         f(NonDrop);\n-   |         ^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonDrop`\n-   |\n-   = note: the trait bound `NonDrop: ~const Destruct` is not satisfied\n-help: consider borrowing here\n-   |\n-LL |         &f(NonDrop);\n-   |         +\n-LL |         &mut f(NonDrop);\n-   |         ++++\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "ae63632b55efd6caf225d42eb36396ab7a250e6b", "filename": "tests/ui/dropck/negative.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fdropck%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fdropck%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdropck%2Fnegative.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -0,0 +1,7 @@\n+#![feature(negative_impls)]\n+\n+struct NonDrop;\n+impl !Drop for NonDrop {}\n+//~^ ERROR negative `Drop` impls are not supported\n+\n+fn main() {}"}, {"sha": "d613e30b5ea59f5e835d1919b29b8cfc6252f6a2", "filename": "tests/ui/dropck/negative.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fdropck%2Fnegative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fdropck%2Fnegative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdropck%2Fnegative.stderr?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -0,0 +1,8 @@\n+error: negative `Drop` impls are not supported\n+  --> $DIR/negative.rs:4:1\n+   |\n+LL | impl !Drop for NonDrop {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f7199d4ec44074d63c02aaf3e228e9f31f2746ea", "filename": "tests/ui/dropck/reservation.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fdropck%2Freservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fdropck%2Freservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdropck%2Freservation.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -0,0 +1,10 @@\n+#![feature(rustc_attrs)]\n+\n+struct ReservedDrop;\n+#[rustc_reservation_impl = \"message\"]\n+impl Drop for ReservedDrop {\n+//~^ ERROR reservation `Drop` impls are not supported\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {}"}, {"sha": "19325d6ed4401775a382d95443c465453495e958", "filename": "tests/ui/dropck/reservation.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fdropck%2Freservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fdropck%2Freservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdropck%2Freservation.stderr?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -0,0 +1,8 @@\n+error: reservation `Drop` impls are not supported\n+  --> $DIR/reservation.rs:5:1\n+   |\n+LL | impl Drop for ReservedDrop {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "776006124dccf62b563e52c6c62ae38f5c84a302", "filename": "tests/ui/impl-trait/in-trait/auxiliary/rpitit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -5,10 +5,10 @@\n use std::ops::Deref;\n \n pub trait Foo {\n-    fn bar() -> impl Deref<Target = impl Sized>;\n+    fn bar(self) -> impl Deref<Target = impl Sized>;\n }\n \n pub struct Foreign;\n impl Foo for Foreign {\n-    fn bar() -> &'static () { &() }\n+    fn bar(self) -> &'static () { &() }\n }"}, {"sha": "ecb5e62c433a0c9302852260f173b0782b0cdd50", "filename": "tests/ui/impl-trait/in-trait/foreign-dyn-error.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign-dyn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign-dyn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign-dyn-error.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -0,0 +1,8 @@\n+// aux-build: rpitit.rs\n+\n+extern crate rpitit;\n+\n+fn main() {\n+    let _: &dyn rpitit::Foo = todo!();\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+}"}, {"sha": "6eef392c05f013b72a8eb39c8eeabef602851b6f", "filename": "tests/ui/impl-trait/in-trait/foreign-dyn-error.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign-dyn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign-dyn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign-dyn-error.stderr?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -0,0 +1,15 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/foreign-dyn-error.rs:6:12\n+   |\n+LL |     let _: &dyn rpitit::Foo = todo!();\n+   |            ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/auxiliary/rpitit.rs:8:21\n+   |\n+LL |     fn bar(self) -> impl Deref<Target = impl Sized>;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait cannot be made into an object because method `bar` references an `impl Trait` type in its return type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "98417b343a11ed0688bbd6771d694cd070207cff", "filename": "tests/ui/impl-trait/in-trait/foreign.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -5,17 +5,18 @@\n \n extern crate rpitit;\n \n+use rpitit::{Foo, Foreign};\n use std::sync::Arc;\n \n // Implement an RPITIT from another crate.\n struct Local;\n-impl rpitit::Foo for Local {\n-    fn bar() -> Arc<String> { Arc::new(String::new()) }\n+impl Foo for Local {\n+    fn bar(self) -> Arc<String> { Arc::new(String::new()) }\n }\n \n fn main() {\n     // Witness an RPITIT from another crate.\n-    let &() = <rpitit::Foreign as rpitit::Foo>::bar();\n+    let &() = Foreign.bar();\n \n-    let x: Arc<String> = <Local as rpitit::Foo>::bar();\n+    let x: Arc<String> = Local.bar();\n }"}, {"sha": "b015397a5bc5f66928fbd81af2a12461c1722682", "filename": "tests/ui/self/self-ctor-inner-const.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -0,0 +1,17 @@\n+// Verify that we ban usage of `Self` as constructor from inner items.\n+\n+struct S0<T>(T);\n+\n+impl<T> S0<T> {\n+    fn foo() {\n+        const C: S0<u8> = Self(0);\n+        //~^ ERROR can't use generic parameters from outer function\n+        fn bar() -> Self {\n+            //~^ ERROR can't use generic parameters from outer function\n+            Self(0)\n+            //~^ ERROR can't use generic parameters from outer function\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7287c64c659b72fc1a5c628a96506dd96c3d2c58", "filename": "tests/ui/self/self-ctor-inner-const.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -0,0 +1,33 @@\n+error[E0401]: can't use generic parameters from outer function\n+  --> $DIR/self-ctor-inner-const.rs:7:27\n+   |\n+LL |         const C: S0<u8> = Self(0);\n+   |                           ^^^^\n+   |                           |\n+   |                           use of generic parameter from outer function\n+   |                           can't use `Self` here\n+\n+error[E0401]: can't use generic parameters from outer function\n+  --> $DIR/self-ctor-inner-const.rs:9:21\n+   |\n+LL | impl<T> S0<T> {\n+   | ---- `Self` type implicitly declared here, by this `impl`\n+...\n+LL |         fn bar() -> Self {\n+   |                     ^^^^\n+   |                     |\n+   |                     use of generic parameter from outer function\n+   |                     use a type here instead\n+\n+error[E0401]: can't use generic parameters from outer function\n+  --> $DIR/self-ctor-inner-const.rs:11:13\n+   |\n+LL |             Self(0)\n+   |             ^^^^\n+   |             |\n+   |             use of generic parameter from outer function\n+   |             can't use `Self` here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0401`."}, {"sha": "8416270fd815932eab011eaac2ec5ed26687d4ec", "filename": "tests/ui/test-attrs/test-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Ftest-attrs%2Ftest-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac35583d2ffb5ed9e564dee0822c9a244058ee0/tests%2Fui%2Ftest-attrs%2Ftest-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftest-type.rs?ref=eac35583d2ffb5ed9e564dee0822c9a244058ee0", "patch": "@@ -3,6 +3,7 @@\n // check-run-results\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // ignore-emscripten no threads support\n+// needs-unwind\n // run-pass\n \n #[test]"}]}