{"sha": "8ba74369c210a0cdb1b1440c47f19f2145e1640f", "node_id": "C_kwDOAAsO6NoAKDhiYTc0MzY5YzIxMGEwY2RiMWIxNDQwYzQ3ZjE5ZjIxNDVlMTY0MGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-06T21:03:28Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-24T16:30:38Z"}, "message": "better ObligationCause for normalization errors in can_type_implement_copy", "tree": {"sha": "77d9454eb01f3d8a34a5cc986cd1a6a0987d7392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77d9454eb01f3d8a34a5cc986cd1a6a0987d7392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ba74369c210a0cdb1b1440c47f19f2145e1640f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba74369c210a0cdb1b1440c47f19f2145e1640f", "html_url": "https://github.com/rust-lang/rust/commit/8ba74369c210a0cdb1b1440c47f19f2145e1640f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ba74369c210a0cdb1b1440c47f19f2145e1640f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d127e2040b57157936f5f24e114a8b4c9a505ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d127e2040b57157936f5f24e114a8b4c9a505ef", "html_url": "https://github.com/rust-lang/rust/commit/3d127e2040b57157936f5f24e114a8b4c9a505ef"}], "stats": {"total": 93, "additions": 71, "deletions": 22}, "files": [{"sha": "0a218c2d2558487a3a57dcb674435d833c9e61d6", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ba74369c210a0cdb1b1440c47f19f2145e1640f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba74369c210a0cdb1b1440c47f19f2145e1640f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=8ba74369c210a0cdb1b1440c47f19f2145e1640f", "patch": "@@ -51,7 +51,7 @@ use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, InnerSpan, MultiSpan, Span};\n use rustc_target::abi::VariantIdx;\n-use rustc_trait_selection::traits::misc::can_type_implement_copy;\n+use rustc_trait_selection::traits::{self, misc::can_type_implement_copy};\n \n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n@@ -764,7 +764,14 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n         if ty.is_copy_modulo_regions(cx.tcx.at(item.span), param_env) {\n             return;\n         }\n-        if can_type_implement_copy(cx.tcx, param_env, ty).is_ok() {\n+        if can_type_implement_copy(\n+            cx.tcx,\n+            param_env,\n+            ty,\n+            traits::ObligationCause::misc(item.span, item.hir_id()),\n+        )\n+        .is_ok()\n+        {\n             cx.struct_span_lint(MISSING_COPY_IMPLEMENTATIONS, item.span, |lint| {\n                 lint.build(\n                     \"type could implement `Copy`; consider adding `impl \\"}, {"sha": "dc72945af24e3ff7bc86dc4f10d9fab395006f15", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ba74369c210a0cdb1b1440c47f19f2145e1640f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba74369c210a0cdb1b1440c47f19f2145e1640f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=8ba74369c210a0cdb1b1440c47f19f2145e1640f", "patch": "@@ -20,6 +20,7 @@ pub fn can_type_implement_copy<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     self_type: Ty<'tcx>,\n+    cause: ObligationCause<'tcx>,\n ) -> Result<(), CopyImplementationError<'tcx>> {\n     // FIXME: (@jroesch) float this code up\n     tcx.infer_ctxt().enter(|infcx| {\n@@ -49,9 +50,8 @@ pub fn can_type_implement_copy<'tcx>(\n                     continue;\n                 }\n                 let span = tcx.def_span(field.did);\n-                let cause = ObligationCause::dummy_with_span(span);\n                 let ctx = traits::FulfillmentContext::new();\n-                match traits::fully_normalize(&infcx, ctx, cause, param_env, ty) {\n+                match traits::fully_normalize(&infcx, ctx, cause.clone(), param_env, ty) {\n                     Ok(ty) => {\n                         if !infcx.type_is_copy_modulo_regions(param_env, ty, span) {\n                             infringing.push(field);"}, {"sha": "a43f7f871167e27fb25217d874f5fb07d8bc6292", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ba74369c210a0cdb1b1440c47f19f2145e1640f/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba74369c210a0cdb1b1440c47f19f2145e1640f/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=8ba74369c210a0cdb1b1440c47f19f2145e1640f", "patch": "@@ -74,7 +74,8 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n \n     debug!(\"visit_implementation_of_copy: self_type={:?} (free)\", self_type);\n \n-    match can_type_implement_copy(tcx, param_env, self_type) {\n+    let cause = traits::ObligationCause::misc(span, impl_hir_id);\n+    match can_type_implement_copy(tcx, param_env, self_type, cause) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfrigingFields(fields)) => {\n             let item = tcx.hir().expect_item(impl_did);"}, {"sha": "ca81db023ec3b356570955587d3bb9a737e2c740", "filename": "src/test/ui/issues/issue-50480.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ba74369c210a0cdb1b1440c47f19f2145e1640f/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba74369c210a0cdb1b1440c47f19f2145e1640f/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs?ref=8ba74369c210a0cdb1b1440c47f19f2145e1640f", "patch": "@@ -1,17 +1,17 @@\n #[derive(Clone, Copy)]\n //~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| ERROR `i32` is not an iterator\n struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~^ ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `N` in this scope\n //~| ERROR cannot find type `N` in this scope\n-//~| ERROR `i32` is not an iterator\n \n #[derive(Clone, Copy)]\n //~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| ERROR `i32` is not an iterator\n struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~^ ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `N` in this scope\n-//~| ERROR `i32` is not an iterator\n \n fn main() {}"}, {"sha": "48ec4aa434cd7a08551390fea2c8b3b844c11a26", "filename": "src/test/ui/issues/issue-50480.stderr", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8ba74369c210a0cdb1b1440c47f19f2145e1640f/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba74369c210a0cdb1b1440c47f19f2145e1640f/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr?ref=8ba74369c210a0cdb1b1440c47f19f2145e1640f", "patch": "@@ -1,35 +1,35 @@\n error[E0412]: cannot find type `N` in this scope\n-  --> $DIR/issue-50480.rs:3:12\n+  --> $DIR/issue-50480.rs:4:12\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |           -^ not found in this scope\n    |           |\n    |           help: you might be missing a type parameter: `<N>`\n \n error[E0412]: cannot find type `NotDefined` in this scope\n-  --> $DIR/issue-50480.rs:3:15\n+  --> $DIR/issue-50480.rs:4:15\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |               ^^^^^^^^^^ not found in this scope\n \n error[E0412]: cannot find type `N` in this scope\n-  --> $DIR/issue-50480.rs:3:12\n+  --> $DIR/issue-50480.rs:4:12\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |           -^ not found in this scope\n    |           |\n    |           help: you might be missing a type parameter: `<N>`\n \n error[E0412]: cannot find type `NotDefined` in this scope\n-  --> $DIR/issue-50480.rs:3:15\n+  --> $DIR/issue-50480.rs:4:15\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |           -   ^^^^^^^^^^ not found in this scope\n    |           |\n    |           help: you might be missing a type parameter: `<NotDefined>`\n \n error[E0412]: cannot find type `N` in this scope\n-  --> $DIR/issue-50480.rs:12:18\n+  --> $DIR/issue-50480.rs:13:18\n    |\n LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |            -     ^\n@@ -46,26 +46,27 @@ LL | struct Bar<T, N>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, Strin\n    |             +++\n \n error[E0412]: cannot find type `NotDefined` in this scope\n-  --> $DIR/issue-50480.rs:12:21\n+  --> $DIR/issue-50480.rs:13:21\n    |\n LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                     ^^^^^^^^^^ not found in this scope\n \n error[E0277]: `i32` is not an iterator\n-  --> $DIR/issue-50480.rs:3:27\n+  --> $DIR/issue-50480.rs:1:17\n    |\n-LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n+LL | #[derive(Clone, Copy)]\n+   |                 ^^^^ `i32` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/issue-50480.rs:1:17\n    |\n LL | #[derive(Clone, Copy)]\n    |                 ^^^^\n-LL |\n+...\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                                                    --------  ------ this field does not implement `Copy`\n    |                                                    |\n@@ -74,20 +75,21 @@ LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `i32` is not an iterator\n-  --> $DIR/issue-50480.rs:12:33\n+  --> $DIR/issue-50480.rs:10:17\n    |\n-LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n+LL | #[derive(Clone, Copy)]\n+   |                 ^^^^ `i32` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/issue-50480.rs:10:17\n    |\n LL | #[derive(Clone, Copy)]\n    |                 ^^^^\n-LL |\n+...\n LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                                                          --------  ------ this field does not implement `Copy`\n    |                                                          |"}, {"sha": "a78ff046e97f976f9150f774fa754fc6baec3ff3", "filename": "src/test/ui/traits/copy-impl-cannot-normalize.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ba74369c210a0cdb1b1440c47f19f2145e1640f/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba74369c210a0cdb1b1440c47f19f2145e1640f/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.rs?ref=8ba74369c210a0cdb1b1440c47f19f2145e1640f", "patch": "@@ -0,0 +1,25 @@\n+trait TraitFoo {\n+    type Bar;\n+}\n+\n+struct Foo<T>\n+where\n+    T: TraitFoo,\n+{\n+    inner: T::Bar,\n+}\n+\n+impl<T> Clone for Foo<T>\n+where\n+    T: TraitFoo,\n+    T::Bar: Clone,\n+{\n+    fn clone(&self) -> Self {\n+        Self { inner: self.inner.clone() }\n+    }\n+}\n+\n+impl<T> Copy for Foo<T> {}\n+//~^ ERROR the trait bound `T: TraitFoo` is not satisfied\n+\n+fn main() {}"}, {"sha": "cc540ea905a10da10d66e659b83178b237d1e05f", "filename": "src/test/ui/traits/copy-impl-cannot-normalize.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ba74369c210a0cdb1b1440c47f19f2145e1640f/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba74369c210a0cdb1b1440c47f19f2145e1640f/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr?ref=8ba74369c210a0cdb1b1440c47f19f2145e1640f", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `T: TraitFoo` is not satisfied\n+  --> $DIR/copy-impl-cannot-normalize.rs:22:1\n+   |\n+LL | impl<T> Copy for Foo<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitFoo` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: TraitFoo> Copy for Foo<T> {}\n+   |       ++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d27e1383d012b7aa71e2541d79ed5a4fc28558b1", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ba74369c210a0cdb1b1440c47f19f2145e1640f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba74369c210a0cdb1b1440c47f19f2145e1640f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=8ba74369c210a0cdb1b1440c47f19f2145e1640f", "patch": "@@ -199,7 +199,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                     let sugg = |diag: &mut DiagnosticBuilder<'_>| {\n                         if let ty::Adt(def, ..) = ty.kind() {\n                             if let Some(span) = cx.tcx.hir().span_if_local(def.did) {\n-                                if can_type_implement_copy(cx.tcx, cx.param_env, ty).is_ok() {\n+                                if can_type_implement_copy(cx.tcx, cx.param_env, ty, traits::ObligationCause::dummy_with_span(span)).is_ok() {\n                                     diag.span_help(span, \"consider marking this type as `Copy`\");\n                                 }\n                             }"}]}