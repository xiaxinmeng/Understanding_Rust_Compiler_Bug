{"sha": "5573c4709cba7b3d5dc15c47239d1b1f32af4753", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NzNjNDcwOWNiYTdiM2Q1ZGMxNWM0NzIzOWQxYjFmMzJhZjQ3NTM=", "commit": {"author": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-07T14:01:47Z"}, "committer": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-07T14:01:47Z"}, "message": "Better example for `thread::unpark`.\n\nPart of #29378", "tree": {"sha": "690eb1effcfd5cc6eeba771f90b9d3d8e691f8c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/690eb1effcfd5cc6eeba771f90b9d3d8e691f8c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5573c4709cba7b3d5dc15c47239d1b1f32af4753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5573c4709cba7b3d5dc15c47239d1b1f32af4753", "html_url": "https://github.com/rust-lang/rust/commit/5573c4709cba7b3d5dc15c47239d1b1f32af4753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5573c4709cba7b3d5dc15c47239d1b1f32af4753/comments", "author": null, "committer": null, "parents": [{"sha": "d9628f9389319c1075d4a54a0a490226539cea81", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9628f9389319c1075d4a54a0a490226539cea81", "html_url": "https://github.com/rust-lang/rust/commit/d9628f9389319c1075d4a54a0a490226539cea81"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "94a2c91858ea7fd1989e96affb15112b0577f191", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5573c4709cba7b3d5dc15c47239d1b1f32af4753/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573c4709cba7b3d5dc15c47239d1b1f32af4753/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=5573c4709cba7b3d5dc15c47239d1b1f32af4753", "patch": "@@ -769,7 +769,7 @@ impl Thread {\n     /// Atomically makes the handle's token available if it is not already.\n     ///\n     /// Every thread is equipped with some basic low-level blocking support, via\n-    /// the [`park()`][park] function and the `unpark` method. These can be\n+    /// the [`park()`][park] function and the `unpark()` method. These can be\n     /// used as a more CPU-efficient implementation of a spinlock.\n     ///\n     /// See the [module doc][thread] for more detail.\n@@ -779,14 +779,21 @@ impl Thread {\n     /// ```\n     /// use std::thread;\n     ///\n-    /// let handler = thread::Builder::new()\n+    /// let parked_thread = thread::Builder::new()\n     ///     .spawn(|| {\n-    ///         let thread = thread::current();\n-    ///         thread.unpark();\n+    ///         println!(\"Parking thread\");\n+    ///         thread::park();\n+    ///         println!(\"Thread unparked\");\n     ///     })\n     ///     .unwrap();\n     ///\n-    /// handler.join().unwrap();\n+    /// // Let some time pass for the thread to be spawned.\n+    /// thread::sleep(Duration::from_millis(10));\n+    ///\n+    /// println!(\"Unpark the thread\");\n+    /// parked_thread.thread().unpark();\n+    ///\n+    /// parked_thread.join().unwrap();\n     /// ```\n     ///\n     /// [thread]: index.html"}]}