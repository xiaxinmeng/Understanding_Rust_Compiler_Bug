{"sha": "395e56f39849defec8d6941f76625d286a6e5ddc", "node_id": "C_kwDOAAsO6NoAKDM5NWU1NmYzOTg0OWRlZmVjOGQ2OTQxZjc2NjI1ZDI4NmE2ZTVkZGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-09T23:06:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-09T23:06:40Z"}, "message": "Auto merge of #101617 - Dylan-DPC:rollup-iiy4ipc, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #101366 (Restore old behaviour on broken UNC paths)\n - #101492 (Suggest adding array lengths to references to arrays if possible)\n - #101529 (Fix the example code and doctest for Formatter::sign_plus)\n - #101573 (update `ParamKindOrd`)\n - #101612 (Fix code generation of `Rvalue::Repeat` with 128 bit values)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8b8aa68d407f03734ed5618934a743e2151381cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b8aa68d407f03734ed5618934a743e2151381cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/395e56f39849defec8d6941f76625d286a6e5ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/395e56f39849defec8d6941f76625d286a6e5ddc", "html_url": "https://github.com/rust-lang/rust/commit/395e56f39849defec8d6941f76625d286a6e5ddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/395e56f39849defec8d6941f76625d286a6e5ddc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d37ed661a6922e7a167609b8cd7eb31e972b19b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d37ed661a6922e7a167609b8cd7eb31e972b19b", "html_url": "https://github.com/rust-lang/rust/commit/1d37ed661a6922e7a167609b8cd7eb31e972b19b"}, {"sha": "07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "html_url": "https://github.com/rust-lang/rust/commit/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0"}], "stats": {"total": 347, "additions": 165, "deletions": 182}, "files": [{"sha": "3f4911c4ecfcf63313fb68728f334d5d38a12d8c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -33,7 +33,6 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use std::cmp::Ordering;\n use std::convert::TryFrom;\n use std::fmt;\n use std::mem;\n@@ -324,46 +323,17 @@ pub type GenericBounds = Vec<GenericBound>;\n /// Specifies the enforced ordering for generic parameters. In the future,\n /// if we wanted to relax this order, we could override `PartialEq` and\n /// `PartialOrd`, to allow the kinds to be unordered.\n-#[derive(Hash, Clone, Copy)]\n+#[derive(Hash, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub enum ParamKindOrd {\n     Lifetime,\n-    Type,\n-    Const,\n-    // `Infer` is not actually constructed directly from the AST, but is implicitly constructed\n-    // during HIR lowering, and `ParamKindOrd` will implicitly order inferred variables last.\n-    Infer,\n-}\n-\n-impl Ord for ParamKindOrd {\n-    fn cmp(&self, other: &Self) -> Ordering {\n-        use ParamKindOrd::*;\n-        let to_int = |v| match v {\n-            Lifetime => 0,\n-            Infer | Type | Const => 1,\n-        };\n-\n-        to_int(*self).cmp(&to_int(*other))\n-    }\n-}\n-impl PartialOrd for ParamKindOrd {\n-    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        Some(self.cmp(other))\n-    }\n-}\n-impl PartialEq for ParamKindOrd {\n-    fn eq(&self, other: &Self) -> bool {\n-        self.cmp(other) == Ordering::Equal\n-    }\n+    TypeOrConst,\n }\n-impl Eq for ParamKindOrd {}\n \n impl fmt::Display for ParamKindOrd {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             ParamKindOrd::Lifetime => \"lifetime\".fmt(f),\n-            ParamKindOrd::Type => \"type\".fmt(f),\n-            ParamKindOrd::Const { .. } => \"const\".fmt(f),\n-            ParamKindOrd::Infer => \"infer\".fmt(f),\n+            ParamKindOrd::TypeOrConst => \"type and const\".fmt(f),\n         }\n     }\n }"}, {"sha": "6a0a1b08360133296069b79a284e80cfd2873707", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -839,10 +839,10 @@ fn validate_generic_param_order(\n         let (kind, bounds, span) = (&param.kind, &param.bounds, ident.span);\n         let (ord_kind, ident) = match &param.kind {\n             GenericParamKind::Lifetime => (ParamKindOrd::Lifetime, ident.to_string()),\n-            GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident.to_string()),\n+            GenericParamKind::Type { default: _ } => (ParamKindOrd::TypeOrConst, ident.to_string()),\n             GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n                 let ty = pprust::ty_to_string(ty);\n-                (ParamKindOrd::Const, format!(\"const {}: {}\", ident, ty))\n+                (ParamKindOrd::TypeOrConst, format!(\"const {}: {}\", ident, ty))\n             }\n         };\n         param_idents.push((kind, ord_kind, bounds, idx, ident));"}, {"sha": "acee9134fb96e48a26c3d4eb7a465c8d66ac6bf9", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -215,7 +215,11 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn const_to_opt_uint(&self, v: &'ll Value) -> Option<u64> {\n-        try_as_const_integral(v).map(|v| unsafe { llvm::LLVMConstIntGetZExtValue(v) })\n+        try_as_const_integral(v).and_then(|v| unsafe {\n+            let mut i = 0u64;\n+            let success = llvm::LLVMRustConstIntGetZExtValue(v, &mut i);\n+            success.then_some(i)\n+        })\n     }\n \n     fn const_to_opt_u128(&self, v: &'ll Value, sign_ext: bool) -> Option<u128> {"}, {"sha": "ce27dc5a5d1ea23c61a094fbc07150630c4663e7", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1096,7 +1096,7 @@ extern \"C\" {\n     pub fn LLVMConstInt(IntTy: &Type, N: c_ulonglong, SignExtend: Bool) -> &Value;\n     pub fn LLVMConstIntOfArbitraryPrecision(IntTy: &Type, Wn: c_uint, Ws: *const u64) -> &Value;\n     pub fn LLVMConstReal(RealTy: &Type, N: f64) -> &Value;\n-    pub fn LLVMConstIntGetZExtValue(ConstantVal: &ConstantInt) -> c_ulonglong;\n+    pub fn LLVMRustConstIntGetZExtValue(ConstantVal: &ConstantInt, Value: &mut u64) -> bool;\n     pub fn LLVMRustConstInt128Get(\n         ConstantVal: &ConstantInt,\n         SExt: bool,"}, {"sha": "574746e340b7bff7f041ccfb4d9f9dca62e4d7fe", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let size = bx.const_usize(dest.layout.size.bytes());\n \n                     // Use llvm.memset.p0i8.* to initialize all zero arrays\n-                    if bx.cx().const_to_opt_uint(v) == Some(0) {\n+                    if bx.cx().const_to_opt_u128(v, false) == Some(0) {\n                         let fill = bx.cx().const_u8(0);\n                         bx.memset(start, fill, size, dest.align, MemFlags::empty());\n                         return bx;"}, {"sha": "c0f93b7c3382a32d3aa4cdbd4cd7085dc8c0313e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -300,9 +300,9 @@ impl GenericArg<'_> {\n     pub fn to_ord(&self) -> ast::ParamKindOrd {\n         match self {\n             GenericArg::Lifetime(_) => ast::ParamKindOrd::Lifetime,\n-            GenericArg::Type(_) => ast::ParamKindOrd::Type,\n-            GenericArg::Const(_) => ast::ParamKindOrd::Const,\n-            GenericArg::Infer(_) => ast::ParamKindOrd::Infer,\n+            GenericArg::Type(_) | GenericArg::Const(_) | GenericArg::Infer(_) => {\n+                ast::ParamKindOrd::TypeOrConst\n+            }\n         }\n     }\n "}, {"sha": "6ee3c7d68213ee9382413d66975ee048ed9bb7f3", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1618,6 +1618,14 @@ extern \"C\" LLVMValueRef LLVMRustConstInBoundsGEP2(LLVMTypeRef Ty,\n   return wrap(ConstantExpr::getInBoundsGetElementPtr(unwrap(Ty), Val, IdxList));\n }\n \n+extern \"C\" bool LLVMRustConstIntGetZExtValue(LLVMValueRef CV, uint64_t *value) {\n+    auto C = unwrap<llvm::ConstantInt>(CV);\n+    if (C->getBitWidth() > 64)\n+      return false;\n+    *value = C->getZExtValue();\n+    return true;\n+}\n+\n // Returns true if both high and low were successfully set. Fails in case constant wasn\u2019t any of\n // the common sizes (1, 8, 16, 32, 64, 128 bits)\n extern \"C\" bool LLVMRustConstInt128Get(LLVMValueRef CV, bool sext, uint64_t *high, uint64_t *low)"}, {"sha": "0c8bdde9c8bceefcd8a32490da48aaa5f1f1b948", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -27,8 +27,9 @@ impl GenericParamDefKind {\n     pub fn to_ord(&self) -> ast::ParamKindOrd {\n         match self {\n             GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,\n-            GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,\n-            GenericParamDefKind::Const { .. } => ast::ParamKindOrd::Const,\n+            GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n+                ast::ParamKindOrd::TypeOrConst\n+            }\n         }\n     }\n "}, {"sha": "70e259b46bf20c7c990d9fe9679c02064543bbf2", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -65,8 +65,8 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n \n             // Iterate through the generics of the projection to find the one that corresponds to\n-            // the def_id that this query was called with. We filter to only const args here as a\n-            // precaution for if it's ever allowed to elide lifetimes in GAT's. It currently isn't\n+            // the def_id that this query was called with. We filter to only type and const args here\n+            // as a precaution for if it's ever allowed to elide lifetimes in GAT's. It currently isn't\n             // but it can't hurt to be safe ^^\n             if let ty::Projection(projection) = ty.kind() {\n                 let generics = tcx.generics_of(projection.item_def_id);"}, {"sha": "beeca1917a9af74e40516748a93c8aa26594c5ca", "filename": "library/std/src/sys/windows/path.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -198,14 +198,7 @@ fn parse_next_component(path: &OsStr, verbatim: bool) -> (&OsStr, &OsStr) {\n \n     match path.bytes().iter().position(|&x| separator(x)) {\n         Some(separator_start) => {\n-            let mut separator_end = separator_start + 1;\n-\n-            // a series of multiple separator characters is treated as a single separator,\n-            // except in verbatim paths\n-            while !verbatim && separator_end < path.len() && separator(path.bytes()[separator_end])\n-            {\n-                separator_end += 1;\n-            }\n+            let separator_end = separator_start + 1;\n \n             let component = &path.bytes()[..separator_start];\n "}, {"sha": "623c6236166da6e3ce7a6768fb66e157553dab24", "filename": "library/std/src/sys/windows/path/tests.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -31,16 +31,6 @@ fn test_parse_next_component() {\n         parse_next_component(OsStr::new(r\"servershare\"), false),\n         (OsStr::new(r\"servershare\"), OsStr::new(\"\"))\n     );\n-\n-    assert_eq!(\n-        parse_next_component(OsStr::new(r\"server/\\//\\/\\\\\\\\/////\\/share\"), false),\n-        (OsStr::new(r\"server\"), OsStr::new(r\"share\"))\n-    );\n-\n-    assert_eq!(\n-        parse_next_component(OsStr::new(r\"server\\\\\\\\\\\\\\\\\\\\\\\\\\\\share\"), true),\n-        (OsStr::new(r\"server\"), OsStr::new(r\"\\\\\\\\\\\\\\\\\\\\\\\\\\share\"))\n-    );\n }\n \n #[test]\n@@ -126,3 +116,22 @@ fn test_windows_prefix_components() {\n     assert_eq!(drive.as_os_str(), OsStr::new(\"C:\"));\n     assert_eq!(components.as_path(), Path::new(\"\"));\n }\n+\n+/// See #101358.\n+///\n+/// Note that the exact behaviour here may change in the future.\n+/// In which case this test will need to adjusted.\n+#[test]\n+fn broken_unc_path() {\n+    use crate::path::Component;\n+\n+    let mut components = Path::new(r\"\\\\foo\\\\bar\\\\\").components();\n+    assert_eq!(components.next(), Some(Component::RootDir));\n+    assert_eq!(components.next(), Some(Component::Normal(\"foo\".as_ref())));\n+    assert_eq!(components.next(), Some(Component::Normal(\"bar\".as_ref())));\n+\n+    let mut components = Path::new(\"//foo//bar//\").components();\n+    assert_eq!(components.next(), Some(Component::RootDir));\n+    assert_eq!(components.next(), Some(Component::Normal(\"foo\".as_ref())));\n+    assert_eq!(components.next(), Some(Component::Normal(\"bar\".as_ref())));\n+}"}, {"sha": "c6a686597e9c810f4f9c3192de750fc3632f66bc", "filename": "src/test/ui/codegen/issue-101585-128bit-repeat.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fcodegen%2Fissue-101585-128bit-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fcodegen%2Fissue-101585-128bit-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-101585-128bit-repeat.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for issue 101585.\n+// run-pass\n+\n+fn main() {\n+    fn min_array_ok() -> [i128; 1] {\n+        [i128::MIN]\n+    }\n+    assert_eq!(min_array_ok(), [-170141183460469231731687303715884105728i128]);\n+\n+    fn min_array_nok() -> [i128; 1] {\n+        [i128::MIN; 1]\n+    }\n+    assert_eq!(min_array_nok(), [-170141183460469231731687303715884105728i128]);\n+}"}, {"sha": "99122c6f5e3626bc458858e6329eaeccf75720f3", "filename": "src/test/ui/const-generics/argument_order.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,4 +1,4 @@\n-error: lifetime parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/argument_order.rs:6:32\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n@@ -11,7 +11,7 @@ LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^\n    |\n    = note: lifetime arguments must be provided before type arguments\n-   = help: reorder the arguments: lifetimes, then consts: `<'a, 'b, N, T, M, U>`\n+   = help: reorder the arguments: lifetimes, then type and consts: `<'a, 'b, N, T, M, U>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cb1cebe1f68a1742e42e75c2cc8831e2a9f9f428", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,5 +1,5 @@\n fn bar<const X: u8, 'a>(_: &'a ()) {\n-    //~^ ERROR lifetime parameters must be declared prior to const parameters\n+    //~^ ERROR lifetime parameters must be declared prior to type and const parameters\n }\n \n fn foo<const X: u8, T>(_: &T) {}"}, {"sha": "2c7a47bbc78cd5c9feb466894c7e741ae918c9b0", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,4 +1,4 @@\n-error: lifetime parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/const-param-before-other-params.rs:1:21\n    |\n LL | fn bar<const X: u8, 'a>(_: &'a ()) {"}, {"sha": "beaf7fc6001a94ecf334753e4f0d698976092b72", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,9 +1,9 @@\n // Checks that lifetimes cannot be interspersed between consts and types.\n \n struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-//~^ Error lifetime parameters must be declared prior to const parameters\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n \n struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-//~^ Error lifetime parameters must be declared prior to type parameters\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n \n fn main() {}"}, {"sha": "5cff61dd9fb91509eff715c0654efdddc5311507", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,10 +1,10 @@\n-error: lifetime parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/intermixed-lifetime.rs:3:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n \n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/intermixed-lifetime.rs:6:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);"}, {"sha": "f928fc9e75b739c72998facdf78476267c54884b", "filename": "src/test/ui/const-generics/defaults/param-order-err-pretty-prints-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,4 +1,4 @@\n struct Foo<const M: usize = 10, 'a>(&'a u32);\n-//~^ Error lifetime parameters must be declared prior to const parameters\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n \n fn main() {}"}, {"sha": "ba08b4646d0f4981816fa2ab3a401a97287ee91e", "filename": "src/test/ui/const-generics/defaults/param-order-err-pretty-prints-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,4 +1,4 @@\n-error: lifetime parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/param-order-err-pretty-prints-default.rs:1:33\n    |\n LL | struct Foo<const M: usize = 10, 'a>(&'a u32);"}, {"sha": "8e27749e8fc6b06d53d69492a19080c79167e61f", "filename": "src/test/ui/generics/issue-59508-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -8,7 +8,7 @@ struct A;\n \n impl A {\n     pub fn do_things<T, 'a, 'b: 'a>() {\n-    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+    //~^ ERROR lifetime parameters must be declared prior to type and const parameters\n         println!(\"panic\");\n     }\n }"}, {"sha": "1c510044f806fb1d45a26c9b5bf6702a82dce558", "filename": "src/test/ui/generics/issue-59508-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,4 +1,4 @@\n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/issue-59508-1.rs:10:25\n    |\n LL |     pub fn do_things<T, 'a, 'b: 'a>() {"}, {"sha": "de8f47d4cff89d29c6336d8b5a4c920ea0b1a8dd", "filename": "src/test/ui/generics/issue-59508.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.fixed?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -8,7 +8,7 @@ struct A;\n \n impl A {\n     pub fn do_things<'a, 'b: 'a, T>() {\n-    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+    //~^ ERROR lifetime parameters must be declared prior to type and const parameters\n         println!(\"panic\");\n     }\n }"}, {"sha": "a4c7d4ff26266e1f9bed72b658f8e4e26cc29093", "filename": "src/test/ui/generics/issue-59508.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -8,7 +8,7 @@ struct A;\n \n impl A {\n     pub fn do_things<T, 'a, 'b: 'a>() {\n-    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+    //~^ ERROR lifetime parameters must be declared prior to type and const parameters\n         println!(\"panic\");\n     }\n }"}, {"sha": "fd23b6276f92b5b55c33b941cdfad6c02cfe8627", "filename": "src/test/ui/generics/issue-59508.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,4 +1,4 @@\n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/issue-59508.rs:10:25\n    |\n LL |     pub fn do_things<T, 'a, 'b: 'a>() {"}, {"sha": "0e208818ed4593f6094221db58e3c53f6d339d5e", "filename": "src/test/ui/generics/issue-80512-param-reordering-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-80512-param-reordering-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-80512-param-reordering-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-80512-param-reordering-with-defaults.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,4 +1,4 @@\n #![crate_type = \"lib\"]\n \n struct S<T = (), 'a>(&'a T);\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters"}, {"sha": "70793a9c92084b040df1a5ad496142a2d30303d4", "filename": "src/test/ui/generics/issue-80512-param-reordering-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-80512-param-reordering-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Fissue-80512-param-reordering-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-80512-param-reordering-with-defaults.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,4 +1,4 @@\n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/issue-80512-param-reordering-with-defaults.rs:3:18\n    |\n LL | struct S<T = (), 'a>(&'a T);"}, {"sha": "d64b1b0b44f65f78acc71f56d22801f79dbfd971", "filename": "src/test/ui/generics/lifetime-before-type-params.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Flifetime-before-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Flifetime-before-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Flifetime-before-type-params.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,11 +1,11 @@\n #![allow(unused)]\n fn first<T, 'a, 'b>() {}\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n fn second<'a, T, 'b>() {}\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n fn third<T, U, 'a>() {}\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n fn fourth<'a, T, 'b, U, 'c, V>() {}\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n \n fn main() {}"}, {"sha": "84825eb4ceb211fe406e298d0c007e5cbf9d59ae", "filename": "src/test/ui/generics/lifetime-before-type-params.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Flifetime-before-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fgenerics%2Flifetime-before-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Flifetime-before-type-params.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,22 +1,22 @@\n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/lifetime-before-type-params.rs:2:13\n    |\n LL | fn first<T, 'a, 'b>() {}\n    |         ----^^--^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n \n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/lifetime-before-type-params.rs:4:18\n    |\n LL | fn second<'a, T, 'b>() {}\n    |          --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n \n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/lifetime-before-type-params.rs:6:16\n    |\n LL | fn third<T, U, 'a>() {}\n    |         -------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, T, U>`\n \n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/lifetime-before-type-params.rs:8:18\n    |\n LL | fn fourth<'a, T, 'b, U, 'c, V>() {}"}, {"sha": "a6106159805b20da2c3f8daf8b8ca9f099566cdb", "filename": "src/test/ui/parser/issues/issue-14303-enum.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-enum.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,6 +0,0 @@\n-enum X<'a, T, 'b> {\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n-    A(&'a &'b T)\n-}\n-\n-fn main() {}"}, {"sha": "55cef4cabacfe84b2f1b2d28bcb067142d1c3811", "filename": "src/test/ui/parser/issues/issue-14303-enum.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-enum.stderr?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,8 +0,0 @@\n-error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-enum.rs:1:15\n-   |\n-LL | enum X<'a, T, 'b> {\n-   |       --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "221bd311e7479ce34ad3ccdf3303c07b2934a769", "filename": "src/test/ui/parser/issues/issue-14303-fn-def.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-fn-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-fn-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-fn-def.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,4 +0,0 @@\n-fn foo<'a, T, 'b>(x: &'a T) {}\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n-\n-fn main() {}"}, {"sha": "bacc922969d9172bdaaf4f5bdec9f7f8369ca3df", "filename": "src/test/ui/parser/issues/issue-14303-fn-def.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-fn-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-fn-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-fn-def.stderr?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,8 +0,0 @@\n-error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-fn-def.rs:1:15\n-   |\n-LL | fn foo<'a, T, 'b>(x: &'a T) {}\n-   |       --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "4dc2c6660180722e1106cb0393ce4db547a5b26f", "filename": "src/test/ui/parser/issues/issue-14303-impl.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-impl.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,6 +0,0 @@\n-struct X<T>(T);\n-\n-impl<'a, T, 'b> X<T> {}\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n-\n-fn main() {}"}, {"sha": "d6be02f70fd2e8a4c8280720e466964c2c6aa997", "filename": "src/test/ui/parser/issues/issue-14303-impl.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-impl.stderr?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,8 +0,0 @@\n-error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-impl.rs:3:13\n-   |\n-LL | impl<'a, T, 'b> X<T> {}\n-   |     --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "89ef914aba238a7871241e1ccf7b860c87f7460e", "filename": "src/test/ui/parser/issues/issue-14303-path.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-path.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,13 +0,0 @@\n-mod foo {\n-    pub struct X<'a, 'b, 'c, T> {\n-        a: &'a str,\n-        b: &'b str,\n-        c: &'c str,\n-        t: T,\n-    }\n-}\n-\n-fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n-//~^ ERROR type provided when a lifetime was expected\n-\n-fn main() {}"}, {"sha": "841e63ecbe9d5128c40f5d27ebed08470bc57375", "filename": "src/test/ui/parser/issues/issue-14303-path.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-path.stderr?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,9 +0,0 @@\n-error[E0747]: type provided when a lifetime was expected\n-  --> $DIR/issue-14303-path.rs:10:37\n-   |\n-LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n-   |                                     ^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0747`."}, {"sha": "0bd10b4d08516e1eb2dc9b9909254903318c769e", "filename": "src/test/ui/parser/issues/issue-14303-struct.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-struct.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,6 +0,0 @@\n-struct X<'a, T, 'b> {\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n-    x: &'a &'b T\n-}\n-\n-fn main() {}"}, {"sha": "fa62a39f2416ca91d6724e9d47b38d3cdf7032f5", "filename": "src/test/ui/parser/issues/issue-14303-struct.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-struct.stderr?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,8 +0,0 @@\n-error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-struct.rs:1:17\n-   |\n-LL | struct X<'a, T, 'b> {\n-   |         --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "f253de92d92de7d542852e775ffdd8f07e7ca23a", "filename": "src/test/ui/parser/issues/issue-14303-trait.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-trait.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,4 +0,0 @@\n-trait Foo<'a, T, 'b> {}\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n-\n-fn main() {}"}, {"sha": "75cd67a9ded821093e17bb902b723ef7706476a5", "filename": "src/test/ui/parser/issues/issue-14303-trait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-trait.stderr?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,8 +0,0 @@\n-error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-trait.rs:1:18\n-   |\n-LL | trait Foo<'a, T, 'b> {}\n-   |          --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "82850d77aa921719e995eae174a74aab4456a1f7", "filename": "src/test/ui/parser/issues/issue-14303.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303.rs?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -0,0 +1,33 @@\n+enum Enum<'a, T, 'b> {\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n+    A(&'a &'b T)\n+}\n+\n+struct Struct<'a, T, 'b> {\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n+    x: &'a &'b T\n+}\n+\n+trait Trait<'a, T, 'b> {}\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n+\n+fn foo<'a, T, 'b>(x: &'a T) {}\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n+\n+struct Y<T>(T);\n+impl<'a, T, 'b> Y<T> {}\n+//~^ ERROR lifetime parameters must be declared prior to type and const parameters\n+\n+mod bar {\n+    pub struct X<'a, 'b, 'c, T> {\n+        a: &'a str,\n+        b: &'b str,\n+        c: &'c str,\n+        t: T,\n+    }\n+}\n+\n+fn bar<'a, 'b, 'c, T>(x: bar::X<'a, T, 'b, 'c>) {}\n+//~^ ERROR type provided when a lifetime was expected\n+\n+fn main() {}"}, {"sha": "f121107c0958f7b97705999271f4c81c70e16bb0", "filename": "src/test/ui/parser/issues/issue-14303.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -0,0 +1,39 @@\n+error: lifetime parameters must be declared prior to type and const parameters\n+  --> $DIR/issue-14303.rs:1:18\n+   |\n+LL | enum Enum<'a, T, 'b> {\n+   |          --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n+\n+error: lifetime parameters must be declared prior to type and const parameters\n+  --> $DIR/issue-14303.rs:6:22\n+   |\n+LL | struct Struct<'a, T, 'b> {\n+   |              --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n+\n+error: lifetime parameters must be declared prior to type and const parameters\n+  --> $DIR/issue-14303.rs:11:20\n+   |\n+LL | trait Trait<'a, T, 'b> {}\n+   |            --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n+\n+error: lifetime parameters must be declared prior to type and const parameters\n+  --> $DIR/issue-14303.rs:14:15\n+   |\n+LL | fn foo<'a, T, 'b>(x: &'a T) {}\n+   |       --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n+\n+error: lifetime parameters must be declared prior to type and const parameters\n+  --> $DIR/issue-14303.rs:18:13\n+   |\n+LL | impl<'a, T, 'b> Y<T> {}\n+   |     --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n+\n+error[E0747]: type provided when a lifetime was expected\n+  --> $DIR/issue-14303.rs:30:37\n+   |\n+LL | fn bar<'a, 'b, 'c, T>(x: bar::X<'a, T, 'b, 'c>) {}\n+   |                                     ^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "b1a49447d4601c9bcae50a6dc383f548379f3c45", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -1,22 +1,22 @@\n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/suggest-move-lifetimes.rs:1:13\n    |\n LL | struct A<T, 'a> {\n    |         ----^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, T>`\n \n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/suggest-move-lifetimes.rs:5:13\n    |\n LL | struct B<T, 'a, U> {\n    |         ----^^---- help: reorder the parameters: lifetimes, then consts and types: `<'a, T, U>`\n \n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/suggest-move-lifetimes.rs:10:16\n    |\n LL | struct C<T, U, 'a> {\n    |         -------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, T, U>`\n \n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime parameters must be declared prior to type and const parameters\n   --> $DIR/suggest-move-lifetimes.rs:15:16\n    |\n LL | struct D<T, U, 'a, 'b, V, 'c> {"}, {"sha": "b222e8142bab5148a5e24ae3b64bd0626420e9d0", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/395e56f39849defec8d6941f76625d286a6e5ddc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=395e56f39849defec8d6941f76625d286a6e5ddc", "patch": "@@ -121,7 +121,7 @@ LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=()\n    |                                                        ^^\n    |\n    = note: lifetime arguments must be provided before type arguments\n-   = help: reorder the arguments: lifetimes, then types: `<'a, 'b, 'c, T, U, V>`\n+   = help: reorder the arguments: lifetimes, then type and consts: `<'a, 'b, 'c, T, U, V>`\n \n error[E0747]: lifetime provided when a type was expected\n   --> $DIR/suggest-move-types.rs:82:56\n@@ -130,7 +130,7 @@ LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, '\n    |                                                        ^^\n    |\n    = note: lifetime arguments must be provided before type arguments\n-   = help: reorder the arguments: lifetimes, then types: `<'a, 'b, 'c, T, U, V>`\n+   = help: reorder the arguments: lifetimes, then type and consts: `<'a, 'b, 'c, T, U, V>`\n \n error: aborting due to 12 previous errors\n "}]}