{"sha": "c3f0c9419e39a52758f99c156c41969341ff59da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZjBjOTQxOWUzOWE1Mjc1OGY5OWMxNTZjNDE5NjkzNDFmZjU5ZGE=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2018-11-06T08:34:30Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2018-11-06T08:34:30Z"}, "message": "Add very useful documentation", "tree": {"sha": "710bbf3c6e155030e95bdd931225ba8a5c367f0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/710bbf3c6e155030e95bdd931225ba8a5c367f0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3f0c9419e39a52758f99c156c41969341ff59da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f0c9419e39a52758f99c156c41969341ff59da", "html_url": "https://github.com/rust-lang/rust/commit/c3f0c9419e39a52758f99c156c41969341ff59da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3f0c9419e39a52758f99c156c41969341ff59da/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b60efc1574fdba2504fdc903990a00893fd6d295", "url": "https://api.github.com/repos/rust-lang/rust/commits/b60efc1574fdba2504fdc903990a00893fd6d295", "html_url": "https://github.com/rust-lang/rust/commit/b60efc1574fdba2504fdc903990a00893fd6d295"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "b8f291f6d050365558e192f4c4f3d4113e155858", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3f0c9419e39a52758f99c156c41969341ff59da/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f0c9419e39a52758f99c156c41969341ff59da/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c3f0c9419e39a52758f99c156c41969341ff59da", "patch": "@@ -4771,16 +4771,24 @@ pub struct ParseIntError {\n     pub kind: IntErrorKind,\n }\n \n+/// Enum to store the various types of errors that can cause parsing an integer to fail.\n #[unstable(feature = \"int_error_matching\",\n            reason = \"it can be useful to match errors when making error messages \\\n                      for integer parsing\",\n            issue = \"22639\")]\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[non_exhaustive]\n pub enum IntErrorKind {\n+    /// Value being parsed is empty.\n+    /// Among other causes, this variant will be constructed when parsing an empty string.\n     Empty,\n+    /// Contains an invalid digit.\n+    /// Among other causes, this variant will be constructed when parsing a string that\n+    /// contains a letter.\n     InvalidDigit,\n+    /// Integer is too small to store in target integer type.\n     Overflow,\n+    /// Integer is too large to store in target integer type.\n     Underflow,\n }\n "}]}