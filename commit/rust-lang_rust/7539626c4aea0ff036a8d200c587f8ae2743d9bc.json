{"sha": "7539626c4aea0ff036a8d200c587f8ae2743d9bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1Mzk2MjZjNGFlYTBmZjAzNmE4ZDIwMGM1ODdmOGFlMjc0M2Q5YmM=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-03-01T23:00:04Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-03-01T23:00:04Z"}, "message": "Move `std::sys::unix::platform` to `std::sys::unix::ext`", "tree": {"sha": "e8edb75dc5e16dd6a16898ae85621ebc68e415df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8edb75dc5e16dd6a16898ae85621ebc68e415df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7539626c4aea0ff036a8d200c587f8ae2743d9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7539626c4aea0ff036a8d200c587f8ae2743d9bc", "html_url": "https://github.com/rust-lang/rust/commit/7539626c4aea0ff036a8d200c587f8ae2743d9bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7539626c4aea0ff036a8d200c587f8ae2743d9bc/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "html_url": "https://github.com/rust-lang/rust/commit/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "b0b17f2cee9932fcd6ddc8d3bd8577fec7d1f4fa", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7539626c4aea0ff036a8d200c587f8ae2743d9bc/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7539626c4aea0ff036a8d200c587f8ae2743d9bc/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=7539626c4aea0ff036a8d200c587f8ae2743d9bc", "patch": "@@ -70,8 +70,6 @@ cfg_if::cfg_if! {\n         #[allow(missing_docs)]\n         pub mod unix_ext {}\n     } else {\n-        // On other platforms like Windows document the bare bones of unix\n-        use crate::os::linux as platform;\n         #[path = \"unix/ext/mod.rs\"]\n         pub mod unix_ext;\n     }"}, {"sha": "21bdfe29578bfb0b871b7ea0c935a10e7b617300", "filename": "library/std/src/sys/unix/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7539626c4aea0ff036a8d200c587f8ae2743d9bc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7539626c4aea0ff036a8d200c587f8ae2743d9bc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs?ref=7539626c4aea0ff036a8d200c587f8ae2743d9bc", "patch": "@@ -2,11 +2,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use super::platform::fs::MetadataExt as _;\n use crate::fs::{self, OpenOptions, Permissions};\n use crate::io;\n use crate::path::Path;\n use crate::sys;\n-use crate::sys::platform::fs::MetadataExt as UnixMetadataExt;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n // Used for `File::read` on intra-doc links\n #[allow(unused_imports)]"}, {"sha": "e5048f7e545e0722d5a33877de597d4e16064f7b", "filename": "library/std/src/sys/unix/ext/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7539626c4aea0ff036a8d200c587f8ae2743d9bc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7539626c4aea0ff036a8d200c587f8ae2743d9bc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs?ref=7539626c4aea0ff036a8d200c587f8ae2743d9bc", "patch": "@@ -29,6 +29,42 @@\n #![doc(cfg(unix))]\n #![allow(missing_docs)]\n \n+cfg_if::cfg_if! {\n+    if #[cfg(doc)] {\n+        // Use linux as the default platform when documenting on other platforms like Windows\n+        use crate::os::linux as platform;\n+    } else {\n+        #[cfg(target_os = \"android\")]\n+        use crate::os::android as platform;\n+        #[cfg(target_os = \"dragonfly\")]\n+        use crate::os::dragonfly as platform;\n+        #[cfg(target_os = \"emscripten\")]\n+        use crate::os::emscripten as platform;\n+        #[cfg(target_os = \"freebsd\")]\n+        use crate::os::freebsd as platform;\n+        #[cfg(target_os = \"fuchsia\")]\n+        use crate::os::fuchsia as platform;\n+        #[cfg(target_os = \"haiku\")]\n+        use crate::os::haiku as platform;\n+        #[cfg(target_os = \"illumos\")]\n+        use crate::os::illumos as platform;\n+        #[cfg(target_os = \"ios\")]\n+        use crate::os::ios as platform;\n+        #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n+        use crate::os::linux as platform;\n+        #[cfg(target_os = \"macos\")]\n+        use crate::os::macos as platform;\n+        #[cfg(target_os = \"netbsd\")]\n+        use crate::os::netbsd as platform;\n+        #[cfg(target_os = \"openbsd\")]\n+        use crate::os::openbsd as platform;\n+        #[cfg(target_os = \"redox\")]\n+        use crate::os::redox as platform;\n+        #[cfg(target_os = \"solaris\")]\n+        use crate::os::solaris as platform;\n+    }\n+}\n+\n pub mod ffi;\n pub mod fs;\n pub mod io;"}, {"sha": "c292955cb4eea40213a7b6b67840c876924adc02", "filename": "library/std/src/sys/unix/ext/raw.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7539626c4aea0ff036a8d200c587f8ae2743d9bc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7539626c4aea0ff036a8d200c587f8ae2743d9bc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fraw.rs?ref=7539626c4aea0ff036a8d200c587f8ae2743d9bc", "patch": "@@ -24,10 +24,10 @@ pub type pid_t = i32;\n \n #[doc(inline)]\n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n-pub use crate::sys::platform::raw::pthread_t;\n+pub use super::platform::raw::pthread_t;\n #[doc(inline)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub use crate::sys::platform::raw::{blkcnt_t, time_t};\n+pub use super::platform::raw::{blkcnt_t, time_t};\n #[doc(inline)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub use crate::sys::platform::raw::{blksize_t, dev_t, ino_t, mode_t, nlink_t, off_t};\n+pub use super::platform::raw::{blksize_t, dev_t, ino_t, mode_t, nlink_t, off_t};"}, {"sha": "44328ffc22e5b6713a91c307c9cb4abf114d3144", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7539626c4aea0ff036a8d200c587f8ae2743d9bc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7539626c4aea0ff036a8d200c587f8ae2743d9bc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=7539626c4aea0ff036a8d200c587f8ae2743d9bc", "patch": "@@ -2,38 +2,6 @@\n \n use crate::io::ErrorKind;\n \n-#[cfg(any(doc, target_os = \"linux\"))]\n-pub use crate::os::linux as platform;\n-\n-#[cfg(all(not(doc), target_os = \"android\"))]\n-pub use crate::os::android as platform;\n-#[cfg(all(not(doc), target_os = \"dragonfly\"))]\n-pub use crate::os::dragonfly as platform;\n-#[cfg(all(not(doc), target_os = \"emscripten\"))]\n-pub use crate::os::emscripten as platform;\n-#[cfg(all(not(doc), target_os = \"freebsd\"))]\n-pub use crate::os::freebsd as platform;\n-#[cfg(all(not(doc), target_os = \"fuchsia\"))]\n-pub use crate::os::fuchsia as platform;\n-#[cfg(all(not(doc), target_os = \"haiku\"))]\n-pub use crate::os::haiku as platform;\n-#[cfg(all(not(doc), target_os = \"illumos\"))]\n-pub use crate::os::illumos as platform;\n-#[cfg(all(not(doc), target_os = \"ios\"))]\n-pub use crate::os::ios as platform;\n-#[cfg(all(not(doc), target_os = \"l4re\"))]\n-pub use crate::os::linux as platform;\n-#[cfg(all(not(doc), target_os = \"macos\"))]\n-pub use crate::os::macos as platform;\n-#[cfg(all(not(doc), target_os = \"netbsd\"))]\n-pub use crate::os::netbsd as platform;\n-#[cfg(all(not(doc), target_os = \"openbsd\"))]\n-pub use crate::os::openbsd as platform;\n-#[cfg(all(not(doc), target_os = \"redox\"))]\n-pub use crate::os::redox as platform;\n-#[cfg(all(not(doc), target_os = \"solaris\"))]\n-pub use crate::os::solaris as platform;\n-\n pub use self::rand::hashmap_random_keys;\n pub use libc::strlen;\n "}]}