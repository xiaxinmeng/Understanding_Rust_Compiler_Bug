{"sha": "fdb9f06880ddcf29513a8c2855c3c576cc461014", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYjlmMDY4ODBkZGNmMjk1MTNhOGMyODU1YzNjNTc2Y2M0NjEwMTQ=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-11-07T09:40:58Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-11-07T09:40:58Z"}, "message": "Store hex digits in a stack-allocated buffer", "tree": {"sha": "6488720c7f76604b1d58f7139337c6c483eb3522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6488720c7f76604b1d58f7139337c6c483eb3522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdb9f06880ddcf29513a8c2855c3c576cc461014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb9f06880ddcf29513a8c2855c3c576cc461014", "html_url": "https://github.com/rust-lang/rust/commit/fdb9f06880ddcf29513a8c2855c3c576cc461014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdb9f06880ddcf29513a8c2855c3c576cc461014/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c56db92d1f9b1a24de24cefd996c43c7b988b4c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56db92d1f9b1a24de24cefd996c43c7b988b4c3", "html_url": "https://github.com/rust-lang/rust/commit/c56db92d1f9b1a24de24cefd996c43c7b988b4c3"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "5bef4a6393d4eddf8bf9f3221991ddca6b8f01d0", "filename": "crates/ra_syntax/src/utils.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fdb9f06880ddcf29513a8c2855c3c576cc461014/crates%2Fra_syntax%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb9f06880ddcf29513a8c2855c3c576cc461014/crates%2Fra_syntax%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Futils.rs?ref=fdb9f06880ddcf29513a8c2855c3c576cc461014", "patch": "@@ -1,5 +1,7 @@\n use crate::{File, SyntaxKind, SyntaxNodeRef, WalkEvent};\n use std::fmt::Write;\n+use std::ops::Deref;\n+use std::str;\n \n /// Parse a file and create a string representation of the resulting parse tree.\n pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n@@ -78,3 +80,38 @@ pub(crate) fn validate_block_structure(root: SyntaxNodeRef) {\n         }\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct MutAsciiString<'a> {\n+    buf: &'a mut [u8],\n+    len: usize,\n+}\n+\n+impl<'a> MutAsciiString<'a> {\n+    pub fn new(buf: &'a mut [u8]) -> MutAsciiString<'a> {\n+        MutAsciiString { buf, len: 0 }\n+    }\n+\n+    pub fn as_str(&self) -> &str {\n+        str::from_utf8(&self.buf[..self.len]).unwrap()\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        self.len\n+    }\n+\n+    pub fn push(&mut self, c: char) {\n+        assert!(self.len() < self.buf.len());\n+        assert!(c.is_ascii());\n+\n+        self.buf[self.len] = c as u8;\n+        self.len += 1;\n+    }\n+}\n+\n+impl<'a> Deref for MutAsciiString<'a> {\n+    type Target = str;\n+    fn deref(&self) -> &str {\n+        self.as_str()\n+    }\n+}"}, {"sha": "b560e5e8555d615fd6716415a603fb10b737b1d9", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fdb9f06880ddcf29513a8c2855c3c576cc461014/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb9f06880ddcf29513a8c2855c3c576cc461014/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=fdb9f06880ddcf29513a8c2855c3c576cc461014", "patch": "@@ -5,6 +5,7 @@ use crate::{\n     ast::{self, AstNode},\n     File,\n     string_lexing::{self, CharComponentKind},\n+    utils::MutAsciiString,\n     yellow::{\n         SyntaxError,\n         SyntaxErrorKind::*,\n@@ -73,12 +74,18 @@ fn validate_char(node: ast::Char, errors: &mut Vec<SyntaxError>) {\n                     return;\n                 }\n \n-                let mut code = String::new();\n+                let mut buf = &mut [0; 6];\n+                let mut code = MutAsciiString::new(buf);\n                 let mut closed = false;\n                 for c in text[3..].chars() {\n                     assert!(!closed, \"no characters after escape is closed\");\n \n                     if c.is_digit(16) {\n+                        if code.len() == 6 {\n+                            errors.push(SyntaxError::new(OverlongUnicodeEscape, range));\n+                            return;\n+                        }\n+\n                         code.push(c);\n                     } else if c == '_' {\n                         // Reject leading _\n@@ -103,10 +110,6 @@ fn validate_char(node: ast::Char, errors: &mut Vec<SyntaxError>) {\n                     return;\n                 }\n \n-                if code.len() > 6 {\n-                    errors.push(SyntaxError::new(OverlongUnicodeEscape, range));\n-                }\n-\n                 match u32::from_str_radix(&code, 16) {\n                     Ok(code_u32) if code_u32 > 0x10FFFF => {\n                         errors.push(SyntaxError::new(UnicodeEscapeOutOfRange, range));"}]}