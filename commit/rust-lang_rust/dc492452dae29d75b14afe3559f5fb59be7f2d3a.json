{"sha": "dc492452dae29d75b14afe3559f5fb59be7f2d3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNDkyNDUyZGFlMjlkNzViMTRhZmUzNTU5ZjVmYjU5YmU3ZjJkM2E=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-12-13T17:36:35Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-01-19T19:24:08Z"}, "message": "Fix leak in btree_map::IntoIter when drop panics", "tree": {"sha": "3005b81d064c2a8bb8af93ac2cad49e126484292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3005b81d064c2a8bb8af93ac2cad49e126484292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc492452dae29d75b14afe3559f5fb59be7f2d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc492452dae29d75b14afe3559f5fb59be7f2d3a", "html_url": "https://github.com/rust-lang/rust/commit/dc492452dae29d75b14afe3559f5fb59be7f2d3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc492452dae29d75b14afe3559f5fb59be7f2d3a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d04790dd2e73f3faf08d528e3675e131585ec01", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d04790dd2e73f3faf08d528e3675e131585ec01", "html_url": "https://github.com/rust-lang/rust/commit/5d04790dd2e73f3faf08d528e3675e131585ec01"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "71ddfc4ef63b66e7657ad5dd6aa54075166c71ad", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc492452dae29d75b14afe3559f5fb59be7f2d3a/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc492452dae29d75b14afe3559f5fb59be7f2d3a/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=dc492452dae29d75b14afe3559f5fb59be7f2d3a", "patch": "@@ -1381,7 +1381,22 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n #[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n impl<K, V> Drop for IntoIter<K, V> {\n     fn drop(&mut self) {\n-        self.for_each(drop);\n+        struct DropGuard<'a, K, V>(&'a mut IntoIter<K, V>);\n+\n+        impl<'a, K, V> Drop for DropGuard<'a, K, V> {\n+            fn drop(&mut self) {\n+                // Continue the same loop we perform below. This only runs when unwinding, so we\n+                // don't have to care about panics this time (they'll abort).\n+                while let Some(_) = self.0.next() {}\n+            }\n+        }\n+\n+        while let Some(pair) = self.next() {\n+            let guard = DropGuard(self);\n+            drop(pair);\n+            mem::forget(guard);\n+        }\n+\n         unsafe {\n             let leaf_node = ptr::read(&self.front).into_node();\n             if leaf_node.is_shared_root() {"}, {"sha": "0729f341d8609907c049fed79b9ca442e41ac6f9", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dc492452dae29d75b14afe3559f5fb59be7f2d3a/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc492452dae29d75b14afe3559f5fb59be7f2d3a/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=dc492452dae29d75b14afe3559f5fb59be7f2d3a", "patch": "@@ -5,7 +5,9 @@ use std::fmt::Debug;\n use std::iter::FromIterator;\n use std::ops::Bound::{self, Excluded, Included, Unbounded};\n use std::ops::RangeBounds;\n+use std::panic::catch_unwind;\n use std::rc::Rc;\n+use std::sync::atomic::{AtomicU32, Ordering};\n \n use super::DeterministicRng;\n \n@@ -980,3 +982,29 @@ fn test_split_off_large_random_sorted() {\n     assert!(map.into_iter().eq(data.clone().into_iter().filter(|x| x.0 < key)));\n     assert!(right.into_iter().eq(data.into_iter().filter(|x| x.0 >= key)));\n }\n+\n+#[test]\n+fn test_into_iter_drop_leak() {\n+    static DROPS: AtomicU32 = AtomicU32::new(0);\n+\n+    struct D;\n+\n+    impl Drop for D {\n+        fn drop(&mut self) {\n+            if DROPS.fetch_add(1, Ordering::SeqCst) == 3 {\n+                panic!(\"panic in `drop`\");\n+            }\n+        }\n+    }\n+\n+    let mut map = BTreeMap::new();\n+    map.insert(\"a\", D);\n+    map.insert(\"b\", D);\n+    map.insert(\"c\", D);\n+    map.insert(\"d\", D);\n+    map.insert(\"e\", D);\n+\n+    catch_unwind(move || drop(map.into_iter())).ok();\n+\n+    assert_eq!(DROPS.load(Ordering::SeqCst), 5);\n+}"}]}