{"sha": "146cb8eda667e5d76bebdef3acc61adaeaa025b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NmNiOGVkYTY2N2U1ZDc2YmViZGVmM2FjYzYxYWRhZWFhMDI1YjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T13:49:58Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-15T16:50:43Z"}, "message": "or-patterns: remove hack from lowering.", "tree": {"sha": "fc8a56493348ad0587db8e7242eb378bc1f48241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc8a56493348ad0587db8e7242eb378bc1f48241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/146cb8eda667e5d76bebdef3acc61adaeaa025b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/146cb8eda667e5d76bebdef3acc61adaeaa025b0", "html_url": "https://github.com/rust-lang/rust/commit/146cb8eda667e5d76bebdef3acc61adaeaa025b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/146cb8eda667e5d76bebdef3acc61adaeaa025b0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60895fd1f9ad24ee41bb3dac67fc2c5f127ecdb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/60895fd1f9ad24ee41bb3dac67fc2c5f127ecdb4", "html_url": "https://github.com/rust-lang/rust/commit/60895fd1f9ad24ee41bb3dac67fc2c5f127ecdb4"}], "stats": {"total": 82, "additions": 19, "deletions": 63}, "files": [{"sha": "a5f08cd96061f9acfa970b7d74d095603590cb28", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/146cb8eda667e5d76bebdef3acc61adaeaa025b0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146cb8eda667e5d76bebdef3acc61adaeaa025b0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=146cb8eda667e5d76bebdef3acc61adaeaa025b0", "patch": "@@ -434,35 +434,6 @@ impl<'a> LoweringContext<'a> {\n                 visit::walk_pat(self, p)\n             }\n \n-            // HACK(or_patterns; Centril | dlrobertson): Avoid creating\n-            // HIR  nodes for `PatKind::Or` for the top level of a `ast::Arm`.\n-            // This is a temporary hack that should go away once we push down\n-            // `arm.pats: HirVec<P<Pat>>` -> `arm.pat: P<Pat>` to HIR. // Centril\n-            fn visit_arm(&mut self, arm: &'tcx Arm) {\n-                match &arm.pat.node {\n-                    PatKind::Or(pats) => pats.iter().for_each(|p| self.visit_pat(p)),\n-                    _ => self.visit_pat(&arm.pat),\n-                }\n-                walk_list!(self, visit_expr, &arm.guard);\n-                self.visit_expr(&arm.body);\n-                walk_list!(self, visit_attribute, &arm.attrs);\n-            }\n-\n-            // HACK(or_patterns; Centril | dlrobertson): Same as above. // Centril\n-            fn visit_expr(&mut self, e: &'tcx Expr) {\n-                if let ExprKind::Let(pat, scrutinee) = &e.node {\n-                    walk_list!(self, visit_attribute, e.attrs.iter());\n-                    match &pat.node {\n-                        PatKind::Or(pats) => pats.iter().for_each(|p| self.visit_pat(p)),\n-                        _ => self.visit_pat(&pat),\n-                    }\n-                    self.visit_expr(scrutinee);\n-                    self.visit_expr_post(e);\n-                    return;\n-                }\n-                visit::walk_expr(self, e)\n-            }\n-\n             fn visit_item(&mut self, item: &'tcx Item) {\n                 let hir_id = self.lctx.allocate_hir_id_counter(item.id);\n "}, {"sha": "d71dc53d104af9cdc51997dcc1fff5d8e2e22243", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/146cb8eda667e5d76bebdef3acc61adaeaa025b0/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146cb8eda667e5d76bebdef3acc61adaeaa025b0/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=146cb8eda667e5d76bebdef3acc61adaeaa025b0", "patch": "@@ -250,14 +250,14 @@ impl LoweringContext<'_> {\n         // 4. The return type of the block is `bool` which seems like what the user wanted.\n         let scrutinee = self.lower_expr(scrutinee);\n         let then_arm = {\n-            let pat = self.lower_pat_top_hack(pat);\n+            let pat = self.lower_pat(pat);\n             let expr = self.expr_bool(span, true);\n             self.arm(pat, P(expr))\n         };\n         let else_arm = {\n             let pat = self.pat_wild(span);\n             let expr = self.expr_bool(span, false);\n-            self.arm(hir_vec![pat], P(expr))\n+            self.arm(pat, P(expr))\n         };\n         hir::ExprKind::Match(\n             P(scrutinee),\n@@ -281,7 +281,7 @@ impl LoweringContext<'_> {\n             None => (self.expr_block_empty(span), false),\n             Some(els) => (self.lower_expr(els), true),\n         };\n-        let else_arm = self.arm(hir_vec![else_pat], P(else_expr));\n+        let else_arm = self.arm(else_pat, P(else_expr));\n \n         // Handle then + scrutinee:\n         let then_blk = self.lower_block(then, false);\n@@ -290,7 +290,7 @@ impl LoweringContext<'_> {\n             // `<pat> => <then>`:\n             ExprKind::Let(ref pat, ref scrutinee) => {\n                 let scrutinee = self.lower_expr(scrutinee);\n-                let pat = self.lower_pat_top_hack(pat);\n+                let pat = self.lower_pat(pat);\n                 (pat, scrutinee, hir::MatchSource::IfLetDesugar { contains_else_clause })\n             }\n             // `true => <then>`:\n@@ -307,7 +307,7 @@ impl LoweringContext<'_> {\n                 // let temporaries live outside of `cond`.\n                 let cond = self.expr_drop_temps(span_block, P(cond), ThinVec::new());\n                 let pat = self.pat_bool(span, true);\n-                (hir_vec![pat], cond, hir::MatchSource::IfDesugar { contains_else_clause })\n+                (pat, cond, hir::MatchSource::IfDesugar { contains_else_clause })\n             }\n         };\n         let then_arm = self.arm(then_pat, P(then_expr));\n@@ -331,7 +331,7 @@ impl LoweringContext<'_> {\n         let else_arm = {\n             let else_pat = self.pat_wild(span);\n             let else_expr = self.expr_break(span, ThinVec::new());\n-            self.arm(hir_vec![else_pat], else_expr)\n+            self.arm(else_pat, else_expr)\n         };\n \n         // Handle then + scrutinee:\n@@ -348,7 +348,7 @@ impl LoweringContext<'_> {\n                 //     }\n                 //   }\n                 let scrutinee = self.with_loop_condition_scope(|t| t.lower_expr(scrutinee));\n-                let pat = self.lower_pat_top_hack(pat);\n+                let pat = self.lower_pat(pat);\n                 (pat, scrutinee, hir::MatchSource::WhileLetDesugar, hir::LoopSource::WhileLet)\n             }\n             _ => {\n@@ -376,7 +376,7 @@ impl LoweringContext<'_> {\n                 let cond = self.expr_drop_temps(span_block, P(cond), ThinVec::new());\n                 // `true => <then>`:\n                 let pat = self.pat_bool(span, true);\n-                (hir_vec![pat], cond, hir::MatchSource::WhileDesugar, hir::LoopSource::While)\n+                (pat, cond, hir::MatchSource::WhileDesugar, hir::LoopSource::While)\n             }\n         };\n         let then_arm = self.arm(then_pat, P(then_expr));\n@@ -429,7 +429,7 @@ impl LoweringContext<'_> {\n         hir::Arm {\n             hir_id: self.next_id(),\n             attrs: self.lower_attrs(&arm.attrs),\n-            pats: self.lower_pat_top_hack(&arm.pat),\n+            pat: self.lower_pat(&arm.pat),\n             guard: match arm.guard {\n                 Some(ref x) => Some(hir::Guard::If(P(self.lower_expr(x)))),\n                 _ => None,\n@@ -439,16 +439,6 @@ impl LoweringContext<'_> {\n         }\n     }\n \n-    /// HACK(or_patterns; Centril | dlrobertson): For now we don't push down top level or-patterns\n-    /// `p | q` into `hir::PatKind::Or(...)` as post-lowering bits of the compiler are not ready\n-    /// to deal with it. This should by fixed by pushing it down to HIR and then HAIR.\n-    fn lower_pat_top_hack(&mut self, pat: &Pat) -> HirVec<P<hir::Pat>> {\n-        match pat.node {\n-            PatKind::Or(ref ps) => ps.iter().map(|x| self.lower_pat(x)).collect(),\n-            _ => hir_vec![self.lower_pat(pat)],\n-        }\n-    }\n-\n     pub(super) fn make_async_expr(\n         &mut self,\n         capture_clause: CaptureBy,\n@@ -597,7 +587,7 @@ impl LoweringContext<'_> {\n                 );\n                 P(this.expr(await_span, expr_break, ThinVec::new()))\n             });\n-            self.arm(hir_vec![ready_pat], break_x)\n+            self.arm(ready_pat, break_x)\n         };\n \n         // `::std::task::Poll::Pending => {}`\n@@ -608,7 +598,7 @@ impl LoweringContext<'_> {\n                 hir_vec![],\n             );\n             let empty_block = P(self.expr_block_empty(span));\n-            self.arm(hir_vec![pending_pat], empty_block)\n+            self.arm(pending_pat, empty_block)\n         };\n \n         let inner_match_stmt = {\n@@ -650,7 +640,7 @@ impl LoweringContext<'_> {\n         });\n \n         // mut pinned => loop { ... }\n-        let pinned_arm = self.arm(hir_vec![pinned_pat], loop_expr);\n+        let pinned_arm = self.arm(pinned_pat, loop_expr);\n \n         // match <expr> {\n         //     mut pinned => loop { .. }\n@@ -1084,15 +1074,15 @@ impl LoweringContext<'_> {\n                 ThinVec::new(),\n             ));\n             let some_pat = self.pat_some(pat.span, val_pat);\n-            self.arm(hir_vec![some_pat], assign)\n+            self.arm(some_pat, assign)\n         };\n \n         // `::std::option::Option::None => break`\n         let break_arm = {\n             let break_expr =\n                 self.with_loop_scope(e.id, |this| this.expr_break(e.span, ThinVec::new()));\n             let pat = self.pat_none(e.span);\n-            self.arm(hir_vec![pat], break_expr)\n+            self.arm(pat, break_expr)\n         };\n \n         // `mut iter`\n@@ -1163,7 +1153,7 @@ impl LoweringContext<'_> {\n         });\n \n         // `mut iter => { ... }`\n-        let iter_arm = self.arm(hir_vec![iter_pat], loop_expr);\n+        let iter_arm = self.arm(iter_pat, loop_expr);\n \n         // `match ::std::iter::IntoIterator::into_iter(<head>) { ... }`\n         let into_iter_expr = {\n@@ -1249,7 +1239,7 @@ impl LoweringContext<'_> {\n                 ThinVec::from(attrs.clone()),\n             ));\n             let ok_pat = self.pat_ok(span, val_pat);\n-            self.arm(hir_vec![ok_pat], val_expr)\n+            self.arm(ok_pat, val_expr)\n         };\n \n         // `Err(err) => #[allow(unreachable_code)]\n@@ -1284,7 +1274,7 @@ impl LoweringContext<'_> {\n             };\n \n             let err_pat = self.pat_err(try_span, err_local);\n-            self.arm(hir_vec![err_pat], ret_expr)\n+            self.arm(err_pat, ret_expr)\n         };\n \n         hir::ExprKind::Match(\n@@ -1479,14 +1469,11 @@ impl LoweringContext<'_> {\n         }\n     }\n \n-    /// HACK(or_patterns; Centril | dlrobertson): For now we don't push down top level or-patterns\n-    /// `p | q` into `hir::PatKind::Or(...)` as post-lowering bits of the compiler are not ready\n-    /// to deal with it. This should by fixed by pushing it down to HIR and then HAIR.\n-    fn arm(&mut self, pats: HirVec<P<hir::Pat>>, expr: P<hir::Expr>) -> hir::Arm {\n+    fn arm(&mut self, pat: P<hir::Pat>, expr: P<hir::Expr>) -> hir::Arm {\n         hir::Arm {\n             hir_id: self.next_id(),\n             attrs: hir_vec![],\n-            pats,\n+            pat,\n             guard: None,\n             span: expr.span,\n             body: expr,"}, {"sha": "4fc29d70540fd25e904b0ceb44710458e9d9d271", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/146cb8eda667e5d76bebdef3acc61adaeaa025b0/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146cb8eda667e5d76bebdef3acc61adaeaa025b0/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=146cb8eda667e5d76bebdef3acc61adaeaa025b0", "patch": "@@ -834,8 +834,6 @@ pub fn walk_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a Param) {\n \n pub fn walk_arm<'a, V: Visitor<'a>>(visitor: &mut V, arm: &'a Arm) {\n     visitor.visit_pat(&arm.pat);\n-    // NOTE(or_patterns; Centril | dlrobertson):\n-    // If you change this, also change the hack in `lowering.rs`.\n     walk_list!(visitor, visit_expr, &arm.guard);\n     visitor.visit_expr(&arm.body);\n     walk_list!(visitor, visit_attribute, &arm.attrs);"}]}