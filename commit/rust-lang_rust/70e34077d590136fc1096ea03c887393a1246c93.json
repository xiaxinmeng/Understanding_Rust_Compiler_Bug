{"sha": "70e34077d590136fc1096ea03c887393a1246c93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZTM0MDc3ZDU5MDEzNmZjMTA5NmVhMDNjODg3MzkzYTEyNDZjOTM=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-08-22T21:45:08Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-08-22T21:45:08Z"}, "message": "new lint: naive_bytecount", "tree": {"sha": "3053c98753c4a986c8c3fc824f860b629f795246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3053c98753c4a986c8c3fc824f860b629f795246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e34077d590136fc1096ea03c887393a1246c93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e34077d590136fc1096ea03c887393a1246c93", "html_url": "https://github.com/rust-lang/rust/commit/70e34077d590136fc1096ea03c887393a1246c93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e34077d590136fc1096ea03c887393a1246c93/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0acadb3c2117e31d46fac82ef48bf04e4ff320ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0acadb3c2117e31d46fac82ef48bf04e4ff320ba", "html_url": "https://github.com/rust-lang/rust/commit/0acadb3c2117e31d46fac82ef48bf04e4ff320ba"}], "stats": {"total": 120, "additions": 119, "deletions": 1}, "files": [{"sha": "7b72a6c1be7abed891e325c28dd83a22cc068241", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70e34077d590136fc1096ea03c887393a1246c93/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/70e34077d590136fc1096ea03c887393a1246c93/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=70e34077d590136fc1096ea03c887393a1246c93", "patch": "@@ -1,6 +1,8 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+* New lint: [`naive_bytecount`]\n+\n ## 0.0.154\n * Fix [`use_self`] triggering inside derives\n * Add support for linting an entire workspace with `cargo clippy --all`\n@@ -516,6 +518,7 @@ All notable changes to this project will be documented in this file.\n [`mut_mut`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#mut_mut\n [`mutex_atomic`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#mutex_atomic\n [`mutex_integer`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#mutex_integer\n+[`naive_bytecount`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#naive_bytecount\n [`needless_bool`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#needless_bool\n [`needless_borrow`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#needless_borrow\n [`needless_borrowed_reference`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#needless_borrowed_reference"}, {"sha": "bc043ec62d3b13b2726887417b96eb1b69904e2d", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70e34077d590136fc1096ea03c887393a1246c93/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/70e34077d590136fc1096ea03c887393a1246c93/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=70e34077d590136fc1096ea03c887393a1246c93", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 205 lints included in this crate:\n+There are 206 lints included in this crate:\n \n name                                                                                                                         | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -290,6 +290,7 @@ name\n [mut_mut](https://github.com/rust-lang-nursery/rust-clippy/wiki#mut_mut)                                                     | allow   | usage of double-mut refs, e.g. `&mut &mut ...`\n [mutex_atomic](https://github.com/rust-lang-nursery/rust-clippy/wiki#mutex_atomic)                                           | warn    | using a mutex where an atomic value could be used instead\n [mutex_integer](https://github.com/rust-lang-nursery/rust-clippy/wiki#mutex_integer)                                         | allow   | using a mutex for an integer type\n+[naive_bytecount](https://github.com/rust-lang-nursery/rust-clippy/wiki#naive_bytecount)                                     | warn    | use of naive `<slice>.filter(|&x| x == y).count()` to count byte values\n [needless_bool](https://github.com/rust-lang-nursery/rust-clippy/wiki#needless_bool)                                         | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n [needless_borrow](https://github.com/rust-lang-nursery/rust-clippy/wiki#needless_borrow)                                     | warn    | taking a reference that is going to be automatically dereferenced\n [needless_borrowed_reference](https://github.com/rust-lang-nursery/rust-clippy/wiki#needless_borrowed_reference)             | warn    | taking a needless borrowed reference"}, {"sha": "99987f84ba7d9f0c0306952801aee5904d70690d", "filename": "clippy_lints/src/bytecount.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/70e34077d590136fc1096ea03c887393a1246c93/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e34077d590136fc1096ea03c887393a1246c93/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=70e34077d590136fc1096ea03c887393a1246c93", "patch": "@@ -0,0 +1,80 @@\n+use consts::{constant, Constant};\n+use rustc_const_math::ConstInt;\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use utils::{match_type, paths, snippet, span_lint_and_sugg, walk_ptrs_ty};\n+\n+/// **What it does:** Checks for naive byte counts\n+///\n+/// **Why is this bad?** The [`bytecount`](https://crates.io/crates/bytecount)\n+/// crate has methods to count your bytes faster, especially for large slices.\n+///\n+/// **Known problems:** If you have predominantly small slices, the\n+/// `bytecount::count(..)` method may actually be slower. However, if you can\n+/// ensure that less than 2\u00b3\u00b2-1 matches arise, the `naive_count_32(..)` can be\n+/// faster in those cases.\n+///\n+/// **Example:**\n+///\n+/// ```rust\n+/// &my_data.filter(|&x| x == 0u8).count() // use bytecount::count instead\n+/// ```\n+declare_lint! {\n+    pub NAIVE_BYTECOUNT,\n+    Warn,\n+    \"use of naive `<slice>.filter(|&x| x == y).count()` to count byte values\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct ByteCount;\n+\n+impl LintPass for ByteCount {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NAIVE_BYTECOUNT)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if_let_chain!([\n+            let ExprMethodCall(ref count, _, ref count_args) = expr.node,\n+            count.name == \"count\",\n+            count_args.len() == 1,\n+            let ExprMethodCall(ref filter, _, ref filter_args) = count_args[0].node,\n+            filter.name == \"filter\",\n+            filter_args.len() == 2,\n+            let ExprClosure(_, _, body_id, _) = filter_args[1].node,\n+        ], {\n+            let body = cx.tcx.hir.body(body_id);\n+            if_let_chain!([\n+                let ExprBinary(ref op, ref l, ref r) = body.value.node,\n+                op.node == BiEq,\n+                match_type(cx,\n+                           walk_ptrs_ty(cx.tables.expr_ty(&filter_args[0])),\n+                           &paths::SLICE_ITER),\n+                let Some((Constant::Int(ConstInt::U8(needle)), _)) =\n+                        constant(cx, l).or_else(|| constant(cx, r))\n+            ], {\n+                let haystack = if let ExprMethodCall(ref path, _, ref args) =\n+                        filter_args[0].node {\n+                    let p = path.name;\n+                    if (p == \"iter\" || p == \"iter_mut\") && args.len() == 1 {\n+                        &args[0]\n+                    } else {\n+                        &filter_args[0]\n+                    }\n+                } else {\n+                    &filter_args[0]\n+                };\n+                span_lint_and_sugg(cx,\n+                                   NAIVE_BYTECOUNT,\n+                                   expr.span,\n+                                   \"You appear to be counting bytes the naive way\",\n+                                   \"Consider using the bytecount crate\",\n+                                   format!(\"bytecount::count({}, {})\",\n+                                            snippet(cx, haystack.span, \"..\"),\n+                                            needle));\n+            });\n+        });\n+    }\n+}"}, {"sha": "c4c949c792e55c6c53c5a092f8c6af2a74ff303e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70e34077d590136fc1096ea03c887393a1246c93/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e34077d590136fc1096ea03c887393a1246c93/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=70e34077d590136fc1096ea03c887393a1246c93", "patch": "@@ -74,6 +74,7 @@ pub mod bit_mask;\n pub mod blacklisted_name;\n pub mod block_in_if_condition;\n pub mod booleans;\n+pub mod bytecount;\n pub mod collapsible_if;\n pub mod copies;\n pub mod cyclomatic_complexity;\n@@ -321,6 +322,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n     reg.register_early_lint_pass(box literal_digit_grouping::LiteralDigitGrouping);\n     reg.register_late_lint_pass(box use_self::UseSelf);\n+    reg.register_late_lint_pass(box bytecount::ByteCount);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -388,6 +390,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n         booleans::LOGIC_BUG,\n+        bytecount::NAIVE_BYTECOUNT,\n         collapsible_if::COLLAPSIBLE_IF,\n         copies::IF_SAME_THEN_ELSE,\n         copies::IFS_SAME_COND,"}, {"sha": "060cf4f978efbc340947461be5805579234ff426", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70e34077d590136fc1096ea03c887393a1246c93/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e34077d590136fc1096ea03c887393a1246c93/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=70e34077d590136fc1096ea03c887393a1246c93", "patch": "@@ -69,6 +69,7 @@ pub const RESULT_ERR: [&'static str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&'static str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n pub const SERDE_DE_VISITOR: [&'static str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_INTO_VEC: [&'static str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n+pub const SLICE_ITER: [&str; 3] = [\"core\", \"slice\", \"Iter\"];\n pub const STRING: [&'static str; 3] = [\"alloc\", \"string\", \"String\"];\n pub const TO_OWNED: [&'static str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_STRING: [&'static str; 3] = [\"alloc\", \"string\", \"ToString\"];"}, {"sha": "880a86eba60f94e9343ddb7a0c027676248b40c8", "filename": "tests/ui/bytecount.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70e34077d590136fc1096ea03c887393a1246c93/tests%2Fui%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e34077d590136fc1096ea03c887393a1246c93/tests%2Fui%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.rs?ref=70e34077d590136fc1096ea03c887393a1246c93", "patch": "@@ -0,0 +1,14 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+fn main() {\n+    let x = vec![0_u8; 16];\n+\n+    let _ = x.iter().filter(|&&a| a == 0).count(); // naive byte count\n+\n+    let _ = (&x[..]).iter().filter(|&a| *a == 0).count(); // naive byte count\n+\n+    let _ = x.iter().filter(|a| **a > 0).count(); // not an equality count, OK.\n+\n+    let _ = x.iter().map(|a| a + 1).filter(|&a| a < 15).count(); // not a slice\n+}"}, {"sha": "818fa7eab1aabcbd5cd2cf10089e4d0fb2fedc34", "filename": "tests/ui/bytecount.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70e34077d590136fc1096ea03c887393a1246c93/tests%2Fui%2Fbytecount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70e34077d590136fc1096ea03c887393a1246c93/tests%2Fui%2Fbytecount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.stderr?ref=70e34077d590136fc1096ea03c887393a1246c93", "patch": "@@ -0,0 +1,16 @@\n+error: You appear to be counting bytes the naive way\n+ --> $DIR/bytecount.rs:7:13\n+  |\n+7 |     let _ = x.iter().filter(|&&a| a == 0).count(); // naive byte count\n+  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider using the bytecount crate: `bytecount::count(x, 0)`\n+  |\n+  = note: `-D naive-bytecount` implied by `-D warnings`\n+\n+error: You appear to be counting bytes the naive way\n+ --> $DIR/bytecount.rs:9:13\n+  |\n+9 |     let _ = (&x[..]).iter().filter(|&a| *a == 0).count(); // naive byte count\n+  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider using the bytecount crate: `bytecount::count((&x[..]), 0)`\n+\n+error: aborting due to 2 previous errors\n+"}]}