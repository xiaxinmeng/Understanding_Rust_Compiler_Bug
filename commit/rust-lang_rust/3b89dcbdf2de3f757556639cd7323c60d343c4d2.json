{"sha": "3b89dcbdf2de3f757556639cd7323c60d343c4d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiODlkY2JkZjJkZTNmNzU3NTU2NjM5Y2Q3MzIzYzYwZDM0M2M0ZDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-23T05:22:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-23T05:27:15Z"}, "message": "tutorial: Clean up literal section", "tree": {"sha": "9198338e41fab1ed6c4d0bef96aa36a23c79aab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9198338e41fab1ed6c4d0bef96aa36a23c79aab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b89dcbdf2de3f757556639cd7323c60d343c4d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b89dcbdf2de3f757556639cd7323c60d343c4d2", "html_url": "https://github.com/rust-lang/rust/commit/3b89dcbdf2de3f757556639cd7323c60d343c4d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b89dcbdf2de3f757556639cd7323c60d343c4d2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4081b40523c7059a742dc11193fea7356495c614", "url": "https://api.github.com/repos/rust-lang/rust/commits/4081b40523c7059a742dc11193fea7356495c614", "html_url": "https://github.com/rust-lang/rust/commit/4081b40523c7059a742dc11193fea7356495c614"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "3d649a07bf80550beaf07cbb6e69b0879877b62e", "filename": "doc/tutorial.md", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3b89dcbdf2de3f757556639cd7323c60d343c4d2/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b89dcbdf2de3f757556639cd7323c60d343c4d2/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=3b89dcbdf2de3f757556639cd7323c60d343c4d2", "patch": "@@ -408,34 +408,30 @@ error. Read about [single-variant enums](#single_variant_enum)\n further on if you need to create a type name that's not just a\n synonym.\n \n-## Numeric literals\n+## Literals\n \n Integers can be written in decimal (`144`), hexadecimal (`0x90`), and\n-binary (`0b10010000`) base.\n+binary (`0b10010000`) base. Each integral type has a corresponding literal\n+suffix that can be used to indicate the type of a literal: `i` for `int`,\n+`u` for `uint`, and `i8` for the `i8` type, etc.\n \n-If you write an integer literal without a suffix (`3`, `-500`, etc.),\n-the Rust compiler will try to infer its type based on type annotations\n-and function signatures in the surrounding program. In the absence of any type\n-annotations at all, Rust will assume that an unsuffixed integer literal has\n-type `int`. It's also possible to avoid any type ambiguity by writing integer\n-literals with a suffix. For example:\n+In the absense of an integer literal suffix, Rust will infer the\n+integer type based on type annotations and function signatures in the\n+surrounding program. In the absence of any type information at all,\n+Rust will assume that an unsuffixed integer literal has type\n+`int`.\n \n ~~~~\n-let x = 50;\n-log(error, x); // x is an int\n-let y = 100u;\n-log(error, y); // y is an uint\n+let a = 1;       // a is an int\n+let b = 10i;     // b is an int, due to the 'i' suffix\n+let c = 100u;    // c as a uint\n+let d = 1000i32; // d is an i32\n ~~~~\n \n-Note that, in Rust, no implicit conversion between integer types\n-happens. If you are adding one to a variable of type `uint`, saying\n-`+= 1u8` will give you a type error.\n-\n Floating point numbers are written `0.0`, `1e6`, or `2.1e-4`. Without\n-a suffix, the literal is assumed to be of type `float`. Suffixes `f` (32-bit)\n-and `l` (64-bit) can be used to create literals of a specific type.\n-\n-## Other literals\n+a suffix, the literal is assumed to be of type `float`. Suffixes `f32`\n+(32-bit) and `f64` (64-bit) can be used to create literals of a\n+specific type.\n \n The nil literal is written just like the type: `()`. The keywords\n `true` and `false` produce the boolean literals."}]}