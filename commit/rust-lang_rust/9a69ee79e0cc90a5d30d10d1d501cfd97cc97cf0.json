{"sha": "9a69ee79e0cc90a5d30d10d1d501cfd97cc97cf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNjllZTc5ZTBjYzkwYTVkMzBkMTBkMWQ1MDFjZmQ5N2NjOTdjZjA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-14T11:49:22Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-14T11:49:22Z"}, "message": "Clean up trans_obj.rs a bit\n\nAs a preparation to adding an arg to type_of_fn_full", "tree": {"sha": "014de421f166a40efe3eae31b8853703a326b1a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/014de421f166a40efe3eae31b8853703a326b1a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a69ee79e0cc90a5d30d10d1d501cfd97cc97cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a69ee79e0cc90a5d30d10d1d501cfd97cc97cf0", "html_url": "https://github.com/rust-lang/rust/commit/9a69ee79e0cc90a5d30d10d1d501cfd97cc97cf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a69ee79e0cc90a5d30d10d1d501cfd97cc97cf0/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cd24173d4e1ad230bc0325901f38f4b336c1652", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd24173d4e1ad230bc0325901f38f4b336c1652", "html_url": "https://github.com/rust-lang/rust/commit/6cd24173d4e1ad230bc0325901f38f4b336c1652"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "c50d817ba8f31473a2b258b4f10667b63e79e72e", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9a69ee79e0cc90a5d30d10d1d501cfd97cc97cf0/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a69ee79e0cc90a5d30d10d1d501cfd97cc97cf0/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=9a69ee79e0cc90a5d30d10d1d501cfd97cc97cf0", "patch": "@@ -88,8 +88,8 @@ fn trans_obj(cx: @local_ctxt, sp: span, ob: ast::_obj, ctor_id: ast::node_id,\n     // typarams, and fields.\n     let llbox_ty: TypeRef = T_ptr(T_empty_struct());\n \n-    if std::vec::len::<ast::ty_param>(ty_params) == 0u &&\n-           std::vec::len::<ty::arg>(arg_tys) == 0u {\n+    if vec::len(ty_params) == 0u &&\n+           vec::len(arg_tys) == 0u {\n         // If the object we're translating has no fields or type parameters,\n         // there's not much to do.\n \n@@ -124,7 +124,7 @@ fn trans_obj(cx: @local_ctxt, sp: span, ob: ast::_obj, ctor_id: ast::node_id,\n         let body_tydesc =\n             GEP_tup_like(bcx, body_ty, body, [0, abi::obj_body_elt_tydesc]);\n         bcx = body_tydesc.bcx;\n-        let ti = none::<@tydesc_info>;\n+        let ti = none;\n \n         let r =\n             GEP_tup_like(bcx, body_ty, body, [0, abi::obj_body_elt_typarams]);\n@@ -229,7 +229,7 @@ fn trans_anon_obj(bcx: @block_ctxt, sp: span, anon_obj: ast::anon_obj,\n     // methods, not inner ones.\n     let wrapper_obj: ast::_obj =\n         {fields:\n-             std::vec::map(ast_util::obj_field_from_anon_obj_field,\n+             vec::map(ast_util::obj_field_from_anon_obj_field,\n                            additional_fields),\n          methods: anon_obj.methods};\n \n@@ -287,7 +287,7 @@ fn trans_anon_obj(bcx: @block_ctxt, sp: span, anon_obj: ast::anon_obj,\n     // typarams, fields, and a pointer to our inner_obj.\n     let llbox_ty: TypeRef = T_ptr(T_empty_struct());\n \n-    if std::vec::len::<ast::anon_obj_field>(additional_fields) == 0u &&\n+    if vec::len(additional_fields) == 0u &&\n            anon_obj.inner_obj == none {\n \n         // If the object we're translating has no fields and no inner_obj,\n@@ -317,7 +317,7 @@ fn trans_anon_obj(bcx: @block_ctxt, sp: span, anon_obj: ast::anon_obj,\n         let body_tydesc =\n             GEP_tup_like(bcx, body_ty, body, [0, abi::obj_body_elt_tydesc]);\n         bcx = body_tydesc.bcx;\n-        let ti = none::<@tydesc_info>;\n+        let ti = none;\n         let body_td = get_tydesc(bcx, body_ty, true, tps_normal, ti).result;\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, ti);\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, ti);\n@@ -447,8 +447,7 @@ fn create_vtbl(cx: @local_ctxt, sp: span, outer_obj_ty: ty::t, ob: ast::_obj,\n \n         // Sort and process all the methods.\n         let meths =\n-            std::sort::merge_sort::<@ast::method>(bind ast_mthd_lteq(_, _),\n-                                                  ob.methods);\n+            std::sort::merge_sort(bind ast_mthd_lteq(_, _), ob.methods);\n \n         for m: @ast::method in meths {\n             llmethods +=\n@@ -483,16 +482,15 @@ fn create_vtbl(cx: @local_ctxt, sp: span, outer_obj_ty: ty::t, ob: ast::_obj,\n         // Filter out any methods that we don't need forwarding slots for\n         // because they're being overridden.\n         let f = bind filtering_fn(cx, _, ob.methods);\n-        meths = std::vec::filter_map::<vtbl_mthd, vtbl_mthd>(f, meths);\n+        meths = vec::filter_map(f, meths);\n \n         // And now add the additional ones, both overriding ones and entirely\n         // new ones.  These will just be normal methods.\n         for m: @ast::method in ob.methods { meths += [normal_mthd(m)]; }\n \n         // Sort all the methods and process them.\n         meths =\n-            std::sort::merge_sort::<vtbl_mthd>(bind vtbl_mthd_lteq(_, _),\n-                                               meths);\n+            std::sort::merge_sort(bind vtbl_mthd_lteq(_, _), meths);\n \n         // To create forwarding methods, we'll need a \"backwarding\" vtbl.  See\n         // create_backwarding_vtbl and process_bkwding_method for details.\n@@ -599,9 +597,7 @@ fn process_bkwding_mthd(cx: @local_ctxt, sp: span, m: @ty::method,\n         mangle_internal_name_by_path_and_seq(mcx.ccx, mcx.path, fn_name);\n \n     // Get the backwarding function's type and declare it.\n-    let llbackwarding_fn_ty: TypeRef =\n-        type_of_fn_full(cx.ccx, sp, m.proto, true, m.inputs, m.output,\n-                        std::vec::len::<ast::ty_param>(ty_params));\n+    let llbackwarding_fn_ty: TypeRef = type_of_meth(cx.ccx, sp, m, ty_params);\n     let llbackwarding_fn: ValueRef =\n         decl_internal_fastcall_fn(cx.ccx.llmod, s, llbackwarding_fn_ty);\n \n@@ -661,12 +657,7 @@ fn process_bkwding_mthd(cx: @local_ctxt, sp: span, m: @ty::method,\n         GEP(bcx, llouter_obj_vtbl, [C_int(0), C_int(ix as int)]);\n \n     // Set up the outer method to be called.\n-    let outer_mthd_ty = ty::method_ty_to_fn_ty(cx.ccx.tcx, *m);\n-    let llouter_mthd_ty =\n-        type_of_fn_full(bcx_ccx(bcx), sp,\n-                        ty::ty_fn_proto(bcx_tcx(bcx), outer_mthd_ty), true,\n-                        m.inputs, m.output,\n-                        std::vec::len::<ast::ty_param>(ty_params));\n+    let llouter_mthd_ty = type_of_meth(bcx_ccx(bcx), sp, m, ty_params);\n     llouter_mthd =\n         PointerCast(bcx, llouter_mthd, T_ptr(T_ptr(llouter_mthd_ty)));\n     llouter_mthd = Load(bcx, llouter_mthd);\n@@ -723,9 +714,7 @@ fn process_fwding_mthd(cx: @local_ctxt, sp: span, m: @ty::method,\n         mangle_internal_name_by_path_and_seq(mcx.ccx, mcx.path, fn_name);\n \n     // Get the forwarding function's type and declare it.\n-    let llforwarding_fn_ty: TypeRef =\n-        type_of_fn_full(cx.ccx, sp, m.proto, true, m.inputs, m.output,\n-                        std::vec::len::<ast::ty_param>(ty_params));\n+    let llforwarding_fn_ty = type_of_meth(cx.ccx, sp, m, ty_params);\n     let llforwarding_fn: ValueRef =\n         decl_internal_fastcall_fn(cx.ccx.llmod, s, llforwarding_fn_ty);\n \n@@ -819,12 +808,7 @@ fn process_fwding_mthd(cx: @local_ctxt, sp: span, m: @ty::method,\n         GEP(bcx, llinner_obj_vtbl, [C_int(0), C_int(ix as int)]);\n \n     // Set up the original method to be called.\n-    let orig_mthd_ty = ty::method_ty_to_fn_ty(cx.ccx.tcx, *m);\n-    let llorig_mthd_ty =\n-        type_of_fn_full(bcx_ccx(bcx), sp,\n-                        ty::ty_fn_proto(bcx_tcx(bcx), orig_mthd_ty), true,\n-                        m.inputs, m.output,\n-                        std::vec::len::<ast::ty_param>(ty_params));\n+    let llorig_mthd_ty = type_of_meth(bcx_ccx(bcx), sp, m, ty_params);\n     llorig_mthd = PointerCast(bcx, llorig_mthd, T_ptr(T_ptr(llorig_mthd_ty)));\n     llorig_mthd = Load(bcx, llorig_mthd);\n \n@@ -899,7 +883,7 @@ fn process_normal_mthd(cx: @local_ctxt, m: @ast::method, self_ty: ty::t,\n       ty::ty_fn(proto, inputs, output, _, _) {\n         llfnty =\n             type_of_fn_full(cx.ccx, m.span, proto, true, inputs, output,\n-                            std::vec::len::<ast::ty_param>(ty_params));\n+                            vec::len(ty_params));\n       }\n     }\n     let mcx: @local_ctxt =\n@@ -946,6 +930,13 @@ fn populate_self_stack(bcx: @block_ctxt, self_stack: ValueRef,\n \n     ret self_stack;\n }\n+\n+fn type_of_meth(ccx: @crate_ctxt, sp: span, m: @ty::method,\n+                tps: [ast::ty_param]) -> TypeRef {\n+    type_of_fn_full(ccx, sp, m.proto, true, m.inputs, m.output,\n+                    vec::len(tps))\n+}\n+\n //\n // Local Variables:\n // mode: rust"}]}