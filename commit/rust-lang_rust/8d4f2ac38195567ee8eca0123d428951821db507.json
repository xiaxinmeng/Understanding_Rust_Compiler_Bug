{"sha": "8d4f2ac38195567ee8eca0123d428951821db507", "node_id": "C_kwDOAAsO6NoAKDhkNGYyYWMzODE5NTU2N2VlOGVjYTAxMjNkNDI4OTUxODIxZGI1MDc", "commit": {"author": {"name": "dAxpeDDa", "email": "daxpedda@gmail.com", "date": "2022-08-09T01:26:08Z"}, "committer": {"name": "dAxpeDDa", "email": "daxpedda@gmail.com", "date": "2022-08-09T01:41:59Z"}, "message": "Use `check_proc_macro` for `missing_const_for_fn`", "tree": {"sha": "601e4881eea8fc6c3754b784c4a012f17abf280c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/601e4881eea8fc6c3754b784c4a012f17abf280c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d4f2ac38195567ee8eca0123d428951821db507", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3qx/rJh59vdc2+v9Q9YqPqOI5G8FAmLxu2oACgkQQ9YqPqOI\n5G8r/xAAr+doxjdf4YEe5h091JN1cOEXNo8Z/qWOjwR285MZKOjLgRCt3OoOej+v\n+5WXqBeQoe4PkukjPpp8PiUpJVPfewhZ4xDamx4Nj7fRb8hx0I8Cy+1BMYPhRxc6\nUnyBxCXq9S34CMbXsOtXNvZmzRWt/8K3QpE/JZJRznWPkWRGK6GMqEkZUy6E0PRY\nxcinOv1ipLs5OtKIKBmjFRP8YOcxrnpQgD4+di00HyWNBAgEgzCm2ucCtJn/J8mg\nzu001omBBbxV0hUdZBNtenY1Bxrgjf2ywiblOwVwnDtpCipM+R7TDuK5YcA7+Yhb\nC/9manMsuiWvA7AAeFtqN0elP2Blg9AtAbuAzt/oahmpaXKBrF4kRQVcfpXCIYZp\n90eG0HytTBef3S+03ar3szLynBsx97dY7Y7JcDhgUiG/OYpIL/L/fIDRgnLs1xM6\n7aUiwVf4aO2u9sD+VFAi9dNQKgEA4YZZAm7wdB8gVdU1jixqrxcGSoRLq0jItEMX\ndGXO5urCypKZPAvoJem6TsRBk2jX2pjzdlNMZPcEth1XPv50zU7sXbaAbYOcD3Eb\nNyEDsaqVaSgMrM7njnqf9Ni//QSffqTC3k5LxFfKlebZUr5gSpymgdaitNa9gdcM\nJ5WD+SwgbjT9jxgqO/Hr8l6Ign3UGeGHcjWyooyPa7O+kUznj0o=\n=YZno\n-----END PGP SIGNATURE-----", "payload": "tree 601e4881eea8fc6c3754b784c4a012f17abf280c\nparent 3af9072bc6ecd429f9101301166331dec21a1300\nauthor dAxpeDDa <daxpedda@gmail.com> 1660008368 +0200\ncommitter dAxpeDDa <daxpedda@gmail.com> 1660009319 +0200\n\nUse `check_proc_macro` for `missing_const_for_fn`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4f2ac38195567ee8eca0123d428951821db507", "html_url": "https://github.com/rust-lang/rust/commit/8d4f2ac38195567ee8eca0123d428951821db507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d4f2ac38195567ee8eca0123d428951821db507/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3af9072bc6ecd429f9101301166331dec21a1300", "url": "https://api.github.com/repos/rust-lang/rust/commits/3af9072bc6ecd429f9101301166331dec21a1300", "html_url": "https://github.com/rust-lang/rust/commit/3af9072bc6ecd429f9101301166331dec21a1300"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "bc304c081b9062ec2f121665a81db06a6a20d48b", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d4f2ac38195567ee8eca0123d428951821db507/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4f2ac38195567ee8eca0123d428951821db507/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=8d4f2ac38195567ee8eca0123d428951821db507", "patch": "@@ -1,7 +1,9 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::qualify_min_const_fn::is_min_const_fn;\n use clippy_utils::ty::has_drop;\n-use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, msrvs, trait_ref_of_method};\n+use clippy_utils::{\n+    fn_has_unsatisfiable_preds, is_entrypoint_fn, is_from_proc_macro, meets_msrv, msrvs, trait_ref_of_method,\n+};\n use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n@@ -86,10 +88,10 @@ impl MissingConstForFn {\n impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n     fn check_fn(\n         &mut self,\n-        cx: &LateContext<'_>,\n-        kind: FnKind<'_>,\n+        cx: &LateContext<'tcx>,\n+        kind: FnKind<'tcx>,\n         _: &FnDecl<'_>,\n-        _: &Body<'_>,\n+        body: &Body<'tcx>,\n         span: Span,\n         hir_id: HirId,\n     ) {\n@@ -144,6 +146,10 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n             }\n         }\n \n+        if is_from_proc_macro(cx, &(&kind, body, hir_id, span)) {\n+            return;\n+        }\n+\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv) {"}, {"sha": "1062f223912f55465829877305f731ad6475ecfa", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8d4f2ac38195567ee8eca0123d428951821db507/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4f2ac38195567ee8eca0123d428951821db507/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=8d4f2ac38195567ee8eca0123d428951821db507", "patch": "@@ -14,9 +14,9 @@\n \n use rustc_ast::ast::{IntTy, LitIntType, LitKind, StrStyle, UintTy};\n use rustc_hir::{\n-    Block, BlockCheckMode, Closure, Destination, Expr, ExprKind, FieldDef, FnHeader, Impl, ImplItem, ImplItemKind,\n-    IsAuto, Item, ItemKind, LoopSource, MatchSource, QPath, TraitItem, TraitItemKind, UnOp, UnsafeSource, Unsafety,\n-    Variant, VariantData, YieldSource,\n+    intravisit::FnKind, Block, BlockCheckMode, Body, Closure, Destination, Expr, ExprKind, FieldDef, FnHeader, HirId,\n+    Impl, ImplItem, ImplItemKind, IsAuto, Item, ItemKind, LoopSource, MatchSource, QPath, TraitItem, TraitItemKind,\n+    UnOp, UnsafeSource, Unsafety, Variant, VariantData, YieldSource,\n };\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty::TyCtxt;\n@@ -250,6 +250,27 @@ fn variant_search_pat(v: &Variant<'_>) -> (Pat, Pat) {\n     }\n }\n \n+fn fn_kind_pat(tcx: TyCtxt<'_>, kind: &FnKind<'_>, body: &Body<'_>, hir_id: HirId) -> (Pat, Pat) {\n+    let (start_pat, end_pat, visibility) = match kind {\n+        FnKind::ItemFn(.., header) => (\n+            fn_header_search_pat(*header),\n+            Pat::Str(\"\"),\n+            tcx.visibility(tcx.hir().local_def_id(hir_id)),\n+        ),\n+        FnKind::Method(.., sig) => (\n+            fn_header_search_pat(sig.header),\n+            Pat::Str(\"\"),\n+            tcx.visibility(tcx.hir().local_def_id(hir_id)),\n+        ),\n+        FnKind::Closure => return (Pat::Str(\"\"), expr_search_pat(tcx, &body.value).1),\n+    };\n+    if visibility.is_public() {\n+        (Pat::Str(\"pub\"), end_pat)\n+    } else {\n+        (start_pat, end_pat)\n+    }\n+}\n+\n pub trait WithSearchPat {\n     type Context: LintContext;\n     fn search_pat(&self, cx: &Self::Context) -> (Pat, Pat);\n@@ -277,6 +298,18 @@ impl_with_search_pat!(LateContext: ImplItem with impl_item_search_pat);\n impl_with_search_pat!(LateContext: FieldDef with field_def_search_pat);\n impl_with_search_pat!(LateContext: Variant with variant_search_pat);\n \n+impl<'cx> WithSearchPat for (&FnKind<'cx>, &Body<'cx>, HirId, Span) {\n+    type Context = LateContext<'cx>;\n+\n+    fn search_pat(&self, cx: &Self::Context) -> (Pat, Pat) {\n+        fn_kind_pat(cx.tcx, self.0, self.1, self.2)\n+    }\n+\n+    fn span(&self) -> Span {\n+        self.3\n+    }\n+}\n+\n /// Checks if the item likely came from a proc-macro.\n ///\n /// This should be called after `in_external_macro` and the initial pattern matching of the ast as"}, {"sha": "b950248ef942024d0e003fc5be16c8ba0c249101", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d4f2ac38195567ee8eca0123d428951821db507/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4f2ac38195567ee8eca0123d428951821db507/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=8d4f2ac38195567ee8eca0123d428951821db507", "patch": "@@ -3,12 +3,16 @@\n //! The .stderr output of this test should be empty. Otherwise it's a bug somewhere.\n \n // aux-build:helper.rs\n+// aux-build:../../auxiliary/proc_macro_with_span.rs\n \n #![warn(clippy::missing_const_for_fn)]\n #![feature(start)]\n #![feature(custom_inner_attributes)]\n \n extern crate helper;\n+extern crate proc_macro_with_span;\n+\n+use proc_macro_with_span::with_span;\n \n struct Game;\n \n@@ -119,3 +123,8 @@ mod const_fn_stabilized_after_msrv {\n         byte.is_ascii_digit();\n     }\n }\n+\n+with_span! {\n+    span\n+    fn dont_check_in_proc_macro() {}\n+}"}]}