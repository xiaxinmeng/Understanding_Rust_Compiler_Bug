{"sha": "76531befc4b0352247ada67bd225e8cf71ee5686", "node_id": "C_kwDOAAsO6NoAKDc2NTMxYmVmYzRiMDM1MjI0N2FkYTY3YmQyMjVlOGNmNzFlZTU2ODY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-25T05:35:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-25T05:35:27Z"}, "message": "Auto merge of #100436 - jyn514:macro-query-system, r=cjgillot\n\ntry and simplify some things in the query system", "tree": {"sha": "7768a806c4e9d6e1357fc26569b55a7ee3349dc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7768a806c4e9d6e1357fc26569b55a7ee3349dc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76531befc4b0352247ada67bd225e8cf71ee5686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76531befc4b0352247ada67bd225e8cf71ee5686", "html_url": "https://github.com/rust-lang/rust/commit/76531befc4b0352247ada67bd225e8cf71ee5686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76531befc4b0352247ada67bd225e8cf71ee5686/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b9bc6359973482891699bbc5eecedaf34a60503", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9bc6359973482891699bbc5eecedaf34a60503", "html_url": "https://github.com/rust-lang/rust/commit/9b9bc6359973482891699bbc5eecedaf34a60503"}, {"sha": "e188868014da60bc266024e60c914b532445c743", "url": "https://api.github.com/repos/rust-lang/rust/commits/e188868014da60bc266024e60c914b532445c743", "html_url": "https://github.com/rust-lang/rust/commit/e188868014da60bc266024e60c914b532445c743"}], "stats": {"total": 233, "additions": 120, "deletions": 113}, "files": [{"sha": "32a15413c6fefda6d6d9ff962faae45b82aa2fe7", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=76531befc4b0352247ada67bd225e8cf71ee5686", "patch": "@@ -400,10 +400,8 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     TokenStream::from(quote! {\n         #[macro_export]\n         macro_rules! rustc_query_append {\n-            ([$($macro:tt)*][$($other:tt)*]) => {\n+            ([$($macro:tt)*]) => {\n                 $($macro)* {\n-                    $($other)*\n-\n                     #query_stream\n                 }\n             }"}, {"sha": "5bf40f205953b28d18ba0733054c56a9ecfcd202", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=76531befc4b0352247ada67bd225e8cf71ee5686", "patch": "@@ -76,9 +76,9 @@ impl ProcessQueryValue<'_, Option<DeprecationEntry>> for Option<Deprecation> {\n }\n \n macro_rules! provide_one {\n-    (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => { table }) => {\n+    ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => { table }) => {\n         provide_one! {\n-            <$lt> $tcx, $def_id, $other, $cdata, $name => {\n+            $tcx, $def_id, $other, $cdata, $name => {\n                 $cdata\n                     .root\n                     .tables\n@@ -89,9 +89,9 @@ macro_rules! provide_one {\n             }\n         }\n     };\n-    (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => { table_direct }) => {\n+    ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => { table_direct }) => {\n         provide_one! {\n-            <$lt> $tcx, $def_id, $other, $cdata, $name => {\n+            $tcx, $def_id, $other, $cdata, $name => {\n                 // We don't decode `table_direct`, since it's not a Lazy, but an actual value\n                 $cdata\n                     .root\n@@ -102,11 +102,11 @@ macro_rules! provide_one {\n             }\n         }\n     };\n-    (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => $compute:block) => {\n-        fn $name<$lt>(\n-            $tcx: TyCtxt<$lt>,\n-            def_id_arg: ty::query::query_keys::$name<$lt>,\n-        ) -> ty::query::query_values::$name<$lt> {\n+    ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => $compute:block) => {\n+        fn $name<'tcx>(\n+            $tcx: TyCtxt<'tcx>,\n+            def_id_arg: ty::query::query_keys::$name<'tcx>,\n+        ) -> ty::query::query_values::$name<'tcx> {\n             let _prof_timer =\n                 $tcx.prof.generic_activity(concat!(\"metadata_decode_entry_\", stringify!($name)));\n \n@@ -130,11 +130,11 @@ macro_rules! provide_one {\n }\n \n macro_rules! provide {\n-    (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n+    ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n       $($name:ident => { $($compute:tt)* })*) => {\n         pub fn provide_extern(providers: &mut ExternProviders) {\n             $(provide_one! {\n-                <$lt> $tcx, $def_id, $other, $cdata, $name => { $($compute)* }\n+                $tcx, $def_id, $other, $cdata, $name => { $($compute)* }\n             })*\n \n             *providers = ExternProviders {\n@@ -187,7 +187,7 @@ impl IntoArgs for (CrateNum, SimplifiedType) {\n     }\n }\n \n-provide! { <'tcx> tcx, def_id, other, cdata,\n+provide! { tcx, def_id, other, cdata,\n     explicit_item_bounds => { table }\n     explicit_predicates_of => { table }\n     generics_of => { table }"}, {"sha": "156a9641272f57ecbc2b44f61cf4c1f3285b2ab6", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=76531befc4b0352247ada67bd225e8cf71ee5686", "patch": "@@ -143,7 +143,7 @@ impl DepKind {\n }\n \n macro_rules! define_dep_nodes {\n-    (<$tcx:tt>\n+    (\n     $(\n         [$($attrs:tt)*]\n         $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n@@ -179,7 +179,7 @@ macro_rules! define_dep_nodes {\n     );\n }\n \n-rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n+rustc_dep_node_append!([define_dep_nodes!][\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n "}, {"sha": "736ab69c81219059987ab1ffaaf736fd50bee441", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=76531befc4b0352247ada67bd225e8cf71ee5686", "patch": "@@ -173,7 +173,7 @@ macro_rules! opt_remap_env_constness {\n }\n \n macro_rules! define_callbacks {\n-    (<$tcx:tt>\n+    (\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n \n@@ -187,33 +187,33 @@ macro_rules! define_callbacks {\n         pub mod query_keys {\n             use super::*;\n \n-            $(pub type $name<$tcx> = $($K)*;)*\n+            $(pub type $name<'tcx> = $($K)*;)*\n         }\n         #[allow(nonstandard_style, unused_lifetimes)]\n         pub mod query_values {\n             use super::*;\n \n-            $(pub type $name<$tcx> = $V;)*\n+            $(pub type $name<'tcx> = $V;)*\n         }\n         #[allow(nonstandard_style, unused_lifetimes)]\n         pub mod query_storage {\n             use super::*;\n \n-            $(pub type $name<$tcx> = query_storage!([$($modifiers)*][$($K)*, $V]);)*\n+            $(pub type $name<'tcx> = query_storage!([$($modifiers)*][$($K)*, $V]);)*\n         }\n         #[allow(nonstandard_style, unused_lifetimes)]\n         pub mod query_stored {\n             use super::*;\n \n-            $(pub type $name<$tcx> = <query_storage::$name<$tcx> as QueryStorage>::Stored;)*\n+            $(pub type $name<'tcx> = <query_storage::$name<'tcx> as QueryStorage>::Stored;)*\n         }\n \n         #[derive(Default)]\n-        pub struct QueryCaches<$tcx> {\n-            $($(#[$attr])* pub $name: query_storage::$name<$tcx>,)*\n+        pub struct QueryCaches<'tcx> {\n+            $($(#[$attr])* pub $name: query_storage::$name<'tcx>,)*\n         }\n \n-        impl<$tcx> TyCtxtEnsure<$tcx> {\n+        impl<'tcx> TyCtxtEnsure<'tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n@@ -231,20 +231,20 @@ macro_rules! define_callbacks {\n             })*\n         }\n \n-        impl<$tcx> TyCtxt<$tcx> {\n+        impl<'tcx> TyCtxt<'tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             #[must_use]\n-            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<'tcx>\n             {\n                 self.at(DUMMY_SP).$name(key)\n             })*\n         }\n \n-        impl<$tcx> TyCtxtAt<$tcx> {\n+        impl<'tcx> TyCtxtAt<'tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<'tcx>\n             {\n                 let key = key.into_query_param();\n                 opt_remap_env_constness!([$($modifiers)*][key]);\n@@ -311,11 +311,11 @@ macro_rules! define_callbacks {\n             $($(#[$attr])*\n             fn $name(\n                 &'tcx self,\n-                tcx: TyCtxt<$tcx>,\n+                tcx: TyCtxt<'tcx>,\n                 span: Span,\n-                key: query_keys::$name<$tcx>,\n+                key: query_keys::$name<'tcx>,\n                 mode: QueryMode,\n-            ) -> Option<query_stored::$name<$tcx>>;)*\n+            ) -> Option<query_stored::$name<'tcx>>;)*\n         }\n     };\n }\n@@ -332,7 +332,7 @@ macro_rules! define_callbacks {\n // Queries marked with `fatal_cycle` do not need the latter implementation,\n // as they will raise an fatal error on query cycles instead.\n \n-rustc_query_append! { [define_callbacks!][<'tcx>] }\n+rustc_query_append! { [define_callbacks!] }\n \n mod sealed {\n     use super::{DefId, LocalDefId};"}, {"sha": "946bc34fea101878eb41931ee40e8c36624e9c7a", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=76531befc4b0352247ada67bd225e8cf71ee5686", "patch": "@@ -15,7 +15,6 @@ extern crate rustc_macros;\n #[macro_use]\n extern crate rustc_middle;\n \n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::AtomicU64;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::{self, DepKindStruct, SerializedDepNodeIndex};\n@@ -55,7 +54,7 @@ fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n     }\n }\n \n-rustc_query_append! { [define_queries!][<'tcx>] }\n+rustc_query_append! { [define_queries!] }\n \n impl<'tcx> Queries<'tcx> {\n     // Force codegen in the dyn-trait transformation in this crate."}, {"sha": "7b4ff850df67df933682ad957079f232bb000378", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 86, "deletions": 76, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=76531befc4b0352247ada67bd225e8cf71ee5686", "patch": "@@ -2,13 +2,18 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n+use crate::keys::Key;\n use crate::{on_disk_cache, Queries};\n-use rustc_middle::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n+use rustc_middle::dep_graph::{self, DepKind, DepNodeIndex, SerializedDepNodeIndex};\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::HasDepContext;\n-use rustc_query_system::query::{QueryContext, QueryJobId, QueryMap, QuerySideEffects};\n+use rustc_query_system::ich::StableHashingContext;\n+use rustc_query_system::query::{\n+    QueryContext, QueryJobId, QueryMap, QuerySideEffects, QueryStackFrame,\n+};\n \n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{Diagnostic, Handler};\n@@ -233,12 +238,58 @@ macro_rules! get_provider {\n     };\n }\n \n+pub(crate) fn create_query_frame<\n+    'tcx,\n+    K: Copy + Key + for<'a> HashStable<StableHashingContext<'a>>,\n+>(\n+    tcx: QueryCtxt<'tcx>,\n+    do_describe: fn(QueryCtxt<'tcx>, K) -> String,\n+    key: K,\n+    kind: DepKind,\n+    name: &'static str,\n+) -> QueryStackFrame {\n+    // Disable visible paths printing for performance reasons.\n+    // Showing visible path instead of any path is not that important in production.\n+    let description = ty::print::with_no_visible_paths!(\n+        // Force filename-line mode to avoid invoking `type_of` query.\n+        ty::print::with_forced_impl_filename_line!(do_describe(tcx, key))\n+    );\n+    let description =\n+        if tcx.sess.verbose() { format!(\"{} [{}]\", description, name) } else { description };\n+    let span = if kind == dep_graph::DepKind::def_span {\n+        // The `def_span` query is used to calculate `default_span`,\n+        // so exit to avoid infinite recursion.\n+        None\n+    } else {\n+        Some(key.default_span(*tcx))\n+    };\n+    let def_kind = if kind == dep_graph::DepKind::opt_def_kind {\n+        // Try to avoid infinite recursion.\n+        None\n+    } else {\n+        key.key_as_def_id()\n+            .and_then(|def_id| def_id.as_local())\n+            .and_then(|def_id| tcx.opt_def_kind(def_id))\n+    };\n+    let hash = || {\n+        tcx.with_stable_hashing_context(|mut hcx| {\n+            let mut hasher = StableHasher::new();\n+            std::mem::discriminant(&kind).hash_stable(&mut hcx, &mut hasher);\n+            key.hash_stable(&mut hcx, &mut hasher);\n+            hasher.finish::<u64>()\n+        })\n+    };\n+\n+    QueryStackFrame::new(name, description, span, def_kind, hash)\n+}\n+\n+// NOTE: `$V` isn't used here, but we still need to match on it so it can be passed to other macros\n+// invoked by `rustc_query_append`.\n macro_rules! define_queries {\n-    (<$tcx:tt>\n+    (\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n         define_queries_struct! {\n-            tcx: $tcx,\n             input: ($(([$($modifiers)*] [$($attr)*] [$name]))*)\n         }\n \n@@ -247,88 +298,51 @@ macro_rules! define_queries {\n \n             // Create an eponymous constructor for each query.\n             $(#[allow(nonstandard_style)] $(#[$attr])*\n-            pub fn $name<$tcx>(tcx: QueryCtxt<$tcx>, key: query_keys::$name<$tcx>) -> QueryStackFrame {\n+            pub fn $name<'tcx>(tcx: QueryCtxt<'tcx>, key: <queries::$name<'tcx> as QueryConfig>::Key) -> QueryStackFrame {\n                 let kind = dep_graph::DepKind::$name;\n                 let name = stringify!($name);\n-                // Disable visible paths printing for performance reasons.\n-                // Showing visible path instead of any path is not that important in production.\n-                let description = ty::print::with_no_visible_paths!(\n-                    // Force filename-line mode to avoid invoking `type_of` query.\n-                    ty::print::with_forced_impl_filename_line!(\n-                        queries::$name::describe(tcx, key)\n-                    )\n-                );\n-                let description = if tcx.sess.verbose() {\n-                    format!(\"{} [{}]\", description, name)\n-                } else {\n-                    description\n-                };\n-                let span = if kind == dep_graph::DepKind::def_span {\n-                    // The `def_span` query is used to calculate `default_span`,\n-                    // so exit to avoid infinite recursion.\n-                    None\n-                } else {\n-                    Some(key.default_span(*tcx))\n-                };\n-                let def_kind = if kind == dep_graph::DepKind::opt_def_kind {\n-                    // Try to avoid infinite recursion.\n-                    None\n-                } else {\n-                    key.key_as_def_id()\n-                        .and_then(|def_id| def_id.as_local())\n-                        .and_then(|def_id| tcx.opt_def_kind(def_id))\n-                };\n-                let hash = || {\n-                    tcx.with_stable_hashing_context(|mut hcx|{\n-                        let mut hasher = StableHasher::new();\n-                        std::mem::discriminant(&kind).hash_stable(&mut hcx, &mut hasher);\n-                        key.hash_stable(&mut hcx, &mut hasher);\n-                        hasher.finish::<u64>()\n-                    })\n-                };\n-\n-                QueryStackFrame::new(name, description, span, def_kind, hash)\n+                $crate::plumbing::create_query_frame(tcx, queries::$name::describe, key, kind, name)\n             })*\n         }\n \n         #[allow(nonstandard_style)]\n         mod queries {\n             use std::marker::PhantomData;\n \n-            $(pub struct $name<$tcx> {\n-                data: PhantomData<&$tcx ()>\n+            $(pub struct $name<'tcx> {\n+                data: PhantomData<&'tcx ()>\n             })*\n         }\n \n-        $(impl<$tcx> QueryConfig for queries::$name<$tcx> {\n-            type Key = query_keys::$name<$tcx>;\n-            type Value = query_values::$name<$tcx>;\n-            type Stored = query_stored::$name<$tcx>;\n+        $(impl<'tcx> QueryConfig for queries::$name<'tcx> {\n+            type Key = query_keys::$name<'tcx>;\n+            type Value = query_values::$name<'tcx>;\n+            type Stored = query_stored::$name<'tcx>;\n             const NAME: &'static str = stringify!($name);\n         }\n \n-        impl<$tcx> QueryDescription<QueryCtxt<$tcx>> for queries::$name<$tcx> {\n-            rustc_query_description! { $name<$tcx> }\n+        impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n+            rustc_query_description! { $name<'tcx> }\n \n-            type Cache = query_storage::$name<$tcx>;\n+            type Cache = query_storage::$name<'tcx>;\n \n             #[inline(always)]\n-            fn query_state<'a>(tcx: QueryCtxt<$tcx>) -> &'a QueryState<Self::Key>\n-                where QueryCtxt<$tcx>: 'a\n+            fn query_state<'a>(tcx: QueryCtxt<'tcx>) -> &'a QueryState<Self::Key>\n+                where QueryCtxt<'tcx>: 'a\n             {\n                 &tcx.queries.$name\n             }\n \n             #[inline(always)]\n-            fn query_cache<'a>(tcx: QueryCtxt<$tcx>) -> &'a Self::Cache\n+            fn query_cache<'a>(tcx: QueryCtxt<'tcx>) -> &'a Self::Cache\n                 where 'tcx:'a\n             {\n                 &tcx.query_caches.$name\n             }\n \n             #[inline]\n             fn make_vtable(tcx: QueryCtxt<'tcx>, key: &Self::Key) ->\n-                QueryVTable<QueryCtxt<$tcx>, Self::Key, Self::Value>\n+                QueryVTable<QueryCtxt<'tcx>, Self::Key, Self::Value>\n             {\n                 let compute = get_provider!([$($modifiers)*][tcx, $name, key]);\n                 let cache_on_disk = Self::cache_on_disk(tcx.tcx, key);\n@@ -349,7 +363,6 @@ macro_rules! define_queries {\n         mod query_callbacks {\n             use super::*;\n             use rustc_middle::dep_graph::DepNode;\n-            use rustc_middle::ty::query::query_keys;\n             use rustc_query_system::dep_graph::DepNodeParams;\n             use rustc_query_system::query::{force_query, QueryDescription};\n             use rustc_query_system::dep_graph::FingerprintStyle;\n@@ -411,7 +424,7 @@ macro_rules! define_queries {\n                 let is_eval_always = is_eval_always!([$($modifiers)*]);\n \n                 let fingerprint_style =\n-                    <query_keys::$name<'_> as DepNodeParams<TyCtxt<'_>>>::fingerprint_style();\n+                    <<queries::$name<'_> as QueryConfig>::Key as DepNodeParams<TyCtxt<'_>>>::fingerprint_style();\n \n                 if is_anon || !fingerprint_style.reconstructible() {\n                     return DepKindStruct {\n@@ -424,8 +437,8 @@ macro_rules! define_queries {\n                 }\n \n                 #[inline(always)]\n-                fn recover<'tcx>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> Option<query_keys::$name<'tcx>> {\n-                    <query_keys::$name<'_> as DepNodeParams<TyCtxt<'_>>>::recover(tcx, &dep_node)\n+                fn recover<'tcx>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> Option<<queries::$name<'tcx> as QueryConfig>::Key> {\n+                    <<queries::$name<'_> as QueryConfig>::Key as DepNodeParams<TyCtxt<'_>>>::recover(tcx, &dep_node)\n                 }\n \n                 fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: DepNode) -> bool {\n@@ -465,28 +478,25 @@ macro_rules! define_queries {\n     }\n }\n \n-// FIXME(eddyb) this macro (and others?) use `$tcx` and `'tcx` interchangeably.\n-// We should either not take `$tcx` at all and use `'tcx` everywhere, or use\n-// `$tcx` everywhere (even if that isn't necessary due to lack of hygiene).\n macro_rules! define_queries_struct {\n-    (tcx: $tcx:tt,\n+    (\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n-        pub struct Queries<$tcx> {\n+        pub struct Queries<'tcx> {\n             local_providers: Box<Providers>,\n             extern_providers: Box<ExternProviders>,\n \n-            pub on_disk_cache: Option<OnDiskCache<$tcx>>,\n+            pub on_disk_cache: Option<OnDiskCache<'tcx>>,\n \n             jobs: AtomicU64,\n \n-            $($(#[$attr])*  $name: QueryState<query_keys::$name<$tcx>>,)*\n+            $($(#[$attr])*  $name: QueryState<<queries::$name<'tcx> as QueryConfig>::Key>,)*\n         }\n \n-        impl<$tcx> Queries<$tcx> {\n+        impl<'tcx> Queries<'tcx> {\n             pub fn new(\n                 local_providers: Providers,\n                 extern_providers: ExternProviders,\n-                on_disk_cache: Option<OnDiskCache<$tcx>>,\n+                on_disk_cache: Option<OnDiskCache<'tcx>>,\n             ) -> Self {\n                 Queries {\n                     local_providers: Box::new(local_providers),\n@@ -498,8 +508,8 @@ macro_rules! define_queries_struct {\n             }\n \n             pub(crate) fn try_collect_active_jobs(\n-                &$tcx self,\n-                tcx: TyCtxt<$tcx>,\n+                &'tcx self,\n+                tcx: TyCtxt<'tcx>,\n             ) -> Option<QueryMap> {\n                 let tcx = QueryCtxt { tcx, queries: self };\n                 let mut jobs = QueryMap::default();\n@@ -532,13 +542,13 @@ macro_rules! define_queries_struct {\n             #[tracing::instrument(level = \"trace\", skip(self, tcx))]\n             fn $name(\n                 &'tcx self,\n-                tcx: TyCtxt<$tcx>,\n+                tcx: TyCtxt<'tcx>,\n                 span: Span,\n-                key: query_keys::$name<$tcx>,\n+                key: <queries::$name<'tcx> as QueryConfig>::Key,\n                 mode: QueryMode,\n-            ) -> Option<query_stored::$name<$tcx>> {\n+            ) -> Option<query_stored::$name<'tcx>> {\n                 let qcx = QueryCtxt { tcx, queries: self };\n-                get_query::<queries::$name<$tcx>, _>(qcx, span, key, mode)\n+                get_query::<queries::$name<'tcx>, _>(qcx, span, key, mode)\n             })*\n         }\n     };"}, {"sha": "3458675094713c4ba1b84c696320e3d38899b8b8", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76531befc4b0352247ada67bd225e8cf71ee5686/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=76531befc4b0352247ada67bd225e8cf71ee5686", "patch": "@@ -306,7 +306,7 @@ pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n     let mut string_cache = QueryKeyStringCache::new();\n \n     macro_rules! alloc_once {\n-        (<$tcx:tt>\n+        (\n             $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident($K:ty) -> $V:ty,)*\n         ) => {\n             $({\n@@ -320,5 +320,5 @@ pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n         }\n     }\n \n-    rustc_query_append! { [alloc_once!][<'tcx>] }\n+    rustc_query_append! { [alloc_once!] }\n }"}]}