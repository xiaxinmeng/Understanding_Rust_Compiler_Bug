{"sha": "f41b363ea315509040a20e59acae97955dc8e601", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MWIzNjNlYTMxNTUwOTA0MGEyMGU1OWFjYWU5Nzk1NWRjOGU2MDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-06T20:16:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-30T21:02:46Z"}, "message": "Update libtest for single-threaded emscripten support", "tree": {"sha": "d9a6305d212ad8d15a3f1a881f9dddf4fe2318a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9a6305d212ad8d15a3f1a881f9dddf4fe2318a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f41b363ea315509040a20e59acae97955dc8e601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f41b363ea315509040a20e59acae97955dc8e601", "html_url": "https://github.com/rust-lang/rust/commit/f41b363ea315509040a20e59acae97955dc8e601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f41b363ea315509040a20e59acae97955dc8e601/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8b50f0eda08e19e7c96377681f82ac17c76775d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b50f0eda08e19e7c96377681f82ac17c76775d", "html_url": "https://github.com/rust-lang/rust/commit/b8b50f0eda08e19e7c96377681f82ac17c76775d"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "49a7f6589d2b60ff9b8911f50d1931d299948817", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 53, "deletions": 16, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f41b363ea315509040a20e59acae97955dc8e601/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41b363ea315509040a20e59acae97955dc8e601/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f41b363ea315509040a20e59acae97955dc8e601", "patch": "@@ -1182,26 +1182,63 @@ pub fn run_test(opts: &TestOpts,\n             }\n         }\n \n-        thread::spawn(move || {\n-            let data = Arc::new(Mutex::new(Vec::new()));\n-            let data2 = data.clone();\n-            let cfg = thread::Builder::new().name(match desc.name {\n-                DynTestName(ref name) => name.clone(),\n-                StaticTestName(name) => name.to_owned(),\n+        // If the platform is single-threaded we're just going to run\n+        // the test synchronously, regardless of the concurrency\n+        // level.\n+        let supports_threads = !cfg!(target_os = \"emscripten\");\n+\n+        // Buffer for capturing standard I/O\n+        let data = Arc::new(Mutex::new(Vec::new()));\n+        let data2 = data.clone();\n+\n+        if supports_threads {\n+            thread::spawn(move || {\n+                let cfg = thread::Builder::new().name(match desc.name {\n+                    DynTestName(ref name) => name.clone(),\n+                    StaticTestName(name) => name.to_owned(),\n+                });\n+\n+                let result_guard = cfg.spawn(move || {\n+                    if !nocapture {\n+                        io::set_print(box Sink(data2.clone()));\n+                        io::set_panic(box Sink(data2));\n+                    }\n+                    testfn()\n+                })\n+                    .unwrap();\n+                let test_result = calc_result(&desc, result_guard.join());\n+                let stdout = data.lock().unwrap().to_vec();\n+                monitor_ch.send((desc.clone(), test_result, stdout)).unwrap();\n             });\n+        } else {\n+            let oldio = if !nocapture {\n+                Some((\n+                    io::set_print(box Sink(data2.clone())),\n+                    io::set_panic(box Sink(data2))\n+                ))\n+            } else {\n+                None\n+            };\n+\n+            use std::panic::{catch_unwind, AssertUnwindSafe};\n \n-            let result_guard = cfg.spawn(move || {\n-                                      if !nocapture {\n-                                          io::set_print(box Sink(data2.clone()));\n-                                          io::set_panic(box Sink(data2));\n-                                      }\n-                                      testfn()\n-                                  })\n-                                  .unwrap();\n-            let test_result = calc_result(&desc, result_guard.join());\n+            let result = catch_unwind(AssertUnwindSafe(|| {\n+                testfn()\n+            }));\n+\n+            if let Some((printio, panicio)) = oldio {\n+                if let Some(printio) = printio {\n+                    io::set_print(printio);\n+                }\n+                if let Some(panicio) = panicio {\n+                    io::set_panic(panicio);\n+                }\n+            };\n+\n+            let test_result = calc_result(&desc, result);\n             let stdout = data.lock().unwrap().to_vec();\n             monitor_ch.send((desc.clone(), test_result, stdout)).unwrap();\n-        });\n+        }\n     }\n \n     match testfn {"}]}