{"sha": "c6ff8326ecf6e069460f19442d78a935b7b3022a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZmY4MzI2ZWNmNmUwNjk0NjBmMTk0NDJkNzhhOTM1YjdiMzAyMmE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-04-26T22:11:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-26T22:11:07Z"}, "message": "Rollup merge of #41524 - michaelwu:basic-hexagon, r=alexcrichton\n\nAdd Hexagon support\n\nThis requires an updated LLVM with https://reviews.llvm.org/D31999 and https://reviews.llvm.org/D32000 to build libcore.\n\nA basic hello world builds and runs successfully on the hexagon simulator. libcore is fine with LLVM fixes, but libstd requires a lot more work since there's a custom rtos running on most hexagon cores. Running Linux sounds possible though, so maybe getting linux + musl going would be easier.\n\nHere's the target file I've been using for testing\n```\n{\n    \"arch\": \"hexagon\",\n    \"llvm-target\": \"hexagon-unknown-elf\",\n    \"os\": \"none\",\n    \"target-endian\": \"little\",\n    \"target-pointer-width\": \"32\",\n\n    \"data-layout\": \"e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048\",\n    \"linker\": \"hexagon-clang\",\n    \"linker-flavor\": \"gcc\",\n    \"executables\": true,\n    \"cpu\": \"hexagonv60\"\n}\n```", "tree": {"sha": "6986aec9800a9f91641b4a23a5cdda15fa7a1b2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6986aec9800a9f91641b4a23a5cdda15fa7a1b2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ff8326ecf6e069460f19442d78a935b7b3022a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ff8326ecf6e069460f19442d78a935b7b3022a", "html_url": "https://github.com/rust-lang/rust/commit/c6ff8326ecf6e069460f19442d78a935b7b3022a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ff8326ecf6e069460f19442d78a935b7b3022a/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc790f9e69d4aba4db339ea45c7d60f96451d99", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc790f9e69d4aba4db339ea45c7d60f96451d99", "html_url": "https://github.com/rust-lang/rust/commit/ccc790f9e69d4aba4db339ea45c7d60f96451d99"}, {"sha": "22eb3c69b913091b8e363803dab973a2a8230736", "url": "https://api.github.com/repos/rust-lang/rust/commits/22eb3c69b913091b8e363803dab973a2a8230736", "html_url": "https://github.com/rust-lang/rust/commit/22eb3c69b913091b8e363803dab973a2a8230736"}], "stats": {"total": 135, "additions": 102, "deletions": 33}, "files": [{"sha": "0309eca0e5deaec6a4f94081843386434397b684", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=c6ff8326ecf6e069460f19442d78a935b7b3022a", "patch": "@@ -51,7 +51,7 @@\n # support. You'll need to write a target specification at least, and most\n # likely, teach rustc about the C ABI of the target. Get in touch with the\n # Rust team and file an issue if you need assistance in porting!\n-#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\"\n+#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly"}, {"sha": "af3fcd1ec3c268b25211728d6dcb5384146781ca", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c6ff8326ecf6e069460f19442d78a935b7b3022a", "patch": "@@ -81,7 +81,7 @@ pub fn llvm(build: &Build, target: &str) {\n     // NOTE: remember to also update `config.toml.example` when changing the defaults!\n     let llvm_targets = match build.config.llvm_targets {\n         Some(ref s) => s,\n-        None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\",\n+        None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\",\n     };\n \n     let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};"}, {"sha": "3fd75146193e75e7712098c6022b5ded840be514", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=c6ff8326ecf6e069460f19442d78a935b7b3022a", "patch": "@@ -17,30 +17,24 @@ use std::path::{PathBuf, Path};\n \n use build_helper::output;\n \n-fn detect_llvm_link(llvm_config: &Path) -> (&'static str, Option<&'static str>) {\n-    let mut version_cmd = Command::new(llvm_config);\n-    version_cmd.arg(\"--version\");\n-    let version_output = output(&mut version_cmd);\n-    let mut parts = version_output.split('.').take(2)\n-        .filter_map(|s| s.parse::<u32>().ok());\n-    if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n-        if major > 3 || (major == 3 && minor >= 9) {\n-            // Force the link mode we want, preferring static by default, but\n-            // possibly overridden by `configure --enable-llvm-link-shared`.\n-            if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n-                return (\"dylib\", Some(\"--link-shared\"));\n-            } else {\n-                return (\"static\", Some(\"--link-static\"));\n-            }\n-        } else if major == 3 && minor == 8 {\n-            // Find out LLVM's default linking mode.\n-            let mut mode_cmd = Command::new(llvm_config);\n-            mode_cmd.arg(\"--shared-mode\");\n-            if output(&mut mode_cmd).trim() == \"shared\" {\n-                return (\"dylib\", None);\n-            } else {\n-                return (\"static\", None);\n-            }\n+fn detect_llvm_link(major: u32, minor: u32, llvm_config: &Path)\n+    -> (&'static str, Option<&'static str>) {\n+    if major > 3 || (major == 3 && minor >= 9) {\n+        // Force the link mode we want, preferring static by default, but\n+        // possibly overridden by `configure --enable-llvm-link-shared`.\n+        if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n+            return (\"dylib\", Some(\"--link-shared\"));\n+        } else {\n+            return (\"static\", Some(\"--link-static\"));\n+        }\n+    } else if major == 3 && minor == 8 {\n+        // Find out LLVM's default linking mode.\n+        let mut mode_cmd = Command::new(llvm_config);\n+        mode_cmd.arg(\"--shared-mode\");\n+        if output(&mut mode_cmd).trim() == \"shared\" {\n+            return (\"dylib\", None);\n+        } else {\n+            return (\"static\", None);\n         }\n     }\n     (\"static\", None)\n@@ -92,9 +86,25 @@ fn main() {\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     let is_crossed = target != host;\n \n-    let optional_components =\n-        [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\", \"msp430\",\n-         \"sparc\", \"nvptx\"];\n+    let mut optional_components =\n+        vec![\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\",\n+             \"systemz\", \"jsbackend\", \"msp430\", \"sparc\", \"nvptx\"];\n+\n+    let mut version_cmd = Command::new(&llvm_config);\n+    version_cmd.arg(\"--version\");\n+    let version_output = output(&mut version_cmd);\n+    let mut parts = version_output.split('.').take(2)\n+        .filter_map(|s| s.parse::<u32>().ok());\n+    let (major, minor) =\n+        if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n+            (major, minor)\n+        } else {\n+            (3, 7)\n+        };\n+\n+    if major > 3 {\n+        optional_components.push(\"hexagon\");\n+    }\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses.\n@@ -158,7 +168,7 @@ fn main() {\n        .cpp_link_stdlib(None) // we handle this below\n        .compile(\"librustllvm.a\");\n \n-    let (llvm_kind, llvm_link_arg) = detect_llvm_link(&llvm_config);\n+    let (llvm_kind, llvm_link_arg) = detect_llvm_link(major, minor, &llvm_config);\n \n     // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n     // we don't pick up system libs because unfortunately they're for the host"}, {"sha": "c9b3a7ff3f3aac4d1880c8610c66ef2761092d47", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=c6ff8326ecf6e069460f19442d78a935b7b3022a", "patch": "@@ -382,6 +382,12 @@ pub fn initialize_available_targets() {\n                  LLVMInitializeNVPTXTarget,\n                  LLVMInitializeNVPTXTargetMC,\n                  LLVMInitializeNVPTXAsmPrinter);\n+    init_target!(llvm_component = \"hexagon\",\n+                 LLVMInitializeHexagonTargetInfo,\n+                 LLVMInitializeHexagonTarget,\n+                 LLVMInitializeHexagonTargetMC,\n+                 LLVMInitializeHexagonAsmPrinter,\n+                 LLVMInitializeHexagonAsmParser);\n }\n \n pub fn last_error() -> Option<String> {"}, {"sha": "a6b0eb473eb8e106b2ec731843fdcd858945d127", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=c6ff8326ecf6e069460f19442d78a935b7b3022a", "patch": "@@ -29,6 +29,7 @@ use cabi_sparc;\n use cabi_sparc64;\n use cabi_nvptx;\n use cabi_nvptx64;\n+use cabi_hexagon;\n use machine::llalign_of_min;\n use type_::Type;\n use type_of;\n@@ -896,6 +897,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n             \"sparc64\" => cabi_sparc64::compute_abi_info(ccx, self),\n             \"nvptx\" => cabi_nvptx::compute_abi_info(ccx, self),\n             \"nvptx64\" => cabi_nvptx64::compute_abi_info(ccx, self),\n+            \"hexagon\" => cabi_hexagon::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "1acda72675c317a0426697f91302a162b36fd1d4", "filename": "src/librustc_trans/cabi_hexagon.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Flibrustc_trans%2Fcabi_hexagon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Flibrustc_trans%2Fcabi_hexagon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_hexagon.rs?ref=c6ff8326ecf6e069460f19442d78a935b7b3022a", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_upper_case_globals)]\n+\n+use abi::{FnType, ArgType, LayoutExt};\n+use context::CrateContext;\n+\n+fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n+    if ret.layout.is_aggregate() && ret.layout.size(ccx).bits() > 64 {\n+        ret.make_indirect(ccx);\n+    } else {\n+        ret.extend_integer_width_to(32);\n+    }\n+}\n+\n+fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) {\n+    if arg.layout.is_aggregate() && arg.layout.size(ccx).bits() > 64 {\n+        arg.make_indirect(ccx);\n+    } else {\n+        arg.extend_integer_width_to(32);\n+    }\n+}\n+\n+pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg_ty(ccx, arg);\n+    }\n+}"}, {"sha": "d5fc2ee5e25e07e141bd8edc246a6c5bf54467e9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=c6ff8326ecf6e069460f19442d78a935b7b3022a", "patch": "@@ -97,6 +97,7 @@ mod builder;\n mod cabi_aarch64;\n mod cabi_arm;\n mod cabi_asmjs;\n+mod cabi_hexagon;\n mod cabi_mips;\n mod cabi_mips64;\n mod cabi_msp430;"}, {"sha": "878af191434cd716eeb13c2be7a2b1e21abf2749", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=c6ff8326ecf6e069460f19442d78a935b7b3022a", "patch": "@@ -1 +1 @@\n-Subproject commit a884d21cc5f0b23a1693d1e872fd8998a4fdd17f\n+Subproject commit 878af191434cd716eeb13c2be7a2b1e21abf2749"}, {"sha": "b938f94cda2cb3596bf1cbbb8ef248b18a54cffe", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=c6ff8326ecf6e069460f19442d78a935b7b3022a", "patch": "@@ -147,6 +147,12 @@ extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n #define SUBTARGET_SPARC\n #endif\n \n+#ifdef LLVM_COMPONENT_HEXAGON\n+#define SUBTARGET_HEXAGON SUBTARGET(Hexagon)\n+#else\n+#define SUBTARGET_HEXAGON\n+#endif\n+\n #define GEN_SUBTARGETS                                                         \\\n   SUBTARGET_X86                                                                \\\n   SUBTARGET_ARM                                                                \\\n@@ -155,7 +161,8 @@ extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n   SUBTARGET_PPC                                                                \\\n   SUBTARGET_SYSTEMZ                                                            \\\n   SUBTARGET_MSP430                                                             \\\n-  SUBTARGET_SPARC\n+  SUBTARGET_SPARC                                                              \\\n+  SUBTARGET_HEXAGON\n \n #define SUBTARGET(x)                                                           \\\n   namespace llvm {                                                             \\"}, {"sha": "52ebf449d6007d9fd77be815b350be05d1bbd3f3", "filename": "src/rustllvm/llvm-rebuild-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Frustllvm%2Fllvm-rebuild-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/c6ff8326ecf6e069460f19442d78a935b7b3022a/src%2Frustllvm%2Fllvm-rebuild-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-rebuild-trigger?ref=c6ff8326ecf6e069460f19442d78a935b7b3022a", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be (optionally) cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2017-03-23\n+2017-04-25"}]}