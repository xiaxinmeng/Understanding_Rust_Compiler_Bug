{"sha": "8cfc1cd95b6eb9c94f037cfe866c92d51c58c930", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZmMxY2Q5NWI2ZWI5Yzk0ZjAzN2NmZTg2NmM5MmQ1MWM1OGM5MzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-27T09:51:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-27T09:51:49Z"}, "message": "Merge #6376\n\n6376: Avoid impls_fnonce to return true when the trait solving is ambiguous  r=flodiebold a=GrayJack\n\nThis PR should fix #6375 \r\n\r\nThis adds a variation of `method_resolution::implements_trait` called `method_resolution::implements_trait_unique`, that only returns true when the trait solving is unique, and also change `impls_fnonce` to use the later instead.\r\n\r\nI also added a test just to be sure.\n\nCo-authored-by: GrayJack <gr41.j4ck@gmail.com>", "tree": {"sha": "e539dcb18229e328628720661c50d928a72afea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e539dcb18229e328628720661c50d928a72afea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfl+21CRBK7hj4Ov3rIwAAdHIIAIUtsI56l6s4Fb9yiwpMSYgI\nwLRF5uyoXp+0mPC+YYurbG1C6sPzQkgoJMSp7FnIMuVZIbsfTpY/iOLezItpAL8f\n/0JemaW3tlZsPLUdsDFaNKedoD0URR6EKip0KFJmm5Y9mQyhKtCw1XvEoc0X5KMN\nh6P2q5uOTe6qA7K4q/VIxKDkczg9v3COdTB/dEosUjV/f2RA6VHFyK6GZ1K1mB4g\nzN7WHy8a+jt1ulBupbP968nZZ3BJ7OqyXFptsBe/I//ta3/3i1ihJ/MWjfos41Gu\n1J2rsAt+sx0Kn91jy6i7FFqwmsaDm63z2rr+cVhRZTE4RVyLH4xg1r1w1B6mFjs=\n=bUXt\n-----END PGP SIGNATURE-----\n", "payload": "tree e539dcb18229e328628720661c50d928a72afea1\nparent 7f346f9ae17ff9ebaeb24e5bfc4aa56f6ec13191\nparent ae6376d74cf354a71a83d8c1dcc93589acbce6ea\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603792309 +0000\ncommitter GitHub <noreply@github.com> 1603792309 +0000\n\nMerge #6376\n\n6376: Avoid impls_fnonce to return true when the trait solving is ambiguous  r=flodiebold a=GrayJack\n\nThis PR should fix #6375 \r\n\r\nThis adds a variation of `method_resolution::implements_trait` called `method_resolution::implements_trait_unique`, that only returns true when the trait solving is unique, and also change `impls_fnonce` to use the later instead.\r\n\r\nI also added a test just to be sure.\n\nCo-authored-by: GrayJack <gr41.j4ck@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930", "html_url": "https://github.com/rust-lang/rust/commit/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f346f9ae17ff9ebaeb24e5bfc4aa56f6ec13191", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f346f9ae17ff9ebaeb24e5bfc4aa56f6ec13191", "html_url": "https://github.com/rust-lang/rust/commit/7f346f9ae17ff9ebaeb24e5bfc4aa56f6ec13191"}, {"sha": "ae6376d74cf354a71a83d8c1dcc93589acbce6ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6376d74cf354a71a83d8c1dcc93589acbce6ea", "html_url": "https://github.com/rust-lang/rust/commit/ae6376d74cf354a71a83d8c1dcc93589acbce6ea"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "563145f921e7b66ff44cb92df17876938686677f", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=8cfc1cd95b6eb9c94f037cfe866c92d51c58c930", "patch": "@@ -1398,7 +1398,7 @@ impl Type {\n         };\n \n         let canonical_ty = Canonical { value: self.ty.value.clone(), kinds: Arc::new([]) };\n-        method_resolution::implements_trait(\n+        method_resolution::implements_trait_unique(\n             &canonical_ty,\n             db,\n             self.ty.environment.clone(),"}, {"sha": "5a6f0c67fbb67e255632b297e44dca37bc2a55f7", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=8cfc1cd95b6eb9c94f037cfe866c92d51c58c930", "patch": "@@ -740,6 +740,19 @@ pub fn implements_trait(\n     solution.is_some()\n }\n \n+pub fn implements_trait_unique(\n+    ty: &Canonical<Ty>,\n+    db: &dyn HirDatabase,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    trait_: TraitId,\n+) -> bool {\n+    let goal = generic_implements_goal(db, env, trait_, ty.clone());\n+    let solution = db.trait_solve(krate, goal);\n+\n+    matches!(solution, Some(crate::traits::Solution::Unique(_)))\n+}\n+\n /// This creates Substs for a trait with the given Self type and type variables\n /// for all other parameters, to query Chalk with it.\n fn generic_implements_goal("}, {"sha": "ee115972b0cb263f7eb26c960249173e8693eb3b", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=8cfc1cd95b6eb9c94f037cfe866c92d51c58c930", "patch": "@@ -115,6 +115,12 @@\n     <span class=\"value_param callable\">f</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>\n <span class=\"punctuation\">}</span>\n \n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"unresolved_reference\">Copy</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> <span class=\"operator\">=</span> <span class=\"function\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+<span class=\"punctuation\">}</span>\n+\n <span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"punctuation\">{</span>\n     <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>tt<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>"}, {"sha": "5ea712cf5f201ff168a0437d59f9b2ec01f72650", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cfc1cd95b6eb9c94f037cfe866c92d51c58c930/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=8cfc1cd95b6eb9c94f037cfe866c92d51c58c930", "patch": "@@ -89,6 +89,12 @@ fn baz<F: Fn() -> ()>(f: F) {\n     f()\n }\n \n+fn foobar() -> impl Copy {}\n+\n+fn foo() {\n+    let bar = foobar();\n+}\n+\n macro_rules! def_fn {\n     ($($tt:tt)*) => {$($tt)*}\n }"}]}