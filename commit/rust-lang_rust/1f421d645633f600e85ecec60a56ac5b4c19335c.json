{"sha": "1f421d645633f600e85ecec60a56ac5b4c19335c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNDIxZDY0NTYzM2Y2MDBlODVlY2VjNjBhNTZhYzViNGMxOTMzNWM=", "commit": {"author": {"name": "Joseph Post", "email": "joe@jcpst.com", "date": "2018-08-26T03:47:46Z"}, "committer": {"name": "Joseph Post", "email": "joe@jcpst.com", "date": "2018-08-26T04:28:26Z"}, "message": "call span_suggestion with applicability", "tree": {"sha": "84444dbd7b12ff932f9614fb42c01be9d27bd1c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84444dbd7b12ff932f9614fb42c01be9d27bd1c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f421d645633f600e85ecec60a56ac5b4c19335c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f421d645633f600e85ecec60a56ac5b4c19335c", "html_url": "https://github.com/rust-lang/rust/commit/1f421d645633f600e85ecec60a56ac5b4c19335c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f421d645633f600e85ecec60a56ac5b4c19335c/comments", "author": {"login": "jcpst", "id": 4027669, "node_id": "MDQ6VXNlcjQwMjc2Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/4027669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcpst", "html_url": "https://github.com/jcpst", "followers_url": "https://api.github.com/users/jcpst/followers", "following_url": "https://api.github.com/users/jcpst/following{/other_user}", "gists_url": "https://api.github.com/users/jcpst/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcpst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcpst/subscriptions", "organizations_url": "https://api.github.com/users/jcpst/orgs", "repos_url": "https://api.github.com/users/jcpst/repos", "events_url": "https://api.github.com/users/jcpst/events{/privacy}", "received_events_url": "https://api.github.com/users/jcpst/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcpst", "id": 4027669, "node_id": "MDQ6VXNlcjQwMjc2Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/4027669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcpst", "html_url": "https://github.com/jcpst", "followers_url": "https://api.github.com/users/jcpst/followers", "following_url": "https://api.github.com/users/jcpst/following{/other_user}", "gists_url": "https://api.github.com/users/jcpst/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcpst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcpst/subscriptions", "organizations_url": "https://api.github.com/users/jcpst/orgs", "repos_url": "https://api.github.com/users/jcpst/repos", "events_url": "https://api.github.com/users/jcpst/events{/privacy}", "received_events_url": "https://api.github.com/users/jcpst/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d95f078f0af28203c379365574a433ca5b79e9d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d95f078f0af28203c379365574a433ca5b79e9d8", "html_url": "https://github.com/rust-lang/rust/commit/d95f078f0af28203c379365574a433ca5b79e9d8"}], "stats": {"total": 87, "additions": 60, "deletions": 27}, "files": [{"sha": "8ef51445019721966b75b490a87899f524afba4a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1f421d645633f600e85ecec60a56ac5b4c19335c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f421d645633f600e85ecec60a56ac5b4c19335c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1f421d645633f600e85ecec60a56ac5b4c19335c", "patch": "@@ -69,7 +69,7 @@ use syntax::feature_gate::{feature_err, GateIssue};\n use syntax::ptr::P;\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n-use errors::{DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n \n use std::cell::{Cell, RefCell};\n use std::cmp;\n@@ -220,9 +220,12 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             let sugg_msg = \"try using a local type parameter instead\";\n             if let Some((sugg_span, new_snippet)) = cm.generate_local_type_param_snippet(span) {\n                 // Suggest the modification to the user\n-                err.span_suggestion(sugg_span,\n-                                    sugg_msg,\n-                                    new_snippet);\n+                err.span_suggestion_with_applicability(\n+                    sugg_span,\n+                    sugg_msg,\n+                    new_snippet,\n+                    Applicability::MachineApplicable,\n+                );\n             } else if let Some(sp) = cm.generate_fn_name_span(span) {\n                 err.span_label(sp, \"try adding a local type parameter in this method instead\");\n             } else {\n@@ -2998,8 +3001,12 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                         enum_path);\n                         err.help(&msg);\n                     } else {\n-                        err.span_suggestion(span, \"you can try using the variant's enum\",\n-                                            enum_path);\n+                        err.span_suggestion_with_applicability(\n+                            span,\n+                            \"you can try using the variant's enum\",\n+                            enum_path,\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n                 }\n             }\n@@ -3008,20 +3015,32 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     let self_is_available = this.self_value_is_available(path[0].span, span);\n                     match candidate {\n                         AssocSuggestion::Field => {\n-                            err.span_suggestion(span, \"try\",\n-                                                format!(\"self.{}\", path_str));\n+                            err.span_suggestion_with_applicability(\n+                                span,\n+                                \"try\",\n+                                format!(\"self.{}\", path_str),\n+                                Applicability::MachineApplicable,\n+                            );\n                             if !self_is_available {\n                                 err.span_label(span, format!(\"`self` value is only available in \\\n                                                                methods with `self` parameter\"));\n                             }\n                         }\n                         AssocSuggestion::MethodWithSelf if self_is_available => {\n-                            err.span_suggestion(span, \"try\",\n-                                                format!(\"self.{}\", path_str));\n+                            err.span_suggestion_with_applicability(\n+                                span,\n+                                \"try\",\n+                                format!(\"self.{}\", path_str),\n+                                Applicability::MachineApplicable,\n+                            );\n                         }\n                         AssocSuggestion::MethodWithSelf | AssocSuggestion::AssocItem => {\n-                            err.span_suggestion(span, \"try\",\n-                                                format!(\"Self::{}\", path_str));\n+                            err.span_suggestion_with_applicability(\n+                                span,\n+                                \"try\",\n+                                format!(\"Self::{}\", path_str),\n+                                Applicability::MachineApplicable,\n+                            );\n                         }\n                     }\n                     return (err, candidates);\n@@ -4617,15 +4636,16 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     format!(\"other_{}\", name)\n                 };\n \n-                err.span_suggestion(binding.span,\n-                                    rename_msg,\n-                                    if snippet.ends_with(';') {\n-                                        format!(\"{} as {};\",\n-                                                &snippet[..snippet.len()-1],\n-                                                suggested_name)\n-                                    } else {\n-                                        format!(\"{} as {}\", snippet, suggested_name)\n-                                    });\n+                err.span_suggestion_with_applicability(\n+                    binding.span,\n+                    rename_msg,\n+                    if snippet.ends_with(';') {\n+                        format!(\"{} as {};\", &snippet[..snippet.len() - 1], suggested_name)\n+                    } else {\n+                        format!(\"{} as {}\", snippet, suggested_name)\n+                    },\n+                    Applicability::MachineApplicable,\n+                );\n             } else {\n                 err.span_label(binding.span, rename_msg);\n             }"}, {"sha": "12863cc66a053ecb02149a573d1c276dd0e34628", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f421d645633f600e85ecec60a56ac5b4c19335c/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f421d645633f600e85ecec60a56ac5b4c19335c/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=1f421d645633f600e85ecec60a56ac5b4c19335c", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::session::Session;\n use syntax_pos::Span;\n-use errors::{DiagnosticId, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticId, DiagnosticBuilder};\n use rustc::ty::{Ty, TypeFoldable};\n \n pub trait StructuredDiagnostic<'tcx> {\n@@ -73,9 +73,12 @@ impl<'tcx> StructuredDiagnostic<'tcx> for VariadicError<'tcx> {\n             )\n         };\n         if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.span) {\n-            err.span_suggestion(self.span,\n-                                &format!(\"cast the value to `{}`\", self.cast_ty),\n-                                format!(\"{} as {}\", snippet, self.cast_ty));\n+            err.span_suggestion_with_applicability(\n+                self.span,\n+                &format!(\"cast the value to `{}`\", self.cast_ty),\n+                format!(\"{} as {}\", snippet, self.cast_ty),\n+                Applicability::MachineApplicable,\n+            );\n         } else {\n             err.help(&format!(\"cast the value to `{}`\", self.cast_ty));\n         }"}, {"sha": "a9bb013698e97d124f13b5bcbeb54cd7c0f4b7d0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f421d645633f600e85ecec60a56ac5b4c19335c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f421d645633f600e85ecec60a56ac5b4c19335c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1f421d645633f600e85ecec60a56ac5b4c19335c", "patch": "@@ -786,7 +786,12 @@ impl<'a> Parser<'a> {\n         } else {\n             err.span_label(self.span, \"expected identifier\");\n             if self.token == token::Comma && self.look_ahead(1, |t| t.is_ident()) {\n-                err.span_suggestion(self.span, \"remove this comma\", String::new());\n+                err.span_suggestion_with_applicability(\n+                    self.span,\n+                    \"remove this comma\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n             }\n         }\n         err\n@@ -6077,7 +6082,12 @@ impl<'a> Parser<'a> {\n                                                                 self.this_token_to_string()));\n                 if self.token.is_ident() {\n                     // This is likely another field; emit the diagnostic and keep going\n-                    err.span_suggestion(sp, \"try adding a comma\", \",\".into());\n+                    err.span_suggestion_with_applicability(\n+                        sp,\n+                        \"try adding a comma\",\n+                        \",\".into(),\n+                        Applicability::MachineApplicable,\n+                    );\n                     err.emit();\n                 } else {\n                     return Err(err)"}]}