{"sha": "f581cf754492f9f122193b8d8a7750ab38a87485", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ODFjZjc1NDQ5MmY5ZjEyMjE5M2I4ZDhhNzc1MGFiMzhhODc0ODU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-05-04T12:51:06Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-05-07T18:08:08Z"}, "message": "Merge aliases and search-index", "tree": {"sha": "3c5e3138d2a29dedba4ddcc573e2a5259d6857ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c5e3138d2a29dedba4ddcc573e2a5259d6857ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f581cf754492f9f122193b8d8a7750ab38a87485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f581cf754492f9f122193b8d8a7750ab38a87485", "html_url": "https://github.com/rust-lang/rust/commit/f581cf754492f9f122193b8d8a7750ab38a87485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f581cf754492f9f122193b8d8a7750ab38a87485/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9697c467aca28f40d8ef7c59b9f5bc670c1b85f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9697c467aca28f40d8ef7c59b9f5bc670c1b85f8", "html_url": "https://github.com/rust-lang/rust/commit/9697c467aca28f40d8ef7c59b9f5bc670c1b85f8"}], "stats": {"total": 226, "additions": 118, "deletions": 108}, "files": [{"sha": "ea65b3905272e9c180ae75d081c5cca588d9d713", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=f581cf754492f9f122193b8d8a7750ab38a87485", "patch": "@@ -114,7 +114,6 @@ pub fn render<T: Print, S: Print>(\n         window.rootPath = \\\"{root_path}\\\";\\\n         window.currentCrate = \\\"{krate}\\\";\\\n     </script>\\\n-    <script src=\\\"{root_path}aliases{suffix}.js\\\"></script>\\\n     <script src=\\\"{static_root_path}main{suffix}.js\\\"></script>\\\n     {static_extra_scripts}\\\n     {extra_scripts}\\"}, {"sha": "9454baf7640979975b09e5a971c12ef4dd260c01", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f581cf754492f9f122193b8d8a7750ab38a87485", "patch": "@@ -825,42 +825,6 @@ themePicker.onblur = handleThemeButtonsBlur;\n         Ok((ret, krates))\n     }\n \n-    fn show_item(item: &IndexItem, krate: &str) -> String {\n-        format!(\n-            \"{{'crate':'{}','ty':{},'name':'{}','desc':'{}','p':'{}'{}}}\",\n-            krate,\n-            item.ty as usize,\n-            item.name,\n-            item.desc.replace(\"'\", \"\\\\'\"),\n-            item.path,\n-            if let Some(p) = item.parent_idx { format!(\",'parent':{}\", p) } else { String::new() }\n-        )\n-    }\n-\n-    let dst = cx.dst.join(&format!(\"aliases{}.js\", cx.shared.resource_suffix));\n-    {\n-        let (mut all_aliases, _) = try_err!(collect(&dst, &krate.name, \"ALIASES\"), &dst);\n-        let mut output = String::with_capacity(100);\n-        for (alias, items) in cx.cache.get_aliases() {\n-            if items.is_empty() {\n-                continue;\n-            }\n-            output.push_str(&format!(\n-                \"\\\"{}\\\":[{}],\",\n-                alias,\n-                items.iter().map(|v| show_item(v, &krate.name)).collect::<Vec<_>>().join(\",\")\n-            ));\n-        }\n-        all_aliases.push(format!(\"ALIASES[\\\"{}\\\"] = {{{}}};\", krate.name, output));\n-        all_aliases.sort();\n-        let mut v = Buffer::html();\n-        writeln!(&mut v, \"var ALIASES = {{}};\");\n-        for aliases in &all_aliases {\n-            writeln!(&mut v, \"{}\", aliases);\n-        }\n-        cx.shared.fs.write(&dst, v.into_inner().into_bytes())?;\n-    }\n-\n     use std::ffi::OsString;\n \n     #[derive(Debug)]"}, {"sha": "53cf1abb16d5639082188fba7e09fd52e31b086c", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=f581cf754492f9f122193b8d8a7750ab38a87485", "patch": "@@ -503,27 +503,6 @@ impl DocFolder for Cache {\n     }\n }\n \n-impl Cache {\n-    pub fn get_aliases<'a>(&'a self) -> FxHashMap<String, Vec<&'a IndexItem>> {\n-        self.aliases\n-            .iter()\n-            .map(|(k, values)| {\n-                (\n-                    k.clone(),\n-                    values\n-                        .iter()\n-                        .filter(|v| {\n-                            let x = &self.search_index[**v];\n-                            x.parent_idx.is_some() == x.parent.is_some()\n-                        })\n-                        .map(|v| &self.search_index[*v])\n-                        .collect::<Vec<_>>(),\n-                )\n-            })\n-            .collect()\n-    }\n-}\n-\n /// Attempts to find where an external crate is located, given that we're\n /// rendering in to the specified source destination.\n fn extern_location(\n@@ -640,13 +619,35 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n         .map(|module| shorten(plain_summary_line(module.doc_value())))\n         .unwrap_or(String::new());\n \n+    let crate_aliases = aliases\n+        .iter()\n+        .map(|(k, values)| {\n+            (\n+                k.clone(),\n+                values\n+                    .iter()\n+                    .filter_map(|v| {\n+                        let x = &crate_items[*v];\n+                        if x.parent_idx.is_some() == x.parent.is_some() { Some(*v) } else { None }\n+                    })\n+                    .collect::<Vec<_>>(),\n+            )\n+        })\n+        .filter(|(_, values)| !values.is_empty())\n+        .collect::<Vec<_>>();\n+\n     #[derive(Serialize)]\n     struct CrateData<'a> {\n         doc: String,\n         #[serde(rename = \"i\")]\n         items: Vec<&'a IndexItem>,\n         #[serde(rename = \"p\")]\n         paths: Vec<(ItemType, String)>,\n+        // The String is alias name and the vec is the list of the elements with this alias.\n+        //\n+        // To be noted: the `usize` elements are indexes to `items`.\n+        #[serde(rename = \"a\")]\n+        aliases: Option<Vec<(String, Vec<usize>)>>,\n     }\n \n     // Collect the index into a string\n@@ -657,6 +658,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n             doc: crate_doc,\n             items: crate_items,\n             paths: crate_paths,\n+            aliases: if crate_aliases.is_empty() { None } else { Some(crate_aliases) },\n         })\n         .expect(\"failed serde conversion\")\n         // All these `replace` calls are because we have to go through JS string for JSON content."}, {"sha": "94ae69fde57fd5ae9ca153b43c5621ea03432c0d", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 87, "deletions": 39, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=f581cf754492f9f122193b8d8a7750ab38a87485", "patch": "@@ -531,6 +531,7 @@ function getSearchElement() {\n         var OUTPUT_DATA = 1;\n         var NO_TYPE_FILTER = -1;\n         var currentResults, index, searchIndex;\n+        var ALIASES = {};\n         var params = getQueryStringParams();\n \n         // Populate search bar with query string search term when provided,\n@@ -963,46 +964,60 @@ function getSearchElement() {\n                 return itemTypes[ty.ty] + ty.path + ty.name;\n             }\n \n+            function createAliasFromItem(item) {\n+                return {\n+                    crate: item.crate,\n+                    name: item.name,\n+                    path: item.path,\n+                    desc: item.desc,\n+                    ty: item.ty,\n+                    parent: item.parent,\n+                    type: item.parent,\n+                    is_alias: true,\n+                };\n+            }\n+\n             function handleAliases(ret, query, filterCrates) {\n-                if (ALIASES) {\n-                    var aliases = [];\n-                    if (filterCrates !== undefined &&\n-                            ALIASES[filterCrates] &&\n-                            ALIASES[filterCrates][query.search]) {\n-                        aliases = ALIASES[filterCrates][query.search];\n-                    } else {\n-                        Object.keys(ALIASES).forEach(function(crate) {\n-                            if (ALIASES[crate][query.search]) {\n-                                for (var i = 0; i < ALIASES[crate][query.search].length; ++i) {\n-                                    aliases.push(ALIASES[crate][query.search][i]);\n-                                }\n-                            }\n-                        });\n+                var aliases = [];\n+                var i;\n+                if (filterCrates !== undefined &&\n+                        ALIASES[filterCrates] &&\n+                        ALIASES[filterCrates][query.search]) {\n+                    for (i = 0; i < ALIASES[crate][query.search].length; ++i) {\n+                        aliases.push(\n+                            createAliasFromItem(searchIndex[ALIASES[filterCrates][query.search]]));\n                     }\n-                    aliases.sort(function(aaa, bbb) {\n-                        if (aaa.path < bbb.path) {\n-                            return 1;\n-                        } else if (aaa.path === bbb.path) {\n-                            return 0;\n+                } else {\n+                    Object.keys(ALIASES).forEach(function(crate) {\n+                        if (ALIASES[crate][query.search]) {\n+                            for (i = 0; i < ALIASES[crate][query.search].length; ++i) {\n+                                aliases.push(\n+                                    createAliasFromItem(\n+                                        searchIndex[ALIASES[crate][query.search][i]]));\n+                            }\n                         }\n-                        return -1;\n                     });\n-                    for (var i = 0; i < aliases.length; ++i) {\n-                        var alias = aliases[i];\n-                        alias.is_alias = true;\n-                        if (typeof alias.parent === \"number\") {\n-                            alias.parent = rawSearchIndex[alias.crate].p[alias.parent];\n-                        }\n-                        alias.alias = query.raw;\n-                        alias.path = alias.p || alias.crate;\n-                        var res = buildHrefAndPath(aliases[i]);\n-                        alias.displayPath = pathSplitter(res[0]);\n-                        alias.fullPath = alias.displayPath + alias.name;\n-                        alias.href = res[1];\n-                        ret.others.unshift(alias);\n-                        if (ret.others.length > MAX_RESULTS) {\n-                            ret.others.pop();\n-                        }\n+                }\n+                aliases.sort(function(aaa, bbb) {\n+                    if (aaa.path < bbb.path) {\n+                        return 1;\n+                    } else if (aaa.path === bbb.path) {\n+                        return 0;\n+                    }\n+                    return -1;\n+                });\n+                for (i = 0; i < aliases.length; ++i) {\n+                    var alias = aliases[i];\n+\n+                    alias.alias = query.raw;\n+                    var res = buildHrefAndPath(alias);\n+                    alias.displayPath = pathSplitter(res[0]);\n+                    alias.fullPath = alias.displayPath + alias.name;\n+                    alias.href = res[1];\n+\n+                    ret.others.unshift(alias);\n+                    if (ret.others.length > MAX_RESULTS) {\n+                        ret.others.pop();\n                     }\n                 }\n             }\n@@ -1683,10 +1698,13 @@ function getSearchElement() {\n             searchIndex = [];\n             var searchWords = [];\n             var i;\n+            var currentIndex = 0;\n \n             for (var crate in rawSearchIndex) {\n                 if (!rawSearchIndex.hasOwnProperty(crate)) { continue; }\n \n+                var crateSize = 0;\n+\n                 searchWords.push(crate);\n                 searchIndex.push({\n                     crate: crate,\n@@ -1696,6 +1714,7 @@ function getSearchElement() {\n                     desc: rawSearchIndex[crate].doc,\n                     type: null,\n                 });\n+                currentIndex += 1;\n \n                 // an array of [(Number) item type,\n                 //              (String) name,\n@@ -1707,6 +1726,9 @@ function getSearchElement() {\n                 // an array of [(Number) item type,\n                 //              (String) name]\n                 var paths = rawSearchIndex[crate].p;\n+                // a array of [(String) alias name\n+                //             [Number] index to items]\n+                var aliases = rawSearchIndex[crate].a;\n \n                 // convert `rawPaths` entries into object form\n                 var len = paths.length;\n@@ -1725,9 +1747,18 @@ function getSearchElement() {\n                 var lastPath = \"\";\n                 for (i = 0; i < len; ++i) {\n                     var rawRow = items[i];\n-                    var row = {crate: crate, ty: rawRow[0], name: rawRow[1],\n-                               path: rawRow[2] || lastPath, desc: rawRow[3],\n-                               parent: paths[rawRow[4]], type: rawRow[5]};\n+                    if (!rawRow[2]) {\n+                        rawRow[2] = lastPath;\n+                    }\n+                    var row = {\n+                        crate: crate,\n+                        ty: rawRow[0],\n+                        name: rawRow[1],\n+                        path: rawRow[2],\n+                        desc: rawRow[3],\n+                        parent: paths[rawRow[4]],\n+                        type: rawRow[5],\n+                    };\n                     searchIndex.push(row);\n                     if (typeof row.name === \"string\") {\n                         var word = row.name.toLowerCase();\n@@ -1736,7 +1767,24 @@ function getSearchElement() {\n                         searchWords.push(\"\");\n                     }\n                     lastPath = row.path;\n+                    crateSize += 1;\n+                }\n+\n+                if (aliases) {\n+                    ALIASES[crate] = {};\n+                    var j, local_aliases;\n+                    for (i = 0; i < aliases.length; ++i) {\n+                        var alias_name = aliases[i][0];\n+                        if (!ALIASES[crate].hasOwnProperty(alias_name)) {\n+                            ALIASES[crate][alias_name] = [];\n+                        }\n+                        local_aliases = aliases[i][1];\n+                        for (j = 0; j < local_aliases.length; ++j) {\n+                            ALIASES[crate][alias_name].push(local_aliases[j] + currentIndex);\n+                        }\n+                    }\n                 }\n+                currentIndex += crateSize;\n             }\n             return searchWords;\n         }"}, {"sha": "cb6ec4f8fed4e6f284be64ee00ff6c72bd44a10e", "filename": "src/test/rustdoc-js-std/alias-2.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Ftest%2Frustdoc-js-std%2Falias-2.js", "raw_url": "https://github.com/rust-lang/rust/raw/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Ftest%2Frustdoc-js-std%2Falias-2.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Falias-2.js?ref=f581cf754492f9f122193b8d8a7750ab38a87485", "patch": "@@ -4,9 +4,9 @@ const QUERY = '+';\n \n const EXPECTED = {\n     'others': [\n-        { 'path': 'core', 'name': 'AddAssign' },\n-        { 'path': 'core', 'name': 'Add' },\n-        { 'path': 'std', 'name': 'AddAssign' },\n+        { 'path': 'core::ops', 'name': 'AddAssign' },\n+        { 'path': 'core::ops', 'name': 'Add' },\n+        { 'path': 'std::ops', 'name': 'AddAssign' },\n         { 'path': 'std::ops', 'name': 'Add' },\n     ],\n };"}, {"sha": "2b709c99119ae11e7a2b079d36c1d51f6f2955a6", "filename": "src/test/rustdoc-js-std/alias.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Ftest%2Frustdoc-js-std%2Falias.js", "raw_url": "https://github.com/rust-lang/rust/raw/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Ftest%2Frustdoc-js-std%2Falias.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Falias.js?ref=f581cf754492f9f122193b8d8a7750ab38a87485", "patch": "@@ -5,7 +5,7 @@ const QUERY = '[';\n const EXPECTED = {\n     'others': [\n         { 'path': 'std', 'name': 'slice' },\n-        { 'path': 'std', 'name': 'IndexMut' },\n-        { 'path': 'std', 'name': 'Index' },\n+        { 'path': 'std::ops', 'name': 'IndexMut' },\n+        { 'path': 'std::ops', 'name': 'Index' },\n     ],\n };"}, {"sha": "90315d6f64431af49ba74250e060fda715d0e025", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/f581cf754492f9f122193b8d8a7750ab38a87485/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=f581cf754492f9f122193b8d8a7750ab38a87485", "patch": "@@ -218,7 +218,7 @@ function lookForEntry(entry, data) {\n     return null;\n }\n \n-function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n+function loadMainJsAndIndex(mainJs, searchIndex, crate) {\n     if (searchIndex[searchIndex.length - 1].length === 0) {\n         searchIndex.pop();\n     }\n@@ -238,17 +238,15 @@ function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n     var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n                            \"handleAliases\", \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n \n+    ALIASES = {};\n     finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n     finalJS += 'var rootPath = \"../\";\\n';\n-    finalJS += aliases;\n     finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n     finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n     finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n \n     var loaded = loadContent(finalJS);\n     var index = loaded.buildIndex(searchIndex.rawSearchIndex);\n-    // We make it \"global\" so that the \"loaded.execSearch\" function will find it.\n-    rawSearchIndex = searchIndex.rawSearchIndex;\n \n     return [loaded, index];\n }\n@@ -340,11 +338,10 @@ function runChecks(testFile, loaded, index) {\n \n function load_files(doc_folder, resource_suffix, crate) {\n     var mainJs = readFile(path.join(doc_folder, \"main\" + resource_suffix + \".js\"));\n-    var aliases = readFile(path.join(doc_folder, \"aliases\" + resource_suffix + \".js\"));\n     var searchIndex = readFile(\n         path.join(doc_folder, \"search-index\" + resource_suffix + \".js\")).split(\"\\n\");\n \n-    return loadMainJsAndIndex(mainJs, aliases, searchIndex, crate);\n+    return loadMainJsAndIndex(mainJs, searchIndex, crate);\n }\n \n function showHelp() {"}]}