{"sha": "ff2f328d7efd78fc3837d2ad9a1080ff8e258d1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMmYzMjhkN2VmZDc4ZmMzODM3ZDJhZDlhMTA4MGZmOGUyNThkMWI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-05T09:22:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-05T09:22:10Z"}, "message": "Rollup merge of #47162 - stjepang:cleanup-btreeset, r=alexcrichton\n\nRemove `T: Ord` bound from `BTreeSet::{is_empty, len}`\n\nThis change makes the API for `BTreeSet` more consistent with `BTreeMap`, where `BTreeMap::{is_empty, len}` don't require `T: Ord` either.\n\nAlso, it reduces the number of `impl`s for `BTreeSet`, making the generated documentation look much cleaner. Closes #47138.\n\ncc @rust-lang/libs", "tree": {"sha": "5516bc47a29e596968c23139fdf17203d1cf1fe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5516bc47a29e596968c23139fdf17203d1cf1fe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff2f328d7efd78fc3837d2ad9a1080ff8e258d1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2f328d7efd78fc3837d2ad9a1080ff8e258d1b", "html_url": "https://github.com/rust-lang/rust/commit/ff2f328d7efd78fc3837d2ad9a1080ff8e258d1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff2f328d7efd78fc3837d2ad9a1080ff8e258d1b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5dd5fe0071fc784ca6706816bea436858cbc521", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dd5fe0071fc784ca6706816bea436858cbc521", "html_url": "https://github.com/rust-lang/rust/commit/a5dd5fe0071fc784ca6706816bea436858cbc521"}, {"sha": "6076cf6f4e4e60b4fb43c665a56a0508c88fca6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6076cf6f4e4e60b4fb43c665a56a0508c88fca6f", "html_url": "https://github.com/rust-lang/rust/commit/6076cf6f4e4e60b4fb43c665a56a0508c88fca6f"}], "stats": {"total": 140, "additions": 68, "deletions": 72}, "files": [{"sha": "2807bbaca0c893c5c5879d79aa417b8efbf5aa67", "filename": "src/liballoc/btree/set.rs", "status": "modified", "additions": 68, "deletions": 72, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/ff2f328d7efd78fc3837d2ad9a1080ff8e258d1b/src%2Fliballoc%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2f328d7efd78fc3837d2ad9a1080ff8e258d1b/src%2Fliballoc%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fset.rs?ref=ff2f328d7efd78fc3837d2ad9a1080ff8e258d1b", "patch": "@@ -228,43 +228,7 @@ impl<T: Ord> BTreeSet<T> {\n     pub fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n     }\n-}\n-\n-impl<T> BTreeSet<T> {\n-    /// Gets an iterator that visits the values in the `BTreeSet` in ascending order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let set: BTreeSet<usize> = [1, 2, 3].iter().cloned().collect();\n-    /// let mut set_iter = set.iter();\n-    /// assert_eq!(set_iter.next(), Some(&1));\n-    /// assert_eq!(set_iter.next(), Some(&2));\n-    /// assert_eq!(set_iter.next(), Some(&3));\n-    /// assert_eq!(set_iter.next(), None);\n-    /// ```\n-    ///\n-    /// Values returned by the iterator are returned in ascending order:\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let set: BTreeSet<usize> = [3, 1, 2].iter().cloned().collect();\n-    /// let mut set_iter = set.iter();\n-    /// assert_eq!(set_iter.next(), Some(&1));\n-    /// assert_eq!(set_iter.next(), Some(&2));\n-    /// assert_eq!(set_iter.next(), Some(&3));\n-    /// assert_eq!(set_iter.next(), None);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n-        Iter { iter: self.map.keys() }\n-    }\n-}\n \n-impl<T: Ord> BTreeSet<T> {\n     /// Constructs a double-ended iterator over a sub-range of elements in the set.\n     /// The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n     /// yield elements from min (inclusive) to max (exclusive).\n@@ -293,9 +257,7 @@ impl<T: Ord> BTreeSet<T> {\n     {\n         Range { iter: self.map.range(range) }\n     }\n-}\n \n-impl<T: Ord> BTreeSet<T> {\n     /// Visits the values representing the difference,\n     /// i.e. the values that are in `self` but not in `other`,\n     /// in ascending order.\n@@ -408,40 +370,6 @@ impl<T: Ord> BTreeSet<T> {\n         }\n     }\n \n-    /// Returns the number of elements in the set.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let mut v = BTreeSet::new();\n-    /// assert_eq!(v.len(), 0);\n-    /// v.insert(1);\n-    /// assert_eq!(v.len(), 1);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn len(&self) -> usize {\n-        self.map.len()\n-    }\n-\n-    /// Returns `true` if the set contains no elements.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let mut v = BTreeSet::new();\n-    /// assert!(v.is_empty());\n-    /// v.insert(1);\n-    /// assert!(!v.is_empty());\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn is_empty(&self) -> bool {\n-        self.len() == 0\n-    }\n-\n     /// Clears the set, removing all values.\n     ///\n     /// # Examples\n@@ -724,6 +652,74 @@ impl<T: Ord> BTreeSet<T> {\n     }\n }\n \n+impl<T> BTreeSet<T> {\n+    /// Gets an iterator that visits the values in the `BTreeSet` in ascending order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<usize> = [1, 2, 3].iter().cloned().collect();\n+    /// let mut set_iter = set.iter();\n+    /// assert_eq!(set_iter.next(), Some(&1));\n+    /// assert_eq!(set_iter.next(), Some(&2));\n+    /// assert_eq!(set_iter.next(), Some(&3));\n+    /// assert_eq!(set_iter.next(), None);\n+    /// ```\n+    ///\n+    /// Values returned by the iterator are returned in ascending order:\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<usize> = [3, 1, 2].iter().cloned().collect();\n+    /// let mut set_iter = set.iter();\n+    /// assert_eq!(set_iter.next(), Some(&1));\n+    /// assert_eq!(set_iter.next(), Some(&2));\n+    /// assert_eq!(set_iter.next(), Some(&3));\n+    /// assert_eq!(set_iter.next(), None);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn iter(&self) -> Iter<T> {\n+        Iter { iter: self.map.keys() }\n+    }\n+\n+    /// Returns the number of elements in the set.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut v = BTreeSet::new();\n+    /// assert_eq!(v.len(), 0);\n+    /// v.insert(1);\n+    /// assert_eq!(v.len(), 1);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn len(&self) -> usize {\n+        self.map.len()\n+    }\n+\n+    /// Returns `true` if the set contains no elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut v = BTreeSet::new();\n+    /// assert!(v.is_empty());\n+    /// v.insert(1);\n+    /// assert!(!v.is_empty());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> BTreeSet<T> {"}]}