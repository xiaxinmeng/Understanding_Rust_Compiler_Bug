{"sha": "02c2beaa8c54201863ab4713f6f42cd98ae3951c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYzJiZWFhOGM1NDIwMTg2M2FiNDcxM2Y2ZjQyY2Q5OGFlMzk1MWM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-05-22T13:55:15Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-05-22T15:32:49Z"}, "message": "Provide Chalk well-known traits", "tree": {"sha": "d233663548482248784c032d9af9ec6d9797906d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d233663548482248784c032d9af9ec6d9797906d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02c2beaa8c54201863ab4713f6f42cd98ae3951c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02c2beaa8c54201863ab4713f6f42cd98ae3951c", "html_url": "https://github.com/rust-lang/rust/commit/02c2beaa8c54201863ab4713f6f42cd98ae3951c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02c2beaa8c54201863ab4713f6f42cd98ae3951c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e81c76a95ae180e7c5cf2d5af3658cbfc2d8b4ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/e81c76a95ae180e7c5cf2d5af3658cbfc2d8b4ef", "html_url": "https://github.com/rust-lang/rust/commit/e81c76a95ae180e7c5cf2d5af3658cbfc2d8b4ef"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "d962db3cc7923ad656ba75055709ce79bdc77c5d", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02c2beaa8c54201863ab4713f6f42cd98ae3951c/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c2beaa8c54201863ab4713f6f42cd98ae3951c/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=02c2beaa8c54201863ab4713f6f42cd98ae3951c", "patch": "@@ -73,8 +73,8 @@ pub struct LangItems {\n }\n \n impl LangItems {\n-    pub fn target<'a>(&'a self, item: &str) -> Option<&'a LangItemTarget> {\n-        self.items.get(item)\n+    pub fn target(&self, item: &str) -> Option<LangItemTarget> {\n+        self.items.get(item).copied()\n     }\n \n     /// Salsa query. This will look for lang items in a specific crate.\n@@ -163,9 +163,13 @@ impl LangItems {\n     ) where\n         T: Into<AttrDefId> + Copy,\n     {\n-        let attrs = db.attrs(item.into());\n-        if let Some(lang_item_name) = attrs.by_key(\"lang\").string_value() {\n+        if let Some(lang_item_name) = lang_attr(db, item) {\n             self.items.entry(lang_item_name.clone()).or_insert_with(|| constructor(item));\n         }\n     }\n }\n+\n+pub fn lang_attr(db: &dyn DefDatabase, item: impl Into<AttrDefId> + Copy) -> Option<SmolStr> {\n+    let attrs = db.attrs(item.into());\n+    attrs.by_key(\"lang\").string_value().cloned()\n+}"}, {"sha": "7d3ad6eb4d0c360d39abfe013e8f09576ee85287", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/02c2beaa8c54201863ab4713f6f42cd98ae3951c/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c2beaa8c54201863ab4713f6f42cd98ae3951c/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=02c2beaa8c54201863ab4713f6f42cd98ae3951c", "patch": "@@ -9,8 +9,9 @@ use chalk_ir::{\n };\n \n use hir_def::{\n-    type_ref::Mutability, AssocContainerId, AssocItemId, GenericDefId, HasModule, Lookup,\n-    TypeAliasId,\n+    lang_item::{lang_attr, LangItemTarget},\n+    type_ref::Mutability,\n+    AssocContainerId, AssocItemId, GenericDefId, HasModule, Lookup, TypeAliasId,\n };\n use ra_db::{\n     salsa::{InternId, InternKey},\n@@ -26,6 +27,7 @@ use crate::{\n     utils::generics,\n     ApplicationTy, DebruijnIndex, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n };\n+use chalk_rust_ir::WellKnownTrait;\n \n pub(super) mod tls;\n \n@@ -1057,10 +1059,15 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     }\n     fn well_known_trait_id(\n         &self,\n-        _well_known_trait: chalk_rust_ir::WellKnownTrait,\n+        well_known_trait: chalk_rust_ir::WellKnownTrait,\n     ) -> Option<chalk_ir::TraitId<Interner>> {\n-        // FIXME tell Chalk about well-known traits (here and in trait_datum)\n-        None\n+        let lang_attr = lang_attr_from_well_known_trait(well_known_trait);\n+        let lang_items = self.db.crate_lang_items(self.krate);\n+        let trait_ = match lang_items.target(lang_attr) {\n+            Some(LangItemTarget::TraitId(trait_)) => trait_,\n+            _ => return None,\n+        };\n+        Some(trait_.to_chalk(self.db))\n     }\n \n     fn program_clauses_for_env(\n@@ -1162,7 +1169,8 @@ pub(crate) fn trait_datum_query(\n     let associated_ty_ids =\n         trait_data.associated_types().map(|type_alias| type_alias.to_chalk(db)).collect();\n     let trait_datum_bound = chalk_rust_ir::TraitDatumBound { where_clauses };\n-    let well_known = None; // FIXME set this (depending on lang items)\n+    let well_known =\n+        lang_attr(db.upcast(), trait_).and_then(|name| well_known_trait_from_lang_attr(&name));\n     let trait_datum = TraitDatum {\n         id: trait_id,\n         binders: make_binders(trait_datum_bound, bound_vars.len()),\n@@ -1173,6 +1181,25 @@ pub(crate) fn trait_datum_query(\n     Arc::new(trait_datum)\n }\n \n+fn well_known_trait_from_lang_attr(name: &str) -> Option<WellKnownTrait> {\n+    Some(match name {\n+        \"sized\" => WellKnownTrait::SizedTrait,\n+        \"copy\" => WellKnownTrait::CopyTrait,\n+        \"clone\" => WellKnownTrait::CloneTrait,\n+        \"drop\" => WellKnownTrait::DropTrait,\n+        _ => return None,\n+    })\n+}\n+\n+fn lang_attr_from_well_known_trait(attr: WellKnownTrait) -> &'static str {\n+    match attr {\n+        WellKnownTrait::SizedTrait => \"sized\",\n+        WellKnownTrait::CopyTrait => \"copy\",\n+        WellKnownTrait::CloneTrait => \"clone\",\n+        WellKnownTrait::DropTrait => \"drop\",\n+    }\n+}\n+\n pub(crate) fn struct_datum_query(\n     db: &dyn HirDatabase,\n     krate: CrateId,"}]}