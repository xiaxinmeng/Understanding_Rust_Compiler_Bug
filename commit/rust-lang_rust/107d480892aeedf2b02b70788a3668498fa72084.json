{"sha": "107d480892aeedf2b02b70788a3668498fa72084", "node_id": "C_kwDOAAsO6NoAKDEwN2Q0ODA4OTJhZWVkZjJiMDJiNzA3ODhhMzY2ODQ5OGZhNzIwODQ", "commit": {"author": {"name": "bindsdev", "email": "bindsdev@gmail.com", "date": "2023-04-29T01:28:56Z"}, "committer": {"name": "bindsdev", "email": "bindsdev@gmail.com", "date": "2023-04-29T01:28:56Z"}, "message": "improve error notes for packed struct reference diagnostic", "tree": {"sha": "fee171307b38e229e58648b618ad062f11b59c71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fee171307b38e229e58648b618ad062f11b59c71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/107d480892aeedf2b02b70788a3668498fa72084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/107d480892aeedf2b02b70788a3668498fa72084", "html_url": "https://github.com/rust-lang/rust/commit/107d480892aeedf2b02b70788a3668498fa72084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/107d480892aeedf2b02b70788a3668498fa72084/comments", "author": {"login": "bindsdev", "id": 78362190, "node_id": "MDQ6VXNlcjc4MzYyMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/78362190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bindsdev", "html_url": "https://github.com/bindsdev", "followers_url": "https://api.github.com/users/bindsdev/followers", "following_url": "https://api.github.com/users/bindsdev/following{/other_user}", "gists_url": "https://api.github.com/users/bindsdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/bindsdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bindsdev/subscriptions", "organizations_url": "https://api.github.com/users/bindsdev/orgs", "repos_url": "https://api.github.com/users/bindsdev/repos", "events_url": "https://api.github.com/users/bindsdev/events{/privacy}", "received_events_url": "https://api.github.com/users/bindsdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bindsdev", "id": 78362190, "node_id": "MDQ6VXNlcjc4MzYyMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/78362190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bindsdev", "html_url": "https://github.com/bindsdev", "followers_url": "https://api.github.com/users/bindsdev/followers", "following_url": "https://api.github.com/users/bindsdev/following{/other_user}", "gists_url": "https://api.github.com/users/bindsdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/bindsdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bindsdev/subscriptions", "organizations_url": "https://api.github.com/users/bindsdev/orgs", "repos_url": "https://api.github.com/users/bindsdev/repos", "events_url": "https://api.github.com/users/bindsdev/events{/privacy}", "received_events_url": "https://api.github.com/users/bindsdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4956053816439a5884cb2ad1247835858f92218", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4956053816439a5884cb2ad1247835858f92218", "html_url": "https://github.com/rust-lang/rust/commit/f4956053816439a5884cb2ad1247835858f92218"}], "stats": {"total": 82, "additions": 55, "deletions": 27}, "files": [{"sha": "b9bc89fcf8fa464a4650d33733f71d63876fb0a5", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/107d480892aeedf2b02b70788a3668498fa72084/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107d480892aeedf2b02b70788a3668498fa72084/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=107d480892aeedf2b02b70788a3668498fa72084", "patch": "@@ -56,8 +56,11 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n                         \"reference to packed field is unaligned\"\n                     )\n                     .note(\n-                        \"fields of packed structs are not properly aligned, and creating \\\n-                        a misaligned reference is undefined behavior (even if that \\\n+                        \"packed structs are only aligned by one byte, and many modern architectures \\\n+                        penalize unaligned field accesses\"\n+                    )\n+                    .note(\n+                        \"creating a misaligned reference is undefined behavior (even if that \\\n                         reference is never dereferenced)\",\n                     ).help(\n                         \"copy the field contents to a local variable, or replace the \\"}, {"sha": "349c4639a9e2dad4465460aeb916ab00b85ee31e", "filename": "tests/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=107d480892aeedf2b02b70788a3668498fa72084", "patch": "@@ -4,7 +4,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let _ = &p.b;\n    |             ^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -13,7 +14,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let (_,) = (&p.b,);\n    |                 ^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -22,7 +24,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let _: _ = &p.b;\n    |                ^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -31,7 +34,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let (_,): _ = (&p.b,);\n    |                    ^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -40,7 +44,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     match &p.b  { _ => { } }\n    |           ^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -49,7 +54,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     match (&p.b,)  { (_,) => { } }\n    |            ^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block"}, {"sha": "8c44229bcebe1e29ac7f6d17acb07b8801eb439f", "filename": "tests/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=107d480892aeedf2b02b70788a3668498fa72084", "patch": "@@ -4,7 +4,8 @@ error[E0793]: reference to packed field is unaligned\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "5f9cecadbffa6ccff77598cf58a95f40fcdd4030", "filename": "tests/ui/lint/unaligned_references.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funaligned_references.stderr?ref=107d480892aeedf2b02b70788a3668498fa72084", "patch": "@@ -4,7 +4,8 @@ error[E0793]: reference to packed field is unaligned\n LL |             &self.x;\n    |             ^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -13,7 +14,8 @@ error[E0793]: reference to packed field is unaligned\n LL |         let _ = &good.ptr;\n    |                 ^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -22,7 +24,8 @@ error[E0793]: reference to packed field is unaligned\n LL |         let _ = &good.data;\n    |                 ^^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -31,7 +34,8 @@ error[E0793]: reference to packed field is unaligned\n LL |         let _ = &good.data as *const _;\n    |                 ^^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -40,7 +44,8 @@ error[E0793]: reference to packed field is unaligned\n LL |         let _: *const _ = &good.data;\n    |                           ^^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -49,7 +54,8 @@ error[E0793]: reference to packed field is unaligned\n LL |         let _ = good.data.clone();\n    |                 ^^^^^^^^^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -58,7 +64,8 @@ error[E0793]: reference to packed field is unaligned\n LL |         let _ = &good.data2[0];\n    |                 ^^^^^^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -67,7 +74,8 @@ error[E0793]: reference to packed field is unaligned\n LL |         let _ = &packed2.x;\n    |                 ^^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -76,7 +84,8 @@ error[E0793]: reference to packed field is unaligned\n LL |         let _ref = &m1.1.a;\n    |                    ^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -85,7 +94,8 @@ error[E0793]: reference to packed field is unaligned\n LL |         let _ref = &m2.1.a;\n    |                    ^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: aborting due to 10 previous errors"}, {"sha": "94a95c1d8fda728ebd5349f9ff64b6e419728dc5", "filename": "tests/ui/lint/unaligned_references_external_macro.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funaligned_references_external_macro.stderr?ref=107d480892aeedf2b02b70788a3668498fa72084", "patch": "@@ -9,7 +9,8 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n    = note: this error originates in the macro `unaligned_references_external_crate::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "4dc31a283865c08f00027ed9af67bb3ac21eb931", "filename": "tests/ui/packed/issue-27060.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Fpacked%2Fissue-27060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Fpacked%2Fissue-27060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fissue-27060.stderr?ref=107d480892aeedf2b02b70788a3668498fa72084", "patch": "@@ -4,7 +4,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let _ = &good.data;\n    |             ^^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -13,7 +14,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let _ = &good.data2[0];\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -22,7 +24,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let _ = &good.data;\n    |             ^^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -31,7 +34,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let _ = &good.data2[0];\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: aborting due to 4 previous errors"}, {"sha": "57630a4b47018b3879ac19975a178788697d83a0", "filename": "tests/ui/packed/packed-struct-borrow-element-64bit.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr?ref=107d480892aeedf2b02b70788a3668498fa72084", "patch": "@@ -4,7 +4,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: aborting due to previous error"}, {"sha": "c1f749d6fbbbd876371fbf7d3619a471dd2b152a", "filename": "tests/ui/packed/packed-struct-borrow-element.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/107d480892aeedf2b02b70788a3668498fa72084/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr?ref=107d480892aeedf2b02b70788a3668498fa72084", "patch": "@@ -4,7 +4,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n@@ -13,7 +14,8 @@ error[E0793]: reference to packed field is unaligned\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n    |\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: packed structs are only aligned by one byte, and many modern architectures penalize unaligned field accesses\n+   = note: creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: aborting due to 2 previous errors"}]}