{"sha": "d7274ac5fdf84452cdfd09727e106bac2bf50e36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3Mjc0YWM1ZmRmODQ0NTJjZGZkMDk3MjdlMTA2YmFjMmJmNTBlMzY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-23T13:14:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-23T13:23:06Z"}, "message": "Fix load and store for ByValPair values with differently sized components", "tree": {"sha": "6851bbf0442d565ad9295ec48f091c9a9bfa9f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6851bbf0442d565ad9295ec48f091c9a9bfa9f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7274ac5fdf84452cdfd09727e106bac2bf50e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7274ac5fdf84452cdfd09727e106bac2bf50e36", "html_url": "https://github.com/rust-lang/rust/commit/d7274ac5fdf84452cdfd09727e106bac2bf50e36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7274ac5fdf84452cdfd09727e106bac2bf50e36/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05307af6729a9df0375f063c4b2417366057e058", "url": "https://api.github.com/repos/rust-lang/rust/commits/05307af6729a9df0375f063c4b2417366057e058", "html_url": "https://github.com/rust-lang/rust/commit/05307af6729a9df0375f063c4b2417366057e058"}], "stats": {"total": 77, "additions": 33, "deletions": 44}, "files": [{"sha": "805a51ec219d1854d8280b95d4a4bc488ec028b2", "filename": "example/std_example.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7274ac5fdf84452cdfd09727e106bac2bf50e36/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7274ac5fdf84452cdfd09727e106bac2bf50e36/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=d7274ac5fdf84452cdfd09727e106bac2bf50e36", "patch": "@@ -17,10 +17,25 @@ fn main() {\n     ONCE.call_once(|| {});\n \n     LoopState::Continue(()) == LoopState::Break(());\n+\n+    // Make sure ByValPair values with differently sized components are correctly passed\n+    map(None::<(u8, Box<Instruction>)>);\n }\n \n #[derive(PartialEq)]\n enum LoopState {\n     Continue(()),\n     Break(())\n }\n+\n+pub enum Instruction {\n+    Increment,\n+    Loop,\n+}\n+\n+fn map(a: Option<(u8, Box<Instruction>)>) -> Option<Box<Instruction>> {\n+    match a {\n+        None => None,\n+        Some((_, instr)) => Some(instr),\n+    }\n+}"}, {"sha": "716a81c5d8af17e741b2018bea806a56ec973f75", "filename": "src/value_and_place.rs", "status": "modified", "additions": 18, "deletions": 44, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d7274ac5fdf84452cdfd09727e106bac2bf50e36/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7274ac5fdf84452cdfd09727e106bac2bf50e36/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=d7274ac5fdf84452cdfd09727e106bac2bf50e36", "patch": "@@ -18,6 +18,11 @@ fn codegen_field<'a, 'tcx: 'a>(\n     }\n }\n \n+fn scalar_pair_calculate_b_offset(tcx: TyCtxt<'_>, a_scalar: &Scalar, b_scalar: &Scalar) -> i32 {\n+    let b_offset = a_scalar.value.size(&tcx).align_to(b_scalar.value.align(&tcx).abi);\n+    b_offset.bytes().try_into().unwrap()\n+}\n+\n /// A read-only value\n #[derive(Debug, Copy, Clone)]\n pub struct CValue<'tcx>(CValueInner, TyLayout<'tcx>);\n@@ -89,18 +94,19 @@ impl<'tcx> CValue<'tcx> {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(addr) => {\n-                let (a, b) = match &layout.abi {\n-                    layout::Abi::ScalarPair(a, b) => (a.clone(), b.clone()),\n+                let (a_scalar, b_scalar) = match &layout.abi {\n+                    layout::Abi::ScalarPair(a, b) => (a, b),\n                     _ => unreachable!(),\n                 };\n-                let clif_ty1 = scalar_to_clif_type(fx.tcx, a.clone());\n-                let clif_ty2 = scalar_to_clif_type(fx.tcx, b);\n+                let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n+                let clif_ty1 = scalar_to_clif_type(fx.tcx, a_scalar.clone());\n+                let clif_ty2 = scalar_to_clif_type(fx.tcx, b_scalar.clone());\n                 let val1 = fx.bcx.ins().load(clif_ty1, MemFlags::new(), addr, 0);\n                 let val2 = fx.bcx.ins().load(\n                     clif_ty2,\n                     MemFlags::new(),\n                     addr,\n-                    a.value.size(&fx.tcx).bytes() as i32,\n+                    b_offset,\n                 );\n                 (val1, val2)\n             }\n@@ -341,13 +347,14 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n             }\n             CValueInner::ByValPair(value, extra) => {\n                 match dst_layout.abi {\n-                    Abi::ScalarPair(ref a, _) => {\n+                    Abi::ScalarPair(ref a_scalar, ref b_scalar) => {\n+                        let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n                         fx.bcx.ins().store(MemFlags::new(), value, addr, 0);\n                         fx.bcx.ins().store(\n                             MemFlags::new(),\n                             extra,\n                             addr,\n-                            a.value.size(&fx.tcx).bytes() as u32 as i32,\n+                            b_offset,\n                         );\n                     }\n                     _ => bug!(\n@@ -415,26 +422,8 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         if !inner_layout.is_unsized() {\n             CPlace::Addr(self.to_cvalue(fx).load_scalar(fx), None, inner_layout)\n         } else {\n-            match self.layout().abi {\n-                Abi::ScalarPair(ref a, ref b) => {\n-                    let addr = self.to_addr(fx);\n-                    let ptr =\n-                        fx.bcx\n-                            .ins()\n-                            .load(scalar_to_clif_type(fx.tcx, a.clone()), MemFlags::new(), addr, 0);\n-                    let extra = fx.bcx.ins().load(\n-                        scalar_to_clif_type(fx.tcx, b.clone()),\n-                        MemFlags::new(),\n-                        addr,\n-                        a.value.size(&fx.tcx).bytes() as u32 as i32,\n-                    );\n-                    CPlace::Addr(ptr, Some(extra), inner_layout)\n-                }\n-                _ => bug!(\n-                    \"Fat ptr doesn't have abi ScalarPair, but it has {:?}\",\n-                    self.layout().abi\n-                ),\n-            }\n+            let (addr, extra) = self.to_cvalue(fx).load_scalar_pair(fx);\n+            CPlace::Addr(addr, Some(extra), inner_layout)\n         }\n     }\n \n@@ -444,23 +433,8 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n             dest.write_cvalue(fx, ptr);\n         } else {\n             let (value, extra) = self.to_addr_maybe_unsized(fx);\n-\n-            match dest.layout().abi {\n-                Abi::ScalarPair(ref a, _) => {\n-                    let dest_addr = dest.to_addr(fx);\n-                    fx.bcx.ins().store(MemFlags::new(), value, dest_addr, 0);\n-                    fx.bcx.ins().store(\n-                        MemFlags::new(),\n-                        extra.expect(\"unsized type without metadata\"),\n-                        dest_addr,\n-                        a.value.size(&fx.tcx).bytes() as u32 as i32,\n-                    );\n-                }\n-                _ => bug!(\n-                    \"Non ScalarPair abi {:?} in write_place_ref dest\",\n-                    dest.layout().abi\n-                ),\n-            }\n+            let ptr = CValue::by_val_pair(value, extra.expect(\"unsized type without metadata\"), dest.layout());\n+            dest.write_cvalue(fx, ptr);\n         }\n     }\n "}]}