{"sha": "012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMmZhNjllYTUwMGFhMzFjYjNkZDJjZDNkZjY3ZWNkM2VlZmQ0NGU=", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@dream.(none)", "date": "2011-02-16T19:02:02Z"}, "committer": {"name": "Rafael Avila de Espindola", "email": "espindola@dream.(none)", "date": "2011-02-16T19:02:02Z"}, "message": "More typechecking for native types and the needed plumbing in codegen.", "tree": {"sha": "565b715c332f4eaa83460e37c542ff914be77854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/565b715c332f4eaa83460e37c542ff914be77854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "html_url": "https://github.com/rust-lang/rust/commit/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/comments", "author": null, "committer": null, "parents": [{"sha": "d4bf67dde638fdeea4361daf16bee421d479628e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bf67dde638fdeea4361daf16bee421d479628e", "html_url": "https://github.com/rust-lang/rust/commit/d4bf67dde638fdeea4361daf16bee421d479628e"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "ee358432ff182c54e3583ff6fcf4c0cf54d6b73f", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "patch": "@@ -263,7 +263,7 @@ tag item_ {\n type native_item = spanned[native_item_];\n tag native_item_ {\n     native_item_ty(ident, def_id);\n-    native_item_fn(ident, fn_decl, vec[ty_param], def_id);\n+    native_item_fn(ident, fn_decl, vec[ty_param], def_id, ann);\n }\n \n fn index_view_item(mod_index index, @view_item it) {\n@@ -314,7 +314,7 @@ fn index_native_item(native_mod_index index, @native_item it) {\n         case (ast.native_item_ty(?id, _)) {\n             index.insert(id, it);\n         }\n-        case (ast.native_item_fn(?id, _, _, _)) {\n+        case (ast.native_item_fn(?id, _, _, _, _)) {\n             index.insert(id, it);\n         }\n     }"}, {"sha": "a108d2431e3f06ee83129a99eb5b47fd45dd6188", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "patch": "@@ -1693,7 +1693,8 @@ impure fn parse_item_native_fn(parser p, ast.effect eff) -> @ast.native_item {\n     auto decl = parse_fn_decl(p, eff);\n     auto hi = p.get_span();\n     expect(p, token.SEMI);\n-    auto item = ast.native_item_fn(t._1, decl, t._2, p.next_def_id());\n+    auto item = ast.native_item_fn(t._1, decl, t._2, p.next_def_id(),\n+                                   ast.ann_none);\n     ret @spanned(t._0, hi, item);\n }\n "}, {"sha": "db215ea9006b5eb30ded6ff30310e2d381d39870", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "patch": "@@ -214,7 +214,7 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp, ident ident,\n          &ast.fn_decl decl,\n          vec[ast.ty_param] ty_params,\n-         def_id id) -> @native_item)              fold_native_item_fn,\n+         def_id id, ann a) -> @native_item)       fold_native_item_fn,\n \n      (fn(&ENV e, &span sp, ident ident,\n          &ast._mod m, def_id id) -> @item)        fold_item_mod,\n@@ -921,10 +921,10 @@ fn fold_native_item[ENV](&ENV env, ast_fold[ENV] fld,\n         case (ast.native_item_ty(?ident, ?id)) {\n             ret fld.fold_native_item_ty(env_, i.span, ident, id);\n         }\n-        case (ast.native_item_fn(?ident, ?fn_decl, ?ty_params, ?id)) {\n+        case (ast.native_item_fn(?ident, ?fn_decl, ?ty_params, ?id, ?ann)) {\n             auto d = fold_fn_decl[ENV](env_, fld, fn_decl);\n             ret fld.fold_native_item_fn(env_, i.span, ident, d,\n-                                        ty_params, id);\n+                                        ty_params, id, ann);\n         }\n     }\n }\n@@ -1240,8 +1240,8 @@ fn identity_fold_item_fn[ENV](&ENV e, &span sp, ident i,\n fn identity_fold_native_item_fn[ENV](&ENV e, &span sp, ident i,\n                                      &ast.fn_decl decl,\n                                      vec[ast.ty_param] ty_params,\n-                                     def_id id) -> @native_item {\n-    ret @respan(sp, ast.native_item_fn(i, decl, ty_params, id));\n+                                     def_id id, ann a) -> @native_item {\n+    ret @respan(sp, ast.native_item_fn(i, decl, ty_params, id, a));\n }\n \n fn identity_fold_item_mod[ENV](&ENV e, &span sp, ident i,\n@@ -1454,7 +1454,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_item_const= bind identity_fold_item_const[ENV](_,_,_,_,_,_,_),\n          fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_,_,_),\n          fold_native_item_fn =\n-             bind identity_fold_native_item_fn[ENV](_,_,_,_,_,_),\n+             bind identity_fold_native_item_fn[ENV](_,_,_,_,_,_,_),\n          fold_item_mod  = bind identity_fold_item_mod[ENV](_,_,_,_,_),\n          fold_item_native_mod =\n              bind identity_fold_item_native_mod[ENV](_,_,_,_,_),"}, {"sha": "a2f4da6301ac20852b9b5d3734dc8fbcd0727fe4", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "patch": "@@ -233,7 +233,7 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n             case (ast.native_item_ty(_, ?id)) {\n                 ret def_wrap_other(ast.def_native_ty(id));\n             }\n-            case (ast.native_item_fn(_, _, _, ?id)) {\n+            case (ast.native_item_fn(_, _, _, ?id, _)) {\n                 ret def_wrap_other(ast.def_native_fn(id));\n             }\n         }\n@@ -381,7 +381,7 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n \n             case (scope_native_item(?it)) {\n                 alt (it.node) {\n-                    case (ast.native_item_fn(_, ?decl, ?ty_params, _)) {\n+                    case (ast.native_item_fn(_, ?decl, ?ty_params, _, _)) {\n                         ret handle_fn_decl(i, decl, ty_params);\n                     }\n                 }"}, {"sha": "037fd69f1076ec44ac8a2f229452c056229c8edf", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "patch": "@@ -70,6 +70,7 @@ state type crate_ctxt = rec(session.session sess,\n                             hashmap[str, ValueRef] item_names,\n                             hashmap[ast.def_id, ValueRef] item_ids,\n                             hashmap[ast.def_id, @ast.item] items,\n+                            hashmap[ast.def_id, @ast.native_item] native_items,\n                             hashmap[ast.def_id, @tag_info] tags,\n                             hashmap[ast.def_id, ValueRef] fn_pairs,\n                             hashmap[ast.def_id, ValueRef] consts,\n@@ -440,6 +441,7 @@ fn type_of_fn(@crate_ctxt cx, vec[ty.arg] inputs, @ty.t output) -> TypeRef {\n \n fn type_of_inner(@crate_ctxt cx, @ty.t t) -> TypeRef {\n     alt (t.struct) {\n+        case (ty.ty_native) { ret T_ptr(T_i8()); }\n         case (ty.ty_nil) { ret T_nil(); }\n         case (ty.ty_bool) { ret T_bool(); }\n         case (ty.ty_int) { ret T_int(); }\n@@ -2429,6 +2431,12 @@ fn trans_path(@block_ctxt cx, &ast.path p, &option.t[ast.def] dopt,\n                     check (cx.fcx.ccx.consts.contains_key(did));\n                     ret lval_mem(cx, cx.fcx.ccx.consts.get(did));\n                 }\n+                case (ast.def_native_fn(?did)) {\n+                    check (cx.fcx.ccx.native_items.contains_key(did));\n+                    auto fn_item = cx.fcx.ccx.native_items.get(did);\n+                    ret lval_generic_fn(cx, ty.native_item_ty(fn_item),\n+                                        did, ann);\n+                }\n                 case (_) {\n                     cx.fcx.ccx.sess.unimpl(\"def variant in trans\");\n                 }\n@@ -4053,6 +4061,18 @@ fn decl_fn_and_pair(@crate_ctxt cx,\n     cx.fn_pairs.insert(id, gvar);\n }\n \n+fn collect_native_item(&@crate_ctxt cx, @ast.native_item i) -> @crate_ctxt {\n+    alt (i.node) {\n+        case (ast.native_item_fn(?name, _, _, ?fid, ?ann)) {\n+            cx.native_items.insert(fid, i);\n+            if (! cx.obj_methods.contains_key(fid)) {\n+                decl_fn_and_pair(cx, \"fn\", name, ann, fid);\n+            }\n+        }\n+        case (_) { /* fall through */ }\n+    }\n+    ret cx;\n+}\n \n fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n \n@@ -4101,7 +4121,8 @@ fn collect_items(@crate_ctxt cx, @ast.crate crate) {\n     let fold.ast_fold[@crate_ctxt] fld =\n         fold.new_identity_fold[@crate_ctxt]();\n \n-    fld = @rec( update_env_for_item = bind collect_item(_,_)\n+    fld = @rec( update_env_for_item = bind collect_item(_,_),\n+                update_env_for_native_item = bind collect_native_item(_,_)\n                 with *fld );\n \n     fold.fold_crate[@crate_ctxt](cx, fld, crate);\n@@ -4559,6 +4580,7 @@ fn trans_crate(session.session sess, @ast.crate crate, str output,\n                    item_names = new_str_hash[ValueRef](),\n                    item_ids = new_def_hash[ValueRef](),\n                    items = new_def_hash[@ast.item](),\n+                   native_items = new_def_hash[@ast.native_item](),\n                    tags = new_def_hash[@tag_info](),\n                    fn_pairs = new_def_hash[ValueRef](),\n                    consts = new_def_hash[ValueRef](),"}, {"sha": "21b68fb51e8fcd5ec170e6dc986c3ca9084c8095", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "patch": "@@ -599,6 +599,22 @@ fn is_fn_ty(@t fty) -> bool {\n // Given an item, returns the associated type as well as a list of the IDs of\n // its type parameters.\n type ty_params_and_ty = tup(vec[ast.def_id], @t);\n+fn native_item_ty(@ast.native_item it) -> ty_params_and_ty {\n+    auto ty_params;\n+    auto result_ty;\n+    alt (it.node) {\n+        case (ast.native_item_fn(_, _, ?tps, _, ?ann)) {\n+            ty_params = tps;\n+            result_ty = ann_to_type(ann);\n+        }\n+    }\n+    let vec[ast.def_id] ty_param_ids = vec();\n+    for (ast.ty_param tp in ty_params) {\n+        ty_param_ids += vec(tp.id);\n+    }\n+    ret tup(ty_param_ids, result_ty);\n+}\n+\n fn item_ty(@ast.item it) -> ty_params_and_ty {\n     let vec[ast.ty_param] ty_params;\n     auto result_ty;"}, {"sha": "7ddc1d05ad923d24c014fd2d46ec9ebdbdae1413", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=012fa69ea500aa31cb3dd2cd3df67ecd3eefd44e", "patch": "@@ -266,7 +266,7 @@ fn ty_params_of_item(@ast.item item) -> vec[ast.ty_param] {\n \n fn ty_params_of_native_item(@ast.native_item item) -> vec[ast.ty_param] {\n     alt (item.node) {\n-        case (ast.native_item_fn(_, _, ?p, _)) {\n+        case (ast.native_item_fn(_, _, ?p, _, _)) {\n             ret p;\n         }\n         case (_) {\n@@ -432,7 +432,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n                          @ty_table item_to_ty,\n                          @ast.native_item it) -> @ty.t {\n         alt (it.node) {\n-            case (ast.native_item_fn(?ident, ?fn_decl, ?params, ?def_id)) {\n+            case (ast.native_item_fn(?ident, ?fn_decl, ?params, ?def_id, _)) {\n                 auto get = bind getter(id_to_ty_item, item_to_ty, _);\n                 auto convert = bind ast_ty_to_ty(get, _);\n                 auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n@@ -512,8 +512,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             case (ast.native_item_ty(_, ?def_id)) {\n                 id_to_ty_item.insert(def_id, any_item_native(i));\n             }\n-            case (ast.native_item_fn(_, _, _, ?def_id)) {\n-                id_to_ty_item.insert(def_id, any_item_native(i));\n+            case (_) {\n             }\n         }\n         ret id_to_ty_item;\n@@ -578,6 +577,16 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n         ret @fold.respan[ast.item_](sp, item);\n     }\n \n+    fn fold_native_item_fn(&@env e, &span sp, ast.ident i,\n+                           &ast.fn_decl d, vec[ast.ty_param] ty_params,\n+                           ast.def_id id, ast.ann a) -> @ast.native_item {\n+        check (e.item_to_ty.contains_key(id));\n+        auto ty = e.item_to_ty.get(id);\n+        auto item = ast.native_item_fn(i, d, ty_params, id,\n+                                       ast.ann_type(ty));\n+        ret @fold.respan[ast.native_item_](sp, item);\n+    }\n+\n     fn get_ctor_obj_methods(@ty.t t) -> vec[method] {\n         alt (t.struct) {\n             case (ty.ty_fn(_,?tobj)) {\n@@ -663,6 +672,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n              update_env_for_native_item = bind convert_native(_,_),\n              fold_item_const = bind fold_item_const(_,_,_,_,_,_,_),\n              fold_item_fn    = bind fold_item_fn(_,_,_,_,_,_,_),\n+             fold_native_item_fn = bind fold_native_item_fn(_,_,_,_,_,_,_),\n              fold_item_obj   = bind fold_item_obj(_,_,_,_,_,_,_),\n              fold_item_ty    = bind fold_item_ty(_,_,_,_,_,_,_),\n              fold_item_tag   = bind fold_item_tag(_,_,_,_,_,_)"}]}