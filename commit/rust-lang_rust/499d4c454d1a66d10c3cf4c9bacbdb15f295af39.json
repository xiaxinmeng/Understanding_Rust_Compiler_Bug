{"sha": "499d4c454d1a66d10c3cf4c9bacbdb15f295af39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OWQ0YzQ1NGQxYTY2ZDEwYzNjZjRjOWJhY2JkYjE1ZjI5NWFmMzk=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-05-24T17:18:31Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T14:09:42Z"}, "message": "Remove UnnecessaryUnsafe diagnostic, Fix Expr::Call unsafe analysis", "tree": {"sha": "867d1823b0533d2f198254c660cc03327651b57c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/867d1823b0533d2f198254c660cc03327651b57c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/499d4c454d1a66d10c3cf4c9bacbdb15f295af39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/499d4c454d1a66d10c3cf4c9bacbdb15f295af39", "html_url": "https://github.com/rust-lang/rust/commit/499d4c454d1a66d10c3cf4c9bacbdb15f295af39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/499d4c454d1a66d10c3cf4c9bacbdb15f295af39/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b358fbfdf82409700a8a328794429ec790306fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b358fbfdf82409700a8a328794429ec790306fc2", "html_url": "https://github.com/rust-lang/rust/commit/b358fbfdf82409700a8a328794429ec790306fc2"}], "stats": {"total": 92, "additions": 22, "deletions": 70}, "files": [{"sha": "0b7bcdc9def7b8f06a37997e4257feceb9643c1a", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/499d4c454d1a66d10c3cf4c9bacbdb15f295af39/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/499d4c454d1a66d10c3cf4c9bacbdb15f295af39/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=499d4c454d1a66d10c3cf4c9bacbdb15f295af39", "patch": "@@ -3,7 +3,10 @@\n use std::any::Any;\n \n use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n-use ra_syntax::{ast::{self, NameOwner}, AstNode, AstPtr, SyntaxNodePtr};\n+use ra_syntax::{\n+    ast::{self, NameOwner},\n+    AstNode, AstPtr, SyntaxNodePtr,\n+};\n use stdx::format_to;\n \n pub use hir_def::{diagnostics::UnresolvedModule, expr::MatchArm, path::Path};\n@@ -197,31 +200,3 @@ impl AstDiagnostic for MissingUnsafe {\n         ast::FnDef::cast(node).unwrap().name().unwrap()\n     }\n }\n-\n-#[derive(Debug)]\n-pub struct UnnecessaryUnsafe {\n-    pub file: HirFileId,\n-    pub fn_def: AstPtr<ast::FnDef>,\n-}\n-\n-impl Diagnostic for UnnecessaryUnsafe {\n-    fn message(&self) -> String {\n-        format!(\"Unnecessary unsafe keyword on fn\")\n-    }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.fn_def.clone().into() }\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-}\n-\n-impl AstDiagnostic for UnnecessaryUnsafe {\n-    type AST = ast::Name;\n-\n-    fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.source().file_id).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::FnDef::cast(node).unwrap().name().unwrap()\n-    }\n-}"}, {"sha": "1a0710e0b6890df4c4d50524f9ee9158686d9b73", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/499d4c454d1a66d10c3cf4c9bacbdb15f295af39/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/499d4c454d1a66d10c3cf4c9bacbdb15f295af39/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=499d4c454d1a66d10c3cf4c9bacbdb15f295af39", "patch": "@@ -13,8 +13,8 @@ use crate::{\n     db::HirDatabase,\n     diagnostics::{\n         MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields, MissingUnsafe,\n-        UnnecessaryUnsafe,\n     },\n+    lower::CallableDef,\n     utils::variant_data,\n     ApplicationTy, InferenceResult, Ty, TypeCtor,\n     _match::{is_useful, MatchCheckCtx, Matrix, PatStack, Usefulness},\n@@ -328,17 +328,14 @@ pub fn unsafe_expressions(\n     for (id, expr) in body.exprs.iter() {\n         match expr {\n             Expr::Call { callee, .. } => {\n-                if infer\n-                    .method_resolution(/* id */ *callee)\n-                    .map(|func| db.function_data(func).is_unsafe)\n-                    .unwrap_or(false)\n-                {\n-                    unsafe_expr_ids.push(id);\n-                }\n+                let ty = &infer.type_of_expr[*callee];\n+                if let &Ty::Apply(ApplicationTy {ctor: TypeCtor::FnDef(CallableDef::FunctionId(func)), .. }) = ty {\n+                    if db.function_data(func).is_unsafe {\n+                        unsafe_expr_ids.push(id);\n+                    }\n+                 }\n             }\n-            Expr::MethodCall {/*_receiver, method_name,*/ .. } => {\n-                // let receiver_ty = &infer.type_of_expr[*receiver];\n-                // receiver_ty\n+            Expr::MethodCall { .. } => {\n                 if infer\n                     .method_resolution(id)\n                     .map(|func| {\n@@ -382,9 +379,7 @@ impl<'a, 'b> UnsafeValidator<'a, 'b> {\n         let def = self.func.into();\n         let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n         let func_data = db.function_data(self.func);\n-        let unnecessary = func_data.is_unsafe && unsafe_expressions.len() == 0;\n-        let missing = !func_data.is_unsafe && unsafe_expressions.len() > 0;\n-        if !(unnecessary || missing) {\n+        if func_data.is_unsafe || unsafe_expressions.len() == 0 {\n             return;\n         }\n \n@@ -394,10 +389,6 @@ impl<'a, 'b> UnsafeValidator<'a, 'b> {\n         let file = in_file.file_id;\n         let fn_def = AstPtr::new(&in_file.value);\n \n-        if unnecessary {\n-            self.sink.push(UnnecessaryUnsafe { file, fn_def })\n-        } else {\n-            self.sink.push(MissingUnsafe { file, fn_def })\n-        }\n+        self.sink.push(MissingUnsafe { file, fn_def })\n     }\n }"}, {"sha": "28faccf383a7b3e3d80403ccf5938630179fe1c8", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/499d4c454d1a66d10c3cf4c9bacbdb15f295af39/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/499d4c454d1a66d10c3cf4c9bacbdb15f295af39/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=499d4c454d1a66d10c3cf4c9bacbdb15f295af39", "patch": "@@ -544,15 +544,15 @@ fn missing_unsafe_diagnostic_with_raw_ptr() {\n         r\"\n //- /lib.rs\n fn missing_unsafe() {\n-    let x = &5 as *usize;\n+    let x = &5 as *const usize;\n     let y = *x;\n }\n \",\n     )\n     .diagnostics()\n     .0;\n \n-    assert_snapshot!(diagnostics, @r#\"\"fn missing_unsafe() {\\n    let x = &5 as *usize;\\n    let y = *x;\\n}\": Missing unsafe keyword on fn\"#);\n+    assert_snapshot!(diagnostics, @r#\"\"fn missing_unsafe() {\\n    let x = &5 as *const usize;\\n    let y = *x;\\n}\": Missing unsafe keyword on fn\"#);\n }\n \n #[test]\n@@ -561,7 +561,7 @@ fn missing_unsafe_diagnostic_with_unsafe_call() {\n         r\"\n //- /lib.rs\n unsafe fn unsafe_fn() {\n-    let x = &5 as *usize;\n+    let x = &5 as *const usize;\n     let y = *x;\n }\n \n@@ -585,7 +585,7 @@ struct HasUnsafe;\n \n impl HasUnsafe {\n     unsafe fn unsafe_fn() {\n-        let x = &5 as *usize;\n+        let x = &5 as *const usize;\n         let y = *x;\n     }\n }\n@@ -609,7 +609,7 @@ fn no_missing_unsafe_diagnostic_with_raw_ptr_in_unsafe_block() {\n //- /lib.rs\n fn nothing_to_see_move_along() {\n     unsafe {\n-        let x = &5 as *usize;\n+        let x = &5 as *const usize;\n         let y = *x;\n     }\n }\n@@ -627,7 +627,7 @@ fn no_missing_unsafe_diagnostic_with_unsafe_call_in_unsafe_block() {\n         r\"\n //- /lib.rs\n unsafe fn unsafe_fn() {\n-    let x = &5 as *usize;\n+    let x = &5 as *const usize;\n     let y = *x;\n }\n \n@@ -653,7 +653,7 @@ struct HasUnsafe;\n \n impl HasUnsafe {\n     unsafe fn unsafe_fn() {\n-        let x = &5 as *usize;\n+        let x = &5 as *const usize;\n         let y = *x;\n     }\n }\n@@ -672,20 +672,6 @@ fn nothing_to_see_move_along() {\n     assert_snapshot!(diagnostics, @\"\");\n }\n \n-#[test]\n-fn unnecessary_unsafe_diagnostic() {\n-    let diagnostics = TestDB::with_files(\n-        r\"\n-//- /lib.rs\n-unsafe fn actually_safe_fn() {}\n-\",\n-    )\n-    .diagnostics()\n-    .0;\n-\n-    assert_snapshot!(diagnostics, @r#\"\"unsafe fn actually_safe_fn() {}\": Unnecessary unsafe keyword on fn\"#);\n-}\n-\n #[test]\n fn break_outside_of_loop() {\n     let diagnostics = TestDB::with_files("}, {"sha": "a2366f99774f95eae6f1bf12d0fbec26b0c3b76a", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/499d4c454d1a66d10c3cf4c9bacbdb15f295af39/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/499d4c454d1a66d10c3cf4c9bacbdb15f295af39/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=499d4c454d1a66d10c3cf4c9bacbdb15f295af39", "patch": "@@ -899,7 +899,7 @@ impl ast::LoopBodyOwner for LoopExpr {}\n impl LoopExpr {\n     pub fn loop_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![loop]) }\n }\n-/// Block expression with an optional prefix (label, try ketword,\n+/// Block expression with an optional prefix (label, try keyword,\n /// unsafe keyword, async keyword...).\n ///\n /// ```"}]}