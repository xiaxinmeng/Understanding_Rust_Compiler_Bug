{"sha": "790a71642019ebab8801e3237d3f8ff0472dc764", "node_id": "C_kwDOAAsO6NoAKDc5MGE3MTY0MjAxOWViYWI4ODAxZTMyMzdkM2Y4ZmYwNDcyZGM3NjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-29T06:57:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-29T06:57:35Z"}, "message": "Rollup merge of #103383 - compiler-errors:tait-scope, r=oli-obk\n\nNote scope of TAIT more accurately\n\nThis maybe explains why the person was confused in #101897, since we say \"same module\" but really should've said \"same impl\".\n\nr? ``@oli-obk``", "tree": {"sha": "10edadaa2372425b2441784067389431f35a305b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10edadaa2372425b2441784067389431f35a305b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/790a71642019ebab8801e3237d3f8ff0472dc764", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXM7fCRBK7hj4Ov3rIwAAv8AIAHr6IsGtmC72bKHnSBixK58W\nVAB8bhQe8TGZ4jz4M4HjP2/sCgvH5+jMDI+AlnCwWtP5EPSxM0AwFSeZXp4N76oj\n9NfSHHyOJEAiH5QnRUPFjMgZ634fD8Q7kW6IV12jET+YiUP5r5NULXLtckIQl/8n\nkIIB/HfeMkXGw4hfwALWzUtUdY+bXUFnALvcPxprCBcS9vXfol1QKpKXQUgP0G1G\nLMzzeG9TEbjSHARBJOG0JxM0n7GKReBwyzpea4EDuAUs8zegE+LQKmLp8baDWPDT\nyWv7/2hsusKbj/Th77TBkDOBtAe/Q4UAxxKQA5ZP3VTkwJ2Bpra7q4ViYVzdyWk=\n=KmIV\n-----END PGP SIGNATURE-----\n", "payload": "tree 10edadaa2372425b2441784067389431f35a305b\nparent 67c469faf02e6e68013abdc5388162203fdc665d\nparent 4accf838f6d847c0c93f4c25540446dad0309519\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667026655 +0200\ncommitter GitHub <noreply@github.com> 1667026655 +0200\n\nRollup merge of #103383 - compiler-errors:tait-scope, r=oli-obk\n\nNote scope of TAIT more accurately\n\nThis maybe explains why the person was confused in #101897, since we say \"same module\" but really should've said \"same impl\".\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/790a71642019ebab8801e3237d3f8ff0472dc764", "html_url": "https://github.com/rust-lang/rust/commit/790a71642019ebab8801e3237d3f8ff0472dc764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/790a71642019ebab8801e3237d3f8ff0472dc764/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67c469faf02e6e68013abdc5388162203fdc665d", "url": "https://api.github.com/repos/rust-lang/rust/commits/67c469faf02e6e68013abdc5388162203fdc665d", "html_url": "https://github.com/rust-lang/rust/commit/67c469faf02e6e68013abdc5388162203fdc665d"}, {"sha": "4accf838f6d847c0c93f4c25540446dad0309519", "url": "https://api.github.com/repos/rust-lang/rust/commits/4accf838f6d847c0c93f4c25540446dad0309519", "html_url": "https://github.com/rust-lang/rust/commit/4accf838f6d847c0c93f4c25540446dad0309519"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "74088f4dfbe70d46b03b4a96a554a0c216e32d62", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790a71642019ebab8801e3237d3f8ff0472dc764/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/790a71642019ebab8801e3237d3f8ff0472dc764/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=790a71642019ebab8801e3237d3f8ff0472dc764", "patch": "@@ -93,7 +93,7 @@ hir_analysis_expected_default_return_type = expected `()` because of default ret\n hir_analysis_expected_return_type = expected `{$expected}` because of return type\n \n hir_analysis_unconstrained_opaque_type = unconstrained opaque type\n-    .note = `{$name}` must be used in combination with a concrete type within the same module\n+    .note = `{$name}` must be used in combination with a concrete type within the same {$what}\n \n hir_analysis_missing_type_params =\n     the type {$parameterCount ->"}, {"sha": "45d2f23f36b567a94ccc681161c1e992bf1d136c", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/790a71642019ebab8801e3237d3f8ff0472dc764/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790a71642019ebab8801e3237d3f8ff0472dc764/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=790a71642019ebab8801e3237d3f8ff0472dc764", "patch": "@@ -701,6 +701,12 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n         tcx.sess.emit_err(UnconstrainedOpaqueType {\n             span: tcx.def_span(def_id),\n             name: tcx.item_name(tcx.local_parent(def_id).to_def_id()),\n+            what: match tcx.hir().get(scope) {\n+                _ if scope == hir::CRATE_HIR_ID => \"module\",\n+                Node::Item(hir::Item { kind: hir::ItemKind::Mod(_), .. }) => \"module\",\n+                Node::Item(hir::Item { kind: hir::ItemKind::Impl(_), .. }) => \"impl\",\n+                _ => \"item\",\n+            },\n         });\n         return tcx.ty_error();\n     };"}, {"sha": "d5b1a7ce1c26967ff058457b99a76b7db87e9c2f", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/790a71642019ebab8801e3237d3f8ff0472dc764/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790a71642019ebab8801e3237d3f8ff0472dc764/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=790a71642019ebab8801e3237d3f8ff0472dc764", "patch": "@@ -143,6 +143,7 @@ pub struct UnconstrainedOpaqueType {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n+    pub what: &'static str,\n }\n \n pub struct MissingTypeParams {"}, {"sha": "eae9bd9b16f2d6bb05442d0fcaa6a338a27824af", "filename": "src/test/ui/generic-associated-types/issue-87258_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790a71642019ebab8801e3237d3f8ff0472dc764/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/790a71642019ebab8801e3237d3f8ff0472dc764/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr?ref=790a71642019ebab8801e3237d3f8ff0472dc764", "patch": "@@ -4,7 +4,7 @@ error: unconstrained opaque type\n LL |     type FooFuture<'a> = impl Trait1;\n    |                          ^^^^^^^^^^^\n    |\n-   = note: `FooFuture` must be used in combination with a concrete type within the same module\n+   = note: `FooFuture` must be used in combination with a concrete type within the same impl\n \n error: aborting due to previous error\n "}, {"sha": "2f1fb4c46c08b91695a5ddbe43c749692112724e", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790a71642019ebab8801e3237d3f8ff0472dc764/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/790a71642019ebab8801e3237d3f8ff0472dc764/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr?ref=790a71642019ebab8801e3237d3f8ff0472dc764", "patch": "@@ -67,7 +67,7 @@ error: unconstrained opaque type\n LL |     type U = impl Trait;\n    |              ^^^^^^^^^^\n    |\n-   = note: `U` must be used in combination with a concrete type within the same module\n+   = note: `U` must be used in combination with a concrete type within the same impl\n \n error: aborting due to 6 previous errors; 2 warnings emitted\n "}, {"sha": "404efbeac1e13d124c8943fc16768e5411a44cdc", "filename": "src/test/ui/lint/no-coverage.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790a71642019ebab8801e3237d3f8ff0472dc764/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/790a71642019ebab8801e3237d3f8ff0472dc764/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr?ref=790a71642019ebab8801e3237d3f8ff0472dc764", "patch": "@@ -94,7 +94,7 @@ error: unconstrained opaque type\n LL |     type U = impl Trait;\n    |              ^^^^^^^^^^\n    |\n-   = note: `U` must be used in combination with a concrete type within the same module\n+   = note: `U` must be used in combination with a concrete type within the same impl\n \n error: aborting due to 7 previous errors; 6 warnings emitted\n "}, {"sha": "4452ee7915baab165d1b91332966d7859114ab24", "filename": "src/test/ui/save-analysis/issue-68621.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790a71642019ebab8801e3237d3f8ff0472dc764/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/790a71642019ebab8801e3237d3f8ff0472dc764/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr?ref=790a71642019ebab8801e3237d3f8ff0472dc764", "patch": "@@ -4,7 +4,7 @@ error: unconstrained opaque type\n LL |     type Future = impl Trait;\n    |                   ^^^^^^^^^^\n    |\n-   = note: `Future` must be used in combination with a concrete type within the same module\n+   = note: `Future` must be used in combination with a concrete type within the same impl\n \n error: aborting due to previous error\n "}]}