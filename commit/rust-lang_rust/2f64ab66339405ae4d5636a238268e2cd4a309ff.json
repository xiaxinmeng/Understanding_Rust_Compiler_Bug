{"sha": "2f64ab66339405ae4d5636a238268e2cd4a309ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNjRhYjY2MzM5NDA1YWU0ZDU2MzZhMjM4MjY4ZTJjZDRhMzA5ZmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-24T23:22:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-04T18:01:42Z"}, "message": "{HirId,ItemLocal}{Map,Set} -> rustc::hir & nix rustc::nodemap", "tree": {"sha": "ad07ce243d47cc4ddfb61ef208573360e3cfc572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad07ce243d47cc4ddfb61ef208573360e3cfc572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f64ab66339405ae4d5636a238268e2cd4a309ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f64ab66339405ae4d5636a238268e2cd4a309ff", "html_url": "https://github.com/rust-lang/rust/commit/2f64ab66339405ae4d5636a238268e2cd4a309ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f64ab66339405ae4d5636a238268e2cd4a309ff/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca297f8cf45b98c65e090528da97bf873f2bec2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca297f8cf45b98c65e090528da97bf873f2bec2b", "html_url": "https://github.com/rust-lang/rust/commit/ca297f8cf45b98c65e090528da97bf873f2bec2b"}], "stats": {"total": 50, "additions": 16, "deletions": 34}, "files": [{"sha": "1c7d36b731225a41f3939626c84582019e2cb307", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -44,7 +44,7 @@ macro_rules! arena_types {\n             [few, decode] mir_keys: rustc::hir::def_id::DefIdSet,\n             [decode] specialization_graph: rustc::traits::specialization_graph::Graph,\n             [] region_scope_tree: rustc::middle::region::ScopeTree,\n-            [] item_local_set: rustc::util::nodemap::ItemLocalSet,\n+            [] item_local_set: rustc::hir::ItemLocalSet,\n             [decode] mir_const_qualif: rustc_index::bit_set::BitSet<rustc::mir::Local>,\n             [] trait_impls_of: rustc::ty::trait_def::TraitImpls,\n             [] dropck_outlives:"}, {"sha": "ce1b8ca2f8862bbb3568100c93937e2d267a0a4f", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -93,6 +93,9 @@ impl fmt::Display for HirId {\n     }\n }\n \n+rustc_data_structures::define_id_collections!(HirIdMap, HirIdSet, HirId);\n+rustc_data_structures::define_id_collections!(ItemLocalMap, ItemLocalSet, ItemLocalId);\n+\n // Hack to ensure that we don't try to access the private parts of `ItemLocalId` in this module.\n mod item_local_id_inner {\n     use rustc_index::vec::Idx;"}, {"sha": "9882b021ff30e5ed9b12b07eeae736c992c66881", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -105,7 +105,6 @@ pub mod util {\n     pub mod bug;\n     pub mod captures;\n     pub mod common;\n-    pub mod nodemap;\n }\n \n // Allows macros to refer to this crate as `::rustc`"}, {"sha": "842728e5a9f00e564714ff373572de748f52da5f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -7,7 +7,8 @@ use crate::hir::def::{DefKind, Export, Res};\n use crate::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n use crate::hir::map as hir_map;\n use crate::hir::map::DefPathHash;\n-use crate::hir::{self, HirId, ItemKind, ItemLocalId, Node, TraitCandidate};\n+use crate::hir::{self, HirId, Node, TraitCandidate};\n+use crate::hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::infer::outlives::free_region_map::FreeRegionMap;\n@@ -46,7 +47,6 @@ use crate::ty::{ExistentialPredicate, InferTy, ParamTy, PolyFnSig, Predicate, Pr\n use crate::ty::{InferConst, ParamConst};\n use crate::ty::{List, TyKind, TyS};\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::{ItemLocalMap, ItemLocalSet};\n \n use arena::SyncDroplessArena;\n use errors::DiagnosticBuilder;"}, {"sha": "a29d78318a065392c9531c8cc66ab826ef0e482e", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -1,7 +1,7 @@\n use crate::dep_graph::{self, DepNode};\n use crate::hir::def::{DefKind, Export};\n use crate::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex};\n-use crate::hir::{self, ItemLocalId, TraitCandidate};\n+use crate::hir::{self, HirIdSet, ItemLocalId, TraitCandidate};\n use crate::infer::canonical::{self, Canonical};\n use crate::lint;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n@@ -37,7 +37,6 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::util::NeedsDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::HirIdSet;\n use rustc_data_structures::profiling::ProfileCategory::*;\n \n use rustc_data_structures::fingerprint::Fingerprint;"}, {"sha": "a7d79b9f3414cc4ca9ae639c4db9ac9d86a8b793", "filename": "src/librustc/util/nodemap.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca297f8cf45b98c65e090528da97bf873f2bec2b/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca297f8cf45b98c65e090528da97bf873f2bec2b/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=ca297f8cf45b98c65e090528da97bf873f2bec2b", "patch": "@@ -1,8 +0,0 @@\n-//! An efficient hash map for `NodeId`s.\n-\n-use crate::hir::{HirId, ItemLocalId};\n-\n-use rustc_data_structures::define_id_collections;\n-\n-define_id_collections!(HirIdMap, HirIdSet, HirId);\n-define_id_collections!(ItemLocalMap, ItemLocalSet, ItemLocalId);"}, {"sha": "5e107b2f72d621eb8fc29e5974bfc3ac56f7971d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -23,15 +23,14 @@\n \n use std::fmt::Write;\n \n-use hir::Node;\n use lint::{EarlyContext, EarlyLintPass, LateLintPass, LintPass};\n use lint::{LateContext, LintArray, LintContext};\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::DefId;\n+use rustc::hir::{HirIdSet, Node};\n+use rustc::lint;\n use rustc::lint::FutureIncompatibleInfo;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n-use rustc::{lint, util};\n-use util::nodemap::HirIdSet;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::Stability;"}, {"sha": "39edcc981a005f6919127bc1a41e856515f12ed6", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -4,15 +4,13 @@ use crate::hair::cx::Cx;\n use crate::hair::{BindingMode, LintLevel, PatKind};\n use crate::transform::MirSource;\n use crate::util as mir_util;\n-use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::{GeneratorKind, Node};\n+use rustc::hir::{self, GeneratorKind, HirIdMap, Node};\n use rustc::middle::lang_items;\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::util::nodemap::HirIdMap;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::symbol::kw;\n use rustc_span::Span;"}, {"sha": "6a38524720e27307008aa502551250c59abbda75", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -96,16 +96,13 @@\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use rustc::hir;\n use rustc::hir::def::*;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n-use rustc::hir::Node;\n-use rustc::hir::{Expr, HirId};\n+use rustc::hir::{self, Expr, HirId, HirIdMap, HirIdSet, Node};\n use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n-use rustc::util::nodemap::{HirIdMap, HirIdSet};\n \n use errors::Applicability;\n use rustc_data_structures::fx::FxIndexMap;"}, {"sha": "4bcba96910bde2d979f8120a33a5b69721f1e11e", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -5,20 +5,19 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use rustc::hir;\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::hir::intravisit;\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::Node;\n+use rustc::hir::{self, HirIdSet};\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::privacy;\n use rustc::session::config;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n-use rustc::util::nodemap::HirIdSet;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi::Abi;"}, {"sha": "1b91f48d78f2ccf1f09617b5f793cdd86e795db4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -11,14 +11,13 @@ use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::itemlikevisit::DeepVisitor;\n-use rustc::hir::{self, AssocItemKind, Node, PatKind};\n+use rustc::hir::{self, AssocItemKind, HirIdSet, Node, PatKind};\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n-use rustc::util::nodemap::HirIdSet;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym};"}, {"sha": "5d82c177259448859a12914f1ffdd3e5b358f4d7", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -10,13 +10,12 @@ use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n-use rustc::hir::{self, GenericParamKind, LifetimeParamKind};\n+use rustc::hir::{self, GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n use rustc::hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n-use rustc::util::nodemap::{HirIdMap, HirIdSet};\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_span::symbol::{kw, sym};"}, {"sha": "312208626cf2d83488ce18ad741111424847e651", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -95,7 +95,7 @@ use rustc::hir::def::{CtorOf, DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::{self, ExprKind, GenericArg, ItemKind, Node, PatKind, QPath};\n+use rustc::hir::{self, ExprKind, GenericArg, HirIdMap, ItemKind, Node, PatKind, QPath};\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::opaque_types::OpaqueTypeDecl;\n@@ -145,7 +145,6 @@ use crate::session::config::EntryFnType;\n use crate::session::Session;\n use crate::util::captures::Captures;\n use crate::util::common::{indenter, ErrorReported};\n-use crate::util::nodemap::HirIdMap;\n use crate::TypeAndSubsts;\n \n use self::autoderef::Autoderef;"}, {"sha": "db3e7a2b1342857004c85f0976c09c22e06a77c4", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f64ab66339405ae4d5636a238268e2cd4a309ff/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=2f64ab66339405ae4d5636a238268e2cd4a309ff", "patch": "@@ -9,10 +9,9 @@\n // `InferredIndex` is a newtype'd int representing the index of such\n // a variable.\n \n-use crate::util::nodemap::HirIdMap;\n use arena::TypedArena;\n-use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir::{self, HirIdMap};\n use rustc::ty::{self, TyCtxt};\n use std::fmt;\n "}]}