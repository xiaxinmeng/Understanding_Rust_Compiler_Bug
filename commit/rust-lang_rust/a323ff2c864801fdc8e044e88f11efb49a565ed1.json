{"sha": "a323ff2c864801fdc8e044e88f11efb49a565ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMjNmZjJjODY0ODAxZmRjOGUwNDRlODhmMTFlZmI0OWE1NjVlZDE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-06-13T19:36:15Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-21T18:41:21Z"}, "message": "Implement RFC 2532 \u2013 Associated Type Defaults", "tree": {"sha": "b9de022262d7a61c7c233f80595a1e978dc3d658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9de022262d7a61c7c233f80595a1e978dc3d658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a323ff2c864801fdc8e044e88f11efb49a565ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a323ff2c864801fdc8e044e88f11efb49a565ed1", "html_url": "https://github.com/rust-lang/rust/commit/a323ff2c864801fdc8e044e88f11efb49a565ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a323ff2c864801fdc8e044e88f11efb49a565ed1/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187f3d73abf35404b12782993d6e8880e866d6d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/187f3d73abf35404b12782993d6e8880e866d6d1", "html_url": "https://github.com/rust-lang/rust/commit/187f3d73abf35404b12782993d6e8880e866d6d1"}], "stats": {"total": 398, "additions": 247, "deletions": 151}, "files": [{"sha": "8d9e5d3fa20fbd0a2921e716ef92ee98a01f9c67", "filename": "src/librustc_infer/traits/project.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fproject.rs?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -1054,25 +1054,40 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     // an error when we confirm the candidate\n                     // (which will ultimately lead to `normalize_to_error`\n                     // being invoked).\n-                    node_item.item.defaultness.has_value()\n+                    false\n                 } else {\n+                    // If we're looking at a trait *impl*, the item is\n+                    // specializable if the impl or the item are marked\n+                    // `default`.\n                     node_item.item.defaultness.is_default()\n                         || super::util::impl_is_default(selcx.tcx(), node_item.node.def_id())\n                 };\n \n-                // Only reveal a specializable default if we're past type-checking\n-                // and the obligations is monomorphic, otherwise passes such as\n-                // transmute checking and polymorphic MIR optimizations could\n-                // get a result which isn't correct for all monomorphizations.\n-                if !is_default {\n-                    true\n-                } else if obligation.param_env.reveal == Reveal::All {\n-                    // NOTE(eddyb) inference variables can resolve to parameters, so\n-                    // assume `poly_trait_ref` isn't monomorphic, if it contains any.\n-                    let poly_trait_ref = selcx.infcx().resolve_vars_if_possible(&poly_trait_ref);\n-                    !poly_trait_ref.needs_infer() && !poly_trait_ref.needs_subst()\n-                } else {\n-                    false\n+                match is_default {\n+                    // Non-specializable items are always projectable\n+                    false => true,\n+\n+                    // Only reveal a specializable default if we're past type-checking\n+                    // and the obligation is monomorphic, otherwise passes such as\n+                    // transmute checking and polymorphic MIR optimizations could\n+                    // get a result which isn't correct for all monomorphizations.\n+                    true if obligation.param_env.reveal == Reveal::All => {\n+                        // NOTE(eddyb) inference variables can resolve to parameters, so\n+                        // assume `poly_trait_ref` isn't monomorphic, if it contains any.\n+                        let poly_trait_ref =\n+                            selcx.infcx().resolve_vars_if_possible(&poly_trait_ref);\n+                        !poly_trait_ref.needs_infer() && !poly_trait_ref.needs_subst()\n+                    }\n+\n+                    true => {\n+                        debug!(\n+                            \"assemble_candidates_from_impls: not eligible due to default: \\\n+                             assoc_ty={} predicate={}\",\n+                            selcx.tcx().def_path_str(node_item.item.def_id),\n+                            obligation.predicate,\n+                        );\n+                        false\n+                    }\n                 }\n             }\n             super::VtableParam(..) => {"}, {"sha": "4ab5d8f9ad3f6d63b1f14bec6910d223a24b0166", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -1964,7 +1964,6 @@ fn check_impl_items_against_trait<'tcx>(\n \n     // Locate trait definition and items\n     let trait_def = tcx.trait_def(impl_trait_ref.def_id);\n-    let mut overridden_associated_type = None;\n \n     let impl_items = || impl_item_refs.iter().map(|iiref| tcx.hir().impl_item(iiref.id));\n \n@@ -2046,9 +2045,6 @@ fn check_impl_items_against_trait<'tcx>(\n                 hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(_) => {\n                     let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n                     if ty_trait_item.kind == ty::AssocKind::Type {\n-                        if ty_trait_item.defaultness.has_value() {\n-                            overridden_associated_type = Some(impl_item);\n-                        }\n                         compare_ty_impl(\n                             tcx,\n                             &ty_impl_item,\n@@ -2082,8 +2078,6 @@ fn check_impl_items_against_trait<'tcx>(\n \n     // Check for missing items from trait\n     let mut missing_items = Vec::new();\n-    let mut invalidated_items = Vec::new();\n-    let associated_type_overridden = overridden_associated_type.is_some();\n     for trait_item in tcx.associated_items(impl_trait_ref.def_id).in_definition_order() {\n         let is_implemented = trait_def\n             .ancestors(tcx, impl_id)\n@@ -2094,28 +2088,13 @@ fn check_impl_items_against_trait<'tcx>(\n         if !is_implemented && !traits::impl_is_default(tcx, impl_id) {\n             if !trait_item.defaultness.has_value() {\n                 missing_items.push(*trait_item);\n-            } else if associated_type_overridden {\n-                invalidated_items.push(trait_item.ident);\n             }\n         }\n     }\n \n     if !missing_items.is_empty() {\n         missing_items_err(tcx, impl_span, &missing_items, full_impl_span);\n     }\n-\n-    if !invalidated_items.is_empty() {\n-        let invalidator = overridden_associated_type.unwrap();\n-        struct_span_err!(\n-            tcx.sess,\n-            invalidator.span,\n-            E0399,\n-            \"the following trait items need to be reimplemented as `{}` was overridden: `{}`\",\n-            invalidator.ident,\n-            invalidated_items.iter().map(|name| name.to_string()).collect::<Vec<_>>().join(\"`, `\")\n-        )\n-        .emit();\n-    }\n }\n \n fn missing_items_err("}, {"sha": "72c30df0b3dff2342349da998fe2112c0d932702", "filename": "src/test/ui/associated-types/associated-types-overridden-default.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.rs?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -1,3 +1,8 @@\n+// check-pass\n+\n+// Before RFC 2532, overriding one assoc. type default required overriding all\n+// provided defaults.\n+\n #![feature(associated_type_defaults)]\n \n pub trait Tr {\n@@ -9,7 +14,6 @@ pub trait Tr {\n \n impl Tr for () {\n     type Assoc = ();\n-    //~^ ERROR need to be reimplemented as `Assoc` was overridden: `Assoc2`, `C`, `foo`\n }\n \n fn main() {}"}, {"sha": "79fb9a613c2da3c41f1c2c0620d204fe547c0afa", "filename": "src/test/ui/associated-types/associated-types-overridden-default.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/187f3d73abf35404b12782993d6e8880e866d6d1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/187f3d73abf35404b12782993d6e8880e866d6d1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.stderr?ref=187f3d73abf35404b12782993d6e8880e866d6d1", "patch": "@@ -1,9 +0,0 @@\n-error[E0399]: the following trait items need to be reimplemented as `Assoc` was overridden: `Assoc2`, `C`, `foo`\n-  --> $DIR/associated-types-overridden-default.rs:11:5\n-   |\n-LL |     type Assoc = ();\n-   |     ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0399`."}, {"sha": "ab66fe0b52ee79405a068c7445217fd7a7f0eb84", "filename": "src/test/ui/associated-types/defaults-cyclic-fail.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail.rs?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -0,0 +1,35 @@\n+#![feature(associated_type_defaults)]\n+\n+// Having a cycle in assoc. type defaults is okay...\n+trait Tr {\n+    type A = Self::B;\n+    type B = Self::A;\n+}\n+\n+// ...but is an error in any impl that doesn't override at least one of the defaults\n+impl Tr for () {}\n+//~^ ERROR overflow evaluating the requirement\n+\n+// As soon as at least one is redefined, it works:\n+impl Tr for u8 {\n+    type A = u8;\n+}\n+\n+impl Tr for u32 {\n+    type A = ();\n+    type B = u8;\n+}\n+\n+// ...but only if this actually breaks the cycle\n+impl Tr for bool {\n+//~^ ERROR overflow evaluating the requirement\n+    type A = Box<Self::B>;\n+    //~^ ERROR overflow evaluating the requirement\n+}\n+// (the error is shown twice for some reason)\n+\n+fn main() {\n+    // Check that the overridden type propagates to the other\n+    let _a: <u8 as Tr>::A = 0u8;\n+    let _b: <u8 as Tr>::B = 0u8;\n+}"}, {"sha": "dd0e5c2ef42147dd47ae8cd54d0256d42f25d3e5", "filename": "src/test/ui/associated-types/defaults-cyclic-fail.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail.stderr?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -0,0 +1,21 @@\n+error[E0275]: overflow evaluating the requirement `<() as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail.rs:10:6\n+   |\n+LL | impl Tr for () {}\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail.rs:24:6\n+   |\n+LL | impl Tr for bool {\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail.rs:26:5\n+   |\n+LL |     type A = Box<Self::B>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "618a203850785555f5bc3712098e2d887611f2f2", "filename": "src/test/ui/associated-types/defaults-cyclic-pass.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass.rs?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![feature(associated_type_defaults)]\n+\n+trait Tr {\n+    type Item = u8;\n+    type Container = Vec<Self::Item>;\n+}\n+\n+impl Tr for () {}\n+\n+impl Tr for u16 {\n+    type Item = u16;\n+}\n+\n+fn main() {\n+    let _container: <() as Tr>::Container = Vec::<u8>::new();\n+    let _item: <() as Tr>::Item = 0u8;\n+\n+    let _container: <u16 as Tr>::Container = Vec::<u16>::new();\n+    let _item: <u16 as Tr>::Item = 0u16;\n+}"}, {"sha": "0455997b168087ff47f03d505c62d232a1deedd7", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -0,0 +1,50 @@\n+#![feature(associated_type_defaults)]\n+\n+// Associated type defaults may not be assumed inside the trait defining them.\n+// ie. they only resolve to `<Self as Tr>::A`, not the actual type `()`\n+trait Tr {\n+    type A = ();\n+\n+    fn f(p: Self::A) {\n+        let () = p;\n+        //~^ ERROR mismatched types\n+        //~| NOTE expected associated type, found `()`\n+        //~| NOTE expected associated type `<Self as Tr>::A`\n+        //~| NOTE consider constraining\n+        //~| NOTE for more information, visit\n+    }\n+}\n+\n+// An impl that doesn't override the type *can* assume the default.\n+impl Tr for () {\n+    fn f(p: Self::A) {\n+        let () = p;\n+    }\n+}\n+\n+impl Tr for u8 {\n+    type A = ();\n+\n+    fn f(p: Self::A) {\n+        let () = p;\n+    }\n+}\n+\n+trait AssocConst {\n+    type Ty = u8;\n+\n+    // Assoc. consts also cannot assume that default types hold\n+    const C: Self::Ty = 0u8;\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected associated type, found `u8`\n+    //~| NOTE expected associated type `<Self as AssocConst>::Ty`\n+    //~| NOTE consider constraining\n+    //~| NOTE for more information, visit\n+}\n+\n+// An impl can, however\n+impl AssocConst for () {\n+    const C: Self::Ty = 0u8;\n+}\n+\n+fn main() {}"}, {"sha": "9ecfe49c2b571bbd2781fc35dd3262d5a299744b", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -0,0 +1,25 @@\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-in-other-trait-items.rs:9:13\n+   |\n+LL |         let () = p;\n+   |             ^^ expected associated type, found `()`\n+   |\n+   = note: expected associated type `<Self as Tr>::A`\n+                    found unit type `()`\n+   = note: consider constraining the associated type `<Self as Tr>::A` to `()` or calling a method that returns `<Self as Tr>::A`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-in-other-trait-items.rs:37:25\n+   |\n+LL |     const C: Self::Ty = 0u8;\n+   |                         ^^^ expected associated type, found `u8`\n+   |\n+   = note: expected associated type `<Self as AssocConst>::Ty`\n+                         found type `u8`\n+   = note: consider constraining the associated type `<Self as AssocConst>::Ty` to `u8` or calling a method that returns `<Self as AssocConst>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "03347d5b99a3163073511d5498326c46f86fa9e9", "filename": "src/test/ui/privacy/associated-item-privacy-trait.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -23,8 +23,7 @@ mod priv_trait {\n         <Pub as PrivTr>::CONST;\n         //~^ ERROR associated constant `PrivTr::CONST` is private\n         let _: <Pub as PrivTr>::AssocTy;\n-        //~^ ERROR trait `priv_trait::PrivTr` is private\n-        //~| ERROR trait `priv_trait::PrivTr` is private\n+        //~^ ERROR associated type `PrivTr::AssocTy` is private\n         pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n         pub trait InSignatureTr: PrivTr {}\n@@ -116,15 +115,11 @@ mod priv_parent_substs {\n         <Priv as PubTr<_>>::CONST;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n \n-        let _: <Pub as PubTr>::AssocTy;\n-        //~^ ERROR type `priv_parent_substs::Priv` is private\n-        //~| ERROR type `priv_parent_substs::Priv` is private\n+        let _: <Pub as PubTr>::AssocTy;  // FIXME no longer an error?!\n         let _: <Pub as PubTr<_>>::AssocTy;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n-        //~| ERROR type `priv_parent_substs::Priv` is private\n         let _: <Priv as PubTr<_>>::AssocTy;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n-        //~| ERROR type `priv_parent_substs::Priv` is private\n \n         pub type InSignatureTy1 = <Pub as PubTr>::AssocTy;\n         //~^ ERROR type `priv_parent_substs::Priv` is private"}, {"sha": "db24e425a01f694e949b22ba697ac53cae5399f1", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 29, "deletions": 84, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -42,18 +42,7 @@ LL |     priv_trait::mac!();\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: trait `priv_trait::PrivTr` is private\n-  --> $DIR/associated-item-privacy-trait.rs:25:13\n-   |\n-LL |         let _: <Pub as PrivTr>::AssocTy;\n-   |             ^\n-...\n-LL |     priv_trait::mac!();\n-   |     ------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: trait `priv_trait::PrivTr` is private\n+error: associated type `PrivTr::AssocTy` is private\n   --> $DIR/associated-item-privacy-trait.rs:25:16\n    |\n LL |         let _: <Pub as PrivTr>::AssocTy;\n@@ -65,7 +54,7 @@ LL |     priv_trait::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n-  --> $DIR/associated-item-privacy-trait.rs:28:34\n+  --> $DIR/associated-item-privacy-trait.rs:27:34\n    |\n LL |         pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -76,7 +65,7 @@ LL |     priv_trait::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n-  --> $DIR/associated-item-privacy-trait.rs:30:34\n+  --> $DIR/associated-item-privacy-trait.rs:29:34\n    |\n LL |         pub trait InSignatureTr: PrivTr {}\n    |                                  ^^^^^^\n@@ -87,7 +76,7 @@ LL |     priv_trait::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n-  --> $DIR/associated-item-privacy-trait.rs:32:14\n+  --> $DIR/associated-item-privacy-trait.rs:31:14\n    |\n LL |         impl PrivTr for u8 {}\n    |              ^^^^^^\n@@ -98,7 +87,7 @@ LL |     priv_trait::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:49:21\n+  --> $DIR/associated-item-privacy-trait.rs:48:21\n    |\n LL |         let value = <Pub as PubTr>::method;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -109,7 +98,7 @@ LL |     priv_signature::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:51:9\n+  --> $DIR/associated-item-privacy-trait.rs:50:9\n    |\n LL |         value;\n    |         ^^^^^\n@@ -120,7 +109,7 @@ LL |     priv_signature::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:53:13\n+  --> $DIR/associated-item-privacy-trait.rs:52:13\n    |\n LL |         Pub.method(loop {});\n    |             ^^^^^^\n@@ -131,7 +120,7 @@ LL |     priv_signature::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:70:21\n+  --> $DIR/associated-item-privacy-trait.rs:69:21\n    |\n LL |         let value = <Pub as PubTr>::method::<Priv>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -142,7 +131,7 @@ LL |     priv_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:72:9\n+  --> $DIR/associated-item-privacy-trait.rs:71:9\n    |\n LL |         value;\n    |         ^^^^^\n@@ -153,7 +142,7 @@ LL |     priv_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:74:9\n+  --> $DIR/associated-item-privacy-trait.rs:73:9\n    |\n LL |         Pub.method::<Priv>();\n    |         ^^^^^^^^^^^^^^^^^^^^\n@@ -164,7 +153,7 @@ LL |     priv_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:94:21\n+  --> $DIR/associated-item-privacy-trait.rs:93:21\n    |\n LL |         let value = <Pub as PubTr>::method;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -175,7 +164,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:96:9\n+  --> $DIR/associated-item-privacy-trait.rs:95:9\n    |\n LL |         value;\n    |         ^^^^^\n@@ -186,7 +175,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:98:21\n+  --> $DIR/associated-item-privacy-trait.rs:97:21\n    |\n LL |         let value = <Pub as PubTr<_>>::method;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -197,7 +186,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:100:9\n+  --> $DIR/associated-item-privacy-trait.rs:99:9\n    |\n LL |         value;\n    |         ^^^^^\n@@ -208,7 +197,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:102:9\n+  --> $DIR/associated-item-privacy-trait.rs:101:9\n    |\n LL |         Pub.method();\n    |         ^^^^^^^^^^^^\n@@ -219,7 +208,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:105:21\n+  --> $DIR/associated-item-privacy-trait.rs:104:21\n    |\n LL |         let value = <Priv as PubTr<_>>::method;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -230,7 +219,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:107:9\n+  --> $DIR/associated-item-privacy-trait.rs:106:9\n    |\n LL |         value;\n    |         ^^^^^\n@@ -241,7 +230,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:109:9\n+  --> $DIR/associated-item-privacy-trait.rs:108:9\n    |\n LL |         Priv.method();\n    |         ^^^^^^^^^^^^^\n@@ -252,7 +241,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:112:9\n+  --> $DIR/associated-item-privacy-trait.rs:111:9\n    |\n LL |         <Pub as PubTr>::CONST;\n    |         ^^^^^^^^^^^^^^^^^^^^^\n@@ -263,7 +252,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:114:9\n+  --> $DIR/associated-item-privacy-trait.rs:113:9\n    |\n LL |         <Pub as PubTr<_>>::CONST;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -274,7 +263,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:116:9\n+  --> $DIR/associated-item-privacy-trait.rs:115:9\n    |\n LL |         <Priv as PubTr<_>>::CONST;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -285,73 +274,29 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:119:13\n-   |\n-LL |         let _: <Pub as PubTr>::AssocTy;\n-   |             ^\n-...\n-LL |     priv_parent_substs::mac!();\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:119:16\n-   |\n-LL |         let _: <Pub as PubTr>::AssocTy;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     priv_parent_substs::mac!();\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:122:13\n-   |\n-LL |         let _: <Pub as PubTr<_>>::AssocTy;\n-   |             ^\n-...\n-LL |     priv_parent_substs::mac!();\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:122:16\n+  --> $DIR/associated-item-privacy-trait.rs:119:30\n    |\n LL |         let _: <Pub as PubTr<_>>::AssocTy;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     priv_parent_substs::mac!();\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:125:13\n-   |\n-LL |         let _: <Priv as PubTr<_>>::AssocTy;\n-   |             ^\n+   |                              ^\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:125:16\n+  --> $DIR/associated-item-privacy-trait.rs:121:17\n    |\n LL |         let _: <Priv as PubTr<_>>::AssocTy;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:129:35\n+  --> $DIR/associated-item-privacy-trait.rs:124:35\n    |\n LL |         pub type InSignatureTy1 = <Pub as PubTr>::AssocTy;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -362,7 +307,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:131:35\n+  --> $DIR/associated-item-privacy-trait.rs:126:35\n    |\n LL |         pub type InSignatureTy2 = <Priv as PubTr<Pub>>::AssocTy;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -373,7 +318,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:133:14\n+  --> $DIR/associated-item-privacy-trait.rs:128:14\n    |\n LL |         impl PubTr for u8 {}\n    |              ^^^^^\n@@ -383,5 +328,5 @@ LL |     priv_parent_substs::mac!();\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 30 previous errors\n "}, {"sha": "62faae1f399e88e77e88ac9bcfd7f69e74d45b75", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -10,6 +10,11 @@ mod m {\n     impl PrivTr for Priv {}\n     pub trait PubTrAux1<T> {}\n     pub trait PubTrAux2 { type A; }\n+    impl<T> PubTrAux1<T> for u8 {}\n+    impl PubTrAux2 for u8 {\n+        type A = Priv;\n+        //~^ ERROR private type `m::Priv` in public interface\n+    }\n \n     // \"Private-in-public in associated types is hard error\" in RFC 2145\n     // applies only to the aliased types, not bounds."}, {"sha": "c57073a004d8f9e3271c7cac499642341031b14d", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -1,5 +1,14 @@\n+error[E0446]: private type `m::Priv` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:15:9\n+   |\n+LL |     struct Priv;\n+   |     - `m::Priv` declared as private\n+...\n+LL |         type A = Priv;\n+   |         ^^^^^^^^^^^^^^ can't leak private type\n+\n warning: private trait `m::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:16:5\n+  --> $DIR/private-in-public-assoc-ty.rs:21:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -15,7 +24,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `m::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:16:5\n+  --> $DIR/private-in-public-assoc-ty.rs:21:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -30,7 +39,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `m::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:16:5\n+  --> $DIR/private-in-public-assoc-ty.rs:21:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -45,7 +54,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:27:9\n+  --> $DIR/private-in-public-assoc-ty.rs:32:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -54,7 +63,7 @@ LL |         type Alias4 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:34:9\n+  --> $DIR/private-in-public-assoc-ty.rs:39:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -63,7 +72,7 @@ LL |         type Alias1 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `m::PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:37:9\n+  --> $DIR/private-in-public-assoc-ty.rs:42:9\n    |\n LL |     trait PrivTr {}\n    |     - `m::PrivTr` declared as private\n@@ -72,15 +81,15 @@ LL |         type Exist = impl PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error[E0445]: private trait `m::PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:37:9\n+  --> $DIR/private-in-public-assoc-ty.rs:42:9\n    |\n LL |     trait PrivTr {}\n    |     - `m::PrivTr` declared as private\n ...\n LL |         type Exist = impl PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0445, E0446.\n For more information about an error, try `rustc --explain E0445`."}, {"sha": "e8c767b13e9cf8a39918b53195c9584e5fa32836", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.rs?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     <u8 as A>::N::NN; //~ ERROR cannot find associated type `N` in `A`\n     let _: <u8 as Tr>::Y::NN; //~ ERROR ambiguous associated type\n     let _: <u8 as E>::Y::NN; //~ ERROR expected associated type, found variant `E::Y`\n-    <u8 as Tr>::Y::NN; //~ ERROR no associated item named `NN` found\n+    <u8 as Tr>::Y::NN; //~ ERROR no associated item named `NN` found for type `u16`\n     <u8 as E>::Y::NN; //~ ERROR expected associated type, found variant `E::Y`\n \n     let _: <u8 as Tr::N>::NN; //~ ERROR cannot find associated type `NN` in `Tr::N`\n@@ -52,5 +52,5 @@ fn main() {\n     let _: <u8 as Dr>::Z; //~ ERROR expected associated type, found method `Dr::Z`\n     <u8 as Dr>::X; //~ ERROR expected method or associated constant, found associated type `Dr::X`\n     let _: <u8 as Dr>::Z::N; //~ ERROR expected associated type, found method `Dr::Z`\n-    <u8 as Dr>::X::N; //~ ERROR no associated item named `N` found\n+    <u8 as Dr>::X::N; //~ ERROR no associated item named `N` found for type `u16`\n }"}, {"sha": "e5e6ed9fac91142b6b804a293acd86d181d32cea", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a323ff2c864801fdc8e044e88f11efb49a565ed1/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=a323ff2c864801fdc8e044e88f11efb49a565ed1", "patch": "@@ -205,19 +205,19 @@ error[E0223]: ambiguous associated type\n   --> $DIR/ufcs-partially-resolved.rs:36:12\n    |\n LL |     let _: <u8 as Tr>::Y::NN;\n-   |            ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<<u8 as Tr>::Y as Trait>::NN`\n+   |            ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u16 as Trait>::NN`\n \n-error[E0599]: no associated item named `NN` found for associated type `<u8 as Tr>::Y` in the current scope\n+error[E0599]: no associated item named `NN` found for type `u16` in the current scope\n   --> $DIR/ufcs-partially-resolved.rs:38:20\n    |\n LL |     <u8 as Tr>::Y::NN;\n-   |                    ^^ associated item not found in `<u8 as Tr>::Y`\n+   |                    ^^ associated item not found in `u16`\n \n-error[E0599]: no associated item named `N` found for associated type `<u8 as Dr>::X` in the current scope\n+error[E0599]: no associated item named `N` found for type `u16` in the current scope\n   --> $DIR/ufcs-partially-resolved.rs:55:20\n    |\n LL |     <u8 as Dr>::X::N;\n-   |                    ^ associated item not found in `<u8 as Dr>::X`\n+   |                    ^ associated item not found in `u16`\n \n error: aborting due to 32 previous errors\n "}]}