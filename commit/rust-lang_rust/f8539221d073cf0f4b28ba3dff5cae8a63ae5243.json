{"sha": "f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NTM5MjIxZDA3M2NmMGY0YjI4YmEzZGZmNWNhZThhNjNhZTUyNDM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-30T09:00:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-30T09:00:54Z"}, "message": "Rollup merge of #78524 - tmiasko:source-files-borrow, r=Aaron1011\n\nAvoid BorrowMutError with RUSTC_LOG=debug\n\n```console\n$ touch empty.rs\n$ env RUSTC_LOG=debug rustc +stage1 --crate-type=lib empty.rs\n```\n\nFails with a `BorrowMutError` because source map files are already\nborrowed while `features_query` attempts to format a log message\ncontaining a span.\n\nRelease the borrow before the query to avoid the issue.", "tree": {"sha": "b21143b87edf2ca020bcfa464e98e99ae4848818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b21143b87edf2ca020bcfa464e98e99ae4848818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfm9ZHCRBK7hj4Ov3rIwAAdHIIAA9+vNh54e1sviSFAY3xX/IU\nysZZXbR7sX2dAVZmymccDg4bb67dvBOAAKuQ/f3ObTSr8ysMbQ7QoOlLcZMoUr3f\nUPKKBFJKU4fkYls7Z0oB0tJIcvf+jDFoud+kfdmKDyECM3toVoSouRKHONp88N4g\nPWhvDWQ08Ltl+5PGiZMdP19b9APlf3LwFI7wUOFyX/D13mKFddjzmQBGtvi6ziry\nLoxJ6vmH1K2hRWyiF0gozTKU3kBARKcP3g72ALx4Fgc1EnGybLUL+F+teNIxr4x1\nulPKF/RYQTIV59sji/8jBkr59i7/qLQK6pH8Bf+YL0gq5T0bY5AlNY47oG9PaZ0=\n=KgFQ\n-----END PGP SIGNATURE-----\n", "payload": "tree b21143b87edf2ca020bcfa464e98e99ae4848818\nparent 8111706c18aebe273457b0967e076bf5e105a382\nparent a15e0dc4991a6c06dd5108d72163fb9809db2b07\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1604048454 +0900\ncommitter GitHub <noreply@github.com> 1604048454 +0900\n\nRollup merge of #78524 - tmiasko:source-files-borrow, r=Aaron1011\n\nAvoid BorrowMutError with RUSTC_LOG=debug\n\n```console\n$ touch empty.rs\n$ env RUSTC_LOG=debug rustc +stage1 --crate-type=lib empty.rs\n```\n\nFails with a `BorrowMutError` because source map files are already\nborrowed while `features_query` attempts to format a log message\ncontaining a span.\n\nRelease the borrow before the query to avoid the issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "html_url": "https://github.com/rust-lang/rust/commit/f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8111706c18aebe273457b0967e076bf5e105a382", "url": "https://api.github.com/repos/rust-lang/rust/commits/8111706c18aebe273457b0967e076bf5e105a382", "html_url": "https://github.com/rust-lang/rust/commit/8111706c18aebe273457b0967e076bf5e105a382"}, {"sha": "a15e0dc4991a6c06dd5108d72163fb9809db2b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15e0dc4991a6c06dd5108d72163fb9809db2b07", "html_url": "https://github.com/rust-lang/rust/commit/a15e0dc4991a6c06dd5108d72163fb9809db2b07"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "26706cd2b1b770333f5a77ae607a17cf0ebcca3e", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "patch": "@@ -512,7 +512,7 @@ impl<T: Clone> Clone for Lock<T> {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n pub struct RwLock<T>(InnerRwLock<T>);\n \n impl<T> RwLock<T> {"}, {"sha": "2a81737e168d4cfc1d52bf0767942a0d1ea58ad1", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "patch": "@@ -2042,6 +2042,10 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     encoder.emit_raw_bytes(&[0, 0, 0, 0]);\n \n     let source_map_files = tcx.sess.source_map().files();\n+    let source_file_cache = (source_map_files[0].clone(), 0);\n+    let required_source_files = Some(GrowableBitSet::with_capacity(source_map_files.len()));\n+    drop(source_map_files);\n+\n     let hygiene_ctxt = HygieneEncodeContext::default();\n \n     let mut ecx = EncodeContext {\n@@ -2052,13 +2056,12 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n         lazy_state: LazyState::NoNode,\n         type_shorthands: Default::default(),\n         predicate_shorthands: Default::default(),\n-        source_file_cache: (source_map_files[0].clone(), 0),\n+        source_file_cache,\n         interpret_allocs: Default::default(),\n-        required_source_files: Some(GrowableBitSet::with_capacity(source_map_files.len())),\n+        required_source_files,\n         is_proc_macro: tcx.sess.crate_types().contains(&CrateType::ProcMacro),\n         hygiene_ctxt: &hygiene_ctxt,\n     };\n-    drop(source_map_files);\n \n     // Encode the rustc version string in a predictable location.\n     rustc_version().encode(&mut ecx).unwrap();"}, {"sha": "f067cdb730864f40224b90b9172e9f5635b13134", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "patch": "@@ -12,7 +12,7 @@ pub use crate::*;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::{AtomicU32, Lock, LockGuard, Lrc, MappedLockGuard};\n+use rustc_data_structures::sync::{AtomicU32, Lrc, MappedReadGuard, ReadGuard, RwLock};\n use std::cmp;\n use std::convert::TryFrom;\n use std::hash::Hash;\n@@ -168,7 +168,7 @@ pub struct SourceMap {\n     /// The address space below this value is currently used by the files in the source map.\n     used_address_space: AtomicU32,\n \n-    files: Lock<SourceMapFiles>,\n+    files: RwLock<SourceMapFiles>,\n     file_loader: Box<dyn FileLoader + Sync + Send>,\n     // This is used to apply the file path remapping as specified via\n     // `--remap-path-prefix` to all `SourceFile`s allocated within this `SourceMap`.\n@@ -236,8 +236,8 @@ impl SourceMap {\n \n     // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate\n     // any existing indices pointing into `files`.\n-    pub fn files(&self) -> MappedLockGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {\n-        LockGuard::map(self.files.borrow(), |files| &mut files.source_files)\n+    pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {\n+        ReadGuard::map(self.files.borrow(), |files| &files.source_files)\n     }\n \n     pub fn source_file_by_stable_id("}, {"sha": "daa8e9f495e06e1dff6c1904c4b58868e0ac574b", "filename": "src/test/ui/auxiliary/rustc-rust-log-aux.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/src%2Ftest%2Fui%2Fauxiliary%2Frustc-rust-log-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/src%2Ftest%2Fui%2Fauxiliary%2Frustc-rust-log-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Frustc-rust-log-aux.rs?ref=f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "patch": "@@ -0,0 +1 @@\n+// rustc-env:RUSTC_LOG=debug"}, {"sha": "8ceb24dd2afd28a85aa06e6dfeb1a439de1f282b", "filename": "src/test/ui/rustc-rust-log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/src%2Ftest%2Fui%2Frustc-rust-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/src%2Ftest%2Fui%2Frustc-rust-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-rust-log.rs?ref=f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "patch": "@@ -8,7 +8,7 @@\n // dont-check-compiler-stdout\n // dont-check-compiler-stderr\n // compile-flags: --error-format human\n-\n+// aux-build: rustc-rust-log-aux.rs\n // rustc-env:RUSTC_LOG=debug\n \n fn main() {}"}, {"sha": "666e5d402ef1efb279460d4c2965ab938d6ef75d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8539221d073cf0f4b28ba3dff5cae8a63ae5243/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "patch": "@@ -1775,6 +1775,11 @@ impl<'test> TestCx<'test> {\n         let mut aux_rustc =\n             aux_cx.make_compile_args(input_file, aux_output, EmitMetadata::No, AllowUnused::No);\n \n+        for key in &aux_props.unset_rustc_env {\n+            aux_rustc.env_remove(key);\n+        }\n+        aux_rustc.envs(aux_props.rustc_env.clone());\n+\n         let (dylib, crate_type) = if aux_props.no_prefer_dynamic {\n             (true, None)\n         } else if self.config.target.contains(\"cloudabi\")"}]}