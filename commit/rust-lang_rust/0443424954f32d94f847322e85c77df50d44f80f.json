{"sha": "0443424954f32d94f847322e85c77df50d44f80f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NDM0MjQ5NTRmMzJkOTRmODQ3MzIyZTg1Yzc3ZGY1MGQ0NGY4MGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-23T12:33:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-23T12:33:58Z"}, "message": "Auto merge of #87400 - JohnTitor:rollup-zbwyuxi, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #87034 (DOC: fix hypothetical Rust code in `step_by()` docstring)\n - #87298 (memorialize Anna Harren in the bastion of the turbofish)\n - #87332 (Don't hide fields of enum struct variants)\n - #87362 (Make `x.py d` an alias for `x.py doc`)\n - #87372 (Move calls to test_main into one function)\n - #87373 (Extend HIR WF checking to fields)\n - #87376 (Change rustdoc logo to use the full container size)\n - #87383 (Add regression tests for the impl_trait_in_bindings ICEs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5bdebedf6bc132939c7687c1c719124b40c594e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bdebedf6bc132939c7687c1c719124b40c594e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0443424954f32d94f847322e85c77df50d44f80f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0443424954f32d94f847322e85c77df50d44f80f", "html_url": "https://github.com/rust-lang/rust/commit/0443424954f32d94f847322e85c77df50d44f80f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0443424954f32d94f847322e85c77df50d44f80f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b7c859c1aae39d26884e760201f5e6c7feeff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b7c859c1aae39d26884e760201f5e6c7feeff9", "html_url": "https://github.com/rust-lang/rust/commit/b2b7c859c1aae39d26884e760201f5e6c7feeff9"}, {"sha": "7c0c329635cde6602dc6d49a0f44459ff0c8b544", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0c329635cde6602dc6d49a0f44459ff0c8b544", "html_url": "https://github.com/rust-lang/rust/commit/7c0c329635cde6602dc6d49a0f44459ff0c8b544"}], "stats": {"total": 323, "additions": 276, "deletions": 47}, "files": [{"sha": "e33cc603b5e543cc95cd8b3699642cb2ec2761e4", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -523,8 +523,7 @@ fn check_type_defn<'tcx, F>(\n                 fcx.register_wf_obligation(\n                     field.ty.into(),\n                     field.span,\n-                    // We don't have an HIR id for the field\n-                    ObligationCauseCode::WellFormed(None),\n+                    ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(field.def_id))),\n                 )\n             }\n \n@@ -1467,6 +1466,7 @@ struct AdtVariant<'tcx> {\n \n struct AdtField<'tcx> {\n     ty: Ty<'tcx>,\n+    def_id: LocalDefId,\n     span: Span,\n }\n \n@@ -1477,11 +1477,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .fields()\n             .iter()\n             .map(|field| {\n-                let field_ty = self.tcx.type_of(self.tcx.hir().local_def_id(field.hir_id));\n+                let def_id = self.tcx.hir().local_def_id(field.hir_id);\n+                let field_ty = self.tcx.type_of(def_id);\n                 let field_ty = self.normalize_associated_types_in(field.ty.span, field_ty);\n                 let field_ty = self.resolve_vars_if_possible(field_ty);\n                 debug!(\"non_enum_variant: type of field {:?} is {:?}\", field, field_ty);\n-                AdtField { ty: field_ty, span: field.ty.span }\n+                AdtField { ty: field_ty, span: field.ty.span, def_id }\n             })\n             .collect();\n         AdtVariant { fields, explicit_discr: None }"}, {"sha": "e7503d3d71ceaec5cb9480f521299b3d87a640fa", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -25,7 +25,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n         WellFormedLoc::Ty(def_id) => def_id,\n         WellFormedLoc::Param { function, param_idx: _ } => function,\n     };\n-    let hir_id = HirId::make_owner(def_id);\n+    let hir_id = hir.local_def_id_to_hir_id(def_id);\n \n     // HIR wfcheck should only ever happen as part of improving an existing error\n     tcx.sess\n@@ -140,6 +140,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n                 }\n                 ref item => bug!(\"Unexpected item {:?}\", item),\n             },\n+            hir::Node::Field(field) => Some(field.ty),\n             ref node => bug!(\"Unexpected node {:?}\", node),\n         },\n         WellFormedLoc::Param { function: _, param_idx } => {"}, {"sha": "16efd2f0eaff954adb1b2cf94a78b4eba725c051", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -333,21 +333,22 @@ pub trait Iterator {\n     /// regardless of the step given.\n     ///\n     /// Note 2: The time at which ignored elements are pulled is not fixed.\n-    /// `StepBy` behaves like the sequence `next(), nth(step-1), nth(step-1), \u2026`,\n-    /// but is also free to behave like the sequence\n-    /// `advance_n_and_return_first(step), advance_n_and_return_first(step), \u2026`\n+    /// `StepBy` behaves like the sequence `self.next()`, `self.nth(step-1)`,\n+    /// `self.nth(step-1)`, \u2026, but is also free to behave like the sequence\n+    /// `advance_n_and_return_first(&mut self, step)`,\n+    /// `advance_n_and_return_first(&mut self, step)`, \u2026\n     /// Which way is used may change for some iterators for performance reasons.\n     /// The second way will advance the iterator earlier and may consume more items.\n     ///\n     /// `advance_n_and_return_first` is the equivalent of:\n     /// ```\n-    /// fn advance_n_and_return_first<I>(iter: &mut I, total_step: usize) -> Option<I::Item>\n+    /// fn advance_n_and_return_first<I>(iter: &mut I, n: usize) -> Option<I::Item>\n     /// where\n     ///     I: Iterator,\n     /// {\n     ///     let next = iter.next();\n-    ///     if total_step > 1 {\n-    ///         iter.nth(total_step-2);\n+    ///     if n > 1 {\n+    ///         iter.nth(n - 2);\n     ///     }\n     ///     next\n     /// }"}, {"sha": "1b7614b29896f39cac308d5ceb613b689ac7bc59", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -152,7 +152,7 @@ Subcommands:\n     fmt         Run rustfmt\n     test, t     Build and run some test suites\n     bench       Build and run some benchmarks\n-    doc         Build documentation\n+    doc, d      Build documentation\n     clean       Clean out build directories\n     dist        Build distribution artifacts\n     install     Install distribution artifacts\n@@ -244,6 +244,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                 || (s == \"t\")\n                 || (s == \"bench\")\n                 || (s == \"doc\")\n+                || (s == \"d\")\n                 || (s == \"clean\")\n                 || (s == \"dist\")\n                 || (s == \"install\")\n@@ -312,7 +313,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             \"clippy\" => {\n                 opts.optflag(\"\", \"fix\", \"automatically apply lint suggestions\");\n             }\n-            \"doc\" => {\n+            \"doc\" | \"d\" => {\n                 opts.optflag(\"\", \"open\", \"open the docs in a browser\");\n             }\n             \"clean\" => {\n@@ -487,7 +488,7 @@ Arguments:\n         ./x.py test --stage 1\",\n                 );\n             }\n-            \"doc\" => {\n+            \"doc\" | \"d\" => {\n                 subcommand_help.push_str(\n                     \"\\n\n Arguments:\n@@ -573,7 +574,7 @@ Arguments:\n                 },\n             },\n             \"bench\" => Subcommand::Bench { paths, test_args: matches.opt_strs(\"test-args\") },\n-            \"doc\" => Subcommand::Doc { paths, open: matches.opt_present(\"open\") },\n+            \"doc\" | \"d\" => Subcommand::Doc { paths, open: matches.opt_present(\"open\") },\n             \"clean\" => {\n                 if !paths.is_empty() {\n                     println!(\"\\nclean does not take a path argument\\n\");"}, {"sha": "b45e84aff8cf5961e49ccec9faf00d5dca35d72e", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -105,7 +105,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         registry: rustc_driver::diagnostics_registry(),\n     };\n \n-    let mut test_args = options.test_args.clone();\n+    let test_args = options.test_args.clone();\n     let display_warnings = options.display_warnings;\n     let nocapture = options.nocapture;\n     let externs = options.externs.clone();\n@@ -166,12 +166,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         Err(ErrorReported) => return Err(ErrorReported),\n     };\n \n-    test_args.insert(0, \"rustdoctest\".to_string());\n-    if nocapture {\n-        test_args.push(\"--nocapture\".to_string());\n-    }\n-\n-    test::test_main(&test_args, tests, Some(test::Options::new().display_output(display_warnings)));\n+    run_tests(test_args, nocapture, display_warnings, tests);\n \n     // Collect and warn about unused externs, but only if we've gotten\n     // reports for each doctest\n@@ -214,6 +209,19 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     Ok(())\n }\n \n+crate fn run_tests(\n+    mut test_args: Vec<String>,\n+    nocapture: bool,\n+    display_warnings: bool,\n+    tests: Vec<test::TestDescAndFn>,\n+) {\n+    test_args.insert(0, \"rustdoctest\".to_string());\n+    if nocapture {\n+        test_args.push(\"--nocapture\".to_string());\n+    }\n+    test::test_main(&test_args, tests, Some(test::Options::new().display_output(display_warnings)));\n+}\n+\n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade.\n fn scrape_test_config(attrs: &[ast::Attribute]) -> TestOptions {\n     use rustc_ast_pretty::pprust;"}, {"sha": "2dfbaff1cc9954448152437f92a79ca44e66f17c", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -1029,14 +1029,12 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n \n             use crate::clean::Variant;\n             if let clean::VariantItem(Variant::Struct(ref s)) = *variant.kind {\n-                let count_fields = s.fields.len();\n-                toggle_open(w, format_args!(\"{} field{}\", count_fields, pluralize(count_fields)));\n                 let variant_id = cx.derive_id(format!(\n                     \"{}.{}.fields\",\n                     ItemType::Variant,\n                     variant.name.as_ref().unwrap()\n                 ));\n-                write!(w, \"<div class=\\\"autohide sub-variant\\\" id=\\\"{id}\\\">\", id = variant_id);\n+                write!(w, \"<div class=\\\"sub-variant\\\" id=\\\"{id}\\\">\", id = variant_id);\n                 write!(\n                     w,\n                     \"<h3>Fields of <b>{name}</b></h3><div>\",\n@@ -1064,7 +1062,6 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                     }\n                 }\n                 w.write_str(\"</div></div>\");\n-                toggle_close(w);\n             }\n         }\n     }"}, {"sha": "c2184e04b761e25c6e2873565750996482f5171d", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -329,6 +329,7 @@ nav.sub {\n .logo-container > img {\n \tmax-width: 100px;\n \tmax-height: 100px;\n+\theight: 100%;\n \tposition: absolute;\n \tleft: 50%;\n \ttop: 50%;\n@@ -1072,7 +1073,7 @@ a.test-arrow:hover{\n \tpadding-top: 1px;\n }\n \n-#main > details > .sub-variant > h3 {\n+#main .sub-variant > h3 {\n \tfont-size: 15px;\n \tmargin-left: 25px;\n \tmargin-bottom: 5px;"}, {"sha": "80af2a7aaf5c8ab820ef593534f023a9dc22d073", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -115,7 +115,7 @@ crate fn render<P: AsRef<Path>>(\n }\n \n /// Runs any tests/code examples in the markdown file `input`.\n-crate fn test(mut options: Options) -> Result<(), String> {\n+crate fn test(options: Options) -> Result<(), String> {\n     let input_str = read_to_string(&options.input)\n         .map_err(|err| format!(\"{}: {}\", options.input.display(), err))?;\n     let mut opts = TestOptions::default();\n@@ -135,14 +135,11 @@ crate fn test(mut options: Options) -> Result<(), String> {\n \n     find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores, None);\n \n-    options.test_args.insert(0, \"rustdoctest\".to_string());\n-    if options.nocapture {\n-        options.test_args.push(\"--nocapture\".to_string());\n-    }\n-    test::test_main(\n-        &options.test_args,\n+    crate::doctest::run_tests(\n+        options.test_args,\n+        options.nocapture,\n+        options.display_warnings,\n         collector.tests,\n-        Some(test::Options::new().display_output(options.display_warnings)),\n     );\n     Ok(())\n }"}, {"sha": "8d2046591d08ac42244212c68e20a691d754a17c", "filename": "src/test/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -62,8 +62,7 @@ pub struct PrivStruct {\n }\n \n // @has 'toggle_item_contents/enum.Enum.html'\n-// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 2 fields'\n+// @!has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]'\n pub enum Enum {\n     A, B, C,\n     D {\n@@ -73,8 +72,7 @@ pub enum Enum {\n }\n \n // @has 'toggle_item_contents/enum.EnumStructVariant.html'\n-// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 1 field'\n+// @!has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]'\n pub enum EnumStructVariant {\n     A, B, C,\n     D {"}, {"sha": "233ddbbe11784694a672bd1c1575638e7f353141", "filename": "src/test/ui/bastion-of-the-turbofish.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -25,9 +25,12 @@\n //\n // My heart aches in sorrow, for I know I am defeated. Let this be a warning\n // to all those who come after. Here stands the bastion of the Turbofish.\n+//\n+// RIP Anna Harren, Guardian Angel of the Hallowed Turbofish. <3\n \n // See https://github.com/rust-lang/rust/pull/53562\n // and https://github.com/rust-lang/rfcs/pull/2527\n+// and https://twitter.com/garblefart/status/1393236602856611843\n // for context.\n \n fn main() {"}, {"sha": "7a64799302332c6a7ce5fba3ca6e212642c018dd", "filename": "src/test/ui/impl-trait/issues/issue-54600.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,7 @@\n+use std::fmt::Debug;\n+\n+fn main() {\n+    let x: Option<impl Debug> = Some(44_u32);\n+    //~^ `impl Trait` not allowed outside of function and method return types\n+    println!(\"{:?}\", x);\n+}"}, {"sha": "4d0c32c6bb708ac05a5de9a1c665733a18a6f67c", "filename": "src/test/ui/impl-trait/issues/issue-54600.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,9 @@\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/issue-54600.rs:4:19\n+   |\n+LL |     let x: Option<impl Debug> = Some(44_u32);\n+   |                   ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "030d5715d5739e7f01d0f4fcf79174158bb46a62", "filename": "src/test/ui/impl-trait/issues/issue-54840.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,7 @@\n+use std::ops::Add;\n+\n+fn main() {\n+    let i: i32 = 0;\n+    let j: &impl Add = &i;\n+    //~^ `impl Trait` not allowed outside of function and method return types\n+}"}, {"sha": "b8046b7482f72ab9de8ef3618b42ddce5b1dfc14", "filename": "src/test/ui/impl-trait/issues/issue-54840.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,9 @@\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/issue-54840.rs:5:13\n+   |\n+LL |     let j: &impl Add = &i;\n+   |             ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "aac33b3b3e5c5c5869fed9c7b0ac1c2fcb9c39e4", "filename": "src/test/ui/impl-trait/issues/issue-58504.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,12 @@\n+#![feature(generators, generator_trait, never_type)]\n+\n+use std::ops::Generator;\n+\n+fn mk_gen() -> impl Generator<Return=!, Yield=()> {\n+    || { loop { yield; } }\n+}\n+\n+fn main() {\n+    let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];\n+    //~^ `impl Trait` not allowed outside of function and method return types\n+}"}, {"sha": "ff1010f0661823dd0e19a6638ea7cd2803a65f6c", "filename": "src/test/ui/impl-trait/issues/issue-58504.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,9 @@\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/issue-58504.rs:10:16\n+   |\n+LL |     let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "5fe18b6e9b54a15d6ca029303d3594a20a045f1c", "filename": "src/test/ui/impl-trait/issues/issue-58956.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,14 @@\n+trait Lam {}\n+\n+pub struct B;\n+impl Lam for B {}\n+pub struct Wrap<T>(T);\n+\n+const _A: impl Lam = {\n+    //~^ `impl Trait` not allowed outside of function and method return types\n+    let x: Wrap<impl Lam> = Wrap(B);\n+    //~^ `impl Trait` not allowed outside of function and method return types\n+    x.0\n+};\n+\n+fn main() {}"}, {"sha": "00ebf170ab2febbf0130360c9316a457c2418a34", "filename": "src/test/ui/impl-trait/issues/issue-58956.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,15 @@\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/issue-58956.rs:7:11\n+   |\n+LL | const _A: impl Lam = {\n+   |           ^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/issue-58956.rs:9:17\n+   |\n+LL |     let x: Wrap<impl Lam> = Wrap(B);\n+   |                 ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "d4dc2fd877b67683141c81f7787ff0a613b6239e", "filename": "src/test/ui/impl-trait/issues/issue-70971.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x : (impl Copy,) = (true,);\n+    //~^ `impl Trait` not allowed outside of function and method return types\n+}"}, {"sha": "31993da3e32f3474417c8aad8ba666ba1845fb59", "filename": "src/test/ui/impl-trait/issues/issue-70971.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,9 @@\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/issue-70971.rs:2:14\n+   |\n+LL |     let x : (impl Copy,) = (true,);\n+   |              ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "f72533d42e1fac0af149bac595366154954c2f03", "filename": "src/test/ui/impl-trait/issues/issue-79099.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,10 @@\n+struct Bug {\n+    V1: [(); {\n+        let f: impl core::future::Future<Output = u8> = async { 1 };\n+        //~^ `impl Trait` not allowed outside of function and method return types\n+        //~| expected identifier\n+        1\n+    }],\n+}\n+\n+fn main() {}"}, {"sha": "121536d3f68574173338da6f9b91eadad43f0c21", "filename": "src/test/ui/impl-trait/issues/issue-79099.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,20 @@\n+error: expected identifier, found `1`\n+  --> $DIR/issue-79099.rs:3:65\n+   |\n+LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n+   |                                                         -----   ^ expected identifier\n+   |                                                         |\n+   |                                                         `async` blocks are only allowed in Rust 2018 or later\n+   |\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/issue-79099.rs:3:16\n+   |\n+LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "479bad97cdf32e214d46aa9f17045a945ae5105b", "filename": "src/test/ui/impl-trait/issues/issue-84919.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,9 @@\n+trait Trait {}\n+impl Trait for () {}\n+\n+fn foo<'a: 'a>() {\n+    let _x: impl Trait = ();\n+    //~^ `impl Trait` not allowed outside of function and method return types\n+}\n+\n+fn main() {}"}, {"sha": "bb1bcfefe64ee1834f7d9807068aea4deef64681", "filename": "src/test/ui/impl-trait/issues/issue-84919.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,9 @@\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/issue-84919.rs:5:13\n+   |\n+LL |     let _x: impl Trait = ();\n+   |             ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "8dc76f4f752a18171b0d47700f30e2e32f9d93a8", "filename": "src/test/ui/impl-trait/issues/issue-86201.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,13 @@\n+#![feature(unboxed_closures)]\n+#![feature(min_type_alias_impl_trait)]\n+\n+type FunType = impl Fn<()>;\n+//~^ could not find defining uses\n+static STATIC_FN: FunType = some_fn;\n+//~^ mismatched types\n+\n+fn some_fn() {}\n+\n+fn main() {\n+    let _: <FunType as FnOnce<()>>::Output = STATIC_FN();\n+}"}, {"sha": "b1460096ded66d3119023e21099d1886ce602f53", "filename": "src/test/ui/impl-trait/issues/issue-86201.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-86201.rs:6:29\n+   |\n+LL | type FunType = impl Fn<()>;\n+   |                ----------- the expected opaque type\n+LL |\n+LL | static STATIC_FN: FunType = some_fn;\n+   |                             ^^^^^^^ expected opaque type, found fn item\n+   |\n+   = note: expected opaque type `impl Fn<()>`\n+                  found fn item `fn() {some_fn}`\n+\n+error: could not find defining uses\n+  --> $DIR/issue-86201.rs:4:16\n+   |\n+LL | type FunType = impl Fn<()>;\n+   |                ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8953ff8158148f7a952eebdfa1fbd3137b4cd4fb", "filename": "src/test/ui/impl-trait/issues/issue-86642.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,8 @@\n+static x: impl Fn(&str) -> Result<&str, ()> = move |source| {\n+    //~^ `impl Trait` not allowed outside of function and method return types\n+    let res = (move |source| Ok(source))(source);\n+    let res = res.or((move |source| Ok(source))(source));\n+    res\n+};\n+\n+fn main() {}"}, {"sha": "2fc0a6fe1f50e6da6320d6d2ed5982bdbb0ffe18", "filename": "src/test/ui/impl-trait/issues/issue-86642.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,9 @@\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/issue-86642.rs:1:11\n+   |\n+LL | static x: impl Fn(&str) -> Result<&str, ()> = move |source| {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "2f2bfe147bd6659df0a31072ea42e857e045f54c", "filename": "src/test/ui/impl-trait/issues/issue-87295.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,18 @@\n+trait Trait {\n+    type Output;\n+}\n+impl Trait for () {\n+    type Output = i32;\n+}\n+\n+struct Struct<F>(F);\n+impl<F> Struct<F> {\n+    pub fn new(_: F) -> Self {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());\n+    //~^ `impl Trait` not allowed outside of function and method return types\n+}"}, {"sha": "f5c7603ce49181735f7e8e2efd42d3b7717cf16b", "filename": "src/test/ui/impl-trait/issues/issue-87295.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -0,0 +1,9 @@\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/issue-87295.rs:16:31\n+   |\n+LL |     let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "4400b6179c6f8ad782b870d846de1618226cc6e1", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n-  --> $DIR/issue-19380.rs:11:9\n+  --> $DIR/issue-19380.rs:11:29\n    |\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Qiz` cannot be made into an object\n+   |                             ^^^^^^^^^^^^^^^^^ `Qiz` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-19380.rs:2:6"}, {"sha": "20aa97707105e2156079225216800fd2bb60229f", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/wf-in-fn-type-arg.rs:9:8\n+  --> $DIR/wf-in-fn-type-arg.rs:9:11\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn(MustBeCopy<T>)\n-   |        ^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |           ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "48af696c3a7527aac89b520c901bd24bc0c5ff98", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/wf-in-fn-type-ret.rs:9:8\n+  --> $DIR/wf-in-fn-type-ret.rs:9:16\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn() -> MustBeCopy<T>\n-   |        ^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "b3b919a569ed41fa0b08a79355bab4088a6dbb55", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0443424954f32d94f847322e85c77df50d44f80f/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=0443424954f32d94f847322e85c77df50d44f80f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/wf-in-obj-type-trait.rs:11:8\n+  --> $DIR/wf-in-obj-type-trait.rs:11:19\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: dyn Object<MustBeCopy<T>>\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                   ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}]}