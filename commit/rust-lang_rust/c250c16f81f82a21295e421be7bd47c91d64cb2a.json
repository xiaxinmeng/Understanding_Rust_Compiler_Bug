{"sha": "c250c16f81f82a21295e421be7bd47c91d64cb2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNTBjMTZmODFmODJhMjEyOTVlNDIxYmU3YmQ0N2M5MWQ2NGNiMmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-23T09:06:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-23T09:06:57Z"}, "message": "auto merge of #12428 : alexcrichton/rust/move-hashmap, r=brson\n\nThese two containers are indeed collections, so there place is in\r\nlibcollections, not in libstd. There will always be a hash map as part of the\r\nstandard distribution of Rust, but by moving it out of the standard library it\r\nmakes libstd that much more portable to more platforms and environments.\r\n\r\nThis conveniently also removes the stuttering of 'std::hashmap::HashMap',\r\nalthough 'collections::HashMap' is only one character shorter.", "tree": {"sha": "78090dacffcdda10a36a6e538f3f73d3d3a6e35c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78090dacffcdda10a36a6e538f3f73d3d3a6e35c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c250c16f81f82a21295e421be7bd47c91d64cb2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c250c16f81f82a21295e421be7bd47c91d64cb2a", "html_url": "https://github.com/rust-lang/rust/commit/c250c16f81f82a21295e421be7bd47c91d64cb2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c250c16f81f82a21295e421be7bd47c91d64cb2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edf351e9f7d17777b1385093bfa7b6654e662d44", "url": "https://api.github.com/repos/rust-lang/rust/commits/edf351e9f7d17777b1385093bfa7b6654e662d44", "html_url": "https://github.com/rust-lang/rust/commit/edf351e9f7d17777b1385093bfa7b6654e662d44"}, {"sha": "2a14e084cfd8cf9a9149d0b7c6329b0dad0521d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a14e084cfd8cf9a9149d0b7c6329b0dad0521d0", "html_url": "https://github.com/rust-lang/rust/commit/2a14e084cfd8cf9a9149d0b7c6329b0dad0521d0"}], "stats": {"total": 884, "additions": 448, "deletions": 436}, "files": [{"sha": "8e624cb313f94fc9d127074a7971a73e145d396b", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -69,7 +69,7 @@ DEPS_flate := std native:miniz\n DEPS_arena := std collections\n DEPS_glob := std\n DEPS_serialize := std\n-DEPS_term := std\n+DEPS_term := std collections\n DEPS_semver := std\n DEPS_uuid := std serialize\n DEPS_sync := std"}, {"sha": "6d9cb8b5d7b72baebd7390bcb7a8036e13a64c07", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -467,7 +467,7 @@ expression context, the final namespace qualifier is omitted.\n Two examples of paths with type arguments:\n \n ~~~~\n-# use std::hashmap::HashMap;\n+# struct HashMap<K, V>;\n # fn f() {\n # fn id<T>(t: T) -> T { t }\n type T = HashMap<int,~str>;  // Type arguments used in a type expression"}, {"sha": "304dc1fb5af43ec7a28aaea23671ee4c7a525f4b", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -1977,8 +1977,8 @@ illegal to copy and pass by value.\n Generic `type`, `struct`, and `enum` declarations follow the same pattern:\n \n ~~~~\n-use std::hashmap::HashMap;\n-type Set<T> = HashMap<T, ()>;\n+extern crate collections;\n+type Set<T> = collections::HashMap<T, ()>;\n \n struct Stack<T> {\n     elements: ~[T]\n@@ -1988,6 +1988,7 @@ enum Option<T> {\n     Some(T),\n     None\n }\n+# fn main() {}\n ~~~~\n \n These declarations can be instantiated to valid types like `Set<int>`,"}, {"sha": "2590db56d0ac0c5d9e4eb4001a1c33cbfc5b5b09", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -55,6 +55,8 @@ def scrub(b):\n #[crate_id=\\\"run_pass_stage2#0.1\\\"];\n #[feature(globs, macro_rules, struct_variant, managed_boxes)];\n #[allow(warnings)];\n+extern crate collections;\n+extern crate extra;\n \"\"\"\n )\n for t in stage2_tests:"}, {"sha": "5cdd5bf3812d6aff30bace3b234d18ecc7f029b2", "filename": "src/libcollections/hashmap.rs", "status": "renamed", "additions": 129, "deletions": 27, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -16,7 +16,7 @@\n //! # Example\n //!\n //! ```rust\n-//! use std::hashmap::HashMap;\n+//! use collections::HashMap;\n //!\n //! // type inference lets us omit an explicit type signature (which\n //! // would be `HashMap<&str, &str>` in this example).\n@@ -52,24 +52,20 @@\n //! }\n //! ```\n \n-use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n-use clone::Clone;\n-use cmp::{Eq, Equiv, max};\n-use default::Default;\n-use fmt;\n-use hash_old::Hash;\n-use iter;\n-use iter::{Iterator, FromIterator, Extendable};\n-use iter::{FilterMap, Chain, Repeat, Zip};\n-use mem::replace;\n-use num;\n-use option::{None, Option, Some};\n-use rand::Rng;\n-use rand;\n-use result::{Ok, Err};\n-use vec::{ImmutableVector, MutableVector, OwnedVector, Items, MutItems};\n-use vec_ng;\n-use vec_ng::Vec;\n+use std::cmp::max;\n+use std::fmt;\n+use std::hash_old::Hash;\n+use std::iter::{FilterMap, Chain, Repeat, Zip};\n+use std::iter;\n+use std::mem::replace;\n+use std::num;\n+use std::rand::Rng;\n+use std::rand;\n+use std::vec::{Items, MutItems};\n+use std::vec_ng::Vec;\n+use std::vec_ng;\n+\n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n static INITIAL_CAPACITY: uint = 32u; // 2^5\n \n@@ -404,7 +400,7 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::hashmap::HashMap;\n+    /// use collections::HashMap;\n     ///\n     /// // map some strings to vectors of strings\n     /// let mut map = HashMap::<~str, ~[~str]>::new();\n@@ -613,6 +609,10 @@ impl<A: fmt::Show + Hash + Eq, B: fmt::Show> fmt::Show for HashMap<A, B> {\n     }\n }\n \n+impl<K: fmt::Show + Hash + Eq, V: fmt::Show> ToStr for HashMap<K, V> {\n+    fn to_str(&self) -> ~str { format!(\"{}\", *self) }\n+}\n+\n /// HashMap iterator\n #[deriving(Clone)]\n pub struct Entries<'a, K, V> {\n@@ -891,6 +891,10 @@ impl<A: fmt::Show + Hash + Eq> fmt::Show for HashSet<A> {\n     }\n }\n \n+impl<A: fmt::Show + Hash + Eq> ToStr for HashSet<A> {\n+    fn to_str(&self) -> ~str { format!(\"{}\", *self) }\n+}\n+\n impl<K: Eq + Hash> FromIterator<K> for HashSet<K> {\n     fn from_iterator<T: Iterator<K>>(iter: &mut T) -> HashSet<K> {\n         let (lower, _) = iter.size_hint();\n@@ -919,12 +923,75 @@ pub type SetAlgebraItems<'a, T> =\n     FilterMap<'static,(&'a HashSet<T>, &'a T), &'a T,\n               Zip<Repeat<&'a HashSet<T>>,SetItems<'a,T>>>;\n \n+impl<\n+    E: Encoder,\n+    K: Encodable<E> + Hash + IterBytes + Eq,\n+    V: Encodable<E>\n+> Encodable<E> for HashMap<K, V> {\n+    fn encode(&self, e: &mut E) {\n+        e.emit_map(self.len(), |e| {\n+            let mut i = 0;\n+            for (key, val) in self.iter() {\n+                e.emit_map_elt_key(i, |e| key.encode(e));\n+                e.emit_map_elt_val(i, |e| val.encode(e));\n+                i += 1;\n+            }\n+        })\n+    }\n+}\n+\n+impl<\n+    D: Decoder,\n+    K: Decodable<D> + Hash + IterBytes + Eq,\n+    V: Decodable<D>\n+> Decodable<D> for HashMap<K, V> {\n+    fn decode(d: &mut D) -> HashMap<K, V> {\n+        d.read_map(|d, len| {\n+            let mut map = HashMap::with_capacity(len);\n+            for i in range(0u, len) {\n+                let key = d.read_map_elt_key(i, |d| Decodable::decode(d));\n+                let val = d.read_map_elt_val(i, |d| Decodable::decode(d));\n+                map.insert(key, val);\n+            }\n+            map\n+        })\n+    }\n+}\n+\n+impl<\n+    S: Encoder,\n+    T: Encodable<S> + Hash + IterBytes + Eq\n+> Encodable<S> for HashSet<T> {\n+    fn encode(&self, s: &mut S) {\n+        s.emit_seq(self.len(), |s| {\n+            let mut i = 0;\n+            for e in self.iter() {\n+                s.emit_seq_elt(i, |s| e.encode(s));\n+                i += 1;\n+            }\n+        })\n+    }\n+}\n+\n+impl<\n+    D: Decoder,\n+    T: Decodable<D> + Hash + IterBytes + Eq\n+> Decodable<D> for HashSet<T> {\n+    fn decode(d: &mut D) -> HashSet<T> {\n+        d.read_seq(|d, len| {\n+            let mut set = HashSet::with_capacity(len);\n+            for i in range(0u, len) {\n+                set.insert(d.read_seq_elt(i, |d| Decodable::decode(d)));\n+            }\n+            set\n+        })\n+    }\n+}\n \n #[cfg(test)]\n mod test_map {\n-    use prelude::*;\n-    use super::*;\n-    use fmt;\n+    use super::{HashMap, HashSet};\n+    use std::fmt;\n \n     #[test]\n     fn test_create_capacity_zero() {\n@@ -1180,14 +1247,49 @@ mod test_map {\n         assert!(table_str == ~\"{1: s2, 3: s4}\" || table_str == ~\"{3: s4, 1: s2}\");\n         assert_eq!(format!(\"{}\", empty), ~\"{}\");\n     }\n+\n+    struct StructWithToStrWithoutEqOrHash {\n+        value: int\n+    }\n+\n+    impl fmt::Show for StructWithToStrWithoutEqOrHash {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            write!(f.buf, \"s{}\", self.value)\n+        }\n+    }\n+\n+    #[test]\n+    fn test_hashset() {\n+        let mut set: HashSet<int> = HashSet::new();\n+        let empty_set: HashSet<int> = HashSet::new();\n+\n+        set.insert(1);\n+        set.insert(2);\n+\n+        let set_str = set.to_str();\n+\n+        assert!(set_str == ~\"{1, 2}\" || set_str == ~\"{2, 1}\");\n+        assert_eq!(empty_set.to_str(), ~\"{}\");\n+    }\n+\n+    #[test]\n+    fn test_hashmap() {\n+        let mut table: HashMap<int, StructWithToStrWithoutEqOrHash> = HashMap::new();\n+        let empty: HashMap<int, StructWithToStrWithoutEqOrHash> = HashMap::new();\n+\n+        table.insert(3, StructWithToStrWithoutEqOrHash { value: 4 });\n+        table.insert(1, StructWithToStrWithoutEqOrHash { value: 2 });\n+\n+        let table_str = table.to_str();\n+\n+        assert!(table_str == ~\"{1: s2, 3: s4}\" || table_str == ~\"{3: s4, 1: s2}\");\n+        assert_eq!(empty.to_str(), ~\"{}\");\n+    }\n }\n \n #[cfg(test)]\n mod test_set {\n-    use super::*;\n-    use prelude::*;\n-    use container::Container;\n-    use vec::ImmutableEqVector;\n+    use super::HashSet;\n \n     #[test]\n     fn test_disjoint() {", "previous_filename": "src/libstd/hashmap.rs"}, {"sha": "dd42c2a0dd08f7fb1d1a925da165aa63b970609e", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -27,21 +27,25 @@ pub use btree::BTree;\n pub use deque::Deque;\n pub use dlist::DList;\n pub use enum_set::EnumSet;\n+pub use hashmap::{HashMap, HashSet};\n pub use list::List;\n pub use lru_cache::LruCache;\n pub use priority_queue::PriorityQueue;\n pub use ringbuf::RingBuf;\n pub use smallintmap::SmallIntMap;\n pub use treemap::{TreeMap, TreeSet};\n+pub use trie::{TrieMap, TrieSet};\n \n pub mod bitv;\n pub mod btree;\n pub mod deque;\n pub mod dlist;\n pub mod enum_set;\n+pub mod hashmap;\n pub mod list;\n pub mod lru_cache;\n pub mod priority_queue;\n pub mod ringbuf;\n pub mod smallintmap;\n pub mod treemap;\n+pub mod trie;"}, {"sha": "d05d2f2d9815b3308e58bd41cec04f97c989832d", "filename": "src/libcollections/lru_cache.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flru_cache.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -38,11 +38,12 @@\n //! ```\n \n use std::container::Container;\n-use std::hashmap::HashMap;\n use std::to_bytes::Cb;\n use std::ptr;\n use std::cast;\n \n+use HashMap;\n+\n struct KeyRef<K> { k: *K }\n \n struct LruEntry<K, V> {"}, {"sha": "022a64fbb7a0cfc203fc321aead175001b0a5e21", "filename": "src/libcollections/trie.rs", "status": "renamed", "additions": 82, "deletions": 35, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -10,15 +10,13 @@\n \n //! Ordered containers with integer keys, implemented as radix tries (`TrieSet` and `TrieMap` types)\n \n-use option::{None, Option, Some};\n-use container::{Container, Map, Mutable, MutableMap};\n-use iter::{Extendable, FromIterator, Iterator};\n-use mem;\n-use uint;\n-use mem::init;\n-use vec;\n-use ptr::RawPtr;\n-use vec::{ImmutableVector, Items, MutableVector, MutItems, OwnedVector};\n+use std::mem;\n+use std::uint;\n+use std::mem::init;\n+use std::vec;\n+use std::vec::{Items, MutItems};\n+\n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n // FIXME: #5244: need to manually update the TrieNode constructor\n static SHIFT: uint = 4;\n@@ -622,32 +620,83 @@ impl<'a> Iterator<uint> for SetItems<'a> {\n     }\n }\n \n-#[cfg(test)]\n-pub fn check_integrity<T>(trie: &TrieNode<T>) {\n-    assert!(trie.count != 0);\n-\n-    let mut sum = 0;\n-\n-    for x in trie.children.iter() {\n-        match *x {\n-          Nothing => (),\n-          Internal(ref y) => {\n-              check_integrity(&**y);\n-              sum += 1\n-          }\n-          External(_, _) => { sum += 1 }\n-        }\n+impl<\n+    E: Encoder,\n+    V: Encodable<E>\n+> Encodable<E> for TrieMap<V> {\n+    fn encode(&self, e: &mut E) {\n+        e.emit_map(self.len(), |e| {\n+                for (i, (key, val)) in self.iter().enumerate() {\n+                    e.emit_map_elt_key(i, |e| key.encode(e));\n+                    e.emit_map_elt_val(i, |e| val.encode(e));\n+                }\n+            });\n     }\n+}\n \n-    assert_eq!(sum, trie.count);\n+impl<\n+    D: Decoder,\n+    V: Decodable<D>\n+> Decodable<D> for TrieMap<V> {\n+    fn decode(d: &mut D) -> TrieMap<V> {\n+        d.read_map(|d, len| {\n+            let mut map = TrieMap::new();\n+            for i in range(0u, len) {\n+                let key = d.read_map_elt_key(i, |d| Decodable::decode(d));\n+                let val = d.read_map_elt_val(i, |d| Decodable::decode(d));\n+                map.insert(key, val);\n+            }\n+            map\n+        })\n+    }\n+}\n+\n+impl<S: Encoder> Encodable<S> for TrieSet {\n+    fn encode(&self, s: &mut S) {\n+        s.emit_seq(self.len(), |s| {\n+                for (i, e) in self.iter().enumerate() {\n+                    s.emit_seq_elt(i, |s| e.encode(s));\n+                }\n+            })\n+    }\n+}\n+\n+impl<D: Decoder> Decodable<D> for TrieSet {\n+    fn decode(d: &mut D) -> TrieSet {\n+        d.read_seq(|d, len| {\n+            let mut set = TrieSet::new();\n+            for i in range(0u, len) {\n+                set.insert(d.read_seq_elt(i, |d| Decodable::decode(d)));\n+            }\n+            set\n+        })\n+    }\n }\n \n #[cfg(test)]\n mod test_map {\n-    use super::*;\n-    use prelude::*;\n-    use iter::range_step;\n-    use uint;\n+    use super::{TrieMap, TrieNode, Internal, External};\n+    use std::iter::range_step;\n+    use std::uint;\n+\n+    fn check_integrity<T>(trie: &TrieNode<T>) {\n+        assert!(trie.count != 0);\n+\n+        let mut sum = 0;\n+\n+        for x in trie.children.iter() {\n+            match *x {\n+              Nothing => (),\n+              Internal(ref y) => {\n+                  check_integrity(&**y);\n+                  sum += 1\n+              }\n+              External(_, _) => { sum += 1 }\n+            }\n+        }\n+\n+        assert_eq!(sum, trie.count);\n+    }\n \n     #[test]\n     fn test_find_mut() {\n@@ -903,10 +952,9 @@ mod test_map {\n #[cfg(test)]\n mod bench_map {\n     extern crate test;\n+    use super::TrieMap;\n+    use std::rand::{weak_rng, Rng};\n     use self::test::BenchHarness;\n-    use super::*;\n-    use prelude::*;\n-    use rand::{weak_rng, Rng};\n \n     #[bench]\n     fn bench_iter_small(bh: &mut BenchHarness) {\n@@ -1011,9 +1059,8 @@ mod bench_map {\n \n #[cfg(test)]\n mod test_set {\n-    use super::*;\n-    use prelude::*;\n-    use uint;\n+    use super::TrieSet;\n+    use std::uint;\n \n     #[test]\n     fn test_sane_chunk() {", "previous_filename": "src/libstd/trie.rs"}, {"sha": "4cc210aaa6c7225b321047a202e270c21073744d", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -235,7 +235,7 @@ fn main() {\n \n use std::char;\n use std::f64;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::io;\n use std::io::MemWriter;\n use std::num;"}, {"sha": "d791e1a29888f0edce511d0beac7a8cef998eabb", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -12,10 +12,10 @@\n \n use std::cmp;\n use std::hash_old::Hash;\n-use std::hashmap;\n use std::io;\n use std::mem;\n use std::num;\n+use collections::hashmap;\n \n // NB: this can probably be rewritten in terms of num::Num\n // to be less f64-specific."}, {"sha": "6353e7e11596f01699030195cac745f6fd39208e", "filename": "src/libextra/url.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -14,7 +14,7 @@\n \n use std::io::BufReader;\n use std::cmp::Eq;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::to_bytes;\n use std::uint;\n \n@@ -957,7 +957,7 @@ mod tests {\n \n     use super::*;\n \n-    use std::hashmap::HashMap;\n+    use collections::HashMap;\n \n     #[test]\n     fn test_url_parse() {"}, {"sha": "9f332adb27b055d052864d2b489893d66f6e1357", "filename": "src/libnative/io/timer_other.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibnative%2Fio%2Ftimer_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibnative%2Fio%2Ftimer_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_other.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -49,7 +49,6 @@\n #[allow(non_camel_case_types)];\n \n use std::comm::Data;\n-use std::hashmap::HashMap;\n use std::libc;\n use std::mem;\n use std::os;\n@@ -105,7 +104,7 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n     // sorted list, and dead timers are those which have expired, but ownership\n     // hasn't yet been transferred back to the timer itself.\n     let mut active: ~[~Inner] = ~[];\n-    let mut dead = HashMap::new();\n+    let mut dead = ~[];\n \n     // inserts a timer into an array of timers (sorted by firing time)\n     fn insert(t: ~Inner, active: &mut ~[~Inner]) {\n@@ -116,7 +115,7 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n     }\n \n     // signals the first requests in the queue, possible re-enqueueing it.\n-    fn signal(active: &mut ~[~Inner], dead: &mut HashMap<uint, ~Inner>) {\n+    fn signal(active: &mut ~[~Inner], dead: &mut ~[(uint, ~Inner)]) {\n         let mut timer = match active.shift() {\n             Some(timer) => timer, None => return\n         };\n@@ -127,7 +126,7 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n             insert(timer, active);\n         } else {\n             drop(chan);\n-            dead.insert(timer.id, timer);\n+            dead.push((timer.id, timer));\n         }\n     }\n \n@@ -172,8 +171,12 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n                         Data(NewTimer(timer)) => insert(timer, &mut active),\n \n                         Data(RemoveTimer(id, ack)) => {\n-                            match dead.pop(&id) {\n-                                Some(i) => { ack.send(i); continue }\n+                            match dead.iter().position(|&(i, _)| id == i) {\n+                                Some(i) => {\n+                                    let (_, i) = dead.remove(i).unwrap();\n+                                    ack.send(i);\n+                                    continue\n+                                }\n                                 None => {}\n                             }\n                             let i = active.iter().position(|i| i.id == id);"}, {"sha": "baafe3f4850c10819968711952f2983943e940af", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -35,7 +35,6 @@ use std::libc;\n use std::ptr;\n use std::os;\n use std::rt::rtio;\n-use std::hashmap::HashMap;\n use std::mem;\n \n use io::file::FileDesc;\n@@ -78,7 +77,7 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n \n     add(efd, input);\n     let events: [imp::epoll_event, ..16] = unsafe { mem::init() };\n-    let mut map: HashMap<libc::c_int, (Chan<()>, bool)> = HashMap::new();\n+    let mut list: ~[(libc::c_int, Chan<()>, bool)] = ~[];\n     'outer: loop {\n         let n = match unsafe {\n             imp::epoll_wait(efd, events.as_ptr(),\n@@ -107,13 +106,17 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n                 // FIXME: should this perform a send() this number of\n                 //      times?\n                 let _ = FileDesc::new(fd, false).inner_read(bits).unwrap();\n-                let remove = {\n-                    match map.find(&fd).expect(\"fd unregistered\") {\n-                        &(ref c, oneshot) => !c.try_send(()) || oneshot\n+                let (remove, i) = {\n+                    match list.bsearch(|&(f, _, _)| f.cmp(&fd)) {\n+                        Some(i) => {\n+                            let (_, ref c, oneshot) = list[i];\n+                            (!c.try_send(()) || oneshot, i)\n+                        }\n+                        None => fail!(\"fd not active: {}\", fd),\n                     }\n                 };\n                 if remove {\n-                    map.remove(&fd);\n+                    drop(list.remove(i));\n                     del(efd, fd);\n                 }\n             }\n@@ -128,8 +131,17 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n \n                     // If we haven't previously seen the file descriptor, then\n                     // we need to add it to the epoll set.\n-                    if map.insert(fd, (chan, one)) {\n-                        add(efd, fd);\n+                    match list.bsearch(|&(f, _, _)| f.cmp(&fd)) {\n+                        Some(i) => {\n+                            drop(mem::replace(&mut list[i], (fd, chan, one)));\n+                        }\n+                        None => {\n+                            match list.iter().position(|&(f, _, _)| f >= fd) {\n+                                Some(i) => list.insert(i, (fd, chan, one)),\n+                                None => list.push((fd, chan, one)),\n+                            }\n+                            add(efd, fd);\n+                        }\n                     }\n \n                     // Update the timerfd's time value now that we have control\n@@ -141,14 +153,18 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n                 }\n \n                 Data(RemoveTimer(fd, chan)) => {\n-                    if map.remove(&fd) {\n-                        del(efd, fd);\n+                    match list.bsearch(|&(f, _, _)| f.cmp(&fd)) {\n+                        Some(i) => {\n+                            drop(list.remove(i));\n+                            del(efd, fd);\n+                        }\n+                        None => {}\n                     }\n                     chan.send(());\n                 }\n \n                 Data(Shutdown) => {\n-                    assert!(map.len() == 0);\n+                    assert!(list.len() == 0);\n                     break 'outer;\n                 }\n "}, {"sha": "68deb0a94169bacc8fab998c5e6def591d355086", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -13,7 +13,7 @@ use driver::session;\n use metadata::cstore;\n use metadata::filesearch;\n \n-use std::hashmap::HashSet;\n+use collections::HashSet;\n use std::{os, vec};\n use syntax::abi;\n "}, {"sha": "1f7a75da345168034a444501c57358a8ab2f37d0", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -31,12 +31,12 @@ use extra::json;\n use serialize::Encodable;\n \n use std::cell::{Cell, RefCell};\n-use std::hashmap::{HashMap,HashSet};\n use std::io;\n use std::io::fs;\n use std::io::MemReader;\n use std::os;\n use std::vec;\n+use collections::{HashMap, HashSet};\n use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n use syntax::ast;"}, {"sha": "e023190e5f4e709d80e1d3809b095fb5b183c453", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -26,7 +26,7 @@ use syntax::{abi, ast, codemap};\n use syntax;\n \n use std::cell::{Cell, RefCell};\n-use std::hashmap::{HashMap,HashSet};\n+use collections::{HashMap,HashSet};\n \n pub struct Config {\n     os: abi::Os,"}, {"sha": "3bee339e3cc9e0c841a2a5adba9b32119979cb6d", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -13,7 +13,7 @@\n \n use std::c_str::ToCStr;\n use std::cell::RefCell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::libc::{c_uint, c_ushort, c_void, free};\n use std::str::raw::from_c_str;\n "}, {"sha": "9f14b571d82254ea9a1e4027d4b6a8b0528d7dc2", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -21,7 +21,7 @@ use metadata::loader;\n use metadata::loader::Os;\n \n use std::cell::RefCell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use syntax::ast;\n use syntax::abi;\n use syntax::attr;"}, {"sha": "1a8b86b3510619c72a3fc9f9107bebf6f2091e24", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -17,7 +17,7 @@ use metadata::decoder;\n use metadata::loader;\n \n use std::cell::RefCell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use syntax::ast;\n use syntax::parse::token::IdentInterner;\n "}, {"sha": "a32cdbe98a19245e424d55386daa79a662c73ab0", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -27,9 +27,9 @@ use serialize::Encodable;\n use std::cast;\n use std::cell::{Cell, RefCell};\n use std::hash_old::Hash;\n-use std::hashmap::{HashMap, HashSet};\n use std::io::MemWriter;\n use std::str;\n+use collections::{HashMap, HashSet};\n use syntax::abi::AbiSet;\n use syntax::ast::*;\n use syntax::ast;"}, {"sha": "2ab3f8a147e9047bb9d8fefddc66136c4a2bdaa9", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -14,7 +14,7 @@ use std::cell::RefCell;\n use std::option;\n use std::os;\n use std::io::fs;\n-use std::hashmap::HashSet;\n+use collections::HashSet;\n \n pub enum FileMatch { FileMatches, FileDoesntMatch }\n "}, {"sha": "e7d97f03913b0c8c599712a00c2e466885a01cdd", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -26,13 +26,13 @@ use syntax::attr::AttrMetaMethods;\n \n use std::c_str::ToCStr;\n use std::cast;\n-use std::hashmap::{HashMap, HashSet};\n use std::cmp;\n use std::io;\n use std::os::consts::{macos, freebsd, linux, android, win32};\n use std::str;\n use std::vec;\n \n+use collections::{HashMap, HashSet};\n use flate;\n use time;\n "}, {"sha": "c9b234743fae61463c8f102bd27d915b425a9bb7", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -14,7 +14,7 @@\n #[allow(non_camel_case_types)];\n \n use std::cell::RefCell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::io;\n use std::io::MemWriter;\n use std::str;"}, {"sha": "34008fb84df98cd24ec52035f5550640b67dc0e6", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -21,7 +21,7 @@ use middle::dataflow::DataFlowOperator;\n use util::ppaux::{note_and_explain_region, Repr, UserString};\n \n use std::cell::{Cell, RefCell};\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::ops::{BitOr, BitAnd};\n use std::result::{Result};\n use syntax::ast;"}, {"sha": "5034976c9f9ebb392826b61866dadf76f68b7fb9", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -16,8 +16,8 @@ comments in the section \"Moves and initialization\" and in `doc.rs`.\n */\n \n use std::cell::RefCell;\n-use std::hashmap::{HashMap, HashSet};\n use std::uint;\n+use collections::{HashMap, HashSet};\n use middle::borrowck::*;\n use middle::dataflow::DataFlowContext;\n use middle::dataflow::DataFlowOperator;"}, {"sha": "d4eb72ac577af6fbb2be1c0fc6897cb3148498bc", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -12,7 +12,7 @@ use middle::cfg::*;\n use middle::graph;\n use middle::typeck;\n use middle::ty;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::opt_vec;"}, {"sha": "b0ee26f6f235a346644d719834d2d81c18d06494", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -18,7 +18,7 @@ Uses `Graph` as the underlying representation.\n use middle::graph;\n use middle::ty;\n use middle::typeck;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use syntax::ast;\n use syntax::opt_vec::OptVec;\n "}, {"sha": "5322aac8c23c0bbc104f631909fce5c2486f4689", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -24,7 +24,7 @@ use syntax::visit;\n use syntax::{ast, ast_map, ast_util};\n \n use std::cell::RefCell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::rc::Rc;\n \n //"}, {"sha": "ba79d71bcb64f926a3daee3b56305ec9eb13e574", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -20,7 +20,7 @@\n use std::io;\n use std::uint;\n use std::vec;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::ast_util::IdRange;"}, {"sha": "9cc5a49600f1480163ad846ab1fc1c833e3e621a", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -17,7 +17,7 @@ use middle::privacy;\n use middle::ty;\n use middle::typeck;\n \n-use std::hashmap::HashSet;\n+use collections::HashSet;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{local_def, def_id_of_def, is_local};"}, {"sha": "9ff67377c59028abefe109cd2ed1657672865da0", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -16,7 +16,7 @@\n use middle::resolve;\n use middle::ty;\n \n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use syntax::codemap::Span;\n use syntax::{ast, ast_util};\n use syntax::visit;"}, {"sha": "0194d4a2510487622323d6d159e7f77da3d568c1", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -30,7 +30,7 @@ use syntax::parse::token::InternedString;\n use syntax::visit::Visitor;\n use syntax::visit;\n \n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::iter::Enumerate;\n use std::vec;\n "}, {"sha": "36ed4913cdb0cd7bd2e732084787cf6794702c32", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -49,7 +49,7 @@ use std::to_str::ToStr;\n use util::ppaux::{ty_to_str};\n \n use std::cmp;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::i16;\n use std::i32;\n use std::i64;"}, {"sha": "3b8eb682065bf38f2d3420b00316e697d11b42a3", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -111,7 +111,7 @@ use middle::moves;\n \n use std::cast::transmute;\n use std::cell::{Cell, RefCell};\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::io;\n use std::str;\n use std::to_str;"}, {"sha": "1705e3a5160ba8975c3902027fcf4efc5c8784a7", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -137,8 +137,8 @@ use util::common::indenter;\n use util::ppaux::UserString;\n \n use std::cell::RefCell;\n-use std::hashmap::{HashSet, HashMap};\n use std::rc::Rc;\n+use collections::{HashSet, HashMap};\n use syntax::ast::*;\n use syntax::ast_util;\n use syntax::visit;"}, {"sha": "d352771ef5015795f59b934ccc414c3da90f44f8", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -11,7 +11,7 @@\n \n use middle::resolve;\n \n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use syntax::ast::*;\n use syntax::ast_util::{path_to_ident, walk_pat};\n use syntax::codemap::Span;"}, {"sha": "1899b52cca8997964ec0017205fdd5d80b705f9e", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -12,8 +12,8 @@\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n \n-use std::hashmap::{HashSet, HashMap};\n use std::mem::replace;\n+use collections::{HashSet, HashMap};\n \n use metadata::csearch;\n use middle::resolve;"}, {"sha": "26104331a100d5e62f787a58e1b26683e2cf5460", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -20,7 +20,7 @@ use middle::typeck;\n use middle::privacy;\n \n use std::cell::RefCell;\n-use std::hashmap::HashSet;\n+use collections::HashSet;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{def_id_of_def, is_local};"}, {"sha": "c06ad66f606dcf2be878607aba54df124bedadc2", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -26,7 +26,7 @@ use middle::ty::{FreeRegion};\n use middle::ty;\n \n use std::cell::RefCell;\n-use std::hashmap::{HashMap, HashSet};\n+use collections::{HashMap, HashSet};\n use syntax::codemap::Span;\n use syntax::{ast, visit};\n use syntax::visit::{Visitor, FnKind};"}, {"sha": "72967ff8195c1e1bea297da9585777e58b0f3238", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -31,8 +31,8 @@ use syntax::visit::Visitor;\n \n use std::cell::{Cell, RefCell};\n use std::uint;\n-use std::hashmap::{HashMap, HashSet};\n use std::mem::replace;\n+use collections::{HashMap, HashSet};\n \n // Definition mapping\n pub type DefMap = @RefCell<HashMap<NodeId,Def>>;"}, {"sha": "4e780f45111b53ddaa12d44569943bff581d3498", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -19,7 +19,7 @@\n \n use driver::session;\n use std::cell::RefCell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::opt_vec::OptVec;"}, {"sha": "5b2f9d87ca87de2cd3880aab7b2a73eb7e5c9c2c", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -223,7 +223,7 @@ use util::common::indenter;\n use util::ppaux::{Repr, vec_map_to_str};\n \n use std::cell::Cell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::vec;\n use syntax::ast;\n use syntax::ast::Ident;"}, {"sha": "d920378f5089d17c6070977c3fac2a2da4e29319", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -74,7 +74,7 @@ use util::sha2::Sha256;\n use arena::TypedArena;\n use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::libc::c_uint;\n use std::local_data;\n use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic, OsWin32};"}, {"sha": "4fa807ca6089d7d8a34dda8a2d7dbd852f7243f7", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -17,8 +17,8 @@ use middle::trans::base;\n use middle::trans::common::*;\n use middle::trans::machine::llalign_of_pref;\n use middle::trans::type_::Type;\n-use std::hashmap::HashMap;\n use std::libc::{c_uint, c_ulonglong, c_char};\n+use collections::HashMap;\n use syntax::codemap::Span;\n \n pub struct Builder<'a> {"}, {"sha": "8ac885d183fd5e4673ce9aa0922d57082ad5f6b9", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -33,7 +33,7 @@ use util::ppaux::Repr;\n use arena::TypedArena;\n use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::libc::{c_uint, c_longlong, c_ulonglong, c_char};\n use syntax::ast::Ident;\n use syntax::ast;"}, {"sha": "b90fc4f6bbf0eb7bf947686f0f867ce8fc59b603", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -29,9 +29,9 @@ use util::sha2::Sha256;\n \n use std::cell::{Cell, RefCell};\n use std::c_str::ToCStr;\n-use std::hashmap::{HashMap, HashSet};\n use std::local_data;\n use std::libc::c_uint;\n+use collections::{HashMap, HashSet};\n use syntax::ast;\n use syntax::parse::token::InternedString;\n "}, {"sha": "564aab5d31d78923c9e24287015802014eeb798f", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -142,8 +142,8 @@ use util::ppaux;\n \n use std::c_str::{CString, ToCStr};\n use std::cell::{Cell, RefCell};\n-use std::hashmap::HashMap;\n-use std::hashmap::HashSet;\n+use collections::HashMap;\n+use collections::HashSet;\n use std::libc::{c_uint, c_ulonglong, c_longlong};\n use std::ptr;\n use std::sync::atomics;"}, {"sha": "e3724ab4d11d9d4507c8df53e48bfc69d1cb79fe", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -70,7 +70,7 @@ use middle::trans::machine::llsize_of;\n \n use middle::trans::type_::Type;\n \n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::vec;\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "c7aedec4b4834f77f25fc9641ed97a4d11104cc5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -33,12 +33,12 @@ use util::common::{indenter};\n use std::cast;\n use std::cell::{Cell, RefCell};\n use std::cmp;\n-use std::hashmap::{HashMap, HashSet};\n use std::ops;\n use std::rc::Rc;\n use std::to_bytes;\n use std::to_str::ToStr;\n use std::vec;\n+use collections::{HashMap, HashSet};\n use syntax::ast::*;\n use syntax::ast_util::{is_local, lit_is_str};\n use syntax::ast_util;\n@@ -460,7 +460,7 @@ pub struct param_ty {\n }\n \n /// Representation of regions:\n-#[deriving(Clone, Eq, IterBytes, Encodable, Decodable, ToStr)]\n+#[deriving(Clone, Eq, IterBytes, Encodable, Decodable, ToStr, Show)]\n pub enum Region {\n     // Region bound in a type or fn declaration which will be\n     // substituted 'early' -- that is, at the same time when type\n@@ -620,13 +620,13 @@ impl Region {\n     }\n }\n \n-#[deriving(Clone, Eq, TotalOrd, TotalEq, IterBytes, Encodable, Decodable, ToStr)]\n+#[deriving(Clone, Eq, TotalOrd, TotalEq, IterBytes, Encodable, Decodable, ToStr, Show)]\n pub struct FreeRegion {\n     scope_id: NodeId,\n     bound_region: BoundRegion\n }\n \n-#[deriving(Clone, Eq, TotalEq, TotalOrd, IterBytes, Encodable, Decodable, ToStr)]\n+#[deriving(Clone, Eq, TotalEq, TotalOrd, IterBytes, Encodable, Decodable, ToStr, Show)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n     BrAnon(uint),\n@@ -869,7 +869,7 @@ pub struct IntVid(uint);\n #[deriving(Clone, Eq, IterBytes)]\n pub struct FloatVid(uint);\n \n-#[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n+#[deriving(Clone, Eq, Encodable, Decodable, IterBytes, Show)]\n pub struct RegionVid {\n     id: uint\n }\n@@ -881,7 +881,7 @@ pub enum InferTy {\n     FloatVar(FloatVid)\n }\n \n-#[deriving(Clone, Encodable, Decodable, IterBytes, ToStr)]\n+#[deriving(Clone, Encodable, Decodable, IterBytes, ToStr, Show)]\n pub enum InferRegion {\n     ReVar(RegionVid),\n     ReSkolemized(uint, BoundRegion)"}, {"sha": "6620f8502edf34b5b12b940032fe2a5761679b2d", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -19,7 +19,7 @@ use middle::typeck::check::{structure_of, valid_range_bounds};\n use middle::typeck::infer;\n use middle::typeck::require_same_types;\n \n-use std::hashmap::{HashMap, HashSet};\n+use collections::{HashMap, HashSet};\n use syntax::ast;\n use syntax::ast_util;\n use syntax::parse::token;"}, {"sha": "3837c0b55d1adbac0ec043229ba2e580b50ab10a", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -98,7 +98,7 @@ use util::common::indenter;\n use util::ppaux::Repr;\n \n use std::cell::RefCell;\n-use std::hashmap::HashSet;\n+use collections::HashSet;\n use std::result;\n use std::vec;\n use syntax::ast::{DefId, SelfValue, SelfRegion};"}, {"sha": "ac17d3271664bc5b04e5fd90fb13314558dcc535", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -114,7 +114,7 @@ use util::ppaux;\n use util::ppaux::{UserString, Repr};\n \n use std::cell::{Cell, RefCell};\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::mem::replace;\n use std::result;\n use std::vec;"}, {"sha": "9192bdfda291692c2e8907351ccef48e62a8eeee", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -13,7 +13,7 @@\n use middle::ty;\n use middle::ty_fold;\n use middle::ty_fold::TypeFolder;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use util::ppaux::Repr;\n use util::ppaux;\n \n@@ -39,7 +39,7 @@ pub fn replace_bound_regions_in_fn_sig(\n         });\n         ty_fold::super_fold_sig(&mut f, fn_sig)\n     };\n-    debug!(\"resulting map: {}\", map.to_str());\n+    debug!(\"resulting map: {}\", map);\n     (map, fn_sig)\n }\n "}, {"sha": "588dbec8a838a53b87235c2f5c4ad659f71c1a0b", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -27,7 +27,7 @@ use util::ppaux;\n use util::ppaux::Repr;\n \n use std::cell::RefCell;\n-use std::hashmap::HashSet;\n+use collections::HashSet;\n use std::result;\n use syntax::ast;\n use syntax::ast_util;"}, {"sha": "c22b3c814584261fd8e7c9d2a496ce703fb2eaaf", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -47,7 +47,7 @@ use syntax::parse::token;\n use syntax::visit;\n \n use std::cell::RefCell;\n-use std::hashmap::HashSet;\n+use collections::HashSet;\n use std::rc::Rc;\n use std::vec;\n "}, {"sha": "039ea9958219ebe9ff81ff0e33133234aaa0619e", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -24,7 +24,7 @@ use middle::typeck::infer::fold_regions_in_sig;\n use syntax::ast::{Many, Once, MutImmutable, MutMutable};\n use syntax::ast::{ExternFn, ImpureFn, UnsafeFn, NodeId};\n use syntax::ast::{Onceness, Purity};\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use util::common::{indenter};\n use util::ppaux::mt_to_str;\n "}, {"sha": "265ac7b0cf0c315ffc4314dba86bc89d288b72df", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -43,7 +43,7 @@ use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::unify::*;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use util::common::indenter;\n \n pub trait LatticeValue {"}, {"sha": "fd6950ee49e35d76ff42538f2e0a53825d182c9a", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -21,7 +21,7 @@ use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::{cres, InferCtxt};\n use middle::typeck::infer::fold_regions_in_sig;\n use middle::typeck::infer::{TypeTrace, Subtype};\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use syntax::ast::{Many, Once, NodeId};\n use syntax::ast::{ExternFn, ImpureFn, UnsafeFn};\n use syntax::ast::{Onceness, Purity};"}, {"sha": "dceef9e38d50e87443615ac565fade1c5a2d1188", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -37,7 +37,7 @@ use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::unify::{ValsAndBindings, Root};\n use middle::typeck::infer::error_reporting::ErrorReporting;\n use std::cell::{Cell, RefCell};\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::result;\n use std::vec;\n use syntax::ast::{MutImmutable, MutMutable};"}, {"sha": "98391436aa338bafde2b8b385fe0d8c6165eba98", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -25,9 +25,9 @@ use util::common::indenter;\n use util::ppaux::{Repr};\n \n use std::cell::{Cell, RefCell};\n-use std::hashmap::{HashMap, HashSet};\n use std::uint;\n use std::vec;\n+use collections::{HashMap, HashSet};\n use syntax::ast;\n use syntax::opt_vec;\n use syntax::opt_vec::OptVec;"}, {"sha": "d4e2660b4a01a92e8a5b844f18cd5dff077c9b10", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -70,7 +70,7 @@ use util::ppaux::Repr;\n use util::ppaux;\n \n use std::cell::RefCell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::rc::Rc;\n use collections::List;\n use collections::list;"}, {"sha": "47c40514e6cac57c1a59b8cf3cfa15b2310864ef", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -192,7 +192,7 @@ represents the \"variance transform\" as defined in the paper:\n \n */\n \n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use arena;\n use arena::Arena;\n use middle::ty;"}, {"sha": "f406219597858142cacc61dfcedcc4b7e9b7b804", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -21,7 +21,7 @@ use syntax;\n use std::cell::RefCell;\n use std::os;\n use std::local_data;\n-use std::hashmap::{HashSet};\n+use collections::HashSet;\n \n use visit_ast::RustdocVisitor;\n use clean;"}, {"sha": "ab4bf5403ad22ff90f94a2bb0454246883c85d0a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -34,12 +34,12 @@\n //! both occur before the crate is rendered.\n \n use std::fmt;\n-use std::hashmap::{HashMap, HashSet};\n use std::local_data;\n use std::io;\n use std::io::{fs, File, BufferedWriter};\n use std::str;\n use std::vec;\n+use collections::{HashMap, HashSet};\n \n use sync::Arc;\n use extra::json::ToJson;"}, {"sha": "b8cc271ca9cb00fbedcb5de0abc1da96e8537711", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cmp;\n-use std::hashmap::HashSet;\n+use collections::HashSet;\n use std::local_data;\n use std::uint;\n use syntax::ast;"}, {"sha": "354b5cb0f14ef91817aa969cc7dd8f6125499ca9", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cell::RefCell;\n-use std::hashmap::HashSet;\n+use collections::HashSet;\n use std::local_data;\n use std::os;\n use std::run;"}, {"sha": "a94df9975a40bf123e2d7c6e444fbd5979d5668d", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -14,10 +14,7 @@\n Core encoding and decoding interfaces.\n */\n \n-use std::hash_old::Hash;\n-use std::hashmap::{HashMap, HashSet};\n use std::rc::Rc;\n-use std::trie::{TrieMap, TrieSet};\n use std::vec;\n use std::vec_ng::Vec;\n \n@@ -628,124 +625,6 @@ impl<\n     }\n }\n \n-impl<\n-    E: Encoder,\n-    K: Encodable<E> + Hash + IterBytes + Eq,\n-    V: Encodable<E>\n-> Encodable<E> for HashMap<K, V> {\n-    fn encode(&self, e: &mut E) {\n-        e.emit_map(self.len(), |e| {\n-            let mut i = 0;\n-            for (key, val) in self.iter() {\n-                e.emit_map_elt_key(i, |e| key.encode(e));\n-                e.emit_map_elt_val(i, |e| val.encode(e));\n-                i += 1;\n-            }\n-        })\n-    }\n-}\n-\n-impl<\n-    D: Decoder,\n-    K: Decodable<D> + Hash + IterBytes + Eq,\n-    V: Decodable<D>\n-> Decodable<D> for HashMap<K, V> {\n-    fn decode(d: &mut D) -> HashMap<K, V> {\n-        d.read_map(|d, len| {\n-            let mut map = HashMap::with_capacity(len);\n-            for i in range(0u, len) {\n-                let key = d.read_map_elt_key(i, |d| Decodable::decode(d));\n-                let val = d.read_map_elt_val(i, |d| Decodable::decode(d));\n-                map.insert(key, val);\n-            }\n-            map\n-        })\n-    }\n-}\n-\n-impl<\n-    S: Encoder,\n-    T: Encodable<S> + Hash + IterBytes + Eq\n-> Encodable<S> for HashSet<T> {\n-    fn encode(&self, s: &mut S) {\n-        s.emit_seq(self.len(), |s| {\n-            let mut i = 0;\n-            for e in self.iter() {\n-                s.emit_seq_elt(i, |s| e.encode(s));\n-                i += 1;\n-            }\n-        })\n-    }\n-}\n-\n-impl<\n-    D: Decoder,\n-    T: Decodable<D> + Hash + IterBytes + Eq\n-> Decodable<D> for HashSet<T> {\n-    fn decode(d: &mut D) -> HashSet<T> {\n-        d.read_seq(|d, len| {\n-            let mut set = HashSet::with_capacity(len);\n-            for i in range(0u, len) {\n-                set.insert(d.read_seq_elt(i, |d| Decodable::decode(d)));\n-            }\n-            set\n-        })\n-    }\n-}\n-\n-impl<\n-    E: Encoder,\n-    V: Encodable<E>\n-> Encodable<E> for TrieMap<V> {\n-    fn encode(&self, e: &mut E) {\n-        e.emit_map(self.len(), |e| {\n-                for (i, (key, val)) in self.iter().enumerate() {\n-                    e.emit_map_elt_key(i, |e| key.encode(e));\n-                    e.emit_map_elt_val(i, |e| val.encode(e));\n-                }\n-            });\n-    }\n-}\n-\n-impl<\n-    D: Decoder,\n-    V: Decodable<D>\n-> Decodable<D> for TrieMap<V> {\n-    fn decode(d: &mut D) -> TrieMap<V> {\n-        d.read_map(|d, len| {\n-            let mut map = TrieMap::new();\n-            for i in range(0u, len) {\n-                let key = d.read_map_elt_key(i, |d| Decodable::decode(d));\n-                let val = d.read_map_elt_val(i, |d| Decodable::decode(d));\n-                map.insert(key, val);\n-            }\n-            map\n-        })\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for TrieSet {\n-    fn encode(&self, s: &mut S) {\n-        s.emit_seq(self.len(), |s| {\n-                for (i, e) in self.iter().enumerate() {\n-                    s.emit_seq_elt(i, |s| e.encode(s));\n-                }\n-            })\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for TrieSet {\n-    fn decode(d: &mut D) -> TrieSet {\n-        d.read_seq(|d, len| {\n-            let mut set = TrieSet::new();\n-            for i in range(0u, len) {\n-                set.insert(d.read_seq_elt(i, |d| Decodable::decode(d)));\n-            }\n-            set\n-        })\n-    }\n-}\n-\n // ___________________________________________________________________________\n // Helper routines\n //"}, {"sha": "19aff4f70fe3f46599d88af40978fa0760880cad", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -20,12 +20,14 @@ definitions for a number of signals.\n */\n \n use clone::Clone;\n-use result::{Ok, Err};\n use comm::{Port, Chan};\n-use container::{Map, MutableMap};\n-use hashmap;\n use io;\n+use iter::Iterator;\n+use mem::drop;\n+use option::{Some, None};\n+use result::{Ok, Err};\n use rt::rtio::{IoFactory, LocalIo, RtioSignal};\n+use vec::{ImmutableVector, OwnedVector};\n \n #[repr(int)]\n #[deriving(Eq, IterBytes)]\n@@ -78,7 +80,7 @@ pub enum Signum {\n /// ```\n pub struct Listener {\n     /// A map from signums to handles to keep the handles in memory\n-    priv handles: hashmap::HashMap<Signum, ~RtioSignal>,\n+    priv handles: ~[(Signum, ~RtioSignal)],\n     /// chan is where all the handles send signums, which are received by\n     /// the clients from port.\n     priv chan: Chan<Signum>,\n@@ -97,7 +99,7 @@ impl Listener {\n         Listener {\n             chan: chan,\n             port: port,\n-            handles: hashmap::HashMap::new(),\n+            handles: ~[],\n         }\n     }\n \n@@ -118,14 +120,14 @@ impl Listener {\n     /// If this function fails to register a signal handler, then an error will\n     /// be returned.\n     pub fn register(&mut self, signum: Signum) -> io::IoResult<()> {\n-        if self.handles.contains_key(&signum) {\n+        if self.handles.iter().any(|&(sig, _)| sig == signum) {\n             return Ok(()); // self is already listening to signum, so succeed\n         }\n         match LocalIo::maybe_raise(|io| {\n             io.signal(signum, self.chan.clone())\n         }) {\n             Ok(handle) => {\n-                self.handles.insert(signum, handle);\n+                self.handles.push((signum, handle));\n                 Ok(())\n             }\n             Err(e) => Err(e)\n@@ -137,7 +139,10 @@ impl Listener {\n     /// notification about the signal. If the signal has already been received,\n     /// it may still be returned by `recv`.\n     pub fn unregister(&mut self, signum: Signum) {\n-        self.handles.pop(&signum);\n+        match self.handles.iter().position(|&(i, _)| i == signum) {\n+            Some(i) => drop(self.handles.remove(i)),\n+            None => {}\n+        }\n     }\n }\n "}, {"sha": "d855aebdf3f4a6f587c7ec3f8a62d14f412ca68a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -11,7 +11,7 @@\n //! # The Rust standard library\n //!\n //! The Rust standard library is a group of interrelated modules defining\n-//! the core language traits, operations on built-in data types, collections,\n+//! the core language traits, operations on built-in data types,\n //! platform abstractions, the task scheduler, runtime support for language\n //! features and other common functionality.\n //!\n@@ -68,9 +68,9 @@\n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top\n // of\n-#[cfg(test)] extern crate rustuv = \"rustuv\";\n-#[cfg(test)] extern crate native = \"native\";\n-#[cfg(test)] extern crate green = \"green\";\n+#[cfg(test)] extern crate rustuv;\n+#[cfg(test)] extern crate native;\n+#[cfg(test)] extern crate green;\n \n // Make extra accessible for benchmarking\n #[cfg(test)] extern crate extra = \"extra\";\n@@ -156,9 +156,7 @@ pub mod any;\n \n pub mod option;\n pub mod result;\n-pub mod hashmap;\n pub mod cell;\n-pub mod trie;\n \n \n /* Tasks and communication */"}, {"sha": "39a62a80cfcf962d83d89690591e9e7fa1d4361d", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -70,7 +70,7 @@ hello                // turns on all logging for the 'hello' module\n info                 // turns on all info logging\n hello=debug          // turns on debug logging for 'hello'\n hello=3              // turns on info logging for 'hello'\n-hello,std::hashmap   // turns on hello, and std's hashmap logging\n+hello,std::option    // turns on hello, and std's option logging\n error,hello=warn     // turn on global error logging and also warn for hello\n ```\n "}, {"sha": "847375121c89d2fc9c8f3a31db406b8de75df9b0", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use cmp::TotalOrd;\n use container::MutableSet;\n-use hashmap::HashSet;\n use iter::Iterator;\n use option::{Some, None, Option};\n use ptr::RawPtr;\n-use vec::ImmutableVector;\n use rt::rtio::EventLoop;\n+use vec::{ImmutableVector, OwnedVector};\n \n // Need to tell the linker on OS X to not barf on undefined symbols\n // and instead look them up at runtime, which we need to resolve\n@@ -89,28 +89,33 @@ fn version(crate_map: &CrateMap) -> i32 {\n fn do_iter_crate_map<'a>(\n                      crate_map: &'a CrateMap<'a>,\n                      f: |&ModEntry|,\n-                     visited: &mut HashSet<*CrateMap<'a>>) {\n-    if visited.insert(crate_map as *CrateMap) {\n-        match version(crate_map) {\n-            2 => {\n-                let (entries, children) = (crate_map.entries, crate_map.children);\n-                for entry in entries.iter() {\n-                    f(entry);\n-                }\n-                for child in children.iter() {\n-                    do_iter_crate_map(*child, |x| f(x), visited);\n-                }\n-            },\n-            _ => fail!(\"invalid crate map version\")\n-        }\n+                     visited: &mut ~[*CrateMap<'a>]) {\n+    let raw = crate_map as *CrateMap<'a>;\n+    if visited.bsearch(|a| (*a as uint).cmp(&(raw as uint))).is_some() {\n+        return\n+    }\n+    match visited.iter().position(|i| *i as uint > raw as uint) {\n+        Some(i) => visited.insert(i, raw),\n+        None => visited.push(raw),\n+    }\n+\n+    match version(crate_map) {\n+        2 => {\n+            let (entries, children) = (crate_map.entries, crate_map.children);\n+            for entry in entries.iter() {\n+                f(entry);\n+            }\n+            for child in children.iter() {\n+                do_iter_crate_map(*child, |x| f(x), visited);\n+            }\n+        },\n+        _ => fail!(\"invalid crate map version\")\n     }\n }\n \n /// Iterates recursively over `crate_map` and all child crate maps\n pub fn iter_crate_map<'a>(crate_map: &'a CrateMap<'a>, f: |&ModEntry|) {\n-    // FIXME: use random numbers as keys from the OS-level RNG when there is a nice\n-    //        way to do this\n-    let mut v: HashSet<*CrateMap<'a>> = HashSet::with_capacity_and_keys(0, 0, 32);\n+    let mut v = ~[];\n     do_iter_crate_map(crate_map, f, &mut v);\n }\n "}, {"sha": "46a9e93f416424c64d997e46d3465e2a92a0003b", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -16,11 +16,7 @@ The `ToStr` trait for converting to strings\n \n use option::{Some, None};\n use str::OwnedStr;\n-use hashmap::HashMap;\n-use hashmap::HashSet;\n-use hash_old::Hash;\n use iter::Iterator;\n-use cmp::Eq;\n use vec::ImmutableVector;\n \n /// A generic trait for converting a value to a string\n@@ -40,46 +36,6 @@ impl ToStr for () {\n     fn to_str(&self) -> ~str { ~\"()\" }\n }\n \n-impl<A:ToStr+Hash+Eq, B:ToStr> ToStr for HashMap<A, B> {\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        let mut acc = ~\"{\";\n-        let mut first = true;\n-        for (key, value) in self.iter() {\n-            if first {\n-                first = false;\n-            }\n-            else {\n-                acc.push_str(\", \");\n-            }\n-            acc.push_str(key.to_str());\n-            acc.push_str(\": \");\n-            acc.push_str(value.to_str());\n-        }\n-        acc.push_char('}');\n-        acc\n-    }\n-}\n-\n-impl<A:ToStr+Hash+Eq> ToStr for HashSet<A> {\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        let mut acc = ~\"{\";\n-        let mut first = true;\n-        for element in self.iter() {\n-            if first {\n-                first = false;\n-            }\n-            else {\n-                acc.push_str(\", \");\n-            }\n-            acc.push_str(element.to_str());\n-        }\n-        acc.push_char('}');\n-        acc\n-    }\n-}\n-\n impl<'a,A:ToStr> ToStr for &'a [A] {\n     #[inline]\n     fn to_str(&self) -> ~str {\n@@ -120,9 +76,6 @@ impl<A:ToStr> ToStr for ~[A] {\n \n #[cfg(test)]\n mod tests {\n-    use hashmap::HashMap;\n-    use hashmap::HashSet;\n-    use container::{MutableSet, MutableMap};\n     use super::*;\n \n     #[test]\n@@ -146,42 +99,4 @@ mod tests {\n         assert!((~[~[], ~[1], ~[1, 1]]).to_str() ==\n                ~\"[[], [1], [1, 1]]\");\n     }\n-\n-    struct StructWithToStrWithoutEqOrHash {\n-        value: int\n-    }\n-\n-    impl ToStr for StructWithToStrWithoutEqOrHash {\n-        fn to_str(&self) -> ~str {\n-            format!(\"s{}\", self.value)\n-        }\n-    }\n-\n-    #[test]\n-    fn test_hashmap() {\n-        let mut table: HashMap<int, StructWithToStrWithoutEqOrHash> = HashMap::new();\n-        let empty: HashMap<int, StructWithToStrWithoutEqOrHash> = HashMap::new();\n-\n-        table.insert(3, StructWithToStrWithoutEqOrHash { value: 4 });\n-        table.insert(1, StructWithToStrWithoutEqOrHash { value: 2 });\n-\n-        let table_str = table.to_str();\n-\n-        assert!(table_str == ~\"{1: s2, 3: s4}\" || table_str == ~\"{3: s4, 1: s2}\");\n-        assert_eq!(empty.to_str(), ~\"{}\");\n-    }\n-\n-    #[test]\n-    fn test_hashset() {\n-        let mut set: HashSet<int> = HashSet::new();\n-        let empty_set: HashSet<int> = HashSet::new();\n-\n-        set.insert(1);\n-        set.insert(2);\n-\n-        let set_str = set.to_str();\n-\n-        assert!(set_str == ~\"{1, 2}\" || set_str == ~\"{2, 1}\");\n-        assert_eq!(empty_set.to_str(), ~\"{}\");\n-    }\n }"}, {"sha": "b4764f577cb84dd31ca962cf8afed3e2da3bf1dd", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -3395,7 +3395,6 @@ mod tests {\n \n     #[test]\n     fn test_permutations() {\n-        use hashmap;\n         {\n             let v: [int, ..0] = [];\n             let mut it = v.permutations();\n@@ -3418,13 +3417,13 @@ mod tests {\n             assert_eq!(it.next(), None);\n         }\n         {\n-            // check that we have N! unique permutations\n-            let mut set = hashmap::HashSet::new();\n+            // check that we have N! permutations\n             let v = ['A', 'B', 'C', 'D', 'E', 'F'];\n-            for perm in v.permutations() {\n-                set.insert(perm);\n+            let mut amt = 0;\n+            for _perm in v.permutations() {\n+                amt += 1;\n             }\n-            assert_eq!(set.len(), 2 * 3 * 4 * 5 * 6);\n+            assert_eq!(amt, 2 * 3 * 4 * 5 * 6);\n         }\n     }\n "}, {"sha": "db1243b18bc2dc8227e55d23fa44e01e0c0c2950", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -18,7 +18,7 @@ use parse::token::{InternedString, special_idents, str_to_ident};\n use parse::token;\n \n use std::cell::RefCell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::option::Option;\n use std::rc::Rc;\n use std::to_str::ToStr;\n@@ -39,7 +39,7 @@ pub fn P<T: 'static>(value: T) -> P<T> {\n // table) and a SyntaxContext to track renaming and\n // macro expansion per Flatt et al., \"Macros\n // That Work Together\"\n-#[deriving(Clone, IterBytes, ToStr, TotalEq, TotalOrd)]\n+#[deriving(Clone, IterBytes, ToStr, TotalEq, TotalOrd, Show)]\n pub struct Ident { name: Name, ctxt: SyntaxContext }\n \n impl Ident {\n@@ -177,7 +177,7 @@ pub type CrateNum = u32;\n \n pub type NodeId = u32;\n \n-#[deriving(Clone, TotalEq, TotalOrd, Eq, Encodable, Decodable, IterBytes, ToStr)]\n+#[deriving(Clone, TotalEq, TotalOrd, Eq, Encodable, Decodable, IterBytes, ToStr, Show)]\n pub struct DefId {\n     krate: CrateNum,\n     node: NodeId,"}, {"sha": "8ff66bc66295f6f83614ec61c3c01ff065664985", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -20,7 +20,7 @@ use visit;\n \n use std::cell::{Cell, RefCell};\n use std::cmp;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::u32;\n use std::local_data;\n \n@@ -964,7 +964,7 @@ mod test {\n     use ast::*;\n     use super::*;\n     use opt_vec;\n-    use std::hashmap::HashMap;\n+    use collections::HashMap;\n \n     fn ident_to_segment(id : &Ident) -> PathSegment {\n         PathSegment {identifier:id.clone(),"}, {"sha": "93edb552bbe7cc2da82fff6f927197093f304819", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -20,7 +20,7 @@ use parse::token::InternedString;\n use parse::token;\n use crateid::CrateId;\n \n-use std::hashmap::HashSet;\n+use collections::HashSet;\n \n pub trait AttrMetaMethods {\n     // This could be changed to `fn check_name(&self, name: InternedString) ->"}, {"sha": "0636d19163e12fcce357052d81c083e9131690a2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -19,7 +19,7 @@ use parse::token;\n use parse::token::{InternedString, intern, str_to_ident};\n use util::small_vector::SmallVector;\n \n-use std::hashmap::HashMap;\n+use collections::HashMap;\n \n // new-style macro! tt code:\n //"}, {"sha": "5286720b9fc08d08c790ae1cda502c2db525e053", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -18,7 +18,7 @@ use ext::deriving::generic::*;\n \n use parse::token;\n \n-use std::hashmap::HashMap;\n+use collections::HashMap;\n \n pub fn expand_deriving_show(cx: &mut ExtCtxt,\n                             span: Span,"}, {"sha": "1b73d42c79aa4b98137573377422b4eec84f230a", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -18,8 +18,9 @@ use opt_vec;\n use parse::token::InternedString;\n use parse::token;\n use rsparse = parse;\n+\n use std::fmt::parse;\n-use std::hashmap::{HashMap, HashSet};\n+use collections::{HashMap, HashSet};\n use std::vec;\n \n #[deriving(Eq)]"}, {"sha": "456533de5e9a4e9b33094985e2ca8cbd30651c79", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -21,7 +21,7 @@ use parse::parser::{LifetimeAndTypesWithoutColons, Parser};\n use parse::token::{Token, EOF, Nonterminal};\n use parse::token;\n \n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::vec;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,"}, {"sha": "a8c9fe372269c508e8e53cb55d5995f32ce1f94d", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -18,7 +18,7 @@ use parse::token;\n use parse::lexer::TokenAndSpan;\n \n use std::cell::{Cell, RefCell};\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n \n ///an unzipping of `TokenTree`s\n struct TtFrame {"}, {"sha": "fed2034cd26ae6ae8e8603db88e901bb5a9714c3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -79,7 +79,7 @@ use opt_vec;\n use opt_vec::OptVec;\n \n use std::cell::Cell;\n-use std::hashmap::HashSet;\n+use collections::HashSet;\n use std::kinds::marker;\n use std::mem::replace;\n use std::vec;"}, {"sha": "44b366c9890760a750555440ab16d6ca879ebb5e", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -14,11 +14,11 @@\n \n use ast::Name;\n \n+use collections::HashMap;\n use std::cast;\n use std::cell::RefCell;\n use std::cmp::Equiv;\n use std::hash_old::Hash;\n-use std::hashmap::HashMap;\n use std::rc::Rc;\n \n pub struct Interner<T> {"}, {"sha": "db9f5d3da5cdc66ffd85a04af460011e8e77538d", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -23,6 +23,8 @@\n #[deny(non_camel_case_types)];\n #[allow(missing_doc)];\n \n+extern crate collections;\n+\n use std::os;\n use std::io;\n use terminfo::TermInfo;"}, {"sha": "de8a1dcc363c759538bfd1db4bab3e818438fbe8", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -10,7 +10,7 @@\n \n #[allow(missing_doc)];\n \n-use std::hashmap::HashMap;\n+use collections::HashMap;\n \n /// A parsed terminfo entry.\n pub struct TermInfo {"}, {"sha": "e9d71d1c2f7a384478f9471e4f3780e8af31a7aa", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -14,8 +14,8 @@\n \n \n use std::{vec, str};\n-use std::hashmap::HashMap;\n use std::io;\n+use collections::HashMap;\n use super::super::TermInfo;\n \n // These are the orders ncurses uses in its compiled format (as of 5.9). Not sure if portable."}, {"sha": "e4053e3bc3879110dd99de117c8d59bae0744b5c", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -519,6 +519,8 @@ impl rand::Rand for Uuid {\n \n #[cfg(test)]\n mod test {\n+    extern crate collections;\n+\n     use super::{Uuid, VariantMicrosoft, VariantNCS, VariantRFC4122,\n                 Version1Mac, Version2Dce, Version3Md5, Version4Random,\n                 Version5Sha1};\n@@ -800,7 +802,7 @@ mod test {\n \n     #[test]\n     fn test_iterbytes_impl_for_uuid() {\n-        use std::hashmap::HashSet;\n+        use self::collections::HashSet;\n         let mut set = HashSet::new();\n         let id1 = Uuid::new_v4();\n         let id2 = Uuid::new_v4();"}, {"sha": "1a287b5e625cf70f4cf0bf97e3d5b3780fb16a1a", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -13,9 +13,10 @@\n #[crate_type = \"lib\"];\n \n extern crate extra;\n+extern crate collections;\n \n use std::cell::RefCell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n \n pub type header_map = HashMap<~str, @RefCell<~[@~str]>>;\n "}, {"sha": "6f964d0824c909eb204b2edc58bc6f6999a02a7a", "filename": "src/test/auxiliary/issue-5521.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-5521.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -10,6 +10,8 @@\n \n #[feature(managed_boxes)];\n \n-use std::hashmap::HashMap;\n+extern crate collections;\n+\n+use collections::HashMap;\n \n pub type map = @HashMap<uint, uint>;"}, {"sha": "1830a888345ff0275ab8ad8f24d5a736dc1bc70d", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -11,11 +11,9 @@\n extern crate collections;\n extern crate time;\n \n-use collections::TreeMap;\n-use std::hashmap::{HashMap, HashSet};\n+use collections::{TrieMap, TreeMap, HashMap, HashSet};\n use std::os;\n use std::rand::{Rng, IsaacRng, SeedableRng};\n-use std::trie::TrieMap;\n use std::uint;\n use std::vec;\n "}, {"sha": "d1c311d2a7d52bc685ef3edbd68cbd5f18d45dbb", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -15,7 +15,7 @@ extern crate time;\n \n use collections::bitv::BitvSet;\n use collections::TreeSet;\n-use std::hashmap::HashSet;\n+use collections::HashSet;\n use std::os;\n use std::rand;\n use std::uint;\n@@ -177,7 +177,7 @@ fn main() {\n             let s: HashSet<~str> = HashSet::new();\n             s\n         });\n-        write_results(\"std::hashmap::HashSet\", &results);\n+        write_results(\"collections::HashSet\", &results);\n     }\n \n     {"}, {"sha": "7188e119a8d6320be8e87d9e4b06d5eaaaafa099", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -14,10 +14,11 @@\n // multi tasking k-nucleotide\n \n extern crate extra;\n+extern crate collections;\n \n use std::cmp::Ord;\n use std::comm;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::mem::replace;\n use std::option;\n use std::os;"}, {"sha": "20411723715ff641fd4deda8ca5ad27668d7b090", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -10,7 +10,8 @@\n \n //buggy.rs\n \n-use std::hashmap::HashMap;\n+extern crate collections;\n+use collections::HashMap;\n \n fn main() {\n     let mut buggy_map: HashMap<uint, &uint> = HashMap::new();"}, {"sha": "b47811714874588b30288fc88a933fdadb0be24a", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::hashmap::HashSet;\n+extern crate collections;\n+use collections::HashSet;\n \n struct Foo {\n   n: HashSet<int>,"}, {"sha": "bd10c6ad8c37e7d8f4e017d6ad2aee5d74d4f825", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::container::Map;\n-use std::hashmap::HashMap;\n+extern crate collections;\n+\n+use collections::HashMap;\n \n // Test that trait types printed in error msgs include the type arguments.\n "}, {"sha": "f9abb1566bb0f729d26fe0d87d4ed7d7f474226b", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -13,9 +13,11 @@\n \n #[feature(managed_boxes)];\n \n+extern crate collections;\n+\n fn main() {\n     let _count = @0u;\n-    let mut map = std::hashmap::HashMap::new();\n+    let mut map = collections::HashMap::new();\n     let mut arr = ~[];\n     for _i in range(0u, 10u) {\n         arr.push(@~\"key stuff\");"}, {"sha": "e2a06162bed4e197322c0824834d5cae2f626e9c", "filename": "src/test/run-pass/foreach-external-iterators-hashmap-break-restart.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::hashmap::HashMap;\n+extern crate collections;\n+\n+use collections::HashMap;\n \n // This is a fancy one: it uses an external iterator established\n // outside the loop, breaks, then _picks back up_ and continues"}, {"sha": "e6280b47b6e284b287b563c4614b5bcc285e9051", "filename": "src/test/run-pass/foreach-external-iterators-hashmap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::hashmap::HashMap;\n+extern crate collections;\n+\n+use collections::HashMap;\n \n pub fn main() {\n     let mut h = HashMap::new();"}, {"sha": "3f3687fd33375540def1b0dd07991b56136cd49c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -12,6 +12,8 @@\n \n #[feature(managed_boxes)];\n \n+extern crate collections;\n+\n /**\n    A somewhat reduced test case to expose some Valgrind issues.\n \n@@ -21,7 +23,7 @@\n pub fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n \n mod map_reduce {\n-    use std::hashmap::HashMap;\n+    use collections::HashMap;\n     use std::str;\n     use std::task;\n "}, {"sha": "2dbed23677f7ce709d43783abd03b2fafe655f77", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -10,7 +10,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::hashmap::HashMap;\n+extern crate collections;\n+\n+use collections::HashMap;\n \n pub fn main() {\n     let mut m = HashMap::new();"}, {"sha": "592232ca21d9772793b21d92133bd9ea8e524ae5", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -13,11 +13,12 @@\n // ignore-fast\n // aux-build:issue-2631-a.rs\n \n+extern crate collections;\n extern crate req;\n \n use req::request;\n use std::cell::RefCell;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n \n pub fn main() {\n   let v = ~[@~\"hi\"];"}, {"sha": "5e6ea5f6d44e4e77a54f73de322b448bbf7a0a7a", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -13,7 +13,9 @@\n // Minimized version of issue-2804.rs. Both check that callee IDs don't\n // clobber the previous node ID in a macro expr\n \n-use std::hashmap::HashMap;\n+extern crate collections;\n+\n+use collections::HashMap;\n \n fn add_interfaces(managed_ip: ~str, device: HashMap<~str, int>)  {\n      error!(\"{}, {:?}\", managed_ip, device.get(&~\"interfaces\"));"}, {"sha": "a1bed2668176947f81eb6144c1ff9d7ce92eb739", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -10,10 +10,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate collections;\n extern crate extra;\n \n use extra::json;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::option;\n \n enum object {"}, {"sha": "ee7f3aab47a60f4d0e89651b530502536abddd5e", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -10,7 +10,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::hashmap::HashMap;\n+extern crate collections;\n+\n+use collections::HashMap;\n \n pub fn main() {\n     let mut buggy_map: HashMap<uint, &uint> = HashMap::new();"}, {"sha": "829df5060c30e236478f0fc56820bb7d80a0ba99", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::hashmap::HashMap;\n+extern crate collections;\n+\n+use collections::HashMap;\n \n fn check_strs(actual: &str, expected: &str) -> bool {\n     if actual != expected {"}, {"sha": "3694421c69196cab2c531b1d992baf224bd22fcb", "filename": "src/test/run-pass/issue-6128.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6128.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::hashmap::HashMap;\n+extern crate collections;\n+\n+use collections::HashMap;\n \n trait Graph<Node, Edge> {\n     fn f(&self, Edge);"}, {"sha": "eadcdb67f14086f779f324458f83fa0d607fe3d7", "filename": "src/test/run-pass/issue-7660.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-7660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fissue-7660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7660.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -11,7 +11,9 @@\n // Regresion test for issue 7660\n // rvalue lifetime too short when equivalent `match` works\n \n-use std::hashmap::HashMap;\n+extern crate collections;\n+\n+use collections::HashMap;\n \n struct A(int, int);\n "}, {"sha": "6dafd81a018a2634b97bb7967e38eb0d0bf761be", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -17,9 +17,10 @@\n // - Arenas\n \n extern crate arena;\n+extern crate collections;\n \n use arena::Arena;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::cast;\n use std::libc;\n use std::mem;"}, {"sha": "4fd7980e7955deb9a9d33b0f3211b99b552a3bb8", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -8,14 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate collections;\n+\n use std::clone::{Clone, DeepClone};\n use std::cmp::{TotalEq, Ord, TotalOrd, Equiv};\n use std::cmp::Equal;\n use std::container::{Container, Map, MutableMap};\n use std::default::Default;\n use std::str::{Str, SendStr, Owned, Slice};\n use std::to_str::ToStr;\n-use std::hashmap::HashMap;\n+use collections::HashMap;\n use std::option::Some;\n \n pub fn main() {"}]}