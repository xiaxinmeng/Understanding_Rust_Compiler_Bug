{"sha": "4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZmZkY2YxNGFiZTBjNzlmOWQ3YTk3MDJiZTc3OTU4YmUxZjc1YjE=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-02-01T10:33:41Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-02-01T14:05:24Z"}, "message": "split HirDatabase api", "tree": {"sha": "3904cb714292f3e1abe5081e4e516eea1b2568fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3904cb714292f3e1abe5081e4e516eea1b2568fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "html_url": "https://github.com/rust-lang/rust/commit/4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12433a78871610edfccc82442846615872747e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/12433a78871610edfccc82442846615872747e06", "html_url": "https://github.com/rust-lang/rust/commit/12433a78871610edfccc82442846615872747e06"}], "stats": {"total": 253, "additions": 147, "deletions": 106}, "files": [{"sha": "c549e2126ef0897b2a4e3935be36d6de4fa8b0ac", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -12,7 +12,7 @@ use ra_syntax::{\n use crate::{\n     Name, AsName, Struct, Enum, EnumVariant, Crate,\n     HirDatabase, HirFileId, StructField, FieldSource,\n-    type_ref::TypeRef,\n+    type_ref::TypeRef, PersistentHirDatabase,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -33,7 +33,7 @@ impl AdtDef {\n }\n \n impl Struct {\n-    pub(crate) fn variant_data(&self, db: &impl HirDatabase) -> Arc<VariantData> {\n+    pub(crate) fn variant_data(&self, db: &impl PersistentHirDatabase) -> Arc<VariantData> {\n         db.struct_data((*self).into()).variant_data.clone()\n     }\n }\n@@ -52,7 +52,10 @@ impl StructData {\n         StructData { name, variant_data }\n     }\n \n-    pub(crate) fn struct_data_query(db: &impl HirDatabase, struct_: Struct) -> Arc<StructData> {\n+    pub(crate) fn struct_data_query(\n+        db: &impl PersistentHirDatabase,\n+        struct_: Struct,\n+    ) -> Arc<StructData> {\n         let (_, struct_def) = struct_.source(db);\n         Arc::new(StructData::new(&*struct_def))\n     }\n@@ -68,7 +71,7 @@ fn variants(enum_def: &ast::EnumDef) -> impl Iterator<Item = &ast::EnumVariant>\n impl EnumVariant {\n     pub(crate) fn source_impl(\n         &self,\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n     ) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n         let (file_id, enum_def) = self.parent.source(db);\n         let var = variants(&*enum_def)\n@@ -79,7 +82,7 @@ impl EnumVariant {\n             .to_owned();\n         (file_id, var)\n     }\n-    pub(crate) fn variant_data(&self, db: &impl HirDatabase) -> Arc<VariantData> {\n+    pub(crate) fn variant_data(&self, db: &impl PersistentHirDatabase) -> Arc<VariantData> {\n         db.enum_data(self.parent).variants[self.id]\n             .variant_data\n             .clone()\n@@ -93,7 +96,7 @@ pub struct EnumData {\n }\n \n impl EnumData {\n-    pub(crate) fn enum_data_query(db: &impl HirDatabase, e: Enum) -> Arc<EnumData> {\n+    pub(crate) fn enum_data_query(db: &impl PersistentHirDatabase, e: Enum) -> Arc<EnumData> {\n         let (_file_id, enum_def) = e.source(db);\n         let name = enum_def.name().map(|n| n.as_name());\n         let variants = variants(&*enum_def)\n@@ -191,7 +194,7 @@ impl VariantDef {\n             VariantDef::EnumVariant(it) => it.field(db, name),\n         }\n     }\n-    pub(crate) fn variant_data(self, db: &impl HirDatabase) -> Arc<VariantData> {\n+    pub(crate) fn variant_data(self, db: &impl PersistentHirDatabase) -> Arc<VariantData> {\n         match self {\n             VariantDef::Struct(it) => it.variant_data(db),\n             VariantDef::EnumVariant(it) => it.variant_data(db),\n@@ -200,7 +203,7 @@ impl VariantDef {\n }\n \n impl StructField {\n-    pub(crate) fn source_impl(&self, db: &impl HirDatabase) -> (HirFileId, FieldSource) {\n+    pub(crate) fn source_impl(&self, db: &impl PersistentHirDatabase) -> (HirFileId, FieldSource) {\n         let var_data = self.parent.variant_data(db);\n         let fields = var_data.fields().unwrap();\n         let ss;"}, {"sha": "71123a69832de065cd72aa75e13cbc2d3caa2eb3", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -8,7 +8,7 @@ use crate::{\n     Name, Path, PerNs, ScopesWithSyntaxMapping, Ty, HirFileId,\n     type_ref::TypeRef,\n     nameres::{ModuleScope, lower::ImportId},\n-    db::HirDatabase,\n+    HirDatabase, PersistentHirDatabase,\n     expr::BodySyntaxMapping,\n     ty::{InferenceResult},\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n@@ -37,10 +37,10 @@ impl Crate {\n     pub fn crate_id(&self) -> CrateId {\n         self.crate_id\n     }\n-    pub fn dependencies(&self, db: &impl HirDatabase) -> Vec<CrateDependency> {\n+    pub fn dependencies(&self, db: &impl PersistentHirDatabase) -> Vec<CrateDependency> {\n         self.dependencies_impl(db)\n     }\n-    pub fn root_module(&self, db: &impl HirDatabase) -> Option<Module> {\n+    pub fn root_module(&self, db: &impl PersistentHirDatabase) -> Option<Module> {\n         self.root_module_impl(db)\n     }\n }\n@@ -105,7 +105,7 @@ impl Module {\n     }\n \n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(&self, db: &impl HirDatabase) -> (FileId, ModuleSource) {\n+    pub fn definition_source(&self, db: &impl PersistentHirDatabase) -> (FileId, ModuleSource) {\n         self.definition_source_impl(db)\n     }\n \n@@ -140,7 +140,7 @@ impl Module {\n     /// Topmost parent of this module. Every module has a `crate_root`, but some\n     /// might be missing `krate`. This can happen if a module's file is not included\n     /// in the module tree of any target in Cargo.toml.\n-    pub fn crate_root(&self, db: &impl HirDatabase) -> Module {\n+    pub fn crate_root(&self, db: &impl PersistentHirDatabase) -> Module {\n         self.crate_root_impl(db)\n     }\n \n@@ -150,12 +150,12 @@ impl Module {\n     }\n \n     /// Iterates over all child modules.\n-    pub fn children(&self, db: &impl HirDatabase) -> impl Iterator<Item = Module> {\n+    pub fn children(&self, db: &impl PersistentHirDatabase) -> impl Iterator<Item = Module> {\n         self.children_impl(db)\n     }\n \n     /// Finds a parent module.\n-    pub fn parent(&self, db: &impl HirDatabase) -> Option<Module> {\n+    pub fn parent(&self, db: &impl PersistentHirDatabase) -> Option<Module> {\n         self.parent_impl(db)\n     }\n \n@@ -174,7 +174,7 @@ impl Module {\n         db.item_map(self.krate)[self.module_id].clone()\n     }\n \n-    pub fn resolve_path(&self, db: &impl HirDatabase, path: &Path) -> PerNs<ModuleDef> {\n+    pub fn resolve_path(&self, db: &impl PersistentHirDatabase, path: &Path) -> PerNs<ModuleDef> {\n         db.item_map(self.krate).resolve_path(db, *self, path)\n     }\n \n@@ -209,7 +209,7 @@ impl StructField {\n             .clone()\n     }\n \n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, FieldSource) {\n+    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, FieldSource) {\n         self.source_impl(db)\n     }\n \n@@ -237,7 +237,7 @@ pub struct Struct {\n }\n \n impl Struct {\n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n+    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n         self.id.source(db)\n     }\n \n@@ -275,7 +275,7 @@ impl Struct {\n             })\n     }\n \n-    pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n \n@@ -296,7 +296,7 @@ pub struct Enum {\n }\n \n impl Enum {\n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumDef>) {\n+    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::EnumDef>) {\n         self.id.source(db)\n     }\n \n@@ -316,15 +316,15 @@ impl Enum {\n             .collect()\n     }\n \n-    pub fn variant(&self, db: &impl HirDatabase, name: &Name) -> Option<EnumVariant> {\n+    pub fn variant(&self, db: &impl PersistentHirDatabase, name: &Name) -> Option<EnumVariant> {\n         db.enum_data(*self)\n             .variants\n             .iter()\n             .find(|(_id, data)| data.name.as_ref() == Some(name))\n             .map(|(id, _)| EnumVariant { parent: *self, id })\n     }\n \n-    pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n \n@@ -346,13 +346,16 @@ pub struct EnumVariant {\n }\n \n impl EnumVariant {\n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n+    pub fn source(\n+        &self,\n+        db: &impl PersistentHirDatabase,\n+    ) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n         self.source_impl(db)\n     }\n     pub fn module(&self, db: &impl HirDatabase) -> Module {\n         self.parent.module(db)\n     }\n-    pub fn parent_enum(&self, _db: &impl HirDatabase) -> Enum {\n+    pub fn parent_enum(&self, _db: &impl PersistentHirDatabase) -> Enum {\n         self.parent\n     }\n \n@@ -430,7 +433,7 @@ impl FnSignature {\n }\n \n impl Function {\n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n+    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n         self.id.source(db)\n     }\n \n@@ -463,7 +466,7 @@ impl Function {\n         db.infer(*self)\n     }\n \n-    pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n }\n@@ -480,7 +483,7 @@ pub struct Const {\n }\n \n impl Const {\n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::ConstDef>) {\n+    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::ConstDef>) {\n         self.id.source(db)\n     }\n }\n@@ -497,7 +500,7 @@ pub struct Static {\n }\n \n impl Static {\n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::StaticDef>) {\n+    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::StaticDef>) {\n         self.id.source(db)\n     }\n }\n@@ -514,11 +517,11 @@ pub struct Trait {\n }\n \n impl Trait {\n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::TraitDef>) {\n+    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::TraitDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n }\n@@ -535,11 +538,11 @@ pub struct Type {\n }\n \n impl Type {\n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::TypeDef>) {\n+    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::TypeDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n }"}, {"sha": "5b0b31b1d597775843e58ac25a9bcfc56ac90c74", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::ast::{self, NameOwner};\n use crate::{\n     HirDatabase, Name, AsName, Function, FnSignature,\n     type_ref::{TypeRef, Mutability},\n-    expr::Body,\n+    expr::Body, PersistentHirDatabase,\n     impl_block::ImplBlock,\n };\n \n@@ -22,7 +22,10 @@ impl Function {\n }\n \n impl FnSignature {\n-    pub(crate) fn fn_signature_query(db: &impl HirDatabase, func: Function) -> Arc<FnSignature> {\n+    pub(crate) fn fn_signature_query(\n+        db: &impl PersistentHirDatabase,\n+        func: Function,\n+    ) -> Arc<FnSignature> {\n         let (_, node) = func.source(db);\n         let name = node\n             .name()"}, {"sha": "1517434b82506590c41b7030925bf281720b8b59", "filename": "crates/ra_hir/src/code_model_impl/krate.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -1,10 +1,12 @@\n use crate::{\n-    Crate, CrateDependency, AsName, Module,\n-    db::HirDatabase,\n+    Crate, CrateDependency, AsName, Module, PersistentHirDatabase,\n };\n \n impl Crate {\n-    pub(crate) fn dependencies_impl(&self, db: &impl HirDatabase) -> Vec<CrateDependency> {\n+    pub(crate) fn dependencies_impl(\n+        &self,\n+        db: &impl PersistentHirDatabase,\n+    ) -> Vec<CrateDependency> {\n         let crate_graph = db.crate_graph();\n         crate_graph\n             .dependencies(self.crate_id)\n@@ -17,7 +19,7 @@ impl Crate {\n             })\n             .collect()\n     }\n-    pub(crate) fn root_module_impl(&self, db: &impl HirDatabase) -> Option<Module> {\n+    pub(crate) fn root_module_impl(&self, db: &impl PersistentHirDatabase) -> Option<Module> {\n         let module_tree = db.module_tree(*self);\n         let module_id = module_tree.modules().next()?;\n "}, {"sha": "f487b8532ddc1a1bd9b469b9e0fe0b74f53541bb", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     module_tree::ModuleId,\n     impl_block::ImplId,\n     nameres::{lower::ImportId},\n-    db::HirDatabase,\n+    HirDatabase, PersistentHirDatabase,\n };\n \n impl Module {\n@@ -24,7 +24,10 @@ impl Module {\n         Some(link.name(&module_tree).clone())\n     }\n \n-    pub(crate) fn definition_source_impl(&self, db: &impl HirDatabase) -> (FileId, ModuleSource) {\n+    pub(crate) fn definition_source_impl(\n+        &self,\n+        db: &impl PersistentHirDatabase,\n+    ) -> (FileId, ModuleSource) {\n         let module_tree = db.module_tree(self.krate);\n         let file_id = self.module_id.file_id(&module_tree);\n         let decl_id = self.module_id.decl_id(&module_tree);\n@@ -67,7 +70,7 @@ impl Module {\n         source_map.get(&source, impl_id)\n     }\n \n-    pub(crate) fn crate_root_impl(&self, db: &impl HirDatabase) -> Module {\n+    pub(crate) fn crate_root_impl(&self, db: &impl PersistentHirDatabase) -> Module {\n         let module_tree = db.module_tree(self.krate);\n         let module_id = self.module_id.crate_root(&module_tree);\n         self.with_module_id(module_id)\n@@ -81,7 +84,10 @@ impl Module {\n     }\n \n     /// Iterates over all child modules.\n-    pub(crate) fn children_impl(&self, db: &impl HirDatabase) -> impl Iterator<Item = Module> {\n+    pub(crate) fn children_impl(\n+        &self,\n+        db: &impl PersistentHirDatabase,\n+    ) -> impl Iterator<Item = Module> {\n         let module_tree = db.module_tree(self.krate);\n         let children = self\n             .module_id\n@@ -91,7 +97,7 @@ impl Module {\n         children.into_iter()\n     }\n \n-    pub(crate) fn parent_impl(&self, db: &impl HirDatabase) -> Option<Module> {\n+    pub(crate) fn parent_impl(&self, db: &impl PersistentHirDatabase) -> Option<Module> {\n         let module_tree = db.module_tree(self.krate);\n         let parent_id = self.module_id.parent(&module_tree)?;\n         Some(self.with_module_id(parent_id))"}, {"sha": "6b21fe744af0814c4460498c2d992ba601053e67", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -27,9 +27,6 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(crate::macros::expand_macro_invocation)]\n     fn expand_macro_invocation(&self, invoc: MacroCallId) -> Option<Arc<MacroExpansion>>;\n \n-    #[salsa::invoke(ExprScopes::expr_scopes_query)]\n-    fn expr_scopes(&self, func: Function) -> Arc<ExprScopes>;\n-\n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n     fn struct_data(&self, s: Struct) -> Arc<StructData>;\n \n@@ -39,6 +36,9 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(query_definitions::file_items)]\n     fn file_items(&self, file_id: HirFileId) -> Arc<SourceFileItems>;\n \n+    #[salsa::invoke(query_definitions::file_item)]\n+    fn file_item(&self, source_item_id: SourceItemId) -> TreeArc<SyntaxNode>;\n+\n     #[salsa::invoke(crate::module_tree::Submodule::submodules_query)]\n     fn submodules(\n         &self,\n@@ -61,20 +61,17 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(crate::module_tree::ModuleTree::module_tree_query)]\n     fn module_tree(&self, krate: Crate) -> Arc<ModuleTree>;\n \n-    #[salsa::invoke(crate::impl_block::impls_in_module_with_source_map_query)]\n-    fn impls_in_module_with_source_map(\n-        &self,\n-        module: Module,\n-    ) -> (Arc<ModuleImplBlocks>, Arc<ImplSourceMap>);\n-\n     #[salsa::invoke(crate::impl_block::impls_in_module)]\n     fn impls_in_module(&self, module: Module) -> Arc<ModuleImplBlocks>;\n \n     #[salsa::invoke(crate::impl_block::impls_in_module_source_map_query)]\n     fn impls_in_module_source_map(&self, module: Module) -> Arc<ImplSourceMap>;\n \n-    #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n-    fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;\n+    #[salsa::invoke(crate::impl_block::impls_in_module_with_source_map_query)]\n+    fn impls_in_module_with_source_map(\n+        &self,\n+        module: Module,\n+    ) -> (Arc<ModuleImplBlocks>, Arc<ImplSourceMap>);\n \n     #[salsa::invoke(crate::generics::GenericParams::generic_params_query)]\n     fn generic_params(&self, def: GenericDef) -> Arc<GenericParams>;\n@@ -85,11 +82,8 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n \n #[salsa::query_group(HirDatabaseStorage)]\n pub trait HirDatabase: PersistentHirDatabase {\n-    #[salsa::invoke(query_definitions::fn_scopes)]\n-    fn fn_scopes(&self, func: Function) -> Arc<FnScopes>;\n-\n-    #[salsa::invoke(query_definitions::file_item)]\n-    fn file_item(&self, source_item_id: SourceItemId) -> TreeArc<SyntaxNode>;\n+    #[salsa::invoke(ExprScopes::expr_scopes_query)]\n+    fn expr_scopes(&self, func: Function) -> Arc<ExprScopes>;\n \n     #[salsa::invoke(crate::ty::infer)]\n     fn infer(&self, func: Function) -> Arc<InferenceResult>;\n@@ -105,4 +99,7 @@ pub trait HirDatabase: PersistentHirDatabase {\n \n     #[salsa::invoke(crate::expr::body_syntax_mapping)]\n     fn body_syntax_mapping(&self, func: Function) -> Arc<crate::expr::BodySyntaxMapping>;\n+\n+    #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n+    fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;\n }"}, {"sha": "f4a95041848b6ca6924efde02e9b6db71a7fb0ec", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -10,8 +10,8 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Path, Name, HirDatabase, Function,\n-    name::AsName,\n+    Path, Name, Function,\n+    name::AsName, HirDatabase,\n     type_ref::{Mutability, TypeRef},\n };\n use crate::ty::primitive::{UintTy, UncertainIntTy, UncertainFloatTy};"}, {"sha": "b7971088d05d9d8f5c3148d8082d0e93803bc249", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -12,7 +12,7 @@ use ra_arena::{Arena, RawId, impl_arena_id};\n use crate::{\n     Name, AsName, Function,\n     expr::{PatId, ExprId, Pat, Expr, Body, Statement, BodySyntaxMapping},\n-    db::HirDatabase,\n+    HirDatabase,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]"}, {"sha": "b0bd735bda7a07ee03c2a83540bbdaaf5179eadc", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -7,7 +7,7 @@ use std::sync::Arc;\n \n use ra_syntax::ast::{self, NameOwner, TypeParamsOwner};\n \n-use crate::{db::HirDatabase, Name, AsName, Function, Struct, Enum, Trait, Type};\n+use crate::{db::PersistentHirDatabase, Name, AsName, Function, Struct, Enum, Trait, Type};\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n #[derive(Clone, PartialEq, Eq, Debug)]\n@@ -34,7 +34,7 @@ impl_froms!(GenericDef: Function, Struct, Enum, Trait, Type);\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         def: GenericDef,\n     ) -> Arc<GenericParams> {\n         let mut generics = GenericParams::default();"}, {"sha": "95678bf703a8fe10805767eeaac2a07e50dd844e", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -10,6 +10,7 @@ use ra_arena::{Arena, RawId, ArenaId, impl_arena_id};\n use crate::{\n     HirDatabase,\n     Module,\n+    PersistentHirDatabase,\n };\n \n #[derive(Debug, Default)]\n@@ -62,7 +63,7 @@ pub struct HirFileId(HirFileIdRepr);\n impl HirFileId {\n     /// For macro-expansion files, returns the file original source file the\n     /// expansionoriginated from.\n-    pub fn original_file(self, db: &impl HirDatabase) -> FileId {\n+    pub fn original_file(self, db: &impl PersistentHirDatabase) -> FileId {\n         match self.0 {\n             HirFileIdRepr::File(file_id) => file_id,\n             HirFileIdRepr::Macro(macro_call_id) => {\n@@ -86,7 +87,10 @@ impl HirFileId {\n         }\n     }\n \n-    pub(crate) fn hir_parse(db: &impl HirDatabase, file_id: HirFileId) -> TreeArc<SourceFile> {\n+    pub(crate) fn hir_parse(\n+        db: &impl PersistentHirDatabase,\n+        file_id: HirFileId,\n+    ) -> TreeArc<SourceFile> {\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => db.parse(file_id),\n             HirFileIdRepr::Macro(m) => {\n@@ -180,7 +184,7 @@ pub(crate) struct LocationCtx<DB> {\n     file_id: HirFileId,\n }\n \n-impl<'a, DB: HirDatabase> LocationCtx<&'a DB> {\n+impl<'a, DB: PersistentHirDatabase> LocationCtx<&'a DB> {\n     pub(crate) fn new(db: &'a DB, module: Module, file_id: HirFileId) -> LocationCtx<&'a DB> {\n         LocationCtx {\n             db,\n@@ -199,7 +203,7 @@ impl<'a, DB: HirDatabase> LocationCtx<&'a DB> {\n \n pub(crate) trait AstItemDef<N: AstNode>: ArenaId + Clone {\n     fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<N>, Self>;\n-    fn from_ast(ctx: LocationCtx<&impl HirDatabase>, ast: &N) -> Self {\n+    fn from_ast(ctx: LocationCtx<&impl PersistentHirDatabase>, ast: &N) -> Self {\n         let items = ctx.db.file_items(ctx.file_id);\n         let raw = SourceItemId {\n             file_id: ctx.file_id,\n@@ -213,7 +217,7 @@ pub(crate) trait AstItemDef<N: AstNode>: ArenaId + Clone {\n \n         Self::interner(ctx.db.as_ref()).loc2id(&loc)\n     }\n-    fn source(self, db: &impl HirDatabase) -> (HirFileId, TreeArc<N>) {\n+    fn source(self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<N>) {\n         let int = Self::interner(db.as_ref());\n         let loc = int.id2loc(self);\n         let syntax = db.file_item(loc.raw);"}, {"sha": "36d72b103b124a55ba1caa810a4c24a1be411cbe", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -9,7 +9,7 @@ ast::{self, AstNode}};\n use crate::{\n     Const, Type,\n     Function, HirFileId,\n-    db::HirDatabase,\n+    PersistentHirDatabase,\n     type_ref::TypeRef,\n     ids::LocationCtx,\n };\n@@ -91,7 +91,7 @@ pub struct ImplData {\n \n impl ImplData {\n     pub(crate) fn from_ast(\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         file_id: HirFileId,\n         module: Module,\n         node: &ast::ImplBlock,\n@@ -174,7 +174,12 @@ impl ModuleImplBlocks {\n         }\n     }\n \n-    fn collect(&mut self, db: &impl HirDatabase, module: Module, source_map: &mut ImplSourceMap) {\n+    fn collect(\n+        &mut self,\n+        db: &impl PersistentHirDatabase,\n+        module: Module,\n+        source_map: &mut ImplSourceMap,\n+    ) {\n         let (file_id, module_source) = module.definition_source(db);\n         let file_id: HirFileId = file_id.into();\n         let node = match &module_source {\n@@ -198,7 +203,7 @@ impl ModuleImplBlocks {\n }\n \n pub(crate) fn impls_in_module_with_source_map_query(\n-    db: &impl HirDatabase,\n+    db: &impl PersistentHirDatabase,\n     module: Module,\n ) -> (Arc<ModuleImplBlocks>, Arc<ImplSourceMap>) {\n     let mut source_map = ImplSourceMap::default();\n@@ -209,12 +214,15 @@ pub(crate) fn impls_in_module_with_source_map_query(\n     (Arc::new(result), Arc::new(source_map))\n }\n \n-pub(crate) fn impls_in_module(db: &impl HirDatabase, module: Module) -> Arc<ModuleImplBlocks> {\n+pub(crate) fn impls_in_module(\n+    db: &impl PersistentHirDatabase,\n+    module: Module,\n+) -> Arc<ModuleImplBlocks> {\n     db.impls_in_module_with_source_map(module).0\n }\n \n pub(crate) fn impls_in_module_source_map_query(\n-    db: &impl HirDatabase,\n+    db: &impl PersistentHirDatabase,\n     module: Module,\n ) -> Arc<ImplSourceMap> {\n     db.impls_in_module_with_source_map(module).1"}, {"sha": "905c53c7dd4bdfacdb5e14ba0e77bfba1fc57182", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -44,7 +44,7 @@ mod code_model_impl;\n mod marks;\n \n use crate::{\n-    db::HirDatabase,\n+    db::{HirDatabase, PersistentHirDatabase},\n     name::{AsName, KnownName},\n     ids::{SourceItemId, SourceFileItems},\n };"}, {"sha": "cb8a9312e07629798c50d6bdf9542d552b5214b7", "filename": "crates/ra_hir/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -14,7 +14,7 @@ use ra_syntax::{\n     ast::{self, NameOwner},\n };\n \n-use crate::{HirDatabase, MacroCallId};\n+use crate::{MacroCallId, PersistentHirDatabase};\n \n // Hard-coded defs for now :-(\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -157,7 +157,7 @@ impl MacroExpansion {\n }\n \n pub(crate) fn expand_macro_invocation(\n-    db: &impl HirDatabase,\n+    db: &impl PersistentHirDatabase,\n     invoc: MacroCallId,\n ) -> Option<Arc<MacroExpansion>> {\n     let loc = invoc.loc(db);"}, {"sha": "17bdd48c6fbe760145876a256125c70f3c97a881", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -11,7 +11,11 @@ use crate::{db, HirInterner};\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n-#[salsa::database(ra_db::SourceDatabaseStorage, db::HirDatabaseStorage)]\n+#[salsa::database(\n+    ra_db::SourceDatabaseStorage,\n+    db::HirDatabaseStorage,\n+    db::PersistentHirDatabaseStorage\n+)]\n #[derive(Debug)]\n pub(crate) struct MockDatabase {\n     events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,"}, {"sha": "a1aa3d8ce8b0c0b41b23a84acd79c3c913aa17b9", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -13,13 +13,14 @@ use test_utils::tested_by;\n \n use crate::{\n     Name, AsName, HirDatabase, SourceItemId, HirFileId, Problem, SourceFileItems, ModuleSource,\n+    PersistentHirDatabase,\n     Crate,\n     ids::SourceFileItemId,\n };\n \n impl ModuleSource {\n     pub(crate) fn new(\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         file_id: HirFileId,\n         decl_id: Option<SourceFileItemId>,\n     ) -> ModuleSource {\n@@ -47,7 +48,7 @@ pub struct Submodule {\n \n impl Submodule {\n     pub(crate) fn submodules_query(\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         file_id: HirFileId,\n         decl_id: Option<SourceFileItemId>,\n     ) -> Arc<Vec<Submodule>> {\n@@ -133,7 +134,10 @@ struct LinkData {\n }\n \n impl ModuleTree {\n-    pub(crate) fn module_tree_query(db: &impl HirDatabase, krate: Crate) -> Arc<ModuleTree> {\n+    pub(crate) fn module_tree_query(\n+        db: &impl PersistentHirDatabase,\n+        krate: Crate,\n+    ) -> Arc<ModuleTree> {\n         db.check_canceled();\n         let mut res = ModuleTree::default();\n         res.init_crate(db, krate);\n@@ -156,7 +160,7 @@ impl ModuleTree {\n         Some(res)\n     }\n \n-    fn init_crate(&mut self, db: &impl HirDatabase, krate: Crate) {\n+    fn init_crate(&mut self, db: &impl PersistentHirDatabase, krate: Crate) {\n         let crate_graph = db.crate_graph();\n         let file_id = crate_graph.crate_root(krate.crate_id);\n         let source_root_id = db.file_source_root(file_id);\n@@ -167,7 +171,7 @@ impl ModuleTree {\n \n     fn init_subtree(\n         &mut self,\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         source_root: &SourceRoot,\n         parent: Option<LinkId>,\n         file_id: HirFileId,\n@@ -287,14 +291,18 @@ impl LinkId {\n     pub(crate) fn name(self, tree: &ModuleTree) -> &Name {\n         &tree.links[self].name\n     }\n-    pub(crate) fn source(self, tree: &ModuleTree, db: &impl HirDatabase) -> TreeArc<ast::Module> {\n+    pub(crate) fn source(\n+        self,\n+        tree: &ModuleTree,\n+        db: &impl PersistentHirDatabase,\n+    ) -> TreeArc<ast::Module> {\n         let syntax_node = db.file_item(tree.links[self].source);\n         ast::Module::cast(&syntax_node).unwrap().to_owned()\n     }\n }\n \n fn resolve_submodule(\n-    db: &impl HirDatabase,\n+    db: &impl PersistentHirDatabase,\n     file_id: HirFileId,\n     name: &Name,\n     is_root: bool,"}, {"sha": "f8627acbe063ccf661580569172a23be52e659c2", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -24,9 +24,8 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n     Module, ModuleDef,\n-    Path, PathKind,\n-    HirDatabase, Crate,\n-    Name,\n+    Path, PathKind, Crate,\n+    Name, PersistentHirDatabase,\n     module_tree::{ModuleId, ModuleTree},\n     nameres::lower::{ImportId, LoweredModule, ImportData},\n };\n@@ -166,7 +165,7 @@ struct Resolver<'a, DB> {\n \n impl<'a, DB> Resolver<'a, DB>\n where\n-    DB: HirDatabase,\n+    DB: PersistentHirDatabase,\n {\n     fn new(\n         db: &'a DB,\n@@ -330,7 +329,7 @@ enum ReachedFixedPoint {\n }\n \n impl ItemMap {\n-    pub(crate) fn item_map_query(db: &impl HirDatabase, krate: Crate) -> Arc<ItemMap> {\n+    pub(crate) fn item_map_query(db: &impl PersistentHirDatabase, krate: Crate) -> Arc<ItemMap> {\n         let start = time::Instant::now();\n         let module_tree = db.module_tree(krate);\n         let input = module_tree\n@@ -352,7 +351,7 @@ impl ItemMap {\n \n     pub(crate) fn resolve_path(\n         &self,\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         original_module: Module,\n         path: &Path,\n     ) -> PerNs<ModuleDef> {\n@@ -363,7 +362,7 @@ impl ItemMap {\n     // the result.\n     fn resolve_path_fp(\n         &self,\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         original_module: Module,\n         path: &Path,\n     ) -> (PerNs<ModuleDef>, ReachedFixedPoint) {"}, {"sha": "9a45fa61c4bb7e595fdaec7c30cd6fea4020ad73", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -8,10 +8,10 @@ use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    SourceItemId, Path, ModuleSource, HirDatabase, Name,\n+    SourceItemId, Path, ModuleSource, Name,\n     HirFileId, MacroCallLoc, AsName, PerNs, Function,\n     ModuleDef, Module, Struct, Enum, Const, Static, Trait, Type,\n-    ids::LocationCtx,\n+    ids::LocationCtx, PersistentHirDatabase,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -58,21 +58,21 @@ impl ImportSourceMap {\n \n impl LoweredModule {\n     pub(crate) fn lower_module_module_query(\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         module: Module,\n     ) -> Arc<LoweredModule> {\n         db.lower_module(module).0\n     }\n \n     pub(crate) fn lower_module_source_map_query(\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         module: Module,\n     ) -> Arc<ImportSourceMap> {\n         db.lower_module(module).1\n     }\n \n     pub(crate) fn lower_module_query(\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         module: Module,\n     ) -> (Arc<LoweredModule>, Arc<ImportSourceMap>) {\n         let (file_id, source) = module.definition_source(db);\n@@ -105,7 +105,7 @@ impl LoweredModule {\n     fn fill(\n         &mut self,\n         source_map: &mut ImportSourceMap,\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         module: Module,\n         file_id: HirFileId,\n         items: &mut Iterator<Item = ast::ItemOrMacro>,\n@@ -137,7 +137,7 @@ impl LoweredModule {\n     fn add_def_id(\n         &mut self,\n         source_map: &mut ImportSourceMap,\n-        db: &impl HirDatabase,\n+        db: &impl PersistentHirDatabase,\n         module: Module,\n         file_id: HirFileId,\n         item: &ast::ModuleItem,"}, {"sha": "1ce7bd146d2948541399f8b73724363da5053dfd", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -6,7 +6,7 @@ use test_utils::{assert_eq_text, covers};\n \n use crate::{\n     ItemMap, Resolution,\n-    db::HirDatabase,\n+    PersistentHirDatabase,\n     mock::MockDatabase,\n     module_tree::ModuleId,\n };"}, {"sha": "b4d8da1e6511aa6192e262c71d76b3238893bd9d", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -6,17 +6,20 @@ use ra_syntax::{\n \n use crate::{\n     SourceFileItems, SourceItemId, HirFileId,\n-    db::HirDatabase,\n+    PersistentHirDatabase,\n };\n \n-pub(super) fn file_items(db: &impl HirDatabase, file_id: HirFileId) -> Arc<SourceFileItems> {\n+pub(super) fn file_items(\n+    db: &impl PersistentHirDatabase,\n+    file_id: HirFileId,\n+) -> Arc<SourceFileItems> {\n     let source_file = db.hir_parse(file_id);\n     let res = SourceFileItems::new(file_id, &source_file);\n     Arc::new(res)\n }\n \n pub(super) fn file_item(\n-    db: &impl HirDatabase,\n+    db: &impl PersistentHirDatabase,\n     source_item_id: SourceItemId,\n ) -> TreeArc<SyntaxNode> {\n     let source_file = db.hir_parse(source_item_id.file_id);"}, {"sha": "d3e31981a8d1f01541713f3fdfc36f1c6909fafd", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -35,7 +35,7 @@ use test_utils::tested_by;\n use crate::{\n     Module, Function, Struct, StructField, Enum, EnumVariant, Path, Name, ImplBlock,\n     FnSignature, ExprScopes, ModuleDef, AdtDef,\n-    db::HirDatabase,\n+    HirDatabase,\n     type_ref::{TypeRef, Mutability},\n     name::KnownName,\n     expr::{Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat},"}, {"sha": "3a9089c22b956eddf5c149b73d1af3f9fa84da28", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dffdcf14abe0c79f9d7a9702be77958be1f75b1/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=4dffdcf14abe0c79f9d7a9702be77958be1f75b1", "patch": "@@ -14,7 +14,8 @@ use crate::{LineIndex, symbol_index::{self, SymbolsDatabase}};\n     ra_db::SourceDatabaseStorage,\n     LineIndexDatabaseStorage,\n     symbol_index::SymbolsDatabaseStorage,\n-    hir::db::HirDatabaseStorage\n+    hir::db::HirDatabaseStorage,\n+    hir::db::PersistentHirDatabaseStorage\n )]\n #[derive(Debug)]\n pub(crate) struct RootDatabase {"}]}