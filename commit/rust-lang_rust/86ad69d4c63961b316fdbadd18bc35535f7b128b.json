{"sha": "86ad69d4c63961b316fdbadd18bc35535f7b128b", "node_id": "C_kwDOAAsO6NoAKDg2YWQ2OWQ0YzYzOTYxYjMxNmZkYmFkZDE4YmMzNTUzNWY3YjEyOGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-12T22:58:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-12T22:58:14Z"}, "message": "Auto merge of #106786 - JohnTitor:rollup-8f4vk8m, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #105795 (Stabilize `abi_efiapi` feature)\n - #106446 ([LSDA] Take ttype_index into account when taking unwind action)\n - #106675 (Mark ZST as FFI-safe if all its fields are PhantomData)\n - #106740 (Adding a hint on iterator type errors)\n - #106741 (Fix reexport of `doc(hidden)` item)\n - #106759 (Revert \"Make nested RPITIT inherit the parent opaque's generics.\")\n - #106772 (Re-add mw to review rotation)\n - #106778 (Exclude formatting commit from blame)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6ffb010da912a44318adf90b18dbfc3b430c76f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ffb010da912a44318adf90b18dbfc3b430c76f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86ad69d4c63961b316fdbadd18bc35535f7b128b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86ad69d4c63961b316fdbadd18bc35535f7b128b", "html_url": "https://github.com/rust-lang/rust/commit/86ad69d4c63961b316fdbadd18bc35535f7b128b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86ad69d4c63961b316fdbadd18bc35535f7b128b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61a415be590113b4935464ef0aaf3b4e7713a077", "url": "https://api.github.com/repos/rust-lang/rust/commits/61a415be590113b4935464ef0aaf3b4e7713a077", "html_url": "https://github.com/rust-lang/rust/commit/61a415be590113b4935464ef0aaf3b4e7713a077"}, {"sha": "8dc8e3ce3681c30b58c81fedcd5953b8e2a20391", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc8e3ce3681c30b58c81fedcd5953b8e2a20391", "html_url": "https://github.com/rust-lang/rust/commit/8dc8e3ce3681c30b58c81fedcd5953b8e2a20391"}], "stats": {"total": 354, "additions": 177, "deletions": 177}, "files": [{"sha": "71adf9b009110cd6687199e289b482e0bc8a6593", "filename": ".git-blame-ignore-revs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/.git-blame-ignore-revs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/.git-blame-ignore-revs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.git-blame-ignore-revs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -6,3 +6,5 @@ a06baa56b95674fc626b3c3fd680d6a65357fe60\n 971c549ca334b7b7406e61e958efcca9c4152822\n # refactor infcx building\n 283abbf0e7d20176f76006825b5c52e9a4234e4c\n+# format libstd/sys\n+c34fbfaad38cf5829ef5cfe780dc9d58480adeaa"}, {"sha": "aab4b604fad4204ef349334682bbea79686d5392", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -48,6 +48,8 @@ declare_features! (\n \n     /// Allows `#[target_feature(...)]` on aarch64 platforms\n     (accepted, aarch64_target_feature, \"1.61.0\", Some(44839), None),\n+    /// Allows using the `efiapi` ABI.\n+    (accepted, abi_efiapi, \"CURRENT_RUSTC_VERSION\", Some(65815), None),\n     /// Allows the sysV64 ABI to be specified on all platforms\n     /// instead of just the platforms on which it is the C ABI.\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),"}, {"sha": "531ddcc1fa65b495d8c5cdf2141883b76dbe3a3c", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -281,8 +281,6 @@ declare_features! (\n     (active, abi_avr_interrupt, \"1.45.0\", Some(69664), None),\n     /// Allows `extern \"C-cmse-nonsecure-call\" fn()`.\n     (active, abi_c_cmse_nonsecure_call, \"1.51.0\", Some(81391), None),\n-    /// Allows using the `efiapi` ABI.\n-    (active, abi_efiapi, \"1.40.0\", Some(65815), None),\n     /// Allows `extern \"msp430-interrupt\" fn()`.\n     (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n     /// Allows `extern \"ptx-*\" fn()`."}, {"sha": "9a5f447c260f54d8a835ac20fe791f244eb1624e", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -4,6 +4,7 @@ use hir::{\n     GenericParamKind, HirId, Node,\n };\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint;\n@@ -142,7 +143,20 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             Some(tcx.typeck_root_def_id(def_id))\n         }\n         Node::Item(item) => match item.kind {\n-            ItemKind::OpaqueTy(hir::OpaqueTy { .. }) => {\n+            ItemKind::OpaqueTy(hir::OpaqueTy {\n+                origin:\n+                    hir::OpaqueTyOrigin::FnReturn(fn_def_id) | hir::OpaqueTyOrigin::AsyncFn(fn_def_id),\n+                in_trait,\n+                ..\n+            }) => {\n+                if in_trait {\n+                    assert!(matches!(tcx.def_kind(fn_def_id), DefKind::AssocFn))\n+                } else {\n+                    assert!(matches!(tcx.def_kind(fn_def_id), DefKind::AssocFn | DefKind::Fn))\n+                }\n+                Some(fn_def_id.to_def_id())\n+            }\n+            ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n                 let parent_id = tcx.hir().get_parent_item(hir_id);\n                 assert_ne!(parent_id, hir::CRATE_OWNER_ID);\n                 debug!(\"generics_of: parent of opaque ty {:?} is {:?}\", def_id, parent_id);"}, {"sha": "8bceae08a03878ce25b781645921c5ea97d4a956", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -878,39 +878,39 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     ) -> FfiResult<'tcx> {\n         use FfiResult::*;\n \n-        if def.repr().transparent() {\n+        let transparent_safety = def.repr().transparent().then(|| {\n             // Can assume that at most one field is not a ZST, so only check\n             // that field's type for FFI-safety.\n             if let Some(field) = transparent_newtype_field(self.cx.tcx, variant) {\n-                self.check_field_type_for_ffi(cache, field, substs)\n+                return self.check_field_type_for_ffi(cache, field, substs);\n             } else {\n                 // All fields are ZSTs; this means that the type should behave\n-                // like (), which is FFI-unsafe\n+                // like (), which is FFI-unsafe... except if all fields are PhantomData,\n+                // which is tested for below\n                 FfiUnsafe { ty, reason: fluent::lint_improper_ctypes_struct_zst, help: None }\n             }\n-        } else {\n-            // We can't completely trust repr(C) markings; make sure the fields are\n-            // actually safe.\n-            let mut all_phantom = !variant.fields.is_empty();\n-            for field in &variant.fields {\n-                match self.check_field_type_for_ffi(cache, &field, substs) {\n-                    FfiSafe => {\n-                        all_phantom = false;\n-                    }\n-                    FfiPhantom(..) if def.is_enum() => {\n-                        return FfiUnsafe {\n-                            ty,\n-                            reason: fluent::lint_improper_ctypes_enum_phantomdata,\n-                            help: None,\n-                        };\n-                    }\n-                    FfiPhantom(..) => {}\n-                    r => return r,\n+        });\n+        // We can't completely trust repr(C) markings; make sure the fields are\n+        // actually safe.\n+        let mut all_phantom = !variant.fields.is_empty();\n+        for field in &variant.fields {\n+            match self.check_field_type_for_ffi(cache, &field, substs) {\n+                FfiSafe => {\n+                    all_phantom = false;\n                 }\n+                FfiPhantom(..) if !def.repr().transparent() && def.is_enum() => {\n+                    return FfiUnsafe {\n+                        ty,\n+                        reason: fluent::lint_improper_ctypes_enum_phantomdata,\n+                        help: None,\n+                    };\n+                }\n+                FfiPhantom(..) => {}\n+                r => return transparent_safety.unwrap_or(r),\n             }\n-\n-            if all_phantom { FfiPhantom(ty) } else { FfiSafe }\n         }\n+\n+        if all_phantom { FfiPhantom(ty) } else { transparent_safety.unwrap_or(FfiSafe) }\n     }\n \n     /// Checks if the given type is \"ffi-safe\" (has a stable, well-defined"}, {"sha": "d4f7ed31b895c8b8f05b7e6ba52577bb1bf51380", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -149,7 +149,7 @@ pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n     match name {\n         // Stable\n         \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n-        | \"system\" => Ok(()),\n+        | \"system\" | \"efiapi\" => Ok(()),\n         \"rust-intrinsic\" => Err(AbiDisabled::Unstable {\n             feature: sym::intrinsics,\n             explain: \"intrinsics are subject to change\",\n@@ -198,10 +198,6 @@ pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n             feature: sym::abi_avr_interrupt,\n             explain: \"avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\",\n         }),\n-        \"efiapi\" => Err(AbiDisabled::Unstable {\n-            feature: sym::abi_efiapi,\n-            explain: \"efiapi ABI is experimental and subject to change\",\n-        }),\n         \"C-cmse-nonsecure-call\" => Err(AbiDisabled::Unstable {\n             feature: sym::abi_c_cmse_nonsecure_call,\n             explain: \"C-cmse-nonsecure-call ABI is experimental and subject to change\","}, {"sha": "a4a665d48d58cfa15cade9488137e37e2d0d248c", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -58,6 +58,11 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n         note = \"if you want to iterate between `start` until a value `end`, use the exclusive range \\\n               syntax `start..end` or the inclusive range syntax `start..=end`\"\n     ),\n+    on(\n+        _Self = \"{float}\",\n+        note = \"if you want to iterate between `start` until a value `end`, use the exclusive range \\\n+              syntax `start..end` or the inclusive range syntax `start..=end`\"\n+    ),\n     label = \"`{Self}` is not an iterator\",\n     message = \"`{Self}` is not an iterator\"\n )]"}, {"sha": "87585a8fcd0d72868e78631742e963783d0d7750", "filename": "library/std/src/personality/dwarf/eh.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -84,7 +84,7 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>) -> Result\n             let cs_start = read_encoded_pointer(&mut reader, context, call_site_encoding)?;\n             let cs_len = read_encoded_pointer(&mut reader, context, call_site_encoding)?;\n             let cs_lpad = read_encoded_pointer(&mut reader, context, call_site_encoding)?;\n-            let cs_action = reader.read_uleb128();\n+            let cs_action_entry = reader.read_uleb128();\n             // Callsite table is sorted by cs_start, so if we've passed the ip, we\n             // may stop searching.\n             if ip < func_start + cs_start {\n@@ -95,7 +95,7 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>) -> Result\n                     return Ok(EHAction::None);\n                 } else {\n                     let lpad = lpad_base + cs_lpad;\n-                    return Ok(interpret_cs_action(cs_action, lpad));\n+                    return Ok(interpret_cs_action(action_table as *mut u8, cs_action_entry, lpad));\n                 }\n             }\n         }\n@@ -113,26 +113,39 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>) -> Result\n         let mut idx = ip;\n         loop {\n             let cs_lpad = reader.read_uleb128();\n-            let cs_action = reader.read_uleb128();\n+            let cs_action_entry = reader.read_uleb128();\n             idx -= 1;\n             if idx == 0 {\n                 // Can never have null landing pad for sjlj -- that would have\n                 // been indicated by a -1 call site index.\n                 let lpad = (cs_lpad + 1) as usize;\n-                return Ok(interpret_cs_action(cs_action, lpad));\n+                return Ok(interpret_cs_action(action_table as *mut u8, cs_action_entry, lpad));\n             }\n         }\n     }\n }\n \n-fn interpret_cs_action(cs_action: u64, lpad: usize) -> EHAction {\n-    if cs_action == 0 {\n-        // If cs_action is 0 then this is a cleanup (Drop::drop). We run these\n+unsafe fn interpret_cs_action(\n+    action_table: *mut u8,\n+    cs_action_entry: u64,\n+    lpad: usize,\n+) -> EHAction {\n+    if cs_action_entry == 0 {\n+        // If cs_action_entry is 0 then this is a cleanup (Drop::drop). We run these\n         // for both Rust panics and foreign exceptions.\n         EHAction::Cleanup(lpad)\n     } else {\n-        // Stop unwinding Rust panics at catch_unwind.\n-        EHAction::Catch(lpad)\n+        // If lpad != 0 and cs_action_entry != 0, we have to check ttype_index.\n+        // If ttype_index == 0 under the condition, we take cleanup action.\n+        let action_record = (action_table as *mut u8).offset(cs_action_entry as isize - 1);\n+        let mut action_reader = DwarfReader::new(action_record);\n+        let ttype_index = action_reader.read_sleb128();\n+        if ttype_index == 0 {\n+            EHAction::Cleanup(lpad)\n+        } else {\n+            // Stop unwinding Rust panics at catch_unwind.\n+            EHAction::Catch(lpad)\n+        }\n     }\n }\n "}, {"sha": "b492da88474ee297d63fa6fbafc08fbd9c1f8ae5", "filename": "src/doc/unstable-book/src/language-features/abi-efiapi.md", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/61a415be590113b4935464ef0aaf3b4e7713a077/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md", "raw_url": "https://github.com/rust-lang/rust/raw/61a415be590113b4935464ef0aaf3b4e7713a077/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md?ref=61a415be590113b4935464ef0aaf3b4e7713a077", "patch": "@@ -1,23 +0,0 @@\n-# `abi_efiapi`\n-\n-The tracking issue for this feature is: [#65815]\n-\n-[#65815]: https://github.com/rust-lang/rust/issues/65815\n-\n-------------------------\n-\n-The `efiapi` calling convention can be used for defining a function with\n-an ABI compatible with the UEFI Interfaces as defined in the [UEFI\n-Specification].\n-\n-Example:\n-\n-```rust,ignore (not-all-targets-support-uefi)\n-#![feature(abi_efiapi)]\n-\n-extern \"efiapi\" { fn f1(); }\n-\n-extern \"efiapi\" fn f2() { todo!() }\n-```\n-\n-[UEFI Specification]: https://uefi.org/specs/UEFI/2.10/"}, {"sha": "4c992e94833d6f4f6a5906bdd24838f5cb61f3fc", "filename": "src/librustdoc/passes/strip_priv_imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -12,5 +12,6 @@ pub(crate) const STRIP_PRIV_IMPORTS: Pass = Pass {\n };\n \n pub(crate) fn strip_priv_imports(krate: clean::Crate, cx: &mut DocContext<'_>) -> clean::Crate {\n-    ImportStripper { tcx: cx.tcx }.fold_crate(krate)\n+    let is_json_output = cx.output_format.is_json() && !cx.show_coverage;\n+    ImportStripper { tcx: cx.tcx, is_json_output }.fold_crate(krate)\n }"}, {"sha": "bb6dccb7c949939bf3e36ef98b2264a1807692fe", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -28,7 +28,8 @@ pub(crate) fn strip_private(mut krate: clean::Crate, cx: &mut DocContext<'_>) ->\n             is_json_output,\n             tcx: cx.tcx,\n         };\n-        krate = ImportStripper { tcx: cx.tcx }.fold_crate(stripper.fold_crate(krate));\n+        krate =\n+            ImportStripper { tcx: cx.tcx, is_json_output }.fold_crate(stripper.fold_crate(krate));\n     }\n \n     // strip all impls referencing private items"}, {"sha": "f5501b3d5238b82c1ef80326f4a85061e0ddd0da", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -243,12 +243,25 @@ impl<'a> DocFolder for ImplStripper<'a, '_> {\n /// This stripper discards all private import statements (`use`, `extern crate`)\n pub(crate) struct ImportStripper<'tcx> {\n     pub(crate) tcx: TyCtxt<'tcx>,\n+    pub(crate) is_json_output: bool,\n+}\n+\n+impl<'tcx> ImportStripper<'tcx> {\n+    fn import_should_be_hidden(&self, i: &Item, imp: &clean::Import) -> bool {\n+        if self.is_json_output {\n+            // FIXME: This should be handled the same way as for HTML output.\n+            imp.imported_item_is_doc_hidden(self.tcx)\n+        } else {\n+            i.attrs.lists(sym::doc).has_word(sym::hidden)\n+        }\n+    }\n }\n \n impl<'tcx> DocFolder for ImportStripper<'tcx> {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         match *i.kind {\n-            clean::ImportItem(imp) if imp.imported_item_is_doc_hidden(self.tcx) => None,\n+            clean::ImportItem(imp) if self.import_should_be_hidden(&i, &imp) => None,\n+            clean::ImportItem(_) if i.attrs.lists(sym::doc).has_word(sym::hidden) => None,\n             clean::ExternCrateItem { .. } | clean::ImportItem(..)\n                 if i.visibility(self.tcx) != Some(Visibility::Public) =>\n             {"}, {"sha": "9502ebf59af72779b8597b55c9e964642c28211e", "filename": "tests/codegen/abi-efiapi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-efiapi.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -14,7 +14,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(no_core, lang_items, abi_efiapi)]\n+#![feature(no_core, lang_items)]\n #![no_core]\n \n #[lang=\"sized\"]"}, {"sha": "3ea5fde72f7117c47a78d633dfd6a8b4f372c5fc", "filename": "tests/rustdoc/reexport-doc-hidden.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Frustdoc%2Freexport-doc-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Frustdoc%2Freexport-doc-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexport-doc-hidden.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -0,0 +1,26 @@\n+// Part of <https://github.com/rust-lang/rust/issues/59368>.\n+// This test ensures that reexporting a `doc(hidden)` item will\n+// still show the reexport.\n+\n+#![crate_name = \"foo\"]\n+\n+#[doc(hidden)]\n+pub type Type = u32;\n+\n+// @has 'foo/index.html'\n+// @has - '//*[@id=\"reexport.Type2\"]/code' 'pub use crate::Type as Type2;'\n+pub use crate::Type as Type2;\n+\n+// @count - '//*[@id=\"reexport.Type3\"]' 0\n+#[doc(hidden)]\n+pub use crate::Type as Type3;\n+\n+#[macro_export]\n+#[doc(hidden)]\n+macro_rules! foo {\n+    () => {};\n+}\n+\n+// This is a bug: https://github.com/rust-lang/rust/issues/59368\n+// @!has - '//*[@id=\"reexport.Macro\"]/code' 'pub use crate::foo as Macro;'\n+pub use crate::foo as Macro;"}, {"sha": "41d72ebb4d4c50ff5140ad316eca06128dd1d276", "filename": "tests/ui/async-await/in-trait/nested-rpit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fasync-await%2Fin-trait%2Fnested-rpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fasync-await%2Fin-trait%2Fnested-rpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fnested-rpit.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -1,5 +1,7 @@\n-// check-pass\n // edition: 2021\n+// known-bug: #105197\n+// failure-status:101\n+// dont-check-compiler-stderr\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "fce6210b2f436b281506da33122b0cae032a4248", "filename": "tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(abi_efiapi)]\n-\n fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n     //~^ ERROR: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n     //~^^ ERROR: using calling conventions other than `C` or `cdecl` for varargs functions is unstable"}, {"sha": "5b97b396fb1204917b7a649b824438d60b3521d1", "filename": "tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:3:14\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:1:14\n    |\n LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,13 +8,13 @@ LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n    = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n \n error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:3:14\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:1:14\n    |\n LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:8:12\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:6:12\n    |\n LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,13 +23,13 @@ LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n    = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n \n error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:8:12\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:6:12\n    |\n LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:13:11\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:11:11\n    |\n LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -38,7 +38,7 @@ LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n    = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n \n error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:13:11\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:11:11\n    |\n LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention"}, {"sha": "c34b7e55f6ae1bdf670817dfe64c53fe191f3296", "filename": "tests/ui/c-variadic/variadic-ffi-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -1,6 +1,5 @@\n // ignore-arm stdcall isn't supported\n #![feature(extended_varargs_abi_support)]\n-#![feature(abi_efiapi)]\n \n fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n     //~^ ERROR: C-variadic function must have a compatible calling convention,"}, {"sha": "e21001ecaf8b34de2108481e8d844f07f065e904", "filename": "tests/ui/c-variadic/variadic-ffi-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -1,5 +1,5 @@\n error[E0045]: C-variadic function must have a compatible calling convention, like `C`, `cdecl`, `win64`, `sysv64` or `efiapi`\n-  --> $DIR/variadic-ffi-2.rs:5:11\n+  --> $DIR/variadic-ffi-2.rs:4:11\n    |\n LL | fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention"}, {"sha": "0c0d736acd0484a34b2ffac4893254fdb0cccf99", "filename": "tests/ui/feature-gates/feature-gate-abi-efiapi.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/61a415be590113b4935464ef0aaf3b4e7713a077/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a415be590113b4935464ef0aaf3b4e7713a077/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.rs?ref=61a415be590113b4935464ef0aaf3b4e7713a077", "patch": "@@ -1,33 +0,0 @@\n-// needs-llvm-components: x86\n-// compile-flags: --target=x86_64-unknown-linux-gnu --crate-type=rlib\n-#![no_core]\n-#![feature(no_core, lang_items)]\n-#[lang=\"sized\"]\n-trait Sized { }\n-\n-// Functions\n-extern \"efiapi\" fn f1() {} //~ ERROR efiapi ABI is experimental\n-\n-// Methods in trait defintion\n-trait Tr {\n-    extern \"efiapi\" fn f2(); //~ ERROR efiapi ABI is experimental\n-    extern \"efiapi\" fn f3() {} //~ ERROR efiapi ABI is experimental\n-}\n-\n-struct S;\n-\n-// Methods in trait impl\n-impl Tr for S {\n-    extern \"efiapi\" fn f2() {} //~ ERROR efiapi ABI is experimental\n-}\n-\n-// Methods in inherent impl\n-impl S {\n-    extern \"efiapi\" fn f4() {} //~ ERROR efiapi ABI is experimental\n-}\n-\n-// Function pointer types\n-type A = extern \"efiapi\" fn(); //~ ERROR efiapi ABI is experimental\n-\n-// Foreign modules\n-extern \"efiapi\" {} //~ ERROR efiapi ABI is experimental"}, {"sha": "5b01dcc6d85952aeaa6dcffcf6206921a1d7bac7", "filename": "tests/ui/feature-gates/feature-gate-abi-efiapi.stderr", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/61a415be590113b4935464ef0aaf3b4e7713a077/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61a415be590113b4935464ef0aaf3b4e7713a077/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.stderr?ref=61a415be590113b4935464ef0aaf3b4e7713a077", "patch": "@@ -1,66 +0,0 @@\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:9:8\n-   |\n-LL | extern \"efiapi\" fn f1() {}\n-   |        ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:13:12\n-   |\n-LL |     extern \"efiapi\" fn f2();\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:14:12\n-   |\n-LL |     extern \"efiapi\" fn f3() {}\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:21:12\n-   |\n-LL |     extern \"efiapi\" fn f2() {}\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:26:12\n-   |\n-LL |     extern \"efiapi\" fn f4() {}\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:30:17\n-   |\n-LL | type A = extern \"efiapi\" fn();\n-   |                 ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:33:8\n-   |\n-LL | extern \"efiapi\" {}\n-   |        ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a3335ca41f77e795747e210fe0909ed867e86971", "filename": "tests/ui/iterators/float_iterator_hint.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fiterators%2Ffloat_iterator_hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fiterators%2Ffloat_iterator_hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterators%2Ffloat_iterator_hint.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -0,0 +1,15 @@\n+// #106728\n+\n+fn main() {\n+    for i in 0.2 {\n+        //~^ ERROR `{float}` is not an iterator\n+        //~| `{float}` is not an iterator\n+        //~| NOTE in this expansion of desugaring of `for` loop\n+        //~| NOTE in this expansion of desugaring of `for` loop\n+        //~| NOTE in this expansion of desugaring of `for` loop\n+        //~| NOTE in this expansion of desugaring of `for` loop\n+        //~| NOTE if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+        //~| NOTE required for `{float}` to implement `IntoIterator`\n+        println!();\n+    }\n+}"}, {"sha": "bae23a1f8ff8ab69d89e6924ff6734f4ac09b507", "filename": "tests/ui/iterators/float_iterator_hint.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fiterators%2Ffloat_iterator_hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fiterators%2Ffloat_iterator_hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterators%2Ffloat_iterator_hint.stderr?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: `{float}` is not an iterator\n+  --> $DIR/float_iterator_hint.rs:4:14\n+   |\n+LL |     for i in 0.2 {\n+   |              ^^^ `{float}` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `{float}`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required for `{float}` to implement `IntoIterator`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c142fec8da0f6a9969fefc0d72f425882a242aa7", "filename": "tests/ui/iterators/integral.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fiterators%2Fintegral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Fiterators%2Fintegral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterators%2Fintegral.stderr?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -115,6 +115,7 @@ LL |     for _ in 42.0 {}\n    |              ^^^^ `{float}` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `{float}`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required for `{float}` to implement `IntoIterator`\n \n error: aborting due to 12 previous errors"}, {"sha": "7419d34580097c3d05d4b4df1c4dd3f77af69bdd", "filename": "tests/ui/lint/lint-ffi-safety-all-phantom.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Flint%2Flint-ffi-safety-all-phantom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/tests%2Fui%2Flint%2Flint-ffi-safety-all-phantom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-ffi-safety-all-phantom.rs?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -0,0 +1,22 @@\n+// This is a regression test for issue https://github.com/rust-lang/rust/issues/106629.\n+// It ensures that transparent types where all fields are PhantomData are marked as\n+// FFI-safe.\n+\n+// check-pass\n+\n+#[repr(transparent)]\n+#[derive(Copy, Clone)]\n+struct MyPhantom(core::marker::PhantomData<u8>);\n+\n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub struct Bar {\n+    pub x: i32,\n+    _marker: MyPhantom,\n+}\n+\n+extern \"C\" {\n+    pub fn foo(bar: *mut Bar);\n+}\n+\n+fn main() {}"}, {"sha": "914b52cf041dbdf5be1802a1cadc6561fad571a5", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86ad69d4c63961b316fdbadd18bc35535f7b128b/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/86ad69d4c63961b316fdbadd18bc35535f7b128b/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=86ad69d4c63961b316fdbadd18bc35535f7b128b", "patch": "@@ -471,6 +471,7 @@ compiler-team = [\n     \"@lcnr\",\n     \"@nagisa\",\n     \"@wesleywiser\",\n+    \"@michaelwoerister\",\n ]\n compiler-team-contributors = [\n     \"@compiler-errors\","}]}