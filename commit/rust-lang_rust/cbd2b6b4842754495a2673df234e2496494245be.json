{"sha": "cbd2b6b4842754495a2673df234e2496494245be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZDJiNmI0ODQyNzU0NDk1YTI2NzNkZjIzNGUyNDk2NDk0MjQ1YmU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-14T10:47:06Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-22T18:38:40Z"}, "message": "Add Box::into_unique", "tree": {"sha": "bbeead5c3d88388c9d5e2b029797ebf47171386d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbeead5c3d88388c9d5e2b029797ebf47171386d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbd2b6b4842754495a2673df234e2496494245be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd2b6b4842754495a2673df234e2496494245be", "html_url": "https://github.com/rust-lang/rust/commit/cbd2b6b4842754495a2673df234e2496494245be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbd2b6b4842754495a2673df234e2496494245be/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef24bb3e23975b8183a04b0691ee0ecb878c17e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef24bb3e23975b8183a04b0691ee0ecb878c17e", "html_url": "https://github.com/rust-lang/rust/commit/1ef24bb3e23975b8183a04b0691ee0ecb878c17e"}], "stats": {"total": 69, "additions": 48, "deletions": 21}, "files": [{"sha": "9e3142519341777cca7803f8e663bdca417ef00c", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbd2b6b4842754495a2673df234e2496494245be/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd2b6b4842754495a2673df234e2496494245be/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=cbd2b6b4842754495a2673df234e2496494245be", "patch": "@@ -280,7 +280,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data: data,\n         };\n-        Arc { ptr: unsafe { Shared::new_unchecked(Box::into_raw(x)) } }\n+        Arc { ptr: Shared::from(Box::into_unique(x)) }\n     }\n \n     /// Returns the contained value, if the `Arc` has exactly one strong reference.\n@@ -842,7 +842,7 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: Shared::new_unchecked(Box::into_raw(box ArcInner {\n+                ptr: Shared::from(Box::into_unique(box ArcInner {\n                     strong: atomic::AtomicUsize::new(0),\n                     weak: atomic::AtomicUsize::new(1),\n                     data: uninitialized(),"}, {"sha": "6318d22059f96c09339337a9f32dd23453b1a96c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cbd2b6b4842754495a2673df234e2496494245be/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd2b6b4842754495a2673df234e2496494245be/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=cbd2b6b4842754495a2673df234e2496494245be", "patch": "@@ -297,6 +297,37 @@ impl<T: ?Sized> Box<T> {\n     pub fn into_raw(b: Box<T>) -> *mut T {\n         unsafe { mem::transmute(b) }\n     }\n+\n+    /// Consumes the `Box`, returning the wrapped pointer as `Unique<T>`.\n+    ///\n+    /// After calling this function, the caller is responsible for the\n+    /// memory previously managed by the `Box`. In particular, the\n+    /// caller should properly destroy `T` and release the memory. The\n+    /// proper way to do so is to convert the raw pointer back into a\n+    /// `Box` with the [`Box::from_raw`] function.\n+    ///\n+    /// Note: this is an associated function, which means that you have\n+    /// to call it as `Box::into_unique(b)` instead of `b.into_unique()`. This\n+    /// is so that there is no conflict with a method on the inner type.\n+    ///\n+    /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(unique)]\n+    ///\n+    /// fn main() {\n+    ///     let x = Box::new(5);\n+    ///     let ptr = Box::into_unique(x);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\",\n+               issue = \"27730\")]\n+    #[inline]\n+    pub fn into_unique(b: Box<T>) -> Unique<T> {\n+        unsafe { mem::transmute(b) }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "05ac9cba5e09da320b83aad72f65d9ec5b309903", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbd2b6b4842754495a2673df234e2496494245be/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd2b6b4842754495a2673df234e2496494245be/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=cbd2b6b4842754495a2673df234e2496494245be", "patch": "@@ -140,9 +140,7 @@ struct BoxedNode<K, V> {\n \n impl<K, V> BoxedNode<K, V> {\n     fn from_leaf(node: Box<LeafNode<K, V>>) -> Self {\n-        unsafe {\n-            BoxedNode { ptr: Unique::new_unchecked(Box::into_raw(node)) }\n-        }\n+        BoxedNode { ptr: Box::into_unique(node) }\n     }\n \n     fn from_internal(node: Box<InternalNode<K, V>>) -> Self {"}, {"sha": "850dd6adcf0af08e3d8c033f500b1b577e53a397", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbd2b6b4842754495a2673df234e2496494245be/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd2b6b4842754495a2673df234e2496494245be/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=cbd2b6b4842754495a2673df234e2496494245be", "patch": "@@ -157,7 +157,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = self.head;\n             node.prev = None;\n-            let node = Some(Shared::new_unchecked(Box::into_raw(node)));\n+            let node = Some(Shared::from(Box::into_unique(node)));\n \n             match self.head {\n                 None => self.tail = node,\n@@ -192,7 +192,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = None;\n             node.prev = self.tail;\n-            let node = Some(Shared::new_unchecked(Box::into_raw(node)));\n+            let node = Some(Shared::from(Box::into_unique(node)));\n \n             match self.tail {\n                 None => self.head = node,\n@@ -921,7 +921,7 @@ impl<'a, T> IterMut<'a, T> {\n                     Some(prev) => prev,\n                 };\n \n-                let node = Some(Shared::new_unchecked(Box::into_raw(box Node {\n+                let node = Some(Shared::from(Box::into_unique(box Node {\n                     next: Some(head),\n                     prev: Some(prev),\n                     element: element,"}, {"sha": "a2184054b377ebddde035eeea2cf5c1f4eb7769b", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cbd2b6b4842754495a2673df234e2496494245be/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd2b6b4842754495a2673df234e2496494245be/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=cbd2b6b4842754495a2673df234e2496494245be", "patch": "@@ -303,18 +303,16 @@ impl<T> Rc<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(value: T) -> Rc<T> {\n-        unsafe {\n-            Rc {\n-                // there is an implicit weak pointer owned by all the strong\n-                // pointers, which ensures that the weak destructor never frees\n-                // the allocation while the strong destructor is running, even\n-                // if the weak pointer is stored inside the strong one.\n-                ptr: Shared::new_unchecked(Box::into_raw(box RcBox {\n-                    strong: Cell::new(1),\n-                    weak: Cell::new(1),\n-                    value: value,\n-                })),\n-            }\n+        Rc {\n+            // there is an implicit weak pointer owned by all the strong\n+            // pointers, which ensures that the weak destructor never frees\n+            // the allocation while the strong destructor is running, even\n+            // if the weak pointer is stored inside the strong one.\n+            ptr: Shared::from(Box::into_unique(box RcBox {\n+                strong: Cell::new(1),\n+                weak: Cell::new(1),\n+                value: value,\n+            })),\n         }\n     }\n \n@@ -1016,7 +1014,7 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: Shared::new_unchecked(Box::into_raw(box RcBox {\n+                ptr: Shared::from(Box::into_unique(box RcBox {\n                     strong: Cell::new(0),\n                     weak: Cell::new(1),\n                     value: uninitialized(),"}]}