{"sha": "7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "node_id": "C_kwDOAAsO6NoAKDdkYmYyYzBlZDg2YTZmYzk3YWEwYjkzYmMyYWM4NjVkNmYyY2M0Mzg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-03T04:17:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-04T03:23:40Z"}, "message": "Make non-ASCII errors more consistent.\n\nThere are three kinds of \"byte\" literals: byte literals, byte string\nliterals, and raw byte string literals. None are allowed to have\nnon-ASCII chars in them.\n\nTwo `EscapeError` variants exist for when that constraint is violated.\n- `NonAsciiCharInByte`: used for byte literals and byte string literals.\n- `NonAsciiCharInByteString`: used for raw byte string literals.\n\nAs a result, the messages for raw byte string literals use different\nwording, without good reason. Also, byte string literals are incorrectly\ndescribed as \"byte constants\" in some error messages.\n\nThis commit eliminates `NonAsciiCharInByteString` so the three cases are\nhandled similarly, and described correctly. The `mode` is enough to\ndistinguish them.\n\nNote: Some existing error messages mention \"byte constants\" and some\nmention \"byte literals\". I went with the latter here, because it's a\nmore correct name, as used by the Reference.", "tree": {"sha": "95b18ce5f8af6693f1484490d128a95b919fd38b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95b18ce5f8af6693f1484490d128a95b919fd38b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "html_url": "https://github.com/rust-lang/rust/commit/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34b32b0dac9da3fad7861bdc2bad89d771172bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/34b32b0dac9da3fad7861bdc2bad89d771172bb3", "html_url": "https://github.com/rust-lang/rust/commit/34b32b0dac9da3fad7861bdc2bad89d771172bb3"}], "stats": {"total": 136, "additions": 62, "deletions": 74}, "files": [{"sha": "9c9cce7cbd48ec2ff1009e6757167c1a85b52287", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -52,10 +52,8 @@ pub enum EscapeError {\n \n     /// Unicode escape code in byte literal.\n     UnicodeEscapeInByte,\n-    /// Non-ascii character in byte literal.\n+    /// Non-ascii character in byte literal, byte string literal, or raw byte string literal.\n     NonAsciiCharInByte,\n-    /// Non-ascii character in byte string literal.\n-    NonAsciiCharInByteString,\n \n     /// After a line ending with '\\', the next line contains whitespace\n     /// characters that are not skipped.\n@@ -349,8 +347,7 @@ where\n         let start = src.len() - chars.as_str().len() - c.len_utf8();\n         let result = match c {\n             '\\r' => Err(EscapeError::BareCarriageReturnInRawString),\n-            c if is_byte && !c.is_ascii() => Err(EscapeError::NonAsciiCharInByteString),\n-            c => Ok(c),\n+            _ => ascii_check(c, is_byte),\n         };\n         let end = src.len() - chars.as_str().len();\n         callback(start..end, result);"}, {"sha": "008edef5a6385191f710e519f7070aa06ba730be", "filename": "compiler/rustc_lexer/src/unescape/tests.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -289,9 +289,6 @@ fn test_unescape_raw_byte_str() {\n     }\n \n     check(\"\\r\", &[(0..1, Err(EscapeError::BareCarriageReturnInRawString))]);\n-    check(\"\ud83e\udd80\", &[(0..4, Err(EscapeError::NonAsciiCharInByteString))]);\n-    check(\n-        \"\ud83e\udd80a\",\n-        &[(0..4, Err(EscapeError::NonAsciiCharInByteString)), (4..5, Ok(byte_from_char('a')))],\n-    );\n+    check(\"\ud83e\udd80\", &[(0..4, Err(EscapeError::NonAsciiCharInByte))]);\n+    check(\"\ud83e\udd80a\", &[(0..4, Err(EscapeError::NonAsciiCharInByte)), (4..5, Ok(byte_from_char('a')))]);\n }"}, {"sha": "6373f5b4fd6ff36f32f99b14bd80ec9326663dfc", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -231,16 +231,23 @@ pub(crate) fn emit_unescape_error(\n                 .emit();\n         }\n         EscapeError::NonAsciiCharInByte => {\n-            assert!(mode.is_byte());\n             let (c, span) = last_char();\n-            let mut err = handler.struct_span_err(span, \"non-ASCII character in byte constant\");\n+            let desc = match mode {\n+                Mode::Byte => \"byte literal\",\n+                Mode::ByteStr => \"byte string literal\",\n+                Mode::RawByteStr => \"raw byte string literal\",\n+                _ => panic!(\"non-is_byte literal paired with NonAsciiCharInByte\"),\n+            };\n+            let mut err = handler.struct_span_err(span, format!(\"non-ASCII character in {}\", desc));\n             let postfix = if unicode_width::UnicodeWidthChar::width(c).unwrap_or(1) == 0 {\n                 format!(\" but is {:?}\", c)\n             } else {\n                 String::new()\n             };\n-            err.span_label(span, &format!(\"byte constant must be ASCII{}\", postfix));\n-            if (c as u32) <= 0xFF {\n+            err.span_label(span, &format!(\"must be ASCII{}\", postfix));\n+            // Note: the \\\\xHH suggestions are not given for raw byte string\n+            // literals, because they are araw and so cannot use any escapes.\n+            if (c as u32) <= 0xFF && mode != Mode::RawByteStr {\n                 err.span_suggestion(\n                     span,\n                     &format!(\n@@ -250,9 +257,9 @@ pub(crate) fn emit_unescape_error(\n                     format!(\"\\\\x{:X}\", c as u32),\n                     Applicability::MaybeIncorrect,\n                 );\n-            } else if matches!(mode, Mode::Byte) {\n+            } else if mode == Mode::Byte {\n                 err.span_label(span, \"this multibyte character does not fit into a single byte\");\n-            } else if matches!(mode, Mode::ByteStr) {\n+            } else if mode != Mode::RawByteStr {\n                 let mut utf8 = String::new();\n                 utf8.push(c);\n                 err.span_suggestion(\n@@ -270,19 +277,6 @@ pub(crate) fn emit_unescape_error(\n             }\n             err.emit();\n         }\n-        EscapeError::NonAsciiCharInByteString => {\n-            assert!(mode.is_byte());\n-            let (c, span) = last_char();\n-            let postfix = if unicode_width::UnicodeWidthChar::width(c).unwrap_or(1) == 0 {\n-                format!(\" but is {:?}\", c)\n-            } else {\n-                String::new()\n-            };\n-            handler\n-                .struct_span_err(span, \"raw byte string must be ASCII\")\n-                .span_label(span, &format!(\"must be ASCII{}\", postfix))\n-                .emit();\n-        }\n         EscapeError::OutOfRangeHexEscape => {\n             handler\n                 .struct_span_err(span, \"out of range hex escape\")"}, {"sha": "e14e2fc05ad39235c7589b830caa423d901621e8", "filename": "src/test/ui/attributes/key-value-non-ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.rs?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -1,4 +1,4 @@\n #![feature(rustc_attrs)]\n \n-#[rustc_dummy = b\"\ufb03.rs\"] //~ ERROR non-ASCII character in byte constant\n+#[rustc_dummy = b\"\ufb03.rs\"] //~ ERROR non-ASCII character in byte string literal\n fn main() {}"}, {"sha": "23d482de6a868e36c6587c130514b8340a989ef7", "filename": "src/test/ui/attributes/key-value-non-ascii.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -1,8 +1,8 @@\n-error: non-ASCII character in byte constant\n+error: non-ASCII character in byte string literal\n   --> $DIR/key-value-non-ascii.rs:3:19\n    |\n LL | #[rustc_dummy = b\"\ufb03.rs\"]\n-   |                   ^ byte constant must be ASCII\n+   |                   ^ must be ASCII\n    |\n help: if you meant to use the UTF-8 encoding of '\ufb03', use \\xHH escapes\n    |"}, {"sha": "896dc1a1a5fba5821ef54705062b87d5a6214f03", "filename": "src/test/ui/parser/byte-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -7,6 +7,6 @@ pub fn main() {\n     b'\\x0Z';  //~ ERROR invalid character in numeric character escape: `Z`\n     b'\t';  //~ ERROR byte constant must be escaped\n     b''';  //~ ERROR byte constant must be escaped\n-    b'\u00e9';  //~ ERROR non-ASCII character in byte constant\n+    b'\u00e9';  //~ ERROR non-ASCII character in byte literal\n     b'a  //~ ERROR unterminated byte constant [E0763]\n }"}, {"sha": "efa55ae05bd37b6ac506af989d517eaf4837e57a", "filename": "src/test/ui/parser/byte-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -32,11 +32,11 @@ error: byte constant must be escaped: `'`\n LL |     b''';\n    |       ^ help: escape the character: `\\'`\n \n-error: non-ASCII character in byte constant\n+error: non-ASCII character in byte literal\n   --> $DIR/byte-literals.rs:10:7\n    |\n LL |     b'\u00e9';\n-   |       ^ byte constant must be ASCII\n+   |       ^ must be ASCII\n    |\n help: if you meant to use the unicode code point for '\u00e9', use a \\xHH escape\n    |"}, {"sha": "30a4f50c4e40b694cb5152627f0a1987c814dd5f", "filename": "src/test/ui/parser/byte-string-literals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -3,7 +3,7 @@ static FOO: &'static [u8] = b\"\\f\";  //~ ERROR unknown byte escape\n pub fn main() {\n     b\"\\f\";  //~ ERROR unknown byte escape\n     b\"\\x0Z\";  //~ ERROR invalid character in numeric character escape: `Z`\n-    b\"\u00e9\";  //~ ERROR non-ASCII character in byte constant\n-    br##\"\u00e9\"##;  //~ ERROR raw byte string must be ASCII\n+    b\"\u00e9\";  //~ ERROR non-ASCII character in byte string literal\n+    br##\"\u00e9\"##;  //~ ERROR non-ASCII character in raw byte string literal\n     b\"a  //~ ERROR unterminated double quote byte string\n }"}, {"sha": "5b96cc3d18abc37332f5ce9648d3dd9f844513b8", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -20,18 +20,18 @@ error: invalid character in numeric character escape: `Z`\n LL |     b\"\\x0Z\";\n    |          ^ invalid character in numeric character escape\n \n-error: non-ASCII character in byte constant\n+error: non-ASCII character in byte string literal\n   --> $DIR/byte-string-literals.rs:6:7\n    |\n LL |     b\"\u00e9\";\n-   |       ^ byte constant must be ASCII\n+   |       ^ must be ASCII\n    |\n help: if you meant to use the unicode code point for '\u00e9', use a \\xHH escape\n    |\n LL |     b\"\\xE9\";\n    |       ~~~~\n \n-error: raw byte string must be ASCII\n+error: non-ASCII character in raw byte string literal\n   --> $DIR/byte-string-literals.rs:7:10\n    |\n LL |     br##\"\u00e9\"##;"}, {"sha": "1b859fee596adf6934dbbdcec51644c2442daf0a", "filename": "src/test/ui/parser/raw/raw-byte-string-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.rs?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -2,6 +2,6 @@\n \n pub fn main() {\n     br\"a\r\"; //~ ERROR bare CR not allowed in raw string\n-    br\"\u00e9\";  //~ ERROR raw byte string must be ASCII\n+    br\"\u00e9\";  //~ ERROR non-ASCII character in raw byte string literal\n     br##~\"a\"~##;  //~ ERROR only `#` is allowed in raw string delimitation\n }"}, {"sha": "a2f27d1ed70aee56808edb7302ebad643bcf94f9", "filename": "src/test/ui/parser/raw/raw-byte-string-literals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.stderr?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -4,7 +4,7 @@ error: bare CR not allowed in raw string\n LL |     br\"a\r\";\n    |         ^\n \n-error: raw byte string must be ASCII\n+error: non-ASCII character in raw byte string literal\n   --> $DIR/raw-byte-string-literals.rs:5:8\n    |\n LL |     br\"\u00e9\";"}, {"sha": "df099bb62ad1ec5103a80ae2a08a64b4d114f544", "filename": "src/test/ui/parser/unicode-control-codepoints.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Funicode-control-codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Funicode-control-codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-control-codepoints.rs?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -14,15 +14,15 @@ fn main() {\n     println!(\"{:?}\", r##\"/*\u202e } \u2066if isAdmin\u2069 \u2066 begin admins only \"##);\n     //~^ ERROR unicode codepoint changing visible direction of text present in literal\n     println!(\"{:?}\", b\"/*\u202e } \u2066if isAdmin\u2069 \u2066 begin admins only \");\n-    //~^ ERROR non-ASCII character in byte constant\n-    //~| ERROR non-ASCII character in byte constant\n-    //~| ERROR non-ASCII character in byte constant\n-    //~| ERROR non-ASCII character in byte constant\n+    //~^ ERROR non-ASCII character in byte string literal\n+    //~| ERROR non-ASCII character in byte string literal\n+    //~| ERROR non-ASCII character in byte string literal\n+    //~| ERROR non-ASCII character in byte string literal\n     println!(\"{:?}\", br##\"/*\u202e } \u2066if isAdmin\u2069 \u2066 begin admins only \"##);\n-    //~^ ERROR raw byte string must be ASCII\n-    //~| ERROR raw byte string must be ASCII\n-    //~| ERROR raw byte string must be ASCII\n-    //~| ERROR raw byte string must be ASCII\n+    //~^ ERROR non-ASCII character in raw byte string literal\n+    //~| ERROR non-ASCII character in raw byte string literal\n+    //~| ERROR non-ASCII character in raw byte string literal\n+    //~| ERROR non-ASCII character in raw byte string literal\n     println!(\"{:?}\", '\u202e');\n     //~^ ERROR unicode codepoint changing visible direction of text present in literal\n }"}, {"sha": "fc071a941914210c110a8c13ec43b053d5a60e1d", "filename": "src/test/ui/parser/unicode-control-codepoints.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Funicode-control-codepoints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fparser%2Funicode-control-codepoints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-control-codepoints.stderr?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -14,69 +14,69 @@ LL |     println!(\"{:?}\", b\"us\\u{202B}e\\u{202A}r\");\n    |\n    = help: unicode escape sequences cannot be used as a byte or in a byte string\n \n-error: non-ASCII character in byte constant\n+error: non-ASCII character in byte string literal\n   --> $DIR/unicode-control-codepoints.rs:16:26\n    |\n LL |     println!(\"{:?}\", b\"/* } if isAdmin  begin admins only \");\n-   |                          ^ byte constant must be ASCII but is '\\u{202e}'\n+   |                          ^ must be ASCII but is '\\u{202e}'\n    |\n help: if you meant to use the UTF-8 encoding of '\\u{202e}', use \\xHH escapes\n    |\n LL |     println!(\"{:?}\", b\"/*\\xE2\\x80\\xAE } if isAdmin  begin admins only \");\n    |                          ~~~~~~~~~~~~\n \n-error: non-ASCII character in byte constant\n+error: non-ASCII character in byte string literal\n   --> $DIR/unicode-control-codepoints.rs:16:30\n    |\n LL |     println!(\"{:?}\", b\"/* } if isAdmin  begin admins only \");\n-   |                             ^ byte constant must be ASCII but is '\\u{2066}'\n+   |                             ^ must be ASCII but is '\\u{2066}'\n    |\n help: if you meant to use the UTF-8 encoding of '\\u{2066}', use \\xHH escapes\n    |\n LL |     println!(\"{:?}\", b\"/* } \\xE2\\x81\\xA6if isAdmin  begin admins only \");\n    |                             ~~~~~~~~~~~~\n \n-error: non-ASCII character in byte constant\n+error: non-ASCII character in byte string literal\n   --> $DIR/unicode-control-codepoints.rs:16:41\n    |\n LL |     println!(\"{:?}\", b\"/* } if isAdmin  begin admins only \");\n-   |                                       ^ byte constant must be ASCII but is '\\u{2069}'\n+   |                                       ^ must be ASCII but is '\\u{2069}'\n    |\n help: if you meant to use the UTF-8 encoding of '\\u{2069}', use \\xHH escapes\n    |\n LL |     println!(\"{:?}\", b\"/* } if isAdmin\\xE2\\x81\\xA9  begin admins only \");\n    |                                       ~~~~~~~~~~~~\n \n-error: non-ASCII character in byte constant\n+error: non-ASCII character in byte string literal\n   --> $DIR/unicode-control-codepoints.rs:16:43\n    |\n LL |     println!(\"{:?}\", b\"/* } if isAdmin  begin admins only \");\n-   |                                        ^ byte constant must be ASCII but is '\\u{2066}'\n+   |                                        ^ must be ASCII but is '\\u{2066}'\n    |\n help: if you meant to use the UTF-8 encoding of '\\u{2066}', use \\xHH escapes\n    |\n LL |     println!(\"{:?}\", b\"/* } if isAdmin \\xE2\\x81\\xA6 begin admins only \");\n    |                                        ~~~~~~~~~~~~\n \n-error: raw byte string must be ASCII\n+error: non-ASCII character in raw byte string literal\n   --> $DIR/unicode-control-codepoints.rs:21:29\n    |\n LL |     println!(\"{:?}\", br##\"/* } if isAdmin  begin admins only \"##);\n    |                             ^ must be ASCII but is '\\u{202e}'\n \n-error: raw byte string must be ASCII\n+error: non-ASCII character in raw byte string literal\n   --> $DIR/unicode-control-codepoints.rs:21:33\n    |\n LL |     println!(\"{:?}\", br##\"/* } if isAdmin  begin admins only \"##);\n    |                                ^ must be ASCII but is '\\u{2066}'\n \n-error: raw byte string must be ASCII\n+error: non-ASCII character in raw byte string literal\n   --> $DIR/unicode-control-codepoints.rs:21:44\n    |\n LL |     println!(\"{:?}\", br##\"/* } if isAdmin  begin admins only \"##);\n    |                                          ^ must be ASCII but is '\\u{2069}'\n \n-error: raw byte string must be ASCII\n+error: non-ASCII character in raw byte string literal\n   --> $DIR/unicode-control-codepoints.rs:21:46\n    |\n LL |     println!(\"{:?}\", br##\"/* } if isAdmin  begin admins only \"##);"}, {"sha": "c4105186244db3bd170af04d24875401755c386a", "filename": "src/test/ui/suggestions/multibyte-escapes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.rs?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -2,17 +2,17 @@\n \n fn main() {\n     b'\u00b5';\n-    //~^ ERROR: non-ASCII character in byte constant\n+    //~^ ERROR: non-ASCII character in byte literal\n     //~| HELP: if you meant to use the unicode code point for '\u00b5', use a \\xHH escape\n-    //~| NOTE: byte constant must be ASCII\n+    //~| NOTE: must be ASCII\n \n     b'\u5b57';\n-    //~^ ERROR: non-ASCII character in byte constant\n+    //~^ ERROR: non-ASCII character in byte literal\n     //~| NOTE: this multibyte character does not fit into a single byte\n-    //~| NOTE: byte constant must be ASCII\n+    //~| NOTE: must be ASCII\n \n     b\"\u5b57\";\n-    //~^ ERROR: non-ASCII character in byte constant\n+    //~^ ERROR: non-ASCII character in byte string literal\n     //~| HELP: if you meant to use the UTF-8 encoding of '\u5b57', use \\xHH escapes\n-    //~| NOTE: byte constant must be ASCII\n+    //~| NOTE: must be ASCII\n }"}, {"sha": "1e7c43e6538f697f6820fab8f9eaea5297329604", "filename": "src/test/ui/suggestions/multibyte-escapes.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.stderr?ref=7dbf2c0ed86a6fc97aa0b93bc2ac865d6f2cc438", "patch": "@@ -1,28 +1,28 @@\n-error: non-ASCII character in byte constant\n+error: non-ASCII character in byte literal\n   --> $DIR/multibyte-escapes.rs:4:7\n    |\n LL |     b'\u00b5';\n-   |       ^ byte constant must be ASCII\n+   |       ^ must be ASCII\n    |\n help: if you meant to use the unicode code point for '\u00b5', use a \\xHH escape\n    |\n LL |     b'\\xB5';\n    |       ~~~~\n \n-error: non-ASCII character in byte constant\n+error: non-ASCII character in byte literal\n   --> $DIR/multibyte-escapes.rs:9:7\n    |\n LL |     b'\u5b57';\n    |       ^^\n    |       |\n-   |       byte constant must be ASCII\n+   |       must be ASCII\n    |       this multibyte character does not fit into a single byte\n \n-error: non-ASCII character in byte constant\n+error: non-ASCII character in byte string literal\n   --> $DIR/multibyte-escapes.rs:14:7\n    |\n LL |     b\"\u5b57\";\n-   |       ^^ byte constant must be ASCII\n+   |       ^^ must be ASCII\n    |\n help: if you meant to use the UTF-8 encoding of '\u5b57', use \\xHH escapes\n    |"}]}