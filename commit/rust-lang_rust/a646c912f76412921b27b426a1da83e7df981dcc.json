{"sha": "a646c912f76412921b27b426a1da83e7df981dcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NDZjOTEyZjc2NDEyOTIxYjI3YjQyNmExZGE4M2U3ZGY5ODFkY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-19T13:09:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-19T13:09:04Z"}, "message": "Auto merge of #51081 - kornelski:examplestr, r=steveklabnik\n\nUse String, not &str in some collection examples\n\nDiscussed in #46966\n\nOveruse of borrowed values in data structures is a common mistake I see in Rust user forums. Users who copy&paste such examples end up fighting with the borrow checker as soon as they replace string literals with some real values.\n\nThis changes a couple of examples to use `String`, and it adds opportunity to demonstrate use of `Borrow`.", "tree": {"sha": "bba0a543c01ddbae6175a4f7833473625c3aa260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba0a543c01ddbae6175a4f7833473625c3aa260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a646c912f76412921b27b426a1da83e7df981dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a646c912f76412921b27b426a1da83e7df981dcc", "html_url": "https://github.com/rust-lang/rust/commit/a646c912f76412921b27b426a1da83e7df981dcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a646c912f76412921b27b426a1da83e7df981dcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b0f915ba84e08cd21c799e859d2329e95ab004", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b0f915ba84e08cd21c799e859d2329e95ab004", "html_url": "https://github.com/rust-lang/rust/commit/72b0f915ba84e08cd21c799e859d2329e95ab004"}, {"sha": "01e82f111e618c5907b93504df29aec152821810", "url": "https://api.github.com/repos/rust-lang/rust/commits/01e82f111e618c5907b93504df29aec152821810", "html_url": "https://github.com/rust-lang/rust/commit/01e82f111e618c5907b93504df29aec152821810"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "ee8c1dc81ad75f90ca54221dffa2f0ee593f3fb5", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a646c912f76412921b27b426a1da83e7df981dcc/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a646c912f76412921b27b426a1da83e7df981dcc/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a646c912f76412921b27b426a1da83e7df981dcc", "patch": "@@ -276,17 +276,31 @@ const DISPLACEMENT_THRESHOLD: usize = 128;\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// // type inference lets us omit an explicit type signature (which\n-/// // would be `HashMap<&str, &str>` in this example).\n+/// // Type inference lets us omit an explicit type signature (which\n+/// // would be `HashMap<String, String>` in this example).\n /// let mut book_reviews = HashMap::new();\n ///\n-/// // review some books.\n-/// book_reviews.insert(\"Adventures of Huckleberry Finn\",    \"My favorite book.\");\n-/// book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\");\n-/// book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\");\n-/// book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\");\n+/// // Review some books.\n+/// book_reviews.insert(\n+///     \"Adventures of Huckleberry Finn\".to_string(),\n+///     \"My favorite book.\".to_string(),\n+/// );\n+/// book_reviews.insert(\n+///     \"Grimms' Fairy Tales\".to_string(),\n+///     \"Masterpiece.\".to_string(),\n+/// );\n+/// book_reviews.insert(\n+///     \"Pride and Prejudice\".to_string(),\n+///     \"Very enjoyable.\".to_string(),\n+/// );\n+/// book_reviews.insert(\n+///     \"The Adventures of Sherlock Holmes\".to_string(),\n+///     \"Eye lyked it alot.\".to_string(),\n+/// );\n ///\n-/// // check for a specific one.\n+/// // Check for a specific one.\n+/// // When collections store owned values (String), they can still be\n+/// // queried using references (&str).\n /// if !book_reviews.contains_key(\"Les Mis\u00e9rables\") {\n ///     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n ///              book_reviews.len());\n@@ -295,16 +309,16 @@ const DISPLACEMENT_THRESHOLD: usize = 128;\n /// // oops, this review has a lot of spelling mistakes, let's delete it.\n /// book_reviews.remove(\"The Adventures of Sherlock Holmes\");\n ///\n-/// // look up the values associated with some keys.\n+/// // Look up the values associated with some keys.\n /// let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\n-/// for book in &to_find {\n+/// for &book in &to_find {\n ///     match book_reviews.get(book) {\n ///         Some(review) => println!(\"{}: {}\", book, review),\n ///         None => println!(\"{} is unreviewed.\", book)\n ///     }\n /// }\n ///\n-/// // iterate over everything.\n+/// // Iterate over everything.\n /// for (book, review) in &book_reviews {\n ///     println!(\"{}: \\\"{}\\\"\", book, review);\n /// }"}, {"sha": "5ac3e8f9cf7d3a28a48c5bc0eac59fbe0d1374f3", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a646c912f76412921b27b426a1da83e7df981dcc/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a646c912f76412921b27b426a1da83e7df981dcc/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=a646c912f76412921b27b426a1da83e7df981dcc", "patch": "@@ -49,14 +49,14 @@ use super::map::{self, HashMap, Keys, RandomState};\n /// ```\n /// use std::collections::HashSet;\n /// // Type inference lets us omit an explicit type signature (which\n-/// // would be `HashSet<&str>` in this example).\n+/// // would be `HashSet<String>` in this example).\n /// let mut books = HashSet::new();\n ///\n /// // Add some books.\n-/// books.insert(\"A Dance With Dragons\");\n-/// books.insert(\"To Kill a Mockingbird\");\n-/// books.insert(\"The Odyssey\");\n-/// books.insert(\"The Great Gatsby\");\n+/// books.insert(\"A Dance With Dragons\".to_string());\n+/// books.insert(\"To Kill a Mockingbird\".to_string());\n+/// books.insert(\"The Odyssey\".to_string());\n+/// books.insert(\"The Great Gatsby\".to_string());\n ///\n /// // Check for a specific one.\n /// if !books.contains(\"The Winds of Winter\") {\n@@ -80,17 +80,17 @@ use super::map::{self, HashMap, Keys, RandomState};\n /// ```\n /// use std::collections::HashSet;\n /// #[derive(Hash, Eq, PartialEq, Debug)]\n-/// struct Viking<'a> {\n-///     name: &'a str,\n+/// struct Viking {\n+///     name: String,\n ///     power: usize,\n /// }\n ///\n /// let mut vikings = HashSet::new();\n ///\n-/// vikings.insert(Viking { name: \"Einar\", power: 9 });\n-/// vikings.insert(Viking { name: \"Einar\", power: 9 });\n-/// vikings.insert(Viking { name: \"Olaf\", power: 4 });\n-/// vikings.insert(Viking { name: \"Harald\", power: 8 });\n+/// vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\n+/// vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\n+/// vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });\n+/// vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });\n ///\n /// // Use derived implementation to print the vikings.\n /// for x in &vikings {\n@@ -104,7 +104,7 @@ use super::map::{self, HashMap, Keys, RandomState};\n /// use std::collections::HashSet;\n ///\n /// fn main() {\n-///     let viking_names: HashSet<&str> =\n+///     let viking_names: HashSet<&'static str> =\n ///         [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();\n ///     // use the values stored in the set\n /// }"}]}