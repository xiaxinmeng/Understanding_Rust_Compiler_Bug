{"sha": "e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZjZiNDQ1YWEyZmM3MWY2MjZkZmY3ZjdjNzk4OGIwNGY0YTI5MmQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-14T21:41:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-14T21:41:03Z"}, "message": "Rollup merge of #40702 - mrhota:global_asm, r=nagisa\n\nImplement global_asm!() (RFC 1548)\n\nThis is a first attempt. ~~One (potential) problem I haven't solved is how to handle multiple usages of `global_asm!` in a module/crate. It looks like `LLVMSetModuleInlineAsm` overwrites module asm, and `LLVMAppendModuleInlineAsm` is not provided in LLVM C headers \ud83d\ude26~~\n\nI can provide more detail as needed, but honestly, there's not a lot going on here.\n\nr? @eddyb\n\nCC @Amanieu @jackpot51\n\nTracking issue: #35119", "tree": {"sha": "7ecc980b1e110fbf55b96cf7ac88825d77244f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ecc980b1e110fbf55b96cf7ac88825d77244f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "html_url": "https://github.com/rust-lang/rust/commit/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba377982a3fde98a3cac02493c16dc623b02a421", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba377982a3fde98a3cac02493c16dc623b02a421", "html_url": "https://github.com/rust-lang/rust/commit/ba377982a3fde98a3cac02493c16dc623b02a421"}, {"sha": "a35c4e354a65fdbbb61741db3a9dd1c190f2f146", "url": "https://api.github.com/repos/rust-lang/rust/commits/a35c4e354a65fdbbb61741db3a9dd1c190f2f146", "html_url": "https://github.com/rust-lang/rust/commit/a35c4e354a65fdbbb61741db3a9dd1c190f2f146"}], "stats": {"total": 672, "additions": 648, "deletions": 24}, "files": [{"sha": "a5599395f796564928da250b10bf7abfa4bdc453", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -83,6 +83,7 @@\n - [future_atomic_orderings](future-atomic-orderings.md)\n - [generic_param_attrs](generic-param-attrs.md)\n - [get_type_id](get-type-id.md)\n+- [global_asm](global_asm.md)\n - [heap_api](heap-api.md)\n - [i128](i128.md)\n - [i128_type](i128-type.md)"}, {"sha": "5e68be633e7ab2d69aa066853c888b7ccf5c3467", "filename": "src/doc/unstable-book/src/asm.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -189,3 +189,5 @@ constraints, etc.\n \n [llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n \n+If you need more power and don't mind losing some of the niceties of\n+`asm!`, check out [global_asm](global_asm.html)."}, {"sha": "44921aa309f8444218554757121cc1b2a9b5967e", "filename": "src/doc/unstable-book/src/global_asm.md", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Fdoc%2Funstable-book%2Fsrc%2Fglobal_asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Fdoc%2Funstable-book%2Fsrc%2Fglobal_asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fglobal_asm.md?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -0,0 +1,78 @@\n+# `global_asm`\n+\n+The tracking issue for this feature is: [#35119]\n+\n+[#35119]: https://github.com/rust-lang/rust/issues/35119\n+\n+------------------------\n+\n+The `global_asm!` macro allows the programmer to write arbitrary\n+assembly outside the scope of a function body, passing it through\n+`rustc` and `llvm` to the assembler. The macro is a no-frills\n+interface to LLVM's concept of [module-level inline assembly]. That is,\n+all caveats applicable to LLVM's module-level inline assembly apply\n+to `global_asm!`.\n+\n+[module-level inline assembly]: http://llvm.org/docs/LangRef.html#module-level-inline-assembly\n+\n+`global_asm!` fills a role not currently satisfied by either `asm!`\n+or `#[naked]` functions. The programmer has _all_ features of the\n+assembler at their disposal. The linker will expect to resolve any\n+symbols defined in the inline assembly, modulo any symbols marked as\n+external. It also means syntax for directives and assembly follow the\n+conventions of the assembler in your toolchain.\n+\n+A simple usage looks like this:\n+\n+```rust,ignore\n+# #![feature(global_asm)]\n+# you also need relevant target_arch cfgs\n+global_asm!(include_str!(\"something_neato.s\"));\n+```\n+\n+And a more complicated usage looks like this:\n+\n+```rust,ignore\n+# #![feature(global_asm)]\n+# #![cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+\n+pub mod sally {\n+    global_asm!(r#\"\n+        .global foo\n+      foo:\n+        jmp baz\n+    \"#);\n+\n+    #[no_mangle]\n+    pub unsafe extern \"C\" fn baz() {}\n+}\n+\n+// the symbols `foo` and `bar` are global, no matter where\n+// `global_asm!` was used.\n+extern \"C\" {\n+    fn foo();\n+    fn bar();\n+}\n+\n+pub mod harry {\n+    global_asm!(r#\"\n+        .global bar\n+      bar:\n+        jmp quux\n+    \"#);\n+\n+    #[no_mangle]\n+    pub unsafe extern \"C\" fn quux() {}\n+}\n+```\n+\n+You may use `global_asm!` multiple times, anywhere in your crate, in\n+whatever way suits you. The effect is as if you concatenated all\n+usages and placed the larger, single usage in the crate root.\n+\n+------------------------\n+\n+If you don't need quite as much power and flexibility as\n+`global_asm!` provides, and you don't mind restricting your inline\n+assembly to `fn` bodies only, you might try the [asm](asm.html)\n+feature instead."}, {"sha": "771031db0c045f99e985f96b2e7caf05332c55da", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -57,6 +57,8 @@ pub enum Def {\n     // Macro namespace\n     Macro(DefId, MacroKind),\n \n+    GlobalAsm(DefId),\n+\n     // Both namespaces\n     Err,\n }\n@@ -144,7 +146,8 @@ impl Def {\n             Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) | Def::TyAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n-            Def::AssociatedConst(id) | Def::Local(id) | Def::Upvar(id, ..) | Def::Macro(id, ..) => {\n+            Def::AssociatedConst(id) | Def::Local(id) | Def::Upvar(id, ..) | Def::Macro(id, ..) |\n+            Def::GlobalAsm(id) => {\n                 id\n             }\n \n@@ -185,6 +188,7 @@ impl Def {\n             Def::Label(..) => \"label\",\n             Def::SelfTy(..) => \"self type\",\n             Def::Macro(..) => \"macro\",\n+            Def::GlobalAsm(..) => \"global asm\",\n             Def::Err => \"unresolved item\",\n         }\n     }"}, {"sha": "2b0d53b2bc35645403aed989624f577e69c3abd1", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -474,6 +474,9 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_id(item.id);\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n+        ItemGlobalAsm(_) => {\n+            visitor.visit_id(item.id);\n+        }\n         ItemTy(ref typ, ref type_parameters) => {\n             visitor.visit_id(item.id);\n             visitor.visit_ty(typ);"}, {"sha": "c86aaa7bf672745a9fd74bababce0979e59bcd20", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -646,6 +646,13 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    fn lower_global_asm(&mut self, ga: &GlobalAsm) -> P<hir::GlobalAsm> {\n+        P(hir::GlobalAsm {\n+            asm: ga.asm,\n+            ctxt: ga.ctxt,\n+        })\n+    }\n+\n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {\n         Spanned {\n             node: hir::Variant_ {\n@@ -1288,6 +1295,7 @@ impl<'a> LoweringContext<'a> {\n             }\n             ItemKind::Mod(ref m) => hir::ItemMod(self.lower_mod(m)),\n             ItemKind::ForeignMod(ref nm) => hir::ItemForeignMod(self.lower_foreign_mod(nm)),\n+            ItemKind::GlobalAsm(ref ga) => hir::ItemGlobalAsm(self.lower_global_asm(ga)),\n             ItemKind::Ty(ref t, ref generics) => {\n                 hir::ItemTy(self.lower_ty(t), self.lower_generics(generics))\n             }"}, {"sha": "7ff5152c71a2cd6f29e306f01502dc68ed775a0b", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -109,6 +109,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 DefPathData::ValueNs(i.ident.name.as_str()),\n             ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name.as_str()),\n             ItemKind::Mac(..) => return self.visit_macro_invoc(i.id, false),\n+            ItemKind::GlobalAsm(..) => DefPathData::Misc,\n             ItemKind::Use(ref view_path) => {\n                 match view_path.node {\n                     ViewPathGlob(..) => {}"}, {"sha": "48b8a819fff03eb53d018baebac65a13f04db6de", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -1077,6 +1077,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemFn(..) => \"fn\",\n                 ItemMod(..) => \"mod\",\n                 ItemForeignMod(..) => \"foreign mod\",\n+                ItemGlobalAsm(..) => \"global asm\",\n                 ItemTy(..) => \"ty\",\n                 ItemEnum(..) => \"enum\",\n                 ItemStruct(..) => \"struct\","}, {"sha": "562b58844409dc495da711300e5cd3aae63f3af1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -1495,6 +1495,12 @@ pub struct ForeignMod {\n     pub items: HirVec<ForeignItem>,\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct GlobalAsm {\n+    pub asm: Symbol,\n+    pub ctxt: SyntaxContext,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct EnumDef {\n     pub variants: HirVec<Variant>,\n@@ -1686,6 +1692,8 @@ pub enum Item_ {\n     ItemMod(Mod),\n     /// An external module\n     ItemForeignMod(ForeignMod),\n+    /// Module-level inline assembly (from global_asm!)\n+    ItemGlobalAsm(P<GlobalAsm>),\n     /// A type alias, e.g. `type Foo = Bar<u8>`\n     ItemTy(P<Ty>, Generics),\n     /// An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n@@ -1720,6 +1728,7 @@ impl Item_ {\n             ItemFn(..) => \"function\",\n             ItemMod(..) => \"module\",\n             ItemForeignMod(..) => \"foreign module\",\n+            ItemGlobalAsm(..) => \"global asm\",\n             ItemTy(..) => \"type alias\",\n             ItemEnum(..) => \"enum\",\n             ItemStruct(..) => \"struct\","}, {"sha": "5144f75b1a3634d8449f82d8ca5d6b073ce05ab8", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -633,6 +633,11 @@ impl<'a> State<'a> {\n                 self.print_foreign_mod(nmod, &item.attrs)?;\n                 self.bclose(item.span)?;\n             }\n+            hir::ItemGlobalAsm(ref ga) => {\n+                self.head(&visibility_qualified(&item.vis, \"global asm\"))?;\n+                word(&mut self.s, &ga.asm.as_str())?;\n+                self.end()?\n+            }\n             hir::ItemTy(ref ty, ref params) => {\n                 self.ibox(indent_unit)?;\n                 self.ibox(0)?;"}, {"sha": "82e03a9fddc35a94564c2fae13cc815cfdd78541", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -881,6 +881,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for hir::Item {\n             hir::ItemFn(..)          |\n             hir::ItemMod(..)         |\n             hir::ItemForeignMod(..)  |\n+            hir::ItemGlobalAsm(..)   |\n             hir::ItemTy(..)          |\n             hir::ItemEnum(..)        |\n             hir::ItemStruct(..)      |\n@@ -925,6 +926,7 @@ impl_stable_hash_for!(enum hir::Item_ {\n     ItemFn(fn_decl, unsafety, constness, abi, generics, body_id),\n     ItemMod(module),\n     ItemForeignMod(foreign_mod),\n+    ItemGlobalAsm(global_asm),\n     ItemTy(ty, generics),\n     ItemEnum(enum_def, generics),\n     ItemStruct(variant_data, generics),\n@@ -1014,6 +1016,19 @@ impl_stable_hash_for!(struct hir::InlineAsmOutput {\n     is_indirect\n });\n \n+impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for hir::GlobalAsm {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a, 'tcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let hir::GlobalAsm {\n+            asm,\n+            ctxt: _\n+        } = *self;\n+\n+        asm.hash_stable(hcx, hasher);\n+    }\n+}\n+\n impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for hir::InlineAsm {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'tcx>,\n@@ -1070,6 +1085,7 @@ impl_stable_hash_for!(enum hir::def::Def {\n     Upvar(def_id, index, expr_id),\n     Label(node_id),\n     Macro(def_id, macro_kind),\n+    GlobalAsm(def_id),\n     Err\n });\n "}, {"sha": "63455f94cedff32370213bbaf6f1e200fc8db518", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -267,7 +267,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ItemMod(..) | hir::ItemForeignMod(..) |\n                     hir::ItemImpl(..) | hir::ItemTrait(..) |\n                     hir::ItemStruct(..) | hir::ItemEnum(..) |\n-                    hir::ItemUnion(..) | hir::ItemDefaultImpl(..) => {}\n+                    hir::ItemUnion(..) | hir::ItemDefaultImpl(..) |\n+                    hir::ItemGlobalAsm(..) => {}\n                 }\n             }\n             hir_map::NodeTraitItem(trait_method) => {"}, {"sha": "b9938a04047c96b141fc5a47b7484dcffe5d1c87", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -314,7 +314,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::ItemUse(..) |\n             hir::ItemMod(..) |\n             hir::ItemDefaultImpl(..) |\n-            hir::ItemForeignMod(..) => {\n+            hir::ItemForeignMod(..) |\n+            hir::ItemGlobalAsm(..) => {\n                 // These sorts of items have no lifetime parameters at all.\n                 intravisit::walk_item(self, item);\n             }"}, {"sha": "44e291a44c7779e4ba1ae72b27514ee610647bfb", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -233,6 +233,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n                 hir::ItemStatic(..) |\n                 hir::ItemFn(..) |\n                 hir::ItemForeignMod(..) |\n+                hir::ItemGlobalAsm(..) |\n                 hir::ItemTy(..) => None,\n \n                 hir::ItemEnum(..) |"}, {"sha": "402166cc13fd933853955fa504921cbc238a62ae", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -507,6 +507,7 @@ extern \"C\" {\n \n     /// See Module::setModuleInlineAsm.\n     pub fn LLVMSetModuleInlineAsm(M: ModuleRef, Asm: *const c_char);\n+    pub fn LLVMRustAppendModuleInlineAsm(M: ModuleRef, Asm: *const c_char);\n \n     /// See llvm::LLVMTypeKind::getTypeID.\n     pub fn LLVMRustGetTypeKind(Ty: TypeRef) -> TypeKind;"}, {"sha": "3498be9dfdf3205d9dd7b5e1583fe9c9f4077143", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -429,6 +429,7 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Trait(_) => Def::Trait(did),\n             EntryKind::Enum(..) => Def::Enum(did),\n             EntryKind::MacroDef(_) => Def::Macro(did, MacroKind::Bang),\n+            EntryKind::GlobalAsm => Def::GlobalAsm(did),\n \n             EntryKind::ForeignMod |\n             EntryKind::Impl(_) |"}, {"sha": "0e204695e8f22660ef8c05afd4105a163c7116c5", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -677,6 +677,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n                 return self.encode_info_for_mod(FromId(item.id, (m, &item.attrs, &item.vis)));\n             }\n             hir::ItemForeignMod(_) => EntryKind::ForeignMod,\n+            hir::ItemGlobalAsm(..) => EntryKind::GlobalAsm,\n             hir::ItemTy(..) => EntryKind::Type,\n             hir::ItemEnum(..) => EntryKind::Enum(get_repr_options(&tcx, def_id)),\n             hir::ItemStruct(ref struct_def, _) => {\n@@ -917,6 +918,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n             hir::ItemFn(..) |\n             hir::ItemMod(..) |\n             hir::ItemForeignMod(..) |\n+            hir::ItemGlobalAsm(..) |\n             hir::ItemExternCrate(..) |\n             hir::ItemUse(..) |\n             hir::ItemDefaultImpl(..) |"}, {"sha": "6cd35f1335ed79ef423a7a25c95efcc284a47de1", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -267,6 +267,7 @@ pub enum EntryKind<'tcx> {\n     ForeignImmStatic,\n     ForeignMutStatic,\n     ForeignMod,\n+    GlobalAsm,\n     Type,\n     Enum(ReprOptions),\n     Field,\n@@ -297,6 +298,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for EntryKind<'tcx> {\n             EntryKind::ForeignImmStatic |\n             EntryKind::ForeignMutStatic |\n             EntryKind::ForeignMod       |\n+            EntryKind::GlobalAsm        |\n             EntryKind::Field |\n             EntryKind::Type => {\n                 // Nothing else to hash here."}, {"sha": "92f7e48b6be4853f23321529f98156d4be2cfe4d", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -160,7 +160,10 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                 self.prev_level\n             }\n             // Other `pub` items inherit levels from parents\n-            _ => {\n+            hir::ItemConst(..) | hir::ItemEnum(..) | hir::ItemExternCrate(..) |\n+            hir::ItemGlobalAsm(..) | hir::ItemFn(..) | hir::ItemMod(..) |\n+            hir::ItemStatic(..) | hir::ItemStruct(..) | hir::ItemTrait(..) |\n+            hir::ItemTy(..) | hir::ItemUnion(..) | hir::ItemUse(..) => {\n                 if item.vis == hir::Public { self.prev_level } else { None }\n             }\n         };\n@@ -212,7 +215,9 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            _ => {}\n+            hir::ItemUse(..) | hir::ItemStatic(..) | hir::ItemConst(..) |\n+            hir::ItemGlobalAsm(..) | hir::ItemTy(..) | hir::ItemMod(..) |\n+            hir::ItemFn(..) | hir::ItemExternCrate(..) | hir::ItemDefaultImpl(..) => {}\n         }\n \n         // Mark all items in interfaces of reachable items as reachable\n@@ -225,6 +230,8 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemUse(..) => {}\n             // The interface is empty\n             hir::ItemDefaultImpl(..) => {}\n+            // The interface is empty\n+            hir::ItemGlobalAsm(..) => {}\n             // Visit everything\n             hir::ItemConst(..) | hir::ItemStatic(..) |\n             hir::ItemFn(..) | hir::ItemTy(..) => {\n@@ -1092,6 +1099,8 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             hir::ItemMod(..) => {}\n             // Checked in resolve\n             hir::ItemUse(..) => {}\n+            // No subitems\n+            hir::ItemGlobalAsm(..) => {}\n             // Subitems of these items have inherited publicity\n             hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemFn(..) |\n             hir::ItemTy(..) => {"}, {"sha": "80f853778c744b50c909f011a589802c7da969fd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -268,6 +268,8 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, TypeNS, imported_binding);\n             }\n \n+            ItemKind::GlobalAsm(..) => {}\n+\n             ItemKind::Mod(..) if item.ident == keywords::Invalid.ident() => {} // Crate root\n \n             ItemKind::Mod(..) => {"}, {"sha": "6ba214f20f98d3b15ad4d603894231f283c40dd8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -1709,7 +1709,7 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n \n-            ItemKind::ExternCrate(_) | ItemKind::MacroDef(..) => {\n+            ItemKind::ExternCrate(_) | ItemKind::MacroDef(..) | ItemKind::GlobalAsm(_)=> {\n                 // do nothing, these are just around to be encoded\n             }\n "}, {"sha": "3e8f7e11b6b432fe9635ab655059349bbe6fbe9f", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -341,6 +341,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             Def::AssociatedTy(..) |\n             Def::AssociatedConst(..) |\n             Def::PrimTy(_) |\n+            Def::GlobalAsm(_) |\n             Def::Err => {\n                span_bug!(span,\n                          \"process_def_kind for unexpected item: {:?}\","}, {"sha": "d822f7bea3a30e57891bb1df04f4166bbbf82d0d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -701,6 +701,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Def::SelfTy(..) |\n             Def::Label(..) |\n             Def::Macro(..) |\n+            Def::GlobalAsm(..) |\n             Def::Err => None,\n         }\n     }"}, {"sha": "92cbd004206e7c53fc066821a34cc6418f5b5c58", "filename": "src/librustc_trans/asm.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_trans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_trans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fasm.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -124,3 +124,11 @@ pub fn trans_inline_asm<'a, 'tcx>(\n             llvm::LLVMMDNodeInContext(bcx.ccx.llcx(), &val, 1));\n     }\n }\n+\n+pub fn trans_global_asm<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                                  ga: &hir::GlobalAsm) {\n+    let asm = CString::new(ga.asm.as_str().as_bytes()).unwrap();\n+    unsafe {\n+        llvm::LLVMRustAppendModuleInlineAsm(ccx.llmod(), asm.as_ptr());\n+    }\n+}"}, {"sha": "ba2b807d5a01c9496fc7f1967faf00644576a28f", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -349,6 +349,9 @@ fn collect_items_rec<'a, 'tcx: 'a>(scx: &SharedCrateContext<'a, 'tcx>,\n \n             collect_neighbours(scx, instance, &mut neighbors);\n         }\n+        TransItem::GlobalAsm(..) => {\n+            recursion_depth_reset = None;\n+        }\n     }\n \n     record_inlining_canditates(scx.tcx(), starting_point, &neighbors[..], inlining_map);\n@@ -840,6 +843,12 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                     }\n                 }\n             }\n+            hir::ItemGlobalAsm(..) => {\n+                debug!(\"RootCollector: ItemGlobalAsm({})\",\n+                       def_id_to_string(self.scx.tcx(),\n+                                        self.scx.tcx().hir.local_def_id(item.id)));\n+                self.output.push(TransItem::GlobalAsm(item.id));\n+            }\n             hir::ItemStatic(..) => {\n                 debug!(\"RootCollector: ItemStatic({})\",\n                        def_id_to_string(self.scx.tcx(),"}, {"sha": "4973181202eeddcea8a787e66e53b42cecaba165", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -185,15 +185,16 @@ impl<'tcx> CodegenUnit<'tcx> {\n             symbol_name.len().hash(&mut state);\n             symbol_name.hash(&mut state);\n             let exported = match item {\n-               TransItem::Fn(ref instance) => {\n-                   let node_id =\n-                       scx.tcx().hir.as_local_node_id(instance.def_id());\n+                TransItem::Fn(ref instance) => {\n+                    let node_id =\n+                        scx.tcx().hir.as_local_node_id(instance.def_id());\n                     node_id.map(|node_id| exported_symbols.contains(&node_id))\n-                           .unwrap_or(false)\n-               }\n-               TransItem::Static(node_id) => {\n+                        .unwrap_or(false)\n+                }\n+                TransItem::Static(node_id) => {\n                     exported_symbols.contains(&node_id)\n-               }\n+                }\n+                TransItem::GlobalAsm(..) => true,\n             };\n             exported.hash(&mut state);\n         }\n@@ -243,7 +244,9 @@ impl<'tcx> CodegenUnit<'tcx> {\n                 TransItem::Fn(instance) => {\n                     tcx.hir.as_local_node_id(instance.def_id())\n                 }\n-                TransItem::Static(node_id) => Some(node_id),\n+                TransItem::Static(node_id) | TransItem::GlobalAsm(node_id) => {\n+                    Some(node_id)\n+                }\n             }\n         }\n     }\n@@ -338,7 +341,8 @@ fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                 None => {\n                     match trans_item {\n                         TransItem::Fn(..) |\n-                        TransItem::Static(..) => llvm::ExternalLinkage,\n+                        TransItem::Static(..) |\n+                        TransItem::GlobalAsm(..) => llvm::ExternalLinkage,\n                     }\n                 }\n             };\n@@ -483,7 +487,8 @@ fn characteristic_def_id_of_trans_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 't\n \n             Some(def_id)\n         }\n-        TransItem::Static(node_id) => Some(tcx.hir.local_def_id(node_id)),\n+        TransItem::Static(node_id) |\n+        TransItem::GlobalAsm(node_id) => Some(tcx.hir.local_def_id(node_id)),\n     }\n }\n "}, {"sha": "36c3981e3a6f240c2b78538f8a8e03a4ac8ed4c4", "filename": "src/librustc_trans/symbol_map.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_trans%2Fsymbol_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_trans%2Fsymbol_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_map.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -99,7 +99,10 @@ impl<'tcx> SymbolMap<'tcx> {\n                 TransItem::Fn(Instance { def, .. }) => {\n                     tcx.hir.as_local_node_id(def.def_id())\n                 }\n-                TransItem::Static(node_id) => Some(node_id),\n+                TransItem::Static(node_id) |\n+                TransItem::GlobalAsm(node_id) => {\n+                    Some(node_id)\n+                }\n             }.map(|node_id| {\n                 tcx.hir.span(node_id)\n             })"}, {"sha": "f5556bb8382f6540f58bea55168ad96429475e56", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -14,6 +14,7 @@\n //! item-path. This is used for unit testing the code that generates\n //! paths etc in all kinds of annoying scenarios.\n \n+use asm;\n use attributes;\n use base;\n use consts;\n@@ -38,7 +39,8 @@ use std::iter;\n #[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n pub enum TransItem<'tcx> {\n     Fn(Instance<'tcx>),\n-    Static(NodeId)\n+    Static(NodeId),\n+    GlobalAsm(NodeId),\n }\n \n /// Describes how a translation item will be instantiated in object files.\n@@ -89,6 +91,14 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                     span_bug!(item.span, \"Mismatch between hir::Item type and TransItem type\")\n                 }\n             }\n+            TransItem::GlobalAsm(node_id) => {\n+                let item = ccx.tcx().hir.expect_item(node_id);\n+                if let hir::ItemGlobalAsm(ref ga) = item.node {\n+                    asm::trans_global_asm(ccx, ga);\n+                } else {\n+                    span_bug!(item.span, \"Mismatch between hir::Item type and TransItem type\")\n+                }\n+            }\n             TransItem::Fn(instance) => {\n                 let _task = ccx.tcx().dep_graph.in_task(\n                     DepNode::TransCrateItem(instance.def_id())); // (*)\n@@ -123,6 +133,7 @@ impl<'a, 'tcx> TransItem<'tcx> {\n             TransItem::Fn(instance) => {\n                 TransItem::predefine_fn(ccx, instance, linkage, &symbol_name);\n             }\n+            TransItem::GlobalAsm(..) => {}\n         }\n \n         debug!(\"END PREDEFINING '{} ({})' in cgu {}\",\n@@ -185,6 +196,10 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                 let def_id = scx.tcx().hir.local_def_id(node_id);\n                 symbol_names::symbol_name(Instance::mono(scx.tcx(), def_id), scx)\n             }\n+            TransItem::GlobalAsm(node_id) => {\n+                let def_id = scx.tcx().hir.local_def_id(node_id);\n+                format!(\"global_asm_{:?}\", def_id)\n+            }\n         }\n     }\n \n@@ -202,6 +217,7 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                 }\n             }\n             TransItem::Static(..) => InstantiationMode::GloballyShared,\n+            TransItem::GlobalAsm(..) => InstantiationMode::GloballyShared,\n         }\n     }\n \n@@ -210,14 +226,16 @@ impl<'a, 'tcx> TransItem<'tcx> {\n             TransItem::Fn(ref instance) => {\n                 instance.substs.types().next().is_some()\n             }\n-            TransItem::Static(..)   => false,\n+            TransItem::Static(..) |\n+            TransItem::GlobalAsm(..) => false,\n         }\n     }\n \n     pub fn explicit_linkage(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<llvm::Linkage> {\n         let def_id = match *self {\n             TransItem::Fn(ref instance) => instance.def_id(),\n             TransItem::Static(node_id) => tcx.hir.local_def_id(node_id),\n+            TransItem::GlobalAsm(..) => return None,\n         };\n \n         let attributes = tcx.get_attrs(def_id);\n@@ -249,6 +267,9 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                 let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n                 to_string_internal(tcx, \"static \", instance)\n             },\n+            TransItem::GlobalAsm(..) => {\n+                \"global_asm\".to_string()\n+            }\n         };\n \n         fn to_string_internal<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -273,6 +294,9 @@ impl<'a, 'tcx> TransItem<'tcx> {\n             TransItem::Static(id) => {\n                 format!(\"Static({:?})\", id)\n             }\n+            TransItem::GlobalAsm(id) => {\n+                format!(\"GlobalAsm({:?})\", id)\n+            }\n         }\n     }\n }"}, {"sha": "649353d52f6aaf29052d3b783a52d38c4c1682f1", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -490,8 +490,10 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n     let def_id = tcx.hir.local_def_id(item_id);\n     match it.node {\n         // These don't define types.\n-        hir::ItemExternCrate(_) | hir::ItemUse(..) | hir::ItemMod(_) => {\n-        }\n+        hir::ItemExternCrate(_) |\n+        hir::ItemUse(..) |\n+        hir::ItemMod(_) |\n+        hir::ItemGlobalAsm(_) => {}\n         hir::ItemForeignMod(ref foreign_mod) => {\n             for item in &foreign_mod.items {\n                 let def_id = tcx.hir.local_def_id(item.id);\n@@ -543,12 +545,12 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             tcx.item_generics(def_id);\n             tcx.item_type(def_id);\n             tcx.item_predicates(def_id);\n-        },\n-        _ => {\n+        }\n+        hir::ItemStatic(..) | hir::ItemConst(..) | hir::ItemFn(..) => {\n             tcx.item_generics(def_id);\n             tcx.item_type(def_id);\n             tcx.item_predicates(def_id);\n-        },\n+        }\n     }\n }\n \n@@ -1074,6 +1076,7 @@ fn ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 ItemTrait(..) |\n                 ItemMod(..) |\n                 ItemForeignMod(..) |\n+                ItemGlobalAsm(..) |\n                 ItemExternCrate(..) |\n                 ItemUse(..) => {\n                     span_bug!("}, {"sha": "1bde1eea37c39a0b16c7032a1a16b6fcabb3c628", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -113,6 +113,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n             hir::ItemFn(..) |\n             hir::ItemMod(..) |\n             hir::ItemForeignMod(..) |\n+            hir::ItemGlobalAsm(..) |\n             hir::ItemTy(..) |\n             hir::ItemImpl(..) |\n             hir::ItemDefaultImpl(..) => {}"}, {"sha": "890414e317c62f3bc522d7660cfef818a6ef4478", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -251,6 +251,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n             hir::ItemFn(..) |\n             hir::ItemMod(..) |\n             hir::ItemForeignMod(..) |\n+            hir::ItemGlobalAsm(..) |\n             hir::ItemTy(..) => {}\n         }\n     }"}, {"sha": "4252f2981ed6193e1ba5d59166c7c7eea0b037ab", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -373,6 +373,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             }\n             // If we're inlining, skip private items.\n             _ if self.inlining && item.vis != hir::Public => {}\n+            hir::ItemGlobalAsm(..) => {}\n             hir::ItemExternCrate(ref p) => {\n                 let cstore = &self.cx.sess().cstore;\n                 om.extern_crates.push(ExternCrate {"}, {"sha": "131adfe47afdac6646dbd31819235deb53b20e02", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -1585,6 +1585,15 @@ pub struct ForeignMod {\n     pub items: Vec<ForeignItem>,\n }\n \n+/// Global inline assembly\n+///\n+/// aka module-level assembly or file-scoped assembly\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+pub struct GlobalAsm {\n+    pub asm: Symbol,\n+    pub ctxt: SyntaxContext,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct EnumDef {\n     pub variants: Vec<Variant>,\n@@ -1812,6 +1821,8 @@ pub enum ItemKind {\n     ///\n     /// E.g. `extern {}` or `extern \"C\" {}`\n     ForeignMod(ForeignMod),\n+    /// Module-level inline assembly (from `global_asm!()`)\n+    GlobalAsm(P<GlobalAsm>),\n     /// A type alias (`type` or `pub type`).\n     ///\n     /// E.g. `type Foo = Bar<u8>;`\n@@ -1864,6 +1875,7 @@ impl ItemKind {\n             ItemKind::Fn(..) => \"function\",\n             ItemKind::Mod(..) => \"module\",\n             ItemKind::ForeignMod(..) => \"foreign module\",\n+            ItemKind::GlobalAsm(..) => \"global asm\",\n             ItemKind::Ty(..) => \"type alias\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\","}, {"sha": "48bfc050223ab82ab60fe6581280c16fe70410a0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -1039,6 +1039,7 @@ impl<'feat> ExpansionConfig<'feat> {\n     feature_tests! {\n         fn enable_quotes = quote,\n         fn enable_asm = asm,\n+        fn enable_global_asm = global_asm,\n         fn enable_log_syntax = log_syntax,\n         fn enable_concat_idents = concat_idents,\n         fn enable_trace_macros = trace_macros,"}, {"sha": "8b62416dcbdbd6e541f68b055ac8f8933dfc3a95", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -346,6 +346,9 @@ declare_features! (\n \n     // Hack to document `-Z linker-flavor` in The Unstable Book\n     (active, linker_flavor, \"1.18.0\", Some(41142)),\n+\n+    // Allows module-level inline assembly by way of global_asm!()\n+    (active, global_asm, \"1.18.0\", Some(35119)),\n );\n \n declare_features! (\n@@ -982,6 +985,9 @@ pub const EXPLAIN_STMT_ATTR_SYNTAX: &'static str =\n pub const EXPLAIN_ASM: &'static str =\n     \"inline assembly is not stable enough for use and is subject to change\";\n \n+pub const EXPLAIN_GLOBAL_ASM: &'static str =\n+    \"`global_asm!` is not stable enough for use and is subject to change\";\n+\n pub const EXPLAIN_LOG_SYNTAX: &'static str =\n     \"`log_syntax!` is not stable enough for use and is subject to change\";\n "}, {"sha": "a6ab8e10d9f91aef1cff7fe1944be51965869e5c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -140,6 +140,10 @@ pub trait Folder : Sized {\n         noop_fold_foreign_mod(nm, self)\n     }\n \n+    fn fold_global_asm(&mut self, ga: P<GlobalAsm>) -> P<GlobalAsm> {\n+        noop_fold_global_asm(ga, self)\n+    }\n+\n     fn fold_variant(&mut self, v: Variant) -> Variant {\n         noop_fold_variant(v, self)\n     }\n@@ -412,6 +416,11 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n     }\n }\n \n+pub fn noop_fold_global_asm<T: Folder>(ga: P<GlobalAsm>,\n+                                       _: &mut T) -> P<GlobalAsm> {\n+    ga\n+}\n+\n pub fn noop_fold_variant<T: Folder>(v: Variant, fld: &mut T) -> Variant {\n     Spanned {\n         node: Variant_ {\n@@ -867,6 +876,7 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n         }\n         ItemKind::Mod(m) => ItemKind::Mod(folder.fold_mod(m)),\n         ItemKind::ForeignMod(nm) => ItemKind::ForeignMod(folder.fold_foreign_mod(nm)),\n+        ItemKind::GlobalAsm(ga) => ItemKind::GlobalAsm(folder.fold_global_asm(ga)),\n         ItemKind::Ty(t, generics) => {\n             ItemKind::Ty(folder.fold_ty(t), folder.fold_generics(generics))\n         }"}, {"sha": "433ba3d3693f1a396565ec486d2b2d4e53a5d1e5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -1267,6 +1267,11 @@ impl<'a> State<'a> {\n                 self.print_foreign_mod(nmod, &item.attrs)?;\n                 self.bclose(item.span)?;\n             }\n+            ast::ItemKind::GlobalAsm(ref ga) => {\n+                self.head(&visibility_qualified(&item.vis, \"global_asm!\"))?;\n+                word(&mut self.s, &ga.asm.as_str())?;\n+                self.end()?;\n+            }\n             ast::ItemKind::Ty(ref ty, ref params) => {\n                 self.ibox(INDENT_UNIT)?;\n                 self.ibox(0)?;"}, {"sha": "bae1c56db007c66d137cca850179820e91b77eaa", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -58,6 +58,7 @@ pub trait Visitor<'ast>: Sized {\n     }\n     fn visit_mod(&mut self, m: &'ast Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n     fn visit_foreign_item(&mut self, i: &'ast ForeignItem) { walk_foreign_item(self, i) }\n+    fn visit_global_asm(&mut self, ga: &'ast GlobalAsm) { walk_global_asm(self, ga) }\n     fn visit_item(&mut self, i: &'ast Item) { walk_item(self, i) }\n     fn visit_local(&mut self, l: &'ast Local) { walk_local(self, l) }\n     fn visit_block(&mut self, b: &'ast Block) { walk_block(self, b) }\n@@ -253,6 +254,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         ItemKind::ForeignMod(ref foreign_module) => {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n+        ItemKind::GlobalAsm(ref ga) => visitor.visit_global_asm(ga),\n         ItemKind::Ty(ref typ, ref type_parameters) => {\n             visitor.visit_ty(typ);\n             visitor.visit_generics(type_parameters)\n@@ -464,6 +466,10 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, foreign_item: &'a\n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);\n }\n \n+pub fn walk_global_asm<'a, V: Visitor<'a>>(_: &mut V, _: &'a GlobalAsm) {\n+    // Empty!\n+}\n+\n pub fn walk_ty_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a TyParamBound) {\n     match *bound {\n         TraitTyParamBound(ref typ, ref modifier) => {"}, {"sha": "dc67e1c45f6e721f940d0a28530bb394b8231e5d", "filename": "src/libsyntax_ext/global_asm.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// Module-level assembly support.\n+///\n+/// The macro defined here allows you to specify \"top-level\",\n+/// \"file-scoped\", or \"module-level\" assembly. These synonyms\n+/// all correspond to LLVM's module-level inline assembly instruction.\n+///\n+/// For example, `global_asm!(\"some assembly here\")` translates to\n+/// LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n+/// therefore apply.\n+\n+use syntax::ast;\n+use syntax::ext::base;\n+use syntax::ext::base::*;\n+use syntax::feature_gate;\n+use syntax::ptr::P;\n+use syntax::symbol::Symbol;\n+use syntax_pos::Span;\n+use syntax::tokenstream;\n+\n+use syntax::util::small_vector::SmallVector;\n+\n+pub const MACRO: &'static str = \"global_asm\";\n+\n+pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n+                              sp: Span,\n+                              tts: &[tokenstream::TokenTree]) -> Box<base::MacResult + 'cx> {\n+    if !cx.ecfg.enable_global_asm() {\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n+                                       MACRO,\n+                                       sp,\n+                                       feature_gate::GateIssue::Language,\n+                                       feature_gate::EXPLAIN_GLOBAL_ASM);\n+        return DummyResult::any(sp);\n+    }\n+\n+    let mut p = cx.new_parser_from_tts(tts);\n+    let (asm, _) = match expr_to_string(cx,\n+                                        panictry!(p.parse_expr()),\n+                                        \"inline assembly must be a string literal\") {\n+        Some((s, st)) => (s, st),\n+        None => return DummyResult::any(sp),\n+    };\n+\n+    MacEager::items(SmallVector::one(P(ast::Item {\n+        ident: ast::Ident::with_empty_ctxt(Symbol::intern(\"\")),\n+        attrs: Vec::new(),\n+        id: ast::DUMMY_NODE_ID,\n+        node: ast::ItemKind::GlobalAsm(P(ast::GlobalAsm {\n+            asm: asm,\n+            ctxt: cx.backtrace(),\n+        })),\n+        vis: ast::Visibility::Inherited,\n+        span: sp,\n+    })))\n+}"}, {"sha": "e35e79df5852066cea8c85a228e3c89b9a40aa65", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -38,6 +38,7 @@ mod concat_idents;\n mod env;\n mod format;\n mod format_foreign;\n+mod global_asm;\n mod log_syntax;\n mod trace_macros;\n \n@@ -99,6 +100,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n         module_path: expand_mod,\n \n         asm: asm::expand_asm,\n+        global_asm: global_asm::expand_global_asm,\n         cfg: cfg::expand_cfg,\n         concat: concat::expand_syntax_ext,\n         concat_idents: concat_idents::expand_syntax_ext,"}, {"sha": "c24867224ea864cd94733550001037fe7dee83fa", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -312,6 +312,10 @@ extern \"C\" LLVMValueRef LLVMRustInlineAsm(LLVMTypeRef Ty, char *AsmString,\n                              HasSideEffects, IsAlignStack, fromRust(Dialect)));\n }\n \n+extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm) {\n+  unwrap(M)->appendModuleInlineAsm(StringRef(Asm));\n+}\n+\n typedef DIBuilder *LLVMRustDIBuilderRef;\n \n typedef struct LLVMOpaqueMetadata *LLVMRustMetadataRef;"}, {"sha": "304d82aa0c653d6a55a87d04463fb9c74694a345", "filename": "src/test/codegen/foo.s", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Fcodegen%2Ffoo.s", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Fcodegen%2Ffoo.s", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffoo.s?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -0,0 +1,3 @@\n+.global foo\n+foo:\n+    jmp baz"}, {"sha": "5bd0c1b4076ee22a852b7aedba92d9345770430a", "filename": "src/test/codegen/global_asm.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Fcodegen%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Fcodegen%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fglobal_asm.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -0,0 +1,73 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-aarch64\n+// ignore-aarch64_be\n+// ignore-arm\n+// ignore-armeb\n+// ignore-avr\n+// ignore-bpfel\n+// ignore-bpfeb\n+// ignore-hexagon\n+// ignore-mips\n+// ignore-mipsel\n+// ignore-mips64\n+// ignore-mips64el\n+// ignore-msp430\n+// ignore-powerpc64\n+// ignore-powerpc64le\n+// ignore-powerpc\n+// ignore-r600\n+// ignore-amdgcn\n+// ignore-sparc\n+// ignore-sparcv9\n+// ignore-sparcel\n+// ignore-s390x\n+// ignore-tce\n+// ignore-thumb\n+// ignore-thumbeb\n+// ignore-xcore\n+// ignore-nvptx\n+// ignore-nvptx64\n+// ignore-le32\n+// ignore-le64\n+// ignore-amdil\n+// ignore-amdil64\n+// ignore-hsail\n+// ignore-hsail64\n+// ignore-spir\n+// ignore-spir64\n+// ignore-kalimba\n+// ignore-shave\n+// ignore-wasm32\n+// ignore-wasm64\n+// ignore-emscripten\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![feature(global_asm)]\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: foo\n+// CHECK: module asm\n+// this regex will capture the correct unconditional branch inst.\n+// CHECK: module asm \"{{[[:space:]]+}}jmp baz\"\n+global_asm!(r#\"\n+    .global foo\n+foo:\n+    jmp baz\n+\"#);\n+\n+extern \"C\" {\n+    fn foo();\n+}\n+\n+// CHECK-LABEL: @baz\n+#[no_mangle]\n+pub unsafe extern \"C\" fn baz() {}"}, {"sha": "401b1fad566d5c81c2621860a5089be83b3668ac", "filename": "src/test/codegen/global_asm_include.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Fcodegen%2Fglobal_asm_include.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Fcodegen%2Fglobal_asm_include.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fglobal_asm_include.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-aarch64\n+// ignore-aarch64_be\n+// ignore-arm\n+// ignore-armeb\n+// ignore-avr\n+// ignore-bpfel\n+// ignore-bpfeb\n+// ignore-hexagon\n+// ignore-mips\n+// ignore-mipsel\n+// ignore-mips64\n+// ignore-mips64el\n+// ignore-msp430\n+// ignore-powerpc64\n+// ignore-powerpc64le\n+// ignore-powerpc\n+// ignore-r600\n+// ignore-amdgcn\n+// ignore-sparc\n+// ignore-sparcv9\n+// ignore-sparcel\n+// ignore-s390x\n+// ignore-tce\n+// ignore-thumb\n+// ignore-thumbeb\n+// ignore-xcore\n+// ignore-nvptx\n+// ignore-nvptx64\n+// ignore-le32\n+// ignore-le64\n+// ignore-amdil\n+// ignore-amdil64\n+// ignore-hsail\n+// ignore-hsail64\n+// ignore-spir\n+// ignore-spir64\n+// ignore-kalimba\n+// ignore-shave\n+// ignore-wasm32\n+// ignore-wasm64\n+// ignore-emscripten\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![feature(global_asm)]\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: foo\n+// CHECK: module asm\n+// CHECK: module asm \"{{[[:space:]]+}}jmp baz\"\n+global_asm!(include_str!(\"foo.s\"));\n+\n+extern \"C\" {\n+    fn foo();\n+}\n+\n+// CHECK-LABEL: @baz\n+#[no_mangle]\n+pub unsafe extern \"C\" fn baz() {}"}, {"sha": "8b59165e9e61bb61881eb45bc6df01909185566d", "filename": "src/test/codegen/global_asm_x2.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Fcodegen%2Fglobal_asm_x2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Fcodegen%2Fglobal_asm_x2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fglobal_asm_x2.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -0,0 +1,90 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-aarch64\n+// ignore-aarch64_be\n+// ignore-arm\n+// ignore-armeb\n+// ignore-avr\n+// ignore-bpfel\n+// ignore-bpfeb\n+// ignore-hexagon\n+// ignore-mips\n+// ignore-mipsel\n+// ignore-mips64\n+// ignore-mips64el\n+// ignore-msp430\n+// ignore-powerpc64\n+// ignore-powerpc64le\n+// ignore-powerpc\n+// ignore-r600\n+// ignore-amdgcn\n+// ignore-sparc\n+// ignore-sparcv9\n+// ignore-sparcel\n+// ignore-s390x\n+// ignore-tce\n+// ignore-thumb\n+// ignore-thumbeb\n+// ignore-xcore\n+// ignore-nvptx\n+// ignore-nvptx64\n+// ignore-le32\n+// ignore-le64\n+// ignore-amdil\n+// ignore-amdil64\n+// ignore-hsail\n+// ignore-hsail64\n+// ignore-spir\n+// ignore-spir64\n+// ignore-kalimba\n+// ignore-shave\n+// ignore-wasm32\n+// ignore-wasm64\n+// ignore-emscripten\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![feature(global_asm)]\n+#![crate_type = \"lib\"]\n+#[no_std]\n+\n+// CHECK-LABEL: foo\n+// CHECK: module asm\n+// CHECK: module asm \"{{[[:space:]]+}}jmp baz\"\n+// any other global_asm will be appended to this first block, so:\n+// CHECK-LABEL: bar\n+// CHECK: module asm \"{{[[:space:]]+}}jmp quux\"\n+global_asm!(r#\"\n+    .global foo\n+foo:\n+    jmp baz\n+\"#);\n+\n+extern \"C\" {\n+    fn foo();\n+}\n+\n+// CHECK-LABEL: @baz\n+#[no_mangle]\n+pub unsafe extern \"C\" fn baz() {}\n+\n+// no checks here; this has been appended to the first occurrence\n+global_asm!(r#\"\n+    .global bar\n+bar:\n+    jmp quux\n+\"#);\n+\n+extern \"C\" {\n+    fn bar();\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn quux() {}"}, {"sha": "0560abb6af498fb1e8e6b6d76af34f156dae70b9", "filename": "src/test/compile-fail/feature-gate-global_asm.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-global_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-global_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-global_asm.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// gate-test-global_asm\n+\n+global_asm!(\"\"); //~ ERROR `global_asm!` is not stable\n+\n+fn main() {}"}, {"sha": "db73da2747f9c1725d23a39ffd5dc7811422cd2b", "filename": "src/test/run-pass/empty_global_asm.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Frun-pass%2Fempty_global_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Frun-pass%2Fempty_global_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty_global_asm.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(global_asm)]\n+\n+#[cfg(target_arch = \"x86\")]\n+global_asm!(\"\");\n+\n+#[cfg(target_arch = \"x86_64\")]\n+global_asm!(\"\");\n+\n+#[cfg(target_arch = \"arm\")]\n+global_asm!(\"\");\n+\n+#[cfg(target_arch = \"aarch64\")]\n+global_asm!(\"\");\n+\n+#[cfg(target_arch = \"mips\")]\n+global_asm!(\"\");\n+\n+fn main() {}"}, {"sha": "cd8273c6bc2b8fdcaef69e7cb72ded2c991a88c1", "filename": "src/test/run-pass/simple_global_asm.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Frun-pass%2Fsimple_global_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6b445aa2fc71f626dff7f7c7988b04f4a292d/src%2Ftest%2Frun-pass%2Fsimple_global_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple_global_asm.rs?ref=e6f6b445aa2fc71f626dff7f7c7988b04f4a292d", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(global_asm)]\n+#![feature(naked_functions)]\n+\n+#[cfg(any(target_arch = \"x86_64\", target_arch = \"x86\"))]\n+global_asm!(r#\"\n+    .global foo\n+    .global _foo\n+foo:\n+_foo:\n+    ret\n+\"#);\n+\n+extern {\n+    fn foo();\n+}\n+\n+#[cfg(any(target_arch = \"x86_64\", target_arch = \"x86\"))]\n+fn main() { unsafe { foo(); } }\n+\n+#[cfg(not(any(target_arch = \"x86_64\", target_arch = \"x86\")))]\n+fn main() {}"}]}