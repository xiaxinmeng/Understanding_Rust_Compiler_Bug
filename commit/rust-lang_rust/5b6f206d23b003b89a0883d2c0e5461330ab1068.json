{"sha": "5b6f206d23b003b89a0883d2c0e5461330ab1068", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNmYyMDZkMjNiMDAzYjg5YTA4ODNkMmMwZTU0NjEzMzBhYjEwNjg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-19T21:37:26Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-27T14:23:48Z"}, "message": "Fix super_traits_of to consider where bounds", "tree": {"sha": "a2be8648683e9240cbbebed6d3a6bfd01368a681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2be8648683e9240cbbebed6d3a6bfd01368a681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b6f206d23b003b89a0883d2c0e5461330ab1068", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/BC/QACgkQgTGiTgx5\n76+emQ//aTj6h0uQAq4e4zj8NxUeduJKNq5ro6/gTTRH3074X7gheeDU4kIz21Iy\ng0BwoWRzDmH7f6Em1bNnuPa9pFsktlswYqiVCAQO2ZyhGx22ClhScGjdR6qW8F6m\n+MdTPJXjV5Z+5YqUEuRs23384IQQ+TrbNibGkBHmNnoJ6ohPvzTjiV+SEAAVFmJB\nSpEmjtBMBM1H3n25cS5i6tH2W38TwsD2uiknrdTpaQtSrqA3sSuaciK0kikfIaQm\ntHCtpnRjNflwjS8ffAfLe3pXp5czXoVUigncVZB21/NbUTbSfhUwhmOWerNSxaWd\nB/4rrH1Fq6TpkRU2p2ZlYl92GWFptrZtTJFb09BY2CjfMOkSPoczeIN+9VQUplO1\nUX8DQ53gMd9RYRZ9LG2S2Slq8RSxK6eswq7GY3SR2U4f/yaoUWcG0i+ivgL+AYsw\n5quUT/6tg3ex6F+B5wQigJzYy2Pu5yqMmeL9EiHbgBzJYQM1R4j983YpvF2rG/Cy\nINM+O1waQQwi2CrVkt0kYlwstUKRU7yBW+YQry4X0ERNp3QHQaMGpLtg7Rcc9w/0\nxZo5iAyUOzA1gdXifn/h8Gl4mJ8xnybcrF7w9CtPu8u/E0KdSTer2Dcn2kJhgFcb\nrGbsIka8rQ4e60PN9ule7s8mTWeWWnnV4s5VpH6bkowU2w4i7mg=\n=suSp\n-----END PGP SIGNATURE-----", "payload": "tree a2be8648683e9240cbbebed6d3a6bfd01368a681\nparent 4a97c52630f9d8c5df3c229b1c2c0fb0fa3f3ca2\nauthor Santiago Pastorino <spastorino@gmail.com> 1605821846 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1606487028 -0300\n\nFix super_traits_of to consider where bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6f206d23b003b89a0883d2c0e5461330ab1068", "html_url": "https://github.com/rust-lang/rust/commit/5b6f206d23b003b89a0883d2c0e5461330ab1068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b6f206d23b003b89a0883d2c0e5461330ab1068/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a97c52630f9d8c5df3c229b1c2c0fb0fa3f3ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a97c52630f9d8c5df3c229b1c2c0fb0fa3f3ca2", "html_url": "https://github.com/rust-lang/rust/commit/4a97c52630f9d8c5df3c229b1c2c0fb0fa3f3ca2"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "6a33bc8868572b6140be4c9eb66e86147ec953b3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b6f206d23b003b89a0883d2c0e5461330ab1068/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6f206d23b003b89a0883d2c0e5461330ab1068/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=5b6f206d23b003b89a0883d2c0e5461330ab1068", "patch": "@@ -1133,10 +1133,12 @@ pub fn super_traits_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> impl Iterator<It\n                 _ => bug!(\"super_trait_of {} is not an item\", trait_hir_id),\n             };\n \n-            let supertraits = match item.kind {\n-                hir::ItemKind::Trait(.., ref supertraits, _) => supertraits,\n-                hir::ItemKind::TraitAlias(_, ref supertraits) => supertraits,\n-                _ => span_bug!(item.span, \"super_trait_of invoked on non-trait\"),\n+            let (generics, supertraits) = match item.kind {\n+                hir::ItemKind::Trait(.., ref generics, ref supertraits, _) => {\n+                    (generics, supertraits)\n+                }\n+                hir::ItemKind::TraitAlias(ref generics, ref supertraits) => (generics, supertraits),\n+                _ => span_bug!(item.span, \"super_predicates invoked on non-trait\"),\n             };\n \n             for supertrait in supertraits.iter() {\n@@ -1145,6 +1147,26 @@ pub fn super_traits_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> impl Iterator<It\n                     stack.push(trait_did);\n                 }\n             }\n+\n+            let icx = ItemCtxt::new(tcx, trait_did);\n+            // Convert any explicit superbounds in the where-clause,\n+            // e.g., `trait Foo where Self: Bar`.\n+            // In the case of trait aliases, however, we include all bounds in the where-clause,\n+            // so e.g., `trait Foo = where u32: PartialEq<Self>` would include `u32: PartialEq<Self>`\n+            // as one of its \"superpredicates\".\n+            let is_trait_alias = tcx.is_trait_alias(trait_did);\n+            let self_param_ty = tcx.types.self_param;\n+            for (predicate, _) in icx.type_parameter_bounds_in_generics(\n+                generics,\n+                item.hir_id,\n+                self_param_ty,\n+                OnlySelfBounds(!is_trait_alias),\n+                None,\n+            ) {\n+                if let ty::PredicateAtom::Trait(data, _) = predicate.skip_binders() {\n+                    stack.push(data.def_id());\n+                }\n+            }\n         } else {\n             let generic_predicates = tcx.super_predicates_of(trait_did);\n             for (predicate, _) in generic_predicates.predicates {"}, {"sha": "3eb50ab554735e7b680dfe43d2ef9e5324fb4b1b", "filename": "src/test/ui/associated-type-bounds/associated-item-through-where-clause.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b6f206d23b003b89a0883d2c0e5461330ab1068/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassociated-item-through-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6f206d23b003b89a0883d2c0e5461330ab1068/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassociated-item-through-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassociated-item-through-where-clause.rs?ref=5b6f206d23b003b89a0883d2c0e5461330ab1068", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+trait Foo {\n+    type Item;\n+}\n+\n+trait Bar\n+where\n+    Self: Foo,\n+{\n+}\n+\n+#[allow(dead_code)]\n+fn foo<M>(_m: M)\n+where\n+    M: Bar,\n+    M::Item: Send,\n+{\n+}\n+\n+fn main() {}"}]}