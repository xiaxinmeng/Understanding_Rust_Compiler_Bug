{"sha": "5258a74c887f8ae14717e1f98b652b470877ce4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNThhNzRjODg3ZjhhZTE0NzE3ZTFmOThiNjUyYjQ3MDg3N2NlNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-13T11:22:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-13T11:22:10Z"}, "message": "Auto merge of #84153 - Dylan-DPC:rollup-5jiqrwu, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #83438 (Update RELEASES.md)\n - #83707 (Remove `T: Debug` bound on UnsafeCell Debug impl)\n - #84084 (Stabilize duration_zero.)\n - #84121 (Stabilize BTree{Map,Set}::retain)\n - #84140 (Don't call bump in check_mistyped_turbofish_with_multiple_type_params)\n - #84141 (Fix typo in error message)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5186511675b49b2d23ba9939e4574d06d7329538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5186511675b49b2d23ba9939e4574d06d7329538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5258a74c887f8ae14717e1f98b652b470877ce4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5258a74c887f8ae14717e1f98b652b470877ce4e", "html_url": "https://github.com/rust-lang/rust/commit/5258a74c887f8ae14717e1f98b652b470877ce4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5258a74c887f8ae14717e1f98b652b470877ce4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7eb85b1df5fce97e274569acf403c212aab517", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7eb85b1df5fce97e274569acf403c212aab517", "html_url": "https://github.com/rust-lang/rust/commit/2e7eb85b1df5fce97e274569acf403c212aab517"}, {"sha": "91c08288c4369fd746bfb334d4eecb403c61203e", "url": "https://api.github.com/repos/rust-lang/rust/commits/91c08288c4369fd746bfb334d4eecb403c61203e", "html_url": "https://github.com/rust-lang/rust/commit/91c08288c4369fd746bfb334d4eecb403c61203e"}], "stats": {"total": 128, "additions": 97, "deletions": 31}, "files": [{"sha": "024610bc7a417a1bc2761d12c214941a947f036b", "filename": "RELEASES.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -50,6 +50,8 @@ Libraries\n - [`io::Empty` now implements `io::Seek`.][78044]\n - [`rc::Weak<T>` and `sync::Weak<T>`'s methods such as `as_ptr` are now implemented for\n   `T: ?Sized` types.][80764]\n+- [`Div` and `Rem` by their `NonZero` variant is now implemented for all unsigned integers.][79134]\n+\n \n Stabilized APIs\n ---------------\n@@ -72,6 +74,8 @@ Stabilized APIs\n - [`str::split_inclusive`]\n - [`sync::OnceState`]\n - [`task::Wake`]\n+- [`VecDeque::range`]\n+- [`VecDeque::range_mut`]\n \n Cargo\n -----\n@@ -115,6 +119,7 @@ Compatibility Notes\n     - `thumbv7neon-unknown-linux-gnueabihf`\n     - `armv7-unknown-linux-gnueabi`\n     - `x86_64-unknown-linux-gnux32`\n+- [`atomic::spin_loop_hint` has been deprecated.][80966] It's recommended to use `hint::spin_loop` instead.\n \n Internal Only\n -------------\n@@ -145,6 +150,8 @@ Internal Only\n [80764]: https://github.com/rust-lang/rust/pull/80764\n [80749]: https://github.com/rust-lang/rust/pull/80749\n [80662]: https://github.com/rust-lang/rust/pull/80662\n+[79134]: https://github.com/rust-lang/rust/pull/79134\n+[80966]: https://github.com/rust-lang/rust/pull/80966\n [cargo/8997]: https://github.com/rust-lang/cargo/pull/8997\n [cargo/9112]: https://github.com/rust-lang/cargo/pull/9112\n [feature-resolver@2.0]: https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2\n@@ -166,6 +173,8 @@ Internal Only\n [`Seek::stream_position`]: https://doc.rust-lang.org/nightly/std/io/trait.Seek.html#method.stream_position\n [`Peekable::next_if`]: https://doc.rust-lang.org/nightly/std/iter/struct.Peekable.html#method.next_if\n [`Peekable::next_if_eq`]: https://doc.rust-lang.org/nightly/std/iter/struct.Peekable.html#method.next_if_eq\n+[`VecDeque::range`]: https://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.range\n+[`VecDeque::range_mut`]: https://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.range_mut\n \n Version 1.50.0 (2021-02-11)\n ============================"}, {"sha": "70a5ac6f15ec221c3ee9c0ab3a9aa1bdf8a0fa13", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -666,21 +666,23 @@ impl<'a> Parser<'a> {\n                     );\n                     match x {\n                         Ok((_, _, false)) => {\n-                            self.bump(); // `>`\n-                            match self.parse_expr() {\n-                                Ok(_) => {\n-                                    e.span_suggestion_verbose(\n-                                        binop.span.shrink_to_lo(),\n-                                        TURBOFISH_SUGGESTION_STR,\n-                                        \"::\".to_string(),\n-                                        Applicability::MaybeIncorrect,\n-                                    );\n-                                    e.emit();\n-                                    *expr = self.mk_expr_err(expr.span.to(self.prev_token.span));\n-                                    return Ok(());\n-                                }\n-                                Err(mut err) => {\n-                                    err.cancel();\n+                            if self.eat(&token::Gt) {\n+                                match self.parse_expr() {\n+                                    Ok(_) => {\n+                                        e.span_suggestion_verbose(\n+                                            binop.span.shrink_to_lo(),\n+                                            TURBOFISH_SUGGESTION_STR,\n+                                            \"::\".to_string(),\n+                                            Applicability::MaybeIncorrect,\n+                                        );\n+                                        e.emit();\n+                                        *expr =\n+                                            self.mk_expr_err(expr.span.to(self.prev_token.span));\n+                                        return Ok(());\n+                                    }\n+                                    Err(mut err) => {\n+                                        err.cancel();\n+                                    }\n                                 }\n                             }\n                         }"}, {"sha": "7a297f2c65f13fb68df8c90867fbaea8c079fecf", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -82,7 +82,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         if param_type.is_suggestable() {\n                             err.span_suggestion(\n                                 tcx.def_span(src_def_id),\n-                                \"consider changing this type paramater to a `const`-generic\",\n+                                \"consider changing this type parameter to be a `const` generic\",\n                                 format!(\"const {}: {}\", param_name, param_type),\n                                 Applicability::MaybeIncorrect,\n                             );"}, {"sha": "971244718b4adb30bba476fadef14e9d1a6be2b9", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -940,7 +940,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(btree_retain)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map: BTreeMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n@@ -949,7 +948,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert!(map.into_iter().eq(vec![(0, 0), (2, 20), (4, 40), (6, 60)]));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"btree_retain\", issue = \"79025\")]\n+    #[stable(feature = \"btree_retain\", since = \"1.53.0\")]\n     pub fn retain<F>(&mut self, mut f: F)\n     where\n         K: Ord,"}, {"sha": "737932d931c0283647c3d06bc5ff5d201c299a9e", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -851,7 +851,6 @@ impl<T> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(btree_retain)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let xs = [1, 2, 3, 4, 5, 6];\n@@ -860,7 +859,7 @@ impl<T> BTreeSet<T> {\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert!(set.iter().eq([2, 4, 6].iter()));\n     /// ```\n-    #[unstable(feature = \"btree_retain\", issue = \"79025\")]\n+    #[stable(feature = \"btree_retain\", since = \"1.53.0\")]\n     pub fn retain<F>(&mut self, mut f: F)\n     where\n         T: Ord,"}, {"sha": "59493bb0425f3534d1c5e1902637b1dbce6d6d32", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -2268,7 +2268,7 @@ impl<T: ?Sized + Debug> Debug for RefMut<'_, T> {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<T: ?Sized + Debug> Debug for UnsafeCell<T> {\n+impl<T: ?Sized> Debug for UnsafeCell<T> {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.pad(\"UnsafeCell\")\n     }"}, {"sha": "fa6a6c2cccc015184b42537d5b1ab23b13449a15", "filename": "library/core/src/time.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -124,14 +124,13 @@ impl Duration {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_zero)]\n     /// use std::time::Duration;\n     ///\n     /// let duration = Duration::ZERO;\n     /// assert!(duration.is_zero());\n     /// assert_eq!(duration.as_nanos(), 0);\n     /// ```\n-    #[unstable(feature = \"duration_zero\", issue = \"73544\")]\n+    #[stable(feature = \"duration_zero\", since = \"1.53.0\")]\n     pub const ZERO: Duration = Duration::from_nanos(0);\n \n     /// The maximum duration.\n@@ -269,7 +268,6 @@ impl Duration {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_zero)]\n     /// use std::time::Duration;\n     ///\n     /// assert!(Duration::ZERO.is_zero());\n@@ -281,7 +279,8 @@ impl Duration {\n     /// assert!(!Duration::from_nanos(1).is_zero());\n     /// assert!(!Duration::from_secs(1).is_zero());\n     /// ```\n-    #[unstable(feature = \"duration_zero\", issue = \"73544\")]\n+    #[stable(feature = \"duration_zero\", since = \"1.53.0\")]\n+    #[rustc_const_stable(feature = \"duration_zero\", since = \"1.53.0\")]\n     #[inline]\n     pub const fn is_zero(&self) -> bool {\n         self.secs == 0 && self.nanos == 0\n@@ -536,7 +535,6 @@ impl Duration {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_zero)]\n     /// use std::time::Duration;\n     ///\n     /// assert_eq!(Duration::new(0, 1).saturating_sub(Duration::new(0, 0)), Duration::new(0, 1));"}, {"sha": "f6bfe67e1b12c9c7fff5d79aea2a32fba0d7be7f", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -24,7 +24,6 @@\n #![feature(div_duration)]\n #![feature(duration_consts_2)]\n #![feature(duration_constants)]\n-#![feature(duration_zero)]\n #![feature(exact_size_is_empty)]\n #![feature(extern_types)]\n #![feature(flt2dec)]"}, {"sha": "90603cd983677170eec54427e938a6b92fe20fc4", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -261,7 +261,6 @@\n #![cfg_attr(not(bootstrap), feature(doc_notable_trait))]\n #![feature(dropck_eyepatch)]\n #![feature(duration_constants)]\n-#![feature(duration_zero)]\n #![feature(edition_panic)]\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]"}, {"sha": "c8ee6ad61ec7304ab78d6837bb24486dea612522", "filename": "src/test/ui/const-generics/diagnostics.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -31,9 +31,12 @@ error[E0747]: type provided when a constant was expected\n   --> $DIR/diagnostics.rs:12:19\n    |\n LL | impl<N> Foo for B<N> {}\n-   |      -            ^\n-   |      |\n-   |      help: consider changing this type paramater to a `const`-generic: `const N: u8`\n+   |                   ^\n+   |\n+help: consider changing this type parameter to be a `const` generic\n+   |\n+LL | impl<const N: u8> Foo for B<N> {}\n+   |      ^^^^^^^^^^^\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/diagnostics.rs:16:32"}, {"sha": "0f20073591598dc13ef724ac434e98ea7a90be75", "filename": "src/test/ui/parser/issue-84117.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/src%2Ftest%2Fui%2Fparser%2Fissue-84117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/src%2Ftest%2Fui%2Fparser%2Fissue-84117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84117.rs?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+    //~^ ERROR expected one of `>`, a const expression\n+    //~| ERROR expected one of `>`, a const expression, lifetime, or type, found `}`\n+    //~| ERROR expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+    //~| ERROR expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+    //~| ERROR expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+}\n+//~^ ERROR expected one of `,`, `:`, `=`, or `>`, found `}`"}, {"sha": "d667a4977d0d31a815ed0b6aa2da6491ce660575", "filename": "src/test/ui/parser/issue-84117.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5258a74c887f8ae14717e1f98b652b470877ce4e/src%2Ftest%2Fui%2Fparser%2Fissue-84117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5258a74c887f8ae14717e1f98b652b470877ce4e/src%2Ftest%2Fui%2Fparser%2Fissue-84117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84117.stderr?ref=5258a74c887f8ae14717e1f98b652b470877ce4e", "patch": "@@ -0,0 +1,49 @@\n+error: expected one of `>`, a const expression, lifetime, or type, found `}`\n+  --> $DIR/issue-84117.rs:2:67\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |                                         ------------              ^ expected one of `>`, a const expression, lifetime, or type\n+   |                                         |          |\n+   |                                         |          help: use `=` if you meant to assign\n+   |                                         while parsing the type for `inner_local`\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+  --> $DIR/issue-84117.rs:2:65\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |                                                                 ^ expected one of 7 possible tokens\n+\n+error: expected one of `,`, `:`, `=`, or `>`, found `}`\n+  --> $DIR/issue-84117.rs:8:1\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |         ------------ help: use `=` if you meant to assign          - expected one of `,`, `:`, `=`, or `>`\n+   |         |\n+   |         while parsing the type for `outer_local`\n+...\n+LL | }\n+   | ^ unexpected token\n+\n+error: expected one of `>`, a const expression, lifetime, or type, found `}`\n+  --> $DIR/issue-84117.rs:2:67\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |                                         ------------              ^ expected one of `>`, a const expression, lifetime, or type\n+   |                                         |          |\n+   |                                         |          help: use `=` if you meant to assign\n+   |                                         while parsing the type for `inner_local`\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+  --> $DIR/issue-84117.rs:2:65\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |                                                                 ^ expected one of 7 possible tokens\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+  --> $DIR/issue-84117.rs:2:33\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |                                 ^ expected one of 7 possible tokens\n+\n+error: aborting due to 6 previous errors\n+"}]}