{"sha": "3312febf22794bb9451410e5950b9c970d77004d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMTJmZWJmMjI3OTRiYjk0NTE0MTBlNTk1MGI5Yzk3MGQ3NzAwNGQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-22T15:50:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-31T12:10:44Z"}, "message": "Add missing example for Thread struct", "tree": {"sha": "d4f2bd4608541e21d2969b5bcc213c110b6fe487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4f2bd4608541e21d2969b5bcc213c110b6fe487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3312febf22794bb9451410e5950b9c970d77004d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3312febf22794bb9451410e5950b9c970d77004d", "html_url": "https://github.com/rust-lang/rust/commit/3312febf22794bb9451410e5950b9c970d77004d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3312febf22794bb9451410e5950b9c970d77004d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "html_url": "https://github.com/rust-lang/rust/commit/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "6a11385a1e5d2271d6793fa2abfae77a24fdca00", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/3312febf22794bb9451410e5950b9c970d77004d/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3312febf22794bb9451410e5950b9c970d77004d/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=3312febf22794bb9451410e5950b9c970d77004d", "patch": "@@ -558,6 +558,23 @@ pub fn park_timeout(dur: Duration) {\n /// A `ThreadId` is an opaque object that has a unique value for each thread\n /// that creates one. `ThreadId`s do not correspond to a thread's system-\n /// designated identifier.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(thread_id)]\n+///\n+/// use std::thread;\n+///\n+/// let handler = thread::Builder::new()\n+///     .spawn(|| {\n+///         let thread = thread::current();\n+///         let thread_id = thread.id();\n+///     })\n+///     .unwrap();\n+///\n+/// handler.join().unwrap();\n+/// ```\n #[unstable(feature = \"thread_id\", issue = \"21507\")]\n #[derive(Eq, PartialEq, Copy, Clone)]\n pub struct ThreadId(u64);\n@@ -610,6 +627,22 @@ struct Inner {\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n /// A handle to a thread.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::thread;\n+///\n+/// let handler = thread::Builder::new()\n+///     .name(\"foo\".into())\n+///     .spawn(|| {\n+///         let thread = thread::current();\n+///         println!(\"thread name: {}\", thread.name().unwrap());\n+///     })\n+///     .unwrap();\n+///\n+/// handler.join().unwrap();\n+/// ```\n pub struct Thread {\n     inner: Arc<Inner>,\n }\n@@ -633,6 +666,21 @@ impl Thread {\n     /// Atomically makes the handle's token available if it is not already.\n     ///\n     /// See the module doc for more detail.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::thread;\n+    ///\n+    /// let handler = thread::Builder::new()\n+    ///     .spawn(|| {\n+    ///         let thread = thread::current();\n+    ///         thread.unpark();\n+    ///     })\n+    ///     .unwrap();\n+    ///\n+    /// handler.join().unwrap();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unpark(&self) {\n         let mut guard = self.inner.lock.lock().unwrap();\n@@ -643,6 +691,23 @@ impl Thread {\n     }\n \n     /// Gets the thread's unique identifier.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(thread_id)]\n+    ///\n+    /// use std::thread;\n+    ///\n+    /// let handler = thread::Builder::new()\n+    ///     .spawn(|| {\n+    ///         let thread = thread::current();\n+    ///         println!(\"thread id: {:?}\", thread.id());\n+    ///     })\n+    ///     .unwrap();\n+    ///\n+    /// handler.join().unwrap();\n+    /// ```\n     #[unstable(feature = \"thread_id\", issue = \"21507\")]\n     pub fn id(&self) -> ThreadId {\n         self.inner.id"}]}