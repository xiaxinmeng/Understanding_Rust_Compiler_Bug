{"sha": "2539c15b49530e882a3e8803b3f53a7914d367be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MzljMTViNDk1MzBlODgyYTNlODgwM2IzZjUzYTc5MTRkMzY3YmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-12T05:09:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-12T05:09:44Z"}, "message": "Auto merge of #34637 - GuillaumeGomez:syntax_codes, r=jonathandturner\n\nSyntax codes\n\nr? @jonathandturner\n\ncc @steveklabnik\n\nThis is a first big shot. I'll do the second one later in the week once this one is merged.", "tree": {"sha": "d41d07cdbf6b0bb0fb045d831170ee202a5f6d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d41d07cdbf6b0bb0fb045d831170ee202a5f6d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2539c15b49530e882a3e8803b3f53a7914d367be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2539c15b49530e882a3e8803b3f53a7914d367be", "html_url": "https://github.com/rust-lang/rust/commit/2539c15b49530e882a3e8803b3f53a7914d367be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2539c15b49530e882a3e8803b3f53a7914d367be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3265bd54b5b3f32d038273afec7554f007a5ce1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3265bd54b5b3f32d038273afec7554f007a5ce1d", "html_url": "https://github.com/rust-lang/rust/commit/3265bd54b5b3f32d038273afec7554f007a5ce1d"}, {"sha": "b777f145e6f71b3d4b9a7140bb8e039e1dd64a9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b777f145e6f71b3d4b9a7140bb8e039e1dd64a9a", "html_url": "https://github.com/rust-lang/rust/commit/b777f145e6f71b3d4b9a7140bb8e039e1dd64a9a"}], "stats": {"total": 158, "additions": 146, "deletions": 12}, "files": [{"sha": "67f73d4dd4f711e4798a42200002c5ddf50933a3", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2539c15b49530e882a3e8803b3f53a7914d367be/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2539c15b49530e882a3e8803b3f53a7914d367be/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=2539c15b49530e882a3e8803b3f53a7914d367be", "patch": "@@ -324,7 +324,7 @@ pub fn find_export_name_attr(diag: &Handler, attrs: &[Attribute]) -> Option<Inte\n             if let s@Some(_) = attr.value_str() {\n                 s\n             } else {\n-                struct_span_err!(diag, attr.span, E0533,\n+                struct_span_err!(diag, attr.span, E0558,\n                                  \"export_name attribute has invalid format\")\n                                 .help(\"use #[export_name=\\\"*\\\"]\")\n                                 .emit();\n@@ -373,7 +373,7 @@ pub fn find_inline_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> In\n                     InlineAttr::None\n                 }\n             }\n-            _ => ia\n+            _ => ia,\n         }\n     })\n }"}, {"sha": "010b1d638e63cf2085e89ea9f265a3376d228b47", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 141, "deletions": 8, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/2539c15b49530e882a3e8803b3f53a7914d367be/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2539c15b49530e882a3e8803b3f53a7914d367be/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=2539c15b49530e882a3e8803b3f53a7914d367be", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -15,9 +15,146 @@\n // In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n register_long_diagnostics! {\n \n-E0533: r##\"\n-```compile_fail,E0533\n-#[export_name]\n+E0534: r##\"\n+The `inline` attribute was malformed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0534\n+#[inline()] // error: expected one argument\n+pub fn something() {}\n+\n+fn main() {}\n+```\n+\n+The parenthesized `inline` attribute requires the parameter to be specified:\n+\n+```ignore\n+#[inline(always)]\n+fn something() {}\n+\n+// or:\n+\n+#[inline(never)]\n+fn something() {}\n+```\n+\n+Alternatively, a paren-less version of the attribute may be used to hint the\n+compiler about inlining opportunity:\n+\n+```\n+#[inline]\n+fn something() {}\n+```\n+\n+For more information about the inline attribute, read:\n+https://doc.rust-lang.org/reference.html#inline-attributes\n+\"##,\n+\n+E0535: r##\"\n+An unknown argument was given to the `inline` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0535\n+#[inline(unknown)] // error: invalid argument\n+pub fn something() {}\n+\n+fn main() {}\n+```\n+\n+The `inline` attribute only supports two arguments:\n+\n+ * always\n+ * never\n+\n+All other arguments given to the `inline` attribute will return this error.\n+Example:\n+\n+```\n+#[inline(never)] // ok!\n+pub fn something() {}\n+\n+fn main() {}\n+```\n+\n+For more information about the inline attribute, https:\n+read://doc.rust-lang.org/reference.html#inline-attributes\n+\"##,\n+\n+E0536: r##\"\n+The `not` cfg-predicate was malformed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0536\n+#[cfg(not())] // error: expected 1 cfg-pattern\n+pub fn something() {}\n+\n+pub fn main() {}\n+```\n+\n+The `not` predicate expects one cfg-pattern. Example:\n+\n+```\n+#[cfg(not(target_os = \"linux\"))] // ok!\n+pub fn something() {}\n+\n+pub fn main() {}\n+```\n+\n+For more information about the cfg attribute, read:\n+https://doc.rust-lang.org/reference.html#conditional-compilation\n+\"##,\n+\n+E0537: r##\"\n+An unknown predicate was used inside the `cfg` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0537\n+#[cfg(unknown())] // error: invalid predicate `unknown`\n+pub fn something() {}\n+\n+pub fn main() {}\n+```\n+\n+The `cfg` attribute supports only three kinds of predicates:\n+\n+ * any\n+ * all\n+ * not\n+\n+Example:\n+\n+```\n+#[cfg(not(target_os = \"linux\"))] // ok!\n+pub fn something() {}\n+\n+pub fn main() {}\n+```\n+\n+For more information about the cfg attribute, read:\n+https://doc.rust-lang.org/reference.html#conditional-compilation\n+\"##,\n+\n+E0558: r##\"\n+The `export_name` attribute was malformed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0558\n+#[export_name] // error: export_name attribute has invalid format\n+pub fn something() {}\n+\n+fn main() {}\n+```\n+\n+The `export_name` attribute expects a string in order to determine the name of\n+the exported symbol. Example:\n+\n+```\n+#[export_name = \"some_function\"] // ok!\n pub fn something() {}\n \n fn main() {}\n@@ -27,10 +164,6 @@ fn main() {}\n }\n \n register_diagnostics! {\n-    E0534, // expected one argument\n-    E0535, // invalid argument\n-    E0536, // expected 1 cfg-pattern\n-    E0537, // invalid predicate\n     E0538, // multiple [same] items\n     E0539, // incorrect meta item\n     E0540, // multiple rustc_deprecated attributes"}, {"sha": "3a70e54ff9745d457b24f0f320eee2fbec43e74d", "filename": "src/tools/tidy/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2539c15b49530e882a3e8803b3f53a7914d367be/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2539c15b49530e882a3e8803b3f53a7914d367be/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs?ref=2539c15b49530e882a3e8803b3f53a7914d367be", "patch": "@@ -25,7 +25,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n                 &mut |file| {\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        if filename != \"diagnostics.rs\" {\n+        if filename != \"diagnostics.rs\" && filename != \"diagnostic_list.rs\" {\n             return\n         }\n "}, {"sha": "199e8a77df71797b7eed2b5d7107e634f6a1a6dc", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2539c15b49530e882a3e8803b3f53a7914d367be/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2539c15b49530e882a3e8803b3f53a7914d367be/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=2539c15b49530e882a3e8803b3f53a7914d367be", "patch": "@@ -46,7 +46,8 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n                 &mut |file| {\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        if !filename.ends_with(\".rs\") || filename == \"features.rs\" {\n+        if !filename.ends_with(\".rs\") || filename == \"features.rs\" ||\n+           filename == \"diagnostic_list.rs\" {\n             return\n         }\n "}]}