{"sha": "1c348e6e3832b1fd8282be696f76ac3c50115162", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMzQ4ZTZlMzgzMmIxZmQ4MjgyYmU2OTZmNzZhYzNjNTAxMTUxNjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-21T19:39:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-27T17:23:31Z"}, "message": "librustc: Implement @mut [T] as the new replacement for @[mut T]", "tree": {"sha": "1ad8d863d80c3d868ed34b211eee417a4369d7cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ad8d863d80c3d868ed34b211eee417a4369d7cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c348e6e3832b1fd8282be696f76ac3c50115162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c348e6e3832b1fd8282be696f76ac3c50115162", "html_url": "https://github.com/rust-lang/rust/commit/1c348e6e3832b1fd8282be696f76ac3c50115162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c348e6e3832b1fd8282be696f76ac3c50115162/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc29c62d033c529ca8ec47fcd25842223a9bbad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc29c62d033c529ca8ec47fcd25842223a9bbad", "html_url": "https://github.com/rust-lang/rust/commit/7bc29c62d033c529ca8ec47fcd25842223a9bbad"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "e6d1a0ca27c485d3973ada304c53459bf068850b", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=1c348e6e3832b1fd8282be696f76ac3c50115162", "patch": "@@ -92,7 +92,8 @@ fn classify(e: @expr,\n                       ast::expr_vstore_fixed(_) |\n                       ast::expr_vstore_slice => classify(e, def_map, tcx),\n                       ast::expr_vstore_uniq |\n-                      ast::expr_vstore_box => non_const\n+                      ast::expr_vstore_box |\n+                      ast::expr_vstore_mut_box => non_const\n                   }\n               }\n "}, {"sha": "2e4d95acdfbd0f0967fdc2f13f6e755e5e1cde4c", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=1c348e6e3832b1fd8282be696f76ac3c50115162", "patch": "@@ -392,7 +392,8 @@ fn trans_rvalue_datum_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n     trace_span!(bcx, expr.span, shorten(bcx.expr_to_str(expr)));\n \n     match expr.node {\n-        ast::expr_vstore(contents, ast::expr_vstore_box) => {\n+        ast::expr_vstore(contents, ast::expr_vstore_box) |\n+        ast::expr_vstore(contents, ast::expr_vstore_mut_box) => {\n             return tvec::trans_uniq_or_managed_vstore(bcx, heap_shared,\n                                                       expr, contents);\n         }"}, {"sha": "7d6f937f82d1253c82f839387eb0074962bdc950", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1c348e6e3832b1fd8282be696f76ac3c50115162", "patch": "@@ -3187,6 +3187,7 @@ fn expr_kind(tcx: ctxt,\n         ast::expr_addr_of(*) |\n         ast::expr_binary(*) |\n         ast::expr_vstore(_, ast::expr_vstore_box) |\n+        ast::expr_vstore(_, ast::expr_vstore_mut_box) |\n         ast::expr_vstore(_, ast::expr_vstore_uniq) => {\n             RvalueDatumExpr\n         }"}, {"sha": "4d0fdcdca406bf57f09f11f2b392bf602c22f1d1", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=1c348e6e3832b1fd8282be696f76ac3c50115162", "patch": "@@ -176,13 +176,14 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n         let tcx = self.tcx();\n \n         match a_seq_ty.ty.node {\n-            // to convert to an e{vec,str}, there can't be a\n-            // mutability argument\n-            _ if a_seq_ty.mutbl != ast::m_imm => (),\n             ast::ty_vec(mt) => {\n-                return ty::mk_evec(tcx, ast_mt_to_mt(self, rscope, mt), vst);\n+                let mut mt = ast_mt_to_mt(self, rscope, mt);\n+                if a_seq_ty.mutbl == ast::m_mutbl {\n+                    mt = { ty: mt.ty, mutbl: ast::m_mutbl };\n+                }\n+                return ty::mk_evec(tcx, mt, vst);\n             }\n-            ast::ty_path(path, id) => {\n+            ast::ty_path(path, id) if a_seq_ty.mutbl == ast::m_imm => {\n                 match tcx.def_map.find(id) {\n                     Some(ast::def_prim_ty(ast::ty_str)) => {\n                         check_path_args(tcx, path, NO_TPS | NO_REGIONS);"}, {"sha": "b24550f2bc647bc62c95278870a8fa2626003f82", "filename": "src/librustc/middle/typeck/check.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=1c348e6e3832b1fd8282be696f76ac3c50115162", "patch": "@@ -1705,9 +1705,14 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           }\n           ast::expr_vec(args, mutbl) => {\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, args.len(), vst);\n+            let mutability;\n+            match vst {\n+                ast::expr_vstore_mut_box => mutability = ast::m_mutbl,\n+                _ => mutability = mutbl\n+            }\n             let t: ty::t = fcx.infcx().next_ty_var();\n             for args.each |e| { bot |= check_expr_with(fcx, *e, t); }\n-            ty::mk_evec(tcx, {ty: t, mutbl: mutbl}, tt)\n+            ty::mk_evec(tcx, {ty: t, mutbl: mutability}, tt)\n           }\n           ast::expr_repeat(element, count_expr, mutbl) => {\n             let count = ty::eval_repeat_count(tcx, count_expr, expr.span);\n@@ -2721,7 +2726,7 @@ fn ast_expr_vstore_to_vstore(fcx: @fn_ctxt, e: @ast::expr, n: uint,\n             ty::vstore_fixed(u)\n         }\n         ast::expr_vstore_uniq => ty::vstore_uniq,\n-        ast::expr_vstore_box => ty::vstore_box,\n+        ast::expr_vstore_box | ast::expr_vstore_mut_box => ty::vstore_box,\n         ast::expr_vstore_slice => {\n             let r = fcx.infcx().next_region_var(e.span, e.id);\n             ty::vstore_slice(r)"}, {"sha": "353bb26ea9eadcff675abdbc5e6730b2df191a01", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1c348e6e3832b1fd8282be696f76ac3c50115162", "patch": "@@ -645,6 +645,7 @@ enum expr_vstore {\n     expr_vstore_fixed(Option<uint>),   // [1,2,3,4]\n     expr_vstore_uniq,                  // ~[1,2,3,4]\n     expr_vstore_box,                   // @[1,2,3,4]\n+    expr_vstore_mut_box,               // @mut [1,2,3,4]\n     expr_vstore_slice                  // &[1,2,3,4]\n }\n "}, {"sha": "f340a52a4e7d651240eccbf33fef05278e8cc7ac", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1c348e6e3832b1fd8282be696f76ac3c50115162", "patch": "@@ -38,7 +38,8 @@ use ast::{_mod, add, arg, arm, attribute,\n              expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac,\n              expr_paren, expr_path, expr_rec, expr_repeat, expr_ret,\n              expr_swap, expr_struct, expr_tup, expr_unary, expr_unary_move,\n-             expr_vec, expr_vstore, expr_while, extern_fn, field, fn_decl,\n+             expr_vec, expr_vstore, expr_vstore_mut_box, expr_while,\n+             extern_fn, field, fn_decl,\n              foreign_item, foreign_item_const, foreign_item_fn, foreign_mod,\n              ident, impure_fn, infer, inherited,\n              item, item_, item_class, item_const, item_enum, item_fn,\n@@ -1450,8 +1451,11 @@ impl Parser {\n             hi = e.span.hi;\n             // HACK: turn @[...] into a @-evec\n             ex = match e.node {\n-              expr_vec(*) | expr_lit(@{node: lit_str(_), span: _})\n-              if m == m_imm => expr_vstore(e, expr_vstore_box),\n+              expr_vec(*) if m == m_mutbl =>\n+                expr_vstore(e, expr_vstore_mut_box),\n+              expr_vec(*) if m == m_imm => expr_vstore(e, expr_vstore_box),\n+              expr_lit(@{node: lit_str(_), span: _}) if m == m_imm =>\n+                expr_vstore(e, expr_vstore_box),\n               _ => expr_unary(box(m), e)\n             };\n           }"}, {"sha": "e0523613ee66fc2f095731d3623b1fbe6dc32013", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1c348e6e3832b1fd8282be696f76ac3c50115162", "patch": "@@ -1027,6 +1027,10 @@ fn print_expr_vstore(s: ps, t: ast::expr_vstore) {\n       ast::expr_vstore_fixed(None) => word(s.s, ~\"_\"),\n       ast::expr_vstore_uniq => word(s.s, ~\"~\"),\n       ast::expr_vstore_box => word(s.s, ~\"@\"),\n+      ast::expr_vstore_mut_box => {\n+        word(s.s, ~\"@\");\n+        word(s.s, ~\"mut\");\n+      }\n       ast::expr_vstore_slice => word(s.s, ~\"&\"),\n     }\n }"}, {"sha": "cd36bedfa2419794405dbab7dfd9aeeab8ee21f1", "filename": "src/test/compile-fail/borrowck-mut-boxed-vec.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-boxed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-boxed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-boxed-vec.rs?ref=1c348e6e3832b1fd8282be696f76ac3c50115162", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let v = @mut [ 1, 2, 3 ];\n+    for v.each |_x| {   //~ ERROR illegal borrow\n+        v[1] = 4;\n+    }\n+}\n+"}, {"sha": "6b77d778eb95a4e7f3c2f1072dd0fb962293084f", "filename": "src/test/run-pass/new-vstore-mut-box-syntax.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Ftest%2Frun-pass%2Fnew-vstore-mut-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c348e6e3832b1fd8282be696f76ac3c50115162/src%2Ftest%2Frun-pass%2Fnew-vstore-mut-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-vstore-mut-box-syntax.rs?ref=1c348e6e3832b1fd8282be696f76ac3c50115162", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let x: @mut [int] = @mut [ 1, 2, 3 ];\n+\n+}\n+"}]}