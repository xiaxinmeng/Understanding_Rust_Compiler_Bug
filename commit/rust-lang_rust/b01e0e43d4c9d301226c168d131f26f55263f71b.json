{"sha": "b01e0e43d4c9d301226c168d131f26f55263f71b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMWUwZTQzZDRjOWQzMDEyMjZjMTY4ZDEzMWYyNmY1NTI2M2Y3MWI=", "commit": {"author": {"name": "Philip Munksgaard", "email": "pmunksgaard@gmail.com", "date": "2018-09-19T09:27:36Z"}, "committer": {"name": "Philip Munksgaard", "email": "pmunksgaard@gmail.com", "date": "2018-09-20T06:36:07Z"}, "message": "Add a documentation banner for edition specific code", "tree": {"sha": "6cd1d6903b98d1e9c31c68051071b087ef0b8892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd1d6903b98d1e9c31c68051071b087ef0b8892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b01e0e43d4c9d301226c168d131f26f55263f71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b01e0e43d4c9d301226c168d131f26f55263f71b", "html_url": "https://github.com/rust-lang/rust/commit/b01e0e43d4c9d301226c168d131f26f55263f71b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b01e0e43d4c9d301226c168d131f26f55263f71b/comments", "author": {"login": "Munksgaard", "id": 230613, "node_id": "MDQ6VXNlcjIzMDYxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/230613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Munksgaard", "html_url": "https://github.com/Munksgaard", "followers_url": "https://api.github.com/users/Munksgaard/followers", "following_url": "https://api.github.com/users/Munksgaard/following{/other_user}", "gists_url": "https://api.github.com/users/Munksgaard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Munksgaard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Munksgaard/subscriptions", "organizations_url": "https://api.github.com/users/Munksgaard/orgs", "repos_url": "https://api.github.com/users/Munksgaard/repos", "events_url": "https://api.github.com/users/Munksgaard/events{/privacy}", "received_events_url": "https://api.github.com/users/Munksgaard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Munksgaard", "id": 230613, "node_id": "MDQ6VXNlcjIzMDYxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/230613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Munksgaard", "html_url": "https://github.com/Munksgaard", "followers_url": "https://api.github.com/users/Munksgaard/followers", "following_url": "https://api.github.com/users/Munksgaard/following{/other_user}", "gists_url": "https://api.github.com/users/Munksgaard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Munksgaard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Munksgaard/subscriptions", "organizations_url": "https://api.github.com/users/Munksgaard/orgs", "repos_url": "https://api.github.com/users/Munksgaard/repos", "events_url": "https://api.github.com/users/Munksgaard/events{/privacy}", "received_events_url": "https://api.github.com/users/Munksgaard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8d8d71fac1225a35d4895f1f97dd14bc6a4ea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8d8d71fac1225a35d4895f1f97dd14bc6a4ea2", "html_url": "https://github.com/rust-lang/rust/commit/ac8d8d71fac1225a35d4895f1f97dd14bc6a4ea2"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "d14275aeb6bf5e52c50ecbecb0b7e81086cb37bd", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b01e0e43d4c9d301226c168d131f26f55263f71b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01e0e43d4c9d301226c168d131f26f55263f71b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b01e0e43d4c9d301226c168d131f26f55263f71b", "patch": "@@ -171,13 +171,15 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n         let event = self.inner.next();\n         let compile_fail;\n         let ignore;\n+        let edition;\n         if let Some(Event::Start(Tag::CodeBlock(lang))) = event {\n             let parse_result = LangString::parse(&lang, self.check_error_codes);\n             if !parse_result.rust {\n                 return Some(Event::Start(Tag::CodeBlock(lang)));\n             }\n             compile_fail = parse_result.compile_fail;\n             ignore = parse_result.ignore;\n+            edition = parse_result.edition;\n         } else {\n             return event;\n         }\n@@ -213,6 +215,17 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                 } else {\n                     \"\"\n                 };\n+\n+                let edition_string = if let Some(e @ Edition::Edition2018) = edition {\n+                    format!(\"&amp;edition={}{}\", e,\n+                            if channel == \"&amp;version=nightly\" { \"\" }\n+                            else { \"&amp;version=nightly\" })\n+                } else if let Some(e) = edition {\n+                    format!(\"&amp;edition={}\", e)\n+                } else {\n+                    \"\".to_owned()\n+                };\n+\n                 // These characters don't need to be escaped in a URI.\n                 // FIXME: use a library function for percent encoding.\n                 fn dont_escape(c: u8) -> bool {\n@@ -232,26 +245,44 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                     }\n                 }\n                 Some(format!(\n-                    r#\"<a class=\"test-arrow\" target=\"_blank\" href=\"{}?code={}{}\">Run</a>\"#,\n-                    url, test_escaped, channel\n+                    r#\"<a class=\"test-arrow\" target=\"_blank\" href=\"{}?code={}{}{}\">Run</a>\"#,\n+                    url, test_escaped, channel, edition_string\n                 ))\n             });\n+\n             let tooltip = if ignore {\n-                Some((\"This example is not tested\", \"ignore\"))\n+                Some((\"This example is not tested\".to_owned(), \"ignore\"))\n             } else if compile_fail {\n-                Some((\"This example deliberately fails to compile\", \"compile_fail\"))\n+                Some((\"This example deliberately fails to compile\".to_owned(), \"compile_fail\"))\n+            } else if let Some(e) = edition {\n+                Some((format!(\"This code runs with edition {}\", e), \"edition\"))\n             } else {\n                 None\n             };\n-            s.push_str(&highlight::render_with_highlighting(\n-                        &text,\n-                        Some(&format!(\"rust-example-rendered{}\",\n-                                      if ignore { \" ignore\" }\n-                                      else if compile_fail { \" compile_fail\" }\n-                                      else { \"\" })),\n-                        playground_button.as_ref().map(String::as_str),\n-                        tooltip));\n-            Some(Event::Html(s.into()))\n+\n+            if let Some((s1, s2)) = tooltip {\n+                s.push_str(&highlight::render_with_highlighting(\n+                    &text,\n+                    Some(&format!(\"rust-example-rendered{}\",\n+                                  if ignore { \" ignore\" }\n+                                  else if compile_fail { \" compile_fail\" }\n+                                  else if edition.is_some() { \" edition \" }\n+                                  else { \"\" })),\n+                    playground_button.as_ref().map(String::as_str),\n+                    Some((s1.as_str(), s2))));\n+                Some(Event::Html(s.into()))\n+            } else {\n+                s.push_str(&highlight::render_with_highlighting(\n+                    &text,\n+                    Some(&format!(\"rust-example-rendered{}\",\n+                                  if ignore { \" ignore\" }\n+                                  else if compile_fail { \" compile_fail\" }\n+                                  else if edition.is_some() { \" edition \" }\n+                                  else { \"\" })),\n+                    playground_button.as_ref().map(String::as_str),\n+                    None));\n+                Some(Event::Html(s.into()))\n+            }\n         })\n     }\n }"}]}