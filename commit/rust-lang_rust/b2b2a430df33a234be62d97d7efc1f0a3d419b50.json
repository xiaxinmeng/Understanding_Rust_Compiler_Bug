{"sha": "b2b2a430df33a234be62d97d7efc1f0a3d419b50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYjJhNDMwZGYzM2EyMzRiZTYyZDk3ZDdlZmMxZjBhM2Q0MTliNTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-18T05:12:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-19T22:07:46Z"}, "message": "resolve capture clauses", "tree": {"sha": "392e4e0d7eb11ed978920a38e89de84b86b80a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/392e4e0d7eb11ed978920a38e89de84b86b80a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b2a430df33a234be62d97d7efc1f0a3d419b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b2a430df33a234be62d97d7efc1f0a3d419b50", "html_url": "https://github.com/rust-lang/rust/commit/b2b2a430df33a234be62d97d7efc1f0a3d419b50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b2a430df33a234be62d97d7efc1f0a3d419b50/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "html_url": "https://github.com/rust-lang/rust/commit/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "a01f17c14dfc436c382a83636bf71122d6853178", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=b2b2a430df33a234be62d97d7efc1f0a3d419b50", "patch": "@@ -347,12 +347,9 @@ fn mk_test_wrapper(cx: test_ctxt,\n         body: wrapper_body\n     };\n \n-    let wrapper_capture: @ast::capture = @{\n-        node: {\n-            copies: [],\n-            moves: []\n-        },\n-        span: span\n+    let wrapper_capture: @ast::capture_clause = @{\n+        copies: [],\n+        moves: []\n     };\n \n     let wrapper_expr: ast::expr = {"}, {"sha": "60ea72ea9a2afec7f49505a54edae64d34c5f9b3", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=b2b2a430df33a234be62d97d7efc1f0a3d419b50", "patch": "@@ -299,6 +299,16 @@ fn check_unused_imports(e: @env) {\n     };\n }\n \n+fn resolve_capture_item(e: @env, sc: scopes, &&cap_item: @ast::capture_item) {\n+    let dcur = lookup_in_scope_strict(\n+        *e, sc, cap_item.span, cap_item.name, ns_value);\n+    maybe_insert(e, cap_item.id, dcur);\n+}\n+\n+fn maybe_insert(e: @env, id: node_id, def: option::t<def>) {\n+    if option::is_some(def) { e.def_map.insert(id, option::get(def)); }\n+}\n+\n fn resolve_names(e: @env, c: @ast::crate) {\n     e.used_imports.track = true;\n     let v =\n@@ -325,6 +335,11 @@ fn resolve_names(e: @env, c: @ast::crate) {\n                          lookup_path_strict(*e, sc, exp.span, p.node,\n                                             ns_value));\n           }\n+          ast::expr_fn(_, cap_clause) {\n+            let rci = bind resolve_capture_item(e, sc, _);\n+            vec::iter(cap_clause.copies, rci);\n+            vec::iter(cap_clause.moves, rci);\n+          }\n           _ { }\n         }\n     }\n@@ -361,10 +376,6 @@ fn resolve_names(e: @env, c: @ast::crate) {\n           _ { }\n         }\n     }\n-\n-    fn maybe_insert(e: @env, id: node_id, def: option::t<def>) {\n-        if option::is_some(def) { e.def_map.insert(id, option::get(def)); }\n-    }\n }\n \n "}, {"sha": "608796696d6fd2dabeaeffb1a0a8f32285244a44", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=b2b2a430df33a234be62d97d7efc1f0a3d419b50", "patch": "@@ -226,7 +226,7 @@ tag expr_ {\n     expr_for(@local, @expr, blk);\n     expr_do_while(blk, @expr);\n     expr_alt(@expr, [arm]);\n-    expr_fn(_fn, @capture);\n+    expr_fn(_fn, @capture_clause);\n     expr_block(blk);\n \n     /*\n@@ -261,13 +261,15 @@ tag expr_ {\n     expr_mac(mac);\n }\n \n-// At the moment, one can only capture local variables.\n-type capture_ = {\n-    copies: [spanned<ident>],\n-    moves: [spanned<ident>]\n+type capture_item = {\n+    id: int,\n+    name: ident, // Currently, can only capture a local var.\n+    span: span\n+};\n+type capture_clause = {\n+    copies: [@capture_item],\n+    moves: [@capture_item]\n };\n-\n-type capture = spanned<capture_>;\n \n /*\n // Says whether this is a block the user marked as"}, {"sha": "1b3bb87cddcd78f167220b71046e8d1f599bba14", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=b2b2a430df33a234be62d97d7efc1f0a3d419b50", "patch": "@@ -1244,7 +1244,7 @@ fn parse_if_expr(p: parser) -> @ast::expr {\n //   CC := [copy ID*; move ID*]\n //\n // where any part is optional and trailing ; is permitted.\n-fn parse_capture_clause(p: parser) -> @ast::capture {\n+fn parse_capture_clause(p: parser) -> @ast::capture_clause {\n     fn expect_opt_trailing_semi(p: parser) {\n         if !eat(p, token::SEMI) {\n             if p.peek() != token::RBRACKET {\n@@ -1253,15 +1253,15 @@ fn parse_capture_clause(p: parser) -> @ast::capture {\n         }\n     }\n \n-    fn eat_ident_list(p: parser) -> [ast::spanned<ast::ident>] {\n+    fn eat_ident_list(p: parser) -> [@ast::capture_item] {\n         let res = [];\n         while true {\n             alt p.peek() {\n               token::IDENT(_, _) {\n-                let i = spanned(p.get_lo_pos(),\n-                                p.get_hi_pos(),\n-                                parse_ident(p));\n-                res += [i];\n+                let id = p.get_id();\n+                let sp = ast_util::mk_sp(p.get_lo_pos(), p.get_hi_pos());\n+                let ident = parse_ident(p);\n+                res += [@{id:id, name:ident, span:sp}];\n                 if !eat(p, token::COMMA) {\n                     ret res;\n                 }\n@@ -1276,7 +1276,6 @@ fn parse_capture_clause(p: parser) -> @ast::capture {\n     let copies = [];\n     let moves = [];\n \n-    let lo = p.get_lo_pos();\n     if eat(p, token::LBRACKET) {\n         while !eat(p, token::RBRACKET) {\n             if eat_word(p, \"copy\") {\n@@ -1291,27 +1290,25 @@ fn parse_capture_clause(p: parser) -> @ast::capture {\n             }\n         }\n     }\n-    let hi = p.get_last_hi_pos();\n \n-    ret @spanned(lo, hi, {copies: copies, moves: moves});\n+    ret @{copies: copies, moves: moves};\n }\n \n fn parse_fn_expr(p: parser, proto: ast::proto) -> @ast::expr {\n     let lo = p.get_last_lo_pos();\n-    let captures = parse_capture_clause(p);\n+    let capture_clause = parse_capture_clause(p);\n     let decl = parse_fn_decl(p, ast::impure_fn, ast::il_normal);\n     let body = parse_block(p);\n     let _fn = {decl: decl, proto: proto, body: body};\n-    ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn, captures));\n+    ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn, capture_clause));\n }\n \n fn parse_fn_block_expr(p: parser) -> @ast::expr {\n     let lo = p.get_last_lo_pos();\n     let decl = parse_fn_block_decl(p);\n-    let mid = p.get_last_hi_pos();\n     let body = parse_block_tail(p, lo, ast::default_blk);\n     let _fn = {decl: decl, proto: ast::proto_block, body: body};\n-    let captures = @spanned(lo, mid, {copies: [], moves: []});\n+    let captures = @{copies: [], moves: []};\n     ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn, captures));\n }\n "}, {"sha": "b4aa10b22b878ee06cf0da7ad549f1b808e240a7", "filename": "src/test/compile-fail/cap-clause-unresolved-copy.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-copy.rs?ref=b2b2a430df33a234be62d97d7efc1f0a3d419b50", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern:unresolved name: z\n+fn main() {\n+    let x = 5;\n+    let y = sendfn[copy z, x]() {\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "95d06f4588e2a4a807733d55d661c0e7e0abcbd8", "filename": "src/test/compile-fail/cap-clause-unresolved-move.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b2a430df33a234be62d97d7efc1f0a3d419b50/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-move.rs?ref=b2b2a430df33a234be62d97d7efc1f0a3d419b50", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern:unresolved name: z\n+fn main() {\n+    let x = 5;\n+    let y = sendfn[move z, x]() {\n+    };\n+}\n\\ No newline at end of file"}]}