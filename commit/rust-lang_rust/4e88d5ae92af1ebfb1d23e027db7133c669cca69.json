{"sha": "4e88d5ae92af1ebfb1d23e027db7133c669cca69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlODhkNWFlOTJhZjFlYmZiMWQyM2UwMjdkYjcxMzNjNjY5Y2NhNjk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-03T15:37:41Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-03T15:37:41Z"}, "message": "Make resolution of dictionaries on bounded params work\n\nIssue #1227", "tree": {"sha": "e67b272d285756354af5e49ea65c0a0725073d8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e67b272d285756354af5e49ea65c0a0725073d8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e88d5ae92af1ebfb1d23e027db7133c669cca69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e88d5ae92af1ebfb1d23e027db7133c669cca69", "html_url": "https://github.com/rust-lang/rust/commit/4e88d5ae92af1ebfb1d23e027db7133c669cca69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e88d5ae92af1ebfb1d23e027db7133c669cca69/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea3c96938e6defa894c4ae646a75ba00c4dce22", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea3c96938e6defa894c4ae646a75ba00c4dce22", "html_url": "https://github.com/rust-lang/rust/commit/5ea3c96938e6defa894c4ae646a75ba00c4dce22"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "7bcd2f6d8803a4070f2731c5f2dc9f2969acde10", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e88d5ae92af1ebfb1d23e027db7133c669cca69/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e88d5ae92af1ebfb1d23e027db7133c669cca69/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=4e88d5ae92af1ebfb1d23e027db7133c669cca69", "patch": "@@ -147,6 +147,8 @@ fn get_dict(bcx: @block_ctxt, origin: typeck::dict_origin) -> result {\n         }\n         rslt(bcx, PointerCast(bcx, dict, T_ptr(T_dict())))\n       }\n-      typeck::dict_param(_param) { fail \"FIXME[impl]\"; }\n+      typeck::dict_param(n_param, n_bound) {\n+        rslt(bcx, option::get(bcx.fcx.lltyparams[n_param].dicts)[n_bound])\n+      }\n     }\n }\n\\ No newline at end of file"}, {"sha": "f5b6f0f736ae0674fc17fb826092c1b1974d0346", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e88d5ae92af1ebfb1d23e027db7133c669cca69/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e88d5ae92af1ebfb1d23e027db7133c669cca69/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4e88d5ae92af1ebfb1d23e027db7133c669cca69", "patch": "@@ -1515,10 +1515,10 @@ fn lookup_method(fcx: @fn_ctxt, isc: resolve::iscopes,\n                   }\n                   _ {}\n                 }\n+                bound_n += 1u;\n               }\n               _ {}\n             }\n-            bound_n += 1u;\n         }\n         ret none;\n       }\n@@ -2868,7 +2868,8 @@ fn check_for_main_fn(tcx: ty::ctxt, crate: @ast::crate) {\n type dict_res = @[dict_origin];\n tag dict_origin {\n     dict_static(ast::def_id, [ty::t], dict_res);\n-    dict_param(uint);\n+    // Param number, bound number\n+    dict_param(uint, uint);\n }\n type dict_map = hashmap<ast::node_id, dict_res>;\n \n@@ -2882,7 +2883,7 @@ fn resolve_dicts(tcx: ty::ctxt, impl_map: resolve::impl_map,\n                 dict_map: dict_map};\n     let cx = {tcx: tcx, impl_map: impl_map,\n               method_map: method_map, dict_map: new_int_hash()};\n-    \n+\n     fn has_iface_bounds(tps: [ty::param_bounds]) -> bool {\n         vec::any(tps, {|bs|\n             vec::any(*bs, {|b|\n@@ -2947,21 +2948,23 @@ fn resolve_dicts(tcx: ty::ctxt, impl_map: resolve::impl_map,\n     }\n \n     fn lookup_dict(tcx: ty::ctxt, isc: resolve::iscopes, sp: span,\n-                     ty: ty::t, iface_ty: ty::t) -> dict_origin {\n+                   ty: ty::t, iface_ty: ty::t) -> dict_origin {\n         let iface_id = alt ty::struct(tcx, iface_ty) {\n             ty::ty_iface(did, _) { did }\n             _ { tcx.sess.abort_if_errors(); fail; }\n         };\n         alt ty::struct(tcx, ty) {\n           ty::ty_param(n, did) {\n+            let n_bound = 0u;\n             for bound in *tcx.ty_param_bounds.get(did.node) {\n                 alt bound {\n                   ty::bound_iface(ity) {\n                     alt ty::struct(tcx, ity) {\n                       ty::ty_iface(idid, _) {\n-                        if did == idid { ret dict_param(n); }\n+                        if iface_id == idid { ret dict_param(n, n_bound); }\n                       }\n                     }\n+                    n_bound += 1u;\n                   }\n                   _ {}\n                 }"}, {"sha": "cf30cefbd33cc9b958e64e9b9269a06454ed27d8", "filename": "src/test/run-pass/iface-to-str.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e88d5ae92af1ebfb1d23e027db7133c669cca69/src%2Ftest%2Frun-pass%2Fiface-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e88d5ae92af1ebfb1d23e027db7133c669cca69/src%2Ftest%2Frun-pass%2Fiface-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-to-str.rs?ref=4e88d5ae92af1ebfb1d23e027db7133c669cca69", "patch": "@@ -13,10 +13,16 @@ impl <T: to_str> of to_str for [T] {\n }\n \n fn main() {\n+    assert 1.to_str() == \"1\";\n+    assert [2, 3, 4].to_str() == \"[2, 3, 4]\";\n+\n     fn indirect<T: to_str>(x: T) -> str {\n         x.to_str() + \"!\"\n     }\n-    assert 1.to_str() == \"1\";\n-    assert [2, 3, 4].to_str() == \"[2, 3, 4]\";\n     assert indirect([10, 20]) == \"[10, 20]!\";\n+\n+    fn indirect2<T: to_str>(x: T) -> str {\n+        indirect(x)\n+    }\n+    assert indirect2([1]) == \"[1]!\";\n }"}]}