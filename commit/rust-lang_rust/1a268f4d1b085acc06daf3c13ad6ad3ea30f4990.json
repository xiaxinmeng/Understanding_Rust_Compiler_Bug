{"sha": "1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMjY4ZjRkMWIwODVhY2MwNmRhZjNjMTNhZDZhZDNlYTMwZjQ5OTA=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-11T01:27:06Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-11T01:27:06Z"}, "message": "Rename TypeWithMutability to TypeAndMut", "tree": {"sha": "39af620aa7936ed79ada7cc8216740bb2e0743c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39af620aa7936ed79ada7cc8216740bb2e0743c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "html_url": "https://github.com/rust-lang/rust/commit/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe30f6251a011d06096e3847021aa4090708c60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe30f6251a011d06096e3847021aa4090708c60b", "html_url": "https://github.com/rust-lang/rust/commit/fe30f6251a011d06096e3847021aa4090708c60b"}], "stats": {"total": 212, "additions": 106, "deletions": 106}, "files": [{"sha": "57157560f1fbca91e60a0df0463b9d4b165c5e8d", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -587,11 +587,11 @@ fn parse_mutability(st: &mut PState) -> ast::Mutability {\n     }\n }\n \n-fn parse_mt_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> ty::TypeWithMutability<'tcx> where\n+fn parse_mt_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> ty::TypeAndMut<'tcx> where\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     let m = parse_mutability(st);\n-    ty::TypeWithMutability { ty: parse_ty_(st, conv), mutbl: m }\n+    ty::TypeAndMut { ty: parse_ty_(st, conv), mutbl: m }\n }\n \n fn parse_def_<F>(st: &mut PState, source: DefIdSource, conv: &mut F) -> ast::DefId where"}, {"sha": "a932ada61f129723817ce3693ea8c69565a514fc", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -183,7 +183,7 @@ fn enc_mutability(w: &mut Encoder, mt: ast::Mutability) {\n }\n \n fn enc_mt<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,\n-                    mt: ty::TypeWithMutability<'tcx>) {\n+                    mt: ty::TypeAndMut<'tcx>) {\n     enc_mutability(w, mt.mutbl);\n     enc_ty(w, cx, mt.ty);\n }"}, {"sha": "bbd452b35acdf7732a5cb04d7708f11e28fa2828", "filename": "src/librustc/middle/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcast.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -36,9 +36,9 @@ pub enum CastTy<'tcx> {\n     /// Function Pointers\n     FnPtr,\n     /// Raw pointers\n-    Ptr(&'tcx ty::TypeWithMutability<'tcx>),\n+    Ptr(&'tcx ty::TypeAndMut<'tcx>),\n     /// References\n-    RPtr(&'tcx ty::TypeWithMutability<'tcx>),\n+    RPtr(&'tcx ty::TypeAndMut<'tcx>),\n }\n \n /// Cast Kind. See RFC 401 (or librustc_typeck/check/cast.rs)"}, {"sha": "394ed1d0a74e07272a0bd80ef70a4f8689d09abb", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -535,7 +535,7 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n             }\n         }\n \n-        ty::TyRef(_, ty::TypeWithMutability { ty, mutbl }) => {\n+        ty::TyRef(_, ty::TypeAndMut { ty, mutbl }) => {\n             match ty.sty {\n                ty::TyArray(_, n) => match ctor {\n                     &Single => {\n@@ -600,7 +600,7 @@ fn all_constructors(cx: &MatchCheckCtxt, left_ty: Ty,\n         ty::TyBool =>\n             [true, false].iter().map(|b| ConstantValue(ConstVal::Bool(*b))).collect(),\n \n-        ty::TyRef(_, ty::TypeWithMutability { ty, .. }) => match ty.sty {\n+        ty::TyRef(_, ty::TypeAndMut { ty, .. }) => match ty.sty {\n             ty::TySlice(_) =>\n                 range_inclusive(0, max_slice_length).map(|length| Slice(length)).collect(),\n             _ => vec!(Single)\n@@ -808,7 +808,7 @@ pub fn constructor_arity(cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> usi\n     match ty.sty {\n         ty::TyTuple(ref fs) => fs.len(),\n         ty::TyBox(_) => 1,\n-        ty::TyRef(_, ty::TypeWithMutability { ty, .. }) => match ty.sty {\n+        ty::TyRef(_, ty::TypeAndMut { ty, .. }) => match ty.sty {\n             ty::TySlice(_) => match *ctor {\n                 Slice(length) => length,\n                 ConstantValue(_) => 0,"}, {"sha": "18059848481e6e557a6f80badb0fafd87788e019", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> Implicator<'a, 'tcx> {\n \n             ty::TyArray(t, _) |\n             ty::TySlice(t) |\n-            ty::TyRawPtr(ty::TypeWithMutability { ty: t, .. }) |\n+            ty::TyRawPtr(ty::TypeAndMut { ty: t, .. }) |\n             ty::TyBox(t) => {\n                 self.accumulate_from_ty(t)\n             }"}, {"sha": "bf47396bb9f656afdba931e1e18e178c52099744", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -1614,7 +1614,7 @@ impl fmt::Debug for InteriorKind {\n \n fn element_kind(t: Ty) -> ElementKind {\n     match t.sty {\n-        ty::TyRef(_, ty::TypeWithMutability{ty, ..}) |\n+        ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n         ty::TyBox(ty) => match ty.sty {\n             ty::TySlice(_) => VecElement,\n             _ => OtherElement"}, {"sha": "a8a6ba0f0e25468960a634bb8089e3cb734c5478", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -1659,7 +1659,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::TyRef(_, ty::TypeWithMutability { ty: _, mutbl }) => {\n+            ty::TyRef(_, ty::TypeAndMut { ty: _, mutbl }) => {\n                 // &mut T or &T\n                 match bound {\n                     ty::BoundCopy => {\n@@ -1851,8 +1851,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Some(vec![referent_ty])\n             }\n \n-            ty::TyRawPtr(ty::TypeWithMutability { ty: element_ty, ..}) |\n-            ty::TyRef(_, ty::TypeWithMutability { ty: element_ty, ..}) => {\n+            ty::TyRawPtr(ty::TypeAndMut { ty: element_ty, ..}) |\n+            ty::TyRef(_, ty::TypeAndMut { ty: element_ty, ..}) => {\n                 Some(vec![element_ty])\n             },\n "}, {"sha": "a480ef1f6f7e0b93f487a6789049793510f111ca", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -110,7 +110,7 @@ pub struct CrateAnalysis {\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Field<'tcx> {\n     pub name: ast::Name,\n-    pub mt: TypeWithMutability<'tcx>\n+    pub mt: TypeAndMut<'tcx>\n }\n \n \n@@ -487,7 +487,7 @@ pub struct AssociatedType<'tcx> {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n-pub struct TypeWithMutability<'tcx> {\n+pub struct TypeAndMut<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: ast::Mutability,\n }\n@@ -1746,11 +1746,11 @@ pub enum TypeVariants<'tcx> {\n     TySlice(Ty<'tcx>),\n \n     /// A raw pointer. Written as `*mut T` or `*const T`\n-    TyRawPtr(TypeWithMutability<'tcx>),\n+    TyRawPtr(TypeAndMut<'tcx>),\n \n     /// A reference; a pointer with an associated lifetime. Written as\n     /// `&a mut T` or `&'a T`.\n-    TyRef(&'tcx Region, TypeWithMutability<'tcx>),\n+    TyRef(&'tcx Region, TypeAndMut<'tcx>),\n \n     /// If the def-id is Some(_), then this is the type of a specific\n     /// fn item. Otherwise, if None(_), it a fn pointer type.\n@@ -3564,28 +3564,28 @@ impl<'tcx> ctxt<'tcx> {\n         self.mk_ty(TyBox(ty))\n     }\n \n-    pub fn mk_ptr(&self, tm: TypeWithMutability<'tcx>) -> Ty<'tcx> {\n+    pub fn mk_ptr(&self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(TyRawPtr(tm))\n     }\n \n-    pub fn mk_ref(&self, r: &'tcx Region, tm: TypeWithMutability<'tcx>) -> Ty<'tcx> {\n+    pub fn mk_ref(&self, r: &'tcx Region, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(TyRef(r, tm))\n     }\n \n     pub fn mk_mut_ref(&self, r: &'tcx Region, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ref(r, TypeWithMutability {ty: ty, mutbl: ast::MutMutable})\n+        self.mk_ref(r, TypeAndMut {ty: ty, mutbl: ast::MutMutable})\n     }\n \n     pub fn mk_imm_ref(&self, r: &'tcx Region, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ref(r, TypeWithMutability {ty: ty, mutbl: ast::MutImmutable})\n+        self.mk_ref(r, TypeAndMut {ty: ty, mutbl: ast::MutImmutable})\n     }\n \n     pub fn mk_mut_ptr(&self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ptr(TypeWithMutability {ty: ty, mutbl: ast::MutMutable})\n+        self.mk_ptr(TypeAndMut {ty: ty, mutbl: ast::MutMutable})\n     }\n \n     pub fn mk_imm_ptr(&self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ptr(TypeWithMutability {ty: ty, mutbl: ast::MutImmutable})\n+        self.mk_ptr(TypeAndMut {ty: ty, mutbl: ast::MutImmutable})\n     }\n \n     pub fn mk_nil_ptr(&self) -> Ty<'tcx> {\n@@ -4269,7 +4269,7 @@ impl<'tcx> TyS<'tcx> {\n         }\n \n         fn tc_mt<'tcx>(cx: &ctxt<'tcx>,\n-                       mt: TypeWithMutability<'tcx>,\n+                       mt: TypeAndMut<'tcx>,\n                        cache: &mut FnvHashMap<Ty<'tcx>, TypeContents>) -> TypeContents\n         {\n             let mc = TC::ReachesMutable.when(mt.mutbl == MutMutable);\n@@ -4341,11 +4341,11 @@ impl<'tcx> TyS<'tcx> {\n         // Fast-path for primitive types\n         let result = match self.sty {\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-            TyRawPtr(..) | TyBareFn(..) | TyRef(_, TypeWithMutability {\n+            TyRawPtr(..) | TyBareFn(..) | TyRef(_, TypeAndMut {\n                 mutbl: ast::MutImmutable, ..\n             }) => Some(false),\n \n-            TyStr | TyBox(..) | TyRef(_, TypeWithMutability {\n+            TyStr | TyBox(..) | TyRef(_, TypeAndMut {\n                 mutbl: ast::MutMutable, ..\n             }) => Some(true),\n \n@@ -4780,10 +4780,10 @@ impl<'tcx> TyS<'tcx> {\n     //\n     // The parameter `explicit` indicates if this is an *explicit* dereference.\n     // Some types---notably unsafe ptrs---can only be dereferenced explicitly.\n-    pub fn builtin_deref(&self, explicit: bool) -> Option<TypeWithMutability<'tcx>> {\n+    pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {\n         match self.sty {\n             TyBox(ty) => {\n-                Some(TypeWithMutability {\n+                Some(TypeAndMut {\n                     ty: ty,\n                     mutbl: ast::MutImmutable,\n                 })\n@@ -4922,10 +4922,10 @@ impl<'tcx> TyS<'tcx> {\n         match autoref {\n             None => self,\n             Some(AutoPtr(r, m)) => {\n-                cx.mk_ref(r, TypeWithMutability { ty: self, mutbl: m })\n+                cx.mk_ref(r, TypeAndMut { ty: self, mutbl: m })\n             }\n             Some(AutoUnsafe(m)) => {\n-                cx.mk_ptr(TypeWithMutability { ty: self, mutbl: m })\n+                cx.mk_ptr(TypeAndMut { ty: self, mutbl: m })\n             }\n         }\n     }\n@@ -5416,7 +5416,7 @@ impl<'tcx> ctxt<'tcx> {\n \n     pub fn note_and_explain_type_err(&self, err: &TypeError<'tcx>, sp: Span) {\n         use self::TypeError::*;\n-        \n+\n         match *err {\n             RegionsDoesNotOutlive(subregion, superregion) => {\n                 self.note_and_explain_region(\"\", subregion, \"...\");\n@@ -5984,7 +5984,7 @@ impl<'tcx> ctxt<'tcx> {\n         self.lookup_struct_fields(did).iter().map(|f| {\n            Field {\n                 name: f.name,\n-                mt: TypeWithMutability {\n+                mt: TypeAndMut {\n                     ty: self.lookup_field_type(did, f.id, substs),\n                     mutbl: MutImmutable\n                 }\n@@ -6070,7 +6070,7 @@ impl<'tcx> ctxt<'tcx> {\n                                     }\n                                     UpvarCapture::ByRef(borrow) => {\n                                         tcx.mk_ref(tcx.mk_region(borrow.region),\n-                                            ty::TypeWithMutability {\n+                                            ty::TypeAndMut {\n                                                 ty: freevar_ty,\n                                                 mutbl: borrow.kind.to_mutbl_lossy(),\n                                             })\n@@ -6423,7 +6423,7 @@ impl<'tcx> ctxt<'tcx> {\n                 h.as_str().hash(state);\n                 did.node.hash(state);\n             };\n-            let mt = |state: &mut SipHasher, mt: TypeWithMutability| {\n+            let mt = |state: &mut SipHasher, mt: TypeAndMut| {\n                 mt.mutbl.hash(state);\n             };\n             let fn_sig = |state: &mut SipHasher, sig: &Binder<FnSig<'tcx>>| {"}, {"sha": "3cf5e6ffa039f0143b7245a48707b73578e3ccf0", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -85,7 +85,7 @@ pub trait TypeFolder<'tcx> : Sized {\n         super_fold_ty(self, t)\n     }\n \n-    fn fold_mt(&mut self, t: &ty::TypeWithMutability<'tcx>) -> ty::TypeWithMutability<'tcx> {\n+    fn fold_mt(&mut self, t: &ty::TypeAndMut<'tcx>) -> ty::TypeAndMut<'tcx> {\n         super_fold_mt(self, t)\n     }\n \n@@ -251,8 +251,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ClosureTy<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::TypeWithMutability<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TypeWithMutability<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ty::TypeAndMut<'tcx> {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TypeAndMut<'tcx> {\n         folder.fold_mt(self)\n     }\n }\n@@ -685,9 +685,9 @@ pub fn super_fold_trait_ref<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n }\n \n pub fn super_fold_mt<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                mt: &ty::TypeWithMutability<'tcx>)\n-                                                -> ty::TypeWithMutability<'tcx> {\n-    ty::TypeWithMutability {ty: mt.ty.fold_with(this),\n+                                                mt: &ty::TypeAndMut<'tcx>)\n+                                                -> ty::TypeAndMut<'tcx> {\n+    ty::TypeAndMut {ty: mt.ty.fold_with(this),\n             mutbl: mt.mutbl}\n }\n "}, {"sha": "3a4bb102146703f64872174c277f57502ea09720", "filename": "src/librustc/middle/ty_relate/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -89,11 +89,11 @@ pub trait Relate<'a,'tcx>: TypeFoldable<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Relate impls\n \n-impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::TypeWithMutability<'tcx> {\n+impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::TypeAndMut<'tcx> {\n     fn relate<R>(relation: &mut R,\n-                 a: &ty::TypeWithMutability<'tcx>,\n-                 b: &ty::TypeWithMutability<'tcx>)\n-                 -> RelateResult<'tcx, ty::TypeWithMutability<'tcx>>\n+                 a: &ty::TypeAndMut<'tcx>,\n+                 b: &ty::TypeAndMut<'tcx>)\n+                 -> RelateResult<'tcx, ty::TypeAndMut<'tcx>>\n         where R: TypeRelation<'a,'tcx>\n     {\n         debug!(\"{}.mts({:?}, {:?})\",\n@@ -109,7 +109,7 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::TypeWithMutability<'tcx> {\n                 ast::MutMutable => ty::Invariant,\n             };\n             let ty = try!(relation.relate_with_variance(variance, &a.ty, &b.ty));\n-            Ok(ty::TypeWithMutability {ty: ty, mutbl: mutbl})\n+            Ok(ty::TypeAndMut {ty: ty, mutbl: mutbl})\n         }\n     }\n }"}, {"sha": "4d60500ecf6b9d561ad2739a656bcc54eef2a161", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -19,7 +19,7 @@ use middle::ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyBareFn};\n use middle::ty::{TyParam, TyRawPtr, TyRef, TyTuple};\n use middle::ty::TyClosure;\n use middle::ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n-use middle::ty::{self, TypeWithMutability, Ty, HasTypeFlags};\n+use middle::ty::{self, TypeAndMut, Ty, HasTypeFlags};\n use middle::ty_fold::{self, TypeFoldable};\n \n use std::fmt;\n@@ -321,7 +321,7 @@ impl<'tcx> fmt::Debug for ty::TyS<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Display for ty::TypeWithMutability<'tcx> {\n+impl<'tcx> fmt::Display for ty::TypeAndMut<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}{}\",\n                if self.mutbl == ast::MutMutable { \"mut \" } else { \"\" },"}, {"sha": "2b480abe3f1f3fc4c59906ae30f6ccd9bef012e6", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -398,7 +398,7 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                     mut path: DiscrField) -> Option<DiscrField> {\n     match ty.sty {\n         // Fat &T/&mut T/Box<T> i.e. T is [T], str, or Trait\n-        ty::TyRef(_, ty::TypeWithMutability { ty, .. }) | ty::TyBox(ty) if !type_is_sized(tcx, ty) => {\n+        ty::TyRef(_, ty::TypeAndMut { ty, .. }) | ty::TyBox(ty) if !type_is_sized(tcx, ty) => {\n             path.push(FAT_PTR_ADDR);\n             Some(path)\n         },\n@@ -415,7 +415,7 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n             assert_eq!(nonzero_fields.len(), 1);\n             let nonzero_field = tcx.lookup_field_type(did, nonzero_fields[0].id, substs);\n             match nonzero_field.sty {\n-                ty::TyRawPtr(ty::TypeWithMutability { ty, .. }) if !type_is_sized(tcx, ty) => {\n+                ty::TyRawPtr(ty::TypeAndMut { ty, .. }) if !type_is_sized(tcx, ty) => {\n                     path.push_all(&[0, FAT_PTR_ADDR]);\n                     Some(path)\n                 },"}, {"sha": "f8daefa87a5ff51aa10130df94ed202b32034c70", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -223,7 +223,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n             // We can also mark the return value as `dereferenceable` in certain cases\n             match ret_ty.sty {\n                 // These are not really pointers but pairs, (pointer, len)\n-                ty::TyRef(_, ty::TypeWithMutability { ty: inner, .. })\n+                ty::TyRef(_, ty::TypeAndMut { ty: inner, .. })\n                 | ty::TyBox(inner) if common::type_is_sized(ccx.tcx(), inner) => {\n                     let llret_sz = machine::llsize_of_real(ccx, type_of::type_of(ccx, inner));\n                     attrs.ret(llvm::DereferenceableAttribute(llret_sz));"}, {"sha": "2f5f5345e64187fe32172ff5ef1ee377d558d86b", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -130,8 +130,8 @@ pub fn type_is_sized<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n \n pub fn type_is_fat_ptr<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n-        ty::TyRawPtr(ty::TypeWithMutability{ty, ..}) |\n-        ty::TyRef(_, ty::TypeWithMutability{ty, ..}) |\n+        ty::TyRawPtr(ty::TypeAndMut{ty, ..}) |\n+        ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n         ty::TyBox(ty) => {\n             !type_is_sized(cx, ty)\n         }"}, {"sha": "7bf8dbe84bc53600d859f6812f014c1658d787e2", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -621,7 +621,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             let len = unsafe { llvm::LLVMConstIntGetZExtValue(len) as u64 };\n             let len = match bt.sty {\n-                ty::TyBox(ty) | ty::TyRef(_, ty::TypeWithMutability{ty, ..}) => match ty.sty {\n+                ty::TyBox(ty) | ty::TyRef(_, ty::TypeAndMut{ty, ..}) => match ty.sty {\n                     ty::TyStr => {\n                         assert!(len > 0);\n                         len - 1"}, {"sha": "75215295dbd33567d326377ccf292773f9213247", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -206,7 +206,7 @@ impl<'tcx> TypeMap<'tcx> {\n                 let inner_type_id = self.get_unique_type_id_as_string(inner_type_id);\n                 unique_type_id.push_str(&inner_type_id[..]);\n             },\n-            ty::TyRawPtr(ty::TypeWithMutability { ty: inner_type, mutbl } ) => {\n+            ty::TyRawPtr(ty::TypeAndMut { ty: inner_type, mutbl } ) => {\n                 unique_type_id.push('*');\n                 if mutbl == ast::MutMutable {\n                     unique_type_id.push_str(\"mut\");\n@@ -216,7 +216,7 @@ impl<'tcx> TypeMap<'tcx> {\n                 let inner_type_id = self.get_unique_type_id_as_string(inner_type_id);\n                 unique_type_id.push_str(&inner_type_id[..]);\n             },\n-            ty::TyRef(_, ty::TypeWithMutability { ty: inner_type, mutbl }) => {\n+            ty::TyRef(_, ty::TypeAndMut { ty: inner_type, mutbl }) => {\n                 unique_type_id.push('&');\n                 if mutbl == ast::MutMutable {\n                     unique_type_id.push_str(\"mut\");\n@@ -561,7 +561,7 @@ fn vec_slice_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                 unique_type_id: UniqueTypeId,\n                                 span: Span)\n                                 -> MetadataCreationResult {\n-    let data_ptr_type = cx.tcx().mk_ptr(ty::TypeWithMutability {\n+    let data_ptr_type = cx.tcx().mk_ptr(ty::TypeAndMut {\n         ty: element_type,\n         mutbl: ast::MutImmutable\n     });\n@@ -765,7 +765,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         trait_pointer_metadata(cx, t, None, unique_type_id),\n             false)\n         }\n-        ty::TyBox(ty) | ty::TyRawPtr(ty::TypeWithMutability{ty, ..}) | ty::TyRef(_, ty::TypeWithMutability{ty, ..}) => {\n+        ty::TyBox(ty) | ty::TyRawPtr(ty::TypeAndMut{ty, ..}) | ty::TyRef(_, ty::TypeAndMut{ty, ..}) => {\n             match ty.sty {\n                 ty::TySlice(typ) => {\n                     vec_slice_metadata(cx, t, typ, unique_type_id, usage_site_span)"}, {"sha": "b912acb90a2cec32c9a68153073af153558e16ff", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -77,7 +77,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             push_debuginfo_type_name(cx, inner_type, true, output);\n             output.push('>');\n         },\n-        ty::TyRawPtr(ty::TypeWithMutability { ty: inner_type, mutbl } ) => {\n+        ty::TyRawPtr(ty::TypeAndMut { ty: inner_type, mutbl } ) => {\n             output.push('*');\n             match mutbl {\n                 ast::MutImmutable => output.push_str(\"const \"),\n@@ -86,7 +86,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             push_debuginfo_type_name(cx, inner_type, true, output);\n         },\n-        ty::TyRef(_, ty::TypeWithMutability { ty: inner_type, mutbl }) => {\n+        ty::TyRef(_, ty::TypeAndMut { ty: inner_type, mutbl }) => {\n             output.push('&');\n             if mutbl == ast::MutMutable {\n                 output.push_str(\"mut \");"}, {"sha": "9ea9135c8315f31fb60fb835e9fa0ec9d6f04830", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -440,9 +440,9 @@ fn coerce_unsized<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     match (&source.ty.sty, &target.ty.sty) {\n         (&ty::TyBox(a), &ty::TyBox(b)) |\n-        (&ty::TyRef(_, ty::TypeWithMutability { ty: a, .. }), &ty::TyRef(_, ty::TypeWithMutability { ty: b, .. })) |\n-        (&ty::TyRef(_, ty::TypeWithMutability { ty: a, .. }), &ty::TyRawPtr(ty::TypeWithMutability { ty: b, .. })) |\n-        (&ty::TyRawPtr(ty::TypeWithMutability { ty: a, .. }), &ty::TyRawPtr(ty::TypeWithMutability { ty: b, .. })) => {\n+        (&ty::TyRef(_, ty::TypeAndMut { ty: a, .. }), &ty::TyRef(_, ty::TypeAndMut { ty: b, .. })) |\n+        (&ty::TyRef(_, ty::TypeAndMut { ty: a, .. }), &ty::TyRawPtr(ty::TypeAndMut { ty: b, .. })) |\n+        (&ty::TyRawPtr(ty::TypeAndMut { ty: a, .. }), &ty::TyRawPtr(ty::TypeAndMut { ty: b, .. })) => {\n             let (inner_source, inner_target) = (a, b);\n \n             let (base, old_info) = if !type_is_sized(bcx.tcx(), inner_source) {\n@@ -1346,7 +1346,7 @@ pub fn with_field_tys<'tcx, R, F>(tcx: &ty::ctxt<'tcx>,\n             let fields: Vec<_> = v.iter().enumerate().map(|(i, &f)| {\n                 ty::Field {\n                     name: token::intern(&i.to_string()),\n-                    mt: ty::TypeWithMutability {\n+                    mt: ty::TypeAndMut {\n                         ty: f,\n                         mutbl: ast::MutImmutable\n                     }\n@@ -1994,7 +1994,7 @@ pub fn cast_is_noop<'tcx>(tcx: &ty::ctxt<'tcx>,\n     }\n \n     match (t_in.builtin_deref(true), t_out.builtin_deref(true)) {\n-        (Some(ty::TypeWithMutability{ ty: t_in, .. }), Some(ty::TypeWithMutability{ ty: t_out, .. })) => {\n+        (Some(ty::TypeAndMut{ ty: t_in, .. }), Some(ty::TypeAndMut{ ty: t_out, .. })) => {\n             t_in == t_out\n         }\n         _ => {\n@@ -2275,8 +2275,8 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             }\n         }\n \n-        ty::TyRawPtr(ty::TypeWithMutability { ty: content_ty, .. }) |\n-        ty::TyRef(_, ty::TypeWithMutability { ty: content_ty, .. }) => {\n+        ty::TyRawPtr(ty::TypeAndMut { ty: content_ty, .. }) |\n+        ty::TyRef(_, ty::TypeAndMut { ty: content_ty, .. }) => {\n             if type_is_sized(bcx.tcx(), content_ty) {\n                 let ptr = datum.to_llscalarish(bcx);\n "}, {"sha": "0e05ca52959fbc3fa64ade5cface2a3b758e94df", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -315,7 +315,7 @@ pub fn get_base_and_len<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }\n \n         // Only used for pattern matching.\n-        ty::TyBox(ty) | ty::TyRef(_, ty::TypeWithMutability{ty, ..}) => {\n+        ty::TyBox(ty) | ty::TyRef(_, ty::TypeAndMut{ty, ..}) => {\n             let inner = if type_is_sized(bcx.tcx(), ty) {\n                 Load(bcx, llval)\n             } else {"}, {"sha": "817d996085dfd05b64b84d2a1e24cd59571f9b9a", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -193,7 +193,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n         ty::TyUint(t) => Type::uint_from_ty(cx, t),\n         ty::TyFloat(t) => Type::float_from_ty(cx, t),\n \n-        ty::TyBox(ty) | ty::TyRef(_, ty::TypeWithMutability{ty, ..}) | ty::TyRawPtr(ty::TypeWithMutability{ty, ..}) => {\n+        ty::TyBox(ty) | ty::TyRef(_, ty::TypeAndMut{ty, ..}) | ty::TyRawPtr(ty::TypeAndMut{ty, ..}) => {\n             if type_is_sized(cx.tcx(), ty) {\n                 Type::i8p(cx)\n             } else {\n@@ -352,7 +352,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n           adt::incomplete_type_of(cx, &*repr, \"closure\")\n       }\n \n-      ty::TyBox(ty) | ty::TyRef(_, ty::TypeWithMutability{ty, ..}) | ty::TyRawPtr(ty::TypeWithMutability{ty, ..}) => {\n+      ty::TyBox(ty) | ty::TyRef(_, ty::TypeAndMut{ty, ..}) | ty::TyRawPtr(ty::TypeAndMut{ty, ..}) => {\n           if !type_is_sized(cx.tcx(), ty) {\n               if let ty::TyStr = ty.sty {\n                   // This means we get a nicer name in the output (str is always"}, {"sha": "bd5cd8230e31390018d579f752ecd6a7aff00274", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -1556,7 +1556,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n             }\n         }\n         ast::TyPtr(ref mt) => {\n-            tcx.mk_ptr(ty::TypeWithMutability {\n+            tcx.mk_ptr(ty::TypeAndMut {\n                 ty: ast_ty_to_ty(this, rscope, &*mt.ty),\n                 mutbl: mt.mutbl\n             })\n@@ -1569,7 +1569,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n                     rscope,\n                     ty::ObjectLifetimeDefault::Specific(r));\n             let t = ast_ty_to_ty(this, rscope1, &*mt.ty);\n-            tcx.mk_ref(tcx.mk_region(r), ty::TypeWithMutability {ty: t, mutbl: mt.mutbl})\n+            tcx.mk_ref(tcx.mk_region(r), ty::TypeAndMut {ty: t, mutbl: mt.mutbl})\n         }\n         ast::TyTup(ref fields) => {\n             let flds = fields.iter()\n@@ -1755,7 +1755,7 @@ fn ty_of_method_or_bare_fn<'a, 'tcx>(this: &AstConv<'tcx>,\n                 ty::ByReferenceExplicitSelfCategory(region, mutability) => {\n                     (Some(this.tcx().mk_ref(\n                                       this.tcx().mk_region(region),\n-                                      ty::TypeWithMutability {\n+                                      ty::TypeAndMut {\n                                         ty: self_info.untransformed_self_ty,\n                                         mutbl: mutability\n                                       })),"}, {"sha": "a995401cf5c81d9b7bbb1cb5da7a545b376f27fd", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -170,7 +170,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                     // then `x` is assigned a value of type `&M T` where M is the mutability\n                     // and T is the expected type.\n                     let region_var = fcx.infcx().next_region_var(infer::PatternRegion(pat.span));\n-                    let mt = ty::TypeWithMutability { ty: expected, mutbl: mutbl };\n+                    let mt = ty::TypeAndMut { ty: expected, mutbl: mutbl };\n                     let region_ty = tcx.mk_ref(tcx.mk_region(region_var), mt);\n \n                     // `x` is assigned a value of type `&M T`, hence `&M T <: typeof(x)` is\n@@ -272,7 +272,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         ast::PatRegion(ref inner, mutbl) => {\n             let inner_ty = fcx.infcx().next_ty_var();\n \n-            let mt = ty::TypeWithMutability { ty: inner_ty, mutbl: mutbl };\n+            let mt = ty::TypeAndMut { ty: inner_ty, mutbl: mutbl };\n             let region = fcx.infcx().next_region_var(infer::PatternRegion(pat.span));\n             let rptr_ty = tcx.mk_ref(tcx.mk_region(region), mt);\n \n@@ -301,7 +301,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                 }),\n                 _ => {\n                     let region = fcx.infcx().next_region_var(infer::PatternRegion(pat.span));\n-                    tcx.mk_ref(tcx.mk_region(region), ty::TypeWithMutability {\n+                    tcx.mk_ref(tcx.mk_region(region), ty::TypeAndMut {\n                         ty: tcx.mk_slice(inner_ty),\n                         mutbl: expected_ty.builtin_deref(true).map(|mt| mt.mutbl)\n                                                               .unwrap_or(ast::MutImmutable)\n@@ -324,7 +324,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                 let mutbl = expected_ty.builtin_deref(true)\n                     .map_or(ast::MutImmutable, |mt| mt.mutbl);\n \n-                let slice_ty = tcx.mk_ref(tcx.mk_region(region), ty::TypeWithMutability {\n+                let slice_ty = tcx.mk_ref(tcx.mk_region(region), ty::TypeAndMut {\n                     ty: tcx.mk_slice(inner_ty),\n                     mutbl: mutbl\n                 });"}, {"sha": "37541dee7d9d1c3a82bab8c0897c19bb04b30c9b", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -272,8 +272,8 @@ impl<'tcx> CastCheck<'tcx> {\n \n     fn check_ptr_ptr_cast<'a>(&self,\n                               fcx: &FnCtxt<'a, 'tcx>,\n-                              m_expr: &'tcx ty::TypeWithMutability<'tcx>,\n-                              m_cast: &'tcx ty::TypeWithMutability<'tcx>)\n+                              m_expr: &'tcx ty::TypeAndMut<'tcx>,\n+                              m_cast: &'tcx ty::TypeAndMut<'tcx>)\n                               -> Result<CastKind, CastError>\n     {\n         debug!(\"check_ptr_ptr_cast m_expr={:?} m_cast={:?}\",\n@@ -299,7 +299,7 @@ impl<'tcx> CastCheck<'tcx> {\n \n     fn check_fptr_ptr_cast<'a>(&self,\n                                fcx: &FnCtxt<'a, 'tcx>,\n-                               m_cast: &'tcx ty::TypeWithMutability<'tcx>)\n+                               m_cast: &'tcx ty::TypeAndMut<'tcx>)\n                                -> Result<CastKind, CastError>\n     {\n         // fptr-ptr cast. must be to sized ptr\n@@ -313,7 +313,7 @@ impl<'tcx> CastCheck<'tcx> {\n \n     fn check_ptr_addr_cast<'a>(&self,\n                                fcx: &FnCtxt<'a, 'tcx>,\n-                               m_expr: &'tcx ty::TypeWithMutability<'tcx>)\n+                               m_expr: &'tcx ty::TypeAndMut<'tcx>)\n                                -> Result<CastKind, CastError>\n     {\n         // ptr-addr cast. must be from sized ptr\n@@ -327,8 +327,8 @@ impl<'tcx> CastCheck<'tcx> {\n \n     fn check_ref_cast<'a>(&self,\n                           fcx: &FnCtxt<'a, 'tcx>,\n-                          m_expr: &'tcx ty::TypeWithMutability<'tcx>,\n-                          m_cast: &'tcx ty::TypeWithMutability<'tcx>)\n+                          m_expr: &'tcx ty::TypeAndMut<'tcx>,\n+                          m_cast: &'tcx ty::TypeAndMut<'tcx>)\n                           -> Result<CastKind, CastError>\n     {\n         // array-ptr-cast.\n@@ -353,7 +353,7 @@ impl<'tcx> CastCheck<'tcx> {\n \n     fn check_addr_ptr_cast<'a>(&self,\n                                fcx: &FnCtxt<'a, 'tcx>,\n-                               m_cast: &'tcx ty::TypeWithMutability<'tcx>)\n+                               m_cast: &'tcx ty::TypeAndMut<'tcx>)\n                                -> Result<CastKind, CastError>\n     {\n         // ptr-addr cast. pointer must be thin."}, {"sha": "6963e25cd5b1b27a1418030d9c15b5f35549e031", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -66,7 +66,7 @@ use middle::infer::{self, Coercion};\n use middle::traits::{self, ObligationCause};\n use middle::traits::{predicate_for_trait_def, report_selection_error};\n use middle::ty::{AutoDerefRef, AdjustDerefRef};\n-use middle::ty::{self, TypeWithMutability, Ty, TypeError};\n+use middle::ty::{self, TypeAndMut, Ty, TypeError};\n use middle::ty_relate::RelateResult;\n use util::common::indent;\n \n@@ -202,7 +202,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 return None;\n             }\n             let ty = self.tcx().mk_ref(r_borrow,\n-                                        TypeWithMutability {ty: inner_ty, mutbl: mutbl_b});\n+                                        TypeAndMut {ty: inner_ty, mutbl: mutbl_b});\n             if let Err(err) = self.subtype(ty, b) {\n                 if first_error.is_none() {\n                     first_error = Some(err);\n@@ -411,7 +411,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         };\n \n         // Check that the types which they point at are compatible.\n-        let a_unsafe = self.tcx().mk_ptr(ty::TypeWithMutability{ mutbl: mutbl_b, ty: mt_a.ty });\n+        let a_unsafe = self.tcx().mk_ptr(ty::TypeAndMut{ mutbl: mutbl_b, ty: mt_a.ty });\n         try!(self.subtype(a_unsafe, b));\n         try!(coerce_mutbls(mt_a.mutbl, mutbl_b));\n "}, {"sha": "1b819380814677c5d60d340853fc722e21c0b8e5", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -433,7 +433,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         };\n \n         match sig.0.inputs[0].sty {\n-            ty::TyRef(_, ty::TypeWithMutability {\n+            ty::TyRef(_, ty::TypeAndMut {\n                 ty: _,\n                 mutbl: ast::MutMutable,\n             }) => {}"}, {"sha": "a74c004389b4da4515a7585c9e98694bba0951f6", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -271,7 +271,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                     // Trait method is fn(&self) or fn(&mut self), need an\n                     // autoref. Pull the region etc out of the type of first argument.\n                     match transformed_self_ty.sty {\n-                        ty::TyRef(region, ty::TypeWithMutability { mutbl, ty: _ }) => {\n+                        ty::TyRef(region, ty::TypeAndMut { mutbl, ty: _ }) => {\n                             fcx.write_adjustment(self_expr.id,\n                                 ty::AdjustDerefRef(ty::AutoDerefRef {\n                                     autoderefs: autoderefs,"}, {"sha": "a960123efc6b8172045ea9fefa1c0fe7a4ed8e3e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -311,11 +311,11 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                 let lang_def_id = self.tcx().lang_items.slice_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyRawPtr(ty::TypeWithMutability { ty: _, mutbl: ast::MutImmutable }) => {\n+            ty::TyRawPtr(ty::TypeAndMut { ty: _, mutbl: ast::MutImmutable }) => {\n                 let lang_def_id = self.tcx().lang_items.const_ptr_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyRawPtr(ty::TypeWithMutability { ty: _, mutbl: ast::MutMutable }) => {\n+            ty::TyRawPtr(ty::TypeAndMut { ty: _, mutbl: ast::MutMutable }) => {\n                 let lang_def_id = self.tcx().lang_items.mut_ptr_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n@@ -951,7 +951,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n \n         // Search through mutabilities in order to find one where pick works:\n         [ast::MutImmutable, ast::MutMutable].iter().filter_map(|&m| {\n-            let autoref_ty = tcx.mk_ref(region, ty::TypeWithMutability {\n+            let autoref_ty = tcx.mk_ref(region, ty::TypeAndMut {\n                 ty: step.self_ty,\n                 mutbl: m\n             });"}, {"sha": "f614c2e05465df66135201556852fa0d5b8dadb8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -1030,7 +1030,7 @@ fn report_cast_to_unsized_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         format!(\"cast to unsized type: `{}` as `{}`\", actual, tstr)\n     }, t_expr, None);\n     match t_expr.sty {\n-        ty::TyRef(_, ty::TypeWithMutability { mutbl: mt, .. }) => {\n+        ty::TyRef(_, ty::TypeAndMut { mutbl: mt, .. }) => {\n             let mtstr = match mt {\n                 ast::MutMutable => \"mut \",\n                 ast::MutImmutable => \"\"\n@@ -1895,7 +1895,7 @@ fn try_overloaded_deref<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                   base_expr: Option<&ast::Expr>,\n                                   base_ty: Ty<'tcx>,\n                                   lvalue_pref: LvaluePreference)\n-                                  -> Option<ty::TypeWithMutability<'tcx>>\n+                                  -> Option<ty::TypeAndMut<'tcx>>\n {\n     // Try DerefMut first, if preferred.\n     let method = match (lvalue_pref, fcx.tcx().lang_items.deref_mut_trait()) {\n@@ -1926,7 +1926,7 @@ fn try_overloaded_deref<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n fn make_overloaded_lvalue_return_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                                 method_call: Option<MethodCall>,\n                                                 method: Option<MethodCallee<'tcx>>)\n-                                                -> Option<ty::TypeWithMutability<'tcx>>\n+                                                -> Option<ty::TypeAndMut<'tcx>>\n {\n     match method {\n         Some(method) => {\n@@ -3111,7 +3111,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                                     hint,\n                                                     lvalue_pref);\n \n-        let tm = ty::TypeWithMutability { ty: fcx.expr_ty(&**oprnd), mutbl: mutbl };\n+        let tm = ty::TypeAndMut { ty: fcx.expr_ty(&**oprnd), mutbl: mutbl };\n         let oprnd_t = if tm.ty.references_error() {\n             tcx.types.err\n         } else {\n@@ -4909,25 +4909,25 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n             \"offset\" | \"arith_offset\" => {\n               (1,\n                vec!(\n-                  tcx.mk_ptr(ty::TypeWithMutability {\n+                  tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(ccx, 0),\n                       mutbl: ast::MutImmutable\n                   }),\n                   ccx.tcx.types.isize\n                ),\n-               tcx.mk_ptr(ty::TypeWithMutability {\n+               tcx.mk_ptr(ty::TypeAndMut {\n                    ty: param(ccx, 0),\n                    mutbl: ast::MutImmutable\n                }))\n             }\n             \"copy\" | \"copy_nonoverlapping\" => {\n               (1,\n                vec!(\n-                  tcx.mk_ptr(ty::TypeWithMutability {\n+                  tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(ccx, 0),\n                       mutbl: ast::MutImmutable\n                   }),\n-                  tcx.mk_ptr(ty::TypeWithMutability {\n+                  tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(ccx, 0),\n                       mutbl: ast::MutMutable\n                   }),\n@@ -4938,11 +4938,11 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n             \"volatile_copy_memory\" | \"volatile_copy_nonoverlapping_memory\" => {\n               (1,\n                vec!(\n-                  tcx.mk_ptr(ty::TypeWithMutability {\n+                  tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(ccx, 0),\n                       mutbl: ast::MutMutable\n                   }),\n-                  tcx.mk_ptr(ty::TypeWithMutability {\n+                  tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(ccx, 0),\n                       mutbl: ast::MutImmutable\n                   }),\n@@ -4953,7 +4953,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n             \"write_bytes\" | \"volatile_set_memory\" => {\n               (1,\n                vec!(\n-                  tcx.mk_ptr(ty::TypeWithMutability {\n+                  tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(ccx, 0),\n                       mutbl: ast::MutMutable\n                   }),"}, {"sha": "0416f66b2c705f807fc5461906c91c037a0f890e", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -450,7 +450,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n \n             let infcx = new_infer_ctxt(tcx, &tcx.tables, Some(param_env), true);\n \n-            let check_mutbl = |mt_a: ty::TypeWithMutability<'tcx>, mt_b: ty::TypeWithMutability<'tcx>,\n+            let check_mutbl = |mt_a: ty::TypeAndMut<'tcx>, mt_b: ty::TypeAndMut<'tcx>,\n                                mk_ptr: &Fn(Ty<'tcx>) -> Ty<'tcx>| {\n                 if (mt_a.mutbl, mt_b.mutbl) == (ast::MutImmutable, ast::MutMutable) {\n                     infcx.report_mismatched_types(span, mk_ptr(mt_b.ty),"}, {"sha": "be8fce28b6f6b156091ab8c251f8e00a5637ec8b", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -100,14 +100,14 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                                                   \"[T]\",\n                                                   item.span);\n                     }\n-                    ty::TyRawPtr(ty::TypeWithMutability { ty: _, mutbl: ast::MutImmutable }) => {\n+                    ty::TyRawPtr(ty::TypeAndMut { ty: _, mutbl: ast::MutImmutable }) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.const_ptr_impl(),\n                                                   \"const_ptr\",\n                                                   \"*const T\",\n                                                   item.span);\n                     }\n-                    ty::TyRawPtr(ty::TypeWithMutability { ty: _, mutbl: ast::MutMutable }) => {\n+                    ty::TyRawPtr(ty::TypeAndMut { ty: _, mutbl: ast::MutMutable }) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.mut_ptr_impl(),\n                                                   \"mut_ptr\","}, {"sha": "4af23a27c941c569c458a49d5f571923aad7b105", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "patch": "@@ -1074,7 +1074,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     /// appearing in a context with ambient variance `variance`\n     fn add_constraints_from_mt(&mut self,\n                                generics: &ty::Generics<'tcx>,\n-                               mt: &ty::TypeWithMutability<'tcx>,\n+                               mt: &ty::TypeAndMut<'tcx>,\n                                variance: VarianceTermPtr<'a>) {\n         match mt.mutbl {\n             ast::MutMutable => {"}]}