{"sha": "314d57a7908d596a0fdfd58735bdc9e3727aed29", "node_id": "C_kwDOAAsO6NoAKDMxNGQ1N2E3OTA4ZDU5NmEwZmRmZDU4NzM1YmRjOWUzNzI3YWVkMjk", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-28T20:21:52Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-28T20:46:05Z"}, "message": "[`unnecessary_lazy_evaluations`] Do not suggest switching to early evaluation when type has custom `Drop`", "tree": {"sha": "b786c6a08005a3df1e44baa47b481a136d2bf715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b786c6a08005a3df1e44baa47b481a136d2bf715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/314d57a7908d596a0fdfd58735bdc9e3727aed29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/314d57a7908d596a0fdfd58735bdc9e3727aed29", "html_url": "https://github.com/rust-lang/rust/commit/314d57a7908d596a0fdfd58735bdc9e3727aed29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/314d57a7908d596a0fdfd58735bdc9e3727aed29/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8845f8214201bf8945de37997394994c5f6f7ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/8845f8214201bf8945de37997394994c5f6f7ace", "html_url": "https://github.com/rust-lang/rust/commit/8845f8214201bf8945de37997394994c5f6f7ace"}], "stats": {"total": 102, "additions": 67, "deletions": 35}, "files": [{"sha": "8724a4cd651debb4103aeb8f9541807ee204b953", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/314d57a7908d596a0fdfd58735bdc9e3727aed29/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314d57a7908d596a0fdfd58735bdc9e3727aed29/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=314d57a7908d596a0fdfd58735bdc9e3727aed29", "patch": "@@ -113,7 +113,17 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                     },\n                     args,\n                 ) => match self.cx.qpath_res(path, hir_id) {\n-                    Res::Def(DefKind::Ctor(..) | DefKind::Variant, _) | Res::SelfCtor(_) => (),\n+                    Res::Def(DefKind::Ctor(..) | DefKind::Variant, _) | Res::SelfCtor(_) => {\n+                        if self\n+                            .cx\n+                            .typeck_results()\n+                            .expr_ty(e)\n+                            .has_significant_drop(self.cx.tcx, self.cx.param_env)\n+                        {\n+                            self.eagerness = Lazy;\n+                            return;\n+                        }\n+                    },\n                     Res::Def(_, id) if self.cx.tcx.is_promotable_const_fn(id) => (),\n                     // No need to walk the arguments here, `is_const_evaluatable` already did\n                     Res::Def(..) if is_const_evaluatable(self.cx, e) => {"}, {"sha": "878537050d42c6ac65168914a58566bf5c7b6ca3", "filename": "tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/314d57a7908d596a0fdfd58735bdc9e3727aed29/tests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/314d57a7908d596a0fdfd58735bdc9e3727aed29/tests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.fixed?ref=314d57a7908d596a0fdfd58735bdc9e3727aed29", "patch": "@@ -21,6 +21,14 @@ fn some_call<T: Default>() -> T {\n     T::default()\n }\n \n+struct Issue9427(i32);\n+\n+impl Drop for Issue9427 {\n+    fn drop(&mut self) {\n+        println!(\"{}\", self.0);\n+    }\n+}\n+\n fn main() {\n     let astronomers_pi = 10;\n     let ext_arr: [usize; 1] = [2];\n@@ -73,6 +81,9 @@ fn main() {\n     let _ = deep.0.or_else(|| some_call());\n     let _ = opt.ok_or_else(|| ext_arr[0]);\n \n+    // Should not lint - bool\n+    let _ = (0 == 1).then(|| Issue9427(0)); // Issue9427 has a significant drop\n+\n     // should not lint, bind_instead_of_map takes priority\n     let _ = Some(10).and_then(|idx| Some(ext_arr[idx]));\n     let _ = Some(10).and_then(|idx| Some(idx));"}, {"sha": "f70cf332460e1efa9f805d1ba956e8b798934bf6", "filename": "tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/314d57a7908d596a0fdfd58735bdc9e3727aed29/tests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314d57a7908d596a0fdfd58735bdc9e3727aed29/tests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.rs?ref=314d57a7908d596a0fdfd58735bdc9e3727aed29", "patch": "@@ -21,6 +21,14 @@ fn some_call<T: Default>() -> T {\n     T::default()\n }\n \n+struct Issue9427(i32);\n+\n+impl Drop for Issue9427 {\n+    fn drop(&mut self) {\n+        println!(\"{}\", self.0);\n+    }\n+}\n+\n fn main() {\n     let astronomers_pi = 10;\n     let ext_arr: [usize; 1] = [2];\n@@ -73,6 +81,9 @@ fn main() {\n     let _ = deep.0.or_else(|| some_call());\n     let _ = opt.ok_or_else(|| ext_arr[0]);\n \n+    // Should not lint - bool\n+    let _ = (0 == 1).then(|| Issue9427(0)); // Issue9427 has a significant drop\n+\n     // should not lint, bind_instead_of_map takes priority\n     let _ = Some(10).and_then(|idx| Some(ext_arr[idx]));\n     let _ = Some(10).and_then(|idx| Some(idx));"}, {"sha": "b46fbf56c4bd116bc7da0d9ea90481cb7fa817c5", "filename": "tests/ui/unnecessary_lazy_eval.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/314d57a7908d596a0fdfd58735bdc9e3727aed29/tests%2Fui%2Funnecessary_lazy_eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/314d57a7908d596a0fdfd58735bdc9e3727aed29/tests%2Fui%2Funnecessary_lazy_eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.stderr?ref=314d57a7908d596a0fdfd58735bdc9e3727aed29", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:36:13\n+  --> $DIR/unnecessary_lazy_eval.rs:44:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| 2);\n    |             ^^^^--------------------\n@@ -9,263 +9,263 @@ LL |     let _ = opt.unwrap_or_else(|| 2);\n    = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:37:13\n+  --> $DIR/unnecessary_lazy_eval.rs:45:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| astronomers_pi);\n    |             ^^^^---------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:38:13\n+  --> $DIR/unnecessary_lazy_eval.rs:46:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n    |             ^^^^-------------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:40:13\n+  --> $DIR/unnecessary_lazy_eval.rs:48:13\n    |\n LL |     let _ = opt.and_then(|_| ext_opt);\n    |             ^^^^---------------------\n    |                 |\n    |                 help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:41:13\n+  --> $DIR/unnecessary_lazy_eval.rs:49:13\n    |\n LL |     let _ = opt.or_else(|| ext_opt);\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:42:13\n+  --> $DIR/unnecessary_lazy_eval.rs:50:13\n    |\n LL |     let _ = opt.or_else(|| None);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:43:13\n+  --> $DIR/unnecessary_lazy_eval.rs:51:13\n    |\n LL |     let _ = opt.get_or_insert_with(|| 2);\n    |             ^^^^------------------------\n    |                 |\n    |                 help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:44:13\n+  --> $DIR/unnecessary_lazy_eval.rs:52:13\n    |\n LL |     let _ = opt.ok_or_else(|| 2);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:45:13\n+  --> $DIR/unnecessary_lazy_eval.rs:53:13\n    |\n LL |     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n    |             ^^^^^^^^^^^^^^^^^-------------------------------\n    |                              |\n    |                              help: use `unwrap_or(..)` instead: `unwrap_or(Some((1, 2)))`\n \n error: unnecessary closure used with `bool::then`\n-  --> $DIR/unnecessary_lazy_eval.rs:46:13\n+  --> $DIR/unnecessary_lazy_eval.rs:54:13\n    |\n LL |     let _ = cond.then(|| astronomers_pi);\n    |             ^^^^^-----------------------\n    |                  |\n    |                  help: use `then_some(..)` instead: `then_some(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:49:13\n+  --> $DIR/unnecessary_lazy_eval.rs:57:13\n    |\n LL |     let _ = Some(10).unwrap_or_else(|| 2);\n    |             ^^^^^^^^^--------------------\n    |                      |\n    |                      help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:50:13\n+  --> $DIR/unnecessary_lazy_eval.rs:58:13\n    |\n LL |     let _ = Some(10).and_then(|_| ext_opt);\n    |             ^^^^^^^^^---------------------\n    |                      |\n    |                      help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:51:28\n+  --> $DIR/unnecessary_lazy_eval.rs:59:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| ext_opt);\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:52:13\n+  --> $DIR/unnecessary_lazy_eval.rs:60:13\n    |\n LL |     let _ = None.get_or_insert_with(|| 2);\n    |             ^^^^^------------------------\n    |                  |\n    |                  help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:53:35\n+  --> $DIR/unnecessary_lazy_eval.rs:61:35\n    |\n LL |     let _: Result<usize, usize> = None.ok_or_else(|| 2);\n    |                                   ^^^^^----------------\n    |                                        |\n    |                                        help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:54:28\n+  --> $DIR/unnecessary_lazy_eval.rs:62:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| None);\n    |                            ^^^^^----------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:57:13\n+  --> $DIR/unnecessary_lazy_eval.rs:65:13\n    |\n LL |     let _ = deep.0.unwrap_or_else(|| 2);\n    |             ^^^^^^^--------------------\n    |                    |\n    |                    help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:58:13\n+  --> $DIR/unnecessary_lazy_eval.rs:66:13\n    |\n LL |     let _ = deep.0.and_then(|_| ext_opt);\n    |             ^^^^^^^---------------------\n    |                    |\n    |                    help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:59:13\n+  --> $DIR/unnecessary_lazy_eval.rs:67:13\n    |\n LL |     let _ = deep.0.or_else(|| None);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:60:13\n+  --> $DIR/unnecessary_lazy_eval.rs:68:13\n    |\n LL |     let _ = deep.0.get_or_insert_with(|| 2);\n    |             ^^^^^^^------------------------\n    |                    |\n    |                    help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:61:13\n+  --> $DIR/unnecessary_lazy_eval.rs:69:13\n    |\n LL |     let _ = deep.0.ok_or_else(|| 2);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:81:28\n+  --> $DIR/unnecessary_lazy_eval.rs:92:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| Some(3));\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:82:13\n+  --> $DIR/unnecessary_lazy_eval.rs:93:13\n    |\n LL |     let _ = deep.0.or_else(|| Some(3));\n    |             ^^^^^^^-------------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:83:13\n+  --> $DIR/unnecessary_lazy_eval.rs:94:13\n    |\n LL |     let _ = opt.or_else(|| Some(3));\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:89:13\n+  --> $DIR/unnecessary_lazy_eval.rs:100:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| 2);\n    |             ^^^^^---------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:90:13\n+  --> $DIR/unnecessary_lazy_eval.rs:101:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n    |             ^^^^^----------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:91:13\n+  --> $DIR/unnecessary_lazy_eval.rs:102:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n    |             ^^^^^--------------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:113:35\n+  --> $DIR/unnecessary_lazy_eval.rs:124:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(2));\n    |                                   ^^^^--------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:114:35\n+  --> $DIR/unnecessary_lazy_eval.rs:125:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(astronomers_pi));\n    |                                   ^^^^---------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:115:35\n+  --> $DIR/unnecessary_lazy_eval.rs:126:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(ext_str.some_field));\n    |                                   ^^^^-------------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:117:35\n+  --> $DIR/unnecessary_lazy_eval.rs:128:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n    |                                   ^^^^------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:118:35\n+  --> $DIR/unnecessary_lazy_eval.rs:129:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n    |                                   ^^^^-------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:119:35\n+  --> $DIR/unnecessary_lazy_eval.rs:130:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n    |                                   ^^^^-----------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:120:35\n+  --> $DIR/unnecessary_lazy_eval.rs:131:35\n    |\n LL |       let _: Result<usize, usize> = res.\n    |  ___________________________________^"}]}