{"sha": "d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZDViODNmNmJlMDZiZmE3ZjBlZmU2NmQzMTljZWYwZTE3ZGExOTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-13T03:21:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-13T03:21:33Z"}, "message": "Rollup merge of #67251 - oli-obk:stability_sieve, r=Centril\n\nRequire `allow_internal_unstable` for stable min_const_fn using unsta\u2026\n\n\u2026ble features\n\nr? @Centril\n\ncc @ecstatic-morse @RalfJung", "tree": {"sha": "5b838e61ca6039cfc49827ef27ef86476be52ddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b838e61ca6039cfc49827ef27ef86476be52ddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd8wO9CRBK7hj4Ov3rIwAAdHIIAJTneyJsor1y20dmjCDtHQMj\ns6/aGdFLnIvJxhLUeXQbBlkj5ncMxaC2HxJgRemoPu2YONY+3lp6hPKWLCiEhwqh\nWYxFQIQWn/1FT+FojexhAN2GlItnSjm79Py5xlr+I3bBL6S+oSEwQ/Oi1arPeDU4\nzOK6aojEXjbERfAmEZqWGW39vZslQ5PgHaDcz6OjVz/lQkPrVmmdXl5RqSF6trvS\nH9J96yL4+oToRFwTLiJxvLpuYwbuLAfTM8COV38FvU0InCWV/yeQ8tHCUZ7tUQzs\ngdf39L6BfPpxUr7NLLxVmx6IVIpUcRZsoQbnhux95GDHGi3eEI6lTNJ54evdfls=\n=Wp/w\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b838e61ca6039cfc49827ef27ef86476be52ddb\nparent ac0bd42a4a801e2538e8d8e992c3b7297ddd514d\nparent 0b1e08a9f4b431afcf3076fe41f3b2dbcc6f3548\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576207293 +0100\ncommitter GitHub <noreply@github.com> 1576207293 +0100\n\nRollup merge of #67251 - oli-obk:stability_sieve, r=Centril\n\nRequire `allow_internal_unstable` for stable min_const_fn using unsta\u2026\n\n\u2026ble features\n\nr? @Centril\n\ncc @ecstatic-morse @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "html_url": "https://github.com/rust-lang/rust/commit/d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac0bd42a4a801e2538e8d8e992c3b7297ddd514d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d", "html_url": "https://github.com/rust-lang/rust/commit/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d"}, {"sha": "0b1e08a9f4b431afcf3076fe41f3b2dbcc6f3548", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1e08a9f4b431afcf3076fe41f3b2dbcc6f3548", "html_url": "https://github.com/rust-lang/rust/commit/0b1e08a9f4b431afcf3076fe41f3b2dbcc6f3548"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "1c95155e7ff1c606ee27a18d7f8a6a7c20c994e5", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "patch": "@@ -80,7 +80,7 @@ fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span, fn_def_id: DefId) -> Mc\n     for ty in ty.walk() {\n         match ty.kind {\n             ty::Ref(_, _, hir::Mutability::Mutable) => {\n-                if !tcx.features().const_mut_refs {\n+                if !feature_allowed(tcx, fn_def_id, sym::const_mut_refs) {\n                     return Err((\n                         span,\n                         \"mutable references in const fn are unstable\".into(),\n@@ -220,7 +220,7 @@ fn check_statement(\n         }\n \n         | StatementKind::FakeRead(FakeReadCause::ForMatchedPlace, _)\n-        if !tcx.features().const_if_match\n+        if !feature_allowed(tcx, def_id, sym::const_if_match)\n         => {\n             Err((span, \"loops and conditional expressions are not stable in const fn\".into()))\n         }\n@@ -272,7 +272,7 @@ fn check_place(\n     while let &[ref proj_base @ .., elem] = cursor {\n         cursor = proj_base;\n         match elem {\n-            ProjectionElem::Downcast(..) if !tcx.features().const_if_match\n+            ProjectionElem::Downcast(..) if !feature_allowed(tcx, def_id, sym::const_if_match)\n                 => return Err((span, \"`match` or `if let` in `const fn` is unstable\".into())),\n             ProjectionElem::Downcast(_symbol, _variant_index) => {}\n \n@@ -329,7 +329,7 @@ fn check_terminator(\n \n         | TerminatorKind::FalseEdges { .. }\n         | TerminatorKind::SwitchInt { .. }\n-        if !tcx.features().const_if_match\n+        if !feature_allowed(tcx, def_id, sym::const_if_match)\n         => Err((\n             span,\n             \"loops and conditional expressions are not stable in const fn\".into(),\n@@ -341,7 +341,7 @@ fn check_terminator(\n         }\n \n         // FIXME(ecstaticmorse): We probably want to allow `Unreachable` unconditionally.\n-        TerminatorKind::Unreachable if tcx.features().const_if_match => Ok(()),\n+        TerminatorKind::Unreachable if feature_allowed(tcx, def_id, sym::const_if_match) => Ok(()),\n \n         | TerminatorKind::Abort | TerminatorKind::Unreachable => {\n             Err((span, \"const fn with unreachable code is not stable\".into()))"}, {"sha": "33abfec02a87a68dfa938a1d5e62928fe8a120bb", "filename": "src/test/ui/consts/const-mut-refs/const_mut_refs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs?ref=d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(const_mut_refs)]\n+#![feature(const_fn)]\n \n struct Foo {\n     x: usize"}, {"sha": "b9ff040915863d3cd64ebe5e2e0adfb12b7cc73d", "filename": "src/test/ui/consts/control-flow/basics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs?ref=d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "patch": "@@ -4,6 +4,7 @@\n \n #![feature(const_panic)]\n #![feature(const_if_match)]\n+#![feature(const_fn)]\n \n const X: u32 = 4;\n const Y: u32 = 5;"}, {"sha": "7887fd12e5764a2f497c4b795617b911a57b11b6", "filename": "src/test/ui/consts/control-flow/exhaustive-c-like-enum-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs?ref=d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "patch": "@@ -3,6 +3,7 @@\n // check-pass\n \n #![feature(const_if_match)]\n+#![feature(const_fn)]\n \n enum E {\n     A,"}, {"sha": "95096723b3c95f2e3009851146b06b5a160b633e", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.if_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.if_match.stderr?ref=d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/feature-gate-const-if-match.rs:108:1\n+  --> $DIR/feature-gate-const-if-match.rs:109:1\n    |\n LL | / fn main() {\n LL | |     let _ = [0; {"}, {"sha": "e4b65257531fdacbd999bfb03b86755822c40d18", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs?ref=d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "patch": "@@ -6,6 +6,7 @@\n \n #![feature(rustc_attrs)]\n #![cfg_attr(if_match, feature(const_if_match))]\n+#![feature(const_fn)]\n \n const _: i32 = if true { //[stock]~ ERROR `if` is not allowed in a `const`\n     5"}, {"sha": "e846ee4ab6a41bb1ac87db7deb64da6ebd462bc5", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.stock.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr?ref=d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:10:16\n+  --> $DIR/feature-gate-const-if-match.rs:11:16\n    |\n LL |   const _: i32 = if true {\n    |  ________________^\n@@ -13,7 +13,7 @@ LL | | };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:16:16\n+  --> $DIR/feature-gate-const-if-match.rs:17:16\n    |\n LL |   const _: i32 = if let Some(true) = Some(false) {\n    |  ________________^\n@@ -27,7 +27,7 @@ LL | | };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:22:16\n+  --> $DIR/feature-gate-const-if-match.rs:23:16\n    |\n LL |   const _: i32 = match 1 {\n    |  ________________^\n@@ -41,7 +41,7 @@ LL | | };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `static`\n-  --> $DIR/feature-gate-const-if-match.rs:29:13\n+  --> $DIR/feature-gate-const-if-match.rs:30:13\n    |\n LL |     let x = if true { 0 } else { 1 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -50,7 +50,7 @@ LL |     let x = if true { 0 } else { 1 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `static`\n-  --> $DIR/feature-gate-const-if-match.rs:31:13\n+  --> $DIR/feature-gate-const-if-match.rs:32:13\n    |\n LL |     let x = match x { 0 => 1, _ => 0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL |     let x = match x { 0 => 1, _ => 0 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `static`\n-  --> $DIR/feature-gate-const-if-match.rs:33:5\n+  --> $DIR/feature-gate-const-if-match.rs:34:5\n    |\n LL |     if let Some(x) = Some(x) { x } else { 1 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -68,7 +68,7 @@ LL |     if let Some(x) = Some(x) { x } else { 1 }\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `static mut`\n-  --> $DIR/feature-gate-const-if-match.rs:38:13\n+  --> $DIR/feature-gate-const-if-match.rs:39:13\n    |\n LL |     let x = if true { 0 } else { 1 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ LL |     let x = if true { 0 } else { 1 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `static mut`\n-  --> $DIR/feature-gate-const-if-match.rs:40:13\n+  --> $DIR/feature-gate-const-if-match.rs:41:13\n    |\n LL |     let x = match x { 0 => 1, _ => 0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -86,7 +86,7 @@ LL |     let x = match x { 0 => 1, _ => 0 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `static mut`\n-  --> $DIR/feature-gate-const-if-match.rs:42:5\n+  --> $DIR/feature-gate-const-if-match.rs:43:5\n    |\n LL |     if let Some(x) = Some(x) { x } else { 1 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -95,7 +95,7 @@ LL |     if let Some(x) = Some(x) { x } else { 1 }\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:47:5\n+  --> $DIR/feature-gate-const-if-match.rs:48:5\n    |\n LL |     if true { 5 } else { 6 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -104,7 +104,7 @@ LL |     if true { 5 } else { 6 }\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:51:5\n+  --> $DIR/feature-gate-const-if-match.rs:52:5\n    |\n LL | /     if let Some(true) = a {\n LL | |         0\n@@ -117,7 +117,7 @@ LL | |     }\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:59:5\n+  --> $DIR/feature-gate-const-if-match.rs:60:5\n    |\n LL | /     match i {\n LL | |         i if i > 10 => i,\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:90:17\n+  --> $DIR/feature-gate-const-if-match.rs:91:17\n    |\n LL |         let x = if y { 0 } else { 1 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n@@ -139,7 +139,7 @@ LL |         let x = if y { 0 } else { 1 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:92:17\n+  --> $DIR/feature-gate-const-if-match.rs:93:17\n    |\n LL |         let x = match x { 0 => 1, _ => 0 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -148,7 +148,7 @@ LL |         let x = match x { 0 => 1, _ => 0 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:94:9\n+  --> $DIR/feature-gate-const-if-match.rs:95:9\n    |\n LL |         if let Some(x) = Some(x) { x } else { 1 }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -157,7 +157,7 @@ LL |         if let Some(x) = Some(x) { x } else { 1 }\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:110:17\n+  --> $DIR/feature-gate-const-if-match.rs:111:17\n    |\n LL |         let x = if false { 0 } else { 1 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -166,7 +166,7 @@ LL |         let x = if false { 0 } else { 1 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:112:17\n+  --> $DIR/feature-gate-const-if-match.rs:113:17\n    |\n LL |         let x = match x { 0 => 1, _ => 0 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -175,7 +175,7 @@ LL |         let x = match x { 0 => 1, _ => 0 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:114:9\n+  --> $DIR/feature-gate-const-if-match.rs:115:9\n    |\n LL |         if let Some(x) = Some(x) { x } else { 1 }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -184,7 +184,7 @@ LL |         if let Some(x) = Some(x) { x } else { 1 }\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:67:21\n+  --> $DIR/feature-gate-const-if-match.rs:68:21\n    |\n LL |     const IF: i32 = if true { 5 } else { 6 };\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -193,7 +193,7 @@ LL |     const IF: i32 = if true { 5 } else { 6 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:70:25\n+  --> $DIR/feature-gate-const-if-match.rs:71:25\n    |\n LL |     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -202,7 +202,7 @@ LL |     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:73:24\n+  --> $DIR/feature-gate-const-if-match.rs:74:24\n    |\n LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -211,7 +211,7 @@ LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:78:21\n+  --> $DIR/feature-gate-const-if-match.rs:79:21\n    |\n LL |     const IF: i32 = if true { 5 } else { 6 };\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -220,7 +220,7 @@ LL |     const IF: i32 = if true { 5 } else { 6 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:81:25\n+  --> $DIR/feature-gate-const-if-match.rs:82:25\n    |\n LL |     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -229,7 +229,7 @@ LL |     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:84:24\n+  --> $DIR/feature-gate-const-if-match.rs:85:24\n    |\n LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -238,7 +238,7 @@ LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/feature-gate-const-if-match.rs:114:21\n+  --> $DIR/feature-gate-const-if-match.rs:115:21\n    |\n LL |         if let Some(x) = Some(x) { x } else { 1 }\n    |                     ^"}, {"sha": "4b20a2124c356aa516a4400281f93f462a0f8e56", "filename": "src/test/ui/consts/control-flow/short-circuit-let.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs?ref=d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "patch": "@@ -4,6 +4,7 @@\n \n #![feature(const_if_match)]\n #![feature(const_panic)]\n+#![feature(const_fn)]\n \n const X: i32 = {\n     let mut x = 0;"}, {"sha": "bb0fce66c4d899e280e32ec945cbac2bea1e997a", "filename": "src/test/ui/consts/control-flow/single_variant_match_ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle_variant_match_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d5b83f6be06bfa7f0efe66d319cef0e17da192/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle_variant_match_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle_variant_match_ice.rs?ref=d2d5b83f6be06bfa7f0efe66d319cef0e17da192", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(const_if_match)]\n+#![feature(const_if_match, const_fn)]\n \n enum Foo {\n     Prob,"}]}