{"sha": "72f7e3144a386c820c188350092d2d93a74889b8", "node_id": "C_kwDOAAsO6NoAKDcyZjdlMzE0NGEzODZjODIwYzE4ODM1MDA5MmQyZDkzYTc0ODg5Yjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T09:56:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T09:56:21Z"}, "message": "Auto merge of #97679 - Dylan-DPC:rollup-nswmgmx, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97366 (Stabilize `{slice,array}::from_ref`)\n - #97653 (add cast kind of from_exposed_addr (int-to-ptr casts))\n - #97663 (take back half-baked noaliasing check in Assignment)\n - #97664 (On E0204 suggest missing type param bounds)\n - #97668 (rustdoc: clean up primitive.slice.html links)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "54c489a5897149d118d16007bfe9d816ed09994f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c489a5897149d118d16007bfe9d816ed09994f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f7e3144a386c820c188350092d2d93a74889b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f7e3144a386c820c188350092d2d93a74889b8", "html_url": "https://github.com/rust-lang/rust/commit/72f7e3144a386c820c188350092d2d93a74889b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f7e3144a386c820c188350092d2d93a74889b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "html_url": "https://github.com/rust-lang/rust/commit/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d"}, {"sha": "d6f35b3454376183b80f67fbbebebbca20d4e7bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f35b3454376183b80f67fbbebebbca20d4e7bc", "html_url": "https://github.com/rust-lang/rust/commit/d6f35b3454376183b80f67fbbebebbca20d4e7bc"}], "stats": {"total": 457, "additions": 370, "deletions": 87}, "files": [{"sha": "e5aed1b60ddc1fe56a3e9b451346315ea1077246", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -2154,31 +2154,55 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         match (cast_ty_from, cast_ty_to) {\n                             (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => (),\n                             _ => {\n-                                span_mirbug!(self, rvalue, \"Invalid cast {:?} -> {:?}\", ty_from, ty)\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid PointerExposeAddress cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n                             }\n                         }\n                     }\n \n-                    CastKind::Misc => {\n+                    CastKind::PointerFromExposedAddress => {\n                         let ty_from = op.ty(body, tcx);\n                         let cast_ty_from = CastTy::from_ty(ty_from);\n                         let cast_ty_to = CastTy::from_ty(*ty);\n                         match (cast_ty_from, cast_ty_to) {\n-                            (None, _)\n-                            | (_, None | Some(CastTy::FnPtr))\n-                            | (Some(CastTy::Float), Some(CastTy::Ptr(_)))\n-                            | (\n-                                Some(CastTy::Ptr(_) | CastTy::FnPtr),\n-                                Some(CastTy::Float | CastTy::Int(_)),\n-                            ) => {\n-                                span_mirbug!(self, rvalue, \"Invalid cast {:?} -> {:?}\", ty_from, ty,)\n+                            (Some(CastTy::Int(_)), Some(CastTy::Ptr(_))) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid PointerFromExposedAddress cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n                             }\n+                        }\n+                    }\n+\n+                    CastKind::Misc => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        // Misc casts are either between floats and ints, or one ptr type to another.\n+                        match (cast_ty_from, cast_ty_to) {\n                             (\n-                                Some(CastTy::Int(_)),\n-                                Some(CastTy::Int(_) | CastTy::Float | CastTy::Ptr(_)),\n+                                Some(CastTy::Int(_) | CastTy::Float),\n+                                Some(CastTy::Int(_) | CastTy::Float),\n                             )\n-                            | (Some(CastTy::Float), Some(CastTy::Int(_) | CastTy::Float))\n                             | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Ptr(_))) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid Misc cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty,\n+                                )\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "07136e1b76a9f0895780db655019cc6326fce889", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -608,7 +608,9 @@ fn codegen_stmt<'tcx>(\n                     lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));\n                 }\n                 Rvalue::Cast(\n-                    CastKind::Misc | CastKind::PointerExposeAddress,\n+                    CastKind::Misc\n+                    | CastKind::PointerExposeAddress\n+                    | CastKind::PointerFromExposedAddress,\n                     ref operand,\n                     to_ty,\n                 ) => {"}, {"sha": "81c1897694ce61773aef5d0fc3344bf5aa825b6d", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -269,7 +269,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mir::CastKind::Pointer(\n                         PointerCast::MutToConstPointer | PointerCast::ArrayToPointer,\n                     )\n-                    | mir::CastKind::Misc => {\n+                    | mir::CastKind::Misc\n+                    // Since int2ptr can have arbitrary integer types as input (so we have to do\n+                    // sign extension and all that), it is currently best handled in the same code\n+                    // path as the other integer-to-X casts.\n+                    | mir::CastKind::PointerFromExposedAddress => {\n                         assert!(bx.cx().is_backend_immediate(cast));\n                         let ll_t_out = bx.cx().immediate_backend_type(cast);\n                         if operand.layout.abi.is_uninhabited() {"}, {"sha": "73cc59ad1e674361a78c6d9d26af95b60e4c4043", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -37,6 +37,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(res, dest)?;\n             }\n \n+            PointerFromExposedAddress => {\n+                let src = self.read_immediate(src)?;\n+                let res = self.pointer_from_exposed_address_cast(&src, cast_ty)?;\n+                self.write_immediate(res, dest)?;\n+            }\n+\n             Misc => {\n                 let src = self.read_immediate(src)?;\n                 let res = self.misc_cast(&src, cast_ty)?;\n@@ -201,6 +207,24 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(self.cast_from_int_like(scalar, src.layout, cast_ty)?.into())\n     }\n \n+    pub fn pointer_from_exposed_address_cast(\n+        &mut self,\n+        src: &ImmTy<'tcx, M::PointerTag>,\n+        cast_ty: Ty<'tcx>,\n+    ) -> InterpResult<'tcx, Immediate<M::PointerTag>> {\n+        assert!(src.layout.ty.is_integral());\n+        assert_matches!(cast_ty.kind(), ty::RawPtr(_));\n+\n+        // First cast to usize.\n+        let scalar = src.to_scalar()?;\n+        let addr = self.cast_from_int_like(scalar, src.layout, self.tcx.types.usize)?;\n+        let addr = addr.to_machine_usize(self)?;\n+\n+        // Then turn address into pointer.\n+        let ptr = M::ptr_from_addr_cast(&self, addr);\n+        Ok(Scalar::from_maybe_pointer(ptr, self).into())\n+    }\n+\n     pub fn cast_from_int_like(\n         &self,\n         scalar: Scalar<M::PointerTag>, // input value (there is no ScalarTy so we separate data+layout)\n@@ -225,16 +249,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 Scalar::from_uint(v, size)\n             }\n \n-            RawPtr(_) => {\n-                assert!(src_layout.ty.is_integral());\n-\n-                let size = self.pointer_size();\n-                let addr = u64::try_from(size.truncate(v)).unwrap();\n-\n-                let ptr = M::ptr_from_addr_cast(&self, addr);\n-                Scalar::from_maybe_pointer(ptr, self)\n-            }\n-\n             Float(FloatTy::F32) if signed => Scalar::from_f32(Single::from_i128(v as i128).value),\n             Float(FloatTy::F64) if signed => Scalar::from_f64(Double::from_i128(v as i128).value),\n             Float(FloatTy::F32) => Scalar::from_f32(Single::from_u128(v).value),"}, {"sha": "ae7180b674ffd01464a058461e36cd777cdaf28e", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -869,8 +869,6 @@ where\n             Ok(src_val) => {\n                 assert!(!src.layout.is_unsized(), \"cannot have unsized immediates\");\n                 // Yay, we got a value that we can write directly.\n-                // FIXME: Add a check to make sure that if `src` is indirect,\n-                // it does not overlap with `dest`.\n                 return self.write_immediate_no_validate(*src_val, dest);\n             }\n             Err(mplace) => mplace,\n@@ -890,7 +888,7 @@ where\n         });\n         assert_eq!(src.meta, dest.meta, \"Can only copy between equally-sized instances\");\n \n-        self.mem_copy(src.ptr, src.align, dest.ptr, dest.align, size, /*nonoverlapping*/ true)\n+        self.mem_copy(src.ptr, src.align, dest.ptr, dest.align, size, /*nonoverlapping*/ false)\n     }\n \n     /// Copies the data from an operand to a place. The layouts may disagree, but they must"}, {"sha": "9ac86911c7d968f718654af8d232415632dc2b4d", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -158,6 +158,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         place: mir::Place<'tcx>,\n     ) -> InterpResult<'tcx> {\n         let dest = self.eval_place(place)?;\n+        // FIXME: ensure some kind of non-aliasing between LHS and RHS?\n+        // Also see https://github.com/rust-lang/rust/issues/68364.\n \n         use rustc_middle::mir::Rvalue::*;\n         match *rvalue {"}, {"sha": "4b98e19376dda0d18b63cfccc009d4a7afc0bde2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -519,32 +519,30 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 }\n             }\n \n-            Rvalue::Cast(\n-                CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n-                _,\n-                _,\n-            ) => {}\n-\n             Rvalue::Cast(\n                 CastKind::Pointer(\n-                    PointerCast::UnsafeFnPointer\n+                    PointerCast::MutToConstPointer\n+                    | PointerCast::ArrayToPointer\n+                    | PointerCast::UnsafeFnPointer\n                     | PointerCast::ClosureFnPointer(_)\n                     | PointerCast::ReifyFnPointer,\n                 ),\n                 _,\n                 _,\n             ) => {\n-                // Nothing to do here. Function pointer casts are allowed now.\n+                // These are all okay; they only change the type, not the data.\n             }\n \n             Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), _, _) => {\n-                // Nothing to check here (`check_local_or_return_ty` ensures no trait objects occur\n-                // in the type of any local, which also excludes casts).\n+                // Unsizing is implemented for CTFE.\n             }\n \n             Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => {\n                 self.check_op(ops::RawPtrToIntCast);\n             }\n+            Rvalue::Cast(CastKind::PointerFromExposedAddress, _, _) => {\n+                // Since no pointer can ever get exposed (rejected above), this is easy to support.\n+            }\n \n             Rvalue::Cast(CastKind::Misc, _, _) => {}\n "}, {"sha": "d1e776854b231dac7c579f9c0bb751b74e5147b1", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -504,7 +504,8 @@ impl<'tcx> Validator<'_, 'tcx> {\n             // ptr-to-int casts are not possible in consts and thus not promotable\n             Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => return Err(Unpromotable),\n \n-            // int-to-ptr casts are fine, they just use the integer value at pointer type.\n+            // all other casts including int-to-ptr casts are fine, they just use the integer value\n+            // at pointer type.\n             Rvalue::Cast(_, operand, _) => {\n                 self.validate_operand(operand)?;\n             }"}, {"sha": "f3db359ec334829a39e313b79d655854eb2be56a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -2613,12 +2613,18 @@ impl<'tcx> Rvalue<'tcx> {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum CastKind {\n-    Misc,\n     /// An exposing pointer to address cast. A cast between a pointer and an integer type, or\n     /// between a function pointer and an integer type.\n     /// See the docs on `expose_addr` for more details.\n     PointerExposeAddress,\n+    /// An address-to-pointer cast that picks up an exposed provenance.\n+    /// See the docs on `from_exposed_addr` for more details.\n+    PointerFromExposedAddress,\n+    /// All sorts of pointer-to-pointer casts. Note that reference-to-raw-ptr casts are\n+    /// translated into `&raw mut/const *r`, i.e., they are not actually casts.\n     Pointer(PointerCast),\n+    /// Remaining unclassified casts.\n+    Misc,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "9bb64d4023bcabec70e7b6fdd110c2d4c2ac17d3", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -272,7 +272,10 @@ pub fn suggest_constraining_type_params<'a>(\n             continue;\n         }\n \n-        let constraint = constraints.iter().map(|&(c, _)| c).collect::<Vec<_>>().join(\" + \");\n+        let mut constraint = constraints.iter().map(|&(c, _)| c).collect::<Vec<_>>();\n+        constraint.sort();\n+        constraint.dedup();\n+        let constraint = constraint.join(\" + \");\n         let mut suggest_restrict = |span, bound_list_non_empty| {\n             suggestions.push((\n                 span,"}, {"sha": "8e87ecd27d2853a113ff22e38365d384dee2f579", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -196,6 +196,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n                         CastKind::PointerExposeAddress\n                     }\n+                    (Some(CastTy::Int(_)), Some(CastTy::Ptr(_))) => {\n+                        CastKind::PointerFromExposedAddress\n+                    }\n                     (_, _) => CastKind::Misc,\n                 };\n                 let source = unpack!("}, {"sha": "c809b8bdd73db56eb530d8c10f89b11426d6d553", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -2,7 +2,7 @@\n //! up data structures required by type-checking/codegen.\n \n use crate::errors::{CopyImplOnNonAdt, CopyImplOnTypeWithDtor, DropImplOnWrongItem};\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n@@ -11,12 +11,12 @@ use rustc_infer::infer;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{RegionckMode, TyCtxtInferExt};\n use rustc_middle::ty::adjustment::CoerceUnsizedInfo;\n-use rustc_middle::ty::TypeFoldable;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeFoldable};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::misc::{can_type_implement_copy, CopyImplementationError};\n use rustc_trait_selection::traits::predicate_for_trait_def;\n use rustc_trait_selection::traits::{self, ObligationCause, TraitEngine, TraitEngineExt};\n+use std::collections::BTreeMap;\n \n pub fn check_trait(tcx: TyCtxt<'_>, trait_def_id: DefId) {\n     let lang_items = tcx.lang_items();\n@@ -91,6 +91,20 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                 E0204,\n                 \"the trait `Copy` may not be implemented for this type\"\n             );\n+\n+            // We'll try to suggest constraining type parameters to fulfill the requirements of\n+            // their `Copy` implementation.\n+            let mut generics = None;\n+            if let ty::Adt(def, _substs) = self_type.kind() {\n+                let self_def_id = def.did();\n+                if let Some(local) = self_def_id.as_local() {\n+                    let self_item = tcx.hir().expect_item(local);\n+                    generics = self_item.kind.generics();\n+                }\n+            }\n+            let mut errors: BTreeMap<_, Vec<_>> = Default::default();\n+            let mut bounds = vec![];\n+\n             for (field, ty) in fields {\n                 let field_span = tcx.def_span(field.did);\n                 err.span_label(field_span, \"this field does not implement `Copy`\");\n@@ -115,17 +129,46 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                         // FIXME: This error could be more descriptive, especially if the error_predicate\n                         // contains a foreign type or if it's a deeply nested type...\n                         if error_predicate != error.root_obligation.predicate {\n-                            err.span_note(\n-                                error.obligation.cause.span,\n-                                &format!(\n-                                    \"the `Copy` impl for `{}` requires that `{}`\",\n-                                    ty, error_predicate\n-                                ),\n-                            );\n+                            errors\n+                                .entry((ty.to_string(), error_predicate.to_string()))\n+                                .or_default()\n+                                .push(error.obligation.cause.span);\n+                        }\n+                        if let ty::PredicateKind::Trait(ty::TraitPredicate {\n+                            trait_ref,\n+                            polarity: ty::ImplPolarity::Positive,\n+                            ..\n+                        }) = error_predicate.kind().skip_binder()\n+                        {\n+                            let ty = trait_ref.self_ty();\n+                            if let ty::Param(_) = ty.kind() {\n+                                bounds.push((\n+                                    format!(\"{ty}\"),\n+                                    trait_ref.print_only_trait_path().to_string(),\n+                                    Some(trait_ref.def_id),\n+                                ));\n+                            }\n                         }\n                     }\n                 });\n             }\n+            for ((ty, error_predicate), spans) in errors {\n+                let span: MultiSpan = spans.into();\n+                err.span_note(\n+                    span,\n+                    &format!(\"the `Copy` impl for `{}` requires that `{}`\", ty, error_predicate),\n+                );\n+            }\n+            if let Some(generics) = generics {\n+                suggest_constraining_type_params(\n+                    tcx,\n+                    generics,\n+                    &mut err,\n+                    bounds.iter().map(|(param, constraint, def_id)| {\n+                        (param.as_str(), constraint.as_str(), *def_id)\n+                    }),\n+                );\n+            }\n             err.emit();\n         }\n         Err(CopyImplementationError::NotAnAdt) => {"}, {"sha": "2ea4458bf6427b250a3094502aa74eaa3a171949", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -92,7 +92,7 @@ where\n \n /// Converts a reference to `T` into a reference to an array of length 1 (without copying).\n #[stable(feature = \"array_from_ref\", since = \"1.53.0\")]\n-#[rustc_const_unstable(feature = \"const_array_from_ref\", issue = \"90206\")]\n+#[rustc_const_stable(feature = \"const_array_from_ref_shared\", since = \"1.63.0\")]\n pub const fn from_ref<T>(s: &T) -> &[T; 1] {\n     // SAFETY: Converting `&T` to `&[T; 1]` is sound.\n     unsafe { &*(s as *const T).cast::<[T; 1]>() }"}, {"sha": "bf79214f4235847eab427b6e66a36ad18429918a", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -144,7 +144,7 @@ pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a m\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n-#[rustc_const_unstable(feature = \"const_slice_from_ref\", issue = \"90206\")]\n+#[rustc_const_stable(feature = \"const_slice_from_ref_shared\", since = \"1.63.0\")]\n #[must_use]\n pub const fn from_ref<T>(s: &T) -> &[T] {\n     array::from_ref(s)"}, {"sha": "5eb70ab13dba06f89175116d2d1b385ae7b1551c", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -423,6 +423,8 @@ def check_snapshot(snapshot_name, actual_tree, normalize_to_text):\n     else:\n         actual_str = flatten(actual_tree)\n \n+    expected_str = expected_str.replace(\"{{channel}}\", channel)\n+\n     # Conditions:\n     #  1. Is --bless\n     #  2. Are actual and expected tree different"}, {"sha": "b7789493df647a65bcfe6acec7b55bf979559a43", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -881,11 +881,16 @@ fn fmt_type<'cx>(\n                 }\n             }\n         }\n-        clean::Slice(ref t) => {\n-            primitive_link(f, PrimitiveType::Slice, \"[\", cx)?;\n-            fmt::Display::fmt(&t.print(cx), f)?;\n-            primitive_link(f, PrimitiveType::Slice, \"]\", cx)\n-        }\n+        clean::Slice(ref t) => match **t {\n+            clean::Generic(name) => {\n+                primitive_link(f, PrimitiveType::Slice, &format!(\"[{name}]\"), cx)\n+            }\n+            _ => {\n+                primitive_link(f, PrimitiveType::Slice, \"[\", cx)?;\n+                fmt::Display::fmt(&t.print(cx), f)?;\n+                primitive_link(f, PrimitiveType::Slice, \"]\", cx)\n+            }\n+        },\n         clean::Array(ref t, ref n) => {\n             primitive_link(f, PrimitiveType::Array, \"[\", cx)?;\n             fmt::Display::fmt(&t.print(cx), f)?;\n@@ -924,23 +929,12 @@ fn fmt_type<'cx>(\n                 clean::Slice(ref bt) => {\n                     // `BorrowedRef{ ... Slice(T) }` is `&[T]`\n                     match **bt {\n-                        clean::Generic(_) => {\n-                            if f.alternate() {\n-                                primitive_link(\n-                                    f,\n-                                    PrimitiveType::Slice,\n-                                    &format!(\"{}{}{}[{:#}]\", amp, lt, m, bt.print(cx)),\n-                                    cx,\n-                                )\n-                            } else {\n-                                primitive_link(\n-                                    f,\n-                                    PrimitiveType::Slice,\n-                                    &format!(\"{}{}{}[{}]\", amp, lt, m, bt.print(cx)),\n-                                    cx,\n-                                )\n-                            }\n-                        }\n+                        clean::Generic(name) => primitive_link(\n+                            f,\n+                            PrimitiveType::Slice,\n+                            &format!(\"{amp}{lt}{m}[{name}]\"),\n+                            cx,\n+                        ),\n                         _ => {\n                             primitive_link(\n                                 f,"}, {"sha": "037febdf3a579de5f53148e69c8ecd436f7ecd97", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -19,7 +19,7 @@\n                                            // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n           _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n           StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:25: 4:26\n-          _1 = move _2 as *const fn() (Misc); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n+          _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n           StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:40: 4:41\n           StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:41: 4:42\n           nop;                             // scope 0 at $DIR/reify_fn_ptr.rs:3:11: 5:2"}, {"sha": "38aaf20808cf124e7bbd79aa869cb6a4eab2bce7", "filename": "src/test/rustdoc/slice-links.link_box_generic.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Frustdoc%2Fslice-links.link_box_generic.html", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Frustdoc%2Fslice-links.link_box_generic.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.link_box_generic.html?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1 @@\n+<code>pub fn delta&lt;T&gt;() -&gt; <a class=\"struct\" href=\"struct.MyBox.html\" title=\"struct foo::MyBox\">MyBox</a>&lt;<a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">[T]</a>&gt;</code>\n\\ No newline at end of file"}, {"sha": "42fd721a4acf1e678496785bb585cad650d26cdf", "filename": "src/test/rustdoc/slice-links.link_box_u32.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Frustdoc%2Fslice-links.link_box_u32.html", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Frustdoc%2Fslice-links.link_box_u32.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.link_box_u32.html?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1 @@\n+<code>pub fn gamma() -&gt; <a class=\"struct\" href=\"struct.MyBox.html\" title=\"struct foo::MyBox\">MyBox</a>&lt;<a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">[</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.u32.html\">u32</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">]</a>&gt;</code>\n\\ No newline at end of file"}, {"sha": "fe79ca7a82da30f59d57fcde30b029d63e1e5f4f", "filename": "src/test/rustdoc/slice-links.link_slice_generic.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_generic.html", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_generic.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_generic.html?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1 @@\n+<code>pub fn beta&lt;T&gt;() -&gt; <a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">&amp;'static [T]</a></code>\n\\ No newline at end of file"}, {"sha": "c7e430b0607f7039028f3734a58fa3031b6f253c", "filename": "src/test/rustdoc/slice-links.link_slice_u32.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_u32.html", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_u32.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_u32.html?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1 @@\n+<code>pub fn alpha() -&gt; <a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">&amp;'static [</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.u32.html\">u32</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">]</a></code>\n\\ No newline at end of file"}, {"sha": "9a78e963e30363a6ac195cc84c110cd5daef41a8", "filename": "src/test/rustdoc/slice-links.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Frustdoc%2Fslice-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Frustdoc%2Fslice-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1,28 @@\n+#![crate_name = \"foo\"]\n+#![no_std]\n+\n+pub struct MyBox<T: ?Sized>(*const T);\n+\n+// @has 'foo/fn.alpha.html'\n+// @snapshot link_slice_u32 - '//pre[@class=\"rust fn\"]/code'\n+pub fn alpha() -> &'static [u32] {\n+    loop {}\n+}\n+\n+// @has 'foo/fn.beta.html'\n+// @snapshot link_slice_generic - '//pre[@class=\"rust fn\"]/code'\n+pub fn beta<T>() -> &'static [T] {\n+    loop {}\n+}\n+\n+// @has 'foo/fn.gamma.html'\n+// @snapshot link_box_u32 - '//pre[@class=\"rust fn\"]/code'\n+pub fn gamma() -> MyBox<[u32]> {\n+    loop {}\n+}\n+\n+// @has 'foo/fn.delta.html'\n+// @snapshot link_box_generic - '//pre[@class=\"rust fn\"]/code'\n+pub fn delta<T>() -> MyBox<[T]> {\n+    loop {}\n+}"}, {"sha": "45acf5beb121794ed3797b639a4d99db49d60efd", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -21,7 +21,7 @@ fn duplicate_tup2<A: Copy, B: Copy>(t: (A, B)) -> ((A, B), (A, B)) {\n     (t, t) //~ use of moved value: `t`\n }\n \n-fn duplicate_custom<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) {\n+fn duplicate_custom<T: Copy + Trait>(t: S<T>) -> (S<T>, S<T>) {\n     //~^ HELP consider restricting type parameter `T`\n     (t, t) //~ use of moved value: `t`\n }\n@@ -39,29 +39,29 @@ trait A {}\n trait B {}\n \n // Test where bounds are added with different bound placements\n-fn duplicate_custom_1<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) where {\n+fn duplicate_custom_1<T: Copy + Trait>(t: S<T>) -> (S<T>, S<T>) where {\n     //~^ HELP consider restricting type parameter `T`\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_custom_2<T>(t: S<T>) -> (S<T>, S<T>)\n where\n-    T: A + Trait + Copy,\n+    T: A + Copy + Trait,\n     //~^ HELP consider further restricting this bound\n {\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_custom_3<T>(t: S<T>) -> (S<T>, S<T>)\n where\n-    T: A + Trait + Copy,\n+    T: A + Copy + Trait,\n     //~^ HELP consider further restricting this bound\n     T: B,\n {\n     (t, t) //~ use of moved value: `t`\n }\n \n-fn duplicate_custom_4<T: A + Trait + Copy>(t: S<T>) -> (S<T>, S<T>)\n+fn duplicate_custom_4<T: A + Copy + Trait>(t: S<T>) -> (S<T>, S<T>)\n //~^ HELP consider further restricting this bound\n where\n     T: B,"}, {"sha": "5a84e3b81a6565e7de14817cb7fbf6dea2fdebf0", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -75,7 +75,7 @@ LL |     (t, t)\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn duplicate_custom<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) {\n+LL | fn duplicate_custom<T: Copy + Trait>(t: S<T>) -> (S<T>, S<T>) {\n    |                      ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n@@ -91,7 +91,7 @@ LL |     (t, t)\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn duplicate_custom_1<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) where {\n+LL | fn duplicate_custom_1<T: Copy + Trait>(t: S<T>) -> (S<T>, S<T>) where {\n    |                        ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n@@ -107,7 +107,7 @@ LL |     (t, t)\n    |\n help: consider further restricting this bound\n    |\n-LL |     T: A + Trait + Copy,\n+LL |     T: A + Copy + Trait,\n    |          ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n@@ -123,7 +123,7 @@ LL |     (t, t)\n    |\n help: consider further restricting this bound\n    |\n-LL |     T: A + Trait + Copy,\n+LL |     T: A + Copy + Trait,\n    |          ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n@@ -139,7 +139,7 @@ LL |     (t, t)\n    |\n help: consider further restricting this bound\n    |\n-LL | fn duplicate_custom_4<T: A + Trait + Copy>(t: S<T>) -> (S<T>, S<T>)\n+LL | fn duplicate_custom_4<T: A + Copy + Trait>(t: S<T>) -> (S<T>, S<T>)\n    |                            ++++++++++++++\n \n error[E0382]: use of moved value: `t`"}, {"sha": "ac0b14fba83b620ec2c032ad50eee86777cd8a37", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-2.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.fixed?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+use std::fmt::Debug;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Vector2<T: Debug + Copy + Clone>{\n+    pub x: T,\n+    pub y: T\n+}\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct AABB<K: Debug + std::marker::Copy>{\n+    pub loc: Vector2<K>, //~ ERROR the trait bound `K: Copy` is not satisfied\n+    pub size: Vector2<K>\n+}\n+\n+fn main() {}"}, {"sha": "31f8cd6fcf79e782e237674cb7b01bf77cb49a7e", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+use std::fmt::Debug;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Vector2<T: Debug + Copy + Clone>{\n+    pub x: T,\n+    pub y: T\n+}\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct AABB<K: Debug>{\n+    pub loc: Vector2<K>, //~ ERROR the trait bound `K: Copy` is not satisfied\n+    pub size: Vector2<K>\n+}\n+\n+fn main() {}"}, {"sha": "03082be690fbfbd4639cde778a05cbd4b662c530", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.stderr?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `K: Copy` is not satisfied\n+  --> $DIR/missing-bound-in-derive-copy-impl-2.rs:12:14\n+   |\n+LL |     pub loc: Vector2<K>,\n+   |              ^^^^^^^^^^ the trait `Copy` is not implemented for `K`\n+   |\n+note: required by a bound in `Vector2`\n+  --> $DIR/missing-bound-in-derive-copy-impl-2.rs:5:31\n+   |\n+LL | pub struct Vector2<T: Debug + Copy + Clone>{\n+   |                               ^^^^ required by this bound in `Vector2`\n+help: consider further restricting this bound\n+   |\n+LL | pub struct AABB<K: Debug + std::marker::Copy>{\n+   |                          +++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "304360d48a2615627d197d784e8f187a253d04cc", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-3.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.fixed?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1,16 @@\n+//run-rustfix\n+use std::fmt::Debug;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Vector2<T: Debug + Copy + Clone>{\n+    pub x: T,\n+    pub y: T\n+}\n+\n+#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented for this type\n+pub struct AABB<K: Copy + Debug>{\n+    pub loc: Vector2<K>,\n+    pub size: Vector2<K>\n+}\n+\n+fn main() {}"}, {"sha": "14e1fbb33112ade31a13efaf05683e1e6d79ebae", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-3.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1,16 @@\n+//run-rustfix\n+use std::fmt::Debug;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Vector2<T: Debug + Copy + Clone>{\n+    pub x: T,\n+    pub y: T\n+}\n+\n+#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented for this type\n+pub struct AABB<K: Copy>{\n+    pub loc: Vector2<K>,\n+    pub size: Vector2<K>\n+}\n+\n+fn main() {}"}, {"sha": "4eb1e318d97c30172b8d92d2579f42f9875360b2", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-3.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1,27 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/missing-bound-in-derive-copy-impl-3.rs:10:17\n+   |\n+LL | #[derive(Debug, Copy, Clone)]\n+   |                 ^^^^\n+LL | pub struct AABB<K: Copy>{\n+LL |     pub loc: Vector2<K>,\n+   |     ------------------- this field does not implement `Copy`\n+LL |     pub size: Vector2<K>\n+   |     -------------------- this field does not implement `Copy`\n+   |\n+note: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n+  --> $DIR/missing-bound-in-derive-copy-impl-3.rs:12:5\n+   |\n+LL |     pub loc: Vector2<K>,\n+   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     pub size: Vector2<K>\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting this bound\n+   |\n+LL | pub struct AABB<K: Copy + Debug>{\n+   |                         +++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}, {"sha": "52163bddd4ff5ab269abe11b2e39fba504c1be49", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1,15 @@\n+use std::fmt::Debug;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Vector2<T: Debug + Copy + Clone>{\n+    pub x: T,\n+    pub y: T\n+}\n+\n+#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented for this type\n+pub struct AABB<K>{\n+    pub loc: Vector2<K>,\n+    pub size: Vector2<K>\n+}\n+\n+fn main() {}"}, {"sha": "1cf2ab95bc3a8a6a878bc59cebb36c28a9906a82", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -0,0 +1,27 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/missing-bound-in-derive-copy-impl.rs:9:17\n+   |\n+LL | #[derive(Debug, Copy, Clone)]\n+   |                 ^^^^\n+LL | pub struct AABB<K>{\n+LL |     pub loc: Vector2<K>,\n+   |     ------------------- this field does not implement `Copy`\n+LL |     pub size: Vector2<K>\n+   |     -------------------- this field does not implement `Copy`\n+   |\n+note: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n+  --> $DIR/missing-bound-in-derive-copy-impl.rs:11:5\n+   |\n+LL |     pub loc: Vector2<K>,\n+   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     pub size: Vector2<K>\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider restricting type parameter `K`\n+   |\n+LL | pub struct AABB<K: Debug>{\n+   |                  +++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}, {"sha": "58abef38ea8be9e1cc7505536de596ac62e8d76f", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f7e3144a386c820c188350092d2d93a74889b8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=72f7e3144a386c820c188350092d2d93a74889b8", "patch": "@@ -131,7 +131,12 @@ fn check_rvalue<'tcx>(\n         Rvalue::Cast(CastKind::Misc, operand, _) => {\n             check_operand(tcx, operand, span, body)\n         },\n-        Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer), operand, _) => {\n+        Rvalue::Cast(\n+            CastKind::PointerFromExposedAddress\n+            | CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n+            operand,\n+            _\n+        ) => {\n             check_operand(tcx, operand, span, body)\n         },\n         Rvalue::Cast("}]}