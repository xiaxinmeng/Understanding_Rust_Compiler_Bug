{"sha": "7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNmE1OTQwY2JlOWExZmY4YzEyNTY2YTk3MmRjNWM1NGM4NWVmNWU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-11T01:03:02Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-11T01:36:03Z"}, "message": "std: convert pow, hypot, atan2, log to take arguments by reference.", "tree": {"sha": "a1c38b6d655e71e6ab372361a8b2c03bc375f3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1c38b6d655e71e6ab372361a8b2c03bc375f3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e", "html_url": "https://github.com/rust-lang/rust/commit/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37733c7eafdcf4bd6c4c95d38a05c307abda78d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/37733c7eafdcf4bd6c4c95d38a05c307abda78d6", "html_url": "https://github.com/rust-lang/rust/commit/37733c7eafdcf4bd6c4c95d38a05c307abda78d6"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "bf97c86b5c99e3deaaa09ae9816b67baa0328277", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e", "patch": "@@ -318,7 +318,7 @@ be distributed on the available cores.\n fn partial_sum(start: uint) -> f64 {\n     let mut local_sum = 0f64;\n     for uint::range(start*100000, (start+1)*100000) |num| {\n-        local_sum += (num as f64 + 1.0).pow(-2.0);\n+        local_sum += (num as f64 + 1.0).pow(&-2.0);\n     }\n     local_sum\n }\n@@ -355,7 +355,7 @@ a single large vector of floats. Each task needs the full vector to perform its\n use extra::arc::ARC;\n \n fn pnorm(nums: &~[float], p: uint) -> float {\n-    nums.iter().fold(0.0, |a,b| a+(*b).pow(p as float) ).pow(1f / (p as float))\n+    nums.iter().fold(0.0, |a,b| a+(*b).pow(&(p as float)) ).pow(&(1f / (p as float)))\n }\n \n fn main() {"}, {"sha": "7f9811873003ab2077ff2a17f81790f2a1ebdfd1", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e", "patch": "@@ -391,7 +391,7 @@ impl Fractional for f32 {\n \n impl Algebraic for f32 {\n     #[inline(always)]\n-    fn pow(&self, n: f32) -> f32 { pow(*self, n) }\n+    fn pow(&self, n: &f32) -> f32 { pow(*self, *n) }\n \n     #[inline(always)]\n     fn sqrt(&self) -> f32 { sqrt(*self) }\n@@ -403,7 +403,7 @@ impl Algebraic for f32 {\n     fn cbrt(&self) -> f32 { cbrt(*self) }\n \n     #[inline(always)]\n-    fn hypot(&self, other: f32) -> f32 { hypot(*self, other) }\n+    fn hypot(&self, other: &f32) -> f32 { hypot(*self, *other) }\n }\n \n impl Trigonometric for f32 {\n@@ -426,7 +426,7 @@ impl Trigonometric for f32 {\n     fn atan(&self) -> f32 { atan(*self) }\n \n     #[inline(always)]\n-    fn atan2(&self, other: f32) -> f32 { atan2(*self, other) }\n+    fn atan2(&self, other: &f32) -> f32 { atan2(*self, *other) }\n \n     /// Simultaneously computes the sine and cosine of the number\n     #[inline(always)]\n@@ -450,7 +450,7 @@ impl Exponential for f32 {\n \n     /// Returns the logarithm of the number with respect to an arbitrary base\n     #[inline(always)]\n-    fn log(&self, base: f32) -> f32 { self.ln() / base.ln() }\n+    fn log(&self, base: &f32) -> f32 { self.ln() / base.ln() }\n \n     /// Returns the base 2 logarithm of the number\n     #[inline(always)]"}, {"sha": "6303e3045764e9b26698b571fc574408fef8526c", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e", "patch": "@@ -403,7 +403,7 @@ impl Fractional for f64 {\n \n impl Algebraic for f64 {\n     #[inline(always)]\n-    fn pow(&self, n: f64) -> f64 { pow(*self, n) }\n+    fn pow(&self, n: &f64) -> f64 { pow(*self, *n) }\n \n     #[inline(always)]\n     fn sqrt(&self) -> f64 { sqrt(*self) }\n@@ -415,7 +415,7 @@ impl Algebraic for f64 {\n     fn cbrt(&self) -> f64 { cbrt(*self) }\n \n     #[inline(always)]\n-    fn hypot(&self, other: f64) -> f64 { hypot(*self, other) }\n+    fn hypot(&self, other: &f64) -> f64 { hypot(*self, *other) }\n }\n \n impl Trigonometric for f64 {\n@@ -438,7 +438,7 @@ impl Trigonometric for f64 {\n     fn atan(&self) -> f64 { atan(*self) }\n \n     #[inline(always)]\n-    fn atan2(&self, other: f64) -> f64 { atan2(*self, other) }\n+    fn atan2(&self, other: &f64) -> f64 { atan2(*self, *other) }\n \n     /// Simultaneously computes the sine and cosine of the number\n     #[inline(always)]\n@@ -462,7 +462,7 @@ impl Exponential for f64 {\n \n     /// Returns the logarithm of the number with respect to an arbitrary base\n     #[inline(always)]\n-    fn log(&self, base: f64) -> f64 { self.ln() / base.ln() }\n+    fn log(&self, base: &f64) -> f64 { self.ln() / base.ln() }\n \n     /// Returns the base 2 logarithm of the number\n     #[inline(always)]"}, {"sha": "267a8890e8267349e96504fd2ffc8dc1ea26a4a0", "filename": "src/libstd/num/float.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/src%2Flibstd%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/src%2Flibstd%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat.rs?ref=7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e", "patch": "@@ -475,8 +475,8 @@ impl Fractional for float {\n \n impl Algebraic for float {\n     #[inline(always)]\n-    fn pow(&self, n: float) -> float {\n-        (*self as f64).pow(n as f64) as float\n+    fn pow(&self, n: &float) -> float {\n+        (*self as f64).pow(&(*n as f64)) as float\n     }\n \n     #[inline(always)]\n@@ -495,8 +495,8 @@ impl Algebraic for float {\n     }\n \n     #[inline(always)]\n-    fn hypot(&self, other: float) -> float {\n-        (*self as f64).hypot(other as f64) as float\n+    fn hypot(&self, other: &float) -> float {\n+        (*self as f64).hypot(&(*other as f64)) as float\n     }\n }\n \n@@ -532,8 +532,8 @@ impl Trigonometric for float {\n     }\n \n     #[inline(always)]\n-    fn atan2(&self, other: float) -> float {\n-        (*self as f64).atan2(other as f64) as float\n+    fn atan2(&self, other: &float) -> float {\n+        (*self as f64).atan2(&(*other as f64)) as float\n     }\n \n     /// Simultaneously computes the sine and cosine of the number\n@@ -566,8 +566,8 @@ impl Exponential for float {\n \n     /// Returns the logarithm of the number with respect to an arbitrary base\n     #[inline(always)]\n-    fn log(&self, base: float) -> float {\n-        (*self as f64).log(base as f64) as float\n+    fn log(&self, base: &float) -> float {\n+        (*self as f64).log(&(*base as f64)) as float\n     }\n \n     /// Returns the base 2 logarithm of the number"}, {"sha": "a9893579721c1365c57c13d3b442134a45d44330", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=7e6a5940cbe9a1ff8c12566a972dc5c54c85ef5e", "patch": "@@ -106,11 +106,11 @@ pub trait Fractional: Num\n }\n \n pub trait Algebraic {\n-    fn pow(&self, n: Self) -> Self;\n+    fn pow(&self, n: &Self) -> Self;\n     fn sqrt(&self) -> Self;\n     fn rsqrt(&self) -> Self;\n     fn cbrt(&self) -> Self;\n-    fn hypot(&self, other: Self) -> Self;\n+    fn hypot(&self, other: &Self) -> Self;\n }\n \n pub trait Trigonometric {\n@@ -120,15 +120,15 @@ pub trait Trigonometric {\n     fn asin(&self) -> Self;\n     fn acos(&self) -> Self;\n     fn atan(&self) -> Self;\n-    fn atan2(&self, other: Self) -> Self;\n+    fn atan2(&self, other: &Self) -> Self;\n     fn sin_cos(&self) -> (Self, Self);\n }\n \n pub trait Exponential {\n     fn exp(&self) -> Self;\n     fn exp2(&self) -> Self;\n     fn ln(&self) -> Self;\n-    fn log(&self, base: Self) -> Self;\n+    fn log(&self, base: &Self) -> Self;\n     fn log2(&self) -> Self;\n     fn log10(&self) -> Self;\n }"}]}