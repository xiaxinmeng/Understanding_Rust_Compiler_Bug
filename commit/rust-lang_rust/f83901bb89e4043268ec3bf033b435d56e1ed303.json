{"sha": "f83901bb89e4043268ec3bf033b435d56e1ed303", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MzkwMWJiODllNDA0MzI2OGVjM2JmMDMzYjQzNWQ1NmUxZWQzMDM=", "commit": {"author": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2017-04-21T07:00:34Z"}, "committer": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2017-06-01T06:34:16Z"}, "message": "Adding support for the llvm `prefetch` intrinsic\n\nRelated to #37251", "tree": {"sha": "09737778c8b856c79e244fbf8f82562ed7adb0aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09737778c8b856c79e244fbf8f82562ed7adb0aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f83901bb89e4043268ec3bf033b435d56e1ed303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f83901bb89e4043268ec3bf033b435d56e1ed303", "html_url": "https://github.com/rust-lang/rust/commit/f83901bb89e4043268ec3bf033b435d56e1ed303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f83901bb89e4043268ec3bf033b435d56e1ed303/comments", "author": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1fe1a8933c5d13da9fcde618c074c0d4e099b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1fe1a8933c5d13da9fcde618c074c0d4e099b96", "html_url": "https://github.com/rust-lang/rust/commit/e1fe1a8933c5d13da9fcde618c074c0d4e099b96"}], "stats": {"total": 144, "additions": 143, "deletions": 1}, "files": [{"sha": "3566bbdebc2b6b1a2b2d31d18fed33827cb00936", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f83901bb89e4043268ec3bf033b435d56e1ed303/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83901bb89e4043268ec3bf033b435d56e1ed303/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=f83901bb89e4043268ec3bf033b435d56e1ed303", "patch": "@@ -564,8 +564,55 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_umax_rel<T>(dst: *mut T, src: T) -> T;\n     pub fn atomic_umax_acqrel<T>(dst: *mut T, src: T) -> T;\n     pub fn atomic_umax_relaxed<T>(dst: *mut T, src: T) -> T;\n+\n+    /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n+    /// if supported; otherwise, it is a noop.\n+    /// Prefetches have no effect on the behavior of the program but can change its performance\n+    /// characteristics.\n+    ///\n+    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n+    /// ranging from (0) - no locality, to (3) - extremely local keep in cache\n+    #[cfg(not(stage0))]\n+    pub fn prefetch_read_data<T>(data: *const T, locality: i32);\n+    /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n+    /// if supported; otherwise, it is a noop.\n+    /// Prefetches have no effect on the behavior of the program but can change its performance\n+    /// characteristics.\n+    ///\n+    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n+    /// ranging from (0) - no locality, to (3) - extremely local keep in cache\n+    #[cfg(not(stage0))]\n+    pub fn prefetch_write_data<T>(data: *const T, locality: i32);\n+    /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n+    /// if supported; otherwise, it is a noop.\n+    /// Prefetches have no effect on the behavior of the program but can change its performance\n+    /// characteristics.\n+    ///\n+    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n+    /// ranging from (0) - no locality, to (3) - extremely local keep in cache\n+    #[cfg(not(stage0))]\n+    pub fn prefetch_read_instruction<T>(data: *const T, locality: i32);\n+    /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n+    /// if supported; otherwise, it is a noop.\n+    /// Prefetches have no effect on the behavior of the program but can change its performance\n+    /// characteristics.\n+    ///\n+    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n+    /// ranging from (0) - no locality, to (3) - extremely local keep in cache\n+    #[cfg(not(stage0))]\n+    pub fn prefetch_write_instruction<T>(data: *const T, locality: i32);\n }\n \n+// Empty bootstrap implementations for stage0 compilation\n+#[cfg(stage0)]\n+pub fn prefetch_read_data<T>(_data: *const T, _locality: i32) { /* EMPTY */ }\n+#[cfg(stage0)]\n+pub fn prefetch_write_data<T>(_data: *const T, _locality: i32) { /* EMPTY */ }\n+#[cfg(stage0)]\n+pub fn prefetch_read_instruction<T>(_data: *const T, _locality: i32) { /* EMPTY */ }\n+#[cfg(stage0)]\n+pub fn prefetch_write_instruction<T>(_data: *const T, _locality: i32) { /* EMPTY */ }\n+\n extern \"rust-intrinsic\" {\n \n     pub fn atomic_fence();"}, {"sha": "0413b0ea5c81ccdd00ce045caeb321807daab706", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83901bb89e4043268ec3bf033b435d56e1ed303/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83901bb89e4043268ec3bf033b435d56e1ed303/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=f83901bb89e4043268ec3bf033b435d56e1ed303", "patch": "@@ -942,6 +942,7 @@ fn declare_intrinsic(ccx: &CrateContext, key: &str) -> Option<ValueRef> {\n     ifn!(\"llvm.x86.seh.recoverfp\", fn(i8p, i8p) -> i8p);\n \n     ifn!(\"llvm.assume\", fn(i1) -> void);\n+    ifn!(\"llvm.prefetch\", fn(i8p, t_i32, t_i32, t_i32) -> void);\n \n     if ccx.sess().opts.debuginfo != NoDebugInfo {\n         ifn!(\"llvm.dbg.declare\", fn(Type::metadata(ccx), Type::metadata(ccx)) -> void);"}, {"sha": "f2e6aa3ef00b1b038fcc709c1619923574ade2d8", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f83901bb89e4043268ec3bf033b435d56e1ed303/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83901bb89e4043268ec3bf033b435d56e1ed303/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=f83901bb89e4043268ec3bf033b435d56e1ed303", "patch": "@@ -255,7 +255,18 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n             }\n             C_nil(ccx)\n         },\n-\n+        \"prefetch_read_data\" | \"prefetch_write_data\" |\n+        \"prefetch_read_instruction\" | \"prefetch_write_instruction\" => {\n+            let expect = ccx.get_intrinsic(&(\"llvm.prefetch\"));\n+            let (rw, cache_type) = match name {\n+                \"prefetch_read_data\" => (0, 1),\n+                \"prefetch_write_data\" => (1, 1),\n+                \"prefetch_read_instruction\" => (0, 0),\n+                \"prefetch_write_instruction\" => (1, 0),\n+                _ => bug!()\n+            };\n+            bcx.call(expect, &[llargs[0], C_i32(ccx, rw), llargs[1], C_i32(ccx, cache_type)], None)\n+        },\n         \"ctlz\" | \"cttz\" | \"ctpop\" | \"bswap\" |\n         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n         \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |"}, {"sha": "daf202cd7973150c7895a375e59f2bd47a6a8213", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f83901bb89e4043268ec3bf033b435d56e1ed303/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83901bb89e4043268ec3bf033b435d56e1ed303/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=f83901bb89e4043268ec3bf033b435d56e1ed303", "patch": "@@ -133,6 +133,14 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                   ],\n                tcx.mk_nil())\n             }\n+            \"prefetch_read_data\" | \"prefetch_write_data\" |\n+            \"prefetch_read_instruction\" | \"prefetch_write_instruction\" => {\n+                (1, vec![tcx.mk_ptr(ty::TypeAndMut {\n+                          ty: param(0),\n+                          mutbl: hir::MutImmutable\n+                         }), tcx.types.i32],\n+                    tcx.mk_nil())\n+            }\n             \"drop_in_place\" => {\n                 (1, vec![tcx.mk_mut_ptr(param(0))], tcx.mk_nil())\n             }"}, {"sha": "9ca2f01f80d7d985d3ca2a08f84c9ae7b0ba691f", "filename": "src/test/codegen/prefetch.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f83901bb89e4043268ec3bf033b435d56e1ed303/src%2Ftest%2Fcodegen%2Fprefetch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83901bb89e4043268ec3bf033b435d56e1ed303/src%2Ftest%2Fcodegen%2Fprefetch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fprefetch.rs?ref=f83901bb89e4043268ec3bf033b435d56e1ed303", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::{prefetch_read_data, prefetch_write_data,\n+                      prefetch_read_instruction, prefetch_write_instruction};\n+\n+#[no_mangle]\n+pub fn check_prefetch_read_data(data: &[i8]) {\n+    unsafe {\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 0, i32 1)\n+        prefetch_read_data(data.as_ptr(), 0);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 1, i32 1)\n+        prefetch_read_data(data.as_ptr(), 1);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 2, i32 1)\n+        prefetch_read_data(data.as_ptr(), 2);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 3, i32 1)\n+        prefetch_read_data(data.as_ptr(), 3);\n+    }\n+}\n+\n+#[no_mangle]\n+pub fn check_prefetch_write_data(data: &[i8]) {\n+    unsafe {\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 0, i32 1)\n+        prefetch_write_data(data.as_ptr(), 0);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 1, i32 1)\n+        prefetch_write_data(data.as_ptr(), 1);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 2, i32 1)\n+        prefetch_write_data(data.as_ptr(), 2);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 3, i32 1)\n+        prefetch_write_data(data.as_ptr(), 3);\n+    }\n+}\n+\n+#[no_mangle]\n+pub fn check_prefetch_read_instruction(data: &[i8]) {\n+    unsafe {\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 0, i32 0)\n+        prefetch_read_instruction(data.as_ptr(), 0);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 1, i32 0)\n+        prefetch_read_instruction(data.as_ptr(), 1);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 2, i32 0)\n+        prefetch_read_instruction(data.as_ptr(), 2);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 3, i32 0)\n+        prefetch_read_instruction(data.as_ptr(), 3);\n+    }\n+}\n+\n+#[no_mangle]\n+pub fn check_prefetch_write_instruction(data: &[i8]) {\n+    unsafe {\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 0, i32 0)\n+        prefetch_write_instruction(data.as_ptr(), 0);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 1, i32 0)\n+        prefetch_write_instruction(data.as_ptr(), 1);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 2, i32 0)\n+        prefetch_write_instruction(data.as_ptr(), 2);\n+        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 3, i32 0)\n+        prefetch_write_instruction(data.as_ptr(), 3);\n+    }\n+}\n+\n+"}]}