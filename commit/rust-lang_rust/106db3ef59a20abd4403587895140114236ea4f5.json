{"sha": "106db3ef59a20abd4403587895140114236ea4f5", "node_id": "C_kwDOAAsO6NoAKDEwNmRiM2VmNTlhMjBhYmQ0NDAzNTg3ODk1MTQwMTE0MjM2ZWE0ZjU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T14:46:39Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-24T13:53:37Z"}, "message": "Fix `rustc_index` imports outside the compiler", "tree": {"sha": "cc6cbee6c324e42d3494403417c6b6cb1bc906e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc6cbee6c324e42d3494403417c6b6cb1bc906e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/106db3ef59a20abd4403587895140114236ea4f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/106db3ef59a20abd4403587895140114236ea4f5", "html_url": "https://github.com/rust-lang/rust/commit/106db3ef59a20abd4403587895140114236ea4f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/106db3ef59a20abd4403587895140114236ea4f5/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd172d08d48beaba0ddd4f26657387d00e6633c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd172d08d48beaba0ddd4f26657387d00e6633c6", "html_url": "https://github.com/rust-lang/rust/commit/dd172d08d48beaba0ddd4f26657387d00e6633c6"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "bd055216e367acbf4213cc38bd6453be00c2c93f", "filename": "src/abi/returning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/106db3ef59a20abd4403587895140114236ea4f5/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/106db3ef59a20abd4403587895140114236ea4f5/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=106db3ef59a20abd4403587895140114236ea4f5", "patch": "@@ -9,7 +9,7 @@ use smallvec::{smallvec, SmallVec};\n /// this adds an extra parameter pointing to where the return value needs to be stored.\n pub(super) fn codegen_return_param<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n+    ssa_analyzed: &rustc_index::IndexSlice<Local, crate::analyze::SsaKind>,\n     block_params_iter: &mut impl Iterator<Item = Value>,\n ) -> CPlace<'tcx> {\n     let (ret_place, ret_param): (_, SmallVec<[_; 2]>) = match fx.fn_abi.as_ref().unwrap().ret.mode {"}]}