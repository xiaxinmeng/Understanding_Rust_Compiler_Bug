{"sha": "52b2db1cca591a14b9790ce3d11fba39696ae4a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYjJkYjFjY2E1OTFhMTRiOTc5MGNlM2QxMWZiYTM5Njk2YWU0YTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-21T09:15:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-31T23:41:25Z"}, "message": "warn if leak-check relies on LBRs that will change\n\nWhen we do a \"HR subtype\" check, we replace all late-bound regions (LBR)\nin the subtype with fresh variables, and skolemize the late-bound\nregions in the supertype. If those skolemized regions from the supertype\nwind up being super-regions (directly or indirectly) of either\n\n- another skolemized region; or,\n- some region that pre-exists the HR subtype check\n  - e.g., a region variable that is not one of those created\n    to represent bound regions in the subtype\n\nthen the subtype check fails.\n\nWhat will change when we fix #32330 is that some of the LBR in the\nsubtype may become early-bound. In that case, they would no longer be in\nthe \"permitted set\" of variables that can be related to a skolemized\ntype.\n\nSo the foundation for this warning is to collect variables that we found\nto be related to a skolemized type. For each of them, we have a\n`BoundRegion` which carries a `Issue32330` flag. We check whether any of\nthose flags indicate that this variable was created from a lifetime\nthat will change from late- to early-bound. If so, we issue a warning\nindicating that the results of compilation may change.\n\nThis is imperfect, since there are other kinds of code that will not\ncompile once #32330 is fixed. However, it fixes the errors observed in\npractice on crater runs.", "tree": {"sha": "d204e1c7999e6c179507086778bf8f4147499400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d204e1c7999e6c179507086778bf8f4147499400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52b2db1cca591a14b9790ce3d11fba39696ae4a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52b2db1cca591a14b9790ce3d11fba39696ae4a7", "html_url": "https://github.com/rust-lang/rust/commit/52b2db1cca591a14b9790ce3d11fba39696ae4a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52b2db1cca591a14b9790ce3d11fba39696ae4a7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08034eb1a58518f7fc684ad325d32195d48a9fe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/08034eb1a58518f7fc684ad325d32195d48a9fe3", "html_url": "https://github.com/rust-lang/rust/commit/08034eb1a58518f7fc684ad325d32195d48a9fe3"}], "stats": {"total": 264, "additions": 263, "deletions": 1}, "files": [{"sha": "402488e59a2c80a898c5a63b556b3bd908db5ffe", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52b2db1cca591a14b9790ce3d11fba39696ae4a7/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b2db1cca591a14b9790ce3d11fba39696ae4a7/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=52b2db1cca591a14b9790ce3d11fba39696ae4a7", "patch": "@@ -77,6 +77,7 @@ use hir::map as ast_map;\n use hir;\n use hir::print as pprust;\n \n+use lint;\n use hir::def::Def;\n use hir::def_id::DefId;\n use infer::{self, TypeOrigin};\n@@ -1028,6 +1029,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let (fn_decl, generics) = rebuilder.rebuild();\n         self.give_expl_lifetime_param(err, &fn_decl, unsafety, constness, name, &generics, span);\n     }\n+\n+    pub fn issue_32330_warnings(&self, span: Span, issue32330s: &[ty::Issue32330]) {\n+        for issue32330 in issue32330s {\n+            match *issue32330 {\n+                ty::Issue32330::WontChange => { }\n+                ty::Issue32330::WillChange { fn_def_id, region_name } => {\n+                    self.tcx.sess.add_lint(\n+                        lint::builtin::HR_LIFETIME_IN_ASSOC_TYPE,\n+                        ast::CRATE_NODE_ID,\n+                        span,\n+                        format!(\"lifetime parameter `{0}` declared on fn `{1}` \\\n+                                 appears only in the return type, \\\n+                                 but here is required to be higher-ranked, \\\n+                                 which means that `{0}` must appear in both \\\n+                                 argument and return types\",\n+                                region_name,\n+                                self.tcx.item_path_str(fn_def_id)));\n+                }\n+            }\n+        }\n+    }\n }\n \n struct RebuildPathInfo<'a> {\n@@ -1939,3 +1961,4 @@ fn name_to_dummy_lifetime(name: ast::Name) -> hir::Lifetime {\n                     span: codemap::DUMMY_SP,\n                     name: name }\n }\n+"}, {"sha": "b432e39fdc6b19687fc0f5f24380452617ce4236", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/52b2db1cca591a14b9790ce3d11fba39696ae4a7/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b2db1cca591a14b9790ce3d11fba39696ae4a7/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=52b2db1cca591a14b9790ce3d11fba39696ae4a7", "patch": "@@ -13,6 +13,7 @@\n \n use super::{CombinedSnapshot,\n             InferCtxt,\n+            LateBoundRegion,\n             HigherRankedType,\n             SubregionOrigin,\n             SkolemizationMap};\n@@ -483,6 +484,43 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"leak_check: skol_map={:?}\",\n                skol_map);\n \n+        // ## Issue #32330 warnings\n+        //\n+        // When Issue #32330 is fixed, a certain number of late-bound\n+        // regions (LBR) will become early-bound. We wish to issue\n+        // warnings when the result of `leak_check` relies on such LBR, as\n+        // that means that compilation will likely start to fail.\n+        //\n+        // Recall that when we do a \"HR subtype\" check, we replace all\n+        // late-bound regions (LBR) in the subtype with fresh variables,\n+        // and skolemize the late-bound regions in the supertype. If those\n+        // skolemized regions from the supertype wind up being\n+        // super-regions (directly or indirectly) of either\n+        //\n+        // - another skolemized region; or,\n+        // - some region that pre-exists the HR subtype check\n+        //   - e.g., a region variable that is not one of those created\n+        //     to represent bound regions in the subtype\n+        //\n+        // then leak-check (and hence the subtype check) fails.\n+        //\n+        // What will change when we fix #32330 is that some of the LBR in the\n+        // subtype may become early-bound. In that case, they would no longer be in\n+        // the \"permitted set\" of variables that can be related to a skolemized\n+        // type.\n+        //\n+        // So the foundation for this warning is to collect variables that we found\n+        // to be related to a skolemized type. For each of them, we have a\n+        // `BoundRegion` which carries a `Issue32330` flag. We check whether any of\n+        // those flags indicate that this variable was created from a lifetime\n+        // that will change from late- to early-bound. If so, we issue a warning\n+        // indicating that the results of compilation may change.\n+        //\n+        // This is imperfect, since there are other kinds of code that will not\n+        // compile once #32330 is fixed. However, it fixes the errors observed in\n+        // practice on crater runs.\n+        let mut warnings = vec![];\n+\n         let new_vars = self.region_vars_confined_to_snapshot(snapshot);\n         for (&skol_br, &skol) in skol_map {\n             // The inputs to a skolemized variable can only\n@@ -495,7 +533,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // or new variables:\n                 match tainted_region {\n                     ty::ReVar(vid) => {\n-                        if new_vars.iter().any(|&x| x == vid) { continue; }\n+                        if new_vars.contains(&vid) {\n+                            warnings.extend(\n+                                match self.region_vars.var_origin(vid) {\n+                                    LateBoundRegion(_,\n+                                                    ty::BrNamed(_, _, wc),\n+                                                    _) => Some(wc),\n+                                    _ => None,\n+                                });\n+                            continue;\n+                        }\n                     }\n                     _ => {\n                         if tainted_region == skol { continue; }\n@@ -519,6 +566,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n+        self.issue_32330_warnings(span, &warnings);\n+\n         for (_, &skol) in skol_map {\n             // The outputs from a skolemized variable must all be\n             // equatable with `'static`."}, {"sha": "c5557cee7cc1dce3d01d76fc8cf86418662fa93c", "filename": "src/test/compile-fail/associated-types/cache/project-fn-ret-contravariant.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/52b2db1cca591a14b9790ce3d11fba39696ae4a7/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b2db1cca591a14b9790ce3d11fba39696ae4a7/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs?ref=52b2db1cca591a14b9790ce3d11fba39696ae4a7", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+#![feature(rustc_attrs)]\n+\n+// Test for projection cache. We should be able to project distinct\n+// lifetimes from `foo` as we reinstantiate it multiple times, but not\n+// if we do it just once. In this variant, the region `'a` is used in\n+// an contravariant position, which affects the results.\n+\n+// revisions: ok oneuse transmute krisskross\n+\n+#![allow(dead_code, unused_variables)]\n+\n+fn foo<'a>() -> &'a u32 { loop { } }\n+\n+fn bar<T>(t: T, x: T::Output) -> T::Output\n+    where T: FnOnce<()>\n+{\n+    t()\n+}\n+\n+#[cfg(ok)] // two instantiations: OK\n+fn baz<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+    let a = bar(foo, x);\n+    let b = bar(foo, y);\n+    (a, b)\n+}\n+\n+#[cfg(oneuse)] // one instantiation: OK (surprisingly)\n+fn baz<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+    let f /* : fn() -> &'static u32 */ = foo; // <-- inferred type annotated\n+    let a = bar(f, x); // this is considered ok because fn args are contravariant...\n+    let b = bar(f, y); // ...and hence we infer T to distinct values in each call.\n+    (a, b)\n+}\n+\n+// FIXME(#32330)\n+//#[cfg(transmute)] // one instantiations: BAD\n+//fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+//    bar(foo, x) //[transmute] ERROR E0495\n+//}\n+\n+// FIXME(#32330)\n+//#[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n+//fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+//    let a = bar(foo, y); //[krisskross] ERROR E0495\n+//    let b = bar(foo, x); //[krisskross] ERROR E0495\n+//    (a, b)\n+//}\n+\n+#[rustc_error]\n+fn main() { }\n+//[ok]~^ ERROR compilation successful\n+//[oneuse]~^^ ERROR compilation successful\n+//[transmute]~^^^ ERROR compilation successful\n+//[krisskross]~^^^^ ERROR compilation successful"}, {"sha": "a15422e42d94a339f617e675ff3aa590a65408f2", "filename": "src/test/compile-fail/associated-types/cache/project-fn-ret-invariant.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/52b2db1cca591a14b9790ce3d11fba39696ae4a7/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b2db1cca591a14b9790ce3d11fba39696ae4a7/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=52b2db1cca591a14b9790ce3d11fba39696ae4a7", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+#![feature(rustc_attrs)]\n+\n+// Test for projection cache. We should be able to project distinct\n+// lifetimes from `foo` as we reinstantiate it multiple times, but not\n+// if we do it just once. In this variant, the region `'a` is used in\n+// an invariant position, which affects the results.\n+\n+// revisions: ok oneuse transmute krisskross\n+\n+#![allow(dead_code, unused_variables)]\n+\n+use std::marker::PhantomData;\n+\n+struct Type<'a> {\n+    // Invariant\n+    data: PhantomData<fn(&'a u32) -> &'a u32>\n+}\n+\n+fn foo<'a>() -> Type<'a> { loop { } }\n+\n+fn bar<T>(t: T, x: T::Output) -> T::Output\n+    where T: FnOnce<()>\n+{\n+    t()\n+}\n+\n+#[cfg(ok)] // two instantiations: OK\n+fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+    let a = bar(foo, x);\n+    let b = bar(foo, y);\n+    (a, b)\n+}\n+\n+// FIXME(#32330)\n+//#[cfg(oneuse)] // one instantiation: BAD\n+//fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+//    let f = foo; // <-- No consistent type can be inferred for `f` here.\n+//    let a = bar(f, x); //[oneuse] ERROR E0495\n+//    let b = bar(f, y);\n+//    (a, b)\n+//}\n+\n+// FIXME(#32330)\n+//#[cfg(transmute)] // one instantiations: BAD\n+//fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n+//    // Cannot instantiate `foo` with any lifetime other than `'a`,\n+//    // since it is provided as input.\n+//\n+//    bar(foo, x) //[transmute] ERROR E0495\n+//}\n+\n+// FIXME(#32330)\n+//#[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n+//fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+//    let a = bar(foo, y); //[krisskross] ERROR E0495\n+//    let b = bar(foo, x); //[krisskross] ERROR E0495\n+//    (a, b)\n+//}\n+\n+#[rustc_error]\n+fn main() { }\n+//[ok]~^ ERROR compilation successful\n+//[oneuse]~^^ ERROR compilation successful\n+//[transmute]~^^^ ERROR compilation successful\n+//[krisskross]~^^^^ ERROR compilation successful"}, {"sha": "01db4770a38b2fd0501d723c202a8a6f6ea0d590", "filename": "src/test/compile-fail/associated-types/cache/wasm-issue-32330.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/52b2db1cca591a14b9790ce3d11fba39696ae4a7/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fwasm-issue-32330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b2db1cca591a14b9790ce3d11fba39696ae4a7/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fwasm-issue-32330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fwasm-issue-32330.rs?ref=52b2db1cca591a14b9790ce3d11fba39696ae4a7", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test was derived from the wasm and parsell crates.  They\n+// stopped compiling when #32330 is fixed.\n+\n+#![allow(dead_code, unused_variables)]\n+#![deny(hr_lifetime_in_assoc_type)]\n+#![feature(unboxed_closures)]\n+\n+use std::str::Chars;\n+\n+pub trait HasOutput<Ch, Str> {\n+    type Output;\n+}\n+\n+#[derive(Clone, PartialEq, Eq, Hash, Ord, PartialOrd, Debug)]\n+pub enum Token<'a> {\n+    Begin(&'a str)\n+}\n+\n+fn mk_unexpected_char_err<'a>() -> Option<&'a i32> {\n+    unimplemented!()\n+}\n+\n+fn foo<'a>(data: &mut Chars<'a>) {\n+    bar(mk_unexpected_char_err)\n+    //~^ ERROR lifetime parameter `'a` declared on fn `mk_unexpected_char_err`\n+    //~| WARNING hard error in a future release\n+}\n+\n+fn bar<F>(t: F)\n+    // No type can satisfy this requirement, since `'a` does not\n+    // appear in any of the input types:\n+    where F: for<'a> Fn() -> Option<&'a i32>\n+    //~^ ERROR associated type `Output` references lifetime `'a`, which does not\n+    //~| WARNING hard error in a future release\n+{\n+}\n+\n+fn main() {\n+}"}]}