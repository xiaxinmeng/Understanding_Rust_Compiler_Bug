{"sha": "819bbd08645a85cbf31025b31bd4daf69f821d20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOWJiZDA4NjQ1YTg1Y2JmMzEwMjViMzFiZDRkYWY2OWY4MjFkMjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T10:37:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T10:37:21Z"}, "message": "Minor cleanup", "tree": {"sha": "65d297cd72a90e310eab38146b0b76e66bd5d85f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d297cd72a90e310eab38146b0b76e66bd5d85f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/819bbd08645a85cbf31025b31bd4daf69f821d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/819bbd08645a85cbf31025b31bd4daf69f821d20", "html_url": "https://github.com/rust-lang/rust/commit/819bbd08645a85cbf31025b31bd4daf69f821d20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/819bbd08645a85cbf31025b31bd4daf69f821d20/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405e3d20a902cff0db74b9d69a812a201301cd2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/405e3d20a902cff0db74b9d69a812a201301cd2d", "html_url": "https://github.com/rust-lang/rust/commit/405e3d20a902cff0db74b9d69a812a201301cd2d"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "22d0ed3e6f3e675785af7d40de54f47fe0e4f2d1", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/819bbd08645a85cbf31025b31bd4daf69f821d20/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819bbd08645a85cbf31025b31bd4daf69f821d20/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=819bbd08645a85cbf31025b31bd4daf69f821d20", "patch": "@@ -46,32 +46,35 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n pub(crate) fn highlight(\n     db: &RootDatabase,\n     file_id: FileId,\n-    range: Option<TextRange>,\n+    range_to_highlight: Option<TextRange>,\n ) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n     let sema = Semantics::new(db);\n-    let root = sema.parse(file_id).syntax().clone();\n+\n+    // Determine the root based on the given range.\n+    let (root, range_to_highlight) = {\n+        let source_file = sema.parse(file_id);\n+        match range_to_highlight {\n+            Some(range) => {\n+                let node = match source_file.syntax().covering_element(range) {\n+                    NodeOrToken::Node(it) => it,\n+                    NodeOrToken::Token(it) => it.parent(),\n+                };\n+                (node, range)\n+            }\n+            None => (source_file.syntax().clone(), source_file.syntax().text_range()),\n+        }\n+    };\n \n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n     let mut res = Vec::new();\n \n     let mut in_macro_call = None;\n \n-    // Determine the root based on the given range.\n-    let (root, highlight_range) = if let Some(range) = range {\n-        let root = match root.covering_element(range) {\n-            NodeOrToken::Node(node) => node,\n-            NodeOrToken::Token(token) => token.parent(),\n-        };\n-        (root, range)\n-    } else {\n-        (root.clone(), root.text_range())\n-    };\n-\n     for event in root.preorder_with_tokens() {\n         match event {\n             WalkEvent::Enter(node) => {\n-                if node.text_range().intersection(&highlight_range).is_none() {\n+                if node.text_range().intersection(&range_to_highlight).is_none() {\n                     continue;\n                 }\n \n@@ -115,7 +118,7 @@ pub(crate) fn highlight(\n                 }\n             }\n             WalkEvent::Leave(node) => {\n-                if node.text_range().intersection(&highlight_range).is_none() {\n+                if node.text_range().intersection(&range_to_highlight).is_none() {\n                     continue;\n                 }\n "}]}