{"sha": "588f00841b430b12b39fb75d778bd670df8c59f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OGYwMDg0MWI0MzBiMTJiMzlmYjc1ZDc3OGJkNjcwZGY4YzU5ZjU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-20T09:49:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-20T09:49:10Z"}, "message": "Rollup merge of #68945 - mjbshaw:once_is_completed, r=LukasKalbertodt\n\nStabilize Once::is_completed\n\nCloses #54890\n\nThis function has been around for some time. I haven't seen anyone raise any objections to it. I've personally found it useful myself. It would be nice to finally stabilize it and", "tree": {"sha": "58a8aab3f98c17c9a63efdc9667e72bba6157bf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58a8aab3f98c17c9a63efdc9667e72bba6157bf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/588f00841b430b12b39fb75d778bd670df8c59f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTlYWCRBK7hj4Ov3rIwAAdHIIAHpvWymWCBiXuGKIqW+mD3dP\nWJ5nQXWPP9Iwy1kUu/zYitzHXQwyAJFYe4bMptfiM8DDXBuEiWO78DfEik5I33fV\nDRNs4tnUq/Jz0bu8r+1oi+2RJ5HxiB8JpeCTDA6NLVuS9RpHDXeihW7yoHu3vUQ8\nIvQzy90BaxMeaNBl0JEo9dCS8fQCisSjMqRdX1Z1WTXEn5MP8dEjRRHefMSUSrJq\nTk4knTu6hmCZhHfDvh0RdbSu0STH4INCVaZG1IuJd6mcSDGtN0irMXlkDhDpH4u5\nnd31GjwSpR6ZJk83gyyikeJe9cnTDflg/PoXs1ydjNAuUledDkAdF97oji8w2eM=\n=Iq0l\n-----END PGP SIGNATURE-----\n", "payload": "tree 58a8aab3f98c17c9a63efdc9667e72bba6157bf8\nparent f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39\nparent 348278a7fd5fd459f555dd763e71e12c23c1661a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582192150 +0100\ncommitter GitHub <noreply@github.com> 1582192150 +0100\n\nRollup merge of #68945 - mjbshaw:once_is_completed, r=LukasKalbertodt\n\nStabilize Once::is_completed\n\nCloses #54890\n\nThis function has been around for some time. I haven't seen anyone raise any objections to it. I've personally found it useful myself. It would be nice to finally stabilize it and\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/588f00841b430b12b39fb75d778bd670df8c59f5", "html_url": "https://github.com/rust-lang/rust/commit/588f00841b430b12b39fb75d778bd670df8c59f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/588f00841b430b12b39fb75d778bd670df8c59f5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39", "html_url": "https://github.com/rust-lang/rust/commit/f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39"}, {"sha": "348278a7fd5fd459f555dd763e71e12c23c1661a", "url": "https://api.github.com/repos/rust-lang/rust/commits/348278a7fd5fd459f555dd763e71e12c23c1661a", "html_url": "https://github.com/rust-lang/rust/commit/348278a7fd5fd459f555dd763e71e12c23c1661a"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "b99b4d8d9fdf012bb15caa6138e836176113a543", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/588f00841b430b12b39fb75d778bd670df8c59f5/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588f00841b430b12b39fb75d778bd670df8c59f5/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=588f00841b430b12b39fb75d778bd670df8c59f5", "patch": "@@ -331,14 +331,14 @@ impl Once {\n     ///   * `call_once` was called, but has not yet completed,\n     ///   * the `Once` instance is poisoned\n     ///\n-    /// It is also possible that immediately after `is_completed`\n-    /// returns false, some other thread finishes executing\n-    /// `call_once`.\n+    /// This function returning `false` does not mean that `Once` has not been\n+    /// executed. For example, it may have been executed in the time between\n+    /// when `is_completed` starts executing and when it returns, in which case\n+    /// the `false` return value would be stale (but still permissible).\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_is_completed)]\n     /// use std::sync::Once;\n     ///\n     /// static INIT: Once = Once::new();\n@@ -351,7 +351,6 @@ impl Once {\n     /// ```\n     ///\n     /// ```\n-    /// #![feature(once_is_completed)]\n     /// use std::sync::Once;\n     /// use std::thread;\n     ///\n@@ -364,7 +363,7 @@ impl Once {\n     /// assert!(handle.join().is_err());\n     /// assert_eq!(INIT.is_completed(), false);\n     /// ```\n-    #[unstable(feature = \"once_is_completed\", issue = \"54890\")]\n+    #[stable(feature = \"once_is_completed\", since = \"1.44.0\")]\n     #[inline]\n     pub fn is_completed(&self) -> bool {\n         // An `Acquire` load is enough because that makes all the initialization"}]}