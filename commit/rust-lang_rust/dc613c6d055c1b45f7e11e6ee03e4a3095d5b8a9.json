{"sha": "dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNjEzYzZkMDU1YzFiNDVmN2UxMWU2ZWUwM2U0YTMwOTVkNWI4YTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-05T22:29:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-05T22:29:31Z"}, "message": "Fix test", "tree": {"sha": "b00f6d8d39bcb5291afa1346a97614c88b9e8397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b00f6d8d39bcb5291afa1346a97614c88b9e8397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9", "html_url": "https://github.com/rust-lang/rust/commit/dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afcf9b262d450edd1a7d54754e62f62d50052d8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/afcf9b262d450edd1a7d54754e62f62d50052d8d", "html_url": "https://github.com/rust-lang/rust/commit/afcf9b262d450edd1a7d54754e62f62d50052d8d"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "89c17cf4b3aa35c01b96a024e0b4cff8afcdd0d6", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9", "patch": "@@ -32,13 +32,15 @@ use syntax::print::pprust;\n use syntax::ptr::P;\n \n \n-fn parse_expr(ps: &ParseSess, src: &str) -> P<Expr> {\n+fn parse_expr(ps: &ParseSess, src: &str) -> Option<P<Expr>> {\n     let src_as_string = src.to_string();\n \n-    let mut p = parse::new_parser_from_source_str(ps,\n-                                                  FileName::Custom(src_as_string.clone()),\n-                                                  src_as_string);\n-    p.parse_expr().unwrap()\n+    let mut p = parse::new_parser_from_source_str(\n+        ps,\n+        FileName::Custom(src_as_string.clone()),\n+        src_as_string,\n+    );\n+    p.parse_expr().map_err(|mut e| e.cancel()).ok()\n }\n \n \n@@ -209,22 +211,23 @@ fn run() {\n         let printed = pprust::expr_to_string(&e);\n         println!(\"printed: {}\", printed);\n \n-        let mut parsed = parse_expr(&ps, &printed);\n-\n-        // We want to know if `parsed` is structurally identical to `e`, ignoring trivial\n-        // differences like placement of `Paren`s or the exact ranges of node spans.\n-        // Unfortunately, there is no easy way to make this comparison. Instead, we add `Paren`s\n-        // everywhere we can, then pretty-print. This should give an unambiguous representation of\n-        // each `Expr`, and it bypasses nearly all of the parenthesization logic, so we aren't\n-        // relying on the correctness of the very thing we're testing.\n-        RemoveParens.visit_expr(&mut e);\n-        AddParens.visit_expr(&mut e);\n-        let text1 = pprust::expr_to_string(&e);\n-        RemoveParens.visit_expr(&mut parsed);\n-        AddParens.visit_expr(&mut parsed);\n-        let text2 = pprust::expr_to_string(&parsed);\n-        assert!(text1 == text2,\n-                \"exprs are not equal:\\n  e =      {:?}\\n  parsed = {:?}\",\n-                text1, text2);\n+        // Ignore expressions with chained comparisons that fail to parse\n+        if let Some(mut parsed) = parse_expr(&ps, &printed) {\n+            // We want to know if `parsed` is structurally identical to `e`, ignoring trivial\n+            // differences like placement of `Paren`s or the exact ranges of node spans.\n+            // Unfortunately, there is no easy way to make this comparison. Instead, we add `Paren`s\n+            // everywhere we can, then pretty-print. This should give an unambiguous representation\n+            // of each `Expr`, and it bypasses nearly all of the parenthesization logic, so we\n+            // aren't relying on the correctness of the very thing we're testing.\n+            RemoveParens.visit_expr(&mut e);\n+            AddParens.visit_expr(&mut e);\n+            let text1 = pprust::expr_to_string(&e);\n+            RemoveParens.visit_expr(&mut parsed);\n+            AddParens.visit_expr(&mut parsed);\n+            let text2 = pprust::expr_to_string(&parsed);\n+            assert!(text1 == text2,\n+                    \"exprs are not equal:\\n  e =      {:?}\\n  parsed = {:?}\",\n+                    text1, text2);\n+        }\n     });\n }"}]}