{"sha": "8c886f1e752558e95d086deff4c1ccc61924873d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjODg2ZjFlNzUyNTU4ZTk1ZDA4NmRlZmY0YzFjY2M2MTkyNDg3M2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-09T08:47:46Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-09T08:47:46Z"}, "message": "Merge pull request #642 from Manishearth/regex_macro\n\nRegex macro", "tree": {"sha": "7d03d0883cfddfcebda6b568d2e1a703d86be9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d03d0883cfddfcebda6b568d2e1a703d86be9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c886f1e752558e95d086deff4c1ccc61924873d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c886f1e752558e95d086deff4c1ccc61924873d", "html_url": "https://github.com/rust-lang/rust/commit/8c886f1e752558e95d086deff4c1ccc61924873d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c886f1e752558e95d086deff4c1ccc61924873d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d68dc8e25a85819c7ef5679ef6d98c049457238f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d68dc8e25a85819c7ef5679ef6d98c049457238f", "html_url": "https://github.com/rust-lang/rust/commit/d68dc8e25a85819c7ef5679ef6d98c049457238f"}, {"sha": "275795fab321d860cd9f01243f861bf804b1e53c", "url": "https://api.github.com/repos/rust-lang/rust/commits/275795fab321d860cd9f01243f861bf804b1e53c", "html_url": "https://github.com/rust-lang/rust/commit/275795fab321d860cd9f01243f861bf804b1e53c"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "cbb8646c672386c31db95569dfff1af3962976cb", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c886f1e752558e95d086deff4c1ccc61924873d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8c886f1e752558e95d086deff4c1ccc61924873d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8c886f1e752558e95d086deff4c1ccc61924873d", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 116 lints included in this crate:\n+There are 117 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -91,6 +91,7 @@ name\n [range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                       | warn    | zipping iterator with a range when enumerate() would do\n [redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                         | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n [redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                         | warn    | using `name @ _` in a pattern\n+[regex_macro](https://github.com/Manishearth/rust-clippy/wiki#regex_macro)                                     | warn    | finds use of `regex!(_)`, suggests `Regex::new(_)` instead\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)                       | allow   | using `Result.unwrap()`, which might be better handled\n [reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)                       | warn    | Iterating over an empty range, such as `10..0` or `5..5`\n [search_is_some](https://github.com/Manishearth/rust-clippy/wiki#search_is_some)                               | warn    | using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`"}, {"sha": "728aa124a18c7484dec008507cde5ce5f92fbde6", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c886f1e752558e95d086deff4c1ccc61924873d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c886f1e752558e95d086deff4c1ccc61924873d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8c886f1e752558e95d086deff4c1ccc61924873d", "patch": "@@ -264,6 +264,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         ranges::RANGE_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,\n         regex::INVALID_REGEX,\n+        regex::REGEX_MACRO,\n         regex::TRIVIAL_REGEX,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,"}, {"sha": "cf938dcf4b39382813fbc9f23a42510b3320c2f1", "filename": "src/regex.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8c886f1e752558e95d086deff4c1ccc61924873d/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c886f1e752558e95d086deff4c1ccc61924873d/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=8c886f1e752558e95d086deff4c1ccc61924873d", "patch": "@@ -1,14 +1,16 @@\n use regex_syntax;\n use std::error::Error;\n+use std::collections::HashSet;\n use syntax::ast::Lit_::LitStr;\n use syntax::codemap::{Span, BytePos};\n use syntax::parse::token::InternedString;\n use rustc_front::hir::*;\n+use rustc_front::intravisit::{Visitor, walk_block};\n use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::lint::*;\n \n-use utils::{match_path, REGEX_NEW_PATH, span_lint, span_help_and_lint};\n+use utils::{is_expn_of, match_path, match_type, REGEX_NEW_PATH, span_lint, span_help_and_lint};\n \n /// **What it does:** This lint checks `Regex::new(_)` invocations for correct regex syntax.\n ///\n@@ -37,16 +39,35 @@ declare_lint! {\n     \"finds trivial regular expressions in `Regex::new(_)` invocations\"\n }\n \n+/// **What it does:** This lint checks for usage of `regex!(_)` which as of now is usually slower than `Regex::new(_)` unless called in a loop (which is a bad idea anyway).\n+///\n+/// **Why is this bad?** Performance, at least for now. The macro version is likely to catch up long-term, but for now the dynamic version is faster.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** `regex!(\"foo|bar\")`\n+declare_lint! {\n+    pub REGEX_MACRO,\n+    Warn,\n+    \"finds use of `regex!(_)`, suggests `Regex::new(_)` instead\"\n+}\n+\n #[derive(Copy,Clone)]\n pub struct RegexPass;\n \n impl LintPass for RegexPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(INVALID_REGEX, TRIVIAL_REGEX)\n+        lint_array!(INVALID_REGEX, REGEX_MACRO, TRIVIAL_REGEX)\n     }\n }\n \n impl LateLintPass for RegexPass {\n+    fn check_crate(&mut self, cx: &LateContext, krate: &Crate) {\n+        let mut visitor = RegexVisitor { cx: cx, spans: HashSet::new() };\n+        krate.visit_all_items(&mut visitor);\n+    }\n+\n+\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if_let_chain!{[\n             let ExprCall(ref fun, ref args) = expr.node,\n@@ -139,3 +160,30 @@ fn is_trivial_regex(s: &regex_syntax::Expr) -> Option<&'static str> {\n         _ => None,\n     }\n }\n+\n+struct RegexVisitor<'v, 't: 'v> {\n+    cx: &'v LateContext<'v, 't>,\n+    spans: HashSet<Span>,\n+}\n+\n+impl<'v, 't: 'v> Visitor<'v> for RegexVisitor<'v, 't> {\n+    fn visit_block(&mut self, block: &'v Block) {\n+        if_let_chain!{[\n+            let Some(ref expr) = block.expr,\n+            match_type(self.cx, self.cx.tcx.expr_ty(expr), &[\"regex\", \"re\", \"Regex\"]),\n+            let Some(span) = is_expn_of(self.cx, expr.span, \"regex\")\n+        ], {\n+                if self.spans.contains(&span) {\n+                    return;\n+                }\n+                span_lint(self.cx, \n+                          REGEX_MACRO, \n+                          span,\n+                          \"`regex!(_)` found. \\\n+                          Please use `Regex::new(_)`, which is faster for now.\");\n+                self.spans.insert(span);\n+                return;\n+        }}\n+        walk_block(self, block);\n+    }\n+}"}, {"sha": "df52cc3dff0b070f00e2c524ce63cc32eae71bc2", "filename": "tests/compile-fail/regex.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c886f1e752558e95d086deff4c1ccc61924873d/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c886f1e752558e95d086deff4c1ccc61924873d/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=8c886f1e752558e95d086deff4c1ccc61924873d", "patch": "@@ -1,8 +1,8 @@\n #![feature(plugin)]\n-#![plugin(clippy)]\n+#![plugin(clippy, regex_macros)]\n \n #![allow(unused)]\n-#![deny(invalid_regex, trivial_regex)]\n+#![deny(invalid_regex, trivial_regex, regex_macro)]\n \n extern crate regex;\n \n@@ -70,7 +70,14 @@ fn trivial_regex() {\n     let non_trivial_ends_with = Regex::new(\"foo|bar\");\n }\n \n+fn regex_macro() {\n+    let some_regex = regex!(\"for real!\"); //~ERROR `regex!(_)`\n+    let other_regex = regex!(\"[a-z]_[A-Z]\"); //~ERROR `regex!(_)`\n+}\n+\n+\n fn main() {\n+    regex_macro();\n     syntax_error();\n     trivial_regex();\n }"}, {"sha": "67d73ce0ac40174388be105185d703ab2953fcb6", "filename": "tests/mut_mut_macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c886f1e752558e95d086deff4c1ccc61924873d/tests%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c886f1e752558e95d086deff4c1ccc61924873d/tests%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmut_mut_macro.rs?ref=8c886f1e752558e95d086deff4c1ccc61924873d", "patch": "@@ -9,6 +9,7 @@ use std::collections::HashMap;\n \n #[test]\n #[deny(mut_mut)]\n+#[allow(regex_macro)]\n fn test_regex() {\n     let pattern = regex!(r\"^(?P<level>[#]+)\\s(?P<title>.+)$\");\n     assert!(pattern.is_match(\"# headline\"));"}]}