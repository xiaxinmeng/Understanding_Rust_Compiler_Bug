{"sha": "32810223c6b743de889eda96b442f621c293a848", "node_id": "C_kwDOAAsO6NoAKDMyODEwMjIzYzZiNzQzZGU4ODllZGE5NmI0NDJmNjIxYzI5M2E4NDg", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-12-06T18:10:16Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-12-06T18:10:16Z"}, "message": "Produce .dwo file for Packed as well", "tree": {"sha": "1beb606826d5ab0383bd34ce35c7400f8d8876ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1beb606826d5ab0383bd34ce35c7400f8d8876ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32810223c6b743de889eda96b442f621c293a848", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmGuUggACgkQGBtJ+fOP\nM3QRpgv+IneQAnTspuEUadXuopDXHE35OEtBPYZwhoQeUyk45/s8dt20QBSF3Qn7\nJZmQygJj4cbP+7US8z8xrse7ZWDwL7WaTk0AnvWxvD44b273Td3tEcnBoRtm+2s2\nlZeRjN2zkQiBhwm7FWf4DdkEj2vCjWEddey9xHRF3ILaL3nPRYIIgW1nhTwTd2Mf\ngAcmr6C9S6zkF1/RGTgmM/QPrBNwuM6/NlTY9+22rfQ3PL+CuryUkedxIS8unLLx\nOzFDRg5oXMsxX6jNTDcVLj5DDV5oD+Z18W3HiRApsFJFGXx5AdG1BY9wTLcsxVp0\nPirc3219jJRi/ILL6HepFyi3W6sZ3KzN5a5wesWHQdVTbw480+yZOFF/5NqmT9E+\nxevVDfhBGEiKnz/fXjGFHwRp9yeJjyeT4s11aZBYM2RcaIPFpSWzF9VCQTvKWhku\nCiFz0Sd421nLxnigMT5RiRv5o87Ih+cOUcm7GnGU7eUvJtkbj6+DAJy3m3O3ppY9\nb+M/lvbn\n=9RoM\n-----END PGP SIGNATURE-----", "payload": "tree 1beb606826d5ab0383bd34ce35c7400f8d8876ef\nparent 4abed5000b73efdbf12fda2148aa14185461b370\nauthor Andy Wang <cbeuw.andy@gmail.com> 1638814216 +0000\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1638814216 +0000\n\nProduce .dwo file for Packed as well\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32810223c6b743de889eda96b442f621c293a848", "html_url": "https://github.com/rust-lang/rust/commit/32810223c6b743de889eda96b442f621c293a848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32810223c6b743de889eda96b442f621c293a848/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4abed5000b73efdbf12fda2148aa14185461b370", "url": "https://api.github.com/repos/rust-lang/rust/commits/4abed5000b73efdbf12fda2148aa14185461b370", "html_url": "https://github.com/rust-lang/rust/commit/4abed5000b73efdbf12fda2148aa14185461b370"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "8a73890ba9dc7cf12e4a0fe1ab6a8d2287408a7c", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32810223c6b743de889eda96b442f621c293a848/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32810223c6b743de889eda96b442f621c293a848/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=32810223c6b743de889eda96b442f621c293a848", "patch": "@@ -901,17 +901,14 @@ pub(crate) unsafe fn codegen(\n                     .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n \n                 let dwo_out = cgcx.output_filenames.temp_path_dwo(module_name);\n-                let dwo_out = match cgcx.split_debuginfo {\n-                    // Don't change how DWARF is emitted in single mode (or when disabled).\n-                    SplitDebuginfo::Off | SplitDebuginfo::Packed => None,\n+                let dwo_out = if cgcx.target_can_use_split_dwarf\n+                    && cgcx.split_debuginfo != SplitDebuginfo::Off\n+                {\n                     // Emit (a subset of the) DWARF into a separate file in split mode.\n-                    SplitDebuginfo::Unpacked => {\n-                        if cgcx.target_can_use_split_dwarf {\n-                            Some(dwo_out.as_path())\n-                        } else {\n-                            None\n-                        }\n-                    }\n+                    Some(dwo_out.as_path())\n+                } else {\n+                    // Don't change how DWARF is emitted in single mode (or when disabled).\n+                    None\n                 };\n \n                 with_codegen(tm, llmod, config.no_builtins, |cpm| {\n@@ -948,7 +945,7 @@ pub(crate) unsafe fn codegen(\n \n     Ok(module.into_compiled_module(\n         config.emit_obj != EmitObj::None,\n-        cgcx.target_can_use_split_dwarf && cgcx.split_debuginfo == SplitDebuginfo::Unpacked,\n+        cgcx.target_can_use_split_dwarf && cgcx.split_debuginfo != SplitDebuginfo::Off,\n         config.emit_bc,\n         &cgcx.output_filenames,\n     ))"}]}