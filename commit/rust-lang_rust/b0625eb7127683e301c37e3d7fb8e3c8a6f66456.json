{"sha": "b0625eb7127683e301c37e3d7fb8e3c8a6f66456", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNjI1ZWI3MTI3NjgzZTMwMWMzN2UzZDdmYjhlM2M4YTZmNjY0NTY=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-01-27T02:42:18Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-01-27T02:46:19Z"}, "message": "boop, ur abstract consts are now expanded", "tree": {"sha": "11c7e297d44fd108507cf641851746451ae05b7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11c7e297d44fd108507cf641851746451ae05b7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0625eb7127683e301c37e3d7fb8e3c8a6f66456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0625eb7127683e301c37e3d7fb8e3c8a6f66456", "html_url": "https://github.com/rust-lang/rust/commit/b0625eb7127683e301c37e3d7fb8e3c8a6f66456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fba12bb1d3877870758a7a53e2fe766bb19bd60", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fba12bb1d3877870758a7a53e2fe766bb19bd60", "html_url": "https://github.com/rust-lang/rust/commit/7fba12bb1d3877870758a7a53e2fe766bb19bd60"}], "stats": {"total": 136, "additions": 132, "deletions": 4}, "files": [{"sha": "272588ad516c2f2e6a8f014719a18da7a70f681d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=b0625eb7127683e301c37e3d7fb8e3c8a6f66456", "patch": "@@ -609,9 +609,27 @@ where\n /// Tries to unify two abstract constants using structural equality.\n pub(super) fn try_unify<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    a: AbstractConst<'tcx>,\n-    b: AbstractConst<'tcx>,\n+    mut a: AbstractConst<'tcx>,\n+    mut b: AbstractConst<'tcx>,\n ) -> bool {\n+    while let Node::Leaf(a_ct) = a.root() {\n+        let a_ct = a_ct.subst(tcx, a.substs);\n+        match AbstractConst::from_const(tcx, a_ct) {\n+            Ok(Some(a_act)) => a = a_act,\n+            Ok(None) => break,\n+            Err(_) => return true,\n+        }\n+    }\n+\n+    while let Node::Leaf(b_ct) = b.root() {\n+        let b_ct = b_ct.subst(tcx, b.substs);\n+        match AbstractConst::from_const(tcx, b_ct) {\n+            Ok(Some(b_act)) => b = b_act,\n+            Ok(None) => break,\n+            Err(_) => return true,\n+        }\n+    }\n+\n     match (a.root(), b.root()) {\n         (Node::Leaf(a_ct), Node::Leaf(b_ct)) => {\n             let a_ct = a_ct.subst(tcx, a.substs);\n@@ -632,8 +650,6 @@ pub(super) fn try_unify<'tcx>(\n                 // we do not want to use `assert_eq!(a(), b())` to infer that `N` and `M` have to be `1`. This\n                 // means that we only allow inference variables if they are equal.\n                 (ty::ConstKind::Infer(a_val), ty::ConstKind::Infer(b_val)) => a_val == b_val,\n-                // We may want to instead recurse into unevaluated constants here. That may require some\n-                // care to prevent infinite recursion, so let's just ignore this for now.\n                 (\n                     ty::ConstKind::Unevaluated(a_def, a_substs, None),\n                     ty::ConstKind::Unevaluated(b_def, b_substs, None),"}, {"sha": "124cd317da56577d95f9475c849526c515a3a87d", "filename": "src/test/ui/const-generics/const_evaluatable_checked/nested-abstract-consts-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-1.rs?ref=b0625eb7127683e301c37e3d7fb8e3c8a6f66456", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+fn callee<const M2: usize>() -> usize\n+where\n+    [u8; M2 + 1]: Sized,\n+{\n+    M2\n+}\n+\n+fn caller<const N1: usize>() -> usize\n+where\n+    [u8; N1 + 1]: Sized,\n+    [u8; (N1 + 1) + 1]: Sized,\n+{\n+    callee::<{ N1 + 1 }>()\n+}\n+\n+fn main() {\n+    assert_eq!(caller::<4>(), 5);\n+}"}, {"sha": "5936662dadb2026fdd8e33e2082e971723f6e1aa", "filename": "src/test/ui/const-generics/const_evaluatable_checked/nested-abstract-consts-2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-2.rs?ref=b0625eb7127683e301c37e3d7fb8e3c8a6f66456", "patch": "@@ -0,0 +1,32 @@\n+// run-pass\n+#![feature(const_evaluatable_checked, const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Generic<const K: u64>;\n+\n+struct ConstU64<const K: u64>;\n+\n+impl<const K: u64> Generic<K>\n+where\n+    ConstU64<{ K - 1 }>: ,\n+{\n+    fn foo(self) -> u64 {\n+        K\n+    }\n+}\n+\n+impl<const K: u64> Generic<K>\n+where\n+    ConstU64<{ K - 1 }>: ,\n+    ConstU64<{ K + 1 }>: ,\n+    ConstU64<{ K + 1 - 1 }>: ,\n+{\n+    fn bar(self) -> u64 {\n+        let x: Generic<{ K + 1 }> = Generic;\n+        x.foo()\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!((Generic::<10>).bar(), 11);\n+}"}, {"sha": "ff0f2efaee9cb430e3fba2cf55bbf2bafcf82740", "filename": "src/test/ui/const-generics/const_evaluatable_checked/nested_uneval_unification-1.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-1.rs?ref=b0625eb7127683e301c37e3d7fb8e3c8a6f66456", "patch": "@@ -0,0 +1,32 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+fn zero_init<const N: usize>() -> Substs1<N>\n+where\n+    [u8; N + 1]: ,\n+{\n+    Substs1([0; N + 1])\n+}\n+struct Substs1<const N: usize>([u8; N + 1])\n+where\n+    [(); N + 1]: ;\n+\n+fn substs2<const M: usize>() -> Substs1<{ M * 2 }>\n+where\n+    [(); { M * 2 } + 1]: ,\n+{\n+    zero_init::<{ M * 2 }>()\n+}\n+\n+fn substs3<const L: usize>() -> Substs1<{ (L - 1) * 2 }>\n+where\n+    [(); (L - 1)]: ,\n+    [(); (L - 1) * 2 + 1]: ,\n+{\n+    substs2::<{ L - 1 }>()\n+}\n+\n+fn main() {\n+    assert_eq!(substs3::<2>().0, [0; 3]);\n+}"}, {"sha": "806f7ba920310a2c0bbb37e0f8fbf760e617069d", "filename": "src/test/ui/const-generics/const_evaluatable_checked/nested_uneval_unification-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0625eb7127683e301c37e3d7fb8e3c8a6f66456/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-2.rs?ref=b0625eb7127683e301c37e3d7fb8e3c8a6f66456", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features, unused_parens, unused_braces)]\n+\n+fn zero_init<const N: usize>() -> Substs1<{ (N) }>\n+where\n+    [u8; { (N) }]: ,\n+{\n+    Substs1([0; { (N) }])\n+}\n+\n+struct Substs1<const N: usize>([u8; { (N) }])\n+where\n+    [(); { (N) }]: ;\n+\n+fn substs2<const M: usize>() -> Substs1<{ (M) }> {\n+    zero_init::<{ (M) }>()\n+}\n+\n+fn substs3<const L: usize>() -> Substs1<{ (L) }> {\n+    substs2::<{ (L) }>()\n+}\n+\n+fn main() {\n+    assert_eq!(substs3::<2>().0, [0; 2]);\n+}"}]}