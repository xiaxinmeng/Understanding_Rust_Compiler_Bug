{"sha": "463c94a780c642c9ceae00bb24a001ab1a16dca2", "node_id": "C_kwDOAAsO6NoAKDQ2M2M5NGE3ODBjNjQyYzljZWFlMDBiYjI0YTAwMWFiMWExNmRjYTI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-20T23:14:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-20T23:14:17Z"}, "message": "Rollup merge of #96236 - Aaron1011:constraint-debug, r=jackh726\n\nAdd an explicit `Span` field to `OutlivesConstraint`\n\nPreviously, we would retrieve the span from the `Body` using\nthe `locations` field. However, we may end up changing the\n`locations` field when moving a constraint from a promoted\nto a different body.\n\nWe now store the original `Span` in a dedication field, so that\nchanges to the `locations` do not affect the quality of our\ndiagnostics.", "tree": {"sha": "9159ce44e02d62deedfb4adbba184209b3150544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9159ce44e02d62deedfb4adbba184209b3150544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/463c94a780c642c9ceae00bb24a001ab1a16dca2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiYJPJCRBK7hj4Ov3rIwAAbXQIAKHbCl0v9LeOD+2gbp3MR98o\nJWIxHE6j/KHG7w0oLbDZeTwp3KUzr5TqR+z1exy2ly/yNq8xWXdReg1sCBPRh7/W\njGLbOv7nAEK0TPpw5rXc70w0iTfH9VUcX2JcsX6RVSdVlADenUhDSaje3Dt4t2RQ\ndLOIx8wXTYg241shkaqopNWW6hqAoRTIBJxPe8nFQZsSMjvx2ou895btaeods3Z5\nY1VYzcTgQ3004JWMWhC2l37qFz/Nj731kKXeKIJRa0J2/O+f7p5GTfC2Ai7uk44Z\nWmCqDtDVYcDzHiCjRpnXl61jJidZKzIRoMKkArC/Xr+g7UcVLp5j2w+t01yX1fM=\n=V70a\n-----END PGP SIGNATURE-----\n", "payload": "tree 9159ce44e02d62deedfb4adbba184209b3150544\nparent e2543d7a4e0bdc2b6b9ddebabf435e65e621cead\nparent 611a06a37526470617f08cdefc56ac4525286eb1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650496457 +0200\ncommitter GitHub <noreply@github.com> 1650496457 +0200\n\nRollup merge of #96236 - Aaron1011:constraint-debug, r=jackh726\n\nAdd an explicit `Span` field to `OutlivesConstraint`\n\nPreviously, we would retrieve the span from the `Body` using\nthe `locations` field. However, we may end up changing the\n`locations` field when moving a constraint from a promoted\nto a different body.\n\nWe now store the original `Span` in a dedication field, so that\nchanges to the `locations` do not affect the quality of our\ndiagnostics.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/463c94a780c642c9ceae00bb24a001ab1a16dca2", "html_url": "https://github.com/rust-lang/rust/commit/463c94a780c642c9ceae00bb24a001ab1a16dca2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/463c94a780c642c9ceae00bb24a001ab1a16dca2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2543d7a4e0bdc2b6b9ddebabf435e65e621cead", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2543d7a4e0bdc2b6b9ddebabf435e65e621cead", "html_url": "https://github.com/rust-lang/rust/commit/e2543d7a4e0bdc2b6b9ddebabf435e65e621cead"}, {"sha": "611a06a37526470617f08cdefc56ac4525286eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/611a06a37526470617f08cdefc56ac4525286eb1", "html_url": "https://github.com/rust-lang/rust/commit/611a06a37526470617f08cdefc56ac4525286eb1"}], "stats": {"total": 122, "additions": 58, "deletions": 64}, "files": [{"sha": "4ceca60e23cee736bcbaebfc71f050ef4fe978e9", "filename": "compiler/rustc_borrowck/src/constraints/graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -156,6 +156,7 @@ impl<'s, 'tcx, D: ConstraintGraphDirecton> Iterator for Edges<'s, 'tcx, D> {\n                 sup: self.static_region,\n                 sub: next_static_idx.into(),\n                 locations: Locations::All(DUMMY_SP),\n+                span: DUMMY_SP,\n                 category: ConstraintCategory::Internal,\n                 variance_info: VarianceDiagInfo::default(),\n             })"}, {"sha": "14f0e5f620aeeab90d15b10d259eb735b64e5eb2", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -2,6 +2,7 @@ use rustc_data_structures::graph::scc::Sccs;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::{RegionVid, VarianceDiagInfo};\n+use rustc_span::Span;\n use std::fmt;\n use std::ops::Index;\n \n@@ -87,6 +88,12 @@ pub struct OutlivesConstraint<'tcx> {\n     /// Where did this constraint arise?\n     pub locations: Locations,\n \n+    /// The `Span` associated with the creation of this constraint.\n+    /// This should be used in preference to obtaining the span from\n+    /// `locations`, since the `locations` may give a poor span\n+    /// in some cases (e.g. converting a constraint from a promoted).\n+    pub span: Span,\n+\n     /// What caused this constraint?\n     pub category: ConstraintCategory,\n "}, {"sha": "fe5193102f958de004aa6b1fbcbd59fa9d00bfab", "filename": "compiler/rustc_borrowck/src/region_infer/dump_mir.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -74,14 +74,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let mut constraints: Vec<_> = self.constraints.outlives().iter().collect();\n         constraints.sort_by_key(|c| (c.sup, c.sub));\n         for constraint in &constraints {\n-            let OutlivesConstraint { sup, sub, locations, category, variance_info: _ } = constraint;\n+            let OutlivesConstraint { sup, sub, locations, category, span, variance_info: _ } =\n+                constraint;\n             let (name, arg) = match locations {\n                 Locations::All(span) => {\n                     (\"All\", tcx.sess.source_map().span_to_embeddable_string(*span))\n                 }\n                 Locations::Single(loc) => (\"Single\", format!(\"{:?}\", loc)),\n             };\n-            with_msg(&format!(\"{:?}: {:?} due to {:?} at {}({})\", sup, sub, category, name, arg))?;\n+            with_msg(&format!(\n+                \"{:?}: {:?} due to {:?} at {}({}) ({:?}\",\n+                sup, sub, category, name, arg, span\n+            ))?;\n         }\n \n         Ok(())"}, {"sha": "cf03f34a4ec5fbb03b2a76e6e8434ea49dbdc832", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -1733,7 +1733,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     crate fn retrieve_closure_constraint_info(\n         &self,\n-        body: &Body<'tcx>,\n+        _body: &Body<'tcx>,\n         constraint: &OutlivesConstraint<'tcx>,\n     ) -> BlameConstraint<'tcx> {\n         let loc = match constraint.locations {\n@@ -1760,7 +1760,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .unwrap_or(BlameConstraint {\n                 category: constraint.category,\n                 from_closure: false,\n-                cause: ObligationCause::dummy_with_span(body.source_info(loc).span),\n+                cause: ObligationCause::dummy_with_span(constraint.span),\n                 variance_info: constraint.variance_info,\n             })\n     }\n@@ -1869,6 +1869,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     sup: r,\n                     sub: constraint.min_choice,\n                     locations: Locations::All(p_c.definition_span),\n+                    span: p_c.definition_span,\n                     category: ConstraintCategory::OpaqueType,\n                     variance_info: ty::VarianceDiagInfo::default(),\n                 };\n@@ -2017,7 +2018,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         category: constraint.category,\n                         from_closure: false,\n                         cause: ObligationCause::new(\n-                            constraint.locations.span(body),\n+                            constraint.span,\n                             CRATE_HIR_ID,\n                             cause_code.clone(),\n                         ),"}, {"sha": "21190a850b7b1eb33d8129fa3c85022ca4c3e112", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{Span, DUMMY_SP};\n \n use crate::{\n     constraints::OutlivesConstraint,\n@@ -26,6 +26,7 @@ crate struct ConstraintConversion<'a, 'tcx> {\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n     locations: Locations,\n+    span: Span,\n     category: ConstraintCategory,\n     constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n }\n@@ -38,6 +39,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n+        span: Span,\n         category: ConstraintCategory,\n         constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n     ) -> Self {\n@@ -49,6 +51,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n             implicit_region_bound,\n             param_env,\n             locations,\n+            span,\n             category,\n             constraints,\n         }\n@@ -153,6 +156,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         self.constraints.outlives_constraints.push(OutlivesConstraint {\n             locations: self.locations,\n             category: self.category,\n+            span: self.span,\n             sub,\n             sup,\n             variance_info: ty::VarianceDiagInfo::default(),"}, {"sha": "f08f2e1b12da6439fc574adcafe272119e481c33", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -316,6 +316,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                 self.implicit_region_bound,\n                 self.param_env,\n                 Locations::All(DUMMY_SP),\n+                DUMMY_SP,\n                 ConstraintCategory::Internal,\n                 &mut self.constraints,\n             )"}, {"sha": "e6f996491a41b7031b2420d00fc2e9b4266c52e8", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -235,6 +235,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 Some(self.implicit_region_bound),\n                 self.param_env,\n                 Locations::All(DUMMY_SP),\n+                DUMMY_SP,\n                 ConstraintCategory::Internal,\n                 &mut self.borrowck_context.constraints,\n             )"}, {"sha": "6dcdd46816e0dbea5a284ec8a88ffa306cbde90a", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -1141,6 +1141,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Some(self.implicit_region_bound),\n             self.param_env,\n             locations,\n+            locations.span(self.body),\n             category,\n             &mut self.borrowck_context.constraints,\n         )\n@@ -2401,6 +2402,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                 sup: ref_region.to_region_vid(),\n                                 sub: borrow_region.to_region_vid(),\n                                 locations: location.to_locations(),\n+                                span: location.to_locations().span(body),\n                                 category,\n                                 variance_info: ty::VarianceDiagInfo::default(),\n                             });"}, {"sha": "f98d2c3128c524ed7f27c20ce13719c7284009db", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -116,6 +116,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n                 sup,\n                 sub,\n                 locations: self.locations,\n+                span: self.locations.span(self.type_checker.body),\n                 category: self.category,\n                 variance_info: info,\n             },"}, {"sha": "8423128123ab76e108fcee5a8866a21ff2d1287d", "filename": "src/test/mir-opt/nll/named_lifetimes_basic.use_x.nll.0.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -25,14 +25,14 @@\n | '_#2r live at {bb0[0..=1]}\n | '_#3r live at {bb0[0..=1]}\n | '_#4r live at {bb0[0..=1]}\n-| '_#1r: '_#6r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27)\n-| '_#1r: '_#8r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55)\n-| '_#2r: '_#7r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43)\n-| '_#3r: '_#9r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67)\n-| '_#6r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27)\n-| '_#7r: '_#2r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43)\n-| '_#8r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55)\n-| '_#9r: '_#3r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67)\n+| '_#1r: '_#6r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27) ($DIR/named-lifetimes-basic.rs:12:26: 12:27 (#0)\n+| '_#1r: '_#8r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55) ($DIR/named-lifetimes-basic.rs:12:54: 12:55 (#0)\n+| '_#2r: '_#7r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43) ($DIR/named-lifetimes-basic.rs:12:42: 12:43 (#0)\n+| '_#3r: '_#9r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67) ($DIR/named-lifetimes-basic.rs:12:66: 12:67 (#0)\n+| '_#6r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27) ($DIR/named-lifetimes-basic.rs:12:26: 12:27 (#0)\n+| '_#7r: '_#2r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43) ($DIR/named-lifetimes-basic.rs:12:42: 12:43 (#0)\n+| '_#8r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55) ($DIR/named-lifetimes-basic.rs:12:54: 12:55 (#0)\n+| '_#9r: '_#3r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67) ($DIR/named-lifetimes-basic.rs:12:66: 12:67 (#0)\n |\n fn use_x(_1: &'_#6r mut i32, _2: &'_#7r u32, _3: &'_#8r u32, _4: &'_#9r u32) -> bool {\n     debug w => _1;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:12:26: 12:27"}, {"sha": "f79e2705ad29cce82115f971e7ec67ee98567dff", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -18,8 +18,8 @@\n | '_#3r live at {bb1[0]}\n | '_#4r live at {bb1[1..=3]}\n | '_#5r live at {bb1[4..=7], bb2[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb1[0])\n-| '_#4r: '_#5r due to Assignment at Single(bb1[3])\n+| '_#3r: '_#4r due to Assignment at Single(bb1[0]) ($DIR/region-subtyping-basic.rs:18:13: 18:18 (#0)\n+| '_#4r: '_#5r due to Assignment at Single(bb1[3]) ($DIR/region-subtyping-basic.rs:19:13: 19:14 (#0)\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11"}, {"sha": "162cacef8a54afab04bf2bc554858e6cbb6fb96f", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -18,8 +18,8 @@\n | '_#3r live at {bb1[0]}\n | '_#4r live at {bb1[1..=3]}\n | '_#5r live at {bb1[4..=7], bb2[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb1[0])\n-| '_#4r: '_#5r due to Assignment at Single(bb1[3])\n+| '_#3r: '_#4r due to Assignment at Single(bb1[0]) ($DIR/region-subtyping-basic.rs:18:13: 18:18 (#0)\n+| '_#4r: '_#5r due to Assignment at Single(bb1[3]) ($DIR/region-subtyping-basic.rs:19:13: 19:14 (#0)\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11"}, {"sha": "b383c5ec9dc60a173fc9a8391828a6467faa3d86", "filename": "src/test/mir-opt/storage_ranges.main.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -16,7 +16,7 @@\n | '_#1r live at {bb0[0..=22]}\n | '_#3r live at {bb0[10]}\n | '_#4r live at {bb0[11]}\n-| '_#3r: '_#4r due to Assignment at Single(bb0[10])\n+| '_#3r: '_#4r due to Assignment at Single(bb0[10]) ($DIR/storage_ranges.rs:6:17: 6:25 (#0)\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/storage_ranges.rs:3:11: 3:11"}, {"sha": "364c8c8f7069e9e7a98b621ef5719bccde8c45d1", "filename": "src/test/ui/rfc1623.base.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fui%2Frfc1623.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fui%2Frfc1623.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.base.stderr?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:36:8\n+  --> $DIR/rfc1623.rs:32:8\n    |\n LL |     f: &id,\n    |        ^^^ implementation of `FnOnce` is not general enough"}, {"sha": "2eff4708547d80acac58f3492a104d421b1f7818", "filename": "src/test/ui/rfc1623.nll.stderr", "status": "modified", "additions": 12, "deletions": 40, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.nll.stderr?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -1,63 +1,35 @@\n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:29:35\n+  --> $DIR/rfc1623.rs:32:8\n    |\n-LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n-   |  ___________________________________^\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | };\n-   | |_^ one type is more general than the other\n+LL |     f: &id,\n+   |        ^^^ one type is more general than the other\n    |\n    = note: expected type `for<'a, 'b> Fn<(&'a Foo<'b>,)>`\n               found type `Fn<(&Foo<'_>,)>`\n \n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:29:35\n+  --> $DIR/rfc1623.rs:32:8\n    |\n-LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n-   |  ___________________________________^\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | };\n-   | |_^ one type is more general than the other\n+LL |     f: &id,\n+   |        ^^^ one type is more general than the other\n    |\n    = note: expected type `for<'a, 'b> Fn<(&'a Foo<'b>,)>`\n               found type `Fn<(&Foo<'_>,)>`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:29:35\n+  --> $DIR/rfc1623.rs:32:8\n    |\n-LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n-   |  ___________________________________^\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | };\n-   | |_^ implementation of `FnOnce` is not general enough\n+LL |     f: &id,\n+   |        ^^^ implementation of `FnOnce` is not general enough\n    |\n    = note: `fn(&'2 Foo<'_>) -> &'2 Foo<'_> {id::<&'2 Foo<'_>>}` must implement `FnOnce<(&'1 Foo<'b>,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:29:35\n+  --> $DIR/rfc1623.rs:32:8\n    |\n-LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n-   |  ___________________________________^\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | };\n-   | |_^ implementation of `FnOnce` is not general enough\n+LL |     f: &id,\n+   |        ^^^ implementation of `FnOnce` is not general enough\n    |\n    = note: `fn(&Foo<'2>) -> &Foo<'2> {id::<&Foo<'2>>}` must implement `FnOnce<(&'a Foo<'1>,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&Foo<'2>,)>`, for some specific lifetime `'2`"}, {"sha": "443da0aa955f982755b4300fc2732719984713ab", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463c94a780c642c9ceae00bb24a001ab1a16dca2/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=463c94a780c642c9ceae00bb24a001ab1a16dca2", "patch": "@@ -27,14 +27,14 @@ fn id<T>(t: T) -> T {\n }\n \n static SOME_STRUCT: &SomeStruct = &SomeStruct {\n-    //[nll]~^ ERROR mismatched types\n-    //[nll]~| ERROR mismatched types\n-    //[nll]~| ERROR implementation of `FnOnce` is not general enough\n-    //[nll]~| ERROR implementation of `FnOnce` is not general enough\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n     //[base]~^ ERROR implementation of `FnOnce` is not general enough\n+    //[nll]~^^ ERROR mismatched types\n+    //[nll]~| ERROR mismatched types\n+    //[nll]~| ERROR implementation of `FnOnce` is not general enough\n+    //[nll]~| ERROR implementation of `FnOnce` is not general enough\n };\n \n // very simple test for a 'static static with default lifetime"}]}