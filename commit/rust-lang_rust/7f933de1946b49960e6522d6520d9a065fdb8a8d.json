{"sha": "7f933de1946b49960e6522d6520d9a065fdb8a8d", "node_id": "C_kwDOAAsO6NoAKDdmOTMzZGUxOTQ2YjQ5OTYwZTY1MjJkNjUyMGQ5YTA2NWZkYjhhOGQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-17T14:49:45Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-28T16:59:11Z"}, "message": "Merge two duplicates of the same logic into a common function", "tree": {"sha": "30f79e91fd1e34ff6b322bbefc887edbb1579ad0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30f79e91fd1e34ff6b322bbefc887edbb1579ad0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f933de1946b49960e6522d6520d9a065fdb8a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f933de1946b49960e6522d6520d9a065fdb8a8d", "html_url": "https://github.com/rust-lang/rust/commit/7f933de1946b49960e6522d6520d9a065fdb8a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f933de1946b49960e6522d6520d9a065fdb8a8d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bf63a50115efad7a474e50b7a4330b506da2578", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf63a50115efad7a474e50b7a4330b506da2578", "html_url": "https://github.com/rust-lang/rust/commit/2bf63a50115efad7a474e50b7a4330b506da2578"}], "stats": {"total": 132, "additions": 56, "deletions": 76}, "files": [{"sha": "5920d12a93c8e1da1d7c6704c11e3705d0605c18", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7f933de1946b49960e6522d6520d9a065fdb8a8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f933de1946b49960e6522d6520d9a065fdb8a8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=7f933de1946b49960e6522d6520d9a065fdb8a8d", "patch": "@@ -1,7 +1,7 @@\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits;\n use hir::def_id::{DefId, LocalDefId};\n-use hir::OpaqueTyOrigin;\n+use hir::{HirId, OpaqueTyOrigin};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n@@ -21,6 +21,7 @@ mod table;\n \n pub use table::{OpaqueTypeStorage, OpaqueTypeTable};\n \n+use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::InferResult;\n \n /// Information about the opaque types whose values we\n@@ -38,6 +39,48 @@ pub struct OpaqueTypeDecl<'tcx> {\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+    pub fn replace_opaque_types_with_inference_vars(\n+        &self,\n+        ty: Ty<'tcx>,\n+        body_id: HirId,\n+        span: Span,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> InferOk<'tcx, Ty<'tcx>> {\n+        let mut obligations = vec![];\n+        let value = ty.fold_with(&mut ty::fold::BottomUpFolder {\n+            tcx: self.tcx,\n+            lt_op: |lt| lt,\n+            ct_op: |ct| ct,\n+            ty_op: |ty| match *ty.kind() {\n+                // Closures can't create hidden types for opaque types of their parent, as they\n+                // do not have all the outlives information available. Also `type_of` looks for\n+                // hidden types in the owner (so the closure's parent), so it would not find these\n+                // definitions.\n+                ty::Opaque(def_id, _substs)\n+                    if matches!(\n+                        self.opaque_type_origin(def_id, span),\n+                        Some(OpaqueTyOrigin::FnReturn(..))\n+                    ) =>\n+                {\n+                    let span = if span.is_dummy() { self.tcx.def_span(def_id) } else { span };\n+                    let cause = ObligationCause::misc(span, body_id);\n+                    let ty_var = self.next_ty_var(TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::TypeInference,\n+                        span: cause.span,\n+                    });\n+                    obligations.extend(\n+                        self.handle_opaque_type(ty, ty_var, true, &cause, param_env)\n+                            .unwrap()\n+                            .obligations,\n+                    );\n+                    ty_var\n+                }\n+                _ => ty,\n+            },\n+        });\n+        InferOk { value, obligations }\n+    }\n+\n     pub fn handle_opaque_type(\n         &self,\n         a: Ty<'tcx>,"}, {"sha": "5362ca8d719781e66c065a0c3196f93bf90b7b01", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 8, "deletions": 42, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7f933de1946b49960e6522d6520d9a065fdb8a8d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f933de1946b49960e6522d6520d9a065fdb8a8d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=7f933de1946b49960e6522d6520d9a065fdb8a8d", "patch": "@@ -3,7 +3,6 @@ use super::compare_method::check_type_bounds;\n use super::compare_method::{compare_const_impl, compare_impl_method, compare_ty_impl};\n use super::*;\n \n-use hir::OpaqueTyOrigin;\n use rustc_attr as attr;\n use rustc_errors::{Applicability, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -13,9 +12,8 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{def::Res, ItemKind, Node, PathSegment};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n-use rustc_infer::traits::ObligationCause;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::fold::{BottomUpFolder, TypeFoldable};\n+use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n@@ -97,45 +95,13 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     let declared_ret_ty = fn_sig.output();\n \n-    let ret_ty = declared_ret_ty.fold_with(&mut BottomUpFolder {\n-        tcx: fcx.tcx,\n-        ty_op: |ty| match *ty.kind() {\n-            ty::Opaque(def_id, substs) => {\n-                let span = tcx.def_span(def_id);\n-                if let Some(origin @ OpaqueTyOrigin::FnReturn(_)) =\n-                    fcx.infcx.opaque_type_origin(def_id, span)\n-                {\n-                    let hidden_ty = fcx.infcx.next_ty_var(TypeVariableOrigin {\n-                        kind: TypeVariableOriginKind::MiscVariable,\n-                        span: span,\n-                    });\n-\n-                    let cause = ObligationCause::misc(span, body.value.hir_id);\n-                    match fcx.infcx.register_hidden_type(\n-                        ty::OpaqueTypeKey { def_id, substs },\n-                        cause.clone(),\n-                        param_env,\n-                        hidden_ty,\n-                        origin,\n-                    ) {\n-                        Ok(infer_ok) => {\n-                            fcx.register_infer_ok_obligations(infer_ok);\n-                            hidden_ty\n-                        }\n-                        Err(err) => {\n-                            fcx.report_mismatched_types(&cause, ty, hidden_ty, err).emit();\n-                            tcx.ty_error()\n-                        }\n-                    }\n-                } else {\n-                    ty\n-                }\n-            }\n-            _ => ty,\n-        },\n-        lt_op: |lt| lt,\n-        ct_op: |ct| ct,\n-    });\n+    let ret_ty =\n+        fcx.register_infer_ok_obligations(fcx.infcx.replace_opaque_types_with_inference_vars(\n+            declared_ret_ty,\n+            body.value.hir_id,\n+            DUMMY_SP,\n+            param_env,\n+        ));\n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n     fcx.ret_type_span = Some(decl.output.span());\n "}, {"sha": "2f5f804c56f78dee26659656d3f26753f83fe5ce", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7f933de1946b49960e6522d6520d9a065fdb8a8d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f933de1946b49960e6522d6520d9a065fdb8a8d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=7f933de1946b49960e6522d6520d9a065fdb8a8d", "patch": "@@ -4,14 +4,12 @@ use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n use crate::astconv::AstConv;\n use crate::rustc_middle::ty::subst::Subst;\n-use hir::OpaqueTyOrigin;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_infer::infer::{InferOk, InferResult};\n-use rustc_infer::traits::ObligationCause;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Ty};\n@@ -641,37 +639,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn hide_parent_opaque_types(&self, ty: Ty<'tcx>, span: Span, body_id: hir::HirId) -> Ty<'tcx> {\n-        ty.fold_with(&mut ty::fold::BottomUpFolder {\n-            tcx: self.infcx.tcx,\n-            lt_op: |lt| lt,\n-            ct_op: |ct| ct,\n-            ty_op: |ty| match *ty.kind() {\n-                // Closures can't create hidden types for opaque types of their parent, as they\n-                // do not have all the outlives information available. Also `type_of` looks for\n-                // hidden types in the owner (so the closure's parent), so it would not find these\n-                // definitions.\n-                ty::Opaque(def_id, _substs)\n-                    if matches!(\n-                        self.infcx.opaque_type_origin(def_id, DUMMY_SP),\n-                        Some(OpaqueTyOrigin::FnReturn(..))\n-                    ) =>\n-                {\n-                    let ty_var = self.next_ty_var(TypeVariableOrigin {\n-                        kind: TypeVariableOriginKind::TypeInference,\n-                        span,\n-                    });\n-                    let cause = ObligationCause::misc(span, body_id);\n-                    self.register_predicates(\n-                        self.infcx\n-                            .handle_opaque_type(ty, ty_var, true, &cause, self.param_env)\n-                            .unwrap()\n-                            .obligations,\n-                    );\n-                    ty_var\n-                }\n-                _ => ty,\n-            },\n-        })\n+        let InferOk { value, obligations } =\n+            self.replace_opaque_types_with_inference_vars(ty, body_id, span, self.param_env);\n+        self.register_predicates(obligations);\n+        value\n     }\n \n     /// Invoked when we are translating the generator that results"}]}