{"sha": "eb48e9771a924080a2a7a87b403278e61f3061ea", "node_id": "C_kwDOAAsO6NoAKGViNDhlOTc3MWE5MjQwODBhMmE3YTg3YjQwMzI3OGU2MWYzMDYxZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T01:12:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T01:12:24Z"}, "message": "Auto merge of #109876 - jsha:uniquify-intra-doc, r=notriddle\n\nrustdoc: make intra-doc link pass non-quadratic for repeated links\n\nIn the collect_intra_doc_links pass, links to a given item that occurred repeatedly were getting inserted into a `Vec<clean::ItemLink>` repeatedly. This led to n^2 behavior (where n = the number of pages generated), particularly for the intra-doc link on the `Into<U> for T where U: From<T>` blanket implementation, since that link appears on every single struct page.\n\nFixes #109851", "tree": {"sha": "afab13e6507c903c4cd10a738a2c606923ae83ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afab13e6507c903c4cd10a738a2c606923ae83ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb48e9771a924080a2a7a87b403278e61f3061ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb48e9771a924080a2a7a87b403278e61f3061ea", "html_url": "https://github.com/rust-lang/rust/commit/eb48e9771a924080a2a7a87b403278e61f3061ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb48e9771a924080a2a7a87b403278e61f3061ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7ada217c8ac63367b184afd9fffaff30f6ed44", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7ada217c8ac63367b184afd9fffaff30f6ed44", "html_url": "https://github.com/rust-lang/rust/commit/cf7ada217c8ac63367b184afd9fffaff30f6ed44"}, {"sha": "d9edb05d442fbe5359baf576ba737c5c3dfa84cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9edb05d442fbe5359baf576ba737c5c3dfa84cc", "html_url": "https://github.com/rust-lang/rust/commit/d9edb05d442fbe5359baf576ba737c5c3dfa84cc"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "a37d4f316439a2b7ff85bb80e00fda4dfb945485", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb48e9771a924080a2a7a87b403278e61f3061ea/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb48e9771a924080a2a7a87b403278e61f3061ea/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=eb48e9771a924080a2a7a87b403278e61f3061ea", "patch": "@@ -452,10 +452,12 @@ impl Item {\n     pub(crate) fn links(&self, cx: &Context<'_>) -> Vec<RenderedLink> {\n         use crate::html::format::{href, link_tooltip};\n \n-        cx.cache()\n+        let Some(links) = cx.cache()\n             .intra_doc_links\n-            .get(&self.item_id)\n-            .map_or(&[][..], |v| v.as_slice())\n+            .get(&self.item_id) else {\n+                return vec![]\n+            };\n+        links\n             .iter()\n             .filter_map(|ItemLink { link: s, link_text, page_id: id, ref fragment }| {\n                 debug!(?id);\n@@ -483,10 +485,12 @@ impl Item {\n     /// the link text, but does need to know which `[]`-bracketed names\n     /// are actually links.\n     pub(crate) fn link_names(&self, cache: &Cache) -> Vec<RenderedLink> {\n-        cache\n+        let Some(links) = cache\n             .intra_doc_links\n-            .get(&self.item_id)\n-            .map_or(&[][..], |v| v.as_slice())\n+            .get(&self.item_id) else {\n+                return vec![];\n+            };\n+        links\n             .iter()\n             .map(|ItemLink { link: s, link_text, .. }| RenderedLink {\n                 original_text: s.clone(),\n@@ -1006,7 +1010,7 @@ pub(crate) fn collapse_doc_fragments(doc_strings: &[DocFragment]) -> String {\n /// A link that has not yet been rendered.\n ///\n /// This link will be turned into a rendered link by [`Item::links`].\n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub(crate) struct ItemLink {\n     /// The original link written in the markdown\n     pub(crate) link: Box<str>,"}, {"sha": "c0329182032acb2e73275c48b0feeb4d97ab58c5", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb48e9771a924080a2a7a87b403278e61f3061ea/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb48e9771a924080a2a7a87b403278e61f3061ea/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=eb48e9771a924080a2a7a87b403278e61f3061ea", "patch": "@@ -1,6 +1,6 @@\n use std::mem;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::Symbol;\n@@ -118,7 +118,7 @@ pub(crate) struct Cache {\n     /// All intra-doc links resolved so far.\n     ///\n     /// Links are indexed by the DefId of the item they document.\n-    pub(crate) intra_doc_links: FxHashMap<ItemId, Vec<clean::ItemLink>>,\n+    pub(crate) intra_doc_links: FxHashMap<ItemId, FxIndexSet<clean::ItemLink>>,\n     /// Cfg that have been hidden via #![doc(cfg_hide(...))]\n     pub(crate) hidden_cfg: FxHashSet<clean::cfg::Cfg>,\n }"}, {"sha": "2cd9c8a878187246ff2b7bda75b83d9875bd2273", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb48e9771a924080a2a7a87b403278e61f3061ea/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb48e9771a924080a2a7a87b403278e61f3061ea/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=eb48e9771a924080a2a7a87b403278e61f3061ea", "patch": "@@ -978,7 +978,7 @@ impl LinkCollector<'_, '_> {\n             for md_link in preprocessed_markdown_links(&doc) {\n                 let link = self.resolve_link(item, item_id, module_id, &doc, &md_link);\n                 if let Some(link) = link {\n-                    self.cx.cache.intra_doc_links.entry(item.item_id).or_default().push(link);\n+                    self.cx.cache.intra_doc_links.entry(item.item_id).or_default().insert(link);\n                 }\n             }\n         }"}]}