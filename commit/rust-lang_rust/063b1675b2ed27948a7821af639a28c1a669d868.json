{"sha": "063b1675b2ed27948a7821af639a28c1a669d868", "node_id": "C_kwDOAAsO6NoAKDA2M2IxNjc1YjJlZDI3OTQ4YTc4MjFhZjYzOWEyOGMxYTY2OWQ4Njg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T12:07:09Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T09:51:03Z"}, "message": "Clarify what \"this\" means", "tree": {"sha": "1756aabf58d215c32e3cf273899b8d029bbb48ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1756aabf58d215c32e3cf273899b8d029bbb48ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/063b1675b2ed27948a7821af639a28c1a669d868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/063b1675b2ed27948a7821af639a28c1a669d868", "html_url": "https://github.com/rust-lang/rust/commit/063b1675b2ed27948a7821af639a28c1a669d868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/063b1675b2ed27948a7821af639a28c1a669d868/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "717294fa04dacaa82e8efbad9021c8970bca4bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/717294fa04dacaa82e8efbad9021c8970bca4bb0", "html_url": "https://github.com/rust-lang/rust/commit/717294fa04dacaa82e8efbad9021c8970bca4bb0"}], "stats": {"total": 101, "additions": 51, "deletions": 50}, "files": [{"sha": "1e51ab14f25eff700b52448772ddf9819c616ab8", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -1069,7 +1069,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         );\n                     }\n                 }\n-                CallKind::Normal { self_arg, desugaring, is_option_or_result } => {\n+                CallKind::Normal { self_arg, desugaring, method_did } => {\n                     let self_arg = self_arg.unwrap();\n                     if let Some((CallDesugaringKind::ForLoopIntoIter, _)) = desugaring {\n                         let ty = moved_place.ty(self.body, self.infcx.tcx).ty;\n@@ -1139,14 +1139,27 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             ),\n                         );\n                     }\n+                    let tcx = self.infcx.tcx;\n                     // Avoid pointing to the same function in multiple different\n                     // error messages.\n                     if span != DUMMY_SP && self.fn_self_span_reported.insert(self_arg.span) {\n+                        let func = tcx.def_path_str(method_did);\n                         err.span_note(\n                             self_arg.span,\n-                            &format!(\"this function takes ownership of the receiver `self`, which moves {}\", place_name)\n+                            &format!(\"`{func}` takes ownership of the receiver `self`, which moves {place_name}\")\n                         );\n                     }\n+                    let parent_did = tcx.parent(method_did);\n+                    let parent_self_ty = (tcx.def_kind(parent_did)\n+                        == rustc_hir::def::DefKind::Impl)\n+                        .then_some(parent_did)\n+                        .and_then(|did| match tcx.type_of(did).kind() {\n+                            ty::Adt(def, ..) => Some(def.did()),\n+                            _ => None,\n+                        });\n+                    let is_option_or_result = parent_self_ty.map_or(false, |def_id| {\n+                        matches!(tcx.get_diagnostic_name(def_id), Some(sym::Option | sym::Result))\n+                    });\n                     if is_option_or_result && maybe_reinitialized_locations_is_empty {\n                         err.span_label(\n                             var_span,"}, {"sha": "38d9b044981cd723687c8962d06345fc226aa39a", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -5,7 +5,7 @@\n use rustc_hir::def_id::DefId;\n use rustc_hir::{lang_items, LangItem};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AssocItemContainer, DefIdTree, Instance, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{AssocItemContainer, Instance, ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, DesugaringKind, Span};\n \n@@ -39,9 +39,7 @@ pub enum CallKind<'tcx> {\n     Normal {\n         self_arg: Option<Ident>,\n         desugaring: Option<(CallDesugaringKind, Ty<'tcx>)>,\n-        /// Whether the self type of the method call has an `.as_ref()` method.\n-        /// Used for better diagnostics.\n-        is_option_or_result: bool,\n+        method_did: DefId,\n     },\n     /// A call to `Fn(..)::call(..)`, desugared from `my_closure(a, b, c)`\n     FnCall { fn_trait_id: DefId, self_ty: Ty<'tcx> },\n@@ -133,16 +131,6 @@ pub fn call_kind<'tcx>(\n         } else {\n             None\n         };\n-        let parent_did = tcx.parent(method_did);\n-        let parent_self_ty = (tcx.def_kind(parent_did) == rustc_hir::def::DefKind::Impl)\n-            .then_some(parent_did)\n-            .and_then(|did| match tcx.type_of(did).kind() {\n-                ty::Adt(def, ..) => Some(def.did()),\n-                _ => None,\n-            });\n-        let is_option_or_result = parent_self_ty.map_or(false, |def_id| {\n-            matches!(tcx.get_diagnostic_name(def_id), Some(sym::Option | sym::Result))\n-        });\n-        CallKind::Normal { self_arg, desugaring, is_option_or_result }\n+        CallKind::Normal { self_arg, desugaring, method_did }\n     })\n }"}, {"sha": "ecf5382e863e00336d9ec449722a272f8044d628", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n    |              |                   value moved due to this method call\n    |              move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves value\n+note: `into_iter` takes ownership of the receiver `self`, which moves value\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n \n error: aborting due to previous error"}, {"sha": "a585bff0c654395b8c208ca5c29ca9f5f7a70d2b", "filename": "src/test/ui/borrowck/issue-83760.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -27,7 +27,7 @@ LL |         foo = Some(Struct);\n LL |     let _y = foo;\n    |              ^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `foo`\n+note: `Option::<T>::unwrap` takes ownership of the receiver `self`, which moves `foo`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0382]: use of moved value: `foo`\n@@ -52,7 +52,7 @@ LL |         foo = Some(Struct);\n LL |     } else if true {\n LL |         foo = Some(Struct);\n    |         ^^^^^^^^^^^^^^^^^^\n-note: this function takes ownership of the receiver `self`, which moves `foo`\n+note: `Option::<T>::unwrap` takes ownership of the receiver `self`, which moves `foo`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error: aborting due to 3 previous errors"}, {"sha": "ecd916a59fcbd725da4a3d607e951a71377ff885", "filename": "src/test/ui/borrowck/reborrow-sugg-move-then-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -9,7 +9,7 @@ LL |\n LL |     fill_segment(state);\n    |                  ^^^^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `state`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `state`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider creating a fresh reborrow of `state` here\n    |"}, {"sha": "4621d8793514ac8dd2cf858dd6e1d424cd6c9eb8", "filename": "src/test/ui/borrowck/suggest-as-ref-on-mut-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -8,7 +8,7 @@ LL |     cb.map(|cb| cb());\n    |     help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |     move occurs because `*cb` has type `Option<&mut dyn FnMut()>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves `*cb`\n+note: `Option::<T>::map` takes ownership of the receiver `self`, which moves `*cb`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0596]: cannot borrow `*cb` as mutable, as it is behind a `&` reference"}, {"sha": "b1367c652188bd8f4bafd95c2addf26ea843e94b", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -10,7 +10,7 @@ LL |         y.into_iter();\n    |         |\n    |         move occurs because `y` has type `Vec<String>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves `y`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `y`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n \n error: aborting due to previous error"}, {"sha": "e0e369124a4be83557473cfd87160a5837647408", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -9,7 +9,7 @@ LL |     {\n LL |         println!(\"{:?}\", some_vec);\n    |                          ^^^^^^^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `some_vec`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `some_vec`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider cloning the value if the performance cost is acceptable"}, {"sha": "03630f38987e23cc95304050b8b4b7105373c89a", "filename": "src/test/ui/error-codes/E0507.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -7,7 +7,7 @@ LL |     x.borrow().nothing_is_true();\n    |     |          value moved due to this method call\n    |     move occurs because value has type `TheDarkKnight`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves value\n+note: `TheDarkKnight::nothing_is_true` takes ownership of the receiver `self`, which moves value\n   --> $DIR/E0507.rs:6:24\n    |\n LL |     fn nothing_is_true(self) {}"}, {"sha": "f2bf22227dbe47d787a16de1b781b7fd74927122", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -13,7 +13,7 @@ LL |         };\n LL |         x.zero()\n    |         ^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `x`\n+note: `Foo::zero` takes ownership of the receiver `self`, which moves `x`\n   --> $DIR/issue-34721.rs:4:13\n    |\n LL |     fn zero(self) -> Self;"}, {"sha": "3aaf5fb3f3e3a56ad455db915356733b45482d61", "filename": "src/test/ui/issues/issue-61108.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -9,7 +9,7 @@ LL |     for l in bad_letters {\n LL |     bad_letters.push('s');\n    |     ^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `bad_letters`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `bad_letters`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider iterating over a slice of the `Vec<char>`'s content to avoid moving into the `for` loop\n    |"}, {"sha": "386ac794d7db32f77e643edb15d9e599a69d6cad", "filename": "src/test/ui/issues/issue-64559.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -10,7 +10,7 @@ LL |     let _closure = || orig;\n    |                    |\n    |                    value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `orig`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `orig`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider iterating over a slice of the `Vec<bool>`'s content to avoid moving into the `for` loop\n    |"}, {"sha": "572414df2bf9d6af0b37498610f95f9529cf0060", "filename": "src/test/ui/issues/issue-83924.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -10,7 +10,7 @@ LL |     for n in v {\n LL |     for n in v {\n    |              ^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `v`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `v`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider creating a fresh reborrow of `v` here\n    |"}, {"sha": "e6a60d7bc4072378f2cf91a1e01e95f258d02a55", "filename": "src/test/ui/loops/issue-82916.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Floops%2Fissue-82916.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Floops%2Fissue-82916.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Fissue-82916.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -9,7 +9,7 @@ LL |     for y in x {\n LL |     let z = x;\n    |             ^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `x`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider iterating over a slice of the `Vec<S>`'s content to avoid moving into the `for` loop\n    |"}, {"sha": "dda07934e3a0ccf0e0f520046e2c3cb02dd67f92", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -6,7 +6,7 @@ LL |     val.0.into_iter().next();\n LL |     val.0;\n    |     ^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `val.0`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `val.0`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: move occurs because `val.0` has type `Vec<bool>`, which does not implement the `Copy` trait\n \n@@ -20,7 +20,7 @@ LL |     foo.use_self();\n LL |     foo;\n    |     ^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `foo`\n+note: `Foo::use_self` takes ownership of the receiver `self`, which moves `foo`\n   --> $DIR/move-fn-self-receiver.rs:13:17\n    |\n LL |     fn use_self(self) {}\n@@ -46,7 +46,7 @@ LL |     boxed_foo.use_box_self();\n LL |     boxed_foo;\n    |     ^^^^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `boxed_foo`\n+note: `Foo::use_box_self` takes ownership of the receiver `self`, which moves `boxed_foo`\n   --> $DIR/move-fn-self-receiver.rs:14:21\n    |\n LL |     fn use_box_self(self: Box<Self>) {}\n@@ -62,7 +62,7 @@ LL |     pin_box_foo.use_pin_box_self();\n LL |     pin_box_foo;\n    |     ^^^^^^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `pin_box_foo`\n+note: `Foo::use_pin_box_self` takes ownership of the receiver `self`, which moves `pin_box_foo`\n   --> $DIR/move-fn-self-receiver.rs:15:25\n    |\n LL |     fn use_pin_box_self(self: Pin<Box<Self>>) {}\n@@ -88,7 +88,7 @@ LL |     rc_foo.use_rc_self();\n LL |     rc_foo;\n    |     ^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `rc_foo`\n+note: `Foo::use_rc_self` takes ownership of the receiver `self`, which moves `rc_foo`\n   --> $DIR/move-fn-self-receiver.rs:16:20\n    |\n LL |     fn use_rc_self(self: Rc<Self>) {}\n@@ -154,7 +154,7 @@ LL |     for _val in container.custom_into_iter() {}\n LL |     container;\n    |     ^^^^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `container`\n+note: `Container::custom_into_iter` takes ownership of the receiver `self`, which moves `container`\n   --> $DIR/move-fn-self-receiver.rs:23:25\n    |\n LL |     fn custom_into_iter(self) -> impl Iterator<Item = bool> {"}, {"sha": "0b1a623a01345d75294e7bbe31faf28963421782", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -8,7 +8,7 @@ LL |     consume(x.into_iter().next().unwrap());\n LL |     touch(&x[0]);\n    |            ^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `x`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider cloning the value if the performance cost is acceptable\n    |"}, {"sha": "ae76889f104c89a80910e73028a8675818094e8d", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -160,7 +160,7 @@ LL |     let _y = x.into_iter().next().unwrap();\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `x`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider cloning the value if the performance cost is acceptable\n    |\n@@ -177,7 +177,7 @@ LL |     let _y = [x.into_iter().next().unwrap(); 1];\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `x`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider cloning the value if the performance cost is acceptable\n    |"}, {"sha": "e2129b4502abea13774d1917bbf23c3eedbb8bee", "filename": "src/test/ui/suggestions/as-ref-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -10,7 +10,7 @@ LL |     let _x: Option<Struct> = foo.map(|s| bar(&s));\n LL |     let _y = foo;\n    |              ^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `foo`\n+note: `Option::<T>::map` takes ownership of the receiver `self`, which moves `foo`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error: aborting due to previous error"}, {"sha": "cbdb94877bdb7fbf897d0020c928bc6d718646a8", "filename": "src/test/ui/suggestions/borrow-for-loop-head.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -16,7 +16,7 @@ LL |     for i in &a {\n LL |         for j in a {\n    |                  ^ `a` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\n-note: this function takes ownership of the receiver `self`, which moves `a`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `a`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider iterating over a slice of the `Vec<i32>`'s content to avoid moving into the `for` loop\n    |"}, {"sha": "c5b81e6b87174d209ce65331def3447c7f8df707", "filename": "src/test/ui/suggestions/for-i-in-vec.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -7,7 +7,7 @@ LL |         for _ in self.v {\n    |                  `self.v` moved due to this implicit call to `.into_iter()`\n    |                  move occurs because `self.v` has type `Vec<u32>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves `self.v`\n+note: `into_iter` takes ownership of the receiver `self`, which moves `self.v`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider iterating over a slice of the `Vec<u32>`'s content to avoid moving into the `for` loop\n    |\n@@ -37,7 +37,7 @@ LL |     for loader in *LOADERS {\n    |                   value moved due to this implicit call to `.into_iter()`\n    |                   move occurs because value has type `Vec<&u8>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves value\n+note: `into_iter` takes ownership of the receiver `self`, which moves value\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n help: consider iterating over a slice of the `Vec<&u8>`'s content to avoid moving into the `for` loop\n    |"}, {"sha": "3e0271d02572b98354603945119ef6803b174d64", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -7,7 +7,7 @@ LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |                    move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves `selection.1`\n+note: `Option::<T>::unwrap` takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n@@ -19,7 +19,7 @@ LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |                    move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n    |\n-note: this function takes ownership of the receiver `self`, which moves `selection.1`\n+note: `Result::<T, E>::unwrap` takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n \n error: aborting due to 2 previous errors"}, {"sha": "9e3c345dd80011636573cd4f6601187545fdf9b1", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -59,7 +59,7 @@ LL |         y.foo();\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `y`\n+note: `Foo::foo` takes ownership of the receiver `self`, which moves `y`\n   --> $DIR/borrow-after-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;"}, {"sha": "49b906bbe02b725c0f9d1e806a470949c55d591a", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -55,7 +55,7 @@ LL |         y.foo();\n LL |         y.foo();\n    |         ^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `y`\n+note: `Foo::foo` takes ownership of the receiver `self`, which moves `y`\n   --> $DIR/double-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;"}, {"sha": "1bdf49801f975ba72192dfb6d72324d316c04324", "filename": "src/test/ui/use/use-after-move-self-based-on-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -8,7 +8,7 @@ LL |         self.bar();\n LL |         return self.x;\n    |                ^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `self`\n+note: `S::bar` takes ownership of the receiver `self`, which moves `self`\n   --> $DIR/use-after-move-self-based-on-type.rs:15:16\n    |\n LL |     pub fn bar(self) {}"}, {"sha": "59cc22eadb0153c8bd3903278f649ccdc13ab133", "filename": "src/test/ui/use/use-after-move-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -8,7 +8,7 @@ LL |         self.bar();\n LL |         return *self.x;\n    |                ^^^^^^^ value used here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `self`\n+note: `S::bar` takes ownership of the receiver `self`, which moves `self`\n   --> $DIR/use-after-move-self.rs:13:16\n    |\n LL |     pub fn bar(self) {}"}, {"sha": "2b85fa9bed480df4bf954d69decde3dfeeb292cf", "filename": "src/test/ui/walk-struct-literal-with.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/063b1675b2ed27948a7821af639a28c1a669d868/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr?ref=063b1675b2ed27948a7821af639a28c1a669d868", "patch": "@@ -8,7 +8,7 @@ LL |     let end = Mine{other_val:1, ..start.make_string_bar()};\n LL |     println!(\"{}\", start.test);\n    |                    ^^^^^^^^^^ value borrowed here after move\n    |\n-note: this function takes ownership of the receiver `self`, which moves `start`\n+note: `Mine::make_string_bar` takes ownership of the receiver `self`, which moves `start`\n   --> $DIR/walk-struct-literal-with.rs:7:28\n    |\n LL |     fn make_string_bar(mut self) -> Mine{"}]}