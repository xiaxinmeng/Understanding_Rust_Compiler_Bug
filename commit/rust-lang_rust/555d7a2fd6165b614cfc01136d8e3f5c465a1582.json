{"sha": "555d7a2fd6165b614cfc01136d8e3f5c465a1582", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NWQ3YTJmZDYxNjViNjE0Y2ZjMDExMzZkOGUzZjVjNDY1YTE1ODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-26T07:48:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-26T07:48:24Z"}, "message": "Auto merge of #63580 - wesleywiser:move_promoted_out, r=oli-obk\n\nMove promoted MIR out of `mir::Body`\n\nr? @oli-obk", "tree": {"sha": "a1e036bbbc0f08197e309a4530bb749f36678634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1e036bbbc0f08197e309a4530bb749f36678634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/555d7a2fd6165b614cfc01136d8e3f5c465a1582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/555d7a2fd6165b614cfc01136d8e3f5c465a1582", "html_url": "https://github.com/rust-lang/rust/commit/555d7a2fd6165b614cfc01136d8e3f5c465a1582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/555d7a2fd6165b614cfc01136d8e3f5c465a1582/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0", "html_url": "https://github.com/rust-lang/rust/commit/e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0"}, {"sha": "d6bf776bc69c766aa70c39f28f6c70ab7faf32b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7", "html_url": "https://github.com/rust-lang/rust/commit/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7"}], "stats": {"total": 888, "additions": 519, "deletions": 369}, "files": [{"sha": "a38dbbdd50c57b8d116dc6811a84af780ce1e258", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -25,6 +25,16 @@ macro_rules! arena_types {\n             [] adt_def: rustc::ty::AdtDef,\n             [] steal_mir: rustc::ty::steal::Steal<rustc::mir::Body<$tcx>>,\n             [] mir: rustc::mir::Body<$tcx>,\n+            [] steal_promoted: rustc::ty::steal::Steal<\n+                rustc_data_structures::indexed_vec::IndexVec<\n+                    rustc::mir::Promoted,\n+                    rustc::mir::Body<$tcx>\n+                >\n+            >,\n+            [] promoted: rustc_data_structures::indexed_vec::IndexVec<\n+                rustc::mir::Promoted,\n+                rustc::mir::Body<$tcx>\n+            >,\n             [] tables: rustc::ty::TypeckTables<$tcx>,\n             [] const_allocs: rustc::mir::interpret::Allocation,\n             [] vtable_method: Option<("}, {"sha": "858b77af80468f5d9f01d8409f4a86fa078d816e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 65, "deletions": 20, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -108,11 +108,6 @@ pub struct Body<'tcx> {\n     /// needn't) be tracked across crates.\n     pub source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n \n-    /// Rvalues promoted from this function, such as borrows of constants.\n-    /// Each of them is the Body of a constant with the fn's type parameters\n-    /// in scope, but a separate set of locals.\n-    pub promoted: IndexVec<Promoted, Body<'tcx>>,\n-\n     /// Yields type of the function, if it is a generator.\n     pub yield_ty: Option<Ty<'tcx>>,\n \n@@ -174,7 +169,6 @@ impl<'tcx> Body<'tcx> {\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n         source_scopes: IndexVec<SourceScope, SourceScopeData>,\n         source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n-        promoted: IndexVec<Promoted, Body<'tcx>>,\n         yield_ty: Option<Ty<'tcx>>,\n         local_decls: LocalDecls<'tcx>,\n         user_type_annotations: CanonicalUserTypeAnnotations<'tcx>,\n@@ -196,7 +190,6 @@ impl<'tcx> Body<'tcx> {\n             basic_blocks,\n             source_scopes,\n             source_scope_local_data,\n-            promoted,\n             yield_ty,\n             generator_drop: None,\n             generator_layout: None,\n@@ -418,7 +411,6 @@ impl_stable_hash_for!(struct Body<'tcx> {\n     basic_blocks,\n     source_scopes,\n     source_scope_local_data,\n-    promoted,\n     yield_ty,\n     generator_drop,\n     generator_layout,\n@@ -1737,23 +1729,25 @@ pub enum PlaceBase<'tcx> {\n }\n \n /// We store the normalized type to avoid requiring normalization when reading MIR\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct Static<'tcx> {\n     pub ty: Ty<'tcx>,\n-    pub kind: StaticKind,\n+    pub kind: StaticKind<'tcx>,\n+    pub def_id: DefId,\n }\n \n #[derive(\n-    Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, RustcEncodable, RustcDecodable,\n+    Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, RustcEncodable, RustcDecodable,\n )]\n-pub enum StaticKind {\n-    Promoted(Promoted),\n-    Static(DefId),\n+pub enum StaticKind<'tcx> {\n+    Promoted(Promoted, SubstsRef<'tcx>),\n+    Static,\n }\n \n impl_stable_hash_for!(struct Static<'tcx> {\n     ty,\n-    kind\n+    kind,\n+    def_id\n });\n \n /// The `Projection` data structure defines things of the form `base.x`, `*b` or `b[index]`.\n@@ -2114,10 +2108,12 @@ impl Debug for PlaceBase<'_> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         match *self {\n             PlaceBase::Local(id) => write!(fmt, \"{:?}\", id),\n-            PlaceBase::Static(box self::Static { ty, kind: StaticKind::Static(def_id) }) => {\n+            PlaceBase::Static(box self::Static { ty, kind: StaticKind::Static, def_id }) => {\n                 write!(fmt, \"({}: {:?})\", ty::tls::with(|tcx| tcx.def_path_str(def_id)), ty)\n             }\n-            PlaceBase::Static(box self::Static { ty, kind: StaticKind::Promoted(promoted) }) => {\n+            PlaceBase::Static(box self::Static {\n+                ty, kind: StaticKind::Promoted(promoted, _), def_id: _\n+            }) => {\n                 write!(fmt, \"({:?}: {:?})\", promoted, ty)\n             }\n         }\n@@ -3032,7 +3028,6 @@ BraceStructTypeFoldableImpl! {\n         basic_blocks,\n         source_scopes,\n         source_scope_local_data,\n-        promoted,\n         yield_ty,\n         generator_drop,\n         generator_layout,\n@@ -3226,13 +3221,63 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         Place {\n-            base: self.base.clone(),\n+            base: self.base.fold_with(folder),\n             projection: self.projection.fold_with(folder),\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.projection.visit_with(visitor)\n+        self.base.visit_with(visitor) || self.projection.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for PlaceBase<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        match self {\n+            PlaceBase::Local(local) => PlaceBase::Local(local.fold_with(folder)),\n+            PlaceBase::Static(static_) => PlaceBase::Static(static_.fold_with(folder)),\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match self {\n+            PlaceBase::Local(local) => local.visit_with(visitor),\n+            PlaceBase::Static(static_) => (**static_).visit_with(visitor),\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for Static<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        Static {\n+            ty: self.ty.fold_with(folder),\n+            kind: self.kind.fold_with(folder),\n+            def_id: self.def_id,\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        let Static { ty, kind, def_id: _ } = self;\n+\n+        ty.visit_with(visitor) || kind.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for StaticKind<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        match self {\n+            StaticKind::Promoted(promoted, substs) =>\n+                StaticKind::Promoted(promoted.fold_with(folder), substs.fold_with(folder)),\n+            StaticKind::Static => StaticKind::Static\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match self {\n+            StaticKind::Promoted(promoted, substs) =>\n+                promoted.visit_with(visitor) || substs.visit_with(visitor),\n+            StaticKind::Static => { false }\n+        }\n     }\n }\n "}, {"sha": "821367e9ea12c480645c9c0f3ad12bc93593355d", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -708,7 +708,7 @@ macro_rules! make_mir_visitor {\n                     PlaceBase::Local(local) => {\n                         self.visit_local(local, context, location);\n                     }\n-                    PlaceBase::Static(box Static { kind: _, ty }) => {\n+                    PlaceBase::Static(box Static { kind: _, ty, def_id: _ }) => {\n                         self.visit_ty(& $($mutability)? *ty, TyContext::Location(location));\n                     }\n                 }"}, {"sha": "c4f7ca51f4a7ae68393b396a368d7eb104c760c1", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -110,7 +110,11 @@ rustc_queries! {\n             no_hash\n         }\n \n-        query mir_validated(_: DefId) -> &'tcx Steal<mir::Body<'tcx>> {\n+        query mir_validated(_: DefId) ->\n+            (\n+                &'tcx Steal<mir::Body<'tcx>>,\n+                &'tcx Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n+            ) {\n             no_hash\n         }\n \n@@ -125,7 +129,17 @@ rustc_queries! {\n             }\n         }\n \n-        query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>> { }\n+        query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>> {\n+            cache_on_disk_if { key.is_local() }\n+            load_cached(tcx, id) {\n+                let promoted: Option<\n+                    rustc_data_structures::indexed_vec::IndexVec<\n+                        crate::mir::Promoted,\n+                        crate::mir::Body<'tcx>\n+                    >> = tcx.queries.on_disk_cache.try_load_query_result(tcx, id);\n+                promoted.map(|p| &*tcx.arena.alloc(p))\n+            }\n+        }\n     }\n \n     TypeChecking {"}, {"sha": "9f316e93111a35da5d4e0a1c71f9e5c44bdc9c59", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -21,7 +21,7 @@ use crate::middle::cstore::EncodedMetadata;\n use crate::middle::lang_items;\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n-use crate::mir::{Body, interpret, ProjectionKind};\n+use crate::mir::{Body, interpret, ProjectionKind, Promoted};\n use crate::mir::interpret::{ConstValue, Allocation, Scalar};\n use crate::ty::subst::{Kind, InternalSubsts, SubstsRef, Subst};\n use crate::ty::ReprOptions;\n@@ -1096,6 +1096,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.arena.alloc(Steal::new(mir))\n     }\n \n+    pub fn alloc_steal_promoted(self, promoted: IndexVec<Promoted, Body<'tcx>>) ->\n+        &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {\n+        self.arena.alloc(Steal::new(promoted))\n+    }\n+\n+    pub fn intern_promoted(self, promoted: IndexVec<Promoted, Body<'tcx>>) ->\n+        &'tcx IndexVec<Promoted, Body<'tcx>> {\n+        self.arena.alloc(promoted)\n+    }\n+\n     pub fn alloc_adt_def(\n         self,\n         did: DefId,"}, {"sha": "d2a7571fde1e20336de06e51e2e982f7d3e8a0ba", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -609,17 +609,19 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         mir::Operand::Copy(\n                             Place {\n                                 base: PlaceBase::Static(box Static {\n-                                    kind: StaticKind::Promoted(promoted),\n+                                    kind: StaticKind::Promoted(promoted, _),\n                                     ty,\n+                                    def_id: _,\n                                 }),\n                                 projection: None,\n                             }\n                         ) |\n                         mir::Operand::Move(\n                             Place {\n                                 base: PlaceBase::Static(box Static {\n-                                    kind: StaticKind::Promoted(promoted),\n+                                    kind: StaticKind::Promoted(promoted, _),\n                                     ty,\n+                                    def_id: _,\n                                 }),\n                                 projection: None,\n                             }"}, {"sha": "ac72928a89677194376ca5af1ff377de00069545", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Instance, Ty};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, VariantIdx, HasTyCtxt};\n use rustc::mir;\n use rustc::mir::tcx::PlaceTy;\n@@ -454,13 +454,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::PlaceRef {\n                 base: mir::PlaceBase::Static(box mir::Static {\n                     ty,\n-                    kind: mir::StaticKind::Promoted(promoted),\n+                    kind: mir::StaticKind::Promoted(promoted, substs),\n+                    def_id,\n                 }),\n                 projection: None,\n             } => {\n                 let param_env = ty::ParamEnv::reveal_all();\n+                let instance = Instance::new(*def_id, self.monomorphize(substs));\n                 let cid = mir::interpret::GlobalId {\n-                    instance: self.instance,\n+                    instance: instance,\n                     promoted: Some(*promoted),\n                 };\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n@@ -487,7 +489,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::PlaceRef {\n                 base: mir::PlaceBase::Static(box mir::Static {\n                     ty,\n-                    kind: mir::StaticKind::Static(def_id),\n+                    kind: mir::StaticKind::Static,\n+                    def_id,\n                 }),\n                 projection: None,\n             } => {"}, {"sha": "837aa9360c8953fcf8506987317740a987f486aa", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -24,6 +24,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::intravisit;\n use rustc::ich::{ATTR_DIRTY, ATTR_CLEAN};\n use rustc::ty::TyCtxt;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n use syntax::ast::{self, Attribute, NestedMetaItem};\n use syntax::symbol::{Symbol, sym};\n@@ -71,6 +72,7 @@ const BASE_IMPL: &[&str] = &[\n /// code, i.e., functions+methods\n const BASE_MIR: &[&str] = &[\n     label_strs::optimized_mir,\n+    label_strs::promoted_mir,\n     label_strs::mir_built,\n ];\n \n@@ -472,26 +474,39 @@ impl DirtyCleanVisitor<'tcx> {\n     fn assert_dirty(&self, item_span: Span, dep_node: DepNode) {\n         debug!(\"assert_dirty({:?})\", dep_node);\n \n-        let dep_node_index = self.tcx.dep_graph.dep_node_index_of(&dep_node);\n-        let current_fingerprint = self.tcx.dep_graph.fingerprint_of(dep_node_index);\n+        let current_fingerprint = self.get_fingerprint(&dep_node);\n         let prev_fingerprint = self.tcx.dep_graph.prev_fingerprint_of(&dep_node);\n \n-        if Some(current_fingerprint) == prev_fingerprint {\n+        if current_fingerprint == prev_fingerprint {\n             let dep_node_str = self.dep_node_str(&dep_node);\n             self.tcx.sess.span_err(\n                 item_span,\n                 &format!(\"`{}` should be dirty but is not\", dep_node_str));\n         }\n     }\n \n+    fn get_fingerprint(&self, dep_node: &DepNode) -> Option<Fingerprint> {\n+        if self.tcx.dep_graph.dep_node_exists(dep_node) {\n+            let dep_node_index = self.tcx.dep_graph.dep_node_index_of(dep_node);\n+            Some(self.tcx.dep_graph.fingerprint_of(dep_node_index))\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn assert_clean(&self, item_span: Span, dep_node: DepNode) {\n         debug!(\"assert_clean({:?})\", dep_node);\n \n-        let dep_node_index = self.tcx.dep_graph.dep_node_index_of(&dep_node);\n-        let current_fingerprint = self.tcx.dep_graph.fingerprint_of(dep_node_index);\n+        let current_fingerprint = self.get_fingerprint(&dep_node);\n         let prev_fingerprint = self.tcx.dep_graph.prev_fingerprint_of(&dep_node);\n \n-        if Some(current_fingerprint) != prev_fingerprint {\n+        // if the node wasn't previously evaluated and now is (or vice versa),\n+        // then the node isn't actually clean or dirty.\n+        if (current_fingerprint == None) ^ (prev_fingerprint == None) {\n+            return;\n+        }\n+\n+        if current_fingerprint != prev_fingerprint {\n             let dep_node_str = self.dep_node_str(&dep_node);\n             self.tcx.sess.span_err(\n                 item_span,"}, {"sha": "7aeeef00ea9349885e112111dc1d896d861bec4c", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -136,6 +136,15 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n         mir\n     }\n+    promoted_mir => {\n+        let promoted = cdata.maybe_get_promoted_mir(tcx, def_id.index).unwrap_or_else(|| {\n+            bug!(\"get_promoted_mir: missing promoted MIR for `{:?}`\", def_id)\n+        });\n+\n+        let promoted = tcx.arena.alloc(promoted);\n+\n+        promoted\n+    }\n     mir_const_qualif => {\n         (cdata.mir_const_qualif(def_id.index), tcx.arena.alloc(BitSet::new_empty(0)))\n     }"}, {"sha": "5b9cb966af23550a0f3b959a6569163104811c1c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -3,6 +3,7 @@\n use crate::cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary, ForeignModule, FullProcMacro};\n use crate::schema::*;\n \n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::{Lrc, ReadGuard};\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::hir;\n@@ -17,7 +18,7 @@ use rustc::mir::interpret::AllocDecodingSession;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::codec::TyDecoder;\n-use rustc::mir::Body;\n+use rustc::mir::{Body, Promoted};\n use rustc::util::captures::Captures;\n \n use std::io;\n@@ -923,6 +924,17 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n+    pub fn maybe_get_promoted_mir(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        id: DefIndex,\n+    ) -> Option<IndexVec<Promoted, Body<'tcx>>> {\n+        match self.is_proc_macro(id) {\n+            true => None,\n+            false => self.entry(id).promoted_mir.map(|promoted| promoted.decode((self, tcx)),)\n+        }\n+    }\n+\n     pub fn mir_const_qualif(&self, id: DefIndex) -> u8 {\n         match self.entry(id).kind {\n             EntryKind::Const(qualif, _) |"}, {"sha": "1797d77461567529e985383042357e2f03bc5c52", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -8,6 +8,7 @@ use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId,\n use rustc::hir::GenericParamKind;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel,\n                                       metadata_symbol_name};\n@@ -623,6 +624,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -677,6 +679,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -713,7 +716,8 @@ impl EncodeContext<'tcx> {\n             predicates: None,\n             predicates_defined_on: None,\n \n-            mir: None\n+            mir: None,\n+            promoted_mir: None,\n         }\n     }\n \n@@ -748,6 +752,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: None,\n+            promoted_mir: None,\n         }\n     }\n \n@@ -808,6 +813,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -923,6 +929,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -1022,6 +1029,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: if mir { self.encode_optimized_mir(def_id) } else { None },\n+            promoted_mir: if mir { self.encode_promoted_mir(def_id) } else { None },\n         }\n     }\n \n@@ -1052,6 +1060,19 @@ impl EncodeContext<'tcx> {\n         }\n     }\n \n+    fn encode_promoted_mir(\n+        &mut self,\n+        def_id: DefId,\n+    ) -> Option<Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>> {\n+        debug!(\"EncodeContext::encode_promoted_mir({:?})\", def_id);\n+        if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n+            let promoted = self.tcx.promoted_mir(def_id);\n+            Some(self.lazy(promoted))\n+        } else {\n+            None\n+        }\n+    }\n+\n     // Encodes the inherent implementations of a structure, enumeration, or trait.\n     fn encode_inherent_implementations(&mut self, def_id: DefId) -> Lazy<[DefIndex]> {\n         debug!(\"EncodeContext::encode_inherent_implementations({:?})\", def_id);\n@@ -1202,6 +1223,20 @@ impl EncodeContext<'tcx> {\n             hir::ItemKind::Use(..) => bug!(\"cannot encode info for item {:?}\", item),\n         };\n \n+        let mir = match item.node {\n+            hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,\n+            hir::ItemKind::Fn(_, header, ..) => {\n+                let generics = tcx.generics_of(def_id);\n+                let needs_inline =\n+                    (generics.requires_monomorphization(tcx) ||\n+                        tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n+                        !self.metadata_output_only();\n+                let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n+                needs_inline || header.constness == hir::Constness::Const || always_encode_mir\n+            }\n+            _ => false,\n+        };\n+\n         Entry {\n             kind,\n             visibility: self.lazy(ty::Visibility::from_hir(&item.vis, item.hir_id, tcx)),\n@@ -1301,29 +1336,8 @@ impl EncodeContext<'tcx> {\n                 _ => None, // not *wrong* for other kinds of items, but not needed\n             },\n \n-            mir: match item.node {\n-                hir::ItemKind::Static(..) => {\n-                    self.encode_optimized_mir(def_id)\n-                }\n-                hir::ItemKind::Const(..) => self.encode_optimized_mir(def_id),\n-                hir::ItemKind::Fn(_, header, ..) => {\n-                    let generics = tcx.generics_of(def_id);\n-                    let needs_inline =\n-                        (generics.requires_monomorphization(tcx) ||\n-                         tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n-                            !self.metadata_output_only();\n-                    let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                    if needs_inline\n-                        || header.constness == hir::Constness::Const\n-                        || always_encode_mir\n-                    {\n-                        self.encode_optimized_mir(def_id)\n-                    } else {\n-                        None\n-                    }\n-                }\n-                _ => None,\n-            },\n+            mir: if mir { self.encode_optimized_mir(def_id) } else { None },\n+            promoted_mir: if mir { self.encode_promoted_mir(def_id) } else { None },\n         }\n     }\n \n@@ -1350,6 +1364,7 @@ impl EncodeContext<'tcx> {\n             predicates: None,\n             predicates_defined_on: None,\n             mir: None,\n+            promoted_mir: None,\n         }\n     }\n \n@@ -1376,6 +1391,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: None,\n+            promoted_mir: None,\n         }\n     }\n \n@@ -1436,6 +1452,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -1464,6 +1481,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n+            promoted_mir: self.encode_promoted_mir(def_id),\n         }\n     }\n \n@@ -1675,6 +1693,7 @@ impl EncodeContext<'tcx> {\n             predicates_defined_on: None,\n \n             mir: None,\n+            promoted_mir: None,\n         }\n     }\n }"}, {"sha": "72a4b527c93d0e36802d7835ef00264dd3593333", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -11,6 +11,7 @@ use rustc::session::CrateDisambiguator;\n use rustc::session::config::SymbolManglingVersion;\n use rustc::ty::{self, Ty, ReprOptions};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::svh::Svh;\n \n use syntax::{ast, attr};\n@@ -231,6 +232,7 @@ pub struct Entry<'tcx> {\n     pub predicates_defined_on: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n \n     pub mir: Option<Lazy<mir::Body<'tcx>>>,\n+    pub promoted_mir: Option<Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "251d4b727c7544b35427d1b81e5e3e8db6bfd809", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -159,7 +159,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             PlaceRef {\n                 base:\n                     PlaceBase::Static(box Static {\n-                        kind: StaticKind::Promoted(_),\n+                        kind: StaticKind::Promoted(..),\n                         ..\n                     }),\n                 projection: None,\n@@ -169,7 +169,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             PlaceRef {\n                 base:\n                     PlaceBase::Static(box Static {\n-                        kind: StaticKind::Static(def_id),\n+                        kind: StaticKind::Static,\n+                        def_id,\n                         ..\n                     }),\n                 projection: None,\n@@ -440,7 +441,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     pub fn is_place_thread_local(&self, place_ref: PlaceRef<'cx, 'tcx>) -> bool {\n         if let PlaceRef {\n             base: PlaceBase::Static(box Static {\n-                kind: StaticKind::Static(def_id),\n+                kind: StaticKind::Static,\n+                def_id,\n                 ..\n             }),\n             projection: None,"}, {"sha": "8ded539e7205a60c33cfc9730e52dfc418fd6792", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -13,7 +13,7 @@ use rustc::mir::{\n     ClearCrossCrate, Local, Location, Body, Mutability, Operand, Place, PlaceBase, PlaceRef,\n     Static, StaticKind\n };\n-use rustc::mir::{Field, Projection, ProjectionElem, Rvalue, Statement, StatementKind};\n+use rustc::mir::{Field, Projection, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n@@ -22,6 +22,7 @@ use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, Level};\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n+use rustc_data_structures::indexed_vec::IndexVec;\n use smallvec::SmallVec;\n \n use std::collections::BTreeMap;\n@@ -86,12 +87,13 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n fn mir_borrowck(tcx: TyCtxt<'_>, def_id: DefId) -> BorrowCheckResult<'_> {\n-    let input_body = tcx.mir_validated(def_id);\n+    let (input_body, promoted) = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id));\n \n     let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {\n         let input_body: &Body<'_> = &input_body.borrow();\n-        do_mir_borrowck(&infcx, input_body, def_id)\n+        let promoted: &IndexVec<_, _> = &promoted.borrow();\n+        do_mir_borrowck(&infcx, input_body, promoted, def_id)\n     });\n     debug!(\"mir_borrowck done\");\n \n@@ -101,6 +103,7 @@ fn mir_borrowck(tcx: TyCtxt<'_>, def_id: DefId) -> BorrowCheckResult<'_> {\n fn do_mir_borrowck<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     input_body: &Body<'tcx>,\n+    input_promoted: &IndexVec<Promoted, Body<'tcx>>,\n     def_id: DefId,\n ) -> BorrowCheckResult<'tcx> {\n     debug!(\"do_mir_borrowck(def_id = {:?})\", def_id);\n@@ -147,7 +150,9 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // be modified (in place) to contain non-lexical lifetimes. It\n     // will have a lifetime tied to the inference context.\n     let mut body: Body<'tcx> = input_body.clone();\n-    let free_regions = nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body);\n+    let mut promoted: IndexVec<Promoted, Body<'tcx>> = input_promoted.clone();\n+    let free_regions =\n+        nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body, &mut promoted);\n     let body = &body; // no further changes\n     let location_table = &LocationTable::new(body);\n \n@@ -184,6 +189,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         def_id,\n         free_regions,\n         body,\n+        &promoted,\n         &upvars,\n         location_table,\n         param_env,\n@@ -1462,13 +1468,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         assert!(root_place.projection.is_none());\n         let (might_be_alive, will_be_dropped) = match root_place.base {\n             PlaceBase::Static(box Static {\n-                kind: StaticKind::Promoted(_),\n+                kind: StaticKind::Promoted(..),\n                 ..\n             }) => {\n                 (true, false)\n             }\n             PlaceBase::Static(box Static {\n-                kind: StaticKind::Static(_),\n+                kind: StaticKind::Static,\n                 ..\n             }) => {\n                 // Thread-locals might be dropped after the function exits, but\n@@ -2150,7 +2156,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             // `Place::Promoted` if the promotion weren't 100% legal. So we just forward this\n             PlaceRef {\n                 base: PlaceBase::Static(box Static {\n-                    kind: StaticKind::Promoted(_),\n+                    kind: StaticKind::Promoted(..),\n                     ..\n                 }),\n                 projection: None,\n@@ -2162,7 +2168,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }),\n             PlaceRef {\n                 base: PlaceBase::Static(box Static {\n-                    kind: StaticKind::Static(def_id),\n+                    kind: StaticKind::Static,\n+                    def_id,\n                     ..\n                 }),\n                 projection: None,"}, {"sha": "5a5534922aa8a0bd2c5fd041c7d687dc601882b0", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef {\n                 base:\n                     PlaceBase::Static(box Static {\n-                        kind: StaticKind::Promoted(_),\n+                        kind: StaticKind::Promoted(..),\n                         ..\n                     }),\n                 projection: None,\n@@ -158,7 +158,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef {\n                 base:\n                     PlaceBase::Static(box Static {\n-                        kind: StaticKind::Static(def_id),\n+                        kind: StaticKind::Static,\n+                        def_id,\n                         ..\n                     }),\n                 projection: None,"}, {"sha": "11ec154e5b5c13a769014998c101cc164a34f26d", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -11,8 +11,9 @@ use crate::transform::MirSource;\n use crate::borrow_check::Upvar;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n-use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Local, Body};\n+use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Local, Body, Promoted};\n use rustc::ty::{self, RegionKind, RegionVid};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::Diagnostic;\n use std::fmt::Debug;\n use std::env;\n@@ -52,14 +53,15 @@ pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n+    promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n ) -> UniversalRegions<'tcx> {\n     debug!(\"replace_regions_in_mir(def_id={:?})\", def_id);\n \n     // Compute named region information. This also renumbers the inputs/outputs.\n     let universal_regions = UniversalRegions::new(infcx, def_id, param_env);\n \n     // Replace all remaining regions with fresh inference variables.\n-    renumber::renumber_mir(infcx, body);\n+    renumber::renumber_mir(infcx, body, promoted);\n \n     let source = MirSource::item(def_id);\n     mir_util::dump_mir(infcx.tcx, None, \"renumber\", &0, source, body, |_, _| Ok(()));\n@@ -75,6 +77,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     def_id: DefId,\n     universal_regions: UniversalRegions<'tcx>,\n     body: &Body<'tcx>,\n+    promoted: &IndexVec<Promoted, Body<'tcx>>,\n     upvars: &[Upvar],\n     location_table: &LocationTable,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -105,6 +108,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         infcx,\n         param_env,\n         body,\n+        promoted,\n         def_id,\n         &universal_regions,\n         location_table,"}, {"sha": "c479c38f30c7ea9dcfe23bad512e991804854266", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -1,16 +1,26 @@\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n-use rustc::mir::{Location, Body};\n+use rustc::mir::{Location, Body, Promoted};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n+use rustc_data_structures::indexed_vec::IndexVec;\n \n /// Replaces all free regions appearing in the MIR with fresh\n /// inference variables, returning the number of variables created.\n-pub fn renumber_mir<'tcx>(infcx: &InferCtxt<'_, 'tcx>, body: &mut Body<'tcx>) {\n+pub fn renumber_mir<'tcx>(\n+    infcx: &InferCtxt<'_, 'tcx>,\n+    body: &mut Body<'tcx>,\n+    promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n+) {\n     debug!(\"renumber_mir()\");\n     debug!(\"renumber_mir: body.arg_count={:?}\", body.arg_count);\n \n     let mut visitor = NLLVisitor { infcx };\n+\n+    for body in promoted.iter_mut() {\n+        visitor.visit_body(body);\n+    }\n+\n     visitor.visit_body(body);\n }\n \n@@ -44,14 +54,6 @@ impl<'a, 'tcx> NLLVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n-    fn visit_body(&mut self, body: &mut Body<'tcx>) {\n-        for promoted in body.promoted.iter_mut() {\n-            self.visit_body(promoted);\n-        }\n-\n-        self.super_body(body);\n-    }\n-\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, ty_context: TyContext) {\n         debug!(\"visit_ty(ty={:?}, ty_context={:?})\", ty, ty_context);\n "}, {"sha": "da1f64b05151bc310c9e9eaefe1a80a343666ee8", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -112,6 +112,7 @@ pub(crate) fn type_check<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n+    promoted: &IndexVec<Promoted, Body<'tcx>>,\n     mir_def_id: DefId,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     location_table: &LocationTable,\n@@ -157,6 +158,7 @@ pub(crate) fn type_check<'tcx>(\n         mir_def_id,\n         param_env,\n         body,\n+        promoted,\n         &region_bound_pairs,\n         implicit_region_bound,\n         &mut borrowck_context,\n@@ -180,6 +182,7 @@ fn type_check_internal<'a, 'tcx, R>(\n     mir_def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &'a Body<'tcx>,\n+    promoted: &'a IndexVec<Promoted, Body<'tcx>>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n@@ -197,7 +200,7 @@ fn type_check_internal<'a, 'tcx, R>(\n         universal_region_relations,\n     );\n     let errors_reported = {\n-        let mut verifier = TypeVerifier::new(&mut checker, body);\n+        let mut verifier = TypeVerifier::new(&mut checker, body, promoted);\n         verifier.visit_body(body);\n         verifier.errors_reported\n     };\n@@ -254,6 +257,7 @@ enum FieldAccessError {\n struct TypeVerifier<'a, 'b, 'tcx> {\n     cx: &'a mut TypeChecker<'b, 'tcx>,\n     body: &'b Body<'tcx>,\n+    promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n     last_span: Span,\n     mir_def_id: DefId,\n     errors_reported: bool,\n@@ -380,9 +384,14 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n-    fn new(cx: &'a mut TypeChecker<'b, 'tcx>, body: &'b Body<'tcx>) -> Self {\n+    fn new(\n+        cx: &'a mut TypeChecker<'b, 'tcx>,\n+        body: &'b Body<'tcx>,\n+        promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n+    ) -> Self {\n         TypeVerifier {\n             body,\n+            promoted,\n             mir_def_id: cx.mir_def_id,\n             cx,\n             last_span: body.span,\n@@ -416,7 +425,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             let mut place_ty = match place_base {\n                 PlaceBase::Local(index) =>\n                     PlaceTy::from_ty(self.body.local_decls[*index].ty),\n-                PlaceBase::Static(box Static { kind, ty: sty }) => {\n+                PlaceBase::Static(box Static { kind, ty: sty, def_id }) => {\n                     let sty = self.sanitize_type(place, sty);\n                     let check_err =\n                         |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n@@ -440,16 +449,16 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                             };\n                         };\n                     match kind {\n-                        StaticKind::Promoted(promoted) => {\n+                        StaticKind::Promoted(promoted, _) => {\n                             if !self.errors_reported {\n-                                let promoted_body = &self.body.promoted[*promoted];\n+                                let promoted_body = &self.promoted[*promoted];\n                                 self.sanitize_promoted(promoted_body, location);\n \n                                 let promoted_ty = promoted_body.return_ty();\n                                 check_err(self, place, promoted_ty, sty);\n                             }\n                         }\n-                        StaticKind::Static(def_id) => {\n+                        StaticKind::Static => {\n                             let ty = self.tcx().type_of(*def_id);\n                             let ty = self.cx.normalize(ty, location);\n \n@@ -466,7 +475,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                     let is_promoted = match place {\n                         Place {\n                             base: PlaceBase::Static(box Static {\n-                                kind: StaticKind::Promoted(_),\n+                                kind: StaticKind::Promoted(..),\n                                 ..\n                             }),\n                             projection: None,"}, {"sha": "5caba637ccc4abf1b7473d32e478d0da0d69daca", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -46,9 +46,9 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n                         }\n                     }\n                 }\n-                PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_), .. }) =>\n+                PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_, _), .. }) =>\n                     false,\n-                PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. }) => {\n+                PlaceBase::Static(box Static{ kind: StaticKind::Static, def_id, .. }) => {\n                     tcx.is_mutable_static(*def_id)\n                 }\n             };"}, {"sha": "4f469174b392d04df81651befb6a542d0c45d507", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -329,11 +329,11 @@ fn place_base_conflict<'tcx>(\n         }\n         (PlaceBase::Static(s1), PlaceBase::Static(s2)) => {\n             match (&s1.kind, &s2.kind) {\n-                (StaticKind::Static(def_id_1), StaticKind::Static(def_id_2)) => {\n-                    if def_id_1 != def_id_2 {\n+                (StaticKind::Static, StaticKind::Static) => {\n+                    if s1.def_id != s2.def_id {\n                         debug!(\"place_element_conflict: DISJOINT-STATIC\");\n                         Overlap::Disjoint\n-                    } else if tcx.is_mutable_static(*def_id_1) {\n+                    } else if tcx.is_mutable_static(s1.def_id) {\n                         // We ignore mutable statics - they can only be unsafe code.\n                         debug!(\"place_element_conflict: IGNORE-STATIC-MUT\");\n                         Overlap::Disjoint\n@@ -342,7 +342,7 @@ fn place_base_conflict<'tcx>(\n                         Overlap::EqualOrDisjoint\n                     }\n                 },\n-                (StaticKind::Promoted(promoted_1), StaticKind::Promoted(promoted_2)) => {\n+                (StaticKind::Promoted(promoted_1, _), StaticKind::Promoted(promoted_2, _)) => {\n                     if promoted_1 == promoted_2 {\n                         if let ty::Array(_, len) = s1.ty.sty {\n                             if let Some(0) = len.try_eval_usize(tcx, param_env) {"}, {"sha": "98cf4bba1c75fc68713441bd871dd0d88457804b", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -126,7 +126,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::StaticRef { id } => block.and(Place {\n                 base: PlaceBase::Static(Box::new(Static {\n                     ty: expr.ty,\n-                    kind: StaticKind::Static(id),\n+                    kind: StaticKind::Static,\n+                    def_id: id,\n                 })),\n                 projection: None,\n             }),"}, {"sha": "61be17327ffda2865ff6d462c5963ffc41d26af7", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -763,7 +763,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.cfg.basic_blocks,\n             self.source_scopes,\n             ClearCrossCrate::Set(self.source_scope_local_data),\n-            IndexVec::new(),\n             yield_ty,\n             self.local_decls,\n             self.canonical_user_type_annotations,"}, {"sha": "67d63e52b2bfa8dfaf780dc59cc3e632f384a96f", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -49,17 +49,6 @@ pub(crate) fn mk_eval_cx<'mir, 'tcx>(\n     InterpCx::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), Default::default())\n }\n \n-pub(crate) fn eval_promoted<'mir, 'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    cid: GlobalId<'tcx>,\n-    body: &'mir mir::Body<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-) -> InterpResult<'tcx, MPlaceTy<'tcx>> {\n-    let span = tcx.def_span(cid.instance.def_id());\n-    let mut ecx = mk_eval_cx(tcx, span, param_env);\n-    eval_body_using_ecx(&mut ecx, cid, body, param_env)\n-}\n-\n fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, 'tcx>,\n     op: OpTy<'tcx>,\n@@ -360,7 +349,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             }\n         }\n         // This is a const fn. Call it.\n-        Ok(Some(match ecx.load_mir(instance.def) {\n+        Ok(Some(match ecx.load_mir(instance.def, None) {\n             Ok(body) => body,\n             Err(err) => {\n                 if let err_unsup!(NoMirFor(ref path)) = err.kind {\n@@ -664,14 +653,8 @@ pub fn const_eval_raw_provider<'tcx>(\n         Default::default()\n     );\n \n-    let res = ecx.load_mir(cid.instance.def);\n-    res.map(|body| {\n-        if let Some(index) = cid.promoted {\n-            &body.promoted[index]\n-        } else {\n-            body\n-        }\n-    }).and_then(\n+    let res = ecx.load_mir(cid.instance.def, cid.promoted);\n+    res.and_then(\n         |body| eval_body_using_ecx(&mut ecx, cid, body, key.param_env)\n     ).and_then(|place| {\n         Ok(RawConst {"}, {"sha": "ac01d436bdc9b1cc4d6795e28dd23373607c590f", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -294,6 +294,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn load_mir(\n         &self,\n         instance: ty::InstanceDef<'tcx>,\n+        promoted: Option<mir::Promoted>,\n     ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         let did = instance.def_id();\n@@ -303,7 +304,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         {\n             throw_inval!(TypeckError)\n         }\n-        trace!(\"load mir {:?}\", instance);\n+        trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n+        if let Some(promoted) = promoted {\n+            return Ok(&self.tcx.promoted_mir(did)[promoted]);\n+        }\n         match instance {\n             ty::InstanceDef::Item(def_id) => if self.tcx.is_mir_available(did) {\n                 Ok(self.tcx.optimized_mir(did))"}, {"sha": "23c9e7fdf67ce7c692f62723408c1200e68f887f", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -585,19 +585,19 @@ where\n         use rustc::mir::StaticKind;\n \n         Ok(match place_static.kind {\n-            StaticKind::Promoted(promoted) => {\n+            StaticKind::Promoted(promoted, _) => {\n                 let instance = self.frame().instance;\n                 self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: Some(promoted),\n                 })?\n             }\n \n-            StaticKind::Static(def_id) => {\n+            StaticKind::Static => {\n                 let ty = place_static.ty;\n                 assert!(!ty.needs_subst());\n                 let layout = self.layout_of(ty)?;\n-                let instance = ty::Instance::mono(*self.tcx, def_id);\n+                let instance = ty::Instance::mono(*self.tcx, place_static.def_id);\n                 let cid = GlobalId {\n                     instance,\n                     promoted: None"}, {"sha": "11f9df625285fa2bfd955ceb07eedf08c3989e15", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -180,12 +180,12 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n-use rustc::ty::subst::{InternalSubsts, SubstsRef};\n+use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind, Instance};\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::session::config::EntryFnType;\n-use rustc::mir::{self, Location, PlaceBase, Promoted, Static, StaticKind};\n+use rustc::mir::{self, Location, PlaceBase, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::{MonoItem, InstantiationMode};\n use rustc::mir::interpret::{Scalar, GlobalId, GlobalAlloc, ErrorHandled};\n@@ -661,7 +661,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                         _context: mir::visit::PlaceContext,\n                         location: Location) {\n         match place_base {\n-            PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), .. }) => {\n+            PlaceBase::Static(box Static { kind: StaticKind::Static, def_id, .. }) => {\n                 debug!(\"visiting static {:?} @ {:?}\", def_id, location);\n \n                 let tcx = self.tcx;\n@@ -670,8 +670,24 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(MonoItem::Static(*def_id));\n                 }\n             }\n-            PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => {\n-                // FIXME: should we handle promoteds here instead of eagerly in collect_neighbours?\n+            PlaceBase::Static(box Static {\n+                kind: StaticKind::Promoted(promoted, substs),\n+                def_id,\n+                ..\n+            }) => {\n+                let param_env = ty::ParamEnv::reveal_all();\n+                let cid = GlobalId {\n+                    instance: Instance::new(*def_id, substs.subst(self.tcx, self.param_substs)),\n+                    promoted: Some(*promoted),\n+                };\n+                match self.tcx.const_eval(param_env.and(cid)) {\n+                    Ok(val) => collect_const(self.tcx, val, substs, self.output),\n+                    Err(ErrorHandled::Reported) => {},\n+                    Err(ErrorHandled::TooGeneric) => {\n+                        let span = self.tcx.promoted_mir(*def_id)[*promoted].span;\n+                        span_bug!(span, \"collection encountered polymorphic constant\")\n+                    },\n+                }\n             }\n             PlaceBase::Local(_) => {\n                 // Locals have no relevance for collector\n@@ -1222,6 +1238,7 @@ fn collect_neighbours<'tcx>(\n     instance: Instance<'tcx>,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n+    debug!(\"collect_neighbours: {:?}\", instance.def_id());\n     let body = tcx.instance_mir(instance.def);\n \n     MirNeighborCollector {\n@@ -1230,22 +1247,6 @@ fn collect_neighbours<'tcx>(\n         output,\n         param_substs: instance.substs,\n     }.visit_body(&body);\n-    let param_env = ty::ParamEnv::reveal_all();\n-    for i in 0..body.promoted.len() {\n-        use rustc_data_structures::indexed_vec::Idx;\n-        let i = Promoted::new(i);\n-        let cid = GlobalId {\n-            instance,\n-            promoted: Some(i),\n-        };\n-        match tcx.const_eval(param_env.and(cid)) {\n-            Ok(val) => collect_const(tcx, val, instance.substs, output),\n-            Err(ErrorHandled::Reported) => {},\n-            Err(ErrorHandled::TooGeneric) => span_bug!(\n-                body.promoted[i].span, \"collection encountered polymorphic constant\",\n-            ),\n-        }\n-    }\n }\n \n fn def_id_to_string(tcx: TyCtxt<'_>, def_id: DefId) -> String {"}, {"sha": "aa83255bf62f45a541ceb239173041a17a43b8c3", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -112,7 +112,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n     };\n     debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n \n-    run_passes(tcx, &mut result, instance, MirPhase::Const, &[\n+    run_passes(tcx, &mut result, instance, None, MirPhase::Const, &[\n         &add_moves_for_packed_drops::AddMovesForPackedDrops,\n         &no_landing_pads::NoLandingPads,\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n@@ -201,7 +201,6 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n             SourceScopeData { span: span, parent_scope: None }, 1\n         ),\n         ClearCrossCrate::Clear,\n-        IndexVec::new(),\n         None,\n         local_decls_for_sig(&sig, span),\n         IndexVec::new(),\n@@ -369,7 +368,6 @@ impl CloneShimBuilder<'tcx> {\n                 SourceScopeData { span: self.span, parent_scope: None }, 1\n             ),\n             ClearCrossCrate::Clear,\n-            IndexVec::new(),\n             None,\n             self.local_decls,\n             IndexVec::new(),\n@@ -813,7 +811,6 @@ fn build_call_shim<'tcx>(\n             SourceScopeData { span: span, parent_scope: None }, 1\n         ),\n         ClearCrossCrate::Clear,\n-        IndexVec::new(),\n         None,\n         local_decls,\n         IndexVec::new(),\n@@ -900,7 +897,6 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n             SourceScopeData { span: span, parent_scope: None }, 1\n         ),\n         ClearCrossCrate::Clear,\n-        IndexVec::new(),\n         None,\n         local_decls,\n         IndexVec::new(),"}, {"sha": "15ecc6c37920b5c87f6eee616ed3540001326505", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -30,8 +30,8 @@ pub use self::AddCallGuards::*;\n  *\n  */\n \n-impl MirPass for AddCallGuards {\n-    fn run_pass<'tcx>(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for AddCallGuards {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         self.add_call_guards(body);\n     }\n }"}, {"sha": "052631ddff37125df0e6429759b32effbb1c1d4b", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -39,8 +39,8 @@ use crate::util;\n \n pub struct AddMovesForPackedDrops;\n \n-impl MirPass for AddMovesForPackedDrops {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for AddMovesForPackedDrops {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"add_moves_for_packed_drops({:?} @ {:?})\", src, body.span);\n         add_moves_for_packed_drops(tcx, body, src.def_id());\n     }"}, {"sha": "0fd75cd57b2ac31856938a2707fa59b1274ea986", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -65,8 +65,8 @@ fn may_be_reference<'tcx>(ty: Ty<'tcx>) -> bool {\n     }\n }\n \n-impl MirPass for AddRetag {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for AddRetag {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         if !tcx.sess.opts.debugging_opts.mir_emit_retag {\n             return;\n         }"}, {"sha": "539922c54d12d9530b49e755f2d6d93bf34266ce", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -205,10 +205,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 PlaceBase::Local(..) => {\n                     // Locals are safe.\n                 }\n-                PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => {\n+                PlaceBase::Static(box Static { kind: StaticKind::Promoted(_, _), .. }) => {\n                     bug!(\"unsafety checking should happen before promotion\")\n                 }\n-                PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), .. }) => {\n+                PlaceBase::Static(box Static { kind: StaticKind::Static, def_id, .. }) => {\n                     if self.tcx.is_mutable_static(*def_id) {\n                         self.require_unsafe(\"use of mutable static\",\n                             \"mutable statics can be mutated by multiple threads: aliasing \\"}, {"sha": "ede1cb62f9451475583c390ec82bf5aea48014fd", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -26,8 +26,8 @@ pub struct CleanupNonCodegenStatements;\n \n pub struct DeleteNonCodegenStatements;\n \n-impl MirPass for CleanupNonCodegenStatements {\n-    fn run_pass<'tcx>(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for CleanupNonCodegenStatements {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut delete = DeleteNonCodegenStatements;\n         delete.visit_body(body);\n     }"}, {"sha": "b6146b6b7227df927f66e5b06b1437b33d612fa3", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue,\n     Local, NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp, ProjectionElem,\n-    SourceScope, SourceScopeLocalData, LocalDecl, Promoted,\n+    SourceScope, SourceScopeLocalData, LocalDecl,\n };\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n@@ -27,14 +27,14 @@ use crate::interpret::{\n     ImmTy, MemoryKind, StackPopCleanup, LocalValue, LocalState,\n };\n use crate::const_eval::{\n-    CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_eval_cx,\n+    CompileTimeInterpreter, error_to_const_error, mk_eval_cx,\n };\n use crate::transform::{MirPass, MirSource};\n \n pub struct ConstProp;\n \n-impl MirPass for ConstProp {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for ConstProp {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // will be evaluated by miri and produce its errors there\n         if source.promoted.is_some() {\n             return;\n@@ -64,17 +64,12 @@ impl MirPass for ConstProp {\n             &mut body.source_scope_local_data,\n             ClearCrossCrate::Clear\n         );\n-        let promoted = std::mem::replace(\n-            &mut body.promoted,\n-            IndexVec::new()\n-        );\n \n         let dummy_body =\n             &Body::new(\n                 body.basic_blocks().clone(),\n                 Default::default(),\n                 ClearCrossCrate::Clear,\n-                Default::default(),\n                 None,\n                 body.local_decls.clone(),\n                 Default::default(),\n@@ -92,22 +87,17 @@ impl MirPass for ConstProp {\n             body,\n             dummy_body,\n             source_scope_local_data,\n-            promoted,\n             tcx,\n             source\n         );\n         optimization_finder.visit_body(body);\n \n         // put back the data we stole from `mir`\n-        let (source_scope_local_data, promoted) = optimization_finder.release_stolen_data();\n+        let source_scope_local_data = optimization_finder.release_stolen_data();\n         std::mem::replace(\n             &mut body.source_scope_local_data,\n             source_scope_local_data\n         );\n-        std::mem::replace(\n-            &mut body.promoted,\n-            promoted\n-        );\n \n         trace!(\"ConstProp done for {:?}\", source.def_id());\n     }\n@@ -124,7 +114,6 @@ struct ConstPropagator<'mir, 'tcx> {\n     param_env: ParamEnv<'tcx>,\n     source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n-    promoted: IndexVec<Promoted, Body<'tcx>>,\n }\n \n impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n@@ -155,7 +144,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         body: &Body<'tcx>,\n         dummy_body: &'mir Body<'tcx>,\n         source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n-        promoted: IndexVec<Promoted, Body<'tcx>>,\n         tcx: TyCtxt<'tcx>,\n         source: MirSource<'tcx>,\n     ) -> ConstPropagator<'mir, 'tcx> {\n@@ -184,17 +172,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             source_scope_local_data,\n             //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: body.local_decls.clone(),\n-            promoted,\n         }\n     }\n \n-    fn release_stolen_data(\n-        self,\n-    ) -> (\n-        ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n-        IndexVec<Promoted, Body<'tcx>>,\n-    ) {\n-        (self.source_scope_local_data, self.promoted)\n+    fn release_stolen_data(self) -> ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>> {\n+        self.source_scope_local_data\n     }\n \n     fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n@@ -303,7 +285,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         place.iterate(|place_base, place_projection| {\n             let mut eval = match place_base {\n                 PlaceBase::Local(loc) => self.get_const(*loc).clone()?,\n-                PlaceBase::Static(box Static {kind: StaticKind::Promoted(promoted), ..}) => {\n+                PlaceBase::Static(box Static {kind: StaticKind::Promoted(promoted, _), ..}) => {\n                     let generics = self.tcx.generics_of(self.source.def_id());\n                     if generics.requires_monomorphization(self.tcx) {\n                         // FIXME: can't handle code with generics\n@@ -315,11 +297,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         instance,\n                         promoted: Some(*promoted),\n                     };\n-                    // cannot use `const_eval` here, because that would require having the MIR\n-                    // for the current function available, but we're producing said MIR right now\n                     let res = self.use_ecx(source_info, |this| {\n-                        let body = &this.promoted[*promoted];\n-                        eval_promoted(this.tcx, cid, body, this.param_env)\n+                        this.ecx.const_eval_raw(cid)\n                     })?;\n                     trace!(\"evaluated promoted {:?} to {:?}\", promoted, res);\n                     res.into()"}, {"sha": "f3a523a813413e8abfe31a651fa965dc11e7a16a", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -29,8 +29,8 @@ use crate::util::def_use::DefUseAnalysis;\n \n pub struct CopyPropagation;\n \n-impl MirPass for CopyPropagation {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for CopyPropagation {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // We only run when the MIR optimization level is > 1.\n         // This avoids a slow pass, and messing up debug info.\n         if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {"}, {"sha": "1fc7ce09aa647db7a2d2229f3956578a79ba5794", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -5,8 +5,8 @@ use crate::util::expand_aggregate;\n \n pub struct Deaggregator;\n \n-impl MirPass for Deaggregator {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for Deaggregator {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         let local_decls = &*local_decls;\n         for bb in basic_blocks {"}, {"sha": "ed0eff943a165d86408dbf4d3295a8bec690dad7", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -13,12 +13,12 @@ use crate::util as mir_util;\n \n pub struct Marker(pub &'static str);\n \n-impl MirPass for Marker {\n+impl<'tcx> MirPass<'tcx> for Marker {\n     fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(self.0)\n     }\n \n-    fn run_pass<'tcx>(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, _body: &mut Body<'tcx>) {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, _body: &mut Body<'tcx>) {\n     }\n }\n "}, {"sha": "7a5c00c85962946cec88c94dbbf4312af32be100", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -20,8 +20,8 @@ use syntax_pos::Span;\n \n pub struct ElaborateDrops;\n \n-impl MirPass for ElaborateDrops {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, body.span);\n \n         let def_id = src.def_id();"}, {"sha": "21ca339eb968bdfb6f644a14011725a021daee75", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -49,8 +49,8 @@ impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n \n pub struct EraseRegions;\n \n-impl MirPass for EraseRegions {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for EraseRegions {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         EraseRegionsVisitor::new(tcx).visit_body(body);\n     }\n }"}, {"sha": "d87331195dd2402ef380075a4a0ae7e1aaae8058", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -1115,8 +1115,8 @@ where\n     }).collect()\n }\n \n-impl MirPass for StateTransform {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for StateTransform {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let yield_ty = if let Some(yield_ty) = body.yield_ty {\n             yield_ty\n         } else {"}, {"sha": "f31303c642faa1ec34523b5ae3b87a6bb5645428", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -37,8 +37,8 @@ struct CallSite<'tcx> {\n     location: SourceInfo,\n }\n \n-impl MirPass for Inline {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for Inline {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n             Inliner { tcx, source }.run_pass(body);\n         }\n@@ -394,7 +394,6 @@ impl Inliner<'tcx> {\n \n                 let mut local_map = IndexVec::with_capacity(callee_body.local_decls.len());\n                 let mut scope_map = IndexVec::with_capacity(callee_body.source_scopes.len());\n-                let mut promoted_map = IndexVec::with_capacity(callee_body.promoted.len());\n \n                 for mut scope in callee_body.source_scopes.iter().cloned() {\n                     if scope.parent_scope.is_none() {\n@@ -420,10 +419,6 @@ impl Inliner<'tcx> {\n                     local_map.push(idx);\n                 }\n \n-                promoted_map.extend(\n-                    callee_body.promoted.iter().cloned().map(|p| caller_body.promoted.push(p))\n-                );\n-\n                 // If the call is something like `a[*i] = f(i)`, where\n                 // `i : &mut usize`, then just duplicating the `a[*i]`\n                 // Place could result in two different locations if `f`\n@@ -484,12 +479,10 @@ impl Inliner<'tcx> {\n                     args: &args,\n                     local_map,\n                     scope_map,\n-                    promoted_map,\n-                    _callsite: callsite,\n                     destination: dest,\n                     return_block,\n                     cleanup_block: cleanup,\n-                    in_cleanup_block: false\n+                    in_cleanup_block: false,\n                 };\n \n \n@@ -644,8 +637,6 @@ struct Integrator<'a, 'tcx> {\n     args: &'a [Local],\n     local_map: IndexVec<Local, Local>,\n     scope_map: IndexVec<SourceScope, SourceScope>,\n-    promoted_map: IndexVec<Promoted, Promoted>,\n-    _callsite: CallSite<'tcx>,\n     destination: Place<'tcx>,\n     return_block: BasicBlock,\n     cleanup_block: Option<BasicBlock>,\n@@ -698,17 +689,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                 // Return pointer; update the place itself\n                 *place = self.destination.clone();\n             },\n-            Place {\n-                base: PlaceBase::Static(box Static {\n-                    kind: StaticKind::Promoted(promoted),\n-                    ..\n-                }),\n-                projection: None,\n-            } => {\n-                if let Some(p) = self.promoted_map.get(*promoted).cloned() {\n-                    *promoted = p;\n-                }\n-            },\n             _ => self.super_place(place, _ctxt, _location)\n         }\n     }"}, {"sha": "abe41606e80794a76ce3de1375ae218d2b37ff96", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -11,8 +11,8 @@ use crate::transform::{MirPass, MirSource};\n \n pub struct InstCombine;\n \n-impl MirPass for InstCombine {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for InstCombine {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // We only run when optimizing MIR (at any level).\n         if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n             return"}, {"sha": "ac291c2996d065afc7140d92dc366141a8b59cf8", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 76, "deletions": 60, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -137,68 +137,58 @@ pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n /// A streamlined trait that you can implement to create a pass; the\n /// pass will be named after the type, and it will consist of a main\n /// loop that goes over each available MIR and applies `run_pass`.\n-pub trait MirPass {\n+pub trait MirPass<'tcx> {\n     fn name(&self) -> Cow<'_, str> {\n         default_name::<Self>()\n     }\n \n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>);\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>);\n }\n \n pub fn run_passes(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n     instance: InstanceDef<'tcx>,\n+    promoted: Option<Promoted>,\n     mir_phase: MirPhase,\n-    passes: &[&dyn MirPass],\n+    passes: &[&dyn MirPass<'tcx>],\n ) {\n     let phase_index = mir_phase.phase_index();\n \n-    let run_passes = |body: &mut Body<'tcx>, promoted| {\n-        if body.phase >= mir_phase {\n-            return;\n-        }\n+    if body.phase >= mir_phase {\n+        return;\n+    }\n \n-        let source = MirSource {\n-            instance,\n-            promoted,\n-        };\n-        let mut index = 0;\n-        let mut run_pass = |pass: &dyn MirPass| {\n-            let run_hooks = |body: &_, index, is_after| {\n-                dump_mir::on_mir_pass(tcx, &format_args!(\"{:03}-{:03}\", phase_index, index),\n-                                      &pass.name(), source, body, is_after);\n-            };\n-            run_hooks(body, index, false);\n-            pass.run_pass(tcx, source, body);\n-            run_hooks(body, index, true);\n-\n-            index += 1;\n+    let source = MirSource {\n+        instance,\n+        promoted,\n+    };\n+    let mut index = 0;\n+    let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n+        let run_hooks = |body: &_, index, is_after| {\n+            dump_mir::on_mir_pass(tcx, &format_args!(\"{:03}-{:03}\", phase_index, index),\n+                                    &pass.name(), source, body, is_after);\n         };\n+        run_hooks(body, index, false);\n+        pass.run_pass(tcx, source, body);\n+        run_hooks(body, index, true);\n \n-        for pass in passes {\n-            run_pass(*pass);\n-        }\n-\n-        body.phase = mir_phase;\n+        index += 1;\n     };\n \n-    run_passes(body, None);\n-\n-    for (index, promoted_body) in body.promoted.iter_enumerated_mut() {\n-        run_passes(promoted_body, Some(index));\n-\n-        //Let's make sure we don't miss any nested instances\n-        assert!(promoted_body.promoted.is_empty())\n+    for pass in passes {\n+        run_pass(*pass);\n     }\n+\n+    body.phase = mir_phase;\n }\n \n fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut body = tcx.mir_built(def_id).steal();\n-    run_passes(tcx, &mut body, InstanceDef::Item(def_id), MirPhase::Const, &[\n+    run_passes(tcx, &mut body, InstanceDef::Item(def_id), None, MirPhase::Const, &[\n         // What we need to do constant evaluation.\n         &simplify::SimplifyCfg::new(\"initial\"),\n         &rustc_peek::SanityCheck,\n@@ -207,7 +197,10 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     tcx.alloc_steal_mir(body)\n }\n \n-fn mir_validated(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_validated(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     if let hir::BodyOwnerKind::Const = tcx.hir().body_owner_kind(hir_id) {\n         // Ensure that we compute the `mir_const_qualif` for constants at\n@@ -216,33 +209,23 @@ fn mir_validated(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     }\n \n     let mut body = tcx.mir_const(def_id).steal();\n-    run_passes(tcx, &mut body, InstanceDef::Item(def_id), MirPhase::Validated, &[\n+    let qualify_and_promote_pass = qualify_consts::QualifyAndPromoteConstants::default();\n+    run_passes(tcx, &mut body, InstanceDef::Item(def_id), None, MirPhase::Validated, &[\n         // What we need to run borrowck etc.\n-        &qualify_consts::QualifyAndPromoteConstants,\n+        &qualify_and_promote_pass,\n         &simplify::SimplifyCfg::new(\"qualify-consts\"),\n     ]);\n-    tcx.alloc_steal_mir(body)\n+    let promoted = qualify_and_promote_pass.promoted.into_inner();\n+    (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n }\n \n-fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n-    if tcx.is_constructor(def_id) {\n-        // There's no reason to run all of the MIR passes on constructors when\n-        // we can just output the MIR we want directly. This also saves const\n-        // qualification and borrow checking the trouble of special casing\n-        // constructors.\n-        return shim::build_adt_ctor(tcx, def_id);\n-    }\n-\n-    // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n-    // execute before we can steal.\n-    tcx.ensure().mir_borrowck(def_id);\n-\n-    if tcx.use_ast_borrowck() {\n-        tcx.ensure().borrowck(def_id);\n-    }\n-\n-    let mut body = tcx.mir_validated(def_id).steal();\n-    run_passes(tcx, &mut body, InstanceDef::Item(def_id), MirPhase::Optimized, &[\n+fn run_optimization_passes<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mut Body<'tcx>,\n+    def_id: DefId,\n+    promoted: Option<Promoted>,\n+) {\n+    run_passes(tcx, body, InstanceDef::Item(def_id), promoted, MirPhase::Optimized, &[\n         // Remove all things only needed by analysis\n         &no_landing_pads::NoLandingPads,\n         &simplify_branches::SimplifyBranches::new(\"initial\"),\n@@ -293,10 +276,43 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n         &add_call_guards::CriticalCallEdges,\n         &dump_mir::Marker(\"PreCodegen\"),\n     ]);\n+}\n+\n+fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n+    if tcx.is_constructor(def_id) {\n+        // There's no reason to run all of the MIR passes on constructors when\n+        // we can just output the MIR we want directly. This also saves const\n+        // qualification and borrow checking the trouble of special casing\n+        // constructors.\n+        return shim::build_adt_ctor(tcx, def_id);\n+    }\n+\n+    // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n+    // execute before we can steal.\n+    tcx.ensure().mir_borrowck(def_id);\n+\n+    if tcx.use_ast_borrowck() {\n+        tcx.ensure().borrowck(def_id);\n+    }\n+\n+    let (body, _) = tcx.mir_validated(def_id);\n+    let mut body = body.steal();\n+    run_optimization_passes(tcx, &mut body, def_id, None);\n     tcx.arena.alloc(body)\n }\n \n fn promoted_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n-    let body = tcx.optimized_mir(def_id);\n-    &body.promoted\n+    if tcx.is_constructor(def_id) {\n+        return tcx.intern_promoted(IndexVec::new());\n+    }\n+\n+    tcx.ensure().mir_borrowck(def_id);\n+    let (_, promoted) = tcx.mir_validated(def_id);\n+    let mut promoted = promoted.steal();\n+\n+    for (p, mut body) in promoted.iter_enumerated_mut() {\n+        run_optimization_passes(tcx, &mut body, def_id, Some(p));\n+    }\n+\n+    tcx.intern_promoted(promoted)\n }"}, {"sha": "762bb5d44839f096c06ee216889d3310bec56ed0", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -8,8 +8,8 @@ use crate::transform::{MirPass, MirSource};\n \n pub struct NoLandingPads;\n \n-impl MirPass for NoLandingPads {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for NoLandingPads {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         no_landing_pads(tcx, body)\n     }\n }"}, {"sha": "cdccdfea3994342dddcf72a66e65c04688c250e2", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -12,9 +12,11 @@\n //! initialization and can otherwise silence errors, if\n //! move analysis runs after promotion on broken MIR.\n \n+use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, MutatingUseContext, MutVisitor, Visitor};\n use rustc::mir::traversal::ReversePostorder;\n+use rustc::ty::subst::InternalSubsts;\n use rustc::ty::TyCtxt;\n use syntax_pos::Span;\n \n@@ -293,17 +295,28 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         new_temp\n     }\n \n-    fn promote_candidate(mut self, candidate: Candidate) {\n+    fn promote_candidate(\n+        mut self,\n+        def_id: DefId,\n+        candidate: Candidate,\n+        next_promoted_id: usize,\n+    ) -> Option<Body<'tcx>> {\n         let mut operand = {\n             let promoted = &mut self.promoted;\n-            let promoted_id = Promoted::new(self.source.promoted.len());\n+            let promoted_id = Promoted::new(next_promoted_id);\n+            let tcx = self.tcx;\n             let mut promoted_place = |ty, span| {\n                 promoted.span = span;\n                 promoted.local_decls[RETURN_PLACE] = LocalDecl::new_return_place(ty, span);\n                 Place {\n                     base: PlaceBase::Static(box Static {\n-                        kind: StaticKind::Promoted(promoted_id),\n-                        ty\n+                        kind:\n+                            StaticKind::Promoted(\n+                                promoted_id,\n+                                InternalSubsts::identity_for_item(tcx, def_id),\n+                            ),\n+                        ty,\n+                        def_id,\n                     }),\n                     projection: None,\n                 }\n@@ -319,7 +332,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             let span = statement.source_info.span;\n \n                             Operand::Move(Place {\n-                                base: mem::replace(&mut place.base, promoted_place(ty, span).base),\n+                                base: mem::replace(\n+                                    &mut place.base,\n+                                    promoted_place(ty, span).base\n+                                ),\n                                 projection: None,\n                             })\n                         }\n@@ -332,7 +348,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         StatementKind::Assign(_, box Rvalue::Repeat(ref mut operand, _)) => {\n                             let ty = operand.ty(local_decls, self.tcx);\n                             let span = statement.source_info.span;\n-                            mem::replace(operand, Operand::Copy(promoted_place(ty, span)))\n+                            mem::replace(\n+                                operand,\n+                                Operand::Copy(promoted_place(ty, span))\n+                            )\n                         }\n                         _ => bug!()\n                     }\n@@ -353,7 +372,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         // a function requiring a constant argument and as that constant value\n                         // providing a value whose computation contains another call to a function\n                         // requiring a constant argument.\n-                        TerminatorKind::Goto { .. } => return,\n+                        TerminatorKind::Goto { .. } => return None,\n                         _ => bug!()\n                     }\n                 }\n@@ -368,7 +387,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n         let span = self.promoted.span;\n         self.assign(RETURN_PLACE, Rvalue::Use(operand), span);\n-        self.source.promoted.push(self.promoted);\n+        Some(self.promoted)\n     }\n }\n \n@@ -385,14 +404,17 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n }\n \n pub fn promote_candidates<'tcx>(\n+    def_id: DefId,\n     body: &mut Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     mut temps: IndexVec<Local, TempState>,\n     candidates: Vec<Candidate>,\n-) {\n+) -> IndexVec<Promoted, Body<'tcx>> {\n     // Visit candidates in reverse, in case they're nested.\n     debug!(\"promote_candidates({:?})\", candidates);\n \n+    let mut promotions = IndexVec::new();\n+\n     for candidate in candidates.into_iter().rev() {\n         match candidate {\n             Candidate::Repeat(Location { block, statement_index }) |\n@@ -426,7 +448,6 @@ pub fn promote_candidates<'tcx>(\n                 // memory usage?\n                 body.source_scopes.clone(),\n                 body.source_scope_local_data.clone(),\n-                IndexVec::new(),\n                 None,\n                 initial_locals,\n                 IndexVec::new(),\n@@ -440,7 +461,11 @@ pub fn promote_candidates<'tcx>(\n             temps: &mut temps,\n             keep_original: false\n         };\n-        promoter.promote_candidate(candidate);\n+\n+        //FIXME(oli-obk): having a `maybe_push()` method on `IndexVec` might be nice\n+        if let Some(promoted) = promoter.promote_candidate(def_id, candidate, promotions.len()) {\n+            promotions.push(promoted);\n+        }\n     }\n \n     // Eliminate assignments to, and drops of promoted temps.\n@@ -474,4 +499,6 @@ pub fn promote_candidates<'tcx>(\n             _ => {}\n         }\n     }\n+\n+    promotions\n }"}, {"sha": "7f8ae88342934cf93ac20d0647824acb88520143", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -25,6 +25,7 @@ use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::symbol::sym;\n use syntax_pos::{Span, DUMMY_SP};\n \n+use std::cell::Cell;\n use std::fmt;\n use std::ops::{Deref, Index, IndexMut};\n use std::usize;\n@@ -222,7 +223,7 @@ trait Qualif {\n             } => Self::in_local(cx, *local),\n             PlaceRef {\n                 base: PlaceBase::Static(box Static {\n-                    kind: StaticKind::Promoted(_),\n+                    kind: StaticKind::Promoted(..),\n                     ..\n                 }),\n                 projection: None,\n@@ -433,13 +434,13 @@ impl Qualif for IsNotPromotable {\n \n     fn in_static(cx: &ConstCx<'_, 'tcx>, static_: &Static<'tcx>) -> bool {\n         match static_.kind {\n-            StaticKind::Promoted(_) => unreachable!(),\n-            StaticKind::Static(def_id) => {\n+            StaticKind::Promoted(_, _) => unreachable!(),\n+            StaticKind::Static => {\n                 // Only allow statics (not consts) to refer to other statics.\n                 let allowed = cx.mode == Mode::Static || cx.mode == Mode::StaticMut;\n \n                 !allowed ||\n-                    cx.tcx.get_attrs(def_id).iter().any(\n+                    cx.tcx.get_attrs(static_.def_id).iter().any(\n                         |attr| attr.check_name(sym::thread_local)\n                     )\n             }\n@@ -872,7 +873,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                     dest_projection = &proj.base;\n                 },\n                 (&PlaceBase::Static(box Static {\n-                    kind: StaticKind::Promoted(_),\n+                    kind: StaticKind::Promoted(..),\n                     ..\n                 }), None) => bug!(\"promoteds don't exist yet during promotion\"),\n                 (&PlaceBase::Static(box Static{ kind: _, .. }), None) => {\n@@ -1027,10 +1028,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         self.super_place_base(place_base, context, location);\n         match place_base {\n             PlaceBase::Local(_) => {}\n-            PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_), .. }) => {\n+            PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_, _), .. }) => {\n                 unreachable!()\n             }\n-            PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. }) => {\n+            PlaceBase::Static(box Static{ kind: StaticKind::Static, def_id, .. }) => {\n                 if self.tcx\n                         .get_attrs(*def_id)\n                         .iter()\n@@ -1570,10 +1571,20 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> (u8, &BitSet<Local>) {\n     Checker::new(tcx, def_id, body, Mode::Const).check_const()\n }\n \n-pub struct QualifyAndPromoteConstants;\n+pub struct QualifyAndPromoteConstants<'tcx> {\n+    pub promoted: Cell<IndexVec<Promoted, Body<'tcx>>>,\n+}\n+\n+impl<'tcx> Default for QualifyAndPromoteConstants<'tcx> {\n+    fn default() -> Self {\n+        QualifyAndPromoteConstants {\n+            promoted: Cell::new(IndexVec::new()),\n+        }\n+    }\n+}\n \n-impl MirPass for QualifyAndPromoteConstants {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         if body.return_ty().references_error() {\n             tcx.sess.delay_span_bug(body.span, \"QualifyAndPromoteConstants: MIR had errors\");\n@@ -1649,7 +1660,9 @@ impl MirPass for QualifyAndPromoteConstants {\n             };\n \n             // Do the actual promotion, now that we know what's viable.\n-            promote_consts::promote_candidates(body, tcx, temps, candidates);\n+            self.promoted.set(\n+                promote_consts::promote_candidates(def_id, body, tcx, temps, candidates)\n+            );\n         } else {\n             if !body.control_flow_destroyed.is_empty() {\n                 let mut locals = body.vars_iter();"}, {"sha": "56093527aee249c3301af89bcc46922b4d1055ed", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -264,11 +264,11 @@ fn check_place(\n         }\n \n         match place_base {\n-            PlaceBase::Static(box Static { kind: StaticKind::Static(_), .. }) => {\n+            PlaceBase::Static(box Static { kind: StaticKind::Static, .. }) => {\n                 Err((span, \"cannot access `static` items in const fn\".into()))\n             }\n             PlaceBase::Local(_)\n-            | PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => Ok(()),\n+            | PlaceBase::Static(box Static { kind: StaticKind::Promoted(_, _), .. }) => Ok(()),\n         }\n     })\n }"}, {"sha": "73089a2106f6b4f46885d7ea607dbf227e39ad4b", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -18,8 +18,8 @@ pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>)\n     RemoveNoopLandingPads.remove_nop_landing_pads(body)\n }\n \n-impl MirPass for RemoveNoopLandingPads {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for RemoveNoopLandingPads {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         remove_noop_landing_pads(tcx, body);\n     }\n }"}, {"sha": "1d3bf247387a74ea588264a9679267b35bc4000c", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -23,8 +23,8 @@ use crate::dataflow::has_rustc_mir_with;\n \n pub struct SanityCheck;\n \n-impl MirPass for SanityCheck {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for SanityCheck {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = src.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));"}, {"sha": "d4599ee08aa4614f43c8db3c37b3808bdeb95e83", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -52,12 +52,12 @@ pub fn simplify_cfg(body: &mut Body<'_>) {\n     body.basic_blocks_mut().raw.shrink_to_fit();\n }\n \n-impl MirPass for SimplifyCfg {\n+impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n     fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass<'tcx>(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body);\n         simplify_cfg(body);\n     }\n@@ -292,8 +292,8 @@ pub fn remove_dead_blocks(body: &mut Body<'_>) {\n \n pub struct SimplifyLocals;\n \n-impl MirPass for SimplifyLocals {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut marker = DeclMarker { locals: BitSet::new_empty(body.local_decls.len()) };\n         marker.visit_body(body);\n         // Return pointer and arguments are always live"}, {"sha": "0a509666d34aedb76ffd0711af52c4562db8fc8f", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -14,12 +14,12 @@ impl SimplifyBranches {\n     }\n }\n \n-impl MirPass for SimplifyBranches {\n+impl<'tcx> MirPass<'tcx> for SimplifyBranches {\n     fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let param_env = tcx.param_env(src.def_id());\n         for block in body.basic_blocks_mut() {\n             let terminator = block.terminator_mut();"}, {"sha": "8199a252e78b06c877774a4fe4e80d119037e388", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -36,8 +36,8 @@ use crate::util::patch::MirPatch;\n \n pub struct UniformArrayMoveOut;\n \n-impl MirPass for UniformArrayMoveOut {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for UniformArrayMoveOut {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut patch = MirPatch::new(body);\n         let param_env = tcx.param_env(src.def_id());\n         {\n@@ -184,8 +184,8 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n \n pub struct RestoreSubsliceArrayMoveOut;\n \n-impl MirPass for RestoreSubsliceArrayMoveOut {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut patch = MirPatch::new(body);\n         let param_env = tcx.param_env(src.def_id());\n         {"}, {"sha": "70820dfaea4a033de9c4b9b79f1fca0faace731c", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -94,7 +94,7 @@ pub fn change_iterable() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iterable() {\n     let mut _x = 0;"}, {"sha": "24d436f5f9727c5a82ff82573cd144b98b532017", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -42,7 +42,10 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"HirBody,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n+    )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_body() {\n         println!(\"Hello, world!\");\n@@ -63,7 +66,10 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"HirBody,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n+    )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n     pub fn method_body_inlined() {\n@@ -97,7 +103,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of\")]\n+    #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of,promoted_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfness(&self) { }\n }"}, {"sha": "492182921ba347b377b682c3e92025b6dcc8d36b", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     &{[1, 2, 3][4]};\n     //~^ ERROR index out of bounds\n     //~| ERROR reaching this expression at runtime will panic or abort\n-    //~| ERROR this expression will panic at runtime\n }"}, {"sha": "0ddc2a0e79cd35c8729ffb97329b49936f186745", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -6,12 +6,6 @@ LL |     &{[1, 2, 3][4]};\n    |\n    = note: `#[deny(const_err)]` on by default\n \n-error: this expression will panic at runtime\n-  --> $DIR/array-literal-index-oob.rs:2:5\n-   |\n-LL |     &{[1, 2, 3][4]};\n-   |     ^^^^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 4\n-\n error: reaching this expression at runtime will panic or abort\n   --> $DIR/array-literal-index-oob.rs:2:7\n    |\n@@ -20,5 +14,5 @@ LL |     &{[1, 2, 3][4]};\n    |       |\n    |       index out of bounds: the len is 3 but the index is 4\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "d971d825f278ccd0f7cc5f5f3b500d5e9c9f1872", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -21,16 +21,16 @@ LL |     const Y: u32 = foo(0-1);\n    |                        attempt to subtract with overflow\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-43197.rs:12:26\n+  --> $DIR/issue-43197.rs:12:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n-   |                          ^ referenced constant has errors\n+   |                       ^ referenced constant has errors\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-43197.rs:12:23\n+  --> $DIR/issue-43197.rs:12:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n-   |                       ^ referenced constant has errors\n+   |                          ^ referenced constant has errors\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cd989731452b348c581473173d69447a96ef2723", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -7,15 +7,13 @@ fn main() {\n     let _x = 0u32 - 1;\n     //~^ ERROR this expression will panic at runtime [const_err]\n     println!(\"{}\", 1/(1-1));\n-    //~^ ERROR this expression will panic at runtime [const_err]\n-    //~| ERROR attempt to divide by zero [const_err]\n+    //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n     let _x = 1/(1-1);\n     //~^ ERROR const_err\n     //~| ERROR const_err\n     println!(\"{}\", 1/(false as u32));\n-    //~^ ERROR this expression will panic at runtime [const_err]\n-    //~| ERROR attempt to divide by zero [const_err]\n+    //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n     let _x = 1/(false as u32);\n     //~^ ERROR const_err"}, {"sha": "40d5c73e86679580ea8d7275c204edaf12c2ba30", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=555d7a2fd6165b614cfc01136d8e3f5c465a1582", "patch": "@@ -16,59 +16,47 @@ error: attempt to divide by zero\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^\n \n-error: this expression will panic at runtime\n+error: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:13:14\n+  --> $DIR/promoted_errors.rs:12:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:13:14\n+  --> $DIR/promoted_errors.rs:12:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:16:20\n+  --> $DIR/promoted_errors.rs:15:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:16:20\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:15:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:20:14\n+  --> $DIR/promoted_errors.rs:18:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:20:14\n+  --> $DIR/promoted_errors.rs:18:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n-error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n-\n-error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:9:20\n-   |\n-LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^ attempt to divide by zero\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 9 previous errors\n "}]}