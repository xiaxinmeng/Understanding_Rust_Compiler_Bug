{"sha": "93f0e9bac36b3487a2359a939a84bd9b35df8660", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZjBlOWJhYzM2YjM0ODdhMjM1OWE5MzlhODRiZDliMzVkZjg2NjA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-25T19:42:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-26T04:20:17Z"}, "message": "Refine notes in kind.rs some more. Add a fixme to ty.rs.\n\nKinds are still pretty wobbly. See thread starting at\nhttps://mail.mozilla.org/pipermail/rust-dev/2011-September/000807.html", "tree": {"sha": "66355751c7b1efce48882b44b02b1a89c037770f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66355751c7b1efce48882b44b02b1a89c037770f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93f0e9bac36b3487a2359a939a84bd9b35df8660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93f0e9bac36b3487a2359a939a84bd9b35df8660", "html_url": "https://github.com/rust-lang/rust/commit/93f0e9bac36b3487a2359a939a84bd9b35df8660", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93f0e9bac36b3487a2359a939a84bd9b35df8660/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "798b3531a674a7ca9cb7c548a56bb1880d7e0f0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/798b3531a674a7ca9cb7c548a56bb1880d7e0f0a", "html_url": "https://github.com/rust-lang/rust/commit/798b3531a674a7ca9cb7c548a56bb1880d7e0f0a"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "3d37b302f3c23859104eaf356f4e3b0d28cda9a5", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/93f0e9bac36b3487a2359a939a84bd9b35df8660/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f0e9bac36b3487a2359a939a84bd9b35df8660/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=93f0e9bac36b3487a2359a939a84bd9b35df8660", "patch": "@@ -30,20 +30,28 @@\n * you write fn<@T>(...). And if you need neither -- can work with any sort of\n * pinned data at all -- then you write fn<T>(...).\n *\n-*\n * Most types are unique or shared. Other possible name combinations for these\n * two: (tree, graph; pruned, pooled; message, local; owned, common) are\n * plausible but nothing stands out as completely pithy-and-obvious.\n *\n-* Resources cannot be copied or sent; they're pinned. They can't be copied\n-* because it would interfere with destruction (multiple destruction?) They\n-* cannot be sent because we don't want to oblige the communication system to\n-* run destructors in some weird limbo context of messages-in-transit. It\n-* should always be ok to just free messages it's dropping.\n+* Pinned values arise in 2 contexts: resources and &-closures (blocks). The\n+* latter absolutely must not be moved, since they could escape to the heap;\n+* the former must not be copied, since they'd then be multiply-destructed.\n+* We achieve the no-copy restriction by recycling the no-move restriction\n+* in place on pinned kinds for &-closures; and as a benefit we can guarantee\n+* that a resource passed by reference to C will never move during its life,\n+* occasionally useful for FFI-code.\n+*\n+* Resources cannot be sent because we don't want to oblige the communication\n+* system to run destructors in some weird limbo context of\n+* messages-in-transit. It should always be ok to just free messages it's\n+* dropping. Even if you wanted to send them, you'd need a new sigil for the\n+* NOMOVE + SEND combination, and you couldn't use the move-mode library\n+* interface to chan.send in that case (NOMOVE after all), so the whole thing\n+* wouldn't really work as minimally as the encoding we have here.\n *\n * Note that obj~ and fn~ -- those that capture a unique environment -- can be\n-* sent, so satisfy ~T. So can plain obj and fn.\n-*\n+* sent, so satisfy ~T. So can plain obj and fn. They can all also be copied.\n *\n * Further notes on copying and moving; sending is accomplished by calling a\n * move-in operator on something constrained to a unique type ~T.\n@@ -53,20 +61,26 @@\n * --------\n *\n *   A copy is made any time you pass-by-value or execute the = operator in a\n-*   non-init expression.\n+*   non-init expression. Copying requires discriminating on type constructor.\n+*\n+*   @-boxes copy shallow, copying is always legal.\n+*\n+*   ~-boxes copy deep, copying is only legal if pointee is unique-kind.\n *\n-*   @ copies shallow, is always legal\n-*   ~ copies deep, is only legal if pointee is unique.\n-*     pinned values (pinned resources, alias-closures) can't be copied\n-*     all other unique (eg. interior) values copy shallow\n+*     Pinned-kind values (resources, &-closures) can't be copied. All other\n+*     unique-kind (eg. interior) values can be copied, and copy shallow.\n+*\n+*   Note: If you have no type constructor -- only an opaque typaram -- then\n+*   you can only copy if the typaram is constrained to ~T; this is because @T\n+*   might be a \"~resource\" box, and making a copy would cause a deep\n+*   resource-copy.\n *\n-*   Note this means that only type parameters constrained to ~T can be copied.\n *\n * MOVING:\n * -------\n *\n-*  A move is made any time you pass-by-move (that is, with 'move' mode) or\n-*  execute the <- operator.\n+*  A move is made any time you pass-by-move (that is, with move mode '-') or\n+*  execute the move ('<-') or swap ('<->') operators.\n *\n */\n \n@@ -124,6 +138,12 @@ fn need_shared_lhs_rhs(tcx: ty::ctxt, a: @ast::expr, b: @ast::expr, op: str) {\n \n fn check_expr(tcx: ty::ctxt, e: @ast::expr) {\n     alt e.node {\n+\n+      // FIXME: These rules do not implement the copy type-constructor\n+      // discrimination described by the block comment at the top of\n+      // this file. This code is wrong; it lets you copy anything\n+      // shared-kind.\n+\n       ast::expr_move(a, b) { need_shared_lhs_rhs(tcx, a, b, \"<-\"); }\n       ast::expr_assign(a, b) { need_shared_lhs_rhs(tcx, a, b, \"=\"); }\n       ast::expr_assign_op(_, a, b) { need_shared_lhs_rhs(tcx, a, b, \"op=\"); }"}, {"sha": "c274191aff4e6c6971425f3d8a252ddacbea1d31", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93f0e9bac36b3487a2359a939a84bd9b35df8660/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f0e9bac36b3487a2359a939a84bd9b35df8660/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=93f0e9bac36b3487a2359a939a84bd9b35df8660", "patch": "@@ -1026,6 +1026,11 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n         result = kind::lower_kind(result, k);\n       }\n       // Unique containers pass through their pointee kind.\n+      //\n+      // FIXME: These rules do not implement the ~ rules given in\n+      // the block comment describing the kind system in kind.rs.\n+      // This code is wrong; it makes ~resource into ~-kind, not\n+      // @-kind as it should be.\n       ty_vec(tm) | ty_uniq(tm) {\n         let k = type_kind(cx, tm.ty);\n         result = kind::lower_kind(result, k);"}]}