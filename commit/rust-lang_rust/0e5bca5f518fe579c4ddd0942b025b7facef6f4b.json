{"sha": "0e5bca5f518fe579c4ddd0942b025b7facef6f4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNWJjYTVmNTE4ZmU1NzljNGRkZDA5NDJiMDI1YjdmYWNlZjZmNGI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T01:51:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T01:51:55Z"}, "message": "Rollup merge of #82255 - nhwn:nonzero-err-as-bug, r=davidtwco\n\nMake `treat_err_as_bug` Option<NonZeroUsize>\n\n`rustc -Z treat-err-as-bug=N` already requires `N` to be nonzero when the argument is parsed, so changing the type from `Option<usize>` to `Option<NonZeroUsize>` is a low-hanging fruit in terms of layout optimization.", "tree": {"sha": "fb71de3227220f73ef26935d45e9e2d7553e8627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb71de3227220f73ef26935d45e9e2d7553e8627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e5bca5f518fe579c4ddd0942b025b7facef6f4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNF+7CRBK7hj4Ov3rIwAAdHIIAKy3Nmt614YEDVTkSQimoqMi\nevXVcHaDCw2BWVLKRlldWwNLVbFKGAnEUf/JvhQhTJf1ZRIT/jzTnvEgzVZlUUSp\n81ofxaheqfJ3X8B+V78IDx1F9H0Ctt403DmLdraxrXeP0Dm7rGZekZWjwnIuO8IH\nBh7Yvdo3WQYsQDCk9NBtvJ8+v2CnK/KC5vu9LNFr+R0pHp7T1Lm2gmBSLRsamp+n\nbNM/FJutvIxIUKFjX2ayahhZwrD3wmDLbcfO/NsySE9p0t/HGIS8HTczJu8Ho9Tw\nfpJlUlRNAP+rDyMIO34v4Vot8iHTfzIkHE6GwzxN0pB2FwywaFfuMjCGbiR1h6c=\n=HEu+\n-----END PGP SIGNATURE-----\n", "payload": "tree fb71de3227220f73ef26935d45e9e2d7553e8627\nparent 8541435e8d238c93cd9c72dae406f4135c162d25\nparent 8ddd846ce118e5f0bb423d310cb38c7f4a76890e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614045115 +0100\ncommitter GitHub <noreply@github.com> 1614045115 +0100\n\nRollup merge of #82255 - nhwn:nonzero-err-as-bug, r=davidtwco\n\nMake `treat_err_as_bug` Option<NonZeroUsize>\n\n`rustc -Z treat-err-as-bug=N` already requires `N` to be nonzero when the argument is parsed, so changing the type from `Option<usize>` to `Option<NonZeroUsize>` is a low-hanging fruit in terms of layout optimization.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5bca5f518fe579c4ddd0942b025b7facef6f4b", "html_url": "https://github.com/rust-lang/rust/commit/0e5bca5f518fe579c4ddd0942b025b7facef6f4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e5bca5f518fe579c4ddd0942b025b7facef6f4b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8541435e8d238c93cd9c72dae406f4135c162d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/8541435e8d238c93cd9c72dae406f4135c162d25", "html_url": "https://github.com/rust-lang/rust/commit/8541435e8d238c93cd9c72dae406f4135c162d25"}, {"sha": "8ddd846ce118e5f0bb423d310cb38c7f4a76890e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ddd846ce118e5f0bb423d310cb38c7f4a76890e", "html_url": "https://github.com/rust-lang/rust/commit/8ddd846ce118e5f0bb423d310cb38c7f4a76890e"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "a0be7442d597a6b136782f346aa449764b8882c3", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0e5bca5f518fe579c4ddd0942b025b7facef6f4b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5bca5f518fe579c4ddd0942b025b7facef6f4b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=0e5bca5f518fe579c4ddd0942b025b7facef6f4b", "patch": "@@ -30,6 +30,7 @@ use rustc_span::{Loc, MultiSpan, Span};\n \n use std::borrow::Cow;\n use std::hash::{Hash, Hasher};\n+use std::num::NonZeroUsize;\n use std::panic;\n use std::path::Path;\n use std::{error, fmt};\n@@ -359,7 +360,7 @@ pub struct HandlerFlags {\n     pub can_emit_warnings: bool,\n     /// If true, error-level diagnostics are upgraded to bug-level.\n     /// (rustc: see `-Z treat-err-as-bug`)\n-    pub treat_err_as_bug: Option<usize>,\n+    pub treat_err_as_bug: Option<NonZeroUsize>,\n     /// If true, immediately emit diagnostics that would otherwise be buffered.\n     /// (rustc: see `-Z dont-buffer-diagnostics` and `-Z treat-err-as-bug`)\n     pub dont_buffer_diagnostics: bool,\n@@ -396,7 +397,7 @@ impl Handler {\n     pub fn with_tty_emitter(\n         color_config: ColorConfig,\n         can_emit_warnings: bool,\n-        treat_err_as_bug: Option<usize>,\n+        treat_err_as_bug: Option<NonZeroUsize>,\n         sm: Option<Lrc<SourceMap>>,\n     ) -> Self {\n         Self::with_tty_emitter_and_flags(\n@@ -424,7 +425,7 @@ impl Handler {\n \n     pub fn with_emitter(\n         can_emit_warnings: bool,\n-        treat_err_as_bug: Option<usize>,\n+        treat_err_as_bug: Option<NonZeroUsize>,\n         emitter: Box<dyn Emitter + sync::Send>,\n     ) -> Self {\n         Handler::with_emitter_and_flags(\n@@ -841,7 +842,7 @@ impl HandlerInner {\n     }\n \n     fn treat_err_as_bug(&self) -> bool {\n-        self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() >= c)\n+        self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() >= c.get())\n     }\n \n     fn print_error_count(&mut self, registry: &Registry) {\n@@ -950,7 +951,7 @@ impl HandlerInner {\n         // This is technically `self.treat_err_as_bug()` but `delay_span_bug` is called before\n         // incrementing `err_count` by one, so we need to +1 the comparing.\n         // FIXME: Would be nice to increment err_count in a more coherent way.\n-        if self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() + 1 >= c) {\n+        if self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() + 1 >= c.get()) {\n             // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n         }\n@@ -1023,7 +1024,7 @@ impl HandlerInner {\n \n     fn panic_if_treat_err_as_bug(&self) {\n         if self.treat_err_as_bug() {\n-            match (self.err_count(), self.flags.treat_err_as_bug.unwrap_or(0)) {\n+            match (self.err_count(), self.flags.treat_err_as_bug.map(|c| c.get()).unwrap_or(0)) {\n                 (1, 1) => panic!(\"aborting due to `-Z treat-err-as-bug=1`\"),\n                 (0, _) | (1, _) => {}\n                 (count, as_bug) => panic!("}, {"sha": "a2e961465681a812d3606d69bbbf386c5053bf72", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e5bca5f518fe579c4ddd0942b025b7facef6f4b/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5bca5f518fe579c4ddd0942b025b7facef6f4b/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=0e5bca5f518fe579c4ddd0942b025b7facef6f4b", "patch": "@@ -20,6 +20,7 @@ use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy}\n use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TlsModel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n+use std::num::NonZeroUsize;\n use std::path::{Path, PathBuf};\n \n type CfgSpecs = FxHashSet<(String, Option<String>)>;\n@@ -595,7 +596,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(tune_cpu, Some(String::from(\"abc\")));\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n     tracked!(trap_unreachable, Some(false));\n-    tracked!(treat_err_as_bug, Some(1));\n+    tracked!(treat_err_as_bug, NonZeroUsize::new(1));\n     tracked!(unleash_the_miri_inside_of_you, true);\n     tracked!(use_ctors_section, Some(true));\n     tracked!(verify_llvm_ir, true);"}, {"sha": "e4f7e140281cd845a594c74b5c0a7b2f06873b44", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e5bca5f518fe579c4ddd0942b025b7facef6f4b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5bca5f518fe579c4ddd0942b025b7facef6f4b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=0e5bca5f518fe579c4ddd0942b025b7facef6f4b", "patch": "@@ -2313,6 +2313,7 @@ crate mod dep_tracking {\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n+    use std::num::NonZeroUsize;\n     use std::path::PathBuf;\n \n     pub trait DepTrackingHash {\n@@ -2353,6 +2354,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(lint::Level);\n     impl_dep_tracking_hash_via_hash!(Option<bool>);\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n+    impl_dep_tracking_hash_via_hash!(Option<NonZeroUsize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n     impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n     impl_dep_tracking_hash_via_hash!(Option<Vec<String>>);"}, {"sha": "d439753d042bbc9d875a2b43faee49b673625269", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e5bca5f518fe579c4ddd0942b025b7facef6f4b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5bca5f518fe579c4ddd0942b025b7facef6f4b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=0e5bca5f518fe579c4ddd0942b025b7facef6f4b", "patch": "@@ -16,6 +16,7 @@ use std::collections::BTreeMap;\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::Hasher;\n+use std::num::NonZeroUsize;\n use std::path::PathBuf;\n use std::str;\n \n@@ -591,10 +592,10 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_treat_err_as_bug(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n+        fn parse_treat_err_as_bug(slot: &mut Option<NonZeroUsize>, v: Option<&str>) -> bool {\n             match v {\n-                Some(s) => { *slot = s.parse().ok().filter(|&x| x != 0); slot.unwrap_or(0) != 0 }\n-                None => { *slot = Some(1); true }\n+                Some(s) => { *slot = s.parse().ok(); slot.is_some() }\n+                None => { *slot = NonZeroUsize::new(1); true }\n             }\n         }\n \n@@ -1141,7 +1142,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n     trap_unreachable: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\"),\n-    treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n+    treat_err_as_bug: Option<NonZeroUsize> = (None, parse_treat_err_as_bug, [TRACKED],\n         \"treat error number `val` that occurs as bug\"),\n     trim_diagnostic_paths: bool = (true, parse_bool, [UNTRACKED],\n         \"in diagnostics, use heuristics to shorten paths referring to items\"),"}]}