{"sha": "2811dd64ec926a923852efe380886177b2221825", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MTFkZDY0ZWM5MjZhOTIzODUyZWZlMzgwODg2MTc3YjIyMjE4MjU=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-05-31T20:01:56Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-31T21:35:42Z"}, "message": "added missing PatKind::Path + tests", "tree": {"sha": "1356f6bd44497eace30d13927536b3eaf10e87af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1356f6bd44497eace30d13927536b3eaf10e87af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2811dd64ec926a923852efe380886177b2221825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2811dd64ec926a923852efe380886177b2221825", "html_url": "https://github.com/rust-lang/rust/commit/2811dd64ec926a923852efe380886177b2221825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2811dd64ec926a923852efe380886177b2221825/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e18dc948c76793251524cbb439a37cb33742daad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e18dc948c76793251524cbb439a37cb33742daad", "html_url": "https://github.com/rust-lang/rust/commit/e18dc948c76793251524cbb439a37cb33742daad"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "46bd251016b6d41ae52626968ab5b5088f6f6803", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2811dd64ec926a923852efe380886177b2221825/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2811dd64ec926a923852efe380886177b2221825/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=2811dd64ec926a923852efe380886177b2221825", "patch": "@@ -201,6 +201,7 @@ fn check_single_match_opt_like(cx: &LateContext, ex: &Expr, arms: &[Arm], expr:\n             path.to_string()\n         }\n         PatKind::Binding(BindByValue(MutImmutable), ident, None) => ident.node.to_string(),\n+        PatKind::Path(ref path) => path.to_string(),\n         _ => return,\n     };\n "}, {"sha": "e9c4023e22604f9ff17b6d6d612049e90f823b6a", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2811dd64ec926a923852efe380886177b2221825/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2811dd64ec926a923852efe380886177b2221825/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=2811dd64ec926a923852efe380886177b2221825", "patch": "@@ -148,6 +148,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&PatKind::Binding(ref lb, ref li, ref lp), &PatKind::Binding(ref rb, ref ri, ref rp)) => {\n                 lb == rb && li.node.as_str() == ri.node.as_str() && both(lp, rp, |l, r| self.eq_pat(l, r))\n             }\n+            (&PatKind::Path(ref l), &PatKind::Path(ref r)) => self.eq_path(l, r),\n             (&PatKind::Lit(ref l), &PatKind::Lit(ref r)) => self.eq_expr(l, r),\n             (&PatKind::QPath(ref ls, ref lp), &PatKind::QPath(ref rs, ref rp)) => {\n                 self.eq_qself(ls, rs) && self.eq_path(lp, rp)"}, {"sha": "affa7e4e86e6e76ab7a24e77eb920d4016451865", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2811dd64ec926a923852efe380886177b2221825/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2811dd64ec926a923852efe380886177b2221825/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=2811dd64ec926a923852efe380886177b2221825", "patch": "@@ -216,6 +216,12 @@ fn overlapping() {\n         11 ... 50 => println!(\"0 ... 10\"),\n         _ => (),\n     }\n+    \n+    if let None = Some(42) {\n+        // nothing\n+    } else if let None = Some(42) {\n+        // another nothing :-)\n+    }\n }\n \n fn main() {"}]}