{"sha": "1f98ef7793dde6c3a3c216d55ae5858da7e0c34e", "node_id": "C_kwDOAAsO6NoAKDFmOThlZjc3OTNkZGU2YzNhM2MyMTZkNTVhZTU4NThkYTdlMGMzNGU", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-02-11T02:26:12Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-02-11T02:26:12Z"}, "message": "Implement `AsFd` for `&T` and `&mut T`.\n\nAdd implementations of `AsFd` for `&T` and `&mut T`, so that users can\nwrite code like this:\n\n```rust\npub fn fchown<F: AsFd>(fd: F, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {\n```\n\nwith `fd: F` rather than `fd: &F`.\n\nAnd similar for `AsHandle` and `AsSocket` on Windows.\n\nAlso, adjust the `fchown` example to pass the file by reference. The\ncode can work either way now, but passing by reference is more likely\nto be what users will want to do.\n\nThis is an alternative to #93869, and is a simpler way to achieve the\nsame goals: users don't need to pass borrowed-`BorrowedFd` arguments,\nand it prevents a pitfall in the case where users write `fd: F` instead\nof `fd: &F`.", "tree": {"sha": "464a175b6c7276400c9986c3d5a924ac109188c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/464a175b6c7276400c9986c3d5a924ac109188c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e", "html_url": "https://github.com/rust-lang/rust/commit/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "502d6aa47b4118fea1e326529e71b25a99b0d6c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/502d6aa47b4118fea1e326529e71b25a99b0d6c5", "html_url": "https://github.com/rust-lang/rust/commit/502d6aa47b4118fea1e326529e71b25a99b0d6c5"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "71c660e7186751be890291f7d5d1127a1d23b850", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=1f98ef7793dde6c3a3c216d55ae5858da7e0c34e", "patch": "@@ -200,6 +200,22 @@ pub trait AsFd {\n     fn as_fd(&self) -> BorrowedFd<'_>;\n }\n \n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsFd> AsFd for &T {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        T::as_fd(self)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsFd> AsFd for &mut T {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        T::as_fd(self)\n+    }\n+}\n+\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl AsFd for BorrowedFd<'_> {\n     #[inline]"}, {"sha": "75d65e6d5fc036bff10c39ab60f6cd2636b62a79", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=1f98ef7793dde6c3a3c216d55ae5858da7e0c34e", "patch": "@@ -966,7 +966,7 @@ pub fn chown<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::\n ///\n /// fn main() -> std::io::Result<()> {\n ///     let f = std::fs::File::open(\"/file\")?;\n-///     fs::fchown(f, Some(0), Some(0))?;\n+///     fs::fchown(&f, Some(0), Some(0))?;\n ///     Ok(())\n /// }\n /// ```"}, {"sha": "8df6c54a4144e9f42c1314bbb07d12d333d16cdf", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=1f98ef7793dde6c3a3c216d55ae5858da7e0c34e", "patch": "@@ -316,6 +316,22 @@ pub trait AsHandle {\n     fn as_handle(&self) -> BorrowedHandle<'_>;\n }\n \n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsHandle> AsHandle for &T {\n+    #[inline]\n+    fn as_handle(&self) -> BorrowedHandle<'_> {\n+        T::as_handle(self)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsHandle> AsHandle for &mut T {\n+    #[inline]\n+    fn as_handle(&self) -> BorrowedHandle<'_> {\n+        T::as_handle(self)\n+    }\n+}\n+\n impl AsHandle for BorrowedHandle<'_> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {"}, {"sha": "2f13eb77a1b948519bb93e51ceda78e8cfe20f5c", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=1f98ef7793dde6c3a3c216d55ae5858da7e0c34e", "patch": "@@ -210,6 +210,22 @@ pub trait AsSocket {\n     fn as_socket(&self) -> BorrowedSocket<'_>;\n }\n \n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsSocket> AsSocket for &T {\n+    #[inline]\n+    fn as_socket(&self) -> BorrowedSocket<'_> {\n+        T::as_socket(self)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsSocket> AsSocket for &mut T {\n+    #[inline]\n+    fn as_socket(&self) -> BorrowedSocket<'_> {\n+        T::as_socket(self)\n+    }\n+}\n+\n impl AsSocket for BorrowedSocket<'_> {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {"}]}