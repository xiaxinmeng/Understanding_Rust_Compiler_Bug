{"sha": "269e2f22a942919d421b89287d5669b2c2607917", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OWUyZjIyYTk0MjkxOWQ0MjFiODkyODdkNTY2OWIyYzI2MDc5MTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-14T16:05:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-14T16:05:56Z"}, "message": "More declarative fs massaging", "tree": {"sha": "5ae2ae26e9ab5cf604a2d8829a0aa8077fbfaf67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ae2ae26e9ab5cf604a2d8829a0aa8077fbfaf67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/269e2f22a942919d421b89287d5669b2c2607917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/269e2f22a942919d421b89287d5669b2c2607917", "html_url": "https://github.com/rust-lang/rust/commit/269e2f22a942919d421b89287d5669b2c2607917", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/269e2f22a942919d421b89287d5669b2c2607917/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce29497e4324d3e2f2c7c696a212672dbdb46884", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce29497e4324d3e2f2c7c696a212672dbdb46884", "html_url": "https://github.com/rust-lang/rust/commit/ce29497e4324d3e2f2c7c696a212672dbdb46884"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "540a66130bd4110eac62a16c790607d3507ab23f", "filename": "xtask/src/install.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/269e2f22a942919d421b89287d5669b2c2607917/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269e2f22a942919d421b89287d5669b2c2607917/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=269e2f22a942919d421b89287d5669b2c2607917", "patch": "@@ -1,11 +1,10 @@\n //! Installs rust-analyzer language server and/or editor plugin.\n \n-use std::{env, fs, path::PathBuf, str};\n+use std::{env, path::PathBuf, str};\n \n use anyhow::{bail, format_err, Context, Result};\n-use walkdir::WalkDir;\n \n-use crate::not_bash::{pushd, run};\n+use crate::not_bash::{ls, pushd, rm, run};\n \n // Latest stable, feel free to send a PR if this lags behind.\n const REQUIRED_RUST_VERSION: u32 = 41;\n@@ -85,15 +84,6 @@ fn fix_path_for_mac() -> Result<()> {\n fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n     let _dir = pushd(\"./editors/code\");\n \n-    let list_vsixes = || {\n-        WalkDir::new(\"./editors/code\")\n-            .max_depth(1)\n-            .into_iter()\n-            .map(|it| it.unwrap())\n-            .map(|it| it.path().to_owned())\n-            .filter(|it| it.file_name().unwrap_or_default().to_string_lossy().ends_with(\".vsix\"))\n-    };\n-\n     let find_code = |f: fn(&str) -> bool| -> Result<&'static str> {\n         [\"code\", \"code-insiders\", \"codium\", \"code-oss\"]\n             .iter()\n@@ -110,27 +100,27 @@ fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n         run!(\"npm install\")?;\n \n         let vsix_pkg = {\n-            list_vsixes().try_for_each(fs::remove_file)?;\n+            rm(\"*.vsix\")?;\n             run!(\"npm run package --scripts-prepend-node-path\")?;\n-            list_vsixes().next().unwrap().file_name().unwrap().to_string_lossy().to_string()\n+            ls(\"*.vsix\")?.pop().unwrap()\n         };\n \n         let code = find_code(|bin| run!(\"{} --version\", bin).is_ok())?;\n-        run!(\"{} --install-extension ./{} --force\", code, vsix_pkg)?;\n+        run!(\"{} --install-extension {} --force\", code, vsix_pkg.display())?;\n         installed_extensions = run!(\"{} --list-extensions\", code; echo = false)?;\n     } else {\n         run!(\"cmd.exe /c npm --version\")\n             .context(\"`npm` is required to build the VS Code plugin\")?;\n         run!(\"cmd.exe /c npm install\")?;\n \n         let vsix_pkg = {\n-            list_vsixes().try_for_each(fs::remove_file)?;\n+            rm(\"*.vsix\")?;\n             run!(\"cmd.exe /c npm run package\")?;\n-            list_vsixes().next().unwrap().file_name().unwrap().to_string_lossy().to_string()\n+            ls(\"*.vsix\")?.pop().unwrap()\n         };\n \n         let code = find_code(|bin| run!(\"cmd.exe /c {}.cmd --version\", bin).is_ok())?;\n-        run!(r\"cmd.exe /c {}.cmd --install-extension ./{} --force\", code, vsix_pkg)?;\n+        run!(r\"cmd.exe /c {}.cmd --install-extension {} --force\", code, vsix_pkg.display())?;\n         installed_extensions = run!(\"cmd.exe /c {}.cmd --list-extensions\", code; echo = false)?;\n     }\n "}, {"sha": "4ec1efa739a5a717c5685074705c870e22423779", "filename": "xtask/src/not_bash.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/269e2f22a942919d421b89287d5669b2c2607917/xtask%2Fsrc%2Fnot_bash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269e2f22a942919d421b89287d5669b2c2607917/xtask%2Fsrc%2Fnot_bash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fnot_bash.rs?ref=269e2f22a942919d421b89287d5669b2c2607917", "patch": "@@ -2,6 +2,8 @@\n use std::{\n     cell::RefCell,\n     env,\n+    ffi::OsStr,\n+    fs,\n     path::PathBuf,\n     process::{Command, Stdio},\n };\n@@ -33,6 +35,31 @@ impl Drop for Pushd {\n     }\n }\n \n+pub fn rm(glob: &str) -> Result<()> {\n+    let cwd = Env::with(|env| env.cwd());\n+    ls(glob)?.into_iter().try_for_each(|it| fs::remove_file(cwd.join(it)))?;\n+    Ok(())\n+}\n+\n+pub fn ls(glob: &str) -> Result<Vec<PathBuf>> {\n+    let cwd = Env::with(|env| env.cwd());\n+    let mut res = Vec::new();\n+    for entry in fs::read_dir(&cwd)? {\n+        let entry = entry?;\n+        if matches(&entry.file_name(), glob) {\n+            let path = entry.path();\n+            let path = path.strip_prefix(&cwd).unwrap();\n+            res.push(path.to_path_buf())\n+        }\n+    }\n+    return Ok(res);\n+\n+    fn matches(file_name: &OsStr, glob: &str) -> bool {\n+        assert!(glob.starts_with('*'));\n+        file_name.to_string_lossy().ends_with(&glob[1..])\n+    }\n+}\n+\n #[doc(hidden)]\n pub fn run_process(cmd: String, echo: bool) -> Result<String> {\n     run_process_inner(&cmd, echo).with_context(|| format!(\"process `{}` failed\", cmd))"}]}