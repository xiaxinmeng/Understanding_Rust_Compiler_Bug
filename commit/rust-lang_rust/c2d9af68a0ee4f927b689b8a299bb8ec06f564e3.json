{"sha": "c2d9af68a0ee4f927b689b8a299bb8ec06f564e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZDlhZjY4YTBlZTRmOTI3YjY4OWI4YTI5OWJiOGVjMDZmNTY0ZTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-21T08:40:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-21T08:40:30Z"}, "message": "Rollup merge of #76846 - botika:master, r=davidtwco\n\nAvoiding unnecesary allocations at rustc_errors\n\nSimplify the code avoiding allocations with easy alternative", "tree": {"sha": "07dd16bb235f938ce9d5d6322d2043c554bfe8db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07dd16bb235f938ce9d5d6322d2043c554bfe8db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d9af68a0ee4f927b689b8a299bb8ec06f564e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaGb+CRBK7hj4Ov3rIwAAdHIIAF6qgvQSZBSP9luZ9acydwPU\n7e8rVcyGuZ8CvLBwxOt02SVNQVBgtRH+VVCdkT/pOcwSXiNTH4HVW1lX6VAA3RYN\n3iAIPPj6WMdoNYtmnTEEpN6EouAWr9CYuk+hvXp9gNhBdQR2MV6Xr0wElrjZO5nn\nipC8ggTRw3kuZjZuOgQQ5FEyHp0oX+IDnkGUkhzwDzlxafo55SqqcW6cgU+rOGeV\n0K7CCIJLXSkJSI4J/4axKfOFIQcbGmLsZyEoH2u16yDT58FgFpDWK7gikVP3QRrN\nnYhZg0rz0LEMkw+JtlDX4LBHmmsz793+JzfdXP1nUtSz51ii5HuQ79Dtdsb2nKw=\n=g/TW\n-----END PGP SIGNATURE-----\n", "payload": "tree 07dd16bb235f938ce9d5d6322d2043c554bfe8db\nparent 8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67\nparent 28cfa9730eec41314dee99323f7d20aaadde9e0e\nauthor Ralf Jung <post@ralfj.de> 1600677630 +0200\ncommitter GitHub <noreply@github.com> 1600677630 +0200\n\nRollup merge of #76846 - botika:master, r=davidtwco\n\nAvoiding unnecesary allocations at rustc_errors\n\nSimplify the code avoiding allocations with easy alternative\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d9af68a0ee4f927b689b8a299bb8ec06f564e3", "html_url": "https://github.com/rust-lang/rust/commit/c2d9af68a0ee4f927b689b8a299bb8ec06f564e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d9af68a0ee4f927b689b8a299bb8ec06f564e3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "html_url": "https://github.com/rust-lang/rust/commit/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67"}, {"sha": "28cfa9730eec41314dee99323f7d20aaadde9e0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/28cfa9730eec41314dee99323f7d20aaadde9e0e", "html_url": "https://github.com/rust-lang/rust/commit/28cfa9730eec41314dee99323f7d20aaadde9e0e"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "98cbf98df92b4d0888e20c3d95adf40923138998", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9af68a0ee4f927b689b8a299bb8ec06f564e3/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9af68a0ee4f927b689b8a299bb8ec06f564e3/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=c2d9af68a0ee4f927b689b8a299bb8ec06f564e3", "patch": "@@ -1227,26 +1227,22 @@ impl EmitterWriter {\n             }\n             draw_note_separator(&mut buffer, 0, max_line_num_len + 1);\n             if *level != Level::FailureNote {\n-                let level_str = level.to_string();\n-                if !level_str.is_empty() {\n-                    buffer.append(0, &level_str, Style::MainHeaderMsg);\n-                    buffer.append(0, \": \", Style::NoStyle);\n-                }\n+                buffer.append(0, level.to_str(), Style::MainHeaderMsg);\n+                buffer.append(0, \": \", Style::NoStyle);\n             }\n             self.msg_to_buffer(&mut buffer, msg, max_line_num_len, \"note\", None);\n         } else {\n-            let level_str = level.to_string();\n             // The failure note level itself does not provide any useful diagnostic information\n-            if *level != Level::FailureNote && !level_str.is_empty() {\n-                buffer.append(0, &level_str, Style::Level(*level));\n+            if *level != Level::FailureNote {\n+                buffer.append(0, level.to_str(), Style::Level(*level));\n             }\n             // only render error codes, not lint codes\n             if let Some(DiagnosticId::Error(ref code)) = *code {\n                 buffer.append(0, \"[\", Style::Level(*level));\n                 buffer.append(0, &code, Style::Level(*level));\n                 buffer.append(0, \"]\", Style::Level(*level));\n             }\n-            if *level != Level::FailureNote && !level_str.is_empty() {\n+            if *level != Level::FailureNote {\n                 buffer.append(0, \": \", header_style);\n             }\n             for &(ref text, _) in msg.iter() {\n@@ -1548,11 +1544,9 @@ impl EmitterWriter {\n         let mut buffer = StyledBuffer::new();\n \n         // Render the suggestion message\n-        let level_str = level.to_string();\n-        if !level_str.is_empty() {\n-            buffer.append(0, &level_str, Style::Level(*level));\n-            buffer.append(0, \": \", Style::HeaderMsg);\n-        }\n+        buffer.append(0, level.to_str(), Style::Level(*level));\n+        buffer.append(0, \": \", Style::HeaderMsg);\n+\n         self.msg_to_buffer(\n             &mut buffer,\n             &[(suggestion.msg.to_owned(), Style::NoStyle)],"}, {"sha": "b16fe5603c1001f74868b926bf126f99f0d83075", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9af68a0ee4f927b689b8a299bb8ec06f564e3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9af68a0ee4f927b689b8a299bb8ec06f564e3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=c2d9af68a0ee4f927b689b8a299bb8ec06f564e3", "patch": "@@ -973,16 +973,14 @@ impl HandlerInner {\n \n     fn panic_if_treat_err_as_bug(&self) {\n         if self.treat_err_as_bug() {\n-            let s = match (self.err_count(), self.flags.treat_err_as_bug.unwrap_or(0)) {\n-                (0, _) => return,\n-                (1, 1) => \"aborting due to `-Z treat-err-as-bug=1`\".to_string(),\n-                (1, _) => return,\n-                (count, as_bug) => format!(\n+            match (self.err_count(), self.flags.treat_err_as_bug.unwrap_or(0)) {\n+                (1, 1) => panic!(\"aborting due to `-Z treat-err-as-bug=1`\"),\n+                (0, _) | (1, _) => {}\n+                (count, as_bug) => panic!(\n                     \"aborting after {} errors due to `-Z treat-err-as-bug={}`\",\n                     count, as_bug,\n                 ),\n-            };\n-            panic!(s);\n+            }\n         }\n     }\n }"}]}