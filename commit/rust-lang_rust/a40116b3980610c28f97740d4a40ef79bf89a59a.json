{"sha": "a40116b3980610c28f97740d4a40ef79bf89a59a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MDExNmIzOTgwNjEwYzI4Zjk3NzQwZDRhNDBlZjc5YmY4OWE1OWE=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-17T18:12:51Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-17T22:53:19Z"}, "message": "stdlib: added getcwd and a convenience function to make relative paths absolute. This will be helpful for #441.", "tree": {"sha": "2cd8e82fde195b865ea38aabe5d2309fdb65729e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd8e82fde195b865ea38aabe5d2309fdb65729e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40116b3980610c28f97740d4a40ef79bf89a59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40116b3980610c28f97740d4a40ef79bf89a59a", "html_url": "https://github.com/rust-lang/rust/commit/a40116b3980610c28f97740d4a40ef79bf89a59a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40116b3980610c28f97740d4a40ef79bf89a59a/comments", "author": null, "committer": null, "parents": [{"sha": "175fd8ee73743a08174b5fa7203798008c927fea", "url": "https://api.github.com/repos/rust-lang/rust/commits/175fd8ee73743a08174b5fa7203798008c927fea", "html_url": "https://github.com/rust-lang/rust/commit/175fd8ee73743a08174b5fa7203798008c927fea"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "99c823381226146022e9aed5d0c36e4c2f33764e", "filename": "src/lib/fs.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffs.rs?ref=a40116b3980610c28f97740d4a40ef79bf89a59a", "patch": "@@ -1,4 +1,5 @@\n \n+import os::getcwd;\n \n native \"rust\" mod rustrt {\n     fn rust_file_is_dir(str path) -> int;\n@@ -56,6 +57,23 @@ fn list_dir(path p) -> vec[str] {\n     }\n     ret full_paths;\n }\n+\n+// FIXME: Windows absolute paths can start with \\ for C:\\ or\n+// whatever... However, we're under MinGW32 so we have the same rules and\n+// posix has.\n+fn path_is_absolute(path p) -> bool {\n+    ret p.(0) == '/';\n+}\n+\n+fn make_absolute(path p) -> path {\n+    if(path_is_absolute(p)) {\n+        ret p;\n+    }\n+    else {\n+        ret connect(getcwd(), p);\n+    }\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "b3d5cea3ac3b863c299e679ccd362e331890d554", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=a40116b3980610c28f97740d4a40ef79bf89a59a", "patch": "@@ -72,6 +72,14 @@ fn waitpid(int pid) -> int {\n     assert (os::libc::waitpid(pid, vec::buf(status), 0) != -1);\n     ret status.(0);\n }\n+\n+native \"rust\" mod rustrt {\n+    fn rust_getcwd() -> str;\n+}\n+\n+fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n+\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "2ab7e7b748a5d96836c9b2980af4e1d32ac1eca4", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=a40116b3980610c28f97740d4a40ef79bf89a59a", "patch": "@@ -69,6 +69,14 @@ fn waitpid(int pid) -> int {\n     assert (os::libc::waitpid(pid, vec::buf(status), 0) != -1);\n     ret status.(0);\n }\n+\n+native \"rust\" mod rustrt {\n+    fn rust_getcwd() -> str;\n+}\n+\n+fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n+\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "c962fa7250f6ff05bf2b53acf67cc6325cedaa0d", "filename": "src/lib/posix_fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Fposix_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Fposix_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fposix_fs.rs?ref=a40116b3980610c28f97740d4a40ef79bf89a59a", "patch": "@@ -1,5 +1,4 @@\n \n-\n native \"rust\" mod rustrt {\n     fn rust_list_files(str path) -> vec[str];\n     fn rust_dirent_filename(os::libc::dirent ent) -> str;\n@@ -36,6 +35,7 @@ fn list_dir(str path) -> vec[str] {\n const char path_sep = '/';\n \n const char alt_path_sep = '/';\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "4b3d6ba10bc731e199c9c6122b9fee8ce354400f", "filename": "src/lib/win32_fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Fwin32_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Fwin32_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_fs.rs?ref=a40116b3980610c28f97740d4a40ef79bf89a59a", "patch": "@@ -7,7 +7,6 @@ native \"rust\" mod rustrt {\n \n fn list_dir(str path) -> vec[str] { ret rustrt::rust_list_files(path + \"*\"); }\n \n-\n /* FIXME: win32 path handling actually accepts '/' or '\\' and has subtly\n  * different semantics for each. Since we build on mingw, we are usually\n  * dealing with /-separated paths. But the whole interface to splitting and"}, {"sha": "1a8d2071d2e452bb063cb3590ae42b665ae39a8e", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=a40116b3980610c28f97740d4a40ef79bf89a59a", "patch": "@@ -59,9 +59,13 @@ fn fd_FILE(int fd) -> libc::FILE { ret libc::_fdopen(fd, str::buf(\"r\")); }\n \n native \"rust\" mod rustrt {\n     fn rust_process_wait(int handle) -> int;\n+    fn rust_getcwd() -> str;\n }\n \n fn waitpid(int pid) -> int { ret rustrt::rust_process_wait(pid); }\n+\n+fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "afa022fe533a637aabdd8ebd1fbe7df76240edb4", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a40116b3980610c28f97740d4a40ef79bf89a59a/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=a40116b3980610c28f97740d4a40ef79bf89a59a", "patch": "@@ -55,6 +55,36 @@ last_os_error(rust_task *task) {\n     return st;\n }\n \n+extern \"C\" CDECL rust_str *\n+rust_getcwd(rust_task *task) {\n+    rust_dom *dom = task->dom;\n+    LOG(task, task, \"rust_getcwd()\");\n+\n+    char cbuf[BUF_BYTES];\n+\n+#if defined(__WIN32__)\n+    if (!_getcwd(cbuf, sizeof(cbuf))) {\n+#else\n+        if (!getcwd(cbuf, sizeof(cbuf))) {\n+#endif\n+        task->fail(1);\n+        return NULL;\n+    }\n+\n+    size_t fill = strlen(cbuf) + 1;\n+    size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n+    void *mem = dom->malloc(alloc, memory_region::LOCAL);\n+    if (!mem) {\n+        task->fail(1);\n+        return NULL;\n+    }\n+\n+    rust_str *st;\n+    st = new (mem) rust_str(dom, alloc, fill, (const uint8_t *)cbuf);\n+\n+    return st;    \n+}\n+\n extern \"C\" CDECL\n void squareroot(rust_task *task, double *input, double *output) {\n     *output = sqrt(*input);"}]}