{"sha": "bbf33836b9adfe4328aefa108c421e670a3923b7", "node_id": "C_kwDOAAsO6NoAKGJiZjMzODM2YjlhZGZlNDMyOGFlZmExMDhjNDIxZTY3MGEzOTIzYjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-31T20:37:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-31T20:43:29Z"}, "message": "Fingerprint even when incr comp is disabled in debug mode", "tree": {"sha": "5f473f694ac359d2fa00140daa8320a8c07ee41f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f473f694ac359d2fa00140daa8320a8c07ee41f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf33836b9adfe4328aefa108c421e670a3923b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf33836b9adfe4328aefa108c421e670a3923b7", "html_url": "https://github.com/rust-lang/rust/commit/bbf33836b9adfe4328aefa108c421e670a3923b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf33836b9adfe4328aefa108c421e670a3923b7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f361413cbf44ce2f144df59fc440cd484af4a56e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f361413cbf44ce2f144df59fc440cd484af4a56e", "html_url": "https://github.com/rust-lang/rust/commit/f361413cbf44ce2f144df59fc440cd484af4a56e"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "623be668464e8f141ea29f9dfd8a6fb3b937facc", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf33836b9adfe4328aefa108c421e670a3923b7/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf33836b9adfe4328aefa108c421e670a3923b7/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=bbf33836b9adfe4328aefa108c421e670a3923b7", "patch": "@@ -3,6 +3,7 @@\n #![feature(hash_raw_entry)]\n #![feature(min_specialization)]\n #![feature(extern_types)]\n+#![feature(let_chains)]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]"}, {"sha": "1f1bb36aaceaae0f3f114b4cb063635654d01311", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bbf33836b9adfe4328aefa108c421e670a3923b7/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf33836b9adfe4328aefa108c421e670a3923b7/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=bbf33836b9adfe4328aefa108c421e670a3923b7", "patch": "@@ -2,7 +2,7 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::dep_graph::{DepContext, DepKind, DepNode, DepNodeIndex};\n+use crate::dep_graph::{DepContext, DepKind, DepNode, DepNodeIndex, DepNodeParams};\n use crate::ich::StableHashingContext;\n use crate::query::caches::QueryCache;\n use crate::query::job::{report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo};\n@@ -428,12 +428,29 @@ where\n \n     // Fast path for when incr. comp. is off.\n     if !dep_graph.is_fully_enabled() {\n+        // Fingerprint the key, just to assert that it doesn't\n+        // have anything we don't consider hashable\n+        if cfg!(debug_assertions) {\n+            let _ = key.to_fingerprint(*qcx.dep_context());\n+        }\n+\n         let prof_timer = qcx.dep_context().profiler().query_provider();\n         let result = qcx.start_query(job_id, Q::DEPTH_LIMIT, None, || {\n             Q::compute(qcx, &key)(*qcx.dep_context(), key)\n         });\n         let dep_node_index = dep_graph.next_virtual_depnode_index();\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n+\n+        // Similarly, fingerprint the result to assert that\n+        // it doesn't have anything not considered hashable.\n+        if cfg!(debug_assertions)\n+            && let Some(hash_result) = Q::HASH_RESULT\n+        {\n+            qcx.dep_context().with_stable_hashing_context(|mut hcx| {\n+                hash_result(&mut hcx, &result);\n+            });\n+        }\n+\n         return (result, dep_node_index);\n     }\n "}]}