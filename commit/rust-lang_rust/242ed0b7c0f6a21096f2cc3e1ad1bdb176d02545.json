{"sha": "242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MmVkMGI3YzBmNmEyMTA5NmYyY2MzZTFhZDFiZGIxNzZkMDI1NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-27T12:55:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-27T12:55:23Z"}, "message": "Auto merge of #22930 - Gankro:entry_3, r=aturon\n\nRFC pending, but this is the patch that does it.\r\n\r\nTotally untested. Likely needs some removed imports. std::collections docs should also be updated to provide better examples.\r\n\r\nCloses #23508", "tree": {"sha": "1fe893aa6129544fd0bde0fc58aa3d41cc33b5bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fe893aa6129544fd0bde0fc58aa3d41cc33b5bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "html_url": "https://github.com/rust-lang/rust/commit/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a183f0274316596bf9405944d4f0468d8c93e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/53a183f0274316596bf9405944d4f0468d8c93e4", "html_url": "https://github.com/rust-lang/rust/commit/53a183f0274316596bf9405944d4f0468d8c93e4"}, {"sha": "1b98f6da7af8cea31066588776b7190c511455b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b98f6da7af8cea31066588776b7190c511455b1", "html_url": "https://github.com/rust-lang/rust/commit/1b98f6da7af8cea31066588776b7190c511455b1"}], "stats": {"total": 195, "additions": 102, "deletions": 93}, "files": [{"sha": "04a692cc3aea2b59d63675bb648ddcd900418d4b", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -1143,15 +1143,39 @@ impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n }\n \n impl<'a, K: Ord, V> Entry<'a, K, V> {\n-    /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n     #[unstable(feature = \"std_misc\",\n                reason = \"will soon be replaced by or_insert\")]\n+    #[deprecated(since = \"1.0\",\n+                reason = \"replaced with more ergonomic `or_insert` and `or_insert_with`\")]\n+    /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, K, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),\n             Vacant(entry) => Err(entry),\n         }\n     }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the default if empty, and returns\n+    /// a mutable reference to the value in the entry.\n+    pub fn or_insert(self, default: V) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default),\n+        }\n+    }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the result of the default function if empty,\n+    /// and returns a mutable reference to the value in the entry.\n+    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default()),\n+        }\n+    }\n }\n \n impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n@@ -1563,21 +1587,12 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// ```\n     /// # #![feature(collections)]\n     /// use std::collections::BTreeMap;\n-    /// use std::collections::btree_map::Entry;\n     ///\n     /// let mut count: BTreeMap<&str, usize> = BTreeMap::new();\n     ///\n     /// // count the number of occurrences of letters in the vec\n-    /// for x in vec![\"a\",\"b\",\"a\",\"c\",\"a\",\"b\"].iter() {\n-    ///     match count.entry(*x) {\n-    ///         Entry::Vacant(view) => {\n-    ///             view.insert(1);\n-    ///         },\n-    ///         Entry::Occupied(mut view) => {\n-    ///             let v = view.get_mut();\n-    ///             *v += 1;\n-    ///         },\n-    ///     }\n+    /// for x in vec![\"a\",\"b\",\"a\",\"c\",\"a\",\"b\"] {\n+    ///     *count.entry(x).or_insert(0) += 1;\n     /// }\n     ///\n     /// assert_eq!(count[\"a\"], 3);"}, {"sha": "58f9101d1d366046597aa756dcc5ab7eafc19f39", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -632,21 +632,12 @@ impl<V> VecMap<V> {\n     /// ```\n     /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n-    /// use std::collections::vec_map::Entry;\n     ///\n     /// let mut count: VecMap<u32> = VecMap::new();\n     ///\n     /// // count the number of occurrences of numbers in the vec\n-    /// for x in vec![1, 2, 1, 2, 3, 4, 1, 2, 4].iter() {\n-    ///     match count.entry(*x) {\n-    ///         Entry::Vacant(view) => {\n-    ///             view.insert(1);\n-    ///         },\n-    ///         Entry::Occupied(mut view) => {\n-    ///             let v = view.get_mut();\n-    ///             *v += 1;\n-    ///         },\n-    ///     }\n+    /// for x in vec![1, 2, 1, 2, 3, 4, 1, 2, 4] {\n+    ///     *count.entry(x).or_insert(0) += 1;\n     /// }\n     ///\n     /// assert_eq!(count[1], 3);\n@@ -675,13 +666,37 @@ impl<V> VecMap<V> {\n impl<'a, V> Entry<'a, V> {\n     #[unstable(feature = \"collections\",\n                reason = \"will soon be replaced by or_insert\")]\n+    #[deprecated(since = \"1.0\",\n+                reason = \"replaced with more ergonomic `or_insert` and `or_insert_with`\")]\n     /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),\n             Vacant(entry) => Err(entry),\n         }\n     }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the default if empty, and returns\n+    /// a mutable reference to the value in the entry.\n+    pub fn or_insert(self, default: V) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default),\n+        }\n+    }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the result of the default function if empty,\n+    /// and returns a mutable reference to the value in the entry.\n+    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default()),\n+        }\n+    }\n }\n \n impl<'a, V> VacantEntry<'a, V> {"}, {"sha": "80fc3769453427f4815464ccbca410dd2c4129d4", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -426,8 +426,8 @@ impl<'a> Context<'a> {\n             info!(\"lib candidate: {}\", path.display());\n \n             let hash_str = hash.to_string();\n-            let slot = candidates.entry(hash_str).get().unwrap_or_else(\n-                |vacant_entry| vacant_entry.insert((HashMap::new(), HashMap::new())));\n+            let slot = candidates.entry(hash_str)\n+                                 .or_insert_with(|| (HashMap::new(), HashMap::new()));\n             let (ref mut rlibs, ref mut dylibs) = *slot;\n             if rlib {\n                 rlibs.insert(fs::realpath(path).unwrap(), kind);"}, {"sha": "0d58fd2702f680e692933464c594e232ec1d1188", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -160,12 +160,7 @@ fn build_nodeid_to_index(decl: Option<&ast::FnDecl>,\n \n     cfg.graph.each_node(|node_idx, node| {\n         if let cfg::CFGNodeData::AST(id) = node.data {\n-            match index.entry(id).get() {\n-                Ok(v) => v.push(node_idx),\n-                Err(e) => {\n-                    e.insert(vec![node_idx]);\n-                }\n-            }\n+            index.entry(id).or_insert(vec![]).push(node_idx);\n         }\n         true\n     });\n@@ -185,12 +180,7 @@ fn build_nodeid_to_index(decl: Option<&ast::FnDecl>,\n         visit::walk_fn_decl(&mut formals, decl);\n         impl<'a, 'v> visit::Visitor<'v> for Formals<'a> {\n             fn visit_pat(&mut self, p: &ast::Pat) {\n-                match self.index.entry(p.id).get() {\n-                    Ok(v) => v.push(self.entry),\n-                    Err(e) => {\n-                        e.insert(vec![self.entry]);\n-                    }\n-                }\n+                self.index.entry(p.id).or_insert(vec![]).push(self.entry);\n                 visit::walk_pat(self, p)\n             }\n         }"}, {"sha": "3d46f93914a589c53d21354b1aeff8fde7c63deb", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -11,7 +11,6 @@\n use middle::infer::{InferCtxt};\n use middle::ty::{self, RegionEscape, Ty};\n use std::collections::HashSet;\n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::default::Default;\n use syntax::ast;\n use util::common::ErrorReported;\n@@ -437,9 +436,7 @@ fn register_region_obligation<'tcx>(tcx: &ty::ctxt<'tcx>,\n     debug!(\"register_region_obligation({})\",\n            region_obligation.repr(tcx));\n \n-    match region_obligations.entry(region_obligation.cause.body_id) {\n-        Vacant(entry) => { entry.insert(vec![region_obligation]); },\n-        Occupied(mut entry) => { entry.get_mut().push(region_obligation); },\n-    }\n+    region_obligations.entry(region_obligation.cause.body_id).or_insert(vec![])\n+        .push(region_obligation);\n \n }"}, {"sha": "23fba5ead22598df14a75fa8eced8f960053ed28", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -5669,9 +5669,7 @@ pub fn lookup_field_type<'tcx>(tcx: &ctxt<'tcx>,\n         node_id_to_type(tcx, id.node)\n     } else {\n         let mut tcache = tcx.tcache.borrow_mut();\n-        let pty = tcache.entry(id).get().unwrap_or_else(\n-            |vacant_entry| vacant_entry.insert(csearch::get_field_type(tcx, struct_id, id)));\n-        pty.ty\n+        tcache.entry(id).or_insert_with(|| csearch::get_field_type(tcx, struct_id, id)).ty\n     };\n     ty.subst(tcx, substs)\n }\n@@ -6819,9 +6817,7 @@ pub fn replace_late_bound_regions<'tcx, T, F>(\n         debug!(\"region={}\", region.repr(tcx));\n         match region {\n             ty::ReLateBound(debruijn, br) if debruijn.depth == current_depth => {\n-                let region =\n-                    * map.entry(br).get().unwrap_or_else(\n-                        |vacant_entry| vacant_entry.insert(mapf(br)));\n+                let region = *map.entry(br).or_insert_with(|| mapf(br));\n \n                 if let ty::ReLateBound(debruijn1, br) = region {\n                     // If the callback returns a late-bound region,"}, {"sha": "931cfc7999281cecd767328b1b6a47126f958d47", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -35,7 +35,6 @@ use syntax::parse::token::InternedString;\n \n use getopts;\n use std::collections::HashMap;\n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::env;\n use std::fmt;\n use std::path::PathBuf;\n@@ -1037,10 +1036,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             None => early_error(\"--extern value must be of the format `foo=bar`\"),\n         };\n \n-        match externs.entry(name.to_string()) {\n-            Vacant(entry) => { entry.insert(vec![location.to_string()]); },\n-            Occupied(mut entry) => { entry.get_mut().push(location.to_string()); },\n-        }\n+        externs.entry(name.to_string()).or_insert(vec![]).push(location.to_string());\n     }\n \n     let crate_name = matches.opt_str(\"crate-name\");"}, {"sha": "5bf561c218d044365f88de58687a99b0a078a6ac", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -26,7 +26,6 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "662b5a366431ca785460742cc0775e2fb0ca6f42", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -836,11 +836,8 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         let is_public = import_directive.is_public;\n \n         let mut import_resolutions = module_.import_resolutions.borrow_mut();\n-        let dest_import_resolution = import_resolutions.entry(name).get().unwrap_or_else(\n-            |vacant_entry| {\n-                // Create a new import resolution from this child.\n-                vacant_entry.insert(ImportResolution::new(id, is_public))\n-            });\n+        let dest_import_resolution = import_resolutions.entry(name)\n+            .or_insert_with(|| ImportResolution::new(id, is_public));\n \n         debug!(\"(resolving glob import) writing resolution `{}` in `{}` \\\n                to `{}`\","}, {"sha": "0f9836bc0734606cd504c05f52229fe9010f5ab5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -112,7 +112,6 @@ use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n use util::lev_distance::lev_distance;\n \n use std::cell::{Cell, Ref, RefCell};\n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::mem::replace;\n use std::rc::Rc;\n use std::iter::repeat;\n@@ -1362,11 +1361,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                        closure_def_id: ast::DefId,\n                                        r: DeferredCallResolutionHandler<'tcx>) {\n         let mut deferred_call_resolutions = self.inh.deferred_call_resolutions.borrow_mut();\n-        let mut vec = match deferred_call_resolutions.entry(closure_def_id) {\n-            Occupied(entry) => entry.into_mut(),\n-            Vacant(entry) => entry.insert(Vec::new()),\n-        };\n-        vec.push(r);\n+        deferred_call_resolutions.entry(closure_def_id).or_insert(vec![]).push(r);\n     }\n \n     fn remove_deferred_call_resolutions(&self,"}, {"sha": "d36124247945bf936f473641e49f704e82a0c7e7", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -876,9 +876,7 @@ impl DocFolder for Cache {\n         if let clean::ImplItem(ref i) = item.inner {\n             match i.trait_ {\n                 Some(clean::ResolvedPath{ did, .. }) => {\n-                    let v = self.implementors.entry(did).get().unwrap_or_else(\n-                        |vacant_entry| vacant_entry.insert(Vec::with_capacity(1)));\n-                    v.push(Implementor {\n+                    self.implementors.entry(did).or_insert(vec![]).push(Implementor {\n                         def_id: item.def_id,\n                         generics: i.generics.clone(),\n                         trait_: i.trait_.as_ref().unwrap().clone(),\n@@ -1080,9 +1078,7 @@ impl DocFolder for Cache {\n                         };\n \n                         if let Some(did) = did {\n-                            let v = self.impls.entry(did).get().unwrap_or_else(\n-                                |vacant_entry| vacant_entry.insert(Vec::with_capacity(1)));\n-                            v.push(Impl {\n+                            self.impls.entry(did).or_insert(vec![]).push(Impl {\n                                 impl_: i,\n                                 dox: dox,\n                                 stability: item.stability.clone(),\n@@ -1334,9 +1330,8 @@ impl Context {\n                 Some(ref s) => s.to_string(),\n             };\n             let short = short.to_string();\n-            let v = map.entry(short).get().unwrap_or_else(\n-                |vacant_entry| vacant_entry.insert(Vec::with_capacity(1)));\n-            v.push((myname, Some(plain_summary_line(item.doc_value()))));\n+            map.entry(short).or_insert(vec![])\n+                .push((myname, Some(plain_summary_line(item.doc_value()))));\n         }\n \n         for (_, items) in &mut map {"}, {"sha": "a85f770f63ca49fceaea83886ab68397ee181985", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -352,9 +352,7 @@ fn parse_externs(matches: &getopts::Matches) -> Result<core::Externs, String> {\n             }\n         };\n         let name = name.to_string();\n-        let locs = externs.entry(name).get().unwrap_or_else(\n-            |vacant_entry| vacant_entry.insert(Vec::with_capacity(1)));\n-        locs.push(location.to_string());\n+        externs.entry(name).or_insert(vec![]).push(location.to_string());\n     }\n     Ok(externs)\n }"}, {"sha": "91225891338a58a42dc19542377103de57ff457f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -23,7 +23,7 @@ use hash::{Hash, SipHasher};\n use iter::{self, Iterator, ExactSizeIterator, IntoIterator, IteratorExt, FromIterator, Extend, Map};\n use marker::Sized;\n use mem::{self, replace};\n-use ops::{Deref, FnMut, Index};\n+use ops::{Deref, FnMut, FnOnce, Index};\n use option::Option::{self, Some, None};\n use rand::{self, Rng};\n use result::Result::{self, Ok, Err};\n@@ -1488,12 +1488,37 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.\n     #[unstable(feature = \"std_misc\",\n                reason = \"will soon be replaced by or_insert\")]\n+    #[deprecated(since = \"1.0\",\n+                reason = \"replaced with more ergonomic `or_insert` and `or_insert_with`\")]\n+    /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, K, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),\n             Vacant(entry) => Err(entry),\n         }\n     }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the default if empty, and returns\n+    /// a mutable reference to the value in the entry.\n+    pub fn or_insert(self, default: V) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default),\n+        }\n+    }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the result of the default function if empty,\n+    /// and returns a mutable reference to the value in the entry.\n+    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default()),\n+        }\n+    }\n }\n \n impl<'a, K, V> OccupiedEntry<'a, K, V> {"}, {"sha": "0ac97b71298b85df6c737c6bec041bb512522544", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -307,10 +307,7 @@\n //! let message = \"she sells sea shells by the sea shore\";\n //!\n //! for c in message.chars() {\n-//!     match count.entry(c) {\n-//!         Entry::Vacant(entry) => { entry.insert(1); },\n-//!         Entry::Occupied(mut entry) => *entry.get_mut() += 1,\n-//!     }\n+//!     *count.entry(c).or_insert(0) += 1;\n //! }\n //!\n //! assert_eq!(count.get(&'s'), Some(&8));\n@@ -343,10 +340,7 @@\n //! for id in orders.into_iter() {\n //!     // If this is the first time we've seen this customer, initialize them\n //!     // with no blood alcohol. Otherwise, just retrieve them.\n-//!     let person = match blood_alcohol.entry(id) {\n-//!         Entry::Vacant(entry) => entry.insert(Person{id: id, blood_alcohol: 0.0}),\n-//!         Entry::Occupied(entry) => entry.into_mut(),\n-//!     };\n+//!     let person = blood_alcohol.entry(id).or_insert(Person{id: id, blood_alcohol: 0.0});\n //!\n //!     // Reduce their blood alcohol level. It takes time to order and drink a beer!\n //!     person.blood_alcohol *= 0.9;"}, {"sha": "a2023d6832efbce2fe48cf33ed7e85962fc9c431", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -66,9 +66,8 @@ pub fn apply_mark(m: Mrk, ctxt: SyntaxContext) -> SyntaxContext {\n /// Extend a syntax context with a given mark and sctable (explicit memoization)\n fn apply_mark_internal(m: Mrk, ctxt: SyntaxContext, table: &SCTable) -> SyntaxContext {\n     let key = (ctxt, m);\n-    * table.mark_memo.borrow_mut().entry(key).get().unwrap_or_else(\n-          |vacant_entry|\n-              vacant_entry.insert(idx_push(&mut *table.table.borrow_mut(), Mark(m, ctxt))))\n+    * table.mark_memo.borrow_mut().entry(key)\n+        .or_insert_with(|| idx_push(&mut *table.table.borrow_mut(), Mark(m, ctxt)))\n }\n \n /// Extend a syntax context with a given rename\n@@ -84,9 +83,8 @@ fn apply_rename_internal(id: Ident,\n                        table: &SCTable) -> SyntaxContext {\n     let key = (ctxt, id, to);\n \n-    * table.rename_memo.borrow_mut().entry(key).get().unwrap_or_else(\n-          |vacant_entry|\n-              vacant_entry.insert(idx_push(&mut *table.table.borrow_mut(), Rename(id, to, ctxt))))\n+    * table.rename_memo.borrow_mut().entry(key)\n+        .or_insert_with(|| idx_push(&mut *table.table.borrow_mut(), Rename(id, to, ctxt)))\n }\n \n /// Apply a list of renamings to a context"}, {"sha": "72498afa3201e7c9383c46edd05ca78ded6d5bb3", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=242ed0b7c0f6a21096f2cc3e1ad1bdb176d02545", "patch": "@@ -35,7 +35,6 @@\n #![feature(quote, unsafe_destructor)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n #![feature(unicode)]\n #![feature(path_ext)]\n #![feature(str_char)]"}]}