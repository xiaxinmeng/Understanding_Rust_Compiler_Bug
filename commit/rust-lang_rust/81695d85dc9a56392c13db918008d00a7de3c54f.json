{"sha": "81695d85dc9a56392c13db918008d00a7de3c54f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjk1ZDg1ZGM5YTU2MzkyYzEzZGI5MTgwMDhkMDBhN2RlM2M1NGY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-05T22:27:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-05T23:53:55Z"}, "message": "Mark crate metadata with a version tag. Close #3390.", "tree": {"sha": "94a41efb009aedb16c7047900794660c7b1b92f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94a41efb009aedb16c7047900794660c7b1b92f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81695d85dc9a56392c13db918008d00a7de3c54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81695d85dc9a56392c13db918008d00a7de3c54f", "html_url": "https://github.com/rust-lang/rust/commit/81695d85dc9a56392c13db918008d00a7de3c54f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81695d85dc9a56392c13db918008d00a7de3c54f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31af60b257983da1a77336ee033406350eb14ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/31af60b257983da1a77336ee033406350eb14ee9", "html_url": "https://github.com/rust-lang/rust/commit/31af60b257983da1a77336ee033406350eb14ee9"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "b1b5e081a804f59a3e0649a95fd0a7005ebc8482", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81695d85dc9a56392c13db918008d00a7de3c54f/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81695d85dc9a56392c13db918008d00a7de3c54f/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=81695d85dc9a56392c13db918008d00a7de3c54f", "patch": "@@ -27,6 +27,7 @@ export encode_metadata;\n export encoded_ty;\n export reachable;\n export encode_inlined_item;\n+export metadata_encoding_version;\n \n // used by astencode:\n export def_to_str;\n@@ -1084,6 +1085,13 @@ fn encode_hash(ebml_w: ebml::Writer, hash: ~str) {\n     ebml_w.end_tag();\n }\n \n+// NB: Increment this as you change the metadata encoding version.\n+const metadata_encoding_version : &[u8] = &[0x72, //'r' as u8,\n+                                            0x75, //'u' as u8,\n+                                            0x73, //'s' as u8,\n+                                            0x74, //'t' as u8,\n+                                            0, 0, 0, 1 ];\n+\n fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n     let buf = io::mem_buffer();\n     let stats =\n@@ -1163,7 +1171,18 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n     // Pad this, since something (LLVM, presumably) is cutting off the\n     // remaining % 4 bytes.\n     buf_w.write(&[0u8, 0u8, 0u8, 0u8]);\n-    flate::deflate_buf(io::mem_buffer_buf(buf))\n+\n+    // FIXME #3396: weird bug here, for reasons unclear this emits random\n+    // looking bytes (mostly 0x1) if we use the version byte-array constant\n+    // above; so we use a string constant inline instead.\n+    //\n+    // Should be:\n+    //\n+    //   vec::from_slice(metadata_encoding_version) +\n+\n+    (do str::as_bytes(~\"rust\\x00\\x00\\x00\\x01\") |bytes| {\n+        vec::slice(bytes, 0, 8)\n+    }) + flate::deflate_buf(io::mem_buffer_buf(buf))\n }\n \n // Get the encoded string for a type"}, {"sha": "2c16e6a4206294e6485d13fb0b2f445ec564cf06", "filename": "src/rustc/metadata/loader.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/81695d85dc9a56392c13db918008d00a7de3c54f/src%2Frustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81695d85dc9a56392c13db918008d00a7de3c54f/src%2Frustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Floader.rs?ref=81695d85dc9a56392c13db918008d00a7de3c54f", "patch": "@@ -185,11 +185,30 @@ fn get_metadata_section(os: os,\n         if name == meta_section_name(os) {\n             let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n             let csz = llvm::LLVMGetSectionSize(si.llsi) as uint;\n+            let mut found = None;\n             unsafe {\n                 let cvbuf: *u8 = unsafe::reinterpret_cast(&cbuf);\n-                let v = vec::unsafe::from_buf(cvbuf, csz);\n-                let inflated = flate::inflate_buf(v);\n-                return Some(@inflated);\n+                let vlen = vec::len(encoder::metadata_encoding_version);\n+                debug!(\"checking %u bytes of metadata-version stamp\",\n+                       vlen);\n+                let minsz = uint::min(vlen, csz);\n+                let mut version_ok = false;\n+                do vec::unsafe::form_slice(cvbuf, minsz) |buf0| {\n+                    version_ok = (buf0 ==\n+                                  encoder::metadata_encoding_version);\n+                }\n+                if !version_ok { return None; }\n+\n+                let cvbuf1 = ptr::offset(cvbuf, vlen);\n+                debug!(\"inflating %u bytes of compressed metadata\",\n+                       csz - vlen);\n+                do vec::unsafe::form_slice(cvbuf1, csz-vlen) |buf| {\n+                    let inflated = flate::inflate_buf(buf);\n+                    found = move Some(@(move inflated));\n+                }\n+                if found != None {\n+                    return found;\n+                }\n             }\n         }\n         llvm::LLVMMoveToNextSection(si.llsi);"}, {"sha": "6edccf0edec1b21462d5181bb9a0edb05c464682", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81695d85dc9a56392c13db918008d00a7de3c54f/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81695d85dc9a56392c13db918008d00a7de3c54f/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=81695d85dc9a56392c13db918008d00a7de3c54f", "patch": "@@ -970,13 +970,19 @@ fn C_array(ty: TypeRef, elts: ~[ValueRef]) -> ValueRef unsafe {\n }\n \n fn C_bytes(bytes: ~[u8]) -> ValueRef unsafe {\n+    return llvm::LLVMConstString(\n+        unsafe::reinterpret_cast(&vec::unsafe::to_ptr(bytes)),\n+        bytes.len() as c_uint, True);\n+}\n+\n+fn C_bytes_plus_null(bytes: ~[u8]) -> ValueRef unsafe {\n     return llvm::LLVMConstString(\n         unsafe::reinterpret_cast(&vec::unsafe::to_ptr(bytes)),\n         bytes.len() as c_uint, False);\n }\n \n fn C_shape(ccx: @crate_ctxt, bytes: ~[u8]) -> ValueRef {\n-    let llshape = C_bytes(bytes);\n+    let llshape = C_bytes_plus_null(bytes);\n     let llglobal = str::as_c_str(fmt!(\"shape%u\", ccx.names(~\"shape\")), |buf| {\n         llvm::LLVMAddGlobal(ccx.llmod, val_ty(llshape), buf)\n     });"}, {"sha": "8a49ac79b8b7a454386020f43349a03db7733705", "filename": "src/test/compile-fail/bad-module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81695d85dc9a56392c13db918008d00a7de3c54f/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81695d85dc9a56392c13db918008d00a7de3c54f/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-module.rs?ref=81695d85dc9a56392c13db918008d00a7de3c54f", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern: unresolved import\n+// error-pattern: unresolved name\n \n fn main() { let foo = thing::len(~[]); }"}]}