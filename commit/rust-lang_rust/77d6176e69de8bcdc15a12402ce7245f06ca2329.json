{"sha": "77d6176e69de8bcdc15a12402ce7245f06ca2329", "node_id": "C_kwDOAAsO6NoAKDc3ZDYxNzZlNjlkZThiY2RjMTVhMTI0MDJjZTcyNDVmMDZjYTIzMjk", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-13T06:48:40Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-13T06:48:40Z"}, "message": "remove unnecessary `to_string` and `String::new`", "tree": {"sha": "0f5bc75e1ef4e5e214bdb5ff3a427eef331df792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f5bc75e1ef4e5e214bdb5ff3a427eef331df792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77d6176e69de8bcdc15a12402ce7245f06ca2329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77d6176e69de8bcdc15a12402ce7245f06ca2329", "html_url": "https://github.com/rust-lang/rust/commit/77d6176e69de8bcdc15a12402ce7245f06ca2329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77d6176e69de8bcdc15a12402ce7245f06ca2329/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "html_url": "https://github.com/rust-lang/rust/commit/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e"}], "stats": {"total": 632, "additions": 292, "deletions": 340}, "files": [{"sha": "3a33a9debaadbef634e5b693feeed6f9c6529c78", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -1168,7 +1168,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             .span_suggestion(\n                                 e.span,\n                                 \"consider removing the trailing pattern\",\n-                                String::new(),\n+                                \"\",\n                                 rustc_errors::Applicability::MachineApplicable,\n                             )\n                             .emit();"}, {"sha": "95bf947854fafa1bd53d7304426f58a33f613f8b", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         .span_suggestion_verbose(\n                             sp,\n                             &format!(\"if you don't need to use the contents of {}, discard the tuple's remaining fields\", ident),\n-                            \"..\".to_string(),\n+                            \"..\",\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();"}, {"sha": "503bdbad25828cc4e126c4f861a08878e5e3a04c", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -488,7 +488,7 @@ impl<'a> AstValidator<'a> {\n             .span_suggestion(\n                 replace_span,\n                 &format!(\"provide a definition for the {}\", ctx),\n-                sugg.to_string(),\n+                sugg,\n                 Applicability::HasPlaceholders,\n             )\n             .emit();\n@@ -522,7 +522,7 @@ impl<'a> AstValidator<'a> {\n                 .span_suggestion(\n                     span,\n                     &format!(\"remove the {}\", remove_descr),\n-                    String::new(),\n+                    \"\",\n                     Applicability::MaybeIncorrect,\n                 )\n                 .span_label(self.current_extern_span(), \"`extern` block begins here\")\n@@ -570,7 +570,7 @@ impl<'a> AstValidator<'a> {\n             .span_suggestion(\n                 body.span,\n                 \"remove the invalid body\",\n-                \";\".to_string(),\n+                \";\",\n                 Applicability::MaybeIncorrect,\n             )\n             .help(\n@@ -599,7 +599,7 @@ impl<'a> AstValidator<'a> {\n                 .span_suggestion_verbose(\n                     span.until(ident.span.shrink_to_lo()),\n                     \"remove the qualifiers\",\n-                    \"fn \".to_string(),\n+                    \"fn \",\n                     Applicability::MaybeIncorrect,\n                 )\n                 .emit();\n@@ -703,7 +703,7 @@ impl<'a> AstValidator<'a> {\n             .span_suggestion(\n                 generics.span,\n                 \"remove the parameters\",\n-                String::new(),\n+                \"\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -721,7 +721,7 @@ impl<'a> AstValidator<'a> {\n         .span_suggestion(\n             span,\n             \"remove the super traits or lifetime bounds\",\n-            String::new(),\n+            \"\",\n             Applicability::MachineApplicable,\n         )\n         .emit();\n@@ -753,7 +753,7 @@ impl<'a> AstValidator<'a> {\n             .span_suggestion(\n                 total_span,\n                 \"remove these associated items\",\n-                String::new(),\n+                \"\",\n                 Applicability::MachineApplicable,\n             )\n             .span_label(ident_span, \"auto trait cannot have associated items\")\n@@ -993,7 +993,7 @@ fn validate_generic_param_order(\n             err.span_suggestion(\n                 span,\n                 \"reorder the parameters: lifetimes, then consts and types\",\n-                ordered_params.clone(),\n+                &ordered_params,\n                 Applicability::MachineApplicable,\n             );\n             err.emit();"}, {"sha": "6db9c46dcef890c0e58c538b2c3e0fc0031490c6", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -823,7 +823,7 @@ fn maybe_stage_features(sess: &Session, krate: &ast::Crate) {\n                 err.span_suggestion(\n                     attr.span,\n                     \"remove the attribute\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "bdf86825f0d8f4d7963bb2e9983dffda41cde0f2", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -59,7 +59,7 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n                     err.span_suggestion(\n                         span,\n                         \"consider removing the prefix\",\n-                        lint_str[1..].to_string(),\n+                        &lint_str[1..],\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -942,7 +942,7 @@ pub fn parse_repr_attr(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                         err.span_suggestion(\n                             item.span(),\n                             \"supply an argument here\",\n-                            \"align(...)\".to_string(),\n+                            \"align(...)\",\n                             Applicability::HasPlaceholders,\n                         );\n                         err.emit();"}, {"sha": "73c0bf16a1f9998f8f5556f1c1a7daaa736f7f0b", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -225,7 +225,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                     .map(|n| format!(\"`{}`\", n))\n                                     .unwrap_or_else(|| \"the value\".to_string())\n                             ),\n-                            \"ref \".to_string(),\n+                            \"ref \",\n                             Applicability::MachineApplicable,\n                         );\n                         in_pattern = true;\n@@ -276,7 +276,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 .map(|n| format!(\"`{}`\", n))\n                                 .unwrap_or_else(|| \"the mutable reference\".to_string()),\n                         ),\n-                        \"&mut *\".to_string(),\n+                        \"&mut *\",\n                         Applicability::MachineApplicable,\n                     );\n                 }\n@@ -1519,15 +1519,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Ok(string) => {\n                 if string.starts_with(\"async \") {\n                     let pos = args_span.lo() + BytePos(6);\n-                    (args_span.with_lo(pos).with_hi(pos), \"move \".to_string())\n+                    (args_span.with_lo(pos).with_hi(pos), \"move \")\n                 } else if string.starts_with(\"async|\") {\n                     let pos = args_span.lo() + BytePos(5);\n-                    (args_span.with_lo(pos).with_hi(pos), \" move\".to_string())\n+                    (args_span.with_lo(pos).with_hi(pos), \" move\")\n                 } else {\n-                    (args_span.shrink_to_lo(), \"move \".to_string())\n+                    (args_span.shrink_to_lo(), \"move \")\n                 }\n             }\n-            Err(_) => (args_span, \"move |<args>| <body>\".to_string()),\n+            Err(_) => (args_span, \"move |<args>| <body>\"),\n         };\n         let kind = match use_span.generator_kind() {\n             Some(generator_kind) => match generator_kind {"}, {"sha": "230ccf519906621c7d55edc0646cde595a7c4e49", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -212,7 +212,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                                         \"consider adding semicolon after the expression so its \\\n                                         temporaries are dropped sooner, before the local variables \\\n                                         declared by the block are dropped\",\n-                                        \";\".to_string(),\n+                                        \";\",\n                                         Applicability::MaybeIncorrect,\n                                     );\n                                 }"}, {"sha": "97e49cb472f6100b21ce94e2bd73eccd63dde68b", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -1023,7 +1023,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                      avoid moving into the `for` loop\",\n                                     ty,\n                                 ),\n-                                \"&\".to_string(),\n+                                \"&\",\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }\n@@ -1049,7 +1049,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                             .map(|n| format!(\"`{}`\", n))\n                                             .unwrap_or_else(|| \"the mutable reference\".to_string()),\n                                     ),\n-                                    \"&mut *\".to_string(),\n+                                    \"&mut *\",\n                                     Applicability::MachineApplicable,\n                                 );\n                             }\n@@ -1067,7 +1067,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         err.span_suggestion_verbose(\n                             fn_call_span.shrink_to_lo(),\n                             \"consider calling `.as_ref()` to borrow the type's contents\",\n-                            \"as_ref().\".to_string(),\n+                            \"as_ref().\",\n                             Applicability::MachineApplicable,\n                         );\n                     }"}, {"sha": "eb5e61fa064bddf385035b7682c8d2979d09f72e", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -417,7 +417,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             err.span_suggestion_verbose(\n                 span.shrink_to_hi(),\n                 &format!(\"consider borrowing the `{}`'s content\", diag_name.unwrap()),\n-                \".as_ref()\".to_string(),\n+                \".as_ref()\",\n                 Applicability::MaybeIncorrect,\n             );\n         } else if let Some(use_spans) = use_spans {"}, {"sha": "861c5e973f1f104eddbe45bdb4bc5559810a94d5", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -295,7 +295,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             err.span_suggestion_verbose(\n                                 source_info.span.with_hi(source_info.span.lo() + BytePos(5)),\n                                 \"try removing `&mut` here\",\n-                                String::new(),\n+                                \"\",\n                                 Applicability::MachineApplicable,\n                             );\n                         } else {\n@@ -316,7 +316,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     err.span_suggestion_verbose(\n                         decl.source_info.span.shrink_to_lo(),\n                         \"consider making the binding mutable\",\n-                        \"mut \".to_string(),\n+                        \"mut \",\n                         Applicability::MachineApplicable,\n                     );\n                 }\n@@ -402,7 +402,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 err.span_suggestion(\n                     span,\n                     \"try removing `&mut` here\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MaybeIncorrect,\n                 );\n             }"}, {"sha": "e0f8da1c872d3abfef62ec2426b9554ee2e5b8de", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -860,7 +860,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 err.span_suggestion_verbose(\n                     span.shrink_to_hi(),\n                     \"consider relaxing the implicit `'static` requirement\",\n-                    \" + '_\".to_string(),\n+                    \" + '_\",\n                     Applicability::MaybeIncorrect,\n                 );\n                 suggested = true;"}, {"sha": "8ef2974c372322323dd25fbe8d7459742094abff", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -426,7 +426,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 .span_suggestion_short(\n                     mut_span,\n                     \"remove this `mut`\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 )\n                 .emit();"}, {"sha": "925c36edb5166aca74d9d5da1b4f59903d12cafe", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -132,7 +132,7 @@ fn parse_assert<'a>(cx: &mut ExtCtxt<'a>, sp: Span, stream: TokenStream) -> PRes\n         err.span_suggestion(\n             parser.token.span,\n             \"try removing semicolon\",\n-            String::new(),\n+            \"\",\n             Applicability::MaybeIncorrect,\n         );\n         err.emit();\n@@ -153,7 +153,7 @@ fn parse_assert<'a>(cx: &mut ExtCtxt<'a>, sp: Span, stream: TokenStream) -> PRes\n             err.span_suggestion_short(\n                 comma_span,\n                 \"try adding a comma\",\n-                \", \".to_string(),\n+                \", \",\n                 Applicability::MaybeIncorrect,\n             );\n             err.emit();"}, {"sha": "d3de10ca4a2e93577365df2f034d6fd1b84f99f3", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -142,7 +142,7 @@ fn report_path_args(sess: &Session, meta: &ast::MetaItem) {\n     let report_error = |title, action| {\n         let span = meta.span.with_lo(meta.path.span.hi());\n         sess.struct_span_err(span, title)\n-            .span_suggestion(span, action, String::new(), Applicability::MachineApplicable)\n+            .span_suggestion(span, action, \"\", Applicability::MachineApplicable)\n             .emit();\n     };\n     match meta.kind {"}, {"sha": "e20375689f3d1f7a136ea48c6d885563ff7bf4a8", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -118,7 +118,7 @@ pub fn expand_test_or_bench(\n         };\n         err.span_label(attr_sp, \"the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\")\n             .span_label(item.span, format!(\"expected a non-associated function, found {} {}\", item.kind.article(), item.kind.descr()))\n-            .span_suggestion(attr_sp, \"replace with conditional compilation to make the item only exist when tests are being run\", String::from(\"#[cfg(test)]\"), Applicability::MaybeIncorrect)\n+            .span_suggestion(attr_sp, \"replace with conditional compilation to make the item only exist when tests are being run\", \"#[cfg(test)]\", Applicability::MaybeIncorrect)\n             .emit();\n \n         return vec![Annotatable::Item(item)];"}, {"sha": "b8a14e37a099055266843193ef620b17112b3fed", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -1035,7 +1035,7 @@ fn emit_unstable_in_stable_error(ccx: &ConstCx<'_, '_>, span: Span, gate: Symbol\n         .span_suggestion(\n             attr_span,\n             \"if it is not part of the public API, make this function unstably const\",\n-            concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n').to_owned(),\n+            concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n'),\n             Applicability::HasPlaceholders,\n         )\n         .span_suggestion("}, {"sha": "75b6b1cc9195bd2f043a00e9b2ec22c554ad17e7", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -1194,7 +1194,7 @@ pub fn expr_to_spanned_string<'a>(\n                 err.span_suggestion(\n                     expr.span.shrink_to_lo(),\n                     \"consider removing the leading `b`\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MaybeIncorrect,\n                 );\n                 Some((err, true))"}, {"sha": "978f87b1d136e2a017b703abd61a81bbab404608", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -945,7 +945,7 @@ pub fn ensure_complete_parse<'a>(\n                 err.span_suggestion(\n                     semi_span,\n                     \"you might be missing a semicolon here\",\n-                    \";\".to_owned(),\n+                    \";\",\n                     Applicability::MaybeIncorrect,\n                 );\n             }"}, {"sha": "f40c365cbcc1835beedb3b6117c7f7ea790ecc6f", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -102,7 +102,7 @@ fn emit_frag_parse_err(\n                 e.span_suggestion_verbose(\n                     site_span.shrink_to_hi(),\n                     \"add `;` to interpret the expansion as a statement\",\n-                    \";\".to_string(),\n+                    \";\",\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -357,7 +357,7 @@ fn expand_macro<'cx>(\n                     err.span_suggestion_short(\n                         comma_span,\n                         \"missing comma here\",\n-                        \", \".to_string(),\n+                        \", \",\n                         Applicability::MachineApplicable,\n                     );\n                 }"}, {"sha": "45c462bc4250423a38d8dce7fdc04dd1eb3adf95", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -52,7 +52,7 @@ impl MetaVarExpr {\n                 err.span_suggestion(\n                     ident.span,\n                     \"supported expressions are count, ignore, index and length\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 );\n                 return Err(err);\n@@ -142,7 +142,7 @@ fn parse_ident<'sess>(\n         err.span_suggestion(\n             token.span,\n             &format!(\"try removing `{}`\", &token_str),\n-            String::new(),\n+            \"\",\n             Applicability::MaybeIncorrect,\n         );\n         return Err(err);"}, {"sha": "b94d205488d01d494c2d6210f3928f612c53b9ef", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -670,7 +670,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 err.span_suggestion(\n                                     source_map.end_point(cause.span),\n                                     \"try removing this `?`\",\n-                                    \"\".to_string(),\n+                                    \"\",\n                                     Applicability::MachineApplicable,\n                                 );\n                             }\n@@ -726,14 +726,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             err.span_suggestion_short(\n                                 sp,\n                                 \"consider removing this semicolon and boxing the expressions\",\n-                                String::new(),\n+                                \"\",\n                                 Applicability::MachineApplicable,\n                             );\n                         } else {\n                             err.span_suggestion_short(\n                                 sp,\n                                 \"consider removing this semicolon\",\n-                                String::new(),\n+                                \"\",\n                                 Applicability::MachineApplicable,\n                             );\n                         }\n@@ -776,7 +776,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         err.span_suggestion_short(\n                             sp,\n                             \"consider removing this semicolon\",\n-                            String::new(),\n+                            \"\",\n                             Applicability::MachineApplicable,\n                         );\n                     }\n@@ -1935,7 +1935,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 diag.span_suggestion_verbose(\n                     exp_span.shrink_to_hi(),\n                     \"consider `await`ing on the `Future`\",\n-                    \".await\".to_string(),\n+                    \".await\",\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -1945,7 +1945,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     diag.span_suggestion_verbose(\n                         span.shrink_to_hi(),\n                         \"consider `await`ing on the `Future`\",\n-                        \".await\".to_string(),\n+                        \".await\",\n                         Applicability::MaybeIncorrect,\n                     );\n                 }"}, {"sha": "43d5c9fdf33a6951f2d0a9ee012706e9d85db3c4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     err.span_suggestion_verbose(\n                         span.shrink_to_hi(),\n                         \"consider relaxing the implicit `'static` requirement\",\n-                        \" + '_\".to_string(),\n+                        \" + '_\",\n                         Applicability::MaybeIncorrect,\n                     );\n                 }"}, {"sha": "76cb76d9ff4e51acbda44550d973a67966956def", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         diag.span_suggestion(\n             new_ty_span,\n             &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n-            new_ty.to_string(),\n+            new_ty,\n             Applicability::Unspecified,\n         );\n "}, {"sha": "6935ce9710b6e67c4554561049c2560c31c193db", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -328,7 +328,7 @@ pub fn suggest_new_region_bound(\n                         err.span_suggestion_verbose(\n                             span,\n                             &format!(\"{} `impl Trait`'s {}\", consider, explicit_static),\n-                            lifetime_name.clone(),\n+                            &lifetime_name,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -363,7 +363,7 @@ pub fn suggest_new_region_bound(\n                             captures = captures,\n                             explicit = explicit,\n                         ),\n-                        plus_lt.clone(),\n+                        &plus_lt,\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -378,7 +378,7 @@ pub fn suggest_new_region_bound(\n                             captures = captures,\n                             explicit = explicit,\n                         ),\n-                        plus_lt.clone(),\n+                        &plus_lt,\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -391,7 +391,7 @@ pub fn suggest_new_region_bound(\n                         err.span_suggestion_verbose(\n                             lt.span,\n                             &format!(\"{} trait object's {}\", consider, explicit_static),\n-                            lifetime_name.clone(),\n+                            &lifetime_name,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -535,7 +535,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 err.span_suggestion_verbose(\n                     span.shrink_to_hi(),\n                     \"consider relaxing the implicit `'static` requirement\",\n-                    \" + '_\".to_string(),\n+                    \" + '_\",\n                     Applicability::MaybeIncorrect,\n                 );\n                 suggested = true;"}, {"sha": "389e6483f30ff0806aeec3aa6296bd6ca0265ea8", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -449,7 +449,7 @@ pub fn configure_and_expand(\n                     .span_suggestion(\n                         first_span,\n                         \"try using their name instead\",\n-                        \"ferris\".to_string(),\n+                        \"ferris\",\n                         Applicability::MaybeIncorrect,\n                     )\n                     .emit();"}, {"sha": "b33ab40eb39cb8a664a091b1aed39107bc6a8565", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -136,7 +136,7 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                     diag.span_suggestion(\n                         receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n                         \"or remove `.into_iter()` to iterate by value\",\n-                        String::new(),\n+                        \"\",\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else if receiver_ty.is_array() {"}, {"sha": "5ef4463cb64251ea9e474fa8b16f0586eb084063", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -993,7 +993,7 @@ fn lint_deprecated_attr(\n             .span_suggestion_short(\n                 attr.span,\n                 suggestion.unwrap_or(\"remove this attribute\"),\n-                String::new(),\n+                \"\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -1182,7 +1182,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n                                 .span_suggestion_short(\n                                     no_mangle_attr.span,\n                                     \"remove this attribute\",\n-                                    String::new(),\n+                                    \"\",\n                                     // Use of `#[no_mangle]` suggests FFI intent; correct\n                                     // fix may be to monomorphize source by hand\n                                     Applicability::MaybeIncorrect,\n@@ -1221,7 +1221,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n                         err.span_suggestion(\n                             const_span,\n                             \"try a static value\",\n-                            \"pub static\".to_owned(),\n+                            \"pub static\",\n                             Applicability::MachineApplicable,\n                         );\n                         err.emit();\n@@ -1405,7 +1405,7 @@ impl UnreachablePub {\n                 err.span_suggestion(\n                     vis_span,\n                     \"consider restricting its visibility\",\n-                    \"pub(crate)\".to_owned(),\n+                    \"pub(crate)\",\n                     applicability,\n                 );\n                 if exportable {\n@@ -1566,7 +1566,7 @@ impl<'tcx> LateLintPass<'tcx> for TypeAliasBounds {\n                 err.span_suggestion(\n                     type_alias_generics.where_clause_span,\n                     \"the clause will not be checked when the type alias is used, and should be removed\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 );\n                 if !suggested_changing_assoc_types {\n@@ -1830,7 +1830,7 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n                     });\n                 }\n             } else {\n-                let replace = \"..=\".to_owned();\n+                let replace = \"..=\";\n                 if join.edition() >= Edition::Edition2021 {\n                     let mut err =\n                         rustc_errors::struct_span_err!(cx.sess(), pat.span, E0783, \"{}\", msg,);"}, {"sha": "2084494f7719e116c4af5b706806e0342816ff7e", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -718,7 +718,7 @@ pub trait LintContext: Sized {\n                                   the macro must produce the documentation as part of its expansion\");\n                 }\n                 BuiltinLintDiagnostics::PatternsInFnsWithoutBody(span, ident) => {\n-                    db.span_suggestion(span, \"remove `mut` from the parameter\", ident.to_string(), Applicability::MachineApplicable);\n+                    db.span_suggestion(span, \"remove `mut` from the parameter\", ident, Applicability::MachineApplicable);\n                 }\n                 BuiltinLintDiagnostics::MissingAbi(span, default_abi) => {\n                     db.span_label(span, \"ABI should be specified here\");\n@@ -778,7 +778,7 @@ pub trait LintContext: Sized {\n \n                     // Suggest the most probable if we found one\n                     if let Some(best_match) = find_best_match_for_name(&possibilities, name, None) {\n-                        db.span_suggestion(name_span, \"did you mean\", format!(\"{best_match}\"), Applicability::MaybeIncorrect);\n+                        db.span_suggestion(name_span, \"did you mean\", best_match, Applicability::MaybeIncorrect);\n                     }\n                 },\n                 BuiltinLintDiagnostics::UnexpectedCfg((name, name_span), Some((value, value_span))) => {\n@@ -805,7 +805,7 @@ pub trait LintContext: Sized {\n                     } else {\n                         db.note(&format!(\"no expected value for `{name}`\"));\n                         if name != sym::feature {\n-                            db.span_suggestion(name_span.shrink_to_hi().to(value_span), \"remove the value\", String::new(), Applicability::MaybeIncorrect);\n+                            db.span_suggestion(name_span.shrink_to_hi().to(value_span), \"remove the value\", \"\", Applicability::MaybeIncorrect);\n                         }\n                     }\n                 },\n@@ -852,7 +852,7 @@ pub trait LintContext: Sized {\n                     db.span_suggestion(\n                         deletion_span,\n                         \"elide the unused lifetime\",\n-                        String::new(),\n+                        \"\",\n                         Applicability::MachineApplicable,\n                     );\n                 },"}, {"sha": "5088fdf130e87b76c4c6ef61216774f9a4220010", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                     .span_suggestion(\n                         span,\n                         \"try using `ty::<kind>` directly\",\n-                        \"ty\".to_string(),\n+                        \"ty\",\n                         Applicability::MaybeIncorrect, // ty maybe needs an import\n                     )\n                     .emit();\n@@ -170,7 +170,7 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                                         .span_suggestion(\n                                             path.span,\n                                             \"try using `ty::<kind>` directly\",\n-                                            \"ty\".to_string(),\n+                                            \"ty\",\n                                             Applicability::MaybeIncorrect, // ty maybe needs an import\n                                         )\n                                         .emit();\n@@ -188,7 +188,7 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                                         .span_suggestion(\n                                             path.span,\n                                             \"try using `ty::<kind>` directly\",\n-                                            \"ty\".to_string(),\n+                                            \"ty\",\n                                             Applicability::MaybeIncorrect, // ty maybe needs an import\n                                         )\n                                         .emit();\n@@ -208,7 +208,7 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                                         .span_suggestion(\n                                             path.span,\n                                             \"try using `ty::<kind>` directly\",\n-                                            \"ty\".to_string(),\n+                                            \"ty\",\n                                             Applicability::MaybeIncorrect, // ty maybe needs an import\n                                         )\n                                         .emit();"}, {"sha": "7faac5b5296d46415c320049da3f9355d3f89aab", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -443,7 +443,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                             .span_suggestion(\n                                                 sp,\n                                                 \"change it to\",\n-                                                new_lint_name.to_string(),\n+                                                new_lint_name,\n                                                 Applicability::MachineApplicable,\n                                             )\n                                             .emit();\n@@ -516,7 +516,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     err.span_suggestion(\n                                         sp,\n                                         \"use the new name\",\n-                                        new_name.to_string(),\n+                                        new_name,\n                                         Applicability::MachineApplicable,\n                                     );\n                                 }\n@@ -543,7 +543,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 db.span_suggestion(\n                                     sp,\n                                     \"did you mean\",\n-                                    suggestion.to_string(),\n+                                    suggestion,\n                                     Applicability::MachineApplicable,\n                                 );\n                             }"}, {"sha": "f06a8b8f4b0c3fb82b04b28dfb9cdf2f9dda66a7", "filename": "compiler/rustc_lint/src/redundant_semicolon.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -54,9 +54,7 @@ fn maybe_lint_redundant_semis(cx: &EarlyContext<'_>, seq: &mut Option<(Span, boo\n             } else {\n                 (\"unnecessary trailing semicolon\", \"remove this semicolon\")\n             };\n-            lint.build(msg)\n-                .span_suggestion(span, rem, String::new(), Applicability::MaybeIncorrect)\n-                .emit();\n+            lint.build(msg).span_suggestion(span, rem, \"\", Applicability::MaybeIncorrect).emit();\n         });\n     }\n }"}, {"sha": "73f353e62c177e68da1db027bd4fc5f0a0cc973f", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -160,7 +160,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 lint.span_suggestion_verbose(\n                     expr.span.shrink_to_lo(),\n                     \"use `let _ = ...` to ignore the resulting value\",\n-                    \"let _ = \".to_string(),\n+                    \"let _ = \",\n                     Applicability::MachineApplicable,\n                 );\n                 lint.emit();"}, {"sha": "d23707a9d316ec858fcbcbeb1a1b816a43d659bd", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -153,7 +153,7 @@ pub fn deprecation_suggestion(\n         diag.span_suggestion(\n             span,\n             &format!(\"replace the use of the deprecated {}\", kind),\n-            suggestion.to_string(),\n+            suggestion,\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "912b09eeca861aa932bf7fc517e9c5505453901f", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -933,7 +933,7 @@ impl ObjectSafetyViolation {\n                                  trait objects\",\n                                 name\n                             ),\n-                            sugg.to_string(),\n+                            sugg,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -957,7 +957,7 @@ impl ObjectSafetyViolation {\n                         \"consider changing method `{}`'s `self` parameter to be `&self`\",\n                         name\n                     ),\n-                    \"&Self\".to_string(),\n+                    \"&Self\",\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "273827864f1a405295e2f7f0499d605c82f290f0", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -105,7 +105,7 @@ pub(crate) fn emit_unescape_error(\n                     handler.span_suggestion(\n                         span,\n                         \"consider removing the non-printing characters\",\n-                        ch.to_string(),\n+                        ch,\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -141,7 +141,7 @@ pub(crate) fn emit_unescape_error(\n                 .span_suggestion(\n                     char_span,\n                     \"escape the character\",\n-                    c.escape_default().to_string(),\n+                    c.escape_default(),\n                     Applicability::MachineApplicable,\n                 )\n                 .emit();\n@@ -157,7 +157,7 @@ pub(crate) fn emit_unescape_error(\n                 .span_suggestion(\n                     span,\n                     \"escape the character\",\n-                    \"\\\\r\".to_string(),\n+                    \"\\\\r\",\n                     Applicability::MachineApplicable,\n                 )\n                 .emit();\n@@ -299,7 +299,7 @@ pub(crate) fn emit_unescape_error(\n                 .span_suggestion_verbose(\n                     span.shrink_to_hi(),\n                     \"terminate the unicode escape\",\n-                    \"}\".to_string(),\n+                    \"}\",\n                     Applicability::MaybeIncorrect,\n                 )\n                 .emit();"}, {"sha": "2c68cc5895c6ea4a8317217b194a0e05c81bdc65", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -369,7 +369,7 @@ pub(super) fn check_for_substitution<'a>(\n             \"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n             ch, u_name, ascii_char, ascii_name\n         );\n-        err.span_suggestion(span, &msg, ascii_char.to_string(), Applicability::MaybeIncorrect);\n+        err.span_suggestion(span, &msg, ascii_char, Applicability::MaybeIncorrect);\n     }\n     token.clone()\n }"}, {"sha": "f3bdd63ee6dd44325de216f324e5e49bd8907164", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -282,7 +282,7 @@ fn error_malformed_cfg_attr_missing(span: Span, parse_sess: &ParseSess) {\n         .span_suggestion(\n             span,\n             \"missing condition and attribute\",\n-            CFG_ATTR_GRAMMAR_HELP.to_string(),\n+            CFG_ATTR_GRAMMAR_HELP,\n             Applicability::HasPlaceholders,\n         )\n         .note(CFG_ATTR_NOTE_REF)"}, {"sha": "acdbddf4099e6411fd213901c027ae9e54da8aa2", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -78,7 +78,7 @@ impl<'a> Parser<'a> {\n                         err.span_suggestion_verbose(\n                             replacement_span,\n                             \"you might have meant to write a regular comment\",\n-                            String::new(),\n+                            \"\",\n                             rustc_errors::Applicability::MachineApplicable,\n                         );\n                     }\n@@ -200,12 +200,11 @@ impl<'a> Parser<'a> {\n                         item.kind.descr(),\n                         attr_name\n                     ),\n-                    (match attr_type {\n+                    match attr_type {\n                         OuterAttributeType::Attribute => \"\",\n                         OuterAttributeType::DocBlockComment => \"*\",\n                         OuterAttributeType::DocComment => \"/\",\n-                    })\n-                    .to_string(),\n+                    },\n                     rustc_errors::Applicability::MachineApplicable,\n                 );\n                 return None;"}, {"sha": "784d140c458fcf7c56a45ed5c1782961059f0fdd", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -431,7 +431,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion_verbose(\n                     ident.span.shrink_to_lo(),\n                     &format!(\"escape `{}` to use it as an identifier\", ident.name),\n-                    \"r#\".to_owned(),\n+                    \"r#\",\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -445,7 +445,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion(\n                     self.token.span,\n                     \"remove this comma\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 );\n             }\n@@ -518,7 +518,7 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 let sp = self.prev_token.span;\n                 self.struct_span_err(sp, &msg)\n-                    .span_suggestion_short(sp, \"change this to `;`\", \";\".to_string(), appl)\n+                    .span_suggestion_short(sp, \"change this to `;`\", \";\", appl)\n                     .emit();\n                 return Ok(true);\n             } else if self.look_ahead(0, |t| {\n@@ -537,7 +537,7 @@ impl<'a> Parser<'a> {\n                 let sp = self.prev_token.span.shrink_to_hi();\n                 self.struct_span_err(sp, &msg)\n                     .span_label(self.token.span, \"unexpected token\")\n-                    .span_suggestion_short(sp, \"add `;` here\", \";\".to_string(), appl)\n+                    .span_suggestion_short(sp, \"add `;` here\", \";\", appl)\n                     .emit();\n                 return Ok(true);\n             }\n@@ -664,7 +664,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion(\n                     span,\n                     &format!(\"remove the extra `#`{}\", pluralize!(count)),\n-                    String::new(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 );\n                 err.span_label(\n@@ -761,7 +761,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion(\n                     sp,\n                     \"maybe write a path separator here\",\n-                    \"::\".to_string(),\n+                    \"::\",\n                     if allow_unstable {\n                         Applicability::MaybeIncorrect\n                     } else {\n@@ -773,7 +773,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion(\n                     sp,\n                     \"try using a semicolon\",\n-                    \";\".to_string(),\n+                    \";\",\n                     Applicability::MaybeIncorrect,\n                 );\n             } else if allow_unstable {\n@@ -917,7 +917,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 span,\n                 &format!(\"remove extra angle bracket{}\", pluralize!(total_num_of_gt)),\n-                String::new(),\n+                \"\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -999,7 +999,7 @@ impl<'a> Parser<'a> {\n                         e.span_suggestion_verbose(\n                             binop.span.shrink_to_lo(),\n                             TURBOFISH_SUGGESTION_STR,\n-                            \"::\".to_string(),\n+                            \"::\",\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();\n@@ -1158,7 +1158,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion_verbose(\n                         op.span.shrink_to_lo(),\n                         TURBOFISH_SUGGESTION_STR,\n-                        \"::\".to_string(),\n+                        \"::\",\n                         Applicability::MaybeIncorrect,\n                     );\n                 };\n@@ -1701,7 +1701,7 @@ impl<'a> Parser<'a> {\n                     Applicability::MachineApplicable,\n                 );\n             }\n-            err.span_suggestion(lo.shrink_to_lo(), &format!(\"{prefix}you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\"), \"r#\".to_string(), Applicability::MachineApplicable);\n+            err.span_suggestion(lo.shrink_to_lo(), &format!(\"{prefix}you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\"), \"r#\", Applicability::MachineApplicable);\n             err.emit();\n             Ok(self.mk_expr_err(lo.to(hi)))\n         } else {\n@@ -1997,7 +1997,7 @@ impl<'a> Parser<'a> {\n             err.span_suggestion(\n                 span,\n                 \"declare the type after the parameter binding\",\n-                String::from(\"<identifier>: <type>\"),\n+                \"<identifier>: <type>\",\n                 Applicability::HasPlaceholders,\n             );\n             return Some(ident);\n@@ -2102,7 +2102,7 @@ impl<'a> Parser<'a> {\n         .span_suggestion_short(\n             pat.span,\n             \"give this argument a name or use an underscore to ignore it\",\n-            \"_\".to_owned(),\n+            \"_\",\n             Applicability::MachineApplicable,\n         )\n         .emit();\n@@ -2336,7 +2336,7 @@ impl<'a> Parser<'a> {\n             err.span_suggestion_verbose(\n                 start.until(self.token.span),\n                 \"the `const` keyword is only needed in the definition of the type\",\n-                String::new(),\n+                \"\",\n                 Applicability::MaybeIncorrect,\n             );\n             err.emit();\n@@ -2394,7 +2394,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion(\n                         snapshot.token.span,\n                         \"if you meant to use an associated type binding, replace `==` with `=`\",\n-                        \"=\".to_string(),\n+                        \"=\",\n                         Applicability::MaybeIncorrect,\n                     );\n                     let value = self.mk_expr_err(start.to(expr.span));\n@@ -2408,7 +2408,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion(\n                         snapshot.token.span,\n                         \"write a path separator here\",\n-                        \"::\".to_string(),\n+                        \"::\",\n                         Applicability::MaybeIncorrect,\n                     );\n                     err.emit();\n@@ -2461,7 +2461,7 @@ impl<'a> Parser<'a> {\n         err.span_suggestion_verbose(\n             move_async_span,\n             \"try switching the order\",\n-            \"async move\".to_owned(),\n+            \"async move\",\n             Applicability::MaybeIncorrect,\n         );\n         err\n@@ -2566,7 +2566,7 @@ impl<'a> Parser<'a> {\n                             err.span_suggestion(\n                                 span,\n                                 \"maybe write a path separator here\",\n-                                \"::\".to_string(),\n+                                \"::\",\n                                 Applicability::MaybeIncorrect,\n                             );\n                         } else {\n@@ -2669,7 +2669,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion(\n                         between_span,\n                         \"use single colon\",\n-                        \": \".to_owned(),\n+                        \": \",\n                         Applicability::MachineApplicable,\n                     );\n                     return Err(err);"}, {"sha": "236ccef1d0335374ad0dd21a717e5cca443170f0", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -230,7 +230,7 @@ impl<'a> Parser<'a> {\n                     .span_suggestion_short(\n                         sp,\n                         &format!(\"`{s}=` is not a valid comparison operator, use `{s}`\", s = sugg),\n-                        sugg.to_string(),\n+                        sugg,\n                         Applicability::MachineApplicable,\n                     )\n                     .emit();\n@@ -247,7 +247,7 @@ impl<'a> Parser<'a> {\n                     .span_suggestion_short(\n                         sp,\n                         \"`<>` is not a valid comparison operator, use `!=`\",\n-                        \"!=\".to_string(),\n+                        \"!=\",\n                         Applicability::MachineApplicable,\n                     )\n                     .emit();\n@@ -459,7 +459,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion_short(\n                 self.token.span,\n                 &format!(\"use `{good}` to perform logical {english}\"),\n-                good.to_string(),\n+                good,\n                 Applicability::MachineApplicable,\n             )\n             .note(\"unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\")\n@@ -584,7 +584,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion_verbose(\n                         lo,\n                         \"try removing the `+`\",\n-                        \"\".to_string(),\n+                        \"\",\n                         Applicability::MachineApplicable,\n                     );\n                 }\n@@ -634,7 +634,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion_short(\n                 lo,\n                 \"use `!` to perform bitwise not\",\n-                \"!\".to_owned(),\n+                \"!\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -673,7 +673,7 @@ impl<'a> Parser<'a> {\n             // trailing whitespace after the `!` in our suggestion\n             self.sess.source_map().span_until_non_whitespace(lo.to(not_token.span)),\n             \"use `!` to perform logical negation\",\n-            \"!\".to_owned(),\n+            \"!\",\n             Applicability::MachineApplicable,\n         )\n         .emit();\n@@ -744,7 +744,7 @@ impl<'a> Parser<'a> {\n                                     .span_suggestion(\n                                         label.ident.span,\n                                         \"use the correct loop label format\",\n-                                        label.ident.to_string(),\n+                                        label.ident,\n                                         Applicability::MachineApplicable,\n                                     )\n                                     .emit();\n@@ -885,7 +885,7 @@ impl<'a> Parser<'a> {\n                         \"{}remove the type ascription\",\n                         if is_nightly { \"alternatively, \" } else { \"\" }\n                     ),\n-                    String::new(),\n+                    \"\",\n                     if is_nightly {\n                         Applicability::MaybeIncorrect\n                     } else {\n@@ -929,7 +929,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 lt_span,\n                 \"remove the lifetime annotation\",\n-                String::new(),\n+                \"\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -1626,7 +1626,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion_short(\n                 lo.shrink_to_hi(),\n                 \"add `:` after the label\",\n-                \": \".to_string(),\n+                \": \",\n                 Applicability::MachineApplicable,\n             )\n             .note(\"labels are used before loops and blocks, allowing e.g., `break 'label` to them\")\n@@ -1645,7 +1645,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 span_dc,\n                 \"replace with the new syntax\",\n-                \"try\".to_string(),\n+                \"try\",\n                 Applicability::MachineApplicable,\n             )\n             .note(\"following RFC #2388, the new non-placeholder syntax is `try`\")\n@@ -2088,7 +2088,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 span_for,\n                 \"remove the parameters\",\n-                String::new(),\n+                \"\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -2352,7 +2352,7 @@ impl<'a> Parser<'a> {\n                         .span_suggestion(\n                             cond.span.shrink_to_lo(),\n                             \"add an `if` if this is the condition of a chained `else if` statement\",\n-                            \"if \".to_string(),\n+                            \"if \",\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();\n@@ -2388,12 +2388,7 @@ impl<'a> Parser<'a> {\n         self.struct_span_err(last, \"outer attributes are not allowed on `if` and `else` branches\")\n             .span_label(branch_span, \"the attributes are attached to this branch\")\n             .span_label(ctx_span, format!(\"the branch belongs to this `{ctx}`\"))\n-            .span_suggestion(\n-                span,\n-                \"remove the attributes\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            )\n+            .span_suggestion(span, \"remove the attributes\", \"\", Applicability::MachineApplicable)\n             .emit();\n     }\n \n@@ -2502,7 +2497,7 @@ impl<'a> Parser<'a> {\n                 e.span_suggestion_short(\n                     match_span,\n                     \"try removing this `match`\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MaybeIncorrect, // speculative\n                 );\n             }\n@@ -2578,7 +2573,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion(\n                     semi_sp,\n                     \"use a comma to end a `match` arm expression\",\n-                    \",\".to_string(),\n+                    \",\",\n                     Applicability::MachineApplicable,\n                 );\n             }\n@@ -2679,7 +2674,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion(\n                         this.token.span,\n                         \"try using a fat arrow here\",\n-                        \"=>\".to_string(),\n+                        \"=>\",\n                         Applicability::MaybeIncorrect,\n                     );\n                     err.emit();\n@@ -2739,7 +2734,7 @@ impl<'a> Parser<'a> {\n                                 err.span_suggestion_short(\n                                     arm_start_span.shrink_to_hi(),\n                                     \"missing a comma here to end this `match` arm\",\n-                                    \",\".to_owned(),\n+                                    \",\",\n                                     Applicability::MachineApplicable,\n                                 );\n                                 return Err(err);\n@@ -2768,7 +2763,7 @@ impl<'a> Parser<'a> {\n                                 .span_suggestion(\n                                     hi.shrink_to_hi(),\n                                     \"missing a comma here to end this `match` arm\",\n-                                    \",\".to_owned(),\n+                                    \",\",\n                                     Applicability::MachineApplicable,\n                                 )\n                                 .emit();\n@@ -3049,7 +3044,7 @@ impl<'a> Parser<'a> {\n         .span_suggestion_short(\n             self.token.span,\n             \"remove this comma\",\n-            String::new(),\n+            \"\",\n             Applicability::MachineApplicable,\n         )\n         .note(\"the base struct must always be the last field\")\n@@ -3103,7 +3098,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 field_name.span.shrink_to_hi().to(self.token.span),\n                 \"replace equals symbol with a colon\",\n-                \":\".to_string(),\n+                \":\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -3114,13 +3109,13 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 span,\n                 \"use `..` for an exclusive range\",\n-                \"..\".to_owned(),\n+                \"..\",\n                 Applicability::MaybeIncorrect,\n             )\n             .span_suggestion(\n                 span,\n                 \"or `..=` for an inclusive range\",\n-                \"..=\".to_owned(),\n+                \"..=\",\n                 Applicability::MaybeIncorrect,\n             )\n             .emit();\n@@ -3132,7 +3127,7 @@ impl<'a> Parser<'a> {\n                 span,\n                 \"if you meant to write a comparison against a negative value, add a \\\n              space in between `<` and `-`\",\n-                \"< -\".to_string(),\n+                \"< -\",\n                 Applicability::MaybeIncorrect,\n             )\n             .emit();"}, {"sha": "1acfd93d86fafb91412693093e63c27ea12797ce", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -271,7 +271,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion_verbose(\n                     prev_token.shrink_to_hi().to(self.prev_token.span),\n                     \"consider joining the two `where` clauses into one\",\n-                    \",\".to_owned(),\n+                    \",\",\n                     Applicability::MaybeIncorrect,\n                 );\n                 err.emit();"}, {"sha": "1d50ce767afb104f7ee935aab94378d72d091f96", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -298,7 +298,7 @@ impl<'a> Parser<'a> {\n                     .span_suggestion_short(\n                         span,\n                         \"items are imported using the `use` keyword\",\n-                        \"use\".to_owned(),\n+                        \"use\",\n                         Applicability::MachineApplicable,\n                     )\n                     .emit();\n@@ -458,7 +458,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion(\n                         path.span,\n                         \"perhaps you meant to define a macro\",\n-                        \"macro_rules\".to_string(),\n+                        \"macro_rules\",\n                         Applicability::MachineApplicable,\n                     );\n                 }\n@@ -486,7 +486,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion_verbose(\n                     self.token.span,\n                     \"consider removing this semicolon\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -606,7 +606,7 @@ impl<'a> Parser<'a> {\n                         .span_suggestion_short(\n                             missing_for_span,\n                             \"add `for` here\",\n-                            \" for \".to_string(),\n+                            \" for \",\n                             Applicability::MachineApplicable,\n                         )\n                         .emit();\n@@ -1082,7 +1082,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 span.with_hi(ident.span.lo()),\n                 \"try using a static value\",\n-                \"static \".to_string(),\n+                \"static \",\n                 Applicability::MachineApplicable,\n             )\n             .note(\"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\")\n@@ -1121,7 +1121,7 @@ impl<'a> Parser<'a> {\n                 .span_suggestion(\n                     const_span,\n                     \"you might want to declare a static instead\",\n-                    \"static\".to_owned(),\n+                    \"static\",\n                     Applicability::MaybeIncorrect,\n                 )\n                 .emit();\n@@ -1555,7 +1555,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion_short(\n                     self.prev_token.span,\n                     \"field names and their types are separated with `:`\",\n-                    \":\".to_string(),\n+                    \":\",\n                     Applicability::MachineApplicable,\n                 );\n                 err.emit();\n@@ -1582,7 +1582,7 @@ impl<'a> Parser<'a> {\n                 .span_suggestion_verbose(\n                     self.token.span,\n                     \"write a path separator here\",\n-                    \"::\".to_string(),\n+                    \"::\",\n                     Applicability::MaybeIncorrect,\n                 )\n                 .emit();\n@@ -1595,7 +1595,7 @@ impl<'a> Parser<'a> {\n                 .span_suggestion(\n                     sp,\n                     \"remove this unsupported default value\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 )\n                 .emit();\n@@ -1691,7 +1691,7 @@ impl<'a> Parser<'a> {\n                     .span_suggestion(\n                         macro_rules_span,\n                         \"add a `!`\",\n-                        \"macro_rules!\".to_owned(),\n+                        \"macro_rules!\",\n                         Applicability::MachineApplicable,\n                     )\n                     .emit();\n@@ -1720,12 +1720,7 @@ impl<'a> Parser<'a> {\n             // Handle macro_rules! foo!\n             let span = self.prev_token.span;\n             self.struct_span_err(span, \"macro names aren't followed by a `!`\")\n-                .span_suggestion(\n-                    span,\n-                    \"remove the `!`\",\n-                    \"\".to_owned(),\n-                    Applicability::MachineApplicable,\n-                )\n+                .span_suggestion(span, \"remove the `!`\", \"\", Applicability::MachineApplicable)\n                 .emit();\n         }\n \n@@ -1751,7 +1746,7 @@ impl<'a> Parser<'a> {\n                 .span_suggestion(\n                     vis.span,\n                     \"try exporting the macro\",\n-                    \"#[macro_export]\".to_owned(),\n+                    \"#[macro_export]\",\n                     Applicability::MaybeIncorrect, // speculative\n                 )\n                 .emit();\n@@ -1760,7 +1755,7 @@ impl<'a> Parser<'a> {\n                 .span_suggestion(\n                     vis.span,\n                     \"remove the visibility\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 )\n                 .help(&format!(\"try adjusting the macro to put `{vstr}` inside the invocation\"))\n@@ -1794,14 +1789,14 @@ impl<'a> Parser<'a> {\n             err.span_suggestion(\n                 span,\n                 \"change the delimiters to curly braces\",\n-                \" { /* items */ }\".to_string(),\n+                \" { /* items */ }\",\n                 Applicability::HasPlaceholders,\n             );\n         }\n         err.span_suggestion(\n             span.shrink_to_hi(),\n             \"add a semicolon\",\n-            ';'.to_string(),\n+            ';',\n             Applicability::MaybeIncorrect,\n         );\n         err.emit();\n@@ -1826,7 +1821,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 item.unwrap().span,\n                 &format!(\"consider creating a new `{kw_str}` definition instead of nesting\"),\n-                String::new(),\n+                \"\",\n                 Applicability::MaybeIncorrect,\n             )\n             .emit();\n@@ -2086,7 +2081,7 @@ impl<'a> Parser<'a> {\n                         err.span_suggestion(\n                             self.token.uninterpolated_span(),\n                             &format!(\"`{original_kw}` already used earlier, remove this one\"),\n-                            \"\".to_string(),\n+                            \"\",\n                             Applicability::MachineApplicable,\n                         )\n                         .span_note(original_sp, &format!(\"`{original_kw}` first seen here\"));\n@@ -2134,7 +2129,7 @@ impl<'a> Parser<'a> {\n                                 err.span_suggestion(\n                                     current_vis.span,\n                                     \"there is already a visibility modifier, remove one\",\n-                                    \"\".to_string(),\n+                                    \"\",\n                                     Applicability::MachineApplicable,\n                                 )\n                                 .span_note(orig_vis.span, \"explicit visibility first seen here\");"}, {"sha": "4df9ad26a587b3ebc434a45a8c1bed759c531a2d", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -1350,7 +1350,7 @@ impl<'a> Parser<'a> {\n                         .span_suggestion(\n                             lit.span,\n                             \"specify the ABI with a string literal\",\n-                            \"\\\"C\\\"\".to_string(),\n+                            \"\\\"C\\\"\",\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();"}, {"sha": "ba77a39584093a7d6697ae43a3b526c3bc0b7341", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -218,12 +218,7 @@ impl<'a> Parser<'a> {\n         if let token::OrOr = self.token.kind {\n             let span = self.token.span;\n             let mut err = self.struct_span_err(span, \"unexpected `||` before function parameter\");\n-            err.span_suggestion(\n-                span,\n-                \"remove the `||`\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            );\n+            err.span_suggestion(span, \"remove the `||`\", \"\", Applicability::MachineApplicable);\n             err.note(\"alternatives in or-patterns are separated with `|`, not `||`\");\n             err.emit();\n             self.bump();\n@@ -287,7 +282,7 @@ impl<'a> Parser<'a> {\n         err.span_suggestion(\n             self.token.span,\n             \"use a single `|` to separate multiple alternative patterns\",\n-            \"|\".to_owned(),\n+            \"|\",\n             Applicability::MachineApplicable,\n         );\n         if let Some(lo) = lo {\n@@ -303,7 +298,7 @@ impl<'a> Parser<'a> {\n         err.span_suggestion(\n             span,\n             &format!(\"remove the `{}`\", pprust::token_to_string(&self.token)),\n-            String::new(),\n+            \"\",\n             Applicability::MachineApplicable,\n         );\n         if let Some(lo) = lo {\n@@ -433,7 +428,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion_short(\n                 lo,\n                 \"for a rest pattern, use `..` instead of `...`\",\n-                \"..\".to_owned(),\n+                \"..\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -537,12 +532,7 @@ impl<'a> Parser<'a> {\n \n             let span = self.prev_token.span;\n             self.struct_span_err(span, &format!(\"unexpected lifetime `{}` in pattern\", name))\n-                .span_suggestion(\n-                    span,\n-                    \"remove the lifetime\",\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                )\n+                .span_suggestion(span, \"remove the lifetime\", \"\", Applicability::MachineApplicable)\n                 .emit();\n         }\n     }\n@@ -665,7 +655,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 span,\n                 \"remove the additional `mut`s\",\n-                String::new(),\n+                \"\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -759,24 +749,14 @@ impl<'a> Parser<'a> {\n \n     fn error_inclusive_range_with_extra_equals(&self, span: Span) {\n         self.struct_span_err(span, \"unexpected `=` after inclusive range\")\n-            .span_suggestion_short(\n-                span,\n-                \"use `..=` instead\",\n-                \"..=\".to_string(),\n-                Applicability::MaybeIncorrect,\n-            )\n+            .span_suggestion_short(span, \"use `..=` instead\", \"..=\", Applicability::MaybeIncorrect)\n             .note(\"inclusive ranges end with a single equals sign (`..=`)\")\n             .emit();\n     }\n \n     fn error_inclusive_range_with_no_end(&self, span: Span) {\n         struct_span_err!(self.sess.span_diagnostic, span, E0586, \"inclusive range with no end\")\n-            .span_suggestion_short(\n-                span,\n-                \"use `..` instead\",\n-                \"..\".to_string(),\n-                Applicability::MachineApplicable,\n-            )\n+            .span_suggestion_short(span, \"use `..` instead\", \"..\", Applicability::MachineApplicable)\n             .note(\"inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\")\n             .emit();\n     }\n@@ -794,7 +774,7 @@ impl<'a> Parser<'a> {\n                 .span_suggestion_short(\n                     re.span,\n                     \"use `..=` instead\",\n-                    \"..=\".to_string(),\n+                    \"..=\",\n                     Applicability::MachineApplicable,\n                 )\n                 .emit();\n@@ -1035,7 +1015,7 @@ impl<'a> Parser<'a> {\n                         err.span_suggestion_short(\n                             sp,\n                             \"remove this comma\",\n-                            String::new(),\n+                            \"\",\n                             Applicability::MachineApplicable,\n                         );\n                     }\n@@ -1107,7 +1087,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 self.token.span,\n                 \"to omit remaining fields, use one fewer `.`\",\n-                \"..\".to_owned(),\n+                \"..\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();"}, {"sha": "da46af60f727ec872badf970914788a53b166625", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -112,7 +112,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 self.prev_token.span,\n                 \"use double colon\",\n-                \"::\".to_string(),\n+                \"::\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -283,7 +283,7 @@ impl<'a> Parser<'a> {\n                             err.span_suggestion_verbose(\n                                 arg.span().shrink_to_hi(),\n                                 \"you might have meant to end the type parameters here\",\n-                                \">\".to_string(),\n+                                \">\",\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }\n@@ -455,7 +455,7 @@ impl<'a> Parser<'a> {\n                             \"remove extra angle bracket{}\",\n                             pluralize!(snapshot.unmatched_angle_bracket_count)\n                         ),\n-                        String::new(),\n+                        \"\",\n                         Applicability::MachineApplicable,\n                     )\n                     .emit();\n@@ -489,7 +489,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion_verbose(\n                         self.prev_token.span.until(self.token.span),\n                         \"use a comma to separate type parameters\",\n-                        \", \".to_string(),\n+                        \", \",\n                         Applicability::MachineApplicable,\n                     );\n                     err.emit();\n@@ -592,13 +592,13 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion(\n                         self.sess.source_map().next_point(eq).to(before_next),\n                         \"to constrain the associated type, add a type after `=`\",\n-                        \" TheType\".to_string(),\n+                        \" TheType\",\n                         Applicability::HasPlaceholders,\n                     );\n                     err.span_suggestion(\n                         eq.to(before_next),\n                         &format!(\"remove the `=` if `{}` is a type\", ident),\n-                        String::new(),\n+                        \"\",\n                         Applicability::MaybeIncorrect,\n                     )\n                 } else {"}, {"sha": "ad0128cd9ed129b1a236fdc5be0e4303d95ed583", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -209,7 +209,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, Stmt> {\n         let stmt = self.recover_local_after_let(lo, attrs)?;\n         self.struct_span_err(lo, \"invalid variable declaration\")\n-            .span_suggestion(lo, msg, sugg.to_string(), Applicability::MachineApplicable)\n+            .span_suggestion(lo, msg, sugg, Applicability::MachineApplicable)\n             .emit();\n         Ok(stmt)\n     }\n@@ -287,7 +287,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion_short(\n                     colon_sp,\n                     \"use `=` if you meant to assign\",\n-                    \" =\".to_string(),\n+                    \" =\",\n                     Applicability::MachineApplicable,\n                 );\n                 err.emit();\n@@ -391,7 +391,7 @@ impl<'a> Parser<'a> {\n                 .span_suggestion_short(\n                     self.token.span,\n                     \"initialize the variable\",\n-                    \"=\".to_string(),\n+                    \"=\",\n                     Applicability::MaybeIncorrect,\n                 )\n                 .help(\"if you meant to overwrite, remove the `let` binding\")"}, {"sha": "31b40a83e605232491382eb9115d5048048d2120", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -216,7 +216,7 @@ impl<'a> Parser<'a> {\n                 .span_suggestion_short(\n                     self.prev_token.span,\n                     \"use `->` instead\",\n-                    \"->\".to_string(),\n+                    \"->\",\n                     Applicability::MachineApplicable,\n                 )\n                 .emit();\n@@ -479,7 +479,7 @@ impl<'a> Parser<'a> {\n             err.span_suggestion(\n                 span,\n                 \"place `mut` before `dyn`\",\n-                \"&mut dyn\".to_string(),\n+                \"&mut dyn\",\n                 Applicability::MachineApplicable,\n             );\n             err.emit();\n@@ -548,7 +548,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion_short(\n                 qual_span,\n                 &format!(\"remove the `{}` qualifier\", qual),\n-                String::new(),\n+                \"\",\n                 Applicability::MaybeIncorrect,\n             )\n             .emit();\n@@ -648,7 +648,7 @@ impl<'a> Parser<'a> {\n                     .span_suggestion(\n                         self.token.span,\n                         \"remove this keyword\",\n-                        String::new(),\n+                        \"\",\n                         Applicability::MachineApplicable,\n                     )\n                     .emit();"}, {"sha": "a3b586a41452dc796d469baede296fcd56fe1375", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -918,7 +918,7 @@ impl CheckAttrVisitor<'_> {\n                         .span_suggestion(\n                             replacement_span,\n                             \"remove this attribute\",\n-                            String::new(),\n+                            \"\",\n                             Applicability::MachineApplicable,\n                         )\n                         .emit();\n@@ -1158,7 +1158,7 @@ impl CheckAttrVisitor<'_> {\n                                         diag.span_suggestion_short(\n                                             i_meta.span,\n                                             \"use `notable_trait` instead\",\n-                                            String::from(\"notable_trait\"),\n+                                            \"notable_trait\",\n                                             Applicability::MachineApplicable,\n                                         );\n                                         diag.note(\"`doc(spotlight)` is now a no-op\");\n@@ -1720,7 +1720,7 @@ impl CheckAttrVisitor<'_> {\n                     .span_suggestion(\n                         attr.span,\n                         \"remove this attribute\",\n-                        String::new(),\n+                        \"\",\n                         Applicability::MachineApplicable,\n                     )\n                     .emit();\n@@ -2259,7 +2259,7 @@ impl CheckAttrVisitor<'_> {\n                 .span_suggestion(\n                     attr.span,\n                     \"remove this attribute\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 )\n                 .note(&note)\n@@ -2487,7 +2487,7 @@ fn check_duplicates(\n                         db.span_note(other, \"attribute also specified here\").span_suggestion(\n                             this,\n                             \"remove this attribute\",\n-                            String::new(),\n+                            \"\",\n                             Applicability::MachineApplicable,\n                         );\n                         if matches!(duplicates, FutureWarnFollowing | FutureWarnPreceding) {\n@@ -2522,7 +2522,7 @@ fn check_duplicates(\n                     .span_suggestion(\n                         this,\n                         \"remove this attribute\",\n-                        String::new(),\n+                        \"\",\n                         Applicability::MachineApplicable,\n                     )\n                     .emit();"}, {"sha": "79a6e5180112808e8bb047d2aa6b25ee1f708c15", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                                             break_expr.span,\n                                             \"alternatively, you might have meant to use the \\\n                                              available loop label\",\n-                                            label.ident.to_string(),\n+                                            label.ident,\n                                             Applicability::MaybeIncorrect,\n                                         );\n                                     }"}, {"sha": "c0c696a117581fc1eb017f8199847be40c5493f3", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -308,7 +308,7 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n                 last_span,\n                 \"consider specifying that the asm block is responsible \\\n                 for returning from the function\",\n-                String::from(\", options(noreturn)\"),\n+                \", options(noreturn)\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();"}, {"sha": "9eaefc8b8aa8fa9eeb90024ba54cc3622868f200", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -125,7 +125,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                         .span_suggestion_short(\n                             *span,\n                             \"remove the unnecessary deprecation attribute\",\n-                            String::new(),\n+                            \"\",\n                             rustc_errors::Applicability::MachineApplicable,\n                         )\n                         .emit();"}, {"sha": "80d97cc08861b90e923b569cd41b3d3959ec45e3", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -408,15 +408,15 @@ impl<'a> Resolver<'a> {\n                 err.span_suggestion(\n                     import.use_span_with_attributes,\n                     message,\n-                    String::new(),\n+                    \"\",\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n \n             return;\n         }\n \n-        err.span_suggestion(span, message, String::new(), Applicability::MachineApplicable);\n+        err.span_suggestion(span, message, \"\", Applicability::MachineApplicable);\n     }\n \n     pub(crate) fn lint_if_path_starts_with_module(\n@@ -763,7 +763,7 @@ impl<'a> Resolver<'a> {\n                         err.span_suggestion(\n                             span,\n                             \"try using similarly named label\",\n-                            ident.name.to_string(),\n+                            ident.name,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -796,7 +796,7 @@ impl<'a> Resolver<'a> {\n                     err.span_suggestion(\n                         span,\n                         \"consider importing the module directly\",\n-                        \"\".to_string(),\n+                        \"\",\n                         Applicability::MachineApplicable,\n                     );\n \n@@ -1007,7 +1007,7 @@ impl<'a> Resolver<'a> {\n                         err.span_suggestion(\n                             span,\n                             \"try using similarly named label\",\n-                            ident.name.to_string(),\n+                            ident.name,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -1618,12 +1618,7 @@ impl<'a> Resolver<'a> {\n                 format!(\"maybe you meant this {}\", suggestion.res.descr())\n             }\n         };\n-        err.span_suggestion(\n-            span,\n-            &msg,\n-            suggestion.candidate.to_string(),\n-            Applicability::MaybeIncorrect,\n-        );\n+        err.span_suggestion(span, &msg, suggestion.candidate, Applicability::MaybeIncorrect);\n         true\n     }\n \n@@ -2535,7 +2530,7 @@ fn show_candidates(\n                 err.span_suggestion_verbose(\n                     first.ident.span.until(last.ident.span),\n                     &format!(\"if you import `{}`, refer to it directly\", last.ident),\n-                    String::new(),\n+                    \"\",\n                     Applicability::Unspecified,\n                 );\n             }"}, {"sha": "d2306254e31426b7d6b6acbbcfc639afb50b5aed", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -280,7 +280,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     err.span_suggestion_verbose(\n                         expr_span.shrink_to_lo(),\n                         \"you might have meant to use pattern matching\",\n-                        \"let \".to_string(),\n+                        \"let \",\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -294,7 +294,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             err.span_suggestion_short(\n                 span,\n                 \"you might have meant to use `self` here instead\",\n-                \"self\".to_string(),\n+                \"self\",\n                 Applicability::MaybeIncorrect,\n             );\n             if !self.self_value_is_available(path[0].ident.span) {\n@@ -317,7 +317,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         span,\n                         \"if you meant to use `self`, you are also missing a `self` receiver \\\n                          argument\",\n-                        sugg.to_string(),\n+                        sugg,\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -376,7 +376,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion_verbose(\n                             span,\n                             \"add a `self` receiver parameter to make the associated `fn` a method\",\n-                            sugg.to_string(),\n+                            sugg,\n                             Applicability::MaybeIncorrect,\n                         );\n                         \"doesn't\"\n@@ -612,7 +612,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion_short(\n                             pat_sp.between(ty_sp),\n                             \"use `=` if you meant to assign\",\n-                            \" = \".to_string(),\n+                            \" = \",\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -642,7 +642,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                 err.span_suggestion(\n                                     span,\n                                     \"use the similarly named label\",\n-                                    label_ident.name.to_string(),\n+                                    label_ident.name,\n                                     Applicability::MaybeIncorrect,\n                                 );\n                                 // Do not lint against unused label when we suggest them.\n@@ -656,7 +656,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     err.span_suggestion(\n                         span,\n                         \"perhaps you intended to use this type\",\n-                        correct.to_string(),\n+                        correct,\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -687,7 +687,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion_verbose(\n                             constraint.ident.span.between(trait_ref.span),\n                             \"you might have meant to write a path instead of an associated type bound\",\n-                            \"::\".to_string(),\n+                            \"::\",\n                             Applicability::MachineApplicable,\n                         );\n                     }\n@@ -1079,7 +1079,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 err.span_suggestion_verbose(\n                     span.shrink_to_hi(),\n                     \"use `!` to invoke the macro\",\n-                    \"!\".to_string(),\n+                    \"!\",\n                     Applicability::MaybeIncorrect,\n                 );\n                 if path_str == \"try\" && span.rust_2015() {\n@@ -1228,7 +1228,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion(\n                             span,\n                             \"use this syntax instead\",\n-                            path_str.to_string(),\n+                            path_str,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -1507,7 +1507,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion_short(\n                             colon_sp,\n                             \"maybe you meant to write `;` here\",\n-                            \";\".to_string(),\n+                            \";\",\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n@@ -1518,7 +1518,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             err.span_suggestion(\n                                 colon_sp,\n                                 \"maybe you meant to write a path separator here\",\n-                                \"::\".to_string(),\n+                                \"::\",\n                                 Applicability::MaybeIncorrect,\n                             );\n                             show_label = false;"}, {"sha": "c005541ae1459f7253abc1e4bb6e05b085a03941", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -144,7 +144,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                   .span_suggestion_verbose(\n                       rustc_span::DUMMY_SP,\n                       \"consider enabling this feature\",\n-                      \"#![feature(generic_const_exprs)]\\n\".to_string(),\n+                      \"#![feature(generic_const_exprs)]\\n\",\n                       rustc_errors::Applicability::MaybeIncorrect,\n                   )\n                   .emit()"}, {"sha": "35daf764fff13ecb7f6ee0aa39318bf6056c7960", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -417,15 +417,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                     span.shrink_to_lo(),\n                                     \"consider converting the `Option<T>` into a `Result<T, _>` \\\n                                      using `Option::ok_or` or `Option::ok_or_else`\",\n-                                    \".ok_or_else(|| /* error value */)\".to_string(),\n+                                    \".ok_or_else(|| /* error value */)\",\n                                     Applicability::HasPlaceholders,\n                                 );\n                             } else if should_convert_result_to_option {\n                                 err.span_suggestion_verbose(\n                                     span.shrink_to_lo(),\n                                     \"consider converting the `Result<T, _>` into an `Option<T>` \\\n                                      using `Result::ok`\",\n-                                    \".ok()\".to_string(),\n+                                    \".ok()\",\n                                     Applicability::MachineApplicable,\n                                 );\n                             }"}, {"sha": "74e980b682d5d8bc7d264ea707e6a75b4bd17021", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -701,7 +701,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         err.span_suggestion_verbose(\n                             span.shrink_to_lo(),\n                             \"consider dereferencing here\",\n-                            \"*\".to_string(),\n+                            \"*\",\n                             Applicability::MachineApplicable,\n                         );\n                         return true;\n@@ -1002,7 +1002,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             &format!(\n                 \"consider borrowing the value, since `&{self_ty}` can be coerced into `{object_ty}`\"\n             ),\n-            \"&\".to_string(),\n+            \"&\",\n             Applicability::MaybeIncorrect,\n         );\n     }\n@@ -1059,12 +1059,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         format!(\"consider removing {} leading `&`-references\", remove_refs)\n                     };\n \n-                    err.span_suggestion_short(\n-                        sp,\n-                        &msg,\n-                        String::new(),\n-                        Applicability::MachineApplicable,\n-                    );\n+                    err.span_suggestion_short(sp, &msg, \"\", Applicability::MachineApplicable);\n                     suggested = true;\n                     break;\n                 }\n@@ -1087,7 +1082,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.span_suggestion_verbose(\n                         expr.span.shrink_to_hi().with_hi(span.hi()),\n                         \"remove the `.await`\",\n-                        String::new(),\n+                        \"\",\n                         Applicability::MachineApplicable,\n                     );\n                     // FIXME: account for associated `async fn`s.\n@@ -1115,14 +1110,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 err.span_suggestion_verbose(\n                                     span.shrink_to_lo(),\n                                     &msg,\n-                                    \"async \".to_string(),\n+                                    \"async \",\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             } else {\n                                 err.span_suggestion_verbose(\n                                     vis_span.shrink_to_hi(),\n                                     &msg,\n-                                    \" async\".to_string(),\n+                                    \" async\",\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             }\n@@ -1190,7 +1185,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         err.span_suggestion_verbose(\n                             sp,\n                             \"consider changing this borrow's mutability\",\n-                            \"&mut \".to_string(),\n+                            \"&mut \",\n                             Applicability::MachineApplicable,\n                         );\n                     } else {\n@@ -1241,7 +1236,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             err.span_suggestion(\n                 self.tcx.sess.source_map().end_point(stmt.span),\n                 \"remove this semicolon\",\n-                String::new(),\n+                \"\",\n                 Applicability::MachineApplicable\n             );\n             return true;\n@@ -2275,7 +2270,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         err.span_suggestion_verbose(\n                             span.shrink_to_lo(),\n                             \"consider borrowing here\",\n-                            \"&\".to_owned(),\n+                            \"&\",\n                             Applicability::MachineApplicable,\n                         );\n                         err.note(\"all local variables must have a statically known size\");\n@@ -2285,7 +2280,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             param.ty_span.shrink_to_lo(),\n                             \"function arguments must have a statically known size, borrowed types \\\n                             always have a known size\",\n-                            \"&\".to_owned(),\n+                            \"&\",\n                             Applicability::MachineApplicable,\n                         );\n                     }\n@@ -2303,7 +2298,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         span.shrink_to_lo(),\n                         \"function arguments must have a statically known size, borrowed types \\\n                          always have a known size\",\n-                        \"&\".to_string(),\n+                        \"&\",\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n@@ -2358,7 +2353,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 err.span_suggestion(\n                     span.shrink_to_lo(),\n                     \"borrowed types always have a statically known size\",\n-                    \"&\".to_string(),\n+                    \"&\",\n                     Applicability::MachineApplicable,\n                 );\n                 err.multipart_suggestion(\n@@ -2759,7 +2754,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.span_suggestion_verbose(\n                         span.with_hi(span.hi() - BytePos(1)).shrink_to_hi(),\n                         \"consider `await`ing on the `Future`\",\n-                        \".await\".to_string(),\n+                        \".await\",\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -2785,7 +2780,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 err.span_suggestion_verbose(\n                     rhs_span.shrink_to_hi(),\n                     \"consider using a floating-point literal by writing it with `.0`\",\n-                    String::from(\".0\"),\n+                    \".0\",\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -2965,7 +2960,7 @@ fn suggest_trait_object_return_type_alternatives(\n         ret_ty,\n         \"use some type `T` that is `T: Sized` as the return type if all return paths have the \\\n             same type\",\n-        \"T\".to_string(),\n+        \"T\",\n         Applicability::MaybeIncorrect,\n     );\n     err.span_suggestion("}, {"sha": "d111008e82c835532ccb719034cb81e484eb3870", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -161,7 +161,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             err.span_suggestion(\n                 assoc_name.span,\n                 \"there is an associated type with a similar name\",\n-                suggested_name.to_string(),\n+                suggested_name,\n                 Applicability::MaybeIncorrect,\n             );\n         } else {"}, {"sha": "32bbfd7e3323294ceeae4c7b637dc80bc82a1a8e", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -1589,7 +1589,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             err.span_suggestion(\n                 span.shrink_to_lo(),\n                 \"you are looking for the module in `std`, not the primitive type\",\n-                \"std::\".to_string(),\n+                \"std::\",\n                 Applicability::MachineApplicable,\n             );\n         } else {\n@@ -1820,7 +1820,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 err.span_suggestion_verbose(\n                                     args_span,\n                                     &format!(\"{type_name} doesn't have generic parameters\"),\n-                                    String::new(),\n+                                    \"\",\n                                     Applicability::MachineApplicable,\n                                 );\n                                 return;\n@@ -1946,7 +1946,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         err.span_suggestion(\n                             assoc_ident.span,\n                             \"there is a variant with a similar name\",\n-                            suggested_name.to_string(),\n+                            suggested_name,\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n@@ -2422,7 +2422,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         err.span_suggestion_verbose(\n                             ident.span.shrink_to_hi().to(args.span_ext),\n                             \"the `Self` type doesn't accept type parameters\",\n-                            String::new(),\n+                            \"\",\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -2473,7 +2473,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 err.span_suggestion_verbose(\n                                     segment.ident.span.shrink_to_hi().to(args.span_ext),\n                                     \"the `Self` type doesn't accept type parameters\",\n-                                    String::new(),\n+                                    \"\",\n                                     Applicability::MachineApplicable,\n                                 );\n                                 return;\n@@ -2549,7 +2549,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             err.span_suggestion_verbose(\n                                 segment.ident.span.shrink_to_hi().to(args.span_ext),\n                                 &format!(\"primitive type `{name}` doesn't have generic parameters\"),\n-                                String::new(),\n+                                \"\",\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }"}, {"sha": "65b8b0b97ee46f3a69d68a623c3c95860a812256", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -319,7 +319,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.span_suggestion(\n                 start,\n                 \"consider separating array elements with a comma\",\n-                \",\".to_string(),\n+                \",\",\n                 Applicability::MaybeIncorrect,\n             );\n             return true;\n@@ -406,7 +406,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &format!(\n                             \"`{path}` is a unit variant, you need to write it without the parentheses\",\n                         ),\n-                        String::new(),\n+                        \"\",\n                         Applicability::MachineApplicable,\n                     );\n                 }\n@@ -426,7 +426,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             err.span_suggestion(\n                                 callee_expr.span.shrink_to_hi(),\n                                 \"consider using a semicolon here\",\n-                                \";\".to_owned(),\n+                                \";\",\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }"}, {"sha": "974f5ffcbcc52d28058ea56e4eb0112f6dd40ae6", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -354,7 +354,7 @@ fn compare_predicate_entailment<'tcx>(\n                                         diag.span_suggestion_verbose(sp, msg, sugg, ap);\n                                     }\n                                     hir::FnRetTy::Return(hir_ty) => {\n-                                        let sugg = trait_sig.output().to_string();\n+                                        let sugg = trait_sig.output();\n                                         diag.span_suggestion(hir_ty.span, msg, sugg, ap);\n                                     }\n                                 };\n@@ -365,7 +365,7 @@ fn compare_predicate_entailment<'tcx>(\n                         diag.span_suggestion(\n                             impl_err_span,\n                             \"change the parameter type to match the trait\",\n-                            trait_ty.to_string(),\n+                            trait_ty,\n                             Applicability::MachineApplicable,\n                         );\n                     }"}, {"sha": "0f5b774210e30f0a823546e3476a1b4c23d480cb", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -864,7 +864,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.span_suggestion_verbose(\n                 expr.span.shrink_to_lo(),\n                 \"you might have meant to use pattern destructuring\",\n-                \"let \".to_string(),\n+                \"let \",\n                 Applicability::MachineApplicable,\n             );\n         });\n@@ -1042,7 +1042,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_suggestion_verbose(\n                         expr.span.shrink_to_lo(),\n                         \"you might have meant to use pattern matching\",\n-                        \"let \".to_string(),\n+                        \"let \",\n                         applicability,\n                     );\n                 };\n@@ -1051,7 +1051,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_suggestion_verbose(\n                     span,\n                     \"you might have meant to compare for equality\",\n-                    \"==\".to_string(),\n+                    \"==\",\n                     applicability,\n                 );\n             }\n@@ -1086,7 +1086,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_suggestion_verbose(\n                         lhs.span.shrink_to_lo(),\n                         \"consider dereferencing here to assign to the mutably borrowed value\",\n-                        \"*\".to_string(),\n+                        \"*\",\n                         Applicability::MachineApplicable,\n                     );\n                 }\n@@ -1790,7 +1790,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.span_suggestion(\n                 range_start.span.shrink_to_hi(),\n                 &format!(\"to set the remaining fields{instead}, separate the last named field with a comma\"),\n-                \",\".to_string(),\n+                \",\",\n                 Applicability::MaybeIncorrect,\n             );\n         }\n@@ -1912,7 +1912,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_suggestion(\n                         field.ident.span,\n                         \"a field with a similar name exists\",\n-                        field_name.to_string(),\n+                        field_name,\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else {\n@@ -2158,7 +2158,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_suggestion_verbose(\n                         base.span.shrink_to_hi(),\n                         \"consider `await`ing on the `Future` and access the field of its `Output`\",\n-                        \".await\".to_string(),\n+                        \".await\",\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -2358,7 +2358,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.span_suggestion(\n                 field.span,\n                 \"a field with a similar name exists\",\n-                suggested_field_name.to_string(),\n+                suggested_field_name,\n                 Applicability::MaybeIncorrect,\n             );\n         } else {"}, {"sha": "ea7ebdf91d01282110b537c7cc3aa6bf80a0e1a7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -1310,7 +1310,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 err.span_suggestion(\n                                     span,\n                                     \"use curly brackets\",\n-                                    String::from(\"Self { /* fields */ }\"),\n+                                    \"Self { /* fields */ }\",\n                                     Applicability::HasPlaceholders,\n                                 );\n                             }"}, {"sha": "b9077059133a08000d46e00f0e07ee4a5cb23808", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -1458,14 +1458,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_suggestion_verbose(\n                     span_semi,\n                     \"consider removing this semicolon and boxing the expression\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::HasPlaceholders,\n                 );\n             } else {\n                 err.span_suggestion_short(\n                     span_semi,\n                     \"remove this semicolon\",\n-                    String::new(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "b01d663f605d70ef507f831421394c941736d936", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -27,7 +27,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.span_suggestion_short(\n             span.shrink_to_hi(),\n             \"consider using a semicolon here\",\n-            \";\".to_string(),\n+            \";\",\n             Applicability::MachineApplicable,\n         );\n     }\n@@ -444,7 +444,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.span_suggestion(\n                             fn_name.span,\n                             \"use `Box::pin` to pin and box this expression\",\n-                            \"Box::pin\".to_string(),\n+                            \"Box::pin\",\n                             Applicability::MachineApplicable,\n                         );\n                         true\n@@ -507,7 +507,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.span_suggestion(\n                             expression.span.shrink_to_hi(),\n                             \"consider using a semicolon here\",\n-                            \";\".to_string(),\n+                            \";\",\n                             Applicability::MachineApplicable,\n                         );\n                     }"}, {"sha": "8880049371e58c1e2d17215e9d9a65fc3bff1fcf", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -330,7 +330,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_suggestion(\n                         span.shrink_to_lo(),\n                         \"you are looking for the module in `std`, not the primitive type\",\n-                        \"std::\".to_string(),\n+                        \"std::\",\n                         Applicability::MachineApplicable,\n                     );\n                 }\n@@ -453,7 +453,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.span_suggestion_short(\n                             span,\n                             msg,\n-                            String::from(\"len\"),\n+                            \"len\",\n                             Applicability::MachineApplicable,\n                         );\n                     } else {\n@@ -893,7 +893,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 item_name.span,\n                                 \"because of the in-memory representation of `&str`, to obtain \\\n                                  an `Iterator` over each of its codepoint use method `chars`\",\n-                                String::from(\"chars\"),\n+                                \"chars\",\n                                 Applicability::MachineApplicable,\n                             );\n                         }\n@@ -1006,7 +1006,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.span_suggestion(\n                             span,\n                             \"there is a variant with a similar name\",\n-                            suggestion.to_string(),\n+                            suggestion,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -1019,12 +1019,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let call_expr =\n                             self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id));\n                         if let Some(span) = call_expr.span.trim_start(expr.span) {\n-                            err.span_suggestion(\n-                                span,\n-                                msg,\n-                                String::new(),\n-                                Applicability::MachineApplicable,\n-                            );\n+                            err.span_suggestion(span, msg, \"\", Applicability::MachineApplicable);\n                             fallback_span = false;\n                         }\n                     }\n@@ -1043,7 +1038,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 def_kind.article(),\n                                 def_kind.descr(lev_candidate.def_id),\n                             ),\n-                            lev_candidate.name.to_string(),\n+                            lev_candidate.name,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -1164,7 +1159,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.span_suggestion(\n                             span,\n                             \"remove the arguments\",\n-                            String::new(),\n+                            \"\",\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -1418,7 +1413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             \"use the `?` operator to extract the `{self_ty}` value, propagating \\\n                             {article} `{kind}::{variant}` value to the caller\"\n                         ),\n-                        \"?\".to_owned(),\n+                        \"?\",\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n@@ -1428,7 +1423,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             \"consider using `{kind}::expect` to unwrap the `{self_ty}` value, \\\n                              panicking if the value is {article} `{kind}::{variant}`\"\n                         ),\n-                        \".expect(\\\"REASON\\\")\".to_owned(),\n+                        \".expect(\\\"REASON\\\")\",\n                         Applicability::HasPlaceholders,\n                     );\n                 }\n@@ -1632,7 +1627,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.span_suggestion_verbose(\n                 span.shrink_to_lo(),\n                 \"consider `await`ing on the `Future` and calling the method on its `Output`\",\n-                \"await.\".to_string(),\n+                \"await.\",\n                 Applicability::MaybeIncorrect,\n             );\n         }"}, {"sha": "c2f97a5051c96285ef4631e0a74887266c428ce5", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -446,7 +446,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             err.span_suggestion_verbose(\n                                 lhs_expr.span.shrink_to_lo(),\n                                 msg,\n-                                \"*\".to_string(),\n+                                \"*\",\n                                 rustc_errors::Applicability::MachineApplicable,\n                             );\n                         }\n@@ -621,14 +621,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.span_suggestion_verbose(\n                             lhs_expr.span.until(lhs_inner_expr.span),\n                             rm_borrow_msg,\n-                            \"\".to_owned(),\n+                            \"\",\n                             Applicability::MachineApplicable\n                         );\n                     } else {\n                         err.span_suggestion_verbose(\n                             lhs_expr.span.shrink_to_hi(),\n                             to_owned_msg,\n-                            \".to_owned()\".to_owned(),\n+                            \".to_owned()\",\n                             Applicability::MachineApplicable\n                         );\n                     }"}, {"sha": "649558e1f662a7a104ca048dbccf3145bb46edcc", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -1150,14 +1150,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_suggestion_verbose(\n                         all_fields_span,\n                         \"use `..` to ignore all fields\",\n-                        String::from(\"..\"),\n+                        \"..\",\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else {\n                     err.span_suggestion_verbose(\n                         tail_span,\n                         \"use `..` to ignore the rest of the fields\",\n-                        String::from(\", ..\"),\n+                        \", ..\",\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -1428,7 +1428,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.span_suggestion_verbose(\n             sp_comma,\n             \"add `..` at the end of the field list to ignore all other fields\",\n-            sugg.to_string(),\n+            sugg,\n             Applicability::MachineApplicable,\n         );\n         err.emit();\n@@ -1502,7 +1502,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_suggestion(\n                         pat_field.ident.span,\n                         \"a field with a similar name exists\",\n-                        suggested_name.to_string(),\n+                        suggested_name,\n                         Applicability::MaybeIncorrect,\n                     );\n \n@@ -1655,7 +1655,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.span_suggestion_verbose(\n                 field.span.shrink_to_hi(),\n                 \"ignore the inaccessible and unused fields\",\n-                \", ..\".to_string(),\n+                \", ..\",\n                 Applicability::MachineApplicable,\n             );\n         } else {\n@@ -1670,7 +1670,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.span_suggestion_verbose(\n                 span,\n                 \"ignore the inaccessible and unused fields\",\n-                \" { .. }\".to_string(),\n+                \" { .. }\",\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "4a3cfa1ca376ad6886f98502cdccb76da50a8903", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -122,7 +122,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n                         .span_suggestion_short(\n                             span_with_attrs,\n                             \"remove it\",\n-                            String::new(),\n+                            \"\",\n                             Applicability::MachineApplicable,\n                         )\n                         .emit();"}, {"sha": "82f2adda3b04329322c854b9524f80383f163a2c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -1930,7 +1930,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                 diag.span_suggestion(\n                     ty.span,\n                     \"replace with the correct return type\",\n-                    ret_ty.to_string(),\n+                    ret_ty,\n                     Applicability::MachineApplicable,\n                 );\n             } else if matches!(ret_ty.kind(), ty::FnDef(..)) {\n@@ -1939,7 +1939,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                     diag.span_suggestion(\n                         ty.span,\n                         \"replace with the correct return type\",\n-                        fn_sig.to_string(),\n+                        fn_sig,\n                         Applicability::MachineApplicable,\n                     );\n                 }\n@@ -2584,7 +2584,7 @@ fn from_target_feature(\n     let Some(list) = attr.meta_item_list() else { return };\n     let bad_item = |span| {\n         let msg = \"malformed `target_feature` attribute input\";\n-        let code = \"enable = \\\"..\\\"\".to_owned();\n+        let code = \"enable = \\\"..\\\"\";\n         tcx.sess\n             .struct_span_err(span, msg)\n             .span_suggestion(span, \"must be of the form\", code, Applicability::HasPlaceholders)"}, {"sha": "d125b14feda7b1b38d75a60db720f021a9624c5a", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -756,7 +756,7 @@ fn infer_placeholder_type<'a>(\n                     diag.span_suggestion(\n                         span,\n                         \"replace with the correct type\",\n-                        sugg_ty.to_string(),\n+                        sugg_ty,\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else {"}, {"sha": "3224864e9b1fe5b3710a574c0a58c3755cd193ca", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -715,7 +715,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             err.span_suggestion(\n                 span_redundant_lt_args,\n                 &msg_lifetimes,\n-                String::new(),\n+                \"\",\n                 Applicability::MaybeIncorrect,\n             );\n         };\n@@ -757,7 +757,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             err.span_suggestion(\n                 span_redundant_type_or_const_args,\n                 &msg_types_or_consts,\n-                String::new(),\n+                \"\",\n                 Applicability::MaybeIncorrect,\n             );\n         };\n@@ -797,7 +797,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 if self.gen_args.parenthesized { \"parenthetical \" } else { \"\" },\n             );\n \n-            err.span_suggestion(span, &msg, String::new(), Applicability::MaybeIncorrect);\n+            err.span_suggestion(span, &msg, \"\", Applicability::MaybeIncorrect);\n         } else if redundant_lifetime_args && redundant_type_or_const_args {\n             remove_lifetime_args(err);\n             remove_type_or_const_args(err);"}, {"sha": "e3b349af661a181bf8dbe680a18a94197628d07c", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                     diag.span_suggestion(\n                         sp.from_inner(InnerSpan::new(0, 3)).shrink_to_hi(),\n                         explanation,\n-                        String::from(\"text\"),\n+                        \"text\",\n                         Applicability::MachineApplicable,\n                     );\n                 }"}, {"sha": "59a7c535400699a9450753d9675cf8c49ed30c5f", "filename": "src/tools/clippy/clippy_lints/src/almost_complete_letter_range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Falmost_complete_letter_range.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -90,7 +90,7 @@ fn check_range(cx: &EarlyContext<'_>, span: Span, start: &Expr, end: &Expr, sugg\n                     diag.span_suggestion(\n                         span,\n                         \"use an inclusive range\",\n-                        sugg.to_owned(),\n+                        sugg,\n                         Applicability::MaybeIncorrect,\n                     );\n                 }"}, {"sha": "0bdef9d0a7e8e5bc8ab4c5308afa65a011dcc946", "filename": "src/tools/clippy/clippy_lints/src/as_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_underscore.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for AsUnderscore {\n                     diag.span_suggestion(\n                         ty.span,\n                         \"consider giving the type explicitly\",\n-                        format!(\"{}\", ty_resolved),\n+                        ty_resolved,\n                         Applicability::MachineApplicable,\n                     );\n             }"}, {"sha": "08bf80a422900f533d61225670031aacc77cc37e", "filename": "src/tools/clippy/clippy_lints/src/empty_structs_with_brackets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -44,7 +44,7 @@ impl EarlyLintPass for EmptyStructsWithBrackets {\n                     diagnostic.span_suggestion_hidden(\n                         span_after_ident,\n                         \"remove the brackets\",\n-                        \";\".to_string(),\n+                        \";\",\n                         Applicability::MachineApplicable);\n                     },\n             );"}, {"sha": "14f84a832aa3e79324212628f1f16667020133d1", "filename": "src/tools/clippy/clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -75,7 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n                         diag.span_suggestion(\n                             sugg_span,\n                             \"make this a static item\",\n-                            \"static\".to_string(),\n+                            \"static\",\n                             Applicability::MachineApplicable,\n                         );\n                     }"}, {"sha": "c70b1c261b618fdc8cf7109989d14f7e2e0432e8", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                                 diag.span_suggestion(\n                                     block.span,\n                                     \"move the body of the async block to the enclosing function\",\n-                                    body_snip.to_string(),\n+                                    body_snip,\n                                     Applicability::MachineApplicable\n                                 );\n                             }"}, {"sha": "4f8baf7efb0bb7962912c39839dee55e2e5a6afb", "filename": "src/tools/clippy/clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -113,7 +113,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n                     diag.span_suggestion(\n                         arm1.span,\n                         \"try removing the arm\",\n-                        String::new(),\n+                        \"\",\n                         Applicability::MaybeIncorrect,\n                     )\n                     .help(\"or try changing either arm body\")"}, {"sha": "4ac738272d08523c53f925100eafe8143173701e", "filename": "src/tools/clippy/clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -176,13 +176,13 @@ fn check_manual_split_once_indirect(\n             diag.span_suggestion(\n                 first.span,\n                 &remove_msg,\n-                String::new(),\n+                \"\",\n                 app,\n             );\n             diag.span_suggestion(\n                 second.span,\n                 &remove_msg,\n-                String::new(),\n+                \"\",\n                 app,\n             );\n         });"}, {"sha": "19037093e20a1be9da01d7fea78aabe139f13c6a", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -85,7 +85,7 @@ pub fn check_for_loop_iter(\n                         match addr_of_expr.kind {\n                             ExprKind::AddrOf(_, _, referent) => {\n                                 let span = addr_of_expr.span.with_hi(referent.span.lo());\n-                                diag.span_suggestion(span, \"remove this `&`\", String::new(), applicability);\n+                                diag.span_suggestion(span, \"remove this `&`\", \"\", applicability);\n                             }\n                             _ => unreachable!(),\n                         }"}, {"sha": "d8982ffcf66699365c2b122b724f0c69dc24c430", "filename": "src/tools/clippy/clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -318,7 +318,7 @@ fn check<'tcx>(\n                         diag.span_suggestion(\n                             usage.stmt.span.shrink_to_hi(),\n                             \"add a semicolon after the `if` expression\",\n-                            \";\".to_string(),\n+                            \";\",\n                             applicability,\n                         );\n                     }\n@@ -353,7 +353,7 @@ fn check<'tcx>(\n                         diag.span_suggestion(\n                             usage.stmt.span.shrink_to_hi(),\n                             \"add a semicolon after the `match` expression\",\n-                            \";\".to_string(),\n+                            \";\",\n                             applicability,\n                         );\n                     }"}, {"sha": "8b273aca7d020f68a6ba889c288ab6b8d668db82", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -258,7 +258,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                 diag.span_suggestion(\n                                     input.span,\n                                     \"consider changing the type to\",\n-                                    \"&str\".to_string(),\n+                                    \"&str\",\n                                     Applicability::Unspecified,\n                                 );\n "}, {"sha": "3b11cbc3760622f9415e8fe6fa8726bad1361548", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -255,7 +255,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                         diag.span_suggestion(\n                             sugg_span,\n                             \"remove this\",\n-                            String::new(),\n+                            \"\",\n                             app,\n                         );\n                         if clone_usage.cloned_used {"}, {"sha": "1bde977cfa273ba963df6b84077158bb25e41fda", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_float_to_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -55,7 +55,7 @@ pub(super) fn check<'tcx>(\n                         sugg\n                     };\n \n-                    diag.span_suggestion(e.span, \"consider using\", sugg.to_string(), Applicability::Unspecified);\n+                    diag.span_suggestion(e.span, \"consider using\", sugg, Applicability::Unspecified);\n                 },\n             );\n             true"}, {"sha": "31a9b69ca15838ad4e4b7719ee52615c2e4a1e81", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -25,7 +25,7 @@ pub(super) fn check<'tcx>(\n                 |diag| {\n                     if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n                         let sugg = arg.as_ty(cx.tcx.mk_ptr(*to_ty));\n-                        diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n+                        diag.span_suggestion(e.span, \"try\", sugg, Applicability::Unspecified);\n                     }\n                 },\n             );"}, {"sha": "707a11d361c06d6259a4ae4db9942f8ad47896d5", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -73,7 +73,7 @@ pub(super) fn check<'tcx>(\n                             diag.span_suggestion(\n                                 e.span,\n                                 \"try\",\n-                                sugg.to_string(),\n+                                sugg,\n                                 Applicability::Unspecified,\n                             );\n                         },"}, {"sha": "fc9227b76f025a309f7af9333e0ada1cef9685f8", "filename": "src/tools/clippy/clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -46,7 +46,7 @@ pub(super) fn check<'tcx>(\n                                 arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n                             };\n \n-                            diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n+                            diag.span_suggestion(e.span, \"try\", sugg, Applicability::Unspecified);\n                         }\n                     },\n                 );\n@@ -64,7 +64,7 @@ pub(super) fn check<'tcx>(\n                         diag.span_suggestion(\n                             e.span,\n                             \"try\",\n-                            arg.as_ty(&to_ty.to_string()).to_string(),\n+                            arg.as_ty(&to_ty.to_string()),\n                             Applicability::Unspecified,\n                         );\n                     }"}, {"sha": "186bba09d201238fac3cfc3beb9ab6900bd4c6c1", "filename": "src/tools/clippy/clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d6176e69de8bcdc15a12402ce7245f06ca2329/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs?ref=77d6176e69de8bcdc15a12402ce7245f06ca2329", "patch": "@@ -92,7 +92,7 @@ pub fn get_attr<'a>(\n                                 diag.span_suggestion(\n                                     attr_segments[1].ident.span,\n                                     \"consider using\",\n-                                    new_name.to_string(),\n+                                    new_name,\n                                     Applicability::MachineApplicable,\n                                 );\n                                 diag.emit();"}]}