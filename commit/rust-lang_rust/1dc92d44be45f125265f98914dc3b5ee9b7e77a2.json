{"sha": "1dc92d44be45f125265f98914dc3b5ee9b7e77a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYzkyZDQ0YmU0NWYxMjUyNjVmOTg5MTRkYzNiNWVlOWI3ZTc3YTI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-25T23:36:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-27T21:10:54Z"}, "message": "libcore: fix indention.", "tree": {"sha": "2ee973c63d244cfa16196a01b9bf84b02923b331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ee973c63d244cfa16196a01b9bf84b02923b331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc92d44be45f125265f98914dc3b5ee9b7e77a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc92d44be45f125265f98914dc3b5ee9b7e77a2", "html_url": "https://github.com/rust-lang/rust/commit/1dc92d44be45f125265f98914dc3b5ee9b7e77a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc92d44be45f125265f98914dc3b5ee9b7e77a2/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d56da1678c00ccff2c4c680de3f2245deef172a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d56da1678c00ccff2c4c680de3f2245deef172a", "html_url": "https://github.com/rust-lang/rust/commit/5d56da1678c00ccff2c4c680de3f2245deef172a"}], "stats": {"total": 148, "additions": 74, "deletions": 74}, "files": [{"sha": "d2e9ad6019b551c18b1f6e0608f65c91389232e1", "filename": "src/libcore/str.rs", "status": "modified", "additions": 74, "deletions": 74, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/1dc92d44be45f125265f98914dc3b5ee9b7e77a2/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc92d44be45f125265f98914dc3b5ee9b7e77a2/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1dc92d44be45f125265f98914dc3b5ee9b7e77a2", "patch": "@@ -1859,83 +1859,83 @@ mod unsafe {\n     /// Converts a byte to a string.\n     unsafe fn from_byte(u: u8) -> ~str { unsafe::from_bytes([u]) }\n \n-   /**\n-    * Takes a bytewise (not UTF-8) slice from a string.\n-    *\n-    * Returns the substring from [`begin`..`end`).\n-    *\n-    * # Failure\n-    *\n-    * If begin is greater than end.\n-    * If end is greater than the length of the string.\n-    */\n-   unsafe fn slice_bytes(s: &str, begin: uint, end: uint) -> ~str {\n-       do as_buf(s) |sbuf, n| {\n-           assert (begin <= end);\n-           assert (end <= n);\n-\n-           let mut v = ~[];\n-           vec::reserve(v, end - begin + 1u);\n-           unsafe {\n-               do vec::as_buf(v) |vbuf, _vlen| {\n-                   let src = ptr::offset(sbuf, begin);\n-                   ptr::memcpy(vbuf, src, end - begin);\n-               }\n-               vec::unsafe::set_len(v, end - begin);\n-               vec::push(v, 0u8);\n-               ::unsafe::transmute(v)\n-           }\n-       }\n-   }\n-\n-   /**\n-    * Takes a bytewise (not UTF-8) view from a string.\n-    *\n-    * Returns the substring from [`begin`..`end`).\n-    *\n-    * # Failure\n-    *\n-    * If begin is greater than end.\n-    * If end is greater than the length of the string.\n-    */\n-   #[inline]\n-   unsafe fn view_bytes(s: &str, begin: uint, end: uint) -> &str {\n-       do as_buf(s) |sbuf, n| {\n+    /**\n+     * Takes a bytewise (not UTF-8) slice from a string.\n+     *\n+     * Returns the substring from [`begin`..`end`).\n+     *\n+     * # Failure\n+     *\n+     * If begin is greater than end.\n+     * If end is greater than the length of the string.\n+     */\n+    unsafe fn slice_bytes(s: &str, begin: uint, end: uint) -> ~str {\n+        do as_buf(s) |sbuf, n| {\n             assert (begin <= end);\n             assert (end <= n);\n \n-            let tuple = (ptr::offset(sbuf, begin), end - begin + 1);\n-            ::unsafe::reinterpret_cast(tuple)\n-       }\n-   }\n-\n-   /// Appends a byte to a string. (Not UTF-8 safe).\n-   unsafe fn push_byte(&s: ~str, b: u8) {\n-       rustrt::rust_str_push(s, b);\n-   }\n-\n-   /// Appends a vector of bytes to a string. (Not UTF-8 safe).\n-   unsafe fn push_bytes(&s: ~str, bytes: ~[u8]) {\n-       for vec::each(bytes) |byte| { rustrt::rust_str_push(s, byte); }\n-   }\n-\n-   /// Removes the last byte from a string and returns it. (Not UTF-8 safe).\n-   unsafe fn pop_byte(&s: ~str) -> u8 {\n-       let len = len(s);\n-       assert (len > 0u);\n-       let b = s[len - 1u];\n-       unsafe { set_len(s, len - 1u) };\n-       return b;\n-   }\n-\n-   /// Removes the first byte from a string and returns it. (Not UTF-8 safe).\n-   unsafe fn shift_byte(&s: ~str) -> u8 {\n-       let len = len(s);\n-       assert (len > 0u);\n-       let b = s[0];\n-       s = unsafe { unsafe::slice_bytes(s, 1u, len) };\n-       return b;\n-   }\n+            let mut v = ~[];\n+            vec::reserve(v, end - begin + 1u);\n+            unsafe {\n+                do vec::as_buf(v) |vbuf, _vlen| {\n+                    let src = ptr::offset(sbuf, begin);\n+                    ptr::memcpy(vbuf, src, end - begin);\n+                }\n+                vec::unsafe::set_len(v, end - begin);\n+                vec::push(v, 0u8);\n+                ::unsafe::transmute(v)\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Takes a bytewise (not UTF-8) view from a string.\n+     *\n+     * Returns the substring from [`begin`..`end`).\n+     *\n+     * # Failure\n+     *\n+     * If begin is greater than end.\n+     * If end is greater than the length of the string.\n+     */\n+    #[inline]\n+    unsafe fn view_bytes(s: &str, begin: uint, end: uint) -> &str {\n+        do as_buf(s) |sbuf, n| {\n+             assert (begin <= end);\n+             assert (end <= n);\n+\n+             let tuple = (ptr::offset(sbuf, begin), end - begin + 1);\n+             ::unsafe::reinterpret_cast(tuple)\n+        }\n+    }\n+\n+    /// Appends a byte to a string. (Not UTF-8 safe).\n+    unsafe fn push_byte(&s: ~str, b: u8) {\n+        rustrt::rust_str_push(s, b);\n+    }\n+\n+    /// Appends a vector of bytes to a string. (Not UTF-8 safe).\n+    unsafe fn push_bytes(&s: ~str, bytes: ~[u8]) {\n+        for vec::each(bytes) |byte| { rustrt::rust_str_push(s, byte); }\n+    }\n+\n+    /// Removes the last byte from a string and returns it. (Not UTF-8 safe).\n+    unsafe fn pop_byte(&s: ~str) -> u8 {\n+        let len = len(s);\n+        assert (len > 0u);\n+        let b = s[len - 1u];\n+        unsafe { set_len(s, len - 1u) };\n+        return b;\n+    }\n+\n+    /// Removes the first byte from a string and returns it. (Not UTF-8 safe).\n+    unsafe fn shift_byte(&s: ~str) -> u8 {\n+        let len = len(s);\n+        assert (len > 0u);\n+        let b = s[0];\n+        s = unsafe { unsafe::slice_bytes(s, 1u, len) };\n+        return b;\n+    }\n \n     /// Sets the length of the string and adds the null terminator\n     unsafe fn set_len(&v: ~str, new_len: uint) {"}]}