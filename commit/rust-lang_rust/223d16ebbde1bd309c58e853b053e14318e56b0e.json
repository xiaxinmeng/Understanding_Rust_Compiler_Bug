{"sha": "223d16ebbde1bd309c58e853b053e14318e56b0e", "node_id": "C_kwDOAAsO6NoAKDIyM2QxNmViYmRlMWJkMzA5YzU4ZTg1M2IwNTNlMTQzMThlNTZiMGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T15:12:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T15:12:31Z"}, "message": "Auto merge of #100201 - RalfJung:thread-local-key, r=thomcc\n\nstd: use realstd fast key when building tests\n\nUnder `cfg(test)`, the `std` crate is not the actual standard library, just any old crate we are testing. It imports the real standard library as `realstd`, and then does some careful `cfg` magic so that the crate built for testing uses the `realstd` global state rather than having its own copy of that.\n\nHowever, this was not done for all global state hidden in std: the 'fast' version of thread-local keys, at least on some platforms, also involves some global state. Specifically its macOS version has this [`static REGISTERED`](https://github.com/rust-lang/rust/blob/bc63d5a26a65752fb105957d3235cc9c8cb0767f/library/std/src/sys/unix/thread_local_dtor.rs#L62) that would get duplicated. So this PR imports the 'fast' key type from `realstd` rather than using the local copy, to ensure its internal state (and that of the functions it calls) does not get duplicated.\n\nI also noticed that the `__OsLocalKeyInner` is unused under `cfg(target_thread_local)`, so I removed it for that configuration. There was a comment saying macOS picks between `__OsLocalKeyInner` and `__FastLocalKeyInner` at runtime, but I think that comment is outdated -- I found no trace of such a runtime switching mechanism, and the library still check-builds on apple targets with this PR. (I don't have a Mac so I cannot actually run it.)", "tree": {"sha": "2d1306a0557ef1887142442f9fdfc2e420f558c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d1306a0557ef1887142442f9fdfc2e420f558c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/223d16ebbde1bd309c58e853b053e14318e56b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/223d16ebbde1bd309c58e853b053e14318e56b0e", "html_url": "https://github.com/rust-lang/rust/commit/223d16ebbde1bd309c58e853b053e14318e56b0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/223d16ebbde1bd309c58e853b053e14318e56b0e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee285eab69d515114ed54a8e6c25e359acd6b684", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee285eab69d515114ed54a8e6c25e359acd6b684", "html_url": "https://github.com/rust-lang/rust/commit/ee285eab69d515114ed54a8e6c25e359acd6b684"}, {"sha": "d13699d0be14c47e57d1c8961d7e7348d93017fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d13699d0be14c47e57d1c8961d7e7348d93017fc", "html_url": "https://github.com/rust-lang/rust/commit/d13699d0be14c47e57d1c8961d7e7348d93017fc"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "032bf604d73889de6aac6fa8418f63c37fb40c2d", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/223d16ebbde1bd309c58e853b053e14318e56b0e/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223d16ebbde1bd309c58e853b053e14318e56b0e/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=223d16ebbde1bd309c58e853b053e14318e56b0e", "patch": "@@ -69,8 +69,10 @@ use crate::sys_common::mutex::StaticMutex;\n /// ```ignore (cannot-doctest-private-modules)\n /// use tls::os::{StaticKey, INIT};\n ///\n+/// // Use a regular global static to store the key.\n /// static KEY: StaticKey = INIT;\n ///\n+/// // The state provided via `get` and `set` is thread-local.\n /// unsafe {\n ///     assert!(KEY.get().is_null());\n ///     KEY.set(1 as *mut u8);"}, {"sha": "8aedfc4a6b81973108578cee9a54da9f9a8fe889", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/223d16ebbde1bd309c58e853b053e14318e56b0e/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223d16ebbde1bd309c58e853b053e14318e56b0e/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=223d16ebbde1bd309c58e853b053e14318e56b0e", "patch": "@@ -1036,6 +1036,7 @@ pub mod fast {\n }\n \n #[doc(hidden)]\n+#[cfg(not(target_thread_local))]\n pub mod os {\n     use super::lazy::LazyKeyInner;\n     use crate::cell::Cell;\n@@ -1044,6 +1045,8 @@ pub mod os {\n     use crate::ptr;\n     use crate::sys_common::thread_local_key::StaticKey as OsStaticKey;\n \n+    /// Use a regular global static to store this key; the state provided will then be\n+    /// thread-local.\n     pub struct Key<T> {\n         // OS-TLS key that we'll use to key off.\n         os: OsStaticKey,"}, {"sha": "a17185b6f707545551578758fc1216ca5f5be016", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/223d16ebbde1bd309c58e853b053e14318e56b0e/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223d16ebbde1bd309c58e853b053e14318e56b0e/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=223d16ebbde1bd309c58e853b053e14318e56b0e", "patch": "@@ -192,21 +192,31 @@ pub use scoped::{scope, Scope, ScopedJoinHandle};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::local::{AccessError, LocalKey};\n \n-// The types used by the thread_local! macro to access TLS keys. Note that there\n-// are two types, the \"OS\" type and the \"fast\" type. The OS thread local key\n-// type is accessed via platform-specific API calls and is slow, while the fast\n+// Select the type used by the thread_local! macro to access TLS keys. There\n+// are three types: \"static\", \"fast\", \"OS\". The \"OS\" thread local key\n+// type is accessed via platform-specific API calls and is slow, while the \"fast\"\n // key type is accessed via code generated via LLVM, where TLS keys are set up\n-// by the elf linker. Note that the OS TLS type is always available: on macOS\n-// the standard library is compiled with support for older platform versions\n-// where fast TLS was not available; end-user code is compiled with fast TLS\n-// where available, but both are needed.\n+// by the elf linker. \"static\" is for single-threaded platforms where a global\n+// static is sufficient.\n \n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(target_thread_local)]\n+#[cfg(not(test))]\n #[doc(hidden)]\n pub use self::local::fast::Key as __FastLocalKeyInner;\n+#[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n+#[cfg(target_thread_local)]\n+#[cfg(test)] // when building for tests, use real std's key\n+pub use realstd::thread::__FastLocalKeyInner;\n+\n+#[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n+#[cfg(target_thread_local)]\n+#[cfg(test)]\n+pub use self::local::fast::Key as __FastLocalKeyInnerUnused; // we import this anyway to silence 'unused' warnings\n+\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[doc(hidden)]\n+#[cfg(not(target_thread_local))]\n pub use self::local::os::Key as __OsLocalKeyInner;\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]"}]}