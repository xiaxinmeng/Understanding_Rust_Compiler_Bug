{"sha": "1839c144bc6db8c07945caacd449aa7f3a76cd47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzljMTQ0YmM2ZGI4YzA3OTQ1Y2FhY2Q0NDlhYTdmM2E3NmNkNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-06T01:36:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-06T01:36:51Z"}, "message": "Auto merge of #54517 - mcr431:53956-panic-on-include_bytes-of-own-file, r=michaelwoerister\n\n53956 panic on include bytes of own file\n\nfix #53956\n\nWhen using `include_bytes!` on a source file in the project, compiler would panic on subsequent compilations because `expand_include_bytes` would overwrite files in the source_map with no source. This PR changes `expand_include_bytes` to check source_map and use the already existing src, if any.", "tree": {"sha": "e9bcbb9af70c5861b071456fce4071f22f75a01c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9bcbb9af70c5861b071456fce4071f22f75a01c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1839c144bc6db8c07945caacd449aa7f3a76cd47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1839c144bc6db8c07945caacd449aa7f3a76cd47", "html_url": "https://github.com/rust-lang/rust/commit/1839c144bc6db8c07945caacd449aa7f3a76cd47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1839c144bc6db8c07945caacd449aa7f3a76cd47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4988b096e673204b91683dc693fc3eb6b2323e97", "url": "https://api.github.com/repos/rust-lang/rust/commits/4988b096e673204b91683dc693fc3eb6b2323e97", "html_url": "https://github.com/rust-lang/rust/commit/4988b096e673204b91683dc693fc3eb6b2323e97"}, {"sha": "f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "html_url": "https://github.com/rust-lang/rust/commit/f0f8aa9e05726bfbc065fa2504daf3232f29bc03"}], "stats": {"total": 299, "additions": 180, "deletions": 119}, "files": [{"sha": "439c6e42e1a3f105120f2193c914ab7d92cd5a31", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -417,13 +417,14 @@ impl_stable_hash_for!(enum ::syntax_pos::hygiene::CompilerDesugaringKind {\n impl_stable_hash_for!(enum ::syntax_pos::FileName {\n     Real(pb),\n     Macros(s),\n-    QuoteExpansion,\n-    Anon,\n-    MacroExpansion,\n-    ProcMacroSourceCode,\n-    CliCrateAttr,\n-    CfgSpec,\n-    Custom(s)\n+    QuoteExpansion(s),\n+    Anon(s),\n+    MacroExpansion(s),\n+    ProcMacroSourceCode(s),\n+    CliCrateAttr(s),\n+    CfgSpec(s),\n+    Custom(s),\n+    DocTest(pb, line),\n });\n \n impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {"}, {"sha": "c9866230cddc8ad215936f75940965fb0ac223fb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -1756,8 +1756,8 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> ast::CrateConfig {\n         .into_iter()\n         .map(|s| {\n             let sess = parse::ParseSess::new(FilePathMapping::empty());\n-            let mut parser =\n-                parse::new_parser_from_source_str(&sess, FileName::CfgSpec, s.to_string());\n+            let filename = FileName::cfg_spec_source_code(&s);\n+            let mut parser = parse::new_parser_from_source_str(&sess, filename, s.to_string());\n \n             macro_rules! error {($reason: expr) => {\n                 early_error(ErrorOutputType::default(),"}, {"sha": "45d107f13a0fd559805bb741b22d8ccd50de8b03", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -594,7 +594,7 @@ fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>, Option\n             } else {\n                 None\n             };\n-            Some((Input::Str { name: FileName::Anon, input: src },\n+            Some((Input::Str { name: FileName::anon_source_code(&src), input: src },\n                   None, err))\n         } else {\n             Some((Input::File(PathBuf::from(ifile)),"}, {"sha": "b8cd9bda7f020f9775405f7fb7505164a5ca99c6", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -129,7 +129,7 @@ fn test_env_with_pool<F>(\n     let cstore = CStore::new(::get_codegen_backend(&sess).metadata_loader());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let input = config::Input::Str {\n-        name: FileName::Anon,\n+        name: FileName::anon_source_code(&source_string),\n         input: source_string.to_string(),\n     };\n     let krate ="}, {"sha": "ab2ab25c91aa541321bf4e23d0c33dfe25efd746", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -1044,7 +1044,7 @@ impl EmitterWriter {\n                     buffer.append(buffer_msg_line_offset,\n                                   &format!(\"{}:{}:{}\",\n                                            loc.file.name,\n-                                           sm.doctest_offset_line(loc.line),\n+                                           sm.doctest_offset_line(&loc.file.name, loc.line),\n                                            loc.col.0 + 1),\n                                   Style::LineAndColumn);\n                     for _ in 0..max_line_num_len {\n@@ -1054,7 +1054,7 @@ impl EmitterWriter {\n                     buffer.prepend(0,\n                                    &format!(\"{}:{}:{}: \",\n                                             loc.file.name,\n-                                            sm.doctest_offset_line(loc.line),\n+                                            sm.doctest_offset_line(&loc.file.name, loc.line),\n                                             loc.col.0 + 1),\n                                    Style::LineAndColumn);\n                 }\n@@ -1075,7 +1075,8 @@ impl EmitterWriter {\n                     };\n                     format!(\"{}:{}{}\",\n                             annotated_file.file.name,\n-                            sm.doctest_offset_line(first_line.line_index),\n+                            sm.doctest_offset_line(\n+                                &annotated_file.file.name, first_line.line_index),\n                             col)\n                 } else {\n                     annotated_file.file.name.to_string()"}, {"sha": "b6528cbe2c810cd91b8d496941252ce1f7e5afc4", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -130,7 +130,7 @@ pub trait SourceMapper {\n     fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;\n     fn call_span_if_macro(&self, sp: Span) -> Span;\n     fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool;\n-    fn doctest_offset_line(&self, line: usize) -> usize;\n+    fn doctest_offset_line(&self, file: &FileName, line: usize) -> usize;\n }\n \n impl CodeSuggestion {"}, {"sha": "5276683648d26cc030d1b9099e8409a628cba5ee", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -3008,7 +3008,7 @@ pub struct Span {\n impl Span {\n     pub fn empty() -> Span {\n         Span {\n-            filename: FileName::Anon,\n+            filename: FileName::Anon(0),\n             loline: 0, locol: 0,\n             hiline: 0, hicol: 0,\n         }"}, {"sha": "74583196818b84e4e7ddf80c6712948bc0f58070", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -197,8 +197,14 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts);\n     // FIXME(#44940): if doctests ever support path remapping, then this filename\n     // needs to be the result of SourceMap::span_to_unmapped_path\n+\n+    let path = match filename {\n+        FileName::Real(path) => path.clone(),\n+        _ => PathBuf::from(r\"doctest.rs\"),\n+    };\n+\n     let input = config::Input::Str {\n-        name: filename.to_owned(),\n+        name: FileName::DocTest(path, line as isize - line_offset as isize),\n         input: test,\n     };\n     let outputs = OutputTypes::new(&[(OutputType::Exe, None)]);\n@@ -252,9 +258,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n     let (libdir, outdir, compile_result) = driver::spawn_thread_pool(sessopts, |sessopts| {\n-        let source_map = Lrc::new(SourceMap::new_doctest(\n-            sessopts.file_path_mapping(), filename.clone(), line as isize - line_offset as isize\n-        ));\n+        let source_map = Lrc::new(SourceMap::new(sessopts.file_path_mapping()));\n         let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n                                                         Some(source_map.clone()),\n                                                         false,\n@@ -401,7 +405,7 @@ pub fn make_test(s: &str,\n         use errors::emitter::EmitterWriter;\n         use errors::Handler;\n \n-        let filename = FileName::Anon;\n+        let filename = FileName::anon_source_code(s);\n         let source = crates + &everything_else;\n \n         // any errors in parsing should also appear when the doctest is compiled for real, so just\n@@ -411,8 +415,6 @@ pub fn make_test(s: &str,\n         let handler = Handler::with_emitter(false, false, box emitter);\n         let sess = ParseSess::with_span_handler(handler, cm);\n \n-        debug!(\"about to parse: \\n{}\", source);\n-\n         let mut found_main = false;\n         let mut found_extern_crate = cratename.is_none();\n \n@@ -487,8 +489,6 @@ pub fn make_test(s: &str,\n         prog.push_str(\"\\n}\");\n     }\n \n-    info!(\"final test program: {}\", prog);\n-\n     (prog, line_offset)\n }\n "}, {"sha": "518b34eefa8533737e966805da3d5992bcdccb97", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -803,7 +803,7 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n     for raw_attr in attrs {\n         let mut parser = parse::new_parser_from_source_str(\n             parse_sess,\n-            FileName::CliCrateAttr,\n+            FileName::cli_crate_attr_source_code(&raw_attr),\n             raw_attr.clone(),\n         );\n "}, {"sha": "91818992fe1f1f6c3dbad99a1b575b62a480d4ff", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -353,27 +353,27 @@ pub mod rt {\n     impl<'a> ExtParseUtils for ExtCtxt<'a> {\n         fn parse_item(&self, s: String) -> P<ast::Item> {\n             panictry!(parse::parse_item_from_source_str(\n-                FileName::QuoteExpansion,\n+                FileName::quote_expansion_source_code(&s),\n                 s,\n                 self.parse_sess())).expect(\"parse error\")\n         }\n \n         fn parse_stmt(&self, s: String) -> ast::Stmt {\n             panictry!(parse::parse_stmt_from_source_str(\n-                FileName::QuoteExpansion,\n+                FileName::quote_expansion_source_code(&s),\n                 s,\n                 self.parse_sess())).expect(\"parse error\")\n         }\n \n         fn parse_expr(&self, s: String) -> P<ast::Expr> {\n             panictry!(parse::parse_expr_from_source_str(\n-                FileName::QuoteExpansion,\n+                FileName::quote_expansion_source_code(&s),\n                 s,\n                 self.parse_sess()))\n         }\n \n         fn parse_tts(&self, s: String) -> Vec<TokenTree> {\n-            let source_name = FileName::QuoteExpansion;\n+            let source_name = FileName::quote_expansion_source_code(&s);\n             parse::parse_stream_from_source_str(source_name, s, self.parse_sess(), None)\n                 .into_trees().collect()\n         }"}, {"sha": "75e25083d03be70288128dabeece8ca6f5c26cda", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -182,9 +182,12 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::Toke\n             DummyResult::expr(sp)\n         }\n         Ok(..) => {\n-            // Add this input file to the code map to make it available as\n-            // dependency information, but don't enter it's contents\n-            cx.source_map().new_source_file(file.into(), String::new());\n+            let src = match String::from_utf8(bytes.clone()) {\n+                Ok(contents) => contents,\n+                Err(..) => \"\".to_string()\n+            };\n+\n+            cx.source_map().new_source_file(file.into(), src);\n \n             base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes))))\n         }\n@@ -201,6 +204,7 @@ fn res_rel_file(cx: &mut ExtCtxt, sp: syntax_pos::Span, arg: String) -> PathBuf\n         let callsite = sp.source_callsite();\n         let mut path = match cx.source_map().span_to_unmapped_path(callsite) {\n             FileName::Real(path) => path,\n+            FileName::DocTest(path, _) => path,\n             other => panic!(\"cannot resolve relative path in non-file source `{}`\", other),\n         };\n         path.pop();"}, {"sha": "80227fdf82dd6b69e6db8c55c4f2f1aa8bb0ee32", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -1900,7 +1900,7 @@ mod tests {\n                  sess: &'a ParseSess,\n                  teststr: String)\n                  -> StringReader<'a> {\n-        let sf = sm.new_source_file(PathBuf::from(\"zebra.rs\").into(), teststr);\n+        let sf = sm.new_source_file(PathBuf::from(teststr.clone()).into(), teststr);\n         StringReader::new(sess, sf, None)\n     }\n "}, {"sha": "866dba24dcb0af76be2f40ed64aefb1901de0a18", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -974,23 +974,25 @@ mod tests {\n         with_globals(|| {\n             let sess = ParseSess::new(FilePathMapping::empty());\n \n-            let name = FileName::Custom(\"source\".to_string());\n+            let name_1 = FileName::Custom(\"crlf_source_1\".to_string());\n             let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n-            let item = parse_item_from_source_str(name.clone(), source, &sess)\n+            let item = parse_item_from_source_str(name_1, source, &sess)\n                 .unwrap().unwrap();\n             let doc = first_attr_value_str_by_name(&item.attrs, \"doc\").unwrap();\n             assert_eq!(doc, \"/// doc comment\");\n \n+            let name_2 = FileName::Custom(\"crlf_source_2\".to_string());\n             let source = \"/// doc comment\\r\\n/// line 2\\r\\nfn foo() {}\".to_string();\n-            let item = parse_item_from_source_str(name.clone(), source, &sess)\n+            let item = parse_item_from_source_str(name_2, source, &sess)\n                 .unwrap().unwrap();\n             let docs = item.attrs.iter().filter(|a| a.path == \"doc\")\n                         .map(|a| a.value_str().unwrap().to_string()).collect::<Vec<_>>();\n             let b: &[_] = &[\"/// doc comment\".to_string(), \"/// line 2\".to_string()];\n             assert_eq!(&docs[..], b);\n \n+            let name_3 = FileName::Custom(\"clrf_source_3\".to_string());\n             let source = \"/** doc comment\\r\\n *  with CRLF */\\r\\nfn foo() {}\".to_string();\n-            let item = parse_item_from_source_str(name, source, &sess).unwrap().unwrap();\n+            let item = parse_item_from_source_str(name_3, source, &sess).unwrap().unwrap();\n             let doc = first_attr_value_str_by_name(&item.attrs, \"doc\").unwrap();\n             assert_eq!(doc, \"/** doc comment\\n *  with CRLF */\");\n         });"}, {"sha": "04a791fbcb9c46269d7a5fe38984cb8c7e2202b6", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -545,7 +545,8 @@ impl Token {\n         let tokens_for_real = nt.1.force(|| {\n             // FIXME(#43081): Avoid this pretty-print + reparse hack\n             let source = pprust::token_to_string(self);\n-            parse_stream_from_source_str(FileName::MacroExpansion, source, sess, Some(span))\n+            let filename = FileName::macro_expansion_source_code(&source);\n+            parse_stream_from_source_str(filename, source, sess, Some(span))\n         });\n \n         // During early phases of the compiler the AST could get modified\n@@ -781,10 +782,12 @@ fn prepend_attrs(sess: &ParseSess,\n         assert_eq!(attr.style, ast::AttrStyle::Outer,\n                    \"inner attributes should prevent cached tokens from existing\");\n \n+        let source = pprust::attr_to_string(attr);\n+        let macro_filename = FileName::macro_expansion_source_code(&source);\n         if attr.is_sugared_doc {\n             let stream = parse_stream_from_source_str(\n-                FileName::MacroExpansion,\n-                pprust::attr_to_string(attr),\n+                macro_filename,\n+                source,\n                 sess,\n                 Some(span),\n             );\n@@ -805,8 +808,8 @@ fn prepend_attrs(sess: &ParseSess,\n         // should eventually be removed.\n         } else {\n             let stream = parse_stream_from_source_str(\n-                FileName::MacroExpansion,\n-                pprust::path_to_string(&attr.path),\n+                macro_filename,\n+                source,\n                 sess,\n                 Some(span),\n             );"}, {"sha": "ee60d2dd6156f8accbef46c954d8df71f8cc661f", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 47, "deletions": 45, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -110,11 +110,19 @@ pub struct StableSourceFileId(u128);\n \n impl StableSourceFileId {\n     pub fn new(source_file: &SourceFile) -> StableSourceFileId {\n+        StableSourceFileId::new_from_pieces(&source_file.name,\n+                                         source_file.name_was_remapped,\n+                                         source_file.unmapped_path.as_ref())\n+    }\n+\n+    pub fn new_from_pieces(name: &FileName,\n+                           name_was_remapped: bool,\n+                           unmapped_path: Option<&FileName>) -> StableSourceFileId {\n         let mut hasher = StableHasher::new();\n \n-        source_file.name.hash(&mut hasher);\n-        source_file.name_was_remapped.hash(&mut hasher);\n-        source_file.unmapped_path.hash(&mut hasher);\n+        name.hash(&mut hasher);\n+        name_was_remapped.hash(&mut hasher);\n+        unmapped_path.hash(&mut hasher);\n \n         StableSourceFileId(hasher.finish())\n     }\n@@ -136,9 +144,6 @@ pub struct SourceMap {\n     // This is used to apply the file path remapping as specified via\n     // --remap-path-prefix to all SourceFiles allocated within this SourceMap.\n     path_mapping: FilePathMapping,\n-    /// In case we are in a doctest, replace all file names with the PathBuf,\n-    /// and add the given offsets to the line info\n-    doctest_offset: Option<(FileName, isize)>,\n }\n \n impl SourceMap {\n@@ -147,17 +152,7 @@ impl SourceMap {\n             files: Default::default(),\n             file_loader: Box::new(RealFileLoader),\n             path_mapping,\n-            doctest_offset: None,\n-        }\n-    }\n-\n-    pub fn new_doctest(path_mapping: FilePathMapping,\n-                       file: FileName, line: isize) -> SourceMap {\n-        SourceMap {\n-            doctest_offset: Some((file, line)),\n-            ..SourceMap::new(path_mapping)\n         }\n-\n     }\n \n     pub fn with_file_loader(file_loader: Box<dyn FileLoader + Sync + Send>,\n@@ -167,7 +162,6 @@ impl SourceMap {\n             files: Default::default(),\n             file_loader: file_loader,\n             path_mapping,\n-            doctest_offset: None,\n         }\n     }\n \n@@ -181,11 +175,7 @@ impl SourceMap {\n \n     pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {\n         let src = self.file_loader.read_file(path)?;\n-        let filename = if let Some((ref name, _)) = self.doctest_offset {\n-            name.clone()\n-        } else {\n-            path.to_owned().into()\n-        };\n+        let filename = path.to_owned().into();\n         Ok(self.new_source_file(filename, src))\n     }\n \n@@ -208,7 +198,8 @@ impl SourceMap {\n     }\n \n     /// Creates a new source_file.\n-    /// This does not ensure that only one SourceFile exists per file name.\n+    /// If a file already exists in the source_map with the same id, that file is returned\n+    /// unmodified\n     pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {\n         let start_pos = self.next_start_pos();\n \n@@ -226,21 +217,30 @@ impl SourceMap {\n             },\n             other => (other, false),\n         };\n-        let source_file = Lrc::new(SourceFile::new(\n-            filename,\n-            was_remapped,\n-            unmapped_path,\n-            src,\n-            Pos::from_usize(start_pos),\n-        ));\n \n-        let mut files = self.files.borrow_mut();\n+        let file_id = StableSourceFileId::new_from_pieces(&filename,\n+                                                       was_remapped,\n+                                                       Some(&unmapped_path));\n \n-        files.source_files.push(source_file.clone());\n-        files.stable_id_to_source_file.insert(StableSourceFileId::new(&source_file),\n-                                              source_file.clone());\n+        return match self.source_file_by_stable_id(file_id) {\n+            Some(lrc_sf) => lrc_sf,\n+            None => {\n+                let source_file = Lrc::new(SourceFile::new(\n+                    filename,\n+                    was_remapped,\n+                    unmapped_path,\n+                    src,\n+                    Pos::from_usize(start_pos),\n+                ));\n \n-        source_file\n+                let mut files = self.files.borrow_mut();\n+\n+                files.source_files.push(source_file.clone());\n+                files.stable_id_to_source_file.insert(file_id, source_file.clone());\n+\n+                source_file\n+            }\n+        }\n     }\n \n     /// Allocates a new SourceFile representing a source file from an external\n@@ -310,15 +310,17 @@ impl SourceMap {\n     }\n \n     // If there is a doctest_offset, apply it to the line\n-    pub fn doctest_offset_line(&self, mut orig: usize) -> usize {\n-        if let Some((_, line)) = self.doctest_offset {\n-            if line >= 0 {\n-                orig = orig + line as usize;\n-            } else {\n-                orig = orig - (-line) as usize;\n-            }\n+    pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {\n+        return match file {\n+            FileName::DocTest(_, offset) => {\n+                return if *offset >= 0 {\n+                    orig + *offset as usize\n+                } else {\n+                    orig - (-(*offset)) as usize\n+                }\n+            },\n+            _ => orig\n         }\n-        orig\n     }\n \n     /// Lookup source information about a BytePos\n@@ -983,8 +985,8 @@ impl SourceMapper for SourceMap {\n             }\n         )\n     }\n-    fn doctest_offset_line(&self, line: usize) -> usize {\n-        self.doctest_offset_line(line)\n+    fn doctest_offset_line(&self, file: &FileName, line: usize) -> usize {\n+        self.doctest_offset_line(file, line)\n     }\n }\n "}, {"sha": "6c7da589a425710dc42d9e344cf73707eaf6d08d", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -402,7 +402,7 @@ impl server::TokenStream for Rustc<'_> {\n     }\n     fn from_str(&mut self, src: &str) -> Self::TokenStream {\n         parse::parse_stream_from_source_str(\n-            FileName::ProcMacroSourceCode,\n+            FileName::proc_macro_source_code(src.clone()),\n             src.to_string(),\n             self.sess,\n             Some(self.call_site),"}, {"sha": "4d42b85ea75488d393c6452983064082b9162a55", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 69, "deletions": 24, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -90,19 +90,20 @@ pub enum FileName {\n     /// A macro.  This includes the full name of the macro, so that there are no clashes.\n     Macros(String),\n     /// call to `quote!`\n-    QuoteExpansion,\n+    QuoteExpansion(u64),\n     /// Command line\n-    Anon,\n+    Anon(u64),\n     /// Hack in src/libsyntax/parse.rs\n     /// FIXME(jseyfried)\n-    MacroExpansion,\n-    ProcMacroSourceCode,\n+    MacroExpansion(u64),\n+    ProcMacroSourceCode(u64),\n     /// Strings provided as --cfg [cfgspec] stored in a crate_cfg\n-    CfgSpec,\n+    CfgSpec(u64),\n     /// Strings provided as crate attributes in the CLI\n-    CliCrateAttr,\n+    CliCrateAttr(u64),\n     /// Custom sources for explicit parser calls from plugins and drivers\n     Custom(String),\n+    DocTest(PathBuf, isize),\n }\n \n impl std::fmt::Display for FileName {\n@@ -111,13 +112,15 @@ impl std::fmt::Display for FileName {\n         match *self {\n             Real(ref path) => write!(fmt, \"{}\", path.display()),\n             Macros(ref name) => write!(fmt, \"<{} macros>\", name),\n-            QuoteExpansion => write!(fmt, \"<quote expansion>\"),\n-            MacroExpansion => write!(fmt, \"<macro expansion>\"),\n-            Anon => write!(fmt, \"<anon>\"),\n-            ProcMacroSourceCode => write!(fmt, \"<proc-macro source code>\"),\n-            CfgSpec => write!(fmt, \"cfgspec\"),\n-            CliCrateAttr => write!(fmt, \"<crate attribute>\"),\n+            QuoteExpansion(_) => write!(fmt, \"<quote expansion>\"),\n+            MacroExpansion(_) => write!(fmt, \"<macro expansion>\"),\n+            Anon(_) => write!(fmt, \"<anon>\"),\n+            ProcMacroSourceCode(_) =>\n+                write!(fmt, \"<proc-macro source code>\"),\n+            CfgSpec(_) => write!(fmt, \"<cfgspec>\"),\n+            CliCrateAttr(_) => write!(fmt, \"<crate attribute>\"),\n             Custom(ref s) => write!(fmt, \"<{}>\", s),\n+            DocTest(ref path, _) => write!(fmt, \"{}\", path.display()),\n         }\n     }\n }\n@@ -135,30 +138,72 @@ impl FileName {\n         match *self {\n             Real(_) => true,\n             Macros(_) |\n-            Anon |\n-            MacroExpansion |\n-            ProcMacroSourceCode |\n-            CfgSpec |\n-            CliCrateAttr |\n+            Anon(_) |\n+            MacroExpansion(_) |\n+            ProcMacroSourceCode(_) |\n+            CfgSpec(_) |\n+            CliCrateAttr(_) |\n             Custom(_) |\n-            QuoteExpansion => false,\n+            QuoteExpansion(_) |\n+            DocTest(_, _) => false,\n         }\n     }\n \n     pub fn is_macros(&self) -> bool {\n         use self::FileName::*;\n         match *self {\n             Real(_) |\n-            Anon |\n-            MacroExpansion |\n-            ProcMacroSourceCode |\n-            CfgSpec |\n-            CliCrateAttr |\n+            Anon(_) |\n+            MacroExpansion(_) |\n+            ProcMacroSourceCode(_) |\n+            CfgSpec(_) |\n+            CliCrateAttr(_) |\n             Custom(_) |\n-            QuoteExpansion => false,\n+            QuoteExpansion(_) |\n+            DocTest(_, _) => false,\n             Macros(_) => true,\n         }\n     }\n+\n+    pub fn quote_expansion_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::QuoteExpansion(hasher.finish())\n+    }\n+\n+    pub fn macro_expansion_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::MacroExpansion(hasher.finish())\n+    }\n+\n+    pub fn anon_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::Anon(hasher.finish())\n+    }\n+\n+    pub fn proc_macro_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::ProcMacroSourceCode(hasher.finish())\n+    }\n+\n+    pub fn cfg_spec_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::QuoteExpansion(hasher.finish())\n+    }\n+\n+    pub fn cli_crate_attr_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::CliCrateAttr(hasher.finish())\n+    }\n+\n+    pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName{\n+        FileName::DocTest(path, line)\n+    }\n }\n \n /// Spans represent a region of code, used for error reporting. Positions in spans"}, {"sha": "c342e1c48359e98923664b36a2bd1f5bf533dc03", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -72,7 +72,8 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         driver::spawn_thread_pool(opts, |opts| {\n             let (sess, cstore, codegen_backend) = basic_sess(opts);\n             let control = CompileController::basic();\n-            let input = Input::Str { name: FileName::Anon, input: code };\n+            let name = FileName::anon_source_code(&code);\n+            let input = Input::Str { name, input: code };\n             let _ = compile_input(\n                 codegen_backend,\n                 &sess,"}, {"sha": "c9d03294843aa84c3594c83eeafcbade567c062f", "filename": "src/test/run-pass-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -32,7 +32,7 @@ use std::fmt;\n // Copied out of syntax::util::parser_testing\n \n pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a> {\n-    new_parser_from_source_str(ps, FileName::Custom(\"bogofile\".to_owned()), source_str)\n+    new_parser_from_source_str(ps, FileName::Custom(source_str.clone()), source_str)\n }\n \n fn with_error_checking_parse<'a, T, F>(s: String, ps: &'a ParseSess, f: F) -> PResult<'a, T> where"}, {"sha": "854063a2984b4fc66dfafd8d9f9117b068c9a88b", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -44,9 +44,11 @@ use syntax::ptr::P;\n \n \n fn parse_expr(ps: &ParseSess, src: &str) -> P<Expr> {\n+    let src_as_string = src.to_string();\n+\n     let mut p = parse::new_parser_from_source_str(ps,\n-                                                  FileName::Custom(\"expr\".to_owned()),\n-                                                  src.to_owned());\n+                                                  FileName::Custom(src_as_string.clone()),\n+                                                  src_as_string);\n     p.parse_expr().unwrap()\n }\n "}, {"sha": "52e0cdca9509fda01882a29ab7b559e4da693205", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1839c144bc6db8c07945caacd449aa7f3a76cd47/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=1839c144bc6db8c07945caacd449aa7f3a76cd47", "patch": "@@ -12,7 +12,7 @@ error[E0425]: cannot find value `no` in this scope\n 3 | no\n   | ^^ not found in this scope\n \n-thread '$DIR/failed-doctest-output.rs - OtherStruct (line 27)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:323:13\n+thread '$DIR/failed-doctest-output.rs - OtherStruct (line 27)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:327:13\n note: Run with `RUST_BACKTRACE=1` for a backtrace.\n \n ---- $DIR/failed-doctest-output.rs - SomeStruct (line 21) stdout ----\n@@ -21,7 +21,7 @@ thread '$DIR/failed-doctest-output.rs - SomeStruct (line 21)' panicked at 'test\n thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:3:1\n note: Run with `RUST_BACKTRACE=1` for a backtrace.\n \n-', src/librustdoc/test.rs:358:17\n+', src/librustdoc/test.rs:362:17\n \n \n failures:"}]}