{"sha": "8256241d3af28bd835b267e27b6e24aeb5e799bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNTYyNDFkM2FmMjhiZDgzNWIyNjdlMjdiNmUyNGFlYjVlNzk5YmQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-14T00:13:35Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-17T02:57:43Z"}, "message": "impl f{32,64}", "tree": {"sha": "33bdf7865055a6e1f1264d9b14d235b915219c8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33bdf7865055a6e1f1264d9b14d235b915219c8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8256241d3af28bd835b267e27b6e24aeb5e799bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8256241d3af28bd835b267e27b6e24aeb5e799bd", "html_url": "https://github.com/rust-lang/rust/commit/8256241d3af28bd835b267e27b6e24aeb5e799bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8256241d3af28bd835b267e27b6e24aeb5e799bd/comments", "author": null, "committer": null, "parents": [{"sha": "3ab26f84698bf30572f3bc9336570c422f59aa2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab26f84698bf30572f3bc9336570c422f59aa2a", "html_url": "https://github.com/rust-lang/rust/commit/3ab26f84698bf30572f3bc9336570c422f59aa2a"}], "stats": {"total": 2473, "additions": 2472, "deletions": 1}, "files": [{"sha": "313f034021f2f4537eca58c3cda29b074a6aa506", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=8256241d3af28bd835b267e27b6e24aeb5e799bd", "patch": "@@ -27,6 +27,7 @@ use middle::ty;\n use std::cmp::Ordering;\n use std::fmt;\n use std::iter::{range_inclusive, AdditiveIterator, FromIterator, IntoIterator, repeat};\n+#[cfg(stage0)]\n use std::num::Float;\n use std::slice;\n use syntax::ast::{self, DUMMY_NODE_ID, NodeId, Pat};"}, {"sha": "366b90cfbfd32da943dd9863cfc7da77418f1a21", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=8256241d3af28bd835b267e27b6e24aeb5e799bd", "patch": "@@ -204,6 +204,7 @@ use std::io::prelude::*;\n use std::io;\n use std::mem::{swap};\n use std::num::FpCategory as Fp;\n+#[cfg(stage0)]\n use std::num::{Float, Int};\n use std::ops::Index;\n use std::str::FromStr;\n@@ -2622,7 +2623,6 @@ mod tests {\n                 StackElement, Stack, Decoder, Encoder, EncoderError};\n     use std::{i64, u64, f32, f64};\n     use std::collections::BTreeMap;\n-    use std::num::Float;\n     use std::string;\n \n     #[derive(RustcDecodable, Eq, PartialEq, Debug)]"}, {"sha": "a7825c4f93aa8501657bbdff78f9eae881e056c9", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1230, "deletions": 0, "changes": 1230, "blob_url": "https://github.com/rust-lang/rust/blob/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=8256241d3af28bd835b267e27b6e24aeb5e799bd", "patch": "@@ -357,6 +357,1236 @@ impl Float for f32 {\n     }\n }\n \n+#[cfg(not(stage0))]\n+#[cfg(not(test))]\n+#[lang = \"f32\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl f32 {\n+    // inlined methods from `num::Float`\n+    /// Returns the `NaN` value.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let nan: f32 = Float::nan();\n+    ///\n+    /// assert!(nan.is_nan());\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn nan() -> f32 { num::Float::nan() }\n+\n+    /// Returns the infinite value.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let infinity: f32 = Float::infinity();\n+    ///\n+    /// assert!(infinity.is_infinite());\n+    /// assert!(!infinity.is_finite());\n+    /// assert!(infinity > f32::MAX);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn infinity() -> f32 { num::Float::infinity() }\n+\n+    /// Returns the negative infinite value.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let neg_infinity: f32 = Float::neg_infinity();\n+    ///\n+    /// assert!(neg_infinity.is_infinite());\n+    /// assert!(!neg_infinity.is_finite());\n+    /// assert!(neg_infinity < f32::MIN);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn neg_infinity() -> f32 { num::Float::neg_infinity() }\n+\n+    /// Returns `0.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let inf: f32 = Float::infinity();\n+    /// let zero: f32 = Float::zero();\n+    /// let neg_zero: f32 = Float::neg_zero();\n+    ///\n+    /// assert_eq!(zero, neg_zero);\n+    /// assert_eq!(7.0f32/inf, zero);\n+    /// assert_eq!(zero * 10.0, zero);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn zero() -> f32 { num::Float::zero() }\n+\n+    /// Returns `-0.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let inf: f32 = Float::infinity();\n+    /// let zero: f32 = Float::zero();\n+    /// let neg_zero: f32 = Float::neg_zero();\n+    ///\n+    /// assert_eq!(zero, neg_zero);\n+    /// assert_eq!(7.0f32/inf, zero);\n+    /// assert_eq!(zero * 10.0, zero);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn neg_zero() -> f32 { num::Float::neg_zero() }\n+\n+    /// Returns `1.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let one: f32 = Float::one();\n+    ///\n+    /// assert_eq!(one, 1.0f32);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn one() -> f32 { num::Float::one() }\n+\n+    // FIXME (#5527): These should be associated constants\n+\n+    /// Deprecated: use `std::f32::MANTISSA_DIGITS` or `std::f64::MANTISSA_DIGITS`\n+    /// instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::MANTISSA_DIGITS` or \\\n+                           `std::f64::MANTISSA_DIGITS` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn mantissa_digits(unused_self: Option<f32>) -> uint {\n+        num::Float::mantissa_digits(unused_self)\n+    }\n+\n+    /// Deprecated: use `std::f32::DIGITS` or `std::f64::DIGITS` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::DIGITS` or `std::f64::DIGITS` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn digits(unused_self: Option<f32>) -> uint { num::Float::digits(unused_self) }\n+\n+    /// Deprecated: use `std::f32::EPSILON` or `std::f64::EPSILON` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::EPSILON` or `std::f64::EPSILON` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn epsilon() -> f32 { num::Float::epsilon() }\n+\n+    /// Deprecated: use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn min_exp(unused_self: Option<f32>) -> int { num::Float::min_exp(unused_self) }\n+\n+    /// Deprecated: use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn max_exp(unused_self: Option<f32>) -> int { num::Float::max_exp(unused_self) }\n+\n+    /// Deprecated: use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn min_10_exp(unused_self: Option<f32>) -> int { num::Float::min_10_exp(unused_self) }\n+\n+    /// Deprecated: use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn max_10_exp(unused_self: Option<f32>) -> int { num::Float::max_10_exp(unused_self) }\n+\n+    /// Returns the smallest finite value that this type can represent.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x: f64 = Float::min_value();\n+    ///\n+    /// assert_eq!(x, f64::MIN);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    #[allow(deprecated)]\n+    pub fn min_value() -> f32 { num::Float::min_value() }\n+\n+    /// Returns the smallest normalized positive number that this type can represent.\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    #[allow(deprecated)]\n+    pub fn min_pos_value(unused_self: Option<f32>) -> f32 { num::Float::min_pos_value(unused_self) }\n+\n+    /// Returns the largest finite value that this type can represent.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x: f64 = Float::max_value();\n+    /// assert_eq!(x, f64::MAX);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    #[allow(deprecated)]\n+    pub fn max_value() -> f32 { num::Float::max_value() }\n+\n+    /// Returns `true` if this value is `NaN` and false otherwise.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let nan = f64::NAN;\n+    /// let f = 7.0;\n+    ///\n+    /// assert!(nan.is_nan());\n+    /// assert!(!f.is_nan());\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n+    #[inline]\n+    pub fn is_nan(self) -> bool { num::Float::is_nan(self) }\n+\n+    /// Returns `true` if this value is positive infinity or negative infinity and\n+    /// false otherwise.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let f = 7.0f32;\n+    /// let inf: f32 = Float::infinity();\n+    /// let neg_inf: f32 = Float::neg_infinity();\n+    /// let nan: f32 = f32::NAN;\n+    ///\n+    /// assert!(!f.is_infinite());\n+    /// assert!(!nan.is_infinite());\n+    ///\n+    /// assert!(inf.is_infinite());\n+    /// assert!(neg_inf.is_infinite());\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n+    #[inline]\n+    pub fn is_infinite(self) -> bool { num::Float::is_infinite(self) }\n+\n+    /// Returns `true` if this number is neither infinite nor `NaN`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let f = 7.0f32;\n+    /// let inf: f32 = Float::infinity();\n+    /// let neg_inf: f32 = Float::neg_infinity();\n+    /// let nan: f32 = f32::NAN;\n+    ///\n+    /// assert!(f.is_finite());\n+    ///\n+    /// assert!(!nan.is_finite());\n+    /// assert!(!inf.is_finite());\n+    /// assert!(!neg_inf.is_finite());\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n+    #[inline]\n+    pub fn is_finite(self) -> bool { num::Float::is_finite(self) }\n+\n+    /// Returns `true` if the number is neither zero, infinite,\n+    /// [subnormal][subnormal], or `NaN`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f32\n+    /// let max = f32::MAX;\n+    /// let lower_than_min = 1.0e-40_f32;\n+    /// let zero = 0.0f32;\n+    ///\n+    /// assert!(min.is_normal());\n+    /// assert!(max.is_normal());\n+    ///\n+    /// assert!(!zero.is_normal());\n+    /// assert!(!f32::NAN.is_normal());\n+    /// assert!(!f32::INFINITY.is_normal());\n+    /// // Values between `0` and `min` are Subnormal.\n+    /// assert!(!lower_than_min.is_normal());\n+    /// ```\n+    /// [subnormal]: http://en.wikipedia.org/wiki/Denormal_number\n+    #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n+    #[inline]\n+    pub fn is_normal(self) -> bool { num::Float::is_normal(self) }\n+\n+    /// Returns the floating point category of the number. If only one property\n+    /// is going to be tested, it is generally faster to use the specific\n+    /// predicate instead.\n+    ///\n+    /// ```\n+    /// use std::num::{Float, FpCategory};\n+    /// use std::f32;\n+    ///\n+    /// let num = 12.4f32;\n+    /// let inf = f32::INFINITY;\n+    ///\n+    /// assert_eq!(num.classify(), FpCategory::Normal);\n+    /// assert_eq!(inf.classify(), FpCategory::Infinite);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn classify(self) -> FpCategory { num::Float::classify(self) }\n+\n+    /// Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n+    /// The original number can be recovered by `sign * mantissa * 2 ^ exponent`.\n+    /// The floating point encoding is documented in the [Reference][floating-point].\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let num = 2.0f32;\n+    ///\n+    /// // (8388608, -22, 1)\n+    /// let (mantissa, exponent, sign) = num.integer_decode();\n+    /// let sign_f = sign as f32;\n+    /// let mantissa_f = mantissa as f32;\n+    /// let exponent_f = num.powf(exponent as f32);\n+    ///\n+    /// // 1 * 8388608 * 2^(-22) == 2\n+    /// let abs_difference = (sign_f * mantissa_f * exponent_f - num).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    /// [floating-point]: ../../../../../reference.html#machine-types\n+    #[unstable(feature = \"std_misc\", reason = \"signature is undecided\")]\n+    #[inline]\n+    pub fn integer_decode(self) -> (u64, i16, i8) { num::Float::integer_decode(self) }\n+\n+    /// Returns the largest integer less than or equal to a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.99;\n+    /// let g = 3.0;\n+    ///\n+    /// assert_eq!(f.floor(), 3.0);\n+    /// assert_eq!(g.floor(), 3.0);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn floor(self) -> f32 { num::Float::floor(self) }\n+\n+    /// Returns the smallest integer greater than or equal to a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.01;\n+    /// let g = 4.0;\n+    ///\n+    /// assert_eq!(f.ceil(), 4.0);\n+    /// assert_eq!(g.ceil(), 4.0);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn ceil(self) -> f32 { num::Float::ceil(self) }\n+\n+    /// Returns the nearest integer to a number. Round half-way cases away from\n+    /// `0.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.3;\n+    /// let g = -3.3;\n+    ///\n+    /// assert_eq!(f.round(), 3.0);\n+    /// assert_eq!(g.round(), -3.0);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn round(self) -> f32 { num::Float::round(self) }\n+\n+    /// Return the integer part of a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.3;\n+    /// let g = -3.7;\n+    ///\n+    /// assert_eq!(f.trunc(), 3.0);\n+    /// assert_eq!(g.trunc(), -3.0);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn trunc(self) -> f32 { num::Float::trunc(self) }\n+\n+    /// Returns the fractional part of a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 3.5;\n+    /// let y = -3.5;\n+    /// let abs_difference_x = (x.fract() - 0.5).abs();\n+    /// let abs_difference_y = (y.fract() - (-0.5)).abs();\n+    ///\n+    /// assert!(abs_difference_x < 1e-10);\n+    /// assert!(abs_difference_y < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn fract(self) -> f32 { num::Float::fract(self) }\n+\n+    /// Computes the absolute value of `self`. Returns `Float::nan()` if the\n+    /// number is `Float::nan()`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = 3.5;\n+    /// let y = -3.5;\n+    ///\n+    /// let abs_difference_x = (x.abs() - x).abs();\n+    /// let abs_difference_y = (y.abs() - (-y)).abs();\n+    ///\n+    /// assert!(abs_difference_x < 1e-10);\n+    /// assert!(abs_difference_y < 1e-10);\n+    ///\n+    /// assert!(f64::NAN.abs().is_nan());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn abs(self) -> f32 { num::Float::abs(self) }\n+\n+    /// Returns a number that represents the sign of `self`.\n+    ///\n+    /// - `1.0` if the number is positive, `+0.0` or `Float::infinity()`\n+    /// - `-1.0` if the number is negative, `-0.0` or `Float::neg_infinity()`\n+    /// - `Float::nan()` if the number is `Float::nan()`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let f = 3.5;\n+    ///\n+    /// assert_eq!(f.signum(), 1.0);\n+    /// assert_eq!(f64::NEG_INFINITY.signum(), -1.0);\n+    ///\n+    /// assert!(f64::NAN.signum().is_nan());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn signum(self) -> f32 { num::Float::signum(self) }\n+\n+    /// Returns `true` if `self` is positive, including `+0.0` and\n+    /// `Float::infinity()`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let nan: f64 = f64::NAN;\n+    ///\n+    /// let f = 7.0;\n+    /// let g = -7.0;\n+    ///\n+    /// assert!(f.is_positive());\n+    /// assert!(!g.is_positive());\n+    /// // Requires both tests to determine if is `NaN`\n+    /// assert!(!nan.is_positive() && !nan.is_negative());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn is_positive(self) -> bool { num::Float::is_positive(self) }\n+\n+    /// Returns `true` if `self` is negative, including `-0.0` and\n+    /// `Float::neg_infinity()`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let nan = f64::NAN;\n+    ///\n+    /// let f = 7.0;\n+    /// let g = -7.0;\n+    ///\n+    /// assert!(!f.is_negative());\n+    /// assert!(g.is_negative());\n+    /// // Requires both tests to determine if is `NaN`.\n+    /// assert!(!nan.is_positive() && !nan.is_negative());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn is_negative(self) -> bool { num::Float::is_negative(self) }\n+\n+    /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n+    /// error. This produces a more accurate result with better performance than\n+    /// a separate multiplication operation followed by an add.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let m = 10.0;\n+    /// let x = 4.0;\n+    /// let b = 60.0;\n+    ///\n+    /// // 100.0\n+    /// let abs_difference = (m.mul_add(x, b) - (m*x + b)).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn mul_add(self, a: f32, b: f32) -> f32 { num::Float::mul_add(self, a, b) }\n+\n+    /// Take the reciprocal (inverse) of a number, `1/x`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let abs_difference = (x.recip() - (1.0/x)).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn recip(self) -> f32 { num::Float::recip(self) }\n+\n+    /// Raise a number to an integer power.\n+    ///\n+    /// Using this function is generally faster than using `powf`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let abs_difference = (x.powi(2) - x*x).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn powi(self, n: i32) -> f32 { num::Float::powi(self, n) }\n+\n+    /// Raise a number to a floating point power.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let abs_difference = (x.powf(2.0) - x*x).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn powf(self, n: f32) -> f32 { num::Float::powf(self, n) }\n+\n+    /// Take the square root of a number.\n+    ///\n+    /// Returns NaN if `self` is a negative number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let positive = 4.0;\n+    /// let negative = -4.0;\n+    ///\n+    /// let abs_difference = (positive.sqrt() - 2.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// assert!(negative.sqrt().is_nan());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn sqrt(self) -> f32 { num::Float::sqrt(self) }\n+\n+\n+    /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 4.0;\n+    ///\n+    /// let abs_difference = (f.rsqrt() - 0.5).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn rsqrt(self) -> f32 { num::Float::rsqrt(self) }\n+\n+    /// Returns `e^(self)`, (the exponential function).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let one = 1.0;\n+    /// // e^1\n+    /// let e = one.exp();\n+    ///\n+    /// // ln(e) - 1 == 0\n+    /// let abs_difference = (e.ln() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn exp(self) -> f32 { num::Float::exp(self) }\n+\n+    /// Returns `2^(self)`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 2.0;\n+    ///\n+    /// // 2^2 - 4 == 0\n+    /// let abs_difference = (f.exp2() - 4.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn exp2(self) -> f32 { num::Float::exp2(self) }\n+\n+    /// Returns the natural logarithm of the number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let one = 1.0;\n+    /// // e^1\n+    /// let e = one.exp();\n+    ///\n+    /// // ln(e) - 1 == 0\n+    /// let abs_difference = (e.ln() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn ln(self) -> f32 { num::Float::ln(self) }\n+\n+    /// Returns the logarithm of the number with respect to an arbitrary base.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let ten = 10.0;\n+    /// let two = 2.0;\n+    ///\n+    /// // log10(10) - 1 == 0\n+    /// let abs_difference_10 = (ten.log(10.0) - 1.0).abs();\n+    ///\n+    /// // log2(2) - 1 == 0\n+    /// let abs_difference_2 = (two.log(2.0) - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference_10 < 1e-10);\n+    /// assert!(abs_difference_2 < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn log(self, base: f32) -> f32 { num::Float::log(self, base) }\n+\n+    /// Returns the base 2 logarithm of the number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let two = 2.0;\n+    ///\n+    /// // log2(2) - 1 == 0\n+    /// let abs_difference = (two.log2() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn log2(self) -> f32 { num::Float::log2(self) }\n+\n+    /// Returns the base 10 logarithm of the number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let ten = 10.0;\n+    ///\n+    /// // log10(10) - 1 == 0\n+    /// let abs_difference = (ten.log10() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn log10(self) -> f32 { num::Float::log10(self) }\n+\n+    /// Convert radians to degrees.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64::consts;\n+    ///\n+    /// let angle = consts::PI;\n+    ///\n+    /// let abs_difference = (angle.to_degrees() - 180.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"desirability is unclear\")]\n+    #[inline]\n+    pub fn to_degrees(self) -> f32 { num::Float::to_degrees(self) }\n+\n+    /// Convert degrees to radians.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64::consts;\n+    ///\n+    /// let angle = 180.0;\n+    ///\n+    /// let abs_difference = (angle.to_radians() - consts::PI).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"desirability is unclear\")]\n+    #[inline]\n+    pub fn to_radians(self) -> f32 { num::Float::to_radians(self) }\n+\n+    /// Constructs a floating point number of `x*2^exp`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// // 3*2^2 - 12 == 0\n+    /// let abs_difference = (Float::ldexp(3.0, 2) - 12.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"pending integer conventions\")]\n+    #[inline]\n+    pub fn ldexp(x: f32, exp: int) -> f32 {\n+        unsafe { cmath::ldexpf(x, exp as c_int) }\n+    }\n+\n+    /// Breaks the number into a normalized fraction and a base-2 exponent,\n+    /// satisfying:\n+    ///\n+    ///  * `self = x * 2^exp`\n+    ///  * `0.5 <= abs(x) < 1.0`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 4.0;\n+    ///\n+    /// // (1/2)*2^3 -> 1 * 8/2 -> 4.0\n+    /// let f = x.frexp();\n+    /// let abs_difference_0 = (f.0 - 0.5).abs();\n+    /// let abs_difference_1 = (f.1 as f64 - 3.0).abs();\n+    ///\n+    /// assert!(abs_difference_0 < 1e-10);\n+    /// assert!(abs_difference_1 < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"pending integer conventions\")]\n+    #[inline]\n+    pub fn frexp(self) -> (f32, int) {\n+        unsafe {\n+            let mut exp = 0;\n+            let x = cmath::frexpf(self, &mut exp);\n+            (x, exp as int)\n+        }\n+    }\n+\n+    /// Returns the next representable floating-point value in the direction of\n+    /// `other`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0f32;\n+    ///\n+    /// let abs_diff = (x.next_after(2.0) - 1.00000011920928955078125_f32).abs();\n+    ///\n+    /// assert!(abs_diff < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn next_after(self, other: f32) -> f32 {\n+        unsafe { cmath::nextafterf(self, other) }\n+    }\n+\n+    /// Returns the maximum of the two numbers.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let y = 2.0;\n+    ///\n+    /// assert_eq!(x.max(y), y);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn max(self, other: f32) -> f32 {\n+        unsafe { cmath::fmaxf(self, other) }\n+    }\n+\n+    /// Returns the minimum of the two numbers.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let y = 2.0;\n+    ///\n+    /// assert_eq!(x.min(y), x);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn min(self, other: f32) -> f32 {\n+        unsafe { cmath::fminf(self, other) }\n+    }\n+\n+    /// The positive difference of two numbers.\n+    ///\n+    /// * If `self <= other`: `0:0`\n+    /// * Else: `self - other`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 3.0;\n+    /// let y = -3.0;\n+    ///\n+    /// let abs_difference_x = (x.abs_sub(1.0) - 2.0).abs();\n+    /// let abs_difference_y = (y.abs_sub(1.0) - 0.0).abs();\n+    ///\n+    /// assert!(abs_difference_x < 1e-10);\n+    /// assert!(abs_difference_y < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n+    #[inline]\n+    pub fn abs_sub(self, other: f32) -> f32 {\n+        unsafe { cmath::fdimf(self, other) }\n+    }\n+\n+    /// Take the cubic root of a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 8.0;\n+    ///\n+    /// // x^(1/3) - 2 == 0\n+    /// let abs_difference = (x.cbrt() - 2.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n+    #[inline]\n+    pub fn cbrt(self) -> f32 {\n+        unsafe { cmath::cbrtf(self) }\n+    }\n+\n+    /// Calculate the length of the hypotenuse of a right-angle triangle given\n+    /// legs of length `x` and `y`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let y = 3.0;\n+    ///\n+    /// // sqrt(x^2 + y^2)\n+    /// let abs_difference = (x.hypot(y) - (x.powi(2) + y.powi(2)).sqrt()).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn hypot(self, other: f32) -> f32 {\n+        unsafe { cmath::hypotf(self, other) }\n+    }\n+\n+    /// Computes the sine of a number (in radians).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::PI/2.0;\n+    ///\n+    /// let abs_difference = (x.sin() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn sin(self) -> f32 {\n+        unsafe { intrinsics::sinf32(self) }\n+    }\n+\n+    /// Computes the cosine of a number (in radians).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = 2.0*f64::consts::PI;\n+    ///\n+    /// let abs_difference = (x.cos() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn cos(self) -> f32 {\n+        unsafe { intrinsics::cosf32(self) }\n+    }\n+\n+    /// Computes the tangent of a number (in radians).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::PI/4.0;\n+    /// let abs_difference = (x.tan() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-14);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn tan(self) -> f32 {\n+        unsafe { cmath::tanf(self) }\n+    }\n+\n+    /// Computes the arcsine of a number. Return value is in radians in\n+    /// the range [-pi/2, pi/2] or NaN if the number is outside the range\n+    /// [-1, 1].\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let f = f64::consts::PI / 2.0;\n+    ///\n+    /// // asin(sin(pi/2))\n+    /// let abs_difference = (f.sin().asin() - f64::consts::PI / 2.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn asin(self) -> f32 {\n+        unsafe { cmath::asinf(self) }\n+    }\n+\n+    /// Computes the arccosine of a number. Return value is in radians in\n+    /// the range [0, pi] or NaN if the number is outside the range\n+    /// [-1, 1].\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let f = f64::consts::PI / 4.0;\n+    ///\n+    /// // acos(cos(pi/4))\n+    /// let abs_difference = (f.cos().acos() - f64::consts::PI / 4.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn acos(self) -> f32 {\n+        unsafe { cmath::acosf(self) }\n+    }\n+\n+    /// Computes the arctangent of a number. Return value is in radians in the\n+    /// range [-pi/2, pi/2];\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 1.0;\n+    ///\n+    /// // atan(tan(1))\n+    /// let abs_difference = (f.tan().atan() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn atan(self) -> f32 {\n+        unsafe { cmath::atanf(self) }\n+    }\n+\n+    /// Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).\n+    ///\n+    /// * `x = 0`, `y = 0`: `0`\n+    /// * `x >= 0`: `arctan(y/x)` -> `[-pi/2, pi/2]`\n+    /// * `y >= 0`: `arctan(y/x) + pi` -> `(pi/2, pi]`\n+    /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let pi = f64::consts::PI;\n+    /// // All angles from horizontal right (+x)\n+    /// // 45 deg counter-clockwise\n+    /// let x1 = 3.0;\n+    /// let y1 = -3.0;\n+    ///\n+    /// // 135 deg clockwise\n+    /// let x2 = -3.0;\n+    /// let y2 = 3.0;\n+    ///\n+    /// let abs_difference_1 = (y1.atan2(x1) - (-pi/4.0)).abs();\n+    /// let abs_difference_2 = (y2.atan2(x2) - 3.0*pi/4.0).abs();\n+    ///\n+    /// assert!(abs_difference_1 < 1e-10);\n+    /// assert!(abs_difference_2 < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn atan2(self, other: f32) -> f32 {\n+        unsafe { cmath::atan2f(self, other) }\n+    }\n+\n+    /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n+    /// `(sin(x), cos(x))`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::PI/4.0;\n+    /// let f = x.sin_cos();\n+    ///\n+    /// let abs_difference_0 = (f.0 - x.sin()).abs();\n+    /// let abs_difference_1 = (f.1 - x.cos()).abs();\n+    ///\n+    /// assert!(abs_difference_0 < 1e-10);\n+    /// assert!(abs_difference_0 < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn sin_cos(self) -> (f32, f32) {\n+        (self.sin(), self.cos())\n+    }\n+\n+    /// Returns `e^(self) - 1` in a way that is accurate even if the\n+    /// number is close to zero.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 7.0;\n+    ///\n+    /// // e^(ln(7)) - 1\n+    /// let abs_difference = (x.ln().exp_m1() - 6.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n+    #[inline]\n+    pub fn exp_m1(self) -> f32 {\n+        unsafe { cmath::expm1f(self) }\n+    }\n+\n+    /// Returns `ln(1+n)` (natural logarithm) more accurately than if\n+    /// the operations were performed separately.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::E - 1.0;\n+    ///\n+    /// // ln(1 + (e - 1)) == ln(e) == 1\n+    /// let abs_difference = (x.ln_1p() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n+    #[inline]\n+    pub fn ln_1p(self) -> f32 {\n+        unsafe { cmath::log1pf(self) }\n+    }\n+\n+    /// Hyperbolic sine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let x = 1.0;\n+    ///\n+    /// let f = x.sinh();\n+    /// // Solving sinh() at 1 gives `(e^2-1)/(2e)`\n+    /// let g = (e*e - 1.0)/(2.0*e);\n+    /// let abs_difference = (f - g).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn sinh(self) -> f32 {\n+        unsafe { cmath::sinhf(self) }\n+    }\n+\n+    /// Hyperbolic cosine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let x = 1.0;\n+    /// let f = x.cosh();\n+    /// // Solving cosh() at 1 gives this result\n+    /// let g = (e*e + 1.0)/(2.0*e);\n+    /// let abs_difference = (f - g).abs();\n+    ///\n+    /// // Same result\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn cosh(self) -> f32 {\n+        unsafe { cmath::coshf(self) }\n+    }\n+\n+    /// Hyperbolic tangent function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let x = 1.0;\n+    ///\n+    /// let f = x.tanh();\n+    /// // Solving tanh() at 1 gives `(1 - e^(-2))/(1 + e^(-2))`\n+    /// let g = (1.0 - e.powi(-2))/(1.0 + e.powi(-2));\n+    /// let abs_difference = (f - g).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn tanh(self) -> f32 {\n+        unsafe { cmath::tanhf(self) }\n+    }\n+\n+    /// Inverse hyperbolic sine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let f = x.sinh().asinh();\n+    ///\n+    /// let abs_difference = (f - x).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn asinh(self) -> f32 {\n+        match self {\n+            NEG_INFINITY => NEG_INFINITY,\n+            x => (x + ((x * x) + 1.0).sqrt()).ln(),\n+        }\n+    }\n+\n+    /// Inverse hyperbolic cosine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let f = x.cosh().acosh();\n+    ///\n+    /// let abs_difference = (f - x).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn acosh(self) -> f32 {\n+        match self {\n+            x if x < 1.0 => Float::nan(),\n+            x => (x + ((x * x) - 1.0).sqrt()).ln(),\n+        }\n+    }\n+\n+    /// Inverse hyperbolic tangent function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let f = e.tanh().atanh();\n+    ///\n+    /// let abs_difference = (f - e).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn atanh(self) -> f32 {\n+        0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n+    }\n+}\n+\n //\n // Section: String Conversions\n //"}, {"sha": "f3978cae48510c4bc3b2dc17f0670105ae098e52", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1229, "deletions": 0, "changes": 1229, "blob_url": "https://github.com/rust-lang/rust/blob/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=8256241d3af28bd835b267e27b6e24aeb5e799bd", "patch": "@@ -366,6 +366,1235 @@ impl Float for f64 {\n     }\n }\n \n+#[cfg(not(stage0))]\n+#[cfg(not(test))]\n+#[lang = \"f64\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl f64 {\n+    // inlined methods from `num::Float`\n+    /// Returns the `NaN` value.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let nan: f32 = Float::nan();\n+    ///\n+    /// assert!(nan.is_nan());\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn nan() -> f64 { num::Float::nan() }\n+\n+    /// Returns the infinite value.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let infinity: f32 = Float::infinity();\n+    ///\n+    /// assert!(infinity.is_infinite());\n+    /// assert!(!infinity.is_finite());\n+    /// assert!(infinity > f32::MAX);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn infinity() -> f64 { num::Float::infinity() }\n+\n+    /// Returns the negative infinite value.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let neg_infinity: f32 = Float::neg_infinity();\n+    ///\n+    /// assert!(neg_infinity.is_infinite());\n+    /// assert!(!neg_infinity.is_finite());\n+    /// assert!(neg_infinity < f32::MIN);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn neg_infinity() -> f64 { num::Float::neg_infinity() }\n+\n+    /// Returns `0.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let inf: f32 = Float::infinity();\n+    /// let zero: f32 = Float::zero();\n+    /// let neg_zero: f32 = Float::neg_zero();\n+    ///\n+    /// assert_eq!(zero, neg_zero);\n+    /// assert_eq!(7.0f32/inf, zero);\n+    /// assert_eq!(zero * 10.0, zero);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn zero() -> f64 { num::Float::zero() }\n+\n+    /// Returns `-0.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let inf: f32 = Float::infinity();\n+    /// let zero: f32 = Float::zero();\n+    /// let neg_zero: f32 = Float::neg_zero();\n+    ///\n+    /// assert_eq!(zero, neg_zero);\n+    /// assert_eq!(7.0f32/inf, zero);\n+    /// assert_eq!(zero * 10.0, zero);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn neg_zero() -> f64 { num::Float::neg_zero() }\n+\n+    /// Returns `1.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let one: f32 = Float::one();\n+    ///\n+    /// assert_eq!(one, 1.0f32);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn one() -> f64 { num::Float::one() }\n+\n+    // FIXME (#5527): These should be associated constants\n+\n+    /// Deprecated: use `std::f32::MANTISSA_DIGITS` or `std::f64::MANTISSA_DIGITS`\n+    /// instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::MANTISSA_DIGITS` or \\\n+                           `std::f64::MANTISSA_DIGITS` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn mantissa_digits(unused_self: Option<f64>) -> uint {\n+        num::Float::mantissa_digits(unused_self)\n+    }\n+\n+    /// Deprecated: use `std::f32::DIGITS` or `std::f64::DIGITS` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::DIGITS` or `std::f64::DIGITS` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn digits(unused_self: Option<f64>) -> uint { num::Float::digits(unused_self) }\n+\n+    /// Deprecated: use `std::f32::EPSILON` or `std::f64::EPSILON` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::EPSILON` or `std::f64::EPSILON` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn epsilon() -> f64 { num::Float::epsilon() }\n+\n+    /// Deprecated: use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn min_exp(unused_self: Option<f64>) -> int { num::Float::min_exp(unused_self) }\n+\n+    /// Deprecated: use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn max_exp(unused_self: Option<f64>) -> int { num::Float::max_exp(unused_self) }\n+\n+    /// Deprecated: use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn min_10_exp(unused_self: Option<f64>) -> int { num::Float::min_10_exp(unused_self) }\n+\n+    /// Deprecated: use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` instead.\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` as appropriate\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn max_10_exp(unused_self: Option<f64>) -> int { num::Float::max_10_exp(unused_self) }\n+\n+    /// Returns the smallest finite value that this type can represent.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x: f64 = Float::min_value();\n+    ///\n+    /// assert_eq!(x, f64::MIN);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    #[allow(deprecated)]\n+    pub fn min_value() -> f64 { num::Float::min_value() }\n+\n+    /// Returns the smallest normalized positive number that this type can represent.\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    #[allow(deprecated)]\n+    pub fn min_pos_value(unused_self: Option<f64>) -> f64 { num::Float::min_pos_value(unused_self) }\n+\n+    /// Returns the largest finite value that this type can represent.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x: f64 = Float::max_value();\n+    /// assert_eq!(x, f64::MAX);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    #[allow(deprecated)]\n+    pub fn max_value() -> f64 { num::Float::max_value() }\n+\n+    /// Returns `true` if this value is `NaN` and false otherwise.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let nan = f64::NAN;\n+    /// let f = 7.0;\n+    ///\n+    /// assert!(nan.is_nan());\n+    /// assert!(!f.is_nan());\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n+    #[inline]\n+    pub fn is_nan(self) -> bool { num::Float::is_nan(self) }\n+\n+    /// Returns `true` if this value is positive infinity or negative infinity and\n+    /// false otherwise.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let f = 7.0f32;\n+    /// let inf: f32 = Float::infinity();\n+    /// let neg_inf: f32 = Float::neg_infinity();\n+    /// let nan: f32 = f32::NAN;\n+    ///\n+    /// assert!(!f.is_infinite());\n+    /// assert!(!nan.is_infinite());\n+    ///\n+    /// assert!(inf.is_infinite());\n+    /// assert!(neg_inf.is_infinite());\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n+    #[inline]\n+    pub fn is_infinite(self) -> bool { num::Float::is_infinite(self) }\n+\n+    /// Returns `true` if this number is neither infinite nor `NaN`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let f = 7.0f32;\n+    /// let inf: f32 = Float::infinity();\n+    /// let neg_inf: f32 = Float::neg_infinity();\n+    /// let nan: f32 = f32::NAN;\n+    ///\n+    /// assert!(f.is_finite());\n+    ///\n+    /// assert!(!nan.is_finite());\n+    /// assert!(!inf.is_finite());\n+    /// assert!(!neg_inf.is_finite());\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n+    #[inline]\n+    pub fn is_finite(self) -> bool { num::Float::is_finite(self) }\n+\n+    /// Returns `true` if the number is neither zero, infinite,\n+    /// [subnormal][subnormal], or `NaN`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f32\n+    /// let max = f32::MAX;\n+    /// let lower_than_min = 1.0e-40_f32;\n+    /// let zero = 0.0f32;\n+    ///\n+    /// assert!(min.is_normal());\n+    /// assert!(max.is_normal());\n+    ///\n+    /// assert!(!zero.is_normal());\n+    /// assert!(!f32::NAN.is_normal());\n+    /// assert!(!f32::INFINITY.is_normal());\n+    /// // Values between `0` and `min` are Subnormal.\n+    /// assert!(!lower_than_min.is_normal());\n+    /// ```\n+    /// [subnormal]: http://en.wikipedia.org/wiki/Denormal_number\n+    #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n+    #[inline]\n+    pub fn is_normal(self) -> bool { num::Float::is_normal(self) }\n+\n+    /// Returns the floating point category of the number. If only one property\n+    /// is going to be tested, it is generally faster to use the specific\n+    /// predicate instead.\n+    ///\n+    /// ```\n+    /// use std::num::{Float, FpCategory};\n+    /// use std::f32;\n+    ///\n+    /// let num = 12.4f32;\n+    /// let inf = f32::INFINITY;\n+    ///\n+    /// assert_eq!(num.classify(), FpCategory::Normal);\n+    /// assert_eq!(inf.classify(), FpCategory::Infinite);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn classify(self) -> FpCategory { num::Float::classify(self) }\n+\n+    /// Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n+    /// The original number can be recovered by `sign * mantissa * 2 ^ exponent`.\n+    /// The floating point encoding is documented in the [Reference][floating-point].\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let num = 2.0f32;\n+    ///\n+    /// // (8388608, -22, 1)\n+    /// let (mantissa, exponent, sign) = num.integer_decode();\n+    /// let sign_f = sign as f32;\n+    /// let mantissa_f = mantissa as f32;\n+    /// let exponent_f = num.powf(exponent as f32);\n+    ///\n+    /// // 1 * 8388608 * 2^(-22) == 2\n+    /// let abs_difference = (sign_f * mantissa_f * exponent_f - num).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    /// [floating-point]: ../../../../../reference.html#machine-types\n+    #[unstable(feature = \"std_misc\", reason = \"signature is undecided\")]\n+    #[inline]\n+    pub fn integer_decode(self) -> (u64, i16, i8) { num::Float::integer_decode(self) }\n+\n+    /// Returns the largest integer less than or equal to a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.99;\n+    /// let g = 3.0;\n+    ///\n+    /// assert_eq!(f.floor(), 3.0);\n+    /// assert_eq!(g.floor(), 3.0);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn floor(self) -> f64 { num::Float::floor(self) }\n+\n+    /// Returns the smallest integer greater than or equal to a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.01;\n+    /// let g = 4.0;\n+    ///\n+    /// assert_eq!(f.ceil(), 4.0);\n+    /// assert_eq!(g.ceil(), 4.0);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn ceil(self) -> f64 { num::Float::ceil(self) }\n+\n+    /// Returns the nearest integer to a number. Round half-way cases away from\n+    /// `0.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.3;\n+    /// let g = -3.3;\n+    ///\n+    /// assert_eq!(f.round(), 3.0);\n+    /// assert_eq!(g.round(), -3.0);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn round(self) -> f64 { num::Float::round(self) }\n+\n+    /// Return the integer part of a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.3;\n+    /// let g = -3.7;\n+    ///\n+    /// assert_eq!(f.trunc(), 3.0);\n+    /// assert_eq!(g.trunc(), -3.0);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn trunc(self) -> f64 { num::Float::trunc(self) }\n+\n+    /// Returns the fractional part of a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 3.5;\n+    /// let y = -3.5;\n+    /// let abs_difference_x = (x.fract() - 0.5).abs();\n+    /// let abs_difference_y = (y.fract() - (-0.5)).abs();\n+    ///\n+    /// assert!(abs_difference_x < 1e-10);\n+    /// assert!(abs_difference_y < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn fract(self) -> f64 { num::Float::fract(self) }\n+\n+    /// Computes the absolute value of `self`. Returns `Float::nan()` if the\n+    /// number is `Float::nan()`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = 3.5;\n+    /// let y = -3.5;\n+    ///\n+    /// let abs_difference_x = (x.abs() - x).abs();\n+    /// let abs_difference_y = (y.abs() - (-y)).abs();\n+    ///\n+    /// assert!(abs_difference_x < 1e-10);\n+    /// assert!(abs_difference_y < 1e-10);\n+    ///\n+    /// assert!(f64::NAN.abs().is_nan());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn abs(self) -> f64 { num::Float::abs(self) }\n+\n+    /// Returns a number that represents the sign of `self`.\n+    ///\n+    /// - `1.0` if the number is positive, `+0.0` or `Float::infinity()`\n+    /// - `-1.0` if the number is negative, `-0.0` or `Float::neg_infinity()`\n+    /// - `Float::nan()` if the number is `Float::nan()`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let f = 3.5;\n+    ///\n+    /// assert_eq!(f.signum(), 1.0);\n+    /// assert_eq!(f64::NEG_INFINITY.signum(), -1.0);\n+    ///\n+    /// assert!(f64::NAN.signum().is_nan());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn signum(self) -> f64 { num::Float::signum(self) }\n+\n+    /// Returns `true` if `self` is positive, including `+0.0` and\n+    /// `Float::infinity()`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let nan: f64 = f64::NAN;\n+    ///\n+    /// let f = 7.0;\n+    /// let g = -7.0;\n+    ///\n+    /// assert!(f.is_positive());\n+    /// assert!(!g.is_positive());\n+    /// // Requires both tests to determine if is `NaN`\n+    /// assert!(!nan.is_positive() && !nan.is_negative());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn is_positive(self) -> bool { num::Float::is_positive(self) }\n+\n+    /// Returns `true` if `self` is negative, including `-0.0` and\n+    /// `Float::neg_infinity()`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let nan = f64::NAN;\n+    ///\n+    /// let f = 7.0;\n+    /// let g = -7.0;\n+    ///\n+    /// assert!(!f.is_negative());\n+    /// assert!(g.is_negative());\n+    /// // Requires both tests to determine if is `NaN`.\n+    /// assert!(!nan.is_positive() && !nan.is_negative());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn is_negative(self) -> bool { num::Float::is_negative(self) }\n+\n+    /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n+    /// error. This produces a more accurate result with better performance than\n+    /// a separate multiplication operation followed by an add.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let m = 10.0;\n+    /// let x = 4.0;\n+    /// let b = 60.0;\n+    ///\n+    /// // 100.0\n+    /// let abs_difference = (m.mul_add(x, b) - (m*x + b)).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn mul_add(self, a: f64, b: f64) -> f64 { num::Float::mul_add(self, a, b) }\n+\n+    /// Take the reciprocal (inverse) of a number, `1/x`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let abs_difference = (x.recip() - (1.0/x)).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn recip(self) -> f64 { num::Float::recip(self) }\n+\n+    /// Raise a number to an integer power.\n+    ///\n+    /// Using this function is generally faster than using `powf`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let abs_difference = (x.powi(2) - x*x).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn powi(self, n: i32) -> f64 { num::Float::powi(self, n) }\n+\n+    /// Raise a number to a floating point power.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let abs_difference = (x.powf(2.0) - x*x).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn powf(self, n: f64) -> f64 { num::Float::powf(self, n) }\n+\n+    /// Take the square root of a number.\n+    ///\n+    /// Returns NaN if `self` is a negative number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let positive = 4.0;\n+    /// let negative = -4.0;\n+    ///\n+    /// let abs_difference = (positive.sqrt() - 2.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// assert!(negative.sqrt().is_nan());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn sqrt(self) -> f64 { num::Float::sqrt(self) }\n+\n+    /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 4.0;\n+    ///\n+    /// let abs_difference = (f.rsqrt() - 0.5).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn rsqrt(self) -> f64 { num::Float::rsqrt(self) }\n+\n+    /// Returns `e^(self)`, (the exponential function).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let one = 1.0;\n+    /// // e^1\n+    /// let e = one.exp();\n+    ///\n+    /// // ln(e) - 1 == 0\n+    /// let abs_difference = (e.ln() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn exp(self) -> f64 { num::Float::exp(self) }\n+\n+    /// Returns `2^(self)`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 2.0;\n+    ///\n+    /// // 2^2 - 4 == 0\n+    /// let abs_difference = (f.exp2() - 4.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn exp2(self) -> f64 { num::Float::exp2(self) }\n+\n+    /// Returns the natural logarithm of the number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let one = 1.0;\n+    /// // e^1\n+    /// let e = one.exp();\n+    ///\n+    /// // ln(e) - 1 == 0\n+    /// let abs_difference = (e.ln() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn ln(self) -> f64 { num::Float::ln(self) }\n+\n+    /// Returns the logarithm of the number with respect to an arbitrary base.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let ten = 10.0;\n+    /// let two = 2.0;\n+    ///\n+    /// // log10(10) - 1 == 0\n+    /// let abs_difference_10 = (ten.log(10.0) - 1.0).abs();\n+    ///\n+    /// // log2(2) - 1 == 0\n+    /// let abs_difference_2 = (two.log(2.0) - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference_10 < 1e-10);\n+    /// assert!(abs_difference_2 < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn log(self, base: f64) -> f64 { num::Float::log(self, base) }\n+\n+    /// Returns the base 2 logarithm of the number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let two = 2.0;\n+    ///\n+    /// // log2(2) - 1 == 0\n+    /// let abs_difference = (two.log2() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn log2(self) -> f64 { num::Float::log2(self) }\n+\n+    /// Returns the base 10 logarithm of the number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let ten = 10.0;\n+    ///\n+    /// // log10(10) - 1 == 0\n+    /// let abs_difference = (ten.log10() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn log10(self) -> f64 { num::Float::log10(self) }\n+\n+    /// Convert radians to degrees.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64::consts;\n+    ///\n+    /// let angle = consts::PI;\n+    ///\n+    /// let abs_difference = (angle.to_degrees() - 180.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"desirability is unclear\")]\n+    #[inline]\n+    pub fn to_degrees(self) -> f64 { num::Float::to_degrees(self) }\n+\n+    /// Convert degrees to radians.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64::consts;\n+    ///\n+    /// let angle = 180.0;\n+    ///\n+    /// let abs_difference = (angle.to_radians() - consts::PI).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"desirability is unclear\")]\n+    #[inline]\n+    pub fn to_radians(self) -> f64 { num::Float::to_radians(self) }\n+\n+    /// Constructs a floating point number of `x*2^exp`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// // 3*2^2 - 12 == 0\n+    /// let abs_difference = (Float::ldexp(3.0, 2) - 12.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"pending integer conventions\")]\n+    #[inline]\n+    pub fn ldexp(x: f64, exp: int) -> f64 {\n+        unsafe { cmath::ldexp(x, exp as c_int) }\n+    }\n+\n+    /// Breaks the number into a normalized fraction and a base-2 exponent,\n+    /// satisfying:\n+    ///\n+    ///  * `self = x * 2^exp`\n+    ///  * `0.5 <= abs(x) < 1.0`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 4.0;\n+    ///\n+    /// // (1/2)*2^3 -> 1 * 8/2 -> 4.0\n+    /// let f = x.frexp();\n+    /// let abs_difference_0 = (f.0 - 0.5).abs();\n+    /// let abs_difference_1 = (f.1 as f64 - 3.0).abs();\n+    ///\n+    /// assert!(abs_difference_0 < 1e-10);\n+    /// assert!(abs_difference_1 < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"pending integer conventions\")]\n+    #[inline]\n+    pub fn frexp(self) -> (f64, int) {\n+        unsafe {\n+            let mut exp = 0;\n+            let x = cmath::frexp(self, &mut exp);\n+            (x, exp as int)\n+        }\n+    }\n+\n+    /// Returns the next representable floating-point value in the direction of\n+    /// `other`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0f32;\n+    ///\n+    /// let abs_diff = (x.next_after(2.0) - 1.00000011920928955078125_f32).abs();\n+    ///\n+    /// assert!(abs_diff < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn next_after(self, other: f64) -> f64 {\n+        unsafe { cmath::nextafter(self, other) }\n+    }\n+\n+    /// Returns the maximum of the two numbers.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let y = 2.0;\n+    ///\n+    /// assert_eq!(x.max(y), y);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn max(self, other: f64) -> f64 {\n+        unsafe { cmath::fmax(self, other) }\n+    }\n+\n+    /// Returns the minimum of the two numbers.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let y = 2.0;\n+    ///\n+    /// assert_eq!(x.min(y), x);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn min(self, other: f64) -> f64 {\n+        unsafe { cmath::fmin(self, other) }\n+    }\n+\n+    /// The positive difference of two numbers.\n+    ///\n+    /// * If `self <= other`: `0:0`\n+    /// * Else: `self - other`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 3.0;\n+    /// let y = -3.0;\n+    ///\n+    /// let abs_difference_x = (x.abs_sub(1.0) - 2.0).abs();\n+    /// let abs_difference_y = (y.abs_sub(1.0) - 0.0).abs();\n+    ///\n+    /// assert!(abs_difference_x < 1e-10);\n+    /// assert!(abs_difference_y < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n+    #[inline]\n+    pub fn abs_sub(self, other: f64) -> f64 {\n+        unsafe { cmath::fdim(self, other) }\n+    }\n+\n+    /// Take the cubic root of a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 8.0;\n+    ///\n+    /// // x^(1/3) - 2 == 0\n+    /// let abs_difference = (x.cbrt() - 2.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n+    #[inline]\n+    pub fn cbrt(self) -> f64 {\n+        unsafe { cmath::cbrt(self) }\n+    }\n+\n+    /// Calculate the length of the hypotenuse of a right-angle triangle given\n+    /// legs of length `x` and `y`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let y = 3.0;\n+    ///\n+    /// // sqrt(x^2 + y^2)\n+    /// let abs_difference = (x.hypot(y) - (x.powi(2) + y.powi(2)).sqrt()).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"unsure about its place in the world\")]\n+    #[inline]\n+    pub fn hypot(self, other: f64) -> f64 {\n+        unsafe { cmath::hypot(self, other) }\n+    }\n+\n+    /// Computes the sine of a number (in radians).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::PI/2.0;\n+    ///\n+    /// let abs_difference = (x.sin() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn sin(self) -> f64 {\n+        unsafe { intrinsics::sinf64(self) }\n+    }\n+\n+    /// Computes the cosine of a number (in radians).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = 2.0*f64::consts::PI;\n+    ///\n+    /// let abs_difference = (x.cos() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn cos(self) -> f64 {\n+        unsafe { intrinsics::cosf64(self) }\n+    }\n+\n+    /// Computes the tangent of a number (in radians).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::PI/4.0;\n+    /// let abs_difference = (x.tan() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-14);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn tan(self) -> f64 {\n+        unsafe { cmath::tan(self) }\n+    }\n+\n+    /// Computes the arcsine of a number. Return value is in radians in\n+    /// the range [-pi/2, pi/2] or NaN if the number is outside the range\n+    /// [-1, 1].\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let f = f64::consts::PI / 2.0;\n+    ///\n+    /// // asin(sin(pi/2))\n+    /// let abs_difference = (f.sin().asin() - f64::consts::PI / 2.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn asin(self) -> f64 {\n+        unsafe { cmath::asin(self) }\n+    }\n+\n+    /// Computes the arccosine of a number. Return value is in radians in\n+    /// the range [0, pi] or NaN if the number is outside the range\n+    /// [-1, 1].\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let f = f64::consts::PI / 4.0;\n+    ///\n+    /// // acos(cos(pi/4))\n+    /// let abs_difference = (f.cos().acos() - f64::consts::PI / 4.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn acos(self) -> f64 {\n+        unsafe { cmath::acos(self) }\n+    }\n+\n+    /// Computes the arctangent of a number. Return value is in radians in the\n+    /// range [-pi/2, pi/2];\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 1.0;\n+    ///\n+    /// // atan(tan(1))\n+    /// let abs_difference = (f.tan().atan() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn atan(self) -> f64 {\n+        unsafe { cmath::atan(self) }\n+    }\n+\n+    /// Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).\n+    ///\n+    /// * `x = 0`, `y = 0`: `0`\n+    /// * `x >= 0`: `arctan(y/x)` -> `[-pi/2, pi/2]`\n+    /// * `y >= 0`: `arctan(y/x) + pi` -> `(pi/2, pi]`\n+    /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let pi = f64::consts::PI;\n+    /// // All angles from horizontal right (+x)\n+    /// // 45 deg counter-clockwise\n+    /// let x1 = 3.0;\n+    /// let y1 = -3.0;\n+    ///\n+    /// // 135 deg clockwise\n+    /// let x2 = -3.0;\n+    /// let y2 = 3.0;\n+    ///\n+    /// let abs_difference_1 = (y1.atan2(x1) - (-pi/4.0)).abs();\n+    /// let abs_difference_2 = (y2.atan2(x2) - 3.0*pi/4.0).abs();\n+    ///\n+    /// assert!(abs_difference_1 < 1e-10);\n+    /// assert!(abs_difference_2 < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn atan2(self, other: f64) -> f64 {\n+        unsafe { cmath::atan2(self, other) }\n+    }\n+\n+    /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n+    /// `(sin(x), cos(x))`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::PI/4.0;\n+    /// let f = x.sin_cos();\n+    ///\n+    /// let abs_difference_0 = (f.0 - x.sin()).abs();\n+    /// let abs_difference_1 = (f.1 - x.cos()).abs();\n+    ///\n+    /// assert!(abs_difference_0 < 1e-10);\n+    /// assert!(abs_difference_0 < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn sin_cos(self) -> (f64, f64) {\n+        (self.sin(), self.cos())\n+    }\n+\n+    /// Returns `e^(self) - 1` in a way that is accurate even if the\n+    /// number is close to zero.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 7.0;\n+    ///\n+    /// // e^(ln(7)) - 1\n+    /// let abs_difference = (x.ln().exp_m1() - 6.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n+    #[inline]\n+    pub fn exp_m1(self) -> f64 {\n+        unsafe { cmath::expm1(self) }\n+    }\n+\n+    /// Returns `ln(1+n)` (natural logarithm) more accurately than if\n+    /// the operations were performed separately.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::E - 1.0;\n+    ///\n+    /// // ln(1 + (e - 1)) == ln(e) == 1\n+    /// let abs_difference = (x.ln_1p() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n+    #[inline]\n+    pub fn ln_1p(self) -> f64 {\n+        unsafe { cmath::log1p(self) }\n+    }\n+\n+    /// Hyperbolic sine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let x = 1.0;\n+    ///\n+    /// let f = x.sinh();\n+    /// // Solving sinh() at 1 gives `(e^2-1)/(2e)`\n+    /// let g = (e*e - 1.0)/(2.0*e);\n+    /// let abs_difference = (f - g).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn sinh(self) -> f64 {\n+        unsafe { cmath::sinh(self) }\n+    }\n+\n+    /// Hyperbolic cosine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let x = 1.0;\n+    /// let f = x.cosh();\n+    /// // Solving cosh() at 1 gives this result\n+    /// let g = (e*e + 1.0)/(2.0*e);\n+    /// let abs_difference = (f - g).abs();\n+    ///\n+    /// // Same result\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn cosh(self) -> f64 {\n+        unsafe { cmath::cosh(self) }\n+    }\n+\n+    /// Hyperbolic tangent function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let x = 1.0;\n+    ///\n+    /// let f = x.tanh();\n+    /// // Solving tanh() at 1 gives `(1 - e^(-2))/(1 + e^(-2))`\n+    /// let g = (1.0 - e.powi(-2))/(1.0 + e.powi(-2));\n+    /// let abs_difference = (f - g).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn tanh(self) -> f64 {\n+        unsafe { cmath::tanh(self) }\n+    }\n+\n+    /// Inverse hyperbolic sine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let f = x.sinh().asinh();\n+    ///\n+    /// let abs_difference = (f - x).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn asinh(self) -> f64 {\n+        match self {\n+            NEG_INFINITY => NEG_INFINITY,\n+            x => (x + ((x * x) + 1.0).sqrt()).ln(),\n+        }\n+    }\n+\n+    /// Inverse hyperbolic cosine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let f = x.cosh().acosh();\n+    ///\n+    /// let abs_difference = (f - x).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn acosh(self) -> f64 {\n+        match self {\n+            x if x < 1.0 => Float::nan(),\n+            x => (x + ((x * x) - 1.0).sqrt()).ln(),\n+        }\n+    }\n+\n+    /// Inverse hyperbolic tangent function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let f = e.tanh().atanh();\n+    ///\n+    /// let abs_difference = (f - e).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn atanh(self) -> f64 {\n+        0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n+    }\n+}\n+\n //\n // Section: String Conversions\n //"}, {"sha": "ece7af9c1523dbc380c32a4824c14f57c7bd7e9a", "filename": "src/libstd/num/float_macros.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat_macros.rs?ref=8256241d3af28bd835b267e27b6e24aeb5e799bd", "patch": "@@ -11,6 +11,7 @@\n #![unstable(feature = \"std_misc\")]\n #![doc(hidden)]\n \n+#[cfg(stage0)]\n macro_rules! assert_approx_eq {\n     ($a:expr, $b:expr) => ({\n         use num::Float;\n@@ -19,3 +20,12 @@ macro_rules! assert_approx_eq {\n                 \"{} is not approximately equal to {}\", *a, *b);\n     })\n }\n+\n+#[cfg(not(stage0))]\n+macro_rules! assert_approx_eq {\n+    ($a:expr, $b:expr) => ({\n+        let (a, b) = (&$a, &$b);\n+        assert!((*a - *b).abs() < 1.0e-6,\n+                \"{} is not approximately equal to {}\", *a, *b);\n+    })\n+}"}, {"sha": "bf2b2c0afe6c3825e0688dbd1852765cfe90fffc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256241d3af28bd835b267e27b6e24aeb5e799bd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8256241d3af28bd835b267e27b6e24aeb5e799bd", "patch": "@@ -78,6 +78,7 @@ use owned_slice::OwnedSlice;\n use std::collections::HashSet;\n use std::io::prelude::*;\n use std::mem;\n+#[cfg(stage0)]\n use std::num::Float;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;"}]}