{"sha": "feca7d0a03ffe1c786f6fe00330b6d2df59bcfef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlY2E3ZDBhMDNmZmUxYzc4NmY2ZmUwMDMzMGI2ZDJkZjU5YmNmZWY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-24T17:45:37Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-17T22:42:43Z"}, "message": "ty::layout: split out a private trait from `FnAbiExt`.", "tree": {"sha": "771f7368b87fb9e0369801b3f4abcefab348da3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/771f7368b87fb9e0369801b3f4abcefab348da3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feca7d0a03ffe1c786f6fe00330b6d2df59bcfef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feca7d0a03ffe1c786f6fe00330b6d2df59bcfef", "html_url": "https://github.com/rust-lang/rust/commit/feca7d0a03ffe1c786f6fe00330b6d2df59bcfef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feca7d0a03ffe1c786f6fe00330b6d2df59bcfef/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1d7c51d27734f5af98e96d26a50357d6e145009", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d7c51d27734f5af98e96d26a50357d6e145009", "html_url": "https://github.com/rust-lang/rust/commit/a1d7c51d27734f5af98e96d26a50357d6e145009"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "793dda5c928bc0a12a3274c78a0de45d03270ed7", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/feca7d0a03ffe1c786f6fe00330b6d2df59bcfef/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feca7d0a03ffe1c786f6fe00330b6d2df59bcfef/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=feca7d0a03ffe1c786f6fe00330b6d2df59bcfef", "patch": "@@ -2804,16 +2804,6 @@ where\n     /// NB: that includes virtual calls, which are represented by \"direct calls\"\n     /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).\n     fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self;\n-\n-    fn new_internal(\n-        cx: &C,\n-        sig: ty::PolyFnSig<'tcx>,\n-        extra_args: &[Ty<'tcx>],\n-        caller_location: Option<Ty<'tcx>>,\n-        codegen_fn_attr_flags: CodegenFnAttrFlags,\n-        make_self_ptr_thin: bool,\n-    ) -> Self;\n-    fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi);\n }\n \n impl<'tcx, C> FnAbiExt<'tcx, C> for call::FnAbi<'tcx, Ty<'tcx>>\n@@ -2844,7 +2834,28 @@ where\n             matches!(instance.def, ty::InstanceDef::Virtual(..)),\n         )\n     }\n+}\n+\n+/// Implementation detail of computing `FnAbi`s, shouldn't be exported.\n+trait FnAbiInternalExt<'tcx, C>\n+where\n+    C: LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>> + HasTargetSpec,\n+{\n+    fn new_internal(\n+        cx: &C,\n+        sig: ty::PolyFnSig<'tcx>,\n+        extra_args: &[Ty<'tcx>],\n+        caller_location: Option<Ty<'tcx>>,\n+        codegen_fn_attr_flags: CodegenFnAttrFlags,\n+        make_self_ptr_thin: bool,\n+    ) -> Self;\n+    fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi);\n+}\n \n+impl<'tcx, C> FnAbiInternalExt<'tcx, C> for call::FnAbi<'tcx, Ty<'tcx>>\n+where\n+    C: LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>> + HasTargetSpec,\n+{\n     fn new_internal(\n         cx: &C,\n         sig: ty::PolyFnSig<'tcx>,"}]}