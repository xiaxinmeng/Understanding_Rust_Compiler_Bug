{"sha": "dda89945b733897796250c46ca3cca8dcc6abb8a", "node_id": "C_kwDOAAsO6NoAKGRkYTg5OTQ1YjczMzg5Nzc5NjI1MGM0NmNhM2NjYThkY2M2YWJiOGE", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T06:30:45Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T06:31:08Z"}, "message": "Allow all associated functions and add test", "tree": {"sha": "3416ffcd7d14457e400d00d0fb270ebd883c2a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3416ffcd7d14457e400d00d0fb270ebd883c2a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dda89945b733897796250c46ca3cca8dcc6abb8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dda89945b733897796250c46ca3cca8dcc6abb8a", "html_url": "https://github.com/rust-lang/rust/commit/dda89945b733897796250c46ca3cca8dcc6abb8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dda89945b733897796250c46ca3cca8dcc6abb8a/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b59ec166adec6b1348421d7b558ad434351839be", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59ec166adec6b1348421d7b558ad434351839be", "html_url": "https://github.com/rust-lang/rust/commit/b59ec166adec6b1348421d7b558ad434351839be"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "055682a1509ef14efb3b85641e775871fa78f762", "filename": "compiler/rustc_passes/messages.ftl", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dda89945b733897796250c46ca3cca8dcc6abb8a/compiler%2Frustc_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/dda89945b733897796250c46ca3cca8dcc6abb8a/compiler%2Frustc_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fmessages.ftl?ref=dda89945b733897796250c46ca3cca8dcc6abb8a", "patch": "@@ -627,13 +627,9 @@ passes_attr_application_struct_enum_union =\n     attribute should be applied to a struct, enum, or union\n     .label = not a struct, enum, or union\n \n-passes_attr_application_struct_enum_function_union =\n-    attribute should be applied to a struct, enum, function, or union\n-    .label = not a struct, enum, function, or union\n-\n-passes_attr_application_struct_enum_function_inherent_method_union =\n-    attribute should be applied to a struct, enum, function, inherent method, or union\n-    .label = not a struct, enum, function, inherent method, or union\n+passes_attr_application_struct_enum_function_method_union =\n+    attribute should be applied to a struct, enum, function, associated function, or union\n+    .label = not a struct, enum, function, associated function, or union\n \n passes_transparent_incompatible =\n     transparent {$target} cannot have other repr hints"}, {"sha": "085a28626ea003105546441c2eb80ab6b18b745b", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dda89945b733897796250c46ca3cca8dcc6abb8a/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda89945b733897796250c46ca3cca8dcc6abb8a/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=dda89945b733897796250c46ca3cca8dcc6abb8a", "patch": "@@ -1745,10 +1745,10 @@ impl CheckAttrVisitor<'_> {\n                         | Target::Union\n                         | Target::Enum\n                         | Target::Fn\n-                        | Target::Method(MethodKind::Inherent) => continue,\n+                        | Target::Method(_) => continue,\n                         _ => {\n                             self.tcx.sess.emit_err(\n-                                errors::AttrApplication::StructEnumFunctionInherentMethodUnion {\n+                                errors::AttrApplication::StructEnumFunctionMethodUnion {\n                                     hint_span: hint.span(),\n                                     span,\n                                 },"}, {"sha": "e8603b3a2f1732688f036838a0625fe4b47f9f47", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dda89945b733897796250c46ca3cca8dcc6abb8a/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda89945b733897796250c46ca3cca8dcc6abb8a/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=dda89945b733897796250c46ca3cca8dcc6abb8a", "patch": "@@ -1355,8 +1355,8 @@ pub enum AttrApplication {\n         #[label]\n         span: Span,\n     },\n-    #[diag(passes_attr_application_struct_enum_function_inherent_method_union, code = \"E0517\")]\n-    StructEnumFunctionInherentMethodUnion {\n+    #[diag(passes_attr_application_struct_enum_function_method_union, code = \"E0517\")]\n+    StructEnumFunctionMethodUnion {\n         #[primary_span]\n         hint_span: Span,\n         #[label]"}, {"sha": "f3cf614e185c9d5f1df27828c42786561c47a561", "filename": "tests/codegen/align-fn.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dda89945b733897796250c46ca3cca8dcc6abb8a/tests%2Fcodegen%2Falign-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda89945b733897796250c46ca3cca8dcc6abb8a/tests%2Fcodegen%2Falign-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Falign-fn.rs?ref=dda89945b733897796250c46ca3cca8dcc6abb8a", "patch": "@@ -15,4 +15,35 @@ impl A {\n     #[no_mangle]\n     #[repr(align(16))]\n     pub fn method_align(self) {}\n+\n+    // CHECK: align 16\n+    #[no_mangle]\n+    #[repr(align(16))]\n+    pub fn associated_fn() {}\n+}\n+\n+trait T: Sized {\n+    fn trait_fn() {}\n+\n+    // CHECK: align 32\n+    #[repr(align(32))]\n+    fn trait_method(self) {}\n+}\n+\n+impl T for A {\n+    // CHECK: align 16\n+    #[no_mangle]\n+    #[repr(align(16))]\n+    fn trait_fn() {}\n+\n+    // CHECK: align 16\n+    #[no_mangle]\n+    #[repr(align(16))]\n+    fn trait_method(self) {}\n+}\n+\n+impl T for () {}\n+\n+pub fn foo() {\n+    ().trait_method();\n }"}]}