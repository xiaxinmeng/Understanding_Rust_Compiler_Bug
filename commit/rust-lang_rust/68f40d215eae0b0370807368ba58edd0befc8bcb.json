{"sha": "68f40d215eae0b0370807368ba58edd0befc8bcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZjQwZDIxNWVhZTBiMDM3MDgwNzM2OGJhNThlZGQwYmVmYzhiY2I=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-10T03:09:47Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-10T14:33:21Z"}, "message": "std: Rename Iterator.transform -> .map\n\ncc #5898", "tree": {"sha": "95a98f92e428469fff2ec31cec7f0b9dc4b3fe18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95a98f92e428469fff2ec31cec7f0b9dc4b3fe18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68f40d215eae0b0370807368ba58edd0befc8bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68f40d215eae0b0370807368ba58edd0befc8bcb", "html_url": "https://github.com/rust-lang/rust/commit/68f40d215eae0b0370807368ba58edd0befc8bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68f40d215eae0b0370807368ba58edd0befc8bcb/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4062b84f4a5926f1037535903b13b99b6806f490", "url": "https://api.github.com/repos/rust-lang/rust/commits/4062b84f4a5926f1037535903b13b99b6806f490", "html_url": "https://github.com/rust-lang/rust/commit/4062b84f4a5926f1037535903b13b99b6806f490"}], "stats": {"total": 377, "additions": 188, "deletions": 189}, "files": [{"sha": "5e3687d70575d3092fc46d5f9bb53553bdb40310", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -142,7 +142,7 @@ fn parse_check_line(line: &str) -> Option<~str> {\n fn parse_exec_env(line: &str) -> Option<(~str, ~str)> {\n     do parse_name_value_directive(line, ~\"exec-env\").map |nv| {\n         // nv is either FOO or FOO=BAR\n-        let mut strs: ~[~str] = nv.splitn_iter('=', 1).transform(|s| s.to_owned()).collect();\n+        let mut strs: ~[~str] = nv.splitn_iter('=', 1).map(|s| s.to_owned()).collect();\n \n         match strs.len() {\n           1u => (strs.pop(), ~\"\"),"}, {"sha": "d325341d157aaeedd39028231c1e8b906123bcf0", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -350,13 +350,13 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n         fatal(~\"process did not return an error status\");\n     }\n \n-    let prefixes = expected_errors.iter().transform(|ee| {\n+    let prefixes = expected_errors.iter().map(|ee| {\n         fmt!(\"%s:%u:\", testfile.to_str(), ee.line)\n     }).collect::<~[~str]>();\n \n     fn to_lower( s : &str ) -> ~str {\n         let i = s.iter();\n-        let c : ~[char] = i.transform( |c| {\n+        let c : ~[char] = i.map( |c| {\n             if c.is_ascii() {\n                 c.to_ascii().to_lower().to_char()\n             } else {\n@@ -760,7 +760,7 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n     let cmdline = make_cmdline(\"\", args.prog, args.args);\n \n     // get bare program string\n-    let mut tvec: ~[~str] = args.prog.split_iter('/').transform(|ts| ts.to_owned()).collect();\n+    let mut tvec: ~[~str] = args.prog.split_iter('/').map(|ts| ts.to_owned()).collect();\n     let prog_short = tvec.pop();\n \n     // copy to target"}, {"sha": "63d62bd48098055c817fc71eb06d105bc288ed74", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -869,7 +869,7 @@ impl BitvSet {\n         let min = num::min(self.bitv.storage.len(), other.bitv.storage.len());\n         self.bitv.storage.slice(0, min).iter().enumerate()\n             .zip(Repeat::new(&other.bitv.storage))\n-            .transform(|((i, &w), o_store)| (i * uint::bits, w, o_store[i]))\n+            .map(|((i, &w), o_store)| (i * uint::bits, w, o_store[i]))\n     }\n \n     /// Visits each word in self or other that extends beyond the other. This\n@@ -888,11 +888,11 @@ impl BitvSet {\n         if olen < slen {\n             self.bitv.storage.slice_from(olen).iter().enumerate()\n                 .zip(Repeat::new(olen))\n-                .transform(|((i, &w), min)| (true, (i + min) * uint::bits, w))\n+                .map(|((i, &w), min)| (true, (i + min) * uint::bits, w))\n         } else {\n             other.bitv.storage.slice_from(slen).iter().enumerate()\n                 .zip(Repeat::new(slen))\n-                .transform(|((i, &w), min)| (false, (i + min) * uint::bits, w))\n+                .map(|((i, &w), min)| (false, (i + min) * uint::bits, w))\n         }\n     }\n }"}, {"sha": "3e1038b2b4e83aa7b866373372de1f57b0770c29", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -600,7 +600,7 @@ impl<A: Eq> Eq for DList<A> {\n \n impl<A: Clone> Clone for DList<A> {\n     fn clone(&self) -> DList<A> {\n-        self.iter().transform(|x| x.clone()).collect()\n+        self.iter().map(|x| x.clone()).collect()\n     }\n }\n \n@@ -690,7 +690,7 @@ mod tests {\n \n     #[cfg(test)]\n     fn list_from<T: Clone>(v: &[T]) -> DList<T> {\n-        v.iter().transform(|x| (*x).clone()).collect()\n+        v.iter().map(|x| (*x).clone()).collect()\n     }\n \n     #[test]\n@@ -1014,7 +1014,7 @@ mod tests {\n     fn bench_collect_into(b: &mut test::BenchHarness) {\n         let v = &[0, ..64];\n         do b.iter {\n-            let _: DList<int> = v.iter().transform(|x| *x).collect();\n+            let _: DList<int> = v.iter().map(|x| *x).collect();\n         }\n     }\n \n@@ -1075,31 +1075,31 @@ mod tests {\n     #[bench]\n     fn bench_iter(b: &mut test::BenchHarness) {\n         let v = &[0, ..128];\n-        let m: DList<int> = v.iter().transform(|&x|x).collect();\n+        let m: DList<int> = v.iter().map(|&x|x).collect();\n         do b.iter {\n             assert!(m.iter().len_() == 128);\n         }\n     }\n     #[bench]\n     fn bench_iter_mut(b: &mut test::BenchHarness) {\n         let v = &[0, ..128];\n-        let mut m: DList<int> = v.iter().transform(|&x|x).collect();\n+        let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         do b.iter {\n             assert!(m.mut_iter().len_() == 128);\n         }\n     }\n     #[bench]\n     fn bench_iter_rev(b: &mut test::BenchHarness) {\n         let v = &[0, ..128];\n-        let m: DList<int> = v.iter().transform(|&x|x).collect();\n+        let m: DList<int> = v.iter().map(|&x|x).collect();\n         do b.iter {\n             assert!(m.rev_iter().len_() == 128);\n         }\n     }\n     #[bench]\n     fn bench_iter_mut_rev(b: &mut test::BenchHarness) {\n         let v = &[0, ..128];\n-        let mut m: DList<int> = v.iter().transform(|&x|x).collect();\n+        let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         do b.iter {\n             assert!(m.mut_rev_iter().len_() == 128);\n         }"}, {"sha": "e268e83bf3fb0653d290147ee24bb7fb1844406e", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -353,7 +353,7 @@ a literal `-`.\n */\n // XXX: stupid, unclear name\n pub fn pathify(vec: &[~str], stdin_hyphen : bool) -> ~[Option<Path>] {\n-    vec.iter().transform(|str| {\n+    vec.iter().map(|str| {\n         if stdin_hyphen && \"-\" == *str {\n             None\n         } else {"}, {"sha": "000520fe41e6e5200a4d1aea90ebe62d4c300565", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -647,7 +647,7 @@ pub mod groups {\n \n         let desc_sep = \"\\n\" + \" \".repeat(24);\n \n-        let mut rows = opts.iter().transform(|optref| {\n+        let mut rows = opts.iter().map(|optref| {\n             let OptGroup{short_name: short_name,\n                          long_name: long_name,\n                          hint: hint,"}, {"sha": "27dfc090f8888a093fd01a766e46b7ca0bf5f8f5", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -287,7 +287,7 @@ impl Mul<BigUint, BigUint> for BigUint {\n             if n == 1 { return (*a).clone(); }\n \n             let mut carry = 0;\n-            let mut prod = do a.data.iter().transform |ai| {\n+            let mut prod = do a.data.iter().map |ai| {\n                 let (hi, lo) = BigDigit::from_uint(\n                     (*ai as uint) * (n as uint) + (carry as uint)\n                 );\n@@ -625,7 +625,7 @@ impl BigUint {\n         if n_bits == 0 || self.is_zero() { return (*self).clone(); }\n \n         let mut carry = 0;\n-        let mut shifted = do self.data.iter().transform |elem| {\n+        let mut shifted = do self.data.iter().map |elem| {\n             let (hi, lo) = BigDigit::from_uint(\n                 (*elem as uint) << n_bits | (carry as uint)\n             );"}, {"sha": "71dddc481ae37d3e3d205536d754d6020e59659a", "filename": "src/libextra/par.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpar.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -77,7 +77,7 @@ fn map_slices<A:Clone + Send,B:Clone + Send>(\n         info!(\"num_tasks: %?\", (num_tasks, futures.len()));\n         assert_eq!(num_tasks, futures.len());\n \n-        do futures.move_iter().transform |ys| {\n+        do futures.move_iter().map |ys| {\n             let mut ys = ys;\n             ys.get()\n         }.collect()\n@@ -90,7 +90,7 @@ pub fn map<A:Clone + Send,B:Clone + Send>(\n     vec::concat(map_slices(xs, || {\n         let f = fn_factory();\n         let result: ~fn(uint, &[A]) -> ~[B] =\n-            |_, slice| slice.iter().transform(|x| f(x)).collect();\n+            |_, slice| slice.iter().map(|x| f(x)).collect();\n         result\n     }))\n }\n@@ -102,7 +102,7 @@ pub fn mapi<A:Clone + Send,B:Clone + Send>(\n     let slices = map_slices(xs, || {\n         let f = fn_factory();\n         let result: ~fn(uint, &[A]) -> ~[B] = |base, slice| {\n-            slice.iter().enumerate().transform(|(i, x)| {\n+            slice.iter().enumerate().map(|(i, x)| {\n                 f(i + base, x)\n             }).collect()\n         };"}, {"sha": "4b94219b30d537237406faad9799e06da2cfefdd", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -367,7 +367,7 @@ mod tests {\n     fn test_from_iter() {\n         let xs = ~[9u, 8, 7, 6, 5, 4, 3, 2, 1];\n \n-        let mut q: PriorityQueue<uint> = xs.rev_iter().transform(|&x| x).collect();\n+        let mut q: PriorityQueue<uint> = xs.rev_iter().map(|&x| x).collect();\n \n         for &x in xs.iter() {\n             assert_eq!(q.pop(), x);"}, {"sha": "32c82e662b3544927542e440226b5ea6e65d94b5", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -692,8 +692,8 @@ mod tests {\n     fn test_from_iterator() {\n         use std::iterator;\n         let v = ~[1,2,3,4,5,6,7];\n-        let deq: RingBuf<int> = v.iter().transform(|&x| x).collect();\n-        let u: ~[int] = deq.iter().transform(|&x| x).collect();\n+        let deq: RingBuf<int> = v.iter().map(|&x| x).collect();\n+        let u: ~[int] = deq.iter().map(|&x| x).collect();\n         assert_eq!(u, v);\n \n         let mut seq = iterator::count(0u, 2).take_(256);"}, {"sha": "bb59e34f98a123c11a1f3614b9199f8db908d602", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -105,7 +105,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n         *dst = (*src).clone();\n     }\n \n-    for c in cap.iter().transform(|&x| x) {\n+    for c in cap.iter().map(|&x| x) {\n         let cur = c as char;\n         let mut old_state = state;\n         match state {"}, {"sha": "0d2badff4929bc185f5b722b3149d782a741a915", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -214,7 +214,7 @@ pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n     }\n \n     let names_str = str::from_bytes(file.read_bytes(names_bytes as uint - 1)); // don't read NUL\n-    let term_names: ~[~str] = names_str.split_iter('|').transform(|s| s.to_owned()).collect();\n+    let term_names: ~[~str] = names_str.split_iter('|').map(|s| s.to_owned()).collect();\n \n     file.read_byte(); // consume NUL\n "}, {"sha": "8b7332ff545a4868c9f62a1942dffe0cb4fc3c7e", "filename": "src/libextra/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -526,10 +526,10 @@ impl ConsoleTestState {\n \n pub fn fmt_metrics(mm: &MetricMap) -> ~str {\n     let v : ~[~str] = mm.iter()\n-        .transform(|(k,v)| fmt!(\"%s: %f (+/- %f)\",\n-                                *k,\n-                                v.value as float,\n-                                v.noise as float))\n+        .map(|(k,v)| fmt!(\"%s: %f (+/- %f)\",\n+                          *k,\n+                          v.value as float,\n+                          v.noise as float))\n         .collect();\n     v.connect(\", \")\n }"}, {"sha": "424492a3cfea4d258524d386ddfb9f63f9f9c71e", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -1259,7 +1259,7 @@ mod test_treemap {\n     fn test_from_iter() {\n         let xs = ~[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n \n-        let map: TreeMap<int, int> = xs.iter().transform(|&x| x).collect();\n+        let map: TreeMap<int, int> = xs.iter().map(|&x| x).collect();\n \n         for &(k, v) in xs.iter() {\n             assert_eq!(map.find(&k), Some(&v));\n@@ -1558,7 +1558,7 @@ mod test_set {\n     fn test_from_iter() {\n         let xs = ~[1, 2, 3, 4, 5, 6, 7, 8, 9];\n \n-        let set: TreeSet<int> = xs.iter().transform(|&x| x).collect();\n+        let set: TreeSet<int> = xs.iter().map(|&x| x).collect();\n \n         for x in xs.iter() {\n             assert!(set.contains(x));"}, {"sha": "e07400c79b0e4a54b7f196599afc955dc53a4a0e", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -49,7 +49,7 @@ fn get_sysroot_absolute_rt_lib(sess: session::Session) -> Path {\n }\n \n pub fn rpaths_to_flags(rpaths: &[Path]) -> ~[~str] {\n-    rpaths.iter().transform(|rpath| fmt!(\"-Wl,-rpath,%s\",rpath.to_str())).collect()\n+    rpaths.iter().map(|rpath| fmt!(\"-Wl,-rpath,%s\",rpath.to_str())).collect()\n }\n \n fn get_rpaths(os: session::os,\n@@ -100,7 +100,7 @@ fn get_rpaths(os: session::os,\n fn get_rpaths_relative_to_output(os: session::os,\n                                  output: &Path,\n                                  libs: &[Path]) -> ~[Path] {\n-    libs.iter().transform(|a| get_rpath_relative_to_output(os, output, a)).collect()\n+    libs.iter().map(|a| get_rpath_relative_to_output(os, output, a)).collect()\n }\n \n pub fn get_rpath_relative_to_output(os: session::os,\n@@ -123,7 +123,7 @@ pub fn get_rpath_relative_to_output(os: session::os,\n }\n \n fn get_absolute_rpaths(libs: &[Path]) -> ~[Path] {\n-    libs.iter().transform(|a| get_absolute_rpath(a)).collect()\n+    libs.iter().map(|a| get_absolute_rpath(a)).collect()\n }\n \n pub fn get_absolute_rpath(lib: &Path) -> Path {"}, {"sha": "fdd7c9231b1551f5a34247ac5c07c9fa135a7e61", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -120,7 +120,7 @@ pub fn build_configuration(sess: Session, argv0: @str, input: &input) ->\n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n fn parse_cfgspecs(cfgspecs: ~[~str],\n                   demitter: diagnostic::Emitter) -> ast::CrateConfig {\n-    do cfgspecs.move_iter().transform |s| {\n+    do cfgspecs.move_iter().map |s| {\n         let sess = parse::new_parse_sess(Some(demitter));\n         parse::parse_meta_from_source_str(@\"cfgspec\", s.to_managed(), ~[], sess)\n     }.collect::<ast::CrateConfig>()\n@@ -726,7 +726,7 @@ pub fn build_session_options(binary: @str,\n     let addl_lib_search_paths = getopts::opt_strs(matches, \"L\").map(|s| Path(*s));\n     let linker = getopts::opt_maybe_str(matches, \"linker\");\n     let linker_args = getopts::opt_strs(matches, \"link-args\").flat_map( |a| {\n-        a.split_iter(' ').transform(|arg| arg.to_owned()).collect()\n+        a.split_iter(' ').map(|arg| arg.to_owned()).collect()\n     });\n \n     let cfg = parse_cfgspecs(getopts::opt_strs(matches, \"cfg\"), demitter);\n@@ -737,7 +737,7 @@ pub fn build_session_options(binary: @str,\n     let custom_passes = match getopts::opt_maybe_str(matches, \"passes\") {\n         None => ~[],\n         Some(s) => {\n-            s.split_iter(|c: char| c == ' ' || c == ',').transform(|s| {\n+            s.split_iter(|c: char| c == ' ' || c == ',').map(|s| {\n                 s.trim().to_owned()\n             }).collect()\n         }"}, {"sha": "026532c89c3293689906de508fed2c8b2062c1ac", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -102,12 +102,12 @@ fn fold_item_underscore(cx: @Context, item: &ast::item_,\n     let item = match *item {\n         ast::item_impl(ref a, ref b, ref c, ref methods) => {\n             let methods = methods.iter().filter(|m| method_in_cfg(cx, **m))\n-                .transform(|x| *x).collect();\n+                .map(|x| *x).collect();\n             ast::item_impl((*a).clone(), (*b).clone(), (*c).clone(), methods)\n         }\n         ast::item_trait(ref a, ref b, ref methods) => {\n             let methods = methods.iter().filter(|m| trait_method_in_cfg(cx, *m) )\n-                .transform(|x| (*x).clone()).collect();\n+                .map(|x| (*x).clone()).collect();\n             ast::item_trait((*a).clone(), (*b).clone(), methods)\n         }\n         ref item => (*item).clone(),\n@@ -180,5 +180,5 @@ fn trait_method_in_cfg(cx: @Context, meth: &ast::trait_method) -> bool {\n // Determine if an item should be translated in the current crate\n // configuration based on the item's attributes\n fn in_cfg(cfg: &[@ast::MetaItem], attrs: &[ast::Attribute]) -> bool {\n-    attr::test_cfg(cfg, attrs.iter().transform(|x| *x))\n+    attr::test_cfg(cfg, attrs.iter().map(|x| *x))\n }"}, {"sha": "597de440ae1fc0f986bbd48f81f1a182f2b14875", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -126,7 +126,7 @@ fn fold_mod(cx: @mut TestCtxt,\n \n     let mod_nomain = ast::_mod {\n         view_items: m.view_items.clone(),\n-        items: m.items.iter().transform(|i| nomain(cx, *i)).collect(),\n+        items: m.items.iter().map(|i| nomain(cx, *i)).collect(),\n     };\n \n     fold::noop_fold_mod(&mod_nomain, fld)\n@@ -236,7 +236,7 @@ fn is_ignored(cx: @mut TestCtxt, i: @ast::item) -> bool {\n     do i.attrs.iter().any |attr| {\n         // check ignore(cfg(foo, bar))\n         \"ignore\" == attr.name() && match attr.meta_item_list() {\n-            Some(ref cfgs) => attr::test_cfg(cx.crate.config, cfgs.iter().transform(|x| *x)),\n+            Some(ref cfgs) => attr::test_cfg(cx.crate.config, cfgs.iter().map(|x| *x)),\n             None => true\n         }\n     }"}, {"sha": "bc9085b6887d173f9191fc7ba49cbdf7b95e3bf5", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -83,7 +83,7 @@ fn warn_if_multiple_versions(e: @mut Env,\n             *crate_cache[crate_cache.len() - 1].metas\n         );\n \n-        let vec: ~[Either<cache_entry, cache_entry>] = crate_cache.iter().transform(|&entry| {\n+        let vec: ~[Either<cache_entry, cache_entry>] = crate_cache.iter().map(|&entry| {\n             let othername = loader::crate_name_from_metas(*entry.metas);\n             if name == othername {\n                 Left(entry)"}, {"sha": "282292a2ac09ce52796390f042d2f08748d7da6a", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -112,23 +112,23 @@ impl CFGBuilder {\n             ast::pat_enum(_, Some(ref subpats)) |\n             ast::pat_tup(ref subpats) => {\n                 let pats_exit =\n-                    self.pats_all(subpats.iter().transform(|p| *p), pred);\n+                    self.pats_all(subpats.iter().map(|p| *p), pred);\n                 self.add_node(pat.id, [pats_exit])\n             }\n \n             ast::pat_struct(_, ref subpats, _) => {\n                 let pats_exit =\n-                    self.pats_all(subpats.iter().transform(|f| f.pat), pred);\n+                    self.pats_all(subpats.iter().map(|f| f.pat), pred);\n                 self.add_node(pat.id, [pats_exit])\n             }\n \n             ast::pat_vec(ref pre, ref vec, ref post) => {\n                 let pre_exit =\n-                    self.pats_all(pre.iter().transform(|p| *p), pred);\n+                    self.pats_all(pre.iter().map(|p| *p), pred);\n                 let vec_exit =\n-                    self.pats_all(vec.iter().transform(|p| *p), pre_exit);\n+                    self.pats_all(vec.iter().map(|p| *p), pre_exit);\n                 let post_exit =\n-                    self.pats_all(post.iter().transform(|p| *p), vec_exit);\n+                    self.pats_all(post.iter().map(|p| *p), vec_exit);\n                 self.add_node(pat.id, [post_exit])\n             }\n         }\n@@ -376,7 +376,7 @@ impl CFGBuilder {\n             ast::expr_struct(_, ref fields, base) => {\n                 let base_exit = self.opt_expr(base, pred);\n                 let field_exprs: ~[@ast::expr] =\n-                    fields.iter().transform(|f| f.expr).collect();\n+                    fields.iter().map(|f| f.expr).collect();\n                 self.straightline(expr, base_exit, field_exprs)\n             }\n "}, {"sha": "81bd2491c69870e7cb1b84d9c7158c9e9c6cedb1", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -657,7 +657,7 @@ pub fn specialize(cx: &MatchCheckCtxt,\n                                          ty_to_str(cx.tcx, left_ty)));\n                             }\n                         }\n-                        let args = class_fields.iter().transform(|class_field| {\n+                        let args = class_fields.iter().map(|class_field| {\n                             match flds.iter().find_(|f|\n                                             f.ident == class_field.ident) {\n                                 Some(f) => f.pat,"}, {"sha": "2de94cdbf4ccd03d2c249c1d6cd9f4f8b968b37b", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -102,7 +102,7 @@ pub fn classify(e: &expr,\n \n               ast::expr_tup(ref es) |\n               ast::expr_vec(ref es, ast::m_imm) => {\n-                join_all(es.iter().transform(|e| classify(*e, tcx)))\n+                join_all(es.iter().map(|e| classify(*e, tcx)))\n               }\n \n               ast::expr_vstore(e, vstore) => {\n@@ -116,7 +116,7 @@ pub fn classify(e: &expr,\n               }\n \n               ast::expr_struct(_, ref fs, None) => {\n-                let cs = do fs.iter().transform |f| {\n+                let cs = do fs.iter().map |f| {\n                     classify(f.expr, tcx)\n                 };\n                 join_all(cs)"}, {"sha": "a00cfa2912380a771e7b14066cc47e65e7ee5009", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -508,7 +508,7 @@ pub fn trans_const(ccx: &mut CrateContext, r: &Repr, discr: uint,\n         }\n         General(ref cases) => {\n             let case = &cases[discr];\n-            let max_sz = cases.iter().transform(|x| x.size).max().unwrap();\n+            let max_sz = cases.iter().map(|x| x.size).max().unwrap();\n             let discr_ty = C_uint(ccx, discr);\n             let contents = build_const_struct(ccx, case,\n                                               ~[discr_ty] + vals);\n@@ -519,7 +519,7 @@ pub fn trans_const(ccx: &mut CrateContext, r: &Repr, discr: uint,\n                 C_struct(build_const_struct(ccx, nonnull, vals))\n             } else {\n                 assert_eq!(vals.len(), 0);\n-                let vals = do nonnull.fields.iter().enumerate().transform |(i, &ty)| {\n+                let vals = do nonnull.fields.iter().enumerate().map |(i, &ty)| {\n                     let llty = type_of::sizing_type_of(ccx, ty);\n                     if i == ptrfield { C_null(llty) } else { C_undef(llty) }\n                 }.collect::<~[ValueRef]>();"}, {"sha": "8f48c00b8d6b4795e4e83efd4612f0c7afd22627", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -521,7 +521,7 @@ impl Builder {\n             }\n             self.inbounds_gep(base, small_vec.slice(0, ixs.len()))\n         } else {\n-            let v = do ixs.iter().transform |i| { C_i32(*i as i32) }.collect::<~[ValueRef]>();\n+            let v = do ixs.iter().map |i| { C_i32(*i as i32) }.collect::<~[ValueRef]>();\n             self.count_insn(\"gepi\");\n             self.inbounds_gep(base, v)\n         }"}, {"sha": "6a1905c451f97e4d99f397cc3498e841d754244e", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -37,7 +37,7 @@ pub struct FnType {\n \n impl FnType {\n     pub fn decl_fn(&self, decl: &fn(fnty: Type) -> ValueRef) -> ValueRef {\n-        let atys = self.arg_tys.iter().transform(|t| t.ty).collect::<~[Type]>();\n+        let atys = self.arg_tys.iter().map(|t| t.ty).collect::<~[Type]>();\n         let rty = self.ret_ty.ty;\n         let fnty = Type::func(atys, &rty);\n         let llfn = decl(fnty);"}, {"sha": "40a83eb9770787e8338e7471d31f4f4ee80f0c4d", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -316,7 +316,7 @@ pub struct cleanup_path {\n pub fn shrink_scope_clean(scope_info: &mut ScopeInfo, size: uint) {\n     scope_info.landing_pad = None;\n     scope_info.cleanup_paths = scope_info.cleanup_paths.iter()\n-            .take_while(|&cu| cu.size <= size).transform(|&x|x).collect();\n+            .take_while(|&cu| cu.size <= size).map(|&x|x).collect();\n }\n \n pub fn grow_scope_clean(scope_info: &mut ScopeInfo) {\n@@ -1000,7 +1000,7 @@ pub fn node_id_type_params(bcx: @mut Block, id: ast::NodeId) -> ~[ty::t] {\n \n     match bcx.fcx.param_substs {\n       Some(substs) => {\n-        do params.iter().transform |t| {\n+        do params.iter().map |t| {\n             ty::subst_tps(tcx, substs.tys, substs.self_ty, *t)\n         }.collect()\n       }\n@@ -1025,7 +1025,7 @@ pub fn resolve_vtables_under_param_substs(tcx: ty::ctxt,\n                                           param_substs: Option<@param_substs>,\n                                           vts: typeck::vtable_res)\n     -> typeck::vtable_res {\n-    @vts.iter().transform(|ds|\n+    @vts.iter().map(|ds|\n       resolve_param_vtables_under_param_substs(tcx,\n                                                param_substs,\n                                                *ds))\n@@ -1037,7 +1037,7 @@ pub fn resolve_param_vtables_under_param_substs(\n     param_substs: Option<@param_substs>,\n     ds: typeck::vtable_param_res)\n     -> typeck::vtable_param_res {\n-    @ds.iter().transform(\n+    @ds.iter().map(\n         |d| resolve_vtable_under_param_substs(tcx,\n                                               param_substs,\n                                               d))\n@@ -1063,7 +1063,7 @@ pub fn resolve_vtable_under_param_substs(tcx: ty::ctxt,\n         typeck::vtable_static(trait_id, ref tys, sub) => {\n             let tys = match param_substs {\n                 Some(substs) => {\n-                    do tys.iter().transform |t| {\n+                    do tys.iter().map |t| {\n                         ty::subst_tps(tcx, substs.tys, substs.self_ty, *t)\n                     }.collect()\n                 }"}, {"sha": "bdac0925273bf9e5c9ae6777005e0437fc4797ff", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -499,7 +499,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::expr) -> ValueRef {\n               do expr::with_field_tys(tcx, ety, Some(e.id))\n                   |discr, field_tys| {\n                   let cs: ~[ValueRef] = field_tys.iter().enumerate()\n-                      .transform(|(ix, &field_ty)| {\n+                      .map(|(ix, &field_ty)| {\n                       match fs.iter().find_(|f| field_ty.ident == f.ident) {\n                           Some(f) => const_expr(cx, (*f).expr),\n                           None => {"}, {"sha": "1fb64d9c67130066722789673447d9139fd1b3ca", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -662,7 +662,7 @@ fn enum_metadata(cx: &mut CrateContext,\n \n     let enumerators_metadata: ~[DIDescriptor] = variants\n         .iter()\n-        .transform(|v| {\n+        .map(|v| {\n             let name: &str = cx.sess.str_of(v.name);\n             let discriminant_value = v.disr_val as c_ulonglong;\n \n@@ -709,7 +709,7 @@ fn enum_metadata(cx: &mut CrateContext,\n             let variants_member_metadata: ~[DIDescriptor] = do struct_defs\n                 .iter()\n                 .enumerate()\n-                .transform |(i, struct_def)| {\n+                .map |(i, struct_def)| {\n                     let variant_type_metadata = adt_struct_metadata(\n                         cx,\n                         struct_def,\n@@ -766,7 +766,7 @@ fn enum_metadata(cx: &mut CrateContext,\n     {\n         let arg_llvm_types: ~[Type] = do struct_def.fields.map |&ty| { type_of::type_of(cx, ty) };\n         let arg_metadata: ~[DIType] = do struct_def.fields.iter().enumerate()\n-            .transform |(i, &ty)| {\n+            .map |(i, &ty)| {\n                 match discriminant_type_metadata {\n                     Some(metadata) if i == 0 => metadata,\n                     _                        => type_metadata(cx, ty, span)\n@@ -816,7 +816,7 @@ fn composite_type_metadata(cx: &mut CrateContext,\n     let member_metadata: ~[DIDescriptor] = member_llvm_types\n         .iter()\n         .enumerate()\n-        .transform(|(i, &member_llvm_type)| {\n+        .map(|(i, &member_llvm_type)| {\n             let (member_size, member_align) = size_and_align_of(cx, member_llvm_type);\n             let member_offset = machine::llelement_offset(cx, composite_llvm_type, i);\n             let member_name: &str = member_names[i];"}, {"sha": "5931b54342f33e4d50e4c82ef7b13c122f546ff8", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -582,7 +582,7 @@ fn trans_rvalue_dps_unadjusted(bcx: @mut Block, expr: @ast::expr,\n         ast::expr_tup(ref args) => {\n             let repr = adt::represent_type(bcx.ccx(), expr_ty(bcx, expr));\n             let numbered_fields: ~[(uint, @ast::expr)] =\n-                args.iter().enumerate().transform(|(i, arg)| (i, *arg)).collect();\n+                args.iter().enumerate().map(|(i, arg)| (i, *arg)).collect();\n             return trans_adt(bcx, repr, 0, numbered_fields, None, dest);\n         }\n         ast::expr_lit(@codemap::spanned {node: ast::lit_str(s), _}) => {"}, {"sha": "14a69f10c4012067dedbe4727941d9aab24ba41d", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -372,12 +372,12 @@ pub fn make_mono_id(ccx: @mut CrateContext,\n         debug!(\"make_mono_id vtables=%s substs=%s\",\n                vts.repr(ccx.tcx), substs.tys.repr(ccx.tcx));\n         let vts_iter = substs.self_vtables.iter().chain_(vts.iter());\n-        vts_iter.zip(substs_iter).transform(|(vtable, subst)| {\n+        vts_iter.zip(substs_iter).map(|(vtable, subst)| {\n             let v = vtable.map(|vt| meth::vtable_id(ccx, vt));\n             (*subst, if !v.is_empty() { Some(@v) } else { None })\n         }).collect()\n       }\n-      None => substs_iter.transform(|subst| (*subst, None::<@~[mono_id]>)).collect()\n+      None => substs_iter.map(|subst| (*subst, None::<@~[mono_id]>)).collect()\n     };\n \n \n@@ -389,7 +389,7 @@ pub fn make_mono_id(ccx: @mut CrateContext,\n             substs.self_ty.map(|_| type_use::use_repr|type_use::use_tydesc);\n         let uses_iter = self_use.iter().chain_(uses.iter());\n \n-        precise_param_ids.iter().zip(uses_iter).transform(|(id, uses)| {\n+        precise_param_ids.iter().zip(uses_iter).map(|(id, uses)| {\n             if ccx.sess.no_monomorphic_collapse() {\n                 match *id {\n                     (a, b) => mono_precise(a, b)\n@@ -429,7 +429,7 @@ pub fn make_mono_id(ccx: @mut CrateContext,\n         }).collect()\n       }\n       None => {\n-          precise_param_ids.iter().transform(|x| {\n+          precise_param_ids.iter().map(|x| {\n               let (a, b) = *x;\n               mono_precise(a, b)\n           }).collect()"}, {"sha": "4a576ff3bb0003e81e6d92a58f6db15b81f0594c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -3791,9 +3791,9 @@ pub fn substd_enum_variants(cx: ctxt,\n                             id: ast::def_id,\n                             substs: &substs)\n                          -> ~[@VariantInfo] {\n-    do enum_variants(cx, id).iter().transform |variant_info| {\n+    do enum_variants(cx, id).iter().map |variant_info| {\n         let substd_args = variant_info.args.iter()\n-            .transform(|aty| subst(cx, substs, *aty)).collect();\n+            .map(|aty| subst(cx, substs, *aty)).collect();\n \n         let substd_ctor_ty = subst(cx, substs, variant_info.ctor_ty);\n \n@@ -3935,7 +3935,7 @@ pub fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[@VariantInfo] {\n                     _\n                 }, _) => {\n             let mut last_discriminant: Option<uint> = None;\n-            @enum_definition.variants.iter().transform(|variant| {\n+            @enum_definition.variants.iter().map(|variant| {\n \n                 let mut discriminant = match last_discriminant {\n                     Some(val) => val + 1,"}, {"sha": "c666e98c9c15f5fab9ef218346b2bf538475af67", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -724,7 +724,7 @@ pub fn ty_of_closure<AC:AstConv,RS:region_scope + Clone + 'static>(\n         in_binding_rscope(rscope,\n                           RegionParamNames(bound_lifetime_names.clone()));\n \n-    let input_tys = do decl.inputs.iter().enumerate().transform |(i, a)| {\n+    let input_tys = do decl.inputs.iter().enumerate().map |(i, a)| {\n         let expected_arg_ty = do expected_sig.chain_ref |e| {\n             // no guarantee that the correct number of expected args\n             // were supplied"}, {"sha": "84e5d8f9bf7430f3a27602f3a147db732f5e34db", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -759,7 +759,7 @@ impl<'self> LookupContext<'self> {\n                                -> Option<method_map_entry> {\n         // XXX(pcwalton): Do we need to clone here?\n         let relevant_candidates: ~[Candidate] =\n-            candidates.iter().transform(|c| (*c).clone()).\n+            candidates.iter().map(|c| (*c).clone()).\n                 filter(|c| self.is_relevant(rcvr_ty, c)).collect();\n \n         let relevant_candidates = self.merge_candidates(relevant_candidates);"}, {"sha": "f31251bda9951a6549b0a9da291a224c8680719f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -1818,7 +1818,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             _ => ()\n         }\n \n-        let tps : ~[ty::t] = tys.iter().transform(|ty| fcx.to_ty(ty)).collect();\n+        let tps : ~[ty::t] = tys.iter().map(|ty| fcx.to_ty(ty)).collect();\n         match method::lookup(fcx,\n                              expr,\n                              base,\n@@ -2644,7 +2644,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let mut bot_field = false;\n         let mut err_field = false;\n \n-        let elt_ts = do elts.iter().enumerate().transform |(i, e)| {\n+        let elt_ts = do elts.iter().enumerate().map |(i, e)| {\n             let opt_hint = match flds {\n                 Some(ref fs) if i < fs.len() => Some(fs[i]),\n                 _ => None"}, {"sha": "37f4a6ba49737720cb64c19a1a5313d9818b9bf6", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -100,7 +100,7 @@ fn lookup_vtables(vcx: &VtableContext,\n     let mut result =\n         substs.tps.rev_iter()\n         .zip(type_param_defs.rev_iter())\n-        .transform(|(ty, def)|\n+        .map(|(ty, def)|\n                    lookup_vtables_for_param(vcx, location_info, Some(substs),\n                                             &*def.bounds, *ty, is_early))\n         .to_owned_vec();"}, {"sha": "b93f979894db707f1a38a64b721e53050426985f", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -182,7 +182,7 @@ impl CoherenceChecker {\n                     item_impl(_, ref opt_trait, _, _) => {\n                         let opt_trait : ~[trait_ref] =\n                             opt_trait.iter()\n-                                     .transform(|x| (*x).clone())\n+                                     .map(|x| (*x).clone())\n                                      .collect();\n                         self.check_implementation(item, opt_trait);\n                     }"}, {"sha": "94cf5b431bafa8320478f0693a19bb9be44090ee", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -731,7 +731,7 @@ pub fn convert_methods(ccx: &CrateCtxt,\n                     -> ~[ConvertedMethod]\n {\n     let tcx = ccx.tcx;\n-    return ms.iter().transform(|m| {\n+    return ms.iter().map(|m| {\n         let num_rcvr_ty_params = rcvr_ty_generics.type_param_defs.len();\n         let m_ty_generics =\n             ty_generics(ccx, rcvr_ty_generics.region_param, &m.generics,"}, {"sha": "4cb6d7de0d3ddfdc3973bdcb395031edbade2684", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -157,7 +157,7 @@ Available lint options:\n \n     let lint_dict = lint::get_lint_dict();\n     let mut lint_dict = lint_dict.move_iter()\n-                                 .transform(|(k, v)| (v, k))\n+                                 .map(|(k, v)| (v, k))\n                                  .collect::<~[(lint::LintSpec, &'static str)]>();\n     lint_dict.qsort();\n "}, {"sha": "ce8d1977443f81f6ab73189748c7829643589cde", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -27,7 +27,7 @@ pub struct CrateAttrs {\n fn doc_metas(attrs: ~[ast::Attribute]) -> ~[@ast::MetaItem] {\n     attrs.iter()\n         .filter(|at| \"doc\" == at.name())\n-        .transform(|at| at.desugar_doc().meta())\n+        .map(|at| at.desugar_doc().meta())\n         .collect()\n }\n "}, {"sha": "d68f1f112e008ed23ca7f9be5f142ef1ddd0fabe", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -123,7 +123,7 @@ fn fold_enum(\n     let doc = fold::default_seq_fold_enum(fold, doc);\n \n     doc::EnumDoc {\n-        variants: do doc.variants.iter().transform |variant| {\n+        variants: do doc.variants.iter().map |variant| {\n             let variant = (*variant).clone();\n             let desc = {\n                 let variant = variant.clone();\n@@ -182,7 +182,7 @@ fn merge_method_attrs(\n             ast_map::node_item(@ast::item {\n                 node: ast::item_trait(_, _, ref methods), _\n             }, _) => {\n-                methods.iter().transform(|method| {\n+                methods.iter().map(|method| {\n                     match (*method).clone() {\n                         ast::required(ty_m) => {\n                             (to_str(ty_m.ident),\n@@ -197,7 +197,7 @@ fn merge_method_attrs(\n             ast_map::node_item(@ast::item {\n                 node: ast::item_impl(_, _, _, ref methods), _\n             }, _) => {\n-                methods.iter().transform(|method| {\n+                methods.iter().map(|method| {\n                     (to_str(method.ident),\n                      attr_parser::parse_desc(method.attrs.clone()))\n                 }).collect()\n@@ -206,7 +206,7 @@ fn merge_method_attrs(\n         }\n     };\n \n-    do docs.iter().zip(attrs.iter()).transform |(doc, attrs)| {\n+    do docs.iter().zip(attrs.iter()).map |(doc, attrs)| {\n         assert!(doc.name == attrs.first());\n         let desc = attrs.second();\n "}, {"sha": "55552924d4461575ba32aaca38b54f32af6527db", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -185,7 +185,7 @@ fn enumdoc_from_enum(\n fn variantdocs_from_variants(\n     variants: ~[ast::variant]\n ) -> ~[doc::VariantDoc] {\n-    variants.iter().transform(variantdoc_from_variant).collect()\n+    variants.iter().map(variantdoc_from_variant).collect()\n }\n \n fn variantdoc_from_variant(variant: &ast::variant) -> doc::VariantDoc {\n@@ -202,7 +202,7 @@ fn traitdoc_from_trait(\n ) -> doc::TraitDoc {\n     doc::TraitDoc {\n         item: itemdoc,\n-        methods: do methods.iter().transform |method| {\n+        methods: do methods.iter().map |method| {\n             match (*method).clone() {\n               ast::required(ty_m) => {\n                 doc::MethodDoc {\n@@ -238,7 +238,7 @@ fn impldoc_from_impl(\n         bounds_str: None,\n         trait_types: ~[],\n         self_ty: None,\n-        methods: do methods.iter().transform |method| {\n+        methods: do methods.iter().map |method| {\n             doc::MethodDoc {\n                 name: to_str(method.ident),\n                 brief: None,"}, {"sha": "3e74916228f00f046c034e73b94dbeabbea741cb", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -153,7 +153,7 @@ pub fn default_par_fold<T:Clone>(ctxt: T) -> Fold<T> {\n \n pub fn default_seq_fold_doc<T>(fold: &Fold<T>, doc: doc::Doc) -> doc::Doc {\n     doc::Doc {\n-        pages: do doc.pages.iter().transform |page| {\n+        pages: do doc.pages.iter().map |page| {\n             match (*page).clone() {\n               doc::CratePage(doc) => {\n                 doc::CratePage((fold.fold_crate)(fold, doc))\n@@ -189,7 +189,7 @@ pub fn default_any_fold_mod<T:Clone>(\n ) -> doc::ModDoc {\n     doc::ModDoc {\n         item: (fold.fold_item)(fold, doc.item.clone()),\n-        items: doc.items.iter().transform(|ItemTag| {\n+        items: doc.items.iter().map(|ItemTag| {\n             fold_ItemTag(fold, (*ItemTag).clone())\n         }).collect(),\n         .. doc\n@@ -202,7 +202,7 @@ pub fn default_seq_fold_mod<T>(\n ) -> doc::ModDoc {\n     doc::ModDoc {\n         item: (fold.fold_item)(fold, doc.item.clone()),\n-        items: doc.items.iter().transform(|ItemTag| {\n+        items: doc.items.iter().map(|ItemTag| {\n             fold_ItemTag(fold, (*ItemTag).clone())\n         }).collect(),\n         .. doc\n@@ -215,7 +215,7 @@ pub fn default_par_fold_mod<T:Clone>(\n ) -> doc::ModDoc {\n     doc::ModDoc {\n         item: (fold.fold_item)(fold, doc.item.clone()),\n-        items: doc.items.iter().transform(|ItemTag| {\n+        items: doc.items.iter().map(|ItemTag| {\n             fold_ItemTag(fold, (*ItemTag).clone())\n         }).collect(),\n         .. doc\n@@ -228,7 +228,7 @@ pub fn default_any_fold_nmod<T:Clone>(\n ) -> doc::NmodDoc {\n     doc::NmodDoc {\n         item: (fold.fold_item)(fold, doc.item.clone()),\n-        fns: doc.fns.iter().transform(|FnDoc| {\n+        fns: doc.fns.iter().map(|FnDoc| {\n             (fold.fold_fn)(fold, (*FnDoc).clone())\n         }).collect(),\n         .. doc\n@@ -241,7 +241,7 @@ pub fn default_seq_fold_nmod<T>(\n ) -> doc::NmodDoc {\n     doc::NmodDoc {\n         item: (fold.fold_item)(fold, doc.item.clone()),\n-        fns: doc.fns.iter().transform(|FnDoc| {\n+        fns: doc.fns.iter().map(|FnDoc| {\n             (fold.fold_fn)(fold, (*FnDoc).clone())\n         }).collect(),\n         .. doc\n@@ -254,7 +254,7 @@ pub fn default_par_fold_nmod<T:Clone>(\n ) -> doc::NmodDoc {\n     doc::NmodDoc {\n         item: (fold.fold_item)(fold, doc.item.clone()),\n-        fns: doc.fns.iter().transform(|FnDoc| {\n+        fns: doc.fns.iter().map(|FnDoc| {\n             (fold.fold_fn)(fold, (*FnDoc).clone())\n         }).collect(),\n         .. doc"}, {"sha": "342c949e3fc60957ba507c0d7105ae7394117efc", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -123,7 +123,7 @@ fn strip_mod(doc: doc::ModDoc) -> doc::ModDoc {\n               doc::ModTag(_) | doc::NmodTag(_) => false,\n               _ => true\n             }\n-        }.transform(|x| (*x).clone()).collect::<~[doc::ItemTag]>(),\n+        }.map(|x| (*x).clone()).collect::<~[doc::ItemTag]>(),\n         .. doc.clone()\n     }\n }"}, {"sha": "9dc2f43f7ac92451e98811920fa1141603204f87", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -43,7 +43,7 @@ fn fold_mod(\n     doc::ModDoc {\n         items: do doc.items.iter().filter |item_tag| {\n             !is_hidden(fold.ctxt.clone(), item_tag.item())\n-        }.transform(|x| (*x).clone()).collect(),\n+        }.map(|x| (*x).clone()).collect(),\n         .. doc\n     }\n }"}, {"sha": "0ee0889cb9feec695c4b704119e4660aea39001c", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -91,7 +91,7 @@ fn strip_priv_methods(\n             ast::private => false,\n             ast::inherited => item_vis == ast::public\n         }\n-    }.transform(|x| (*x).clone()).collect();\n+    }.map(|x| (*x).clone()).collect();\n \n     doc::ImplDoc {\n         methods: methods,\n@@ -126,7 +126,7 @@ fn fold_mod(\n                     is_visible(fold.ctxt.clone(), item_tag.item())\n                 }\n             }\n-        }).transform(|x| (*x).clone()).collect(),\n+        }).map(|x| (*x).clone()).collect(),\n         .. doc\n     }\n }"}, {"sha": "e9c6dcd08623c7bf998f7f936aae6809db7af487", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -124,7 +124,7 @@ fn fold_enum(\n     let srv = fold.ctxt.clone();\n \n     doc::EnumDoc {\n-        variants: do doc.variants.iter().transform |variant| {\n+        variants: do doc.variants.iter().map |variant| {\n             let sig = {\n                 let variant = (*variant).clone();\n                 do astsrv::exec(srv.clone()) |ctxt| {\n@@ -169,7 +169,7 @@ fn merge_methods(\n     item_id: doc::AstId,\n     docs: ~[doc::MethodDoc]\n ) -> ~[doc::MethodDoc] {\n-    do docs.iter().transform |doc| {\n+    do docs.iter().map |doc| {\n         doc::MethodDoc {\n             sig: get_method_sig(srv.clone(), item_id, doc.name.clone()),\n             .. (*doc).clone()"}, {"sha": "0f8644ad837e4996330724df929b9486c276edff", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -453,7 +453,7 @@ pub fn run_line(repl: &mut Repl, input: @io::Reader, out: @io::Writer, line: ~st\n     if line.starts_with(\":\") {\n         // drop the : and the \\n (one byte each)\n         let full = line.slice(1, line.len());\n-        let split: ~[~str] = full.word_iter().transform(|s| s.to_owned()).collect();\n+        let split: ~[~str] = full.word_iter().map(|s| s.to_owned()).collect();\n         let len = split.len();\n \n         if len > 0 {"}, {"sha": "3ae2ad3751ffb0ddda5b09c0e128d7c74e3d3744", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -158,7 +158,7 @@ impl<'self> PkgScript<'self> {\n             let output = run::process_output(exe.to_str(), [root.to_str(), ~\"configs\"]);\n             // Run the configs() function to get the configs\n             let cfgs = str::from_bytes_slice(output.output).word_iter()\n-                .transform(|w| w.to_owned()).collect();\n+                .map(|w| w.to_owned()).collect();\n             (cfgs, output.status)\n         }\n     }"}, {"sha": "5fe47dc6603b5c2702dfcb2eb6dcd8f5ef3d183e", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -977,7 +977,7 @@ mod test_map {\n     fn test_from_iter() {\n         let xs = ~[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n \n-        let map: HashMap<int, int> = xs.iter().transform(|&x| x).collect();\n+        let map: HashMap<int, int> = xs.iter().map(|&x| x).collect();\n \n         for &(k, v) in xs.iter() {\n             assert_eq!(map.find(&k), Some(&v));\n@@ -1169,7 +1169,7 @@ mod test_set {\n     fn test_from_iter() {\n         let xs = ~[1, 2, 3, 4, 5, 6, 7, 8, 9];\n \n-        let set: HashSet<int> = xs.iter().transform(|&x| x).collect();\n+        let set: HashSet<int> = xs.iter().map(|&x| x).collect();\n \n         for x in xs.iter() {\n             assert!(set.contains(x));"}, {"sha": "8718bee283e6afe2245279ac8a82a3b855323c90", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -88,21 +88,20 @@ pub trait Iterator<A> {\n         Zip{a: self, b: other}\n     }\n \n-    // FIXME: #5898: should be called map\n     /// Creates a new iterator which will apply the specified function to each\n     /// element returned by the first, yielding the mapped element instead.\n     ///\n     /// # Example\n     ///\n     /// ~~~ {.rust}\n     /// let a = [1, 2];\n-    /// let mut it = a.iter().transform(|&x| 2 * x);\n+    /// let mut it = a.iter().map(|&x| 2 * x);\n     /// assert_eq!(it.next().get(), 2);\n     /// assert_eq!(it.next().get(), 4);\n     /// assert!(it.next().is_none());\n     /// ~~~\n     #[inline]\n-    fn transform<'r, B>(self, f: &'r fn(A) -> B) -> Map<'r, A, B, Self> {\n+    fn map<'r, B>(self, f: &'r fn(A) -> B) -> Map<'r, A, B, Self> {\n         Map{iter: self, f: f}\n     }\n \n@@ -288,7 +287,7 @@ pub trait Iterator<A> {\n     /// ~~~ {.rust}\n     ///let xs = [1u, 4, 2, 3, 8, 9, 6];\n     ///let sum = xs.iter()\n-    ///            .transform(|&x| x)\n+    ///            .map(|&x| x)\n     ///            .peek_(|&x| debug!(\"filtering %u\", x))\n     ///            .filter(|&x| x % 2 == 0)\n     ///            .peek_(|&x| debug!(\"%u made it through\", x))\n@@ -331,7 +330,7 @@ pub trait Iterator<A> {\n     ///\n     /// ~~~ {.rust}\n     /// let a = [1, 2, 3, 4, 5];\n-    /// let b: ~[int] = a.iter().transform(|&x| x).collect();\n+    /// let b: ~[int] = a.iter().map(|&x| x).collect();\n     /// assert!(a == b);\n     /// ~~~\n     #[inline]\n@@ -346,7 +345,7 @@ pub trait Iterator<A> {\n     ///\n     /// ~~~ {.rust}\n     /// let a = [1, 2, 3, 4, 5];\n-    /// let b: ~[int] = a.iter().transform(|&x| x).to_owned_vec();\n+    /// let b: ~[int] = a.iter().map(|&x| x).to_owned_vec();\n     /// assert!(a == b);\n     /// ~~~\n     #[inline]\n@@ -612,7 +611,7 @@ pub trait AdditiveIterator<A> {\n     ///\n     /// ~~~ {.rust}\n     /// let a = [1, 2, 3, 4, 5];\n-    /// let mut it = a.iter().transform(|&x| x);\n+    /// let mut it = a.iter().map(|&x| x);\n     /// assert!(it.sum() == 15);\n     /// ~~~\n     fn sum(&mut self) -> A;\n@@ -1547,7 +1546,7 @@ mod tests {\n         assert_eq!(i, expected.len());\n \n         let ys = count(30u, 10).take_(4);\n-        let mut it = xs.iter().transform(|&x| x).chain_(ys);\n+        let mut it = xs.iter().map(|&x| x).chain_(ys);\n         let mut i = 0;\n         for x in it {\n             assert_eq!(x, expected[i]);\n@@ -1662,7 +1661,7 @@ mod tests {\n         let mut n = 0;\n \n         let ys = xs.iter()\n-                   .transform(|&x| x)\n+                   .map(|&x| x)\n                    .peek_(|_| n += 1)\n                    .collect::<~[uint]>();\n \n@@ -1731,33 +1730,33 @@ mod tests {\n     #[test]\n     fn test_iterator_sum() {\n         let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).sum(), 6);\n-        assert_eq!(v.iter().transform(|&x| x).sum(), 55);\n-        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).sum(), 0);\n+        assert_eq!(v.slice(0, 4).iter().map(|&x| x).sum(), 6);\n+        assert_eq!(v.iter().map(|&x| x).sum(), 55);\n+        assert_eq!(v.slice(0, 0).iter().map(|&x| x).sum(), 0);\n     }\n \n     #[test]\n     fn test_iterator_product() {\n         let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).product(), 0);\n-        assert_eq!(v.slice(1, 5).iter().transform(|&x| x).product(), 24);\n-        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).product(), 1);\n+        assert_eq!(v.slice(0, 4).iter().map(|&x| x).product(), 0);\n+        assert_eq!(v.slice(1, 5).iter().map(|&x| x).product(), 24);\n+        assert_eq!(v.slice(0, 0).iter().map(|&x| x).product(), 1);\n     }\n \n     #[test]\n     fn test_iterator_max() {\n         let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).max(), Some(3));\n-        assert_eq!(v.iter().transform(|&x| x).max(), Some(10));\n-        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).max(), None);\n+        assert_eq!(v.slice(0, 4).iter().map(|&x| x).max(), Some(3));\n+        assert_eq!(v.iter().map(|&x| x).max(), Some(10));\n+        assert_eq!(v.slice(0, 0).iter().map(|&x| x).max(), None);\n     }\n \n     #[test]\n     fn test_iterator_min() {\n         let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).min(), Some(0));\n-        assert_eq!(v.iter().transform(|&x| x).min(), Some(0));\n-        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).min(), None);\n+        assert_eq!(v.slice(0, 4).iter().map(|&x| x).min(), Some(0));\n+        assert_eq!(v.iter().map(|&x| x).min(), Some(0));\n+        assert_eq!(v.slice(0, 0).iter().map(|&x| x).min(), None);\n     }\n \n     #[test]\n@@ -1775,11 +1774,11 @@ mod tests {\n         assert_eq!(c.take_while(|_| false).size_hint(), (0, None));\n         assert_eq!(c.skip_while(|_| false).size_hint(), (0, None));\n         assert_eq!(c.enumerate().size_hint(), (uint::max_value, None));\n-        assert_eq!(c.chain_(vi.transform(|&i| i)).size_hint(), (uint::max_value, None));\n+        assert_eq!(c.chain_(vi.map(|&i| i)).size_hint(), (uint::max_value, None));\n         assert_eq!(c.zip(vi).size_hint(), (10, Some(10)));\n         assert_eq!(c.scan(0, |_,_| Some(0)).size_hint(), (0, None));\n         assert_eq!(c.filter(|_| false).size_hint(), (0, None));\n-        assert_eq!(c.transform(|_| 0).size_hint(), (uint::max_value, None));\n+        assert_eq!(c.map(|_| 0).size_hint(), (uint::max_value, None));\n         assert_eq!(c.filter_map(|_| Some(0)).size_hint(), (0, None));\n \n         assert_eq!(vi.take_(5).size_hint(), (5, Some(5)));\n@@ -1793,14 +1792,14 @@ mod tests {\n         assert_eq!(vi.zip(v2.iter()).size_hint(), (3, Some(3)));\n         assert_eq!(vi.scan(0, |_,_| Some(0)).size_hint(), (0, Some(10)));\n         assert_eq!(vi.filter(|_| false).size_hint(), (0, Some(10)));\n-        assert_eq!(vi.transform(|i| i+1).size_hint(), (10, Some(10)));\n+        assert_eq!(vi.map(|i| i+1).size_hint(), (10, Some(10)));\n         assert_eq!(vi.filter_map(|_| Some(0)).size_hint(), (0, Some(10)));\n     }\n \n     #[test]\n     fn test_collect() {\n         let a = ~[1, 2, 3, 4, 5];\n-        let b: ~[int] = a.iter().transform(|&x| x).collect();\n+        let b: ~[int] = a.iter().map(|&x| x).collect();\n         assert_eq!(a, b);\n     }\n \n@@ -1864,13 +1863,13 @@ mod tests {\n         let mut it = xs.iter();\n         it.next();\n         it.next();\n-        assert_eq!(it.invert().transform(|&x| x).collect::<~[int]>(), ~[16, 14, 12, 10, 8, 6]);\n+        assert_eq!(it.invert().map(|&x| x).collect::<~[int]>(), ~[16, 14, 12, 10, 8, 6]);\n     }\n \n     #[test]\n     fn test_double_ended_map() {\n         let xs = [1, 2, 3, 4, 5, 6];\n-        let mut it = xs.iter().transform(|&x| x * -1);\n+        let mut it = xs.iter().map(|&x| x * -1);\n         assert_eq!(it.next(), Some(-1));\n         assert_eq!(it.next(), Some(-2));\n         assert_eq!(it.next_back(), Some(-6));\n@@ -2020,7 +2019,7 @@ mod tests {\n     fn test_random_access_peek() {\n         let xs = [1, 2, 3, 4, 5];\n \n-        // test .transform and .peek_ that don't implement Clone\n+        // test .map and .peek_ that don't implement Clone\n         let it = xs.iter().peek_(|_| {});\n         assert_eq!(xs.len(), it.indexable());\n         for (i, elt) in xs.iter().enumerate() {\n@@ -2030,11 +2029,11 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_random_access_transform() {\n+    fn test_random_access_map() {\n         let xs = [1, 2, 3, 4, 5];\n \n-        // test .transform and .peek_ that don't implement Clone\n-        let it = xs.iter().transform(|x| *x);\n+        // test .map and .peek_ that don't implement Clone\n+        let it = xs.iter().map(|x| *x);\n         assert_eq!(xs.len(), it.indexable());\n         for (i, elt) in xs.iter().enumerate() {\n             assert_eq!(Some(*elt), it.idx(i));"}, {"sha": "07b4ea10b6a3712200fe949b5e020bb0902c4574", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -239,7 +239,7 @@ impl BlockedTask {\n         };\n         // Even if the task was unkillable before, we use 'Killable' because\n         // multiple pipes will have handles. It does not really mean killable.\n-        handles.move_iter().transform(|x| Killable(x)).collect()\n+        handles.move_iter().map(|x| Killable(x)).collect()\n     }\n \n     // This assertion has two flavours because the wake involves an atomic op."}, {"sha": "b2c0b5a4fb22fbd29bac2163024598bac9630403", "filename": "src/libstd/str.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -185,7 +185,7 @@ impl<'self, S: Str> StrVector for &'self [S] {\n     pub fn concat(&self) -> ~str {\n         if self.is_empty() { return ~\"\"; }\n \n-        let len = self.iter().transform(|s| s.as_slice().len()).sum();\n+        let len = self.iter().map(|s| s.as_slice().len()).sum();\n \n         let mut s = with_capacity(len);\n \n@@ -210,7 +210,7 @@ impl<'self, S: Str> StrVector for &'self [S] {\n     pub fn concat(&self) -> ~str {\n         if self.is_empty() { return ~\"\"; }\n \n-        let len = self.iter().transform(|s| s.as_slice().len()).sum();\n+        let len = self.iter().map(|s| s.as_slice().len()).sum();\n \n         let mut s = with_capacity(len);\n \n@@ -239,7 +239,7 @@ impl<'self, S: Str> StrVector for &'self [S] {\n \n         // this is wrong without the guarantee that `self` is non-empty\n         let len = sep.len() * (self.len() - 1)\n-            + self.iter().transform(|s| s.as_slice().len()).sum();\n+            + self.iter().map(|s| s.as_slice().len()).sum();\n         let mut s = ~\"\";\n         let mut first = true;\n \n@@ -280,7 +280,7 @@ impl<'self, S: Str> StrVector for &'self [S] {\n \n         // this is wrong without the guarantee that `self` is non-empty\n         let len = sep.len() * (self.len() - 1)\n-            + self.iter().transform(|s| s.as_slice().len()).sum();\n+            + self.iter().map(|s| s.as_slice().len()).sum();\n         let mut s = ~\"\";\n         let mut first = true;\n \n@@ -1445,7 +1445,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// ~~~\n     #[inline]\n     fn iter(&self) -> CharIterator<'self> {\n-        self.char_offset_iter().transform(|(_, c)| c)\n+        self.char_offset_iter().map(|(_, c)| c)\n     }\n \n     /// An iterator over the characters of `self`, in reverse order.\n@@ -1457,7 +1457,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// An iterator over the bytes of `self`\n     #[inline]\n     fn byte_iter(&self) -> ByteIterator<'self> {\n-        self.as_bytes().iter().transform(|&b| b)\n+        self.as_bytes().iter().map(|&b| b)\n     }\n \n     /// An iterator over the bytes of `self`, in reverse order\n@@ -1565,7 +1565,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// An iterator over the lines of a string, separated by either\n     /// `\\n` or (`\\r\\n`).\n     fn any_line_iter(&self) -> AnyLineIterator<'self> {\n-        do self.line_iter().transform |line| {\n+        do self.line_iter().map |line| {\n             let l = line.len();\n             if l > 0 && line[l - 1] == '\\r' as u8 { line.slice(0, l - 1) }\n             else { line }\n@@ -3686,7 +3686,7 @@ mod tests {\n     #[test]\n     fn test_str_container() {\n         fn sum_len<S: Container>(v: &[S]) -> uint {\n-            v.iter().transform(|x| x.len()).sum()\n+            v.iter().map(|x| x.len()).sum()\n         }\n \n         let s = ~\"01234\";"}, {"sha": "0bfee145a3cfca18352f6d10e737bc440c5067d6", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -617,7 +617,7 @@ mod test_map {\n     fn test_from_iter() {\n         let xs = ~[(1u, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n \n-        let map: TrieMap<int> = xs.iter().transform(|&x| x).collect();\n+        let map: TrieMap<int> = xs.iter().map(|&x| x).collect();\n \n         for &(k, v) in xs.iter() {\n             assert_eq!(map.find(&k), Some(&v));\n@@ -680,7 +680,7 @@ mod test_set {\n     fn test_from_iter() {\n         let xs = ~[9u, 8, 7, 6, 5, 4, 3, 2, 1];\n \n-        let set: TrieSet = xs.iter().transform(|&x| x).collect();\n+        let set: TrieSet = xs.iter().map(|&x| x).collect();\n \n         for x in xs.iter() {\n             assert!(set.contains(x));"}, {"sha": "80d1626c084fd0e2763fbce9d85069f16a78ae29", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -102,7 +102,7 @@ impl<'self,\n     fn map<C>(&self, f: &fn(a: &A, b: &B) -> C) -> ~[C] {\n         match *self {\n             (ref a, ref b) => {\n-                a.iter().zip(b.iter()).transform(|(aa, bb)| f(aa, bb)).collect()\n+                a.iter().zip(b.iter()).map(|(aa, bb)| f(aa, bb)).collect()\n             }\n         }\n     }\n@@ -122,7 +122,7 @@ impl<A:Clone, B:Clone> ExtendedTupleOps<A,B> for (~[A], ~[B]) {\n     fn map<C>(&self, f: &fn(a: &A, b: &B) -> C) -> ~[C] {\n         match *self {\n             (ref a, ref b) => {\n-                a.iter().zip(b.iter()).transform(|(aa, bb)| f(aa, bb)).collect()\n+                a.iter().zip(b.iter()).map(|(aa, bb)| f(aa, bb)).collect()\n             }\n         }\n     }"}, {"sha": "c831dd709182824e42f1c13b63f5c82851173606", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -1068,10 +1068,10 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n     }\n \n     /// Deprecated, use iterators where possible\n-    /// (`self.iter().transform(f)`). Apply a function to each element\n+    /// (`self.iter().map(f)`). Apply a function to each element\n     /// of a vector and return the results.\n     fn map<U>(&self, f: &fn(t: &T) -> U) -> ~[U] {\n-        self.iter().transform(f).collect()\n+        self.iter().map(f).collect()\n     }\n \n     /**\n@@ -2148,7 +2148,7 @@ pub mod bytes {\n impl<A:Clone> Clone for ~[A] {\n     #[inline]\n     fn clone(&self) -> ~[A] {\n-        self.iter().transform(|item| item.clone()).collect()\n+        self.iter().map(|item| item.clone()).collect()\n     }\n }\n "}, {"sha": "e0160db81fd978455b5afdde86b1c7cf176b3ede", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -201,15 +201,15 @@ pub fn sort_meta_items(items: &[@MetaItem]) -> ~[@MetaItem] {\n     // This is sort of stupid here, but we need to sort by\n     // human-readable strings.\n     let mut v = items.iter()\n-        .transform(|&mi| (mi.name(), mi))\n+        .map(|&mi| (mi.name(), mi))\n         .collect::<~[(@str, @MetaItem)]>();\n \n     do extra::sort::quick_sort(v) |&(a, _), &(b, _)| {\n         a <= b\n     }\n \n     // There doesn't seem to be a more optimal way to do this\n-    do v.move_iter().transform |(_, m)| {\n+    do v.move_iter().map |(_, m)| {\n         match m.node {\n             MetaList(n, ref mis) => {\n                 @spanned {"}, {"sha": "65032642fda789d4b441697fa4854de1b5e96156", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -702,7 +702,7 @@ impl AstBuilder for @ExtCtxt {\n     }\n \n     fn variant(&self, span: span, name: ident, tys: ~[ast::Ty]) -> ast::variant {\n-        let args = tys.move_iter().transform(|ty| {\n+        let args = tys.move_iter().map(|ty| {\n             ast::variant_arg { ty: ty, id: self.next_id() }\n         }).collect();\n "}, {"sha": "5f9437fd253ef7eedd6a669533c81f32a0ad2bdc", "filename": "src/libsyntax/ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -39,7 +39,7 @@ pub fn expand_cfg(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree]) -> base::MacR\n     // test_cfg searches for meta items looking like `cfg(foo, ...)`\n     let in_cfg = &[cx.meta_list(sp, @\"cfg\", cfgs)];\n \n-    let matches_cfg = attr::test_cfg(cx.cfg(), in_cfg.iter().transform(|&x| x));\n+    let matches_cfg = attr::test_cfg(cx.cfg(), in_cfg.iter().map(|&x| x));\n     let e = cx.expr_bool(sp, matches_cfg);\n     MRExpr(e)\n }"}, {"sha": "1abfe246f9da8b769163dff553e223b82ae842c5", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -90,7 +90,7 @@ fn decodable_substructure(cx: @ExtCtxt, span: span,\n                     }\n                 }\n                 Right(ref fields) => {\n-                    let fields = do fields.iter().enumerate().transform |(i, f)| {\n+                    let fields = do fields.iter().enumerate().map |(i, f)| {\n                         cx.field_imm(span, *f, getarg(cx.str_of(*f), i))\n                     }.collect();\n                     cx.expr_struct_ident(span, substr.type_ident, fields)\n@@ -132,7 +132,7 @@ fn decodable_substructure(cx: @ExtCtxt, span: span,\n                         }\n                     }\n                     Right(ref fields) => {\n-                        let fields = do fields.iter().enumerate().transform |(i, f)| {\n+                        let fields = do fields.iter().enumerate().map |(i, f)| {\n                             cx.field_imm(span, *f, getarg(i))\n                         }.collect();\n                         cx.expr_struct_ident(span, name, fields)"}, {"sha": "a1abe47e0909d39b98d2786e4932daa0d1fdfdee", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -590,7 +590,7 @@ impl<'self> MethodDef<'self> {\n         // transpose raw_fields\n         let fields = match raw_fields {\n             [ref self_arg, .. rest] => {\n-                do self_arg.iter().enumerate().transform |(i, &(opt_id, field))| {\n+                do self_arg.iter().enumerate().map |(i, &(opt_id, field))| {\n                     let other_fields = do rest.map |l| {\n                         match &l[i] {\n                             &(_, ex) => ex\n@@ -750,7 +750,7 @@ impl<'self> MethodDef<'self> {\n                     let field_tuples =\n                         do self_vec.iter()\n                            .zip(enum_matching_fields.iter())\n-                           .transform |(&(id, self_f), other)| {\n+                           .map |(&(id, self_f), other)| {\n                         (id, self_f, (*other).clone())\n                     }.collect();\n                     substructure = EnumMatching(variant_index, variant, field_tuples);"}, {"sha": "e55a96f77ff9b57e811000a58265e54a42928bc2", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -95,7 +95,7 @@ fn rand_substructure(cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr {\n             let rand_variant = cx.expr_binary(span, ast::rem,\n                                               rv_call, variant_count);\n \n-            let mut arms = do variants.iter().enumerate().transform |(i, id_sum)| {\n+            let mut arms = do variants.iter().enumerate().map |(i, id_sum)| {\n                 let i_expr = cx.expr_uint(span, i);\n                 let pat = cx.pat_lit(span, i_expr);\n "}, {"sha": "a44201544d58ad02130f1e684af82483e7a03d5b", "filename": "src/libsyntax/ext/ifmt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fifmt.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -353,9 +353,9 @@ impl Context {\n         let trans_method = |method: &parse::Method| {\n             let method = match *method {\n                 parse::Select(ref arms, ref default) => {\n-                    let arms = arms.iter().transform(|arm| {\n+                    let arms = arms.iter().map(|arm| {\n                         let p = self.ecx.path_global(sp, rtpath(\"SelectArm\"));\n-                        let result = arm.result.iter().transform(|p| {\n+                        let result = arm.result.iter().map(|p| {\n                             self.trans_piece(p)\n                         }).collect();\n                         let s = arm.selector.to_managed();\n@@ -368,7 +368,7 @@ impl Context {\n                                                self.ecx.expr_vec_slice(sp, result)),\n                         ])\n                     }).collect();\n-                    let default = default.iter().transform(|p| {\n+                    let default = default.iter().map(|p| {\n                         self.trans_piece(p)\n                     }).collect();\n                     self.ecx.expr_call_global(sp, rtpath(\"Select\"), ~[\n@@ -381,9 +381,9 @@ impl Context {\n                         Some(i) => { some(self.ecx.expr_uint(sp, i)) }\n                         None => { none() }\n                     };\n-                    let arms = arms.iter().transform(|arm| {\n+                    let arms = arms.iter().map(|arm| {\n                         let p = self.ecx.path_global(sp, rtpath(\"PluralArm\"));\n-                        let result = arm.result.iter().transform(|p| {\n+                        let result = arm.result.iter().map(|p| {\n                             self.trans_piece(p)\n                         }).collect();\n                         let (lr, selarg) = match arm.selector {\n@@ -408,7 +408,7 @@ impl Context {\n                                                self.ecx.expr_vec_slice(sp, result)),\n                         ])\n                     }).collect();\n-                    let default = default.iter().transform(|p| {\n+                    let default = default.iter().map(|p| {\n                         self.trans_piece(p)\n                     }).collect();\n                     self.ecx.expr_call_global(sp, rtpath(\"Plural\"), ~[\n@@ -575,7 +575,7 @@ impl Context {\n                 Some(self.format_arg(e.span, Right(name), lname));\n         }\n \n-        let args = names.move_iter().transform(|a| a.unwrap());\n+        let args = names.move_iter().map(|a| a.unwrap());\n         let mut args = locals.move_iter().chain_(args);\n \n         // Next, build up the actual call to the sprintf function."}, {"sha": "031f0fb4199aeade83ea8fe26cc0bfcd1add0a96", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -105,7 +105,7 @@ pub fn expand_include_bin(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n     let file = get_single_str_from_tts(cx, sp, tts, \"include_bin!\");\n     match io::read_whole_file(&res_rel_file(cx, sp, &Path(file))) {\n       result::Ok(src) => {\n-        let u8_exprs: ~[@ast::expr] = src.iter().transform(|char| cx.expr_u8(sp, *char)).collect();\n+        let u8_exprs: ~[@ast::expr] = src.iter().map(|char| cx.expr_u8(sp, *char)).collect();\n         base::MRExpr(cx.expr_vec(sp, u8_exprs))\n       }\n       result::Err(ref e) => {"}, {"sha": "65694f013f7517ed8bc8fc2e6647b25568917bd2", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -704,7 +704,7 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n // ...nor do modules\n pub fn noop_fold_mod(m: &_mod, fld: @ast_fold) -> _mod {\n     ast::_mod {\n-        view_items: m.view_items.iter().transform(|x| fld.fold_view_item(x)).collect(),\n+        view_items: m.view_items.iter().map(|x| fld.fold_view_item(x)).collect(),\n         items: m.items.iter().filter_map(|x| fld.fold_item(*x)).collect(),\n     }\n }\n@@ -713,8 +713,8 @@ fn noop_fold_foreign_mod(nm: &foreign_mod, fld: @ast_fold) -> foreign_mod {\n     ast::foreign_mod {\n         sort: nm.sort,\n         abis: nm.abis,\n-        view_items: nm.view_items.iter().transform(|x| fld.fold_view_item(x)).collect(),\n-        items: nm.items.iter().transform(|x| fld.fold_foreign_item(*x)).collect(),\n+        view_items: nm.view_items.iter().map(|x| fld.fold_view_item(x)).collect(),\n+        items: nm.items.iter().map(|x| fld.fold_foreign_item(*x)).collect(),\n     }\n }\n \n@@ -734,7 +734,7 @@ fn noop_fold_variant(v: &variant_, fld: @ast_fold) -> variant_ {\n         struct_variant_kind(ref struct_def) => {\n             kind = struct_variant_kind(@ast::struct_def {\n                 fields: struct_def.fields.iter()\n-                    .transform(|f| fld.fold_struct_field(*f)).collect(),\n+                    .map(|f| fld.fold_struct_field(*f)).collect(),\n                 ctor_id: struct_def.ctor_id.map(|c| fld.new_id(*c))\n             })\n         }\n@@ -828,7 +828,7 @@ impl ast_fold for AstFoldFns {\n     fn fold_view_item(@self, x: &view_item) -> view_item {\n         ast::view_item {\n             node: (self.fold_view_item)(&x.node, self as @ast_fold),\n-            attrs: x.attrs.iter().transform(|a| fold_attribute_(*a, self as @ast_fold)).collect(),\n+            attrs: x.attrs.iter().map(|a| fold_attribute_(*a, self as @ast_fold)).collect(),\n             vis: x.vis,\n             span: (self.new_span)(x.span),\n         }"}, {"sha": "5d79532c8c5353617cdb42e325075b3859f9c3f9", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -60,7 +60,7 @@ impl<T> OptVec<T> {\n     fn map_move<U>(self, op: &fn(T) -> U) -> OptVec<U> {\n         match self {\n             Empty => Empty,\n-            Vec(v) => Vec(v.move_iter().transform(op).collect())\n+            Vec(v) => Vec(v.move_iter().map(op).collect())\n         }\n     }\n \n@@ -92,7 +92,7 @@ impl<T> OptVec<T> {\n \n     #[inline]\n     fn map_to_vec<B>(&self, op: &fn(&T) -> B) -> ~[B] {\n-        self.iter().transform(op).collect()\n+        self.iter().map(op).collect()\n     }\n \n     fn mapi_to_vec<B>(&self, op: &fn(uint, &T) -> B) -> ~[B] {"}, {"sha": "5b9725ec6a04239ed225ee18cd9ad80ed3d44d77", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -115,7 +115,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n     if comment.starts_with(\"/*\") {\n         let lines = comment.slice(3u, comment.len() - 2u)\n             .any_line_iter()\n-            .transform(|s| s.to_owned())\n+            .map(|s| s.to_owned())\n             .collect::<~[~str]>();\n \n         let lines = vertical_trim(lines);"}, {"sha": "9725297bace53b12371bef8e7c5c9eabe9bf4980", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -96,7 +96,7 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n         }\n     }\n \n-    do graph.move_iter().transform |v| {\n+    do graph.move_iter().map |v| {\n         let mut vec = ~[];\n         for i in v.move_iter() {\n             vec.push(i);\n@@ -193,7 +193,7 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n         // Do the BFS.\n         info!(\"PBFS iteration %?\", i);\n         i += 1;\n-        colors = do colors.iter().enumerate().transform |(i, c)| {\n+        colors = do colors.iter().enumerate().map |(i, c)| {\n             let c : color = *c;\n             match c {\n               white => {\n@@ -220,7 +220,7 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n     }\n \n     // Convert the results.\n-    do colors.iter().transform |c| {\n+    do colors.iter().map |c| {\n         match *c {\n           white => { -1i64 }\n           black(parent) => { parent }"}, {"sha": "f82c5e692e44d21a796314875b1d2774cff9684c", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -150,7 +150,7 @@ fn rendezvous(nn: uint, set: ~[color]) {\n \n     // these channels will allow us to talk to each creature by 'name'/index\n     let to_creature: ~[Chan<Option<CreatureInfo>>] =\n-        set.iter().enumerate().transform(|(ii, col)| {\n+        set.iter().enumerate().map(|(ii, col)| {\n             // create each creature as a listener with a port, and\n             // give us a channel to talk to each\n             let ii = ii;"}, {"sha": "66b9bdc0a42c9626924c5603c6b39c695a667b12", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -172,7 +172,7 @@ fn main() {\n     let sizes = ~[1u,2,3,4,6,12,18];\n     let mut streams = vec::from_fn(sizes.len(), |_| Some(stream::<~str>()));\n     let mut from_child = ~[];\n-    let to_child   = do sizes.iter().zip(streams.mut_iter()).transform |(sz, stream_ref)| {\n+    let to_child   = do sizes.iter().zip(streams.mut_iter()).map |(sz, stream_ref)| {\n         let sz = *sz;\n         let stream = util::replace(stream_ref, None);\n         let (from_child_, to_parent_) = stream.unwrap();"}, {"sha": "5efe13f8bca6b1376b8d7f39ec1783db30d46f70", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -28,14 +28,14 @@ fn calc(children: uint, parent_wait_chan: &Chan<Chan<Chan<int>>>) {\n     };\n \n     let child_start_chans: ~[Chan<Chan<int>>] =\n-        wait_ports.move_iter().transform(|port| port.recv()).collect();\n+        wait_ports.move_iter().map(|port| port.recv()).collect();\n \n     let (start_port, start_chan) = stream::<Chan<int>>();\n     parent_wait_chan.send(start_chan);\n     let parent_result_chan: Chan<int> = start_port.recv();\n \n     let child_sum_ports: ~[Port<int>] =\n-        do child_start_chans.move_iter().transform |child_start_chan| {\n+        do child_start_chans.move_iter().map |child_start_chan| {\n             let (child_sum_port, child_sum_chan) = stream::<int>();\n             child_start_chan.send(child_sum_chan);\n             child_sum_port"}, {"sha": "aabc005c57fb3af900b02214dcccb8761f8068ed", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n     assert!(any_negative);\n \n     // Higher precedence than unary operations:\n-    let abs_v = do v.iter().transform |e| { e.abs() }.collect::<~[float]>();\n+    let abs_v = do v.iter().map |e| { e.abs() }.collect::<~[float]>();\n     assert!(do abs_v.iter().all |e| { e.is_positive() });\n     assert!(!do abs_v.iter().any |e| { e.is_negative() });\n "}, {"sha": "493b810c10488592307665dace81dc2b45a282e5", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f40d215eae0b0370807368ba58edd0befc8bcb/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=68f40d215eae0b0370807368ba58edd0befc8bcb", "patch": "@@ -29,7 +29,7 @@ impl to_str for int {\n \n impl<T:to_str> to_str for ~[T] {\n     fn to_str(&self) -> ~str {\n-        fmt!(\"[%s]\", self.iter().transform(|e| e.to_str()).collect::<~[~str]>().connect(\", \"))\n+        fmt!(\"[%s]\", self.iter().map(|e| e.to_str()).collect::<~[~str]>().connect(\", \"))\n     }\n }\n "}]}