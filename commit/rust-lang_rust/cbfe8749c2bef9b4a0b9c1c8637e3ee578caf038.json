{"sha": "cbfe8749c2bef9b4a0b9c1c8637e3ee578caf038", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZmU4NzQ5YzJiZWY5YjRhMGI5YzFjODYzN2UzZWU1NzhjYWYwMzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-03T12:04:27Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-16T21:17:26Z"}, "message": "Add check for doc(test(...)) attribute", "tree": {"sha": "c9470b78830dd981203df31fb276e8ff942335fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9470b78830dd981203df31fb276e8ff942335fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbfe8749c2bef9b4a0b9c1c8637e3ee578caf038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbfe8749c2bef9b4a0b9c1c8637e3ee578caf038", "html_url": "https://github.com/rust-lang/rust/commit/cbfe8749c2bef9b4a0b9c1c8637e3ee578caf038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbfe8749c2bef9b4a0b9c1c8637e3ee578caf038/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0035d9dcecee49d1f7349932bfa52c05a6f83641", "url": "https://api.github.com/repos/rust-lang/rust/commits/0035d9dcecee49d1f7349932bfa52c05a6f83641", "html_url": "https://github.com/rust-lang/rust/commit/0035d9dcecee49d1f7349932bfa52c05a6f83641"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "3fea75954b9581d5758e5dd5103e290fa6b6a768", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cbfe8749c2bef9b4a0b9c1c8637e3ee578caf038/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbfe8749c2bef9b4a0b9c1c8637e3ee578caf038/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=cbfe8749c2bef9b4a0b9c1c8637e3ee578caf038", "patch": "@@ -717,6 +717,42 @@ impl CheckAttrVisitor<'tcx> {\n         true\n     }\n \n+    /// Checks that `doc(test(...))` attribute contains only valid attributes. Returns `true` if\n+    /// valid.\n+    fn check_test_attr(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n+        let mut is_valid = true;\n+        if let Some(metas) = meta.meta_item_list() {\n+            for i_meta in metas {\n+                match i_meta.name_or_empty() {\n+                    sym::attr | sym::no_crate_inject => {}\n+                    _ => {\n+                        self.tcx.struct_span_lint_hir(\n+                            INVALID_DOC_ATTRIBUTES,\n+                            hir_id,\n+                            i_meta.span(),\n+                            |lint| {\n+                                lint.build(&format!(\n+                                    \"unknown `doc(test)` attribute `{}`\",\n+                                    rustc_ast_pretty::pprust::path_to_string(\n+                                        &i_meta.meta_item().unwrap().path\n+                                    ),\n+                                ))\n+                                .emit();\n+                            },\n+                        );\n+                        is_valid = false;\n+                    }\n+                }\n+            }\n+        } else {\n+            self.tcx.struct_span_lint_hir(INVALID_DOC_ATTRIBUTES, hir_id, meta.span(), |lint| {\n+                lint.build(\"`#[doc(test(...)]` takes a list of attributes\").emit();\n+            });\n+            is_valid = false;\n+        }\n+        is_valid\n+    }\n+\n     /// Runs various checks on `#[doc]` attributes. Returns `true` if valid.\n     ///\n     /// `specified_inline` should be initialized to `None` and kept for the scope\n@@ -793,8 +829,13 @@ impl CheckAttrVisitor<'tcx> {\n                         | sym::no_inline\n                         | sym::notable_trait\n                         | sym::passes\n-                        | sym::plugins\n-                        | sym::test => {}\n+                        | sym::plugins => {}\n+\n+                        sym::test => {\n+                            if !self.check_test_attr(&meta, hir_id) {\n+                                is_valid = false;\n+                            }\n+                        }\n \n                         sym::primitive => {\n                             if !self.tcx.features().doc_primitive {"}]}