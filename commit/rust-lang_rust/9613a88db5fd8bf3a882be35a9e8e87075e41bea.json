{"sha": "9613a88db5fd8bf3a882be35a9e8e87075e41bea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MTNhODhkYjVmZDhiZjNhODgyYmUzNWE5ZThlODcwNzVlNDFiZWE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-13T21:13:27Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-13T21:13:27Z"}, "message": "Refactor `check_doc_attrs` body\n\nThis change makes it easier to follow the control flow.\n\nI also moved the end-of-line comments attached to some symbols to before\nthe symbol listing. This allows rustfmt to format the code; otherwise no\nformatting occurs (see rust-lang/rustfmt#4750).", "tree": {"sha": "db277fb21b4ba09ce40d99f7140c0bf27e75cea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db277fb21b4ba09ce40d99f7140c0bf27e75cea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9613a88db5fd8bf3a882be35a9e8e87075e41bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9613a88db5fd8bf3a882be35a9e8e87075e41bea", "html_url": "https://github.com/rust-lang/rust/commit/9613a88db5fd8bf3a882be35a9e8e87075e41bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9613a88db5fd8bf3a882be35a9e8e87075e41bea/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61365c06250e2ba6e0a578ae990f055ac5339107", "url": "https://api.github.com/repos/rust-lang/rust/commits/61365c06250e2ba6e0a578ae990f055ac5339107", "html_url": "https://github.com/rust-lang/rust/commit/61365c06250e2ba6e0a578ae990f055ac5339107"}], "stats": {"total": 77, "additions": 41, "deletions": 36}, "files": [{"sha": "a045b0d596d5a090c7ff765c4ae47e3de27d9cc4", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9613a88db5fd8bf3a882be35a9e8e87075e41bea/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9613a88db5fd8bf3a882be35a9e8e87075e41bea/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=9613a88db5fd8bf3a882be35a9e8e87075e41bea", "patch": "@@ -531,60 +531,65 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     fn check_doc_attrs(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n-        if let Some(mi) = attr.meta() {\n-            if let Some(list) = mi.meta_item_list() {\n-                for meta in list {\n-                    if meta.has_name(sym::alias) {\n-                        if !self.check_attr_crate_level(meta, hir_id, \"alias\")\n-                            || !self.check_doc_alias(meta, hir_id, target)\n+        if let Some(list) = attr.meta().and_then(|mi| mi.meta_item_list().map(|l| l.to_vec())) {\n+            for meta in list {\n+                if let Some(i_meta) = meta.meta_item() {\n+                    match i_meta.name_or_empty() {\n+                        sym::alias\n+                            if !self.check_attr_crate_level(&meta, hir_id, \"alias\")\n+                                || !self.check_doc_alias(&meta, hir_id, target) =>\n                         {\n                             return false;\n                         }\n-                    } else if meta.has_name(sym::keyword) {\n-                        if !self.check_attr_crate_level(meta, hir_id, \"keyword\")\n-                            || !self.check_doc_keyword(meta, hir_id)\n+\n+                        sym::keyword\n+                            if !self.check_attr_crate_level(&meta, hir_id, \"keyword\")\n+                                || !self.check_doc_keyword(&meta, hir_id) =>\n                         {\n                             return false;\n                         }\n-                    } else if meta.has_name(sym::test) {\n-                        if CRATE_HIR_ID != hir_id {\n+\n+                        sym::test if CRATE_HIR_ID != hir_id => {\n                             self.tcx.struct_span_lint_hir(\n                                 INVALID_DOC_ATTRIBUTES,\n                                 hir_id,\n                                 meta.span(),\n                                 |lint| {\n                                     lint.build(\n-                                        \"`#![doc(test(...)]` is only allowed as a crate level attribute\"\n+                                        \"`#![doc(test(...)]` is only allowed \\\n+                                         as a crate level attribute\",\n                                     )\n                                     .emit();\n                                 },\n                             );\n                             return false;\n                         }\n-                    } else if let Some(i_meta) = meta.meta_item() {\n-                        if ![\n-                            sym::cfg,\n-                            sym::hidden,\n-                            sym::html_favicon_url,\n-                            sym::html_logo_url,\n-                            sym::html_no_source,\n-                            sym::html_playground_url,\n-                            sym::html_root_url,\n-                            sym::include,\n-                            sym::inline,\n-                            sym::issue_tracker_base_url,\n-                            sym::masked,\n-                            sym::no_default_passes, // deprecated\n-                            sym::no_inline,\n-                            sym::passes,  // deprecated\n-                            sym::plugins, // removed, but rustdoc warns about it itself\n-                            sym::primitive,\n-                            sym::spotlight,\n-                            sym::test,\n-                        ]\n-                        .iter()\n-                        .any(|m| i_meta.has_name(*m))\n-                        {\n+\n+                        // no_default_passes: deprecated\n+                        // passes: deprecated\n+                        // plugins: removed, but rustdoc warns about it itself\n+                        sym::alias\n+                        | sym::cfg\n+                        | sym::hidden\n+                        | sym::html_favicon_url\n+                        | sym::html_logo_url\n+                        | sym::html_no_source\n+                        | sym::html_playground_url\n+                        | sym::html_root_url\n+                        | sym::include\n+                        | sym::inline\n+                        | sym::issue_tracker_base_url\n+                        | sym::keyword\n+                        | sym::masked\n+                        | sym::no_default_passes\n+                        | sym::no_inline\n+                        | sym::passes\n+                        | sym::plugins\n+                        | sym::primitive\n+                        | sym::spotlight\n+                        | sym::test => {}\n+\n+                        _ => {\n                             self.tcx.struct_span_lint_hir(\n                                 INVALID_DOC_ATTRIBUTES,\n                                 hir_id,"}]}