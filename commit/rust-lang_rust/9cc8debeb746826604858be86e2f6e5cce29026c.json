{"sha": "9cc8debeb746826604858be86e2f6e5cce29026c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYzhkZWJlYjc0NjgyNjYwNDg1OGJlODZlMmY2ZTVjY2UyOTAyNmM=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-05-24T11:40:09Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-05-24T11:40:09Z"}, "message": "Move issue-26480 cfail to ui test. Fix #33763", "tree": {"sha": "d894db819a229db296913bd3ee1cba7c6ffb16e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d894db819a229db296913bd3ee1cba7c6ffb16e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cc8debeb746826604858be86e2f6e5cce29026c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc8debeb746826604858be86e2f6e5cce29026c", "html_url": "https://github.com/rust-lang/rust/commit/9cc8debeb746826604858be86e2f6e5cce29026c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cc8debeb746826604858be86e2f6e5cce29026c/comments", "author": null, "committer": null, "parents": [{"sha": "428099233a80018bc9740a09889391cd97087de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/428099233a80018bc9740a09889391cd97087de4", "html_url": "https://github.com/rust-lang/rust/commit/428099233a80018bc9740a09889391cd97087de4"}], "stats": {"total": 94, "additions": 63, "deletions": 31}, "files": [{"sha": "da8769e616c3f0ae545554aebb55edcc0eb6e964", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8debeb746826604858be86e2f6e5cce29026c/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8debeb746826604858be86e2f6e5cce29026c/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=9cc8debeb746826604858be86e2f6e5cce29026c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rand, core)]\n+#![feature(rand)]\n \n use std::fs::File;\n use std::io::prelude::*;\n@@ -18,6 +18,11 @@ use std::process::Command;\n use std::__rand::{thread_rng, Rng};\n use std::{char, env};\n \n+pub fn check_old_skool() -> bool {\n+    use std::env;\n+    env::var(\"RUST_NEW_ERROR_FORMAT\").is_err()\n+}\n+\n // creates a file with `fn main() { <random ident> }` and checks the\n // compiler emits a span of the appropriate length (for the\n // \"unresolved name\" message); currently just using the number of code\n@@ -65,10 +70,17 @@ fn main() {\n \n         let err = String::from_utf8_lossy(&result.stderr);\n \n-        // the span should end the line (e.g no extra ~'s)\n-        let expected_span = format!(\"^{}\\n\", repeat(\"~\").take(n - 1)\n-                                                        .collect::<String>());\n-        assert!(err.contains(&expected_span));\n+        if check_old_skool() {\n+            // the span should end the line (e.g no extra ~'s)\n+            let expected_span = format!(\"^{}\\n\", repeat(\"~\").take(n - 1)\n+                                                            .collect::<String>());\n+            assert!(err.contains(&expected_span));\n+        } else {\n+            // the span should end the line (e.g no extra ~'s)\n+            let expected_span = format!(\"^{}\\n\", repeat(\"^\").take(n - 1)\n+                                                            .collect::<String>());\n+            assert!(err.contains(&expected_span));\n+        }\n     }\n \n     // Test multi-column characters and tabs\n@@ -77,9 +89,6 @@ fn main() {\n                        r#\"extern \"\uf937\uf922\uf92ba\u0301\u0301\u0301\" fn foo() {{}} extern \"\uf937\uf922\uf92ba\u0301\u0301\" fn bar() {{}}\"#);\n     }\n \n-    // Extra characters. Every line is preceded by `filename:lineno <actual code>`\n-    let offset = main_file.to_str().unwrap().len() + 3;\n-\n     let result = Command::new(\"sh\")\n                          .arg(\"-c\")\n                          .arg(format!(\"{} {}\",\n@@ -91,17 +100,31 @@ fn main() {\n \n     // Test both the length of the snake and the leading spaces up to it\n \n-    // First snake is 8 ~s long, with 7 preceding spaces (excluding file name/line offset)\n-    let expected_span = format!(\"\\n{}^{}\\n\",\n-                                repeat(\" \").take(offset + 7).collect::<String>(),\n-                                repeat(\"~\").take(8).collect::<String>());\n-    assert!(err.contains(&expected_span));\n-    // Second snake is only 7 ~s long, with 36 preceding spaces,\n-    // because rustc counts chars() now rather than width(). This\n-    // is because width() functions are to be removed from\n-    // librustc_unicode\n-    let expected_span = format!(\"\\n{}^{}\\n\",\n-                                repeat(\" \").take(offset + 36).collect::<String>(),\n-                                repeat(\"~\").take(7).collect::<String>());\n-    assert!(err.contains(&expected_span));\n+    if check_old_skool() {\n+        // Extra characters. Every line is preceded by `filename:lineno <actual code>`\n+        let offset = main_file.to_str().unwrap().len() + 3;\n+\n+        // First snake is 8 ~s long, with 7 preceding spaces (excluding file name/line offset)\n+        let expected_span = format!(\"\\n{}^{}\\n\",\n+                                    repeat(\" \").take(offset + 7).collect::<String>(),\n+                                    repeat(\"~\").take(8).collect::<String>());\n+        assert!(err.contains(&expected_span));\n+        // Second snake is only 7 ~s long, with 36 preceding spaces,\n+        // because rustc counts chars() now rather than width(). This\n+        // is because width() functions are to be removed from\n+        // librustc_unicode\n+        let expected_span = format!(\"\\n{}^{}\\n\",\n+                                    repeat(\" \").take(offset + 36).collect::<String>(),\n+                                    repeat(\"~\").take(7).collect::<String>());\n+        assert!(err.contains(&expected_span));\n+    } else {\n+        let expected_span = format!(\"\\n  |>{}{}\\n\",\n+                                    repeat(\" \").take(8).collect::<String>(),\n+                                    repeat(\"^\").take(9).collect::<String>());\n+        assert!(err.contains(&expected_span));\n+        let expected_span = format!(\"\\n  |>{}{}\\n\",\n+                                    repeat(\" \").take(37).collect::<String>(),\n+                                    repeat(\"^\").take(8).collect::<String>());\n+        assert!(err.contains(&expected_span));\n+    }\n }"}, {"sha": "516d92372e73ea5903d516d4a07f9d8e0eed19e2", "filename": "src/test/ui/mismatched_types/issue-26480.rs", "status": "renamed", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8debeb746826604858be86e2f6e5cce29026c/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8debeb746826604858be86e2f6e5cce29026c/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs?ref=9cc8debeb746826604858be86e2f6e5cce29026c", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// rustc-env:RUST_NEW_ERROR_FORMAT\n extern {\n     fn write(fildes: i32, buf: *const i8, nbyte: u64) -> i64;\n }\n@@ -24,25 +25,16 @@ macro_rules! write {\n         unsafe {\n             write(stdout, $arr.as_ptr() as *const i8,\n                   $arr.len() * size_of($arr[0]));\n-            //~^ ERROR mismatched types\n-            //~| expected u64, found usize\n-            //~| expected type\n-            //~| found type\n         }\n     }}\n }\n \n macro_rules! cast {\n-    ($x:expr) => ($x as ()) //~ ERROR non-scalar cast\n+    ($x:expr) => ($x as ()) \n }\n \n fn main() {\n     let hello = ['H', 'e', 'y'];\n     write!(hello);\n-    //~^ NOTE in this expansion of write!\n-    //~| NOTE in this expansion of write!\n-    //~| NOTE in this expansion of write!\n-\n     cast!(2);\n-    //~^ NOTE in this expansion of cast!\n }", "previous_filename": "src/test/compile-fail/issue-26480.rs"}, {"sha": "48bb546b382d35bce16fc98d67ec85ae27c9a7da", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8debeb746826604858be86e2f6e5cce29026c/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8debeb746826604858be86e2f6e5cce29026c/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=9cc8debeb746826604858be86e2f6e5cce29026c", "patch": "@@ -0,0 +1,17 @@\n+error: mismatched types [--explain E0308]\n+  --> $DIR/issue-26480.rs:27:19\n+   |>\n+27 |>                   $arr.len() * size_of($arr[0]));\n+   |>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n+$DIR/issue-26480.rs:38:5: 38:19: note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n+\n+\n+error: non-scalar cast: `_` as `()`\n+  --> $DIR/issue-26480.rs:33:19\n+   |>\n+33 |>     ($x:expr) => ($x as ())\n+   |>                   ^^^^^^^^\n+$DIR/issue-26480.rs:39:5: 39:14: note: in this expansion of cast! (defined in $DIR/issue-26480.rs)\n+\n+\n+error: aborting due to 2 previous errors"}]}