{"sha": "619ccf3834d18eeef1aea4030e5c2bcf673e5688", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOWNjZjM4MzRkMThlZWVmMWFlYTQwMzBlNWMyYmNmNjczZTU2ODg=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-18T19:33:25Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-20T12:55:25Z"}, "message": "Rename set_last_error_from_io_result", "tree": {"sha": "269cdcfbfdd20b272eb2e740904c40b2bcc05530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/269cdcfbfdd20b272eb2e740904c40b2bcc05530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/619ccf3834d18eeef1aea4030e5c2bcf673e5688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/619ccf3834d18eeef1aea4030e5c2bcf673e5688", "html_url": "https://github.com/rust-lang/rust/commit/619ccf3834d18eeef1aea4030e5c2bcf673e5688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/619ccf3834d18eeef1aea4030e5c2bcf673e5688/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c3c738c4b82a00471cffe67e44a22173404bd4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3c738c4b82a00471cffe67e44a22173404bd4f", "html_url": "https://github.com/rust-lang/rust/commit/5c3c738c4b82a00471cffe67e44a22173404bd4f"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "616de837879123edc25e60c52a29225ee32677d8", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/619ccf3834d18eeef1aea4030e5c2bcf673e5688/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619ccf3834d18eeef1aea4030e5c2bcf673e5688/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=619ccf3834d18eeef1aea4030e5c2bcf673e5688", "patch": "@@ -360,8 +360,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.read_scalar(errno_place.into())?.not_undef()\n     }\n \n-    /// Sets the last error variable using a `std::io::Error`. It fails if the error cannot be\n-    /// transformed to a raw os error succesfully.\n+    /// Sets the last OS error using a `std::io::Error`. This function tries to produce the most\n+    /// similar OS error from the `std::io::ErrorKind` and sets it as the last OS error.\n     fn set_last_error_from_io_error(&mut self, e: std::io::Error) -> InterpResult<'tcx> {\n         use std::io::ErrorKind::*;\n         let this = self.eval_context_mut();\n@@ -392,12 +392,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// Helper function that consumes an `std::io::Result<T>` and returns an\n-    /// `InterpResult<'tcx,T>::Ok` instead. It is expected that the result can be converted to an\n-    /// OS error using `std::io::Error::raw_os_error`.\n+    /// `InterpResult<'tcx,T>::Ok` instead. In case the result is an error, this function returns\n+    /// `Ok(-1)` and sets the last OS error accordingly.\n     ///\n     /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n     /// functions return different integer types (like `read`, that returns an `i64`)\n-    fn set_last_error_from_io_result<T: From<i32>>(\n+    fn try_unwrap_io_result<T: From<i32>>(\n         &mut self,\n         result: std::io::Result<T>,\n     ) -> InterpResult<'tcx, T> {"}, {"sha": "315e9c1a35a97eb16ebfb4e82f90dd6da54006d5", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/619ccf3834d18eeef1aea4030e5c2bcf673e5688/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619ccf3834d18eeef1aea4030e5c2bcf673e5688/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=619ccf3834d18eeef1aea4030e5c2bcf673e5688", "patch": "@@ -91,7 +91,7 @@ pub struct Evaluator<'tcx> {\n     pub(crate) argv: Option<Pointer<Tag>>,\n     pub(crate) cmd_line: Option<Pointer<Tag>>,\n \n-    /// Last OS error location in memory. It is a 32 bits integer (unsigned for Windows)\n+    /// Last OS error location in memory. It is a 32 bit integer (unsigned for Windows)\n     pub(crate) last_error: Option<MPlaceTy<'tcx, Tag>>,\n \n     /// TLS state."}, {"sha": "ffcfab10081a1046f2831406207bd68d269220fe", "filename": "src/shims/fs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/619ccf3834d18eeef1aea4030e5c2bcf673e5688/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619ccf3834d18eeef1aea4030e5c2bcf673e5688/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=619ccf3834d18eeef1aea4030e5c2bcf673e5688", "patch": "@@ -108,7 +108,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             fh.low\n         });\n \n-        this.set_last_error_from_io_result(fd)\n+        this.try_unwrap_io_result(fd)\n     }\n \n     fn fcntl(\n@@ -144,7 +144,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         this.remove_handle_and(fd, |handle, this| {\n-            this.set_last_error_from_io_result(handle.file.sync_all().map(|_| 0i32))\n+            this.try_unwrap_io_result(handle.file.sync_all().map(|_| 0i32))\n         })\n     }\n \n@@ -175,9 +175,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .get_bytes_mut(&*this.tcx, buf, Size::from_bytes(count))\n                     .map(|buffer| handle.file.read(buffer))\n             });\n-            // Reinsert the file handle\n             this.machine.file_handler.handles.insert(fd, handle).unwrap_none();\n-            this.set_last_error_from_io_result(bytes?.map(|bytes| bytes as i64))\n+            this.try_unwrap_io_result(bytes?.map(|bytes| bytes as i64))\n         })\n     }\n \n@@ -206,7 +205,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .map(|bytes| handle.file.write(bytes).map(|bytes| bytes as i64))\n             });\n             this.machine.file_handler.handles.insert(fd, handle).unwrap_none();\n-            this.set_last_error_from_io_result(bytes?)\n+            this.try_unwrap_io_result(bytes?)\n         })\n     }\n \n@@ -223,7 +222,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let result = remove_file(path).map(|_| 0);\n \n-        this.set_last_error_from_io_result(result)\n+        this.try_unwrap_io_result(result)\n     }\n \n     /// Helper function that gets a `FileHandle` immutable reference and allows to manipulate it"}]}