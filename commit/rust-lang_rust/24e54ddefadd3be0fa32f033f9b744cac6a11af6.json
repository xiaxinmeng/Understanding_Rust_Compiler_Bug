{"sha": "24e54ddefadd3be0fa32f033f9b744cac6a11af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZTU0ZGRlZmFkZDNiZTBmYTMyZjAzM2Y5Yjc0NGNhYzZhMTFhZjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-16T13:04:01Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-16T13:04:01Z"}, "message": "Introduce LocalDefId which provides a type-level guarantee that the DefId is from the local crate.", "tree": {"sha": "522807fab4357a7c12f7782585e9c0545d3b5960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/522807fab4357a7c12f7782585e9c0545d3b5960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24e54ddefadd3be0fa32f033f9b744cac6a11af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24e54ddefadd3be0fa32f033f9b744cac6a11af6", "html_url": "https://github.com/rust-lang/rust/commit/24e54ddefadd3be0fa32f033f9b744cac6a11af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24e54ddefadd3be0fa32f033f9b744cac6a11af6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f50e626e1e0ccd1a5eff407c92e87c987f405e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f50e626e1e0ccd1a5eff407c92e87c987f405e6", "html_url": "https://github.com/rust-lang/rust/commit/2f50e626e1e0ccd1a5eff407c92e87c987f405e6"}], "stats": {"total": 129, "additions": 98, "deletions": 31}, "files": [{"sha": "f34022993de23e3a9e659381069dba55cf88dd88", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -92,6 +92,7 @@ impl serialize::UseSpecializedDecodable for CrateNum {\n /// don't have to care about these ranges.\n newtype_index!(DefIndex\n     {\n+        ENCODABLE = custom\n         DEBUG_FORMAT = custom,\n \n         /// The start of the \"high\" range of DefIndexes.\n@@ -208,13 +209,20 @@ impl fmt::Debug for DefId {\n \n impl DefId {\n     /// Make a local `DefId` with the given index.\n+    #[inline]\n     pub fn local(index: DefIndex) -> DefId {\n         DefId { krate: LOCAL_CRATE, index: index }\n     }\n \n-    pub fn is_local(&self) -> bool {\n+    #[inline]\n+    pub fn is_local(self) -> bool {\n         self.krate == LOCAL_CRATE\n     }\n+\n+     #[inline]\n+    pub fn to_local(self) -> LocalDefId {\n+        LocalDefId::from_def_id(self)\n+    }\n }\n \n impl serialize::UseSpecializedEncodable for DefId {\n@@ -242,3 +250,33 @@ impl serialize::UseSpecializedDecodable for DefId {\n         })\n     }\n }\n+\n+\n+#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+pub struct LocalDefId(DefIndex);\n+\n+impl LocalDefId {\n+\n+    #[inline]\n+    pub fn from_def_id(def_id: DefId) -> LocalDefId {\n+        assert!(def_id.is_local());\n+        LocalDefId(def_id.index)\n+    }\n+\n+    #[inline]\n+    pub fn to_def_id(self) -> DefId {\n+        DefId {\n+            krate: LOCAL_CRATE,\n+            index: self.0\n+        }\n+    }\n+}\n+\n+impl fmt::Debug for LocalDefId {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.to_def_id().fmt(f)\n+    }\n+}\n+\n+impl serialize::UseSpecializedEncodable for LocalDefId {}\n+impl serialize::UseSpecializedDecodable for LocalDefId {}"}, {"sha": "d0a7ac392014e02180513452327232341ef3640e", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -17,7 +17,7 @@ pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n \n use dep_graph::{DepGraph, DepNode, DepKind, DepNodeIndex};\n \n-use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndexAddressSpace};\n+use hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId, DefIndexAddressSpace};\n \n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, CRATE_NODE_ID};\n@@ -359,6 +359,16 @@ impl<'hir> Map<'hir> {\n         self.definitions.as_local_node_id(DefId::local(def_index)).unwrap()\n     }\n \n+    #[inline]\n+    pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n+        self.definitions.def_index_to_hir_id(def_id.to_def_id().index)\n+    }\n+\n+    #[inline]\n+    pub fn local_def_id_to_node_id(&self, def_id: LocalDefId) -> NodeId {\n+        self.definitions.as_local_node_id(def_id.to_def_id()).unwrap()\n+    }\n+\n     fn entry_count(&self) -> usize {\n         self.map.len()\n     }"}, {"sha": "11ac2bf83be3ef6cfe6cdef7a21429c50a8c742e", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -13,7 +13,7 @@\n \n use hir;\n use hir::map::DefPathHash;\n-use hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n+use hir::def_id::{DefId, LocalDefId, CrateNum, CRATE_DEF_INDEX};\n use ich::{StableHashingContext, NodeIdHashingMode};\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n@@ -38,6 +38,24 @@ impl<'gcx> ToStableHashKey<StableHashingContext<'gcx>> for DefId {\n     }\n }\n \n+impl<'gcx> HashStable<StableHashingContext<'gcx>> for LocalDefId {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        hcx.def_path_hash(self.to_def_id()).hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<'gcx> ToStableHashKey<StableHashingContext<'gcx>> for LocalDefId {\n+    type KeyType = DefPathHash;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &StableHashingContext<'gcx>) -> DefPathHash {\n+        hcx.def_path_hash(self.to_def_id())\n+    }\n+}\n+\n impl<'gcx> HashStable<StableHashingContext<'gcx>> for CrateNum {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "9018b9fe590b2e8bd53035f488ea937284070f8f", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -20,7 +20,7 @@ use self::TrackMatchMode::*;\n use self::OverloadedCallType::*;\n \n use hir::def::Def;\n-use hir::def_id::{DefId};\n+use hir::def_id::DefId;\n use infer::InferCtxt;\n use middle::mem_categorization as mc;\n use middle::region;\n@@ -915,7 +915,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 let closure_def_id = self.tcx().hir.local_def_id(closure_expr.id);\n                 let upvar_id = ty::UpvarId {\n                     var_id: var_hir_id,\n-                    closure_expr_id: closure_def_id.index\n+                    closure_expr_id: closure_def_id.to_local(),\n                 };\n                 let upvar_capture = self.mc.tables.upvar_capture(upvar_id);\n                 let cmt_var = return_if_err!(self.cat_captured_var(closure_expr.id,"}, {"sha": "6ea85955339917f9c369fcaa98a3bc1186627523", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -70,7 +70,7 @@ pub use self::Note::*;\n use self::Aliasability::*;\n \n use middle::region;\n-use hir::def_id::{DefId, DefIndex};\n+use hir::def_id::{DefId, LocalDefId};\n use hir::map as hir_map;\n use infer::InferCtxt;\n use hir::def::{Def, CtorKind};\n@@ -191,7 +191,7 @@ pub type cmt<'tcx> = Rc<cmt_<'tcx>>;\n \n pub enum ImmutabilityBlame<'tcx> {\n     ImmLocal(ast::NodeId),\n-    ClosureEnv(DefIndex),\n+    ClosureEnv(LocalDefId),\n     LocalDeref(ast::NodeId),\n     AdtFieldDeref(&'tcx ty::AdtDef, &'tcx ty::FieldDef)\n }\n@@ -758,11 +758,11 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let closure_expr_def_index = self.tcx.hir.local_def_id(fn_node_id).index;\n+        let closure_expr_def_id = self.tcx.hir.local_def_id(fn_node_id);\n         let var_hir_id = self.tcx.hir.node_to_hir_id(var_id);\n         let upvar_id = ty::UpvarId {\n             var_id: var_hir_id,\n-            closure_expr_id: closure_expr_def_index\n+            closure_expr_id: closure_expr_def_id.to_local(),\n         };\n \n         let var_ty = self.node_ty(var_hir_id)?;\n@@ -837,7 +837,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             // The environment of a closure is guaranteed to\n             // outlive any bindings introduced in the body of the\n             // closure itself.\n-            scope: DefId::local(upvar_id.closure_expr_id),\n+            scope: upvar_id.closure_expr_id.to_def_id(),\n             bound_region: ty::BrEnv\n         }));\n "}, {"sha": "9daf152dc4216b8ee8d13784a66504674d1a1698", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -769,7 +769,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n                 };\n                 let closure_def_id = DefId {\n                     krate: local_id_root.krate,\n-                    index: closure_expr_id,\n+                    index: closure_expr_id.to_def_id().index,\n                 };\n                 (hcx.def_path_hash(var_owner_def_id),\n                  var_id.local_id,"}, {"sha": "cf5255dca61f83be462384d73572b025dbcb307d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -17,7 +17,7 @@ pub use self::fold::TypeFoldable;\n \n use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n-use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use hir::map::DefPathData;\n use ich::StableHashingContext;\n use middle::const_val::ConstVal;\n@@ -573,7 +573,7 @@ impl<T> Slice<T> {\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UpvarId {\n     pub var_id: hir::HirId,\n-    pub closure_expr_id: DefIndex,\n+    pub closure_expr_id: LocalDefId,\n }\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable, Copy)]"}, {"sha": "7b09e45fe96e32dedd15af7cbbb6caec5c52a46d", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -29,7 +29,7 @@ use rustc::middle::dataflow::BitwiseOperator;\n use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::dataflow::KillFrom;\n use rustc::middle::borrowck::BorrowCheckResult;\n-use rustc::hir::def_id::{DefId, DefIndex};\n+use rustc::hir::def_id::{DefId, LocalDefId};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n@@ -376,9 +376,9 @@ pub enum LoanPathElem<'tcx> {\n     LpInterior(Option<DefId>, InteriorKind),\n }\n \n-fn closure_to_block(closure_id: DefIndex,\n+fn closure_to_block(closure_id: LocalDefId,\n                     tcx: TyCtxt) -> ast::NodeId {\n-    let closure_id = tcx.hir.def_index_to_node_id(closure_id);\n+    let closure_id = tcx.hir.local_def_id_to_node_id(closure_id);\n     match tcx.hir.get(closure_id) {\n         hir_map::NodeExpr(expr) => match expr.node {\n             hir::ExprClosure(.., body_id, _, _) => {\n@@ -1101,7 +1101,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 } else {\n                     \"consider changing this closure to take self by mutable reference\"\n                 };\n-                let node_id = self.tcx.hir.def_index_to_node_id(id);\n+                let node_id = self.tcx.hir.local_def_id_to_node_id(id);\n                 let help_span = self.tcx.hir.span(node_id);\n                 self.cannot_act_on_capture_in_sharable_fn(span,\n                                                           prefix,\n@@ -1297,7 +1297,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 };\n                 if kind == ty::ClosureKind::Fn {\n                     let closure_node_id =\n-                        self.tcx.hir.def_index_to_node_id(upvar_id.closure_expr_id);\n+                        self.tcx.hir.local_def_id_to_node_id(upvar_id.closure_expr_id);\n                     db.span_help(self.tcx.hir.span(closure_node_id),\n                                  \"consider changing this closure to take \\\n                                   self by mutable reference\");"}, {"sha": "7d624b5c9cf5be0581abff495b3e9a23be7a564c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -13,7 +13,7 @@ use build;\n use hair::cx::Cx;\n use hair::LintLevel;\n use rustc::hir;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LocalDefId};\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n@@ -414,10 +414,10 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         freevars.iter().map(|fv| {\n             let var_id = fv.var_id();\n             let var_hir_id = tcx.hir.node_to_hir_id(var_id);\n-            let closure_expr_id = tcx.hir.local_def_id(fn_id).index;\n+            let closure_expr_id = tcx.hir.local_def_id(fn_id);\n             let capture = hir.tables().upvar_capture(ty::UpvarId {\n                 var_id: var_hir_id,\n-                closure_expr_id,\n+                closure_expr_id: LocalDefId::from_def_id(closure_expr_id),\n             });\n             let by_ref = match capture {\n                 ty::UpvarCapture::ByValue => false,"}, {"sha": "798928e7ae7a53cafa29f71c00d5da035dce49b1", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -20,6 +20,7 @@ use rustc::ty::{self, AdtKind, VariantDef, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n use rustc::ty::cast::CastKind as TyCastKind;\n use rustc::hir;\n+use rustc::hir::def_id::LocalDefId;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     type Output = Expr<'tcx>;\n@@ -783,7 +784,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             // point we need an implicit deref\n             let upvar_id = ty::UpvarId {\n                 var_id: var_hir_id,\n-                closure_expr_id: closure_def_id.index,\n+                closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n             };\n             match cx.tables().upvar_capture(upvar_id) {\n                 ty::UpvarCapture::ByValue => field_kind,\n@@ -897,7 +898,7 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let var_hir_id = cx.tcx.hir.node_to_hir_id(freevar.var_id());\n     let upvar_id = ty::UpvarId {\n         var_id: var_hir_id,\n-        closure_expr_id: cx.tcx.hir.local_def_id(closure_expr.id).index,\n+        closure_expr_id: cx.tcx.hir.local_def_id(closure_expr.id).to_local(),\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);"}, {"sha": "07ed0f5b89003bf1dc5a32937e08ad18373f906e", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e54ddefadd3be0fa32f033f9b744cac6a11af6/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=24e54ddefadd3be0fa32f033f9b744cac6a11af6", "patch": "@@ -50,7 +50,7 @@ use rustc::infer::UpvarRegion;\n use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir;\n-use rustc::hir::def_id::DefIndex;\n+use rustc::hir::def_id::LocalDefId;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::util::nodemap::FxHashMap;\n \n@@ -128,7 +128,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for freevar in freevars {\n                 let upvar_id = ty::UpvarId {\n                     var_id: self.tcx.hir.node_to_hir_id(freevar.var_id()),\n-                    closure_expr_id: closure_def_id.index,\n+                    closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                 };\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n \n@@ -167,7 +167,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // Write the adjusted values back into the main tables.\n             if infer_kind {\n                 if let Some(kind) = delegate.adjust_closure_kinds\n-                                            .remove(&closure_def_id.index) {\n+                                            .remove(&closure_def_id.to_local()) {\n                     self.tables\n                         .borrow_mut()\n                         .closure_kinds_mut()\n@@ -231,7 +231,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // This may change if abstract return types of some sort are\n         // implemented.\n         let tcx = self.tcx;\n-        let closure_def_index = tcx.hir.local_def_id(closure_id).index;\n+        let closure_def_index = tcx.hir.local_def_id(closure_id);\n \n         tcx.with_freevars(closure_id, |freevars| {\n             freevars.iter().map(|freevar| {\n@@ -240,7 +240,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let freevar_ty = self.node_ty(var_hir_id);\n                 let upvar_id = ty::UpvarId {\n                     var_id: var_hir_id,\n-                    closure_expr_id: closure_def_index,\n+                    closure_expr_id: LocalDefId::from_def_id(closure_def_index),\n                 };\n                 let capture = self.tables.borrow().upvar_capture(upvar_id);\n \n@@ -263,7 +263,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n struct InferBorrowKind<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n-    adjust_closure_kinds: FxHashMap<DefIndex, (ty::ClosureKind, Option<(Span, ast::Name)>)>,\n+    adjust_closure_kinds: FxHashMap<LocalDefId, (ty::ClosureKind, Option<(Span, ast::Name)>)>,\n     adjust_upvar_captures: ty::UpvarCaptureMap<'tcx>,\n }\n \n@@ -481,7 +481,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n     }\n \n     fn adjust_closure_kind(&mut self,\n-                           closure_id: DefIndex,\n+                           closure_id: LocalDefId,\n                            new_kind: ty::ClosureKind,\n                            upvar_span: Span,\n                            var_name: ast::Name) {\n@@ -490,7 +490,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n \n         let closure_kind = self.adjust_closure_kinds.get(&closure_id).cloned()\n             .or_else(|| {\n-                let closure_id = self.fcx.tcx.hir.def_index_to_hir_id(closure_id);\n+                let closure_id = self.fcx.tcx.hir.local_def_id_to_hir_id(closure_id);\n                 self.fcx.tables.borrow().closure_kinds().get(closure_id).cloned()\n             });\n "}]}