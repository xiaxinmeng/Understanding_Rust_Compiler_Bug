{"sha": "0b232d022ff283d4c7118c0d205000a937121a02", "node_id": "C_kwDOAAsO6NoAKDBiMjMyZDAyMmZmMjgzZDRjNzExOGMwZDIwNTAwMGE5MzcxMjFhMDI", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-08T11:17:58Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-08T12:10:37Z"}, "message": "prefer universal from lower universe\n\nIn case a variable is unified with two universal regions from different\nuniverses, use the one with the lower universe as it has a higher chance\nof being compatible with the variable.", "tree": {"sha": "4141161341b1ce08889bef0bc6d611b8704daba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4141161341b1ce08889bef0bc6d611b8704daba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b232d022ff283d4c7118c0d205000a937121a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b232d022ff283d4c7118c0d205000a937121a02", "html_url": "https://github.com/rust-lang/rust/commit/0b232d022ff283d4c7118c0d205000a937121a02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b232d022ff283d4c7118c0d205000a937121a02/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "228f40820d91423babd3ac2e5184c5a12109dc9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/228f40820d91423babd3ac2e5184c5a12109dc9b", "html_url": "https://github.com/rust-lang/rust/commit/228f40820d91423babd3ac2e5184c5a12109dc9b"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "d83a587a86ae6f4b8f22cfb17f084d59e55981c0", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b232d022ff283d4c7118c0d205000a937121a02/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b232d022ff283d4c7118c0d205000a937121a02/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=0b232d022ff283d4c7118c0d205000a937121a02", "patch": "@@ -57,11 +57,27 @@ impl<'tcx> UnifyValue for UnifiedRegion<'tcx> {\n     type Error = NoError;\n \n     fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {\n+        // We pick the value of the least universe because it is compatible with more variables.\n+        // This is *not* neccessary for soundness, but it allows more region variables to be\n+        // resolved to the said value.\n+        #[cold]\n+        fn min_universe<'tcx>(r1: Region<'tcx>, r2: Region<'tcx>) -> Region<'tcx> {\n+            cmp::min_by_key(r1, r2, |r| match r.kind() {\n+                ty::ReStatic\n+                | ty::ReErased\n+                | ty::ReFree(..)\n+                | ty::ReEarlyBound(..)\n+                | ty::ReError(_) => ty::UniverseIndex::ROOT,\n+                ty::RePlaceholder(placeholder) => placeholder.universe,\n+                ty::ReVar(..) | ty::ReLateBound(..) => bug!(\"not a universal region\"),\n+            })\n+        }\n+\n         Ok(match (value1.value, value2.value) {\n             // Here we can just pick one value, because the full constraints graph\n             // will be handled later. Ideally, we might want a `MultipleValues`\n             // variant or something. For now though, this is fine.\n-            (Some(_), Some(_)) => *value1,\n+            (Some(val1), Some(val2)) => Self { value: Some(min_universe(val1, val2)) },\n \n             (Some(_), _) => *value1,\n             (_, Some(_)) => *value2,"}]}