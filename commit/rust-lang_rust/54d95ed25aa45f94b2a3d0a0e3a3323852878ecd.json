{"sha": "54d95ed25aa45f94b2a3d0a0e3a3323852878ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZDk1ZWQyNWFhNDVmOTRiMmEzZDBhMGUzYTMzMjM4NTI4NzhlY2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-05T10:14:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-05T10:52:35Z"}, "message": "catch InvalidUninitBytes during validation", "tree": {"sha": "e282f7859415025046ff32c4923c8864acae0b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e282f7859415025046ff32c4923c8864acae0b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54d95ed25aa45f94b2a3d0a0e3a3323852878ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54d95ed25aa45f94b2a3d0a0e3a3323852878ecd", "html_url": "https://github.com/rust-lang/rust/commit/54d95ed25aa45f94b2a3d0a0e3a3323852878ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54d95ed25aa45f94b2a3d0a0e3a3323852878ecd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "html_url": "https://github.com/rust-lang/rust/commit/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "058c9ffc37ecfbcff9da4b835169d4ce5f4ad5ae", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54d95ed25aa45f94b2a3d0a0e3a3323852878ecd/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d95ed25aa45f94b2a3d0a0e3a3323852878ecd/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=54d95ed25aa45f94b2a3d0a0e3a3323852878ecd", "patch": "@@ -366,7 +366,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         let place = try_validation!(\n             self.ecx.ref_to_mplace(value),\n             self.path,\n-            err_ub!(InvalidUninitBytes { .. }) => { \"uninitialized {}\", kind },\n+            err_ub!(InvalidUninitBytes(None)) => { \"uninitialized {}\", kind },\n         );\n         if place.layout.is_unsized() {\n             self.check_wide_ptr_meta(place.meta, place.layout)?;\n@@ -477,7 +477,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 try_validation!(\n                     value.to_bool(),\n                     self.path,\n-                    err_ub!(InvalidBool(..)) => { \"{}\", value } expected { \"a boolean\" },\n+                    err_ub!(InvalidBool(..)) | err_ub!(InvalidUninitBytes(None)) =>\n+                        { \"{}\", value } expected { \"a boolean\" },\n                 );\n                 Ok(true)\n             }\n@@ -486,7 +487,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 try_validation!(\n                     value.to_char(),\n                     self.path,\n-                    err_ub!(InvalidChar(..)) => { \"{}\", value } expected { \"a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\" },\n+                    err_ub!(InvalidChar(..)) | err_ub!(InvalidUninitBytes(None)) =>\n+                        { \"{}\", value } expected { \"a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\" },\n                 );\n                 Ok(true)\n             }\n@@ -515,7 +517,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 let place = try_validation!(\n                     self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n                     self.path,\n-                    err_ub!(InvalidUninitBytes { .. } ) => { \"uninitialized raw pointer\" },\n+                    err_ub!(InvalidUninitBytes(None)) => { \"uninitialized raw pointer\" },\n                 );\n                 if place.layout.is_unsized() {\n                     self.check_wide_ptr_meta(place.meta, place.layout)?;\n@@ -537,6 +539,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     self.path,\n                     err_ub!(DanglingIntPointer(..)) |\n                     err_ub!(InvalidFunctionPointer(..)) |\n+                    err_ub!(InvalidUninitBytes(None)) |\n                     err_unsup!(ReadBytesAsPointer) =>\n                         { \"{}\", value } expected { \"a function pointer\" },\n                 );\n@@ -593,7 +596,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         let value = try_validation!(\n             value.not_undef(),\n             self.path,\n-            err_ub!(InvalidUninitBytes { .. }) => { \"{}\", value }\n+            err_ub!(InvalidUninitBytes(None)) => { \"{}\", value }\n                 expected { \"something {}\", wrapping_range_format(valid_range, max_hi) },\n         );\n         let bits = match value.to_bits_or_ptr(op.layout.size, self.ecx) {\n@@ -699,6 +702,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             self.path,\n             err_ub!(InvalidTag(val)) =>\n                 { \"{}\", val } expected { \"a valid enum tag\" },\n+            // `InvalidUninitBytes` can be caused by `read_discriminant` in Miri if all initialized tags are valid.\n+            err_ub!(InvalidUninitBytes(None)) =>\n+                { \"uninitialized bytes\" } expected { \"a valid enum tag\" },\n             err_unsup!(ReadPointerAsBytes) =>\n                 { \"a pointer\" } expected { \"plain (non-pointer) bytes\" },\n         );"}]}