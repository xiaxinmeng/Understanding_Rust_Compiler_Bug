{"sha": "c803ee455beb5842f4acc430e2184ba6943315c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MDNlZTQ1NWJlYjU4NDJmNGFjYzQzMGUyMTg0YmE2OTQzMzE1YzA=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-05-16T18:47:28Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-05-24T14:04:39Z"}, "message": "refactor", "tree": {"sha": "02cd71ea8f502e1899321e710bffa45a316c8c9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02cd71ea8f502e1899321e710bffa45a316c8c9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c803ee455beb5842f4acc430e2184ba6943315c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c803ee455beb5842f4acc430e2184ba6943315c0", "html_url": "https://github.com/rust-lang/rust/commit/c803ee455beb5842f4acc430e2184ba6943315c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c803ee455beb5842f4acc430e2184ba6943315c0/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b28ad654c3f1b2917a2ca4a7373678fdf8da030", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b28ad654c3f1b2917a2ca4a7373678fdf8da030", "html_url": "https://github.com/rust-lang/rust/commit/3b28ad654c3f1b2917a2ca4a7373678fdf8da030"}], "stats": {"total": 91, "additions": 30, "deletions": 61}, "files": [{"sha": "6bb5456f9034f7ee91d3c45b24a8e6055b322a46", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 30, "deletions": 60, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c803ee455beb5842f4acc430e2184ba6943315c0/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c803ee455beb5842f4acc430e2184ba6943315c0/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=c803ee455beb5842f4acc430e2184ba6943315c0", "patch": "@@ -1260,6 +1260,36 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n         return simd_simple_float_intrinsic(\"fma\", in_elem, in_ty, in_len, bx, span, args);\n     }\n \n+    // FIXME: use:\n+    //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Function.h#L182\n+    //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Intrinsics.h#L81\n+    fn llvm_vector_str(elem_ty: ty::Ty, vec_len: usize, no_pointers: usize) -> String {\n+        let p0s: String = \"p0\".repeat(no_pointers);\n+        match elem_ty.sty {\n+            ty::TyInt(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n+            ty::TyUint(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n+            ty::TyFloat(v) => format!(\"v{}{}f{}\", vec_len, p0s, v.bit_width()),\n+            _ => unreachable!(),\n+        }\n+    }\n+\n+    fn llvm_vector_ty(cx: &CodegenCx, elem_ty: ty::Ty, vec_len: usize,\n+                      mut no_pointers: usize) -> Type {\n+        // FIXME: use cx.layout_of(ty).llvm_type() ?\n+        let mut elem_ty = match elem_ty.sty {\n+            ty::TyInt(v) => Type::int_from_ty(cx, v),\n+            ty::TyUint(v) => Type::uint_from_ty(cx, v),\n+            ty::TyFloat(v) => Type::float_from_ty(cx, v),\n+            _ => unreachable!(),\n+        };\n+        while no_pointers > 0 {\n+            elem_ty = elem_ty.ptr_to();\n+            no_pointers -= 1;\n+        }\n+        Type::vector(&elem_ty, vec_len as u64)\n+    }\n+\n+\n     if name == \"simd_gather\"  {\n         // simd_gather(values: <N x T>, pointers: <N x *_ T>,\n         //             mask: <N x i{M}>) -> <N x T>\n@@ -1343,36 +1373,6 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n             (bx.trunc(args[2].immediate(), i1xn), i1xn)\n         };\n \n-        // FIXME: use:\n-        //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Function.h#L182\n-        //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Intrinsics.h#L81\n-        fn llvm_vector_str(elem_ty: ty::Ty, vec_len: usize, no_pointers: usize) -> String {\n-            let p0s: String = \"p0\".repeat(no_pointers);\n-            match elem_ty.sty {\n-                ty::TyInt(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n-                ty::TyUint(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n-                ty::TyFloat(v) => format!(\"v{}{}f{}\", vec_len, p0s, v.bit_width()),\n-                _ => unreachable!(),\n-            }\n-        }\n-\n-        fn llvm_vector_ty(cx: &CodegenCx, elem_ty: ty::Ty, vec_len: usize,\n-                          mut no_pointers: usize) -> Type {\n-            // FIXME: use cx.layout_of(ty).llvm_type() ?\n-            let mut elem_ty = match elem_ty.sty {\n-                ty::TyInt(v) => Type::int_from_ty(cx, v),\n-                ty::TyUint(v) => Type::uint_from_ty(cx, v),\n-                ty::TyFloat(v) => Type::float_from_ty(cx, v),\n-                _ => unreachable!(),\n-            };\n-            while no_pointers > 0 {\n-                elem_ty = elem_ty.ptr_to();\n-                no_pointers -= 1;\n-            }\n-            Type::vector(&elem_ty, vec_len as u64)\n-        }\n-\n-\n         // Type of the vector of pointers:\n         let llvm_pointer_vec_ty = llvm_vector_ty(bx.cx, underlying_ty, in_len, pointer_count);\n         let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count);\n@@ -1472,36 +1472,6 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n \n         let ret_t = Type::void(bx.cx);\n \n-        // FIXME: use:\n-        //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Function.h#L182\n-        //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Intrinsics.h#L81\n-        fn llvm_vector_str(elem_ty: ty::Ty, vec_len: usize, no_pointers: usize) -> String {\n-            let p0s: String = \"p0\".repeat(no_pointers);\n-            match elem_ty.sty {\n-                ty::TyInt(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n-                ty::TyUint(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n-                ty::TyFloat(v) => format!(\"v{}{}f{}\", vec_len, p0s, v.bit_width()),\n-                _ => unreachable!(),\n-            }\n-        }\n-\n-        fn llvm_vector_ty(cx: &CodegenCx, elem_ty: ty::Ty, vec_len: usize,\n-                          mut no_pointers: usize) -> Type {\n-            // FIXME: use cx.layout_of(ty).llvm_type() ?\n-            let mut elem_ty = match elem_ty.sty {\n-                ty::TyInt(v) => Type::int_from_ty(cx, v),\n-                ty::TyUint(v) => Type::uint_from_ty(cx, v),\n-                ty::TyFloat(v) => Type::float_from_ty(cx, v),\n-                _ => unreachable!(),\n-            };\n-            while no_pointers > 0 {\n-                elem_ty = elem_ty.ptr_to();\n-                no_pointers -= 1;\n-            }\n-            Type::vector(&elem_ty, vec_len as u64)\n-        }\n-\n-\n         // Type of the vector of pointers:\n         let llvm_pointer_vec_ty = llvm_vector_ty(bx.cx, underlying_ty, in_len, pointer_count);\n         let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count);"}, {"sha": "fe383f0627d97a99c761ac346f783c79e246e245", "filename": "src/test/run-pass/simd-intrinsic-float-math.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c803ee455beb5842f4acc430e2184ba6943315c0/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-float-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c803ee455beb5842f4acc430e2184ba6943315c0/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-float-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-float-math.rs?ref=c803ee455beb5842f4acc430e2184ba6943315c0", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // ignore-emscripten\n-// error-pattern: panicked\n \n // Test that the simd floating-point math intrinsics produce correct results.\n "}]}