{"sha": "fb4cb5bf4af633ca057a84b995bab3b08333df41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNGNiNWJmNGFmNjMzY2EwNTdhODRiOTk1YmFiM2IwODMzM2RmNDE=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-22T21:57:07Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-22T21:57:07Z"}, "message": "Make size error distinguishable from other errors", "tree": {"sha": "8ea7c2e9364579132f5a6b416a1e07f5bcaf8e25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ea7c2e9364579132f5a6b416a1e07f5bcaf8e25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb4cb5bf4af633ca057a84b995bab3b08333df41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4cb5bf4af633ca057a84b995bab3b08333df41", "html_url": "https://github.com/rust-lang/rust/commit/fb4cb5bf4af633ca057a84b995bab3b08333df41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb4cb5bf4af633ca057a84b995bab3b08333df41/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be415dbeda0ac38ac28028d3622080cd9d55aedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/be415dbeda0ac38ac28028d3622080cd9d55aedc", "html_url": "https://github.com/rust-lang/rust/commit/be415dbeda0ac38ac28028d3622080cd9d55aedc"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "79efd95eb6d744712e877542073ac78f928adb17", "filename": "src/helpers.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb4cb5bf4af633ca057a84b995bab3b08333df41/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4cb5bf4af633ca057a84b995bab3b08333df41/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=fb4cb5bf4af633ca057a84b995bab3b08333df41", "patch": "@@ -412,16 +412,25 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// Helper function to write an OsStr as a null-terminated sequence of bytes, which is what\n-    /// the Unix APIs usually handle.\n-    fn write_os_str_to_c_string(&mut self, os_str: &OsStr, scalar: Scalar<Tag>, size: u64) -> InterpResult<'tcx> {\n+    /// the Unix APIs usually handle. This function returns `Ok(false)` without trying to write if\n+    /// `size` is not large enough to fit the contents of `os_string` plus a null terminator. It\n+    /// returns `Ok(true)` if the writing process was successful. Otherwise it returns an\n+    /// `InterpError`.\n+    fn write_os_str_to_c_string(\n+        &mut self,\n+        os_str: &OsStr,\n+        scalar: Scalar<Tag>,\n+        size: u64\n+    ) -> InterpResult<'tcx, bool> {\n         let bytes = os_str_to_bytes(os_str)?;\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an overflow.\n         if size <= bytes.len() as u64 {\n-            throw_unsup_format!(\"OsString of length {} is too large for destination buffer of size {}\", bytes.len(), size)\n+            return Ok(false);\n         }\n         // FIXME: We should use `Iterator::chain` instead when rust-lang/rust#65704 lands.\n-        self.eval_context_mut().memory.write_bytes(scalar, [bytes, &[0]].concat())\n+        self.eval_context_mut().memory.write_bytes(scalar, [bytes, &[0]].concat())?;\n+        Ok(true)\n     }\n }\n "}, {"sha": "2dc47d74ffb82b6334e303137cda9530ca8336a8", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb4cb5bf4af633ca057a84b995bab3b08333df41/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4cb5bf4af633ca057a84b995bab3b08333df41/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=fb4cb5bf4af633ca057a84b995bab3b08333df41", "patch": "@@ -128,7 +128,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // If we cannot get the current directory, we return null\n         match env::current_dir() {\n             Ok(cwd) => {\n-                if this.write_os_str_to_c_string(&OsString::from(cwd), buf, size).is_ok() {\n+                if this.write_os_str_to_c_string(&OsString::from(cwd), buf, size)? {\n                     return Ok(buf);\n                 }\n                 let erange = this.eval_libc(\"ERANGE\")?;"}]}