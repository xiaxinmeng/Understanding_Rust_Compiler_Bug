{"sha": "e221b24cb6d0a5331bfa04a546cea16f22c41988", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMjFiMjRjYjZkMGE1MzMxYmZhMDRhNTQ2Y2VhMTZmMjJjNDE5ODg=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-09-24T02:13:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-09-24T08:45:49Z"}, "message": "Shrink StatementKind::InlineAsm.\n\nThis shrinks StatementKind from 64 bytes to 48 bytes on 64-bit.", "tree": {"sha": "cfc81641ec3e2e8ca136d7ef06696e159419c682", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfc81641ec3e2e8ca136d7ef06696e159419c682"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e221b24cb6d0a5331bfa04a546cea16f22c41988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e221b24cb6d0a5331bfa04a546cea16f22c41988", "html_url": "https://github.com/rust-lang/rust/commit/e221b24cb6d0a5331bfa04a546cea16f22c41988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e221b24cb6d0a5331bfa04a546cea16f22c41988/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a577f900a9c23806915d2a10b217c9335b1ecf52", "url": "https://api.github.com/repos/rust-lang/rust/commits/a577f900a9c23806915d2a10b217c9335b1ecf52", "html_url": "https://github.com/rust-lang/rust/commit/a577f900a9c23806915d2a10b217c9335b1ecf52"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "6e9f5a7a215f766e039ea72cdf9ff7b7836a9498", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e221b24cb6d0a5331bfa04a546cea16f22c41988", "patch": "@@ -1633,8 +1633,8 @@ pub enum StatementKind<'tcx> {\n     /// Execute a piece of inline Assembly.\n     InlineAsm {\n         asm: Box<InlineAsm>,\n-        outputs: Vec<Place<'tcx>>,\n-        inputs: Vec<Operand<'tcx>>,\n+        outputs: Box<[Place<'tcx>]>,\n+        inputs: Box<[Operand<'tcx>]>,\n     },\n \n     /// Assert the given places to be valid inhabitants of their type.  These statements are"}, {"sha": "aab268c07c4fbf36473610facf7a79aff6daf3f8", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=e221b24cb6d0a5331bfa04a546cea16f22c41988", "patch": "@@ -720,6 +720,16 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n     }\n }\n \n+impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        self.iter().map(|t| t.fold_with(folder)).collect::<Vec<_>>().into_boxed_slice()\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.iter().any(|t| t.visit_with(visitor))\n+    }\n+}\n+\n impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         self.map_bound_ref(|ty| ty.fold_with(folder))"}, {"sha": "ae0a06294bf5625fe2bc24981911b69e294d8505", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e221b24cb6d0a5331bfa04a546cea16f22c41988", "patch": "@@ -528,7 +528,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 ref inputs,\n             } => {\n                 let context = ContextKind::InlineAsm.new(location);\n-                for (o, output) in asm.outputs.iter().zip(outputs) {\n+                for (o, output) in asm.outputs.iter().zip(outputs.iter()) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should\n                         // be encoeded through MIR place derefs instead.\n@@ -555,7 +555,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                         );\n                     }\n                 }\n-                for input in inputs {\n+                for input in inputs.iter() {\n                     self.consume_operand(context, (input, span), flow_state);\n                 }\n             }"}, {"sha": "b755482b49ae845cfa49acc97bcc1735135419b8", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=e221b24cb6d0a5331bfa04a546cea16f22c41988", "patch": "@@ -118,7 +118,7 @@ impl<'cg, 'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cg, 'cx, 'tc\n                 ref inputs,\n             } => {\n                 let context = ContextKind::InlineAsm.new(location);\n-                for (o, output) in asm.outputs.iter().zip(outputs) {\n+                for (o, output) in asm.outputs.iter().zip(outputs.iter()) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should\n                         // be encoeded through MIR place derefs instead.\n@@ -137,7 +137,7 @@ impl<'cg, 'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cg, 'cx, 'tc\n                         );\n                     }\n                 }\n-                for input in inputs {\n+                for input in inputs.iter() {\n                     self.consume_operand(context, input);\n                 }\n             }"}, {"sha": "32f09599ace82fd2e04913a1afa99d3989f8e3b3", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=e221b24cb6d0a5331bfa04a546cea16f22c41988", "patch": "@@ -143,11 +143,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let outputs = outputs\n                     .into_iter()\n                     .map(|output| unpack!(block = this.as_place(block, output)))\n-                    .collect();\n+                    .collect::<Vec<_>>()\n+                    .into_boxed_slice();\n                 let inputs = inputs\n                     .into_iter()\n                     .map(|input| unpack!(block = this.as_local_operand(block, input)))\n-                    .collect();\n+                    .collect::<Vec<_>>()\n+                    .into_boxed_slice();\n                 this.cfg.push(\n                     block,\n                     Statement {"}, {"sha": "2884b15ca47db2bdce009f5380b9d83c81861039", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e221b24cb6d0a5331bfa04a546cea16f22c41988/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=e221b24cb6d0a5331bfa04a546cea16f22c41988", "patch": "@@ -290,7 +290,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                         self.gather_init(output, InitKind::Deep);\n                     }\n                 }\n-                for input in inputs {\n+                for input in inputs.iter() {\n                     self.gather_operand(input);\n                 }\n             }"}]}