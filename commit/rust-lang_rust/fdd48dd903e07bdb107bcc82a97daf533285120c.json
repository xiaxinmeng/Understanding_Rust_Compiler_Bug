{"sha": "fdd48dd903e07bdb107bcc82a97daf533285120c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZDQ4ZGQ5MDNlMDdiZGIxMDdiY2M4MmE5N2RhZjUzMzI4NTEyMGM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-25T22:22:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-25T22:31:02Z"}, "message": "Respect privacy qualifiers on view items, add to import resolutions.", "tree": {"sha": "d5fc5ac25480710d62d8627375a54020a7b48c3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5fc5ac25480710d62d8627375a54020a7b48c3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd48dd903e07bdb107bcc82a97daf533285120c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd48dd903e07bdb107bcc82a97daf533285120c", "html_url": "https://github.com/rust-lang/rust/commit/fdd48dd903e07bdb107bcc82a97daf533285120c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd48dd903e07bdb107bcc82a97daf533285120c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12a0401d84dc033fc4e03484b334de3cb20bab30", "url": "https://api.github.com/repos/rust-lang/rust/commits/12a0401d84dc033fc4e03484b334de3cb20bab30", "html_url": "https://github.com/rust-lang/rust/commit/12a0401d84dc033fc4e03484b334de3cb20bab30"}], "stats": {"total": 144, "additions": 90, "deletions": 54}, "files": [{"sha": "afb1cbc36f4bbecf5dbb7a221ce05079b4896e3b", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 76, "deletions": 54, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -167,8 +167,8 @@ enum CaptureClause {\n type ResolveVisitor = vt<()>;\n \n enum ModuleDef {\n-    NoModuleDef,            // Does not define a module.\n-    ModuleDef(@Module),     // Defines a module.\n+    NoModuleDef,                     // Does not define a module.\n+    ModuleDef(Privacy, @Module),     // Defines a module.\n }\n \n impl ModuleDef {\n@@ -333,15 +333,18 @@ fn Rib(kind: RibKind) -> Rib {\n \n /// One import directive.\n struct ImportDirective {\n+    privacy: Privacy,\n     module_path: @DVec<Atom>,\n     subclass: @ImportDirectiveSubclass,\n     span: span,\n }\n \n-fn ImportDirective(module_path: @DVec<Atom>,\n+fn ImportDirective(privacy: Privacy,\n+                   module_path: @DVec<Atom>,\n                    subclass: @ImportDirectiveSubclass,\n                    span: span) -> ImportDirective {\n     ImportDirective {\n+        privacy: privacy,\n         module_path: module_path,\n         subclass: subclass,\n         span: span\n@@ -362,6 +365,7 @@ fn Target(target_module: @Module, bindings: @NameBindings) -> Target {\n }\n \n struct ImportResolution {\n+    privacy: Privacy,\n     span: span,\n \n     // The number of outstanding references to this name. When this reaches\n@@ -377,8 +381,10 @@ struct ImportResolution {\n     mut used: bool,\n }\n \n-fn ImportResolution(span: span) -> ImportResolution {\n+fn ImportResolution(privacy: Privacy,\n+                    span: span) -> ImportResolution {\n     ImportResolution {\n+        privacy: privacy,\n         span: span,\n         outstanding_references: 0u,\n         module_target: None,\n@@ -533,13 +539,14 @@ struct NameBindings {\n impl NameBindings {\n \n     /// Creates a new module in this set of name bindings.\n-    fn define_module(parent_link: ParentLink,\n+    fn define_module(privacy: Privacy,\n+                     parent_link: ParentLink,\n                      def_id: Option<def_id>,\n                      legacy_exports: bool,\n                      sp: span) {\n         if self.module_def.is_none() {\n             let module_ = @Module(parent_link, def_id, legacy_exports);\n-            self.module_def = ModuleDef(module_);\n+            self.module_def = ModuleDef(privacy, module_);\n             self.module_span = Some(sp);\n         }\n     }\n@@ -560,7 +567,7 @@ impl NameBindings {\n     fn get_module_if_available() -> Option<@Module> {\n         match self.module_def {\n             NoModuleDef         => return None,\n-            ModuleDef(module_)  => return Some(module_)\n+            ModuleDef(_privacy, module_)  => return Some(module_)\n         }\n     }\n \n@@ -574,7 +581,7 @@ impl NameBindings {\n                 fail\n                     ~\"get_module called on a node with no module definition!\";\n             }\n-            ModuleDef(module_) => {\n+            ModuleDef(_, module_) => {\n                 return module_;\n             }\n         }\n@@ -599,12 +606,12 @@ impl NameBindings {\n           ValueNS => return self.value_def,\n           ModuleNS => match self.module_def {\n             NoModuleDef => return None,\n-            ModuleDef(module_) =>\n+            ModuleDef(privacy, module_) =>\n                 match module_.def_id {\n                     None => return None,\n                     Some(def_id) => {\n                         return Some(Definition {\n-                            privacy: Public,\n+                            privacy: privacy,\n                             def: def_mod(def_id)\n                         });\n                     }\n@@ -703,7 +710,8 @@ fn Resolver(session: session, lang_items: LanguageItems,\n \n     let graph_root = @NameBindings();\n \n-    (*graph_root).define_module(NoParentLink,\n+    (*graph_root).define_module(Public,\n+                                NoParentLink,\n                                 Some({ crate: 0, node: 0 }),\n                                 has_legacy_export_attr(crate.node.attrs),\n                                 crate.span);\n@@ -991,6 +999,7 @@ impl Resolver {\n         let legacy = match parent {\n           ModuleReducedGraphParent(m) => m.legacy_exports\n         };\n+        let privacy = self.visibility_to_privacy(item.vis, legacy);\n \n         match item.node {\n             item_mod(module_) => {\n@@ -1000,8 +1009,8 @@ impl Resolver {\n \n                 let parent_link = self.get_parent_link(new_parent, atom);\n                 let def_id = { crate: 0, node: item.id };\n-              (*name_bindings).define_module(parent_link, Some(def_id),\n-                                             legacy, sp);\n+              (*name_bindings).define_module(privacy, parent_link,\n+                                             Some(def_id), legacy, sp);\n \n                 let new_parent =\n                     ModuleReducedGraphParent((*name_bindings).get_module());\n@@ -1017,8 +1026,8 @@ impl Resolver {\n \n                   let parent_link = self.get_parent_link(new_parent, atom);\n                   let def_id = { crate: 0, node: item.id };\n-                  (*name_bindings).define_module(parent_link, Some(def_id),\n-                                                 legacy, sp);\n+                  (*name_bindings).define_module(privacy, parent_link,\n+                                                 Some(def_id), legacy, sp);\n \n                   ModuleReducedGraphParent((*name_bindings).get_module())\n                 }\n@@ -1036,17 +1045,14 @@ impl Resolver {\n                                                       ~[ValueNS], sp);\n \n                 (*name_bindings).define_value\n-                    (self.visibility_to_privacy(item.vis, legacy),\n-                     def_const(local_def(item.id)),\n-                     sp);\n+                    (privacy, def_const(local_def(item.id)), sp);\n             }\n             item_fn(_, purity, _, _) => {\n               let (name_bindings, new_parent) = self.add_child(atom, parent,\n                                                         ~[ValueNS], sp);\n \n                 let def = def_fn(local_def(item.id), purity);\n-                (*name_bindings).define_value\n-                    (self.visibility_to_privacy(item.vis, legacy), def, sp);\n+                (*name_bindings).define_value(privacy, def, sp);\n                 visit_item(item, new_parent, visitor);\n             }\n \n@@ -1056,9 +1062,7 @@ impl Resolver {\n                                                       ~[TypeNS], sp);\n \n                 (*name_bindings).define_type\n-                    (self.visibility_to_privacy(item.vis, legacy),\n-                     def_ty(local_def(item.id)),\n-                     sp);\n+                    (privacy, def_ty(local_def(item.id)), sp);\n             }\n \n             item_enum(enum_definition, _) => {\n@@ -1067,9 +1071,7 @@ impl Resolver {\n                                                                ~[TypeNS], sp);\n \n                 (*name_bindings).define_type\n-                    (self.visibility_to_privacy(item.vis, legacy),\n-                     def_ty(local_def(item.id)),\n-                     sp);\n+                    (privacy, def_ty(local_def(item.id)), sp);\n \n                 for enum_definition.variants.each |variant| {\n                     self.build_reduced_graph_for_variant(*variant,\n@@ -1088,19 +1090,14 @@ impl Resolver {\n                             self.add_child(atom, parent, ~[TypeNS], sp);\n \n                         (*name_bindings).define_type\n-                            (self.visibility_to_privacy(item.vis, legacy),\n-                             def_ty(local_def(item.id)),\n-                             sp);\n+                            (privacy, def_ty(local_def(item.id)), sp);\n                         new_parent\n                     }\n                     Some(ctor) => {\n                         let (name_bindings, new_parent) =\n                             self.add_child(atom, parent, ~[ValueNS, TypeNS],\n                                            sp);\n \n-                        let privacy = self.visibility_to_privacy(item.vis,\n-                                                                 legacy);\n-\n                         (*name_bindings).define_type\n                             (privacy, def_ty(local_def(item.id)), sp);\n \n@@ -1156,7 +1153,7 @@ impl Resolver {\n                 self.trait_info.insert(def_id, method_names);\n \n                 (*name_bindings).define_type\n-                    (self.visibility_to_privacy(item.vis, legacy),\n+                    (privacy,\n                      def_ty(def_id),\n                      sp);\n                 visit_item(item, new_parent, visitor);\n@@ -1218,6 +1215,10 @@ impl Resolver {\n                                          parent: ReducedGraphParent,\n                                          &&_visitor: vt<ReducedGraphParent>) {\n \n+        let legacy = match parent {\n+          ModuleReducedGraphParent(m) => m.legacy_exports\n+        };\n+        let privacy = self.visibility_to_privacy(view_item.vis, legacy);\n         match view_item.node {\n             view_item_import(view_paths) => {\n                 for view_paths.each |view_path| {\n@@ -1259,7 +1260,8 @@ impl Resolver {\n                             let subclass = @SingleImport(binding,\n                                                          source_ident,\n                                                          ns);\n-                            self.build_import_directive(module_,\n+                            self.build_import_directive(privacy,\n+                                                        module_,\n                                                         module_path,\n                                                         subclass,\n                                                         view_path.span);\n@@ -1270,14 +1272,16 @@ impl Resolver {\n                                 let subclass = @SingleImport(name,\n                                                              name,\n                                                              AnyNS);\n-                                self.build_import_directive(module_,\n+                                self.build_import_directive(privacy,\n+                                                            module_,\n                                                             module_path,\n                                                             subclass,\n                                                             view_path.span);\n                             }\n                         }\n                         view_path_glob(_, _) => {\n-                            self.build_import_directive(module_,\n+                            self.build_import_directive(privacy,\n+                                                        module_,\n                                                         module_path,\n                                                         @GlobImport,\n                                                         view_path.span);\n@@ -1356,7 +1360,8 @@ impl Resolver {\n                         let parent_link = ModuleParentLink\n                             (self.get_module_from_parent(new_parent), name);\n \n-                        (*child_name_bindings).define_module(parent_link,\n+                        (*child_name_bindings).define_module(privacy,\n+                                                             parent_link,\n                                                              Some(def_id),\n                                                              false,\n                                                              view_item.span);\n@@ -1440,7 +1445,8 @@ impl Resolver {\n \n                 match modules.find(def_id) {\n                   None => {\n-                    child_name_bindings.define_module(parent_link,\n+                    child_name_bindings.define_module(Public,\n+                                                      parent_link,\n                                                       Some(def_id),\n                                                       false,\n                                                       dummy_sp());\n@@ -1452,7 +1458,7 @@ impl Resolver {\n                     // avoid creating cycles in the\n                     // module graph.\n \n-                    let resolution = @ImportResolution(dummy_sp());\n+                    let resolution = @ImportResolution(Public, dummy_sp());\n                     resolution.outstanding_references = 0;\n \n                     match existing_module.parent_link {\n@@ -1476,7 +1482,7 @@ impl Resolver {\n                   }\n                 }\n               }\n-              ModuleDef(module_) => {\n+              ModuleDef(_priv, module_) => {\n                 debug!(\"(building reduced graph for \\\n                         external crate) already created \\\n                         module\");\n@@ -1585,11 +1591,12 @@ impl Resolver {\n                                 autovivifying %s\", *ident_str);\n                         let parent_link = self.get_parent_link(new_parent,\n                                                                ident);\n-                        (*child_name_bindings).define_module(parent_link,\n-                                                       None, false,\n+                        (*child_name_bindings).define_module(Public,\n+                                                             parent_link,\n+                                                             None, false,\n                                                              dummy_sp());\n                     }\n-                    ModuleDef(_) => { /* Fall through. */ }\n+                    ModuleDef(*) => { /* Fall through. */ }\n                 }\n \n                 current_module = (*child_name_bindings).get_module();\n@@ -1625,12 +1632,14 @@ impl Resolver {\n     }\n \n     /// Creates and adds an import directive to the given module.\n-    fn build_import_directive(module_: @Module,\n+    fn build_import_directive(privacy: Privacy,\n+                              module_: @Module,\n                               module_path: @DVec<Atom>,\n                               subclass: @ImportDirectiveSubclass,\n                               span: span) {\n \n-        let directive = @ImportDirective(module_path, subclass, span);\n+        let directive = @ImportDirective(privacy, module_path,\n+                                         subclass, span);\n         module_.imports.push(directive);\n \n         // Bump the reference count on the name. Or, if this is a glob, set\n@@ -1643,7 +1652,7 @@ impl Resolver {\n                         resolution.outstanding_references += 1u;\n                     }\n                     None => {\n-                        let resolution = @ImportResolution(span);\n+                        let resolution = @ImportResolution(privacy, span);\n                         resolution.outstanding_references = 1u;\n                         module_.import_resolutions.insert(target, resolution);\n                     }\n@@ -1829,8 +1838,9 @@ impl Resolver {\n                         }\n                         GlobImport => {\n                             let span = import_directive.span;\n+                            let p = import_directive.privacy;\n                             resolution_result =\n-                                self.resolve_glob_import(module_,\n+                                self.resolve_glob_import(p, module_,\n                                                          containing_module,\n                                                          span);\n                         }\n@@ -2196,7 +2206,8 @@ impl Resolver {\n      * succeeds or bails out (as importing * from an empty module or a module\n      * that exports nothing is valid).\n      */\n-    fn resolve_glob_import(module_: @Module,\n+    fn resolve_glob_import(privacy: Privacy,\n+                           module_: @Module,\n                            containing_module: @Module,\n                            span: span)\n                         -> ResolveResult<()> {\n@@ -2236,7 +2247,8 @@ impl Resolver {\n                 None => {\n                     // Simple: just copy the old import resolution.\n                     let new_import_resolution =\n-                        @ImportResolution(target_import_resolution.span);\n+                        @ImportResolution(privacy,\n+                                          target_import_resolution.span);\n                     new_import_resolution.module_target =\n                         copy target_import_resolution.module_target;\n                     new_import_resolution.value_target =\n@@ -2294,7 +2306,8 @@ impl Resolver {\n             match module_.import_resolutions.find(atom) {\n                 None => {\n                     // Create a new import resolution from this child.\n-                    dest_import_resolution = @ImportResolution(span);\n+                    dest_import_resolution = @ImportResolution(privacy,\n+                                                               span);\n                     module_.import_resolutions.insert\n                         (atom, dest_import_resolution);\n                 }\n@@ -2372,7 +2385,7 @@ impl Resolver {\n                                                            str_of(name)));\n                             return Failed;\n                         }\n-                        ModuleDef(copy module_) => {\n+                        ModuleDef(_, copy module_) => {\n                             search_module = module_;\n                         }\n                     }\n@@ -2528,7 +2541,7 @@ impl Resolver {\n                                 wasn't actually a module!\");\n                         return Failed;\n                     }\n-                    ModuleDef(module_) => {\n+                    ModuleDef(_, module_) => {\n                         return Success(module_);\n                     }\n                 }\n@@ -2892,6 +2905,11 @@ impl Resolver {\n         for [ModuleNS, TypeNS, ValueNS].each |ns| {\n             match namebindings.def_for_namespace(*ns) {\n                 Some(d) if d.privacy == Public => {\n+                    debug!(\"(computing exports) YES: %s '%s' \\\n+                            => %?\",\n+                           if reexport { ~\"reexport\" } else { ~\"export\"},\n+                           self.session.str_of(atom),\n+                           def_id_of_def(d.def));\n                     vec::push(*exports2,  Export2 {\n                         reexport: reexport,\n                         name: self.session.str_of(atom),\n@@ -2906,6 +2924,8 @@ impl Resolver {\n     fn add_exports_for_module(exports2: &mut ~[Export2], module_: @Module) {\n \n         for module_.children.each_ref |atom, namebindings| {\n+            debug!(\"(computing exports) maybe export '%s'\",\n+                   self.session.str_of(*atom));\n             self.add_exports_of_namebindings(exports2, *atom,\n                                              *namebindings, false)\n         }\n@@ -2914,6 +2934,8 @@ impl Resolver {\n             for [ModuleNS, TypeNS, ValueNS].each |ns| {\n                 match importresolution.target_for_namespace(*ns) {\n                     Some(target) => {\n+                        debug!(\"(computing exports) maybe reexport '%s'\",\n+                               self.session.str_of(*atom));\n                         self.add_exports_of_namebindings(exports2, *atom,\n                                                          target.bindings,\n                                                          true)\n@@ -2936,7 +2958,7 @@ impl Resolver {\n                         // Nothing to do.\n                     }\n                     ChildNameDefinition(target_def) => {\n-                        debug!(\"(computing exports) found child export '%s' \\\n+                        debug!(\"(computing exports) legacy export '%s' \\\n                                 for %?\",\n                                self.session.str_of(name),\n                                module_.def_id);\n@@ -2947,7 +2969,7 @@ impl Resolver {\n                         });\n                     }\n                     ImportNameDefinition(target_def) => {\n-                        debug!(\"(computing exports) found reexport '%s' for \\\n+                        debug!(\"(computing exports) legacy reexport '%s' for \\\n                                 %?\",\n                                self.session.str_of(name),\n                                module_.def_id);"}, {"sha": "c021a4e28545a3fa12b54dcd6683829459b69eb0", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -12,6 +12,7 @@\n #[no_core];\n \n #[legacy_modes];\n+#[legacy_exports];\n \n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];"}, {"sha": "bb286f956bcdc6de76070953e216ac6210616f66", "filename": "src/test/auxiliary/cci_class.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class.rs?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -1,3 +1,4 @@\n+#[legacy_exports];\n mod kitties {\n     #[legacy_exports];\n "}, {"sha": "186f021a81f983d8fd6c6df6470499c0d6e1dc63", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_exports];\n+\n mod kitties {\n     #[legacy_exports];\n "}, {"sha": "dbae452a8f906ddb52b60ef7014743f1dcde84c3", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_exports];\n+\n mod kitties {\n     #[legacy_exports];\n "}, {"sha": "436f92e5e78131e832e4a0a8f03d57d889660ee6", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -1,3 +1,4 @@\n+#[legacy_exports];\n mod kitties {\n     #[legacy_exports];\n "}, {"sha": "6cf86aff055e983a0e6fce79ad29b269651b9cd7", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_exports];\n+\n mod kitties {\n     #[legacy_exports];\n "}, {"sha": "288fe66dd2053458e2ae7fb599aa6a896129ee67", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_exports];\n+\n use to_str::*;\n use to_str::ToStr;\n "}, {"sha": "e7bf211d3f0e1e9439ac42200bc94f057561a652", "filename": "src/test/auxiliary/crateresolve7x.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -3,6 +3,7 @@\n // aux-build:crateresolve_calories-2.rs\n \n // These both have the same version but differ in other metadata\n+#[legacy_exports];\n mod a {\n     #[legacy_exports];\n     extern mod cr_1 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"100\");"}, {"sha": "bb6d425de34488a46478484c133dc5d357f1d9ca", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -1,4 +1,5 @@\n #[link(name=\"foreign_lib\", vers=\"0.0\")];\n+#[legacy_exports];\n \n extern mod rustrt {\n     #[legacy_exports];"}, {"sha": "d774669cd13268311dc69c2166abe36192e34505", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd48dd903e07bdb107bcc82a97daf533285120c/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=fdd48dd903e07bdb107bcc82a97daf533285120c", "patch": "@@ -1,5 +1,6 @@\n #[link(name=\"socketlib\", vers=\"0.0\")];\n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n mod socket {\n     #[legacy_exports];"}]}