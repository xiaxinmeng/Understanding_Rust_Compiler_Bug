{"sha": "0a0525e3664dfb659aae06c146a4336a878e2b05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMDUyNWUzNjY0ZGZiNjU5YWFlMDZjMTQ2YTQzMzZhODc4ZTJiMDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-29T02:04:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-05T09:36:02Z"}, "message": "Pass around a pointer to the ty::method rather than the individual bits of info", "tree": {"sha": "6cfd305dfe3ad6287fe5c1c314449484f6f0ccfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cfd305dfe3ad6287fe5c1c314449484f6f0ccfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0525e3664dfb659aae06c146a4336a878e2b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0525e3664dfb659aae06c146a4336a878e2b05", "html_url": "https://github.com/rust-lang/rust/commit/0a0525e3664dfb659aae06c146a4336a878e2b05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0525e3664dfb659aae06c146a4336a878e2b05/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569596573a2f90d52c7f7610d8c7c637dc587f0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/569596573a2f90d52c7f7610d8c7c637dc587f0a", "html_url": "https://github.com/rust-lang/rust/commit/569596573a2f90d52c7f7610d8c7c637dc587f0a"}], "stats": {"total": 132, "additions": 65, "deletions": 67}, "files": [{"sha": "de14266573af9e42f3599a632cfa008ca10a6df4", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a0525e3664dfb659aae06c146a4336a878e2b05/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0525e3664dfb659aae06c146a4336a878e2b05/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=0a0525e3664dfb659aae06c146a4336a878e2b05", "patch": "@@ -238,8 +238,7 @@ pub fn trans_fn_ref_with_vtables(\n \n     // Modify the def_id if this is a default method; we want to be\n     // monomorphizing the trait's code.\n-    let (def_id, opt_impl_did) =\n-            match tcx.provided_method_sources.find(&def_id) {\n+    let (def_id, opt_impl_did) = match tcx.provided_method_sources.find(&def_id) {\n         None => (def_id, None),\n         Some(source) => (source.method_id, Some(source.impl_id))\n     };"}, {"sha": "feab9945fc4c351f9794fe7aec9cfe7f306b2fbc", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a0525e3664dfb659aae06c146a4336a878e2b05/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0525e3664dfb659aae06c146a4336a878e2b05/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=0a0525e3664dfb659aae06c146a4336a878e2b05", "patch": "@@ -376,7 +376,8 @@ pub fn method_with_name(ccx: @CrateContext, impl_id: ast::def_id,\n     }\n }\n \n-pub fn method_with_name_or_default(ccx: @CrateContext, impl_id: ast::def_id,\n+pub fn method_with_name_or_default(ccx: @CrateContext,\n+                                   impl_id: ast::def_id,\n                                    name: ast::ident) -> ast::def_id {\n     if impl_id.crate == ast::local_crate {\n         match *ccx.tcx.items.get(&impl_id.node) {"}, {"sha": "e2d9a8a20c7903de7fc99b7d4c3955b2088bfaf0", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 53, "deletions": 61, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/0a0525e3664dfb659aae06c146a4336a878e2b05/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0525e3664dfb659aae06c146a4336a878e2b05/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=0a0525e3664dfb659aae06c146a4336a878e2b05", "patch": "@@ -176,13 +176,7 @@ pub struct LookupContext<'self> {\n pub struct Candidate {\n     rcvr_ty: ty::t,\n     rcvr_substs: ty::substs,\n-    explicit_self: ast::self_ty_,\n-\n-    // FIXME #3446---these two fields should be easily derived from\n-    // origin, yet are not\n-    num_method_tps: uint,\n-    self_mode: ast::rmode,\n-\n+    method_ty: @ty::method,\n     origin: method_origin,\n }\n \n@@ -474,7 +468,7 @@ pub impl<'self> LookupContext<'self> {\n                         }\n                     }\n                 };\n-                let method = &trait_methods[pos];\n+                let method = trait_methods[pos];\n \n                 let (rcvr_ty, rcvr_substs) =\n                     self.create_rcvr_ty_and_substs_for_method(\n@@ -486,9 +480,7 @@ pub impl<'self> LookupContext<'self> {\n                 let cand = Candidate {\n                     rcvr_ty: rcvr_ty,\n                     rcvr_substs: rcvr_substs,\n-                    explicit_self: method.self_ty,\n-                    num_method_tps: method.tps.len(),\n-                    self_mode: get_mode_from_self_type(method.self_ty),\n+                    method_ty: method,\n                     origin: method_param(\n                         method_param {\n                             trait_id: init_trait_id,\n@@ -520,7 +512,7 @@ pub impl<'self> LookupContext<'self> {\n             Some(i) => i,\n             None => { return; } // no method with the right name\n         };\n-        let method = &ms[index];\n+        let method = ms[index];\n \n         /* FIXME(#3157) we should transform the vstore in accordance\n            with the self type\n@@ -554,9 +546,7 @@ pub impl<'self> LookupContext<'self> {\n         self.inherent_candidates.push(Candidate {\n             rcvr_ty: rcvr_ty,\n             rcvr_substs: rcvr_substs,\n-            explicit_self: method.self_ty,\n-            num_method_tps: method.tps.len(),\n-            self_mode: get_mode_from_self_type(method.self_ty),\n+            method_ty: method,\n             origin: method_trait(did, index, store)\n         });\n     }\n@@ -565,63 +555,65 @@ pub impl<'self> LookupContext<'self> {\n                                           self_ty: ty::t,\n                                           did: def_id,\n                                           substs: &ty::substs) {\n+        struct MethodInfo {\n+            method_ty: @ty::method,\n+            trait_def_id: ast::def_id,\n+            index: uint\n+        }\n+\n         let tcx = self.tcx();\n         // First, try self methods\n-        let mut method = None;\n+        let mut method_info: Option<MethodInfo> = None;\n         let methods = ty::trait_methods(tcx, did);\n-        let mut index = None;\n-        let mut trait_did = None;\n         match vec::position(*methods, |m| m.ident == self.m_name) {\n             Some(i) => {\n-                index = Some(i);\n-                trait_did = Some(did);\n-                method = Some((methods[i].self_ty, methods[i].tps.len()));\n+                method_info = Some(MethodInfo {\n+                    method_ty: methods[i],\n+                    index: i,\n+                    trait_def_id: did\n+                });\n             }\n             None => ()\n         }\n         // No method found yet? Check each supertrait\n-        if method.is_none() {\n+        if method_info.is_none() {\n             for ty::trait_supertraits(tcx, did).each() |trait_ref| {\n                 let supertrait_methods =\n                     ty::trait_methods(tcx, trait_ref.def_id);\n                 match vec::position(*supertrait_methods,\n                                     |m| m.ident == self.m_name) {\n                     Some(i) => {\n-                        index = Some(i);\n-                        trait_did = Some(trait_ref.def_id);\n-                        method = Some((supertrait_methods[i].self_ty,\n-                                       supertrait_methods[i].tps.len()));\n+                        method_info = Some(MethodInfo {\n+                            method_ty: supertrait_methods[i],\n+                            index: i,\n+                            trait_def_id: trait_ref.def_id\n+                        });\n                         break;\n                     }\n                     None => ()\n                 }\n             }\n         }\n-        match (method, index, trait_did) {\n-            (Some((method_self_ty, method_num_tps)),\n-             Some(index), Some(trait_did)) => {\n-\n+        match method_info {\n+            Some(ref info) => {\n                 // We've found a method -- return it\n-                let rcvr_substs = substs { self_ty: Some(self_ty),\n+                let rcvr_substs = substs {self_ty: Some(self_ty),\n                                           ..copy *substs };\n                 let (rcvr_ty, rcvr_substs) =\n                     self.create_rcvr_ty_and_substs_for_method(\n-                        method_self_ty,\n+                        info.method_ty.self_ty,\n                         self_ty,\n                         rcvr_substs,\n                         TransformTypeNormally);\n-                let origin = if trait_did == did {\n-                    method_self(trait_did, index)\n-                }\n-                else {\n-                    method_super(trait_did, index)\n+                let origin = if did == info.trait_def_id {\n+                    method_self(info.trait_def_id, info.index)\n+                } else {\n+                    method_super(info.trait_def_id, info.index)\n                 };\n                 self.inherent_candidates.push(Candidate {\n                     rcvr_ty: rcvr_ty,\n                     rcvr_substs: rcvr_substs,\n-                    explicit_self: method_self_ty,\n-                    num_method_tps: method_num_tps,\n-                    self_mode: get_mode_from_self_type(method_self_ty),\n+                    method_ty: info.method_ty,\n                     origin: origin\n                 });\n             }\n@@ -653,7 +645,7 @@ pub impl<'self> LookupContext<'self> {\n             }\n         };\n \n-        let method = &impl_info.methods[idx];\n+        let method = ty::method(self.tcx(), impl_info.methods[idx].did);\n \n         // determine the `self` of the impl with fresh\n         // variables for each parameter:\n@@ -669,18 +661,16 @@ pub impl<'self> LookupContext<'self> {\n \n         let (impl_ty, impl_substs) =\n             self.create_rcvr_ty_and_substs_for_method(\n-                method.self_type,\n+                method.self_ty,\n                 impl_ty,\n                 impl_substs,\n                 TransformTypeNormally);\n \n         candidates.push(Candidate {\n             rcvr_ty: impl_ty,\n             rcvr_substs: impl_substs,\n-            explicit_self: method.self_type,\n-            num_method_tps: method.n_tps,\n-            self_mode: get_mode_from_self_type(method.self_type),\n-            origin: method_static(method.did)\n+            method_ty: method,\n+            origin: method_static(method.def_id)\n         });\n     }\n \n@@ -701,6 +691,9 @@ pub impl<'self> LookupContext<'self> {\n             debug!(\"(pushing candidates from provided methods) adding \\\n                     candidate\");\n \n+            let method = ty::method(self.tcx(),\n+                                    provided_method_info.method_info.did);\n+\n             // XXX: Needs to support generics.\n             let dummy_substs = substs {\n                 self_r: None,\n@@ -709,18 +702,15 @@ pub impl<'self> LookupContext<'self> {\n             };\n             let (impl_ty, impl_substs) =\n                 self.create_rcvr_ty_and_substs_for_method(\n-                    provided_method_info.method_info.self_type,\n+                    method.self_ty,\n                     self_ty,\n                     dummy_substs,\n                     TransformTypeNormally);\n \n             candidates.push(Candidate {\n                 rcvr_ty: impl_ty,\n                 rcvr_substs: impl_substs,\n-                explicit_self: provided_method_info.method_info.self_type,\n-                num_method_tps: provided_method_info.method_info.n_tps,\n-                self_mode: get_mode_from_self_type(\n-                    provided_method_info.method_info.self_type),\n+                method_ty: method,\n                 origin: method_static(provided_method_info.method_info.did)\n             });\n         }\n@@ -1126,20 +1116,21 @@ pub impl<'self> LookupContext<'self> {\n         // If they were not explicitly supplied, just construct fresh\n         // type variables.\n         let num_supplied_tps = self.supplied_tps.len();\n+        let num_method_tps = candidate.method_ty.tps.len();\n         let m_substs = {\n             if num_supplied_tps == 0u {\n-                self.fcx.infcx().next_ty_vars(candidate.num_method_tps)\n-            } else if candidate.num_method_tps == 0u {\n+                self.fcx.infcx().next_ty_vars(num_method_tps)\n+            } else if num_method_tps == 0u {\n                 tcx.sess.span_err(\n                     self.expr.span,\n                     ~\"this method does not take type parameters\");\n-                self.fcx.infcx().next_ty_vars(candidate.num_method_tps)\n-            } else if num_supplied_tps != candidate.num_method_tps {\n+                self.fcx.infcx().next_ty_vars(num_method_tps)\n+            } else if num_supplied_tps != num_method_tps {\n                 tcx.sess.span_err(\n                     self.expr.span,\n                     ~\"incorrect number of type \\\n                      parameters given for this method\");\n-                self.fcx.infcx().next_ty_vars(candidate.num_method_tps)\n+                self.fcx.infcx().next_ty_vars(num_method_tps)\n             } else {\n                 self.supplied_tps.to_vec()\n             }\n@@ -1178,14 +1169,16 @@ pub impl<'self> LookupContext<'self> {\n         let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {sig: fn_sig, ..bare_fn_ty});\n         debug!(\"after replacing bound regions, fty=%s\", self.ty_to_str(fty));\n \n+        let self_mode = get_mode_from_self_type(candidate.method_ty.self_ty);\n+\n         self.fcx.write_ty(self.callee_id, fty);\n         self.fcx.write_substs(self.callee_id, all_substs);\n         method_map_entry {\n             self_arg: arg {\n-                mode: ast::expl(candidate.self_mode),\n+                mode: ast::expl(self_mode),\n                 ty: candidate.rcvr_ty,\n             },\n-            explicit_self: candidate.explicit_self,\n+            explicit_self: candidate.method_ty.self_ty,\n             origin: candidate.origin,\n         }\n     }\n@@ -1217,7 +1210,7 @@ pub impl<'self> LookupContext<'self> {\n                   self-type through a boxed trait\");\n         }\n \n-        if candidate.num_method_tps > 0 {\n+        if candidate.method_ty.tps.len() > 0 {\n             self.tcx().sess.span_err(\n                 self.expr.span,\n                 ~\"cannot call a generic method through a boxed trait\");\n@@ -1334,10 +1327,9 @@ pub impl<'self> LookupContext<'self> {\n     }\n \n     fn cand_to_str(&self, cand: &Candidate) -> ~str {\n-        fmt!(\"Candidate(rcvr_ty=%s, rcvr_substs=%s, self_mode=%?, origin=%?)\",\n+        fmt!(\"Candidate(rcvr_ty=%s, rcvr_substs=%s, origin=%?)\",\n              self.ty_to_str(cand.rcvr_ty),\n              ty::substs_to_str(self.tcx(), &cand.rcvr_substs),\n-             cand.self_mode,\n              cand.origin)\n     }\n "}, {"sha": "560fcb8c9209fb9c8fbd49edfc1086122dfb171a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a0525e3664dfb659aae06c146a4336a878e2b05/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0525e3664dfb659aae06c146a4336a878e2b05/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0a0525e3664dfb659aae06c146a4336a878e2b05", "patch": "@@ -2125,7 +2125,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n     match expr.node {\n       ast::expr_vstore(ev, vst) => {\n         let typ = match ev.node {\n-          ast::expr_lit(@codemap::spanned { node: ast::lit_str(s), _ }) => {\n+          ast::expr_lit(@codemap::spanned { node: ast::lit_str(_), _ }) => {\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             ty::mk_estr(tcx, tt)\n           }\n@@ -2162,7 +2162,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             }\n           }\n           ast::expr_repeat(element, count_expr, mutbl) => {\n-            let count = ty::eval_repeat_count(tcx, count_expr);\n+            let _ = ty::eval_repeat_count(tcx, count_expr);\n             check_expr_with_hint(fcx, count_expr, ty::mk_uint(tcx));\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             let mutability = match vst {"}, {"sha": "22b6926e9f0c5c78147fac11a3289bc584a35e11", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a0525e3664dfb659aae06c146a4336a878e2b05/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0525e3664dfb659aae06c146a4336a878e2b05/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=0a0525e3664dfb659aae06c146a4336a878e2b05", "patch": "@@ -333,10 +333,16 @@ pub impl CoherenceChecker {\n             let new_id = parse::next_node_id(tcx.sess.parse_sess);\n             let new_did = local_def(new_id);\n \n+            let new_method_ty = @ty::method {\n+                def_id: new_did,\n+                ..copy *trait_method\n+            };\n+\n             // XXX: Perform substitutions.\n             let new_polytype = ty::lookup_item_type(tcx,\n                                                     trait_method.def_id);\n             tcx.tcache.insert(new_did, new_polytype);\n+            tcx.methods.insert(new_did, new_method_ty);\n \n             // Pair the new synthesized ID up with the\n             // ID of the method.\n@@ -498,7 +504,7 @@ pub impl CoherenceChecker {\n \n     fn each_provided_trait_method(&self,\n             trait_did: ast::def_id,\n-            f: &fn(x: &ty::method) -> bool) {\n+            f: &fn(x: @ty::method) -> bool) {\n         // Make a list of all the names of the provided methods.\n         // XXX: This is horrible.\n         let mut provided_method_idents = HashSet::new();"}]}