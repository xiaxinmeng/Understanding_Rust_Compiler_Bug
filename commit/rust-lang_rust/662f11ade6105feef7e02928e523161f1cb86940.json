{"sha": "662f11ade6105feef7e02928e523161f1cb86940", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MmYxMWFkZTYxMDVmZWVmN2UwMjkyOGU1MjMxNjFmMWNiODY5NDA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T23:05:29Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:09:31Z"}, "message": "Access attrs directly from HirId in rustc_lint::builtin.", "tree": {"sha": "23c8993992287f3ca2e654d0ae792bbc7fde1975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23c8993992287f3ca2e654d0ae792bbc7fde1975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/662f11ade6105feef7e02928e523161f1cb86940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/662f11ade6105feef7e02928e523161f1cb86940", "html_url": "https://github.com/rust-lang/rust/commit/662f11ade6105feef7e02928e523161f1cb86940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/662f11ade6105feef7e02928e523161f1cb86940/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "260aa9f554addeabeaea2320da1ec06bc5939835", "url": "https://api.github.com/repos/rust-lang/rust/commits/260aa9f554addeabeaea2320da1ec06bc5939835", "html_url": "https://github.com/rust-lang/rust/commit/260aa9f554addeabeaea2320da1ec06bc5939835"}], "stats": {"total": 48, "additions": 10, "deletions": 38}, "files": [{"sha": "2898ffc0906df6a6c77bcae1628c091c53ee6c08", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/662f11ade6105feef7e02928e523161f1cb86940/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662f11ade6105feef7e02928e523161f1cb86940/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=662f11ade6105feef7e02928e523161f1cb86940", "patch": "@@ -508,8 +508,7 @@ impl MissingDoc {\n     fn check_missing_docs_attrs(\n         &self,\n         cx: &LateContext<'_>,\n-        id: Option<hir::HirId>,\n-        attrs: &[ast::Attribute],\n+        id: hir::HirId,\n         sp: Span,\n         article: &'static str,\n         desc: &'static str,\n@@ -528,12 +527,13 @@ impl MissingDoc {\n         // Only check publicly-visible items, using the result from the privacy pass.\n         // It's an option so the crate root can also use this function (it doesn't\n         // have a `NodeId`).\n-        if let Some(id) = id {\n+        if id != hir::CRATE_HIR_ID {\n             if !cx.access_levels.is_exported(id) {\n                 return;\n             }\n         }\n \n+        let attrs = cx.tcx.hir().attrs(id);\n         let has_doc = attrs.iter().any(|a| has_doc(cx.sess(), a));\n         if !has_doc {\n             cx.struct_span_lint(\n@@ -565,7 +565,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'_>, krate: &hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, None, &krate.item.attrs, krate.item.span, \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, hir::CRATE_HIR_ID, krate.item.span, \"the\", \"crate\");\n \n         for macro_def in krate.exported_macros {\n             let has_doc = macro_def.attrs.iter().any(|a| has_doc(cx.sess(), a));\n@@ -622,7 +622,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());\n \n-        self.check_missing_docs_attrs(cx, Some(it.hir_id()), &it.attrs, it.span, article, desc);\n+        self.check_missing_docs_attrs(cx, it.hir_id(), it.span, article, desc);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_>, trait_item: &hir::TraitItem<'_>) {\n@@ -632,14 +632,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n-        self.check_missing_docs_attrs(\n-            cx,\n-            Some(trait_item.hir_id()),\n-            &trait_item.attrs,\n-            trait_item.span,\n-            article,\n-            desc,\n-        );\n+        self.check_missing_docs_attrs(cx, trait_item.hir_id(), trait_item.span, article, desc);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {\n@@ -649,43 +642,22 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         }\n \n         let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n-        self.check_missing_docs_attrs(\n-            cx,\n-            Some(impl_item.hir_id()),\n-            &impl_item.attrs,\n-            impl_item.span,\n-            article,\n-            desc,\n-        );\n+        self.check_missing_docs_attrs(cx, impl_item.hir_id(), impl_item.span, article, desc);\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext<'_>, foreign_item: &hir::ForeignItem<'_>) {\n         let (article, desc) = cx.tcx.article_and_description(foreign_item.def_id.to_def_id());\n-        self.check_missing_docs_attrs(\n-            cx,\n-            Some(foreign_item.hir_id()),\n-            &foreign_item.attrs,\n-            foreign_item.span,\n-            article,\n-            desc,\n-        );\n+        self.check_missing_docs_attrs(cx, foreign_item.hir_id(), foreign_item.span, article, desc);\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'_>, sf: &hir::StructField<'_>) {\n         if !sf.is_positional() {\n-            self.check_missing_docs_attrs(\n-                cx,\n-                Some(sf.hir_id),\n-                &sf.attrs,\n-                sf.span,\n-                \"a\",\n-                \"struct field\",\n-            )\n+            self.check_missing_docs_attrs(cx, sf.hir_id, sf.span, \"a\", \"struct field\")\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'_>, v: &hir::Variant<'_>) {\n-        self.check_missing_docs_attrs(cx, Some(v.id), &v.attrs, v.span, \"a\", \"variant\");\n+        self.check_missing_docs_attrs(cx, v.id, v.span, \"a\", \"variant\");\n     }\n }\n "}]}