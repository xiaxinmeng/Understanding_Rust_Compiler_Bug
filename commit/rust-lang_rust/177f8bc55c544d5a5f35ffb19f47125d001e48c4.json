{"sha": "177f8bc55c544d5a5f35ffb19f47125d001e48c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3N2Y4YmM1NWM1NDRkNWE1ZjM1ZmZiMTlmNDcxMjVkMDAxZTQ4YzQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-05T07:34:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-05T07:38:46Z"}, "message": "std: Fix missing stability in sync\n\n* The `sync` module is stable\n* The `sync::mpsc` module is stable\n* The `Sender::send` method is stable.\n* The `Once::doit` method is now removed.\n* Deprecated atomic initializers are removed.\n* Renamed atomic initializers are now stable.", "tree": {"sha": "a69318040c5554b1df86b594b9e12be204173304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a69318040c5554b1df86b594b9e12be204173304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/177f8bc55c544d5a5f35ffb19f47125d001e48c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/177f8bc55c544d5a5f35ffb19f47125d001e48c4", "html_url": "https://github.com/rust-lang/rust/commit/177f8bc55c544d5a5f35ffb19f47125d001e48c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/177f8bc55c544d5a5f35ffb19f47125d001e48c4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "267b73d95e4fcc906e1b1207ab610fa45f6e6613", "url": "https://api.github.com/repos/rust-lang/rust/commits/267b73d95e4fcc906e1b1207ab610fa45f6e6613", "html_url": "https://github.com/rust-lang/rust/commit/267b73d95e4fcc906e1b1207ab610fa45f6e6613"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "fbb8f9d8cf754e09f3886701d3af8250c152e564", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/177f8bc55c544d5a5f35ffb19f47125d001e48c4/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177f8bc55c544d5a5f35ffb19f47125d001e48c4/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=177f8bc55c544d5a5f35ffb19f47125d001e48c4", "patch": "@@ -146,28 +146,18 @@ pub enum Ordering {\n }\n \n /// An `AtomicBool` initialized to `false`.\n-#[unstable = \"may be renamed, pending conventions for static initalizers\"]\n+#[stable]\n pub const ATOMIC_BOOL_INIT: AtomicBool =\n         AtomicBool { v: UnsafeCell { value: 0 } };\n /// An `AtomicInt` initialized to `0`.\n-#[unstable = \"may be renamed, pending conventions for static initalizers\"]\n+#[stable]\n pub const ATOMIC_INT_INIT: AtomicInt =\n         AtomicInt { v: UnsafeCell { value: 0 } };\n /// An `AtomicUint` initialized to `0`.\n-#[unstable = \"may be renamed, pending conventions for static initalizers\"]\n+#[stable]\n pub const ATOMIC_UINT_INIT: AtomicUint =\n         AtomicUint { v: UnsafeCell { value: 0, } };\n \n-/// Deprecated\n-#[deprecated = \"renamed to ATOMIC_BOOL_INIT\"]\n-pub const INIT_ATOMIC_BOOL: AtomicBool = ATOMIC_BOOL_INIT;\n-/// Deprecated\n-#[deprecated = \"renamed to ATOMIC_INT_INIT\"]\n-pub const INIT_ATOMIC_INT: AtomicInt = ATOMIC_INT_INIT;\n-/// Deprecated\n-#[deprecated = \"renamed to ATOMIC_UINT_INIT\"]\n-pub const INIT_ATOMIC_UINT: AtomicUint = ATOMIC_UINT_INIT;\n-\n // NB: Needs to be -1 (0b11111111...) to make fetch_nand work correctly\n const UINT_TRUE: uint = -1;\n "}, {"sha": "44671b52ba084222e997bf4781d82c327455d81d", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/177f8bc55c544d5a5f35ffb19f47125d001e48c4/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177f8bc55c544d5a5f35ffb19f47125d001e48c4/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=177f8bc55c544d5a5f35ffb19f47125d001e48c4", "patch": "@@ -15,7 +15,7 @@\n //! and/or blocking at all, but rather provide the necessary tools to build\n //! other types of concurrent primitives.\n \n-#![experimental]\n+#![stable]\n \n pub use alloc::arc::{Arc, Weak};\n pub use core::atomic;"}, {"sha": "84284ae6d66e29604b963d8b9d3004727ade3bde", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/177f8bc55c544d5a5f35ffb19f47125d001e48c4/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177f8bc55c544d5a5f35ffb19f47125d001e48c4/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=177f8bc55c544d5a5f35ffb19f47125d001e48c4", "patch": "@@ -163,6 +163,8 @@\n //! }\n //! ```\n \n+#![stable]\n+\n // A description of how Rust's channel implementation works\n //\n // Channels are supposed to be the basic building block for all other\n@@ -565,6 +567,7 @@ impl<T: Send> Sender<T> {\n     /// drop(rx);\n     /// assert_eq!(tx.send(1i).err().unwrap().0, 1);\n     /// ```\n+    #[stable]\n     pub fn send(&self, t: T) -> Result<(), SendError<T>> {\n         let (new_inner, ret) = match *unsafe { self.inner() } {\n             Flavor::Oneshot(ref p) => {"}, {"sha": "aa2d957a3eb5e14bb3268b2e539fcc51e31ff939", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/177f8bc55c544d5a5f35ffb19f47125d001e48c4/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177f8bc55c544d5a5f35ffb19f47125d001e48c4/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=177f8bc55c544d5a5f35ffb19f47125d001e48c4", "patch": "@@ -121,10 +121,6 @@ impl Once {\n             unsafe { self.mutex.destroy() }\n         }\n     }\n-\n-    /// Deprecated\n-    #[deprecated = \"renamed to `call_once`\"]\n-    pub fn doit<F>(&'static self, f: F) where F: FnOnce() { self.call_once(f) }\n }\n \n #[cfg(test)]"}]}