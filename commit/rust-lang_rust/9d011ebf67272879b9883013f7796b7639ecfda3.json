{"sha": "9d011ebf67272879b9883013f7796b7639ecfda3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMDExZWJmNjcyNzI4NzliOTg4MzAxM2Y3Nzk2Yjc2MzllY2ZkYTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-08T04:33:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-09T00:04:02Z"}, "message": "test: Fix tests.", "tree": {"sha": "1078a47c03518ba382b4174f742cb7505d3ce8bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1078a47c03518ba382b4174f742cb7505d3ce8bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d011ebf67272879b9883013f7796b7639ecfda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d011ebf67272879b9883013f7796b7639ecfda3", "html_url": "https://github.com/rust-lang/rust/commit/9d011ebf67272879b9883013f7796b7639ecfda3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d011ebf67272879b9883013f7796b7639ecfda3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16a0125e4169628ea74a486f53571b358c505fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/16a0125e4169628ea74a486f53571b358c505fc6", "html_url": "https://github.com/rust-lang/rust/commit/16a0125e4169628ea74a486f53571b358c505fc6"}], "stats": {"total": 200, "additions": 102, "deletions": 98}, "files": [{"sha": "56dd407f4f97a01b8df6554c569170d2fc276fcb", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -1 +1 @@\n-Subproject commit 2e9f0d21fe321849a4759a01fc28eae82ef196d6\n+Subproject commit 56dd407f4f97a01b8df6554c569170d2fc276fcb"}, {"sha": "7ad617cebdbb31e6465f542406e434c1d1c745c4", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -23,7 +23,7 @@ pub mod kitties {\n         fn meow_count(&mut self) -> uint { self.meows }\n     }\n \n-    pub fn cat<U>(in_x : uint, in_y : int, +in_info: ~[U]) -> cat<U> {\n+    pub fn cat<U>(in_x : uint, in_y : int, in_info: ~[U]) -> cat<U> {\n         cat {\n             meows: in_x,\n             how_hungry: in_y,"}, {"sha": "f3ec875340550bc9424ccc9cd971ae2d9a71cfcf", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -12,9 +12,9 @@\n // other tycons.\n \n fn coerce(b: &fn()) -> extern fn() {\n-    fn lol(+f: extern fn(+v: &fn()) -> extern fn(),\n-           +g: &fn()) -> extern fn() { return f(g); }\n-    fn fn_id(+f: extern fn()) -> extern fn() { return f }\n+    fn lol(f: extern fn(+v: &fn()) -> extern fn(),\n+           g: &fn()) -> extern fn() { return f(g); }\n+    fn fn_id(f: extern fn()) -> extern fn() { return f }\n     return lol(fn_id, b);\n     //~^ ERROR mismatched types\n }"}, {"sha": "f1cca89b227d6773c59340949b31dbe3c8e7c7c9", "filename": "src/test/compile-fail/borrowck-pat-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn match_ref(&&v: Option<int>) -> int {\n+fn match_ref(v: Option<int>) -> int {\n     match v {\n       Some(ref i) => {\n         *i\n@@ -17,7 +17,7 @@ fn match_ref(&&v: Option<int>) -> int {\n     }\n }\n \n-fn match_ref_unused(&&v: Option<int>) {\n+fn match_ref_unused(v: Option<int>) {\n     match v {\n       Some(_) => {}\n       None => {}"}, {"sha": "cf7529865118afb6ee2de8c17eefad57631b0efb", "filename": "src/test/compile-fail/borrowck-unary-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(+x: ~int) -> int {\n+fn foo(x: ~int) -> int {\n     let y = &*x;\n     free(x); //~ ERROR cannot move out of `*x` because it is borrowed\n     *y\n }\n \n-fn free(+_x: ~int) {\n+fn free(_x: ~int) {\n }\n \n fn main() {"}, {"sha": "fa34c056794fc63bc4ede843d06aeff0591fdcc5", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -18,7 +18,7 @@ impl Drop for X {\n     }\n }\n \n-fn unwrap(+x: X) -> ~str {\n+fn unwrap(x: X) -> ~str {\n     let X { x: y } = x; //~ ERROR deconstructing struct not allowed in pattern\n     y\n }"}, {"sha": "5b55cc772fde8c85e847322d092e7e3cef9cf5f0", "filename": "src/test/compile-fail/issue-2766-a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -15,10 +15,10 @@ pub mod stream {\n         use core::pipes;\n \n         pub impl<T:Owned> Stream<T> {\n-            pub fn recv() -> extern fn(+v: Stream<T>) -> ::stream::Stream<T> {\n+            pub fn recv() -> extern fn(v: Stream<T>) -> ::stream::Stream<T> {\n               // resolve really should report just one error here.\n               // Change the test case when it changes.\n-              pub fn recv(+pipe: Stream<T>) -> ::stream::Stream<T> { //~ ERROR attempt to use a type argument out of scope\n+              pub fn recv(pipe: Stream<T>) -> ::stream::Stream<T> { //~ ERROR attempt to use a type argument out of scope\n                 //~^ ERROR use of undeclared type name\n                 //~^^ ERROR attempt to use a type argument out of scope\n                 //~^^^ ERROR use of undeclared type name"}, {"sha": "062ee8fd01e46a795b06728269c78bdac9054c3e", "filename": "src/test/compile-fail/issue-3296.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fissue-3296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fissue-3296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3296.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -18,7 +18,7 @@ struct Foo {\n     a: ()\n }\n \n-fn deserialize_foo<__D: std::serialization::deserializer>(&&__d: __D) {\n+fn deserialize_foo<__D: std::serialization::deserializer>(__d: __D) {\n }\n \n fn main() { let des = Deserializer(); let foo = deserialize_foo(des); }"}, {"sha": "23d3fff01cf3c9fe6dc218cf7cee98f5ba88ca7f", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn send<T:Owned>(ch: _chan<T>, +data: T) {\n+fn send<T:Owned>(ch: _chan<T>, data: T) {\n     debug!(ch);\n     debug!(data);\n     fail!();"}, {"sha": "c907eb4be49f8a2679ea11ef3f9c96101513b3c4", "filename": "src/test/compile-fail/mutable-huh-ptr-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -11,7 +11,7 @@\n extern mod std;\n \n fn main() {\n-    unsafe fn f(&&v: *const int) {\n+    unsafe fn f(v: *const int) {\n         *v = 1 //~ ERROR cannot assign\n     }\n "}, {"sha": "003e8ccf30956d16258e0c4cf79065a982d73bf0", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -21,7 +21,7 @@ impl Drop for r {\n     }\n }\n \n-fn f<T>(+_i: ~[T], +_j: ~[T]) {\n+fn f<T>(_i: ~[T], _j: ~[T]) {\n }\n \n fn main() {"}, {"sha": "012e9d19b121883738176c6db2c427c1b8d01bf4", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -14,7 +14,7 @@\n \n extern mod std;\n \n-fn getbig_and_fail(&&i: int) {\n+fn getbig_and_fail(i: int) {\n     let _r = and_then_get_big_again(5);\n     if i != 0 {\n         getbig_and_fail(i - 1);"}, {"sha": "6fc187491cf8ceac4ce50ddff3ac2d2cd6ded104", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -14,7 +14,7 @@\n \n extern mod std;\n \n-fn getbig_and_fail(&&i: int) {\n+fn getbig_and_fail(i: int) {\n     let r = and_then_get_big_again(5);\n     if i != 0 {\n         getbig_and_fail(i - 1);"}, {"sha": "8f1b34d17cd99f8c038c9a0a34ad1591382c3708", "filename": "src/test/run-fail/unwind-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-fail%2Funwind-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-fail%2Funwind-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-move.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern:fail\n-fn f(+_a: @int) {\n+fn f(_a: @int) {\n     fail!();\n }\n "}, {"sha": "8c84187ff6f0662ec61cd5b99f434ce1c566b40e", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -10,9 +10,11 @@\n \n // xfail-fast\n \n-struct X { x: int }\n+struct X {\n+    x: int\n+}\n \n-fn f1(a: &mut X, b: &mut int, +c: int) -> int {\n+fn f1(a: &mut X, b: &mut int, c: int) -> int {\n     let r = a.x + *b + c;\n     a.x = 0;\n     *b = 10;"}, {"sha": "f74d78f99d0b205038f1b17d898c8cf0e723b217", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait Pushable<T> {\n-    fn push_val(&mut self, +t: T);\n+    fn push_val(&mut self, t: T);\n }\n \n impl<T> Pushable<T> for ~[T] {\n-    fn push_val(&mut self, +t: T) {\n+    fn push_val(&mut self, t: T) {\n         self.push(t);\n     }\n }"}, {"sha": "8752102c3a51377f6661b9cab2ce80ae72c64e85", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n extern mod std;\n use std::arc;\n-fn dispose(+_x: arc::ARC<bool>) { unsafe { } }\n+fn dispose(_x: arc::ARC<bool>) { unsafe { } }\n \n pub fn main() {\n     let p = arc::ARC(true);"}, {"sha": "a912e1ef65c423655cedb392c73b9d9b3e8475ad", "filename": "src/test/run-pass/borrowck-lend-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -10,15 +10,15 @@\n \n fn borrow(_v: &int) {}\n \n-fn borrow_from_arg_imm_ref(&&v: ~int) {\n+fn borrow_from_arg_imm_ref(v: ~int) {\n     borrow(v);\n }\n \n fn borrow_from_arg_mut_ref(v: &mut ~int) {\n     borrow(*v);\n }\n \n-fn borrow_from_arg_copy(+v: ~int) {\n+fn borrow_from_arg_copy(v: ~int) {\n     borrow(v);\n }\n "}, {"sha": "8f66faab014519ce284d795a3f151bb550bb6c05", "filename": "src/test/run-pass/borrowck-mut-vec-as-imm-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -14,7 +14,7 @@ fn want_slice(v: &[int]) -> int {\n     return sum;\n }\n \n-fn has_mut_vec(+v: ~[int]) -> int {\n+fn has_mut_vec(v: ~[int]) -> int {\n     want_slice(v)\n }\n "}, {"sha": "5f0c7cad6191c532805ac9cde04c5f3dd9a53b13", "filename": "src/test/run-pass/borrowck-newtype-issue-2573.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -25,7 +25,7 @@ impl frob for foo {\n }\n \n // Override default mode so that we are passing by value\n-fn really_impure(++bar: baz) {\n+fn really_impure(bar: baz) {\n     bar.baz = 3;\n }\n "}, {"sha": "817891c1146401d2872f8d16626c7c27dbd36270", "filename": "src/test/run-pass/capture_nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -26,7 +26,7 @@\n \n use core::comm::*;\n \n-fn foo(&&x: ()) -> Port<()> {\n+fn foo(x: ()) -> Port<()> {\n     let (p, c) = stream::<()>();\n     do task::spawn() {\n         c.send(x);"}, {"sha": "4eb3cea3a2586285ec53f4c4350a3d6a78980e46", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -12,6 +12,8 @@\n \n extern mod std;\n \n-fn child2(&&s: ~str) { }\n+fn child2(s: ~str) { }\n \n-pub fn main() { let x = task::spawn(|| child2(~\"hi\") ); }\n+pub fn main() {\n+    let x = task::spawn(|| child2(~\"hi\"));\n+}"}, {"sha": "9774d8d14882e6356be47e839adab9564351e9f2", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -22,7 +22,7 @@ pub impl<U> cat<U> {\n     fn meow_count(&mut self) -> uint { self.meows }\n }\n \n-fn cat<U>(in_x : uint, in_y : int, +in_info: ~[U]) -> cat<U> {\n+fn cat<U>(in_x : uint, in_y : int, in_info: ~[U]) -> cat<U> {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,"}, {"sha": "cb378da13ea603fd09d3b8332ebe44276edab6ff", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-win32\n-fn adder(+x: @int, +y: @int) -> int { return *x + *y; }\n+fn adder(x: @int, y: @int) -> int { return *x + *y; }\n fn failer() -> @int { fail!(); }\n pub fn main() {\n     assert!(result::is_err(&task::try(|| {"}, {"sha": "19b99eaccc9563fe6dd66f00b360775f7588cd0e", "filename": "src/test/run-pass/extern-pass-TwoU64s-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -16,7 +16,7 @@ struct TwoU64s {\n }\n \n pub extern {\n-    pub fn rust_dbg_extern_identity_TwoU64s(&&u: TwoU64s) -> TwoU64s;\n+    pub fn rust_dbg_extern_identity_TwoU64s(u: TwoU64s) -> TwoU64s;\n }\n \n pub fn main() {"}, {"sha": "1cd709ee91b9d5d5aebf7e1f54853cbad0a41bcb", "filename": "src/test/run-pass/extern-pub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fextern-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fextern-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pub.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -1,7 +1,7 @@\n extern {\n-    pub unsafe fn vec_reserve_shared_actual(++t: *sys::TypeDesc,\n-                                            ++v: **vec::raw::VecRepr,\n-                                            ++n: libc::size_t);\n+    pub unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n+                                            v: **vec::raw::VecRepr,\n+                                            n: libc::size_t);\n }\n \n pub fn main() {"}, {"sha": "b78bd488bc6ea7c6d016d6113e07613e392d09a7", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -14,7 +14,7 @@ fn spawn<T:Owned>(val: T, f: extern fn(T)) {\n     f(val);\n }\n \n-fn f(+i: int) {\n+fn f(i: int) {\n     assert!(i == 100);\n }\n "}, {"sha": "2dbc60e9a14ac2bdc19377e61685b2c39c38baf1", "filename": "src/test/run-pass/foreign-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-struct.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -18,7 +18,7 @@ mod bindgen {\n \n     #[nolink]\n     pub extern {\n-        pub fn printf(++v: void);\n+        pub fn printf(v: void);\n     }\n }\n "}, {"sha": "9f683d20898774076272b19ae123e120117890eb", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -11,8 +11,8 @@\n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     pub extern \"rust-intrinsic\" {\n-        pub fn move_val_init<T>(dst: &mut T, +src: T);\n-        pub fn move_val<T>(dst: &mut T, +src: T);\n+        pub fn move_val_init<T>(dst: &mut T, src: T);\n+        pub fn move_val<T>(dst: &mut T, src: T);\n     }\n }\n "}, {"sha": "71a491b8a3955bba2877f7dbe67403a35fc78711", "filename": "src/test/run-pass/issue-2633-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn a_val(&&x: ~int, +y: ~int) -> int {\n+fn a_val(x: ~int, y: ~int) -> int {\n     *x + *y\n }\n "}, {"sha": "acd26a88a736191dc7a3cc40f4be3244dfe6deaf", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -53,23 +53,23 @@ pub mod pipes {\n \n     // We should consider moving this to ::core::unsafe, although I\n     // suspect graydon would want us to use void pointers instead.\n-    pub unsafe fn uniquify<T>(+x: *T) -> ~T {\n+    pub unsafe fn uniquify<T>(x: *T) -> ~T {\n         unsafe { cast::transmute(x) }\n     }\n \n-    pub fn swap_state_acq(+dst: &mut state, src: state) -> state {\n+    pub fn swap_state_acq(dst: &mut state, src: state) -> state {\n         unsafe {\n             transmute(rusti::atomic_xchg_acq(transmute(dst), src as int))\n         }\n     }\n \n-    pub fn swap_state_rel(+dst: &mut state, src: state) -> state {\n+    pub fn swap_state_rel(dst: &mut state, src: state) -> state {\n         unsafe {\n             transmute(rusti::atomic_xchg_rel(transmute(dst), src as int))\n         }\n     }\n \n-    pub fn send<T:Owned>(mut p: send_packet<T>, +payload: T) {\n+    pub fn send<T:Owned>(mut p: send_packet<T>, payload: T) {\n         let mut p = p.unwrap();\n         let mut p = unsafe { uniquify(p) };\n         assert!((*p).payload.is_none());\n@@ -229,7 +229,7 @@ pub mod pingpong {\n     pub struct ping(::pipes::send_packet<pong>);\n     pub struct pong(::pipes::send_packet<ping>);\n \n-    pub fn liberate_ping(+p: ping) -> ::pipes::send_packet<pong> {\n+    pub fn liberate_ping(p: ping) -> ::pipes::send_packet<pong> {\n         unsafe {\n             let addr : *::pipes::send_packet<pong> = match &p {\n               &ping(ref x) => { cast::transmute(x) }\n@@ -240,7 +240,7 @@ pub mod pingpong {\n         }\n     }\n \n-    pub fn liberate_pong(+p: pong) -> ::pipes::send_packet<ping> {\n+    pub fn liberate_pong(p: pong) -> ::pipes::send_packet<ping> {\n         unsafe {\n             let addr : *::pipes::send_packet<ping> = match &p {\n               &pong(ref x) => { cast::transmute(x) }\n@@ -262,14 +262,14 @@ pub mod pingpong {\n         pub type ping = ::pipes::send_packet<pingpong::ping>;\n         pub type pong = ::pipes::recv_packet<pingpong::pong>;\n \n-        pub fn do_ping(+c: ping) -> pong {\n+        pub fn do_ping(c: ping) -> pong {\n             let (sp, rp) = ::pipes::entangle();\n \n             ::pipes::send(c, pingpong::ping(sp));\n             rp\n         }\n \n-        pub fn do_pong(+c: pong) -> (ping, ()) {\n+        pub fn do_pong(c: pong) -> (ping, ()) {\n             let packet = ::pipes::recv(c);\n             if packet.is_none() {\n                 fail!(~\"sender closed the connection\")\n@@ -284,30 +284,30 @@ pub mod pingpong {\n         pub type ping = ::pipes::recv_packet<pingpong::ping>;\n         pub type pong = ::pipes::send_packet<pingpong::pong>;\n \n-        pub fn do_ping(+c: ping) -> (pong, ()) {\n+        pub fn do_ping(c: ping) -> (pong, ()) {\n             let packet = ::pipes::recv(c);\n             if packet.is_none() {\n                 fail!(~\"sender closed the connection\")\n             }\n             (pingpong::liberate_ping(packet.unwrap()), ())\n         }\n \n-        pub fn do_pong(+c: pong) -> ping {\n+        pub fn do_pong(c: pong) -> ping {\n             let (sp, rp) = ::pipes::entangle();\n             ::pipes::send(c, pingpong::pong(sp));\n             rp\n         }\n     }\n }\n \n-fn client(+chan: pingpong::client::ping) {\n+fn client(chan: pingpong::client::ping) {\n     let chan = pingpong::client::do_ping(chan);\n     error!(~\"Sent ping\");\n     let (_chan, _data) = pingpong::client::do_pong(chan);\n     error!(~\"Received pong\");\n }\n \n-fn server(+chan: pingpong::server::ping) {\n+fn server(chan: pingpong::server::ping) {\n     let (chan, _data) = pingpong::server::do_ping(chan);\n     error!(~\"Received ping\");\n     let _chan = pingpong::server::do_pong(chan);"}, {"sha": "112aab597f0299e7c689160d8741e2611df822f7", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -59,7 +59,7 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr:'static + io::Reader>(+in: rdr) -> ~[~[square]] {\n+fn read_board_grid<rdr:'static + io::Reader>(in: rdr) -> ~[~[square]] {\n     let in = @in as @io::Reader;\n     let mut grid = ~[];\n     for in.each_line |line| {"}, {"sha": "895e90beef4aa5232eec90804692346d226f8482", "filename": "src/test/run-pass/issue-3656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3656.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -24,7 +24,7 @@ struct KEYGEN {\n \n extern {\n     // Bogus signature, just need to test if it compiles.\n-    pub fn malloc(++data: KEYGEN);\n+    pub fn malloc(data: KEYGEN);\n }\n \n pub fn main() {"}, {"sha": "5f427861e7917d52f3147fbb4821e6816faa750e", "filename": "src/test/run-pass/iter-min-max.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fiter-min-max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fiter-min-max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-min-max.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn is_even(&&x: uint) -> bool { (x % 2u) == 0u }\n+fn is_even(x: uint) -> bool { (x % 2u) == 0u }\n \n pub fn main() {\n     assert!([1u, 3u].min() == 1u);"}, {"sha": "acdf388a8ff033720b7111825985b9afdddaf84b", "filename": "src/test/run-pass/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn take(+x: int) -> int {x}\n+fn take(x: int) -> int {x}\n \n fn the_loop() {\n     let mut list = ~[];"}, {"sha": "e1561db8b9162a8475116ece1634888b07308d4a", "filename": "src/test/run-pass/morestack5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack5.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -12,7 +12,7 @@\n \n extern mod std;\n \n-fn getbig(&&i: int) {\n+fn getbig(i: int) {\n     if i != 0 {\n         getbig(i - 1);\n     }"}, {"sha": "ed3cdc81c31796e21f42e29b677bdc8890ba46a4", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(+foo: ~~[int]) { assert!((foo[0] == 10)); }\n+fn test(foo: ~~[int]) { assert!((foo[0] == 10)); }\n \n pub fn main() {\n     let x = ~~[10];"}, {"sha": "fc909da8b0323acd8720c6896353938d21cd5612", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(+foo: @~[int]) { assert!((foo[0] == 10)); }\n+fn test(foo: @~[int]) { assert!((foo[0] == 10)); }\n \n pub fn main() {\n     let x = @~[10];"}, {"sha": "87db5cbe2f13ed2a4e049f0b3deff663ea8d6e15", "filename": "src/test/run-pass/move-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fmove-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fmove-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(+foo: int) { assert!((foo == 10)); }\n+fn test(foo: int) { assert!((foo == 10)); }\n \n pub fn main() { let x = 10; test(x); }"}, {"sha": "ab66bb936354f406e57eb592fb8f9f5b8b2eb54d", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // Issue #922\n-fn f2(+thing: @fn()) { }\n+fn f2(thing: @fn()) { }\n \n-fn f(+thing: @fn()) {\n+fn f(thing: @fn()) {\n     f2(thing);\n }\n "}, {"sha": "8c26dfa1fac56b3c1b0734a249a66c3977151b6a", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -40,7 +40,7 @@ impl ops::Not<Point> for Point {\n }\n \n impl ops::Index<bool,int> for Point {\n-    fn index(&self, +x: &bool) -> int {\n+    fn index(&self, x: &bool) -> int {\n         if *x { self.x } else { self.y }\n     }\n }"}, {"sha": "8698d1f39a88ffbb0361960c0957547a53e50509", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -23,7 +23,7 @@ impl Drop for dtor {\n     }\n }\n \n-fn unwrap<T>(+o: Option<T>) -> T {\n+fn unwrap<T>(o: Option<T>) -> T {\n     match o {\n       Some(v) => v,\n       None => fail!()"}, {"sha": "c4f328940c49f4714bb01747afb57459c354ddf5", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn magic(+x: A) { debug!(x); }\n-fn magic2(+x: @int) { debug!(x); }\n+fn magic(x: A) { debug!(x); }\n+fn magic2(x: @int) { debug!(x); }\n \n struct A { a: @int }\n "}, {"sha": "5e2be7e6d081a08916510ab79c3ede7a272c9d43", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -48,12 +48,12 @@ macro_rules! move_it (\n     { $x:expr } => { unsafe { let y = *ptr::to_unsafe_ptr(&($x)); y } }\n )\n \n-fn switch<T:Owned,U>(+endp: pipes::RecvPacket<T>,\n-                      f: &fn(+v: Option<T>) -> U) -> U {\n+fn switch<T:Owned,U>(endp: pipes::RecvPacket<T>,\n+                     f: &fn(v: Option<T>) -> U) -> U {\n     f(pipes::try_recv(endp))\n }\n \n-fn move_it<T>(+x: T) -> T { x }\n+fn move_it<T>(x: T) -> T { x }\n \n macro_rules! follow (\n     {\n@@ -68,7 +68,7 @@ macro_rules! follow (\n     );\n )\n \n-fn client_follow(+bank: bank::client::login) {\n+fn client_follow(bank: bank::client::login) {\n     use bank::*;\n \n     let bank = client::login(bank, ~\"theincredibleholk\", ~\"1234\");\n@@ -89,7 +89,7 @@ fn client_follow(+bank: bank::client::login) {\n     ));\n }\n \n-fn bank_client(+bank: bank::client::login) {\n+fn bank_client(bank: bank::client::login) {\n     use bank::*;\n \n     let bank = client::login(bank, ~\"theincredibleholk\", ~\"1234\");"}, {"sha": "3c37371a5371c3dd9a68cb4f303fb91bddc789bf", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -91,7 +91,7 @@ mod test {\n     use core::pipes::recv;\n     use pingpong::{ping, pong};\n \n-    pub fn client(+chan: ::pingpong::client::ping) {\n+    pub fn client(chan: ::pingpong::client::ping) {\n         use pingpong::client;\n \n         let chan = client::ping(chan); return;\n@@ -100,7 +100,7 @@ mod test {\n         error!(\"Received pong\");\n     }\n \n-    pub fn server(+chan: ::pingpong::server::ping) {\n+    pub fn server(chan: ::pingpong::server::ping) {\n         use pingpong::server;\n \n         let ping(chan) = recv(chan); return;"}, {"sha": "5978438ef76355d0b8206157cbe619b535bbf531", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -29,7 +29,7 @@ mod test {\n     use core::pipes::recv;\n     use pingpong::{ping, pong};\n \n-    pub fn client(+chan: ::pingpong::client::ping) {\n+    pub fn client(chan: ::pingpong::client::ping) {\n         use pingpong::client;\n \n         let chan = client::ping(chan);\n@@ -38,7 +38,7 @@ mod test {\n         error!(~\"Received pong\");\n     }\n \n-    pub fn server(+chan: ::pingpong::server::ping) {\n+    pub fn server(chan: ::pingpong::server::ping) {\n         use pingpong::server;\n \n         let ping(chan) = recv(chan);"}, {"sha": "5255c13bead62a2e689f5ed5db19fc2bf7ceef1b", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -633,7 +633,7 @@ impl TyVisitor for my_visitor {\n     fn visit_closure_ptr(&self, _ck: uint) -> bool { true }\n }\n \n-fn get_tydesc_for<T>(&&_t: T) -> *TyDesc {\n+fn get_tydesc_for<T>(_t: T) -> *TyDesc {\n     get_tydesc::<T>()\n }\n "}, {"sha": "2e9ff88f96e90c9c57b79c3e3c40a90760182d74", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -12,7 +12,7 @@ struct closure_box<'self> {\n     cl: &'self fn(),\n }\n \n-fn box_it<'r>(+x: &'r fn()) -> closure_box<'r> {\n+fn box_it<'r>(x: &'r fn()) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n "}, {"sha": "eab057548ef5e5d1ad7b2d82840bb7315cadd1fc", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -12,7 +12,7 @@ struct closure_box<'self> {\n     cl: &'self fn(),\n }\n \n-fn box_it<'r>(+x: &'r fn()) -> closure_box<'r> {\n+fn box_it<'r>(x: &'r fn()) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n "}, {"sha": "2a69b2ca01779edfe7de1305ef05e4baef2cba9f", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -12,7 +12,7 @@ use core::cell::Cell;\n \n pub fn main() { test05(); }\n \n-fn test05_start(&&f: ~fn(int)) {\n+fn test05_start(f: ~fn(int)) {\n     f(22);\n }\n "}, {"sha": "9a5131ef2300097acfedc1dca2ece305b224189c", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -17,4 +17,4 @@ pub fn main() {\n     task::spawn(|| child(10) );\n }\n \n-fn child(&&i: int) { error!(i); assert!((i == 10)); }\n+fn child(i: int) { error!(i); assert!((i == 10)); }"}, {"sha": "642babb5a1e5c0331727855eed839920d74ad075", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -11,7 +11,7 @@\n \n pub fn main() { task::spawn(|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) ); }\n \n-fn child(&&args: (int, int, int, int, int, int, int, int, int)) {\n+fn child(args: (int, int, int, int, int, int, int, int, int)) {\n     let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;\n     error!(i1);\n     error!(i2);"}, {"sha": "e06d09c564c00a538c268e005b6ffd1c5f3278ae", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -13,46 +13,46 @@\n // A trait for objects that can be used to do an if-then-else\n // (No actual need for this to be static, but it is a simple test.)\n trait bool_like {\n-    fn select<A>(b: Self, +x1: A, +x2: A) -> A;\n+    fn select<A>(b: Self, x1: A, x2: A) -> A;\n }\n \n fn andand<T:bool_like + Copy>(x1: T, x2: T) -> T {\n     bool_like::select(x1, x2, x1)\n }\n \n impl bool_like for bool {\n-    fn select<A>(&&b: bool, +x1: A, +x2: A) -> A {\n+    fn select<A>(b: bool, x1: A, x2: A) -> A {\n         if b { x1 } else { x2 }\n     }\n }\n \n impl bool_like for int {\n-    fn select<A>(&&b: int, +x1: A, +x2: A) -> A {\n+    fn select<A>(b: int, x1: A, x2: A) -> A {\n         if b != 0 { x1 } else { x2 }\n     }\n }\n \n // A trait for sequences that can be constructed imperatively.\n trait buildable<A> {\n-     fn build_sized(size: uint, builder: &fn(push: &fn(+v: A))) -> Self;\n+     fn build_sized(size: uint, builder: &fn(push: &fn(v: A))) -> Self;\n }\n \n \n impl<A> buildable<A> for @[A] {\n     #[inline(always)]\n-     fn build_sized(size: uint, builder: &fn(push: &fn(+v: A))) -> @[A] {\n+     fn build_sized(size: uint, builder: &fn(push: &fn(v: A))) -> @[A] {\n          at_vec::build_sized(size, builder)\n      }\n }\n impl<A> buildable<A> for ~[A] {\n     #[inline(always)]\n-     fn build_sized(size: uint, builder: &fn(push: &fn(+v: A))) -> ~[A] {\n+     fn build_sized(size: uint, builder: &fn(push: &fn(v: A))) -> ~[A] {\n          vec::build_sized(size, builder)\n      }\n }\n \n #[inline(always)]\n-fn build<A, B: buildable<A>>(builder: &fn(push: &fn(+v: A))) -> B {\n+fn build<A, B: buildable<A>>(builder: &fn(push: &fn(v: A))) -> B {\n     buildable::build_sized(4, builder)\n }\n "}, {"sha": "7ac74fd52175f525917d126127d203e5484e1e1d", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -16,8 +16,8 @@ mod rustrt {\n \n     #[nolink]\n     pub extern {\n-        pub fn debug_abi_1(++q: Quad) -> Quad;\n-        pub fn debug_abi_2(++f: Floats) -> Floats;\n+        pub fn debug_abi_1(q: Quad) -> Quad;\n+        pub fn debug_abi_2(f: Floats) -> Floats;\n     }\n }\n "}, {"sha": "0f0b82d7c21df7ce7ca4fb045d5006f7d037fd03", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -12,7 +12,7 @@ extern mod std;\n \n pub fn main() { test00(); }\n \n-fn start(&&task_number: int) { debug!(\"Started / Finished task.\"); }\n+fn start(task_number: int) { debug!(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;"}, {"sha": "9885c5d6f3fc0f9ed95942fd99c41339a1055f50", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -13,6 +13,6 @@ pub fn main() {\n     task::spawn(|| child(~\"Hello\") );\n }\n \n-fn child(&&s: ~str) {\n+fn child(s: ~str) {\n \n }"}, {"sha": "a72d3dd40f4caf8345aa2e8f79523b65a5d3aaab", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -18,4 +18,4 @@ pub fn main() {\n     debug!(\"main thread exiting\");\n }\n \n-fn child(&&x: int) { debug!(x); }\n+fn child(x: int) { debug!(x); }"}, {"sha": "4a6386244f17790a259c7d284510ace59bef7231", "filename": "src/test/run-pass/unique-fn-arg-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(+i: ~int) {\n+fn f(i: ~int) {\n     assert!(*i == 100);\n }\n "}, {"sha": "2d916abf0da698858680f1ab450909a583da6eff", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -12,7 +12,7 @@\n pub fn main() {\n     let mut result = None;\n     let mut builder = task::task();\n-    builder.future_result(|+r| { result = Some(r); });\n+    builder.future_result(|r| { result = Some(r); });\n     builder.spawn(child);\n     error!(\"1\");\n     task::yield();"}, {"sha": "f3ca5b1211899145af5c195a048f0cfcb976c35d", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d011ebf67272879b9883013f7796b7639ecfda3/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=9d011ebf67272879b9883013f7796b7639ecfda3", "patch": "@@ -12,7 +12,7 @@\n pub fn main() {\n     let mut result = None;\n     let mut builder = task::task();\n-    builder.future_result(|+r| { result = Some(r); });\n+    builder.future_result(|r| { result = Some(r); });\n     builder.spawn(child);\n     error!(\"1\");\n     task::yield();"}]}