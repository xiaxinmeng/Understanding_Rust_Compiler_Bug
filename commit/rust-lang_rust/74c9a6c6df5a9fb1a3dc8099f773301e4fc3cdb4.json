{"sha": "74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4", "node_id": "C_kwDOAAsO6NoAKDc0YzlhNmM2ZGY1YTlmYjFhM2RjODA5OWY3NzMzMDFlNGZjM2NkYjQ", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-15T00:53:17Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-15T00:53:17Z"}, "message": "fix #103381, Detect incorrect chaining of if and if let conditions", "tree": {"sha": "39643326a8275083638e8059da87498197bac594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39643326a8275083638e8059da87498197bac594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4", "html_url": "https://github.com/rust-lang/rust/commit/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "101e1822c3e54e63996c8aaa014d55716f3937eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/101e1822c3e54e63996c8aaa014d55716f3937eb", "html_url": "https://github.com/rust-lang/rust/commit/101e1822c3e54e63996c8aaa014d55716f3937eb"}], "stats": {"total": 194, "additions": 192, "deletions": 2}, "files": [{"sha": "62018de4a8cea1a11e47826f55b0c2e2df209fd0", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4", "patch": "@@ -54,6 +54,9 @@ parser_invalid_logical_operator = `{$incorrect}` is not a logical operator\n parser_tilde_is_not_unary_operator = `~` cannot be used as a unary operator\n     .suggestion = use `!` to perform bitwise not\n \n+parser_unexpected_if_with_if = unexpected `if` in the condition expression\n+    .suggestion = remove the `if`\n+\n parser_unexpected_token_after_not = unexpected {$negated_desc} after identifier\n parser_unexpected_token_after_not_bitwise = use `!` to perform bitwise not\n parser_unexpected_token_after_not_logical = use `!` to perform logical negation"}, {"sha": "e3177ac8760a511d5418ec4e29cc5a07f1867ccf", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4", "patch": "@@ -1301,3 +1301,11 @@ pub(crate) struct FnPtrWithGenericsSugg {\n     pub arity: usize,\n     pub for_param_list_exists: bool,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parser_unexpected_if_with_if)]\n+pub(crate) struct UnexpectedIfWithIf(\n+    #[primary_span]\n+    #[suggestion(applicability = \"machine-applicable\", code = \" \", style = \"verbose\")]\n+    pub Span,\n+);"}, {"sha": "9dc0fb8631235bd3f8295b0b8176fb98d837c7f3", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4", "patch": "@@ -24,8 +24,8 @@ use crate::errors::{\n     NoFieldsForFnCall, NotAsNegationOperator, NotAsNegationOperatorSub,\n     OctalFloatLiteralNotSupported, OuterAttributeNotAllowedOnIfElse, ParenthesesWithStructFields,\n     RequireColonAfterLabeledExpression, ShiftInterpretedAsGeneric, StructLiteralNotAllowedHere,\n-    StructLiteralNotAllowedHereSugg, TildeAsUnaryOperator, UnexpectedTokenAfterLabel,\n-    UnexpectedTokenAfterLabelSugg, WrapExpressionInParentheses,\n+    StructLiteralNotAllowedHereSugg, TildeAsUnaryOperator, UnexpectedIfWithIf,\n+    UnexpectedTokenAfterLabel, UnexpectedTokenAfterLabelSugg, WrapExpressionInParentheses,\n };\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n@@ -2279,6 +2279,7 @@ impl<'a> Parser<'a> {\n                 if let Some(block) = recover_block_from_condition(self) {\n                     block\n                 } else {\n+                    self.error_on_extra_if(&cond)?;\n                     // Parse block, which will always fail, but we can add a nice note to the error\n                     self.parse_block().map_err(|mut err| {\n                         err.span_note(\n@@ -2415,6 +2416,16 @@ impl<'a> Parser<'a> {\n         });\n     }\n \n+    fn error_on_extra_if(&mut self, cond: &P<Expr>) -> PResult<'a, ()> {\n+        if let ExprKind::Binary(Spanned { span: binop_span, node: binop}, _, right) = &cond.kind &&\n+            let BinOpKind::And = binop &&\n+            let ExprKind::If(cond, ..) = &right.kind {\n+                    Err(self.sess.create_err(UnexpectedIfWithIf(binop_span.shrink_to_hi().to(cond.span.shrink_to_lo()))))\n+            } else {\n+                Ok(())\n+            }\n+    }\n+\n     /// Parses `for <src_pat> in <src_expr> <src_loop_block>` (`for` token already eaten).\n     fn parse_for_expr(&mut self, opt_label: Option<Label>, lo: Span) -> PResult<'a, P<Expr>> {\n         // Record whether we are about to parse `for (`."}, {"sha": "6a9fb991097fb4cd049a442fc266b290bf50dad5", "filename": "src/test/ui/parser/issue-103381.fixed", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/src%2Ftest%2Fui%2Fparser%2Fissue-103381.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/src%2Ftest%2Fui%2Fparser%2Fissue-103381.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103381.fixed?ref=74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4", "patch": "@@ -0,0 +1,59 @@\n+// run-rustfix\n+\n+#![feature(let_chains)]\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![allow(irrefutable_let_patterns)]\n+\n+fn err_some(b: bool, x: Option<u32>) {\n+    if b && let Some(x) = x {}\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_none(b: bool, x: Option<u32>) {\n+    if b && let None = x {}\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_bool_1() {\n+    if true && true { true } else { false };\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_bool_2() {\n+    if true && false { true } else { false };\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn should_ok_1() {\n+    if true && if let x = 1 { true } else { true } {}\n+}\n+\n+fn should_ok_2() {\n+    if true && if let 1 = 1 { true } else { true } {}\n+}\n+\n+fn should_ok_3() {\n+    if true && if true { true } else { false } {}\n+}\n+\n+fn shoule_match_ok() {\n+    #[cfg(feature = \"full\")]\n+    {\n+        let a = 1;\n+        let b = 2;\n+        if match a {\n+            1 if b == 1 => true,\n+            _ => false,\n+        } && if a > 1 { true } else { false }\n+        {\n+            true\n+        }\n+    }\n+}\n+\n+fn should_ok_in_nested() {\n+    if true && if true { true } else { false } { true } else { false };\n+}\n+\n+fn main() {}"}, {"sha": "bf79e10103e13c701c2367209b4265273fdcd60b", "filename": "src/test/ui/parser/issue-103381.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/src%2Ftest%2Fui%2Fparser%2Fissue-103381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/src%2Ftest%2Fui%2Fparser%2Fissue-103381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103381.rs?ref=74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4", "patch": "@@ -0,0 +1,59 @@\n+// run-rustfix\n+\n+#![feature(let_chains)]\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![allow(irrefutable_let_patterns)]\n+\n+fn err_some(b: bool, x: Option<u32>) {\n+    if b && if let Some(x) = x {}\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_none(b: bool, x: Option<u32>) {\n+    if b && if let None = x {}\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_bool_1() {\n+    if true && if true { true } else { false };\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_bool_2() {\n+    if true && if false { true } else { false };\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn should_ok_1() {\n+    if true && if let x = 1 { true } else { true } {}\n+}\n+\n+fn should_ok_2() {\n+    if true && if let 1 = 1 { true } else { true } {}\n+}\n+\n+fn should_ok_3() {\n+    if true && if true { true } else { false } {}\n+}\n+\n+fn shoule_match_ok() {\n+    #[cfg(feature = \"full\")]\n+    {\n+        let a = 1;\n+        let b = 2;\n+        if match a {\n+            1 if b == 1 => true,\n+            _ => false,\n+        } && if a > 1 { true } else { false }\n+        {\n+            true\n+        }\n+    }\n+}\n+\n+fn should_ok_in_nested() {\n+    if true && if true { true } else { false } { true } else { false };\n+}\n+\n+fn main() {}"}, {"sha": "85fcc18e76b57f385122ad764f9a5a23332e54d8", "filename": "src/test/ui/parser/issue-103381.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/src%2Ftest%2Fui%2Fparser%2Fissue-103381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4/src%2Ftest%2Fui%2Fparser%2Fissue-103381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103381.stderr?ref=74c9a6c6df5a9fb1a3dc8099f773301e4fc3cdb4", "patch": "@@ -0,0 +1,50 @@\n+error: unexpected `if` in the condition expression\n+  --> $DIR/issue-103381.rs:9:12\n+   |\n+LL |     if b && if let Some(x) = x {}\n+   |            ^^^^\n+   |\n+help: remove the `if`\n+   |\n+LL -     if b && if let Some(x) = x {}\n+LL +     if b && let Some(x) = x {}\n+   |\n+\n+error: unexpected `if` in the condition expression\n+  --> $DIR/issue-103381.rs:14:12\n+   |\n+LL |     if b && if let None = x {}\n+   |            ^^^^\n+   |\n+help: remove the `if`\n+   |\n+LL -     if b && if let None = x {}\n+LL +     if b && let None = x {}\n+   |\n+\n+error: unexpected `if` in the condition expression\n+  --> $DIR/issue-103381.rs:19:15\n+   |\n+LL |     if true && if true { true } else { false };\n+   |               ^^^^\n+   |\n+help: remove the `if`\n+   |\n+LL -     if true && if true { true } else { false };\n+LL +     if true && true { true } else { false };\n+   |\n+\n+error: unexpected `if` in the condition expression\n+  --> $DIR/issue-103381.rs:24:15\n+   |\n+LL |     if true && if false { true } else { false };\n+   |               ^^^^\n+   |\n+help: remove the `if`\n+   |\n+LL -     if true && if false { true } else { false };\n+LL +     if true && false { true } else { false };\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}]}