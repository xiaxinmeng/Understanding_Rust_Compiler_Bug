{"sha": "2816998d1e702a8597c07100856e2483590f3e2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MTY5OThkMWU3MDJhODU5N2MwNzEwMDg1NmUyNDgzNTkwZjNlMmE=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-03-15T06:45:43Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-03-15T06:45:43Z"}, "message": "use simd blocks", "tree": {"sha": "859efd888f0fb664457f01a81278483e4d943c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859efd888f0fb664457f01a81278483e4d943c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2816998d1e702a8597c07100856e2483590f3e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2816998d1e702a8597c07100856e2483590f3e2a", "html_url": "https://github.com/rust-lang/rust/commit/2816998d1e702a8597c07100856e2483590f3e2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2816998d1e702a8597c07100856e2483590f3e2a/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1daf58964216dfe1f805cdaff76a91ca90d7523e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1daf58964216dfe1f805cdaff76a91ca90d7523e", "html_url": "https://github.com/rust-lang/rust/commit/1daf58964216dfe1f805cdaff76a91ca90d7523e"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "b6838f103c469739192298fdfc92d819c31b0aed", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2816998d1e702a8597c07100856e2483590f3e2a/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2816998d1e702a8597c07100856e2483590f3e2a/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=2816998d1e702a8597c07100856e2483590f3e2a", "patch": "@@ -447,24 +447,34 @@ pub unsafe fn uninitialized<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n-        const SWAP_BLOCK_SIZE: usize = 16;\n+        // The approach here is to utilize simd to swap x & y efficiently. Testing reveals\n+        // that swapping either 32 bytes or 64 bytes at a time is most efficient for intel\n+        // Haswell E processors. LLVM is more able to optimize if we give a struct a\n+        // #[repr(simd)], even if we don't actually use this struct directly.\n+        #[repr(simd)]\n+        struct Block(u64, u64, u64, u64);\n+        let block_size = size_of::<Block>();\n \n-        // Give ourselves some scratch space to work with\n-        let mut t: [u8; SWAP_BLOCK_SIZE] = uninitialized();\n+        // Create some uninitialized memory as scratch space\n+        let mut t: Block = uninitialized();\n \n+        // Get raw pointers to the bytes of x, y & t for easier manipulation\n         let x = x as *mut T as *mut u8;\n         let y = y as *mut T as *mut u8;\n         let t = &mut t as *mut _ as *mut u8;\n \n-        // can't use a for loop as the `range` impl calls `mem::swap` recursively\n+        // Loop through x & y, copying them `Block` at a time\n+        // The optimizer should unroll the loop fully for most types\n+        // N.B. We can't use a for loop as the `range` impl calls `mem::swap` recursively\n         let len = size_of::<T>() as isize;\n         let mut i = 0;\n-        while i + SWAP_BLOCK_SIZE as isize <= len {\n-            // Perform the swap SWAP_BLOCK_SIZE bytes at a time, `&mut` pointers never alias\n-            ptr::copy_nonoverlapping(x.offset(i), t, SWAP_BLOCK_SIZE);\n-            ptr::copy_nonoverlapping(y.offset(i), x.offset(i), SWAP_BLOCK_SIZE);\n-            ptr::copy_nonoverlapping(t, y.offset(i), SWAP_BLOCK_SIZE);\n-            i += SWAP_BLOCK_SIZE as isize;\n+        while i + block_size as isize <= len {\n+            // Swap a block of bytes of x & y, using t as a temporary buffer\n+            // This should be optimized into efficient SIMD operations where available\n+            ptr::copy_nonoverlapping(x.offset(i), t, block_size);\n+            ptr::copy_nonoverlapping(y.offset(i), x.offset(i), block_size);\n+            ptr::copy_nonoverlapping(t, y.offset(i), block_size);\n+            i += block_size as isize;\n         }\n         if i < len {\n             // Swap any remaining bytes"}]}