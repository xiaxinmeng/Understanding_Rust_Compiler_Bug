{"sha": "bca490808fda5ccd73522750025c47b79306aa72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYTQ5MDgwOGZkYTVjY2Q3MzUyMjc1MDAyNWM0N2I3OTMwNmFhNzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-18T17:06:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-18T17:06:30Z"}, "message": "Rollup merge of #57357 - frewsxcv:frewsxcv-partial-eq, r=QuietMisdreavus\n\nCleanup PartialEq docs.\n\n- Cleanup the `impl PartialEq<BookFormat> for Book` implementation\n- Implement `impl PartialEq<Book> for BookFormat` so it\u2019s symmetric\n  - Fixes https://github.com/rust-lang/rust/issues/53844.\n- Removes the last example since it appears to be redundant with the\n  previous two examples.", "tree": {"sha": "591c4d8321f854f4dd84a1863de47335d4fb71eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/591c4d8321f854f4dd84a1863de47335d4fb71eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bca490808fda5ccd73522750025c47b79306aa72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcQgeXCRBK7hj4Ov3rIwAAdHIIAAHSITVLwYbTrYl9ynQ809dz\nW+yjzPqvQl3ZDKU7bLqzTpacb5E9Vejx0vj+jVMHu3CuHBYFIq0xDuFZ98JwGQQW\noR08c2D0/AQbmDc4gns1ZlOvk4hEigCcG1LLjh91eGOxjdTILnGWRAAXcvJYN8n3\n2/V5HB8er/EqvoVLehjxJXMZUIILw6cPzkOTcmYNgRBzvdEKYi7fYNkrXIkvaXTx\nJrBvKdnfqzhNMGqhkuzCBaDPhHpcj9pNGSbmwkPou4aCqNefPHeg+asFkBEYbbWC\nMXdh+8pSGwfF7cEHdFZ1v4apC3I4iwz2+u2GCPfpBzPepAhXse2lx1iJXA+BVtY=\n=DvUF\n-----END PGP SIGNATURE-----\n", "payload": "tree 591c4d8321f854f4dd84a1863de47335d4fb71eb\nparent 76cdccb2c2b90539fe37f4a264a80c94d395cc78\nparent 32b28340b20ea8b45d3e663dc81bb9092ecdeeb1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547831190 +0100\ncommitter GitHub <noreply@github.com> 1547831190 +0100\n\nRollup merge of #57357 - frewsxcv:frewsxcv-partial-eq, r=QuietMisdreavus\n\nCleanup PartialEq docs.\n\n- Cleanup the `impl PartialEq<BookFormat> for Book` implementation\n- Implement `impl PartialEq<Book> for BookFormat` so it\u2019s symmetric\n  - Fixes https://github.com/rust-lang/rust/issues/53844.\n- Removes the last example since it appears to be redundant with the\n  previous two examples.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bca490808fda5ccd73522750025c47b79306aa72", "html_url": "https://github.com/rust-lang/rust/commit/bca490808fda5ccd73522750025c47b79306aa72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bca490808fda5ccd73522750025c47b79306aa72/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76cdccb2c2b90539fe37f4a264a80c94d395cc78", "url": "https://api.github.com/repos/rust-lang/rust/commits/76cdccb2c2b90539fe37f4a264a80c94d395cc78", "html_url": "https://github.com/rust-lang/rust/commit/76cdccb2c2b90539fe37f4a264a80c94d395cc78"}, {"sha": "32b28340b20ea8b45d3e663dc81bb9092ecdeeb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/32b28340b20ea8b45d3e663dc81bb9092ecdeeb1", "html_url": "https://github.com/rust-lang/rust/commit/32b28340b20ea8b45d3e663dc81bb9092ecdeeb1"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "d43a5c1032ce0f0edd21dd2884f14f13294c7603", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bca490808fda5ccd73522750025c47b79306aa72/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca490808fda5ccd73522750025c47b79306aa72/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=bca490808fda5ccd73522750025c47b79306aa72", "patch": "@@ -91,6 +91,8 @@ use self::Ordering::*;\n /// For example, let's tweak our previous code a bit:\n ///\n /// ```\n+/// // The derive implements <BookFormat> == <BookFormat> comparisons\n+/// #[derive(PartialEq)]\n /// enum BookFormat {\n ///     Paperback,\n ///     Hardback,\n@@ -102,31 +104,34 @@ use self::Ordering::*;\n ///     format: BookFormat,\n /// }\n ///\n+/// // Implement <Book> == <BookFormat> comparisons\n /// impl PartialEq<BookFormat> for Book {\n ///     fn eq(&self, other: &BookFormat) -> bool {\n-///         match (&self.format, other) {\n-///            (BookFormat::Paperback, BookFormat::Paperback) => true,\n-///            (BookFormat::Hardback,  BookFormat::Hardback)  => true,\n-///            (BookFormat::Ebook,     BookFormat::Ebook)     => true,\n-///            (_, _) => false,\n-///         }\n+///         self.format == *other\n+///     }\n+/// }\n+///\n+/// // Implement <BookFormat> == <Book> comparisons\n+/// impl PartialEq<Book> for BookFormat {\n+///     fn eq(&self, other: &Book) -> bool {\n+///         *self == other.format\n ///     }\n /// }\n ///\n /// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n ///\n /// assert!(b1 == BookFormat::Paperback);\n-/// assert!(b1 != BookFormat::Ebook);\n+/// assert!(BookFormat::Ebook != b1);\n /// ```\n ///\n /// By changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\n-/// we've changed what type we can use on the right side of the `==` operator.\n-/// This lets us use it in the `assert!` statements at the bottom.\n+/// we allow `BookFormat`s to be compared with `Book`s.\n ///\n /// You can also combine these implementations to let the `==` operator work with\n /// two different types:\n ///\n /// ```\n+/// #[derive(PartialEq)]\n /// enum BookFormat {\n ///     Paperback,\n ///     Hardback,\n@@ -140,12 +145,13 @@ use self::Ordering::*;\n ///\n /// impl PartialEq<BookFormat> for Book {\n ///     fn eq(&self, other: &BookFormat) -> bool {\n-///         match (&self.format, other) {\n-///            (&BookFormat::Paperback, &BookFormat::Paperback) => true,\n-///            (&BookFormat::Hardback,  &BookFormat::Hardback)  => true,\n-///            (&BookFormat::Ebook,     &BookFormat::Ebook)     => true,\n-///            (_, _) => false,\n-///         }\n+///         self.format == *other\n+///     }\n+/// }\n+///\n+/// impl PartialEq<Book> for BookFormat {\n+///     fn eq(&self, other: &Book) -> bool {\n+///         *self == other.format\n ///     }\n /// }\n ///\n@@ -159,7 +165,7 @@ use self::Ordering::*;\n /// let b2 = Book { isbn: 3, format: BookFormat::Ebook };\n ///\n /// assert!(b1 == BookFormat::Paperback);\n-/// assert!(b1 != BookFormat::Ebook);\n+/// assert!(BookFormat::Ebook != b1);\n /// assert!(b1 == b2);\n /// ```\n ///"}]}