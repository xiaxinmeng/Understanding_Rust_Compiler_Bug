{"sha": "49740b792ddf1bc6d98445b8955b2ebfb742772b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NzQwYjc5MmRkZjFiYzZkOTg0NDViODk1NWIyZWJmYjc0Mjc3MmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T07:01:08Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T10:50:44Z"}, "message": "extract parse_pat_range_starting_with_lit", "tree": {"sha": "a14b9455d2eb39051ba48b51f045ef6d4f67ffe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a14b9455d2eb39051ba48b51f045ef6d4f67ffe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49740b792ddf1bc6d98445b8955b2ebfb742772b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49740b792ddf1bc6d98445b8955b2ebfb742772b", "html_url": "https://github.com/rust-lang/rust/commit/49740b792ddf1bc6d98445b8955b2ebfb742772b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49740b792ddf1bc6d98445b8955b2ebfb742772b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6f980f9b804acb42e72ba4b071320ca9e7f22e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f980f9b804acb42e72ba4b071320ca9e7f22e0", "html_url": "https://github.com/rust-lang/rust/commit/e6f980f9b804acb42e72ba4b071320ca9e7f22e0"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "b821d9da3548fa20cca844f21384dbc18ef26229", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/49740b792ddf1bc6d98445b8955b2ebfb742772b/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49740b792ddf1bc6d98445b8955b2ebfb742772b/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=49740b792ddf1bc6d98445b8955b2ebfb742772b", "patch": "@@ -202,26 +202,10 @@ impl<'a> Parser<'a> {\n             } else {\n                 // Try to parse everything else as literal with optional minus\n                 match self.parse_literal_maybe_minus() {\n-                    Ok(begin) => {\n-                        let op_span = self.token.span;\n-                        if self.check(&token::DotDot) || self.check(&token::DotDotEq) ||\n-                                self.check(&token::DotDotDot) {\n-                            let (end_kind, form) = if self.eat(&token::DotDotDot) {\n-                                (RangeEnd::Included(RangeSyntax::DotDotDot), \"...\")\n-                            } else if self.eat(&token::DotDotEq) {\n-                                (RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\")\n-                            } else if self.eat(&token::DotDot) {\n-                                (RangeEnd::Excluded, \"..\")\n-                            } else {\n-                                panic!(\"impossible case: we already matched \\\n-                                        on a range-operator token\")\n-                            };\n-                            let end = self.parse_pat_range_end_opt(&begin, form)?;\n-                            PatKind::Range(begin, end, respan(op_span, end_kind))\n-                        } else {\n-                            PatKind::Lit(begin)\n-                        }\n-                    }\n+                    Ok(begin) if self.check(&token::DotDot) || self.check(&token::DotDotEq)\n+                        || self.check(&token::DotDotDot)\n+                        => self.parse_pat_range_starting_with_lit(begin)?,\n+                    Ok(begin) => PatKind::Lit(begin),\n                     Err(mut err) => {\n                         self.cancel(&mut err);\n                         let expected = expected.unwrap_or(\"pattern\");\n@@ -360,6 +344,23 @@ impl<'a> Parser<'a> {\n         Ok(PatKind::Range(begin, end, respan(op_span, end_kind)))\n     }\n \n+    /// Parse a range pattern `$literal $form $end?` where `$form = \"..\" | \"...\" | \"..=\" ;`.\n+    /// The `$path` has already been parsed and the next token is the `$form`.\n+    fn parse_pat_range_starting_with_lit(&mut self, begin: P<Expr>) -> PResult<'a, PatKind> {\n+        let op_span = self.token.span;\n+        let (end_kind, form) = if self.eat(&token::DotDotDot) {\n+            (RangeEnd::Included(RangeSyntax::DotDotDot), \"...\")\n+        } else if self.eat(&token::DotDotEq) {\n+            (RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\")\n+        } else if self.eat(&token::DotDot) {\n+            (RangeEnd::Excluded, \"..\")\n+        } else {\n+            panic!(\"impossible case: we already matched on a range-operator token\")\n+        };\n+        let end = self.parse_pat_range_end_opt(&begin, form)?;\n+        Ok(PatKind::Range(begin, end, respan(op_span, end_kind)))\n+    }\n+\n     // Helper function to decide whether to parse as ident binding\n     // or to try to do something more complex like range patterns.\n     fn parse_as_ident(&mut self) -> bool {"}]}