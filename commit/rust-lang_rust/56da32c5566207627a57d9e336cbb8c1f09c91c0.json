{"sha": "56da32c5566207627a57d9e336cbb8c1f09c91c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZGEzMmM1NTY2MjA3NjI3YTU3ZDllMzM2Y2JiOGMxZjA5YzkxYzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T00:04:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T03:31:20Z"}, "message": "rustdoc: Don't ignore dox on impl blocks\n\nCloses #9611", "tree": {"sha": "c1ef5402a7751b4257fe2021c25dd4566dd2beed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1ef5402a7751b4257fe2021c25dd4566dd2beed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56da32c5566207627a57d9e336cbb8c1f09c91c0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56da32c5566207627a57d9e336cbb8c1f09c91c0", "html_url": "https://github.com/rust-lang/rust/commit/56da32c5566207627a57d9e336cbb8c1f09c91c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56da32c5566207627a57d9e336cbb8c1f09c91c0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d505f70f6f16ea7dec1bba9a32a87216315e739d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d505f70f6f16ea7dec1bba9a32a87216315e739d", "html_url": "https://github.com/rust-lang/rust/commit/d505f70f6f16ea7dec1bba9a32a87216315e739d"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "ae5310e4724d58e1ea7f30491a2f40289a204a62", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/56da32c5566207627a57d9e336cbb8c1f09c91c0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56da32c5566207627a57d9e336cbb8c1f09c91c0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=56da32c5566207627a57d9e336cbb8c1f09c91c0", "patch": "@@ -61,7 +61,7 @@ struct Cache {\n     // typaram id => name of that typaram\n     typarams: HashMap<ast::NodeId, ~str>,\n     // type id => all implementations for that type\n-    impls: HashMap<ast::NodeId, ~[clean::Impl]>,\n+    impls: HashMap<ast::NodeId, ~[(clean::Impl, Option<~str>)]>,\n     // path id => (full qualified path, shortty) -- used to generate urls\n     paths: HashMap<ast::NodeId, (~[~str], &'static str)>,\n     // trait id => method name => dox\n@@ -454,21 +454,34 @@ impl DocFolder for Cache {\n         // implementations elsewhere\n         let ret = match self.fold_item_recur(item) {\n             Some(item) => {\n-                match item.inner {\n-                    clean::ImplItem(i) => {\n+                match item {\n+                    clean::Item{ attrs, inner: clean::ImplItem(i), _ } => {\n                         match i.for_ {\n                             clean::ResolvedPath { did, _ } if is_local(did) => {\n                                 let id = did.node;\n                                 let v = do self.impls.find_or_insert_with(id) |_| {\n                                     ~[]\n                                 };\n-                                v.push(i);\n+                                // extract relevant documentation for this impl\n+                                match attrs.move_iter().find(|a| {\n+                                    match *a {\n+                                        clean::NameValue(~\"doc\", _) => true,\n+                                        _ => false\n+                                    }\n+                                }) {\n+                                    Some(clean::NameValue(_, dox)) => {\n+                                        v.push((i, Some(dox)));\n+                                    }\n+                                    Some(*) | None => {\n+                                        v.push((i, None));\n+                                    }\n+                                }\n                             }\n                             _ => {}\n                         }\n                         None\n                     }\n-                    _ => Some(item),\n+                    i => Some(i),\n                 }\n             }\n             i => i,\n@@ -1205,22 +1218,26 @@ fn render_methods(w: &mut io::Writer, it: &clean::Item) {\n         do cache.read |c| {\n             match c.impls.find(&it.id) {\n                 Some(v) => {\n-                    let mut non_trait = v.iter().filter(|i| i.trait_.is_none());\n+                    let mut non_trait = v.iter().filter(|p| {\n+                        p.n0_ref().trait_.is_none()\n+                    });\n                     let non_trait = non_trait.to_owned_vec();\n-                    let mut traits = v.iter().filter(|i| i.trait_.is_some());\n+                    let mut traits = v.iter().filter(|p| {\n+                        p.n0_ref().trait_.is_some()\n+                    });\n                     let traits = traits.to_owned_vec();\n \n                     if non_trait.len() > 0 {\n                         write!(w, \"<h2 id='methods'>Methods</h2>\");\n-                        for &i in non_trait.iter() {\n-                            render_impl(w, i);\n+                        for &(ref i, ref dox) in non_trait.move_iter() {\n+                            render_impl(w, i, dox);\n                         }\n                     }\n                     if traits.len() > 0 {\n                         write!(w, \"<h2 id='implementations'>Trait \\\n                                    Implementations</h2>\");\n-                        for &i in traits.iter() {\n-                            render_impl(w, i);\n+                        for &(ref i, ref dox) in traits.move_iter() {\n+                            render_impl(w, i, dox);\n                         }\n                     }\n                 }\n@@ -1230,7 +1247,7 @@ fn render_methods(w: &mut io::Writer, it: &clean::Item) {\n     }\n }\n \n-fn render_impl(w: &mut io::Writer, i: &clean::Impl) {\n+fn render_impl(w: &mut io::Writer, i: &clean::Impl, dox: &Option<~str>) {\n     write!(w, \"<h3 class='impl'><code>impl{} \", i.generics);\n     let trait_id = match i.trait_ {\n         Some(ref ty) => {\n@@ -1243,6 +1260,13 @@ fn render_impl(w: &mut io::Writer, i: &clean::Impl) {\n         None => None\n     };\n     write!(w, \"{}</code></h3>\", i.for_);\n+    match *dox {\n+        Some(ref dox) => {\n+            write!(w, \"<div class='docblock'>{}</div>\",\n+                   Markdown(dox.as_slice()));\n+        }\n+        None => {}\n+    }\n     write!(w, \"<div class='methods'>\");\n     for meth in i.methods.iter() {\n         write!(w, \"<h4 id='method.{}' class='method'><code>\","}]}