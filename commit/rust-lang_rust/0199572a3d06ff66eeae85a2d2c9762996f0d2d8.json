{"sha": "0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOTk1NzJhM2QwNmZmNjZlZWFlODVhMmQyYzk3NjI5OTZmMGQyZDg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T10:41:47Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T10:41:47Z"}, "message": "Merge #517 #518\n\n517: gracefully handle cycles in crate graph r=matklad a=matklad\n\n\n\n518: Add an explanatory message when we use the Query fallback r=matklad a=DJMcNab\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/269.\r\n\r\nThere is no good way to explain it for go_to_def, so I've just fallen back on to_vec.\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\nCo-authored-by: DJMcNab <36049421+djmcnab@users.noreply.github.com>", "tree": {"sha": "71af98282ee59fb396646f51647a19488b01e4ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71af98282ee59fb396646f51647a19488b01e4ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "html_url": "https://github.com/rust-lang/rust/commit/0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "html_url": "https://github.com/rust-lang/rust/commit/ff3d91bb0ce9e40059c7322ce562946b8088d3e7"}, {"sha": "77f67ca7e2caac6d94215834981ae3f6fb908443", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f67ca7e2caac6d94215834981ae3f6fb908443", "html_url": "https://github.com/rust-lang/rust/commit/77f67ca7e2caac6d94215834981ae3f6fb908443"}, {"sha": "a53c5de1fd970fed989eb6435ba6a8c67362c63b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a53c5de1fd970fed989eb6435ba6a8c67362c63b", "html_url": "https://github.com/rust-lang/rust/commit/a53c5de1fd970fed989eb6435ba6a8c67362c63b"}], "stats": {"total": 165, "additions": 114, "deletions": 51}, "files": [{"sha": "2b761ea0c447ca1e0891ee5d54ddce7a81e1975c", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 48, "deletions": 34, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "patch": "@@ -53,6 +53,9 @@ pub struct CrateGraph {\n     arena: FxHashMap<CrateId, CrateData>,\n }\n \n+#[derive(Debug)]\n+pub struct CyclicDependencies;\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateId(pub u32);\n \n@@ -94,12 +97,16 @@ impl CrateGraph {\n         assert!(prev.is_none());\n         crate_id\n     }\n-    pub fn add_dep(&mut self, from: CrateId, name: SmolStr, to: CrateId) {\n-        let mut visited = FxHashSet::default();\n-        if self.dfs_find(from, to, &mut visited) {\n-            panic!(\"Cycle dependencies found.\")\n+    pub fn add_dep(\n+        &mut self,\n+        from: CrateId,\n+        name: SmolStr,\n+        to: CrateId,\n+    ) -> Result<(), CyclicDependencies> {\n+        if self.dfs_find(from, to, &mut FxHashSet::default()) {\n+            return Err(CyclicDependencies);\n         }\n-        self.arena.get_mut(&from).unwrap().add_dep(name, to)\n+        Ok(self.arena.get_mut(&from).unwrap().add_dep(name, to))\n     }\n     pub fn is_empty(&self) -> bool {\n         self.arena.is_empty()\n@@ -139,35 +146,6 @@ impl CrateGraph {\n     }\n }\n \n-#[cfg(test)]\n-mod tests {\n-    use super::{CrateGraph, FxHashMap, FileId, SmolStr};\n-\n-    #[test]\n-    #[should_panic]\n-    fn it_should_painc_because_of_cycle_dependencies() {\n-        let mut graph = CrateGraph::default();\n-        let crate1 = graph.add_crate_root(FileId(1u32));\n-        let crate2 = graph.add_crate_root(FileId(2u32));\n-        let crate3 = graph.add_crate_root(FileId(3u32));\n-        graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2);\n-        graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3);\n-        graph.add_dep(crate3, SmolStr::new(\"crate1\"), crate1);\n-    }\n-\n-    #[test]\n-    fn it_works() {\n-        let mut graph = CrateGraph {\n-            arena: FxHashMap::default(),\n-        };\n-        let crate1 = graph.add_crate_root(FileId(1u32));\n-        let crate2 = graph.add_crate_root(FileId(2u32));\n-        let crate3 = graph.add_crate_root(FileId(3u32));\n-        graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2);\n-        graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3);\n-    }\n-}\n-\n salsa::query_group! {\n     pub trait FilesDatabase: salsa::Database {\n         /// Text of the file.\n@@ -209,3 +187,39 @@ salsa::query_group! {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{CrateGraph, FileId, SmolStr};\n+\n+    #[test]\n+    fn it_should_painc_because_of_cycle_dependencies() {\n+        let mut graph = CrateGraph::default();\n+        let crate1 = graph.add_crate_root(FileId(1u32));\n+        let crate2 = graph.add_crate_root(FileId(2u32));\n+        let crate3 = graph.add_crate_root(FileId(3u32));\n+        assert!(graph\n+            .add_dep(crate1, SmolStr::new(\"crate2\"), crate2)\n+            .is_ok());\n+        assert!(graph\n+            .add_dep(crate2, SmolStr::new(\"crate3\"), crate3)\n+            .is_ok());\n+        assert!(graph\n+            .add_dep(crate3, SmolStr::new(\"crate1\"), crate1)\n+            .is_err());\n+    }\n+\n+    #[test]\n+    fn it_works() {\n+        let mut graph = CrateGraph::default();\n+        let crate1 = graph.add_crate_root(FileId(1u32));\n+        let crate2 = graph.add_crate_root(FileId(2u32));\n+        let crate3 = graph.add_crate_root(FileId(3u32));\n+        assert!(graph\n+            .add_dep(crate1, SmolStr::new(\"crate2\"), crate2)\n+            .is_ok());\n+        assert!(graph\n+            .add_dep(crate2, SmolStr::new(\"crate3\"), crate3)\n+            .is_ok());\n+    }\n+}"}, {"sha": "647fd92aad01e430f88d961e25f6c10d575111d2", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "patch": "@@ -235,7 +235,9 @@ fn item_map_across_crates() {\n     let mut crate_graph = CrateGraph::default();\n     let main_crate = crate_graph.add_crate_root(main_id);\n     let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate);\n+    crate_graph\n+        .add_dep(main_crate, \"test_crate\".into(), lib_crate)\n+        .unwrap();\n \n     db.set_crate_graph(crate_graph);\n \n@@ -288,7 +290,9 @@ fn import_across_source_roots() {\n     let mut crate_graph = CrateGraph::default();\n     let main_crate = crate_graph.add_crate_root(main_id);\n     let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate);\n+    crate_graph\n+        .add_dep(main_crate, \"test_crate\".into(), lib_crate)\n+        .unwrap();\n \n     db.set_crate_graph(crate_graph);\n \n@@ -330,7 +334,9 @@ fn reexport_across_crates() {\n     let mut crate_graph = CrateGraph::default();\n     let main_crate = crate_graph.add_crate_root(main_id);\n     let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate);\n+    crate_graph\n+        .add_dep(main_crate, \"test_crate\".into(), lib_crate)\n+        .unwrap();\n \n     db.set_crate_graph(crate_graph);\n "}, {"sha": "e2537758dd3b18da725d7fbfae295c1f3135795d", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "patch": "@@ -13,8 +13,11 @@ pub(crate) fn goto_definition(\n     let file = db.source_file(position.file_id);\n     let syntax = file.syntax();\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n-        let navs = reference_definition(db, position.file_id, name_ref)?;\n-        return Ok(Some(RangeInfo::new(name_ref.syntax().range(), navs)));\n+        let navs = reference_definition(db, position.file_id, name_ref)?.to_vec();\n+        return Ok(Some(RangeInfo::new(\n+            name_ref.syntax().range(),\n+            navs.to_vec(),\n+        )));\n     }\n     if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset) {\n         let navs = ctry!(name_definition(db, position.file_id, name)?);\n@@ -23,19 +26,35 @@ pub(crate) fn goto_definition(\n     Ok(None)\n }\n \n+pub(crate) enum ReferenceResult {\n+    Exact(NavigationTarget),\n+    Approximate(Vec<NavigationTarget>),\n+}\n+\n+impl ReferenceResult {\n+    fn to_vec(self) -> Vec<NavigationTarget> {\n+        use self::ReferenceResult::*;\n+        match self {\n+            Exact(target) => vec![target],\n+            Approximate(vec) => vec,\n+        }\n+    }\n+}\n+\n pub(crate) fn reference_definition(\n     db: &RootDatabase,\n     file_id: FileId,\n     name_ref: &ast::NameRef,\n-) -> Cancelable<Vec<NavigationTarget>> {\n+) -> Cancelable<ReferenceResult> {\n+    use self::ReferenceResult::*;\n     if let Some(fn_descr) =\n         hir::source_binder::function_from_child_node(db, file_id, name_ref.syntax())?\n     {\n         let scope = fn_descr.scopes(db)?;\n         // First try to resolve the symbol locally\n         if let Some(entry) = scope.resolve_local_name(name_ref) {\n             let nav = NavigationTarget::from_scope_entry(file_id, &entry);\n-            return Ok(vec![nav]);\n+            return Ok(Exact(nav));\n         };\n     }\n     // Then try module name resolution\n@@ -51,7 +70,7 @@ pub(crate) fn reference_definition(\n             let resolved = module.resolve_path(db, &path)?;\n             if let Some(def_id) = resolved.take_types().or(resolved.take_values()) {\n                 if let Some(target) = NavigationTarget::from_def(db, def_id.resolve(db)?)? {\n-                    return Ok(vec![target]);\n+                    return Ok(Exact(target));\n                 }\n             }\n         }\n@@ -62,7 +81,7 @@ pub(crate) fn reference_definition(\n         .into_iter()\n         .map(NavigationTarget::from_symbol)\n         .collect();\n-    Ok(navs)\n+    Ok(Approximate(navs))\n }\n \n fn name_definition("}, {"sha": "2968b807cad49b3ca9118aceccc6003dba30b191", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "patch": "@@ -16,9 +16,16 @@ pub(crate) fn hover(\n \n     let mut range = None;\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n-        let navs = crate::goto_definition::reference_definition(db, position.file_id, name_ref)?;\n-        for nav in navs {\n-            res.extend(doc_text_for(db, nav)?)\n+        use crate::goto_definition::{ReferenceResult::*, reference_definition};\n+        let ref_result = reference_definition(db, position.file_id, name_ref)?;\n+        match ref_result {\n+            Exact(nav) => res.extend(doc_text_for(db, nav)?),\n+            Approximate(navs) => {\n+                res.push(\"Failed to exactly resolve the symbol. This is probably because rust_analyzer does not yet support glob imports or traits.  \\nThese methods were found instead:\".to_string());\n+                for nav in navs {\n+                    res.extend(doc_text_for(db, nav)?)\n+                }\n+            }\n         }\n         if !res.is_empty() {\n             range = Some(name_ref.syntax().range())\n@@ -34,7 +41,7 @@ pub(crate) fn hover(\n             file_id: position.file_id,\n             range: node.range(),\n         };\n-        res.extend(type_of(db, frange)?);\n+        res.extend(type_of(db, frange)?.map(Into::into));\n         range = Some(node.range());\n     };\n "}, {"sha": "d5dbf999fd157d6e9fcc730790f78170f57e41ac", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "patch": "@@ -73,7 +73,9 @@ impl ServerWorldState {\n                     if let (Some(&from), Some(&to)) =\n                         (sysroot_crates.get(&from), sysroot_crates.get(&to))\n                     {\n-                        crate_graph.add_dep(from, name.clone(), to);\n+                        if let Err(_) = crate_graph.add_dep(from, name.clone(), to) {\n+                            log::error!(\"cyclic dependency between sysroot crates\")\n+                        }\n                     }\n                 }\n             }\n@@ -108,11 +110,20 @@ impl ServerWorldState {\n                 for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n                     if let Some(to) = lib_tgt {\n                         if to != from {\n-                            crate_graph.add_dep(from, pkg.name(&ws.cargo).into(), to);\n+                            if let Err(_) =\n+                                crate_graph.add_dep(from, pkg.name(&ws.cargo).into(), to)\n+                            {\n+                                log::error!(\n+                                    \"cyclic dependency between targets of {}\",\n+                                    pkg.name(&ws.cargo)\n+                                )\n+                            }\n                         }\n                     }\n                     if let Some(std) = libstd {\n-                        crate_graph.add_dep(from, \"std\".into(), std);\n+                        if let Err(_) = crate_graph.add_dep(from, \"std\".into(), std) {\n+                            log::error!(\"cyclic dependency on std for {}\", pkg.name(&ws.cargo))\n+                        }\n                     }\n                 }\n             }\n@@ -123,7 +134,13 @@ impl ServerWorldState {\n                 for dep in pkg.dependencies(&ws.cargo) {\n                     if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                         for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                            crate_graph.add_dep(from, dep.name.clone(), to);\n+                            if let Err(_) = crate_graph.add_dep(from, dep.name.clone(), to) {\n+                                log::error!(\n+                                    \"cyclic dependency {} -> {}\",\n+                                    pkg.name(&ws.cargo),\n+                                    dep.pkg.name(&ws.cargo)\n+                                )\n+                            }\n                         }\n                     }\n                 }"}]}