{"sha": "fb19205b1bfd565ca11132eb7deb64e0338d5ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMTkyMDViMWJmZDU2NWNhMTExMzJlYjdkZWI2NGUwMzM4ZDVlY2Q=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-07-06T06:47:20Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-07-07T10:51:10Z"}, "message": "Fix rustdoc and rusti", "tree": {"sha": "78dbafb01dd71d8181370ceb0338474e5a8759b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78dbafb01dd71d8181370ceb0338474e5a8759b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb19205b1bfd565ca11132eb7deb64e0338d5ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb19205b1bfd565ca11132eb7deb64e0338d5ecd", "html_url": "https://github.com/rust-lang/rust/commit/fb19205b1bfd565ca11132eb7deb64e0338d5ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb19205b1bfd565ca11132eb7deb64e0338d5ecd/comments", "author": null, "committer": null, "parents": [{"sha": "7ce68dc9e1c47f5f7d297bc3094e21c9e3c9fd34", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce68dc9e1c47f5f7d297bc3094e21c9e3c9fd34", "html_url": "https://github.com/rust-lang/rust/commit/7ce68dc9e1c47f5f7d297bc3094e21c9e3c9fd34"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "40c662e3a09e530a4cf727d0a7864e80e06ea830", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb19205b1bfd565ca11132eb7deb64e0338d5ecd/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb19205b1bfd565ca11132eb7deb64e0338d5ecd/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=fb19205b1bfd565ca11132eb7deb64e0338d5ecd", "patch": "@@ -94,7 +94,7 @@ fn fold_const(\n             do astsrv::exec(srv) |ctxt| {\n                 match ctxt.ast_map.get_copy(&doc.id()) {\n                     ast_map::node_item(@ast::item {\n-                        node: ast::item_static(ty, _, _), _\n+                        node: ast::item_static(ref ty, _, _), _\n                     }, _) => {\n                         pprust::ty_to_str(ty, extract::interner())\n                     }\n@@ -245,12 +245,12 @@ fn fold_impl(\n         do astsrv::exec(srv) |ctxt| {\n             match ctxt.ast_map.get_copy(&doc.id()) {\n                 ast_map::node_item(@ast::item {\n-                    node: ast::item_impl(ref generics, opt_trait_type, self_ty, _), _\n+                    node: ast::item_impl(ref generics, ref opt_trait_type, ref self_ty, _), _\n                 }, _) => {\n                     let bounds = pprust::generics_to_str(generics, extract::interner());\n                     let bounds = if bounds.is_empty() { None } else { Some(bounds) };\n                     let trait_types = opt_trait_type.map_default(~[], |p| {\n-                        ~[pprust::path_to_str(p.path, extract::interner())]\n+                        ~[pprust::path_to_str(&p.path, extract::interner())]\n                     });\n                     (bounds,\n                      trait_types,\n@@ -285,15 +285,14 @@ fn fold_type(\n                 match ctxt.ast_map.get_copy(&doc.id()) {\n                     ast_map::node_item(@ast::item {\n                         ident: ident,\n-                        node: ast::item_ty(ty, ref params), _\n+                        node: ast::item_ty(ref ty, ref params), _\n                     }, _) => {\n                         Some(fmt!(\n                             \"type %s%s = %s\",\n                             to_str(ident),\n                             pprust::generics_to_str(params,\n                                                     extract::interner()),\n-                            pprust::ty_to_str(ty,\n-                                              extract::interner())\n+                            pprust::ty_to_str(ty, extract::interner())\n                         ))\n                     }\n                     _ => fail!(\"expected type\")"}, {"sha": "d9cd52201c0c504af2a7fb64c63c1ae45806d5f7", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb19205b1bfd565ca11132eb7deb64e0338d5ecd/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb19205b1bfd565ca11132eb7deb64e0338d5ecd/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=fb19205b1bfd565ca11132eb7deb64e0338d5ecd", "patch": "@@ -132,7 +132,7 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n         // differently beause they must appear before all 'use' statements\n         for blk.node.view_items.iter().advance |vi| {\n             let s = do with_pp(intr) |pp, _| {\n-                pprust::print_view_item(pp, *vi);\n+                pprust::print_view_item(pp, vi);\n             };\n             match vi.node {\n                 ast::view_item_extern_mod(*) => {"}, {"sha": "3932df1db847abfd4ed9e647ea1462adae41f2e2", "filename": "src/librusti/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb19205b1bfd565ca11132eb7deb64e0338d5ecd/src%2Flibrusti%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb19205b1bfd565ca11132eb7deb64e0338d5ecd/src%2Flibrusti%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Futils.rs?ref=fb19205b1bfd565ca11132eb7deb64e0338d5ecd", "patch": "@@ -14,14 +14,14 @@ use syntax::print::pp;\n use syntax::print::pprust;\n use syntax::parse::token;\n \n-pub fn each_binding(l: @ast::local, f: @fn(@ast::Path, ast::node_id)) {\n+pub fn each_binding(l: @ast::local, f: @fn(&ast::Path, ast::node_id)) {\n     use syntax::visit;\n \n     let vt = visit::mk_simple_visitor(\n         @visit::SimpleVisitor {\n             visit_pat: |pat| {\n                 match pat.node {\n-                    ast::pat_ident(_, path, _) => {\n+                    ast::pat_ident(_, ref path, _) => {\n                         f(path, pat.id);\n                     }\n                     _ => {}"}]}