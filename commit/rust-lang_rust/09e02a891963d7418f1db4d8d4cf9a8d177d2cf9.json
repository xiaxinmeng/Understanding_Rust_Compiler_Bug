{"sha": "09e02a891963d7418f1db4d8d4cf9a8d177d2cf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZTAyYTg5MTk2M2Q3NDE4ZjFkYjRkOGQ0Y2Y5YThkMTc3ZDJjZjk=", "commit": {"author": {"name": "Mariano Casco", "email": "madasbytes@gmail.com", "date": "2021-08-24T15:04:02Z"}, "committer": {"name": "Mariano Casco", "email": "madasbytes@gmail.com", "date": "2021-08-24T19:47:26Z"}, "message": "Add SAFETY comments to core::slice::sort::partition_in_blocks", "tree": {"sha": "06e545d33d9dcd67ad84d21f729aee8116339566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06e545d33d9dcd67ad84d21f729aee8116339566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e02a891963d7418f1db4d8d4cf9a8d177d2cf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e02a891963d7418f1db4d8d4cf9a8d177d2cf9", "html_url": "https://github.com/rust-lang/rust/commit/09e02a891963d7418f1db4d8d4cf9a8d177d2cf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e02a891963d7418f1db4d8d4cf9a8d177d2cf9/comments", "author": {"login": "mdsn", "id": 1447384, "node_id": "MDQ6VXNlcjE0NDczODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1447384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdsn", "html_url": "https://github.com/mdsn", "followers_url": "https://api.github.com/users/mdsn/followers", "following_url": "https://api.github.com/users/mdsn/following{/other_user}", "gists_url": "https://api.github.com/users/mdsn/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdsn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdsn/subscriptions", "organizations_url": "https://api.github.com/users/mdsn/orgs", "repos_url": "https://api.github.com/users/mdsn/repos", "events_url": "https://api.github.com/users/mdsn/events{/privacy}", "received_events_url": "https://api.github.com/users/mdsn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdsn", "id": 1447384, "node_id": "MDQ6VXNlcjE0NDczODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1447384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdsn", "html_url": "https://github.com/mdsn", "followers_url": "https://api.github.com/users/mdsn/followers", "following_url": "https://api.github.com/users/mdsn/following{/other_user}", "gists_url": "https://api.github.com/users/mdsn/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdsn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdsn/subscriptions", "organizations_url": "https://api.github.com/users/mdsn/orgs", "repos_url": "https://api.github.com/users/mdsn/repos", "events_url": "https://api.github.com/users/mdsn/events{/privacy}", "received_events_url": "https://api.github.com/users/mdsn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de42550d0ac525f44ec79300a1cb349ade181c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/de42550d0ac525f44ec79300a1cb349ade181c1a", "html_url": "https://github.com/rust-lang/rust/commit/de42550d0ac525f44ec79300a1cb349ade181c1a"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "8a31388fbdbbc6b68704022a2de0f4e09d50f5b6", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/09e02a891963d7418f1db4d8d4cf9a8d177d2cf9/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e02a891963d7418f1db4d8d4cf9a8d177d2cf9/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=09e02a891963d7418f1db4d8d4cf9a8d177d2cf9", "patch": "@@ -369,6 +369,22 @@ where\n             // Instead of swapping one pair at the time, it is more efficient to perform a cyclic\n             // permutation. This is not strictly equivalent to swapping, but produces a similar\n             // result using fewer memory operations.\n+\n+            // SAFETY: The use of `ptr::read` is valid because there is at least one element in\n+            // both `offsets_l` and `offsets_r`, so `left!` is a valid pointer to read from.\n+            //\n+            // The uses of `left!` involve calls to `offset` on `l`, which points to the\n+            // beginning of `v`. All the offsets pointed-to by `start_l` are at most `block_l`, so\n+            // these `offset` calls are safe as all reads are within the block. The same argument\n+            // applies for the uses of `right!`.\n+            //\n+            // The calls to `start_l.offset` are valid because there are at most `count-1` of them,\n+            // plus the final one at the end of the unsafe block, where `count` is the minimum number\n+            // of collected offsets in `offsets_l` and `offsets_r`, so there is no risk of there not\n+            // being enough elements. The same reasoning applies to the calls to `start_r.offset`.\n+            //\n+            // The calls to `copy_nonoverlapping` are safe because `left!` and `right!` are guaranteed\n+            // not to overlap, and are valid because of the reasoning above.\n             unsafe {\n                 let tmp = ptr::read(left!());\n                 ptr::copy_nonoverlapping(right!(), left!(), 1);\n@@ -389,11 +405,21 @@ where\n \n         if start_l == end_l {\n             // All out-of-order elements in the left block were moved. Move to the next block.\n+\n+            // block-width-guarantee\n+            // SAFETY: if `!is_done` then the slice width is guaranteed to be at least `2*BLOCK` wide. There\n+            // are at most `BLOCK` elements in `offsets_l` because of its size, so the `offset` operation is\n+            // safe. Otherwise, the debug assertions in the `is_done` case guarantee that\n+            // `width(l, r) == block_l + block_r`, namely, that the block sizes have been adjusted to account\n+            // for the smaller number of remaining elements.\n             l = unsafe { l.offset(block_l as isize) };\n         }\n \n         if start_r == end_r {\n             // All out-of-order elements in the right block were moved. Move to the previous block.\n+\n+            // SAFETY: Same argument as [block-width-guarantee]. Either this is a full block `2*BLOCK`-wide,\n+            // or `block_r` has been adjusted for the last handful of elements.\n             r = unsafe { r.offset(-(block_r as isize)) };\n         }\n "}]}