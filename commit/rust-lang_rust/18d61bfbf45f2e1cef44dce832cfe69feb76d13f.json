{"sha": "18d61bfbf45f2e1cef44dce832cfe69feb76d13f", "node_id": "C_kwDOAAsO6NoAKDE4ZDYxYmZiZjQ1ZjJlMWNlZjQ0ZGNlODMyY2ZlNjlmZWI3NmQxM2Y", "commit": {"author": {"name": "Orson Peters", "email": "orsonpeters@gmail.com", "date": "2022-02-19T10:22:27Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-08-15T10:33:00Z"}, "message": "Skip next_up/down tests entirely on x87.", "tree": {"sha": "56ebadf5def26b3cc667c32036791926c8775ae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56ebadf5def26b3cc667c32036791926c8775ae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18d61bfbf45f2e1cef44dce832cfe69feb76d13f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18d61bfbf45f2e1cef44dce832cfe69feb76d13f", "html_url": "https://github.com/rust-lang/rust/commit/18d61bfbf45f2e1cef44dce832cfe69feb76d13f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18d61bfbf45f2e1cef44dce832cfe69feb76d13f/comments", "author": {"login": "orlp", "id": 202547, "node_id": "MDQ6VXNlcjIwMjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/202547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orlp", "html_url": "https://github.com/orlp", "followers_url": "https://api.github.com/users/orlp/followers", "following_url": "https://api.github.com/users/orlp/following{/other_user}", "gists_url": "https://api.github.com/users/orlp/gists{/gist_id}", "starred_url": "https://api.github.com/users/orlp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orlp/subscriptions", "organizations_url": "https://api.github.com/users/orlp/orgs", "repos_url": "https://api.github.com/users/orlp/repos", "events_url": "https://api.github.com/users/orlp/events{/privacy}", "received_events_url": "https://api.github.com/users/orlp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe215af53da287dc220f319543a5ef4e75f6c54", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe215af53da287dc220f319543a5ef4e75f6c54", "html_url": "https://github.com/rust-lang/rust/commit/fbe215af53da287dc220f319543a5ef4e75f6c54"}], "stats": {"total": 226, "additions": 114, "deletions": 112}, "files": [{"sha": "0e2f0561ea06ad99b0de6e5e91209d4f83424658", "filename": "library/std/src/f32/tests.rs", "status": "modified", "additions": 55, "deletions": 53, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/18d61bfbf45f2e1cef44dce832cfe69feb76d13f/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d61bfbf45f2e1cef44dce832cfe69feb76d13f/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs?ref=18d61bfbf45f2e1cef44dce832cfe69feb76d13f", "patch": "@@ -299,79 +299,81 @@ fn test_is_sign_negative() {\n     assert!((-f32::NAN).is_sign_negative());\n }\n \n+macro_rules! assert_f32_biteq {\n+    ($left : expr, $right : expr) => {\n+        let l: &f32 = &$left;\n+        let r: &f32 = &$right;\n+        let lb = l.to_bits();\n+        let rb = r.to_bits();\n+        assert_eq!(lb, rb, \"float {} ({:#x}) is not equal to {} ({:#x})\", *l, lb, *r, rb);\n+    }\n+}\n+\n+// Ignore test on x87 floating point, these platforms do not guarantee NaN\n+// payloads are preserved and flush denormals to zero, failing the tests.\n+#[cfg(not(target_arch = \"x86\"))]\n #[test]\n fn test_next_up() {\n     let tiny = f32::from_bits(1);\n     let tiny_up = f32::from_bits(2);\n     let max_down = f32::from_bits(0x7f7f_fffe);\n     let largest_subnormal = f32::from_bits(0x007f_ffff);\n     let smallest_normal = f32::from_bits(0x0080_0000);\n+    assert_f32_biteq!(f32::NEG_INFINITY.next_up(), f32::MIN);\n+    assert_f32_biteq!(f32::MIN.next_up(), -max_down);\n+    assert_f32_biteq!((-1.0 - f32::EPSILON).next_up(), -1.0);\n+    assert_f32_biteq!((-smallest_normal).next_up(), -largest_subnormal);\n+    assert_f32_biteq!((-tiny_up).next_up(), -tiny);\n+    assert_f32_biteq!((-tiny).next_up(), -0.0f32);\n+    assert_f32_biteq!((-0.0f32).next_up(), tiny);\n+    assert_f32_biteq!(0.0f32.next_up(), tiny);\n+    assert_f32_biteq!(tiny.next_up(), tiny_up);\n+    assert_f32_biteq!(largest_subnormal.next_up(), smallest_normal);\n+    assert_f32_biteq!(1.0f32.next_up(), 1.0 + f32::EPSILON);\n+    assert_f32_biteq!(f32::MAX.next_up(), f32::INFINITY);\n+    assert_f32_biteq!(f32::INFINITY.next_up(), f32::INFINITY);\n \n     // Check that NaNs roundtrip.\n-    // Ignore test on x87 floating point, the code is still correct but these\n-    // platforms do not guarantee NaN payloads are preserved, which caused these\n-    // tests to fail.\n-    #[cfg(not(all(target_arch = \"x86\", not(target_feature = \"fxsr\"))))]\n-    {\n-        let nan0 = f32::NAN;\n-        let nan1 = f32::from_bits(f32::NAN.to_bits() ^ 0x002a_aaaa);\n-        let nan2 = f32::from_bits(f32::NAN.to_bits() ^ 0x0055_5555);\n-        assert_eq!(nan0.next_up().to_bits(), nan0.to_bits());\n-        assert_eq!(nan1.next_up().to_bits(), nan1.to_bits());\n-        assert_eq!(nan2.next_up().to_bits(), nan2.to_bits());\n-    }\n-\n-    assert_eq!(f32::NEG_INFINITY.next_up(), f32::MIN);\n-    assert_eq!(f32::MIN.next_up(), -max_down);\n-    assert_eq!((-1.0 - f32::EPSILON).next_up(), -1.0);\n-    assert_eq!((-smallest_normal).next_up(), -largest_subnormal);\n-    assert_eq!((-tiny_up).next_up(), -tiny);\n-    assert_eq!((-tiny).next_up().to_bits(), (-0.0f32).to_bits());\n-    assert_eq!((-0.0f32).next_up(), tiny);\n-    assert_eq!(0.0f32.next_up(), tiny);\n-    assert_eq!(tiny.next_up(), tiny_up);\n-    assert_eq!(largest_subnormal.next_up(), smallest_normal);\n-    assert_eq!(1.0f32.next_up(), 1.0 + f32::EPSILON);\n-    assert_eq!(f32::MAX.next_up(), f32::INFINITY);\n-    assert_eq!(f32::INFINITY.next_up(), f32::INFINITY);\n+    let nan0 = f32::NAN;\n+    let nan1 = f32::from_bits(f32::NAN.to_bits() ^ 0x002a_aaaa);\n+    let nan2 = f32::from_bits(f32::NAN.to_bits() ^ 0x0055_5555);\n+    assert_f32_biteq!(nan0.next_up(), nan0);\n+    assert_f32_biteq!(nan1.next_up(), nan1);\n+    assert_f32_biteq!(nan2.next_up(), nan2);\n }\n \n+// Ignore test on x87 floating point, these platforms do not guarantee NaN\n+// payloads are preserved and flush denormals to zero, failing the tests.\n+#[cfg(not(target_arch = \"x86\"))]\n #[test]\n fn test_next_down() {\n     let tiny = f32::from_bits(1);\n     let tiny_up = f32::from_bits(2);\n     let max_down = f32::from_bits(0x7f7f_fffe);\n     let largest_subnormal = f32::from_bits(0x007f_ffff);\n     let smallest_normal = f32::from_bits(0x0080_0000);\n+    assert_f32_biteq!(f32::NEG_INFINITY.next_down(), f32::NEG_INFINITY);\n+    assert_f32_biteq!(f32::MIN.next_down(), f32::NEG_INFINITY);\n+    assert_f32_biteq!((-max_down).next_down(), f32::MIN);\n+    assert_f32_biteq!((-1.0f32).next_down(), -1.0 - f32::EPSILON);\n+    assert_f32_biteq!((-largest_subnormal).next_down(), -smallest_normal);\n+    assert_f32_biteq!((-tiny).next_down(), -tiny_up);\n+    assert_f32_biteq!((-0.0f32).next_down(), -tiny);\n+    assert_f32_biteq!((0.0f32).next_down(), -tiny);\n+    assert_f32_biteq!(tiny.next_down(), 0.0f32);\n+    assert_f32_biteq!(tiny_up.next_down(), tiny);\n+    assert_f32_biteq!(smallest_normal.next_down(), largest_subnormal);\n+    assert_f32_biteq!((1.0 + f32::EPSILON).next_down(), 1.0f32);\n+    assert_f32_biteq!(f32::MAX.next_down(), max_down);\n+    assert_f32_biteq!(f32::INFINITY.next_down(), f32::MAX);\n \n     // Check that NaNs roundtrip.\n-    // Ignore test on x87 floating point, the code is still correct but these\n-    // platforms do not guarantee NaN payloads are preserved, which caused these\n-    // tests to fail.\n-    #[cfg(not(all(target_arch = \"x86\", not(target_feature = \"fxsr\"))))]\n-    {\n-        let nan0 = f32::NAN;\n-        let nan1 = f32::from_bits(f32::NAN.to_bits() ^ 0x002a_aaaa);\n-        let nan2 = f32::from_bits(f32::NAN.to_bits() ^ 0x0055_5555);\n-        assert_eq!(nan0.next_down().to_bits(), nan0.to_bits());\n-        assert_eq!(nan1.next_down().to_bits(), nan1.to_bits());\n-        assert_eq!(nan2.next_down().to_bits(), nan2.to_bits());\n-    }\n-\n-    assert_eq!(f32::NEG_INFINITY.next_down(), f32::NEG_INFINITY);\n-    assert_eq!(f32::MIN.next_down(), f32::NEG_INFINITY);\n-    assert_eq!((-max_down).next_down(), f32::MIN);\n-    assert_eq!((-1.0f32).next_down(), -1.0 - f32::EPSILON);\n-    assert_eq!((-largest_subnormal).next_down(), -smallest_normal);\n-    assert_eq!((-tiny).next_down(), -tiny_up);\n-    assert_eq!((-0.0f32).next_down(), -tiny);\n-    assert_eq!((0.0f32).next_down(), -tiny);\n-    assert_eq!(tiny.next_down().to_bits(), 0.0f32.to_bits());\n-    assert_eq!(tiny_up.next_down(), tiny);\n-    assert_eq!(smallest_normal.next_down(), largest_subnormal);\n-    assert_eq!((1.0 + f32::EPSILON).next_down(), 1.0f32);\n-    assert_eq!(f32::MAX.next_down(), max_down);\n-    assert_eq!(f32::INFINITY.next_down(), f32::MAX);\n+    let nan0 = f32::NAN;\n+    let nan1 = f32::from_bits(f32::NAN.to_bits() ^ 0x002a_aaaa);\n+    let nan2 = f32::from_bits(f32::NAN.to_bits() ^ 0x0055_5555);\n+    assert_f32_biteq!(nan0.next_down(), nan0);\n+    assert_f32_biteq!(nan1.next_down(), nan1);\n+    assert_f32_biteq!(nan2.next_down(), nan2);\n }\n \n #[test]"}, {"sha": "8125b2492275b23f1a24d29c59a8c55751df791b", "filename": "library/std/src/f64/tests.rs", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/18d61bfbf45f2e1cef44dce832cfe69feb76d13f/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d61bfbf45f2e1cef44dce832cfe69feb76d13f/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs?ref=18d61bfbf45f2e1cef44dce832cfe69feb76d13f", "patch": "@@ -289,79 +289,79 @@ fn test_is_sign_negative() {\n     assert!((-f64::NAN).is_sign_negative());\n }\n \n+macro_rules! assert_f64_biteq {\n+    ($left : expr, $right : expr) => {\n+        let l: &f64 = &$left;\n+        let r: &f64 = &$right;\n+        let lb = l.to_bits();\n+        let rb = r.to_bits();\n+        assert_eq!(lb, rb, \"float {} ({:#x}) is not equal to {} ({:#x})\", *l, lb, *r, rb);\n+    }\n+}\n+\n+// Ignore test on x87 floating point, these platforms do not guarantee NaN\n+// payloads are preserved and flush denormals to zero, failing the tests.\n+#[cfg(not(target_arch = \"x86\"))]\n #[test]\n fn test_next_up() {\n     let tiny = f64::from_bits(1);\n     let tiny_up = f64::from_bits(2);\n     let max_down = f64::from_bits(0x7fef_ffff_ffff_fffe);\n     let largest_subnormal = f64::from_bits(0x000f_ffff_ffff_ffff);\n     let smallest_normal = f64::from_bits(0x0010_0000_0000_0000);\n-\n-    // Check that NaNs roundtrip.\n-    // Ignore test on x87 floating point, the code is still correct but these\n-    // platforms do not guarantee NaN payloads are preserved, which caused these\n-    // tests to fail.\n-    #[cfg(not(all(target_arch = \"x86\", not(target_feature = \"fxsr\"))))]\n-    {\n-        let nan0 = f64::NAN;\n-        let nan1 = f64::from_bits(f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa);\n-        let nan2 = f64::from_bits(f64::NAN.to_bits() ^ 0x0005_5555_5555_5555);\n-        assert_eq!(nan0.next_up().to_bits(), nan0.to_bits());\n-        assert_eq!(nan1.next_up().to_bits(), nan1.to_bits());\n-        assert_eq!(nan2.next_up().to_bits(), nan2.to_bits());\n-    }\n-\n-    assert_eq!(f64::NEG_INFINITY.next_up(), f64::MIN);\n-    assert_eq!(f64::MIN.next_up(), -max_down);\n-    assert_eq!((-1.0 - f64::EPSILON).next_up(), -1.0);\n-    assert_eq!((-smallest_normal).next_up(), -largest_subnormal);\n-    assert_eq!((-tiny_up).next_up(), -tiny);\n-    assert_eq!((-tiny).next_up().to_bits(), (-0.0f64).to_bits());\n-    assert_eq!((-0.0f64).next_up(), tiny);\n-    assert_eq!(0.0f64.next_up(), tiny);\n-    assert_eq!(tiny.next_up(), tiny_up);\n-    assert_eq!(largest_subnormal.next_up(), smallest_normal);\n-    assert_eq!(1.0f64.next_up(), 1.0 + f64::EPSILON);\n-    assert_eq!(f64::MAX.next_up(), f64::INFINITY);\n-    assert_eq!(f64::INFINITY.next_up(), f64::INFINITY);\n-}\n-\n+    assert_f64_biteq!(f64::NEG_INFINITY.next_up(), f64::MIN);\n+    assert_f64_biteq!(f64::MIN.next_up(), -max_down);\n+    assert_f64_biteq!((-1.0 - f64::EPSILON).next_up(), -1.0);\n+    assert_f64_biteq!((-smallest_normal).next_up(), -largest_subnormal);\n+    assert_f64_biteq!((-tiny_up).next_up(), -tiny);\n+    assert_f64_biteq!((-tiny).next_up(), -0.0f64);\n+    assert_f64_biteq!((-0.0f64).next_up(), tiny);\n+    assert_f64_biteq!(0.0f64.next_up(), tiny);\n+    assert_f64_biteq!(tiny.next_up(), tiny_up);\n+    assert_f64_biteq!(largest_subnormal.next_up(), smallest_normal);\n+    assert_f64_biteq!(1.0f64.next_up(), 1.0 + f64::EPSILON);\n+    assert_f64_biteq!(f64::MAX.next_up(), f64::INFINITY);\n+    assert_f64_biteq!(f64::INFINITY.next_up(), f64::INFINITY);\n+\n+    let nan0 = f64::NAN;\n+    let nan1 = f64::from_bits(f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa);\n+    let nan2 = f64::from_bits(f64::NAN.to_bits() ^ 0x0005_5555_5555_5555);\n+    assert_f64_biteq!(nan0.next_up(), nan0);\n+    assert_f64_biteq!(nan1.next_up(), nan1);\n+    assert_f64_biteq!(nan2.next_up(), nan2);\n+}\n+\n+// Ignore test on x87 floating point, these platforms do not guarantee NaN\n+// payloads are preserved and flush denormals to zero, failing the tests.\n+#[cfg(not(target_arch = \"x86\"))]\n #[test]\n fn test_next_down() {\n     let tiny = f64::from_bits(1);\n     let tiny_up = f64::from_bits(2);\n     let max_down = f64::from_bits(0x7fef_ffff_ffff_fffe);\n     let largest_subnormal = f64::from_bits(0x000f_ffff_ffff_ffff);\n     let smallest_normal = f64::from_bits(0x0010_0000_0000_0000);\n-\n-    // Check that NaNs roundtrip.\n-    // Ignore test on x87 floating point, the code is still correct but these\n-    // platforms do not guarantee NaN payloads are preserved, which caused these\n-    // tests to fail.\n-    #[cfg(not(all(target_arch = \"x86\", not(target_feature = \"fxsr\"))))]\n-    {\n-        let nan0 = f64::NAN;\n-        let nan1 = f64::from_bits(f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa);\n-        let nan2 = f64::from_bits(f64::NAN.to_bits() ^ 0x0005_5555_5555_5555);\n-        assert_eq!(nan0.next_down().to_bits(), nan0.to_bits());\n-        assert_eq!(nan1.next_down().to_bits(), nan1.to_bits());\n-        assert_eq!(nan2.next_down().to_bits(), nan2.to_bits());\n-    }\n-\n-    assert_eq!(f64::NEG_INFINITY.next_down(), f64::NEG_INFINITY);\n-    assert_eq!(f64::MIN.next_down(), f64::NEG_INFINITY);\n-    assert_eq!((-max_down).next_down(), f64::MIN);\n-    assert_eq!((-1.0f64).next_down(), -1.0 - f64::EPSILON);\n-    assert_eq!((-largest_subnormal).next_down(), -smallest_normal);\n-    assert_eq!((-tiny).next_down(), -tiny_up);\n-    assert_eq!((-0.0f64).next_down(), -tiny);\n-    assert_eq!((0.0f64).next_down(), -tiny);\n-    assert_eq!(tiny.next_down().to_bits(), 0.0f64.to_bits());\n-    assert_eq!(tiny_up.next_down(), tiny);\n-    assert_eq!(smallest_normal.next_down(), largest_subnormal);\n-    assert_eq!((1.0 + f64::EPSILON).next_down(), 1.0f64);\n-    assert_eq!(f64::MAX.next_down(), max_down);\n-    assert_eq!(f64::INFINITY.next_down(), f64::MAX);\n+    assert_f64_biteq!(f64::NEG_INFINITY.next_down(), f64::NEG_INFINITY);\n+    assert_f64_biteq!(f64::MIN.next_down(), f64::NEG_INFINITY);\n+    assert_f64_biteq!((-max_down).next_down(), f64::MIN);\n+    assert_f64_biteq!((-1.0f64).next_down(), -1.0 - f64::EPSILON);\n+    assert_f64_biteq!((-largest_subnormal).next_down(), -smallest_normal);\n+    assert_f64_biteq!((-tiny).next_down(), -tiny_up);\n+    assert_f64_biteq!((-0.0f64).next_down(), -tiny);\n+    assert_f64_biteq!((0.0f64).next_down(), -tiny);\n+    assert_f64_biteq!(tiny.next_down(), 0.0f64);\n+    assert_f64_biteq!(tiny_up.next_down(), tiny);\n+    assert_f64_biteq!(smallest_normal.next_down(), largest_subnormal);\n+    assert_f64_biteq!((1.0 + f64::EPSILON).next_down(), 1.0f64);\n+    assert_f64_biteq!(f64::MAX.next_down(), max_down);\n+    assert_f64_biteq!(f64::INFINITY.next_down(), f64::MAX);\n+\n+    let nan0 = f64::NAN;\n+    let nan1 = f64::from_bits(f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa);\n+    let nan2 = f64::from_bits(f64::NAN.to_bits() ^ 0x0005_5555_5555_5555);\n+    assert_f64_biteq!(nan0.next_down(), nan0);\n+    assert_f64_biteq!(nan1.next_down(), nan1);\n+    assert_f64_biteq!(nan2.next_down(), nan2);\n }\n \n #[test]"}]}