{"sha": "ad1294dbe7a5a812ca298206bec5dbf3e425e20d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMTI5NGRiZTdhNWE4MTJjYTI5ODIwNmJlYzVkYmYzZTQyNWUyMGQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-24T21:03:52Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-24T21:03:52Z"}, "message": "threaded a `ty::ParameterEnvironment` for the current node id via the associated Ctxt item.\n\nused this to address a long-standing wart/bug in how filtering-out of\nvalues with type impl'ing `Copy` was done.", "tree": {"sha": "988f1d685aa45310e8b6b76343ec0e2c5c04b734", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/988f1d685aa45310e8b6b76343ec0e2c5c04b734"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad1294dbe7a5a812ca298206bec5dbf3e425e20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1294dbe7a5a812ca298206bec5dbf3e425e20d", "html_url": "https://github.com/rust-lang/rust/commit/ad1294dbe7a5a812ca298206bec5dbf3e425e20d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "html_url": "https://github.com/rust-lang/rust/commit/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c"}], "stats": {"total": 100, "additions": 56, "deletions": 44}, "files": [{"sha": "588160fff692b5321f144153dae7c22138b7ab89", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/graphviz.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fgraphviz.rs?ref=ad1294dbe7a5a812ca298206bec5dbf3e425e20d", "patch": "@@ -24,7 +24,7 @@ use std::marker::PhantomData;\n use std::mem;\n use std::path::Path;\n \n-use super::super::gather_moves::{MoveData};\n+use super::super::MoveDataParamEnv;\n use super::super::MirBorrowckCtxtPreDataflow;\n use bitslice::bits_to_string;\n use indexed_set::{Idx, IdxSet};\n@@ -79,15 +79,15 @@ impl<O: BitDenotation> DataflowState<O> {\n }\n \n pub trait MirWithFlowState<'tcx> {\n-    type BD: BitDenotation<Ctxt=MoveData<'tcx>>;\n+    type BD: BitDenotation<Ctxt=MoveDataParamEnv<'tcx>>;\n     fn node_id(&self) -> NodeId;\n     fn mir(&self) -> &Mir<'tcx>;\n     fn analysis_ctxt(&self) -> &<Self::BD as BitDenotation>::Ctxt;\n     fn flow_state(&self) -> &DataflowState<Self::BD>;\n }\n \n impl<'a, 'tcx: 'a, BD> MirWithFlowState<'tcx> for MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n-    where 'a, 'tcx: 'a, BD: BitDenotation<Ctxt=MoveData<'tcx>>\n+    where 'a, 'tcx: 'a, BD: BitDenotation<Ctxt=MoveDataParamEnv<'tcx>>\n {\n     type BD = BD;\n     fn node_id(&self) -> NodeId { self.node_id }\n@@ -109,7 +109,7 @@ pub fn print_borrowck_graph_to<'a, 'tcx, BD, P>(\n     path: &Path,\n     render_idx: P)\n     -> io::Result<()>\n-    where BD: BitDenotation<Ctxt=MoveData<'tcx>>,\n+    where BD: BitDenotation<Ctxt=MoveDataParamEnv<'tcx>>,\n           P: for <'b> Fn(&'b BD::Ctxt, BD::Idx) -> &'b Debug\n {\n     let g = Graph { mbcx: mbcx, phantom: PhantomData, render_idx: render_idx };"}, {"sha": "e3435ed990506e1238631f97ad3597f2443b553f", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/impls.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs?ref=ad1294dbe7a5a812ca298206bec5dbf3e425e20d", "patch": "@@ -12,7 +12,8 @@ use rustc::ty::TyCtxt;\n use rustc::mir::repr::{self, Mir};\n \n use super::super::gather_moves::{Location};\n-use super::super::gather_moves::{MoveData, MoveOutIndex, MovePathIndex};\n+use super::super::gather_moves::{MoveOutIndex, MovePathIndex};\n+use super::super::MoveDataParamEnv;\n use super::super::DropFlagState;\n use super::super::drop_flag_effects_for_function_entry;\n use super::super::drop_flag_effects_for_location;\n@@ -226,10 +227,10 @@ impl<'a, 'tcx> DefinitelyInitializedLvals<'a, 'tcx> {\n \n impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> {\n     type Idx = MovePathIndex;\n-    type Ctxt = MoveData<'tcx>;\n+    type Ctxt = MoveDataParamEnv<'tcx>;\n     fn name() -> &'static str { \"maybe_init\" }\n     fn bits_per_block(&self, ctxt: &Self::Ctxt) -> usize {\n-        ctxt.move_paths.len()\n+        ctxt.move_data.move_paths.len()\n     }\n \n     fn start_block_effect(&self, ctxt: &Self::Ctxt, sets: &mut BlockSets<MovePathIndex>)\n@@ -276,19 +277,19 @@ impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> {\n                              dest_lval: &repr::Lvalue) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_lval to 1 (initialized).\n-        let move_path_index = ctxt.rev_lookup.find(dest_lval);\n-        on_all_children_bits(self.tcx, self.mir, ctxt,\n+        let move_path_index = ctxt.move_data.rev_lookup.find(dest_lval);\n+        on_all_children_bits(self.tcx, self.mir, &ctxt.move_data,\n                              move_path_index,\n                              |mpi| { in_out.add(&mpi); });\n     }\n }\n \n impl<'a, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'tcx> {\n     type Idx = MovePathIndex;\n-    type Ctxt = MoveData<'tcx>;\n+    type Ctxt = MoveDataParamEnv<'tcx>;\n     fn name() -> &'static str { \"maybe_uninit\" }\n     fn bits_per_block(&self, ctxt: &Self::Ctxt) -> usize {\n-        ctxt.move_paths.len()\n+        ctxt.move_data.move_paths.len()\n     }\n \n     // sets on_entry bits for Arg lvalues\n@@ -338,19 +339,19 @@ impl<'a, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'tcx> {\n                              dest_lval: &repr::Lvalue) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_lval to 1 (initialized).\n-        let move_path_index = ctxt.rev_lookup.find(dest_lval);\n-        on_all_children_bits(self.tcx, self.mir, ctxt,\n+        let move_path_index = ctxt.move_data.rev_lookup.find(dest_lval);\n+        on_all_children_bits(self.tcx, self.mir, &ctxt.move_data,\n                              move_path_index,\n                              |mpi| { in_out.remove(&mpi); });\n     }\n }\n \n impl<'a, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'tcx> {\n     type Idx = MovePathIndex;\n-    type Ctxt = MoveData<'tcx>;\n+    type Ctxt = MoveDataParamEnv<'tcx>;\n     fn name() -> &'static str { \"definite_init\" }\n     fn bits_per_block(&self, ctxt: &Self::Ctxt) -> usize {\n-        ctxt.move_paths.len()\n+        ctxt.move_data.move_paths.len()\n     }\n \n     // sets on_entry bits for Arg lvalues\n@@ -399,19 +400,19 @@ impl<'a, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'tcx> {\n                              dest_lval: &repr::Lvalue) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_lval to 1 (initialized).\n-        let move_path_index = ctxt.rev_lookup.find(dest_lval);\n-        on_all_children_bits(self.tcx, self.mir, ctxt,\n+        let move_path_index = ctxt.move_data.rev_lookup.find(dest_lval);\n+        on_all_children_bits(self.tcx, self.mir, &ctxt.move_data,\n                              move_path_index,\n                              |mpi| { in_out.add(&mpi); });\n     }\n }\n \n impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n     type Idx = MoveOutIndex;\n-    type Ctxt = MoveData<'tcx>;\n+    type Ctxt = MoveDataParamEnv<'tcx>;\n     fn name() -> &'static str { \"moving_out\" }\n     fn bits_per_block(&self, ctxt: &Self::Ctxt) -> usize {\n-        ctxt.moves.len()\n+        ctxt.move_data.moves.len()\n     }\n \n     fn start_block_effect(&self,_move_data: &Self::Ctxt, _sets: &mut BlockSets<MoveOutIndex>) {\n@@ -423,7 +424,7 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n                         sets: &mut BlockSets<MoveOutIndex>,\n                         bb: repr::BasicBlock,\n                         idx: usize) {\n-        let (tcx, mir, move_data) = (self.tcx, self.mir, ctxt);\n+        let (tcx, mir, move_data) = (self.tcx, self.mir, &ctxt.move_data);\n         let stmt = &mir.basic_block_data(bb).statements[idx];\n         let loc_map = &move_data.loc_map;\n         let path_map = &move_data.path_map;\n@@ -463,7 +464,7 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n                          bb: repr::BasicBlock,\n                          statements_len: usize)\n     {\n-        let (mir, move_data) = (self.mir, ctxt);\n+        let (mir, move_data) = (self.mir, &ctxt.move_data);\n         let term = mir.basic_block_data(bb).terminator.as_ref().unwrap();\n         let loc_map = &move_data.loc_map;\n         let loc = Location { block: bb, index: statements_len };\n@@ -482,7 +483,7 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n                              _call_bb: repr::BasicBlock,\n                              _dest_bb: repr::BasicBlock,\n                              dest_lval: &repr::Lvalue) {\n-        let move_data = ctxt;\n+        let move_data = &ctxt.move_data;\n         let move_path_index = move_data.rev_lookup.find(dest_lval);\n         let bits_per_block = self.bits_per_block(ctxt);\n "}, {"sha": "c105a0997017883b527048fa9f34d595fc425b59", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=ad1294dbe7a5a812ca298206bec5dbf3e425e20d", "patch": "@@ -18,7 +18,7 @@ use std::path::PathBuf;\n use std::usize;\n \n use super::MirBorrowckCtxtPreDataflow;\n-use super::gather_moves::{MoveData};\n+use super::MoveDataParamEnv;\n \n use bitslice::{bitwise, BitwiseOperator};\n use indexed_set::{Idx, IdxSet, OwnIdxSet};\n@@ -36,7 +36,7 @@ pub trait Dataflow<BD: BitDenotation> {\n }\n \n impl<'a, 'tcx: 'a, BD> Dataflow<BD> for MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n-    where BD: BitDenotation<Ctxt=MoveData<'tcx>> + DataflowOperator\n+    where BD: BitDenotation<Ctxt=MoveDataParamEnv<'tcx>> + DataflowOperator\n {\n     fn dataflow<P>(&mut self, p: P) where P: Fn(&BD::Ctxt, BD::Idx) -> &Debug {\n         self.flow_state.build_sets();\n@@ -140,7 +140,7 @@ fn dataflow_path(context: &str, prepost: &str, path: &str) -> PathBuf {\n }\n \n impl<'a, 'tcx: 'a, BD> MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n-    where BD: BitDenotation<Ctxt=MoveData<'tcx>>\n+    where BD: BitDenotation<Ctxt=MoveDataParamEnv<'tcx>>\n {\n     fn pre_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>\n         where P: Fn(&BD::Ctxt, BD::Idx) -> &Debug"}, {"sha": "74dc921b0bba55909c9901c3c098c3d5badf535f", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=ad1294dbe7a5a812ca298206bec5dbf3e425e20d", "patch": "@@ -15,7 +15,8 @@ use syntax::codemap::Span;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::repr::{self, Mir};\n \n-use super::super::gather_moves::{MoveData, MovePathIndex};\n+use super::super::gather_moves::{MovePathIndex};\n+use super::super::MoveDataParamEnv;\n use super::BitDenotation;\n use super::DataflowResults;\n \n@@ -41,7 +42,7 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 _attributes: &[ast::Attribute],\n                                                 flow_ctxt: &O::Ctxt,\n                                                 results: &DataflowResults<O>)\n-    where O: BitDenotation<Ctxt=MoveData<'tcx>, Idx=MovePathIndex>\n+    where O: BitDenotation<Ctxt=MoveDataParamEnv<'tcx>, Idx=MovePathIndex>\n {\n     debug!(\"sanity_check_via_rustc_peek id: {:?}\", id);\n     // FIXME: this is not DRY. Figure out way to abstract this and\n@@ -56,11 +57,12 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            mir: &Mir<'tcx>,\n-                           move_data: &O::Ctxt,\n+                           ctxt: &O::Ctxt,\n                            results: &DataflowResults<O>,\n                            bb: repr::BasicBlock) where\n-    O: BitDenotation<Ctxt=MoveData<'tcx>, Idx=MovePathIndex>\n+    O: BitDenotation<Ctxt=MoveDataParamEnv<'tcx>, Idx=MovePathIndex>\n {\n+    let move_data = &ctxt.move_data;\n     let bb_data = mir.basic_block_data(bb);\n     let &repr::BasicBlockData { ref statements,\n                                 ref terminator,\n@@ -127,15 +129,15 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 tcx.sess.span_err(span, msg);\n             }\n         }\n-        \n+\n         let lhs_mpi = move_data.rev_lookup.find(lvalue);\n \n         debug!(\"rustc_peek: computing effect on lvalue: {:?} ({:?}) in stmt: {:?}\",\n                lvalue, lhs_mpi, stmt);\n         // reset GEN and KILL sets before emulating their effect.\n         for e in sets.gen_set.words_mut() { *e = 0; }\n         for e in sets.kill_set.words_mut() { *e = 0; }\n-        results.0.operator.statement_effect(move_data, &mut sets, bb, j);\n+        results.0.operator.statement_effect(ctxt, &mut sets, bb, j);\n         sets.on_entry.union(sets.gen_set);\n         sets.on_entry.subtract(sets.kill_set);\n     }"}, {"sha": "1b9d08bade7c4a798652627ceccf0db9ba977061", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1294dbe7a5a812ca298206bec5dbf3e425e20d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=ad1294dbe7a5a812ca298206bec5dbf3e425e20d", "patch": "@@ -50,6 +50,11 @@ fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<P<MetaItem\n     return None;\n }\n \n+pub struct MoveDataParamEnv<'tcx> {\n+    move_data: MoveData<'tcx>,\n+    param_env: ty::ParameterEnvironment<'tcx>,\n+}\n+\n pub fn borrowck_mir<'a, 'tcx: 'a>(\n     bcx: &mut BorrowckCtxt<'a, 'tcx>,\n     fk: FnKind,\n@@ -72,21 +77,23 @@ pub fn borrowck_mir<'a, 'tcx: 'a>(\n     let tcx = bcx.tcx;\n \n     let move_data = MoveData::gather_moves(mir, tcx);\n+    let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n+    let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n     let flow_inits =\n-        do_dataflow(tcx, mir, id, attributes, &move_data, MaybeInitializedLvals::new(tcx, mir));\n+        do_dataflow(tcx, mir, id, attributes, &mdpe, MaybeInitializedLvals::new(tcx, mir));\n     let flow_uninits =\n-        do_dataflow(tcx, mir, id, attributes, &move_data, MaybeUninitializedLvals::new(tcx, mir));\n+        do_dataflow(tcx, mir, id, attributes, &mdpe, MaybeUninitializedLvals::new(tcx, mir));\n     let flow_def_inits =\n-        do_dataflow(tcx, mir, id, attributes, &move_data, DefinitelyInitializedLvals::new(tcx, mir));\n+        do_dataflow(tcx, mir, id, attributes, &mdpe, DefinitelyInitializedLvals::new(tcx, mir));\n \n     if has_rustc_mir_with(attributes, \"rustc_peek_maybe_init\").is_some() {\n-        dataflow::sanity_check_via_rustc_peek(bcx.tcx, mir, id, attributes, &move_data, &flow_inits);\n+        dataflow::sanity_check_via_rustc_peek(bcx.tcx, mir, id, attributes, &mdpe, &flow_inits);\n     }\n     if has_rustc_mir_with(attributes, \"rustc_peek_maybe_uninit\").is_some() {\n-        dataflow::sanity_check_via_rustc_peek(bcx.tcx, mir, id, attributes, &move_data, &flow_uninits);\n+        dataflow::sanity_check_via_rustc_peek(bcx.tcx, mir, id, attributes, &mdpe, &flow_uninits);\n     }\n     if has_rustc_mir_with(attributes, \"rustc_peek_definite_init\").is_some() {\n-        dataflow::sanity_check_via_rustc_peek(bcx.tcx, mir, id, attributes, &move_data, &flow_def_inits);\n+        dataflow::sanity_check_via_rustc_peek(bcx.tcx, mir, id, attributes, &mdpe, &flow_def_inits);\n     }\n \n     if has_rustc_mir_with(attributes, \"stop_after_dataflow\").is_some() {\n@@ -97,7 +104,7 @@ pub fn borrowck_mir<'a, 'tcx: 'a>(\n         bcx: bcx,\n         mir: mir,\n         node_id: id,\n-        move_data: move_data,\n+        move_data: mdpe.move_data,\n         flow_inits: flow_inits,\n         flow_uninits: flow_uninits,\n     };\n@@ -115,7 +122,7 @@ fn do_dataflow<'a, 'tcx, BD>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              attributes: &[ast::Attribute],\n                              ctxt: &BD::Ctxt,\n                              bd: BD) -> DataflowResults<BD>\n-    where BD: BitDenotation<Idx=MovePathIndex, Ctxt=MoveData<'tcx>> + DataflowOperator\n+    where BD: BitDenotation<Idx=MovePathIndex, Ctxt=MoveDataParamEnv<'tcx>> + DataflowOperator\n {\n     use syntax::attr::AttrMetaMethods;\n \n@@ -145,7 +152,7 @@ fn do_dataflow<'a, 'tcx, BD>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         flow_state: DataflowAnalysis::new(tcx, mir, ctxt, bd),\n     };\n \n-    mbcx.dataflow(|move_data, i| &move_data.move_paths[i]);\n+    mbcx.dataflow(|ctxt, i| &ctxt.move_data.move_paths[i]);\n     mbcx.flow_state.results()\n }\n \n@@ -253,10 +260,11 @@ fn on_all_children_bits<'a, 'tcx, F>(\n fn drop_flag_effects_for_function_entry<'a, 'tcx, F>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    move_data: &MoveData<'tcx>,\n+    ctxt: &MoveDataParamEnv<'tcx>,\n     mut callback: F)\n     where F: FnMut(MovePathIndex, DropFlagState)\n {\n+    let move_data = &ctxt.move_data;\n     for i in 0..(mir.arg_decls.len() as u32) {\n         let lvalue = repr::Lvalue::Arg(i);\n         let move_path_index = move_data.rev_lookup.find(&lvalue);\n@@ -269,11 +277,13 @@ fn drop_flag_effects_for_function_entry<'a, 'tcx, F>(\n fn drop_flag_effects_for_location<'a, 'tcx, F>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    move_data: &MoveData<'tcx>,\n+    ctxt: &MoveDataParamEnv<'tcx>,\n     loc: Location,\n     mut callback: F)\n     where F: FnMut(MovePathIndex, DropFlagState)\n {\n+    let move_data = &ctxt.move_data;\n+    let param_env = &ctxt.param_env;\n     debug!(\"drop_flag_effects_for_location({:?})\", loc);\n \n     // first, move out of the RHS\n@@ -284,8 +294,7 @@ fn drop_flag_effects_for_location<'a, 'tcx, F>(\n         // don't move out of non-Copy things\n         if let MovePathContent::Lvalue(ref lvalue) = move_data.move_paths[path].content {\n             let ty = mir.lvalue_ty(tcx, lvalue).to_ty(tcx);\n-            let empty_param_env = tcx.empty_parameter_environment();\n-            if !ty.moves_by_default(tcx, &empty_param_env, DUMMY_SP) {\n+            if !ty.moves_by_default(tcx, param_env, DUMMY_SP) {\n                 continue;\n             }\n         }"}]}