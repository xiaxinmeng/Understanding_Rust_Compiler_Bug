{"sha": "fb9b693acc4cfbb9ba138e2de037049dd08df267", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOWI2OTNhY2M0Y2ZiYjliYTEzOGUyZGUwMzcwNDlkZDA4ZGYyNjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-05T06:35:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-05T17:27:01Z"}, "message": "Miri engine: use span_bug in a few places", "tree": {"sha": "844eb25fdfbaff66e7e2a36869d447e16c51cbdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/844eb25fdfbaff66e7e2a36869d447e16c51cbdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb9b693acc4cfbb9ba138e2de037049dd08df267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9b693acc4cfbb9ba138e2de037049dd08df267", "html_url": "https://github.com/rust-lang/rust/commit/fb9b693acc4cfbb9ba138e2de037049dd08df267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb9b693acc4cfbb9ba138e2de037049dd08df267/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad3b1c9bf55a93db75136cfed58975b3bbb5ff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad3b1c9bf55a93db75136cfed58975b3bbb5ff2", "html_url": "https://github.com/rust-lang/rust/commit/0ad3b1c9bf55a93db75136cfed58975b3bbb5ff2"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "54403275ba6ad817b97ffb566bf297a80af2649b", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fb9b693acc4cfbb9ba138e2de037049dd08df267/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9b693acc4cfbb9ba138e2de037049dd08df267/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=fb9b693acc4cfbb9ba138e2de037049dd08df267", "patch": "@@ -256,7 +256,7 @@ pub(super) fn mir_assign_valid_types<'tcx>(\n /// or compute the layout.\n #[cfg_attr(not(debug_assertions), inline(always))]\n pub(super) fn from_known_layout<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxtAt<'tcx>,\n     known_layout: Option<TyAndLayout<'tcx>>,\n     compute: impl FnOnce() -> InterpResult<'tcx, TyAndLayout<'tcx>>,\n ) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n@@ -265,12 +265,14 @@ pub(super) fn from_known_layout<'tcx>(\n         Some(known_layout) => {\n             if cfg!(debug_assertions) {\n                 let check_layout = compute()?;\n-                assert!(\n-                    mir_assign_valid_types(tcx, check_layout, known_layout),\n-                    \"expected type differs from actual type.\\nexpected: {:?}\\nactual: {:?}\",\n-                    known_layout.ty,\n-                    check_layout.ty,\n-                );\n+                if !mir_assign_valid_types(tcx.tcx, check_layout, known_layout) {\n+                    span_bug!(\n+                        tcx.span,\n+                        \"expected type differs from actual type.\\nexpected: {:?}\\nactual: {:?}\",\n+                        known_layout.ty,\n+                        check_layout.ty,\n+                    );\n+                }\n             }\n             Ok(known_layout)\n         }\n@@ -444,7 +446,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // have to support that case (mostly by skipping all caching).\n         match frame.locals.get(local).and_then(|state| state.layout.get()) {\n             None => {\n-                let layout = from_known_layout(self.tcx.tcx, layout, || {\n+                let layout = from_known_layout(self.tcx, layout, || {\n                     let local_ty = frame.body.local_decls[local].ty;\n                     let local_ty =\n                         self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty);"}, {"sha": "3741f31927e9428a25f593a4de2e804375bb6179", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9b693acc4cfbb9ba138e2de037049dd08df267/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9b693acc4cfbb9ba138e2de037049dd08df267/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=fb9b693acc4cfbb9ba138e2de037049dd08df267", "patch": "@@ -529,7 +529,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Value(val_val) => val_val,\n         };\n         // Other cases need layout.\n-        let layout = from_known_layout(self.tcx.tcx, layout, || self.layout_of(val.ty))?;\n+        let layout = from_known_layout(self.tcx, layout, || self.layout_of(val.ty))?;\n         let op = match val_val {\n             ConstValue::ByRef { alloc, offset } => {\n                 let id = self.tcx.alloc_map.lock().create_memory_alloc(alloc);"}, {"sha": "828df9a0930f533531f78b10ac5fff246894e2c9", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fb9b693acc4cfbb9ba138e2de037049dd08df267/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9b693acc4cfbb9ba138e2de037049dd08df267/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=fb9b693acc4cfbb9ba138e2de037049dd08df267", "patch": "@@ -867,12 +867,14 @@ where\n     ) -> InterpResult<'tcx> {\n         // We do NOT compare the types for equality, because well-typed code can\n         // actually \"transmute\" `&mut T` to `&T` in an assignment without a cast.\n-        assert!(\n-            mir_assign_valid_types(self.tcx.tcx, src.layout, dest.layout),\n-            \"type mismatch when copying!\\nsrc: {:?},\\ndest: {:?}\",\n-            src.layout.ty,\n-            dest.layout.ty,\n-        );\n+        if !mir_assign_valid_types(self.tcx.tcx, src.layout, dest.layout) {\n+            span_bug!(\n+                self.tcx.span,\n+                \"type mismatch when copying!\\nsrc: {:?},\\ndest: {:?}\",\n+                src.layout.ty,\n+                dest.layout.ty,\n+            );\n+        }\n \n         // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.\n         let src = match self.try_read_immediate(src)? {"}, {"sha": "2d8551b2bbf1e3a911508f92d2bd23ac3a01911a", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fb9b693acc4cfbb9ba138e2de037049dd08df267/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9b693acc4cfbb9ba138e2de037049dd08df267/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=fb9b693acc4cfbb9ba138e2de037049dd08df267", "patch": "@@ -66,7 +66,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         let sig = func.layout.ty.fn_sig(*self.tcx);\n                         (FnVal::Instance(self.resolve(def_id, substs)?), sig.abi())\n                     }\n-                    _ => bug!(\"invalid callee of type {:?}\", func.layout.ty),\n+                    _ => span_bug!(\n+                        terminator.source_info.span,\n+                        \"invalid callee of type {:?}\",\n+                        func.layout.ty\n+                    ),\n                 };\n                 let args = self.eval_operands(args)?;\n                 let ret = match destination {\n@@ -76,7 +80,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.eval_fn_call(fn_val, abi, &args[..], ret, *cleanup)?;\n                 // Sanity-check that `eval_fn_call` either pushed a new frame or\n                 // did a jump to another block.\n-                assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n+                if self.cur_frame() == old_stack && self.frame().block == old_bb {\n+                    span_bug!(terminator.source_info.span, \"evaluating this call made no progress\");\n+                }\n             }\n \n             Drop { location, target, unwind } => {\n@@ -121,9 +127,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | FalseEdges { .. }\n             | FalseUnwind { .. }\n             | Yield { .. }\n-            | GeneratorDrop => {\n-                bug!(\"{:#?} should have been eliminated by MIR pass\", terminator.kind)\n-            }\n+            | GeneratorDrop => span_bug!(\n+                terminator.source_info.span,\n+                \"{:#?} should have been eliminated by MIR pass\",\n+                terminator.kind\n+            ),\n         }\n \n         Ok(())"}]}