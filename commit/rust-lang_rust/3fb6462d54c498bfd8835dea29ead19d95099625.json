{"sha": "3fb6462d54c498bfd8835dea29ead19d95099625", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYjY0NjJkNTRjNDk4YmZkODgzNWRlYTI5ZWFkMTlkOTUwOTk2MjU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-04T21:47:14Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-04T22:02:36Z"}, "message": "Style and test fixes", "tree": {"sha": "b9a19c3cd9d75cd9a51315f1761e704bc04fd032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9a19c3cd9d75cd9a51315f1761e704bc04fd032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fb6462d54c498bfd8835dea29ead19d95099625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb6462d54c498bfd8835dea29ead19d95099625", "html_url": "https://github.com/rust-lang/rust/commit/3fb6462d54c498bfd8835dea29ead19d95099625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fb6462d54c498bfd8835dea29ead19d95099625/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15411d4474ceaacf10787f52c916ade3dea0eb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/15411d4474ceaacf10787f52c916ade3dea0eb49", "html_url": "https://github.com/rust-lang/rust/commit/15411d4474ceaacf10787f52c916ade3dea0eb49"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "7b919031411086e228d2cfed765cb046a0d2496f", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3fb6462d54c498bfd8835dea29ead19d95099625/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb6462d54c498bfd8835dea29ead19d95099625/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=3fb6462d54c498bfd8835dea29ead19d95099625", "patch": "@@ -216,52 +216,52 @@ fn main() {\n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [193; 197),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [236; 244),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [275; 279),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"&str\",\n     },\n     InlayHint {\n         range: [539; 543),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"(i32, char)\",\n     },\n     InlayHint {\n         range: [566; 567),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [570; 571),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [573; 574),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [584; 585),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [577; 578),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"f64\",\n     },\n     InlayHint {\n         range: [580; 581),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"f64\",\n     },\n ]\"#\n@@ -283,12 +283,12 @@ fn main() {\n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [21; 30),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [57; 66),\n-        kind: ClosureParameterType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n ]\"#\n@@ -310,12 +310,12 @@ fn main() {\n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [21; 30),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [44; 53),\n-        kind: ForExpressionBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n ]\"#\n@@ -356,27 +356,27 @@ fn main() {\n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [166; 170),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"CustomOption<Test>\",\n     },\n     InlayHint {\n         range: [334; 338),\n-        kind: IfExpressionType,\n+        kind: TypeHint,\n         label: \"&Test\",\n     },\n     InlayHint {\n         range: [389; 390),\n-        kind: IfExpressionType,\n+        kind: TypeHint,\n         label: \"&CustomOption<u32>\",\n     },\n     InlayHint {\n         range: [392; 393),\n-        kind: IfExpressionType,\n+        kind: TypeHint,\n         label: \"&u8\",\n     },\n     InlayHint {\n         range: [531; 532),\n-        kind: IfExpressionType,\n+        kind: TypeHint,\n         label: \"&u32\",\n     },\n ]\"#\n@@ -417,7 +417,7 @@ fn main() {\n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [166; 170),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"CustomOption<Test>\",\n     },\n ]\"#\n@@ -457,23 +457,23 @@ fn main() {\n \n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n-        range: [312; 316),\n-        kind: MatchArmType,\n+        range: [311; 315),\n+        kind: TypeHint,\n         label: \"Test\",\n     },\n     InlayHint {\n-        range: [359; 360),\n-        kind: MatchArmType,\n+        range: [358; 359),\n+        kind: TypeHint,\n         label: \"CustomOption<u32>\",\n     },\n     InlayHint {\n-        range: [362; 363),\n-        kind: MatchArmType,\n+        range: [361; 362),\n+        kind: TypeHint,\n         label: \"u8\",\n     },\n     InlayHint {\n-        range: [485; 486),\n-        kind: MatchArmType,\n+        range: [484; 485),\n+        kind: TypeHint,\n         label: \"u32\",\n     },\n ]\"#"}, {"sha": "11a2cfac5bc00ab78f33f9d86bb8de0eee83b394", "filename": "editors/code/src/commands/inlay_hints.ts", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3fb6462d54c498bfd8835dea29ead19d95099625/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3fb6462d54c498bfd8835dea29ead19d95099625/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts?ref=3fb6462d54c498bfd8835dea29ead19d95099625", "patch": "@@ -27,14 +27,19 @@ export class HintsUpdater {\n         if (this.displayHints) {\n             const documentUri = this.getEditorDocumentUri(editor);\n             if (documentUri !== null) {\n-                const latestDecorations = this.drawnDecorations.get(documentUri);\n+                const latestDecorations = this.drawnDecorations.get(\n+                    documentUri\n+                );\n                 if (latestDecorations === undefined) {\n                     await this.updateDecorationsFromServer(\n                         documentUri,\n                         editor!\n                     );\n                 } else {\n-                    await editor!.setDecorations(typeHintDecorationType, latestDecorations);\n+                    await editor!.setDecorations(\n+                        typeHintDecorationType,\n+                        latestDecorations\n+                    );\n                 }\n             }\n         }\n@@ -48,9 +53,12 @@ export class HintsUpdater {\n             if (displayHints) {\n                 return this.updateHints();\n             } else {\n-                const editor = vscode.window.activeTextEditor;\n-                if (this.getEditorDocumentUri(editor) !== null) {\n-                    return editor!.setDecorations(typeHintDecorationType, []);\n+                const currentEditor = vscode.window.activeTextEditor;\n+                if (this.getEditorDocumentUri(currentEditor) !== null) {\n+                    return currentEditor!.setDecorations(\n+                        typeHintDecorationType,\n+                        []\n+                    );\n                 }\n             }\n         }\n@@ -92,7 +100,10 @@ export class HintsUpdater {\n \n             this.drawnDecorations.set(documentUri, newDecorations);\n \n-            if (this.getEditorDocumentUri(vscode.window.activeTextEditor) === documentUri) {\n+            if (\n+                this.getEditorDocumentUri(vscode.window.activeTextEditor) ===\n+                documentUri\n+            ) {\n                 return editor.setDecorations(\n                     typeHintDecorationType,\n                     newDecorations"}]}