{"sha": "4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNWYxOWEwYjA0OTVjZjk3ZTYwMmI0YzhlM2I4MmQ4ZThmMjQ2YTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-31T22:34:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T12:22:31Z"}, "message": "remove the old `UserAssertTy` support", "tree": {"sha": "babc93ac590b3b5d409c81686e408cc7cf89f978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/babc93ac590b3b5d409c81686e408cc7cf89f978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3", "html_url": "https://github.com/rust-lang/rust/commit/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34575e693b8ab1b91f75141067d2730ea069b806", "url": "https://api.github.com/repos/rust-lang/rust/commits/34575e693b8ab1b91f75141067d2730ea069b806", "html_url": "https://github.com/rust-lang/rust/commit/34575e693b8ab1b91f75141067d2730ea069b806"}], "stats": {"total": 40, "additions": 2, "deletions": 38}, "files": [{"sha": "e0c2e3d8eff48cb5de5dd3953707f580c1c07b1a", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3", "patch": "@@ -106,7 +106,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     remainder_scope,\n                     init_scope,\n                     pattern,\n-                    ty,\n                     initializer,\n                     lint_level\n                 } => {\n@@ -136,23 +135,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             opt_destruction_scope.map(|de|(de, source_info)), block, |this| {\n                                 let scope = (init_scope, source_info);\n                                 this.in_scope(scope, lint_level, block, |this| {\n-                                    this.expr_into_pattern(block, ty, pattern, init)\n+                                    this.expr_into_pattern(block, pattern, init)\n                                 })\n                             }));\n                     } else {\n                         scope = this.declare_bindings(\n                             None, remainder_span, lint_level, slice::from_ref(&pattern),\n                             ArmHasGuard(false), None);\n \n-                        // FIXME(#47184): We currently only insert `UserAssertTy` statements for\n-                        // patterns that are bindings, this is as we do not want to deconstruct\n-                        // the type being assertion to match the pattern.\n-                        if let PatternKind::Binding { var, .. } = *pattern.kind {\n-                            if let Some(ty) = ty {\n-                                this.user_assert_ty(block, ty, var, span);\n-                            }\n-                        }\n-\n                         this.visit_bindings(&pattern, &mut |this, _, _, _, node, span, _| {\n                             this.storage_live_binding(block, node, span, OutsideGuard);\n                             this.schedule_drop_for_binding(node, span, OutsideGuard);"}, {"sha": "f46e3a9f1fd84c509e863dcd4f6048d9e057196e", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3", "patch": "@@ -219,26 +219,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         end_block.unit()\n     }\n \n-    pub fn user_assert_ty(&mut self, block: BasicBlock, hir_id: hir::HirId,\n-                          var: NodeId, span: Span) {\n-        if self.hir.tcx().sess.opts.debugging_opts.disable_nll_user_type_assert { return; }\n-\n-        let local_id = self.var_local_id(var, OutsideGuard);\n-        let source_info = self.source_info(span);\n-\n-        debug!(\"user_assert_ty: local_id={:?}\", hir_id.local_id);\n-        if let Some(c_ty) = self.hir.tables.user_provided_tys().get(hir_id) {\n-            debug!(\"user_assert_ty: c_ty={:?}\", c_ty);\n-            self.cfg.push(block, Statement {\n-                source_info,\n-                kind: StatementKind::UserAssertTy(*c_ty, local_id),\n-            });\n-        }\n-    }\n-\n     pub fn expr_into_pattern(&mut self,\n                              mut block: BasicBlock,\n-                             ty: Option<hir::HirId>,\n                              irrefutable_pat: Pattern<'tcx>,\n                              initializer: ExprRef<'tcx>)\n                              -> BlockAnd<()> {\n@@ -249,11 +231,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                    subpattern: None, .. } => {\n                 let place = self.storage_live_binding(block, var, irrefutable_pat.span,\n                                                       OutsideGuard);\n-\n-                if let Some(ty) = ty {\n-                    self.user_assert_ty(block, ty, var, irrefutable_pat.span);\n-                }\n-\n                 unpack!(block = self.into(&place, block, initializer));\n                 self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n                 block.unit()"}, {"sha": "0fd130c9041f87425b1c53bf24173d33b78cc9e0", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3", "patch": "@@ -93,12 +93,9 @@ pub enum StmtKind<'tcx> {\n         /// lifetime of temporaries\n         init_scope: region::Scope,\n \n-        /// let <PAT>: ty = ...\n+        /// `let <PAT> = ...`\n         pattern: Pattern<'tcx>,\n \n-        /// let pat: <TY> = init ...\n-        ty: Option<hir::HirId>,\n-\n         /// let pat: ty = <INIT> ...\n         initializer: Option<ExprRef<'tcx>>,\n "}]}