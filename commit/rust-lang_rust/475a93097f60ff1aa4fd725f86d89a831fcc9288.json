{"sha": "475a93097f60ff1aa4fd725f86d89a831fcc9288", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NWE5MzA5N2Y2MGZmMWFhNGZkNzI1Zjg2ZDg5YTgzMWZjYzkyODg=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-12T16:06:08Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-12T16:06:08Z"}, "message": "Use Source in Diagnostic and implement", "tree": {"sha": "1bb96b2f52d184533d7bfdab9f792ee008368e45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bb96b2f52d184533d7bfdab9f792ee008368e45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/475a93097f60ff1aa4fd725f86d89a831fcc9288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/475a93097f60ff1aa4fd725f86d89a831fcc9288", "html_url": "https://github.com/rust-lang/rust/commit/475a93097f60ff1aa4fd725f86d89a831fcc9288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/475a93097f60ff1aa4fd725f86d89a831fcc9288/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5e8fa606de0f42544f8379d498be5acd78259de", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e8fa606de0f42544f8379d498be5acd78259de", "html_url": "https://github.com/rust-lang/rust/commit/d5e8fa606de0f42544f8379d498be5acd78259de"}], "stats": {"total": 40, "additions": 16, "deletions": 24}, "files": [{"sha": "f6240830f8f6d91513c140decfe09a031fe2a035", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/475a93097f60ff1aa4fd725f86d89a831fcc9288/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475a93097f60ff1aa4fd725f86d89a831fcc9288/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=475a93097f60ff1aa4fd725f86d89a831fcc9288", "patch": "@@ -3,7 +3,7 @@ use std::{any::Any, fmt};\n use ra_syntax::{ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr, TextRange};\n use relative_path::RelativePathBuf;\n \n-use crate::{HirDatabase, HirFileId, Name};\n+use crate::{HirDatabase, HirFileId, Name, Source};\n \n /// Diagnostic defines hir API for errors and warnings.\n ///\n@@ -19,10 +19,9 @@ use crate::{HirDatabase, HirFileId, Name};\n /// instance of `Diagnostic` on demand.\n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n-    fn file(&self) -> HirFileId;\n-    fn syntax_node_ptr(&self) -> SyntaxNodePtr;\n+    fn source(&self) -> Source<SyntaxNodePtr>;\n     fn highlight_range(&self) -> TextRange {\n-        self.syntax_node_ptr().range()\n+        self.source().ast.range()\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n }\n@@ -34,8 +33,8 @@ pub trait AstDiagnostic {\n \n impl dyn Diagnostic {\n     pub fn syntax_node(&self, db: &impl HirDatabase) -> SyntaxNode {\n-        let node = db.parse_or_expand(self.file()).unwrap();\n-        self.syntax_node_ptr().to_node(&node)\n+        let node = db.parse_or_expand(self.source().file_id).unwrap();\n+        self.source().ast.to_node(&node)\n     }\n \n     pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n@@ -87,12 +86,11 @@ impl Diagnostic for NoSuchField {\n     fn message(&self) -> String {\n         \"no such field\".to_string()\n     }\n-    fn file(&self) -> HirFileId {\n-        self.file\n-    }\n-    fn syntax_node_ptr(&self) -> SyntaxNodePtr {\n-        self.field.into()\n+\n+    fn source(&self) -> Source<SyntaxNodePtr> {\n+        Source { file_id: self.file, ast: self.field.into() }\n     }\n+\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n     }\n@@ -109,11 +107,8 @@ impl Diagnostic for UnresolvedModule {\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }\n-    fn file(&self) -> HirFileId {\n-        self.file\n-    }\n-    fn syntax_node_ptr(&self) -> SyntaxNodePtr {\n-        self.decl.into()\n+    fn source(&self) -> Source<SyntaxNodePtr> {\n+        Source { file_id: self.file, ast: self.decl.into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -131,11 +126,8 @@ impl Diagnostic for MissingFields {\n     fn message(&self) -> String {\n         \"fill structure fields\".to_string()\n     }\n-    fn file(&self) -> HirFileId {\n-        self.file\n-    }\n-    fn syntax_node_ptr(&self) -> SyntaxNodePtr {\n-        self.field_list.into()\n+    fn source(&self) -> Source<SyntaxNodePtr> {\n+        Source { file_id: self.file, ast: self.field_list.into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -146,8 +138,8 @@ impl AstDiagnostic for MissingFields {\n     type AST = ast::NamedFieldList;\n \n     fn ast(&self, db: &impl HirDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.file()).unwrap();\n-        let node = self.syntax_node_ptr().to_node(&root);\n+        let root = db.parse_or_expand(self.source().file_id).unwrap();\n+        let node = self.source().ast.to_node(&root);\n         ast::NamedFieldList::cast(node).unwrap()\n     }\n }"}, {"sha": "98b840b267a89f50cffe6f3b691b84b425f75047", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/475a93097f60ff1aa4fd725f86d89a831fcc9288/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475a93097f60ff1aa4fd725f86d89a831fcc9288/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=475a93097f60ff1aa4fd725f86d89a831fcc9288", "patch": "@@ -48,7 +48,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         })\n     })\n     .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n-        let source_root = db.file_source_root(d.file().original_file(db));\n+        let source_root = db.file_source_root(d.source().file_id.original_file(db));\n         let create_file = FileSystemEdit::CreateFile { source_root, path: d.candidate.clone() };\n         let fix = SourceChange::file_system_edit(\"create module\", create_file);\n         res.borrow_mut().push(Diagnostic {"}]}