{"sha": "f40326027accd96214b65d44cf9c357d23de426c", "node_id": "C_kwDOAAsO6NoAKGY0MDMyNjAyN2FjY2Q5NjIxNGI2NWQ0NGNmOWMzNTdkMjNkZTQyNmM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-27T20:09:06Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-18T17:20:55Z"}, "message": "Check generators for well formedness", "tree": {"sha": "45509b1173efd20f8dfbb78414c24737fae4ec5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45509b1173efd20f8dfbb78414c24737fae4ec5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f40326027accd96214b65d44cf9c357d23de426c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f40326027accd96214b65d44cf9c357d23de426c", "html_url": "https://github.com/rust-lang/rust/commit/f40326027accd96214b65d44cf9c357d23de426c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f40326027accd96214b65d44cf9c357d23de426c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144227dae949fb98896a2ba077d8fe7f36c3238e", "url": "https://api.github.com/repos/rust-lang/rust/commits/144227dae949fb98896a2ba077d8fe7f36c3238e", "html_url": "https://github.com/rust-lang/rust/commit/144227dae949fb98896a2ba077d8fe7f36c3238e"}], "stats": {"total": 111, "additions": 101, "deletions": 10}, "files": [{"sha": "34b37c4e410280d6c383ebe59777e9df34f91648", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f40326027accd96214b65d44cf9c357d23de426c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40326027accd96214b65d44cf9c357d23de426c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=f40326027accd96214b65d44cf9c357d23de426c", "patch": "@@ -295,6 +295,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n     /// This is called much less often than `needs_process_obligation`, so we\n     /// never inline it.\n     #[inline(never)]\n+    #[instrument(level = \"debug\", skip(self, pending_obligation))]\n     fn process_obligation(\n         &mut self,\n         pending_obligation: &mut PendingPredicateObligation<'tcx>,\n@@ -303,7 +304,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n \n         let obligation = &mut pending_obligation.obligation;\n \n-        debug!(?obligation, \"process_obligation pre-resolve\");\n+        debug!(?obligation, \"pre-resolve\");\n \n         if obligation.predicate.has_infer_types_or_consts() {\n             obligation.predicate =\n@@ -312,8 +313,6 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n \n         let obligation = &pending_obligation.obligation;\n \n-        debug!(?obligation, ?obligation.cause, \"process_obligation\");\n-\n         let infcx = self.selcx.infcx();\n \n         if obligation.predicate.has_projections() {"}, {"sha": "6b758ba63cd0f73e094c69f6a308499de3b14a4b", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f40326027accd96214b65d44cf9c357d23de426c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40326027accd96214b65d44cf9c357d23de426c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=f40326027accd96214b65d44cf9c357d23de426c", "patch": "@@ -559,14 +559,16 @@ impl<'tcx> WfPredicates<'tcx> {\n                     }\n                 }\n \n-                ty::Generator(..) => {\n+                ty::Generator(did, substs, ..) => {\n                     // Walk ALL the types in the generator: this will\n                     // include the upvar types as well as the yield\n                     // type. Note that this is mildly distinct from\n                     // the closure case, where we have to be careful\n                     // about the signature of the closure. We don't\n                     // have the problem of implied bounds here since\n                     // generators don't take arguments.\n+                    let obligations = self.nominal_obligations(did, substs);\n+                    self.out.extend(obligations);\n                 }\n \n                 ty::Closure(did, substs) => {\n@@ -618,11 +620,9 @@ impl<'tcx> WfPredicates<'tcx> {\n                 }\n \n                 ty::Opaque(did, substs) => {\n-                    // all of the requirements on type parameters\n-                    // should've been checked by the instantiation\n-                    // of whatever returned this exact `impl Trait`.\n-\n-                    // for named opaque `impl Trait` types we still need to check them\n+                    // All of the requirements on type parameters\n+                    // have already been checked for `impl Trait` in\n+                    // return position. We do need to check type-alias-impl-trait though.\n                     if ty::is_impl_trait_defn(self.tcx, did).is_none() {\n                         let obligations = self.nominal_obligations(did, substs);\n                         self.out.extend(obligations);\n@@ -684,6 +684,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn nominal_obligations(\n         &mut self,\n         def_id: DefId,\n@@ -698,6 +699,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         }\n \n         let predicates = predicates.instantiate(self.tcx, substs);\n+        trace!(\"{:#?}\", predicates);\n         debug_assert_eq!(predicates.predicates.len(), origins.len());\n \n         iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())"}, {"sha": "4952a082586d0704f1a0b7ae4be69693c153d195", "filename": "src/test/ui/generic-associated-types/issue-88287.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40326027accd96214b65d44cf9c357d23de426c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40326027accd96214b65d44cf9c357d23de426c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs?ref=f40326027accd96214b65d44cf9c357d23de426c", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n // edition:2018\n \n #![feature(generic_associated_types)]\n@@ -34,6 +33,7 @@ where\n \n     fn search<'c>(&'c self, _client: &'c ()) -> Self::Future<'c, Self, Criteria> {\n         async move { todo!() }\n+        //~^ ERROR: the size for values of type `A` cannot be known at compilation time\n     }\n }\n "}, {"sha": "5241d85a5f964a5433527dc65b989a24235a612b", "filename": "src/test/ui/generic-associated-types/issue-88287.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f40326027accd96214b65d44cf9c357d23de426c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40326027accd96214b65d44cf9c357d23de426c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr?ref=f40326027accd96214b65d44cf9c357d23de426c", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the size for values of type `A` cannot be known at compilation time\n+  --> $DIR/issue-88287.rs:35:9\n+   |\n+LL | type SearchFutureTy<'f, A, B: 'f>\n+   |                         - this type parameter needs to be `std::marker::Sized`\n+...\n+LL |         async move { todo!() }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+note: required by a bound in `<T as SearchableResourceExt<Criteria>>`\n+  --> $DIR/issue-88287.rs:25:6\n+   |\n+LL | impl<T, Criteria> SearchableResourceExt<Criteria> for T\n+   |      ^ required by this bound in `<T as SearchableResourceExt<Criteria>>`\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL -     A: SearchableResource<B> + ?Sized + 'f,\n+LL +     A: SearchableResource<B> + 'f,\n+   |\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL |     T: SearchableResource<Criteria> + ?Sized,\n+   |                                     ++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "348586fa26bcc9b36507111795106db58c2629a0", "filename": "src/test/ui/lifetimes/issue-76168-hr-outlives-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f40326027accd96214b65d44cf9c357d23de426c/src%2Ftest%2Fui%2Flifetimes%2Fissue-76168-hr-outlives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40326027accd96214b65d44cf9c357d23de426c/src%2Ftest%2Fui%2Flifetimes%2Fissue-76168-hr-outlives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-76168-hr-outlives-2.rs?ref=f40326027accd96214b65d44cf9c357d23de426c", "patch": "@@ -0,0 +1,22 @@\n+// edition:2018\n+// check-pass\n+\n+trait Trait<Input> {\n+    type Output;\n+}\n+\n+async fn walk<F>(filter: F)\n+where\n+    for<'a> F: Trait<&'a u32> + 'a,\n+    for<'a> <F as Trait<&'a u32>>::Output: 'a,\n+{\n+}\n+\n+async fn walk2<F: 'static>(filter: F)\n+where\n+    for<'a> F: Trait<&'a u32> + 'a,\n+    for<'a> <F as Trait<&'a u32>>::Output: 'a,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "56323216effa4da9bb651d5c1d3af64e0b96d2a0", "filename": "src/test/ui/type-alias-impl-trait/future.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f40326027accd96214b65d44cf9c357d23de426c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40326027accd96214b65d44cf9c357d23de426c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.rs?ref=f40326027accd96214b65d44cf9c357d23de426c", "patch": "@@ -0,0 +1,22 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// edition:2021\n+// compile-flags: --crate-type=lib\n+\n+use std::future::Future;\n+\n+trait Bar {\n+    fn bar(&self);\n+}\n+\n+type FooFuture<B> = impl Future<Output = ()>;\n+\n+fn foo<B: Bar>(bar: B) -> FooFuture<B> {\n+    async move { bar.bar() }\n+    //~^ ERROR: the trait bound `B: Bar` is not satisfied\n+}\n+\n+pub fn mainish(ctx: &mut std::task::Context) {\n+    let boom: FooFuture<u32> = unsafe { core::mem::zeroed() };\n+    Box::pin(boom).as_mut().poll(ctx);\n+}"}, {"sha": "7e76c120a2566c1c6733da51182ed8b5c062f9b6", "filename": "src/test/ui/type-alias-impl-trait/future.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f40326027accd96214b65d44cf9c357d23de426c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40326027accd96214b65d44cf9c357d23de426c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.stderr?ref=f40326027accd96214b65d44cf9c357d23de426c", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `B: Bar` is not satisfied\n+  --> $DIR/future.rs:15:5\n+   |\n+LL |     async move { bar.bar() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `B`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/future.rs:14:11\n+   |\n+LL | fn foo<B: Bar>(bar: B) -> FooFuture<B> {\n+   |           ^^^ required by this bound in `foo`\n+help: consider restricting type parameter `B`\n+   |\n+LL | type FooFuture<B: Bar> = impl Future<Output = ()>;\n+   |                 +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}