{"sha": "e25322454147c02c054022d3a30f319184dbe49e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNTMyMjQ1NDE0N2MwMmMwNTQwMjJkM2EzMGYzMTkxODRkYmU0OWU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-25T07:54:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-25T07:54:39Z"}, "message": "Rollup merge of #47970 - vlovich:condvar_wait_until, r=dtolnay\n\nAdd Condvar APIs not susceptible to spurious wake\n\nProvide wait_until and wait_timeout_until helper wrappers that aren't susceptible to spurious wake.\nAdditionally wait_timeout_until makes it possible to more easily write code that waits for a fixed amount of time in face of spurious wakes since otherwise each user would have to do math on adjusting the duration.\n\nImplements #47960.", "tree": {"sha": "c7339bfb22c8ce20cf4ba0137e395aca1e55c758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7339bfb22c8ce20cf4ba0137e395aca1e55c758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e25322454147c02c054022d3a30f319184dbe49e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakmu/CRBK7hj4Ov3rIwAAdHIIAJCiX1+mlqgml+gIX28vFl1K\nEkUFxvIcAYv8NqUIEWAS+Am0Y6bjI1UUHR+7C1S25VdfJ4KCKdS+c1LmFutk0ri2\nXr5c17PkFEqp0bWcW1iMg+somrKgwI8jL5tXbnftwZWFsO/CpZLD4QhYS2vZgR/d\n1D2nGGSSlWmxnghAIjenMpoY/IzXo/H0MEKglgboH4QIZn8urxIA5JoxjN6FPtS3\nlmtZ43vVaBkInnI1gUSSItAfit8g4kAcBfJ2p3mLIqde79mgVPKf7MgS9df+A9lN\nIKAER5KO4iaD6fp5w/Mf8gYrabySLLEySzmlAmc0haP8MEA+/T/WvREu4OUJb7Q=\n=nTzN\n-----END PGP SIGNATURE-----\n", "payload": "tree c7339bfb22c8ce20cf4ba0137e395aca1e55c758\nparent f5116e712f97a6ac5cb0cbcb631e4814109bbaf5\nparent 14b403c91ab9a1e4b776e00adcd9d88153e3b736\nauthor kennytm <kennytm@gmail.com> 1519545279 +0800\ncommitter GitHub <noreply@github.com> 1519545279 +0800\n\nRollup merge of #47970 - vlovich:condvar_wait_until, r=dtolnay\n\nAdd Condvar APIs not susceptible to spurious wake\n\nProvide wait_until and wait_timeout_until helper wrappers that aren't susceptible to spurious wake.\nAdditionally wait_timeout_until makes it possible to more easily write code that waits for a fixed amount of time in face of spurious wakes since otherwise each user would have to do math on adjusting the duration.\n\nImplements #47960.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e25322454147c02c054022d3a30f319184dbe49e", "html_url": "https://github.com/rust-lang/rust/commit/e25322454147c02c054022d3a30f319184dbe49e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e25322454147c02c054022d3a30f319184dbe49e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5116e712f97a6ac5cb0cbcb631e4814109bbaf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5116e712f97a6ac5cb0cbcb631e4814109bbaf5", "html_url": "https://github.com/rust-lang/rust/commit/f5116e712f97a6ac5cb0cbcb631e4814109bbaf5"}, {"sha": "14b403c91ab9a1e4b776e00adcd9d88153e3b736", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b403c91ab9a1e4b776e00adcd9d88153e3b736", "html_url": "https://github.com/rust-lang/rust/commit/14b403c91ab9a1e4b776e00adcd9d88153e3b736"}], "stats": {"total": 216, "additions": 214, "deletions": 2}, "files": [{"sha": "3014283da5b271edc067f78d4c0df488a36e617a", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 214, "deletions": 2, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/e25322454147c02c054022d3a30f319184dbe49e/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25322454147c02c054022d3a30f319184dbe49e/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=e25322454147c02c054022d3a30f319184dbe49e", "patch": "@@ -14,7 +14,7 @@ use sync::{mutex, MutexGuard, PoisonError};\n use sys_common::condvar as sys;\n use sys_common::mutex as sys_mutex;\n use sys_common::poison::{self, LockResult};\n-use time::Duration;\n+use time::{Duration, Instant};\n \n /// A type indicating whether a timed wait on a condition variable returned\n /// due to a time out or not.\n@@ -221,6 +221,64 @@ impl Condvar {\n         }\n     }\n \n+    /// Blocks the current thread until this condition variable receives a\n+    /// notification and the required condition is met. Spurious wakeups are\n+    /// ignored and this function will only return once the condition has been\n+    /// met.\n+    ///\n+    /// This function will atomically unlock the mutex specified (represented by\n+    /// `guard`) and block the current thread. This means that any calls\n+    /// to [`notify_one`] or [`notify_all`] which happen logically after the\n+    /// mutex is unlocked are candidates to wake this thread up. When this\n+    /// function call returns, the lock specified will have been re-acquired.\n+    ///\n+    /// # Errors\n+    ///\n+    /// This function will return an error if the mutex being waited on is\n+    /// poisoned when this thread re-acquires the lock. For more information,\n+    /// see information about [poisoning] on the [`Mutex`] type.\n+    ///\n+    /// [`notify_one`]: #method.notify_one\n+    /// [`notify_all`]: #method.notify_all\n+    /// [poisoning]: ../sync/struct.Mutex.html#poisoning\n+    /// [`Mutex`]: ../sync/struct.Mutex.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(wait_until)]\n+    ///\n+    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::thread;\n+    ///\n+    /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    /// let pair2 = pair.clone();\n+    ///\n+    /// thread::spawn(move|| {\n+    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let mut started = lock.lock().unwrap();\n+    ///     *started = true;\n+    ///     // We notify the condvar that the value has changed.\n+    ///     cvar.notify_one();\n+    /// });\n+    ///\n+    /// // Wait for the thread to start up.\n+    /// let &(ref lock, ref cvar) = &*pair;\n+    /// // As long as the value inside the `Mutex` is false, we wait.\n+    /// let _guard = cvar.wait_until(lock.lock().unwrap(), |started| { *started }).unwrap();\n+    /// ```\n+    #[unstable(feature = \"wait_until\", issue = \"47960\")]\n+    pub fn wait_until<'a, T, F>(&self, mut guard: MutexGuard<'a, T>,\n+                                mut condition: F)\n+                                -> LockResult<MutexGuard<'a, T>>\n+                                where F: FnMut(&mut T) -> bool {\n+        while !condition(&mut *guard) {\n+            guard = self.wait(guard)?;\n+        }\n+        Ok(guard)\n+    }\n+\n+\n     /// Waits on this condition variable for a notification, timing out after a\n     /// specified duration.\n     ///\n@@ -295,7 +353,15 @@ impl Condvar {\n     ///\n     /// Note that the best effort is made to ensure that the time waited is\n     /// measured with a monotonic clock, and not affected by the changes made to\n-    /// the system time.\n+    /// the system time.  This function is susceptible to spurious wakeups.\n+    /// Condition variables normally have a boolean predicate associated with\n+    /// them, and the predicate must always be checked each time this function\n+    /// returns to protect against spurious wakeups.  Additionally, it is\n+    /// typically desirable for the time-out to not exceed some duration in\n+    /// spite of spurious wakes, thus the sleep-duration is decremented by the\n+    /// amount slept.  Alternatively, use the `wait_timeout_until` method\n+    /// to wait until a condition is met with a total time-out regardless\n+    /// of spurious wakes.\n     ///\n     /// The returned [`WaitTimeoutResult`] value indicates if the timeout is\n     /// known to have elapsed.\n@@ -304,6 +370,7 @@ impl Condvar {\n     /// returns, regardless of whether the timeout elapsed or not.\n     ///\n     /// [`wait`]: #method.wait\n+    /// [`wait_timeout_until`]: #method.wait_timeout_until\n     /// [`WaitTimeoutResult`]: struct.WaitTimeoutResult.html\n     ///\n     /// # Examples\n@@ -355,6 +422,80 @@ impl Condvar {\n         }\n     }\n \n+    /// Waits on this condition variable for a notification, timing out after a\n+    /// specified duration.  Spurious wakes will not cause this function to\n+    /// return.\n+    ///\n+    /// The semantics of this function are equivalent to [`wait_until`] except\n+    /// that the thread will be blocked for roughly no longer than `dur`. This\n+    /// method should not be used for precise timing due to anomalies such as\n+    /// preemption or platform differences that may not cause the maximum\n+    /// amount of time waited to be precisely `dur`.\n+    ///\n+    /// Note that the best effort is made to ensure that the time waited is\n+    /// measured with a monotonic clock, and not affected by the changes made to\n+    /// the system time.\n+    ///\n+    /// The returned [`WaitTimeoutResult`] value indicates if the timeout is\n+    /// known to have elapsed without the condition being met.\n+    ///\n+    /// Like [`wait_until`], the lock specified will be re-acquired when this\n+    /// function returns, regardless of whether the timeout elapsed or not.\n+    ///\n+    /// [`wait_until`]: #method.wait_until\n+    /// [`wait_timeout`]: #method.wait_timeout\n+    /// [`WaitTimeoutResult`]: struct.WaitTimeoutResult.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(wait_timeout_until)]\n+    ///\n+    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::thread;\n+    /// use std::time::Duration;\n+    ///\n+    /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    /// let pair2 = pair.clone();\n+    ///\n+    /// thread::spawn(move|| {\n+    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let mut started = lock.lock().unwrap();\n+    ///     *started = true;\n+    ///     // We notify the condvar that the value has changed.\n+    ///     cvar.notify_one();\n+    /// });\n+    ///\n+    /// // wait for the thread to start up\n+    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let result = cvar.wait_timeout_until(\n+    ///     lock.lock().unwrap(),\n+    ///     Duration::from_millis(100),\n+    ///     |&mut started| started,\n+    /// ).unwrap();\n+    /// if result.1.timed_out() {\n+    ///     // timed-out without the condition ever evaluating to true.\n+    /// }\n+    /// // access the locked mutex via result.0\n+    /// ```\n+    #[unstable(feature = \"wait_timeout_until\", issue = \"47960\")]\n+    pub fn wait_timeout_until<'a, T, F>(&self, mut guard: MutexGuard<'a, T>,\n+                                        dur: Duration, mut condition: F)\n+                                        -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)>\n+                                        where F: FnMut(&mut T) -> bool {\n+        let start = Instant::now();\n+        loop {\n+            if condition(&mut *guard) {\n+                return Ok((guard, WaitTimeoutResult(false)));\n+            }\n+            let timeout = match dur.checked_sub(start.elapsed()) {\n+                Some(timeout) => timeout,\n+                None => return Ok((guard, WaitTimeoutResult(true))),\n+            };\n+            guard = self.wait_timeout(guard, timeout)?.0;\n+        }\n+    }\n+\n     /// Wakes up one blocked thread on this condvar.\n     ///\n     /// If there is a blocked thread on this condition variable, then it will\n@@ -480,6 +621,7 @@ impl Drop for Condvar {\n \n #[cfg(test)]\n mod tests {\n+    /// #![feature(wait_until)]\n     use sync::mpsc::channel;\n     use sync::{Condvar, Mutex, Arc};\n     use sync::atomic::{AtomicBool, Ordering};\n@@ -548,6 +690,29 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    fn wait_until() {\n+        let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+        let pair2 = pair.clone();\n+\n+        // Inside of our lock, spawn a new thread, and then wait for it to start.\n+        thread::spawn(move|| {\n+            let &(ref lock, ref cvar) = &*pair2;\n+            let mut started = lock.lock().unwrap();\n+            *started = true;\n+            // We notify the condvar that the value has changed.\n+            cvar.notify_one();\n+        });\n+\n+        // Wait for the thread to start up.\n+        let &(ref lock, ref cvar) = &*pair;\n+        let guard = cvar.wait_until(lock.lock().unwrap(), |started| {\n+            *started\n+        });\n+        assert!(*guard.unwrap());\n+    }\n+\n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn wait_timeout_wait() {\n@@ -567,6 +732,53 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    fn wait_timeout_until_wait() {\n+        let m = Arc::new(Mutex::new(()));\n+        let c = Arc::new(Condvar::new());\n+\n+        let g = m.lock().unwrap();\n+        let (_g, wait) = c.wait_timeout_until(g, Duration::from_millis(1), |_| { false }).unwrap();\n+        // no spurious wakeups. ensure it timed-out\n+        assert!(wait.timed_out());\n+    }\n+\n+    #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    fn wait_timeout_until_instant_satisfy() {\n+        let m = Arc::new(Mutex::new(()));\n+        let c = Arc::new(Condvar::new());\n+\n+        let g = m.lock().unwrap();\n+        let (_g, wait) = c.wait_timeout_until(g, Duration::from_millis(0), |_| { true }).unwrap();\n+        // ensure it didn't time-out even if we were not given any time.\n+        assert!(!wait.timed_out());\n+    }\n+\n+    #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    fn wait_timeout_until_wake() {\n+        let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+        let pair_copy = pair.clone();\n+\n+        let &(ref m, ref c) = &*pair;\n+        let g = m.lock().unwrap();\n+        let _t = thread::spawn(move || {\n+            let &(ref lock, ref cvar) = &*pair_copy;\n+            let mut started = lock.lock().unwrap();\n+            thread::sleep(Duration::from_millis(1));\n+            *started = true;\n+            cvar.notify_one();\n+        });\n+        let (g2, wait) = c.wait_timeout_until(g, Duration::from_millis(u64::MAX), |&mut notified| {\n+            notified\n+        }).unwrap();\n+        // ensure it didn't time-out even if we were not given any time.\n+        assert!(!wait.timed_out());\n+        assert!(*g2);\n+    }\n+\n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn wait_timeout_wake() {"}]}