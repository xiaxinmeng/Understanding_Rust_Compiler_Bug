{"sha": "45ee3360072a4bed1a2625dc03bdae1bd5aee5c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZWUzMzYwMDcyYTRiZWQxYTI2MjVkYzAzYmRhZTFiZDVhZWU1YzQ=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-05-15T05:36:17Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-05-15T15:36:33Z"}, "message": "Fix {:#?} representation of proc_macro::Literal\n\nBefore:\n\n    TokenStream [\n        Ident {\n            ident: \"name\",\n            span: #0 bytes(37..41),\n        },\n        Punct {\n            ch: '=',\n            spacing: Alone,\n            span: #0 bytes(42..43),\n        },\n        Literal { lit: Lit { kind: Str, symbol: \"SNPP\", suffix: None }, span: Span { lo: BytePos(44), hi: BytePos(50), ctxt: #0 } },\n        Punct {\n            ch: ',',\n            spacing: Alone,\n            span: #0 bytes(50..51),\n        },\n        Ident {\n            ident: \"owner\",\n            span: #0 bytes(56..61),\n        },\n        Punct {\n            ch: '=',\n            spacing: Alone,\n            span: #0 bytes(62..63),\n        },\n        Literal { lit: Lit { kind: Str, symbol: \"Canary M Burns\", suffix: None }, span: Span { lo: BytePos(64), hi: BytePos(80), ctxt: #0 } },\n    ]\n\nAfter:\n\n    TokenStream [\n        Ident {\n            ident: \"name\",\n            span: #0 bytes(37..41),\n        },\n        Punct {\n            ch: '=',\n            spacing: Alone,\n            span: #0 bytes(42..43),\n        },\n        Literal {\n            kind: Str,\n            symbol: \"SNPP\",\n            suffix: None,\n            span: #0 bytes(44..50),\n        },\n        Punct {\n            ch: ',',\n            spacing: Alone,\n            span: #0 bytes(50..51),\n        },\n        Ident {\n            ident: \"owner\",\n            span: #0 bytes(56..61),\n        },\n        Punct {\n            ch: '=',\n            spacing: Alone,\n            span: #0 bytes(62..63),\n        },\n        Literal {\n            kind: Str,\n            symbol: \"Canary M Burns\",\n            suffix: None,\n            span: #0 bytes(64..80),\n        },\n    ]", "tree": {"sha": "6dc09c1414a2fb57863617ca2b6d48b3d5cb7f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dc09c1414a2fb57863617ca2b6d48b3d5cb7f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl6+t2sACgkQ+boUO5X/\nbYKCwQ/8Cb/2p6YL8c8BxLTYOPyt3wuBe7RRBXCgMhWrl8aT6AqmuQ55H9PpqNXa\nuDxDDi40tXkxspIhsWrXfoZ2QnA3/HFnF45VXFCGr7UEZ3Y8bhLakN8AiUPyi8eE\nZ6iq0eeRLn67sQ4vclHcranJCh1w7Ejnu7C4asKPBMPNP4g6kPYqhB2WC5A9kXiZ\nG7iP2mCvNpVG/nioAiBtqskBZCEuMe94kxnhqT+p+5bXHHpd4OS6forDdew8n1gh\nzWjaeF+I3CS1+Y+g/p3eyIuRRiZ60durJRgcg3kidG9AmbRWlAq2E11aqMnxbhNY\ntj0dUtch/yquPxDlQuY/k5yrE2tzcVhwG/PjEwdMIn1OeNHL++qo9vPo3PxADrCX\nFemRhhT/SZqug57SQ5q+xTbLzcxqUDZs/1pc57locZ4MM9aDMUhsY2//SM2P3B0/\nSn9g7h1MnxeTnDlQheNOYp6Bix6/fr9G0lsKM8hndQAeydEOhDElP7u/XCS4+lYv\nLFgGW9wk6w1FkIxPUs8QdEhM4lnbuo2xTODW4IgBVGFL5o1dVECunNTvx0+OT3ei\nr9PGS3jpINYXcSfM1lT0BWT/QefCbZLEwMydX4g1xqlSDqVIN17CuZ4iiGl2en9+\nwOiL0lG/SSyVWTHDUBno5+DMDaD4UxZU82S0wZMWTK8V2KhhQQA=\n=pnX+\n-----END PGP SIGNATURE-----", "payload": "tree 6dc09c1414a2fb57863617ca2b6d48b3d5cb7f49\nparent 85f0da67ff31923955f7fb107fb097835bb3b6ff\nauthor David Tolnay <dtolnay@gmail.com> 1589520977 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1589556993 -0700\n\nFix {:#?} representation of proc_macro::Literal\n\nBefore:\n\n    TokenStream [\n        Ident {\n            ident: \"name\",\n            span: #0 bytes(37..41),\n        },\n        Punct {\n            ch: '=',\n            spacing: Alone,\n            span: #0 bytes(42..43),\n        },\n        Literal { lit: Lit { kind: Str, symbol: \"SNPP\", suffix: None }, span: Span { lo: BytePos(44), hi: BytePos(50), ctxt: #0 } },\n        Punct {\n            ch: ',',\n            spacing: Alone,\n            span: #0 bytes(50..51),\n        },\n        Ident {\n            ident: \"owner\",\n            span: #0 bytes(56..61),\n        },\n        Punct {\n            ch: '=',\n            spacing: Alone,\n            span: #0 bytes(62..63),\n        },\n        Literal { lit: Lit { kind: Str, symbol: \"Canary M Burns\", suffix: None }, span: Span { lo: BytePos(64), hi: BytePos(80), ctxt: #0 } },\n    ]\n\nAfter:\n\n    TokenStream [\n        Ident {\n            ident: \"name\",\n            span: #0 bytes(37..41),\n        },\n        Punct {\n            ch: '=',\n            spacing: Alone,\n            span: #0 bytes(42..43),\n        },\n        Literal {\n            kind: Str,\n            symbol: \"SNPP\",\n            suffix: None,\n            span: #0 bytes(44..50),\n        },\n        Punct {\n            ch: ',',\n            spacing: Alone,\n            span: #0 bytes(50..51),\n        },\n        Ident {\n            ident: \"owner\",\n            span: #0 bytes(56..61),\n        },\n        Punct {\n            ch: '=',\n            spacing: Alone,\n            span: #0 bytes(62..63),\n        },\n        Literal {\n            kind: Str,\n            symbol: \"Canary M Burns\",\n            suffix: None,\n            span: #0 bytes(64..80),\n        },\n    ]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4", "html_url": "https://github.com/rust-lang/rust/commit/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f0da67ff31923955f7fb107fb097835bb3b6ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f0da67ff31923955f7fb107fb097835bb3b6ff", "html_url": "https://github.com/rust-lang/rust/commit/85f0da67ff31923955f7fb107fb097835bb3b6ff"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "a8f6a90ef763172fc929c279ba4a07607de03212", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=45ee3360072a4bed1a2625dc03bdae1bd5aee5c4", "patch": "@@ -202,10 +202,15 @@ impl Clone for Literal {\n     }\n }\n \n-// FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n impl fmt::Debug for Literal {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.debug())\n+        f.debug_struct(\"Literal\")\n+            .field(\"kind\", &format_args!(\"{}\", &self.debug_kind()))\n+            .field(\"symbol\", &self.symbol())\n+            // format `Some(\"...\")` on one line even in {:#?} mode\n+            .field(\"suffix\", &format_args!(\"{:?}\", &self.suffix()))\n+            .field(\"span\", &self.span())\n+            .finish()\n     }\n }\n "}, {"sha": "bf0d8fcee5b8f4cd31b9fe908f0316874c2a7792", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=45ee3360072a4bed1a2625dc03bdae1bd5aee5c4", "patch": "@@ -103,8 +103,9 @@ macro_rules! with_api {\n             Literal {\n                 fn drop($self: $S::Literal);\n                 fn clone($self: &$S::Literal) -> $S::Literal;\n-                // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n-                fn debug($self: &$S::Literal) -> String;\n+                fn debug_kind($self: &$S::Literal) -> String;\n+                fn symbol($self: &$S::Literal) -> String;\n+                fn suffix($self: &$S::Literal) -> Option<String>;\n                 fn integer(n: &str) -> $S::Literal;\n                 fn typed_integer(n: &str, kind: &str) -> $S::Literal;\n                 fn float(n: &str) -> $S::Literal;"}, {"sha": "f34a39996fe387035227b4796fafe35c32b7759f", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=45ee3360072a4bed1a2625dc03bdae1bd5aee5c4", "patch": "@@ -1134,7 +1134,6 @@ impl fmt::Display for Literal {\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Literal {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n         self.0.fmt(f)\n     }\n }"}, {"sha": "b9693c2c862785dc52138c470950b728db073218", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=45ee3360072a4bed1a2625dc03bdae1bd5aee5c4", "patch": "@@ -507,9 +507,14 @@ impl server::Ident for Rustc<'_> {\n }\n \n impl server::Literal for Rustc<'_> {\n-    // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n-    fn debug(&mut self, literal: &Self::Literal) -> String {\n-        format!(\"{:?}\", literal)\n+    fn debug_kind(&mut self, literal: &Self::Literal) -> String {\n+        format!(\"{:?}\", literal.lit.kind)\n+    }\n+    fn symbol(&mut self, literal: &Self::Literal) -> String {\n+        literal.lit.symbol.to_string()\n+    }\n+    fn suffix(&mut self, literal: &Self::Literal) -> Option<String> {\n+        literal.lit.suffix.as_ref().map(Symbol::to_string)\n     }\n     fn integer(&mut self, n: &str) -> Self::Literal {\n         self.lit(token::Integer, Symbol::intern(n), None)"}, {"sha": "bc0c533032413f3f3d40ea3821c01ed8b5ebb566", "filename": "src/test/ui/lint/redundant-semicolon/redundant-semi-proc-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45ee3360072a4bed1a2625dc03bdae1bd5aee5c4/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr?ref=45ee3360072a4bed1a2625dc03bdae1bd5aee5c4", "patch": "@@ -1,4 +1,4 @@\n-TokenStream [Ident { ident: \"fn\", span: #0 bytes(198..200) }, Ident { ident: \"span_preservation\", span: #0 bytes(201..218) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(218..220) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(228..231) }, Ident { ident: \"tst\", span: #0 bytes(232..235) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(236..237) }, Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(238), hi: BytePos(241), ctxt: #0 } }, Punct { ch: ';', spacing: Joint, span: #0 bytes(241..242) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(242..243) }, Ident { ident: \"match\", span: #0 bytes(289..294) }, Ident { ident: \"tst\", span: #0 bytes(295..298) }, Group { delimiter: Brace, stream: TokenStream [Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(483), hi: BytePos(486), ctxt: #0 } }, Punct { ch: '=', spacing: Joint, span: #0 bytes(487..489) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(487..489) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(490..492) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(492..493) }, Ident { ident: \"_\", span: #0 bytes(502..503) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(504..506) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(504..506) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(507..509) }], span: #0 bytes(299..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(516..517) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(517..518) }], span: #0 bytes(222..562) }]\n+TokenStream [Ident { ident: \"fn\", span: #0 bytes(198..200) }, Ident { ident: \"span_preservation\", span: #0 bytes(201..218) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(218..220) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(228..231) }, Ident { ident: \"tst\", span: #0 bytes(232..235) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(236..237) }, Literal { kind: Integer, symbol: \"123\", suffix: None, span: #0 bytes(238..241) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(241..242) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(242..243) }, Ident { ident: \"match\", span: #0 bytes(289..294) }, Ident { ident: \"tst\", span: #0 bytes(295..298) }, Group { delimiter: Brace, stream: TokenStream [Literal { kind: Integer, symbol: \"123\", suffix: None, span: #0 bytes(483..486) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(487..489) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(487..489) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(490..492) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(492..493) }, Ident { ident: \"_\", span: #0 bytes(502..503) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(504..506) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(504..506) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(507..509) }], span: #0 bytes(299..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(516..517) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(517..518) }], span: #0 bytes(222..562) }]\n error: unnecessary trailing semicolon\n   --> $DIR/redundant-semi-proc-macro.rs:9:19\n    |"}]}