{"sha": "76e17fe7d84a07fb5ddf50dfdcebaf9d8369d6c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZTE3ZmU3ZDg0YTA3ZmI1ZGRmNTBkZmRjZWJhZjlkODM2OWQ2Yzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-28T13:54:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-28T13:54:29Z"}, "message": "Merge #2924\n\n2924: Modify ordering of drops in check watcher to only ever have one cargo r=matklad a=kiljacken\n\nDue to the way drops are ordered when assigning to a mutable variable we\r\nwere launching a new cargo sub-process before letting the old one quite.\r\n\r\nBy explicitly replacing the original watcher with a dummy first, we\r\nensure it is dropped and the process is completed, before we start the\r\nnew process.\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>", "tree": {"sha": "4ef823b44bfe77e56a0206f6f06a181931cedbc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef823b44bfe77e56a0206f6f06a181931cedbc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76e17fe7d84a07fb5ddf50dfdcebaf9d8369d6c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMD0VCRBK7hj4Ov3rIwAAdHIIALLYzwh0+CwVXWRyH5jpLHhK\nUAt7XFKirjx/piYsSfJC7dN/hYvxsSOtDf+Ur3LfR4VLnmTj8OXBECPc6gm8v5u7\nZe4OFtGgjUgSm51GjmbuqQ+3iahijyiZ55hYaPSZB6zgTss0wWFGih0jJVF38zdg\nJIH3CrxuCKBr1KgKwFPefGJReKjnXaDJX5W9oMsWE6a9uF7p4MVqdqZKFbwacyNQ\nIUQsQzLH/+EnnXZGpCYvOX/+4T4AHNzGoFP6DO5Bh299ukD8EMoNdifiBQSZ4nIk\nQw8MnFa99j50il1/hz1B9Q2JxcbEAAcFmqnEEfzb5TaDihuJOxsbJs6NgrMAgUg=\n=IgEI\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ef823b44bfe77e56a0206f6f06a181931cedbc6\nparent e8f990a3d1488760a9f0ece564f4ed691f29dd8f\nparent 35025f097532b3f927f802a4130f7cd8a854f134\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580219669 +0000\ncommitter GitHub <noreply@github.com> 1580219669 +0000\n\nMerge #2924\n\n2924: Modify ordering of drops in check watcher to only ever have one cargo r=matklad a=kiljacken\n\nDue to the way drops are ordered when assigning to a mutable variable we\r\nwere launching a new cargo sub-process before letting the old one quite.\r\n\r\nBy explicitly replacing the original watcher with a dummy first, we\r\nensure it is dropped and the process is completed, before we start the\r\nnew process.\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76e17fe7d84a07fb5ddf50dfdcebaf9d8369d6c7", "html_url": "https://github.com/rust-lang/rust/commit/76e17fe7d84a07fb5ddf50dfdcebaf9d8369d6c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76e17fe7d84a07fb5ddf50dfdcebaf9d8369d6c7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8f990a3d1488760a9f0ece564f4ed691f29dd8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f990a3d1488760a9f0ece564f4ed691f29dd8f", "html_url": "https://github.com/rust-lang/rust/commit/e8f990a3d1488760a9f0ece564f4ed691f29dd8f"}, {"sha": "35025f097532b3f927f802a4130f7cd8a854f134", "url": "https://api.github.com/repos/rust-lang/rust/commits/35025f097532b3f927f802a4130f7cd8a854f134", "html_url": "https://github.com/rust-lang/rust/commit/35025f097532b3f927f802a4130f7cd8a854f134"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "9af9c347dfa0c75c9d37acd819c811065c028c54", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76e17fe7d84a07fb5ddf50dfdcebaf9d8369d6c7/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e17fe7d84a07fb5ddf50dfdcebaf9d8369d6c7/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=76e17fe7d84a07fb5ddf50dfdcebaf9d8369d6c7", "patch": "@@ -216,8 +216,10 @@ impl CheckWatcherThread {\n                 self.last_update_req.take();\n                 task_send.send(CheckTask::ClearDiagnostics).unwrap();\n \n-                // By replacing the watcher, we drop the previous one which\n-                // causes it to shut down automatically.\n+                // Replace with a dummy watcher first so we drop the original and wait for completion\n+                std::mem::replace(&mut self.watcher, WatchThread::dummy());\n+\n+                // Then create the actual new watcher\n                 self.watcher = WatchThread::new(&self.options, &self.workspace_root);\n             }\n         }"}]}