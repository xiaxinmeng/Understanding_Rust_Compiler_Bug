{"sha": "3ee841c3351326a7bea83b689f54d9fee27e6e85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZTg0MWMzMzUxMzI2YTdiZWE4M2I2ODlmNTRkOWZlZTI3ZTZlODU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-03-18T02:49:12Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-03-22T20:26:32Z"}, "message": "Don't loop forever on error recovery with EOF\n\ncloses #31804", "tree": {"sha": "2f9752dcc0ba739b1cc5beba767ae1e895786aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f9752dcc0ba739b1cc5beba767ae1e895786aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ee841c3351326a7bea83b689f54d9fee27e6e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee841c3351326a7bea83b689f54d9fee27e6e85", "html_url": "https://github.com/rust-lang/rust/commit/3ee841c3351326a7bea83b689f54d9fee27e6e85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ee841c3351326a7bea83b689f54d9fee27e6e85/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3f2dfdececa8053e652eb0fb286db9aef0f82e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f2dfdececa8053e652eb0fb286db9aef0f82e6", "html_url": "https://github.com/rust-lang/rust/commit/e3f2dfdececa8053e652eb0fb286db9aef0f82e6"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "66912abb6f5a65d2131364925b8d5b080f2fdb87", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ee841c3351326a7bea83b689f54d9fee27e6e85/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee841c3351326a7bea83b689f54d9fee27e6e85/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3ee841c3351326a7bea83b689f54d9fee27e6e85", "patch": "@@ -3824,7 +3824,9 @@ impl<'a> Parser<'a> {\n     fn recover_stmt_(&mut self, break_on_semi: SemiColonMode) {\n         let mut brace_depth = 0;\n         let mut bracket_depth = 0;\n+        debug!(\"recover_stmt_ enter loop\");\n         loop {\n+            debug!(\"recover_stmt_ loop {:?}\", self.token);\n             match self.token {\n                 token::OpenDelim(token::DelimToken::Brace) => {\n                     brace_depth += 1;\n@@ -3836,6 +3838,7 @@ impl<'a> Parser<'a> {\n                 }\n                 token::CloseDelim(token::DelimToken::Brace) => {\n                     if brace_depth == 0 {\n+                        debug!(\"recover_stmt_ return - close delim {:?}\", self.token);\n                         return;\n                     }\n                     brace_depth -= 1;\n@@ -3848,12 +3851,16 @@ impl<'a> Parser<'a> {\n                     }\n                     self.bump();\n                 }\n-                token::Eof => return,\n+                token::Eof => {\n+                    debug!(\"recover_stmt_ return - Eof\");\n+                    return;\n+                }\n                 token::Semi => {\n                     self.bump();\n                     if break_on_semi == SemiColonMode::Break &&\n                        brace_depth == 0 &&\n                        bracket_depth == 0 {\n+                        debug!(\"recover_stmt_ return - Semi\");\n                         return;\n                     }\n                 }\n@@ -4042,6 +4049,8 @@ impl<'a> Parser<'a> {\n         while !self.eat(&token::CloseDelim(token::Brace)) {\n             let Spanned {node, span} = if let Some(s) = self.parse_stmt_() {\n                 s\n+            } else if self.token == token::Eof {\n+                break;\n             } else {\n                 // Found only `;` or `}`.\n                 continue;"}]}