{"sha": "12d007da0f6620c8a10448cf5be762ffbb94ffd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZDAwN2RhMGY2NjIwYzhhMTA0NDhjZjViZTc2MmZmYmI5NGZmZDg=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-05T21:24:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T21:24:13Z"}, "message": "Rollup merge of #83835 - notriddle:sort-index, r=ollie27\n\nrustdoc: sort search index items for compression\n\nThis should not affect the appearance of the docs pages themselves.\n\nThis makes the pre-compressed search index smaller, thanks to the\nempty-string path duplication format, and also the gzipped version,\nby giving the algorithm more structure to work with.\n\n    rust$ wc -c search-index-old.js search-index-new.js\n    2628334 search-index-old.js\n    2586181 search-index-new.js\n    5214515 total\n    rust$ gzip search-index-*\n    rust$ wc -c search-index-old.js.gz search-index-new.js.gz\n    239486 search-index-old.js.gz\n    237386 search-index-new.js.gz\n    476872 total", "tree": {"sha": "512a42bf13c8151ef16713d5582df2264f7da6d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/512a42bf13c8151ef16713d5582df2264f7da6d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d007da0f6620c8a10448cf5be762ffbb94ffd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga3/+CRBK7hj4Ov3rIwAAdHIIAIHhrt5zIsUqhznlU7c0n6Re\nZEUplSZC0GVzh4V/Mm5ED0FYdI8zN2hG2skhJzLKMcY+vs8sT6KY1PhfrS7Gx5t4\nHVfl5d77NpjDiSZGB0W/4STiqOWJ0SKvaFJC5Kqfh4FodwDa1ENd+uFdvjC+KLjj\nqfD5gYFupVwDir4PEpLVLhCHm9iGRGfkRvKwrZfE/uL9SC5gGmzX0J4QPdiUg/3q\nBHi2rYFRU8Cj/OHSAOd0/wVW7mc/u3sJT5WhgL4lGPPEfhYd05vJ+vazx93gnZnF\nuWraWGEKJgtHcUJYQ5sNDebZ2D/9Prxi9dzA+q6/GGdRpcfw+MoCwgrT+MLRnx0=\n=JLle\n-----END PGP SIGNATURE-----\n", "payload": "tree 512a42bf13c8151ef16713d5582df2264f7da6d7\nparent 67ffbedadaa7949895c347b90c876c985088e1c0\nparent 2370e3b439aa01982c33bbfe9823337a6231207f\nauthor Yuki Okushi <jtitor@2k36.org> 1617657853 +0900\ncommitter GitHub <noreply@github.com> 1617657853 +0900\n\nRollup merge of #83835 - notriddle:sort-index, r=ollie27\n\nrustdoc: sort search index items for compression\n\nThis should not affect the appearance of the docs pages themselves.\n\nThis makes the pre-compressed search index smaller, thanks to the\nempty-string path duplication format, and also the gzipped version,\nby giving the algorithm more structure to work with.\n\n    rust$ wc -c search-index-old.js search-index-new.js\n    2628334 search-index-old.js\n    2586181 search-index-new.js\n    5214515 total\n    rust$ gzip search-index-*\n    rust$ wc -c search-index-old.js.gz search-index-new.js.gz\n    239486 search-index-old.js.gz\n    237386 search-index-new.js.gz\n    476872 total\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d007da0f6620c8a10448cf5be762ffbb94ffd8", "html_url": "https://github.com/rust-lang/rust/commit/12d007da0f6620c8a10448cf5be762ffbb94ffd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d007da0f6620c8a10448cf5be762ffbb94ffd8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ffbedadaa7949895c347b90c876c985088e1c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ffbedadaa7949895c347b90c876c985088e1c0", "html_url": "https://github.com/rust-lang/rust/commit/67ffbedadaa7949895c347b90c876c985088e1c0"}, {"sha": "2370e3b439aa01982c33bbfe9823337a6231207f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2370e3b439aa01982c33bbfe9823337a6231207f", "html_url": "https://github.com/rust-lang/rust/commit/2370e3b439aa01982c33bbfe9823337a6231207f"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "77559ce0204268cd97c5eea18a5b575b1113b712", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12d007da0f6620c8a10448cf5be762ffbb94ffd8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d007da0f6620c8a10448cf5be762ffbb94ffd8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=12d007da0f6620c8a10448cf5be762ffbb94ffd8", "patch": "@@ -914,7 +914,7 @@ impl Attributes {\n             .collect()\n     }\n \n-    crate fn get_doc_aliases(&self) -> FxHashSet<String> {\n+    crate fn get_doc_aliases(&self) -> Box<[String]> {\n         let mut aliases = FxHashSet::default();\n \n         for attr in self.other_attrs.lists(sym::doc).filter(|a| a.has_name(sym::alias)) {\n@@ -931,7 +931,7 @@ impl Attributes {\n                 aliases.insert(attr.value_str().map(|s| s.to_string()).unwrap());\n             }\n         }\n-        aliases\n+        aliases.into_iter().collect::<Vec<String>>().into()\n     }\n }\n "}, {"sha": "0a59bae941edf0a51d590923d24a594713001a4d", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/12d007da0f6620c8a10448cf5be762ffbb94ffd8/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d007da0f6620c8a10448cf5be762ffbb94ffd8/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=12d007da0f6620c8a10448cf5be762ffbb94ffd8", "patch": "@@ -120,10 +120,6 @@ crate struct Cache {\n     // when gathering trait documentation on a type, hold impls here while\n     // folding and add them to the cache later on if we find the trait.\n     orphan_trait_impls: Vec<(DefId, FxHashSet<DefId>, Impl)>,\n-\n-    /// Aliases added through `#[doc(alias = \"...\")]`. Since a few items can have the same alias,\n-    /// we need the alias element to have an array of items.\n-    crate aliases: BTreeMap<String, Vec<usize>>,\n }\n \n /// This struct is used to wrap the `cache` and `tcx` in order to run `DocFolder`.\n@@ -309,15 +305,8 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item, &self.empty_cache, self.tcx),\n+                            aliases: item.attrs.get_doc_aliases(),\n                         });\n-\n-                        for alias in item.attrs.get_doc_aliases() {\n-                            self.cache\n-                                .aliases\n-                                .entry(alias.to_lowercase())\n-                                .or_insert(Vec::new())\n-                                .push(self.cache.search_index.len() - 1);\n-                        }\n                     }\n                 }\n                 (Some(parent), None) if is_inherent_impl_item => {"}, {"sha": "2265905dcbaf41d5a0e7d212380af1948a8b2728", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/12d007da0f6620c8a10448cf5be762ffbb94ffd8/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d007da0f6620c8a10448cf5be762ffbb94ffd8/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=12d007da0f6620c8a10448cf5be762ffbb94ffd8", "patch": "@@ -82,18 +82,31 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n                 parent: Some(did),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item, cache, tcx),\n+                aliases: item.attrs.get_doc_aliases(),\n             });\n-            for alias in item.attrs.get_doc_aliases() {\n-                cache\n-                    .aliases\n-                    .entry(alias.to_lowercase())\n-                    .or_insert(Vec::new())\n-                    .push(cache.search_index.len() - 1);\n-            }\n         }\n     }\n \n-    let Cache { ref mut search_index, ref paths, ref mut aliases, .. } = *cache;\n+    let Cache { ref mut search_index, ref paths, .. } = *cache;\n+\n+    // Aliases added through `#[doc(alias = \"...\")]`. Since a few items can have the same alias,\n+    // we need the alias element to have an array of items.\n+    let mut aliases: BTreeMap<String, Vec<usize>> = BTreeMap::new();\n+\n+    // Sort search index items. This improves the compressibility of the search index.\n+    search_index.sort_unstable_by(|k1, k2| {\n+        // `sort_unstable_by_key` produces lifetime errors\n+        let k1 = (&k1.path, &k1.name, &k1.ty, &k1.parent);\n+        let k2 = (&k2.path, &k2.name, &k2.ty, &k2.parent);\n+        std::cmp::Ord::cmp(&k1, &k2)\n+    });\n+\n+    // Set up alias indexes.\n+    for (i, item) in search_index.iter().enumerate() {\n+        for alias in &item.aliases[..] {\n+            aliases.entry(alias.to_lowercase()).or_insert(Vec::new()).push(i);\n+        }\n+    }\n \n     // Reduce `DefId` in paths into smaller sequential numbers,\n     // and prune the paths that do not appear in the index.\n@@ -201,7 +214,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n             doc: crate_doc,\n             items: crate_items,\n             paths: crate_paths,\n-            aliases,\n+            aliases: &aliases,\n         })\n         .expect(\"failed serde conversion\")\n         // All these `replace` calls are because we have to go through JS string for JSON content."}, {"sha": "fb433bf8a8dc4c9eeb23a12f17dbf73cd7ca38aa", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12d007da0f6620c8a10448cf5be762ffbb94ffd8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d007da0f6620c8a10448cf5be762ffbb94ffd8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=12d007da0f6620c8a10448cf5be762ffbb94ffd8", "patch": "@@ -164,6 +164,7 @@ crate struct IndexItem {\n     crate parent: Option<DefId>,\n     crate parent_idx: Option<usize>,\n     crate search_type: Option<IndexItemFunctionType>,\n+    crate aliases: Box<[String]>,\n }\n \n /// A type used for the search index."}]}