{"sha": "54ff72132c860726f40e0ff6d547b039de0a1323", "node_id": "C_kwDOAAsO6NoAKDU0ZmY3MjEzMmM4NjA3MjZmNDBlMGZmNmQ1NDdiMDM5ZGUwYTEzMjM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-12-07T21:49:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-12-07T21:53:42Z"}, "message": "Simplify match.", "tree": {"sha": "28cd12c401bb1bdaebca4d50c71c4bea498e6feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28cd12c401bb1bdaebca4d50c71c4bea498e6feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54ff72132c860726f40e0ff6d547b039de0a1323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54ff72132c860726f40e0ff6d547b039de0a1323", "html_url": "https://github.com/rust-lang/rust/commit/54ff72132c860726f40e0ff6d547b039de0a1323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54ff72132c860726f40e0ff6d547b039de0a1323/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8576ab45e4fc192524ab615f3309d9b552528828", "url": "https://api.github.com/repos/rust-lang/rust/commits/8576ab45e4fc192524ab615f3309d9b552528828", "html_url": "https://github.com/rust-lang/rust/commit/8576ab45e4fc192524ab615f3309d9b552528828"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "c2ef0b41e27bf182761eef46e02d64d33f6b86d9", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/54ff72132c860726f40e0ff6d547b039de0a1323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ff72132c860726f40e0ff6d547b039de0a1323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=54ff72132c860726f40e0ff6d547b039de0a1323", "patch": "@@ -461,39 +461,29 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                     if let Some(def_id) = def_id.as_local() {\n                         let opaque_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n                         let parent_def_id = self.infcx.defining_use_anchor;\n-                        let (in_definition_scope, origin) = match tcx.hir().expect_item(def_id).kind\n-                        {\n+                        let item_kind = &tcx.hir().expect_item(def_id).kind;\n+                        let hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, ..  }) = item_kind else {\n+                            span_bug!(\n+                                self.value_span,\n+                                \"weird opaque type: {:#?}, {:#?}\",\n+                                ty.kind(),\n+                                item_kind\n+                            )\n+                        };\n+                        let in_definition_scope = match *origin {\n                             // Async `impl Trait`\n-                            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                                origin: hir::OpaqueTyOrigin::AsyncFn(parent),\n-                                ..\n-                            }) => (parent == parent_def_id, hir::OpaqueTyOrigin::AsyncFn(parent)),\n+                            hir::OpaqueTyOrigin::AsyncFn(parent) => parent == parent_def_id,\n                             // Anonymous `impl Trait`\n-                            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                                origin: hir::OpaqueTyOrigin::FnReturn(parent),\n-                                ..\n-                            }) => (parent == parent_def_id, hir::OpaqueTyOrigin::FnReturn(parent)),\n+                            hir::OpaqueTyOrigin::FnReturn(parent) => parent == parent_def_id,\n                             // Named `type Foo = impl Bar;`\n-                            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                                origin: hir::OpaqueTyOrigin::TyAlias,\n-                                ..\n-                            }) => (\n-                                may_define_opaque_type(tcx, parent_def_id, opaque_hir_id),\n-                                hir::OpaqueTyOrigin::TyAlias,\n-                            ),\n-                            ref itemkind => {\n-                                span_bug!(\n-                                    self.value_span,\n-                                    \"weird opaque type: {:#?}, {:#?}\",\n-                                    ty.kind(),\n-                                    itemkind\n-                                )\n+                            hir::OpaqueTyOrigin::TyAlias => {\n+                                may_define_opaque_type(tcx, parent_def_id, opaque_hir_id)\n                             }\n                         };\n                         if in_definition_scope {\n                             let opaque_type_key =\n                                 OpaqueTypeKey { def_id: def_id.to_def_id(), substs };\n-                            return self.fold_opaque_ty(ty, opaque_type_key, origin);\n+                            return self.fold_opaque_ty(ty, opaque_type_key, *origin);\n                         }\n \n                         debug!("}]}