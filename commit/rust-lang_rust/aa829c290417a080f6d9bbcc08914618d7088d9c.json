{"sha": "aa829c290417a080f6d9bbcc08914618d7088d9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhODI5YzI5MDQxN2EwODBmNmQ5YmJjYzA4OTE0NjE4ZDcwODhkOWM=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-07T06:20:35Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-07T07:03:06Z"}, "message": "Implement std::fmt::Show for semver::{Identifier, Version}", "tree": {"sha": "e9d12978554aa53da581572e3fb67b416e98c760", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9d12978554aa53da581572e3fb67b416e98c760"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa829c290417a080f6d9bbcc08914618d7088d9c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa829c290417a080f6d9bbcc08914618d7088d9c", "html_url": "https://github.com/rust-lang/rust/commit/aa829c290417a080f6d9bbcc08914618d7088d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa829c290417a080f6d9bbcc08914618d7088d9c/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78cb1e2ab0b282654a39ad61549cf5baabaae316", "url": "https://api.github.com/repos/rust-lang/rust/commits/78cb1e2ab0b282654a39ad61549cf5baabaae316", "html_url": "https://github.com/rust-lang/rust/commit/78cb1e2ab0b282654a39ad61549cf5baabaae316"}], "stats": {"total": 66, "additions": 51, "deletions": 15}, "files": [{"sha": "9c5dd656d427deb52427d3443d4154867132a58a", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 51, "deletions": 15, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/aa829c290417a080f6d9bbcc08914618d7088d9c/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa829c290417a080f6d9bbcc08914618d7088d9c/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=aa829c290417a080f6d9bbcc08914618d7088d9c", "patch": "@@ -35,6 +35,7 @@\n \n use std::char;\n use std::cmp;\n+use std::fmt;\n use std::option::{Option, Some, None};\n use std::to_str::ToStr;\n \n@@ -59,13 +60,20 @@ impl cmp::Ord for Identifier {\n     }\n }\n \n+impl fmt::Show for Identifier {\n+    #[inline]\n+    fn fmt(version: &Identifier, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *version {\n+            Numeric(ref n) => fmt::Show::fmt(n, f),\n+            AlphaNumeric(ref s) => fmt::Show::fmt(s, f)\n+        }\n+    }\n+}\n+\n impl ToStr for Identifier {\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        match self {\n-            &Numeric(n) => n.to_str(),\n-            &AlphaNumeric(ref s) => s.to_str()\n-        }\n+        format!(\"{}\", *self)\n     }\n }\n \n@@ -87,20 +95,32 @@ pub struct Version {\n     build: ~[Identifier],\n }\n \n+impl fmt::Show for Version {\n+    #[inline]\n+    fn fmt(version: &Version, f: &mut fmt::Formatter) -> fmt::Result {\n+        if_ok!(write!(f.buf, \"{}.{}.{}\", version.major, version.minor, version.patch))\n+        if !version.pre.is_empty() {\n+            if_ok!(write!(f.buf, \"-\"));\n+            for (i, x) in version.pre.iter().enumerate() {\n+                if i != 0 { if_ok!(write!(f.buf, \".\")) };\n+                if_ok!(fmt::Show::fmt(x, f));\n+            }\n+        }\n+        if !version.build.is_empty() {\n+            if_ok!(write!(f.buf, \"+\"));\n+            for (i, x) in version.build.iter().enumerate() {\n+                if i != 0 { if_ok!(write!(f.buf, \".\")) };\n+                if_ok!(fmt::Show::fmt(x, f));\n+            }\n+        }\n+        Ok(())\n+    }\n+}\n+\n impl ToStr for Version {\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        let s = format!(\"{}.{}.{}\", self.major, self.minor, self.patch);\n-        let s = if self.pre.is_empty() {\n-            s\n-        } else {\n-            format!(\"{}-{}\", s, self.pre.map(|i| i.to_str()).connect(\".\"))\n-        };\n-        if self.build.is_empty() {\n-            s\n-        } else {\n-            format!(\"{}+{}\", s, self.build.map(|i| i.to_str()).connect(\".\"))\n-        }\n+        format!(\"{}\", *self)\n     }\n }\n \n@@ -365,6 +385,22 @@ fn test_ne() {\n     assert!(parse(\"1.2.3+23\")    != parse(\"1.2.3+42\"));\n }\n \n+#[test]\n+fn test_show() {\n+    assert_eq!(format!(\"{}\", parse(\"1.2.3\").unwrap()), ~\"1.2.3\");\n+    assert_eq!(format!(\"{}\", parse(\"1.2.3-alpha1\").unwrap()), ~\"1.2.3-alpha1\");\n+    assert_eq!(format!(\"{}\", parse(\"1.2.3+build.42\").unwrap()), ~\"1.2.3+build.42\");\n+    assert_eq!(format!(\"{}\", parse(\"1.2.3-alpha1+42\").unwrap()), ~\"1.2.3-alpha1+42\");\n+}\n+\n+#[test]\n+fn test_to_str() {\n+    assert_eq!(parse(\"1.2.3\").unwrap().to_str(), ~\"1.2.3\");\n+    assert_eq!(parse(\"1.2.3-alpha1\").unwrap().to_str(), ~\"1.2.3-alpha1\");\n+    assert_eq!(parse(\"1.2.3+build.42\").unwrap().to_str(), ~\"1.2.3+build.42\");\n+    assert_eq!(parse(\"1.2.3-alpha1+42\").unwrap().to_str(), ~\"1.2.3-alpha1+42\");\n+}\n+\n #[test]\n fn test_lt() {\n     assert!(parse(\"0.0.0\")        < parse(\"1.2.3-alpha2\"));"}]}