{"sha": "81030176dd36ad1efc0149ff8d57626bf42006d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMDMwMTc2ZGQzNmFkMWVmYzAxNDlmZjhkNTc2MjZiZjQyMDA2ZDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-05T22:02:30Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:46:23Z"}, "message": "std: Add forwarding impls of `Generator` trait", "tree": {"sha": "b51560fdf57645a29316d47e04987eb1ac8ecd19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b51560fdf57645a29316d47e04987eb1ac8ecd19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81030176dd36ad1efc0149ff8d57626bf42006d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81030176dd36ad1efc0149ff8d57626bf42006d1", "html_url": "https://github.com/rust-lang/rust/commit/81030176dd36ad1efc0149ff8d57626bf42006d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81030176dd36ad1efc0149ff8d57626bf42006d1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17c749f3eee953e204462870e68b64712a5c3576", "url": "https://api.github.com/repos/rust-lang/rust/commits/17c749f3eee953e204462870e68b64712a5c3576", "html_url": "https://github.com/rust-lang/rust/commit/17c749f3eee953e204462870e68b64712a5c3576"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "079a525f95126d6ed2a3746758e7199f34cf3915", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81030176dd36ad1efc0149ff8d57626bf42006d1/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81030176dd36ad1efc0149ff8d57626bf42006d1/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=81030176dd36ad1efc0149ff8d57626bf42006d1", "patch": "@@ -66,7 +66,7 @@ use core::hash::{self, Hash};\n use core::iter::FusedIterator;\n use core::marker::{self, Unsize};\n use core::mem;\n-use core::ops::{CoerceUnsized, Deref, DerefMut};\n+use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, State};\n use core::ops::{BoxPlace, Boxed, InPlace, Place, Placer};\n use core::ptr::{self, Unique};\n use core::convert::From;\n@@ -784,3 +784,14 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n         &mut **self\n     }\n }\n+\n+#[unstable(feature = \"generator_trait\", issue = \"0\")]\n+impl<T, U> Generator<U> for Box<T>\n+    where T: Generator<U> + ?Sized\n+{\n+    type Yield = T::Yield;\n+    type Return = T::Return;\n+    fn resume(&mut self, arg: U) -> State<Self::Yield, Self::Return> {\n+        (**self).resume(arg)\n+    }\n+}"}, {"sha": "1252be447c30203d9e87cd25520158d8e0608c00", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81030176dd36ad1efc0149ff8d57626bf42006d1/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81030176dd36ad1efc0149ff8d57626bf42006d1/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=81030176dd36ad1efc0149ff8d57626bf42006d1", "patch": "@@ -97,6 +97,7 @@\n #![feature(fundamental)]\n #![feature(fused)]\n #![feature(generic_param_attrs)]\n+#![feature(generator_trait)]\n #![feature(i128_type)]\n #![feature(inclusive_range)]\n #![feature(lang_items)]"}, {"sha": "1e54eaaaa280e530776da163d0b53bb3b7819854", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81030176dd36ad1efc0149ff8d57626bf42006d1/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81030176dd36ad1efc0149ff8d57626bf42006d1/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=81030176dd36ad1efc0149ff8d57626bf42006d1", "patch": "@@ -10,8 +10,7 @@\n \n /// The result of a generator resumption.\n #[derive(Debug)]\n-#[cfg(not(stage0))]\n-#[lang = \"generator_state\"]\n+#[cfg_attr(not(stage0), lang = \"generator_state\")]\n #[unstable(feature = \"generator_trait\", issue = \"0\")]\n pub enum State<Y, R> {\n     /// The generator suspended with a value.\n@@ -22,8 +21,7 @@ pub enum State<Y, R> {\n }\n \n /// The trait implemented by builtin generator types.\n-#[cfg(not(stage0))]\n-#[lang = \"generator\"]\n+#[cfg_attr(not(stage0), lang = \"generator\")]\n #[unstable(feature = \"generator_trait\", issue = \"0\")]\n #[fundamental]\n pub trait Generator<Arg = ()> {\n@@ -36,3 +34,14 @@ pub trait Generator<Arg = ()> {\n     /// This resumes the execution of the generator.\n     fn resume(&mut self, arg: Arg) -> State<Self::Yield, Self::Return>;\n }\n+\n+#[unstable(feature = \"generator_trait\", issue = \"0\")]\n+impl<'a, T, U> Generator<U> for &'a mut T\n+    where T: Generator<U> + ?Sized\n+{\n+    type Yield = T::Yield;\n+    type Return = T::Return;\n+    fn resume(&mut self, arg: U) -> State<Self::Yield, Self::Return> {\n+        (**self).resume(arg)\n+    }\n+}"}, {"sha": "a51b19110280efa124a0febf5ccb810de4ce4d2c", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81030176dd36ad1efc0149ff8d57626bf42006d1/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81030176dd36ad1efc0149ff8d57626bf42006d1/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=81030176dd36ad1efc0149ff8d57626bf42006d1", "patch": "@@ -191,11 +191,7 @@ pub use self::range::{RangeInclusive, RangeToInclusive};\n pub use self::try::Try;\n \n #[unstable(feature = \"generator_trait\", issue = \"0\")]\n-#[cfg(not(stage0))]\n-pub use self::generator::State;\n-#[unstable(feature = \"generator_trait\", issue = \"0\")]\n-#[cfg(not(stage0))]\n-pub use self::generator::Generator;\n+pub use self::generator::{Generator, State};\n \n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub use self::place::{Place, Placer, InPlace, Boxed, BoxPlace};"}]}