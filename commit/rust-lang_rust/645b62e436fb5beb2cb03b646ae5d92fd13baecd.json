{"sha": "645b62e436fb5beb2cb03b646ae5d92fd13baecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NWI2MmU0MzZmYjViZWIyY2IwM2I2NDZhZTVkOTJmZDEzYmFlY2Q=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-06T21:57:57Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-07T22:43:27Z"}, "message": "Fix float cmp to use assoc fxx::EPSILON", "tree": {"sha": "0787e2cb40970ffb410682132dcf51955a6163d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0787e2cb40970ffb410682132dcf51955a6163d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645b62e436fb5beb2cb03b646ae5d92fd13baecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645b62e436fb5beb2cb03b646ae5d92fd13baecd", "html_url": "https://github.com/rust-lang/rust/commit/645b62e436fb5beb2cb03b646ae5d92fd13baecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645b62e436fb5beb2cb03b646ae5d92fd13baecd/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b4ee9a649318e78e1b3d1ade63669d5701c71b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4ee9a649318e78e1b3d1ade63669d5701c71b5", "html_url": "https://github.com/rust-lang/rust/commit/0b4ee9a649318e78e1b3d1ade63669d5701c71b5"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "cedd15e8daf63ab5990b5ef4e7d3fbc688805789", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645b62e436fb5beb2cb03b646ae5d92fd13baecd/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645b62e436fb5beb2cb03b646ae5d92fd13baecd/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=645b62e436fb5beb2cb03b646ae5d92fd13baecd", "patch": "@@ -388,7 +388,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                             ),\n                             Applicability::HasPlaceholders, // snippet\n                         );\n-                        db.span_note(expr.span, \"`std::f32::EPSILON` and `std::f64::EPSILON` are available.\");\n+                        db.span_note(expr.span, \"`f32::EPSILON` and `f64::EPSILON` are available.\");\n                     });\n                 } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");"}, {"sha": "90c25a6db37d28c9837a54e0c7f6071e936d1bff", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/645b62e436fb5beb2cb03b646ae5d92fd13baecd/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/645b62e436fb5beb2cb03b646ae5d92fd13baecd/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=645b62e436fb5beb2cb03b646ae5d92fd13baecd", "patch": "@@ -5,7 +5,7 @@ LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE as f64 - 2.0).abs() > error`\n    |\n    = note: `-D clippy::float-cmp` implied by `-D warnings`\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp.rs:59:5\n    |\n LL |     ONE as f64 != 2.0;\n@@ -17,7 +17,7 @@ error: strict comparison of `f32` or `f64`\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(x - 1.0).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp.rs:64:5\n    |\n LL |     x == 1.0;\n@@ -29,7 +29,7 @@ error: strict comparison of `f32` or `f64`\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(twice(x) - twice(ONE as f64)).abs() > error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp.rs:67:5\n    |\n LL |     twice(x) != twice(ONE as f64);"}, {"sha": "2dc43cf4e5fba7af2ca679baf9353c5bec044282", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/645b62e436fb5beb2cb03b646ae5d92fd13baecd/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/645b62e436fb5beb2cb03b646ae5d92fd13baecd/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=645b62e436fb5beb2cb03b646ae5d92fd13baecd", "patch": "@@ -5,7 +5,7 @@ LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^ help: consider comparing them within some error: `(1f32 - ONE).abs() < error`\n    |\n    = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:20:5\n    |\n LL |     1f32 == ONE;\n@@ -17,7 +17,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     TWO == ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     TWO == ONE;\n@@ -29,7 +29,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     TWO != ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() > error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:22:5\n    |\n LL |     TWO != ONE;\n@@ -41,7 +41,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE + ONE - TWO).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:23:5\n    |\n LL |     ONE + ONE == TWO;\n@@ -53,7 +53,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(x as f32 - ONE).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     x as f32 == ONE;\n@@ -65,7 +65,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     v == ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:28:5\n    |\n LL |     v == ONE;\n@@ -77,7 +77,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     v != ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() > error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:29:5\n    |\n LL |     v != ONE;"}]}