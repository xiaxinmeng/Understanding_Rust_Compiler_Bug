{"sha": "dfd52817ee81676e0cdba4ab2c5badf195fcfda7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZDUyODE3ZWU4MTY3NmUwY2RiYTRhYjJjNWJhZGYxOTVmY2ZkYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-09T12:47:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-09T12:47:01Z"}, "message": "auto merge of #17875 : dotdash/rust/static_bool, r=alexcrichton\n\nWhile booleans are represented as i1 in SSA values, LLVM expects them\r\nto be stored/loaded as i8 values. Using i1 as we do now works, but\r\nkills some optimizations, so we should switch to i8, just like we do\r\neverywhere else.\r\n\r\nFixes #16959.", "tree": {"sha": "3e86928c8ae80c19b128ac50bbce3ff439eea4ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e86928c8ae80c19b128ac50bbce3ff439eea4ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfd52817ee81676e0cdba4ab2c5badf195fcfda7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd52817ee81676e0cdba4ab2c5badf195fcfda7", "html_url": "https://github.com/rust-lang/rust/commit/dfd52817ee81676e0cdba4ab2c5badf195fcfda7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfd52817ee81676e0cdba4ab2c5badf195fcfda7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6cfb56a5cee28b08ae9d2dcbb2552497ce922c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6cfb56a5cee28b08ae9d2dcbb2552497ce922c1", "html_url": "https://github.com/rust-lang/rust/commit/e6cfb56a5cee28b08ae9d2dcbb2552497ce922c1"}, {"sha": "6fa5a2f66fddd473d265e646b41da43d20e87ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa5a2f66fddd473d265e646b41da43d20e87ec2", "html_url": "https://github.com/rust-lang/rust/commit/6fa5a2f66fddd473d265e646b41da43d20e87ec2"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "d175919fb81084f9ddb616c19150583ca828b509", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfd52817ee81676e0cdba4ab2c5badf195fcfda7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd52817ee81676e0cdba4ab2c5badf195fcfda7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=dfd52817ee81676e0cdba4ab2c5badf195fcfda7", "patch": "@@ -2680,12 +2680,18 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n \n                     // We need the translated value here, because for enums the\n                     // LLVM type is not fully determined by the Rust type.\n-                    let (v, inlineable, _) = consts::const_expr(ccx, &**expr, is_local);\n+                    let (v, inlineable, ty) = consts::const_expr(ccx, &**expr, is_local);\n                     ccx.const_values().borrow_mut().insert(id, v);\n                     let mut inlineable = inlineable;\n \n                     unsafe {\n-                        let llty = llvm::LLVMTypeOf(v);\n+                        // boolean SSA values are i1, but they have to be stored in i8 slots,\n+                        // otherwise some LLVM optimization passes don't work as expected\n+                        let llty = if ty::type_is_bool(ty) {\n+                            llvm::LLVMInt8TypeInContext(ccx.llcx())\n+                        } else {\n+                            llvm::LLVMTypeOf(v)\n+                        };\n                         if contains_null(sym.as_slice()) {\n                             ccx.sess().fatal(\n                                 format!(\"Illegal null byte in export_name value: `{}`\","}, {"sha": "5e4692bd0f617321ed2042ace6d58294303a9f6b", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfd52817ee81676e0cdba4ab2c5badf195fcfda7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd52817ee81676e0cdba4ab2c5badf195fcfda7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=dfd52817ee81676e0cdba4ab2c5badf195fcfda7", "patch": "@@ -701,6 +701,13 @@ pub fn trans_const(ccx: &CrateContext, m: ast::Mutability, id: ast::NodeId) {\n         // At this point, get_item_val has already translated the\n         // constant's initializer to determine its LLVM type.\n         let v = ccx.const_values().borrow().get_copy(&id);\n+        // boolean SSA values are i1, but they have to be stored in i8 slots,\n+        // otherwise some LLVM optimization passes don't work as expected\n+        let v = if llvm::LLVMTypeOf(v) == Type::i1(ccx).to_ref() {\n+            llvm::LLVMConstZExt(v, Type::i8(ccx).to_ref())\n+        } else {\n+            v\n+        };\n         llvm::LLVMSetInitializer(g, v);\n \n         // `get_item_val` left `g` with external linkage, but we just set an"}]}