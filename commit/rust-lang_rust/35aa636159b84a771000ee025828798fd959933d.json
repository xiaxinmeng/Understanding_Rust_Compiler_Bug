{"sha": "35aa636159b84a771000ee025828798fd959933d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YWE2MzYxNTliODRhNzcxMDAwZWUwMjU4Mjg3OThmZDk1OTkzM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-04T22:45:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-04T22:45:56Z"}, "message": "Auto merge of #83530 - Mark-Simulacrum:bootstrap-bump, r=Mark-Simulacrum\n\nBump bootstrap to 1.52 beta\n\nThis includes the standard bump, but also a workaround for new cargo behavior around clearing out the doc directory when the rustdoc version changes.", "tree": {"sha": "f5ec26ac4b741ceccc86a0a4b235300a18f7e805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5ec26ac4b741ceccc86a0a4b235300a18f7e805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35aa636159b84a771000ee025828798fd959933d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35aa636159b84a771000ee025828798fd959933d", "html_url": "https://github.com/rust-lang/rust/commit/35aa636159b84a771000ee025828798fd959933d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35aa636159b84a771000ee025828798fd959933d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c755ee4ce8cae6ea977d65a0288480940db721d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c755ee4ce8cae6ea977d65a0288480940db721d9", "html_url": "https://github.com/rust-lang/rust/commit/c755ee4ce8cae6ea977d65a0288480940db721d9"}, {"sha": "f06efd2a24761b3f2b73d9888a8f945de5ec26e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f06efd2a24761b3f2b73d9888a8f945de5ec26e4", "html_url": "https://github.com/rust-lang/rust/commit/f06efd2a24761b3f2b73d9888a8f945de5ec26e4"}], "stats": {"total": 212, "additions": 37, "deletions": 175}, "files": [{"sha": "f2432f61653530d35b95e8f36c97b23b6ed52b9b", "filename": "compiler/rustc_error_codes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -1,5 +1,4 @@\n-#![cfg_attr(bootstrap, deny(invalid_codeblock_attributes))]\n-#![cfg_attr(not(bootstrap), deny(rustdoc::invalid_codeblock_attributes))]\n+#![deny(rustdoc::invalid_codeblock_attributes)]\n //! This library is used to gather all error codes into one place,\n //! the goal being to make their maintenance easier.\n "}, {"sha": "14cb1d3b405c2df1f05b6ad71eb8b603de82e2ad", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -133,7 +133,6 @@\n #![feature(trusted_len)]\n #![feature(unboxed_closures)]\n #![feature(unicode_internals)]\n-#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![feature(unsize)]\n #![feature(unsized_fn_params)]\n #![feature(allocator_internals)]\n@@ -142,8 +141,7 @@\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n #![feature(try_trait)]\n-#![cfg_attr(bootstrap, feature(type_alias_impl_trait))]\n-#![cfg_attr(not(bootstrap), feature(min_type_alias_impl_trait))]\n+#![feature(min_type_alias_impl_trait)]\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]\n #![feature(decl_macro)]"}, {"sha": "0c3303cc2109402c1cfe115a7583bdd390f531fd", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 6, "deletions": 46, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -691,59 +691,19 @@ mod impls {\n     impl<T: ?Sized> Hash for *const T {\n         #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n-            #[cfg(not(bootstrap))]\n-            {\n-                let (address, metadata) = self.to_raw_parts();\n-                state.write_usize(address as usize);\n-                metadata.hash(state);\n-            }\n-            #[cfg(bootstrap)]\n-            {\n-                if mem::size_of::<Self>() == mem::size_of::<usize>() {\n-                    // Thin pointer\n-                    state.write_usize(*self as *const () as usize);\n-                } else {\n-                    // Fat pointer\n-                    // SAFETY: we are accessing the memory occupied by `self`\n-                    // which is guaranteed to be valid.\n-                    // This assumes a fat pointer can be represented by a `(usize, usize)`,\n-                    // which is safe to do in `std` because it is shipped and kept in sync\n-                    // with the implementation of fat pointers in `rustc`.\n-                    let (a, b) = unsafe { *(self as *const Self as *const (usize, usize)) };\n-                    state.write_usize(a);\n-                    state.write_usize(b);\n-                }\n-            }\n+            let (address, metadata) = self.to_raw_parts();\n+            state.write_usize(address as usize);\n+            metadata.hash(state);\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized> Hash for *mut T {\n         #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n-            #[cfg(not(bootstrap))]\n-            {\n-                let (address, metadata) = self.to_raw_parts();\n-                state.write_usize(address as usize);\n-                metadata.hash(state);\n-            }\n-            #[cfg(bootstrap)]\n-            {\n-                if mem::size_of::<Self>() == mem::size_of::<usize>() {\n-                    // Thin pointer\n-                    state.write_usize(*self as *const () as usize);\n-                } else {\n-                    // Fat pointer\n-                    // SAFETY: we are accessing the memory occupied by `self`\n-                    // which is guaranteed to be valid.\n-                    // This assumes a fat pointer can be represented by a `(usize, usize)`,\n-                    // which is safe to do in `std` because it is shipped and kept in sync\n-                    // with the implementation of fat pointers in `rustc`.\n-                    let (a, b) = unsafe { *(self as *const Self as *const (usize, usize)) };\n-                    state.write_usize(a);\n-                    state.write_usize(b);\n-                }\n-            }\n+            let (address, metadata) = self.to_raw_parts();\n+            state.write_usize(address as usize);\n+            metadata.hash(state);\n         }\n     }\n }"}, {"sha": "013e98a866091a290afc857f27389de9ec52a367", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -129,7 +129,7 @@\n #![feature(auto_traits)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(prelude_import)]\n-#![cfg_attr(not(bootstrap), feature(ptr_metadata))]\n+#![feature(ptr_metadata)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n #![feature(simd_ffi)]\n@@ -167,7 +167,6 @@\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n #![feature(int_error_matching)]\n-#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n #[prelude_import]\n@@ -299,8 +298,7 @@ pub mod primitive;\n     unused_imports,\n     unsafe_op_in_unsafe_fn\n )]\n-#[cfg_attr(bootstrap, allow(non_autolinks))]\n-#[cfg_attr(not(bootstrap), allow(rustdoc::non_autolinks))]\n+#[allow(rustdoc::non_autolinks)]\n // FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_declarations is\n // merged. It currently cannot because bootstrap fails as the lint hasn't been defined yet.\n #[allow(clashing_extern_declarations)]"}, {"sha": "5d9b0f80d3a6f3ebcfd9f9b454963dfaaa25072e", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -1391,7 +1391,6 @@ pub(crate) mod builtin {\n     }\n \n     /// Attribute macro used to apply derive macros.\n-    #[cfg(not(bootstrap))]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     pub macro derive($item:item) {\n@@ -1453,7 +1452,6 @@ pub(crate) mod builtin {\n     }\n \n     /// Expands all `#[cfg]` and `#[cfg_attr]` attributes in the code fragment it's applied to.\n-    #[cfg(not(bootstrap))]\n     #[unstable(\n         feature = \"cfg_eval\",\n         issue = \"82679\","}, {"sha": "dcf3ce070ec6578f8b0a220ba78dae0755e1d3f1", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -65,7 +65,7 @@ pub trait Deref {\n     /// The resulting type after dereferencing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_diagnostic_item = \"deref_target\"]\n-    #[cfg_attr(not(bootstrap), lang = \"deref_target\")]\n+    #[lang = \"deref_target\"]\n     type Target: ?Sized;\n \n     /// Dereferences the value."}, {"sha": "c89fe57cb05cee4e8497d8f98934cc497a1133fd", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -67,7 +67,6 @@ pub use crate::macros::builtin::{\n     bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,\n };\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(no_inline)]\n pub use crate::macros::builtin::derive;\n@@ -80,7 +79,6 @@ pub use crate::macros::builtin::derive;\n #[doc(no_inline)]\n pub use crate::macros::builtin::cfg_accessible;\n \n-#[cfg(not(bootstrap))]\n #[unstable(\n     feature = \"cfg_eval\",\n     issue = \"82679\","}, {"sha": "f18387d020d4f0a1b076c3363c08bd26708a2cdb", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -51,7 +51,6 @@ impl<T: ?Sized> *const T {\n     /// Decompose a (possibly wide) pointer into is address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts`].\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]\n@@ -915,13 +914,6 @@ impl<T> *const [T] {\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n     pub const fn len(self) -> usize {\n-        #[cfg(bootstrap)]\n-        {\n-            // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.\n-            // Only `std` can make this guarantee.\n-            unsafe { Repr { rust: self }.raw }.len\n-        }\n-        #[cfg(not(bootstrap))]\n         metadata(self)\n     }\n "}, {"sha": "52660116026287171d0a051716df7e5d32cd1dc4", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -90,11 +90,8 @@ pub use crate::intrinsics::copy;\n #[doc(inline)]\n pub use crate::intrinsics::write_bytes;\n \n-#[cfg(not(bootstrap))]\n mod metadata;\n-#[cfg(not(bootstrap))]\n pub(crate) use metadata::PtrRepr;\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n pub use metadata::{from_raw_parts, from_raw_parts_mut, metadata, DynMetadata, Pointee, Thin};\n \n@@ -236,33 +233,6 @@ pub const fn null_mut<T>() -> *mut T {\n     0 as *mut T\n }\n \n-#[cfg(bootstrap)]\n-#[repr(C)]\n-pub(crate) union Repr<T> {\n-    pub(crate) rust: *const [T],\n-    rust_mut: *mut [T],\n-    pub(crate) raw: FatPtr<T>,\n-}\n-\n-#[cfg(bootstrap)]\n-#[repr(C)]\n-pub(crate) struct FatPtr<T> {\n-    data: *const T,\n-    pub(crate) len: usize,\n-}\n-\n-#[cfg(bootstrap)]\n-// Manual impl needed to avoid `T: Clone` bound.\n-impl<T> Clone for FatPtr<T> {\n-    fn clone(&self) -> Self {\n-        *self\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-// Manual impl needed to avoid `T: Copy` bound.\n-impl<T> Copy for FatPtr<T> {}\n-\n /// Forms a raw slice from a pointer and a length.\n ///\n /// The `len` argument is the number of **elements**, not the number of bytes.\n@@ -287,14 +257,6 @@ impl<T> Copy for FatPtr<T> {}\n #[stable(feature = \"slice_from_raw_parts\", since = \"1.42.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n-    #[cfg(bootstrap)]\n-    {\n-        // SAFETY: Accessing the value from the `Repr` union is safe since *const [T]\n-        // and FatPtr have the same memory layouts. Only std can make this\n-        // guarantee.\n-        unsafe { Repr { raw: FatPtr { data, len } }.rust }\n-    }\n-    #[cfg(not(bootstrap))]\n     from_raw_parts(data.cast(), len)\n }\n \n@@ -327,13 +289,6 @@ pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n #[stable(feature = \"slice_from_raw_parts\", since = \"1.42.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n-    #[cfg(bootstrap)]\n-    {\n-        // SAFETY: Accessing the value from the `Repr` union is safe since *mut [T]\n-        // and FatPtr have the same memory layouts\n-        unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }\n-    }\n-    #[cfg(not(bootstrap))]\n     from_raw_parts_mut(data.cast(), len)\n }\n "}, {"sha": "3c6f197828332703482220ead89c1ba34e4f141e", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -50,7 +50,6 @@ impl<T: ?Sized> *mut T {\n     /// Decompose a (possibly wide) pointer into is address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts_mut`].\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]\n@@ -1175,13 +1174,6 @@ impl<T> *mut [T] {\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n     pub const fn len(self) -> usize {\n-        #[cfg(bootstrap)]\n-        {\n-            // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.\n-            // Only `std` can make this guarantee.\n-            unsafe { Repr { rust_mut: self }.raw }.len\n-        }\n-        #[cfg(not(bootstrap))]\n         metadata(self)\n     }\n "}, {"sha": "e525f61604385f591523b6bdee28882ae976fe48", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -181,7 +181,6 @@ impl<T: ?Sized> NonNull<T> {\n     /// See the documentation of [`std::ptr::from_raw_parts`] for more details.\n     ///\n     /// [`std::ptr::from_raw_parts`]: crate::ptr::from_raw_parts\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]\n@@ -198,7 +197,6 @@ impl<T: ?Sized> NonNull<T> {\n     /// Decompose a (possibly wide) pointer into is address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`NonNull::from_raw_parts`].\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]"}, {"sha": "ec28cdd1ba0d9cf166ccf869ce70d77b94c6a1c0", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -102,23 +102,14 @@ impl<T> [T] {\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n     #[rustc_allow_const_fn_unstable(const_fn_union)]\n     pub const fn len(&self) -> usize {\n-        #[cfg(bootstrap)]\n-        {\n-            // SAFETY: this is safe because `&[T]` and `FatPtr<T>` have the same layout.\n-            // Only `std` can make this guarantee.\n-            unsafe { crate::ptr::Repr { rust: self }.raw.len }\n-        }\n-        #[cfg(not(bootstrap))]\n-        {\n-            // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.\n-            // As of this writing this causes a \"Const-stable functions can only call other\n-            // const-stable functions\" error.\n-\n-            // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T\n-            // and PtrComponents<T> have the same memory layouts. Only std can make this\n-            // guarantee.\n-            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }\n-        }\n+        // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.\n+        // As of this writing this causes a \"Const-stable functions can only call other\n+        // const-stable functions\" error.\n+\n+        // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T\n+        // and PtrComponents<T> have the same memory layouts. Only std can make this\n+        // guarantee.\n+        unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }\n     }\n \n     /// Returns `true` if the slice has a length of 0.\n@@ -2265,8 +2256,7 @@ impl<T> [T] {\n     // in crate `alloc`, and as such doesn't exists yet when building `core`.\n     // links to downstream crate: #74481. Since primitives are only documented in\n     // libstd (#73423), this never leads to broken links in practice.\n-    #[cfg_attr(not(bootstrap), allow(rustdoc::broken_intra_doc_links))]\n-    #[cfg_attr(bootstrap, allow(broken_intra_doc_links))]\n+    #[allow(rustdoc::broken_intra_doc_links)]\n     #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]\n     #[inline]\n     pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, mut f: F) -> Result<usize, usize>"}, {"sha": "1d885eb1092da04bd6c6856ce2729a0c8076cfab", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -68,16 +68,15 @@\n #![feature(option_result_unwrap_unchecked)]\n #![feature(result_into_ok_or_err)]\n #![feature(peekable_peek_mut)]\n-#![cfg_attr(not(bootstrap), feature(ptr_metadata))]\n+#![feature(ptr_metadata)]\n #![feature(once_cell)]\n #![feature(unsized_tuple_coercion)]\n #![feature(nonzero_leading_trailing_zeros)]\n #![feature(const_option)]\n #![feature(integer_atomics)]\n #![feature(slice_group_by)]\n #![feature(trusted_random_access)]\n-#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n-#![cfg_attr(not(bootstrap), feature(unsize))]\n+#![feature(unsize)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "11af8090c3a4f26034ee98a22548ef55fa6f6a32", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -1,8 +1,6 @@\n use core::cell::RefCell;\n-#[cfg(not(bootstrap))]\n use core::ptr;\n use core::ptr::*;\n-#[cfg(not(bootstrap))]\n use std::fmt::{Debug, Display};\n \n #[test]\n@@ -419,7 +417,6 @@ fn offset_from() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn ptr_metadata() {\n     struct Unit;\n     struct Pair<A, B: ?Sized>(A, B);\n@@ -478,7 +475,6 @@ fn ptr_metadata() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn ptr_metadata_bounds() {\n     fn metadata_eq_method_address<T: ?Sized>() -> usize {\n         // The `Metadata` associated type has an `Ord` bound, so this is valid:\n@@ -510,7 +506,6 @@ fn ptr_metadata_bounds() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn dyn_metadata() {\n     #[derive(Debug)]\n     #[repr(align(32))]\n@@ -530,7 +525,6 @@ fn dyn_metadata() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn from_raw_parts() {\n     let mut value = 5_u32;\n     let address = &mut value as *mut _ as *mut ();\n@@ -557,7 +551,6 @@ fn from_raw_parts() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn thin_box() {\n     let foo = ThinBox::<dyn Display>::new(4);\n     assert_eq!(foo.to_string(), \"4\");"}, {"sha": "c983022746c68337887f44e3a965b1de5680ba91", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -234,7 +234,7 @@\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n #![feature(cfg_accessible)]\n-#![cfg_attr(not(bootstrap), feature(cfg_eval))]\n+#![feature(cfg_eval)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n@@ -331,7 +331,6 @@\n #![feature(try_blocks)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n-#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![feature(unsafe_cell_raw_get)]\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]"}, {"sha": "4a3c3ba163598b364d0a9da52a58420653c4c277", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -54,7 +54,6 @@ pub use core::prelude::v1::{\n     bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,\n };\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(hidden)]\n pub use core::prelude::v1::derive;\n@@ -67,7 +66,6 @@ pub use core::prelude::v1::derive;\n #[doc(hidden)]\n pub use core::prelude::v1::cfg_accessible;\n \n-#[cfg(not(bootstrap))]\n #[unstable(\n     feature = \"cfg_eval\",\n     issue = \"82679\","}, {"sha": "38901a35296e1b084f6ca4665a8c3a1530168c34", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -741,12 +741,7 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n-        // cfg(bootstrap), can be removed on the next beta bump\n-        if compiler.stage == 0 {\n-            cmd.arg(\"-Winvalid_codeblock_attributes\");\n-        } else {\n-            cmd.arg(\"-Wrustdoc::invalid_codeblock_attributes\");\n-        }\n+        cmd.arg(\"-Wrustdoc::invalid_codeblock_attributes\");\n \n         if self.config.deny_warnings {\n             cmd.arg(\"-Dwarnings\");\n@@ -1303,12 +1298,7 @@ impl<'a> Builder<'a> {\n             // fixed via better support from Cargo.\n             cargo.env(\"RUSTC_LINT_FLAGS\", lint_flags.join(\" \"));\n \n-            // cfg(bootstrap), can be removed on the next beta bump\n-            if compiler.stage == 0 {\n-                rustdocflags.arg(\"-Winvalid_codeblock_attributes\");\n-            } else {\n-                rustdocflags.arg(\"-Wrustdoc::invalid_codeblock_attributes\");\n-            }\n+            rustdocflags.arg(\"-Wrustdoc::invalid_codeblock_attributes\");\n         }\n \n         if mode == Mode::Rustc {"}, {"sha": "fc79fc10fb4c5594d3fd57377eb63342466b051e", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -461,7 +461,16 @@ impl Step for Std {\n         // create correct links between crates because rustdoc depends on the\n         // existence of the output directories to know if it should be a local\n         // or remote link.\n-        let krates = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n+        //\n+        // There's also a mild hack here where we build the first crate in this\n+        // list, core, twice. This is currently necessary to make sure that\n+        // cargo's cached rustc/rustdoc versions are up to date which means\n+        // cargo won't delete the out_dir we create for the stampfile.\n+        // Essentially any crate could go into the first slot here as it's\n+        // output directory will be deleted by us (as cargo will purge the stamp\n+        // file during the first slot's run), and core is relatively fast to\n+        // build so works OK to fill this 'dummy' slot.\n+        let krates = [\"core\", \"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n         for krate in &krates {\n             run_cargo_rustdoc_for(krate);\n         }"}, {"sha": "d86f550db9020d8f7477fc1fb8f3cf5bec3c9a9c", "filename": "src/stage0.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -12,14 +12,14 @@\n # stable release's version number. `date` is the date where the release we're\n # bootstrapping off was released.\n \n-date: 2021-02-14\n+date: 2021-03-26\n rustc: beta\n \n # We use a nightly rustfmt to format the source because it solves some\n # bootstrapping issues with use of new syntax in this repo. If you're looking at\n # the beta/stable branch, this key should be omitted, as we don't want to depend\n # on rustfmt from nightly there.\n-rustfmt: nightly-2021-01-28\n+rustfmt: nightly-2021-03-25\n \n # When making a stable release the process currently looks like:\n #"}, {"sha": "c677d04917eafb08d8995618224cd1dbccacb006", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -14,8 +14,6 @@\n //! A few exceptions are allowed as there's known bugs in rustdoc, but this\n //! should catch the majority of \"broken link\" cases.\n \n-#![cfg_attr(bootstrap, feature(str_split_once))]\n-\n use std::collections::hash_map::Entry;\n use std::collections::{HashMap, HashSet};\n use std::env;"}, {"sha": "cbcc01dc39a68588232144f43436b0d2f22d8ccf", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35aa636159b84a771000ee025828798fd959933d/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35aa636159b84a771000ee025828798fd959933d/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=35aa636159b84a771000ee025828798fd959933d", "patch": "@@ -3,8 +3,6 @@\n //! This library contains the tidy lints and exposes it\n //! to be used by tools.\n \n-#![cfg_attr(bootstrap, feature(str_split_once))]\n-\n use std::fs::File;\n use std::io::Read;\n use walkdir::{DirEntry, WalkDir};"}]}