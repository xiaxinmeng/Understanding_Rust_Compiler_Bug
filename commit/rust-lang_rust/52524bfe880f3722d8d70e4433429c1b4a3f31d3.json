{"sha": "52524bfe880f3722d8d70e4433429c1b4a3f31d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNTI0YmZlODgwZjM3MjJkOGQ3MGU0NDMzNDI5YzFiNGEzZjMxZDM=", "commit": {"author": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-25T01:59:14Z"}, "committer": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-27T12:35:18Z"}, "message": "Implemented Items<'a, T> for List<T>", "tree": {"sha": "eef3c8ea6013a3089285d4b807dc9a2f1087027d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eef3c8ea6013a3089285d4b807dc9a2f1087027d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52524bfe880f3722d8d70e4433429c1b4a3f31d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52524bfe880f3722d8d70e4433429c1b4a3f31d3", "html_url": "https://github.com/rust-lang/rust/commit/52524bfe880f3722d8d70e4433429c1b4a3f31d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52524bfe880f3722d8d70e4433429c1b4a3f31d3/comments", "author": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b362768ff3cab2c966f1f18cf119b21fc96ea30", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b362768ff3cab2c966f1f18cf119b21fc96ea30", "html_url": "https://github.com/rust-lang/rust/commit/2b362768ff3cab2c966f1f18cf119b21fc96ea30"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "d4685f37a39d4fb98343758049b272ccb10beb12", "filename": "src/libcollections/list.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/52524bfe880f3722d8d70e4433429c1b4a3f31d3/src%2Flibcollections%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52524bfe880f3722d8d70e4433429c1b4a3f31d3/src%2Flibcollections%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flist.rs?ref=52524bfe880f3722d8d70e4433429c1b4a3f31d3", "patch": "@@ -17,6 +17,42 @@ pub enum List<T> {\n     Nil,\n }\n \n+pub struct Items<'a, T> {\n+    priv head: &'a List<T>,\n+    priv next: Option<&'a @List<T>>\n+}\n+\n+impl<'a, T> Iterator<&'a T> for Items<'a, T> {\n+    fn next(&mut self) -> Option<&'a T> {\n+        match self.next {\n+            None => match *self.head {\n+                Nil => None,\n+                Cons(ref value, ref tail) => {\n+                    self.next = Some(tail);\n+                    Some(value)\n+                }\n+            },\n+            Some(next) => match **next {\n+                Nil => None,\n+                Cons(ref value, ref tail) => {\n+                    self.next = Some(tail);\n+                    Some(value)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl<T> List<T> {\n+    /// Returns a forward iterator\n+    pub fn iter<'a>(&'a self) -> Items<'a, T> {\n+        Items {\n+            head: self,\n+            next: None\n+        }\n+    }\n+}\n+\n /**\n  * Left fold\n  *\n@@ -181,6 +217,16 @@ mod tests {\n \n     use std::option;\n \n+    #[test]\n+    fn test_iter() {\n+        let list = List::from_vec([0, 1, 2]);\n+        let mut iter = list.iter();\n+        assert_eq!(&0, iter.next().unwrap());\n+        assert_eq!(&1, iter.next().unwrap());\n+        assert_eq!(&2, iter.next().unwrap());\n+        assert_eq!(None, iter.next());\n+    }\n+\n     #[test]\n     fn test_is_empty() {\n         let empty : @list::List<int> = @List::from_vec([]);"}]}