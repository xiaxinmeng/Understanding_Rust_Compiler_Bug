{"sha": "09bd6f3ee7efe4e257dec353b9a6223571c875de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YmQ2ZjNlZTdlZmU0ZTI1N2RlYzM1M2I5YTYyMjM1NzFjODc1ZGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-30T04:51:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-23T17:28:14Z"}, "message": "introduce new DefPathData variants for traits, assoc types", "tree": {"sha": "003392c269e08ca9543d42476c6f2ac612b9eaea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/003392c269e08ca9543d42476c6f2ac612b9eaea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09bd6f3ee7efe4e257dec353b9a6223571c875de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09bd6f3ee7efe4e257dec353b9a6223571c875de", "html_url": "https://github.com/rust-lang/rust/commit/09bd6f3ee7efe4e257dec353b9a6223571c875de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09bd6f3ee7efe4e257dec353b9a6223571c875de/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfbf62f7dfcf2f89d12b59140fe0d0f95dc5afbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfbf62f7dfcf2f89d12b59140fe0d0f95dc5afbd", "html_url": "https://github.com/rust-lang/rust/commit/cfbf62f7dfcf2f89d12b59140fe0d0f95dc5afbd"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "bfe21549e453d3358ca606b702b13ba80dfb6287", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09bd6f3ee7efe4e257dec353b9a6223571c875de/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bd6f3ee7efe4e257dec353b9a6223571c875de/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=09bd6f3ee7efe4e257dec353b9a6223571c875de", "patch": "@@ -107,8 +107,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // information we encapsulate into\n         let def_data = match i.node {\n             ItemKind::Impl(..) => DefPathData::Impl,\n+            ItemKind::Trait(..) => DefPathData::Trait(i.ident.name.as_str()),\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n-            ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n+            ItemKind::TraitAlias(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n                 DefPathData::TypeNs(i.ident.name.as_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n@@ -222,7 +223,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let def_data = match ti.node {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n                 DefPathData::ValueNs(ti.ident.name.as_str()),\n-            TraitItemKind::Type(..) => DefPathData::TypeNs(ti.ident.name.as_str()),\n+            TraitItemKind::Type(..) => DefPathData::AssocTypeInTrait(ti.ident.name.as_str()),\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id, false),\n         };\n \n@@ -240,7 +241,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let def_data = match ii.node {\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n                 DefPathData::ValueNs(ii.ident.name.as_str()),\n-            ImplItemKind::Type(..) => DefPathData::TypeNs(ii.ident.name.as_str()),\n+            ImplItemKind::Type(..) => DefPathData::AssocTypeInImpl(ii.ident.name.as_str()),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id, false),\n         };\n "}, {"sha": "12f146ef49115f0ce99f1110034745790f468d45", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09bd6f3ee7efe4e257dec353b9a6223571c875de/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bd6f3ee7efe4e257dec353b9a6223571c875de/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=09bd6f3ee7efe4e257dec353b9a6223571c875de", "patch": "@@ -212,6 +212,9 @@ impl DefKey {\n         ::std::mem::discriminant(data).hash(&mut hasher);\n         match *data {\n             DefPathData::TypeNs(name) |\n+            DefPathData::Trait(name) |\n+            DefPathData::AssocTypeInTrait(name) |\n+            DefPathData::AssocTypeInImpl(name) |\n             DefPathData::ValueNs(name) |\n             DefPathData::Module(name) |\n             DefPathData::MacroDef(name) |\n@@ -358,6 +361,12 @@ pub enum DefPathData {\n     // Different kinds of items and item-like things:\n     /// An impl\n     Impl,\n+    /// A trait\n+    Trait(InternedString),\n+    /// An associated type **declaration** (i.e., in a trait)\n+    AssocTypeInTrait(InternedString),\n+    /// An associated type **value** (i.e., in an impl)\n+    AssocTypeInImpl(InternedString),\n     /// Something in the type NS\n     TypeNs(InternedString),\n     /// Something in the value NS\n@@ -639,6 +648,9 @@ impl DefPathData {\n         use self::DefPathData::*;\n         match *self {\n             TypeNs(name) |\n+            Trait(name) |\n+            AssocTypeInTrait(name) |\n+            AssocTypeInImpl(name) |\n             ValueNs(name) |\n             Module(name) |\n             MacroDef(name) |\n@@ -663,6 +675,9 @@ impl DefPathData {\n         use self::DefPathData::*;\n         let s = match *self {\n             TypeNs(name) |\n+            Trait(name) |\n+            AssocTypeInTrait(name) |\n+            AssocTypeInImpl(name) |\n             ValueNs(name) |\n             Module(name) |\n             MacroDef(name) |"}, {"sha": "2819141c81be25888c1f13de987625ecc121c65b", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09bd6f3ee7efe4e257dec353b9a6223571c875de/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bd6f3ee7efe4e257dec353b9a6223571c875de/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=09bd6f3ee7efe4e257dec353b9a6223571c875de", "patch": "@@ -204,6 +204,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             // finer-grained distinctions, e.g. between enum/struct).\n             data @ DefPathData::Misc |\n             data @ DefPathData::TypeNs(..) |\n+            data @ DefPathData::Trait(..) |\n+            data @ DefPathData::AssocTypeInTrait(..) |\n+            data @ DefPathData::AssocTypeInImpl(..) |\n             data @ DefPathData::ValueNs(..) |\n             data @ DefPathData::Module(..) |\n             data @ DefPathData::TypeParam(..) |"}, {"sha": "84e3358ff13897f5ec0b3449c41ea29ea9602aac", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/09bd6f3ee7efe4e257dec353b9a6223571c875de/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bd6f3ee7efe4e257dec353b9a6223571c875de/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=09bd6f3ee7efe4e257dec353b9a6223571c875de", "patch": "@@ -268,14 +268,31 @@ impl PrintContext {\n             loop {\n                 let key = tcx.def_key(item_def_id);\n                 match key.disambiguated_data.data {\n+                    DefPathData::AssocTypeInTrait(_) |\n+                    DefPathData::AssocTypeInImpl(_) |\n+                    DefPathData::Trait(_) |\n                     DefPathData::TypeNs(_) => {\n                         break;\n                     }\n-                    DefPathData::ValueNs(_) | DefPathData::EnumVariant(_) => {\n+                    DefPathData::ValueNs(_) |\n+                    DefPathData::EnumVariant(_) => {\n                         is_value_path = true;\n                         break;\n                     }\n-                    _ => {\n+                    DefPathData::CrateRoot |\n+                    DefPathData::Misc |\n+                    DefPathData::Impl |\n+                    DefPathData::Module(_) |\n+                    DefPathData::MacroDef(_) |\n+                    DefPathData::ClosureExpr |\n+                    DefPathData::TypeParam(_) |\n+                    DefPathData::LifetimeDef(_) |\n+                    DefPathData::Field(_) |\n+                    DefPathData::StructCtor |\n+                    DefPathData::Initializer |\n+                    DefPathData::ImplTrait |\n+                    DefPathData::Typeof |\n+                    DefPathData::GlobalMetaData(_) => {\n                         // if we're making a symbol for something, there ought\n                         // to be a value or type-def or something in there\n                         // *somewhere*"}]}