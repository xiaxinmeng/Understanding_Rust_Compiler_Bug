{"sha": "4f00396f149713b920a74055419f5ab3a8d6a066", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMDAzOTZmMTQ5NzEzYjkyMGE3NDA1NTQxOWY1YWIzYThkNmEwNjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-09T03:29:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-09T03:29:45Z"}, "message": "Rollup merge of #70916 - Centril:track-caller-ffi, r=eddyb\n\nSupport `#[track_caller]` on functions in `extern \"Rust\" { ... }`\n\nFixes https://github.com/rust-lang/rust/issues/70830 which is the follow-up to @eddyb's suggestion in https://github.com/rust-lang/rust/pull/69251#discussion_r380791634 to allow `#[track_caller]` on `fn`s in FFI imports, that is, on functions in `extern \"Rust\" { ... }` blocks.\n\nThis requires that the other side, the FFI export, also have the `#[track_caller]` attribute. Otherwise, undefined behavior is triggered and the blame lies, as usual, with the `unsafe { ... }` block which called the FFI imported function.\n\nAfter this PR, all forms of `fn` items with the right ABI (`\"Rust\"`) support `#[track_caller]`.\n\nAs a drive-by, the PR also hardens the check rejecting `#[naked] #[track_caller]` such that methods and other forms of `fn` items are also considered.\n\nr? @eddyb\ncc @rust-lang/lang", "tree": {"sha": "62bd6d3e2cc2cd653b3a176d4f84a11d8cdd4a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62bd6d3e2cc2cd653b3a176d4f84a11d8cdd4a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f00396f149713b920a74055419f5ab3a8d6a066", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejpapCRBK7hj4Ov3rIwAAdHIIAJRNAP4ikUoE8h5jwJEm6Bxr\nPDOuL1b5Sw8gZvaStrB+V8W1i/B4nyLVyLP9eyne8zwlZ/nbOKS7rNso8sKE3roR\nmOe6kb0+gK29wRvRdZeWv9Xrl1XVskXSdEhfrTGB/KC4aDCArn1HONJBuRUsa2GE\nvx2X4Y96aKQmjt2LR5yeCPSVY4lqCxzy5OLTe+OSuvyAvjbeRfcXE0qNTI11kNWr\nLgOyZ8yS9pDX31rmCkDS9RV6mHVpRwkHJ5zXKH+30aR7VE+XvxZs2WRwXY2TMaaf\ns0C8AAYtuSeI+BhGjfdOZ0LUCWBBR9ikkLZhtFIpNRavRP8F/Q6dAqW2v6uSsS0=\n=xqYW\n-----END PGP SIGNATURE-----\n", "payload": "tree 62bd6d3e2cc2cd653b3a176d4f84a11d8cdd4a60\nparent ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c\nparent 45589b52fe215b7090bf88683927716c25197203\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586402985 +0200\ncommitter GitHub <noreply@github.com> 1586402985 +0200\n\nRollup merge of #70916 - Centril:track-caller-ffi, r=eddyb\n\nSupport `#[track_caller]` on functions in `extern \"Rust\" { ... }`\n\nFixes https://github.com/rust-lang/rust/issues/70830 which is the follow-up to @eddyb's suggestion in https://github.com/rust-lang/rust/pull/69251#discussion_r380791634 to allow `#[track_caller]` on `fn`s in FFI imports, that is, on functions in `extern \"Rust\" { ... }` blocks.\n\nThis requires that the other side, the FFI export, also have the `#[track_caller]` attribute. Otherwise, undefined behavior is triggered and the blame lies, as usual, with the `unsafe { ... }` block which called the FFI imported function.\n\nAfter this PR, all forms of `fn` items with the right ABI (`\"Rust\"`) support `#[track_caller]`.\n\nAs a drive-by, the PR also hardens the check rejecting `#[naked] #[track_caller]` such that methods and other forms of `fn` items are also considered.\n\nr? @eddyb\ncc @rust-lang/lang\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f00396f149713b920a74055419f5ab3a8d6a066", "html_url": "https://github.com/rust-lang/rust/commit/4f00396f149713b920a74055419f5ab3a8d6a066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f00396f149713b920a74055419f5ab3a8d6a066/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c", "html_url": "https://github.com/rust-lang/rust/commit/ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c"}, {"sha": "45589b52fe215b7090bf88683927716c25197203", "url": "https://api.github.com/repos/rust-lang/rust/commits/45589b52fe215b7090bf88683927716c25197203", "html_url": "https://github.com/rust-lang/rust/commit/45589b52fe215b7090bf88683927716c25197203"}], "stats": {"total": 126, "additions": 81, "deletions": 45}, "files": [{"sha": "8d9982131c33e0ec5ade815553c0289b1e686dcb", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f00396f149713b920a74055419f5ab3a8d6a066/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f00396f149713b920a74055419f5ab3a8d6a066/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=4f00396f149713b920a74055419f5ab3a8d6a066", "patch": "@@ -416,7 +416,6 @@ E0734: include_str!(\"./error_codes/E0734.md\"),\n E0735: include_str!(\"./error_codes/E0735.md\"),\n E0736: include_str!(\"./error_codes/E0736.md\"),\n E0737: include_str!(\"./error_codes/E0737.md\"),\n-E0738: include_str!(\"./error_codes/E0738.md\"),\n E0739: include_str!(\"./error_codes/E0739.md\"),\n E0740: include_str!(\"./error_codes/E0740.md\"),\n E0741: include_str!(\"./error_codes/E0741.md\"),\n@@ -614,4 +613,5 @@ E0751: include_str!(\"./error_codes/E0751.md\"),\n     E0722, // Malformed `#[optimize]` attribute\n     E0724, // `#[ffi_returns_twice]` is only allowed in foreign functions\n     E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n+//  E0738, // Removed; errored on `#[track_caller] fn`s in `extern \"Rust\" { ... }`.\n }"}, {"sha": "8f31b701e495e7d609135e2dee50035d72f7c59b", "filename": "src/librustc_error_codes/error_codes/E0738.md", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0738.md", "raw_url": "https://github.com/rust-lang/rust/raw/ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0738.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0738.md?ref=ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c", "patch": "@@ -1,11 +0,0 @@\n-`#[track_caller]` cannot be used to annotate foreign functions.\n-\n-Erroneous example:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-extern \"Rust\" {\n-    #[track_caller]\n-    fn bar();\n-}\n-```"}, {"sha": "3f2c02f6c461bb96887a08af0097d4501c90a4d0", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f00396f149713b920a74055419f5ab3a8d6a066/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f00396f149713b920a74055419f5ab3a8d6a066/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=4f00396f149713b920a74055419f5ab3a8d6a066", "patch": "@@ -141,7 +141,7 @@ impl CheckAttrVisitor<'tcx> {\n         target: Target,\n     ) -> bool {\n         match target {\n-            Target::Fn if attr::contains_name(attrs, sym::naked) => {\n+            _ if attr::contains_name(attrs, sym::naked) => {\n                 struct_span_err!(\n                     self.tcx.sess,\n                     *attr_span,\n@@ -151,17 +151,7 @@ impl CheckAttrVisitor<'tcx> {\n                 .emit();\n                 false\n             }\n-            Target::ForeignFn => {\n-                struct_span_err!(\n-                    self.tcx.sess,\n-                    *attr_span,\n-                    E0738,\n-                    \"`#[track_caller]` is not supported on foreign functions\",\n-                )\n-                .emit();\n-                false\n-            }\n-            Target::Fn | Target::Method(..) => true,\n+            Target::Fn | Target::Method(..) | Target::ForeignFn => true,\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "9f6a69a51c0ceca41873815d6a28172e7ae86e52", "filename": "src/test/ui/rfc-2091-track-caller/error-extern-fn.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.rs?ref=ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c", "patch": "@@ -1,9 +0,0 @@\n-#![feature(track_caller)]\n-#![allow(dead_code)]\n-\n-extern \"Rust\" {\n-    #[track_caller] //~ ERROR: `#[track_caller]` is not supported on foreign functions\n-    fn bar();\n-}\n-\n-fn main() {}"}, {"sha": "b03f5fbbdb20e1bf5ba06f205d61a3f2fd5d6c55", "filename": "src/test/ui/rfc-2091-track-caller/error-extern-fn.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.stderr?ref=ecc4e2a647533ddabb7a1b69f6ab1385c3f4003c", "patch": "@@ -1,9 +0,0 @@\n-error[E0738]: `#[track_caller]` is not supported on foreign functions\n-  --> $DIR/error-extern-fn.rs:5:5\n-   |\n-LL |     #[track_caller]\n-   |     ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0738`."}, {"sha": "f45738483333599caa3ec2e98354933dfde62561", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4f00396f149713b920a74055419f5ab3a8d6a066/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f00396f149713b920a74055419f5ab3a8d6a066/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs?ref=4f00396f149713b920a74055419f5ab3a8d6a066", "patch": "@@ -1,8 +1,21 @@\n #![feature(naked_functions, track_caller)]\n \n-#[track_caller]\n+#[track_caller] //~ ERROR cannot use `#[track_caller]` with `#[naked]`\n #[naked]\n fn f() {}\n-//~^^^ ERROR cannot use `#[track_caller]` with `#[naked]`\n+\n+struct S;\n+\n+impl S {\n+    #[track_caller] //~ ERROR cannot use `#[track_caller]` with `#[naked]`\n+    #[naked]\n+    fn g() {}\n+}\n+\n+extern \"Rust\" {\n+    #[track_caller] //~ ERROR cannot use `#[track_caller]` with `#[naked]`\n+    #[naked]\n+    fn h();\n+}\n \n fn main() {}"}, {"sha": "1249d1df07179cbc655ec28fd566acb6b3b1ba2a", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f00396f149713b920a74055419f5ab3a8d6a066/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f00396f149713b920a74055419f5ab3a8d6a066/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr?ref=4f00396f149713b920a74055419f5ab3a8d6a066", "patch": "@@ -4,6 +4,18 @@ error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n LL | #[track_caller]\n    | ^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n+  --> $DIR/error-with-naked.rs:16:5\n+   |\n+LL |     #[track_caller]\n+   |     ^^^^^^^^^^^^^^^\n+\n+error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n+  --> $DIR/error-with-naked.rs:10:5\n+   |\n+LL |     #[track_caller]\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0736`."}, {"sha": "23c17d743c43c217ff5db5be31d108a52c08427e", "filename": "src/test/ui/rfc-2091-track-caller/track-caller-ffi.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4f00396f149713b920a74055419f5ab3a8d6a066/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftrack-caller-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f00396f149713b920a74055419f5ab3a8d6a066/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftrack-caller-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftrack-caller-ffi.rs?ref=4f00396f149713b920a74055419f5ab3a8d6a066", "patch": "@@ -0,0 +1,50 @@\n+// run-pass\n+\n+#![feature(track_caller)]\n+\n+use std::panic::Location;\n+\n+extern \"Rust\" {\n+    #[track_caller]\n+    fn rust_track_caller_ffi_test_tracked() -> &'static Location<'static>;\n+    fn rust_track_caller_ffi_test_untracked() -> &'static Location<'static>;\n+}\n+\n+fn rust_track_caller_ffi_test_nested_tracked() -> &'static Location<'static> {\n+    unsafe { rust_track_caller_ffi_test_tracked() }\n+}\n+\n+mod provides {\n+    use std::panic::Location;\n+    #[track_caller] // UB if we did not have this!\n+    #[no_mangle]\n+    fn rust_track_caller_ffi_test_tracked() -> &'static Location<'static> {\n+        Location::caller()\n+    }\n+    #[no_mangle]\n+    fn rust_track_caller_ffi_test_untracked() -> &'static Location<'static> {\n+        Location::caller()\n+    }\n+}\n+\n+fn main() {\n+    let location = Location::caller();\n+    assert_eq!(location.file(), file!());\n+    assert_eq!(location.line(), 31);\n+    assert_eq!(location.column(), 20);\n+\n+    let tracked = unsafe { rust_track_caller_ffi_test_tracked() };\n+    assert_eq!(tracked.file(), file!());\n+    assert_eq!(tracked.line(), 36);\n+    assert_eq!(tracked.column(), 28);\n+\n+    let untracked = unsafe { rust_track_caller_ffi_test_untracked() };\n+    assert_eq!(untracked.file(), file!());\n+    assert_eq!(untracked.line(), 26);\n+    assert_eq!(untracked.column(), 9);\n+\n+    let contained = rust_track_caller_ffi_test_nested_tracked();\n+    assert_eq!(contained.file(), file!());\n+    assert_eq!(contained.line(), 14);\n+    assert_eq!(contained.column(), 14);\n+}"}]}