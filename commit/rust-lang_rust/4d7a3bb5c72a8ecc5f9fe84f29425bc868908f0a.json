{"sha": "4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkN2EzYmI1YzcyYThlY2M1ZjlmZTg0ZjI5NDI1YmM4Njg5MDhmMGE=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-09-13T17:58:09Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-09-13T18:06:31Z"}, "message": "Shuffle code around to avoid an allocation", "tree": {"sha": "f4264133141eb880cb7211e48ceb3957ccbe7dde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4264133141eb880cb7211e48ceb3957ccbe7dde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a", "html_url": "https://github.com/rust-lang/rust/commit/4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8875f2c8aa9933b35854311256987abeece17f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8875f2c8aa9933b35854311256987abeece17f2b", "html_url": "https://github.com/rust-lang/rust/commit/8875f2c8aa9933b35854311256987abeece17f2b"}], "stats": {"total": 110, "additions": 50, "deletions": 60}, "files": [{"sha": "8e947b55402b56073991eaa3979ce6f02da9a8be", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a", "patch": "@@ -25,7 +25,7 @@ use crate::{\n     main_loop::Task,\n     mem_docs::MemDocs,\n     op_queue::OpQueue,\n-    reload::SourceRootConfig,\n+    reload::{self, SourceRootConfig},\n     thread_pool::TaskPool,\n     to_proto::url_from_abs_path,\n     Result,\n@@ -175,7 +175,8 @@ impl GlobalState {\n     pub(crate) fn process_changes(&mut self) -> bool {\n         let _p = profile::span(\"GlobalState::process_changes\");\n         let mut fs_changes = Vec::new();\n-        let mut has_fs_changes = false;\n+        // A file was added or deleted\n+        let mut has_structure_changes = false;\n \n         let change = {\n             let mut change = Change::new();\n@@ -187,9 +188,13 @@ impl GlobalState {\n \n             for file in changed_files {\n                 if let Some(path) = vfs.file_path(file.file_id).as_path() {\n-                    fs_changes.push((path.to_path_buf(), file.change_kind));\n+                    let path = path.to_path_buf();\n+                    if reload::should_refresh_for_change(&path, file.change_kind) {\n+                        self.fetch_workspaces_queue.request_op();\n+                    }\n+                    fs_changes.push((path, file.change_kind));\n                     if file.is_created_or_deleted() {\n-                        has_fs_changes = true;\n+                        has_structure_changes = true;\n                     }\n                 }\n \n@@ -208,15 +213,14 @@ impl GlobalState {\n                 };\n                 change.change_file(file.file_id, text);\n             }\n-            if has_fs_changes {\n+            if has_structure_changes {\n                 let roots = self.source_root_config.partition(vfs);\n                 change.set_roots(roots);\n             }\n             change\n         };\n \n         self.analysis_host.apply_change(change);\n-        self.maybe_refresh(&fs_changes);\n         true\n     }\n "}, {"sha": "0c48b22bdbaa58dbba03b4395b416828fb75a2f5", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     handlers, lsp_ext,\n     lsp_utils::{apply_document_changes, is_cancelled, notification_is, Progress},\n     mem_docs::DocumentData,\n-    reload::{BuildDataProgress, ProjectWorkspaceProgress},\n+    reload::{self, BuildDataProgress, ProjectWorkspaceProgress},\n     Result,\n };\n \n@@ -693,7 +693,9 @@ impl GlobalState {\n                     flycheck.update();\n                 }\n                 if let Ok(abs_path) = from_proto::abs_path(&params.text_document.uri) {\n-                    this.maybe_refresh(&[(abs_path, ChangeKind::Modify)]);\n+                    if reload::should_refresh_for_change(&abs_path, ChangeKind::Modify) {\n+                        this.fetch_workspaces_queue.request_op();\n+                    }\n                 }\n                 Ok(())\n             })?"}, {"sha": "b7fa9e3fa0d96d62aa15e7b7e4620cead90acec8", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 36, "deletions": 52, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=4d7a3bb5c72a8ecc5f9fe84f29425bc868908f0a", "patch": "@@ -58,58 +58,6 @@ impl GlobalState {\n             .raw_database_mut()\n             .set_enable_proc_attr_macros(self.config.expand_proc_attr_macros());\n     }\n-    pub(crate) fn maybe_refresh(&mut self, changes: &[(AbsPathBuf, ChangeKind)]) {\n-        if !changes.iter().any(|(path, kind)| is_interesting(path, *kind)) {\n-            return;\n-        }\n-        tracing::info!(\n-            \"Requesting workspace reload because of the following changes: {}\",\n-            itertools::join(\n-                changes\n-                    .iter()\n-                    .filter(|(path, kind)| is_interesting(path, *kind))\n-                    .map(|(path, kind)| format!(\"{}: {:?}\", path.display(), kind)),\n-                \", \"\n-            )\n-        );\n-        self.fetch_workspaces_queue.request_op();\n-\n-        fn is_interesting(path: &AbsPath, change_kind: ChangeKind) -> bool {\n-            const IMPLICIT_TARGET_FILES: &[&str] = &[\"build.rs\", \"src/main.rs\", \"src/lib.rs\"];\n-            const IMPLICIT_TARGET_DIRS: &[&str] = &[\"src/bin\", \"examples\", \"tests\", \"benches\"];\n-            let file_name = path.file_name().unwrap_or_default();\n-\n-            if file_name == \"Cargo.toml\" || file_name == \"Cargo.lock\" {\n-                return true;\n-            }\n-            if change_kind == ChangeKind::Modify {\n-                return false;\n-            }\n-            if path.extension().unwrap_or_default() != \"rs\" {\n-                return false;\n-            }\n-            if IMPLICIT_TARGET_FILES.iter().any(|it| path.as_ref().ends_with(it)) {\n-                return true;\n-            }\n-            let parent = match path.parent() {\n-                Some(it) => it,\n-                None => return false,\n-            };\n-            if IMPLICIT_TARGET_DIRS.iter().any(|it| parent.as_ref().ends_with(it)) {\n-                return true;\n-            }\n-            if file_name == \"main.rs\" {\n-                let grand_parent = match parent.parent() {\n-                    Some(it) => it,\n-                    None => return false,\n-                };\n-                if IMPLICIT_TARGET_DIRS.iter().any(|it| grand_parent.as_ref().ends_with(it)) {\n-                    return true;\n-                }\n-            }\n-            false\n-        }\n-    }\n \n     pub(crate) fn current_status(&self) -> lsp_ext::ServerStatusParams {\n         let mut status = lsp_ext::ServerStatusParams {\n@@ -617,3 +565,39 @@ pub(crate) fn load_proc_macro(client: Option<&ProcMacroServer>, path: &AbsPath)\n         }\n     }\n }\n+\n+pub(crate) fn should_refresh_for_change(path: &AbsPath, change_kind: ChangeKind) -> bool {\n+    const IMPLICIT_TARGET_FILES: &[&str] = &[\"build.rs\", \"src/main.rs\", \"src/lib.rs\"];\n+    const IMPLICIT_TARGET_DIRS: &[&str] = &[\"src/bin\", \"examples\", \"tests\", \"benches\"];\n+    let file_name = path.file_name().unwrap_or_default();\n+\n+    if file_name == \"Cargo.toml\" || file_name == \"Cargo.lock\" {\n+        return true;\n+    }\n+    if change_kind == ChangeKind::Modify {\n+        return false;\n+    }\n+    if path.extension().unwrap_or_default() != \"rs\" {\n+        return false;\n+    }\n+    if IMPLICIT_TARGET_FILES.iter().any(|it| path.as_ref().ends_with(it)) {\n+        return true;\n+    }\n+    let parent = match path.parent() {\n+        Some(it) => it,\n+        None => return false,\n+    };\n+    if IMPLICIT_TARGET_DIRS.iter().any(|it| parent.as_ref().ends_with(it)) {\n+        return true;\n+    }\n+    if file_name == \"main.rs\" {\n+        let grand_parent = match parent.parent() {\n+            Some(it) => it,\n+            None => return false,\n+        };\n+        if IMPLICIT_TARGET_DIRS.iter().any(|it| grand_parent.as_ref().ends_with(it)) {\n+            return true;\n+        }\n+    }\n+    false\n+}"}]}