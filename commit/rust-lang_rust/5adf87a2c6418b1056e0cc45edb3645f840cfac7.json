{"sha": "5adf87a2c6418b1056e0cc45edb3645f840cfac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZGY4N2EyYzY0MThiMTA1NmUwY2M0NWVkYjM2NDVmODQwY2ZhYzc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-29T09:44:29Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-29T09:44:29Z"}, "message": "Fix iter_structural_ty_full for resource types\n\nThe compiler would blow up when compiling a structural type\ncontaining a resource.", "tree": {"sha": "30e88dc36612b1628206b3e8133212450f27f2e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e88dc36612b1628206b3e8133212450f27f2e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5adf87a2c6418b1056e0cc45edb3645f840cfac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5adf87a2c6418b1056e0cc45edb3645f840cfac7", "html_url": "https://github.com/rust-lang/rust/commit/5adf87a2c6418b1056e0cc45edb3645f840cfac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5adf87a2c6418b1056e0cc45edb3645f840cfac7/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46423006839c1594422e7dade08687a2942f6f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/46423006839c1594422e7dade08687a2942f6f69", "html_url": "https://github.com/rust-lang/rust/commit/46423006839c1594422e7dade08687a2942f6f69"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "468923ef79b533a15a01a164d09329b53317255f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5adf87a2c6418b1056e0cc45edb3645f840cfac7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adf87a2c6418b1056e0cc45edb3645f840cfac7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5adf87a2c6418b1056e0cc45edb3645f840cfac7", "patch": "@@ -1649,8 +1649,7 @@ fn make_cmp_glue(cx: &@block_ctxt, lhs0: ValueRef, rhs0: ValueRef, t: &ty::t,\n             ret rslt(cnt_cx, C_nil());\n         }\n         if ty::type_is_structural(bcx_tcx(cx), t) {\n-            r =\n-                iter_structural_ty_full(r.bcx, lhs, rhs, t,\n+            r = iter_structural_ty_full(r.bcx, lhs, rhs, t,\n                                         bind inner(next, false, flag, llop, _,\n                                                    _, _, _));\n         } else {\n@@ -1661,8 +1660,7 @@ fn make_cmp_glue(cx: &@block_ctxt, lhs0: ValueRef, rhs0: ValueRef, t: &ty::t,\n             let rhs_lim = r.bcx.build.GEP(rhs_p0, ~[min_len]);\n             let elt_ty = ty::sequence_element_type(bcx_tcx(cx), t);\n             r = size_of(r.bcx, elt_ty);\n-            r =\n-                iter_sequence_raw(r.bcx, lhs_p0, rhs_p0, rhs_lim, r.val,\n+            r = iter_sequence_raw(r.bcx, lhs_p0, rhs_p0, rhs_lim, r.val,\n                                   bind inner(next, true, flag, llop, _, _, _,\n                                              elt_ty));\n         }\n@@ -1982,13 +1980,16 @@ fn iter_structural_ty_full(cx: &@block_ctxt, av: ValueRef, bv: ValueRef,\n         }\n       }\n       ty::ty_res(_, inner, tps) {\n-        let inner1 = ty::substitute_type_params(bcx_tcx(cx), tps, inner);\n-        r = GEP_tup_like(r.bcx, t, av, ~[0, 1]);\n+        let tcx = bcx_tcx(cx);\n+        let inner1 = ty::substitute_type_params(tcx, tps, inner);\n+        let inner_t_s = ty::substitute_type_params(tcx, tps, inner);\n+        let tup_t = ty::mk_imm_tup(tcx, ~[ty::mk_int(tcx), inner_t_s]);\n+        r = GEP_tup_like(r.bcx, tup_t, av, ~[0, 1]);\n         let llfld_a = r.val;\n-        r = GEP_tup_like(r.bcx, t, bv, ~[0, 1]);\n+        r = GEP_tup_like(r.bcx, tup_t, bv, ~[0, 1]);\n         let llfld_b = r.val;\n-        f(r.bcx, load_if_immediate(r.bcx, llfld_a, inner1),\n-          load_if_immediate(r.bcx, llfld_b, inner1), inner1);\n+        r = f(r.bcx, load_if_immediate(r.bcx, llfld_a, inner1),\n+              load_if_immediate(r.bcx, llfld_b, inner1), inner1);\n       }\n       ty::ty_tag(tid, tps) {\n         let variants = ty::tag_variants(bcx_tcx(cx), tid);\n@@ -2059,18 +2060,12 @@ fn iter_structural_ty_full(cx: &@block_ctxt, av: ValueRef, bv: ValueRef,\n \n // Iterates through a pointer range, until the src* hits the src_lim*.\n fn iter_sequence_raw(cx: @block_ctxt, dst: ValueRef,\n-                     src:\n-\n-                         // elt*\n-                         ValueRef,\n-                     src_lim:\n-\n-                         // elt*\n-                         ValueRef,\n-                     elt_sz:\n-\n-                         // elt*\n-                         ValueRef, f: &val_pair_fn) -> result {\n+                     // elt*\n+                     src: ValueRef,\n+                     // elt*\n+                     src_lim: ValueRef,\n+                     // elt*\n+                     elt_sz: ValueRef, f: &val_pair_fn) -> result {\n     let bcx = cx;\n     let dst_int: ValueRef = vp2i(bcx, dst);\n     let src_int: ValueRef = vp2i(bcx, src);"}, {"sha": "8e2c3035045f40df8ed23c4c4229aaaf7192eefd", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5adf87a2c6418b1056e0cc45edb3645f840cfac7/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adf87a2c6418b1056e0cc45edb3645f840cfac7/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=5adf87a2c6418b1056e0cc45edb3645f840cfac7", "patch": "@@ -0,0 +1,19 @@\n+// Ensures that putting resources inside structual types keeps\n+// working.\n+\n+type closable = @mutable bool;\n+\n+resource close_res(i: closable) {\n+    *i = false;\n+}\n+\n+tag option[T] { none; some(T); }\n+\n+fn sink(res: option[close_res]) {}\n+\n+fn main() {\n+    let c = @mutable true;\n+    sink(none);\n+    sink(some(close_res(c)));\n+    assert !*c;\n+}"}]}