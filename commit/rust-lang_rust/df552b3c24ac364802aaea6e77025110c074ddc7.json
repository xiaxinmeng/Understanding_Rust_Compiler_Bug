{"sha": "df552b3c24ac364802aaea6e77025110c074ddc7", "node_id": "C_kwDOAAsO6NoAKGRmNTUyYjNjMjRhYzM2NDgwMmFhZWE2ZTc3MDI1MTEwYzA3NGRkYzc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-21T08:55:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-21T08:55:14Z"}, "message": "Rollup merge of #91070 - cuviper:insert-global, r=nagisa\n\nMake `LLVMRustGetOrInsertGlobal` always return a `GlobalVariable`\n\n`Module::getOrInsertGlobal` returns a `Constant*`, which is a super\nclass of `GlobalVariable`, but if the given type doesn't match an\nexisting declaration, it returns a bitcast of that global instead.\nThis causes UB when we pass that to `LLVMGetVisibility` which\nunconditionally casts the opaque argument to a `GlobalValue*`.\n\nInstead, we can do our own get-or-insert without worrying whether\nexisting types match exactly. It's not relevant when we're just trying\nto get/set the linkage and visibility, and if types are needed we can\nbitcast or error nicely from `rustc_codegen_llvm` instead.\n\nFixes #91050, fixes #87933, fixes #87813.", "tree": {"sha": "3a6027ca5b4a96af5fab4fc014350218c2d1f7e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a6027ca5b4a96af5fab4fc014350218c2d1f7e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df552b3c24ac364802aaea6e77025110c074ddc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmglyCRBK7hj4Ov3rIwAAvXUIAAsNVo5sXQW7SLfEbV3dYsZT\nECMx/OQ2mtBZggUmCqT4jnv02gegWwwZXPPz+kLkjzoogWg8Ph/nb9lRlz6E32Hi\n6G7A6xAppQRPo/K/PFv3A2tZEiWcdUwMIe8zGqbwK31MblE0zBag3Kb0gfgvjx5r\nIwzEzOdEE3n/j5Nc0u7SMnUs8If+SH3IWjyf2lSRkU25Ke8T6bDP9kfiapiqnuI+\nGK3CqV2Th4fPGosThzj4TCoeHr6Tu8BvFEHfcx1+uNAB1Qm5fYIrkJV0hkHBEgS3\nKjZkxANREYN1g1fU4zRiOOlbjEx7rA2iRJTk15pJrkY2gIysE1I/ZqBrONTjcXg=\n=EZeE\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a6027ca5b4a96af5fab4fc014350218c2d1f7e9\nparent 789d168e132d3db976394a5d82490c4763c97626\nparent 3aa1954b0bfc3f10917d5ff8fa315ac3cae5c45a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637484914 +0100\ncommitter GitHub <noreply@github.com> 1637484914 +0100\n\nRollup merge of #91070 - cuviper:insert-global, r=nagisa\n\nMake `LLVMRustGetOrInsertGlobal` always return a `GlobalVariable`\n\n`Module::getOrInsertGlobal` returns a `Constant*`, which is a super\nclass of `GlobalVariable`, but if the given type doesn't match an\nexisting declaration, it returns a bitcast of that global instead.\nThis causes UB when we pass that to `LLVMGetVisibility` which\nunconditionally casts the opaque argument to a `GlobalValue*`.\n\nInstead, we can do our own get-or-insert without worrying whether\nexisting types match exactly. It's not relevant when we're just trying\nto get/set the linkage and visibility, and if types are needed we can\nbitcast or error nicely from `rustc_codegen_llvm` instead.\n\nFixes #91050, fixes #87933, fixes #87813.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df552b3c24ac364802aaea6e77025110c074ddc7", "html_url": "https://github.com/rust-lang/rust/commit/df552b3c24ac364802aaea6e77025110c074ddc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df552b3c24ac364802aaea6e77025110c074ddc7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789d168e132d3db976394a5d82490c4763c97626", "url": "https://api.github.com/repos/rust-lang/rust/commits/789d168e132d3db976394a5d82490c4763c97626", "html_url": "https://github.com/rust-lang/rust/commit/789d168e132d3db976394a5d82490c4763c97626"}, {"sha": "3aa1954b0bfc3f10917d5ff8fa315ac3cae5c45a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa1954b0bfc3f10917d5ff8fa315ac3cae5c45a", "html_url": "https://github.com/rust-lang/rust/commit/3aa1954b0bfc3f10917d5ff8fa315ac3cae5c45a"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "f3d8eb2602a37ccd31a415cf5e35d142bf9aa863", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df552b3c24ac364802aaea6e77025110c074ddc7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/df552b3c24ac364802aaea6e77025110c074ddc7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=df552b3c24ac364802aaea6e77025110c074ddc7", "patch": "@@ -124,8 +124,18 @@ extern \"C\" LLVMValueRef LLVMRustGetOrInsertFunction(LLVMModuleRef M,\n \n extern \"C\" LLVMValueRef\n LLVMRustGetOrInsertGlobal(LLVMModuleRef M, const char *Name, size_t NameLen, LLVMTypeRef Ty) {\n+  Module *Mod = unwrap(M);\n   StringRef NameRef(Name, NameLen);\n-  return wrap(unwrap(M)->getOrInsertGlobal(NameRef, unwrap(Ty)));\n+\n+  // We don't use Module::getOrInsertGlobal because that returns a Constant*,\n+  // which may either be the real GlobalVariable*, or a constant bitcast of it\n+  // if our type doesn't match the original declaration. We always want the\n+  // GlobalVariable* so we can access linkage, visibility, etc.\n+  GlobalVariable *GV = Mod->getGlobalVariable(NameRef, true);\n+  if (!GV)\n+    GV = new GlobalVariable(*Mod, unwrap(Ty), false,\n+                            GlobalValue::ExternalLinkage, nullptr, NameRef);\n+  return wrap(GV);\n }\n \n extern \"C\" LLVMValueRef"}, {"sha": "403a41462ef18d48ffeba6c723bc541993fb4102", "filename": "src/test/ui/statics/issue-91050-1.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/df552b3c24ac364802aaea6e77025110c074ddc7/src%2Ftest%2Fui%2Fstatics%2Fissue-91050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df552b3c24ac364802aaea6e77025110c074ddc7/src%2Ftest%2Fui%2Fstatics%2Fissue-91050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Fissue-91050-1.rs?ref=df552b3c24ac364802aaea6e77025110c074ddc7", "patch": "@@ -0,0 +1,34 @@\n+// build-pass\n+// compile-flags: --crate-type=rlib --emit=llvm-ir -Cno-prepopulate-passes\n+\n+// This test declares globals by the same name with different types, which\n+// caused problems because Module::getOrInsertGlobal would return a Constant*\n+// bitcast instead of a GlobalVariable* that could access linkage/visibility.\n+// In alt builds with LLVM assertions this would fail:\n+//\n+// rustc: /checkout/src/llvm-project/llvm/include/llvm/Support/Casting.h:269:\n+// typename cast_retty<X, Y *>::ret_type llvm::cast(Y *) [X = llvm::GlobalValue, Y = llvm::Value]:\n+// Assertion `isa<X>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\n+//\n+// In regular builds, the bad cast was UB, like \"Invalid LLVMRustVisibility value!\"\n+\n+pub mod before {\n+    #[no_mangle]\n+    pub static GLOBAL1: [u8; 1] = [1];\n+}\n+\n+pub mod inner {\n+    extern \"C\" {\n+        pub static GLOBAL1: u8;\n+        pub static GLOBAL2: u8;\n+    }\n+\n+    pub fn call() {\n+        drop(unsafe { (GLOBAL1, GLOBAL2) });\n+    }\n+}\n+\n+pub mod after {\n+    #[no_mangle]\n+    pub static GLOBAL2: [u8; 1] = [2];\n+}"}, {"sha": "2ff954d15cabe09e0beefc9e471a84a3baff1c7e", "filename": "src/test/ui/statics/issue-91050-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df552b3c24ac364802aaea6e77025110c074ddc7/src%2Ftest%2Fui%2Fstatics%2Fissue-91050-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df552b3c24ac364802aaea6e77025110c074ddc7/src%2Ftest%2Fui%2Fstatics%2Fissue-91050-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Fissue-91050-2.rs?ref=df552b3c24ac364802aaea6e77025110c074ddc7", "patch": "@@ -0,0 +1,24 @@\n+// build-pass\n+// compile-flags: --crate-type=rlib --emit=llvm-ir -Cno-prepopulate-passes\n+\n+// This is a variant of issue-91050-1.rs -- see there for an explanation.\n+\n+pub mod before {\n+    extern \"C\" {\n+        pub static GLOBAL1: [u8; 1];\n+    }\n+\n+    pub unsafe fn do_something_with_array() -> u8 {\n+        GLOBAL1[0]\n+    }\n+}\n+\n+pub mod inner {\n+    extern \"C\" {\n+        pub static GLOBAL1: u8;\n+    }\n+\n+    pub unsafe fn call() -> u8 {\n+        GLOBAL1 + 42\n+    }\n+}"}]}