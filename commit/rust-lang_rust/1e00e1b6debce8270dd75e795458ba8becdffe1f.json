{"sha": "1e00e1b6debce8270dd75e795458ba8becdffe1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMDBlMWI2ZGViY2U4MjcwZGQ3NWU3OTU0NThiYThiZWNkZmZlMWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-05-20T14:31:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-22T15:33:07Z"}, "message": "upcasting traits requires only that things become more general\n\nRevert the code that states that upcasting traits requires full\nequality and change to require that the source type is a subtype of\nthe target type, as one would expect. As the comment states, this was\nan old bug that we didn't want to fix yet as it interacted poorly with\nthe old leak-check. This fixes the old-lub-glb-object test, which was\npreviously reporting too many errors (i.e., in the previous commit).", "tree": {"sha": "61b186bfde82f9b3954da9bc5b269383ac383b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b186bfde82f9b3954da9bc5b269383ac383b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e00e1b6debce8270dd75e795458ba8becdffe1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e00e1b6debce8270dd75e795458ba8becdffe1f", "html_url": "https://github.com/rust-lang/rust/commit/1e00e1b6debce8270dd75e795458ba8becdffe1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e00e1b6debce8270dd75e795458ba8becdffe1f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a7a850753b60abfd2a806bf6bba4259d3535e7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7a850753b60abfd2a806bf6bba4259d3535e7b", "html_url": "https://github.com/rust-lang/rust/commit/5a7a850753b60abfd2a806bf6bba4259d3535e7b"}], "stats": {"total": 52, "additions": 12, "deletions": 40}, "files": [{"sha": "4837acbd1dedc8d8e18be773d27007b88f0d22ad", "filename": "src/librustc_trait_selection/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e00e1b6debce8270dd75e795458ba8becdffe1f/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e00e1b6debce8270dd75e795458ba8becdffe1f/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1e00e1b6debce8270dd75e795458ba8becdffe1f", "patch": "@@ -612,24 +612,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 // Require that the traits involved in this upcast are **equal**;\n                 // only the **lifetime bound** is changed.\n-                //\n-                // FIXME: This condition is arguably too strong -- it would\n-                // suffice for the source trait to be a *subtype* of the target\n-                // trait. In particular, changing from something like\n-                // `for<'a, 'b> Foo<'a, 'b>` to `for<'a> Foo<'a, 'a>` should be\n-                // permitted. And, indeed, in the in commit\n-                // 904a0bde93f0348f69914ee90b1f8b6e4e0d7cbc, this\n-                // condition was loosened. However, when the leak check was\n-                // added back, using subtype here actually guides the coercion\n-                // code in such a way that it accepts `old-lub-glb-object.rs`.\n-                // This is probably a good thing, but I've modified this to `.eq`\n-                // because I want to continue rejecting that test (as we have\n-                // done for quite some time) before we are firmly comfortable\n-                // with what our behavior should be there. -nikomatsakis\n                 let InferOk { obligations, .. } = self\n                     .infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .eq(target, source_trait) // FIXME -- see below\n+                    .sup(target, source_trait)\n                     .map_err(|_| Unimplemented)?;\n                 nested.extend(obligations);\n "}, {"sha": "aeb38f3f91068b9d0dc119ac3f4d24c3fb63ec11", "filename": "src/test/mir-opt/address-of/rustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e00e1b6debce8270dd75e795458ba8becdffe1f/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1e00e1b6debce8270dd75e795458ba8becdffe1f/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=1e00e1b6debce8270dd75e795458ba8becdffe1f", "patch": "@@ -12,7 +12,7 @@\n | 8: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:16:12: 16:24\n | 9: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:16:12: 16:24\n | 10: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:18:5: 18:18\n-| 11: Canonical { max_universe: U3, variables: [CanonicalVarInfo { kind: Region(U3) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:20:5: 20:25\n+| 11: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:20:5: 20:25\n | 12: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:23:12: 23:20\n | 13: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:23:12: 23:20\n | 14: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) } at $DIR/address-of.rs:24:12: 24:28\n@@ -22,7 +22,7 @@\n | 18: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:26:12: 26:24\n | 19: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:26:12: 26:24\n | 20: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) } at $DIR/address-of.rs:28:5: 28:16\n-| 21: Canonical { max_universe: U6, variables: [CanonicalVarInfo { kind: Region(U6) }], value: Ty(*mut dyn std::marker::Send) } at $DIR/address-of.rs:30:5: 30:23\n+| 21: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) } at $DIR/address-of.rs:30:5: 30:23\n | 22: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) } at $DIR/address-of.rs:33:12: 33:18\n | 23: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) } at $DIR/address-of.rs:33:12: 33:18\n | 24: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) } at $DIR/address-of.rs:34:12: 34:26"}, {"sha": "39d351c235574e2f86a02cdc63b3bafa4e4ff2e5", "filename": "src/test/ui/lub-glb/old-lub-glb-object.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e00e1b6debce8270dd75e795458ba8becdffe1f/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e00e1b6debce8270dd75e795458ba8becdffe1f/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs?ref=1e00e1b6debce8270dd75e795458ba8becdffe1f", "patch": "@@ -1,28 +1,22 @@\n // Test that we give a note when the old LUB/GLB algorithm would have\n // succeeded but the new code (which is stricter) gives an error.\n \n-trait Foo<T, U> { }\n+trait Foo<T, U> {}\n \n-fn foo(\n-    x: &dyn for<'a, 'b> Foo<&'a u8, &'b u8>,\n-    y: &dyn for<'a> Foo<&'a u8, &'a u8>,\n-) {\n+fn foo(x: &dyn for<'a, 'b> Foo<&'a u8, &'b u8>, y: &dyn for<'a> Foo<&'a u8, &'a u8>) {\n     let z = match 22 {\n+        //~^ ERROR mismatched types\n         0 => x,\n-        _ => y, //~ ERROR `match` arms have incompatible types\n+        _ => y,\n     };\n }\n \n-fn bar(\n-    x: &dyn for<'a, 'b> Foo<&'a u8, &'b u8>,\n-    y: &dyn for<'a> Foo<&'a u8, &'a u8>,\n-) {\n+fn bar(x: &dyn for<'a, 'b> Foo<&'a u8, &'b u8>, y: &dyn for<'a> Foo<&'a u8, &'a u8>) {\n     // Accepted with explicit case:\n     let z = match 22 {\n         0 => x as &dyn for<'a> Foo<&'a u8, &'a u8>,\n         _ => y,\n     };\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "6eabe5eaeeeebcbd2f7f5141dfde79a2faa28846", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1e00e1b6debce8270dd75e795458ba8becdffe1f/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e00e1b6debce8270dd75e795458ba8becdffe1f/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=1e00e1b6debce8270dd75e795458ba8becdffe1f", "patch": "@@ -1,8 +1,9 @@\n error[E0308]: mismatched types\n-  --> $DIR/old-lub-glb-object.rs:10:13\n+  --> $DIR/old-lub-glb-object.rs:7:13\n    |\n LL |       let z = match 22 {\n    |  _____________^\n+LL | |\n LL | |         0 => x,\n LL | |         _ => y,\n LL | |     };\n@@ -11,15 +12,6 @@ LL | |     };\n    = note: expected trait object `dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n               found trait object `dyn for<'a> Foo<&'a u8, &'a u8>`\n \n-error[E0308]: mismatched types\n-  --> $DIR/old-lub-glb-object.rs:22:14\n-   |\n-LL |         0 => x as &dyn for<'a> Foo<&'a u8, &'a u8>,\n-   |              ^ one type is more general than the other\n-   |\n-   = note: expected trait object `dyn for<'a> Foo<&'a u8, &'a u8>`\n-              found trait object `dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}]}