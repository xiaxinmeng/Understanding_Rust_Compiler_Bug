{"sha": "75de33cd1dbe8ed39ab1e5795673fcbcfb547a80", "node_id": "C_kwDOAAsO6NoAKDc1ZGUzM2NkMWRiZThlZDM5YWIxZTU3OTU2NzNmY2JjZmI1NDdhODA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-19T15:54:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-19T15:54:42Z"}, "message": "Rollup merge of #110531 - lcnr:type-system-stuff, r=aliemjay\n\nsmall type system cleanup", "tree": {"sha": "146a96e8ef95369b9834e8b642da65a671dce6ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/146a96e8ef95369b9834e8b642da65a671dce6ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75de33cd1dbe8ed39ab1e5795673fcbcfb547a80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQA7CCRBK7hj4Ov3rIwAAicYIAE6gL6nFClcoHxRWYiYc38cZ\neXo6AwfVfoGtbGN6j5tYwDpZPG9W2rHAk7MDvBmyiafkI/Ojp9lkjL0mBS2n7Frt\njIwonWOsIQwVmfU9g+sGC+H8AhE+tsJ8+9s4BPwnfE5rXciJMaFGydbf4L15fotV\nDtBz3cev4MK4wcSMZfuNAmSfCz7BOLM9eLis/GzPVyafXSQot5JRSCrNPlTsjuYZ\nJnmvEZLTMUP3xC2fdnB7a+nENkUUEDjFz6vVSG6pLB7jBR4TDlA5Iy0xk9+MXJRQ\n5G8cmlMp+PrST4sXzg+U1yHIcWHwc3mfyQT/5x2rao8WfZ0T81wYcIJ0ctiYJb8=\n=EUhy\n-----END PGP SIGNATURE-----\n", "payload": "tree 146a96e8ef95369b9834e8b642da65a671dce6ac\nparent 9a13f4f0188d5a373815f23455250fd8d9575316\nparent 16d061ea77eebe963cac28b0cf13dd3cbb506b13\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681919682 +0200\ncommitter GitHub <noreply@github.com> 1681919682 +0200\n\nRollup merge of #110531 - lcnr:type-system-stuff, r=aliemjay\n\nsmall type system cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75de33cd1dbe8ed39ab1e5795673fcbcfb547a80", "html_url": "https://github.com/rust-lang/rust/commit/75de33cd1dbe8ed39ab1e5795673fcbcfb547a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75de33cd1dbe8ed39ab1e5795673fcbcfb547a80/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a13f4f0188d5a373815f23455250fd8d9575316", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a13f4f0188d5a373815f23455250fd8d9575316", "html_url": "https://github.com/rust-lang/rust/commit/9a13f4f0188d5a373815f23455250fd8d9575316"}, {"sha": "16d061ea77eebe963cac28b0cf13dd3cbb506b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d061ea77eebe963cac28b0cf13dd3cbb506b13", "html_url": "https://github.com/rust-lang/rust/commit/16d061ea77eebe963cac28b0cf13dd3cbb506b13"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "68002bfcfbd138231c319c15515c10c7404db0fc", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75de33cd1dbe8ed39ab1e5795673fcbcfb547a80/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75de33cd1dbe8ed39ab1e5795673fcbcfb547a80/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=75de33cd1dbe8ed39ab1e5795673fcbcfb547a80", "patch": "@@ -178,7 +178,7 @@ impl FlagComputation {\n \n             &ty::Alias(ty::Projection, data) => {\n                 self.add_flags(TypeFlags::HAS_TY_PROJECTION);\n-                self.add_projection_ty(data);\n+                self.add_alias_ty(data);\n             }\n \n             &ty::Alias(ty::Opaque, ty::AliasTy { substs, .. }) => {\n@@ -267,7 +267,7 @@ impl FlagComputation {\n                 projection_ty,\n                 term,\n             })) => {\n-                self.add_projection_ty(projection_ty);\n+                self.add_alias_ty(projection_ty);\n                 self.add_term(term);\n             }\n             ty::PredicateKind::WellFormed(arg) => {\n@@ -372,8 +372,8 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_projection_ty(&mut self, projection_ty: ty::AliasTy<'_>) {\n-        self.add_substs(projection_ty.substs);\n+    fn add_alias_ty(&mut self, alias_ty: ty::AliasTy<'_>) {\n+        self.add_substs(alias_ty.substs);\n     }\n \n     fn add_substs(&mut self, substs: &[GenericArg<'_>]) {"}, {"sha": "6808861d643ca9e1ff01aa6088e0c8a00d601bd0", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/75de33cd1dbe8ed39ab1e5795673fcbcfb547a80/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75de33cd1dbe8ed39ab1e5795673fcbcfb547a80/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=75de33cd1dbe8ed39ab1e5795673fcbcfb547a80", "patch": "@@ -170,29 +170,20 @@ pub fn predicate_obligations<'tcx>(\n         ty::PredicateKind::WellFormed(arg) => {\n             wf.compute(arg);\n         }\n-        ty::PredicateKind::ObjectSafe(_) => {}\n-        ty::PredicateKind::ClosureKind(..) => {}\n-        ty::PredicateKind::Subtype(ty::SubtypePredicate { a, b, a_is_expected: _ }) => {\n-            wf.compute(a.into());\n-            wf.compute(b.into());\n-        }\n-        ty::PredicateKind::Coerce(ty::CoercePredicate { a, b }) => {\n-            wf.compute(a.into());\n-            wf.compute(b.into());\n-        }\n+\n         ty::PredicateKind::ConstEvaluatable(ct) => {\n             wf.compute(ct.into());\n         }\n-        ty::PredicateKind::ConstEquate(c1, c2) => {\n-            wf.compute(c1.into());\n-            wf.compute(c2.into());\n-        }\n-        ty::PredicateKind::Ambiguous => {}\n-        ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n-            bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n-        }\n-        ty::PredicateKind::AliasRelate(..) => {\n-            bug!(\"We should only wf check where clauses and `AliasRelate` is not a `Clause`\")\n+\n+        ty::PredicateKind::ObjectSafe(_)\n+        | ty::PredicateKind::ClosureKind(..)\n+        | ty::PredicateKind::Subtype(..)\n+        | ty::PredicateKind::Coerce(..)\n+        | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::Ambiguous\n+        | ty::PredicateKind::AliasRelate(..)\n+        | ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n+            bug!(\"We should only wf check where clauses, unexpected predicate: {predicate:?}\")\n         }\n     }\n "}]}