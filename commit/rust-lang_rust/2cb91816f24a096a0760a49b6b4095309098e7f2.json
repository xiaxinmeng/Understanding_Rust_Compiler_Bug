{"sha": "2cb91816f24a096a0760a49b6b4095309098e7f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYjkxODE2ZjI0YTA5NmEwNzYwYTQ5YjZiNDA5NTMwOTA5OGU3ZjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-17T02:56:11Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-17T02:56:11Z"}, "message": "Fix binop span", "tree": {"sha": "93cb2f339ba603c5583dcd4e7dcebf671616d267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93cb2f339ba603c5583dcd4e7dcebf671616d267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cb91816f24a096a0760a49b6b4095309098e7f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb91816f24a096a0760a49b6b4095309098e7f2", "html_url": "https://github.com/rust-lang/rust/commit/2cb91816f24a096a0760a49b6b4095309098e7f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cb91816f24a096a0760a49b6b4095309098e7f2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234adf84bd834146c76b98dd4328e05a4bf7900b", "url": "https://api.github.com/repos/rust-lang/rust/commits/234adf84bd834146c76b98dd4328e05a4bf7900b", "html_url": "https://github.com/rust-lang/rust/commit/234adf84bd834146c76b98dd4328e05a4bf7900b"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "619900b6ad903f3ab22e1c881bc8982594e9cfb4", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2cb91816f24a096a0760a49b6b4095309098e7f2/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb91816f24a096a0760a49b6b4095309098e7f2/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=2cb91816f24a096a0760a49b6b4095309098e7f2", "patch": "@@ -305,8 +305,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             };\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n-                                    self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err, true, op) {\n+                                    self.check_str_addition(\n+                                        lhs_expr, rhs_expr, lhs_ty, rhs_ty, &mut err, true, op) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g., \"Hello \" += \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -400,8 +400,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             };\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n-                                    self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err, false, op) {\n+                                    self.check_str_addition(\n+                                        lhs_expr, rhs_expr, lhs_ty, rhs_ty, &mut err, false, op) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g., \"Hello \" + \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -509,7 +509,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// to print the normal \"implementation of `std::ops::Add` might be missing\" note\n     fn check_str_addition(\n         &self,\n-        expr: &'gcx hir::Expr,\n         lhs_expr: &'gcx hir::Expr,\n         rhs_expr: &'gcx hir::Expr,\n         lhs_ty: Ty<'tcx>,\n@@ -537,7 +536,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     &format!(\"{:?}\", rhs_ty) == \"&&str\"\n                 ) =>\n             {\n-                if !is_assign {\n+                if !is_assign { // Do not supply this message if `&str += &str`\n                     err.span_label(\n                         op.span,\n                         \"`+` can't be used to concatenate two `&str` strings\",\n@@ -570,8 +569,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if (l_ty.sty == Str || &format!(\"{:?}\", l_ty) == \"std::string::String\") &&\n                 &format!(\"{:?}\", rhs_ty) == \"std::string::String\" =>\n             {\n-                err.span_label(expr.span,\n-                    \"`+` can't be used to concatenate a `&str` with a `String`\");\n+                err.span_label(\n+                    op.span,\n+                    \"`+` can't be used to concatenate a `&str` with a `String`\",\n+                );\n                 match (\n                     source_map.span_to_snippet(lhs_expr.span),\n                     source_map.span_to_snippet(rhs_expr.span),"}, {"sha": "a80fe4b2fd8e5843ff352268b845351d29492a4a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cb91816f24a096a0760a49b6b4095309098e7f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb91816f24a096a0760a49b6b4095309098e7f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2cb91816f24a096a0760a49b6b4095309098e7f2", "patch": "@@ -3540,8 +3540,7 @@ impl<'a> Parser<'a> {\n                     let binary = self.mk_binary(source_map::respan(cur_op_span, ast_op), lhs, rhs);\n                     self.mk_expr(span, binary, ThinVec::new())\n                 }\n-                AssocOp::Assign =>\n-                    self.mk_expr(span, ExprKind::Assign(lhs, rhs), ThinVec::new()),\n+                AssocOp::Assign => self.mk_expr(span, ExprKind::Assign(lhs, rhs), ThinVec::new()),\n                 AssocOp::ObsoleteInPlace =>\n                     self.mk_expr(span, ExprKind::ObsoleteInPlace(lhs, rhs), ThinVec::new()),\n                 AssocOp::AssignOp(k) => {"}, {"sha": "b174e95c8a1d45c9a8497ef33c8b77028af6d1b3", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2cb91816f24a096a0760a49b6b4095309098e7f2/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb91816f24a096a0760a49b6b4095309098e7f2/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=2cb91816f24a096a0760a49b6b4095309098e7f2", "patch": "@@ -25,11 +25,10 @@ error[E0369]: binary operation `+` cannot be applied to type `&str`\n   --> $DIR/issue-39018.rs:11:22\n    |\n LL |     let x = \"Hello \" + \"World!\".to_owned();\n-   |             ---------^--------------------\n-   |             |          |\n-   |             |          std::string::String\n+   |             -------- ^ ------------------- std::string::String\n+   |             |        |\n+   |             |        `+` can't be used to concatenate a `&str` with a `String`\n    |             &str\n-   |             `+` can't be used to concatenate a `&str` with a `String`\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n@@ -52,11 +51,10 @@ error[E0369]: binary operation `+` cannot be applied to type `&std::string::Stri\n   --> $DIR/issue-39018.rs:27:16\n    |\n LL |     let _ = &a + b;\n-   |             ---^--\n-   |             |    |\n-   |             |    std::string::String\n+   |             -- ^ - std::string::String\n+   |             |  |\n+   |             |  `+` can't be used to concatenate a `&str` with a `String`\n    |             &std::string::String\n-   |             `+` can't be used to concatenate a `&str` with a `String`\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = &a.to_owned() + &b;\n@@ -78,11 +76,10 @@ error[E0369]: binary operation `+` cannot be applied to type `&std::string::Stri\n   --> $DIR/issue-39018.rs:30:15\n    |\n LL |     let _ = e + b;\n-   |             --^--\n-   |             |   |\n-   |             |   std::string::String\n+   |             - ^ - std::string::String\n+   |             | |\n+   |             | `+` can't be used to concatenate a `&str` with a `String`\n    |             &std::string::String\n-   |             `+` can't be used to concatenate a `&str` with a `String`\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = e.to_owned() + &b;"}]}