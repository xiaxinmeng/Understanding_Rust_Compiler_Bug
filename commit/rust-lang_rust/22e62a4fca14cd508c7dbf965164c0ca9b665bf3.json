{"sha": "22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "node_id": "C_kwDOAAsO6NoAKDIyZTYyYTRmY2ExNGNkNTA4YzdkYmY5NjUxNjRjMGNhOWI2NjViZjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-25T21:19:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-25T21:19:52Z"}, "message": "Rollup merge of #106944 - Nilstrieb:there-once-was-a-diagnostic, r=WaffleLapkin\n\nSuggest using a lock for `*Cell: Sync` bounds\n\nI mostly did this for `OnceCell<T>` at first because users will be confused to see that the `OnceCell<T>` in `std` isn't `Sync` but then extended it to `Cell<T>` and `RefCell<T>` as well.", "tree": {"sha": "1c0887c7643cc4e9396ae780779733c6cdd5f664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c0887c7643cc4e9396ae780779733c6cdd5f664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0Zz4CRBK7hj4Ov3rIwAAQXcIAGidN/jRiuk2J6zExzAGigP1\ntYskPF9bcIBbEnrN/j1nS8ZtkG2efd2YTYqbMhBw5mVdbNv5tU2ZwAFrzXVnGt6H\nZ5nU7E0m9Llg/PIL9r7Z6OS5HwC+S2dvGSGIbNmWLywvMOWaOfSnHsWoI5X31+MZ\nAbndnxZwvg7m/+9X7nTV7pk1oMoT2+Ku6DgVfV74SGQ2hgv3NHRdMePX7Jqz7A5F\nv3JfOFOF52SOSx73INrfJogEx5B6rYfpOR5TJskzClZj6WDNIwXAuqk+Vcc6ylKP\ncozZwgX+97g0T+SQqGbLdg5K8Kf5HZSIx7BGKCWzFH+k+B0yM9M9epE6MqwDG2M=\n=F++y\n-----END PGP SIGNATURE-----\n", "payload": "tree 1c0887c7643cc4e9396ae780779733c6cdd5f664\nparent 9e3f3306567f62086dcbb7f6a71f0a0c07db0de2\nparent 6d0c91fda35f7a78ff688ea623d1d2ee9b16cad7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674681592 +0100\ncommitter GitHub <noreply@github.com> 1674681592 +0100\n\nRollup merge of #106944 - Nilstrieb:there-once-was-a-diagnostic, r=WaffleLapkin\n\nSuggest using a lock for `*Cell: Sync` bounds\n\nI mostly did this for `OnceCell<T>` at first because users will be confused to see that the `OnceCell<T>` in `std` isn't `Sync` but then extended it to `Cell<T>` and `RefCell<T>` as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "html_url": "https://github.com/rust-lang/rust/commit/22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e3f3306567f62086dcbb7f6a71f0a0c07db0de2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3f3306567f62086dcbb7f6a71f0a0c07db0de2", "html_url": "https://github.com/rust-lang/rust/commit/9e3f3306567f62086dcbb7f6a71f0a0c07db0de2"}, {"sha": "6d0c91fda35f7a78ff688ea623d1d2ee9b16cad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0c91fda35f7a78ff688ea623d1d2ee9b16cad7", "html_url": "https://github.com/rust-lang/rust/commit/6d0c91fda35f7a78ff688ea623d1d2ee9b16cad7"}], "stats": {"total": 238, "additions": 233, "deletions": 5}, "files": [{"sha": "f74e563f1b9c0bc5ef8de2f77929c36c4d5633f9", "filename": "library/core/src/cell/once.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -298,3 +298,7 @@ impl<T> const From<T> for OnceCell<T> {\n         OnceCell { inner: UnsafeCell::new(Some(value)) }\n     }\n }\n+\n+// Just like for `Cell<T>` this isn't needed, but results in nicer error messages.\n+#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+impl<T> !Sync for OnceCell<T> {}"}, {"sha": "74055602ec2e62df6c58148f0725789d61faaf02", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -469,6 +469,62 @@ pub macro Copy($item:item) {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Sync\")]\n #[lang = \"sync\"]\n #[rustc_on_unimplemented(\n+    on(\n+        _Self = \"std::cell::OnceCell<T>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::OnceLock` instead\"\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<u8>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU8` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<u16>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU16` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<u32>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU32` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<u64>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU64` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<usize>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicUsize` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<i8>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI8` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<i16>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI16` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<i32>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<i64>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI64` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<isize>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicIsize` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<bool>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicBool` instead\",\n+    ),\n+    on(\n+        _Self = \"std::cell::Cell<T>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock`\",\n+    ),\n+    on(\n+        _Self = \"std::cell::RefCell<T>\",\n+        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\",\n+    ),\n     message = \"`{Self}` cannot be shared between threads safely\",\n     label = \"`{Self}` cannot be shared between threads safely\"\n )]"}, {"sha": "bd648de30672d8b9057c725594688aaad5331ce8", "filename": "tests/ui/async-await/issue-68112.drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -5,6 +5,7 @@ LL |     require_send(send_fut);\n    |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:34:17\n    |\n@@ -23,6 +24,7 @@ LL |     require_send(send_fut);\n    |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:43:17\n    |\n@@ -43,6 +45,7 @@ LL |     require_send(send_fut);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this `async fn` body\n   --> $DIR/issue-68112.rs:50:31"}, {"sha": "35b7341f63a4ddfc5040d3785abfb226773827ca", "filename": "tests/ui/async-await/issue-68112.no_drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -5,6 +5,7 @@ LL |     require_send(send_fut);\n    |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:34:17\n    |\n@@ -23,6 +24,7 @@ LL |     require_send(send_fut);\n    |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:43:17\n    |\n@@ -43,6 +45,7 @@ LL |     require_send(send_fut);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this `async fn` body\n   --> $DIR/issue-68112.rs:50:31"}, {"sha": "9def544e3d25c5119a96e5e94035b5afa941f411", "filename": "tests/ui/generator/issue-68112.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.rs?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -40,6 +40,7 @@ fn test1() {\n     require_send(send_gen);\n     //~^ ERROR generator cannot be sent between threads\n     //~| NOTE not `Send`\n+    //~| NOTE use `std::sync::RwLock` instead\n }\n \n pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n@@ -66,6 +67,7 @@ fn test2() {\n     //~| NOTE required for\n     //~| NOTE required by a bound introduced by this call\n     //~| NOTE captures the following types\n+    //~| NOTE use `std::sync::RwLock` instead\n }\n \n fn main() {}"}, {"sha": "b42bc93d01f662b2dd4ae3efb8df774dc1a72e6d", "filename": "tests/ui/generator/issue-68112.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -5,6 +5,7 @@ LL |     require_send(send_gen);\n    |                  ^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: generator is not `Send` as this value is used across a yield\n   --> $DIR/issue-68112.rs:36:9\n    |\n@@ -23,33 +24,34 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:63:18\n+  --> $DIR/issue-68112.rs:64:18\n    |\n LL |     require_send(send_gen);\n    |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |     |\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this generator\n-  --> $DIR/issue-68112.rs:48:5\n+  --> $DIR/issue-68112.rs:49:5\n    |\n LL |     || {\n    |     ^^\n note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n-  --> $DIR/issue-68112.rs:45:30\n+  --> $DIR/issue-68112.rs:46:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n-  --> $DIR/issue-68112.rs:53:34\n+  --> $DIR/issue-68112.rs:54:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`, `()`\n note: required because it's used within this generator\n-  --> $DIR/issue-68112.rs:59:20\n+  --> $DIR/issue-68112.rs:60:20\n    |\n LL |     let send_gen = || {\n    |                    ^^"}, {"sha": "1711df729b8c087634f282025dc66e5a50bdb931", "filename": "tests/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -12,6 +12,7 @@ LL | |     });\n    | |_____^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n    = note: required for `&Cell<i32>` to implement `Send`\n note: required because it's used within this generator\n   --> $DIR/not-send-sync.rs:16:17\n@@ -36,6 +37,7 @@ LL | |     });\n    | |_____^ generator is not `Sync`\n    |\n    = help: within `[generator@$DIR/not-send-sync.rs:9:17: 9:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n note: generator is not `Sync` as this value is used across a yield\n   --> $DIR/not-send-sync.rs:12:9\n    |"}, {"sha": "45d018b8ebad5066d9f0043ef68f6366c730f535", "filename": "tests/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -5,6 +5,7 @@ LL |     require_send(send_gen);\n    |                  ^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:35:9\n    |\n@@ -29,6 +30,7 @@ LL |     require_send(send_gen);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:42:5"}, {"sha": "59112ce0a79e60234354effa8bba52b73c2c4f5f", "filename": "tests/ui/generator/print/generator-print-verbose-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -12,6 +12,7 @@ LL | |     });\n    | |_____^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n    = note: required for `&'_#4r Cell<i32>` to implement `Send`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-2.rs:19:17\n@@ -36,6 +37,7 @@ LL | |     });\n    | |_____^ generator is not `Sync`\n    |\n    = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n note: generator is not `Sync` as this value is used across a yield\n   --> $DIR/generator-print-verbose-2.rs:15:9\n    |"}, {"sha": "aee73380f15e720130131d191fed3fe7be026a8c", "filename": "tests/ui/issues/issue-7364.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7364.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -5,6 +5,7 @@ LL | static boxed: Box<RefCell<isize>> = Box::new(RefCell::new(0));\n    |               ^^^^^^^^^^^^^^^^^^^ `RefCell<isize>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<isize>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Unique<RefCell<isize>>` to implement `Sync`\n    = note: required because it appears within the type `Box<RefCell<isize>>`\n    = note: shared static variables must have a type that implements `Sync`"}, {"sha": "4e34e10e377896da15c8db53717aaa6e6b91f7c7", "filename": "tests/ui/stdlib-unit-tests/not-sync.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fstdlib-unit-tests%2Fnot-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fstdlib-unit-tests%2Fnot-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstdlib-unit-tests%2Fnot-sync.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -5,6 +5,7 @@ LL |     test::<Cell<i32>>();\n    |            ^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n note: required by a bound in `test`\n   --> $DIR/not-sync.rs:5:12\n    |\n@@ -18,6 +19,7 @@ LL |     test::<RefCell<i32>>();\n    |            ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: required by a bound in `test`\n   --> $DIR/not-sync.rs:5:12\n    |"}, {"sha": "b564183831840ece55041a980cbcdbbda588cc11", "filename": "tests/ui/sync/mutexguard-sync.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fmutexguard-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fmutexguard-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fmutexguard-sync.rs?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "previous_filename": "tests/ui/mutexguard-sync.rs"}, {"sha": "4dc5571196c14076cfe171c1bf2e1dda3793ee6f", "filename": "tests/ui/sync/mutexguard-sync.stderr", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fmutexguard-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fmutexguard-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fmutexguard-sync.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -7,6 +7,7 @@ LL |     test_sync(guard);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n    = note: required for `MutexGuard<'_, Cell<i32>>` to implement `Sync`\n note: required by a bound in `test_sync`\n   --> $DIR/mutexguard-sync.rs:5:17", "previous_filename": "tests/ui/mutexguard-sync.stderr"}, {"sha": "3284eae7be181e3d33fe2dd803a5d26af8f69207", "filename": "tests/ui/sync/suggest-cell.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fsuggest-cell.rs?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -0,0 +1,31 @@\n+fn require_sync<T: Sync>() {}\n+//~^ NOTE required by this bound in `require_sync`\n+//~| NOTE required by this bound in `require_sync`\n+//~| NOTE required by this bound in `require_sync`\n+//~| NOTE required by this bound in `require_sync`\n+//~| NOTE required by a bound in `require_sync`\n+//~| NOTE required by a bound in `require_sync`\n+//~| NOTE required by a bound in `require_sync`\n+//~| NOTE required by a bound in `require_sync`\n+\n+fn main() {\n+    require_sync::<std::cell::Cell<()>>();\n+    //~^ ERROR `Cell<()>` cannot be shared between threads safely\n+    //~| NOTE `Cell<()>` cannot be shared between threads safely\n+    //~| NOTE if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock`\n+\n+    require_sync::<std::cell::Cell<u8>>();\n+    //~^ ERROR `Cell<u8>` cannot be shared between threads safely\n+    //~| NOTE `Cell<u8>` cannot be shared between threads safely\n+    //~| NOTE if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU8` instead\n+\n+    require_sync::<std::cell::Cell<i32>>();\n+    //~^ ERROR `Cell<i32>` cannot be shared between threads safely\n+    //~| NOTE `Cell<i32>` cannot be shared between threads safely\n+    //~| NOTE if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+\n+    require_sync::<std::cell::Cell<bool>>();\n+    //~^ ERROR `Cell<bool>` cannot be shared between threads safely\n+    //~| NOTE `Cell<bool>` cannot be shared between threads safely\n+    //~| NOTE if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicBool` instead\n+}"}, {"sha": "c232c1ccd53dd9fca0bf44169a8237d24c9a7ce8", "filename": "tests/ui/sync/suggest-cell.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-cell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-cell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fsuggest-cell.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -0,0 +1,59 @@\n+error[E0277]: `Cell<()>` cannot be shared between threads safely\n+  --> $DIR/suggest-cell.rs:12:20\n+   |\n+LL |     require_sync::<std::cell::Cell<()>>();\n+   |                    ^^^^^^^^^^^^^^^^^^^ `Cell<()>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Cell<()>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock`\n+note: required by a bound in `require_sync`\n+  --> $DIR/suggest-cell.rs:1:20\n+   |\n+LL | fn require_sync<T: Sync>() {}\n+   |                    ^^^^ required by this bound in `require_sync`\n+\n+error[E0277]: `Cell<u8>` cannot be shared between threads safely\n+  --> $DIR/suggest-cell.rs:17:20\n+   |\n+LL |     require_sync::<std::cell::Cell<u8>>();\n+   |                    ^^^^^^^^^^^^^^^^^^^ `Cell<u8>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Cell<u8>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU8` instead\n+note: required by a bound in `require_sync`\n+  --> $DIR/suggest-cell.rs:1:20\n+   |\n+LL | fn require_sync<T: Sync>() {}\n+   |                    ^^^^ required by this bound in `require_sync`\n+\n+error[E0277]: `Cell<i32>` cannot be shared between threads safely\n+  --> $DIR/suggest-cell.rs:22:20\n+   |\n+LL |     require_sync::<std::cell::Cell<i32>>();\n+   |                    ^^^^^^^^^^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+note: required by a bound in `require_sync`\n+  --> $DIR/suggest-cell.rs:1:20\n+   |\n+LL | fn require_sync<T: Sync>() {}\n+   |                    ^^^^ required by this bound in `require_sync`\n+\n+error[E0277]: `Cell<bool>` cannot be shared between threads safely\n+  --> $DIR/suggest-cell.rs:27:20\n+   |\n+LL |     require_sync::<std::cell::Cell<bool>>();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ `Cell<bool>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Cell<bool>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicBool` instead\n+note: required by a bound in `require_sync`\n+  --> $DIR/suggest-cell.rs:1:20\n+   |\n+LL | fn require_sync<T: Sync>() {}\n+   |                    ^^^^ required by this bound in `require_sync`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "82fca45b1a47f8786142d50bb74d5fed975f8bd0", "filename": "tests/ui/sync/suggest-once-cell.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-once-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-once-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fsuggest-once-cell.rs?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -0,0 +1,12 @@\n+#![feature(once_cell)]\n+\n+fn require_sync<T: Sync>() {}\n+//~^ NOTE required by this bound in `require_sync`\n+//~| NOTE required by a bound in `require_sync`\n+\n+fn main() {\n+    require_sync::<std::cell::OnceCell<()>>();\n+    //~^ ERROR `OnceCell<()>` cannot be shared between threads safely\n+    //~| NOTE `OnceCell<()>` cannot be shared between threads safely\n+    //~| NOTE use `std::sync::OnceLock` instead\n+}"}, {"sha": "fadf05374d8ca223c753aed071d16375ad3b7962", "filename": "tests/ui/sync/suggest-once-cell.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-once-cell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-once-cell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fsuggest-once-cell.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `OnceCell<()>` cannot be shared between threads safely\n+  --> $DIR/suggest-once-cell.rs:8:20\n+   |\n+LL |     require_sync::<std::cell::OnceCell<()>>();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ `OnceCell<()>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `OnceCell<()>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::OnceLock` instead\n+note: required by a bound in `require_sync`\n+  --> $DIR/suggest-once-cell.rs:3:20\n+   |\n+LL | fn require_sync<T: Sync>() {}\n+   |                    ^^^^ required by this bound in `require_sync`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6b972ae09622efe6cd36e1efb49dd2214c3c5724", "filename": "tests/ui/sync/suggest-ref-cell.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-ref-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-ref-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fsuggest-ref-cell.rs?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -0,0 +1,12 @@\n+#![feature(once_cell)]\n+\n+fn require_sync<T: Sync>() {}\n+//~^ NOTE required by this bound in `require_sync`\n+//~| NOTE required by a bound in `require_sync`\n+\n+fn main() {\n+    require_sync::<std::cell::RefCell<()>>();\n+    //~^ ERROR `RefCell<()>` cannot be shared between threads safely\n+    //~| NOTE `RefCell<()>` cannot be shared between threads safely\n+    //~| NOTE use `std::sync::RwLock` instead\n+}"}, {"sha": "9e8b8fcb42ed0c03e5c373c7405ab0cf88e1a412", "filename": "tests/ui/sync/suggest-ref-cell.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-ref-cell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e62a4fca14cd508c7dbf965164c0ca9b665bf3/tests%2Fui%2Fsync%2Fsuggest-ref-cell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fsuggest-ref-cell.stderr?ref=22e62a4fca14cd508c7dbf965164c0ca9b665bf3", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `RefCell<()>` cannot be shared between threads safely\n+  --> $DIR/suggest-ref-cell.rs:8:20\n+   |\n+LL |     require_sync::<std::cell::RefCell<()>>();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ `RefCell<()>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<()>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: required by a bound in `require_sync`\n+  --> $DIR/suggest-ref-cell.rs:3:20\n+   |\n+LL | fn require_sync<T: Sync>() {}\n+   |                    ^^^^ required by this bound in `require_sync`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}