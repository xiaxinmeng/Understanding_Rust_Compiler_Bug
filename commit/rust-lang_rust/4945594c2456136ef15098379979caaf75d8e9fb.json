{"sha": "4945594c2456136ef15098379979caaf75d8e9fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NDU1OTRjMjQ1NjEzNmVmMTUwOTgzNzk5NzljYWFmNzVkOGU5ZmI=", "commit": {"author": {"name": "Yuki OKUSHI", "email": "huyuumi.dev@gmail.com", "date": "2019-04-30T06:25:37Z"}, "committer": {"name": "Yuki OKUSHI", "email": "huyuumi.dev@gmail.com", "date": "2019-04-30T08:00:36Z"}, "message": "Remove functions to simplify", "tree": {"sha": "8986ba8d11280089e4c8908f8db6d795ceff6306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8986ba8d11280089e4c8908f8db6d795ceff6306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4945594c2456136ef15098379979caaf75d8e9fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4945594c2456136ef15098379979caaf75d8e9fb", "html_url": "https://github.com/rust-lang/rust/commit/4945594c2456136ef15098379979caaf75d8e9fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4945594c2456136ef15098379979caaf75d8e9fb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03122e1bac482b150844ef9664b1ad2438b43072", "url": "https://api.github.com/repos/rust-lang/rust/commits/03122e1bac482b150844ef9664b1ad2438b43072", "html_url": "https://github.com/rust-lang/rust/commit/03122e1bac482b150844ef9664b1ad2438b43072"}], "stats": {"total": 24, "additions": 2, "deletions": 22}, "files": [{"sha": "ba2fc05584ae644dffafe261a7c0ff6dbd5a8c50", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4945594c2456136ef15098379979caaf75d8e9fb/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4945594c2456136ef15098379979caaf75d8e9fb/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4945594c2456136ef15098379979caaf75d8e9fb", "patch": "@@ -1486,26 +1486,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.queries.on_disk_cache.serialize(self.global_tcx(), encoder)\n     }\n \n-    /// This checks whether one is allowed to have pattern bindings\n-    /// that bind-by-move on a match arm that has a guard, e.g.:\n-    ///\n-    /// ```rust\n-    /// match foo { A(inner) if { /* something */ } => ..., ... }\n-    /// ```\n-    ///\n-    /// It is separate from check_for_mutation_in_guard_via_ast_walk,\n-    /// because that method has a narrower effect that can be toggled\n-    /// off via a separate `-Z` flag, at least for the short term.\n-    pub fn allow_bind_by_move_patterns_with_guards(self) -> bool {\n-        self.features().bind_by_move_pattern_guards\n-    }\n-\n-    /// If true, we should use a naive AST walk to determine if match\n-    /// guard could perform bad mutations (or mutable-borrows).\n-    pub fn check_for_mutation_in_guard_via_ast_walk(self) -> bool {\n-        !self.allow_bind_by_move_patterns_with_guards()\n-    }\n-\n     /// If true, we should use the AST-based borrowck (we may *also* use\n     /// the MIR-based borrowck).\n     pub fn use_ast_borrowck(self) -> bool {"}, {"sha": "d6a6b111f49a013cd8e52bddfa511bf55e287f8d", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4945594c2456136ef15098379979caaf75d8e9fb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4945594c2456136ef15098379979caaf75d8e9fb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=4945594c2456136ef15098379979caaf75d8e9fb", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             // Second, if there is a guard on each arm, make sure it isn't\n             // assigning or borrowing anything mutably.\n             if let Some(ref guard) = arm.guard {\n-                if self.tcx.check_for_mutation_in_guard_via_ast_walk() {\n+                if !self.tcx.features().bind_by_move_pattern_guards {\n                     check_for_mutation_in_guard(self, &guard);\n                 }\n             }\n@@ -562,7 +562,7 @@ fn check_legality_of_move_bindings(\n                              \"cannot bind by-move with sub-bindings\")\n                 .span_label(p.span, \"binds an already bound by-move value by moving it\")\n                 .emit();\n-        } else if has_guard && !cx.tcx.allow_bind_by_move_patterns_with_guards() {\n+        } else if has_guard && !cx.tcx.features().bind_by_move_pattern_guards {\n             let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n                                            \"cannot bind by-move into a pattern guard\");\n             err.span_label(p.span, \"moves value into pattern guard\");"}]}