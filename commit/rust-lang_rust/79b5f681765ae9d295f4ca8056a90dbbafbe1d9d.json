{"sha": "79b5f681765ae9d295f4ca8056a90dbbafbe1d9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YjVmNjgxNzY1YWU5ZDI5NWY0Y2E4MDU2YTkwZGJiYWZiZTFkOWQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-08-08T21:30:30Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-08-08T21:30:45Z"}, "message": "Implement + for @-vectors.", "tree": {"sha": "cec6040d1d318d759a41b6c50ce185d0b40430fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cec6040d1d318d759a41b6c50ce185d0b40430fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79b5f681765ae9d295f4ca8056a90dbbafbe1d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79b5f681765ae9d295f4ca8056a90dbbafbe1d9d", "html_url": "https://github.com/rust-lang/rust/commit/79b5f681765ae9d295f4ca8056a90dbbafbe1d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79b5f681765ae9d295f4ca8056a90dbbafbe1d9d/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f110e8f21c707cb4bbb5e54b45f4458987920322", "url": "https://api.github.com/repos/rust-lang/rust/commits/f110e8f21c707cb4bbb5e54b45f4458987920322", "html_url": "https://github.com/rust-lang/rust/commit/f110e8f21c707cb4bbb5e54b45f4458987920322"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "90a68df211a4b49d4d4e1dd0c39292f1ee3df7bf", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/79b5f681765ae9d295f4ca8056a90dbbafbe1d9d/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b5f681765ae9d295f4ca8056a90dbbafbe1d9d/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=79b5f681765ae9d295f4ca8056a90dbbafbe1d9d", "patch": "@@ -78,6 +78,16 @@ pure fn build<A>(builder: fn(push: pure fn(+A))) -> @[A] {\n     build_sized(4, builder)\n }\n \n+// Appending\n+#[inline(always)]\n+pure fn append<T: copy>(lhs: @[T], rhs: &[const T]) -> @[T] {\n+    do build_sized(lhs.len() + rhs.len()) |push| {\n+        for vec::each(lhs) |x| { push(x); }\n+        for uint::range(0, rhs.len()) |i| { push(rhs[i]); }\n+    }\n+}\n+\n+\n /// Apply a function to each element of a vector and return the results\n pure fn map<T, U>(v: &[T], f: fn(T) -> U) -> @[U] {\n     do build_sized(v.len()) |push| {\n@@ -113,6 +123,21 @@ pure fn from_elem<T: copy>(n_elts: uint, t: T) -> @[T] {\n     }\n }\n \n+impl extensions<T: copy> of vec_concat<T> for @[T] {\n+    #[inline(always)]\n+    pure fn +(rhs: &[const T]) -> @[T] {\n+        append(self, rhs)\n+    }\n+}\n+\n+#[cfg(notest)]\n+impl extensions<T: copy> of add<&[const T],@[T]> for @[T] {\n+    #[inline(always)]\n+    pure fn add(rhs: &[const T]) -> @[T] {\n+        append(self, rhs)\n+    }\n+}\n+\n \n mod unsafe {\n     type vec_repr = vec::unsafe::vec_repr;\n@@ -213,4 +238,10 @@ fn test() {\n     assert seq_range(10, 15) == @[10, 11, 12, 13, 14];\n     assert from_fn(5, |x| x+1) == @[1, 2, 3, 4, 5];\n     assert from_elem(5, 3.14) == @[3.14, 3.14, 3.14, 3.14, 3.14];\n-}\n\\ No newline at end of file\n+}\n+\n+#[test]\n+fn append_test() {\n+    assert @[1,2,3] + @[4,5,6] == @[1,2,3,4,5,6];\n+}\n+"}, {"sha": "54b78f2a482e71fbc8a47476c1b1407611c46ba3", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79b5f681765ae9d295f4ca8056a90dbbafbe1d9d/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b5f681765ae9d295f4ca8056a90dbbafbe1d9d/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=79b5f681765ae9d295f4ca8056a90dbbafbe1d9d", "patch": "@@ -1211,7 +1211,7 @@ pure fn riteri<T>(v: &[T], f: fn(uint, T)) {\n  * The total number of permutations produced is `len(v)!`.  If `v` contains\n  * repeated elements, then some permutations are repeated.\n  */\n-pure fn permute<T: copy>(v: &[T], put: fn(~[T])) {\n+pure fn permute<T: copy>(v: &[const T], put: fn(~[T])) {\n     let ln = len(v);\n     if ln == 0u {\n         put(~[]);\n@@ -1221,7 +1221,7 @@ pure fn permute<T: copy>(v: &[T], put: fn(~[T])) {\n             let elt = v[i];\n             let mut rest = slice(v, 0u, i);\n             unchecked {\n-                push_all(rest, view(v, i+1u, ln));\n+                push_all(rest, const_view(v, i+1u, ln));\n                 permute(rest, |permutation| {\n                     put(append(~[elt], permutation))\n                 })"}]}