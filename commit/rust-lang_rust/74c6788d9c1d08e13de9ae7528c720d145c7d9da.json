{"sha": "74c6788d9c1d08e13de9ae7528c720d145c7d9da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YzY3ODhkOWMxZDA4ZTEzZGU5YWU3NTI4YzcyMGQxNDVjN2Q5ZGE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-10T10:40:59Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-13T14:42:59Z"}, "message": "rustc: move liberate_late_bound_regions to rustc_typeck.", "tree": {"sha": "9defa731c9740001cae1ebf6bf52f29c9dd7dd4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9defa731c9740001cae1ebf6bf52f29c9dd7dd4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74c6788d9c1d08e13de9ae7528c720d145c7d9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74c6788d9c1d08e13de9ae7528c720d145c7d9da", "html_url": "https://github.com/rust-lang/rust/commit/74c6788d9c1d08e13de9ae7528c720d145c7d9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74c6788d9c1d08e13de9ae7528c720d145c7d9da/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d4c2141b5042bd9469005444987f5fb3f20fa73", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4c2141b5042bd9469005444987f5fb3f20fa73", "html_url": "https://github.com/rust-lang/rust/commit/6d4c2141b5042bd9469005444987f5fb3f20fa73"}], "stats": {"total": 98, "additions": 24, "deletions": 74}, "files": [{"sha": "ecd350d12736897799a3a78d6cfbbf01274db79a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=74c6788d9c1d08e13de9ae7528c720d145c7d9da", "patch": "@@ -96,9 +96,6 @@\n //!\n //! - `fallthrough_ln`: a live node that represents a fallthrough\n //!\n-//! - `no_ret_var`: a synthetic variable that is only 'read' from, the\n-//!   fallthrough node.  This allows us to detect functions where we fail\n-//!   to return explicitly.\n //! - `clean_exit_var`: a synthetic variable that is only 'read' from the\n //!   fallthrough node.  It is only live if the function could converge\n //!   via means other than an explicit `return` expression. That is, it is\n@@ -111,8 +108,6 @@ use self::VarKind::*;\n \n use hir::def::*;\n use ty::{self, TyCtxt};\n-use traits::{self, Reveal};\n-use ty::subst::Subst;\n use lint;\n use util::nodemap::NodeMap;\n \n@@ -256,7 +251,6 @@ struct LocalInfo {\n enum VarKind {\n     Arg(NodeId, ast::Name),\n     Local(LocalInfo),\n-    ImplicitRet,\n     CleanExit\n }\n \n@@ -313,7 +307,7 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n             Local(LocalInfo { id: node_id, .. }) | Arg(node_id, _) => {\n                 self.variable_map.insert(node_id, v);\n             },\n-            ImplicitRet | CleanExit => {}\n+            CleanExit => {}\n         }\n \n         debug!(\"{:?} is {:?}\", v, vk);\n@@ -335,7 +329,6 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n             Local(LocalInfo { name, .. }) | Arg(_, name) => {\n                 name.to_string()\n             },\n-            ImplicitRet => \"<implicit-ret>\".to_string(),\n             CleanExit => \"<clean-exit>\".to_string()\n         }\n     }\n@@ -382,7 +375,6 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,\n \n     // check for various error conditions\n     lsets.visit_body(body);\n-    lsets.check_ret(id, sp, entry_ln);\n     lsets.warn_about_unused_args(body, entry_ln);\n }\n \n@@ -500,7 +492,6 @@ fn invalid_users() -> Users {\n struct Specials {\n     exit_ln: LiveNode,\n     fallthrough_ln: LiveNode,\n-    no_ret_var: Variable,\n     clean_exit_var: Variable\n }\n \n@@ -534,7 +525,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         let specials = Specials {\n             exit_ln: ir.add_live_node(ExitNode),\n             fallthrough_ln: ir.add_live_node(ExitNode),\n-            no_ret_var: ir.add_variable(ImplicitRet),\n             clean_exit_var: ir.add_variable(CleanExit)\n         };\n \n@@ -1420,43 +1410,6 @@ fn check_expr<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, expr: &'tcx Expr) {\n }\n \n impl<'a, 'tcx> Liveness<'a, 'tcx> {\n-    fn check_ret(&self,\n-                 id: NodeId,\n-                 sp: Span,\n-                 entry_ln: LiveNode)\n-    {\n-        let def_id = self.ir.tcx.hir.local_def_id(id);\n-        let fn_ty = self.ir.tcx.type_of(def_id);\n-        let fn_sig = match fn_ty.sty {\n-            ty::TyClosure(closure_def_id, substs) => {\n-                self.ir.tcx.closure_type(closure_def_id)\n-                    .subst(self.ir.tcx, substs.substs)\n-            }\n-            _ => fn_ty.fn_sig()\n-        };\n-\n-        let fn_ret = fn_sig.output();\n-\n-        // within the fn body, late-bound regions are liberated\n-        // and must outlive the *call-site* of the function.\n-        let fn_ret =\n-            self.ir.tcx.liberate_late_bound_regions(def_id, &fn_ret);\n-\n-        if !fn_ret.is_never() && self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() {\n-            let param_env = self.ir.tcx.parameter_environment(def_id);\n-            let t_ret_subst = fn_ret.subst(self.ir.tcx, &param_env.free_substs);\n-            let is_nil = self.ir.tcx.infer_ctxt(param_env, Reveal::All).enter(|infcx| {\n-                let cause = traits::ObligationCause::dummy();\n-                traits::fully_normalize(&infcx, cause, &t_ret_subst).unwrap().is_nil()\n-            });\n-\n-            // for nil return types, it is ok to not return a value expl.\n-            if !is_nil {\n-                span_bug!(sp, \"not all control paths return a value\");\n-            }\n-        }\n-    }\n-\n     fn check_lvalue(&mut self, expr: &'tcx Expr) {\n         match expr.node {\n             hir::ExprPath(hir::QPath::Resolved(_, ref path)) => {"}, {"sha": "6820b9af940bd814f63713f1e1f2734248cd9854", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=74c6788d9c1d08e13de9ae7528c720d145c7d9da", "patch": "@@ -39,7 +39,6 @@\n //! These methods return true to indicate that the visitor has found what it is looking for\n //! and does not need to visit anything else.\n \n-use hir::def_id::DefId;\n use ty::subst::Substs;\n use ty::adjustment;\n use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n@@ -326,23 +325,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         (result, replacer.map)\n     }\n \n-\n-    /// Replace any late-bound regions bound in `value` with free variants attached to scope-id\n-    /// `scope_id`.\n-    pub fn liberate_late_bound_regions<T>(self,\n-        all_outlive_scope: DefId,\n-        value: &Binder<T>)\n-        -> T\n-        where T : TypeFoldable<'tcx>\n-    {\n-        self.replace_late_bound_regions(value, |br| {\n-            self.mk_region(ty::ReFree(ty::FreeRegion {\n-                scope: all_outlive_scope,\n-                bound_region: br\n-            }))\n-        }).0\n-    }\n-\n     /// Flattens two binding levels into one. So `for<'a> for<'b> Foo`\n     /// becomes `for<'a,'b> Foo`.\n     pub fn flatten_late_bound_regions<T>(self, bound2_value: &Binder<Binder<T>>)"}, {"sha": "99ee4e41d1de384a5f6cc7ddc0c9128dd6128ff9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=74c6788d9c1d08e13de9ae7528c720d145c7d9da", "patch": "@@ -2417,7 +2417,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let tcx = self.global_tcx();\n         let generic_predicates = tcx.predicates_of(def_id);\n         let bounds = generic_predicates.instantiate(tcx, free_substs);\n-        let bounds = tcx.liberate_late_bound_regions(def_id, &ty::Binder(bounds));\n         let predicates = bounds.predicates;\n \n         // Finally, we have to normalize the bounds in the environment, in"}, {"sha": "9eca2b96d62ab1dc124f4a63ee995f8ce544dc67", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=74c6788d9c1d08e13de9ae7528c720d145c7d9da", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\"check_closure: expr.id={:?} closure_type={:?}\", expr.id, closure_type);\n \n-        let fn_sig = self.tcx.liberate_late_bound_regions(expr_def_id, &sig);\n+        let fn_sig = self.liberate_late_bound_regions(expr_def_id, &sig);\n         let fn_sig = self.inh.normalize_associated_types_in(body.value.span,\n                                                             body.value.id, &fn_sig);\n "}, {"sha": "7404222a4bd4ca70d10e58b45a2ef8a6f43dde3c", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=74c6788d9c1d08e13de9ae7528c720d145c7d9da", "patch": "@@ -282,7 +282,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let impl_fty = tcx.mk_fn_ptr(ty::Binder(impl_sig));\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n-        let trait_sig = tcx.liberate_late_bound_regions(\n+        let trait_sig = inh.liberate_late_bound_regions(\n             impl_m.def_id,\n             &m_sig(trait_m));\n         let trait_sig ="}, {"sha": "201fc6ce7f2c793023ded93f84291036b8f31c3c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=74c6788d9c1d08e13de9ae7528c720d145c7d9da", "patch": "@@ -628,6 +628,22 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n             obligations);\n         InferOk { value, obligations }\n     }\n+\n+    /// Replace any late-bound regions bound in `value` with\n+    /// free variants attached to `all_outlive_scope`.\n+    fn liberate_late_bound_regions<T>(&self,\n+        all_outlive_scope: DefId,\n+        value: &ty::Binder<T>)\n+        -> T\n+        where T: TypeFoldable<'tcx>\n+    {\n+        self.tcx.replace_late_bound_regions(value, |br| {\n+            self.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n+                scope: all_outlive_scope,\n+                bound_region: br\n+            }))\n+        }).0\n+    }\n }\n \n struct CheckItemTypesVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n@@ -804,7 +820,7 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let fn_sig =\n                 fn_sig.subst(inh.tcx, &inh.parameter_environment.free_substs);\n             let fn_sig =\n-                inh.tcx.liberate_late_bound_regions(def_id, &fn_sig);\n+                inh.liberate_late_bound_regions(def_id, &fn_sig);\n             let fn_sig =\n                 inh.normalize_associated_types_in(body.value.span, body_id.node_id, &fn_sig);\n "}, {"sha": "af7830a63a7378c6c2af315fd5ed1a499e3e21b5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c6788d9c1d08e13de9ae7528c720d145c7d9da/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=74c6788d9c1d08e13de9ae7528c720d145c7d9da", "patch": "@@ -427,7 +427,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     {\n         let free_substs = &fcx.parameter_environment.free_substs;\n         let sig = fcx.instantiate_type_scheme(span, free_substs, &sig);\n-        let sig = fcx.tcx.liberate_late_bound_regions(def_id, &sig);\n+        let sig = fcx.liberate_late_bound_regions(def_id, &sig);\n \n         for input_ty in sig.inputs() {\n             fcx.register_wf_obligation(&input_ty, span, self.code.clone());\n@@ -462,7 +462,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         let free_substs = &fcx.parameter_environment.free_substs;\n         let method_ty = fcx.tcx.type_of(method.def_id);\n         let fty = fcx.instantiate_type_scheme(span, free_substs, &method_ty);\n-        let sig = fcx.tcx.liberate_late_bound_regions(method.def_id, &fty.fn_sig());\n+        let sig = fcx.liberate_late_bound_regions(method.def_id, &fty.fn_sig());\n \n         debug!(\"check_method_receiver: sig={:?}\", sig);\n \n@@ -478,8 +478,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             ExplicitSelf::ByBox => fcx.tcx.mk_box(self_ty)\n         };\n         let rcvr_ty = fcx.instantiate_type_scheme(span, free_substs, &rcvr_ty);\n-        let rcvr_ty = fcx.tcx.liberate_late_bound_regions(method.def_id,\n-                                                          &ty::Binder(rcvr_ty));\n+        let rcvr_ty = fcx.liberate_late_bound_regions(method.def_id,\n+                                                      &ty::Binder(rcvr_ty));\n \n         debug!(\"check_method_receiver: receiver ty = {:?}\", rcvr_ty);\n "}]}