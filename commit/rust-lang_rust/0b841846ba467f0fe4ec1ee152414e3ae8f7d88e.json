{"sha": "0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiODQxODQ2YmE0NjdmMGZlNGVjMWVlMTUyNDE0ZTNhZThmN2Q4OGU=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-27T17:33:56Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-01T16:59:12Z"}, "message": "Allow references to interior mutable data behind a feature gate", "tree": {"sha": "7d3c9e8b2c1b62c858b5759630ed3765467dc707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d3c9e8b2c1b62c858b5759630ed3765467dc707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "html_url": "https://github.com/rust-lang/rust/commit/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a609fb45efad59dfd459c76e50899be9f0583b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a609fb45efad59dfd459c76e50899be9f0583b5a", "html_url": "https://github.com/rust-lang/rust/commit/a609fb45efad59dfd459c76e50899be9f0583b5a"}], "stats": {"total": 212, "additions": 171, "deletions": 41}, "files": [{"sha": "30235b0aeb0b3601cb70d98469a72a55237bdcb0", "filename": "compiler/rustc_error_codes/src/error_codes/E0492.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -3,10 +3,11 @@ A borrow of a constant containing interior mutability was attempted.\n Erroneous code example:\n \n ```compile_fail,E0492\n+#![feature(const_refs_to_cell)]\n use std::sync::atomic::AtomicUsize;\n \n const A: AtomicUsize = AtomicUsize::new(0);\n-static B: &'static AtomicUsize = &A;\n+const B: &'static AtomicUsize = &A;\n // error: cannot borrow a constant which may contain interior mutability,\n //        create a static instead\n ```\n@@ -18,7 +19,7 @@ can't be changed via a shared `&` pointer, but interior mutability would allow\n it. That is, a constant value could be mutated. On the other hand, a `static` is\n explicitly a single memory location, which can be mutated at will.\n \n-So, in order to solve this error, either use statics which are `Sync`:\n+So, in order to solve this error, use statics which are `Sync`:\n \n ```\n use std::sync::atomic::AtomicUsize;\n@@ -30,6 +31,7 @@ static B: &'static AtomicUsize = &A; // ok!\n You can also have this error while using a cell type:\n \n ```compile_fail,E0492\n+#![feature(const_refs_to_cell)]\n use std::cell::Cell;\n \n const A: Cell<usize> = Cell::new(1);"}, {"sha": "3b54ffbc3f08d653e40c68cafd5d9581281e5b95", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -626,6 +626,9 @@ declare_features! (\n     /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n     (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n \n+    /// Allows references to types with interior mutability within constants\n+    (active, const_refs_to_cell, \"1.51.0\", Some(80384), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "1ee6615f6f000dc97933548448b5da07de3d7add", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -208,9 +208,29 @@ impl NonConstOp for LiveDrop {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct CellBorrowBehindRef;\n+impl NonConstOp for CellBorrowBehindRef {\n+    fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n+        Status::Unstable(sym::const_refs_to_cell)\n+    }\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        feature_err(\n+            &ccx.tcx.sess.parse_sess,\n+            sym::const_refs_to_cell,\n+            span,\n+            \"cannot borrow here, since the borrowed element may contain interior mutability\",\n+        )\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct CellBorrow;\n impl NonConstOp for CellBorrow {\n+    fn importance(&self) -> DiagnosticImportance {\n+        // The problematic cases will already emit a `CellBorrowBehindRef`\n+        DiagnosticImportance::Secondary\n+    }\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         struct_span_err!(\n             ccx.tcx.sess,"}, {"sha": "8830575f189ced5c920c7f92c5f0d1c023b3762b", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -3,6 +3,7 @@\n use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir, HirId, LangItem};\n+use rustc_index::bit_set::BitSet;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ImplSource, Obligation, ObligationCause};\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n@@ -188,6 +189,9 @@ pub struct Validator<'mir, 'tcx> {\n     /// The span of the current statement.\n     span: Span,\n \n+    /// A set that stores for each local whether it has a `StorageDead` for it somewhere.\n+    local_has_storage_dead: Option<BitSet<Local>>,\n+\n     error_emitted: Option<ErrorReported>,\n     secondary_errors: Vec<Diagnostic>,\n }\n@@ -206,6 +210,7 @@ impl Validator<'mir, 'tcx> {\n             span: ccx.body.span,\n             ccx,\n             qualifs: Default::default(),\n+            local_has_storage_dead: None,\n             error_emitted: None,\n             secondary_errors: Vec::new(),\n         }\n@@ -282,6 +287,27 @@ impl Validator<'mir, 'tcx> {\n         }\n     }\n \n+    fn local_has_storage_dead(&mut self, local: Local) -> bool {\n+        let ccx = self.ccx;\n+        self.local_has_storage_dead\n+            .get_or_insert_with(|| {\n+                struct StorageDeads {\n+                    locals: BitSet<Local>,\n+                }\n+                impl Visitor<'tcx> for StorageDeads {\n+                    fn visit_statement(&mut self, stmt: &Statement<'tcx>, _: Location) {\n+                        if let StatementKind::StorageDead(l) = stmt.kind {\n+                            self.locals.insert(l);\n+                        }\n+                    }\n+                }\n+                let mut v = StorageDeads { locals: BitSet::new_empty(ccx.body.local_decls.len()) };\n+                v.visit_body(ccx.body);\n+                v.locals\n+            })\n+            .contains(local)\n+    }\n+\n     pub fn qualifs_in_return_place(&mut self) -> ConstQualifs {\n         self.qualifs.in_return_place(self.ccx, self.error_emitted)\n     }\n@@ -556,7 +582,13 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 );\n \n                 if borrowed_place_has_mut_interior {\n-                    self.check_op(ops::CellBorrow);\n+                    // Locals without StorageDead follow the \"trailing expression\" rule, meaning\n+                    // they are essentially anonymous static items themselves.\n+                    if self.local_has_storage_dead(place.local) {\n+                        self.check_op(ops::CellBorrowBehindRef);\n+                    } else {\n+                        self.check_op(ops::CellBorrow);\n+                    }\n                 }\n             }\n "}, {"sha": "b6cf584d875f1aaaa76d3cdc9bf473298ef6859b", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -381,6 +381,7 @@ symbols! {\n         const_ptr,\n         const_raw_ptr_deref,\n         const_raw_ptr_to_usize_cast,\n+        const_refs_to_cell,\n         const_slice_ptr,\n         const_trait_bound_opt_out,\n         const_trait_impl,"}, {"sha": "93120753b1a08851b1af24ab0a5ae6db3e0b6663", "filename": "src/test/ui/consts/const-address-of-interior-mut.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-interior-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-interior-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-interior-mut.stderr?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,27 +1,39 @@\n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n   --> $DIR/const-address-of-interior-mut.rs:5:39\n    |\n LL | const A: () = { let x = Cell::new(2); &raw const x; };\n    |                                       ^^^^^^^^^^^^\n+   |\n+   = note: see issue #80384 <https://github.com/rust-lang/rust/issues/80384> for more information\n+   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n \n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n   --> $DIR/const-address-of-interior-mut.rs:7:40\n    |\n LL | static B: () = { let x = Cell::new(2); &raw const x; };\n    |                                        ^^^^^^^^^^^^\n+   |\n+   = note: see issue #80384 <https://github.com/rust-lang/rust/issues/80384> for more information\n+   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n \n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n   --> $DIR/const-address-of-interior-mut.rs:9:44\n    |\n LL | static mut C: () = { let x = Cell::new(2); &raw const x; };\n    |                                            ^^^^^^^^^^^^\n+   |\n+   = note: see issue #80384 <https://github.com/rust-lang/rust/issues/80384> for more information\n+   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n \n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n   --> $DIR/const-address-of-interior-mut.rs:13:13\n    |\n LL |     let y = &raw const x;\n    |             ^^^^^^^^^^^^\n+   |\n+   = note: see issue #80384 <https://github.com/rust-lang/rust/issues/80384> for more information\n+   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0492`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7e0f1a812fd9c09a84cce492389115e38265ad37", "filename": "src/test/ui/consts/const-multi-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -13,7 +13,7 @@ const _: i32 = {\n \n const _: std::cell::Cell<i32> = {\n     let mut a = std::cell::Cell::new(5);\n-    let p = &a; //~ ERROR cannot borrow a constant which may contain interior mutability\n+    let p = &a; //~ ERROR borrowed element may contain interior mutability\n \n     let reborrow = {p};\n     let pp = &reborrow;"}, {"sha": "c0a320d46cbf9aface1b47f2f210995c73093bf8", "filename": "src/test/ui/consts/const-multi-ref.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -4,13 +4,16 @@ error[E0764]: mutable references are not allowed in constants\n LL |     let p = &mut a;\n    |             ^^^^^^ `&mut` is only allowed in `const fn`\n \n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n   --> $DIR/const-multi-ref.rs:16:13\n    |\n LL |     let p = &a;\n    |             ^^\n+   |\n+   = note: see issue #80384 <https://github.com/rust-lang/rust/issues/80384> for more information\n+   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0492, E0764.\n-For more information about an error, try `rustc --explain E0492`.\n+Some errors have detailed explanations: E0658, E0764.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "e069a023aa1acbdd3a4a2d0f50189efc4ca0537a", "filename": "src/test/ui/consts/partial_qualif.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,3 +1,5 @@\n+#![feature(const_refs_to_cell)]\n+\n use std::cell::Cell;\n \n const FOO: &(Cell<usize>, bool) = {"}, {"sha": "58acde1b58a588acb8e295ff186ae714f50676de", "filename": "src/test/ui/consts/partial_qualif.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/partial_qualif.rs:6:5\n+  --> $DIR/partial_qualif.rs:8:5\n    |\n LL |     &{a}\n    |     ^^^^"}, {"sha": "9c20d94c6dd2b44b131a28a408d6e876367973ba", "filename": "src/test/ui/consts/qualif_overwrite.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,3 +1,5 @@\n+#![feature(const_refs_to_cell)]\n+\n use std::cell::Cell;\n \n // this is overly conservative. The reset to `None` should clear `a` of all qualifications\n@@ -7,7 +9,7 @@ use std::cell::Cell;\n const FOO: &Option<Cell<usize>> = {\n     let mut a = Some(Cell::new(0));\n     a = None; // sets `qualif(a)` to `qualif(a) | qualif(None)`\n-    &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n+    &{a}//~ ERROR cannot borrow a constant which may contain interior mutability\n };\n \n fn main() {}"}, {"sha": "a6c8c599ecc93fb1bb00bc2f0e5a07c53d29bbba", "filename": "src/test/ui/consts/qualif_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite.rs:10:5\n+  --> $DIR/qualif_overwrite.rs:12:5\n    |\n LL |     &{a}\n    |     ^^^^"}, {"sha": "5d0843710e246781c2f20487caa7fe925af30762", "filename": "src/test/ui/consts/qualif_overwrite_2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,3 +1,5 @@\n+#![feature(const_refs_to_cell)]\n+\n use std::cell::Cell;\n \n // const qualification is not smart enough to know about fields and always assumes that there might"}, {"sha": "f109b4cea8190aabb04fb5808053989cc5107828", "filename": "src/test/ui/consts/qualif_overwrite_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite_2.rs:8:5\n+  --> $DIR/qualif_overwrite_2.rs:10:5\n    |\n LL |     &{a.0}\n    |     ^^^^^^"}, {"sha": "ee4df6f43fad39839ee8880d0991c825218fe7e8", "filename": "src/test/ui/consts/std/cell.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,18 +1,26 @@\n+#![feature(const_refs_to_cell)]\n+\n use std::cell::*;\n \n // not ok, because this would create a silent constant with interior mutability.\n // the rules could be relaxed in the future\n static FOO: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n-//~^ ERROR cannot borrow a constant which may contain interior mutability\n+//~^ ERROR encountered dangling pointer\n+const FOO_CONST: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n+//~^ ERROR encountered dangling pointer\n \n static FOO3: Wrap<Cell<u32>> = Wrap(Cell::new(42));\n+const FOO3_CONST: Wrap<Cell<u32>> = Wrap(Cell::new(42));\n+\n // ok\n static FOO4: Wrap<*mut u32> = Wrap(FOO3.0.as_ptr());\n+const FOO4_CONST: Wrap<*mut u32> = Wrap(FOO3_CONST.0.as_ptr());\n+//~^ ERROR encountered dangling pointer\n \n // not ok, because the `as_ptr` call takes a reference to a type with interior mutability\n // which is not allowed in constants\n const FOO2: *mut u32 = Cell::new(42).as_ptr();\n-//~^ ERROR cannot borrow a constant which may contain interior mutability\n+//~^ ERROR encountered dangling pointer\n \n struct IMSafeTrustMe(UnsafeCell<u32>);\n unsafe impl Send for IMSafeTrustMe {}\n@@ -21,6 +29,7 @@ unsafe impl Sync for IMSafeTrustMe {}\n static BAR: IMSafeTrustMe = IMSafeTrustMe(UnsafeCell::new(5));\n \n \n+\n struct Wrap<T>(T);\n unsafe impl<T> Send for Wrap<T> {}\n unsafe impl<T> Sync for Wrap<T> {}"}, {"sha": "75cae00611aafc4eee819ba0b00f29569304ba3e", "filename": "src/test/ui/consts/std/cell.stderr", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,15 +1,26 @@\n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/cell.rs:5:35\n+error: encountered dangling pointer in final constant\n+  --> $DIR/cell.rs:7:1\n    |\n LL | static FOO: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n-   |                                   ^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/cell.rs:14:24\n+error: encountered dangling pointer in final constant\n+  --> $DIR/cell.rs:9:1\n+   |\n+LL | const FOO_CONST: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: encountered dangling pointer in final constant\n+  --> $DIR/cell.rs:17:1\n+   |\n+LL | const FOO4_CONST: Wrap<*mut u32> = Wrap(FOO3_CONST.0.as_ptr());\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: encountered dangling pointer in final constant\n+  --> $DIR/cell.rs:22:1\n    |\n LL | const FOO2: *mut u32 = Cell::new(42).as_ptr();\n-   |                        ^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0492`."}, {"sha": "d8357f0c6785c2b50e04a52b3d09869e74c3fd75", "filename": "src/test/ui/error-codes/E0492.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,7 +1,12 @@\n+#![feature(const_refs_to_cell)]\n+\n use std::sync::atomic::AtomicUsize;\n \n const A: AtomicUsize = AtomicUsize::new(0);\n-static B: &'static AtomicUsize = &A; //~ ERROR E0492\n+const B: &'static AtomicUsize = &A; //~ ERROR E0492\n+static C: &'static AtomicUsize = &A; //~ ERROR E0492\n+\n+const NONE: &'static Option<AtomicUsize> = &None;\n \n fn main() {\n }"}, {"sha": "ffc4ff372a344846f2ff1f1de3801089914c1743", "filename": "src/test/ui/error-codes/E0492.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,9 +1,15 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/E0492.rs:4:34\n+  --> $DIR/E0492.rs:6:33\n    |\n-LL | static B: &'static AtomicUsize = &A;\n+LL | const B: &'static AtomicUsize = &A;\n+   |                                 ^^\n+\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/E0492.rs:7:34\n+   |\n+LL | static C: &'static AtomicUsize = &A;\n    |                                  ^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0492`."}, {"sha": "63159ed05532fb77cf64493ebe2c9dff300d5131", "filename": "src/test/ui/feature-gate/feature-gate-const_refs_to_cell.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_refs_to_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_refs_to_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_refs_to_cell.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(const_refs_to_cell)]\n+\n+const FOO: () = {\n+    let x = std::cell::Cell::new(42);\n+    let y = &x;\n+};\n+\n+fn main() {\n+    FOO;\n+}"}, {"sha": "7bde2361f612643868f1bb6d8790be99dafb7c46", "filename": "src/test/ui/issues/issue-17718-const-borrow.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,14 +1,16 @@\n+#![feature(const_refs_to_cell)]\n+\n use std::cell::UnsafeCell;\n \n const A: UnsafeCell<usize> = UnsafeCell::new(1);\n const B: &'static UnsafeCell<usize> = &A;\n-//~^ ERROR: cannot borrow a constant which may contain interior mutability\n+//~^ ERROR: may contain interior mutability\n \n struct C { a: UnsafeCell<usize> }\n const D: C = C { a: UnsafeCell::new(1) };\n const E: &'static UnsafeCell<usize> = &D.a;\n-//~^ ERROR: cannot borrow a constant which may contain interior mutability\n+//~^ ERROR: may contain interior mutability\n const F: &'static C = &D;\n-//~^ ERROR: cannot borrow a constant which may contain interior mutability\n+//~^ ERROR: may contain interior mutability\n \n fn main() {}"}, {"sha": "1bfb3982bc3fe73600a67568535fd63cd8cbfee1", "filename": "src/test/ui/issues/issue-17718-const-borrow.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,17 +1,17 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/issue-17718-const-borrow.rs:4:39\n+  --> $DIR/issue-17718-const-borrow.rs:6:39\n    |\n LL | const B: &'static UnsafeCell<usize> = &A;\n    |                                       ^^\n \n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/issue-17718-const-borrow.rs:9:39\n+  --> $DIR/issue-17718-const-borrow.rs:11:39\n    |\n LL | const E: &'static UnsafeCell<usize> = &D.a;\n    |                                       ^^^^\n \n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/issue-17718-const-borrow.rs:11:23\n+  --> $DIR/issue-17718-const-borrow.rs:13:23\n    |\n LL | const F: &'static C = &D;\n    |                       ^^"}, {"sha": "c069ae7da021232d8ab79ec6e543440857152d89", "filename": "src/test/ui/unsafe/ranged_ints3_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -9,13 +9,13 @@ fn main() {}\n \n const fn foo() -> NonZero<Cell<u32>> {\n     let mut x = unsafe { NonZero(Cell::new(1)) };\n-    let y = &x.0; //~ ERROR cannot borrow a constant which may contain interior mutability\n+    let y = &x.0; //~ ERROR the borrowed element may contain interior mutability\n     //~^ ERROR borrow of layout constrained field with interior mutability\n     unsafe { NonZero(Cell::new(1)) }\n }\n \n const fn bar() -> NonZero<Cell<u32>> {\n     let mut x = unsafe { NonZero(Cell::new(1)) };\n-    let y = unsafe { &x.0 }; //~ ERROR cannot borrow a constant which may contain interior mut\n+    let y = unsafe { &x.0 }; //~ ERROR the borrowed element may contain interior mutability\n     unsafe { NonZero(Cell::new(1)) }\n }"}, {"sha": "215005571f6d740036e13e1d132691d79d4931db", "filename": "src/test/ui/unsafe/ranged_ints3_const.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b841846ba467f0fe4ec1ee152414e3ae8f7d88e/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.stderr?ref=0b841846ba467f0fe4ec1ee152414e3ae8f7d88e", "patch": "@@ -1,14 +1,20 @@\n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n   --> $DIR/ranged_ints3_const.rs:12:13\n    |\n LL |     let y = &x.0;\n    |             ^^^^\n+   |\n+   = note: see issue #80384 <https://github.com/rust-lang/rust/issues/80384> for more information\n+   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n \n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n   --> $DIR/ranged_ints3_const.rs:19:22\n    |\n LL |     let y = unsafe { &x.0 };\n    |                      ^^^^\n+   |\n+   = note: see issue #80384 <https://github.com/rust-lang/rust/issues/80384> for more information\n+   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n \n error[E0133]: borrow of layout constrained field with interior mutability is unsafe and requires unsafe function or block\n   --> $DIR/ranged_ints3_const.rs:12:13\n@@ -20,5 +26,5 @@ LL |     let y = &x.0;\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0133, E0492.\n+Some errors have detailed explanations: E0133, E0658.\n For more information about an error, try `rustc --explain E0133`."}]}