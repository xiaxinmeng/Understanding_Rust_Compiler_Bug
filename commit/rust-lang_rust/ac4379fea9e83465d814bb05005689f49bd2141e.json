{"sha": "ac4379fea9e83465d814bb05005689f49bd2141e", "node_id": "C_kwDOAAsO6NoAKGFjNDM3OWZlYTllODM0NjVkODE0YmIwNTAwNTY4OWY0OWJkMjE0MWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-06T08:31:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-06T08:31:28Z"}, "message": "Auto merge of #108787 - cjgillot:sroa-lifetime, r=compiler-errors\n\nErase regions even when failing to normalize type in MIR opts\n\nThe first commit just moves the tests around.\n\nFixes https://github.com/rust-lang/rust/issues/108720\n\ncc `@saethlin`", "tree": {"sha": "202064ac3cbfeee67f8a71bbd251d3ab500f5d94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/202064ac3cbfeee67f8a71bbd251d3ab500f5d94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac4379fea9e83465d814bb05005689f49bd2141e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4379fea9e83465d814bb05005689f49bd2141e", "html_url": "https://github.com/rust-lang/rust/commit/ac4379fea9e83465d814bb05005689f49bd2141e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac4379fea9e83465d814bb05005689f49bd2141e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c0f83d773370150a6ea1b40b36b55566e40a73c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0f83d773370150a6ea1b40b36b55566e40a73c", "html_url": "https://github.com/rust-lang/rust/commit/8c0f83d773370150a6ea1b40b36b55566e40a73c"}, {"sha": "708536bb470721e582c85e800f8ccca568cdfc7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/708536bb470721e582c85e800f8ccca568cdfc7c", "html_url": "https://github.com/rust-lang/rust/commit/708536bb470721e582c85e800f8ccca568cdfc7c"}], "stats": {"total": 1206, "additions": 730, "deletions": 476}, "files": [{"sha": "34c60b5ff3c2160c42b83f5e4ecc8f4f4c91c120", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -690,7 +690,7 @@ impl Map {\n         }\n \n         // Recurse with all fields of this place.\n-        iter_fields(ty, tcx, |variant, field, ty| {\n+        iter_fields(ty, tcx, ty::ParamEnv::reveal_all(), |variant, field, ty| {\n             if let Some(variant) = variant {\n                 projection.push(PlaceElem::Downcast(None, variant));\n                 let _ = self.make_place(local, projection);\n@@ -939,6 +939,7 @@ impl<V, T> TryFrom<ProjectionElem<V, T>> for TrackElem {\n pub fn iter_fields<'tcx>(\n     ty: Ty<'tcx>,\n     tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     mut f: impl FnMut(Option<VariantIdx>, Field, Ty<'tcx>),\n ) {\n     match ty.kind() {\n@@ -956,14 +957,14 @@ pub fn iter_fields<'tcx>(\n                 for (f_index, f_def) in v_def.fields.iter().enumerate() {\n                     let field_ty = f_def.ty(tcx, substs);\n                     let field_ty = tcx\n-                        .try_normalize_erasing_regions(ty::ParamEnv::reveal_all(), field_ty)\n-                        .unwrap_or(field_ty);\n+                        .try_normalize_erasing_regions(param_env, field_ty)\n+                        .unwrap_or_else(|_| tcx.erase_regions(field_ty));\n                     f(variant, f_index.into(), field_ty);\n                 }\n             }\n         }\n         ty::Closure(_, substs) => {\n-            iter_fields(substs.as_closure().tupled_upvars_ty(), tcx, f);\n+            iter_fields(substs.as_closure().tupled_upvars_ty(), tcx, param_env, f);\n         }\n         _ => (),\n     }"}, {"sha": "ca2221520c82562bc8b6462e572d8f0bb9911f5c", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -4,7 +4,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_mir_dataflow::value_analysis::{excluded_locals, iter_fields};\n \n pub struct ScalarReplacementOfAggregates;\n@@ -18,11 +18,12 @@ impl<'tcx> MirPass<'tcx> for ScalarReplacementOfAggregates {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(def_id = ?body.source.def_id());\n         let mut excluded = excluded_locals(body);\n+        let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n         loop {\n             debug!(?excluded);\n             let escaping = escaping_locals(&excluded, body);\n             debug!(?escaping);\n-            let replacements = compute_flattening(tcx, body, escaping);\n+            let replacements = compute_flattening(tcx, param_env, body, escaping);\n             debug!(?replacements);\n             let all_dead_locals = replace_flattened_locals(tcx, body, replacements);\n             if !all_dead_locals.is_empty() {\n@@ -144,6 +145,7 @@ impl<'tcx> ReplacementMap<'tcx> {\n /// The replacement will be done later in `ReplacementVisitor`.\n fn compute_flattening<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n     escaping: BitSet<Local>,\n ) -> ReplacementMap<'tcx> {\n@@ -155,7 +157,7 @@ fn compute_flattening<'tcx>(\n         }\n         let decl = body.local_decls[local].clone();\n         let ty = decl.ty;\n-        iter_fields(ty, tcx, |variant, field, field_ty| {\n+        iter_fields(ty, tcx, param_env, |variant, field, field_ty| {\n             if variant.is_some() {\n                 // Downcasts are currently not supported.\n                 return;"}, {"sha": "9e33215f2b5a67ce19cd202b22747543966dafe8", "filename": "tests/mir-opt/sroa.constant.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.constant.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.constant.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.constant.ScalarReplacementOfAggregates.diff?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1,46 +0,0 @@\n-- // MIR for `constant` before ScalarReplacementOfAggregates\n-+ // MIR for `constant` after ScalarReplacementOfAggregates\n-  \n-  fn constant() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:15: +0:15\n-      let _1: (usize, u8);                 // in scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-+     let _4: usize;                       // in scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-+     let _5: u8;                          // in scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-      scope 1 {\n--         debug y => _1;                   // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n-+         debug y => (usize, u8){ .0 => _4, .1 => _5, }; // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n-          let _2: usize;                   // in scope 1 at $DIR/sroa.rs:+3:9: +3:10\n-          scope 2 {\n-              debug t => _2;               // in scope 2 at $DIR/sroa.rs:+3:9: +3:10\n-              let _3: u8;                  // in scope 2 at $DIR/sroa.rs:+4:9: +4:10\n-              scope 3 {\n-                  debug u => _3;           // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-+         StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-+         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-          _1 = const _;                    // scope 0 at $DIR/sroa.rs:+2:13: +2:14\n-+         _4 = move (_1.0: usize);         // scope 1 at $DIR/sroa.rs:+3:9: +3:10\n-+         _5 = move (_1.1: u8);            // scope 1 at $DIR/sroa.rs:+3:9: +3:10\n-          StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+3:9: +3:10\n--         _2 = (_1.0: usize);              // scope 1 at $DIR/sroa.rs:+3:13: +3:16\n-+         _2 = _4;                         // scope 1 at $DIR/sroa.rs:+3:13: +3:16\n-          StorageLive(_3);                 // scope 2 at $DIR/sroa.rs:+4:9: +4:10\n--         _3 = (_1.1: u8);                 // scope 2 at $DIR/sroa.rs:+4:13: +4:16\n-+         _3 = _5;                         // scope 2 at $DIR/sroa.rs:+4:13: +4:16\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:15: +5:2\n-          StorageDead(_3);                 // scope 2 at $DIR/sroa.rs:+5:1: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/sroa.rs:+5:1: +5:2\n--         StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+5:1: +5:2\n-+         StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+5:1: +5:2\n-+         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+5:1: +5:2\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "976f6d44b7521610e382b76586dfb740cb5ca0fa", "filename": "tests/mir-opt/sroa.copies.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1,91 +0,0 @@\n-- // MIR for `copies` before ScalarReplacementOfAggregates\n-+ // MIR for `copies` after ScalarReplacementOfAggregates\n-  \n-  fn copies(_1: Foo) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/sroa.rs:+0:11: +0:12\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n-      let _2: Foo;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _11: u8;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _12: ();                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _13: &str;                       // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _14: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-      scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n-+         debug y => Foo{ .0 => _11, .1 => _12, .2 => _13, .3 => _14, }; // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n-          let _3: u8;                      // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n-          scope 2 {\n-              debug t => _3;               // in scope 2 at $DIR/sroa.rs:+2:9: +2:10\n-              let _4: &str;                // in scope 2 at $DIR/sroa.rs:+3:9: +3:10\n-              scope 3 {\n-                  debug u => _4;           // in scope 3 at $DIR/sroa.rs:+3:9: +3:10\n-                  let _5: Foo;             // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+                 let _7: u8;              // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+                 let _8: ();              // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+                 let _9: &str;            // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+                 let _10: std::option::Option<isize>; // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-                  scope 4 {\n--                     debug z => _5;       // in scope 4 at $DIR/sroa.rs:+4:9: +4:10\n-+                     debug z => Foo{ .0 => _7, .1 => _8, .2 => _9, .3 => _10, }; // in scope 4 at $DIR/sroa.rs:+4:9: +4:10\n-                      let _6: ();          // in scope 4 at $DIR/sroa.rs:+5:9: +5:10\n-                      scope 5 {\n-                          debug a => _6;   // in scope 5 at $DIR/sroa.rs:+5:9: +5:10\n-                      }\n-                  }\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n--         _2 = _1;                         // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         StorageLive(_11);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_12);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_13);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_14);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         _11 = (_1.0: u8);                // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         _12 = (_1.1: ());                // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         _13 = (_1.2: &str);              // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         _14 = (_1.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+2:9: +2:10\n--         _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n-+         _3 = _11;                        // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n-          StorageLive(_4);                 // scope 2 at $DIR/sroa.rs:+3:9: +3:10\n--         _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n--         StorageLive(_5);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n--         _5 = _2;                         // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _4 = _13;                        // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n-+         StorageLive(_7);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         StorageLive(_8);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         StorageLive(_9);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         StorageLive(_10);                // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         nop;                             // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         _7 = _11;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _8 = _12;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _9 = _13;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _10 = _14;                       // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         nop;                             // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-          StorageLive(_6);                 // scope 4 at $DIR/sroa.rs:+5:9: +5:10\n--         _6 = (_5.1: ());                 // scope 4 at $DIR/sroa.rs:+5:13: +5:16\n-+         _6 = _8;                         // scope 4 at $DIR/sroa.rs:+5:13: +5:16\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +6:2\n-          StorageDead(_6);                 // scope 4 at $DIR/sroa.rs:+6:1: +6:2\n--         StorageDead(_5);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_7);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_8);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_9);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_10);                // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-+         nop;                             // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_4);                 // scope 2 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+6:1: +6:2\n--         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_11);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_12);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_13);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_14);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "17a89e7d8eb204c2fc4280ee829e0ada254671af", "filename": "tests/mir-opt/sroa.dropping.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1,44 +0,0 @@\n-- // MIR for `dropping` before ScalarReplacementOfAggregates\n-+ // MIR for `dropping` after ScalarReplacementOfAggregates\n-  \n-  fn dropping() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n-      let _1: Tag;                         // in scope 0 at $DIR/sroa.rs:+1:5: +1:32\n-      let mut _2: S;                       // in scope 0 at $DIR/sroa.rs:+1:5: +1:30\n-      let mut _3: Tag;                     // in scope 0 at $DIR/sroa.rs:+1:7: +1:13\n-      let mut _4: Tag;                     // in scope 0 at $DIR/sroa.rs:+1:15: +1:21\n-      let mut _5: Tag;                     // in scope 0 at $DIR/sroa.rs:+1:23: +1:29\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:32\n-          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n-          _3 = Tag(const 0_usize);         // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n-          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n-          _4 = Tag(const 1_usize);         // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n-          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n-          _5 = Tag(const 2_usize);         // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n-          _2 = S(move _3, move _4, move _5); // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n-          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n-          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n-          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n-          _1 = move (_2.1: Tag);           // scope 0 at $DIR/sroa.rs:+1:5: +1:32\n-          drop(_1) -> bb1;                 // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n-      }\n-  \n-      bb1: {\n-          drop((_2.0: Tag)) -> bb3;        // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n-      }\n-  \n-      bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n-          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +2:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+2:2: +2:2\n-      }\n-  \n-      bb3: {\n-          drop((_2.2: Tag)) -> bb2;        // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n-      }\n-  }\n-  "}, {"sha": "04d26162aadef88a0a3f63c0257c461879e6bd47", "filename": "tests/mir-opt/sroa.enums.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1,43 +0,0 @@\n-- // MIR for `enums` before ScalarReplacementOfAggregates\n-+ // MIR for `enums` after ScalarReplacementOfAggregates\n-  \n-  fn enums(_1: usize) -> usize {\n-      debug a => _1;                       // in scope 0 at $DIR/sroa.rs:+0:14: +0:15\n-      let mut _0: usize;                   // return place in scope 0 at $DIR/sroa.rs:+0:27: +0:32\n-      let mut _2: std::option::Option<usize>; // in scope 0 at $DIR/sroa.rs:+1:22: +1:29\n-      let mut _3: usize;                   // in scope 0 at $DIR/sroa.rs:+1:27: +1:28\n-      let mut _4: isize;                   // in scope 0 at $DIR/sroa.rs:+1:12: +1:19\n-      scope 1 {\n-          debug a => _5;                   // in scope 1 at $DIR/sroa.rs:+1:17: +1:18\n-          let _5: usize;                   // in scope 1 at $DIR/sroa.rs:+1:17: +1:18\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n-          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+1:27: +1:28\n-          _3 = _1;                         // scope 1 at $DIR/sroa.rs:+1:27: +1:28\n-          _2 = Option::<usize>::Some(move _3); // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n-          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+1:28: +1:29\n-          _4 = discriminant(_2);           // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n-          switchInt(move _4) -> [1: bb1, otherwise: bb2]; // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n-      }\n-  \n-      bb1: {\n-          StorageLive(_5);                 // scope 1 at $DIR/sroa.rs:+1:17: +1:18\n-          _5 = ((_2 as Some).0: usize);    // scope 1 at $DIR/sroa.rs:+1:17: +1:18\n-          _0 = _5;                         // scope 1 at $DIR/sroa.rs:+1:32: +1:33\n-          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:34: +1:35\n-          goto -> bb3;                     // scope 0 at $DIR/sroa.rs:+1:5: +1:46\n-      }\n-  \n-      bb2: {\n-          _0 = const 0_usize;              // scope 0 at $DIR/sroa.rs:+1:43: +1:44\n-          goto -> bb3;                     // scope 0 at $DIR/sroa.rs:+1:5: +1:46\n-      }\n-  \n-      bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "fd691fdd153327d7a12bf5ad4f65d7d673b06d32", "filename": "tests/mir-opt/sroa.escaping.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1,44 +0,0 @@\n-- // MIR for `escaping` before ScalarReplacementOfAggregates\n-+ // MIR for `escaping` after ScalarReplacementOfAggregates\n-  \n-  fn escaping() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n-      let _1: ();                          // in scope 0 at $DIR/sroa.rs:+1:5: +1:42\n-      let mut _2: *const u32;              // in scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-      let _3: &u32;                        // in scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-      let _4: Escaping;                    // in scope 0 at $DIR/sroa.rs:+1:8: +1:39\n-      let mut _5: u32;                     // in scope 0 at $DIR/sroa.rs:+1:34: +1:37\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:42\n-          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:8: +1:39\n-          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:34: +1:37\n-          _5 = g() -> bb1;                 // scope 0 at $DIR/sroa.rs:+1:34: +1:37\n-                                           // mir::Constant\n-                                           // + span: $DIR/sroa.rs:78:34: 78:35\n-                                           // + literal: Const { ty: fn() -> u32 {g}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          _4 = Escaping { a: const 1_u32, b: const 2_u32, c: move _5 }; // scope 0 at $DIR/sroa.rs:+1:8: +1:39\n-          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:38: +1:39\n-          _3 = &(_4.0: u32);               // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-          _1 = f(move _2) -> bb2;          // scope 0 at $DIR/sroa.rs:+1:5: +1:42\n-                                           // mir::Constant\n-                                           // + span: $DIR/sroa.rs:78:5: 78:6\n-                                           // + literal: Const { ty: fn(*const u32) {f}, val: Value(<ZST>) }\n-      }\n-  \n-      bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+1:41: +1:42\n-          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+1:42: +1:43\n-          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+1:42: +1:43\n-          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+1:42: +1:43\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +2:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "69631fc0213f8f5d31ab407509bdc3beb14adf2d", "filename": "tests/mir-opt/sroa.flat.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1,80 +0,0 @@\n-- // MIR for `flat` before ScalarReplacementOfAggregates\n-+ // MIR for `flat` after ScalarReplacementOfAggregates\n-  \n-  fn flat() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:15: +0:15\n-      let _1: u8;                          // in scope 0 at $DIR/sroa.rs:+1:15: +1:16\n-      let _2: ();                          // in scope 0 at $DIR/sroa.rs:+1:18: +1:19\n-      let _3: &str;                        // in scope 0 at $DIR/sroa.rs:+1:21: +1:22\n-      let _4: std::option::Option<isize>;  // in scope 0 at $DIR/sroa.rs:+1:24: +1:25\n-      let mut _5: Foo;                     // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-      let mut _6: ();                      // in scope 0 at $DIR/sroa.rs:+1:45: +1:47\n-      let mut _7: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-+     let mut _8: u8;                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+     let mut _9: ();                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+     let mut _10: &str;                   // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+     let mut _11: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/sroa.rs:+1:15: +1:16\n-          debug b => _2;                   // in scope 1 at $DIR/sroa.rs:+1:18: +1:19\n-          debug c => _3;                   // in scope 1 at $DIR/sroa.rs:+1:21: +1:22\n-          debug d => _4;                   // in scope 1 at $DIR/sroa.rs:+1:24: +1:25\n-          scope 2 {\n-              scope 3 {\n-                  scope 4 {\n-                      scope 5 {\n-                      }\n-                  }\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n--         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_8);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_9);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_10);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_11);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-          StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n-          _6 = ();                         // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n-          StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-          _7 = Option::<isize>::Some(const -4_isize); // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n--         _5 = Foo { a: const 5_u8, b: move _6, c: const \"a\", d: move _7 }; // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         _8 = const 5_u8;                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         _9 = move _6;                    // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         _10 = const \"a\";                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-                                           // mir::Constant\n-                                           // + span: $DIR/sroa.rs:53:52: 53:55\n-                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-+         _11 = move _7;                   // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-          StorageDead(_7);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n-          StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n-          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n--         _1 = (_5.0: u8);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n-+         _1 = _8;                         // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n-          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n--         _2 = (_5.1: ());                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n-+         _2 = _9;                         // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n-          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n--         _3 = (_5.2: &str);               // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n-+         _3 = _10;                        // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n-          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n--         _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n--         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         _4 = _11;                        // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n-+         StorageDead(_8);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         StorageDead(_9);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         StorageDead(_10);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         StorageDead(_11);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:15: +6:2\n-          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "f0d62220dd664aaf3a8ddd89bd991185ecd98497", "filename": "tests/mir-opt/sroa.ref_copies.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1,56 +0,0 @@\n-- // MIR for `ref_copies` before ScalarReplacementOfAggregates\n-+ // MIR for `ref_copies` after ScalarReplacementOfAggregates\n-  \n-  fn ref_copies(_1: &Foo) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/sroa.rs:+0:15: +0:16\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:24: +0:24\n-      let _2: Foo;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _5: u8;                          // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _6: ();                          // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _7: &str;                        // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _8: std::option::Option<isize>;  // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-      scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n-+         debug y => Foo{ .0 => _5, .1 => _6, .2 => _7, .3 => _8, }; // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n-          let _3: u8;                      // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n-          scope 2 {\n-              debug t => _3;               // in scope 2 at $DIR/sroa.rs:+2:9: +2:10\n-              let _4: &str;                // in scope 2 at $DIR/sroa.rs:+3:9: +3:10\n-              scope 3 {\n-                  debug u => _4;           // in scope 3 at $DIR/sroa.rs:+3:9: +3:10\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n--         _2 = (*_1);                      // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_8);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         _5 = ((*_1).0: u8);              // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         _6 = ((*_1).1: ());              // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         _7 = ((*_1).2: &str);            // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         _8 = ((*_1).3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+2:9: +2:10\n--         _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n-+         _3 = _5;                         // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n-          StorageLive(_4);                 // scope 2 at $DIR/sroa.rs:+3:9: +3:10\n--         _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n-+         _4 = _7;                         // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:24: +4:2\n-          StorageDead(_4);                 // scope 2 at $DIR/sroa.rs:+4:1: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+4:1: +4:2\n--         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         StorageDead(_7);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         StorageDead(_8);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "2c63d8b266dde9fffcfe0c1fb57c5fe98fcdb867", "filename": "tests/mir-opt/sroa.structs.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1,33 +0,0 @@\n-- // MIR for `structs` before ScalarReplacementOfAggregates\n-+ // MIR for `structs` after ScalarReplacementOfAggregates\n-  \n-  fn structs(_1: f32) -> f32 {\n-      debug a => _1;                       // in scope 0 at $DIR/sroa.rs:+0:16: +0:17\n-      let mut _0: f32;                     // return place in scope 0 at $DIR/sroa.rs:+0:27: +0:30\n-      let mut _2: structs::U;              // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-      let mut _3: f32;                     // in scope 0 at $DIR/sroa.rs:+6:18: +6:19\n-+     let mut _4: usize;                   // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+     let mut _5: f32;                     // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-  \n-      bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n-          _3 = _1;                         // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n--         _2 = U { _foo: const 0_usize, a: move _3 }; // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         _4 = const 0_usize;              // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         _5 = move _3;                    // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:20: +6:21\n--         _0 = (_2.1: f32);                // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n--         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-+         _0 = _5;                         // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n-+         StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-+         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+7:2: +7:2\n-      }\n-  }\n-  "}, {"sha": "adfb01385d448abaaf08bce5ed8279067a237a0c", "filename": "tests/mir-opt/sroa.unions.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1,23 +0,0 @@\n-- // MIR for `unions` before ScalarReplacementOfAggregates\n-+ // MIR for `unions` after ScalarReplacementOfAggregates\n-  \n-  fn unions(_1: f32) -> u32 {\n-      debug a => _1;                       // in scope 0 at $DIR/sroa.rs:+0:15: +0:16\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/sroa.rs:+0:26: +0:29\n-      let mut _2: unions::Repr;            // in scope 0 at $DIR/sroa.rs:+5:14: +5:27\n-      let mut _3: f32;                     // in scope 0 at $DIR/sroa.rs:+5:24: +5:25\n-      scope 1 {\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n-          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+5:24: +5:25\n-          _3 = _1;                         // scope 1 at $DIR/sroa.rs:+5:24: +5:25\n-          _2 = Repr { f: move _3 };        // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n-          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+5:26: +5:27\n-          _0 = (_2.1: u32);                // scope 1 at $DIR/sroa.rs:+5:14: +5:29\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "225f80ed41b471453802b24e2749c11c9090c328", "filename": "tests/mir-opt/sroa/lifetimes.foo.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,214 @@\n+- // MIR for `foo` before ScalarReplacementOfAggregates\n++ // MIR for `foo` after ScalarReplacementOfAggregates\n+  \n+  fn foo() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lifetimes.rs:+0:18: +0:18\n+      let _1: Foo<T>;                      // in scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n+      let mut _2: std::result::Result<std::boxed::Box<dyn std::fmt::Display>, <T as Err>::Err>; // in scope 0 at $DIR/lifetimes.rs:+2:12: +2:31\n+      let mut _3: std::boxed::Box<dyn std::fmt::Display>; // in scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+      let mut _4: std::boxed::Box<u32>;    // in scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+      let mut _7: isize;                   // in scope 0 at $DIR/lifetimes.rs:+9:12: +9:17\n+      let _9: ();                          // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _10: ();                         // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _11: std::fmt::Arguments<'_>; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _12: &[&str];                // in scope 0 at $DIR/lifetimes.rs:+10:19: +10:28\n+      let mut _13: &[&str; 3];             // in scope 0 at $DIR/lifetimes.rs:+10:19: +10:28\n+      let _14: &[&str; 3];                 // in scope 0 at $DIR/lifetimes.rs:+10:19: +10:28\n+      let _15: [&str; 3];                  // in scope 0 at $DIR/lifetimes.rs:+10:19: +10:28\n+      let mut _16: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _17: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _18: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _19: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at $DIR/lifetimes.rs:+10:21: +10:22\n+      let mut _21: &std::boxed::Box<dyn std::fmt::Display>; // in scope 0 at $DIR/lifetimes.rs:+10:21: +10:22\n+      let _22: &std::boxed::Box<dyn std::fmt::Display>; // in scope 0 at $DIR/lifetimes.rs:+10:21: +10:22\n+      let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at $DIR/lifetimes.rs:+10:25: +10:26\n+      let mut _24: &u32;                   // in scope 0 at $DIR/lifetimes.rs:+10:25: +10:26\n+      let _25: &u32;                       // in scope 0 at $DIR/lifetimes.rs:+10:25: +10:26\n+      let mut _27: bool;                   // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n+      let mut _28: isize;                  // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n+      let mut _29: isize;                  // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n+      let mut _30: isize;                  // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n++     let _31: std::result::Result<std::boxed::Box<dyn std::fmt::Display>, <T as Err>::Err>; // in scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n++     let _32: u32;                        // in scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n+      scope 1 {\n+-         debug foo => _1;                 // in scope 1 at $DIR/lifetimes.rs:+1:9: +1:12\n++         debug foo => Foo<T>{ .0 => _31, .1 => _32, }; // in scope 1 at $DIR/lifetimes.rs:+1:9: +1:12\n+          let _5: std::result::Result<std::boxed::Box<dyn std::fmt::Display>, <T as Err>::Err>; // in scope 1 at $DIR/lifetimes.rs:+6:9: +6:10\n+          scope 2 {\n+              debug x => _5;               // in scope 2 at $DIR/lifetimes.rs:+6:9: +6:10\n+              let _6: u32;                 // in scope 2 at $DIR/lifetimes.rs:+7:9: +7:10\n+              scope 3 {\n+                  debug y => _6;           // in scope 3 at $DIR/lifetimes.rs:+7:9: +7:10\n+                  scope 4 {\n+                      debug x => _8;       // in scope 4 at $DIR/lifetimes.rs:+9:15: +9:16\n+                      let _8: std::boxed::Box<dyn std::fmt::Display>; // in scope 4 at $DIR/lifetimes.rs:+9:15: +9:16\n+                      let mut _26: &[&str; 3]; // in scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          _27 = const false;               // scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n+-         StorageLive(_1);                 // scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n++         StorageLive(_31);                // scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n++         StorageLive(_32);                // scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n++         nop;                             // scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n+          StorageLive(_2);                 // scope 0 at $DIR/lifetimes.rs:+2:12: +2:31\n+          StorageLive(_3);                 // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+          StorageLive(_4);                 // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+          _4 = Box::<u32>::new(const 5_u32) -> bb1; // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+                                           // mir::Constant\n+                                           // + span: $DIR/lifetimes.rs:19:15: 19:23\n+                                           // + user_ty: UserType(1)\n+                                           // + literal: Const { ty: fn(u32) -> Box<u32> {Box::<u32>::new}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _3 = move _4 as std::boxed::Box<dyn std::fmt::Display> (Pointer(Unsize)); // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+          StorageDead(_4);                 // scope 0 at $DIR/lifetimes.rs:+2:29: +2:30\n+          _2 = Result::<Box<dyn std::fmt::Display>, <T as Err>::Err>::Ok(move _3); // scope 0 at $DIR/lifetimes.rs:+2:12: +2:31\n+          StorageDead(_3);                 // scope 0 at $DIR/lifetimes.rs:+2:30: +2:31\n+-         _1 = Foo::<T> { x: move _2, y: const 7_u32 }; // scope 0 at $DIR/lifetimes.rs:+1:23: +4:6\n++         _31 = move _2;                   // scope 0 at $DIR/lifetimes.rs:+1:23: +4:6\n++         _32 = const 7_u32;               // scope 0 at $DIR/lifetimes.rs:+1:23: +4:6\n++         nop;                             // scope 0 at $DIR/lifetimes.rs:+1:23: +4:6\n+          StorageDead(_2);                 // scope 0 at $DIR/lifetimes.rs:+4:5: +4:6\n+          StorageLive(_5);                 // scope 1 at $DIR/lifetimes.rs:+6:9: +6:10\n+          _27 = const true;                // scope 1 at $DIR/lifetimes.rs:+6:13: +6:18\n+-         _5 = move (_1.0: std::result::Result<std::boxed::Box<dyn std::fmt::Display>, <T as Err>::Err>); // scope 1 at $DIR/lifetimes.rs:+6:13: +6:18\n++         _5 = move _31;                   // scope 1 at $DIR/lifetimes.rs:+6:13: +6:18\n+          StorageLive(_6);                 // scope 2 at $DIR/lifetimes.rs:+7:9: +7:10\n+-         _6 = (_1.1: u32);                // scope 2 at $DIR/lifetimes.rs:+7:13: +7:18\n++         _6 = _32;                        // scope 2 at $DIR/lifetimes.rs:+7:13: +7:18\n+          _7 = discriminant(_5);           // scope 4 at $DIR/lifetimes.rs:+9:12: +9:17\n+          switchInt(move _7) -> [0: bb2, otherwise: bb7]; // scope 4 at $DIR/lifetimes.rs:+9:12: +9:17\n+      }\n+  \n+      bb2: {\n+          StorageLive(_8);                 // scope 4 at $DIR/lifetimes.rs:+9:15: +9:16\n+          _27 = const false;               // scope 4 at $DIR/lifetimes.rs:+9:15: +9:16\n+          _8 = move ((_5 as Ok).0: std::boxed::Box<dyn std::fmt::Display>); // scope 4 at $DIR/lifetimes.rs:+9:15: +9:16\n+          StorageLive(_9);                 // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_12);                // scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          StorageLive(_13);                // scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          StorageLive(_14);                // scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          _26 = const _;                   // scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+                                           // mir::Constant\n+                                           // + span: $DIR/lifetimes.rs:27:19: 27:28\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(foo, [T], Some(promoted[0])) }\n+          _14 = &(*_26);                   // scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          _13 = &(*_14);                   // scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          _12 = move _13 as &[&str] (Pointer(Unsize)); // scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          StorageDead(_13);                // scope 4 at $DIR/lifetimes.rs:+10:27: +10:28\n+          StorageLive(_16);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_17);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          StorageLive(_21);                // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          StorageLive(_22);                // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          _22 = &_8;                       // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          _21 = &(*_22);                   // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          _20 = core::fmt::ArgumentV1::<'_>::new_display::<Box<dyn std::fmt::Display>>(move _21) -> bb3; // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/lifetimes.rs:27:21: 27:22\n+                                           // + user_ty: UserType(4)\n+                                           // + literal: Const { ty: for<'b> fn(&'b Box<dyn std::fmt::Display>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<Box<dyn std::fmt::Display>>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_21);                // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          StorageLive(_23);                // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          StorageLive(_24);                // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          StorageLive(_25);                // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          _25 = &_6;                       // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          _24 = &(*_25);                   // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          _23 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _24) -> bb4; // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+                                           // mir::Constant\n+                                           // + span: $DIR/lifetimes.rs:27:25: 27:26\n+                                           // + user_ty: UserType(5)\n+                                           // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4: {\n+          StorageDead(_24);                // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          _19 = [move _20, move _23];      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_23);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_20);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _18 = &_19;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _17 = &(*_18);                   // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _16 = move _17 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_17);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _11 = Arguments::<'_>::new_v1(move _12, move _16) -> bb5; // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // + user_ty: UserType(3)\n+                                           // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_16);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_12);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _10 = _eprint(move _11) -> bb6;  // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_eprint}, val: Value(<ZST>) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_25);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_22);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_19);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_18);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_14);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _9 = const ();                   // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _0 = const ();                   // scope 4 at $DIR/lifetimes.rs:+9:22: +11:6\n+          drop(_8) -> bb8;                 // scope 3 at $DIR/lifetimes.rs:+11:5: +11:6\n+      }\n+  \n+      bb7: {\n+          _0 = const ();                   // scope 3 at $DIR/lifetimes.rs:+11:6: +11:6\n+          goto -> bb9;                     // scope 3 at $DIR/lifetimes.rs:+9:5: +11:6\n+      }\n+  \n+      bb8: {\n+          StorageDead(_8);                 // scope 3 at $DIR/lifetimes.rs:+11:5: +11:6\n+          goto -> bb9;                     // scope 3 at $DIR/lifetimes.rs:+9:5: +11:6\n+      }\n+  \n+      bb9: {\n+          StorageDead(_6);                 // scope 2 at $DIR/lifetimes.rs:+12:1: +12:2\n+          _28 = discriminant(_5);          // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+          switchInt(move _28) -> [0: bb11, otherwise: bb13]; // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+      }\n+  \n+      bb10: {\n+          _27 = const false;               // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+          StorageDead(_5);                 // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n++         StorageDead(_31);                // scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n++         StorageDead(_32);                // scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n++         nop;                             // scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n+          return;                          // scope 0 at $DIR/lifetimes.rs:+12:2: +12:2\n+      }\n+  \n+      bb11: {\n+          switchInt(_27) -> [0: bb10, otherwise: bb12]; // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+      }\n+  \n+      bb12: {\n+          drop(((_5 as Ok).0: std::boxed::Box<dyn std::fmt::Display>)) -> bb10; // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+      }\n+  \n+      bb13: {\n+          drop(_5) -> bb10;                // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+      }\n+  }\n+  "}, {"sha": "2356d212f3fb4135abb8cd100676e82b22790d48", "filename": "tests/mir-opt/sroa/lifetimes.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Flifetimes.rs?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,37 @@\n+// unit-test: ScalarReplacementOfAggregates\n+// compile-flags: -Cpanic=abort\n+// no-prefer-dynamic\n+\n+trait Err {\n+    type Err;\n+}\n+\n+struct Foo<T: Err> {\n+    // Check that the `'static` lifetime is erased when creating the local for `x`,\n+    // even if we fail to normalize the type.\n+    x: Result<Box<dyn std::fmt::Display + 'static>, <T as Err>::Err>,\n+    y: u32,\n+}\n+\n+// EMIT_MIR lifetimes.foo.ScalarReplacementOfAggregates.diff\n+fn foo<T: Err>() {\n+    let foo: Foo<T> = Foo {\n+        x: Ok(Box::new(5_u32)),\n+        y: 7_u32,\n+    };\n+\n+    let x = foo.x;\n+    let y = foo.y;\n+\n+    if let Ok(x) = x {\n+        eprintln!(\"{x} {y}\");\n+    }\n+}\n+\n+impl Err for () {\n+    type Err = ();\n+}\n+\n+fn main() {\n+    foo::<()>()\n+}"}, {"sha": "647681f0e7a76faa7a3a74c8173c06a6265eb8f7", "filename": "tests/mir-opt/sroa/structs.constant.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.constant.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.constant.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.constant.ScalarReplacementOfAggregates.diff?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,46 @@\n+- // MIR for `constant` before ScalarReplacementOfAggregates\n++ // MIR for `constant` after ScalarReplacementOfAggregates\n+  \n+  fn constant() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:15: +0:15\n+      let _1: (usize, u8);                 // in scope 0 at $DIR/structs.rs:+2:9: +2:10\n++     let _4: usize;                       // in scope 0 at $DIR/structs.rs:+2:9: +2:10\n++     let _5: u8;                          // in scope 0 at $DIR/structs.rs:+2:9: +2:10\n+      scope 1 {\n+-         debug y => _1;                   // in scope 1 at $DIR/structs.rs:+2:9: +2:10\n++         debug y => (usize, u8){ .0 => _4, .1 => _5, }; // in scope 1 at $DIR/structs.rs:+2:9: +2:10\n+          let _2: usize;                   // in scope 1 at $DIR/structs.rs:+3:9: +3:10\n+          scope 2 {\n+              debug t => _2;               // in scope 2 at $DIR/structs.rs:+3:9: +3:10\n+              let _3: u8;                  // in scope 2 at $DIR/structs.rs:+4:9: +4:10\n+              scope 3 {\n+                  debug u => _3;           // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/structs.rs:+2:9: +2:10\n++         StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+2:9: +2:10\n++         StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+2:9: +2:10\n++         nop;                             // scope 0 at $DIR/structs.rs:+2:9: +2:10\n+          _1 = const _;                    // scope 0 at $DIR/structs.rs:+2:13: +2:14\n++         _4 = move (_1.0: usize);         // scope 1 at $DIR/structs.rs:+3:9: +3:10\n++         _5 = move (_1.1: u8);            // scope 1 at $DIR/structs.rs:+3:9: +3:10\n+          StorageLive(_2);                 // scope 1 at $DIR/structs.rs:+3:9: +3:10\n+-         _2 = (_1.0: usize);              // scope 1 at $DIR/structs.rs:+3:13: +3:16\n++         _2 = _4;                         // scope 1 at $DIR/structs.rs:+3:13: +3:16\n+          StorageLive(_3);                 // scope 2 at $DIR/structs.rs:+4:9: +4:10\n+-         _3 = (_1.1: u8);                 // scope 2 at $DIR/structs.rs:+4:13: +4:16\n++         _3 = _5;                         // scope 2 at $DIR/structs.rs:+4:13: +4:16\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:15: +5:2\n+          StorageDead(_3);                 // scope 2 at $DIR/structs.rs:+5:1: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/structs.rs:+5:1: +5:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/structs.rs:+5:1: +5:2\n++         StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+5:1: +5:2\n++         StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+5:1: +5:2\n++         nop;                             // scope 0 at $DIR/structs.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/structs.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "b0b0da8861f8de675a0ab9dc1ab63598ec46e2c9", "filename": "tests/mir-opt/sroa/structs.copies.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.copies.ScalarReplacementOfAggregates.diff?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,91 @@\n+- // MIR for `copies` before ScalarReplacementOfAggregates\n++ // MIR for `copies` after ScalarReplacementOfAggregates\n+  \n+  fn copies(_1: Foo) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/structs.rs:+0:11: +0:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:19: +0:19\n+      let _2: Foo;                         // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _11: u8;                         // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _12: ();                         // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _13: &str;                       // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _14: std::option::Option<isize>; // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n+      scope 1 {\n+-         debug y => _2;                   // in scope 1 at $DIR/structs.rs:+1:9: +1:10\n++         debug y => Foo{ .0 => _11, .1 => _12, .2 => _13, .3 => _14, }; // in scope 1 at $DIR/structs.rs:+1:9: +1:10\n+          let _3: u8;                      // in scope 1 at $DIR/structs.rs:+2:9: +2:10\n+          scope 2 {\n+              debug t => _3;               // in scope 2 at $DIR/structs.rs:+2:9: +2:10\n+              let _4: &str;                // in scope 2 at $DIR/structs.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug u => _4;           // in scope 3 at $DIR/structs.rs:+3:9: +3:10\n+                  let _5: Foo;             // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n++                 let _7: u8;              // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n++                 let _8: ();              // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n++                 let _9: &str;            // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n++                 let _10: std::option::Option<isize>; // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n+                  scope 4 {\n+-                     debug z => _5;       // in scope 4 at $DIR/structs.rs:+4:9: +4:10\n++                     debug z => Foo{ .0 => _7, .1 => _8, .2 => _9, .3 => _10, }; // in scope 4 at $DIR/structs.rs:+4:9: +4:10\n+                      let _6: ();          // in scope 4 at $DIR/structs.rs:+5:9: +5:10\n+                      scope 5 {\n+                          debug a => _6;   // in scope 5 at $DIR/structs.rs:+5:9: +5:10\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/structs.rs:+1:13: +1:14\n++         StorageLive(_11);                // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_12);                // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_13);                // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_14);                // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         _11 = (_1.0: u8);                // scope 0 at $DIR/structs.rs:+1:13: +1:14\n++         _12 = (_1.1: ());                // scope 0 at $DIR/structs.rs:+1:13: +1:14\n++         _13 = (_1.2: &str);              // scope 0 at $DIR/structs.rs:+1:13: +1:14\n++         _14 = (_1.3: std::option::Option<isize>); // scope 0 at $DIR/structs.rs:+1:13: +1:14\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:13: +1:14\n+          StorageLive(_3);                 // scope 1 at $DIR/structs.rs:+2:9: +2:10\n+-         _3 = (_2.0: u8);                 // scope 1 at $DIR/structs.rs:+2:13: +2:16\n++         _3 = _11;                        // scope 1 at $DIR/structs.rs:+2:13: +2:16\n+          StorageLive(_4);                 // scope 2 at $DIR/structs.rs:+3:9: +3:10\n+-         _4 = (_2.2: &str);               // scope 2 at $DIR/structs.rs:+3:13: +3:16\n+-         StorageLive(_5);                 // scope 3 at $DIR/structs.rs:+4:9: +4:10\n+-         _5 = _2;                         // scope 3 at $DIR/structs.rs:+4:13: +4:14\n++         _4 = _13;                        // scope 2 at $DIR/structs.rs:+3:13: +3:16\n++         StorageLive(_7);                 // scope 3 at $DIR/structs.rs:+4:9: +4:10\n++         StorageLive(_8);                 // scope 3 at $DIR/structs.rs:+4:9: +4:10\n++         StorageLive(_9);                 // scope 3 at $DIR/structs.rs:+4:9: +4:10\n++         StorageLive(_10);                // scope 3 at $DIR/structs.rs:+4:9: +4:10\n++         nop;                             // scope 3 at $DIR/structs.rs:+4:9: +4:10\n++         _7 = _11;                        // scope 3 at $DIR/structs.rs:+4:13: +4:14\n++         _8 = _12;                        // scope 3 at $DIR/structs.rs:+4:13: +4:14\n++         _9 = _13;                        // scope 3 at $DIR/structs.rs:+4:13: +4:14\n++         _10 = _14;                       // scope 3 at $DIR/structs.rs:+4:13: +4:14\n++         nop;                             // scope 3 at $DIR/structs.rs:+4:13: +4:14\n+          StorageLive(_6);                 // scope 4 at $DIR/structs.rs:+5:9: +5:10\n+-         _6 = (_5.1: ());                 // scope 4 at $DIR/structs.rs:+5:13: +5:16\n++         _6 = _8;                         // scope 4 at $DIR/structs.rs:+5:13: +5:16\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:19: +6:2\n+          StorageDead(_6);                 // scope 4 at $DIR/structs.rs:+6:1: +6:2\n+-         StorageDead(_5);                 // scope 3 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_7);                 // scope 3 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_8);                 // scope 3 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_9);                 // scope 3 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_10);                // scope 3 at $DIR/structs.rs:+6:1: +6:2\n++         nop;                             // scope 3 at $DIR/structs.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 2 at $DIR/structs.rs:+6:1: +6:2\n+          StorageDead(_3);                 // scope 1 at $DIR/structs.rs:+6:1: +6:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_11);                // scope 0 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_12);                // scope 0 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_13);                // scope 0 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_14);                // scope 0 at $DIR/structs.rs:+6:1: +6:2\n++         nop;                             // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/structs.rs:+6:2: +6:2\n+      }\n+  }\n+  "}, {"sha": "b6439c00a005153911b217a9edecea1baf2e1712", "filename": "tests/mir-opt/sroa/structs.dropping.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `dropping` before ScalarReplacementOfAggregates\n++ // MIR for `dropping` after ScalarReplacementOfAggregates\n+  \n+  fn dropping() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:19: +0:19\n+      let _1: Tag;                         // in scope 0 at $DIR/structs.rs:+1:5: +1:32\n+      let mut _2: S;                       // in scope 0 at $DIR/structs.rs:+1:5: +1:30\n+      let mut _3: Tag;                     // in scope 0 at $DIR/structs.rs:+1:7: +1:13\n+      let mut _4: Tag;                     // in scope 0 at $DIR/structs.rs:+1:15: +1:21\n+      let mut _5: Tag;                     // in scope 0 at $DIR/structs.rs:+1:23: +1:29\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/structs.rs:+1:5: +1:32\n+          StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+1:5: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/structs.rs:+1:7: +1:13\n+          _3 = Tag(const 0_usize);         // scope 0 at $DIR/structs.rs:+1:7: +1:13\n+          StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+1:15: +1:21\n+          _4 = Tag(const 1_usize);         // scope 0 at $DIR/structs.rs:+1:15: +1:21\n+          StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+1:23: +1:29\n+          _5 = Tag(const 2_usize);         // scope 0 at $DIR/structs.rs:+1:23: +1:29\n+          _2 = S(move _3, move _4, move _5); // scope 0 at $DIR/structs.rs:+1:5: +1:30\n+          StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+1:29: +1:30\n+          StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+1:29: +1:30\n+          StorageDead(_3);                 // scope 0 at $DIR/structs.rs:+1:29: +1:30\n+          _1 = move (_2.1: Tag);           // scope 0 at $DIR/structs.rs:+1:5: +1:32\n+          drop(_1) -> bb1;                 // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+      }\n+  \n+      bb1: {\n+          drop((_2.0: Tag)) -> bb3;        // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+          StorageDead(_1);                 // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:19: +2:2\n+          return;                          // scope 0 at $DIR/structs.rs:+2:2: +2:2\n+      }\n+  \n+      bb3: {\n+          drop((_2.2: Tag)) -> bb2;        // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+      }\n+  }\n+  "}, {"sha": "ff1e30c2d8f3c02bb1f34dc0a5736426bea59c14", "filename": "tests/mir-opt/sroa/structs.enums.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.enums.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.enums.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.enums.ScalarReplacementOfAggregates.diff?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,43 @@\n+- // MIR for `enums` before ScalarReplacementOfAggregates\n++ // MIR for `enums` after ScalarReplacementOfAggregates\n+  \n+  fn enums(_1: usize) -> usize {\n+      debug a => _1;                       // in scope 0 at $DIR/structs.rs:+0:14: +0:15\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/structs.rs:+0:27: +0:32\n+      let mut _2: std::option::Option<usize>; // in scope 0 at $DIR/structs.rs:+1:22: +1:29\n+      let mut _3: usize;                   // in scope 0 at $DIR/structs.rs:+1:27: +1:28\n+      let mut _4: isize;                   // in scope 0 at $DIR/structs.rs:+1:12: +1:19\n+      scope 1 {\n+          debug a => _5;                   // in scope 1 at $DIR/structs.rs:+1:17: +1:18\n+          let _5: usize;                   // in scope 1 at $DIR/structs.rs:+1:17: +1:18\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 1 at $DIR/structs.rs:+1:22: +1:29\n+          StorageLive(_3);                 // scope 1 at $DIR/structs.rs:+1:27: +1:28\n+          _3 = _1;                         // scope 1 at $DIR/structs.rs:+1:27: +1:28\n+          _2 = Option::<usize>::Some(move _3); // scope 1 at $DIR/structs.rs:+1:22: +1:29\n+          StorageDead(_3);                 // scope 1 at $DIR/structs.rs:+1:28: +1:29\n+          _4 = discriminant(_2);           // scope 1 at $DIR/structs.rs:+1:12: +1:19\n+          switchInt(move _4) -> [1: bb1, otherwise: bb2]; // scope 1 at $DIR/structs.rs:+1:12: +1:19\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 1 at $DIR/structs.rs:+1:17: +1:18\n+          _5 = ((_2 as Some).0: usize);    // scope 1 at $DIR/structs.rs:+1:17: +1:18\n+          _0 = _5;                         // scope 1 at $DIR/structs.rs:+1:32: +1:33\n+          StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+1:34: +1:35\n+          goto -> bb3;                     // scope 0 at $DIR/structs.rs:+1:5: +1:46\n+      }\n+  \n+      bb2: {\n+          _0 = const 0_usize;              // scope 0 at $DIR/structs.rs:+1:43: +1:44\n+          goto -> bb3;                     // scope 0 at $DIR/structs.rs:+1:5: +1:46\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/structs.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "d45823d4bac571f2979f05fb0ba27712600783cf", "filename": "tests/mir-opt/sroa/structs.escaping.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `escaping` before ScalarReplacementOfAggregates\n++ // MIR for `escaping` after ScalarReplacementOfAggregates\n+  \n+  fn escaping() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:19: +0:19\n+      let _1: ();                          // in scope 0 at $DIR/structs.rs:+1:5: +1:42\n+      let mut _2: *const u32;              // in scope 0 at $DIR/structs.rs:+1:7: +1:41\n+      let _3: &u32;                        // in scope 0 at $DIR/structs.rs:+1:7: +1:41\n+      let _4: Escaping;                    // in scope 0 at $DIR/structs.rs:+1:8: +1:39\n+      let mut _5: u32;                     // in scope 0 at $DIR/structs.rs:+1:34: +1:37\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/structs.rs:+1:5: +1:42\n+          StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+1:7: +1:41\n+          StorageLive(_3);                 // scope 0 at $DIR/structs.rs:+1:7: +1:41\n+          StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+1:8: +1:39\n+          StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+1:34: +1:37\n+          _5 = g() -> bb1;                 // scope 0 at $DIR/structs.rs:+1:34: +1:37\n+                                           // mir::Constant\n+                                           // + span: $DIR/structs.rs:78:34: 78:35\n+                                           // + literal: Const { ty: fn() -> u32 {g}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _4 = Escaping { a: const 1_u32, b: const 2_u32, c: move _5 }; // scope 0 at $DIR/structs.rs:+1:8: +1:39\n+          StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+1:38: +1:39\n+          _3 = &(_4.0: u32);               // scope 0 at $DIR/structs.rs:+1:7: +1:41\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/structs.rs:+1:7: +1:41\n+          _1 = f(move _2) -> bb2;          // scope 0 at $DIR/structs.rs:+1:5: +1:42\n+                                           // mir::Constant\n+                                           // + span: $DIR/structs.rs:78:5: 78:6\n+                                           // + literal: Const { ty: fn(*const u32) {f}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+1:41: +1:42\n+          StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+1:42: +1:43\n+          StorageDead(_3);                 // scope 0 at $DIR/structs.rs:+1:42: +1:43\n+          StorageDead(_1);                 // scope 0 at $DIR/structs.rs:+1:42: +1:43\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:19: +2:2\n+          return;                          // scope 0 at $DIR/structs.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "1aa11d17b67256670440b12d16331b61126ebf55", "filename": "tests/mir-opt/sroa/structs.flat.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.flat.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.flat.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.flat.ScalarReplacementOfAggregates.diff?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,80 @@\n+- // MIR for `flat` before ScalarReplacementOfAggregates\n++ // MIR for `flat` after ScalarReplacementOfAggregates\n+  \n+  fn flat() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:15: +0:15\n+      let _1: u8;                          // in scope 0 at $DIR/structs.rs:+1:15: +1:16\n+      let _2: ();                          // in scope 0 at $DIR/structs.rs:+1:18: +1:19\n+      let _3: &str;                        // in scope 0 at $DIR/structs.rs:+1:21: +1:22\n+      let _4: std::option::Option<isize>;  // in scope 0 at $DIR/structs.rs:+1:24: +1:25\n+      let mut _5: Foo;                     // in scope 0 at $DIR/structs.rs:+1:30: +1:70\n+      let mut _6: ();                      // in scope 0 at $DIR/structs.rs:+1:45: +1:47\n+      let mut _7: std::option::Option<isize>; // in scope 0 at $DIR/structs.rs:+1:60: +1:68\n++     let mut _8: u8;                      // in scope 0 at $DIR/structs.rs:+1:30: +1:70\n++     let mut _9: ();                      // in scope 0 at $DIR/structs.rs:+1:30: +1:70\n++     let mut _10: &str;                   // in scope 0 at $DIR/structs.rs:+1:30: +1:70\n++     let mut _11: std::option::Option<isize>; // in scope 0 at $DIR/structs.rs:+1:30: +1:70\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/structs.rs:+1:15: +1:16\n+          debug b => _2;                   // in scope 1 at $DIR/structs.rs:+1:18: +1:19\n+          debug c => _3;                   // in scope 1 at $DIR/structs.rs:+1:21: +1:22\n+          debug d => _4;                   // in scope 1 at $DIR/structs.rs:+1:24: +1:25\n+          scope 2 {\n+              scope 3 {\n+                  scope 4 {\n+                      scope 5 {\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         StorageLive(_8);                 // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         StorageLive(_9);                 // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         StorageLive(_10);                // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         StorageLive(_11);                // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:30: +1:70\n+          StorageLive(_6);                 // scope 0 at $DIR/structs.rs:+1:45: +1:47\n+          _6 = ();                         // scope 0 at $DIR/structs.rs:+1:45: +1:47\n+          StorageLive(_7);                 // scope 0 at $DIR/structs.rs:+1:60: +1:68\n+          _7 = Option::<isize>::Some(const -4_isize); // scope 0 at $DIR/structs.rs:+1:60: +1:68\n+-         _5 = Foo { a: const 5_u8, b: move _6, c: const \"a\", d: move _7 }; // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         _8 = const 5_u8;                 // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         _9 = move _6;                    // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         _10 = const \"a\";                 // scope 0 at $DIR/structs.rs:+1:30: +1:70\n+                                           // mir::Constant\n+                                           // + span: $DIR/structs.rs:53:52: 53:55\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n++         _11 = move _7;                   // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:30: +1:70\n+          StorageDead(_7);                 // scope 0 at $DIR/structs.rs:+1:69: +1:70\n+          StorageDead(_6);                 // scope 0 at $DIR/structs.rs:+1:69: +1:70\n+          StorageLive(_1);                 // scope 0 at $DIR/structs.rs:+1:15: +1:16\n+-         _1 = (_5.0: u8);                 // scope 0 at $DIR/structs.rs:+1:15: +1:16\n++         _1 = _8;                         // scope 0 at $DIR/structs.rs:+1:15: +1:16\n+          StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+1:18: +1:19\n+-         _2 = (_5.1: ());                 // scope 0 at $DIR/structs.rs:+1:18: +1:19\n++         _2 = _9;                         // scope 0 at $DIR/structs.rs:+1:18: +1:19\n+          StorageLive(_3);                 // scope 0 at $DIR/structs.rs:+1:21: +1:22\n+-         _3 = (_5.2: &str);               // scope 0 at $DIR/structs.rs:+1:21: +1:22\n++         _3 = _10;                        // scope 0 at $DIR/structs.rs:+1:21: +1:22\n+          StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+1:24: +1:25\n+-         _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/structs.rs:+1:24: +1:25\n+-         StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+1:70: +1:71\n++         _4 = _11;                        // scope 0 at $DIR/structs.rs:+1:24: +1:25\n++         StorageDead(_8);                 // scope 0 at $DIR/structs.rs:+1:70: +1:71\n++         StorageDead(_9);                 // scope 0 at $DIR/structs.rs:+1:70: +1:71\n++         StorageDead(_10);                // scope 0 at $DIR/structs.rs:+1:70: +1:71\n++         StorageDead(_11);                // scope 0 at $DIR/structs.rs:+1:70: +1:71\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:70: +1:71\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:15: +6:2\n+          StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          StorageDead(_3);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/structs.rs:+6:2: +6:2\n+      }\n+  }\n+  "}, {"sha": "7b09ac182630f73beb6e21f2cc71539731c5b078", "filename": "tests/mir-opt/sroa/structs.ref_copies.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.ref_copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.ref_copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.ref_copies.ScalarReplacementOfAggregates.diff?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,56 @@\n+- // MIR for `ref_copies` before ScalarReplacementOfAggregates\n++ // MIR for `ref_copies` after ScalarReplacementOfAggregates\n+  \n+  fn ref_copies(_1: &Foo) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/structs.rs:+0:15: +0:16\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:24: +0:24\n+      let _2: Foo;                         // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _5: u8;                          // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _6: ();                          // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _7: &str;                        // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _8: std::option::Option<isize>;  // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n+      scope 1 {\n+-         debug y => _2;                   // in scope 1 at $DIR/structs.rs:+1:9: +1:10\n++         debug y => Foo{ .0 => _5, .1 => _6, .2 => _7, .3 => _8, }; // in scope 1 at $DIR/structs.rs:+1:9: +1:10\n+          let _3: u8;                      // in scope 1 at $DIR/structs.rs:+2:9: +2:10\n+          scope 2 {\n+              debug t => _3;               // in scope 2 at $DIR/structs.rs:+2:9: +2:10\n+              let _4: &str;                // in scope 2 at $DIR/structs.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug u => _4;           // in scope 3 at $DIR/structs.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n+-         _2 = (*_1);                      // scope 0 at $DIR/structs.rs:+1:13: +1:15\n++         StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_6);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_7);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_8);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         _5 = ((*_1).0: u8);              // scope 0 at $DIR/structs.rs:+1:13: +1:15\n++         _6 = ((*_1).1: ());              // scope 0 at $DIR/structs.rs:+1:13: +1:15\n++         _7 = ((*_1).2: &str);            // scope 0 at $DIR/structs.rs:+1:13: +1:15\n++         _8 = ((*_1).3: std::option::Option<isize>); // scope 0 at $DIR/structs.rs:+1:13: +1:15\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:13: +1:15\n+          StorageLive(_3);                 // scope 1 at $DIR/structs.rs:+2:9: +2:10\n+-         _3 = (_2.0: u8);                 // scope 1 at $DIR/structs.rs:+2:13: +2:16\n++         _3 = _5;                         // scope 1 at $DIR/structs.rs:+2:13: +2:16\n+          StorageLive(_4);                 // scope 2 at $DIR/structs.rs:+3:9: +3:10\n+-         _4 = (_2.2: &str);               // scope 2 at $DIR/structs.rs:+3:13: +3:16\n++         _4 = _7;                         // scope 2 at $DIR/structs.rs:+3:13: +3:16\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:24: +4:2\n+          StorageDead(_4);                 // scope 2 at $DIR/structs.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/structs.rs:+4:1: +4:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+4:1: +4:2\n++         StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+4:1: +4:2\n++         StorageDead(_6);                 // scope 0 at $DIR/structs.rs:+4:1: +4:2\n++         StorageDead(_7);                 // scope 0 at $DIR/structs.rs:+4:1: +4:2\n++         StorageDead(_8);                 // scope 0 at $DIR/structs.rs:+4:1: +4:2\n++         nop;                             // scope 0 at $DIR/structs.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/structs.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "7946eeaeae4e97227825c3b4c67f75b323abb75f", "filename": "tests/mir-opt/sroa/structs.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.rs?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -111,12 +111,12 @@ fn main() {\n     constant();\n }\n \n-// EMIT_MIR sroa.dropping.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.enums.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.structs.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.unions.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.flat.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.escaping.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.copies.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.ref_copies.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.constant.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.dropping.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.enums.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.structs.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.unions.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.flat.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.escaping.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.copies.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.ref_copies.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.constant.ScalarReplacementOfAggregates.diff", "previous_filename": "tests/mir-opt/sroa.rs"}, {"sha": "c94e4b137bc407d7e88ac3ebbfdf2b804201af10", "filename": "tests/mir-opt/sroa/structs.structs.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.structs.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.structs.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.structs.ScalarReplacementOfAggregates.diff?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,33 @@\n+- // MIR for `structs` before ScalarReplacementOfAggregates\n++ // MIR for `structs` after ScalarReplacementOfAggregates\n+  \n+  fn structs(_1: f32) -> f32 {\n+      debug a => _1;                       // in scope 0 at $DIR/structs.rs:+0:16: +0:17\n+      let mut _0: f32;                     // return place in scope 0 at $DIR/structs.rs:+0:27: +0:30\n+      let mut _2: structs::U;              // in scope 0 at $DIR/structs.rs:+6:5: +6:21\n+      let mut _3: f32;                     // in scope 0 at $DIR/structs.rs:+6:18: +6:19\n++     let mut _4: usize;                   // in scope 0 at $DIR/structs.rs:+6:5: +6:21\n++     let mut _5: f32;                     // in scope 0 at $DIR/structs.rs:+6:5: +6:21\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         nop;                             // scope 0 at $DIR/structs.rs:+6:5: +6:21\n+          StorageLive(_3);                 // scope 0 at $DIR/structs.rs:+6:18: +6:19\n+          _3 = _1;                         // scope 0 at $DIR/structs.rs:+6:18: +6:19\n+-         _2 = U { _foo: const 0_usize, a: move _3 }; // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         _4 = const 0_usize;              // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         _5 = move _3;                    // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         nop;                             // scope 0 at $DIR/structs.rs:+6:5: +6:21\n+          StorageDead(_3);                 // scope 0 at $DIR/structs.rs:+6:20: +6:21\n+-         _0 = (_2.1: f32);                // scope 0 at $DIR/structs.rs:+6:5: +6:23\n+-         StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+7:1: +7:2\n++         _0 = _5;                         // scope 0 at $DIR/structs.rs:+6:5: +6:23\n++         StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+7:1: +7:2\n++         StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+7:1: +7:2\n++         nop;                             // scope 0 at $DIR/structs.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/structs.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "5aa054589e4d37147cac9bf71c820e637b44ccd8", "filename": "tests/mir-opt/sroa/structs.unions.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.unions.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac4379fea9e83465d814bb05005689f49bd2141e/tests%2Fmir-opt%2Fsroa%2Fstructs.unions.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.unions.ScalarReplacementOfAggregates.diff?ref=ac4379fea9e83465d814bb05005689f49bd2141e", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `unions` before ScalarReplacementOfAggregates\n++ // MIR for `unions` after ScalarReplacementOfAggregates\n+  \n+  fn unions(_1: f32) -> u32 {\n+      debug a => _1;                       // in scope 0 at $DIR/structs.rs:+0:15: +0:16\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/structs.rs:+0:26: +0:29\n+      let mut _2: unions::Repr;            // in scope 0 at $DIR/structs.rs:+5:14: +5:27\n+      let mut _3: f32;                     // in scope 0 at $DIR/structs.rs:+5:24: +5:25\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 1 at $DIR/structs.rs:+5:14: +5:27\n+          StorageLive(_3);                 // scope 1 at $DIR/structs.rs:+5:24: +5:25\n+          _3 = _1;                         // scope 1 at $DIR/structs.rs:+5:24: +5:25\n+          _2 = Repr { f: move _3 };        // scope 1 at $DIR/structs.rs:+5:14: +5:27\n+          StorageDead(_3);                 // scope 1 at $DIR/structs.rs:+5:26: +5:27\n+          _0 = (_2.1: u32);                // scope 1 at $DIR/structs.rs:+5:14: +5:29\n+          StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/structs.rs:+6:2: +6:2\n+      }\n+  }\n+  "}]}