{"sha": "c2677211f65758f19d7051d6f24a34ce0ec44119", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNjc3MjExZjY1NzU4ZjE5ZDcwNTFkNmYyNGEzNGNlMGVjNDQxMTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-02T08:52:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T08:37:14Z"}, "message": "all values can convert to operators", "tree": {"sha": "f16dfbc81f0b14e66f0b0eb1127070b12bab9218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f16dfbc81f0b14e66f0b0eb1127070b12bab9218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2677211f65758f19d7051d6f24a34ce0ec44119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2677211f65758f19d7051d6f24a34ce0ec44119", "html_url": "https://github.com/rust-lang/rust/commit/c2677211f65758f19d7051d6f24a34ce0ec44119", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2677211f65758f19d7051d6f24a34ce0ec44119/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b096f0846ea9423bf44db0d2fa87ede6cb9a7cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b096f0846ea9423bf44db0d2fa87ede6cb9a7cf1", "html_url": "https://github.com/rust-lang/rust/commit/b096f0846ea9423bf44db0d2fa87ede6cb9a7cf1"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "7ae747a735790381f378bd5b68d11ad1fc106224", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c2677211f65758f19d7051d6f24a34ce0ec44119/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2677211f65758f19d7051d6f24a34ce0ec44119/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=c2677211f65758f19d7051d6f24a34ce0ec44119", "patch": "@@ -19,26 +19,26 @@ pub trait Value<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: Copy\n     // Get this value's layout.\n     fn layout(&self) -> TyLayout<'tcx>;\n \n-    // Make this a `MPlaceTy`, or panic if that's not possible.\n-    fn to_mem_place(\n+    // Make this into an `OpTy`.\n+    fn to_op(\n         self,\n-        ectx: &EvalContext<'a, 'mir, 'tcx, M>,\n-    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>>;\n+        ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n+    ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>>;\n \n     // Create this from an `MPlaceTy`.\n     fn from_mem_place(MPlaceTy<'tcx, M::PointerTag>) -> Self;\n \n-    // Read the current enum discriminant, and downcast to that.  Also return the\n-    // variant index.\n+    // Project to the given enum variant.\n     fn project_downcast(\n         self,\n-        ectx: &EvalContext<'a, 'mir, 'tcx, M>\n-    ) -> EvalResult<'tcx, (Self, usize)>;\n+        ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n+        variant: usize,\n+    ) -> EvalResult<'tcx, Self>;\n \n     // Project to the n-th field.\n     fn project_field(\n         self,\n-        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n         field: u64,\n     ) -> EvalResult<'tcx, Self>;\n }\n@@ -53,11 +53,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     }\n \n     #[inline(always)]\n-    fn to_mem_place(\n+    fn to_op(\n         self,\n-        _ectx: &EvalContext<'a, 'mir, 'tcx, M>,\n-    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n-        Ok(self.to_mem_place())\n+        _ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n+    ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        Ok(self)\n     }\n \n     #[inline(always)]\n@@ -68,19 +68,19 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     #[inline(always)]\n     fn project_downcast(\n         self,\n-        ectx: &EvalContext<'a, 'mir, 'tcx, M>\n-    ) -> EvalResult<'tcx, (Self, usize)> {\n-        let idx = ectx.read_discriminant(self)?.1;\n-        Ok((ectx.operand_downcast(self, idx)?, idx))\n+        ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n+        variant: usize,\n+    ) -> EvalResult<'tcx, Self> {\n+        ecx.operand_downcast(self, variant)\n     }\n \n     #[inline(always)]\n     fn project_field(\n         self,\n-        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n         field: u64,\n     ) -> EvalResult<'tcx, Self> {\n-        ectx.operand_field(self, field)\n+        ecx.operand_field(self, field)\n     }\n }\n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n@@ -92,11 +92,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     }\n \n     #[inline(always)]\n-    fn to_mem_place(\n+    fn to_op(\n         self,\n-        _ectx: &EvalContext<'a, 'mir, 'tcx, M>,\n-    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n-        Ok(self)\n+        _ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n+    ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        Ok(self.into())\n     }\n \n     #[inline(always)]\n@@ -107,19 +107,19 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     #[inline(always)]\n     fn project_downcast(\n         self,\n-        ectx: &EvalContext<'a, 'mir, 'tcx, M>\n-    ) -> EvalResult<'tcx, (Self, usize)> {\n-        let idx = ectx.read_discriminant(self.into())?.1;\n-        Ok((ectx.mplace_downcast(self, idx)?, idx))\n+        ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n+        variant: usize,\n+    ) -> EvalResult<'tcx, Self> {\n+        ecx.mplace_downcast(self, variant)\n     }\n \n     #[inline(always)]\n     fn project_field(\n         self,\n-        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n         field: u64,\n     ) -> EvalResult<'tcx, Self> {\n-        ectx.mplace_field(self, field)\n+        ecx.mplace_field(self, field)\n     }\n }\n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n@@ -131,12 +131,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     }\n \n     #[inline(always)]\n-    fn to_mem_place(\n+    fn to_op(\n         self,\n-        ectx: &EvalContext<'a, 'mir, 'tcx, M>,\n-    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n-        // If this refers to a local, assert that it already has an allocation.\n-        Ok(ectx.place_to_op(self)?.to_mem_place())\n+        ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n+    ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        ecx.place_to_op(self)\n     }\n \n     #[inline(always)]\n@@ -147,19 +146,19 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     #[inline(always)]\n     fn project_downcast(\n         self,\n-        ectx: &EvalContext<'a, 'mir, 'tcx, M>\n-    ) -> EvalResult<'tcx, (Self, usize)> {\n-        let idx = ectx.read_discriminant(ectx.place_to_op(self)?)?.1;\n-        Ok((ectx.place_downcast(self, idx)?, idx))\n+        ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n+        variant: usize,\n+    ) -> EvalResult<'tcx, Self> {\n+        ecx.place_downcast(self, variant)\n     }\n \n     #[inline(always)]\n     fn project_field(\n         self,\n-        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n         field: u64,\n     ) -> EvalResult<'tcx, Self> {\n-        ectx.place_field(self, field)\n+        ecx.place_field(self, field)\n     }\n }\n \n@@ -228,7 +227,7 @@ pub trait ValueVisitor<'a, 'mir, 'tcx: 'mir+'a, M: Machine<'a, 'mir, 'tcx>>: Siz\n             MPlaceTy::dangling(v.layout(), self.ecx())\n         } else {\n             // non-ZST array/slice/str cannot be immediate\n-            v.to_mem_place(self.ecx())?\n+            v.to_op(self.ecx())?.to_mem_place()\n         };\n         // Now iterate over it.\n         for (i, field) in self.ecx().mplace_array_fields(mplace)?.enumerate() {\n@@ -243,8 +242,10 @@ pub trait ValueVisitor<'a, 'mir, 'tcx: 'mir+'a, M: Machine<'a, 'mir, 'tcx>>: Siz\n         match v.layout().variants {\n             layout::Variants::NicheFilling { .. } |\n             layout::Variants::Tagged { .. } => {\n-                let (inner, idx) = v.project_downcast(self.ecx())?;\n-                trace!(\"variant layout: {:#?}\", inner.layout());\n+                let op = v.to_op(self.ecx())?;\n+                let idx = self.ecx().read_discriminant(op)?.1;\n+                let inner = v.project_downcast(self.ecx(), idx)?;\n+                trace!(\"walk_value: variant layout: {:#?}\", inner.layout());\n                 // recurse with the inner type\n                 return self.visit_field(v, idx, inner);\n             }\n@@ -256,9 +257,9 @@ pub trait ValueVisitor<'a, 'mir, 'tcx: 'mir+'a, M: Machine<'a, 'mir, 'tcx>>: Siz\n         match v.layout().ty.sty {\n             ty::Dynamic(..) => {\n                 // immediate trait objects are not a thing\n-                let dest = v.to_mem_place(self.ecx())?;\n+                let dest = v.to_op(self.ecx())?.to_mem_place();\n                 let inner = self.ecx().unpack_dyn_trait(dest)?.1;\n-                trace!(\"dyn object layout: {:#?}\", inner.layout);\n+                trace!(\"walk_value: dyn object layout: {:#?}\", inner.layout);\n                 // recurse with the inner type\n                 return self.visit_field(v, 0, Value::from_mem_place(inner));\n             },"}]}