{"sha": "911d205b1fab7cb0b84e1768c1744d89bd2c5c27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMWQyMDViMWZhYjdjYjBiODRlMTc2OGMxNzQ0ZDg5YmQyYzVjMjc=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-06-01T23:42:59Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-06-01T23:42:59Z"}, "message": "On TerminatorKind::DropAndReplace still handle unused_mut correctly", "tree": {"sha": "296a7af037e4866424a8957e59da3fe07e266d0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/296a7af037e4866424a8957e59da3fe07e266d0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/911d205b1fab7cb0b84e1768c1744d89bd2c5c27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/911d205b1fab7cb0b84e1768c1744d89bd2c5c27", "html_url": "https://github.com/rust-lang/rust/commit/911d205b1fab7cb0b84e1768c1744d89bd2c5c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/911d205b1fab7cb0b84e1768c1744d89bd2c5c27/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03ee55bb1c8c2379fdabf68e306186b390444f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/03ee55bb1c8c2379fdabf68e306186b390444f61", "html_url": "https://github.com/rust-lang/rust/commit/03ee55bb1c8c2379fdabf68e306186b390444f61"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "2334bd33694c0232c44ada1486dadc323d6d18b6", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/911d205b1fab7cb0b84e1768c1744d89bd2c5c27/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911d205b1fab7cb0b84e1768c1744d89bd2c5c27/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=911d205b1fab7cb0b84e1768c1744d89bd2c5c27", "patch": "@@ -52,6 +52,24 @@ struct GatherUsedMutsVisitor<'visit, 'cx: 'visit, 'gcx: 'tcx, 'tcx: 'cx> {\n     mbcx: &'visit mut MirBorrowckCtxt<'cx, 'gcx, 'tcx>,\n }\n \n+impl<'visit, 'cx, 'gcx, 'tcx> GatherUsedMutsVisitor<'visit, 'cx, 'gcx, 'tcx> {\n+    fn remove_never_initialized_mut_locals(into: &Place) {\n+        // Remove any locals that we found were initialized from the\n+        // `never_initialized_mut_locals` set. At the end, the only remaining locals will\n+        // be those that were never initialized - we will consider those as being used as\n+        // they will either have been removed by unreachable code optimizations; or linted\n+        // as unused variables.\n+        if let Some(local) = into.base_local() {\n+            debug!(\n+                \"visit_statement: statement={:?} local={:?} \\\n+                 never_initialized_mut_locals={:?}\",\n+                statement, local, self.never_initialized_mut_locals\n+            );\n+            let _ = self.never_initialized_mut_locals.remove(&local);\n+        }\n+    }\n+}\n+\n impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'gcx, 'tcx> {\n     fn visit_terminator_kind(\n         &mut self,\n@@ -61,14 +79,10 @@ impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'c\n         debug!(\"visit_terminator_kind: kind={:?}\", kind);\n         match &kind {\n             TerminatorKind::Call { destination: Some((into, _)), .. } => {\n-                if let Some(local) = into.base_local() {\n-                    debug!(\n-                        \"visit_terminator_kind: kind={:?} local={:?} \\\n-                         never_initialized_mut_locals={:?}\",\n-                        kind, local, self.never_initialized_mut_locals\n-                    );\n-                    let _ = self.never_initialized_mut_locals.remove(&local);\n-                }\n+                self.remove_never_initialized_mut_locals(&into);\n+            },\n+            TerminatorKind::DropAndReplace { location, .. } => {\n+                self.remove_never_initialized_mut_locals(&location);\n             },\n             _ => {},\n         }\n@@ -81,19 +95,7 @@ impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'c\n     ) {\n         match &statement.kind {\n             StatementKind::Assign(into, _) => {\n-                // Remove any locals that we found were initialized from the\n-                // `never_initialized_mut_locals` set. At the end, the only remaining locals will\n-                // be those that were never initialized - we will consider those as being used as\n-                // they will either have been removed by unreachable code optimizations; or linted\n-                // as unused variables.\n-                if let Some(local) = into.base_local() {\n-                    debug!(\n-                        \"visit_statement: statement={:?} local={:?} \\\n-                         never_initialized_mut_locals={:?}\",\n-                        statement, local, self.never_initialized_mut_locals\n-                    );\n-                    let _ = self.never_initialized_mut_locals.remove(&local);\n-                }\n+                self.remove_never_initialized_mut_locals(into);\n             },\n             _ => {},\n         }"}]}