{"sha": "e99447ffbf77b17674dc047e5a9f5aff9480ed1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OTQ0N2ZmYmY3N2IxNzY3NGRjMDQ3ZTVhOWY1YWZmOTQ4MGVkMWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-06T15:11:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-06T15:11:26Z"}, "message": "Merge #4347\n\n4347: Fix usefulness check for never type r=flodiebold a=MikailBag\n\n\n\nCo-authored-by: Mikail Bagishov <bagishov.mikail@yandex.ru>", "tree": {"sha": "ae530ff821ea5345b07bba8cf2ff179f302f8b10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae530ff821ea5345b07bba8cf2ff179f302f8b10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e99447ffbf77b17674dc047e5a9f5aff9480ed1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJestOeCRBK7hj4Ov3rIwAAdHIIABiZVWz/QyHbFQVWX3TwQfQa\nOCSKo5RwuSn51yxim0dNrKYa4ueJ7vpFXJm99Ax3D4OS9xEWHfAy/sQBvznXN9re\nXadX67XyhJASDEz9v8tR9S0qJwnYpxloUbCB9VAzPAlJo00l/fm34cMK8p2Y2kzG\n1PHG4VKX2DaOBxif6/AIJCvXB7uhK7zIRutxM6t9fnqrRXLL2r14tYi7t/xaTBvF\nfDYDu/Z6mOC7kM5SNU3Fg9X2z1LQeXXSg+QUAKRM4h0wFzBUyKSGwWi9ocFDl/t+\n59JmsvaD9/GPUXKnPes0gPNIdD1FLqUtwtICEaX3+dAV+1Q5UC7aHzODydCsA74=\n=zdz4\n-----END PGP SIGNATURE-----\n", "payload": "tree ae530ff821ea5345b07bba8cf2ff179f302f8b10\nparent 1252107a3c7964ac2e5e7726173b56bb4dfbe621\nparent 7c94fa7d01f264e5268ab5f57519f071c00a6579\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588777886 +0000\ncommitter GitHub <noreply@github.com> 1588777886 +0000\n\nMerge #4347\n\n4347: Fix usefulness check for never type r=flodiebold a=MikailBag\n\n\n\nCo-authored-by: Mikail Bagishov <bagishov.mikail@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e99447ffbf77b17674dc047e5a9f5aff9480ed1c", "html_url": "https://github.com/rust-lang/rust/commit/e99447ffbf77b17674dc047e5a9f5aff9480ed1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e99447ffbf77b17674dc047e5a9f5aff9480ed1c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1252107a3c7964ac2e5e7726173b56bb4dfbe621", "url": "https://api.github.com/repos/rust-lang/rust/commits/1252107a3c7964ac2e5e7726173b56bb4dfbe621", "html_url": "https://github.com/rust-lang/rust/commit/1252107a3c7964ac2e5e7726173b56bb4dfbe621"}, {"sha": "7c94fa7d01f264e5268ab5f57519f071c00a6579", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c94fa7d01f264e5268ab5f57519f071c00a6579", "html_url": "https://github.com/rust-lang/rust/commit/7c94fa7d01f264e5268ab5f57519f071c00a6579"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "149f6504241e4a4f502cfca61544199b611783b7", "filename": "crates/ra_hir_ty/src/_match.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e99447ffbf77b17674dc047e5a9f5aff9480ed1c/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99447ffbf77b17674dc047e5a9f5aff9480ed1c/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2F_match.rs?ref=e99447ffbf77b17674dc047e5a9f5aff9480ed1c", "patch": "@@ -573,14 +573,20 @@ pub(crate) fn is_useful(\n     matrix: &Matrix,\n     v: &PatStack,\n ) -> MatchCheckResult<Usefulness> {\n-    // Handle the special case of enums with no variants. In that case, no match\n-    // arm is useful.\n-    if let Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(AdtId::EnumId(enum_id)), .. }) =\n-        cx.infer[cx.match_expr].strip_references()\n-    {\n-        if cx.db.enum_data(*enum_id).variants.is_empty() {\n+    // Handle two special cases:\n+    // - enum with no variants\n+    // - `!` type\n+    // In those cases, no match arm is useful.\n+    match cx.infer[cx.match_expr].strip_references() {\n+        Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(AdtId::EnumId(enum_id)), .. }) => {\n+            if cx.db.enum_data(*enum_id).variants.is_empty() {\n+                return Ok(Usefulness::NotUseful);\n+            }\n+        }\n+        Ty::Apply(ApplicationTy { ctor: TypeCtor::Never, .. }) => {\n             return Ok(Usefulness::NotUseful);\n         }\n+        _ => (),\n     }\n \n     if v.is_empty() {\n@@ -1917,6 +1923,17 @@ mod tests {\n         check_no_diagnostic(content);\n     }\n \n+    #[test]\n+    fn type_never() {\n+        let content = r\"\n+            fn test_fn(never: !) {\n+                match never {}\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n+\n     #[test]\n     fn enum_never_ref() {\n         let content = r\""}]}