{"sha": "1db284ecb0039798a09e53a519219c5c556c9b38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjI4NGVjYjAwMzk3OThhMDllNTNhNTE5MjE5YzVjNTU2YzliMzg=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-09-07T08:38:09Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:33Z"}, "message": "Avoid creating useless projection predicate", "tree": {"sha": "f363f0c9ff4a4bad7beb8d571a2fb317c5bde0b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f363f0c9ff4a4bad7beb8d571a2fb317c5bde0b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db284ecb0039798a09e53a519219c5c556c9b38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db284ecb0039798a09e53a519219c5c556c9b38", "html_url": "https://github.com/rust-lang/rust/commit/1db284ecb0039798a09e53a519219c5c556c9b38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db284ecb0039798a09e53a519219c5c556c9b38/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27534b3932d06959b3d12e8431a0b396c9bd3ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/27534b3932d06959b3d12e8431a0b396c9bd3ded", "html_url": "https://github.com/rust-lang/rust/commit/27534b3932d06959b3d12e8431a0b396c9bd3ded"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "4acc7451a2131399a065829788a1f8f7698a4c62", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1db284ecb0039798a09e53a519219c5c556c9b38/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db284ecb0039798a09e53a519219c5c556c9b38/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=1db284ecb0039798a09e53a519219c5c556c9b38", "patch": "@@ -1205,16 +1205,27 @@ pub fn check_type_bounds<'tcx>(\n     // ParamEnv for normalization specifically.\n     let normalize_param_env = {\n         let mut predicates = param_env.caller_bounds().iter().collect::<Vec<_>>();\n-        predicates.push(\n-            ty::Binder::dummy(ty::ProjectionPredicate {\n-                projection_ty: ty::ProjectionTy {\n-                    item_def_id: trait_ty.def_id,\n-                    substs: rebased_substs,\n-                },\n-                ty: impl_ty_value,\n-            })\n-            .to_predicate(tcx),\n-        );\n+        match impl_ty_value.kind() {\n+            ty::Projection(proj)\n+                if proj.item_def_id == trait_ty.def_id && proj.substs == rebased_substs =>\n+            {\n+                // Don't include this predicate if the projected type is\n+                // exactly the same as the projection. This can occur in\n+                // (somewhat dubious) code like this:\n+                //\n+                // impl<T> X for T where T: X { type Y = <T as X>::Y; }\n+            }\n+            _ => predicates.push(\n+                ty::Binder::dummy(ty::ProjectionPredicate {\n+                    projection_ty: ty::ProjectionTy {\n+                        item_def_id: trait_ty.def_id,\n+                        substs: rebased_substs,\n+                    },\n+                    ty: impl_ty_value,\n+                })\n+                .to_predicate(tcx),\n+            ),\n+        };\n         ty::ParamEnv::new(tcx.intern_predicates(&predicates), Reveal::UserFacing)\n     };\n "}]}