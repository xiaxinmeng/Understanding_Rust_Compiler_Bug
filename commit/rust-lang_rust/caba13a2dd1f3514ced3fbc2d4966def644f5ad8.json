{"sha": "caba13a2dd1f3514ced3fbc2d4966def644f5ad8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYmExM2EyZGQxZjM1MTRjZWQzZmJjMmQ0OTY2ZGVmNjQ0ZjVhZDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-27T21:05:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-27T21:05:31Z"}, "message": "Simplify", "tree": {"sha": "569d8a69fc7feb6ea36af3d1dbcf684c5f06c327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569d8a69fc7feb6ea36af3d1dbcf684c5f06c327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caba13a2dd1f3514ced3fbc2d4966def644f5ad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caba13a2dd1f3514ced3fbc2d4966def644f5ad8", "html_url": "https://github.com/rust-lang/rust/commit/caba13a2dd1f3514ced3fbc2d4966def644f5ad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caba13a2dd1f3514ced3fbc2d4966def644f5ad8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d280c72338313ed7d900a9dad05923d344b5fa86", "url": "https://api.github.com/repos/rust-lang/rust/commits/d280c72338313ed7d900a9dad05923d344b5fa86", "html_url": "https://github.com/rust-lang/rust/commit/d280c72338313ed7d900a9dad05923d344b5fa86"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "38a4657aab975b1e2452b415113f2b596ae4cf42", "filename": "src/parser/event_parser/grammar/items.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/caba13a2dd1f3514ced3fbc2d4966def644f5ad8/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caba13a2dd1f3514ced3fbc2d4966def644f5ad8/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs?ref=caba13a2dd1f3514ced3fbc2d4966def644f5ad8", "patch": "@@ -45,19 +45,14 @@ fn item(p: &mut Parser) {\n         }\n         err_token => {\n             item.abandon(p);\n-            let err = p.start();\n             let message = if err_token == SEMI {\n                 //TODO: if the item is incomplete, this message is misleading\n                 \"expected item, found `;`\\n\\\n                 consider removing this semicolon\"\n             } else {\n                 \"expected item\"\n             };\n-            p.error()\n-                .message(message)\n-                .emit();\n-            p.bump();\n-            err.complete(p, ERROR);\n+            p.err_and_bump(message);\n             return;\n         }\n     };\n@@ -127,7 +122,7 @@ fn pos_fields(p: &mut Parser) {\n     if !p.expect(L_PAREN) {\n         return;\n     }\n-    while !(p.at(R_PAREN) || p.at(EOF)) {\n+    while !p.at(R_PAREN) && !p.at(EOF) {\n         let pos_field = p.start();\n         visibility(p);\n         types::type_ref(p);\n@@ -173,7 +168,7 @@ fn use_item(p: &mut Parser) {\n     use_tree(p);\n     p.expect(SEMI);\n \n-    fn use_tree(p: &mut Parser) -> bool {\n+    fn use_tree(p: &mut Parser){\n         let la = p.raw_lookahead(1);\n         let m = p.start();\n         match (p.current(), la) {\n@@ -216,16 +211,23 @@ fn use_item(p: &mut Parser) {\n             }\n             _ => {\n                 m.abandon(p);\n-                return false\n+                p.err_and_bump(\"expected one of `*`, `::`, `{`, `self`, `super`, `indent`\");\n+                return;\n             },\n         }\n         m.complete(p, USE_TREE);\n-        return true;\n     }\n \n     fn nested_trees(p: &mut Parser) {\n         assert!(p.at(L_CURLY));\n-        p.curly_block(|p| comma_list(p, EOF, use_tree));\n+        p.bump();\n+        while !p.at(EOF) && !p.at(R_CURLY) {\n+            use_tree(p);\n+            if !p.at(R_CURLY) {\n+                p.expect(COMMA);\n+            }\n+        }\n+        p.expect(R_CURLY);\n     }\n }\n "}, {"sha": "67773453be2faa7e87adf4c97da84cb84723ee39", "filename": "src/parser/event_parser/grammar/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/caba13a2dd1f3514ced3fbc2d4966def644f5ad8/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caba13a2dd1f3514ced3fbc2d4966def644f5ad8/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs?ref=caba13a2dd1f3514ced3fbc2d4966def644f5ad8", "patch": "@@ -84,6 +84,15 @@ impl<'p> Parser<'p> {\n         l.is_ahead(self)\n     }\n \n+    fn err_and_bump(&mut self, message: &str) {\n+        let err = self.start();\n+        self.error()\n+            .message(message)\n+            .emit();\n+        self.bump();\n+        err.complete(self, ERROR);\n+    }\n+\n     pub(crate) fn expect(&mut self, kind: SyntaxKind) -> bool {\n         if self.at(kind) {\n             self.bump();"}]}