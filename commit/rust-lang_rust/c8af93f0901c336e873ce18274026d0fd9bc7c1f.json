{"sha": "c8af93f0901c336e873ce18274026d0fd9bc7c1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YWY5M2YwOTAxYzMzNmU4NzNjZTE4Mjc0MDI2ZDBmZDliYzdjMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-18T04:45:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-18T04:45:25Z"}, "message": "Auto merge of #38168 - estebank:help-E0034, r=nrc\n\nE0034: provide disambiguated syntax for candidates\n\nFor a given file\n\n```rust\ntrait A { fn foo(&self) {} }\ntrait B : A { fn foo(&self) {} }\n\nfn bar<T: B>(a: &T) {\n  a.foo()\n}\n```\n\nprovide the following output\n\n```\nerror[E0034]: multiple applicable items in scope\n --> file.rs:6:5\n  |\n6 |   a.foo(1)\n  |     ^^^ multiple `foo` found\n  |\nnote: candidate #1 is defined in the trait `A`\n --> file.rs:2:11\n  |\n2 | trait A { fn foo(&self, a: usize) {} }\n  |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: to use it here write `A::foo(&a, 1)` instead\n --> file.rs:6:5\n  |\n6 |   a.foo(1)\n  |     ^^^\nnote: candidate #2 is defined in the trait `B`\n --> file.rs:3:15\n  |\n3 | trait B : A { fn foo(&self, a: usize) {} }\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: to use it here write `B::foo(&a, 1)` instead\n --> file.rs:6:5\n  |\n6 |   a.foo(1)\n  |     ^^^\n```\n\nFix #37767.", "tree": {"sha": "f2a4fd67379bc004f4b2bcbf78d33f68b96d836a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a4fd67379bc004f4b2bcbf78d33f68b96d836a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8af93f0901c336e873ce18274026d0fd9bc7c1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8af93f0901c336e873ce18274026d0fd9bc7c1f", "html_url": "https://github.com/rust-lang/rust/commit/c8af93f0901c336e873ce18274026d0fd9bc7c1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8af93f0901c336e873ce18274026d0fd9bc7c1f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be1daa4a18b6685f42194ea1407f8d5def10b342", "url": "https://api.github.com/repos/rust-lang/rust/commits/be1daa4a18b6685f42194ea1407f8d5def10b342", "html_url": "https://github.com/rust-lang/rust/commit/be1daa4a18b6685f42194ea1407f8d5def10b342"}, {"sha": "f595ea25841eab1139ca10c5fe0349e51cc2b6c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f595ea25841eab1139ca10c5fe0349e51cc2b6c5", "html_url": "https://github.com/rust-lang/rust/commit/f595ea25841eab1139ca10c5fe0349e51cc2b6c5"}], "stats": {"total": 232, "additions": 224, "deletions": 8}, "files": [{"sha": "b02bb7c6e4dd803f17d796604d63d3193d9a5105", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c8af93f0901c336e873ce18274026d0fd9bc7c1f", "patch": "@@ -1121,6 +1121,17 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn is_mutable_pointer(&self) -> bool {\n+        match self.sty {\n+            TyRawPtr(tnm) | TyRef(_, tnm) => if let hir::Mutability::MutMutable = tnm.mutbl {\n+                true\n+            } else {\n+                false\n+            },\n+            _ => false\n+        }\n+    }\n+\n     pub fn is_unsafe_ptr(&self) -> bool {\n         match self.sty {\n             TyRawPtr(_) => return true,"}, {"sha": "b1705425e6eb0cdd77501f93cfe76b1f6a2a99f5", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c8af93f0901c336e873ce18274026d0fd9bc7c1f", "patch": "@@ -27,6 +27,7 @@ use errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n use rustc::hir;\n+use rustc::hir::print;\n use rustc::infer::type_variable::TypeVariableOrigin;\n \n use std::cell;\n@@ -71,7 +72,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                rcvr_ty: Ty<'tcx>,\n                                item_name: ast::Name,\n                                rcvr_expr: Option<&hir::Expr>,\n-                               error: MethodError<'tcx>) {\n+                               error: MethodError<'tcx>,\n+                               args: Option<&'gcx [hir::Expr]>) {\n         // avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n             return;\n@@ -131,6 +133,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                    \"candidate #{} is defined in the trait `{}`\",\n                                    idx + 1,\n                                    self.tcx.item_path_str(trait_did));\n+                        err.help(&format!(\"to disambiguate the method call, write `{}::{}({}{})` \\\n+                                          instead\",\n+                                          self.tcx.item_path_str(trait_did),\n+                                          item_name,\n+                                          if rcvr_ty.is_region_ptr() && args.is_some() {\n+                                              if rcvr_ty.is_mutable_pointer() {\n+                                                  \"&mut \"\n+                                              } else {\n+                                                  \"&\"\n+                                              }\n+                                          } else {\n+                                              \"\"\n+                                          },\n+                                          args.map(|arg| arg.iter()\n+                                              .map(|arg| print::to_string(print::NO_ANN,\n+                                                                          |s| s.print_expr(arg)))\n+                                              .collect::<Vec<_>>()\n+                                              .join(\", \")).unwrap_or(\"...\".to_owned())));\n                     }\n                 }\n             }"}, {"sha": "e240c70aaa3a56baf77c2959f0dd7e319d1504b0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c8af93f0901c336e873ce18274026d0fd9bc7c1f", "patch": "@@ -2867,8 +2867,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n             Err(error) => {\n                 if method_name.node != keywords::Invalid.name() {\n-                    self.report_method_error(method_name.span, expr_t,\n-                                             method_name.node, Some(rcvr), error);\n+                    self.report_method_error(method_name.span,\n+                                             expr_t,\n+                                             method_name.node,\n+                                             Some(rcvr),\n+                                             error,\n+                                             Some(args));\n                 }\n                 self.write_error(expr.id);\n                 self.tcx.types.err\n@@ -4051,7 +4055,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     _ => Def::Err,\n                 };\n                 if item_name != keywords::Invalid.name() {\n-                    self.report_method_error(span, ty, item_name, None, error);\n+                    self.report_method_error(span, ty, item_name, None, error, None);\n                 }\n                 def\n             }"}, {"sha": "49ad40259d91f7ac42e0ce492c534eb5637d119c", "filename": "src/test/ui/span/issue-37767.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Ftest%2Fui%2Fspan%2Fissue-37767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Ftest%2Fui%2Fspan%2Fissue-37767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-37767.rs?ref=c8af93f0901c336e873ce18274026d0fd9bc7c1f", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait A {\n+    fn foo(&mut self) {}\n+}\n+\n+trait B : A {\n+    fn foo(&mut self) {}\n+}\n+\n+fn bar<T: B>(a: &T) {\n+    a.foo()\n+}\n+\n+trait C {\n+    fn foo(&self) {}\n+}\n+\n+trait D : C {\n+    fn foo(&self) {}\n+}\n+\n+fn quz<T: D>(a: &T) {\n+    a.foo()\n+}\n+\n+trait E : Sized {\n+    fn foo(self) {}\n+}\n+\n+trait F : E {\n+    fn foo(self) {}\n+}\n+\n+fn foo<T: F>(a: T) {\n+    a.foo()\n+}\n+\n+fn pass<T: C>(a: &T) {\n+    a.foo()\n+}\n+\n+fn main() {}"}, {"sha": "7cf74eaab8db12c65c7ed2e1266edc152643919d", "filename": "src/test/ui/span/issue-37767.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr?ref=c8af93f0901c336e873ce18274026d0fd9bc7c1f", "patch": "@@ -0,0 +1,59 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/issue-37767.rs:20:7\n+   |\n+20 |     a.foo()\n+   |       ^^^ multiple `foo` found\n+   |\n+note: candidate #1 is defined in the trait `A`\n+  --> $DIR/issue-37767.rs:12:5\n+   |\n+12 |     fn foo(&mut self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `A::foo(&a)` instead\n+note: candidate #2 is defined in the trait `B`\n+  --> $DIR/issue-37767.rs:16:5\n+   |\n+16 |     fn foo(&mut self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `B::foo(&a)` instead\n+\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/issue-37767.rs:32:7\n+   |\n+32 |     a.foo()\n+   |       ^^^ multiple `foo` found\n+   |\n+note: candidate #1 is defined in the trait `C`\n+  --> $DIR/issue-37767.rs:24:5\n+   |\n+24 |     fn foo(&self) {}\n+   |     ^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `C::foo(&a)` instead\n+note: candidate #2 is defined in the trait `D`\n+  --> $DIR/issue-37767.rs:28:5\n+   |\n+28 |     fn foo(&self) {}\n+   |     ^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `D::foo(&a)` instead\n+\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/issue-37767.rs:44:7\n+   |\n+44 |     a.foo()\n+   |       ^^^ multiple `foo` found\n+   |\n+note: candidate #1 is defined in the trait `E`\n+  --> $DIR/issue-37767.rs:36:5\n+   |\n+36 |     fn foo(self) {}\n+   |     ^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `E::foo(a)` instead\n+note: candidate #2 is defined in the trait `F`\n+  --> $DIR/issue-37767.rs:40:5\n+   |\n+40 |     fn foo(self) {}\n+   |     ^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `F::foo(a)` instead\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "2d271f0bf1708a1b16631e37c56ab90496aeffdd", "filename": "src/test/ui/span/issue-7575.rs", "status": "renamed", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs?ref=c8af93f0901c336e873ce18274026d0fd9bc7c1f", "patch": "@@ -73,15 +73,19 @@ impl ManyImplTrait for Myisize {}\n fn no_param_bound(u: usize, m: Myisize) -> usize {\n     u.f8(42) + u.f9(342) + m.fff(42)\n             //~^ ERROR no method named `f9` found for type `usize` in the current scope\n-            //~^^ NOTE found the following associated functions; to be used as methods, functions must have a `self` parameter\n-            //~^^^ ERROR no method named `fff` found for type `Myisize` in the current scope\n-            //~^^^^ NOTE found the following associated functions; to be used as methods, functions must have a `self` parameter\n+            //~| NOTE found the following associated functions; to be used as methods, functions must have a `self` parameter\n+            //~| NOTE to use it here write `CtxtFn::f9(u, 342)` instead\n+            //~| ERROR no method named `fff` found for type `Myisize` in the current scope\n+            //~| NOTE found the following associated functions; to be used as methods, functions must have a `self` parameter\n+            //~| NOTE to use it here write `OtherTrait::f9(u, 342)` instead\n+            //~| NOTE to use it here write `UnusedTrait::f9(u, 342)` instead\n }\n \n fn param_bound<T: ManyImplTrait>(t: T) -> bool {\n     t.is_str()\n     //~^ ERROR no method named `is_str` found for type `T` in the current scope\n-    //~^^ NOTE found the following associated functions; to be used as methods, functions must have a `self` parameter\n+    //~| NOTE found the following associated functions; to be used as methods, functions must have a `self` parameter\n+    //~| NOTE to use it here write `ManyImplTrait::is_str(t)` instead\n }\n \n fn main() {", "previous_filename": "src/test/compile-fail/issue-7575.rs"}, {"sha": "765aceffe655b54c9fb3de9c059026e867e5f06d", "filename": "src/test/ui/span/issue-7575.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8af93f0901c336e873ce18274026d0fd9bc7c1f/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=c8af93f0901c336e873ce18274026d0fd9bc7c1f", "patch": "@@ -0,0 +1,67 @@\n+error: no method named `f9` found for type `usize` in the current scope\n+  --> $DIR/issue-7575.rs:74:18\n+   |\n+74 |     u.f8(42) + u.f9(342) + m.fff(42)\n+   |                  ^^\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: candidate #1 is defined in the trait `CtxtFn`\n+  --> $DIR/issue-7575.rs:16:5\n+   |\n+16 |     fn f9(usize) -> usize; //~ NOTE candidate\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `CtxtFn::f9(u, 342)` instead\n+note: candidate #2 is defined in the trait `OtherTrait`\n+  --> $DIR/issue-7575.rs:20:5\n+   |\n+20 |     fn f9(usize) -> usize; //~ NOTE candidate\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `OtherTrait::f9(u, 342)` instead\n+note: candidate #3 is defined in the trait `UnusedTrait`\n+  --> $DIR/issue-7575.rs:29:5\n+   |\n+29 |     fn f9(usize) -> usize; //~ NOTE candidate\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `UnusedTrait::f9(u, 342)` instead\n+   = help: items from traits can only be used if the trait is implemented and in scope; the following traits define an item `f9`, perhaps you need to implement one of them:\n+   = help: candidate #1: `CtxtFn`\n+   = help: candidate #2: `OtherTrait`\n+   = help: candidate #3: `UnusedTrait`\n+\n+error: no method named `fff` found for type `Myisize` in the current scope\n+  --> $DIR/issue-7575.rs:74:30\n+   |\n+74 |     u.f8(42) + u.f9(342) + m.fff(42)\n+   |                              ^^^\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: candidate #1 is defined in an impl for the type `Myisize`\n+  --> $DIR/issue-7575.rs:51:5\n+   |\n+51 |       fn fff(i: isize) -> isize { //~ NOTE candidate\n+   |  _____^ starting here...\n+52 | |         i\n+53 | |     }\n+   | |_____^ ...ending here\n+\n+error: no method named `is_str` found for type `T` in the current scope\n+  --> $DIR/issue-7575.rs:85:7\n+   |\n+85 |     t.is_str()\n+   |       ^^^^^^\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: candidate #1 is defined in the trait `ManyImplTrait`\n+  --> $DIR/issue-7575.rs:57:5\n+   |\n+57 |       fn is_str() -> bool { //~ NOTE candidate\n+   |  _____^ starting here...\n+58 | |         false\n+59 | |     }\n+   | |_____^ ...ending here\n+   = help: to disambiguate the method call, write `ManyImplTrait::is_str(t)` instead\n+   = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `is_str`, perhaps you need to implement it:\n+   = help: candidate #1: `ManyImplTrait`\n+\n+error: aborting due to 3 previous errors\n+"}]}