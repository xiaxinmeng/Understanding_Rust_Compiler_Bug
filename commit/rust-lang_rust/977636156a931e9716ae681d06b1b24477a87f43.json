{"sha": "977636156a931e9716ae681d06b1b24477a87f43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NzYzNjE1NmE5MzFlOTcxNmFlNjgxZDA2YjFiMjQ0NzdhODdmNDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-16T19:00:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:19Z"}, "message": "unit-test symbol-names and item-paths", "tree": {"sha": "9e03f58b854cd584e841e1c58592cbfcc43e0848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e03f58b854cd584e841e1c58592cbfcc43e0848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977636156a931e9716ae681d06b1b24477a87f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977636156a931e9716ae681d06b1b24477a87f43", "html_url": "https://github.com/rust-lang/rust/commit/977636156a931e9716ae681d06b1b24477a87f43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977636156a931e9716ae681d06b1b24477a87f43/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2291abf313b1c619a34694e1756ddaf2a5cb34d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2291abf313b1c619a34694e1756ddaf2a5cb34d9", "html_url": "https://github.com/rust-lang/rust/commit/2291abf313b1c619a34694e1756ddaf2a5cb34d9"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "85f3bed52544ad26afae47a433511e86ad1aec3e", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/977636156a931e9716ae681d06b1b24477a87f43/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977636156a931e9716ae681d06b1b24477a87f43/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=977636156a931e9716ae681d06b1b24477a87f43", "patch": "@@ -85,6 +85,7 @@ use trans::machine::{llalign_of_min, llsize_of, llsize_of_real};\n use trans::meth;\n use trans::mir;\n use trans::monomorphize::{self, Instance};\n+use trans::symbol_names_test;\n use trans::tvec;\n use trans::type_::Type;\n use trans::type_of;\n@@ -2758,6 +2759,8 @@ pub fn trans_crate<'tcx>(tcx: &TyCtxt<'tcx>,\n         }\n \n         collector::print_collection_results(&ccx);\n+\n+        symbol_names_test::report_symbol_names(&ccx);\n     }\n \n     emit_link_guard_if_necessary(&shared_ccx);"}, {"sha": "5c38de99da355a1598e708a550ab6f985bd26cbd", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/977636156a931e9716ae681d06b1b24477a87f43/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977636156a931e9716ae681d06b1b24477a87f43/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=977636156a931e9716ae681d06b1b24477a87f43", "patch": "@@ -60,6 +60,7 @@ mod meth;\n mod mir;\n mod monomorphize;\n mod collector;\n+mod symbol_names_test;\n mod tvec;\n mod type_;\n mod type_of;"}, {"sha": "2b3faa3786e3585fc1f3df6469be80e5dfff18a8", "filename": "src/librustc_trans/trans/symbol_names_test.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/977636156a931e9716ae681d06b1b24477a87f43/src%2Flibrustc_trans%2Ftrans%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977636156a931e9716ae681d06b1b24477a87f43/src%2Flibrustc_trans%2Ftrans%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fsymbol_names_test.rs?ref=977636156a931e9716ae681d06b1b24477a87f43", "patch": "@@ -0,0 +1,84 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Walks the crate looking for items/impl-items/trait-items that have\n+//! either a `rustc_symbol_name` or `rustc_item_path` attribute and\n+//! generates an error giving, respectively, the symbol name or\n+//! item-path. This is used for unit testing the code that generates\n+//! paths etc in all kinds of annoying scenarios.\n+\n+use back::symbol_names;\n+use rustc::middle::ty::TyCtxt;\n+use rustc_front::hir;\n+use rustc_front::intravisit::{self, Visitor};\n+use syntax::ast;\n+use syntax::attr::AttrMetaMethods;\n+use trans::common::CrateContext;\n+\n+const SYMBOL_NAME: &'static str = \"rustc_symbol_name\";\n+const ITEM_PATH: &'static str = \"rustc_item_path\";\n+\n+pub fn report_symbol_names(ccx: &CrateContext) {\n+    // if the `rustc_attrs` feature is not enabled, then the\n+    // attributes we are interested in cannot be present anyway, so\n+    // skip the walk.\n+    let tcx = ccx.tcx();\n+    if !tcx.sess.features.borrow().rustc_attrs {\n+        return;\n+    }\n+\n+    let _ignore = tcx.dep_graph.in_ignore();\n+    let mut visitor = SymbolNamesTest { ccx: ccx, tcx: tcx };\n+    tcx.map.krate().visit_all_items(&mut visitor);\n+}\n+\n+struct SymbolNamesTest<'a, 'tcx:'a> {\n+    ccx: &'a CrateContext<'a, 'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n+}\n+\n+impl<'a, 'tcx> SymbolNamesTest<'a, 'tcx> {\n+    fn process_attrs(&mut self,\n+                     node_id: ast::NodeId) {\n+        let def_id = self.tcx.map.local_def_id(node_id);\n+        for attr in self.tcx.get_attrs(def_id).iter() {\n+            if attr.check_name(SYMBOL_NAME) {\n+                // for now, just monomorphic names\n+                let name = symbol_names::exported_name(self.ccx, def_id, &[]);\n+                self.tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", name));\n+            } else if attr.check_name(ITEM_PATH) {\n+                let path = self.tcx.item_path_str(def_id);\n+                self.tcx.sess.span_err(attr.span, &format!(\"item-path({})\", path));\n+            }\n+\n+            // (*) The formatting of `tag({})` is chosen so that tests can elect\n+            // to test the entirety of the string, if they choose, or else just\n+            // some subset.\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for SymbolNamesTest<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+        self.process_attrs(item.id);\n+        intravisit::walk_item(self, item);\n+    }\n+\n+    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n+        self.process_attrs(ti.id);\n+        intravisit::walk_trait_item(self, ti)\n+    }\n+\n+    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n+        self.process_attrs(ii.id);\n+        intravisit::walk_impl_item(self, ii)\n+    }\n+}\n+"}, {"sha": "80e1ae111a2d8f982f10d0bcf7d03e177996755f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/977636156a931e9716ae681d06b1b24477a87f43/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977636156a931e9716ae681d06b1b24477a87f43/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=977636156a931e9716ae681d06b1b24477a87f43", "patch": "@@ -349,6 +349,10 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n                                        \"the `#[rustc_if_this_changed]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\")),\n+    (\"rustc_symbol_name\", Whitelisted, Gated(\"rustc_attrs\",\n+                                       \"internal rustc attributes will never be stable\")),\n+    (\"rustc_item_path\", Whitelisted, Gated(\"rustc_attrs\",\n+                                       \"internal rustc attributes will never be stable\")),\n     (\"rustc_move_fragments\", Normal, Gated(\"rustc_attrs\",\n                                            \"the `#[rustc_move_fragments]` attribute \\\n                                             is just used for rustc unit tests \\\n@@ -579,6 +583,7 @@ pub struct Features {\n     pub const_indexing: bool,\n     pub static_recursion: bool,\n     pub default_type_parameter_fallback: bool,\n+    pub rustc_attrs: bool,\n     pub type_macros: bool,\n     pub cfg_target_feature: bool,\n     pub cfg_target_vendor: bool,\n@@ -614,6 +619,7 @@ impl Features {\n             const_indexing: false,\n             static_recursion: false,\n             default_type_parameter_fallback: false,\n+            rustc_attrs: false,\n             type_macros: false,\n             cfg_target_feature: false,\n             cfg_target_vendor: false,\n@@ -1225,6 +1231,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &Handler,\n         const_indexing: cx.has_feature(\"const_indexing\"),\n         static_recursion: cx.has_feature(\"static_recursion\"),\n         default_type_parameter_fallback: cx.has_feature(\"default_type_parameter_fallback\"),\n+        rustc_attrs: cx.has_feature(\"rustc_attrs\"),\n         type_macros: cx.has_feature(\"type_macros\"),\n         cfg_target_feature: cx.has_feature(\"cfg_target_feature\"),\n         cfg_target_vendor: cx.has_feature(\"cfg_target_vendor\"),"}, {"sha": "0095774fcb8d2addb751e781bf0a632f1dfacff2", "filename": "src/test/compile-fail/symbol-names/basic.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/977636156a931e9716ae681d06b1b24477a87f43/src%2Ftest%2Fcompile-fail%2Fsymbol-names%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977636156a931e9716ae681d06b1b24477a87f43/src%2Ftest%2Fcompile-fail%2Fsymbol-names%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsymbol-names%2Fbasic.rs?ref=977636156a931e9716ae681d06b1b24477a87f43", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_symbol_name] //~ ERROR _ZN5basic4main\n+#[rustc_item_path] //~ ERROR item-path(main)\n+fn main() {\n+}"}, {"sha": "39bee26da20b8b1e0de20e4982903191f1edc645", "filename": "src/test/compile-fail/symbol-names/impl1.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/977636156a931e9716ae681d06b1b24477a87f43/src%2Ftest%2Fcompile-fail%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977636156a931e9716ae681d06b1b24477a87f43/src%2Ftest%2Fcompile-fail%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsymbol-names%2Fimpl1.rs?ref=977636156a931e9716ae681d06b1b24477a87f43", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod foo {\n+    pub struct Foo { x: u32 }\n+\n+    impl Foo {\n+        #[rustc_symbol_name] //~ ERROR _ZN5impl13foo3Foo3bar\n+        #[rustc_item_path] //~ ERROR item-path(foo::Foo::bar)\n+        fn bar() { }\n+    }\n+}\n+\n+mod bar {\n+    use foo::Foo;\n+\n+    impl Foo {\n+        #[rustc_symbol_name] //~ ERROR _ZN5impl13bar26_$LT$impl$u20$foo..Foo$GT$3baz\n+        #[rustc_item_path] //~ ERROR item-path(bar::<impl foo::Foo>::baz)\n+        fn baz() { }\n+    }\n+}\n+\n+fn main() {\n+}"}]}