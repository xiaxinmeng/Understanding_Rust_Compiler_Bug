{"sha": "865c2dba30cee0d61ca0073aaf5fd32587887674", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NWMyZGJhMzBjZWUwZDYxY2EwMDczYWFmNWZkMzI1ODc4ODc2NzQ=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-11-23T02:34:11Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-11-23T22:24:00Z"}, "message": "add MoveItems to RingBuf, fixes #19085", "tree": {"sha": "741110d226e812f7d346866da2531c964fc3a943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/741110d226e812f7d346866da2531c964fc3a943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/865c2dba30cee0d61ca0073aaf5fd32587887674", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/865c2dba30cee0d61ca0073aaf5fd32587887674", "html_url": "https://github.com/rust-lang/rust/commit/865c2dba30cee0d61ca0073aaf5fd32587887674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/865c2dba30cee0d61ca0073aaf5fd32587887674/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4389ee3893c82fc2b6b33eeb5555cc1744f6da4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4389ee3893c82fc2b6b33eeb5555cc1744f6da4a", "html_url": "https://github.com/rust-lang/rust/commit/4389ee3893c82fc2b6b33eeb5555cc1744f6da4a"}], "stats": {"total": 110, "additions": 102, "deletions": 8}, "files": [{"sha": "78e0bb19b4cd49777870c325a7a04df3810258d1", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 102, "deletions": 8, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/865c2dba30cee0d61ca0073aaf5fd32587887674/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865c2dba30cee0d61ca0073aaf5fd32587887674/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=865c2dba30cee0d61ca0073aaf5fd32587887674", "patch": "@@ -34,8 +34,6 @@ static MINIMUM_CAPACITY: uint = 2u;\n \n // FIXME(conventions): implement shrink_to_fit. Awkward with the current design, but it should\n // be scrapped anyway. Defer to rewrite?\n-// FIXME(conventions): implement into_iter\n-\n \n /// `RingBuf` is a circular buffer that implements `Deque`.\n pub struct RingBuf<T> {\n@@ -394,6 +392,14 @@ impl<T> RingBuf<T> {\n         }\n     }\n \n+    /// Consumes the list into an iterator yielding elements by value.\n+    #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+    pub fn into_iter(self) -> MoveItems<T> {\n+        MoveItems {\n+            inner: self,\n+        }\n+    }\n+\n     /// Returns the number of elements in the `RingBuf`.\n     ///\n     /// # Example\n@@ -737,11 +743,9 @@ impl<'a, T> Iterator<&'a mut T> for MutItems<'a, T> {\n         }\n         let tail = self.tail;\n         self.tail = wrap_index(self.tail + 1, self.cap);\n-        if mem::size_of::<T>() != 0 {\n-            unsafe { Some(&mut *self.ptr.offset(tail as int)) }\n-        } else {\n-            // use a non-zero pointer\n-            Some(unsafe { mem::transmute(1u) })\n+\n+        unsafe {\n+            Some(&mut *self.ptr.offset(tail as int))\n         }\n     }\n \n@@ -759,12 +763,43 @@ impl<'a, T> DoubleEndedIterator<&'a mut T> for MutItems<'a, T> {\n             return None;\n         }\n         self.head = wrap_index(self.head - 1, self.cap);\n-        unsafe { Some(&mut *self.ptr.offset(self.head as int)) }\n+\n+        unsafe {\n+            Some(&mut *self.ptr.offset(self.head as int))\n+        }\n     }\n }\n \n impl<'a, T> ExactSize<&'a mut T> for MutItems<'a, T> {}\n \n+// A by-value RingBuf iterator\n+pub struct MoveItems<T> {\n+    inner: RingBuf<T>,\n+}\n+\n+impl<T> Iterator<T> for MoveItems<T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<T> {\n+        self.inner.pop_front()\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let len = self.inner.len();\n+        (len, Some(len))\n+    }\n+}\n+\n+impl<T> DoubleEndedIterator<T> for MoveItems<T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<T> {\n+        self.inner.pop_back()\n+    }\n+}\n+\n+\n+impl<T> ExactSize<T> for MoveItems<T> {}\n+\n impl<A: PartialEq> PartialEq for RingBuf<A> {\n     fn eq(&self, other: &RingBuf<A>) -> bool {\n         self.len() == other.len() &&\n@@ -1314,6 +1349,65 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_into_iter() {\n+\n+        // Empty iter\n+        {\n+            let d: RingBuf<int> = RingBuf::new();\n+            let mut iter = d.into_iter();\n+\n+            assert_eq!(iter.size_hint(), (0, Some(0)));\n+            assert_eq!(iter.next(), None);\n+            assert_eq!(iter.size_hint(), (0, Some(0)));\n+        }\n+\n+        // simple iter\n+        {\n+            let mut d = RingBuf::new();\n+            for i in range(0i, 5) {\n+                d.push_back(i);\n+            }\n+\n+            let b = vec![0,1,2,3,4];\n+            assert_eq!(d.into_iter().collect::<Vec<int>>(), b);\n+        }\n+\n+        // wrapped iter\n+        {\n+            let mut d = RingBuf::new();\n+            for i in range(0i, 5) {\n+                d.push_back(i);\n+            }\n+            for i in range(6, 9) {\n+                d.push_front(i);\n+            }\n+\n+            let b = vec![8,7,6,0,1,2,3,4];\n+            assert_eq!(d.into_iter().collect::<Vec<int>>(), b);\n+        }\n+\n+        // partially used\n+        {\n+            let mut d = RingBuf::new();\n+            for i in range(0i, 5) {\n+                d.push_back(i);\n+            }\n+            for i in range(6, 9) {\n+                d.push_front(i);\n+            }\n+\n+            let mut it = d.into_iter();\n+            assert_eq!(it.size_hint(), (8, Some(8)));\n+            assert_eq!(it.next(), Some(8));\n+            assert_eq!(it.size_hint(), (7, Some(7)));\n+            assert_eq!(it.next_back(), Some(4));\n+            assert_eq!(it.size_hint(), (6, Some(6)));\n+            assert_eq!(it.next(), Some(7));\n+            assert_eq!(it.size_hint(), (5, Some(5)));\n+        }\n+    }\n+\n     #[test]\n     fn test_from_iter() {\n         use std::iter;"}]}