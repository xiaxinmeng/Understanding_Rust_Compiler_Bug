{"sha": "ffd03b3caaf182a4c0b456cd04c27041e8038aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZDAzYjNjYWFmMTgyYTRjMGI0NTZjZDA0YzI3MDQxZTgwMzhhYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-09T08:48:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-09T08:48:40Z"}, "message": "Auto merge of #1418 - divergentdave:file-sync, r=RalfJung\n\nAdd file sync shims\n\nThis PR adds shim implementations for these related file syncing functions.\n* `fsync`, for POSIX targets, backed by `File::sync_all()`\n* `fdatasync`, for POSIX targets, backed by `File::sync_data()`\n* `fcntl` with command `F_FULLFSYNC`, for macOS targets, backed by `File::sync_all()`\n* `sync_file_range`, for Linux targets, backed by `File::sync_data()`", "tree": {"sha": "8863c66ece2612f8e9cfc2b108133254d877289a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8863c66ece2612f8e9cfc2b108133254d877289a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffd03b3caaf182a4c0b456cd04c27041e8038aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd03b3caaf182a4c0b456cd04c27041e8038aaf", "html_url": "https://github.com/rust-lang/rust/commit/ffd03b3caaf182a4c0b456cd04c27041e8038aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09b5755fff2aa938714d7d9cc17696591e5fe677", "url": "https://api.github.com/repos/rust-lang/rust/commits/09b5755fff2aa938714d7d9cc17696591e5fe677", "html_url": "https://github.com/rust-lang/rust/commit/09b5755fff2aa938714d7d9cc17696591e5fe677"}, {"sha": "a60c130b0d4e1caecd525682c320224023bdf4a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a60c130b0d4e1caecd525682c320224023bdf4a5", "html_url": "https://github.com/rust-lang/rust/commit/a60c130b0d4e1caecd525682c320224023bdf4a5"}], "stats": {"total": 178, "additions": 177, "deletions": 1}, "files": [{"sha": "8e4d140b06cb266bf5149b268b483b629a55d597", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=ffd03b3caaf182a4c0b456cd04c27041e8038aaf", "patch": "@@ -146,6 +146,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // \"lseek\" is only used on macOS which is 64bit-only, so `i64` always works.\n                 this.write_scalar(Scalar::from_i64(result), dest)?;\n             }\n+            \"fsync\" => {\n+                let &[fd] = check_arg_count(args)?;\n+                let result = this.fsync(fd)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n+            \"fdatasync\" => {\n+                let &[fd] = check_arg_count(args)?;\n+                let result = this.fdatasync(fd)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n \n             // Allocation\n             \"posix_memalign\" => {"}, {"sha": "2d124f9d8c6c0d3559666835eec423e2037c9c56", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=ffd03b3caaf182a4c0b456cd04c27041e8038aaf", "patch": "@@ -54,6 +54,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // fadvise is only informational, we can ignore it.\n                 this.write_null(dest)?;\n             }\n+            \"sync_file_range\" => {\n+                let &[fd, offset, nbytes, flags] = check_arg_count(args)?;\n+                let result = this.sync_file_range(fd, offset, nbytes, flags)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n \n             // Time related shims\n             \"clock_gettime\" => {"}, {"sha": "29e0da14ff1ebefd0b973d3b3afe92123e172b62", "filename": "src/shims/fs.rs", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=ffd03b3caaf182a4c0b456cd04c27041e8038aaf", "patch": "@@ -234,6 +234,18 @@ impl Default for DirHandler {\n     }\n }\n \n+fn maybe_sync_file(file: &File, writable: bool, operation: fn(&File) -> std::io::Result<()>) -> std::io::Result<i32> {\n+    if !writable && cfg!(windows) {\n+        // sync_all() and sync_data() will return an error on Windows hosts if the file is not opened\n+        // for writing. (FlushFileBuffers requires that the file handle have the\n+        // GENERIC_WRITE right)\n+        Ok(0i32)\n+    } else {\n+        let result = operation(file);\n+        result.map(|_| 0i32)\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn open(\n@@ -377,6 +389,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 fh.insert_fd_with_min_fd(FileHandle { file: duplicated, writable }, start)\n             });\n             this.try_unwrap_io_result(fd_result)\n+        } else if this.tcx.sess.target.target.target_os == \"macos\"\n+            && cmd == this.eval_libc_i32(\"F_FULLFSYNC\")?\n+        {\n+            let &[_, _] = check_arg_count(args)?;\n+            if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get(&fd) {\n+                let io_result = maybe_sync_file(file, *writable, File::sync_all);\n+                this.try_unwrap_io_result(io_result)\n+            } else {\n+                this.handle_not_found()\n+            }\n         } else {\n             throw_unsup_format!(\"the {:#x} command is not supported for `fcntl`)\", cmd);\n         }\n@@ -1103,6 +1125,77 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.handle_not_found()\n         }\n     }\n+\n+    fn fsync(&mut self, fd_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        // On macOS, `fsync` (unlike `fcntl(F_FULLFSYNC)`) does not wait for the\n+        // underlying disk to finish writing. In the interest of host compatibility,\n+        // we conservatively implement this with `sync_all`, which\n+        // *does* wait for the disk.\n+\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"fsync\")?;\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get(&fd) {\n+            let io_result = maybe_sync_file(file, *writable, File::sync_all);\n+            this.try_unwrap_io_result(io_result)\n+        } else {\n+            this.handle_not_found()\n+        }\n+    }\n+\n+    fn fdatasync(&mut self, fd_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"fdatasync\")?;\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get(&fd) {\n+            let io_result = maybe_sync_file(file, *writable, File::sync_data);\n+            this.try_unwrap_io_result(io_result)\n+        } else {\n+            this.handle_not_found()\n+        }\n+    }\n+\n+    fn sync_file_range(\n+        &mut self,\n+        fd_op: OpTy<'tcx, Tag>,\n+        offset_op: OpTy<'tcx, Tag>,\n+        nbytes_op: OpTy<'tcx, Tag>,\n+        flags_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"sync_file_range\")?;\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        let offset = this.read_scalar(offset_op)?.to_i64()?;\n+        let nbytes = this.read_scalar(nbytes_op)?.to_i64()?;\n+        let flags = this.read_scalar(flags_op)?.to_i32()?;\n+\n+        if offset < 0 || nbytes < 0 {\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n+            return Ok(-1);\n+        }\n+        let allowed_flags = this.eval_libc_i32(\"SYNC_FILE_RANGE_WAIT_BEFORE\")?\n+            | this.eval_libc_i32(\"SYNC_FILE_RANGE_WRITE\")?\n+            | this.eval_libc_i32(\"SYNC_FILE_RANGE_WAIT_AFTER\")?;\n+        if flags & allowed_flags != flags {\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n+            return Ok(-1);\n+        }\n+\n+        if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get(&fd) {\n+            let io_result = maybe_sync_file(file, *writable, File::sync_data);\n+            this.try_unwrap_io_result(io_result)\n+        } else {\n+            this.handle_not_found()\n+        }\n+    }\n }\n \n /// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when"}, {"sha": "caa9bffc2bc860375b129dcc5e40b7eb4f3188cc", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=ffd03b3caaf182a4c0b456cd04c27041e8038aaf", "patch": "@@ -14,6 +14,7 @@ fn main() {\n     test_seek();\n     test_metadata();\n     test_file_set_len();\n+    test_file_sync();\n     test_symlink();\n     test_errors();\n     test_rename();\n@@ -182,6 +183,23 @@ fn test_file_set_len() {\n     remove_file(&path).unwrap();\n }\n \n+fn test_file_sync() {\n+    let bytes = b\"Hello, World!\\n\";\n+    let path = prepare_with_content(\"miri_test_fs_sync.txt\", bytes);\n+\n+    // Test that we can call sync_data and sync_all (can't readily test effects of this operation)\n+    let file = OpenOptions::new().write(true).open(&path).unwrap();\n+    file.sync_data().unwrap();\n+    file.sync_all().unwrap();\n+\n+    // Test that we can call sync_data and sync_all on a file opened for reading.\n+    let file = File::open(&path).unwrap();\n+    file.sync_data().unwrap();\n+    file.sync_all().unwrap();\n+\n+    remove_file(&path).unwrap();\n+}\n+\n fn test_symlink() {\n     let bytes = b\"Hello, World!\\n\";\n     let path = prepare_with_content(\"miri_test_fs_link_target.txt\", bytes);"}, {"sha": "6f30cb5a9150fe6ae6ae32c3360a84f0a1c54e83", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd03b3caaf182a4c0b456cd04c27041e8038aaf/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=ffd03b3caaf182a4c0b456cd04c27041e8038aaf", "patch": "@@ -17,7 +17,7 @@ fn test_posix_fadvise() {\n     use std::io::Write;\n     use std::os::unix::io::AsRawFd;\n \n-    let path = tmp().join(\"miri_test_libc.txt\");\n+    let path = tmp().join(\"miri_test_libc_posix_fadvise.txt\");\n     // Cleanup before test\n     remove_file(&path).ok();\n \n@@ -40,6 +40,53 @@ fn test_posix_fadvise() {\n     assert_eq!(result, 0);\n }\n \n+#[cfg(target_os = \"linux\")]\n+fn test_sync_file_range() {\n+    use std::fs::{remove_file, File};\n+    use std::io::Write;\n+    use std::os::unix::io::AsRawFd;\n+\n+    let path = tmp().join(\"miri_test_libc_sync_file_range.txt\");\n+    // Cleanup before test.\n+    remove_file(&path).ok();\n+\n+    // Write to a file.\n+    let mut file = File::create(&path).unwrap();\n+    let bytes = b\"Hello, World!\\n\";\n+    file.write(bytes).unwrap();\n+\n+    // Test calling sync_file_range on the file.\n+    let result_1 = unsafe {\n+        libc::sync_file_range(\n+            file.as_raw_fd(),\n+            0,\n+            0,\n+            libc::SYNC_FILE_RANGE_WAIT_BEFORE\n+                | libc::SYNC_FILE_RANGE_WRITE\n+                | libc::SYNC_FILE_RANGE_WAIT_AFTER,\n+        )\n+    };\n+    drop(file);\n+\n+    // Test calling sync_file_range on a file opened for reading.\n+    let file = File::open(&path).unwrap();\n+    let result_2 = unsafe {\n+        libc::sync_file_range(\n+            file.as_raw_fd(),\n+            0,\n+            0,\n+            libc::SYNC_FILE_RANGE_WAIT_BEFORE\n+                | libc::SYNC_FILE_RANGE_WRITE\n+                | libc::SYNC_FILE_RANGE_WAIT_AFTER,\n+        )\n+    };\n+    drop(file);\n+\n+    remove_file(&path).unwrap();\n+    assert_eq!(result_1, 0);\n+    assert_eq!(result_2, 0);\n+}\n+\n fn test_mutex_libc_init_recursive() {\n     unsafe {\n         let mut attr: libc::pthread_mutexattr_t = std::mem::zeroed();\n@@ -169,6 +216,9 @@ fn main() {\n     #[cfg(target_os = \"linux\")]\n     test_posix_fadvise();\n \n+    #[cfg(target_os = \"linux\")]\n+    test_sync_file_range();\n+\n     test_mutex_libc_init_recursive();\n     test_mutex_libc_init_normal();\n     test_mutex_libc_init_errorcheck();"}]}