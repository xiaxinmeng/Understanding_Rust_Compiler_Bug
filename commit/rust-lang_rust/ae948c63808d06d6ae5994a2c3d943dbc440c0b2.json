{"sha": "ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "node_id": "C_kwDOAAsO6NoAKGFlOTQ4YzYzODA4ZDA2ZDZhZTU5OTRhMmMzZDk0M2RiYzQ0MGMwYjI", "commit": {"author": {"name": "BlackHoleFox", "email": "blackholefoxdev@gmail.com", "date": "2022-10-23T22:22:54Z"}, "committer": {"name": "BlackHoleFox", "email": "blackholefoxdev@gmail.com", "date": "2022-11-05T22:57:32Z"}, "message": "Cleanup Apple target specifications", "tree": {"sha": "5e1899342a91d2422702991db8dcb4d6f99c5a79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e1899342a91d2422702991db8dcb4d6f99c5a79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "html_url": "https://github.com/rust-lang/rust/commit/ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/comments", "author": {"login": "BlackHoleFox", "id": 20936452, "node_id": "MDQ6VXNlcjIwOTM2NDUy", "avatar_url": "https://avatars.githubusercontent.com/u/20936452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BlackHoleFox", "html_url": "https://github.com/BlackHoleFox", "followers_url": "https://api.github.com/users/BlackHoleFox/followers", "following_url": "https://api.github.com/users/BlackHoleFox/following{/other_user}", "gists_url": "https://api.github.com/users/BlackHoleFox/gists{/gist_id}", "starred_url": "https://api.github.com/users/BlackHoleFox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BlackHoleFox/subscriptions", "organizations_url": "https://api.github.com/users/BlackHoleFox/orgs", "repos_url": "https://api.github.com/users/BlackHoleFox/repos", "events_url": "https://api.github.com/users/BlackHoleFox/events{/privacy}", "received_events_url": "https://api.github.com/users/BlackHoleFox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BlackHoleFox", "id": 20936452, "node_id": "MDQ6VXNlcjIwOTM2NDUy", "avatar_url": "https://avatars.githubusercontent.com/u/20936452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BlackHoleFox", "html_url": "https://github.com/BlackHoleFox", "followers_url": "https://api.github.com/users/BlackHoleFox/followers", "following_url": "https://api.github.com/users/BlackHoleFox/following{/other_user}", "gists_url": "https://api.github.com/users/BlackHoleFox/gists{/gist_id}", "starred_url": "https://api.github.com/users/BlackHoleFox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BlackHoleFox/subscriptions", "organizations_url": "https://api.github.com/users/BlackHoleFox/orgs", "repos_url": "https://api.github.com/users/BlackHoleFox/repos", "events_url": "https://api.github.com/users/BlackHoleFox/events{/privacy}", "received_events_url": "https://api.github.com/users/BlackHoleFox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0ab1cee60804caea065e332d84858042157890", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0ab1cee60804caea065e332d84858042157890", "html_url": "https://github.com/rust-lang/rust/commit/de0ab1cee60804caea065e332d84858042157890"}], "stats": {"total": 217, "additions": 108, "deletions": 109}, "files": [{"sha": "0f6bbc323174cfb45dad1ffe4a388d1d323c2234", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -12,16 +12,14 @@ pub fn target() -> Target {\n \n     base.link_env_remove.to_mut().extend(macos_link_env_remove());\n \n-    // Clang automatically chooses a more specific target based on\n-    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n-    // correctly, we do too.\n-    let llvm_target = macos_llvm_target(arch.target_name());\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+        // correctly, we do too.\n+        llvm_target: macos_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             mcount: \"\\u{1}mcount\".into(),\n             frame_pointer: FramePointer::NonLeaf,"}, {"sha": "b5f9eb1259dace3eaa02136daa9641416dc789aa", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -2,18 +2,16 @@ use super::apple_base::{ios_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    // Clang automatically chooses a more specific target based on\n-    // IPHONEOS_DEPLOYMENT_TARGET.\n-    // This is required for the target to pick the right\n-    // MACH-O commands, so we do too.\n     let arch = Arch::Arm64;\n-    let llvm_target = ios_llvm_target(arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),"}, {"sha": "0009972cf425693c9134e84e5b1cf5e786d54a06", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -4,14 +4,15 @@ use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, Target, TargetOptions};\n pub fn target() -> Target {\n     let llvm_target = \"arm64-apple-ios14.0-macabi\";\n \n-    let mut base = opts(\"ios\", Arch::Arm64_macabi);\n+    let arch = Arch::Arm64_macabi;\n+    let mut base = opts(\"ios\", arch);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-target\", llvm_target]);\n \n     Target {\n         llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a12\".into(),\n             max_atomic_width: Some(128),"}, {"sha": "3374755e2dd8b9631b622e31428739b995f434b3", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_sim.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -3,19 +3,15 @@ use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let arch = Arch::Arm64_sim;\n-    let base = opts(\"ios\", arch);\n-\n-    // Clang automatically chooses a more specific target based on\n-    // IPHONEOS_DEPLOYMENT_TARGET.\n-    // This is required for the simulator target to pick the right\n-    // MACH-O commands, so we do too.\n-    let llvm_target = ios_sim_llvm_target(arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the simulator target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n@@ -32,7 +28,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "bb7c39ff26bdf5eede75e1cddda83cef7cbb8ff5", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -2,17 +2,18 @@ use super::apple_base::{opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let arch = Arch::Arm64;\n     Target {\n         llvm_target: \"arm64-apple-tvos\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,\n-            ..opts(\"tvos\", Arch::Arm64)\n+            ..opts(\"tvos\", arch)\n         },\n     }\n }"}, {"sha": "e4af4127c2223114f98a2442942e4eac3fab40b8", "filename": "compiler/rustc_target/src/spec/aarch64_apple_watchos_sim.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -3,19 +3,15 @@ use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let arch = Arch::Arm64_sim;\n-    let base = opts(\"watchos\", arch);\n-\n-    // Clang automatically chooses a more specific target based on\n-    // WATCHOS_DEPLOYMENT_TARGET.\n-    // This is required for the simulator target to pick the right\n-    // MACH-O commands, so we do too.\n-    let llvm_target = watchos_sim_llvm_target(arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // WATCHOS_DEPLOYMENT_TARGET.\n+        // This is required for the simulator target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: watchos_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n@@ -32,7 +28,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"watchos\", arch)\n         },\n     }\n }"}, {"sha": "23c826cb1bda2922558bc2859845a16ec52c26cf", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -17,6 +17,7 @@ pub enum Arch {\n     Arm64,\n     Arm64_32,\n     I386,\n+    I686,\n     X86_64,\n     X86_64_sim,\n     X86_64_macabi,\n@@ -33,13 +34,23 @@ impl Arch {\n             Arm64 | Arm64_macabi | Arm64_sim => \"arm64\",\n             Arm64_32 => \"arm64_32\",\n             I386 => \"i386\",\n+            I686 => \"i686\",\n             X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n         }\n     }\n \n+    pub fn target_arch(self) -> Cow<'static, str> {\n+        Cow::Borrowed(match self {\n+            Armv7 | Armv7k | Armv7s => \"arm\",\n+            Arm64 | Arm64_32 | Arm64_macabi | Arm64_sim => \"aarch64\",\n+            I386 | I686 => \"x86\",\n+            X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+        })\n+    }\n+\n     fn target_abi(self) -> &'static str {\n         match self {\n-            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 => \"\",\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 => \"\",\n             X86_64_macabi | Arm64_macabi => \"macabi\",\n             // x86_64-apple-ios is a simulator target, even though it isn't\n             // declared that way in the target like the other ones...\n@@ -54,7 +65,7 @@ impl Arch {\n             Armv7s => \"cortex-a9\",\n             Arm64 => \"apple-a7\",\n             Arm64_32 => \"apple-s4\",\n-            I386 => \"yonah\",\n+            I386 | I686 => \"yonah\",\n             X86_64 | X86_64_sim => \"core2\",\n             X86_64_macabi => \"core2\",\n             Arm64_macabi => \"apple-a12\",\n@@ -64,15 +75,16 @@ impl Arch {\n \n     fn link_env_remove(self) -> StaticCow<[StaticCow<str>]> {\n         match self {\n-            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 | X86_64_sim | Arm64_sim => {\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n+            | Arm64_sim => {\n                 cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n             }\n             X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n         }\n     }\n }\n \n-fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> LinkArgs {\n+fn pre_link_args(os: &'static str, arch: Arch, abi: &'static str) -> LinkArgs {\n     let platform_name: StaticCow<str> = match abi {\n         \"sim\" => format!(\"{}-simulator\", os).into(),\n         \"macabi\" => \"mac-catalyst\".into(),\n@@ -88,6 +100,8 @@ fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> Lin\n     }\n     .into();\n \n+    let arch = arch.target_name();\n+\n     let mut args = TargetOptions::link_args(\n         LinkerFlavor::Darwin(Cc::No, Lld::No),\n         &[\"-arch\", arch, \"-platform_version\"],\n@@ -118,7 +132,7 @@ pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n     // TLS is flagged as enabled if it looks to be supported. The architecture\n     // only matters for default deployment target which is 11.0 for ARM64 and\n     // 10.7 for everything else.\n-    let has_thread_local = os == \"macos\" && macos_deployment_target(\"x86_64\") >= (10, 7);\n+    let has_thread_local = os == \"macos\" && macos_deployment_target(Arch::X86_64) >= (10, 7);\n \n     let abi = arch.target_abi();\n \n@@ -132,7 +146,7 @@ pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n         // macOS has -dead_strip, which doesn't rely on function_sections\n         function_sections: false,\n         dynamic_linking: true,\n-        pre_link_args: pre_link_args(os, arch.target_name(), abi),\n+        pre_link_args: pre_link_args(os, arch, abi),\n         families: cvs![\"unix\"],\n         is_like_osx: true,\n         default_dwarf_version: 2,\n@@ -177,23 +191,24 @@ fn deployment_target(var_name: &str) -> Option<(u32, u32)> {\n         .and_then(|(a, b)| a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok())\n }\n \n-fn macos_default_deployment_target(arch: &str) -> (u32, u32) {\n-    if arch == \"arm64\" { (11, 0) } else { (10, 7) }\n+fn macos_default_deployment_target(arch: Arch) -> (u32, u32) {\n+    // Note: Arm64_sim is not included since macOS has no simulator.\n+    if matches!(arch, Arm64 | Arm64_macabi) { (11, 0) } else { (10, 7) }\n }\n \n-fn macos_deployment_target(arch: &str) -> (u32, u32) {\n+fn macos_deployment_target(arch: Arch) -> (u32, u32) {\n     deployment_target(\"MACOSX_DEPLOYMENT_TARGET\")\n         .unwrap_or_else(|| macos_default_deployment_target(arch))\n }\n \n-fn macos_lld_platform_version(arch: &str) -> String {\n+fn macos_lld_platform_version(arch: Arch) -> String {\n     let (major, minor) = macos_deployment_target(arch);\n     format!(\"{}.{}\", major, minor)\n }\n \n-pub fn macos_llvm_target(arch: &str) -> String {\n+pub fn macos_llvm_target(arch: Arch) -> String {\n     let (major, minor) = macos_deployment_target(arch);\n-    format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n+    format!(\"{}-apple-macosx{}.{}.0\", arch.target_name(), major, minor)\n }\n \n pub fn macos_link_env_remove() -> Vec<StaticCow<str>> {"}, {"sha": "3259c854791ce1849c465e03dbf691038c6b18f4", "filename": "compiler/rustc_target/src/spec/armv7_apple_ios.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -1,15 +1,17 @@\n-use super::apple_base::{opts, Arch};\n+use super::apple_base::{ios_llvm_target, opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let arch = Arch::Armv7;\n-    let llvm_target = super::apple_base::ios_llvm_target(arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_llvm_target(arch).into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".into(),\n-        arch: \"arm\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".into(),\n             max_atomic_width: Some(64),"}, {"sha": "45ead8d65aba9919c6dc65d742b860c308d30c82", "filename": "compiler/rustc_target/src/spec/armv7k_apple_watchos.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -2,12 +2,12 @@ use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"watchos\", Arch::Armv7k);\n+    let arch = Arch::Armv7k;\n     Target {\n         llvm_target: \"armv7k-apple-watchos\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-Fi8-i64:64-a:0:32-n32-S128\".into(),\n-        arch: \"arm\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".into(),\n             max_atomic_width: Some(64),\n@@ -22,7 +22,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"watchos\", arch)\n         },\n     }\n }"}, {"sha": "be4bc6758443ec7ee51ea2c1fd67bde666581650", "filename": "compiler/rustc_target/src/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -2,15 +2,16 @@ use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let arch = Arch::Armv7s;\n     Target {\n         llvm_target: \"armv7s-apple-ios\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".into(),\n-        arch: \"arm\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".into(),\n             max_atomic_width: Some(64),\n-            ..opts(\"ios\", Arch::Armv7s)\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "5819981612e84a8a322ece52007d089f333f7a7d", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -1,22 +1,23 @@\n-use super::apple_base::{opts, Arch};\n+use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let arch = Arch::I386;\n-    let base = opts(\"ios\", arch);\n-    let llvm_target = super::apple_base::ios_sim_llvm_target(arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_sim_llvm_target(arch).into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .into(),\n-        arch: \"x86\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n-            ..base\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "8b968af5eccff330a51e7aef34044de6b6b3ef82", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -2,28 +2,27 @@ use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    // ld64 only understand i386 and not i686\n-    let mut base = opts(\"macos\", Arch::I386);\n-    base.cpu = \"yonah\".into();\n+    // ld64 only understands i386 and not i686\n+    let arch = Arch::I386;\n+    let mut base = opts(\"macos\", arch);\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m32\"]);\n     base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.frame_pointer = FramePointer::Always;\n \n-    // Clang automatically chooses a more specific target based on\n-    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n-    // correctly, we do too.\n-    let arch = \"i686\";\n-    let llvm_target = macos_llvm_target(arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+        // correctly, we do too.\n+        //\n+        // While ld64 doesn't understand i686, LLVM does.\n+        llvm_target: macos_llvm_target(Arch::I686).into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .into(),\n-        arch: \"x86\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n     }\n }"}, {"sha": "c053031612ce5369575731e710bdcfd395b76116", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -5,26 +5,23 @@ use crate::spec::{StackProbeType, Target, TargetOptions};\n pub fn target() -> Target {\n     let arch = Arch::X86_64;\n     let mut base = opts(\"macos\", arch);\n-    base.cpu = \"core2\".into();\n-    base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n+    base.max_atomic_width = Some(128); // core2 supports cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;\n \n-    // Clang automatically chooses a more specific target based on\n-    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n-    // correctly, we do too.\n-    let llvm_target = macos_llvm_target(arch.target_name());\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+        // correctly, we do too.\n+        llvm_target: macos_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: \"x86_84\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n     }\n }"}, {"sha": "fbd3ebd4d0431eba64044605b1d8b8a9beba7640", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -3,19 +3,16 @@ use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let arch = Arch::X86_64_sim;\n-    let base = opts(\"ios\", arch);\n-    let llvm_target = ios_sim_llvm_target(arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        llvm_target: ios_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n-            ..base\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "0f3f8519963778d172d4ef5b164c100d71da2139", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -4,15 +4,16 @@ use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n pub fn target() -> Target {\n     let llvm_target = \"x86_64-apple-ios13.0-macabi\";\n \n-    let mut base = opts(\"ios\", Arch::X86_64_macabi);\n+    let arch = Arch::X86_64_macabi;\n+    let mut base = opts(\"ios\", arch);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-target\", llvm_target]);\n \n     Target {\n         llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,"}, {"sha": "550ce0b9ce577e0584a020d92a42d186ea9d2974", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -2,16 +2,16 @@ use super::apple_base::{opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"tvos\", Arch::X86_64_sim);\n+    let arch = Arch::X86_64_sim;\n     Target {\n         llvm_target: \"x86_64-apple-tvos\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n-            ..base\n+            ..opts(\"tvos\", arch)\n         },\n     }\n }"}, {"sha": "75ce02cba1de0623be381ab2b4b396860b69b23a", "filename": "compiler/rustc_target/src/spec/x86_64_apple_watchos_sim.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae948c63808d06d6ae5994a2c3d943dbc440c0b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs?ref=ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "patch": "@@ -1,18 +1,14 @@\n-use super::apple_base::{opts, Arch};\n+use super::apple_base::{opts, watchos_sim_llvm_target, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let arch = Arch::X86_64_sim;\n-    let base = opts(\"watchos\", Arch::X86_64_sim);\n-\n-    let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        llvm_target: watchos_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n@@ -28,7 +24,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"watchos\", arch)\n         },\n     }\n }"}]}