{"sha": "4955d755d3ffdfecfd2c22139c65fe1a10d60939", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NTVkNzU1ZDNmZmRmZWNmZDJjMjIxMzljNjVmZTFhMTBkNjA5Mzk=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-07T05:41:55Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-03-31T14:05:32Z"}, "message": "Some rebinds and dummys", "tree": {"sha": "4dedeed4ed4c636d226c13752898ee548d8b4c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dedeed4ed4c636d226c13752898ee548d8b4c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4955d755d3ffdfecfd2c22139c65fe1a10d60939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4955d755d3ffdfecfd2c22139c65fe1a10d60939", "html_url": "https://github.com/rust-lang/rust/commit/4955d755d3ffdfecfd2c22139c65fe1a10d60939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4955d755d3ffdfecfd2c22139c65fe1a10d60939/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5029ac0ab372aec515db2e718da6d7787f3d122", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5029ac0ab372aec515db2e718da6d7787f3d122", "html_url": "https://github.com/rust-lang/rust/commit/a5029ac0ab372aec515db2e718da6d7787f3d122"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "679e98bada2eca58d43a92045bdf59bf41e99b75", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=4955d755d3ffdfecfd2c22139c65fe1a10d60939", "patch": "@@ -50,7 +50,10 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n \n             debug!(\"higher_ranked_sub: OK result={:?}\", result);\n \n-            Ok(ty::Binder::bind(result))\n+            // We related `a_prime` and `b_prime`, which just had any bound vars\n+            // replaced with placeholders or infer vars, respectively. Relating\n+            // them should not introduce new bound vars.\n+            Ok(ty::Binder::dummy(result))\n         })\n     }\n }"}, {"sha": "76ba07864cfbf70681f456d8446fc0c57d87d581", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=4955d755d3ffdfecfd2c22139c65fe1a10d60939", "patch": "@@ -619,10 +619,9 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'\n         let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {\n             use crate::ty::ExistentialPredicate::*;\n             match (ep_a.skip_binder(), ep_b.skip_binder()) {\n-                (Trait(a), Trait(b)) => Ok(ty::Binder::bind(Trait(\n-                    relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),\n-                ))),\n-                (Projection(a), Projection(b)) => Ok(ty::Binder::bind(Projection(\n+                (Trait(a), Trait(b)) => Ok(ep_a\n+                    .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),\n+                (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(\n                     relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),\n                 ))),\n                 (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),"}, {"sha": "3248554e2042744efe4b5b4eebe0bac611cbd672", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=4955d755d3ffdfecfd2c22139c65fe1a10d60939", "patch": "@@ -2028,7 +2028,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                             traits::ObligationCauseCode::RepeatVec(is_const_fn),\n                                         ),\n                                         self.param_env,\n-                                        ty::Binder::bind(ty::TraitRef::new(\n+                                        ty::Binder::dummy(ty::TraitRef::new(\n                                             self.tcx().require_lang_item(\n                                                 LangItem::Copy,\n                                                 Some(self.last_span),"}, {"sha": "fd3f3b3a080452098fcc204945a5887d24c6fcda", "filename": "compiler/rustc_mir/src/monomorphize/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fmod.rs?ref=4955d755d3ffdfecfd2c22139c65fe1a10d60939", "patch": "@@ -1,21 +1,23 @@\n use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n use rustc_hir::lang_items::LangItem;\n \n pub mod collector;\n pub mod partitioning;\n pub mod polymorphize;\n \n-pub fn custom_coerce_unsize_info<'tcx>(\n+fn custom_coerce_unsize_info<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     source_ty: Ty<'tcx>,\n     target_ty: Ty<'tcx>,\n ) -> CustomCoerceUnsized {\n     let def_id = tcx.require_lang_item(LangItem::CoerceUnsized, None);\n \n-    let trait_ref = ty::Binder::bind(ty::TraitRef {\n+    debug_assert!(!source_ty.has_escaping_bound_vars());\n+    debug_assert!(!target_ty.has_escaping_bound_vars());\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef {\n         def_id,\n         substs: tcx.mk_substs_trait(source_ty, &[target_ty.into()]),\n     });"}, {"sha": "cb66dc7e5d9d36232e4acb30e4cd9f17b8545c3e", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=4955d755d3ffdfecfd2c22139c65fe1a10d60939", "patch": "@@ -82,9 +82,10 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n+        debug_assert!(!ty.has_escaping_bound_vars());\n         let trait_ref = ty::TraitRef { def_id: trait_did, substs: tcx.mk_substs_trait(ty, &[]) };\n \n-        let trait_pred = ty::Binder::bind(trait_ref);\n+        let trait_pred = ty::Binder::dummy(trait_ref);\n \n         let bail_out = tcx.infer_ctxt().enter(|infcx| {\n             let mut selcx = SelectionContext::with_negative(&infcx, true);\n@@ -280,7 +281,7 @@ impl AutoTraitFinder<'tcx> {\n \n         let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();\n-        predicates.push_back(ty::Binder::bind(ty::TraitPredicate {\n+        predicates.push_back(ty::Binder::dummy(ty::TraitPredicate {\n             trait_ref: ty::TraitRef {\n                 def_id: trait_did,\n                 substs: infcx.tcx.mk_substs_trait(ty, &[]),"}, {"sha": "b5a458db6075fd72b88230d9f34b650b8e982bb1", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=4955d755d3ffdfecfd2c22139c65fe1a10d60939", "patch": "@@ -757,7 +757,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n     struct IllegalSelfTypeVisitor<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         trait_def_id: DefId,\n-        supertraits: Option<Vec<ty::PolyTraitRef<'tcx>>>,\n+        supertraits: Option<Vec<DefId>>,\n     }\n \n     impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n@@ -778,8 +778,10 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                     // Compute supertraits of current trait lazily.\n                     if self.supertraits.is_none() {\n                         let trait_ref =\n-                            ty::Binder::bind(ty::TraitRef::identity(self.tcx, self.trait_def_id));\n-                        self.supertraits = Some(traits::supertraits(self.tcx, trait_ref).collect());\n+                            ty::Binder::dummy(ty::TraitRef::identity(self.tcx, self.trait_def_id));\n+                        self.supertraits = Some(\n+                            traits::supertraits(self.tcx, trait_ref).map(|t| t.def_id()).collect(),\n+                        );\n                     }\n \n                     // Determine whether the trait reference `Foo as\n@@ -790,9 +792,11 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                     // direct equality here because all of these types\n                     // are part of the formal parameter listing, and\n                     // hence there should be no inference variables.\n-                    let projection_trait_ref = ty::Binder::bind(data.trait_ref(self.tcx));\n-                    let is_supertrait_of_current_trait =\n-                        self.supertraits.as_ref().unwrap().contains(&projection_trait_ref);\n+                    let is_supertrait_of_current_trait = self\n+                        .supertraits\n+                        .as_ref()\n+                        .unwrap()\n+                        .contains(&data.trait_ref(self.tcx).def_id);\n \n                     if is_supertrait_of_current_trait {\n                         ControlFlow::CONTINUE // do not walk contained types, do not report error, do collect $200"}, {"sha": "0dc0dd871fe603ef0a4be526305efe1384a17ef0", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=4955d755d3ffdfecfd2c22139c65fe1a10d60939", "patch": "@@ -748,7 +748,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     cause,\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n-                    ty::Binder::bind(outlives).to_predicate(tcx),\n+                    obligation.predicate.rebind(outlives).to_predicate(tcx),\n                 ));\n             }\n "}, {"sha": "183dab39e9eae6c69b5a67341773e6b257a8e6c2", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=4955d755d3ffdfecfd2c22139c65fe1a10d60939", "patch": "@@ -1090,7 +1090,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let late_bound_in_trait_ref =\n                     tcx.collect_constrained_late_bound_regions(&projection_ty);\n                 let late_bound_in_ty =\n-                    tcx.collect_referenced_late_bound_regions(&ty::Binder::bind(ty));\n+                    tcx.collect_referenced_late_bound_regions(&trait_ref.rebind(ty));\n                 debug!(\"late_bound_in_trait_ref = {:?}\", late_bound_in_trait_ref);\n                 debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n "}, {"sha": "3bbf0ba63b89c37f2c0e204db0c2ad2038cc6395", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4955d755d3ffdfecfd2c22139c65fe1a10d60939/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=4955d755d3ffdfecfd2c22139c65fe1a10d60939", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> Bounds<'tcx> {\n         // If it could be sized, and is, add the `Sized` predicate.\n         let sized_predicate = self.implicitly_sized.and_then(|span| {\n             tcx.lang_items().sized_trait().map(|sized| {\n-                let trait_ref = ty::Binder::bind(ty::TraitRef {\n+                let trait_ref = ty::Binder::dummy(ty::TraitRef {\n                     def_id: sized,\n                     substs: tcx.mk_substs_trait(param_ty, &[]),\n                 });"}]}