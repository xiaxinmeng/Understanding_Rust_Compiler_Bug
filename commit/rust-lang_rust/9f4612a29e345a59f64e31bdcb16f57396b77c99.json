{"sha": "9f4612a29e345a59f64e31bdcb16f57396b77c99", "node_id": "C_kwDOAAsO6NoAKDlmNDYxMmEyOWUzNDVhNTlmNjRlMzFiZGNiMTZmNTczOTZiNzdjOTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T23:00:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T23:00:32Z"}, "message": "Auto merge of #2457 - RalfJung:realpath, r=RalfJung\n\nAdd shim for realpath on unix\n\nSalvaged from https://github.com/rust-lang/miri/pull/2294 by `@LegNeato`", "tree": {"sha": "8dda7812856517420af6a7cabf56961fdd4fe98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dda7812856517420af6a7cabf56961fdd4fe98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f4612a29e345a59f64e31bdcb16f57396b77c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4612a29e345a59f64e31bdcb16f57396b77c99", "html_url": "https://github.com/rust-lang/rust/commit/9f4612a29e345a59f64e31bdcb16f57396b77c99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f4612a29e345a59f64e31bdcb16f57396b77c99/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25df001714bae1cb59be324d29edf219c99080ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/25df001714bae1cb59be324d29edf219c99080ac", "html_url": "https://github.com/rust-lang/rust/commit/25df001714bae1cb59be324d29edf219c99080ac"}, {"sha": "8356f4cc23ea4c2403011b6c2c619738fce7e32a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8356f4cc23ea4c2403011b6c2c619738fce7e32a", "html_url": "https://github.com/rust-lang/rust/commit/8356f4cc23ea4c2403011b6c2c619738fce7e32a"}], "stats": {"total": 192, "additions": 190, "deletions": 2}, "files": [{"sha": "acc2367afa28d9f82546e4a6f76ce24b9d495410", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f4612a29e345a59f64e31bdcb16f57396b77c99/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4612a29e345a59f64e31bdcb16f57396b77c99/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=9f4612a29e345a59f64e31bdcb16f57396b77c99", "patch": "@@ -37,10 +37,12 @@ const UNIX_IO_ERROR_TABLE: &[(std::io::ErrorKind, &str)] = {\n         (NotFound, \"ENOENT\"),\n         (Interrupted, \"EINTR\"),\n         (InvalidInput, \"EINVAL\"),\n+        (InvalidFilename, \"ENAMETOOLONG\"),\n         (TimedOut, \"ETIMEDOUT\"),\n         (AlreadyExists, \"EEXIST\"),\n         (WouldBlock, \"EWOULDBLOCK\"),\n         (DirectoryNotEmpty, \"ENOTEMPTY\"),\n+        (FilesystemLoop, \"ELOOP\"),\n     ]\n };\n "}, {"sha": "b9f3a435ea429e0437cfa338c16b78b36ab61fb1", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f4612a29e345a59f64e31bdcb16f57396b77c99/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4612a29e345a59f64e31bdcb16f57396b77c99/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=9f4612a29e345a59f64e31bdcb16f57396b77c99", "patch": "@@ -250,6 +250,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.write_os_str_to_wide_str(&os_str, ptr, size)\n     }\n \n+    /// Allocate enough memory to store a Path as a null-terminated sequence of bytes,\n+    /// adjusting path separators if needed.\n+    fn alloc_path_as_c_str(\n+        &mut self,\n+        path: &Path,\n+        memkind: MemoryKind<MiriMemoryKind>,\n+    ) -> InterpResult<'tcx, Pointer<Option<Provenance>>> {\n+        let this = self.eval_context_mut();\n+        let os_str = this\n+            .convert_path_separator(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n+        this.alloc_os_str_as_c_str(&os_str, memkind)\n+    }\n+\n     fn convert_path_separator<'a>(\n         &self,\n         os_str: Cow<'a, OsStr>,"}, {"sha": "5eb2d0a6cac2e57581e153ac70d6fff5f0ff02d7", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f4612a29e345a59f64e31bdcb16f57396b77c99/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4612a29e345a59f64e31bdcb16f57396b77c99/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=9f4612a29e345a59f64e31bdcb16f57396b77c99", "patch": "@@ -161,6 +161,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // fadvise is only informational, we can ignore it.\n                 this.write_null(dest)?;\n             }\n+            \"realpath\" => {\n+                let [path, resolved_path] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.realpath(path, resolved_path)?;\n+                this.write_pointer(result, dest)?;\n+            }\n \n             // Time related shims\n             \"gettimeofday\" => {"}, {"sha": "36be1ec4f6fa040ca76d9a3f9ed8abf9e32d1e06", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9f4612a29e345a59f64e31bdcb16f57396b77c99/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4612a29e345a59f64e31bdcb16f57396b77c99/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=9f4612a29e345a59f64e31bdcb16f57396b77c99", "patch": "@@ -1,5 +1,6 @@\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n+use std::convert::TryInto;\n use std::fs::{\n     read_dir, remove_dir, remove_file, rename, DirBuilder, File, FileType, OpenOptions, ReadDir,\n };\n@@ -1662,6 +1663,67 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.set_last_error(enotty)?;\n         Ok(0)\n     }\n+\n+    fn realpath(\n+        &mut self,\n+        path_op: &OpTy<'tcx, Provenance>,\n+        processed_path_op: &OpTy<'tcx, Provenance>,\n+    ) -> InterpResult<'tcx, Pointer<Option<Provenance>>> {\n+        let this = self.eval_context_mut();\n+        this.assert_target_os_is_unix(\"realpath\");\n+\n+        let pathname = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n+        let processed_ptr = this.read_pointer(processed_path_op)?;\n+\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`realpath`\", reject_with)?;\n+            let eacc = this.eval_libc(\"EACCES\")?;\n+            this.set_last_error(eacc)?;\n+            return Ok(Pointer::null());\n+        }\n+\n+        let result = std::fs::canonicalize(pathname);\n+        match result {\n+            Ok(resolved) => {\n+                let path_max = this\n+                    .eval_libc_i32(\"PATH_MAX\")?\n+                    .try_into()\n+                    .expect(\"PATH_MAX does not fit in u64\");\n+                let dest = if this.ptr_is_null(processed_ptr)? {\n+                    // POSIX says behavior when passing a null pointer is implementation-defined,\n+                    // but GNU/linux, freebsd, netbsd, bionic/android, and macos all treat a null pointer\n+                    // similarly to:\n+                    //\n+                    // \"If resolved_path is specified as NULL, then realpath() uses\n+                    // malloc(3) to allocate a buffer of up to PATH_MAX bytes to hold\n+                    // the resolved pathname, and returns a pointer to this buffer.  The\n+                    // caller should deallocate this buffer using free(3).\"\n+                    // <https://man7.org/linux/man-pages/man3/realpath.3.html>\n+                    this.alloc_path_as_c_str(&resolved, MiriMemoryKind::C.into())?\n+                } else {\n+                    let (wrote_path, _) =\n+                        this.write_path_to_c_str(&resolved, processed_ptr, path_max)?;\n+\n+                    if !wrote_path {\n+                        // Note that we do not explicitly handle `FILENAME_MAX`\n+                        // (different from `PATH_MAX` above) as it is Linux-specific and\n+                        // seems like a bit of a mess anyway: <https://eklitzke.org/path-max-is-tricky>.\n+                        let enametoolong = this.eval_libc(\"ENAMETOOLONG\")?;\n+                        this.set_last_error(enametoolong)?;\n+                        return Ok(Pointer::null());\n+                    }\n+                    processed_ptr\n+                };\n+\n+                Ok(dest)\n+            }\n+            Err(e) => {\n+                this.set_last_error_from_io_error(e.kind())?;\n+                Ok(Pointer::null())\n+            }\n+        }\n+    }\n }\n \n /// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when"}, {"sha": "fb545d8b5847e8406e429a2de5ed75cf8f3ce560", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f4612a29e345a59f64e31bdcb16f57396b77c99/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4612a29e345a59f64e31bdcb16f57396b77c99/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=9f4612a29e345a59f64e31bdcb16f57396b77c99", "patch": "@@ -73,6 +73,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.ftruncate64(fd, length)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"realpath$DARWIN_EXTSN\" => {\n+                let [path, resolved_path] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.realpath(path, resolved_path)?;\n+                this.write_pointer(result, dest)?;\n+            }\n \n             // Environment related shims\n             \"_NSGetEnviron\" => {"}, {"sha": "a8025007bf5f502038132a9c73d1718b67fc4ccb", "filename": "tests/pass/fs.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f4612a29e345a59f64e31bdcb16f57396b77c99/tests%2Fpass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4612a29e345a59f64e31bdcb16f57396b77c99/tests%2Fpass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ffs.rs?ref=9f4612a29e345a59f64e31bdcb16f57396b77c99", "patch": "@@ -24,6 +24,7 @@ fn main() {\n     test_errors();\n     test_rename();\n     test_directory();\n+    test_canonicalize();\n     test_dup_stdout_stderr();\n \n     // These all require unix, if the test is changed to no longer `ignore-windows`, move these to a unix test\n@@ -365,6 +366,24 @@ fn test_rename() {\n     remove_file(&path2).unwrap();\n }\n \n+fn test_canonicalize() {\n+    use std::fs::canonicalize;\n+    let dir_path = prepare_dir(\"miri_test_fs_dir\");\n+    create_dir(&dir_path).unwrap();\n+    let path = dir_path.join(\"test_file\");\n+    drop(File::create(&path).unwrap());\n+\n+    let p = canonicalize(format!(\"{}/./test_file\", dir_path.to_string_lossy())).unwrap();\n+    assert_eq!(p.to_string_lossy().find('.'), None);\n+\n+    remove_dir_all(&dir_path).unwrap();\n+\n+    // Make sure we get an error for long paths.\n+    use std::convert::TryInto;\n+    let too_long = \"x/\".repeat(libc::PATH_MAX.try_into().unwrap());\n+    assert!(canonicalize(too_long).is_err());\n+}\n+\n fn test_directory() {\n     let dir_path = prepare_dir(\"miri_test_fs_dir\");\n     // Creating a directory should succeed."}, {"sha": "c7331b110e9ad3ab4b1cab4fe74e528f7aa48fb5", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 83, "deletions": 2, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/9f4612a29e345a59f64e31bdcb16f57396b77c99/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4612a29e345a59f64e31bdcb16f57396b77c99/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=9f4612a29e345a59f64e31bdcb16f57396b77c99", "patch": "@@ -1,16 +1,93 @@\n //@ignore-target-windows: No libc on Windows\n //@compile-flags: -Zmiri-disable-isolation\n+#![feature(io_error_more)]\n #![feature(rustc_private)]\n \n use std::fs::{remove_file, File};\n use std::os::unix::io::AsRawFd;\n+use std::path::PathBuf;\n \n-fn tmp() -> std::path::PathBuf {\n+fn tmp() -> PathBuf {\n     std::env::var(\"MIRI_TEMP\")\n-        .map(std::path::PathBuf::from)\n+        .map(|tmp| {\n+            // MIRI_TEMP is set outside of our emulated\n+            // program, so it may have path separators that don't\n+            // correspond to our target platform. We normalize them here\n+            // before constructing a `PathBuf`\n+            return PathBuf::from(tmp.replace(\"\\\\\", \"/\"));\n+        })\n         .unwrap_or_else(|_| std::env::temp_dir())\n }\n \n+/// Test allocating variant of `realpath`.\n+fn test_posix_realpath_alloc() {\n+    use std::ffi::OsString;\n+    use std::ffi::{CStr, CString};\n+    use std::os::unix::ffi::OsStrExt;\n+    use std::os::unix::ffi::OsStringExt;\n+\n+    let buf;\n+    let path = tmp().join(\"miri_test_libc_posix_realpath_alloc\");\n+    let c_path = CString::new(path.as_os_str().as_bytes()).expect(\"CString::new failed\");\n+\n+    // Cleanup before test.\n+    remove_file(&path).ok();\n+    // Create file.\n+    drop(File::create(&path).unwrap());\n+    unsafe {\n+        let r = libc::realpath(c_path.as_ptr(), std::ptr::null_mut());\n+        assert!(!r.is_null());\n+        buf = CStr::from_ptr(r).to_bytes().to_vec();\n+        libc::free(r as *mut _);\n+    }\n+    let canonical = PathBuf::from(OsString::from_vec(buf));\n+    assert_eq!(path.file_name(), canonical.file_name());\n+\n+    // Cleanup after test.\n+    remove_file(&path).unwrap();\n+}\n+\n+/// Test non-allocating variant of `realpath`.\n+fn test_posix_realpath_noalloc() {\n+    use std::ffi::{CStr, CString};\n+    use std::os::unix::ffi::OsStrExt;\n+\n+    let path = tmp().join(\"miri_test_libc_posix_realpath_noalloc\");\n+    let c_path = CString::new(path.as_os_str().as_bytes()).expect(\"CString::new failed\");\n+\n+    let mut v = vec![0; libc::PATH_MAX as usize];\n+\n+    // Cleanup before test.\n+    remove_file(&path).ok();\n+    // Create file.\n+    drop(File::create(&path).unwrap());\n+    unsafe {\n+        let r = libc::realpath(c_path.as_ptr(), v.as_mut_ptr());\n+        assert!(!r.is_null());\n+    }\n+    let c = unsafe { CStr::from_ptr(v.as_ptr()) };\n+    let canonical = PathBuf::from(c.to_str().expect(\"CStr to str\"));\n+\n+    assert_eq!(path.file_name(), canonical.file_name());\n+\n+    // Cleanup after test.\n+    remove_file(&path).unwrap();\n+}\n+\n+/// Test failure cases for `realpath`.\n+fn test_posix_realpath_errors() {\n+    use std::ffi::CString;\n+    use std::io::ErrorKind;\n+\n+    // Test non-existent path returns an error.\n+    let c_path = CString::new(\"./nothing_to_see_here\").expect(\"CString::new failed\");\n+    let r = unsafe { libc::realpath(c_path.as_ptr(), std::ptr::null_mut()) };\n+    assert!(r.is_null());\n+    let e = std::io::Error::last_os_error();\n+    assert_eq!(e.raw_os_error(), Some(libc::ENOENT));\n+    assert_eq!(e.kind(), ErrorKind::NotFound);\n+}\n+\n #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn test_posix_fadvise() {\n     use std::convert::TryInto;\n@@ -336,6 +413,10 @@ fn main() {\n \n     test_posix_gettimeofday();\n \n+    test_posix_realpath_alloc();\n+    test_posix_realpath_noalloc();\n+    test_posix_realpath_errors();\n+\n     #[cfg(any(target_os = \"linux\"))]\n     test_sync_file_range();\n "}]}