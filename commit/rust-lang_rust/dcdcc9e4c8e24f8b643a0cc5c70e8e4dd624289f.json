{"sha": "dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZGNjOWU0YzhlMjRmOGI2NDNhMGNjNWM3MGU4ZTRkZDYyNDI4OWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T19:04:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T19:04:51Z"}, "message": "Remove some duplicated test functions", "tree": {"sha": "6adf48e129306245fe02f781f31baa60a761b856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6adf48e129306245fe02f781f31baa60a761b856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f", "html_url": "https://github.com/rust-lang/rust/commit/dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d04ecc841904401ff17c723702b3332b64235212", "url": "https://api.github.com/repos/rust-lang/rust/commits/d04ecc841904401ff17c723702b3332b64235212", "html_url": "https://github.com/rust-lang/rust/commit/d04ecc841904401ff17c723702b3332b64235212"}], "stats": {"total": 97, "additions": 16, "deletions": 81}, "files": [{"sha": "48723fa02e307d7f0c938c90535a3a6c84a9959b", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 16, "deletions": 81, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f", "patch": "@@ -2,15 +2,15 @@\n \n use std::{panic, sync::Arc};\n \n+use hir_def::{db::DefDatabase2, ModuleId};\n use hir_expand::diagnostics::DiagnosticSink;\n use parking_lot::Mutex;\n use ra_cfg::CfgOptions;\n use ra_db::{\n-    salsa, CrateGraph, CrateId, Edition, FileId, FileLoader, FileLoaderDelegate, FilePosition,\n-    RelativePath, RelativePathBuf, SourceDatabase, SourceDatabaseExt, SourceRoot, SourceRootId,\n+    salsa, CrateGraph, CrateId, Edition, FileId, FileLoader, FileLoaderDelegate, RelativePath,\n+    RelativePathBuf, SourceDatabase, SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n use rustc_hash::FxHashMap;\n-use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n \n use crate::{db, debug::HirDebugHelper};\n \n@@ -63,12 +63,6 @@ impl HirDebugHelper for MockDatabase {\n }\n \n impl MockDatabase {\n-    pub fn with_files(fixture: &str) -> MockDatabase {\n-        let (db, position) = MockDatabase::from_fixture(fixture);\n-        assert!(position.is_none());\n-        db\n-    }\n-\n     pub fn with_single_file(text: &str) -> (MockDatabase, SourceRoot, FileId) {\n         let mut db = MockDatabase::default();\n         let mut source_root = SourceRoot::default();\n@@ -86,67 +80,21 @@ impl MockDatabase {\n \n     pub fn diagnostics(&self) -> String {\n         let mut buf = String::new();\n-        let mut files: Vec<FileId> = self.files.values().copied().collect();\n-        files.sort();\n-        for file in files {\n-            let src = crate::Source {\n-                file_id: file.into(),\n-                ast: crate::ModuleSource::new(self, Some(file), None),\n-            };\n-            let module = crate::Module::from_definition(self, src).unwrap();\n-            module.diagnostics(\n-                self,\n-                &mut DiagnosticSink::new(|d| {\n-                    buf += &format!(\"{:?}: {}\\n\", d.syntax_node(self).text(), d.message());\n-                }),\n-            )\n-        }\n-        buf\n-    }\n-\n-    fn from_fixture(fixture: &str) -> (MockDatabase, Option<FilePosition>) {\n-        let mut db = MockDatabase::default();\n-\n-        let pos = db.add_fixture(fixture);\n-\n-        (db, pos)\n-    }\n-\n-    fn add_fixture(&mut self, fixture: &str) -> Option<FilePosition> {\n-        let mut position = None;\n-        let mut source_root = SourceRoot::default();\n-        let mut source_root_id = WORKSPACE;\n-        let mut source_root_prefix = \"/\".to_string();\n-        for entry in parse_fixture(fixture) {\n-            if entry.meta.starts_with(\"root\") {\n-                self.set_source_root(source_root_id, Arc::new(source_root));\n-                source_root = SourceRoot::default();\n-\n-                source_root_id = SourceRootId(source_root_id.0 + 1);\n-                source_root_prefix = entry.meta[\"root\".len()..].trim().to_string();\n-                continue;\n-            }\n-            if entry.text.contains(CURSOR_MARKER) {\n-                assert!(position.is_none(), \"only one marker (<|>) per fixture is allowed\");\n-                position = Some(self.add_file_with_position(\n-                    source_root_id,\n-                    &source_root_prefix,\n-                    &mut source_root,\n-                    &entry.meta,\n-                    &entry.text,\n-                ));\n-            } else {\n-                self.add_file(\n-                    source_root_id,\n-                    &source_root_prefix,\n-                    &mut source_root,\n-                    &entry.meta,\n-                    &entry.text,\n-                );\n+        let crate_graph = self.crate_graph();\n+        for krate in crate_graph.iter().next() {\n+            let crate_def_map = self.crate_def_map(krate);\n+            for (module_id, _) in crate_def_map.modules.iter() {\n+                let module_id = ModuleId { krate, module_id };\n+                let module = crate::Module::from(module_id);\n+                module.diagnostics(\n+                    self,\n+                    &mut DiagnosticSink::new(|d| {\n+                        buf += &format!(\"{:?}: {}\\n\", d.syntax_node(self).text(), d.message());\n+                    }),\n+                )\n             }\n         }\n-        self.set_source_root(source_root_id, Arc::new(source_root));\n-        position\n+        buf\n     }\n \n     fn add_file(\n@@ -183,19 +131,6 @@ impl MockDatabase {\n         }\n         file_id\n     }\n-\n-    fn add_file_with_position(\n-        &mut self,\n-        source_root_id: SourceRootId,\n-        source_root_prefix: &str,\n-        source_root: &mut SourceRoot,\n-        path: &str,\n-        text: &str,\n-    ) -> FilePosition {\n-        let (offset, text) = extract_offset(text);\n-        let file_id = self.add_file(source_root_id, source_root_prefix, source_root, path, &text);\n-        FilePosition { file_id, offset }\n-    }\n }\n \n impl salsa::Database for MockDatabase {"}]}