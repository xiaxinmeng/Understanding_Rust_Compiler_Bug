{"sha": "eba6c789dcfca7065d1c292c06eb447ac9895db3", "node_id": "C_kwDOAAsO6NoAKGViYTZjNzg5ZGNmY2E3MDY1ZDFjMjkyYzA2ZWI0NDdhYzk4OTVkYjM", "commit": {"author": {"name": "Aaron Kofsky", "email": "aaronko@umich.edu", "date": "2022-06-04T01:33:13Z"}, "committer": {"name": "Aaron Kofsky", "email": "aaronko@umich.edu", "date": "2022-06-04T19:35:13Z"}, "message": "Show code suggestions in `let_undescore` lint messages.\n\nThis commit uses `span_suggestion_verbose` to add what specific code\nchanges can be done as suggested by the lint--in this case, either binding\nthe expression to an unused variable or using `std::mem::drop` to drop\nthe value explicitly.", "tree": {"sha": "ab1c5c0ef860cad7606256e9b1fc97de9252011c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab1c5c0ef860cad7606256e9b1fc97de9252011c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eba6c789dcfca7065d1c292c06eb447ac9895db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eba6c789dcfca7065d1c292c06eb447ac9895db3", "html_url": "https://github.com/rust-lang/rust/commit/eba6c789dcfca7065d1c292c06eb447ac9895db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eba6c789dcfca7065d1c292c06eb447ac9895db3/comments", "author": {"login": "a2aaron", "id": 15718048, "node_id": "MDQ6VXNlcjE1NzE4MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/15718048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a2aaron", "html_url": "https://github.com/a2aaron", "followers_url": "https://api.github.com/users/a2aaron/followers", "following_url": "https://api.github.com/users/a2aaron/following{/other_user}", "gists_url": "https://api.github.com/users/a2aaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/a2aaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a2aaron/subscriptions", "organizations_url": "https://api.github.com/users/a2aaron/orgs", "repos_url": "https://api.github.com/users/a2aaron/repos", "events_url": "https://api.github.com/users/a2aaron/events{/privacy}", "received_events_url": "https://api.github.com/users/a2aaron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a2aaron", "id": 15718048, "node_id": "MDQ6VXNlcjE1NzE4MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/15718048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a2aaron", "html_url": "https://github.com/a2aaron", "followers_url": "https://api.github.com/users/a2aaron/followers", "following_url": "https://api.github.com/users/a2aaron/following{/other_user}", "gists_url": "https://api.github.com/users/a2aaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/a2aaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a2aaron/subscriptions", "organizations_url": "https://api.github.com/users/a2aaron/orgs", "repos_url": "https://api.github.com/users/a2aaron/repos", "events_url": "https://api.github.com/users/a2aaron/events{/privacy}", "received_events_url": "https://api.github.com/users/a2aaron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2ac3b4c568d2d20cb395a57a163e1e298d6d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2ac3b4c568d2d20cb395a57a163e1e298d6d6c", "html_url": "https://github.com/rust-lang/rust/commit/ae2ac3b4c568d2d20cb395a57a163e1e298d6d6c"}], "stats": {"total": 100, "additions": 79, "deletions": 21}, "files": [{"sha": "4e4cedaeb782174713e3f57275d5a472861371cc", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/eba6c789dcfca7065d1c292c06eb447ac9895db3/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba6c789dcfca7065d1c292c06eb447ac9895db3/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=eba6c789dcfca7065d1c292c06eb447ac9895db3", "patch": "@@ -1,6 +1,10 @@\n use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n+use rustc_middle::{\n+    lint::LintDiagnosticBuilder,\n+    ty::{self, subst::GenericArgKind, Ty},\n+};\n use rustc_span::Symbol;\n \n declare_lint! {\n@@ -141,30 +145,60 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n             });\n             let is_must_use_ty = is_must_use_ty(cx, cx.typeck_results().expr_ty(init));\n             let is_must_use_func_call = is_must_use_func_call(cx, init);\n+\n             if is_sync_lock {\n                 cx.struct_span_lint(LET_UNDERSCORE_LOCK, local.span, |lint| {\n-                    lint.build(\"non-binding let on a synchronization lock\")\n-                        .help(\"consider binding to an unused variable\")\n-                        .help(\"consider explicitly droping with `std::mem::drop`\")\n-                        .emit();\n+                    build_and_emit_lint(\n+                        lint,\n+                        local,\n+                        init.span,\n+                        \"non-binding let on a synchronization lock\",\n+                    )\n                 })\n             } else if is_must_use_ty || is_must_use_func_call {\n                 cx.struct_span_lint(LET_UNDERSCORE_MUST_USE, local.span, |lint| {\n-                    lint.build(\"non-binding let on a expression marked `must_use`\")\n-                        .help(\"consider binding to an unused variable\")\n-                        .help(\"consider explicitly droping with `std::mem::drop`\")\n-                        .emit();\n+                    build_and_emit_lint(\n+                        lint,\n+                        local,\n+                        init.span,\n+                        \"non-binding let on a expression marked `must_use`\",\n+                    );\n                 })\n             } else if needs_drop {\n                 cx.struct_span_lint(LET_UNDERSCORE_DROP, local.span, |lint| {\n-                    lint.build(\"non-binding let on a type that implements `Drop`\")\n-                        .help(\"consider binding to an unused variable\")\n-                        .help(\"consider explicitly droping with `std::mem::drop`\")\n-                        .emit();\n+                    build_and_emit_lint(\n+                        lint,\n+                        local,\n+                        init.span,\n+                        \"non-binding let on a type that implements `Drop`\",\n+                    );\n                 })\n             }\n         }\n \n+        fn build_and_emit_lint(\n+            lint: LintDiagnosticBuilder<'_, ()>,\n+            local: &hir::Local<'_>,\n+            init_span: rustc_span::Span,\n+            msg: &str,\n+        ) {\n+            lint.build(msg)\n+                .span_suggestion_verbose(\n+                    local.pat.span,\n+                    \"consider binding to an unused variable\",\n+                    \"_unused\",\n+                    Applicability::MachineApplicable,\n+                )\n+                .span_suggestion_verbose(\n+                    init_span,\n+                    \"consider explicitly droping with `std::mem::drop`\",\n+                    \"drop(...)\",\n+                    Applicability::HasPlaceholders,\n+                )\n+                .emit();\n+        }\n+\n+        // return true if `ty` is a type that is marked as `must_use`\n         fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             match ty.kind() {\n                 ty::Adt(adt, _) => has_must_use_attr(cx, adt.did()),"}, {"sha": "5034f682bb76bf73b0b8f2783352701fc9a8a9f2", "filename": "src/test/ui/let_underscore/let_underscore_drop.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eba6c789dcfca7065d1c292c06eb447ac9895db3/src%2Ftest%2Fui%2Flet_underscore%2Flet_underscore_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba6c789dcfca7065d1c292c06eb447ac9895db3/src%2Ftest%2Fui%2Flet_underscore%2Flet_underscore_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet_underscore%2Flet_underscore_drop.stderr?ref=eba6c789dcfca7065d1c292c06eb447ac9895db3", "patch": "@@ -5,8 +5,14 @@ LL |     let _ = NontrivialDrop;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: requested on the command line with `-W let-underscore-drop`\n-   = help: consider binding to an unused variable\n-   = help: consider explicitly droping with `std::mem::drop`\n+help: consider binding to an unused variable\n+   |\n+LL |     let _unused = NontrivialDrop;\n+   |         ~~~~~~~\n+help: consider explicitly droping with `std::mem::drop`\n+   |\n+LL |     let _ = drop(...);\n+   |             ~~~~~~~~~\n \n warning: 1 warning emitted\n "}, {"sha": "08f81962f3c6553a0abd72e55d09a04eaf6d40a0", "filename": "src/test/ui/let_underscore/let_underscore_lock.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eba6c789dcfca7065d1c292c06eb447ac9895db3/src%2Ftest%2Fui%2Flet_underscore%2Flet_underscore_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba6c789dcfca7065d1c292c06eb447ac9895db3/src%2Ftest%2Fui%2Flet_underscore%2Flet_underscore_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet_underscore%2Flet_underscore_lock.stderr?ref=eba6c789dcfca7065d1c292c06eb447ac9895db3", "patch": "@@ -5,8 +5,14 @@ LL |     let _ = data.lock().unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(let_underscore_lock)]` on by default\n-   = help: consider binding to an unused variable\n-   = help: consider explicitly droping with `std::mem::drop`\n+help: consider binding to an unused variable\n+   |\n+LL |     let _unused = data.lock().unwrap();\n+   |         ~~~~~~~\n+help: consider explicitly droping with `std::mem::drop`\n+   |\n+LL |     let _ = drop(...);\n+   |             ~~~~~~~~~\n \n warning: 1 warning emitted\n "}, {"sha": "959572edd7c0da419c639d8629f6929c928e653a", "filename": "src/test/ui/let_underscore/let_underscore_must_use.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eba6c789dcfca7065d1c292c06eb447ac9895db3/src%2Ftest%2Fui%2Flet_underscore%2Flet_underscore_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba6c789dcfca7065d1c292c06eb447ac9895db3/src%2Ftest%2Fui%2Flet_underscore%2Flet_underscore_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet_underscore%2Flet_underscore_must_use.stderr?ref=eba6c789dcfca7065d1c292c06eb447ac9895db3", "patch": "@@ -5,17 +5,29 @@ LL |     let _ = MustUseType;\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: requested on the command line with `-W let-underscore-must-use`\n-   = help: consider binding to an unused variable\n-   = help: consider explicitly droping with `std::mem::drop`\n+help: consider binding to an unused variable\n+   |\n+LL |     let _unused = MustUseType;\n+   |         ~~~~~~~\n+help: consider explicitly droping with `std::mem::drop`\n+   |\n+LL |     let _ = drop(...);\n+   |             ~~~~~~~~~\n \n warning: non-binding let on a expression marked `must_use`\n   --> $DIR/let_underscore_must_use.rs:12:5\n    |\n LL |     let _ = must_use_function();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider binding to an unused variable\n-   = help: consider explicitly droping with `std::mem::drop`\n+help: consider binding to an unused variable\n+   |\n+LL |     let _unused = must_use_function();\n+   |         ~~~~~~~\n+help: consider explicitly droping with `std::mem::drop`\n+   |\n+LL |     let _ = drop(...);\n+   |             ~~~~~~~~~\n \n warning: 2 warnings emitted\n "}]}