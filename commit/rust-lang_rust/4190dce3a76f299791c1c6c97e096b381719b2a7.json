{"sha": "4190dce3a76f299791c1c6c97e096b381719b2a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOTBkY2UzYTc2ZjI5OTc5MWMxYzZjOTdlMDk2YjM4MTcxOWIyYTc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-25T15:02:59Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-26T16:22:40Z"}, "message": "fix tidy", "tree": {"sha": "2b3a1ac900510318a2fbc60a49b792416a00fb0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3a1ac900510318a2fbc60a49b792416a00fb0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4190dce3a76f299791c1c6c97e096b381719b2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4190dce3a76f299791c1c6c97e096b381719b2a7", "html_url": "https://github.com/rust-lang/rust/commit/4190dce3a76f299791c1c6c97e096b381719b2a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4190dce3a76f299791c1c6c97e096b381719b2a7/comments", "author": null, "committer": null, "parents": [{"sha": "52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "html_url": "https://github.com/rust-lang/rust/commit/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "2db43a9497612b5b5276cd1f4e1e36754ca9907f", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=4190dce3a76f299791c1c6c97e096b381719b2a7", "patch": "@@ -42,7 +42,7 @@ use syntax::codemap::Span;\n use syntax::ptr::P;\n use rustc_back::target::Target;\n use rustc_front::hir;\n-use rustc_front::visit::Visitor;\n+use rustc_front::intravisit::Visitor;\n use rustc_front::util::IdVisitor;\n \n pub use self::DefLike::{DlDef, DlField, DlImpl};\n@@ -123,6 +123,13 @@ pub enum FoundAst<'ast> {\n     NotFound,\n }\n \n+/// A store of Rust crates, through with their metadata\n+/// can be accessed.\n+///\n+/// The `: Any` bound is a temporary measure that allows access\n+/// to the backing `rustc_metadata::cstore::CStore` object. It\n+/// will be removed in the near future - if you need to access\n+/// internal APIs, please tell us.\n pub trait CrateStore<'tcx> : Any {\n     // item info\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n@@ -244,11 +251,7 @@ impl InlinedItem {\n     }\n \n     pub fn visit_ids<O: IdVisitingOperation>(&self, operation: &mut O) {\n-        let mut id_visitor = IdVisitor {\n-            operation: operation,\n-            pass_through_items: true,\n-            visited_outermost: false,\n-        };\n+        let mut id_visitor = IdVisitor::new(operation);\n         self.visit(&mut id_visitor);\n     }\n }"}, {"sha": "3a91b573fd4aa8db3abb4bf82611d0926ea6f060", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4190dce3a76f299791c1c6c97e096b381719b2a7", "patch": "@@ -106,7 +106,10 @@ pub mod target_features;\n const BUG_REPORT_URL: &'static str = \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.\\\n                                       md#bug-reports\";\n \n-// [stage0]: kill this\n+// SNAP 1af31d4\n+// This is a terrible hack. Our stage0 is older than 1.4 and does not\n+// support DST coercions, so this function performs the corecion\n+// manually. This should go away.\n pub fn cstore_to_cratestore(a: Rc<CStore>) -> Rc<for<'s> CrateStore<'s>>\n {\n     use std::mem;"}, {"sha": "4420da5f9b87dfd3f7d77fcb18f73d24381e1b27", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=4190dce3a76f299791c1c6c97e096b381719b2a7", "patch": "@@ -20,7 +20,7 @@ use loader::{self, CratePaths};\n use rustc::back::svh::Svh;\n use rustc::session::{config, Session};\n use rustc::session::search_paths::PathKind;\n-use rustc::middle::cstore::validate_crate_name;\n+use rustc::middle::cstore::{CrateStore, validate_crate_name};\n use rustc::util::nodemap::FnvHashMap;\n use rustc::front::map as hir_map;\n \n@@ -223,7 +223,7 @@ impl<'a> CrateReader<'a> {\n             // We're also sure to compare *paths*, not actual byte slices. The\n             // `source` stores paths which are normalized which may be different\n             // from the strings on the command line.\n-            let source = self.cstore.do_get_used_crate_source(cnum).unwrap();\n+            let source = self.cstore.used_crate_source(cnum);\n             if let Some(locs) = self.sess.opts.externs.get(name) {\n                 let found = locs.iter().any(|l| {\n                     let l = fs::canonicalize(l).ok();\n@@ -395,7 +395,7 @@ impl<'a> CrateReader<'a> {\n                 if explicitly_linked && !data.explicitly_linked.get() {\n                     data.explicitly_linked.set(explicitly_linked);\n                 }\n-                (cnum, data, self.cstore.do_get_used_crate_source(cnum).unwrap())\n+                (cnum, data, self.cstore.used_crate_source(cnum))\n             }\n             LookupResult::Loaded(library) => {\n                 self.register_crate(root, ident, name, span, library,\n@@ -707,7 +707,8 @@ impl<'a> CrateReader<'a> {\n }\n \n impl<'a, 'b> LocalCrateReader<'a, 'b> {\n-    pub fn new(sess: &'a Session, cstore: &'a CStore, map: &'a hir_map::Map<'b>) -> LocalCrateReader<'a, 'b> {\n+    pub fn new(sess: &'a Session, cstore: &'a CStore,\n+               map: &'a hir_map::Map<'b>) -> LocalCrateReader<'a, 'b> {\n         LocalCrateReader {\n             sess: sess,\n             cstore: cstore,"}, {"sha": "3c97692ee56eb5a4d205cc9ddc5d9c848464ee3d", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=4190dce3a76f299791c1c6c97e096b381719b2a7", "patch": "@@ -447,12 +447,12 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource\n     {\n-        self.do_get_used_crate_source(cnum).unwrap()\n+        self.opt_used_crate_source(cnum).unwrap()\n     }\n \n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>\n     {\n-        self.find_extern_mod_stmt_cnum(emod_id)\n+        self.do_extern_mod_stmt_cnum(emod_id)\n     }\n \n     fn encode_metadata(&self,"}, {"sha": "b0eef29467ba21b4db5faade747da69189d898bd", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=4190dce3a76f299791c1c6c97e096b381719b2a7", "patch": "@@ -136,7 +136,7 @@ impl CStore {\n         I: FnMut(ast::CrateNum, &crate_metadata, Option<CrateSource>),\n     {\n         for (&k, v) in self.metas.borrow().iter() {\n-            let origin = self.do_get_used_crate_source(k);\n+            let origin = self.opt_used_crate_source(k);\n             origin.as_ref().map(|cs| { assert!(k == cs.cnum); });\n             i(k, &**v, origin);\n         }\n@@ -149,9 +149,8 @@ impl CStore {\n         }\n     }\n \n-    // TODO: killdo\n-    pub fn do_get_used_crate_source(&self, cnum: ast::CrateNum)\n-                                    -> Option<CrateSource> {\n+    pub fn opt_used_crate_source(&self, cnum: ast::CrateNum)\n+                                 -> Option<CrateSource> {\n         self.used_crate_sources.borrow_mut()\n             .iter().find(|source| source.cnum == cnum).cloned()\n     }\n@@ -174,7 +173,6 @@ impl CStore {\n     // In order to get this left-to-right dependency ordering, we perform a\n     // topological sort of all crates putting the leaves at the right-most\n     // positions.\n-    // TODO: killdo\n     pub fn do_get_used_crates(&self, prefer: LinkagePreference)\n                               -> Vec<(ast::CrateNum, Option<PathBuf>)> {\n         let mut ordering = Vec::new();\n@@ -234,18 +232,18 @@ impl CStore {\n         self.extern_mod_crate_map.borrow_mut().insert(emod_id, cnum);\n     }\n \n-    pub fn find_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId)\n-                                     -> Option<ast::CrateNum> {\n-        self.extern_mod_crate_map.borrow().get(&emod_id).cloned()\n-    }\n-\n     pub fn add_statically_included_foreign_item(&self, id: ast::NodeId) {\n         self.statically_included_foreign_items.borrow_mut().insert(id);\n     }\n \n     pub fn do_is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool {\n         self.statically_included_foreign_items.borrow().contains(&id)\n     }\n+\n+    pub fn do_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>\n+    {\n+        self.extern_mod_crate_map.borrow().get(&emod_id).cloned()\n+    }\n }\n \n impl crate_metadata {"}, {"sha": "40cd5e5bf278715ce39ea3b7f23c8ddf0c2fb105", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=4190dce3a76f299791c1c6c97e096b381719b2a7", "patch": "@@ -169,7 +169,7 @@ fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean\n         _ => panic!(\"bad function\"),\n     };\n \n-    let constness = if csearch::is_const_fn(&tcx.sess.cstore, did) {\n+    let constness = if tcx.sess.cstore.is_const_fn(did) {\n         hir::Constness::Const\n     } else {\n         hir::Constness::NotConst\n@@ -346,7 +346,7 @@ pub fn build_impl(cx: &DocContext,\n                     clean::TyMethodItem(clean::TyMethod {\n                         unsafety, decl, self_, generics, abi\n                     }) => {\n-                        let constness = if csearch::is_const_fn(&tcx.sess.cstore, did) {\n+                        let constness = if tcx.sess.cstore.is_const_fn(did) {\n                             hir::Constness::Const\n                         } else {\n                             hir::Constness::NotConst"}, {"sha": "e6c9b1b41c0486bebef3aa6c1e04b86309658a8a", "filename": "src/test/compile-fail/use-from-trait-xc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4190dce3a76f299791c1c6c97e096b381719b2a7/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs?ref=4190dce3a76f299791c1c6c97e096b381719b2a7", "patch": "@@ -22,13 +22,13 @@ use use_from_trait_xc::Trait::CONST;\n //~^ ERROR `CONST` is not directly importable\n \n use use_from_trait_xc::Foo::new;\n-//~^ ERROR `new` is not directly importable\n+//~^ ERROR unresolved import `use_from_trait_xc::Foo::new`\n \n use use_from_trait_xc::Foo::C;\n //~^ ERROR unresolved import `use_from_trait_xc::Foo::C`\n \n use use_from_trait_xc::Bar::new as bnew;\n-//~^ ERROR `bnew` is not directly importable\n+//~^ ERROR unresolved import `use_from_trait_xc::Bar::new`\n \n use use_from_trait_xc::Baz::new as baznew;\n //~^ ERROR `baznew` is not directly importable"}]}