{"sha": "068142a2e6d8a72e52091ccebd3368ffaf267643", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ODE0MmEyZTZkOGE3MmU1MjA5MWNjZWJkMzM2OGZmYWYyNjc2NDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-28T21:49:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-06T16:42:46Z"}, "message": "add incremental test runner and some tests", "tree": {"sha": "0349999e2e90268f37a3ad230be511fe2280bbd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0349999e2e90268f37a3ad230be511fe2280bbd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/068142a2e6d8a72e52091ccebd3368ffaf267643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/068142a2e6d8a72e52091ccebd3368ffaf267643", "html_url": "https://github.com/rust-lang/rust/commit/068142a2e6d8a72e52091ccebd3368ffaf267643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/068142a2e6d8a72e52091ccebd3368ffaf267643/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fb40c1d95dd3a14ad14d71e3ec847a0a102bd49", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb40c1d95dd3a14ad14d71e3ec847a0a102bd49", "html_url": "https://github.com/rust-lang/rust/commit/3fb40c1d95dd3a14ad14d71e3ec847a0a102bd49"}], "stats": {"total": 243, "additions": 240, "deletions": 3}, "files": [{"sha": "0b8f0f80deac27301ef545675d516491808141ab", "filename": "mk/tests.mk", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/068142a2e6d8a72e52091ccebd3368ffaf267643/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/068142a2e6d8a72e52091ccebd3368ffaf267643/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=068142a2e6d8a72e52091ccebd3368ffaf267643", "patch": "@@ -305,6 +305,7 @@ check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-gdb-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-lldb-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-incremental-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-doc-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec\n \n@@ -481,6 +482,7 @@ DEBUGINFO_LLDB_RS := $(call rwildcard,$(S)src/test/debuginfo/,*.rs)\n CODEGEN_RS := $(call rwildcard,$(S)src/test/codegen/,*.rs)\n CODEGEN_CC := $(call rwildcard,$(S)src/test/codegen/,*.cc)\n CODEGEN_UNITS_RS := $(call rwildcard,$(S)src/test/codegen-units/,*.rs)\n+INCREMENTAL_RS := $(call rwildcard,$(S)src/test/incremental/,*.rs)\n RUSTDOCCK_RS := $(call rwildcard,$(S)src/test/rustdoc/,*.rs)\n \n RPASS_TESTS := $(RPASS_RS)\n@@ -496,6 +498,7 @@ DEBUGINFO_GDB_TESTS := $(DEBUGINFO_GDB_RS)\n DEBUGINFO_LLDB_TESTS := $(DEBUGINFO_LLDB_RS)\n CODEGEN_TESTS := $(CODEGEN_RS) $(CODEGEN_CC)\n CODEGEN_UNITS_TESTS := $(CODEGEN_UNITS_RS)\n+INCREMENTAL_TESTS := $(INCREMENTAL_RS)\n RUSTDOCCK_TESTS := $(RUSTDOCCK_RS)\n \n CTEST_SRC_BASE_rpass = run-pass\n@@ -558,6 +561,11 @@ CTEST_BUILD_BASE_codegen-units = codegen-units\n CTEST_MODE_codegen-units = codegen-units\n CTEST_RUNTOOL_codegen-units = $(CTEST_RUNTOOL)\n \n+CTEST_SRC_BASE_incremental = incremental\n+CTEST_BUILD_BASE_incremental = incremental\n+CTEST_MODE_incremental = incremental\n+CTEST_RUNTOOL_incremental = $(CTEST_RUNTOOL)\n+\n CTEST_SRC_BASE_rustdocck = rustdoc\n CTEST_BUILD_BASE_rustdocck = rustdoc\n CTEST_MODE_rustdocck = rustdoc\n@@ -681,6 +689,7 @@ CTEST_DEPS_debuginfo-lldb_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_LLDB_TESTS) \\\n                                                $(S)src/etc/lldb_rust_formatters.py\n CTEST_DEPS_codegen_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_TESTS)\n CTEST_DEPS_codegen-units_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_UNITS_TESTS)\n+CTEST_DEPS_incremental_$(1)-T-$(2)-H-$(3) = $$(INCREMENTAL_TESTS)\n CTEST_DEPS_rustdocck_$(1)-T-$(2)-H-$(3) = $$(RUSTDOCCK_TESTS) \\\n \t\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n \t\t$(S)src/etc/htmldocck.py\n@@ -747,7 +756,7 @@ endif\n endef\n \n CTEST_NAMES = rpass rpass-valgrind rpass-full rfail-full cfail-full rfail cfail pfail \\\n-\tdebuginfo-gdb debuginfo-lldb codegen codegen-units rustdocck\n+\tdebuginfo-gdb debuginfo-lldb codegen codegen-units rustdocck incremental\n \n $(foreach host,$(CFG_HOST), \\\n  $(eval $(foreach target,$(CFG_TARGET), \\\n@@ -945,6 +954,7 @@ TEST_GROUPS = \\\n \tdebuginfo-lldb \\\n \tcodegen \\\n \tcodegen-units \\\n+    incremental \\\n \tdoc \\\n \t$(foreach docname,$(DOC_NAMES),doc-$(docname)) \\\n \tpretty \\"}, {"sha": "a6960ff17854ecf27f0bda277f3e4c702f484f65", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=068142a2e6d8a72e52091ccebd3368ffaf267643", "patch": "@@ -25,7 +25,8 @@ pub enum Mode {\n     DebugInfoLldb,\n     Codegen,\n     Rustdoc,\n-    CodegenUnits\n+    CodegenUnits,\n+    Incremental,\n }\n \n impl FromStr for Mode {\n@@ -43,6 +44,7 @@ impl FromStr for Mode {\n           \"codegen\" => Ok(Codegen),\n           \"rustdoc\" => Ok(Rustdoc),\n           \"codegen-units\" => Ok(CodegenUnits),\n+          \"incremental\" => Ok(Incremental),\n           _ => Err(()),\n         }\n     }\n@@ -62,6 +64,7 @@ impl fmt::Display for Mode {\n             Codegen => \"codegen\",\n             Rustdoc => \"rustdoc\",\n             CodegenUnits => \"codegen-units\",\n+            Incremental => \"incremental\",\n         }, f)\n     }\n }"}, {"sha": "1c06b2a23d54dde779f98c7cda5b7708d3f37979", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=068142a2e6d8a72e52091ccebd3368ffaf267643", "patch": "@@ -71,7 +71,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           reqopt(\"\", \"aux-base\", \"directory to find auxiliary test files\", \"PATH\"),\n           reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\"),\n           reqopt(\"\", \"mode\", \"which sort of compile tests to run\",\n-                 \"(compile-fail|parse-fail|run-fail|run-pass|run-pass-valgrind|pretty|debug-info)\"),\n+                 \"(compile-fail|parse-fail|run-fail|run-pass|\\\n+                  run-pass-valgrind|pretty|debug-info|incremental)\"),\n           optflag(\"\", \"ignored\", \"run tests marked as ignored\"),\n           optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n                                  (eg. emulator, valgrind)\", \"PROGRAM\"),"}, {"sha": "802b967ed7d90276a2e4d38e4a901dc8fbee2e79", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=068142a2e6d8a72e52091ccebd3368ffaf267643", "patch": "@@ -11,6 +11,7 @@\n use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc, CodegenUnits};\n+use common::{Incremental};\n use errors::{self, ErrorKind};\n use header::TestProps;\n use header;\n@@ -59,6 +60,7 @@ pub fn run(config: Config, testpaths: &TestPaths) {\n         Codegen => run_codegen_test(&config, &props, &testpaths),\n         Rustdoc => run_rustdoc_test(&config, &props, &testpaths),\n         CodegenUnits => run_codegen_units_test(&config, &props, &testpaths),\n+        Incremental => run_incremental_test(&config, &props, &testpaths),\n     }\n }\n \n@@ -1966,3 +1968,66 @@ fn run_codegen_units_test(config: &Config, props: &TestProps, testpaths: &TestPa\n         panic!();\n     }\n }\n+\n+fn run_incremental_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n+    // Basic plan for a test incremental/foo/bar.rs:\n+    // - load list of revisions pass1, fail2, pass3\n+    //   - each should begin with `pass` or `fail`\n+    //   - if `pass`, expect compile to succeed\n+    //   - if `fail`, expect errors from file\n+    // - create a directory build/foo/bar.incremental\n+    // - compile foo/bar.rs with -Z incremental=.../foo/bar.incremental and -C pass1\n+    //   - because name of revision starts with \"pass\", expect success\n+    // - compile foo/bar.rs with -Z incremental=.../foo/bar.incremental and -C fail2\n+    //   - because name of revision starts with \"fail\", expect an error\n+    //   - load expected errors as usual, but filter for those that end in `[fail2]`\n+    // - compile foo/bar.rs with -Z incremental=.../foo/bar.incremental and -C pass3\n+    //   - because name of revision starts with \"pass\", expect success\n+    // - execute build/foo/bar.exe and save output\n+    //\n+    // FIXME -- use non-incremental mode as an oracle? That doesn't apply\n+    // to #[rustc_dirty] and clean tests I guess\n+\n+    assert!(!props.revisions.is_empty(), \"incremental tests require a list of revisions\");\n+\n+    let output_base_name = output_base_name(config, testpaths);\n+\n+    // Create the incremental workproduct directory.\n+    let incremental_dir = output_base_name.with_extension(\"incremental\");\n+    if incremental_dir.exists() {\n+        fs::remove_dir_all(&incremental_dir).unwrap();\n+    }\n+    fs::create_dir_all(&incremental_dir).unwrap();\n+\n+    if config.verbose {\n+        print!(\"incremental_dir={}\", incremental_dir.display());\n+    }\n+\n+    for revision in &props.revisions {\n+        let mut revision_props = props.clone();\n+        header::load_props_into(&mut revision_props, &testpaths.file, Some(&revision));\n+\n+        revision_props.compile_flags.extend(vec![\n+            format!(\"-Z\"),\n+            format!(\"incremental={}\", incremental_dir.display()),\n+            format!(\"--cfg\"),\n+            format!(\"{}\", revision),\n+        ]);\n+\n+        if config.verbose {\n+            print!(\"revision={:?} revision_props={:#?}\", revision, revision_props);\n+        }\n+\n+        if revision.starts_with(\"rpass\") {\n+            run_rpass_test_revision(config, &revision_props, testpaths, Some(&revision));\n+        } else if revision.starts_with(\"rfail\") {\n+            run_rfail_test_revision(config, &revision_props, testpaths, Some(&revision));\n+        } else if revision.starts_with(\"cfail\") {\n+            run_cfail_test_revision(config, &revision_props, testpaths, Some(&revision));\n+        } else {\n+            fatal(\n+                Some(revision),\n+                \"revision name must begin with rpass, rfail, or cfail\");\n+        }\n+    }\n+}"}, {"sha": "f0e596baa2d2782d9802801337295c050b941d12", "filename": "src/test/incremental/dirty_clean.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fdirty_clean.rs?ref=068142a2e6d8a72e52091ccebd3368ffaf267643", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: rpass1 cfail2\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+\n+// Sanity check for the dirty-clean system. Give the opposite\n+// annotations that we expect to see, so that we check that errors are\n+// reported.\n+\n+fn main() { }\n+\n+mod x {\n+    #[cfg(rpass1)]\n+    pub fn x() -> usize {\n+        22\n+    }\n+\n+    #[cfg(cfail2)]\n+    pub fn x() -> u32 {\n+        22\n+    }\n+}\n+\n+mod y {\n+    use x;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"TransCrateItem\", cfg=\"cfail2\")]\n+    pub fn y() {\n+        //[cfail2]~^ ERROR `TypeckItemBody(\"y::y\")` not found in dep graph, but should be clean\n+        //[cfail2]~| ERROR `TransCrateItem(\"y::y\")` not found in dep graph, but should be clean\n+        x::x();\n+    }\n+}\n+\n+mod z {\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"TransCrateItem\", cfg=\"cfail2\")]\n+    pub fn z() {\n+        //[cfail2]~^ ERROR `TypeckItemBody(\"z::z\")` found in dep graph, but should be dirty\n+        // FIXME(#32014) -- TransCrateItem ought to be clean, but it is in fact\n+        // dirty, hence we don't see an error here.\n+    }\n+}"}, {"sha": "f98ae188bad9f2647bfb6aeb066caac4eaa01ca2", "filename": "src/test/incremental/hello_world.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Ftest%2Fincremental%2Fhello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Ftest%2Fincremental%2Fhello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhello_world.rs?ref=068142a2e6d8a72e52091ccebd3368ffaf267643", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: rpass1 rpass2\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+\n+fn main() { }\n+\n+mod x {\n+    #[cfg(rpass1)]\n+    pub fn x() -> i32 {\n+        1\n+    }\n+\n+    #[cfg(rpass2)]\n+    pub fn x() -> i32 {\n+        2\n+    }\n+}\n+\n+mod y {\n+    use x;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn y() {\n+        x::x();\n+    }\n+}\n+\n+mod z {\n+    use y;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn z() {\n+        y::y();\n+    }\n+}"}, {"sha": "1acca8b2952a6bf7b12ab743a43fc9aa254530a0", "filename": "src/test/incremental/string_constant.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068142a2e6d8a72e52091ccebd3368ffaf267643/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=068142a2e6d8a72e52091ccebd3368ffaf267643", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: rpass1 rpass2\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+\n+// Here the only thing which changes is the string constant in `x`.\n+// Therefore, the compiler deduces (correctly) that typeck is not\n+// needed even for callers of `x`.\n+//\n+// It is not entirely clear why `TransCrateItem` invalidates `y` and\n+// `z`, actually, I think it's because of the structure of\n+// trans. -nmatsakis\n+\n+fn main() { }\n+\n+mod x {\n+    #[cfg(rpass1)]\n+    pub fn x() {\n+        println!(\"1\");\n+    }\n+\n+    #[cfg(rpass2)]\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TransCrateItem\", cfg=\"rpass2\")]\n+    pub fn x() {\n+        println!(\"2\");\n+    }\n+}\n+\n+mod y {\n+    use x;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TransCrateItem\", cfg=\"rpass2\")]\n+    pub fn y() {\n+        x::x();\n+    }\n+}\n+\n+mod z {\n+    use y;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TransCrateItem\", cfg=\"rpass2\")]\n+    pub fn z() {\n+        y::y();\n+    }\n+}"}]}