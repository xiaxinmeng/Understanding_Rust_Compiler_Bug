{"sha": "5ea04c65c151708272b92d00c8448156239affb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYTA0YzY1YzE1MTcwODI3MmI5MmQwMGM4NDQ4MTU2MjM5YWZmYjI=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-01T06:50:12Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:41:48Z"}, "message": "Add support for recognizing macro body, completely untested.", "tree": {"sha": "ea37e5cb51bb04e9c7c20d01d080865ac12a4255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea37e5cb51bb04e9c7c20d01d080865ac12a4255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ea04c65c151708272b92d00c8448156239affb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea04c65c151708272b92d00c8448156239affb2", "html_url": "https://github.com/rust-lang/rust/commit/5ea04c65c151708272b92d00c8448156239affb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ea04c65c151708272b92d00c8448156239affb2/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "html_url": "https://github.com/rust-lang/rust/commit/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5"}], "stats": {"total": 59, "additions": 43, "deletions": 16}, "files": [{"sha": "235485fe3f515e9ed968687f912867fce38bda95", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=5ea04c65c151708272b92d00c8448156239affb2", "patch": "@@ -272,11 +272,13 @@ enum blk_sort {\n \n type mac = spanned<mac_>;\n \n-type mac_body_ = {str: str, span: span};\n+type mac_arg = @expr;\n+\n+type mac_body_ = {span: span};\n type mac_body = option::t<mac_body_>;\n \n enum mac_ {\n-    mac_invoc(@path, @expr, mac_body),\n+    mac_invoc(@path, mac_arg, mac_body),\n     mac_embed_type(@ty),\n     mac_embed_block(blk),\n     mac_ellipsis,"}, {"sha": "824931a759b7ac4370fc7898fe8b91880f02a359", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=5ea04c65c151708272b92d00c8448156239affb2", "patch": "@@ -6,10 +6,10 @@ import std::map::new_str_hash;\n import codemap;\n \n type syntax_expander =\n-    fn@(ext_ctxt, span, @ast::expr, ast::mac_body) -> @ast::expr;\n+    fn@(ext_ctxt, span, ast::mac_arg, ast::mac_body) -> @ast::expr;\n type macro_def = {ident: str, ext: syntax_extension};\n type macro_definer =\n-    fn@(ext_ctxt, span, @ast::expr, ast::mac_body) -> macro_def;\n+    fn@(ext_ctxt, span, ast::mac_arg, ast::mac_body) -> macro_def;\n \n enum syntax_extension {\n     normal(syntax_expander),\n@@ -118,7 +118,14 @@ fn make_new_lit(cx: ext_ctxt, sp: codemap::span, lit: ast::lit_) ->\n     ret @{id: cx.next_id(), node: ast::expr_lit(sp_lit), span: sp};\n }\n \n-\n+fn get_mac_body(cx: ext_ctxt, sp: span, args: ast::mac_body)\n+    -> ast::mac_body_\n+{\n+    alt (args) {\n+      some(body) {body}\n+      none {cx.span_fatal(sp, \"missing macro body\")}\n+    }\n+}\n \n //\n // Local Variables:"}, {"sha": "b451e449b308434509f5a105d57f3f39eec9f100", "filename": "src/comp/syntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs?ref=5ea04c65c151708272b92d00c8448156239affb2", "patch": "@@ -2,7 +2,7 @@ import option;\n import base::*;\n import syntax::ast;\n \n-fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: @ast::expr,\n+fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {"}, {"sha": "8cf299c5e67b4f701bfbd392b3cd128eb5a8226b", "filename": "src/comp/syntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs?ref=5ea04c65c151708272b92d00c8448156239affb2", "patch": "@@ -9,7 +9,7 @@ import std::generic_os;\n import base::*;\n export expand_syntax_ext;\n \n-fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: @ast::expr,\n+fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {"}, {"sha": "b2425079ed8e97b28b8b5207814794c17d048683", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=5ea04c65c151708272b92d00c8448156239affb2", "patch": "@@ -13,7 +13,7 @@ import codemap::span;\n import syntax::ext::build::*;\n export expand_syntax_ext;\n \n-fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: @ast::expr,\n+fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {"}, {"sha": "a5a2dedcbf9277be596cbd8e44bef01fc7582299", "filename": "src/comp/syntax/ext/ident_to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs?ref=5ea04c65c151708272b92d00c8448156239affb2", "patch": "@@ -2,7 +2,7 @@ import core::{vec, option};\n import base::*;\n import syntax::ast;\n \n-fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: @ast::expr,\n+fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {"}, {"sha": "4047a1b95d31380a908050aa2ec78739678d3342", "filename": "src/comp/syntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs?ref=5ea04c65c151708272b92d00c8448156239affb2", "patch": "@@ -2,9 +2,8 @@ import base::*;\n import syntax::ast;\n import std::io::writer_util;\n \n-fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: @ast::expr,\n+fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n-\n     cx.print_backtrace();\n     std::io::stdout().write_line(print::pprust::expr_to_str(arg));\n "}, {"sha": "b8722122b6967b323541c710d12408cf0e9278da", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=5ea04c65c151708272b92d00c8448156239affb2", "patch": "@@ -6,7 +6,7 @@ import std::map::{hashmap, new_str_hash};\n import option::{some, none};\n import driver::session::session;\n \n-import base::{ext_ctxt, normal};\n+import base::*;\n \n import fold::*;\n import ast_util::respan;\n@@ -669,7 +669,7 @@ fn p_t_s_r_actual_vector(cx: ext_ctxt, elts: [@expr], _repeat_after: bool,\n     }\n }\n \n-fn add_new_extension(cx: ext_ctxt, sp: span, arg: @expr,\n+fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> base::macro_def {\n     let args: [@ast::expr] =\n         alt arg.node {\n@@ -715,8 +715,10 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: @expr,\n                       }\n                     }\n                     clauses +=\n-                        [@{params: pattern_to_selectors(cx, invoc_arg),\n+                        [@{params: pattern_to_selectors\n+                               (cx, invoc_arg),\n                            body: elts[1u]}];\n+\n                     // FIXME: check duplicates (or just simplify\n                     // the macro arg situation)\n                   }\n@@ -753,7 +755,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: @expr,\n              },\n          ext: normal(ext)};\n \n-    fn generic_extension(cx: ext_ctxt, sp: span, arg: @expr,\n+    fn generic_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                          _body: ast::mac_body, clauses: [@clause]) -> @expr {\n         for c: @clause in clauses {\n             alt use_selectors_to_bind(c.params, arg) {"}, {"sha": "ae00c9fbce791be227cfa8e638ad65de599363bb", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea04c65c151708272b92d00c8448156239affb2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=5ea04c65c151708272b92d00c8448156239affb2", "patch": "@@ -993,7 +993,24 @@ fn parse_syntax_ext_naked(p: parser, lo: uint) -> @ast::expr {\n         };\n     let hi = es.span.hi;\n     let e = mk_expr(p, es.span.lo, hi, ast::expr_vec(es.node, ast::imm));\n-    ret mk_mac_expr(p, lo, hi, ast::mac_invoc(pth, e, none));\n+    let b = none;\n+    if p.token == token::LBRACE {\n+        p.bump();\n+        let lo = p.span.lo;\n+        let depth = 1u;\n+        while (depth > 0u) {\n+            alt (p.token) {\n+              token::LBRACE {depth += 1u;}\n+              token::RBRACE {depth -= 1u;}\n+              token::EOF {p.fatal(\"unexpected EOF in macro body\");}\n+              _ {}\n+            }\n+            p.bump();\n+        }\n+        let hi = p.last_span.hi;\n+        b = some({span: mk_sp(lo,hi)});\n+    }\n+    ret mk_mac_expr(p, lo, p.span.hi, ast::mac_invoc(pth, e, b));\n }\n \n fn parse_dot_or_call_expr(p: parser) -> pexpr {"}]}