{"sha": "4386fc218b2fdb3b54c14d113b326795679de1ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzODZmYzIxOGIyZmRiM2I1NGMxNGQxMTNiMzI2Nzk1Njc5ZGUxY2U=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-10-26T20:08:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-26T20:08:10Z"}, "message": "Merge pull request #2068 from topecongiro/issue-2067\n\nFix a subtle bug in rewriting chain", "tree": {"sha": "066613c65043a706eb36b72cb39bb734ecc96518", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/066613c65043a706eb36b72cb39bb734ecc96518"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4386fc218b2fdb3b54c14d113b326795679de1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4386fc218b2fdb3b54c14d113b326795679de1ce", "html_url": "https://github.com/rust-lang/rust/commit/4386fc218b2fdb3b54c14d113b326795679de1ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4386fc218b2fdb3b54c14d113b326795679de1ce/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73b079d3f66f17cf19d7a51403c077a7e0fde242", "url": "https://api.github.com/repos/rust-lang/rust/commits/73b079d3f66f17cf19d7a51403c077a7e0fde242", "html_url": "https://github.com/rust-lang/rust/commit/73b079d3f66f17cf19d7a51403c077a7e0fde242"}, {"sha": "8b7defdb1927cc9377a0bb3d5899d71ba3de1fab", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7defdb1927cc9377a0bb3d5899d71ba3de1fab", "html_url": "https://github.com/rust-lang/rust/commit/8b7defdb1927cc9377a0bb3d5899d71ba3de1fab"}], "stats": {"total": 111, "additions": 83, "deletions": 28}, "files": [{"sha": "20e0be36fe406d3013e61bdc5e0732abb36f3e3c", "filename": "src/chains.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4386fc218b2fdb3b54c14d113b326795679de1ce/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4386fc218b2fdb3b54c14d113b326795679de1ce/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=4386fc218b2fdb3b54c14d113b326795679de1ce", "patch": "@@ -64,7 +64,8 @@ use config::IndentStyle;\n use expr::rewrite_call;\n use macros::convert_try_mac;\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{first_line_width, last_line_extendable, last_line_width, mk_sp, wrap_str};\n+use utils::{first_line_width, last_line_extendable, last_line_width, mk_sp,\n+            trimmed_last_line_width, wrap_str};\n \n use std::cmp::min;\n use std::iter;\n@@ -125,7 +126,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n \n     let first_child_shape = if extend {\n         let overhead = last_line_width(&parent_rewrite);\n-        let offset = parent_rewrite.lines().rev().next().unwrap().trim().len();\n+        let offset = trimmed_last_line_width(&parent_rewrite);\n         match context.config.chain_indent() {\n             IndentStyle::Visual => parent_shape.offset_left(overhead)?,\n             IndentStyle::Block => parent_shape.block().offset_left(offset)?,\n@@ -156,7 +157,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         last_line_width(&parent_rewrite)\n     } else {\n         rewrites.iter().fold(0, |a, b| a + b.len()) + parent_rewrite.len()\n-    };\n+    } + suffix_try_num;\n     let one_line_budget = if rewrites.is_empty() && !context.config.chain_split_single_child() {\n         shape.width\n     } else {\n@@ -165,25 +166,64 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let all_in_one_line = !parent_rewrite_contains_newline\n         && rewrites.iter().all(|s| !s.contains('\\n'))\n         && almost_total < one_line_budget;\n-    let last_shape = if rewrites.is_empty() {\n-        // We only have a single child.\n-        first_child_shape\n-    } else {\n-        match context.config.chain_indent() {\n-            IndentStyle::Visual => other_child_shape.sub_width(shape.rhs_overhead(context.config))?,\n-            IndentStyle::Block => other_child_shape,\n-        }\n+    let last_shape = match context.config.chain_indent() {\n+        IndentStyle::Visual => other_child_shape.sub_width(shape.rhs_overhead(context.config))?,\n+        IndentStyle::Block => other_child_shape,\n     };\n     let last_shape = last_shape.sub_width(suffix_try_num)?;\n+\n+    // Rewrite the last child. The last child of a chain requires special treatment. We need to\n+    // know whether 'overflowing' the last child make a better formatting:\n+    //\n+    // A chain with overflowing the last child:\n+    // ```\n+    // parent.child1.child2.last_child(\n+    //     a,\n+    //     b,\n+    //     c,\n+    // )\n+    // ```\n+    //\n+    // A chain without overflowing the last child (in vertical layout):\n+    // ```\n+    // parent\n+    //     .child1\n+    //     .child2\n+    //     .last_child(a, b, c)\n+    // ```\n+    //\n+    // In particular, overflowing is effective when the last child is a method with a multi-lined\n+    // block-like argument (e.g. closure):\n+    // ```\n+    // parent.child1.chlid2.last_child(|a, b, c| {\n+    //     let x = foo(a, b, c);\n+    //     let y = bar(a, b, c);\n+    //\n+    //     // ...\n+    //\n+    //     result\n+    // })\n+    // ```\n+\n+    // `rewrite_last` rewrites the last child on its own line. We use a closure here instead of\n+    // directly calling `rewrite_chain_subexpr()` to avoid exponential blowup.\n     let rewrite_last = || rewrite_chain_subexpr(last_subexpr, total_span, context, last_shape);\n     let (last_subexpr_str, fits_single_line) = if all_in_one_line || extend_last_subexr {\n+        // First we try to 'overflow' the last child and see if it looks better than using\n+        // vertical layout.\n         parent_shape.offset_left(almost_total).map(|shape| {\n             if let Some(rw) = rewrite_chain_subexpr(last_subexpr, total_span, context, shape) {\n+                // We allow overflowing here only if both of the following conditions match:\n+                // 1. The entire chain fits in a single line expect the last child.\n+                // 2. `last_chlid_str.lines().count() >= 5`.\n                 let line_count = rw.lines().count();\n                 let fits_single_line = almost_total + first_line_width(&rw) <= one_line_budget;\n-                if fits_single_line && (line_count >= 5 || extend_last_subexr) {\n+                if fits_single_line && line_count >= 5 {\n                     (Some(rw), true)\n                 } else {\n+                    // We could not know whether overflowing is better than using vertical layout,\n+                    // just by looking at the overflowed rewrite. Now we rewrite the last child\n+                    // on its own line, and compare two rewrites to choose which is better.\n                     match rewrite_last() {\n                         Some(ref new_rw) if !fits_single_line => (Some(new_rw.clone()), false),\n                         Some(ref new_rw) if new_rw.lines().count() >= line_count => {"}, {"sha": "4eaf52681add55228534c6fd1c4e8e62111e51f7", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4386fc218b2fdb3b54c14d113b326795679de1ce/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4386fc218b2fdb3b54c14d113b326795679de1ce/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4386fc218b2fdb3b54c14d113b326795679de1ce", "patch": "@@ -1871,7 +1871,9 @@ fn rewrite_pat_expr(\n         } else {\n             format!(\"{} \", matcher)\n         };\n-        let pat_shape = shape.offset_left(matcher.len())?.sub_width(connector.len())?;\n+        let pat_shape = shape\n+            .offset_left(matcher.len())?\n+            .sub_width(connector.len())?;\n         let pat_string = pat.rewrite(context, pat_shape)?;\n         let result = format!(\"{}{}{}\", matcher, pat_string, connector);\n         return rewrite_assign_rhs(context, result, expr, shape);"}, {"sha": "e2a07194f2bc5e57f7bffa3c0ba537e27748a70e", "filename": "src/items.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4386fc218b2fdb3b54c14d113b326795679de1ce/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4386fc218b2fdb3b54c14d113b326795679de1ce/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4386fc218b2fdb3b54c14d113b326795679de1ce", "patch": "@@ -2037,9 +2037,7 @@ fn rewrite_args(\n     generics_str_contains_newline: bool,\n ) -> Option<String> {\n     let mut arg_item_strs = args.iter()\n-        .map(|arg| {\n-            arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent))\n-        })\n+        .map(|arg| arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent)))\n         .collect::<Option<Vec<_>>>()?;\n \n     // Account for sugary self.\n@@ -2713,17 +2711,15 @@ impl Rewrite for ast::ForeignItem {\n         let span = mk_sp(self.span.lo(), self.span.hi() - BytePos(1));\n \n         let item_str = match self.node {\n-            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => {\n-                rewrite_fn_base(\n-                    context,\n-                    shape.indent,\n-                    self.ident,\n-                    &FnSig::new(fn_decl, generics, self.vis.clone()),\n-                    span,\n-                    false,\n-                    false,\n-                ).map(|(s, _)| format!(\"{};\", s))\n-            }\n+            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => rewrite_fn_base(\n+                context,\n+                shape.indent,\n+                self.ident,\n+                &FnSig::new(fn_decl, generics, self.vis.clone()),\n+                span,\n+                false,\n+                false,\n+            ).map(|(s, _)| format!(\"{};\", s)),\n             ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function keywords here."}, {"sha": "9812b8af6110c42f340f19f6bcdda5e340dd440d", "filename": "src/string.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4386fc218b2fdb3b54c14d113b326795679de1ce/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4386fc218b2fdb3b54c14d113b326795679de1ce/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=4386fc218b2fdb3b54c14d113b326795679de1ce", "patch": "@@ -67,7 +67,9 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     let ender_length = fmt.line_end.len();\n     // If we cannot put at least a single character per line, the rewrite won't\n     // succeed.\n-    let max_chars = shape.width.checked_sub(fmt.opener.len() + ender_length + 1)? + 1;\n+    let max_chars = shape\n+        .width\n+        .checked_sub(fmt.opener.len() + ender_length + 1)? + 1;\n \n     // Snip a line at a time from `orig` until it is used up. Push the snippet\n     // onto result."}, {"sha": "7a8e4dc917609ebc99df46c06ba1312efde97b2b", "filename": "tests/source/chains.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4386fc218b2fdb3b54c14d113b326795679de1ce/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4386fc218b2fdb3b54c14d113b326795679de1ce/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=4386fc218b2fdb3b54c14d113b326795679de1ce", "patch": "@@ -163,3 +163,10 @@ fn issue1392() {\n         }\n         \"#.trim());\n }\n+\n+// #2067\n+impl Settings {\n+    fn save(&self) -> Result<()> {\n+        let mut file = File::create(&settings_path).chain_err(|| ErrorKind::WriteError(settings_path.clone()))?;\n+    }\n+}"}, {"sha": "1e1d4e1aabeabbb4587e1de5b9ef6701871b0c32", "filename": "tests/target/chains.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4386fc218b2fdb3b54c14d113b326795679de1ce/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4386fc218b2fdb3b54c14d113b326795679de1ce/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=4386fc218b2fdb3b54c14d113b326795679de1ce", "patch": "@@ -183,3 +183,11 @@ fn issue1392() {\n         \"#.trim(),\n     );\n }\n+\n+// #2067\n+impl Settings {\n+    fn save(&self) -> Result<()> {\n+        let mut file = File::create(&settings_path)\n+            .chain_err(|| ErrorKind::WriteError(settings_path.clone()))?;\n+    }\n+}"}]}