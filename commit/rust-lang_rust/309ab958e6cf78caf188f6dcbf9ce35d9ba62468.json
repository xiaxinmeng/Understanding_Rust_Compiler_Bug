{"sha": "309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOWFiOTU4ZTZjZjc4Y2FmMTg4ZjZkY2JmOWNlMzVkOWJhNjI0Njg=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-10-14T12:33:05Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-10-14T12:33:05Z"}, "message": "Removing ccdecl\n\nas per https://github.com/mozilla/rust/pull/9606#discussion_r6930872", "tree": {"sha": "449d98d106e395070eebc5252a6cd341430fb41c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/449d98d106e395070eebc5252a6cd341430fb41c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "html_url": "https://github.com/rust-lang/rust/commit/309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16fc6a694cac35ce962e98e180354cbce6a72f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/16fc6a694cac35ce962e98e180354cbce6a72f54", "html_url": "https://github.com/rust-lang/rust/commit/16fc6a694cac35ce962e98e180354cbce6a72f54"}], "stats": {"total": 104, "additions": 52, "deletions": 52}, "files": [{"sha": "9376e2258975233dab9c768537fb39e04be29335", "filename": "src/libextra/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -19,7 +19,7 @@ static NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n pub mod rustrt {\n     use super::Tm;\n \n-    extern \"cdecl\" {\n+    extern {\n         pub fn get_time(sec: &mut i64, nsec: &mut i32);\n         pub fn precise_time_ns(ns: &mut u64);\n         pub fn rust_tzset();"}, {"sha": "cd8c9cd6ab52536ff1df845a4b548d6532f1ceca", "filename": "src/libextra/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibextra%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibextra%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Funicode.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -162,7 +162,7 @@ pub mod icu {\n \n         // #[link_name = \"icuuc\"]\n         #[link_args = \"-licuuc\"]\n-        extern \"cdecl\" {\n+        extern {\n             pub fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n             pub fn u_isdigit(c: UChar32) -> UBool;\n             pub fn u_islower(c: UChar32) -> UBool;"}, {"sha": "aa899239d8b682ab0b142c7fff918856e4c73874", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -300,7 +300,7 @@ pub mod llvm {\n \n     #[link_args = \"-Lrustllvm -lrustllvm\"]\n     #[link_name = \"rustllvm\"]\n-    extern \"cdecl\" {\n+    extern {\n         /* Create and destroy contexts. */\n         pub fn LLVMContextCreate() -> ContextRef;\n         pub fn LLVMContextDispose(C: ContextRef);"}, {"sha": "7160496f4abadeddca2b2555498c00d36a3029fb", "filename": "src/libstd/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -77,7 +77,7 @@ pub mod rustrt {\n     use libc;\n \n     #[link_name = \"rustrt\"]\n-    extern \"cdecl\" {\n+    extern {\n         pub fn rust_get_stdin() -> *libc::FILE;\n         pub fn rust_get_stdout() -> *libc::FILE;\n         pub fn rust_get_stderr() -> *libc::FILE;"}, {"sha": "3313823fc5f5dd551d01a1803a0723b6970533c2", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -2666,7 +2666,7 @@ pub mod funcs {\n         pub mod ctype {\n             use libc::types::os::arch::c95::{c_char, c_int};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn isalnum(c: c_int) -> c_int;\n                 pub fn isalpha(c: c_int) -> c_int;\n                 pub fn iscntrl(c: c_int) -> c_int;\n@@ -2688,7 +2688,7 @@ pub mod funcs {\n             use libc::types::common::c95::{FILE, c_void, fpos_t};\n             use libc::types::os::arch::c95::{c_char, c_int, c_long, size_t};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n                 pub fn freopen(filename: *c_char, mode: *c_char, file: *FILE)\n                                -> *FILE;\n@@ -2746,7 +2746,7 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_long, c_uint, c_ulong};\n             use libc::types::os::arch::c95::{size_t};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn abs(i: c_int) -> c_int;\n                 pub fn labs(i: c_long) -> c_long;\n                 // Omitted: div, ldiv (return pub type incomplete).\n@@ -2778,7 +2778,7 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int, size_t};\n             use libc::types::os::arch::c95::{wchar_t};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n                 pub fn strncpy(dst: *c_char, src: *c_char, n: size_t)\n                                -> *c_char;\n@@ -2826,7 +2826,7 @@ pub mod funcs {\n             use libc::types::os::common::posix01::stat;\n             use libc::types::os::arch::c95::{c_int, c_char};\n \n-            extern \"cdecl\" {\n+            extern {\n                 #[link_name = \"_chmod\"]\n                 pub fn chmod(path: *c_char, mode: c_int) -> c_int;\n                 #[link_name = \"_mkdir\"]\n@@ -2843,7 +2843,7 @@ pub mod funcs {\n             use libc::types::common::c95::FILE;\n             use libc::types::os::arch::c95::{c_int, c_char};\n \n-            extern \"cdecl\" {\n+            extern {\n                 #[link_name = \"_popen\"]\n                 pub fn popen(command: *c_char, mode: *c_char) -> *FILE;\n                 #[link_name = \"_pclose\"]\n@@ -2858,7 +2858,7 @@ pub mod funcs {\n         #[nolink]\n         pub mod fcntl {\n             use libc::types::os::arch::c95::{c_int, c_char};\n-            extern \"cdecl\" {\n+            extern {\n                 #[link_name = \"_open\"]\n                 pub fn open(path: *c_char, oflag: c_int, mode: c_int)\n                             -> c_int;\n@@ -2879,7 +2879,7 @@ pub mod funcs {\n                                              c_long, size_t};\n             use libc::types::os::arch::c99::intptr_t;\n \n-            extern \"cdecl\" {\n+            extern {\n                 #[link_name = \"_access\"]\n                 pub fn access(path: *c_char, amode: c_int) -> c_int;\n                 #[link_name = \"_chdir\"]\n@@ -2940,7 +2940,7 @@ pub mod funcs {\n             use libc::types::os::arch::posix88::mode_t;\n \n             #[nolink]\n-            extern \"cdecl\" {\n+            extern {\n                 pub fn chmod(path: *c_char, mode: mode_t) -> c_int;\n                 pub fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n \n@@ -2972,7 +2972,7 @@ pub mod funcs {\n             use libc::types::common::c95::FILE;\n             use libc::types::os::arch::c95::{c_char, c_int};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn popen(command: *c_char, mode: *c_char) -> *FILE;\n                 pub fn pclose(stream: *FILE) -> c_int;\n                 pub fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n@@ -2985,7 +2985,7 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::arch::posix88::mode_t;\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn open(path: *c_char, oflag: c_int, mode: c_int)\n                             -> c_int;\n                 pub fn creat(path: *c_char, mode: mode_t) -> c_int;\n@@ -3013,12 +3013,12 @@ pub mod funcs {\n                 rust_readdir(dirp)\n             }\n \n-            extern \"cdecl\" {\n+            extern {\n                 fn rust_opendir(dirname: *c_char) -> *DIR;\n                 fn rust_readdir(dirp: *DIR) -> *dirent_t;\n             }\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn closedir(dirp: *DIR) -> c_int;\n                 pub fn rewinddir(dirp: *DIR);\n                 pub fn seekdir(dirp: *DIR, loc: c_long);\n@@ -3034,7 +3034,7 @@ pub mod funcs {\n             use libc::types::os::arch::posix88::{gid_t, off_t, pid_t};\n             use libc::types::os::arch::posix88::{ssize_t, uid_t};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn access(path: *c_char, amode: c_int) -> c_int;\n                 pub fn alarm(seconds: c_uint) -> c_uint;\n                 pub fn chdir(dir: *c_char) -> c_int;\n@@ -3090,7 +3090,7 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_int};\n             use libc::types::os::arch::posix88::{pid_t};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn kill(pid: pid_t, sig: c_int) -> c_int;\n             }\n         }\n@@ -3101,7 +3101,7 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{size_t, c_int, c_char};\n             use libc::types::os::arch::posix88::{mode_t, off_t};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn mlock(addr: *c_void, len: size_t) -> c_int;\n                 pub fn munlock(addr: *c_void, len: size_t) -> c_int;\n                 pub fn mlockall(flags: c_int) -> c_int;\n@@ -3138,7 +3138,7 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::arch::posix01::stat;\n \n-            extern \"cdecl\" {\n+            extern {\n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n                 #[cfg(target_os = \"android\")]\n@@ -3155,7 +3155,7 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int, size_t};\n             use libc::types::os::arch::posix88::{ssize_t};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn readlink(path: *c_char,\n                                 buf: *mut c_char,\n                                 bufsz: size_t)\n@@ -3181,7 +3181,7 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_int};\n             use libc::types::os::arch::posix88::{pid_t};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn waitpid(pid: pid_t, status: *mut c_int, options: c_int)\n                                -> pid_t;\n             }\n@@ -3193,7 +3193,7 @@ pub mod funcs {\n             use libc::types::os::common::posix01::{glob_t};\n             use option::Option;\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn glob(pattern: *c_char,\n                             flags: c_int,\n                             errfunc: Option<extern \"C\" fn(epath: *c_char, errno: int) -> int>,\n@@ -3207,7 +3207,7 @@ pub mod funcs {\n             use libc::types::common::c95::{c_void};\n             use libc::types::os::arch::c95::{c_int, size_t};\n \n-            extern \"cdecl\" {\n+            extern {\n                 pub fn posix_madvise(addr: *c_void,\n                                      len: size_t,\n                                      advice: c_int)\n@@ -3250,7 +3250,7 @@ pub mod funcs {\n         use libc::types::os::arch::c95::{c_char, c_uchar, c_int, c_uint,\n                                          size_t};\n \n-        extern \"cdecl\" {\n+        extern {\n             pub fn sysctl(name: *c_int,\n                           namelen: c_uint,\n                           oldp: *mut c_void,\n@@ -3283,7 +3283,7 @@ pub mod funcs {\n         use libc::types::common::c95::{c_void};\n         use libc::types::os::arch::c95::{c_uchar, c_int, size_t};\n \n-        extern \"cdecl\" {\n+        extern {\n             pub fn getdtablesize() -> c_int;\n             pub fn madvise(addr: *c_void, len: size_t, advice: c_int)\n                            -> c_int;\n@@ -3302,7 +3302,7 @@ pub mod funcs {\n     pub mod extra {\n         use libc::types::os::arch::c95::{c_char, c_int};\n \n-        extern \"cdecl\" {\n+        extern {\n             pub fn _NSGetExecutablePath(buf: *mut c_char, bufsize: *mut u32)\n                                         -> c_int;\n         }\n@@ -3548,7 +3548,7 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_int, c_long};\n \n             #[nolink]\n-            extern \"cdecl\" {\n+            extern {\n                 #[link_name = \"_commit\"]\n                 pub fn commit(fd: c_int) -> c_int;\n "}, {"sha": "72051a933980e610eca725ca54a1edab570455f6", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -18,7 +18,7 @@ pub mod c_double_utils {\n     use libc::{c_double, c_int};\n \n     #[link_name = \"m\"]\n-    extern \"cdecl\" {\n+    extern {\n         // Alpabetically sorted by link_name\n \n         pub fn acos(n: c_double) -> c_double;\n@@ -106,7 +106,7 @@ pub mod c_float_utils {\n     use libc::{c_float, c_int};\n \n     #[link_name = \"m\"]\n-    extern \"cdecl\" {\n+    extern {\n         // Alpabetically sorted by link_name\n \n         #[link_name=\"acosf\"]"}, {"sha": "ca9c6eb79f98eb37c77e3af2b03073759da04cb9", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -16,6 +16,6 @@\n \n use std::libc;\n \n-extern \"cdecl\" {\n+extern {\n     pub fn rust_get_test_int() -> libc::intptr_t;\n }"}, {"sha": "38c1a32b12e4aefeab44fa775c936fa65bed23b2", "filename": "src/test/compile-fail/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -11,7 +11,7 @@\n \n \n mod test {\n-    extern \"cdecl\" {\n+    extern {\n         pub fn free();\n     }\n }"}, {"sha": "343e9b9b8ad1f103018198a25b0650b2ae5304cb", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -11,7 +11,7 @@\n use std::libc;\n \n #[link_name = \"rustrt\"]\n-extern \"cdecl\" {\n+extern {\n     fn rust_get_test_int() -> libc::intptr_t;\n }\n "}, {"sha": "f8d30a9a6672f2e056266590f464978cb4117727", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -11,7 +11,7 @@\n mod rustrt {\n     use std::libc;\n \n-    extern \"cdecl\" {\n+    extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }"}, {"sha": "866dd6b67053dfb583f211a58f3e2fa359b89d21", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -12,7 +12,7 @@ mod libc {\n     use std::libc::{c_char, c_long, c_longlong};\n \n     #[nolink]\n-    extern \"cdecl\" {\n+    extern {\n         pub fn atol(x: *c_char) -> c_long;\n         pub fn atoll(x: *c_char) -> c_longlong;\n     }"}, {"sha": "89f4440f5bb33056e51bcad98a173402662024c7", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -21,13 +21,13 @@ static b: bool = true;\n \n mod rustrt {\n     #[cfg(bogus)]\n-    extern \"cdecl\" {\n+    extern {\n         // This symbol doesn't exist and would be a link error if this\n         // module was translated\n         pub fn bogus();\n     }\n \n-    extern \"cdecl\" {}\n+    extern {}\n }\n \n #[cfg(bogus)]\n@@ -107,7 +107,7 @@ fn test_in_fn_ctxt() {\n \n mod test_foreign_items {\n     pub mod rustrt {\n-        extern \"cdecl\" {\n+        extern {\n             #[cfg(bogus)]\n             pub fn rust_get_stdin() -> ~str;\n             pub fn rust_get_stdin() -> ~str;"}, {"sha": "9f1ca435c739cecc43340375485624d1511655ed", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -15,7 +15,7 @@ mod rustrt1 {\n     use std::libc;\n \n     #[link_name = \"rustrt\"]\n-    extern \"cdecl\" {\n+    extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n@@ -24,7 +24,7 @@ mod rustrt2 {\n     use std::libc;\n \n     #[link_name = \"rustrt\"]\n-    extern \"cdecl\" {\n+    extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }"}, {"sha": "3c6d33c637cdfe5540dba4d38ca07dc8880b6a32", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -14,7 +14,7 @@ mod libc {\n     use std::libc::{c_char, size_t};\n \n     #[nolink]\n-    extern \"cdecl\" {\n+    extern {\n         #[link_name = \"strlen\"]\n         pub fn my_strlen(str: *c_char) -> size_t;\n     }"}, {"sha": "350a3d6f4fc296baa97513cff68983deff31db00", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -10,26 +10,26 @@\n \n mod bar {\n     #[nolink]\n-    extern \"cdecl\" {}\n+    extern {}\n }\n \n mod zed {\n     #[nolink]\n-    extern \"cdecl\" {}\n+    extern {}\n }\n \n mod libc {\n     use std::libc::{c_int, c_void, size_t, ssize_t};\n \n     #[nolink]\n-    extern \"cdecl\" {\n+    extern {\n         pub fn write(fd: c_int, buf: *c_void, count: size_t) -> ssize_t;\n     }\n }\n \n mod baz {\n     #[nolink]\n-    extern \"cdecl\" {}\n+    extern {}\n }\n \n pub fn main() { }"}, {"sha": "9eebf662843836b794c0a095714be6d6b7850d7f", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -30,7 +30,7 @@ mod m {\n     use std::libc::{c_double, c_int};\n \n     #[link_name = \"m\"]\n-    extern \"cdecl\" {\n+    extern {\n         #[cfg(unix)]\n         #[link_name=\"lgamma_r\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;"}, {"sha": "22f0f1f199f2ccc3bd592dad636dc79804ac9739", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ab958e6cf78caf188f6dcbf9ce35d9ba62468/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=309ab958e6cf78caf188f6dcbf9ce35d9ba62468", "patch": "@@ -39,7 +39,7 @@ mod test_single_attr_outer {\n \n     pub mod rustrt {\n         #[attr = \"val\"]\n-        extern \"cdecl\" {}\n+        extern {}\n     }\n }\n \n@@ -59,7 +59,7 @@ mod test_multi_attr_outer {\n     pub mod rustrt {\n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n-        extern \"cdecl\" {}\n+        extern {}\n     }\n \n     #[attr1 = \"val\"]\n@@ -81,7 +81,7 @@ mod test_stmt_single_attr_outer {\n \n         mod rustrt {\n             #[attr = \"val\"]\n-            extern \"cdecl\" {\n+            extern {\n             }\n         }\n     }\n@@ -107,7 +107,7 @@ mod test_stmt_multi_attr_outer {\n         pub mod rustrt {\n             #[attr1 = \"val\"]\n             #[attr2 = \"val\"]\n-            extern \"cdecl\" {\n+            extern {\n             }\n         }\n         */\n@@ -165,7 +165,7 @@ mod test_foreign_items {\n     pub mod rustrt {\n         use std::libc;\n \n-        extern \"cdecl\" {\n+        extern {\n             #[attr];\n \n             #[attr]"}]}