{"sha": "5ce2466892126a3ea92138df67f09243a22dcb96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZTI0NjY4OTIxMjZhM2VhOTIxMzhkZjY3ZjA5MjQzYTIyZGNiOTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-02T07:19:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-02T07:19:56Z"}, "message": "fix for FieldPlacement rename", "tree": {"sha": "4eb0af07b605028ec52c7808e137a8d815391569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb0af07b605028ec52c7808e137a8d815391569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ce2466892126a3ea92138df67f09243a22dcb96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce2466892126a3ea92138df67f09243a22dcb96", "html_url": "https://github.com/rust-lang/rust/commit/5ce2466892126a3ea92138df67f09243a22dcb96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ce2466892126a3ea92138df67f09243a22dcb96/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "165dfd78a94bb5f30e655b51cde633649107ad42", "url": "https://api.github.com/repos/rust-lang/rust/commits/165dfd78a94bb5f30e655b51cde633649107ad42", "html_url": "https://github.com/rust-lang/rust/commit/165dfd78a94bb5f30e655b51cde633649107ad42"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "7b1ac1aacfc8be50acf0e790df18e7040734a47e", "filename": "src/helpers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ce2466892126a3ea92138df67f09243a22dcb96/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce2466892126a3ea92138df67f09243a22dcb96/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=5ce2466892126a3ea92138df67f09243a22dcb96", "patch": "@@ -324,19 +324,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 fields: impl Iterator<Item = InterpResult<'tcx, MPlaceTy<'tcx, Tag>>>,\n             ) -> InterpResult<'tcx> {\n                 match place.layout.fields {\n-                    layout::FieldPlacement::Array { .. } => {\n+                    layout::FieldsShape::Array { .. } => {\n                         // For the array layout, we know the iterator will yield sorted elements so\n                         // we can avoid the allocation.\n                         self.walk_aggregate(place, fields)\n                     }\n-                    layout::FieldPlacement::Arbitrary { .. } => {\n+                    layout::FieldsShape::Arbitrary { .. } => {\n                         // Gather the subplaces and sort them before visiting.\n                         let mut places =\n                             fields.collect::<InterpResult<'tcx, Vec<MPlaceTy<'tcx, Tag>>>>()?;\n                         places.sort_by_key(|place| place.ptr.assert_ptr().offset);\n                         self.walk_aggregate(place, places.into_iter().map(Ok))\n                     }\n-                    layout::FieldPlacement::Union { .. } => {\n+                    layout::FieldsShape::Union { .. } => {\n                         // Uh, what?\n                         bug!(\"a union is not an aggregate we should ever visit\")\n                     }"}]}