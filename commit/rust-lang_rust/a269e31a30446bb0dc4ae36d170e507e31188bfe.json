{"sha": "a269e31a30446bb0dc4ae36d170e507e31188bfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNjllMzFhMzA0NDZiYjBkYzRhZTM2ZDE3MGU1MDdlMzExODhiZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-06T17:55:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-06T17:55:04Z"}, "message": "Auto merge of #28265 - boblehest:master, r=bluss\n\nIn the last code snippet on the following page there is a bug in the\r\nimplementation of Vec::drain().\r\n\r\nhttps://doc.rust-lang.org/nightly/nomicon/vec-drain.html\r\n\r\n```rust\r\npub fn drain(&mut self) -> Drain<T> {\r\n    // Oops, setting it to 0 while we still need the old value!\r\n    self.len = 0;\r\n\r\n    unsafe {\r\n        Drain {\r\n            // len is used to create a &[T] from &self here,\r\n            // so we end up always creating an empty slice.\r\n            iter: RawValIter::new(&self),\r\n            vec: PhantomData,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nA simple test to verify that Drain is broken can be found here:\r\nhttps://play.rust-lang.org/?gist=30f579565e4bbf4836ce&version=nightly\r\n\r\nAnd here's one with a fixed implementation:\r\nhttps://play.rust-lang.org/?gist=2ec0c1a6dcf5defd7a53&version=nightly", "tree": {"sha": "8f3a2282a4f196a0339ddf2e614d0392edd103ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f3a2282a4f196a0339ddf2e614d0392edd103ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a269e31a30446bb0dc4ae36d170e507e31188bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a269e31a30446bb0dc4ae36d170e507e31188bfe", "html_url": "https://github.com/rust-lang/rust/commit/a269e31a30446bb0dc4ae36d170e507e31188bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a269e31a30446bb0dc4ae36d170e507e31188bfe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84d53ca0afaeac14903d16ab24455f6170795e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84d53ca0afaeac14903d16ab24455f6170795e1", "html_url": "https://github.com/rust-lang/rust/commit/f84d53ca0afaeac14903d16ab24455f6170795e1"}, {"sha": "97dd25094cb1f6575aca71cbe2329382594a8b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/97dd25094cb1f6575aca71cbe2329382594a8b5e", "html_url": "https://github.com/rust-lang/rust/commit/97dd25094cb1f6575aca71cbe2329382594a8b5e"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "6e732ee10742edbf05c5bbc20f4d46c54fabb6ba", "filename": "src/doc/nomicon/vec-drain.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a269e31a30446bb0dc4ae36d170e507e31188bfe/src%2Fdoc%2Fnomicon%2Fvec-drain.md", "raw_url": "https://github.com/rust-lang/rust/raw/a269e31a30446bb0dc4ae36d170e507e31188bfe/src%2Fdoc%2Fnomicon%2Fvec-drain.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fvec-drain.md?ref=a269e31a30446bb0dc4ae36d170e507e31188bfe", "patch": "@@ -129,14 +129,16 @@ impl<'a, T> Drop for Drain<'a, T> {\n \n impl<T> Vec<T> {\n     pub fn drain(&mut self) -> Drain<T> {\n-        // this is a mem::forget safety thing. If Drain is forgotten, we just\n-        // leak the whole Vec's contents. Also we need to do this eventually\n-        // anyway, so why not do it now?\n-        self.len = 0;\n-\n         unsafe {\n+            let iter = RawValIter::new(&self);\n+\n+            // this is a mem::forget safety thing. If Drain is forgotten, we just\n+            // leak the whole Vec's contents. Also we need to do this *eventually*\n+            // anyway, so why not do it now?\n+            self.len = 0;\n+\n             Drain {\n-                iter: RawValIter::new(&self),\n+                iter: iter,\n                 vec: PhantomData,\n             }\n         }"}, {"sha": "ba4537f164093d78f83c89bbb8d28653fbe1fda9", "filename": "src/doc/nomicon/vec-final.md", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a269e31a30446bb0dc4ae36d170e507e31188bfe/src%2Fdoc%2Fnomicon%2Fvec-final.md", "raw_url": "https://github.com/rust-lang/rust/raw/a269e31a30446bb0dc4ae36d170e507e31188bfe/src%2Fdoc%2Fnomicon%2Fvec-final.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fvec-final.md?ref=a269e31a30446bb0dc4ae36d170e507e31188bfe", "patch": "@@ -155,13 +155,16 @@ impl<T> Vec<T> {\n     }\n \n     pub fn drain(&mut self) -> Drain<T> {\n-        // this is a mem::forget safety thing. If this is forgotten, we just\n-        // leak the whole Vec's contents. Also we need to do this *eventually*\n-        // anyway, so why not do it now?\n-        self.len = 0;\n         unsafe {\n+            let iter = RawValIter::new(&self);\n+\n+            // this is a mem::forget safety thing. If Drain is forgotten, we just\n+            // leak the whole Vec's contents. Also we need to do this *eventually*\n+            // anyway, so why not do it now?\n+            self.len = 0;\n+\n             Drain {\n-                iter: RawValIter::new(&self),\n+                iter: iter,\n                 vec: PhantomData,\n             }\n         }"}]}