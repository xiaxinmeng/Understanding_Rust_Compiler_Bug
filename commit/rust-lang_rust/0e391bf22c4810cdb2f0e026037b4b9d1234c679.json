{"sha": "0e391bf22c4810cdb2f0e026037b4b9d1234c679", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMzkxYmYyMmM0ODEwY2RiMmYwZTAyNjAzN2I0YjlkMTIzNGM2Nzk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-02T14:00:11Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-02T14:00:11Z"}, "message": "ICH: Add test case for when overflow checks are disabled.", "tree": {"sha": "480cd549efdc4326101fd25bf2897eaaaa365ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/480cd549efdc4326101fd25bf2897eaaaa365ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e391bf22c4810cdb2f0e026037b4b9d1234c679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e391bf22c4810cdb2f0e026037b4b9d1234c679", "html_url": "https://github.com/rust-lang/rust/commit/0e391bf22c4810cdb2f0e026037b4b9d1234c679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e391bf22c4810cdb2f0e026037b4b9d1234c679/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3025a07338eca4092f96c16011caccee149c8d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3025a07338eca4092f96c16011caccee149c8d4", "html_url": "https://github.com/rust-lang/rust/commit/e3025a07338eca4092f96c16011caccee149c8d4"}], "stats": {"total": 251, "additions": 251, "deletions": 0}, "files": [{"sha": "b84b7f5f378aad93d89386c88b1293c15ada10b2", "filename": "src/test/incremental/hashes/panic_exprs_no_overflow_checks.rs", "status": "added", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/0e391bf22c4810cdb2f0e026037b4b9d1234c679/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e391bf22c4810cdb2f0e026037b4b9d1234c679/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs?ref=0e391bf22c4810cdb2f0e026037b4b9d1234c679", "patch": "@@ -0,0 +1,251 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for exprs that can panic at runtime (e.g. because of bounds checking). For\n+// these expressions an error message containing their source location is\n+// generated, so their hash must always depend on their location in the source\n+// code, not just when debuginfo is enabled.\n+\n+// As opposed to the panic_exprs.rs test case, this test case checks that things\n+// behave as expected when overflow checks are off:\n+//\n+// - Addition, subtraction, and multiplication do not change the ICH, unless\n+//   the function containing them is marked with rustc_inherit_overflow_checks.\n+// - Division by zero and bounds checks always influence the ICH\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph -Z force-overflow-checks=off\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Indexing expression ---------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn indexing(slice: &[u8]) -> u8 {\n+    slice[100]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn indexing(slice: &[u8]) -> u8 {\n+    slice[100]\n+}\n+\n+\n+// Arithmetic overflow plus ----------------------------------------------------\n+#[cfg(cfail1)]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_plus_inherit(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_plus_inherit(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+\n+// Arithmetic overflow minus ----------------------------------------------------\n+#[cfg(cfail1)]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_minus_inherit(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_minus_inherit(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+\n+// Arithmetic overflow mult ----------------------------------------------------\n+#[cfg(cfail1)]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_mult_inherit(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_mult_inherit(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+\n+// Arithmetic overflow negation ------------------------------------------------\n+#[cfg(cfail1)]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_negation_inherit(val: i32) -> i32 {\n+    -val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_negation_inherit(val: i32) -> i32 {\n+    -val\n+}\n+\n+\n+// Division by zero ------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn division_by_zero(val: i32) -> i32 {\n+    2 / val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn division_by_zero(val: i32) -> i32 {\n+    2 / val\n+}\n+\n+// Division by zero ------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn mod_by_zero(val: i32) -> i32 {\n+    2 % val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn mod_by_zero(val: i32) -> i32 {\n+    2 % val\n+}\n+\n+\n+\n+// THE FOLLOWING ITEMS SHOULD NOT BE INFLUENCED BY THEIR SOURCE LOCATION\n+\n+// bitwise ---------------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise(val: i32) -> i32 {\n+    !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise(val: i32) -> i32 {\n+    !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n+}\n+\n+\n+// logical ---------------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n+    val1 && val2 || val3\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n+    val1 && val2 || val3\n+}\n+\n+// Arithmetic overflow plus ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+\n+// Arithmetic overflow minus ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+\n+// Arithmetic overflow mult ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+\n+// Arithmetic overflow negation ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n+    -val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n+    -val\n+}"}]}