{"sha": "44ae6f190993f486d4822dc3da870f564f12b190", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YWU2ZjE5MDk5M2Y0ODZkNDgyMmRjM2RhODcwZjU2NGYxMmIxOTA=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-13T10:59:41Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:10:33Z"}, "message": "rustc_codegen_llvm: use safe references for Twine, DiagnosticInfo, SMDiagnostic.", "tree": {"sha": "36510a74c7bf0218ea1d8822ee47f02f131bf0b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36510a74c7bf0218ea1d8822ee47f02f131bf0b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44ae6f190993f486d4822dc3da870f564f12b190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44ae6f190993f486d4822dc3da870f564f12b190", "html_url": "https://github.com/rust-lang/rust/commit/44ae6f190993f486d4822dc3da870f564f12b190", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44ae6f190993f486d4822dc3da870f564f12b190/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41d7d8e35e54576d55dc6ed3649a6a6e7d6b749e", "url": "https://api.github.com/repos/rust-lang/rust/commits/41d7d8e35e54576d55dc6ed3649a6a6e7d6b749e", "html_url": "https://github.com/rust-lang/rust/commit/41d7d8e35e54576d55dc6ed3649a6a6e7d6b749e"}], "stats": {"total": 53, "additions": 24, "deletions": 29}, "files": [{"sha": "7df050e5e9ee459cdab13e56f6402f20dcddbe84", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ae6f190993f486d4822dc3da870f564f12b190/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ae6f190993f486d4822dc3da870f564f12b190/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=44ae6f190993f486d4822dc3da870f564f12b190", "patch": "@@ -25,9 +25,7 @@ use rustc::session::config::{self, OutputFilenames, OutputType, Passes, SomePass\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n use time_graph::{self, TimeGraph, Timeline};\n-use llvm;\n-use llvm::{PassManagerRef, DiagnosticInfoRef};\n-use llvm::SMDiagnosticRef;\n+use llvm::{self, DiagnosticInfo, PassManagerRef, SMDiagnostic};\n use {CodegenResults, ModuleSource, ModuleCodegen, CompiledModule, ModuleKind};\n use CrateInfo;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n@@ -431,7 +429,7 @@ unsafe extern \"C\" fn report_inline_asm<'a, 'b>(cgcx: &'a CodegenContext,\n     cgcx.diag_emitter.inline_asm_error(cookie as u32, msg.to_string());\n }\n \n-unsafe extern \"C\" fn inline_asm_handler(diag: SMDiagnosticRef,\n+unsafe extern \"C\" fn inline_asm_handler(diag: &SMDiagnostic,\n                                         user: *const c_void,\n                                         cookie: c_uint) {\n     if user.is_null() {\n@@ -445,7 +443,7 @@ unsafe extern \"C\" fn inline_asm_handler(diag: SMDiagnosticRef,\n     report_inline_asm(cgcx, &msg, cookie);\n }\n \n-unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_void) {\n+unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void) {\n     if user.is_null() {\n         return\n     }"}, {"sha": "2c28513222679034c938c4f21cb2f500612fbfa5", "filename": "src/librustc_codegen_llvm/llvm/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44ae6f190993f486d4822dc3da870f564f12b190/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ae6f190993f486d4822dc3da870f564f12b190/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs?ref=44ae6f190993f486d4822dc3da870f564f12b190", "patch": "@@ -16,7 +16,7 @@ pub use self::Diagnostic::*;\n use libc::c_uint;\n use value::Value;\n \n-use super::{DiagnosticInfoRef, TwineRef};\n+use super::{DiagnosticInfo, Twine};\n \n #[derive(Copy, Clone)]\n pub enum OptimizationDiagnosticKind {\n@@ -55,7 +55,7 @@ pub struct OptimizationDiagnostic<'ll> {\n impl OptimizationDiagnostic<'ll> {\n     unsafe fn unpack(\n         kind: OptimizationDiagnosticKind,\n-        di: DiagnosticInfoRef,\n+        di: &'ll DiagnosticInfo,\n     ) -> Self {\n         let mut function = None;\n         let mut line = 0;\n@@ -97,14 +97,14 @@ impl OptimizationDiagnostic<'ll> {\n #[derive(Copy, Clone)]\n pub struct InlineAsmDiagnostic<'ll> {\n     pub cookie: c_uint,\n-    pub message: TwineRef,\n+    pub message: &'ll Twine,\n     pub instruction: &'ll Value,\n }\n \n impl InlineAsmDiagnostic<'ll> {\n-    unsafe fn unpack(di: DiagnosticInfoRef) -> Self {\n+    unsafe fn unpack(di: &'ll DiagnosticInfo) -> Self {\n         let mut cookie = 0;\n-        let mut message = 0 as *mut _;\n+        let mut message = None;\n         let mut instruction = None;\n \n         super::LLVMRustUnpackInlineAsmDiagnostic(\n@@ -116,7 +116,7 @@ impl InlineAsmDiagnostic<'ll> {\n \n         InlineAsmDiagnostic {\n             cookie,\n-            message,\n+            message: message.unwrap(),\n             instruction: instruction.unwrap(),\n         }\n     }\n@@ -125,14 +125,14 @@ impl InlineAsmDiagnostic<'ll> {\n pub enum Diagnostic<'ll> {\n     Optimization(OptimizationDiagnostic<'ll>),\n     InlineAsm(InlineAsmDiagnostic<'ll>),\n-    PGO(DiagnosticInfoRef),\n+    PGO(&'ll DiagnosticInfo),\n \n     /// LLVM has other types that we do not wrap here.\n-    UnknownDiagnostic(DiagnosticInfoRef),\n+    UnknownDiagnostic(&'ll DiagnosticInfo),\n }\n \n impl Diagnostic<'ll> {\n-    pub unsafe fn unpack(di: DiagnosticInfoRef) -> Self {\n+    pub unsafe fn unpack(di: &'ll DiagnosticInfo) -> Self {\n         use super::DiagnosticKind as Dk;\n         let kind = super::LLVMRustGetDiagInfoKind(di);\n "}, {"sha": "a907e9799cd3a604b9ca53b9370a415d27279d07", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/44ae6f190993f486d4822dc3da870f564f12b190/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ae6f190993f486d4822dc3da870f564f12b190/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=44ae6f190993f486d4822dc3da870f564f12b190", "patch": "@@ -404,20 +404,17 @@ pub type ArchiveIteratorRef = *mut ArchiveIterator;\n extern { pub type ArchiveChild; }\n pub type ArchiveChildRef = *mut ArchiveChild;\n extern { pub type Twine; }\n-pub type TwineRef = *mut Twine;\n extern { pub type DiagnosticInfo; }\n-pub type DiagnosticInfoRef = *mut DiagnosticInfo;\n extern { pub type SMDiagnostic; }\n-pub type SMDiagnosticRef = *mut SMDiagnostic;\n extern { pub type RustArchiveMember; }\n pub type RustArchiveMemberRef = *mut RustArchiveMember;\n extern { pub type OperandBundleDef; }\n pub type OperandBundleDefRef = *mut OperandBundleDef;\n extern { pub type Linker; }\n pub type LinkerRef = *mut Linker;\n \n-pub type DiagnosticHandler = unsafe extern \"C\" fn(DiagnosticInfoRef, *mut c_void);\n-pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_void, c_uint);\n+pub type DiagnosticHandler = unsafe extern \"C\" fn(&DiagnosticInfo, *mut c_void);\n+pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(&SMDiagnostic, *const c_void, c_uint);\n \n \n pub mod debuginfo {\n@@ -1481,32 +1478,32 @@ extern \"C\" {\n \n     pub fn LLVMRustGetSectionName(SI: SectionIteratorRef, data: *mut *const c_char) -> size_t;\n \n-    pub fn LLVMRustWriteTwineToString(T: TwineRef, s: RustStringRef);\n+    pub fn LLVMRustWriteTwineToString(T: &Twine, s: RustStringRef);\n \n     pub fn LLVMContextSetDiagnosticHandler(C: &Context,\n                                            Handler: DiagnosticHandler,\n                                            DiagnosticContext: *mut c_void);\n \n-    pub fn LLVMRustUnpackOptimizationDiagnostic(DI: DiagnosticInfoRef,\n+    pub fn LLVMRustUnpackOptimizationDiagnostic(DI: &'a DiagnosticInfo,\n                                                 pass_name_out: RustStringRef,\n-                                                function_out: *mut Option<&Value>,\n+                                                function_out: *mut Option<&'a Value>,\n                                                 loc_line_out: *mut c_uint,\n                                                 loc_column_out: *mut c_uint,\n                                                 loc_filename_out: RustStringRef,\n                                                 message_out: RustStringRef);\n-    pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: DiagnosticInfoRef,\n+    pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: &'a DiagnosticInfo,\n                                              cookie_out: *mut c_uint,\n-                                             message_out: *mut TwineRef,\n-                                             instruction_out: *mut Option<&Value>);\n+                                             message_out: *mut Option<&'a Twine>,\n+                                             instruction_out: *mut Option<&'a Value>);\n \n-    pub fn LLVMRustWriteDiagnosticInfoToString(DI: DiagnosticInfoRef, s: RustStringRef);\n-    pub fn LLVMRustGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;\n+    pub fn LLVMRustWriteDiagnosticInfoToString(DI: &DiagnosticInfo, s: RustStringRef);\n+    pub fn LLVMRustGetDiagInfoKind(DI: &DiagnosticInfo) -> DiagnosticKind;\n \n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(C: &Context,\n                                                  H: InlineAsmDiagHandler,\n                                                  CX: *mut c_void);\n \n-    pub fn LLVMRustWriteSMDiagnosticToString(d: SMDiagnosticRef, s: RustStringRef);\n+    pub fn LLVMRustWriteSMDiagnosticToString(d: &SMDiagnostic, s: RustStringRef);\n \n     pub fn LLVMRustWriteArchive(Dst: *const c_char,\n                                 NumMembers: size_t,"}, {"sha": "20c88d94a415db9a01fa906d723c0f4f2bc1123d", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ae6f190993f486d4822dc3da870f564f12b190/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ae6f190993f486d4822dc3da870f564f12b190/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=44ae6f190993f486d4822dc3da870f564f12b190", "patch": "@@ -237,7 +237,7 @@ pub fn build_string<F>(f: F) -> Option<String>\n     String::from_utf8(buf.into_inner()).ok()\n }\n \n-pub unsafe fn twine_to_string(tr: TwineRef) -> String {\n+pub unsafe fn twine_to_string(tr: &Twine) -> String {\n     build_string(|s| LLVMRustWriteTwineToString(tr, s)).expect(\"got a non-UTF8 Twine from LLVM\")\n }\n "}]}