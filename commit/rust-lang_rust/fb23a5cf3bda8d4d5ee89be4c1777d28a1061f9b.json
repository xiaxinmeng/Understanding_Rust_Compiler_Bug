{"sha": "fb23a5cf3bda8d4d5ee89be4c1777d28a1061f9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjNhNWNmM2JkYThkNGQ1ZWU4OWJlNGMxNzc3ZDI4YTEwNjFmOWI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-09-20T10:46:41Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-10-11T08:43:54Z"}, "message": "Clarify a vague comment", "tree": {"sha": "e432fd2bf7106a602a15f1f65a76fee45ca49d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e432fd2bf7106a602a15f1f65a76fee45ca49d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb23a5cf3bda8d4d5ee89be4c1777d28a1061f9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb23a5cf3bda8d4d5ee89be4c1777d28a1061f9b", "html_url": "https://github.com/rust-lang/rust/commit/fb23a5cf3bda8d4d5ee89be4c1777d28a1061f9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb23a5cf3bda8d4d5ee89be4c1777d28a1061f9b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc257ca8144ad6a41b053a01f977afce7a23c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc257ca8144ad6a41b053a01f977afce7a23c95", "html_url": "https://github.com/rust-lang/rust/commit/2fc257ca8144ad6a41b053a01f977afce7a23c95"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "d2a4b824439d3f0ffc0cd6ceab82426dd6d41e7d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb23a5cf3bda8d4d5ee89be4c1777d28a1061f9b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb23a5cf3bda8d4d5ee89be4c1777d28a1061f9b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fb23a5cf3bda8d4d5ee89be4c1777d28a1061f9b", "patch": "@@ -1394,7 +1394,8 @@ fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n /// When the `#![feature(untagged_unions)]` gate is active,\n /// check that the fields of the `union` does not contain fields that need dropping.\n fn check_union_fields(tcx: TyCtxt<'_>, _: Span, item_def_id: DefId) -> bool {\n-    // Without the feature we check Copy types only later\n+    // Without the feature we check that all fields are `Copy` in our stability checking\n+    // infrastructure.\n     if !tcx.features().untagged_unions {\n         return true;\n     }"}]}