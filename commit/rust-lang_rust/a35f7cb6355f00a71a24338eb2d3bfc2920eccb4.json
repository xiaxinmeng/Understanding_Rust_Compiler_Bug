{"sha": "a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNWY3Y2I2MzU1ZjAwYTcxYTI0MzM4ZWIyZDNiZmMyOTIwZWNjYjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-06T22:23:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-06T22:23:41Z"}, "message": "Merge #8382\n\n8382: Make Fixture docs more accessible and fix small doc issues r=SomeoneToIgnore a=SomeoneToIgnore\n\nFollow up of https://github.com/rust-analyzer/rust-analyzer/pull/8302#discussion_r607054896\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "49ed63e6169ecbc4b07e6ddfbac3465641294143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ed63e6169ecbc4b07e6ddfbac3465641294143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbN9tCRBK7hj4Ov3rIwAAdHIIAErqnXBFHd1YUzJQd+dh/Fci\nuJ94CBbMpV2wyh55gdxh+kaFn4ULk2ZXUgJFdfzkOYRPP9GL5L0V0vrkZMlOyAGM\nHDxrxzg3ES9iJHr6lhX2VrKVTYJ2el/EHHL/OraiFXsQJbZ/b7RnK5r6scoPY0rd\nYsO2xfvyb94agOZXCkRlLNZdEIBuwPipKFLBH+0JCGtQfRz7MfgDghUwYecN1UdJ\nXXFAAlTk4ocmZ08TUkkeiZlGX53ryjx8An+ZW8KiDcG8IBiZ4qccjxDk45MIOwEg\n8Vpw6N11PF/6+IyqW2K8cbDrN0L0sDO+XuegvXvmXzS+fgGwKivv1gdF+6KLBg0=\n=4wNW\n-----END PGP SIGNATURE-----\n", "payload": "tree 49ed63e6169ecbc4b07e6ddfbac3465641294143\nparent fcb22a674df4728742a865dda76ce65f0f9205b1\nparent e785672f15a6da1314585ebcf2c235911a9be4f8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617747821 +0000\ncommitter GitHub <noreply@github.com> 1617747821 +0000\n\nMerge #8382\n\n8382: Make Fixture docs more accessible and fix small doc issues r=SomeoneToIgnore a=SomeoneToIgnore\n\nFollow up of https://github.com/rust-analyzer/rust-analyzer/pull/8302#discussion_r607054896\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "html_url": "https://github.com/rust-lang/rust/commit/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcb22a674df4728742a865dda76ce65f0f9205b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb22a674df4728742a865dda76ce65f0f9205b1", "html_url": "https://github.com/rust-lang/rust/commit/fcb22a674df4728742a865dda76ce65f0f9205b1"}, {"sha": "e785672f15a6da1314585ebcf2c235911a9be4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e785672f15a6da1314585ebcf2c235911a9be4f8", "html_url": "https://github.com/rust-lang/rust/commit/e785672f15a6da1314585ebcf2c235911a9be4f8"}], "stats": {"total": 173, "additions": 88, "deletions": 85}, "files": [{"sha": "27e39ca6073c1be58513d96aa096bc3c5298284e", "filename": "PRIVACY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/PRIVACY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/PRIVACY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/PRIVACY.md?ref=a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "patch": "@@ -14,4 +14,4 @@ Any other editor plugins that integrate with `rust-analyzer` are not under the c\n \n ## Others\n \n-If `cargo check` is enabled (the default), any build scripts or procedural macros used by the project or its dependencies will be executed. This is also the case when `cargo check` is disabled, but build script or procedural macro support is enabled in `rust-analyzer` (off by default).\n+If `cargo check` is enabled (the default), any build scripts or procedural macros used by the project or its dependencies will be executed. This is also the case when `cargo check` is disabled, but build script or procedural macro support is enabled in `rust-analyzer` (on by default)."}, {"sha": "5fbc039644f02082f87680b523ae73b7ba3765d6", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "patch": "@@ -33,9 +33,9 @@ For usage and troubleshooting requests, please use \"IDEs and Editors\" category o\n \n https://users.rust-lang.org/c/ide/14\n \n-For questions about development and implementation, join rls-2.0 working group on Zulip:\n+For questions about development and implementation, join rust-analyzer working group on Zulip:\n \n-https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frls-2.2E0\n+https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer\n \n ## Quick Links\n "}, {"sha": "04e2be390695c75caa7c5f0373ef91f2fe746080", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "patch": "@@ -1,62 +1,4 @@\n-//! Fixtures are strings containing rust source code with optional metadata.\n-//! A fixture without metadata is parsed into a single source file.\n-//! Use this to test functionality local to one file.\n-//!\n-//! Simple Example:\n-//! ```\n-//! r#\"\n-//! fn main() {\n-//!     println!(\"Hello World\")\n-//! }\n-//! \"#\n-//! ```\n-//!\n-//! Metadata can be added to a fixture after a `//-` comment.\n-//! The basic form is specifying filenames,\n-//! which is also how to define multiple files in a single test fixture\n-//!\n-//! Example using two files in the same crate:\n-//! ```\n-//! \"\n-//! //- /main.rs\n-//! mod foo;\n-//! fn main() {\n-//!     foo::bar();\n-//! }\n-//!\n-//! //- /foo.rs\n-//! pub fn bar() {}\n-//! \"\n-//! ```\n-//!\n-//! Example using two crates with one file each, with one crate depending on the other:\n-//! ```\n-//! r#\"\n-//! //- /main.rs crate:a deps:b\n-//! fn main() {\n-//!     b::foo();\n-//! }\n-//! //- /lib.rs crate:b\n-//! pub fn b() {\n-//!     println!(\"Hello World\")\n-//! }\n-//! \"#\n-//! ```\n-//!\n-//! Metadata allows specifying all settings and variables\n-//! that are available in a real rust project:\n-//! - crate names via `crate:cratename`\n-//! - dependencies via `deps:dep1,dep2`\n-//! - configuration settings via `cfg:dbg=false,opt_level=2`\n-//! - environment variables via `env:PATH=/bin,RUST_LOG=debug`\n-//!\n-//! Example using all available metadata:\n-//! ```\n-//! \"\n-//! //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n-//! fn insert_source_code_here() {}\n-//! \"\n-//! ```\n+//! A set of high-level utility fixture methods to use in tests.\n use std::{mem, str::FromStr, sync::Arc};\n \n use cfg::CfgOptions;"}, {"sha": "099baeca2fcdb26dac7df3418051030c9b6ad848", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "patch": "@@ -1,5 +1,65 @@\n //! Defines `Fixture` -- a convenient way to describe the initial state of\n //! rust-analyzer database from a single string.\n+//!\n+//! Fixtures are strings containing rust source code with optional metadata.\n+//! A fixture without metadata is parsed into a single source file.\n+//! Use this to test functionality local to one file.\n+//!\n+//! Simple Example:\n+//! ```\n+//! r#\"\n+//! fn main() {\n+//!     println!(\"Hello World\")\n+//! }\n+//! \"#\n+//! ```\n+//!\n+//! Metadata can be added to a fixture after a `//-` comment.\n+//! The basic form is specifying filenames,\n+//! which is also how to define multiple files in a single test fixture\n+//!\n+//! Example using two files in the same crate:\n+//! ```\n+//! \"\n+//! //- /main.rs\n+//! mod foo;\n+//! fn main() {\n+//!     foo::bar();\n+//! }\n+//!\n+//! //- /foo.rs\n+//! pub fn bar() {}\n+//! \"\n+//! ```\n+//!\n+//! Example using two crates with one file each, with one crate depending on the other:\n+//! ```\n+//! r#\"\n+//! //- /main.rs crate:a deps:b\n+//! fn main() {\n+//!     b::foo();\n+//! }\n+//! //- /lib.rs crate:b\n+//! pub fn b() {\n+//!     println!(\"Hello World\")\n+//! }\n+//! \"#\n+//! ```\n+//!\n+//! Metadata allows specifying all settings and variables\n+//! that are available in a real rust project:\n+//! - crate names via `crate:cratename`\n+//! - dependencies via `deps:dep1,dep2`\n+//! - configuration settings via `cfg:dbg=false,opt_level=2`\n+//! - environment variables via `env:PATH=/bin,RUST_LOG=debug`\n+//!\n+//! Example using all available metadata:\n+//! ```\n+//! \"\n+//! //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n+//! fn insert_source_code_here() {}\n+//! \"\n+//! ```\n \n use rustc_hash::FxHashMap;\n use stdx::{lines_with_ends, split_once, trim_indent};\n@@ -24,7 +84,7 @@ impl Fixture {\n     ///  //- some meta\n     ///  line 1\n     ///  line 2\n-    ///  // - other meta\n+    ///  //- other meta\n     ///  ```\n     pub fn parse(ra_fixture: &str) -> Vec<Fixture> {\n         let fixture = trim_indent(ra_fixture);"}, {"sha": "3ffd9e8cbb29fef5b05f9e28a630b2ebdfc0f53a", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "patch": "@@ -42,7 +42,7 @@ The underlying engine makes sure that model is computed lazily (on-demand) and c\n ## Entry Points\n \n `crates/rust-analyzer/src/bin/main.rs` contains the main function which spawns LSP.\n-This is *the* entry point, but it front-loads a lot of complexity, so its fine to just skim through it.\n+This is *the* entry point, but it front-loads a lot of complexity, so it's fine to just skim through it.\n \n `crates/rust-analyzer/src/handlers.rs` implements all LSP requests and is a great place to start if you are already familiar with LSP.\n \n@@ -67,7 +67,7 @@ They are handled by Rust code in the xtask directory.\n \n VS Code plugin.\n \n-### `libs/`\n+### `lib/`\n \n rust-analyzer independent libraries which we publish to crates.io.\n It's not heavily utilized at the moment.\n@@ -139,7 +139,8 @@ If an AST method returns an `Option`, it *can* be `None` at runtime, even if thi\n ### `crates/base_db`\n \n We use the [salsa](https://github.com/salsa-rs/salsa) crate for incremental and on-demand computation.\n-Roughly, you can think of salsa as a key-value store, but it can also compute derived values using specified functions. The `base_db` crate provides basic infrastructure for interacting with salsa.\n+Roughly, you can think of salsa as a key-value store, but it can also compute derived values using specified functions. \n+The `base_db` crate provides basic infrastructure for interacting with salsa.\n Crucially, it defines most of the \"input\" queries: facts supplied by the client of the analyzer.\n Reading the docs of the `base_db::input` module should be useful: everything else is strictly derived from those inputs.\n \n@@ -221,7 +222,7 @@ Internally, `ide` is split across several crates. `ide_assists`, `ide_completion\n The `ide` contains a public API/fa\u00e7ade, as well as implementation for a plethora of smaller features.\n \n **Architecture Invariant:** `ide` crate strives to provide a _perfect_ API.\n-Although at the moment it has only one consumer, the LSP server, LSP *does not* influence it's API design.\n+Although at the moment it has only one consumer, the LSP server, LSP *does not* influence its API design.\n Instead, we keep in mind a hypothetical _ideal_ client -- an IDE tailored specifically for rust, every nook and cranny of which is packed with Rust-specific goodies.\n \n ### `crates/rust-analyzer`\n@@ -307,7 +308,7 @@ This sections talks about the things which are everywhere and nowhere in particu\n \n ### Code generation\n \n-Some of the components of this repository are generated through automatic processes.\n+Some ]components in this repository are generated through automatic processes.\n Generated code is updated automatically on `cargo test`.\n Generated code is generally committed to the git repository.\n \n@@ -389,7 +390,7 @@ fn spam() {\n ```\n \n To specify input data, we use a single string literal in a special format, which can describe a set of rust files.\n-See the `Fixture` type.\n+See the `Fixture` its module for fixture examples and documentation.\n \n **Architecture Invariant:** all code invariants are tested by `#[test]` tests.\n There's no additional checks in CI, formatting and tidy tests are run with `cargo test`."}, {"sha": "a46121bb2ed15fbd4a91a78588ebdddeafbf6d01", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "patch": "@@ -51,8 +51,8 @@ interface SnippetTextEdit extends TextEdit {\n \n ```typescript\n export interface TextDocumentEdit {\n-\ttextDocument: OptionalVersionedTextDocumentIdentifier;\n-\tedits: (TextEdit | SnippetTextEdit)[];\n+    textDocument: OptionalVersionedTextDocumentIdentifier;\n+    edits: (TextEdit | SnippetTextEdit)[];\n }\n ```\n \n@@ -145,9 +145,9 @@ mod foo;\n ### Unresolved Question\n \n * An alternative would be to use a more general \"gotoSuper\" request, which would work for super methods, super classes and super modules.\n-  This is the approach IntelliJ Rust is takeing.\n+  This is the approach IntelliJ Rust is taking.\n   However, experience shows that super module (which generally has a feeling of navigation between files) should be separate.\n-  If you want super module, but the cursor happens to be inside an overriden function, the behavior with single \"gotoSuper\" request is surprising.\n+  If you want super module, but the cursor happens to be inside an overridden function, the behavior with single \"gotoSuper\" request is surprising.\n \n ## Join Lines\n \n@@ -193,7 +193,7 @@ fn main() {\n ### Unresolved Question\n \n * What is the position of the cursor after `joinLines`?\n-  Currently this is left to editor's discretion, but it might be useful to specify on the server via snippets.\n+  Currently, this is left to editor's discretion, but it might be useful to specify on the server via snippets.\n   However, it then becomes unclear how it works with multi cursor.\n \n ## On Enter\n@@ -330,7 +330,7 @@ Moreover, it would be cool if editors didn't need to implement even basic langua\n \n ### Unresolved Question\n \n-* Should we return a a nested brace structure, to allow paredit-like actions of jump *out* of the current brace pair?\n+* Should we return a nested brace structure, to allow paredit-like actions of jump *out* of the current brace pair?\n   This is how `SelectionRange` request works.\n * Alternatively, should we perhaps flag certain `SelectionRange`s as being brace pairs?\n \n@@ -511,7 +511,7 @@ Expands macro call at a given position.\n This request is sent from client to server to render \"inlay hints\" -- virtual text inserted into editor to show things like inferred types.\n Generally, the client should re-query inlay hints after every modification.\n Note that we plan to move this request to `experimental/inlayHints`, as it is not really Rust-specific, but the current API is not necessary the right one.\n-Upstream issue: https://github.com/microsoft/language-server-protocol/issues/956\n+Upstream issues: https://github.com/microsoft/language-server-protocol/issues/956 , https://github.com/rust-analyzer/rust-analyzer/issues/2797\n \n **Request:**\n "}, {"sha": "468dedff20db9a33e2a12e66132cfb1c68ee74a0", "filename": "docs/dev/style.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "patch": "@@ -53,9 +53,9 @@ https://www.tedinski.com/2018/02/06/system-boundaries.html\n ## Crates.io Dependencies\n \n We try to be very conservative with usage of crates.io dependencies.\n-Don't use small \"helper\" crates (exception: `itertools` is allowed).\n+Don't use small \"helper\" crates (exception: `itertools` and `either` are allowed).\n If there's some general reusable bit of code you need, consider adding it to the `stdx` crate.\n-A useful exercise is to read Cargo.lock and see if some of the *transitive* dependencies do not make sense for rust-analyzer.\n+A useful exercise is to read Cargo.lock and see if some *transitive* dependencies do not make sense for rust-analyzer.\n \n **Rationale:** keep compile times low, create ecosystem pressure for faster compiles, reduce the number of things which might break.\n \n@@ -330,7 +330,7 @@ When implementing `do_thing`, it might be very useful to create a context object\n \n ```rust\n pub fn do_thing(arg1: Arg1, arg2: Arg2) -> Res {\n-    let mut ctx = Ctx { arg1, arg2 }\n+    let mut ctx = Ctx { arg1, arg2 };\n     ctx.run()\n }\n \n@@ -586,7 +586,7 @@ use super::{}\n \n **Rationale:** consistency.\n Reading order is important for new contributors.\n-Grouping by crate allows to spot unwanted dependencies easier.\n+Grouping by crate allows spotting unwanted dependencies easier.\n \n ## Import Style\n \n@@ -779,7 +779,7 @@ assert!(x < y);\n assert!(x > 0);\n \n // BAD\n-assert!(x >= lo && x <= hi>);\n+assert!(x >= lo && x <= hi);\n assert!(r1 < l2 || l1 > r2);\n assert!(y > x);\n assert!(0 > x);"}, {"sha": "f7a0c09fc1ed51d2ab59feb42a83cca7f3ae8cfb", "filename": "docs/dev/syntax.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/docs%2Fdev%2Fsyntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/a35f7cb6355f00a71a24338eb2d3bfc2920eccb4/docs%2Fdev%2Fsyntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fsyntax.md?ref=a35f7cb6355f00a71a24338eb2d3bfc2920eccb4", "patch": "@@ -145,7 +145,7 @@ Another alternative (used by swift and roslyn) is to explicitly divide the set o\n \n ```rust\n struct Token {\n-    kind: NonTriviaTokenKind\n+    kind: NonTriviaTokenKind,\n     text: String,\n     leading_trivia: Vec<TriviaToken>,\n     trailing_trivia: Vec<TriviaToken>,\n@@ -240,7 +240,7 @@ impl SyntaxNode {\n             let child_offset = offset;\n             offset += green_child.text_len;\n             Arc::new(SyntaxData {\n-                offset: child_offset;\n+                offset: child_offset,\n                 parent: Some(Arc::clone(self)),\n                 green: Arc::clone(green_child),\n             })\n@@ -249,7 +249,7 @@ impl SyntaxNode {\n }\n \n impl PartialEq for SyntaxNode {\n-    fn eq(&self, other: &SyntaxNode) {\n+    fn eq(&self, other: &SyntaxNode) -> bool {\n         self.offset == other.offset\n             && Arc::ptr_eq(&self.green, &other.green)\n     }\n@@ -273,7 +273,7 @@ This is OK because trees traversals mostly (always, in case of rust-analyzer) ru\n The other thread can restore the `SyntaxNode` by traversing from the root green node and looking for a node with specified range.\n You can also use the similar trick to store a `SyntaxNode`.\n That is, a data structure that holds a `(GreenNode, Range<usize>)` will be `Sync`.\n-However rust-analyzer goes even further.\n+However, rust-analyzer goes even further.\n It treats trees as semi-transient and instead of storing a `GreenNode`, it generally stores just the id of the file from which the tree originated: `(FileId, Range<usize>)`.\n The `SyntaxNode` is the restored by reparsing the file and traversing it from root.\n With this trick, rust-analyzer holds only a small amount of trees in memory at the same time, which reduces memory usage."}]}