{"sha": "e835d27ad3f464bf81e5b702c1412be09761c991", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MzVkMjdhZDNmNDY0YmY4MWU1YjcwMmMxNDEyYmUwOTc2MWM5OTE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-30T00:36:51Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-04T22:55:07Z"}, "message": "Make ArenaAllocatable a marker trait to allow overlapping impls and use specialization to find the right field", "tree": {"sha": "62303ea3b87402dfaed6439056001eead0679b26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62303ea3b87402dfaed6439056001eead0679b26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e835d27ad3f464bf81e5b702c1412be09761c991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e835d27ad3f464bf81e5b702c1412be09761c991", "html_url": "https://github.com/rust-lang/rust/commit/e835d27ad3f464bf81e5b702c1412be09761c991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e835d27ad3f464bf81e5b702c1412be09761c991/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "url": "https://api.github.com/repos/rust-lang/rust/commits/002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "html_url": "https://github.com/rust-lang/rust/commit/002c70f2d46e80fcb02ee4214d9a4d4041ee011c"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "1f1060ee243f38391f1863b9b14ab09608a5cb57", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e835d27ad3f464bf81e5b702c1412be09761c991/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e835d27ad3f464bf81e5b702c1412be09761c991/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=e835d27ad3f464bf81e5b702c1412be09761c991", "patch": "@@ -1,4 +1,5 @@\n use arena::{TypedArena, DroplessArena};\n+use std::mem;\n \n #[macro_export]\n macro_rules! arena_types {\n@@ -35,10 +36,11 @@ macro_rules! impl_arena_allocatable {\n         $(\n             impl_specialized_decodable!($a $ty, $tcx);\n \n-            impl<$tcx> ArenaAllocatable<$tcx> for $ty {\n+            impl ArenaAllocatable for $ty {}\n+            impl<$tcx> ArenaField<$tcx> for $ty {\n                 #[inline]\n-                fn arena<'a>(arena: &'a Arena<$tcx>) -> Option<&'a TypedArena<Self>> {\n-                    Some(&arena.$name)\n+                fn arena<'a>(arena: &'a Arena<$tcx>) -> &'a TypedArena<Self> {\n+                    &arena.$name\n                 }\n             }\n         )*\n@@ -49,46 +51,43 @@ arena_types!(declare_arena, [], 'tcx);\n \n arena_types!(impl_arena_allocatable, [], 'tcx);\n \n-pub trait ArenaAllocatable<'tcx>: Sized {\n-    /// Returns a specific arena to allocate from if the type requires destructors.\n-    /// Otherwise it will return `None` to be allocated from the dropless arena.\n-    fn arena<'a>(arena: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>>;\n+pub trait ArenaAllocatable {}\n+\n+impl<T: Copy> ArenaAllocatable for T {}\n+\n+pub trait ArenaField<'tcx>: Sized {\n+    /// Returns a specific arena to allocate from.\n+    fn arena<'a>(arena: &'a Arena<'tcx>) -> &'a TypedArena<Self>;\n }\n \n-impl<'tcx, T: Copy> ArenaAllocatable<'tcx> for T {\n+impl<'tcx, T> ArenaField<'tcx> for T {\n     #[inline]\n-    default fn arena<'a>(_: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>> {\n-        None\n+    default fn arena<'a>(_: &'a Arena<'tcx>) -> &'a TypedArena<Self> {\n+        panic!()\n     }\n }\n \n impl<'tcx> Arena<'tcx> {\n     #[inline]\n-    pub fn alloc<T: ArenaAllocatable<'tcx>>(&self, value: T) -> &mut T {\n-        match T::arena(self) {\n-            Some(arena) => {\n-                arena.alloc(value)\n-            }\n-            None => {\n-                self.dropless.alloc(value)\n-            }\n+    pub fn alloc<T: ArenaAllocatable>(&self, value: T) -> &mut T {\n+        if mem::needs_drop::<T>() {\n+            <T as ArenaField<'tcx>>::arena(self).alloc(value)\n+        } else {\n+            self.dropless.alloc(value)\n         }\n     }\n \n     pub fn alloc_from_iter<\n-        T: ArenaAllocatable<'tcx>,\n+        T: ArenaAllocatable,\n         I: IntoIterator<Item = T>\n     >(\n         &self,\n         iter: I\n     ) -> &mut [T] {\n-        match T::arena(self) {\n-            Some(arena) => {\n-                arena.alloc_from_iter(iter)\n-            }\n-            None => {\n-                self.dropless.alloc_from_iter(iter)\n-            }\n+        if mem::needs_drop::<T>() {\n+            <T as ArenaField<'tcx>>::arena(self).alloc_from_iter(iter)\n+        } else {\n+            self.dropless.alloc_from_iter(iter)\n         }\n     }\n }"}, {"sha": "c5c2cbfcb89404cdc1c568cd86525d02854f9f4a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e835d27ad3f464bf81e5b702c1412be09761c991/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e835d27ad3f464bf81e5b702c1412be09761c991/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=e835d27ad3f464bf81e5b702c1412be09761c991", "patch": "@@ -40,6 +40,7 @@\n #![cfg_attr(windows, feature(libc))]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n+#![feature(overlapping_marker_traits)]\n #![feature(extern_types)]\n #![feature(nll)]\n #![feature(non_exhaustive)]"}, {"sha": "3046d53086c5f60eb8ba27524eb8eb8e25e93e20", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e835d27ad3f464bf81e5b702c1412be09761c991/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e835d27ad3f464bf81e5b702c1412be09761c991/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=e835d27ad3f464bf81e5b702c1412be09761c991", "patch": "@@ -132,7 +132,7 @@ pub trait TyDecoder<'a, 'tcx: 'a>: Decoder {\n }\n \n #[inline]\n-pub fn decode_arena_allocable<'a, 'tcx, D, T: ArenaAllocatable<'tcx> + Decodable>(\n+pub fn decode_arena_allocable<'a, 'tcx, D, T: ArenaAllocatable + Decodable>(\n     decoder: &mut D\n ) -> Result<&'tcx T, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n@@ -142,7 +142,7 @@ pub fn decode_arena_allocable<'a, 'tcx, D, T: ArenaAllocatable<'tcx> + Decodable\n }\n \n #[inline]\n-pub fn decode_arena_allocable_slice<'a, 'tcx, D, T: ArenaAllocatable<'tcx> + Decodable>(\n+pub fn decode_arena_allocable_slice<'a, 'tcx, D, T: ArenaAllocatable + Decodable>(\n     decoder: &mut D\n ) -> Result<&'tcx [T], D::Error>\n     where D: TyDecoder<'a, 'tcx>,"}]}