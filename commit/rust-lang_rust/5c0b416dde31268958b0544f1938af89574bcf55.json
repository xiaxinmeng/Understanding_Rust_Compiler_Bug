{"sha": "5c0b416dde31268958b0544f1938af89574bcf55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMGI0MTZkZGUzMTI2ODk1OGIwNTQ0ZjE5MzhhZjg5NTc0YmNmNTU=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-10T18:50:58Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-12T20:04:36Z"}, "message": "Update stderr files\n\nAnd also fix some comments as suggested by lcnr", "tree": {"sha": "b8831b21225db9fe827727983e340b6ee6b9dc6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8831b21225db9fe827727983e340b6ee6b9dc6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0b416dde31268958b0544f1938af89574bcf55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0b416dde31268958b0544f1938af89574bcf55", "html_url": "https://github.com/rust-lang/rust/commit/5c0b416dde31268958b0544f1938af89574bcf55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0b416dde31268958b0544f1938af89574bcf55/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "html_url": "https://github.com/rust-lang/rust/commit/9bf40f10bcf1359c4454ce55f6d72fb1c3081740"}], "stats": {"total": 1045, "additions": 85, "deletions": 960}, "files": [{"sha": "4389e4738eadc8b734accb3719a8d92443b81c0b", "filename": "src/test/ui/const-generics/apit-with-const-param.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/apit-with-const-param.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "aa1a3b9cf28889dd13c7971671978c196831fe31", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -1,4 +1,4 @@\n-// Tests that array sizes that depend on const-params does not yet work.\n+// Tests that array sizes that depend on const-params are checked using `ConstEvaluatable`.\n // revisions: full min\n \n #![cfg_attr(full, feature(const_generics))]"}, {"sha": "ad67a87265bd3f0e66959bf691864ee8625610e1", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,27 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/array-size-in-generic-struct-param.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:5:38\n-   |\n-LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n-   |                                      ^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:14:10\n-   |\n-LL |     arr: [u8; CFG.arr_size],\n-   |          ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}, {"sha": "a5532bde1f5e9cb02008e5071e184db32e2e2568", "filename": "src/test/ui/const-generics/broken-mir-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/broken-mir-1.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c36ef8450976c9aa55f888b5864a98ac438b4e12", "filename": "src/test/ui/const-generics/broken-mir-2.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/broken-mir-2.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "b29d27e524751dd06023dfec1f09b9de2c7ecb7d", "filename": "src/test/ui/const-generics/cannot-infer-const-args.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,20 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/cannot-infer-const-args.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-const-args.rs:9:5\n-   |\n-LL |     foo();\n-   |     ^^^\n-   |\n-   = note: unable to infer the value of a const parameter\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "c8f3a8beaf83f825a58a35bd65b371d7bd02adf5", "filename": "src/test/ui/const-generics/concrete-const-as-fn-arg.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/concrete-const-as-fn-arg.rs:4:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "5edb4f4f6cdad2f409dc86403a4a04727830feed", "filename": "src/test/ui/const-generics/concrete-const-impl-method.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/concrete-const-impl-method.rs:5:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "77b68052fc0bb226ec323407e109a7fb164628e4", "filename": "src/test/ui/const-generics/condition-in-trait-const-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -1,4 +1,4 @@\n-// Checks whether conditions in traits can be evaluated.\n+// Checks that `impl Trait<{anon_const}> for Type` evaluates successfully.\n // run-pass\n // revisions: full min\n "}, {"sha": "9ac33454128b52b8176a1a9515272dfe408631ab", "filename": "src/test/ui/const-generics/condition-in-trait-const-arg.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/condition-in-trait-const-arg.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "5c438efd82a0c1a46e62f1ad7eb4a5c7ce70f4c5", "filename": "src/test/ui/const-generics/const-arg-in-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -1,4 +1,3 @@\n-// Check that const args in functions can be used.\n // run-pass\n // revisions: full min\n "}, {"sha": "bb66849c7fe6c6b53e14f0b710163246fd8aeb3d", "filename": "src/test/ui/const-generics/const-arg-in-fn.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-arg-in-fn.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "dc34621b90500f16365402a274cc6cf04a09e924", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // revisions: full\n-// FIXME Omitted min revision for now due to ICE.\n+// FIXME(#75323) Omitted min revision for now due to ICE.\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]"}, {"sha": "53a7550090d44e7b8fcc147ec31c226203e1374b", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-argument-non-static-lifetime.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "e421c22be01a87026d2abd1b0bc5ac64acb18ca9", "filename": "src/test/ui/const-generics/const-expression-parameter.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,17 +0,0 @@\n-error: expected one of `,` or `>`, found `+`\n-  --> $DIR/const-expression-parameter.rs:13:22\n-   |\n-LL |     i32_identity::<1 + 2>();\n-   |                      ^ expected one of `,` or `>`\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-expression-parameter.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "add1290b1d9758a6fcb0235d686c4d1d04ab008e", "filename": "src/test/ui/const-generics/const-fn-with-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -1,4 +1,4 @@\n-// Check `const fn` with const param is alright\n+// Checks that `const fn` with const params can be used.\n // run-pass\n // revisions: full min\n "}, {"sha": "109b50028480b4bc43ee14df2fe80357a0b532bc", "filename": "src/test/ui/const-generics/const-fn-with-const-param.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-fn-with-const-param.rs:2:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "47448bbd19d6d268ef1d04da7b417f057805535f", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-generic-array-wrapper.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "f161739c9c8a6f0dddab681dbd995bee151747aa", "filename": "src/test/ui/const-generics/const-generic-type_name.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-generic-type_name.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "8c50fb73679a90fc5e1f361e8f9947ace38d85e2", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.stderr", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,42 +0,0 @@\n-error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:9:19\n-   |\n-LL | struct A<const N: &u8>;\n-   |                   ^ explicit lifetime name needed here\n-\n-error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:13:15\n-   |\n-LL | impl<const N: &u8> A<N> {\n-   |               ^ explicit lifetime name needed here\n-\n-error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:14:21\n-   |\n-LL |     fn foo<const M: &u8>(&self) {}\n-   |                     ^ explicit lifetime name needed here\n-\n-error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:18:15\n-   |\n-LL | impl<const N: &u8> B for A<N> {}\n-   |               ^ explicit lifetime name needed here\n-\n-error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:21:17\n-   |\n-LL | fn bar<const N: &u8>() {}\n-   |                 ^ explicit lifetime name needed here\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param-elided-lifetime.rs:6:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: aborting due to 5 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0637`."}, {"sha": "30bd1d7291456e74c4a8bdbce767440edc278051", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,22 +0,0 @@\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/const-param-from-outer-fn.rs:6:9\n-   |\n-LL | fn foo<const X: u32>() {\n-   |              - const parameter from outer function\n-LL |     fn bar() -> u32 {\n-   |        --- try adding a local generic parameter in this method instead\n-LL |         X\n-   |         ^ use of generic parameter from outer function\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param-from-outer-fn.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0401`."}, {"sha": "a2e367b25ade05c1c90b53cba9253305d371e86e", "filename": "src/test/ui/const-generics/const-param-in-trait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param-in-trait.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "f6606aea726adc776b7706c977e3ab292bf6fbcc", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,24 +0,0 @@\n-error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-const-param.rs:9:52\n-   |\n-LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n-   |                                                    ^ the type must not depend on the parameter `N`\n-\n-error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-const-param.rs:12:40\n-   |\n-LL | pub struct SelfDependent<const N: [u8; N]>;\n-   |                                        ^ the type must not depend on the parameter `N`\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param-type-depends-on-const-param.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0770`."}, {"sha": "d081dcbbc7a4e90db6360cea80dfe9286a3802d1", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,27 +0,0 @@\n-error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n-   |\n-LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                                  ^ the type must not depend on the parameter `T`\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param-type-depends-on-type-param.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0392]: parameter `T` is never used\n-  --> $DIR/const-param-type-depends-on-type-param.rs:9:22\n-   |\n-LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                      ^ unused parameter\n-   |\n-   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-Some errors have detailed explanations: E0392, E0770.\n-For more information about an error, try `rustc --explain E0392`."}, {"sha": "b7febed7bdd22e477fd62c12057ad619c5be2a55", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-parameter-uppercase-lint.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: const parameter `x` should have an upper case name\n-  --> $DIR/const-parameter-uppercase-lint.rs:6:15\n-   |\n-LL | fn noop<const x: u32>() {\n-   |               ^ help: convert the identifier to upper case (notice the capitalization): `X`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/const-parameter-uppercase-lint.rs:4:9\n-   |\n-LL | #![deny(non_upper_case_globals)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "4628c9003188450a82497ffa4b4b0828047be84d", "filename": "src/test/ui/const-generics/const-types.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-types.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "8f7ab822554a2abefc6a545b225378cb127861e2", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/derive-debug-array-wrapper.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "a3f331ee81155a4ae540b84171e3dad5bf9beff4", "filename": "src/test/ui/const-generics/different_byref.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,21 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/different_byref.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0308]: mismatched types\n-  --> $DIR/different_byref.rs:8:9\n-   |\n-LL |     x = Const::<{ [4] }> {};\n-   |         ^^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n-   |\n-   = note: expected type `[3_usize]`\n-              found type `[4_usize]`\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "b6729c852abc320c4a386865f8e19ed660d6999f", "filename": "src/test/ui/const-generics/different_byref_simple.full.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.full.stderr?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/different_byref_simple.rs:12:9\n+   |\n+LL |     u = ConstUsize::<4> {};\n+   |         ^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n+   |\n+   = note: expected struct `ConstUsize<3_usize>`\n+              found struct `ConstUsize<4_usize>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b6729c852abc320c4a386865f8e19ed660d6999f", "filename": "src/test/ui/const-generics/different_byref_simple.min.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.min.stderr?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/different_byref_simple.rs:12:9\n+   |\n+LL |     u = ConstUsize::<4> {};\n+   |         ^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n+   |\n+   = note: expected struct `ConstUsize<3_usize>`\n+              found struct `ConstUsize<4_usize>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "93289f933317ccca2cefe56cebdd621843db8205", "filename": "src/test/ui/const-generics/different_byref_simple.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.rs?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -0,0 +1,14 @@\n+// Check that different const types are different.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+struct ConstUsize<const V: usize> {}\n+\n+fn main() {\n+    let mut u = ConstUsize::<3> {};\n+    u = ConstUsize::<4> {};\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "b5811243caa8a31b1b3bd97804b832c0ef9c4326", "filename": "src/test/ui/const-generics/fn-const-param-call.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fn-const-param-call.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-call.rs:8:25\n-   |\n-LL | struct Wrapper<const F: fn() -> u32>;\n-   |                         ^^^^^^^^^^^\n-\n-error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-call.rs:10:15\n-   |\n-LL | impl<const F: fn() -> u32> Wrapper<F> {\n-   |               ^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}, {"sha": "7aaa41eb7d7b157f462a9af0a4f450b8cd1c7d47", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fn-const-param-infer.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-infer.rs:4:25\n-   |\n-LL | struct Checked<const F: fn(usize) -> bool>;\n-   |                         ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "52fd0a8fec03b94c97fd4c79f12c57d3d0565db2", "filename": "src/test/ui/const-generics/fn-taking-const-generic-array.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fn-taking-const-generic-array.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "600be64b1e1b8f3dac0a5b04abbd464ef52f6cdb", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,18 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/forbid-non-structural_match-types.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:11:19\n-   |\n-LL | struct D<const X: C>;\n-   |                   ^ `C` doesn't derive both `PartialEq` and `Eq`\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0741`."}, {"sha": "ee947943af134d3c4d57999fb9bc81218bc9710c", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,28 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/foreign-item-const-parameter.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0044]: foreign items may not have const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:5:5\n-   |\n-LL |     fn foo<const X: usize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n-   |\n-   = help: replace the const parameters with concrete consts\n-\n-error[E0044]: foreign items may not have type or const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:7:5\n-   |\n-LL |     fn bar<T, const X: usize>(_: T);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have type or const parameters\n-   |\n-   = help: replace the type or const parameters with concrete types or consts\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0044`."}, {"sha": "9d68df07ce6772f7e957325fb6722252bbb32ed0", "filename": "src/test/ui/const-generics/impl-const-generic-struct.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/impl-const-generic-struct.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "51064d7f90fb2fa9968212bb8daa74bc819482d3", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/incorrect-number-of-const-args.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0107]: wrong number of const arguments: expected 2, found 1\n-  --> $DIR/incorrect-number-of-const-args.rs:9:5\n-   |\n-LL |     foo::<0>();\n-   |     ^^^^^^^^ expected 2 const arguments\n-\n-error[E0107]: wrong number of const arguments: expected 2, found 3\n-  --> $DIR/incorrect-number-of-const-args.rs:10:17\n-   |\n-LL |     foo::<0, 0, 0>();\n-   |                 ^ unexpected const argument\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0107`."}, {"sha": "f52e5e49a3bde78d18a235cace61ede8d3b89c76", "filename": "src/test/ui/const-generics/infer_arg_from_pat.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/infer_arg_from_pat.rs:4:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "dfadfbb16637ac24336698208167d7990b20eb25", "filename": "src/test/ui/const-generics/infer_arr_len_from_pat.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/infer_arr_len_from_pat.rs:4:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "bdbf338295cccaa94e58d27004b37c41c1ceb94a", "filename": "src/test/ui/const-generics/integer-literal-generic-arg-in-where-clause.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -17,4 +17,7 @@ fn returns_closure_of_array_3() -> impl Fn([i32; 3]) {\n     |_| {}\n }\n \n-fn main() {}\n+fn main() {\n+    takes_closure_of_array_3(returns_closure_of_array_3());\n+    takes_closure_of_array_3_apit(returns_closure_of_array_3());\n+}"}, {"sha": "aadd10e5ccab361cfbf4b050b0555520af2d601c", "filename": "src/test/ui/const-generics/integer-literal-generic-arg-in-where-clause.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/integer-literal-generic-arg-in-where-clause.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "a1fbd5f2025bf35e93670c7dd718221f8b5eb1b0", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,27 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61522-array-len-succ.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61522-array-len-succ.rs:4:40\n-   |\n-LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n-   |                                        ^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61522-array-len-succ.rs:8:24\n-   |\n-LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n-   |                        ^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}, {"sha": "720420d9cd684e06fdf6b45f27402bef4bf54a88", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-66596-impl-trait-for-str-const-arg.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "acbc2df1d740f05d23457fb9a3dc0b559aa20232", "filename": "src/test/ui/const-generics/mut-ref-const-param-array.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/mut-ref-const-param-array.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "da0e8032404fc53c4c70d28e49821f30b65c9593", "filename": "src/test/ui/const-generics/nested-type.stderr", "status": "removed", "additions": 0, "deletions": 159, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,159 +0,0 @@\n-error[E0391]: cycle detected when computing type of `Foo`\n-  --> $DIR/nested-type.rs:4:1\n-   |\n-LL | struct Foo<const N: [u8; {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...which requires computing type of `Foo::N`...\n-  --> $DIR/nested-type.rs:4:18\n-   |\n-LL | struct Foo<const N: [u8; {\n-   |                  ^\n-note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n-   |\n-LL |   struct Foo<const N: [u8; {\n-   |  __________________________^\n-LL | |\n-LL | |\n-LL | |     struct Foo<const N: usize>;\n-...  |\n-LL | |     Foo::<17>::value()\n-LL | | }]>;\n-   | |_^\n-note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n-   |\n-LL |   struct Foo<const N: [u8; {\n-   |  __________________________^\n-LL | |\n-LL | |\n-LL | |     struct Foo<const N: usize>;\n-...  |\n-LL | |     Foo::<17>::value()\n-LL | | }]>;\n-   | |_^\n-note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n-   |\n-LL |   struct Foo<const N: [u8; {\n-   |  __________________________^\n-LL | |\n-LL | |\n-LL | |     struct Foo<const N: usize>;\n-...  |\n-LL | |     Foo::<17>::value()\n-LL | | }]>;\n-   | |_^\n-note: ...which requires type-checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n-   |\n-LL |   struct Foo<const N: [u8; {\n-   |  __________________________^\n-LL | |\n-LL | |\n-LL | |     struct Foo<const N: usize>;\n-...  |\n-LL | |     Foo::<17>::value()\n-LL | | }]>;\n-   | |_^\n-note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n-  --> $DIR/nested-type.rs:7:5\n-   |\n-LL |     struct Foo<const N: usize>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing the variances for items in this crate...\n-   = note: ...which again requires computing type of `Foo`, completing the cycle\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/nested-type.rs:1:1\n-   |\n-LL | / #![feature(const_generics)]\n-LL | | #![allow(incomplete_features)]\n-LL | |\n-LL | | struct Foo<const N: [u8; {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n-\n-error[E0391]: cycle detected when computing type of `Foo`\n-  --> $DIR/nested-type.rs:4:1\n-   |\n-LL | struct Foo<const N: [u8; {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...which requires computing type of `Foo::N`...\n-  --> $DIR/nested-type.rs:4:18\n-   |\n-LL | struct Foo<const N: [u8; {\n-   |                  ^\n-note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n-   |\n-LL |   struct Foo<const N: [u8; {\n-   |  __________________________^\n-LL | |\n-LL | |\n-LL | |     struct Foo<const N: usize>;\n-...  |\n-LL | |     Foo::<17>::value()\n-LL | | }]>;\n-   | |_^\n-note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n-   |\n-LL |   struct Foo<const N: [u8; {\n-   |  __________________________^\n-LL | |\n-LL | |\n-LL | |     struct Foo<const N: usize>;\n-...  |\n-LL | |     Foo::<17>::value()\n-LL | | }]>;\n-   | |_^\n-note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n-   |\n-LL |   struct Foo<const N: [u8; {\n-   |  __________________________^\n-LL | |\n-LL | |\n-LL | |     struct Foo<const N: usize>;\n-...  |\n-LL | |     Foo::<17>::value()\n-LL | | }]>;\n-   | |_^\n-note: ...which requires type-checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n-   |\n-LL |   struct Foo<const N: [u8; {\n-   |  __________________________^\n-LL | |\n-LL | |\n-LL | |     struct Foo<const N: usize>;\n-...  |\n-LL | |     Foo::<17>::value()\n-LL | | }]>;\n-   | |_^\n-note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n-  --> $DIR/nested-type.rs:7:5\n-   |\n-LL |     struct Foo<const N: usize>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing the variances for items in this crate...\n-   = note: ...which again requires computing type of `Foo`, completing the cycle\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/nested-type.rs:1:1\n-   |\n-LL | / #![feature(const_generics)]\n-LL | | #![allow(incomplete_features)]\n-LL | |\n-LL | | struct Foo<const N: [u8; {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0391`."}, {"sha": "571be91683b7ca4c43cbdd09230795b252a291b5", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,31 +0,0 @@\n-error: type parameters with a default must be trailing\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:12\n-   |\n-LL | struct Bar<T = [u8; N], const N: usize>(T);\n-   |            ^\n-   |\n-   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n-\n-error: constant values inside of type parameter defaults must not depend on generic parameters\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:3:44\n-   |\n-LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n-   |                                            ^ the anonymous constant must not depend on the parameter `T`\n-\n-error: constant values inside of type parameter defaults must not depend on generic parameters\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:21\n-   |\n-LL | struct Bar<T = [u8; N], const N: usize>(T);\n-   |                     ^ the anonymous constant must not depend on the parameter `N`\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n-"}, {"sha": "20cc62ebc17cd408a4c48430cccbf1ed4ff047b0", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -1,4 +1,4 @@\n-// Assert that cannot use const generics as ptrs and cannot deref them.\n+// Checks that pointers must not be used as the type of const params.\n // revisions: full min\n \n #![cfg_attr(full, feature(const_generics))]"}, {"sha": "1ce8bb9c05423a1a421c0da34280e3b032e638a9", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/raw-ptr-const-param-deref.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: using raw pointers as const generic parameters is forbidden\n-  --> $DIR/raw-ptr-const-param-deref.rs:6:23\n-   |\n-LL | struct Const<const P: *const u32>;\n-   |                       ^^^^^^^^^^\n-\n-error: using raw pointers as const generic parameters is forbidden\n-  --> $DIR/raw-ptr-const-param-deref.rs:8:15\n-   |\n-LL | impl<const P: *const u32> Const<P> {\n-   |               ^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}, {"sha": "6e64f8a327fd508241b479fe5f4859eb0a12f1b8", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/raw-ptr-const-param.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: using raw pointers as const generic parameters is forbidden\n-  --> $DIR/raw-ptr-const-param.rs:4:23\n-   |\n-LL | struct Const<const P: *const u32>;\n-   |                       ^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "d06da2ef0630a103210489cef75f82ec344dce56", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.full.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.full.stderr?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/slice-const-param-mismatch.rs:9:35\n+  --> $DIR/slice-const-param-mismatch.rs:15:35\n    |\n LL |     let _: ConstString<\"Hello\"> = ConstString::<\"World\">;\n    |            --------------------   ^^^^^^^^^^^^^^^^^^^^^^ expected `\"Hello\"`, found `\"World\"`\n@@ -10,7 +10,7 @@ LL |     let _: ConstString<\"Hello\"> = ConstString::<\"World\">;\n               found struct `ConstString<\"World\">`\n \n error[E0308]: mismatched types\n-  --> $DIR/slice-const-param-mismatch.rs:11:33\n+  --> $DIR/slice-const-param-mismatch.rs:17:33\n    |\n LL |     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">;\n    |            -------------------   ^^^^^^^^^^^^^^^^^^^^^ expected `\"\u2107\u31c8\u21a6\"`, found `\"\u2107\u31c8\u21a5\"`\n@@ -21,7 +21,7 @@ LL |     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">;\n               found struct `ConstString<\"\u2107\u31c8\u21a5\">`\n \n error[E0308]: mismatched types\n-  --> $DIR/slice-const-param-mismatch.rs:13:33\n+  --> $DIR/slice-const-param-mismatch.rs:19:33\n    |\n LL |     let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">;\n    |            ------------------   ^^^^^^^^^^^^^^^^^^^^ expected `b\"AAA\"`, found `b\"BBB\"`", "previous_filename": "src/test/ui/const-generics/slice-const-param-mismatch.stderr"}, {"sha": "e86f885b9bbadab5e5cfeeada2ddfc45368b2fee", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -0,0 +1,20 @@\n+error: using `&'static str` as const generic parameters is forbidden\n+  --> $DIR/slice-const-param-mismatch.rs:8:29\n+   |\n+LL | struct ConstString<const T: &'static str>;\n+   |                             ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `&'static [u8]` as const generic parameters is forbidden\n+  --> $DIR/slice-const-param-mismatch.rs:10:28\n+   |\n+LL | struct ConstBytes<const T: &'static [u8]>;\n+   |                            ^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0f8ae9bac4a3ce24898c8f761c26f4fa2e865080", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -1,14 +1,20 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n \n struct ConstString<const T: &'static str>;\n+//[min]~^ ERROR\n struct ConstBytes<const T: &'static [u8]>;\n+//[min]~^ ERROR\n \n pub fn main() {\n     let _: ConstString<\"Hello\"> = ConstString::<\"Hello\">;\n-    let _: ConstString<\"Hello\"> = ConstString::<\"World\">; //~ ERROR mismatched types\n+    let _: ConstString<\"Hello\"> = ConstString::<\"World\">; //[full]~ ERROR mismatched types\n     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a6\">;\n-    let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">; //~ ERROR mismatched types\n+    let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">; //[full]~ ERROR mismatched types\n     let _: ConstBytes<b\"AAA\"> = ConstBytes::<{&[0x41, 0x41, 0x41]}>;\n-    let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">; //~ ERROR mismatched types\n+    let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">; //[full]~ ERROR mismatched types\n }"}, {"sha": "524bd41a669b44df1c66e8348005735c88d0eca3", "filename": "src/test/ui/const-generics/slice-const-param.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/slice-const-param.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "e73a297c878f88f4e6ada939f54292ac7a43739b", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.full.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.full.stderr?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -2,10 +2,7 @@ error[E0573]: expected type, found const parameter `C`\n   --> $DIR/struct-with-invalid-const-param.rs:8:23\n    |\n LL | struct S<const C: u8>(C);\n-   | ----------------------^--\n-   | |                     |\n-   | |                     help: a struct with a similar name exists: `S`\n-   | similarly named struct `S` defined here\n+   |                       ^ not a type\n \n error: aborting due to previous error\n "}, {"sha": "e73a297c878f88f4e6ada939f54292ac7a43739b", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.min.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.min.stderr?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -2,10 +2,7 @@ error[E0573]: expected type, found const parameter `C`\n   --> $DIR/struct-with-invalid-const-param.rs:8:23\n    |\n LL | struct S<const C: u8>(C);\n-   | ----------------------^--\n-   | |                     |\n-   | |                     help: a struct with a similar name exists: `S`\n-   | similarly named struct `S` defined here\n+   |                       ^ not a type\n \n error: aborting due to previous error\n "}, {"sha": "6077fe5b1ed39edf74ed4c653e4907d8faa5d29e", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/transparent-maybeunit-array-wrapper.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "8afed0d39866a9cfe81893fc751deadea71ba931", "filename": "src/test/ui/const-generics/type_of_anon_const.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type_of_anon_const.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "a3620084a428939ee0eb4ff5a6468980709ddb6e", "filename": "src/test/ui/const-generics/uninferred-consts.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,20 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/uninferred-consts.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/uninferred-consts.rs:10:5\n-   |\n-LL |     Foo.foo();\n-   |     ^^^^^^^^^\n-   |\n-   = note: unable to infer the value of a const parameter\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "b2e287b762c69001b8773fb3751c96e254f64564", "filename": "src/test/ui/const-generics/unknown_adt.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,9 +0,0 @@\n-error[E0412]: cannot find type `UnknownStruct` in this scope\n-  --> $DIR/unknown_adt.rs:5:12\n-   |\n-LL |     let _: UnknownStruct<7>;\n-   |            ^^^^^^^^^^^^^ not found in this scope\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0412`."}, {"sha": "be015a689ae14883038ddc23088d2c52083da3af", "filename": "src/test/ui/const-generics/unused-const-param.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/unused-const-param.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "1b075ade16a06cf3b560b5011bb6695eb27f1b1c", "filename": "src/test/ui/const-generics/unused_braces.full.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.fixed?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -12,6 +12,6 @@ struct A<const N: usize>;\n \n fn main() {\n     let _: A<7>; // ok\n-    let _: A< 7 >; //~ WARN unnecessary braces\n+    let _: A<7>; //~ WARN unnecessary braces\n     let _: A<{ 3 + 5 }>; // ok\n }"}, {"sha": "1b075ade16a06cf3b560b5011bb6695eb27f1b1c", "filename": "src/test/ui/const-generics/unused_braces.min.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b416dde31268958b0544f1938af89574bcf55/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.fixed?ref=5c0b416dde31268958b0544f1938af89574bcf55", "patch": "@@ -12,6 +12,6 @@ struct A<const N: usize>;\n \n fn main() {\n     let _: A<7>; // ok\n-    let _: A< 7 >; //~ WARN unnecessary braces\n+    let _: A<7>; //~ WARN unnecessary braces\n     let _: A<{ 3 + 5 }>; // ok\n }"}, {"sha": "618698a323445c9e62a70905d20c84b121ddf9f9", "filename": "src/test/ui/const-generics/unused_braces.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,14 +0,0 @@\n-warning: unnecessary braces around const expression\n-  --> $DIR/unused_braces.rs:13:14\n-   |\n-LL |     let _: A<{ 7 }>;\n-   |              ^^^^^ help: remove these braces\n-   |\n-note: the lint level is defined here\n-  --> $DIR/unused_braces.rs:5:9\n-   |\n-LL | #![warn(unused_braces)]\n-   |         ^^^^^^^^^^^^^\n-\n-warning: 1 warning emitted\n-"}, {"sha": "03f2bf3f526994e57fcb58ec6b51f6ff730b0f92", "filename": "src/test/ui/const-generics/wf-misc.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf40f10bcf1359c4454ce55f6d72fb1c3081740/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.stderr?ref=9bf40f10bcf1359c4454ce55f6d72fb1c3081740", "patch": "@@ -1,27 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/wf-misc.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/wf-misc.rs:5:12\n-   |\n-LL |     let _: [u8; N + 1];\n-   |            ^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/wf-misc.rs:12:12\n-   |\n-LL |     let _: Const::<{N + 1}>;\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}]}