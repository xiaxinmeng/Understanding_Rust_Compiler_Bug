{"sha": "69c796e118b1c3b742f30c31fac6bac20ac3f772", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5Yzc5NmUxMThiMWMzYjc0MmYzMGMzMWZhYzZiYWMyMGFjM2Y3NzI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-08T17:54:22Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-21T10:29:44Z"}, "message": "lint on `filter(x).map(y)`, `filter(x).flat_map(y)`, `filter_map(x).flat_map(y)`", "tree": {"sha": "b1d005a98103f3d5f0687800e688bc445edda4a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1d005a98103f3d5f0687800e688bc445edda4a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69c796e118b1c3b742f30c31fac6bac20ac3f772", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXaRcYAAoJEFbW7qD8Z6xG0iwQAIfJSC+qLe9IW3Zur1b/lnTJ\n0mpVLbXZduHrS6qfRmCXZywO2aeHU96cfJ/tOJcmRh4tuNFoRat0RcyD9b2dXABp\nIKHsUva+JFRvpv2gBJDoxY7KuDw7sxTbGVVniEdsZGQvetddJzq0ko7TSxmnbjC5\nE2pyoUd8u7urGOubUraM1hpshFMQSB5dQeFMq4r9MFyHLUdHG1D/88n6Pc6/BMQ/\nWvWH7jo2FXuBUXr8lfjqA43CGEZyOomhbsKTyXCK1E50sLVldsrUUj/bir6ezwGy\nyjTwkwde0naJPomp3tQEVJ8Wz6E3Y0X25ipKcISwjBSNBm394LFkRna2OY2QFS4X\nzTWv0Np5C74EO9xN9QeZ4YKoyEwKlg1/QisA0hR0YI+8dZIFnw2d3aoFwWN6ugrm\nx760jUnx2ZRKAg2SAweXAIwSNA5NU9EYMi9dhLOntRnGdMtGN7V7RUL9x9qHkOAU\nb6z0gElmty+dRr/M2WDbx8XhGArYe98JSP7QCufdw7rGou0+7hfk2ZaxWiB6aqZ4\nsEC6F5VqofpkLBRvZkoyNIY6CLpxiDkC9ivMn4KnKU18PghYfX9lltUqJ2T6kw8c\nyJWPnbKC1MAcErLhzw6u3bP8CmpA/H4ea1B4e3KU/O7a4EhaeGcGFM316ani1p4W\ncZZzezBv2GKOxam31RNn\n=U5v6\n-----END PGP SIGNATURE-----", "payload": "tree b1d005a98103f3d5f0687800e688bc445edda4a1\nparent 5b1d849c7e1df0b413237d7a0a0a70c2cbfd52e9\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465408462 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466504984 +0200\n\nlint on `filter(x).map(y)`, `filter(x).flat_map(y)`, `filter_map(x).flat_map(y)`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69c796e118b1c3b742f30c31fac6bac20ac3f772", "html_url": "https://github.com/rust-lang/rust/commit/69c796e118b1c3b742f30c31fac6bac20ac3f772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69c796e118b1c3b742f30c31fac6bac20ac3f772/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b1d849c7e1df0b413237d7a0a0a70c2cbfd52e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1d849c7e1df0b413237d7a0a0a70c2cbfd52e9", "html_url": "https://github.com/rust-lang/rust/commit/5b1d849c7e1df0b413237d7a0a0a70c2cbfd52e9"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "abb8078c28674a9fb180e02dd056eb65e851b1dc", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/69c796e118b1c3b742f30c31fac6bac20ac3f772/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c796e118b1c3b742f30c31fac6bac20ac3f772/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=69c796e118b1c3b742f30c31fac6bac20ac3f772", "patch": "@@ -379,6 +379,12 @@ impl LateLintPass for Pass {\n                     lint_map_unwrap_or_else(cx, expr, arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"filter\", \"next\"]) {\n                     lint_filter_next(cx, expr, arglists[0]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"filter\", \"map\"]) {\n+                    lint_filter_map(cx, expr, arglists[0], arglists[1]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"filter\", \"flat_map\"]) {\n+                    lint_filter_flat_map(cx, expr, arglists[0], arglists[1]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"filter_map\", \"flat_map\"]) {\n+                    lint_filter_map_flat_map(cx, expr, arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"find\", \"is_some\"]) {\n                     lint_search_is_some(cx, expr, \"find\", arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"position\", \"is_some\"]) {\n@@ -834,6 +840,39 @@ fn lint_filter_next(cx: &LateContext, expr: &hir::Expr, filter_args: &MethodArgs\n     }\n }\n \n+// Type of MethodArgs is potentially a Vec\n+/// lint use of `filter().map() for Iterators`\n+fn lint_filter_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n+    // lint if caller of `.filter().map()` is an Iterator\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        let msg = \"called `filter(p).map(q)` on an Iterator. This is more succinctly expressed by calling `.filter_map(..)` \\\n+                   instead.\";\n+        span_lint(cx, FILTER_NEXT, expr.span, msg);\n+    }\n+}\n+\n+// Type of MethodArgs is potentially a Vec\n+/// lint use of `filter().flat_map() for Iterators`\n+fn lint_filter_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n+    // lint if caller of `.filter().flat_map()` is an Iterator\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        let msg = \"called `filter(p).flat_map(q)` on an Iterator. This is more succinctly expressed by calling `.flat_map(..)` \\\n+                   and filtering by returning an empty Iterator.\";\n+        span_lint(cx, FILTER_NEXT, expr.span, msg);\n+    }\n+}\n+\n+// Type of MethodArgs is potentially a Vec\n+/// lint use of `filter_map().flat_map() for Iterators`\n+fn lint_filter_map_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n+    // lint if caller of `.filter_map().flat_map()` is an Iterator\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        let msg = \"called `filter(p).flat_map(q)` on an Iterator. This is more succinctly expressed by calling `.flat_map(..)` \\\n+                   and filtering by returning an empty Iterator.\";\n+        span_lint(cx, FILTER_NEXT, expr.span, msg);\n+    }\n+}\n+\n #[allow(ptr_arg)]\n // Type of MethodArgs is potentially a Vec\n /// lint searching an Iterator followed by `is_some()`"}]}