{"sha": "5e7fb4553394e0d6439d0d2131dd9f65245d49a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlN2ZiNDU1MzM5NGUwZDY0MzlkMGQyMTMxZGQ5ZjY1MjQ1ZDQ5YTI=", "commit": {"author": {"name": "hafiz", "email": "20735482+ayazhafiz@users.noreply.github.com", "date": "2020-06-08T01:31:24Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-29T19:26:58Z"}, "message": "Pick up comments between visibility modifier and item name (#4239)\n\n* Pick up comments between visibility modifier and item name\r\n\r\nI don't think this hurts to fix. #2781, which surfaced this issue, has\r\na number of comments relating to similar but slightly different issues\r\n(i.e. dropped comments in other places). I can mark #2781 as closed and\r\nthen will open new issues for the comments that are not already resolved\r\nor tracked.\r\n\r\nCloses #2781\r\n\r\n* fixup! Pick up comments between visibility modifier and item name\r\n\r\n* fixup! Pick up comments between visibility modifier and item name", "tree": {"sha": "2b8d04d1f3ef16a4944fb8ad181815c8aa32c831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b8d04d1f3ef16a4944fb8ad181815c8aa32c831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7fb4553394e0d6439d0d2131dd9f65245d49a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7fb4553394e0d6439d0d2131dd9f65245d49a2", "html_url": "https://github.com/rust-lang/rust/commit/5e7fb4553394e0d6439d0d2131dd9f65245d49a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7fb4553394e0d6439d0d2131dd9f65245d49a2/comments", "author": {"login": "ayazhafiz", "id": 20735482, "node_id": "MDQ6VXNlcjIwNzM1NDgy", "avatar_url": "https://avatars.githubusercontent.com/u/20735482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazhafiz", "html_url": "https://github.com/ayazhafiz", "followers_url": "https://api.github.com/users/ayazhafiz/followers", "following_url": "https://api.github.com/users/ayazhafiz/following{/other_user}", "gists_url": "https://api.github.com/users/ayazhafiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazhafiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazhafiz/subscriptions", "organizations_url": "https://api.github.com/users/ayazhafiz/orgs", "repos_url": "https://api.github.com/users/ayazhafiz/repos", "events_url": "https://api.github.com/users/ayazhafiz/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazhafiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb7e604538bb45bf6119ca264c332c9aa634ef31", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7e604538bb45bf6119ca264c332c9aa634ef31", "html_url": "https://github.com/rust-lang/rust/commit/fb7e604538bb45bf6119ca264c332c9aa634ef31"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "cd8364fd6865d2ab92e0ed2db4a9f8bc1fb0ebc6", "filename": "src/items.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5e7fb4553394e0d6439d0d2131dd9f65245d49a2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7fb4553394e0d6439d0d2131dd9f65245d49a2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5e7fb4553394e0d6439d0d2131dd9f65245d49a2", "patch": "@@ -401,7 +401,8 @@ impl<'a> FmtVisitor<'a> {\n         generics: &ast::Generics,\n         span: Span,\n     ) {\n-        let enum_header = format_header(&self.get_context(), \"enum \", ident, vis);\n+        let enum_header =\n+            format_header(&self.get_context(), \"enum \", ident, vis, self.block_indent);\n         self.push_str(&enum_header);\n \n         let enum_snippet = self.snippet(span);\n@@ -952,8 +953,8 @@ pub(crate) struct StructParts<'a> {\n }\n \n impl<'a> StructParts<'a> {\n-    fn format_header(&self, context: &RewriteContext<'_>) -> String {\n-        format_header(context, self.prefix, self.ident, self.vis)\n+    fn format_header(&self, context: &RewriteContext<'_>, offset: Indent) -> String {\n+        format_header(context, self.prefix, self.ident, self.vis, offset)\n     }\n \n     fn from_variant(variant: &'a ast::Variant) -> Self {\n@@ -1236,7 +1237,7 @@ fn format_unit_struct(\n     p: &StructParts<'_>,\n     offset: Indent,\n ) -> Option<String> {\n-    let header_str = format_header(context, p.prefix, p.ident, p.vis);\n+    let header_str = format_header(context, p.prefix, p.ident, p.vis, offset);\n     let generics_str = if let Some(generics) = p.generics {\n         let hi = context.snippet_provider.span_before(p.span, \";\");\n         format_generics(\n@@ -1265,7 +1266,7 @@ pub(crate) fn format_struct_struct(\n     let mut result = String::with_capacity(1024);\n     let span = struct_parts.span;\n \n-    let header_str = struct_parts.format_header(context);\n+    let header_str = struct_parts.format_header(context, offset);\n     result.push_str(&header_str);\n \n     let header_hi = struct_parts.ident.span.hi();\n@@ -1401,7 +1402,7 @@ fn format_tuple_struct(\n     let mut result = String::with_capacity(1024);\n     let span = struct_parts.span;\n \n-    let header_str = struct_parts.format_header(context);\n+    let header_str = struct_parts.format_header(context, offset);\n     result.push_str(&header_str);\n \n     let body_lo = if fields.is_empty() {\n@@ -2920,13 +2921,35 @@ fn format_header(\n     item_name: &str,\n     ident: symbol::Ident,\n     vis: &ast::Visibility,\n+    offset: Indent,\n ) -> String {\n-    format!(\n-        \"{}{}{}\",\n-        format_visibility(context, vis),\n-        item_name,\n-        rewrite_ident(context, ident)\n-    )\n+    let mut result = String::with_capacity(128);\n+    let shape = Shape::indented(offset, context.config);\n+\n+    result.push_str(&format_visibility(context, vis).trim());\n+\n+    // Check for a missing comment between the visibility and the item name.\n+    let after_vis = vis.span.hi();\n+    if let Some(before_item_name) = context\n+        .snippet_provider\n+        .opt_span_before(mk_sp(vis.span().lo(), ident.span.hi()), item_name.trim())\n+    {\n+        let missing_span = mk_sp(after_vis, before_item_name);\n+        if let Some(result_with_comment) = combine_strs_with_missing_comments(\n+            context,\n+            &result,\n+            item_name,\n+            missing_span,\n+            shape,\n+            /* allow_extend */ true,\n+        ) {\n+            result = result_with_comment;\n+        }\n+    }\n+\n+    result.push_str(&rewrite_ident(context, ident));\n+\n+    result\n }\n \n #[derive(PartialEq, Eq, Clone, Copy)]"}, {"sha": "2c15b29b6dcd46e351005e24a1d683b6f1ba0ed4", "filename": "tests/source/issue-2781.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e7fb4553394e0d6439d0d2131dd9f65245d49a2/tests%2Fsource%2Fissue-2781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7fb4553394e0d6439d0d2131dd9f65245d49a2/tests%2Fsource%2Fissue-2781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2781.rs?ref=5e7fb4553394e0d6439d0d2131dd9f65245d49a2", "patch": "@@ -0,0 +1,11 @@\n+pub      // Oh, no. A line comment.\n+struct Foo {}\n+\n+pub     /* Oh, no. A block comment. */     struct Foo {}\n+\n+mod inner {\n+pub      // Oh, no. A line comment.\n+struct Foo {}\n+\n+pub     /* Oh, no. A block comment. */     struct Foo {}\n+}"}, {"sha": "f144d716be964eed64aff8c8a55ef481531cb190", "filename": "tests/target/issue-2781.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e7fb4553394e0d6439d0d2131dd9f65245d49a2/tests%2Ftarget%2Fissue-2781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7fb4553394e0d6439d0d2131dd9f65245d49a2/tests%2Ftarget%2Fissue-2781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2781.rs?ref=5e7fb4553394e0d6439d0d2131dd9f65245d49a2", "patch": "@@ -0,0 +1,11 @@\n+pub // Oh, no. A line comment.\n+struct Foo {}\n+\n+pub /* Oh, no. A block comment. */ struct Foo {}\n+\n+mod inner {\n+    pub // Oh, no. A line comment.\n+    struct Foo {}\n+\n+    pub /* Oh, no. A block comment. */ struct Foo {}\n+}"}]}