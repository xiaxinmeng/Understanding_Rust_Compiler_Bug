{"sha": "27a46ff765c26eab7b1e1f7d419cec8f5051df00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YTQ2ZmY3NjVjMjZlYWI3YjFlMWY3ZDQxOWNlYzhmNTA1MWRmMDA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-22T15:54:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-22T15:54:25Z"}, "message": "Rustup to rustc 1.44.0-nightly (45d050cde 2020-04-21)\n\nRemove the `<Box<F> as FnOnce>::call_once` hack now that rust-lang/rust#71170 is merged.", "tree": {"sha": "b3f4903716f29868f47c6d7007de1a6320ec9c55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3f4903716f29868f47c6d7007de1a6320ec9c55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a46ff765c26eab7b1e1f7d419cec8f5051df00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a46ff765c26eab7b1e1f7d419cec8f5051df00", "html_url": "https://github.com/rust-lang/rust/commit/27a46ff765c26eab7b1e1f7d419cec8f5051df00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a46ff765c26eab7b1e1f7d419cec8f5051df00/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a6d9e1f1b2d8bca214c72d71f54a45141587106", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6d9e1f1b2d8bca214c72d71f54a45141587106", "html_url": "https://github.com/rust-lang/rust/commit/5a6d9e1f1b2d8bca214c72d71f54a45141587106"}], "stats": {"total": 83, "additions": 1, "deletions": 82}, "files": [{"sha": "f3bb3d375853d897792b0301215f16290ffefd19", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a46ff765c26eab7b1e1f7d419cec8f5051df00/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/27a46ff765c26eab7b1e1f7d419cec8f5051df00/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=27a46ff765c26eab7b1e1f7d419cec8f5051df00", "patch": "@@ -1 +1 @@\n-nightly-2020-04-17\n+nightly-2020-04-22"}, {"sha": "6f4e60f6693afa8f471615ecaf2c00269ca4d841", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/27a46ff765c26eab7b1e1f7d419cec8f5051df00/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a46ff765c26eab7b1e1f7d419cec8f5051df00/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=27a46ff765c26eab7b1e1f7d419cec8f5051df00", "patch": "@@ -58,92 +58,11 @@ pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     };\n \n     let arg_uninhabited = fx.mir.args_iter().any(|arg| fx.layout_of(fx.monomorphize(&fx.mir.local_decls[arg].ty)).abi.is_uninhabited());\n-    let is_call_once_for_box = name.starts_with(\"_ZN83_$LT$alloc..boxed..Box$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$9call_once\");\n \n     if arg_uninhabited {\n         fx.bcx.append_block_params_for_function_params(fx.block_map[START_BLOCK]);\n         fx.bcx.switch_to_block(fx.block_map[START_BLOCK]);\n         crate::trap::trap_unreachable(&mut fx, \"function has uninhabited argument\");\n-    } else if is_call_once_for_box {\n-        // HACK implement `<Box<F> as FnOnce>::call_once` without `alloca`.\n-        tcx.sess.time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(&mut fx, start_block, false));\n-        fx.bcx.switch_to_block(fx.block_map[START_BLOCK]);\n-        let bb_data = &fx.mir.basic_blocks()[START_BLOCK];\n-        let destination = match &bb_data.terminator().kind {\n-            TerminatorKind::Call {\n-                func,\n-                args,\n-                destination,\n-                cleanup: _,\n-                from_hir_call: _,\n-            } => {\n-                assert_eq!(args.len(), 2);\n-\n-                let closure_arg = Local::new(1);\n-                let closure_local = args[0].place().unwrap().as_local().unwrap();\n-                assert_eq!(fx.mir.local_decls[closure_local].ty, fx.mir.local_decls[closure_arg].ty.builtin_deref(true).unwrap().ty);\n-                let closure_deref = fx.local_map[&closure_arg].place_deref(&mut fx);\n-                fx.local_map.insert(closure_local, closure_deref);\n-\n-                let args_arg = Local::new(2);\n-                let args_local = args[1].place().unwrap().as_local().unwrap();\n-                assert_eq!(fx.mir.local_decls[args_local].ty, fx.mir.local_decls[args_arg].ty);\n-                fx.local_map.insert(args_local, fx.local_map[&args_arg]);\n-\n-                fx.tcx.sess.time(\"codegen call\", || crate::abi::codegen_terminator_call(\n-                    &mut fx,\n-                    bb_data.terminator().source_info.span,\n-                    func,\n-                    args,\n-                    *destination,\n-                ));\n-                destination.map(|(_ret_place, ret_block)| ret_block)\n-            }\n-            _ => unreachable!(),\n-        };\n-\n-        let destination = if let Some(destination) = destination {\n-            fx.bcx.switch_to_block(fx.block_map[destination]);\n-            let bb_data = &fx.mir.basic_blocks()[destination];\n-            match &bb_data.terminator().kind {\n-                TerminatorKind::Call {\n-                    func,\n-                    args,\n-                    destination,\n-                    cleanup: _,\n-                    from_hir_call: _,\n-                } => {\n-                    match destination {\n-                        Some((ret_place, _ret_block)) => {\n-                            fx.local_map.insert(ret_place.as_local().unwrap(), CPlace::no_place(fx.layout_of(fx.tcx.mk_unit())));\n-                        }\n-                        None => {}\n-                    }\n-\n-                    assert_eq!(args.len(), 1);\n-                    fx.tcx.sess.time(\"codegen call\", || crate::abi::codegen_terminator_call(\n-                        &mut fx,\n-                        bb_data.terminator().source_info.span,\n-                        func,\n-                        args,\n-                        *destination,\n-                    ));\n-                    destination.map(|(_ret_place, ret_block)| ret_block)\n-                }\n-                _ => unreachable!(),\n-            }\n-        } else {\n-            None\n-        };\n-\n-        if let Some(destination) = destination {\n-            fx.bcx.switch_to_block(fx.block_map[destination]);\n-            let bb_data = &fx.mir.basic_blocks()[destination];\n-            match &bb_data.terminator().kind {\n-                TerminatorKind::Return => crate::abi::codegen_return(&mut fx),\n-                _ => unreachable!(),\n-            }\n-        }\n     } else {\n         tcx.sess.time(\"codegen clif ir\", || {\n             tcx.sess.time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(&mut fx, start_block, true));"}]}