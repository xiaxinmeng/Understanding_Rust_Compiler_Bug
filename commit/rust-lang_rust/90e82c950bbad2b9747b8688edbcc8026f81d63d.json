{"sha": "90e82c950bbad2b9747b8688edbcc8026f81d63d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZTgyYzk1MGJiYWQyYjk3NDdiODY4OGVkYmNjODAyNmY4MWQ2M2Q=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-19T01:14:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-19T01:14:10Z"}, "message": "Rollup merge of #86397 - Eosis:alter-cell-docs, r=JohnTitor\n\nAlter std::cell::Cell::get_mut documentation\n\nI felt that there was some inconsistency between between Cell and RefCell with regards to their `get_mut` method documentation: `RefCell` flags this method as \"unusual\" in that it takes `&mut self`, while `Cell` does not. I attempted to flag this in `Cell`s documentation as well, and point to `RefCell`s method in the case where it is required.\n\nFind relevant parts of docs and the new version below.\n\nThe current docs for `Cell::get_mut`:\n> Returns a mutable reference to the underlying data.\nThis call borrows Cell mutably (at compile-time) which guarantees that we possess the only reference.\n\nAnd `RefCell::get_mut`:\n> Returns a mutable reference to the underlying data.\n This call borrows `RefCell` mutably (at compile-time) so there is no need for dynamic checks.\nHowever be cautious: this method expects self to be mutable, which is generally not the case when using a `RefCell`. Take a look at the `borrow_mut` method instead if self isn\u2019t mutable.\nAlso, please be aware that this method is only for special circumstances and is usually not what you want. In case of doubt, use `borrow_mut` instead.\n\nMy attempt to make `Cell::get_mut` clearer:\n> Returns a mutable reference to the underlying data.\nThis call borrows `Cell` mutably (at compile-time) which guaranteesthat we possess the only reference.\nHowever be cautious: this method expects `self` to be mutable, which is generally not the case when using a `Cell`. If you require interior mutability by reference, consider using `RefCell` which provides run-time checked mutable borrows through its `borrow_mut` method.", "tree": {"sha": "dd2e57370715881aaa9b91d324272840877a3096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd2e57370715881aaa9b91d324272840877a3096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90e82c950bbad2b9747b8688edbcc8026f81d63d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgzUTiCRBK7hj4Ov3rIwAA9/YIAFxBZXW7OirHS4Bz1dHjAtYt\npU9sz996J3EDe5jUsM7FcZ5Yah+EdIMfxixsMGzEVaq8vPmHE/c8636PXRSkd1ef\n/74bkGFdg37nHdRAevFrg16V8cU34gfjbyH9rJUI/eVjZe/oWD4CMvFRA64y7CrS\nJPDgNKdgFJkcZW4o4OnjgUDQz0iWYpVEa3wRk2oB9Pv2PdkMzU9yluKq3kMeCkha\nxDiorsKV3N2bTiz9L/2o9GaXDqFJ3DxezWkKjGuB0LOCOXKo8A+qg78sW+z6jY1N\nsVbBlheBAzVNNL6eCF0kmLQ7uST3k4ZG+w+2oOgm4D+lZlI3iA4JnMwxZPAYhiM=\n=PSq6\n-----END PGP SIGNATURE-----\n", "payload": "tree dd2e57370715881aaa9b91d324272840877a3096\nparent 41bf471950dcf7cee52cf73a9f1ee979b7c39971\nparent 7cadf7bc0167d254d564ec81361db257e7ed2e82\nauthor Yuki Okushi <jtitor@2k36.org> 1624065250 +0900\ncommitter GitHub <noreply@github.com> 1624065250 +0900\n\nRollup merge of #86397 - Eosis:alter-cell-docs, r=JohnTitor\n\nAlter std::cell::Cell::get_mut documentation\n\nI felt that there was some inconsistency between between Cell and RefCell with regards to their `get_mut` method documentation: `RefCell` flags this method as \"unusual\" in that it takes `&mut self`, while `Cell` does not. I attempted to flag this in `Cell`s documentation as well, and point to `RefCell`s method in the case where it is required.\n\nFind relevant parts of docs and the new version below.\n\nThe current docs for `Cell::get_mut`:\n> Returns a mutable reference to the underlying data.\nThis call borrows Cell mutably (at compile-time) which guarantees that we possess the only reference.\n\nAnd `RefCell::get_mut`:\n> Returns a mutable reference to the underlying data.\n This call borrows `RefCell` mutably (at compile-time) so there is no need for dynamic checks.\nHowever be cautious: this method expects self to be mutable, which is generally not the case when using a `RefCell`. Take a look at the `borrow_mut` method instead if self isn\u2019t mutable.\nAlso, please be aware that this method is only for special circumstances and is usually not what you want. In case of doubt, use `borrow_mut` instead.\n\nMy attempt to make `Cell::get_mut` clearer:\n> Returns a mutable reference to the underlying data.\nThis call borrows `Cell` mutably (at compile-time) which guaranteesthat we possess the only reference.\nHowever be cautious: this method expects `self` to be mutable, which is generally not the case when using a `Cell`. If you require interior mutability by reference, consider using `RefCell` which provides run-time checked mutable borrows through its `borrow_mut` method.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90e82c950bbad2b9747b8688edbcc8026f81d63d", "html_url": "https://github.com/rust-lang/rust/commit/90e82c950bbad2b9747b8688edbcc8026f81d63d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90e82c950bbad2b9747b8688edbcc8026f81d63d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41bf471950dcf7cee52cf73a9f1ee979b7c39971", "url": "https://api.github.com/repos/rust-lang/rust/commits/41bf471950dcf7cee52cf73a9f1ee979b7c39971", "html_url": "https://github.com/rust-lang/rust/commit/41bf471950dcf7cee52cf73a9f1ee979b7c39971"}, {"sha": "7cadf7bc0167d254d564ec81361db257e7ed2e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cadf7bc0167d254d564ec81361db257e7ed2e82", "html_url": "https://github.com/rust-lang/rust/commit/7cadf7bc0167d254d564ec81361db257e7ed2e82"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "6fd49361585891e07ea6940e396d869a06f76bae", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90e82c950bbad2b9747b8688edbcc8026f81d63d/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e82c950bbad2b9747b8688edbcc8026f81d63d/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=90e82c950bbad2b9747b8688edbcc8026f81d63d", "patch": "@@ -488,6 +488,13 @@ impl<T: ?Sized> Cell<T> {\n     /// This call borrows `Cell` mutably (at compile-time) which guarantees\n     /// that we possess the only reference.\n     ///\n+    /// However be cautious: this method expects `self` to be mutable, which is\n+    /// generally not the case when using a `Cell`. If you require interior\n+    /// mutability by reference, consider using `RefCell` which provides\n+    /// run-time checked mutable borrows through its [`borrow_mut`] method.\n+    ///\n+    /// [`borrow_mut`]: RefCell::borrow_mut()\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}