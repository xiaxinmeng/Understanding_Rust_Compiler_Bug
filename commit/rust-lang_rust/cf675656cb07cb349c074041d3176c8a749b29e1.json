{"sha": "cf675656cb07cb349c074041d3176c8a749b29e1", "node_id": "C_kwDOAAsO6NoAKGNmNjc1NjU2Y2IwN2NiMzQ5YzA3NDA0MWQzMTc2YzhhNzQ5YjI5ZTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-13T22:45:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-13T22:45:19Z"}, "message": "Rollup merge of #103016 - nbdd0121:enum, r=pnkfelix\n\nEnsure enum cast moves\n\nFix #102389\n\nr? ``@pnkfelix``", "tree": {"sha": "0c34895f375438cdadb76cebcb2023fccd5fcab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c34895f375438cdadb76cebcb2023fccd5fcab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf675656cb07cb349c074041d3176c8a749b29e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjSJT/CRBK7hj4Ov3rIwAABw0IAAX6To4chUx56ZWe6L2Nw2kD\nK+g+beycA2XXhJycy9DqOsk9nJynb0viDBC6lnBxgtfYWmKLI9H+gpdp838dE2xF\nPYkeH3+1U9nAHpSdvMnzPsav+yZF46GIv+N/5NY5F+LQcA56FK/tlV6WJOzv3sRg\nzpUgFVH4nQs5IjNJB8kfVJUduwzJUmuhBFdElJwucSE1k2xF4cNN0cr4QoL0Os9E\nYoPxjqDt0BgqZLD0A4Z11INcJXNKXnBxFGCINJ68qOqaWnZlID2TUoA74Rm7gZzf\nyRGE0UDOpqiRPQsNP4YFoPuYGEl5hwl/gLp+KbqMiGC/M0yZsLixrvKveKUb8xg=\n=Twst\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c34895f375438cdadb76cebcb2023fccd5fcab0\nparent ea709c28c39fbc0ebcf4a9f77e6317c0c52ec771\nparent 4a25a49edfcca0392a9731df351f1a1229a6e662\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665701119 +0200\ncommitter GitHub <noreply@github.com> 1665701119 +0200\n\nRollup merge of #103016 - nbdd0121:enum, r=pnkfelix\n\nEnsure enum cast moves\n\nFix #102389\n\nr? ``@pnkfelix``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf675656cb07cb349c074041d3176c8a749b29e1", "html_url": "https://github.com/rust-lang/rust/commit/cf675656cb07cb349c074041d3176c8a749b29e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf675656cb07cb349c074041d3176c8a749b29e1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea709c28c39fbc0ebcf4a9f77e6317c0c52ec771", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea709c28c39fbc0ebcf4a9f77e6317c0c52ec771", "html_url": "https://github.com/rust-lang/rust/commit/ea709c28c39fbc0ebcf4a9f77e6317c0c52ec771"}, {"sha": "4a25a49edfcca0392a9731df351f1a1229a6e662", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a25a49edfcca0392a9731df351f1a1229a6e662", "html_url": "https://github.com/rust-lang/rust/commit/4a25a49edfcca0392a9731df351f1a1229a6e662"}], "stats": {"total": 93, "additions": 67, "deletions": 26}, "files": [{"sha": "3dafdcb788710ba99c583c10b4f050d02324b8f4", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf675656cb07cb349c074041d3176c8a749b29e1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf675656cb07cb349c074041d3176c8a749b29e1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=cf675656cb07cb349c074041d3176c8a749b29e1", "patch": "@@ -197,13 +197,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // create all the steps directly in MIR with operations all backends need to support anyway.\n                 let (source, ty) = if let ty::Adt(adt_def, ..) = source.ty.kind() && adt_def.is_enum() {\n                     let discr_ty = adt_def.repr().discr_type().to_ty(this.tcx);\n-                    let place = unpack!(block = this.as_place(block, source));\n+                    let temp = unpack!(block = this.as_temp(block, scope, source, Mutability::Not));\n                     let discr = this.temp(discr_ty, source.span);\n                     this.cfg.push_assign(\n                         block,\n                         source_info,\n                         discr,\n-                        Rvalue::Discriminant(place),\n+                        Rvalue::Discriminant(temp.into()),\n                     );\n \n                     (Operand::Move(discr), discr_ty)"}, {"sha": "e58085f701ac26975c6e82c0be88bc0a3feca9db", "filename": "src/test/mir-opt/enum_cast.bar.mir_map.0.mir", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir?ref=cf675656cb07cb349c074041d3176c8a749b29e1", "patch": "@@ -3,11 +3,15 @@\n fn bar(_1: Bar) -> usize {\n     debug bar => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n     let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n-    let mut _2: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let _2: Bar;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let mut _3: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "525c6234ed31de432f11b761cdf404cf8cb6187a", "filename": "src/test/mir-opt/enum_cast.boo.mir_map.0.mir", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir?ref=cf675656cb07cb349c074041d3176c8a749b29e1", "patch": "@@ -3,11 +3,15 @@\n fn boo(_1: Boo) -> usize {\n     debug boo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n     let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n-    let mut _2: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let _2: Boo;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let mut _3: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "bb5faa48047a95b737b95218544ea0d7b154271c", "filename": "src/test/mir-opt/enum_cast.droppy.mir_map.0.mir", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir?ref=cf675656cb07cb349c074041d3176c8a749b29e1", "patch": "@@ -4,8 +4,9 @@ fn droppy() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/enum_cast.rs:+0:13: +0:13\n     let _1: ();                          // in scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n     let _2: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n-    let mut _4: isize;                   // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n-    let _5: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+    let _4: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n+    let mut _5: isize;                   // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n+    let _6: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n     scope 1 {\n         debug x => _2;                   // in scope 1 at $DIR/enum_cast.rs:+2:13: +2:14\n         scope 2 {\n@@ -16,7 +17,7 @@ fn droppy() -> () {\n         }\n     }\n     scope 4 {\n-        debug z => _5;                   // in scope 4 at $DIR/enum_cast.rs:+7:9: +7:10\n+        debug z => _6;                   // in scope 4 at $DIR/enum_cast.rs:+7:9: +7:10\n     }\n \n     bb0: {\n@@ -25,30 +26,41 @@ fn droppy() -> () {\n         _2 = Droppy::C;                  // scope 0 at $DIR/enum_cast.rs:+2:17: +2:26\n         FakeRead(ForLet(None), _2);      // scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n         StorageLive(_3);                 // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n-        _4 = discriminant(_2);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        _3 = move _4 as usize (IntToInt); // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        StorageLive(_4);                 // scope 3 at $DIR/enum_cast.rs:+5:17: +5:18\n+        _4 = move _2;                    // scope 3 at $DIR/enum_cast.rs:+5:17: +5:18\n+        _5 = discriminant(_4);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        _3 = move _5 as usize (IntToInt); // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        drop(_4) -> [return: bb1, unwind: bb4]; // scope 3 at $DIR/enum_cast.rs:+5:26: +5:27\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 3 at $DIR/enum_cast.rs:+5:26: +5:27\n         FakeRead(ForLet(None), _3);      // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n         _1 = const ();                   // scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n         StorageDead(_3);                 // scope 1 at $DIR/enum_cast.rs:+6:5: +6:6\n-        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n     }\n \n-    bb1: {\n+    bb2: {\n         StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n         StorageDead(_1);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n-        StorageLive(_5);                 // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n-        _5 = Droppy::B;                  // scope 0 at $DIR/enum_cast.rs:+7:13: +7:22\n-        FakeRead(ForLet(None), _5);      // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+        StorageLive(_6);                 // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+        _6 = Droppy::B;                  // scope 0 at $DIR/enum_cast.rs:+7:13: +7:22\n+        FakeRead(ForLet(None), _6);      // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n         _0 = const ();                   // scope 0 at $DIR/enum_cast.rs:+0:13: +8:2\n-        drop(_5) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n+        drop(_6) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n     }\n \n-    bb2: {\n-        StorageDead(_5);                 // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n+    bb3: {\n+        StorageDead(_6);                 // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n         return;                          // scope 0 at $DIR/enum_cast.rs:+8:2: +8:2\n     }\n \n-    bb3 (cleanup): {\n+    bb4 (cleanup): {\n+        drop(_2) -> bb5;                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n+    }\n+\n+    bb5 (cleanup): {\n         resume;                          // scope 0 at $DIR/enum_cast.rs:+0:1: +8:2\n     }\n }"}, {"sha": "a1d29a0b9032065d7cf6d4e6f04eecd0feb06452", "filename": "src/test/mir-opt/enum_cast.foo.mir_map.0.mir", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir?ref=cf675656cb07cb349c074041d3176c8a749b29e1", "patch": "@@ -3,11 +3,15 @@\n fn foo(_1: Foo) -> usize {\n     debug foo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n     let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n-    let mut _2: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let _2: Foo;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let mut _3: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "f7ef92df8fbec3a4f89a5dd2436ee6ca61d35a17", "filename": "src/test/run-pass-valgrind/cast-enum-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs?ref=cf675656cb07cb349c074041d3176c8a749b29e1", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     {\n         let e = E::C;\n         assert_eq!(e as u32, 2);\n-        assert_eq!(FLAG.load(Ordering::SeqCst), 0);\n+        assert_eq!(FLAG.load(Ordering::SeqCst), 1);\n     }\n     assert_eq!(FLAG.load(Ordering::SeqCst), 1);\n }"}, {"sha": "8b27d5e55743d4ce617d00bd082897c88b454f38", "filename": "src/test/ui/mir/issue-102389.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fui%2Fmir%2Fissue-102389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fui%2Fmir%2Fissue-102389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-102389.rs?ref=cf675656cb07cb349c074041d3176c8a749b29e1", "patch": "@@ -0,0 +1,8 @@\n+enum Enum { A, B, C }\n+\n+fn func(inbounds: &Enum, array: &[i16; 3]) -> i16 {\n+    array[*inbounds as usize]\n+    //~^ ERROR [E0507]\n+}\n+\n+fn main() {}"}, {"sha": "925dc258a4c3c8ac1dc44f479ac4b57ede3801b7", "filename": "src/test/ui/mir/issue-102389.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fui%2Fmir%2Fissue-102389.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf675656cb07cb349c074041d3176c8a749b29e1/src%2Ftest%2Fui%2Fmir%2Fissue-102389.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-102389.stderr?ref=cf675656cb07cb349c074041d3176c8a749b29e1", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of `*inbounds` which is behind a shared reference\n+  --> $DIR/issue-102389.rs:4:11\n+   |\n+LL |     array[*inbounds as usize]\n+   |           ^^^^^^^^^ move occurs because `*inbounds` has type `Enum`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}]}