{"sha": "c909b6dc2254b1ceca049f878e67a8ab86118d37", "node_id": "C_kwDOAAsO6NoAKGM5MDliNmRjMjI1NGIxY2VjYTA0OWY4NzhlNjdhOGFiODYxMThkMzc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-11T12:20:38Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-21T06:09:11Z"}, "message": "add comment to `Lift` impls", "tree": {"sha": "7fb47fb701d99870f996f2f9ca04f13e18c3d088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb47fb701d99870f996f2f9ca04f13e18c3d088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c909b6dc2254b1ceca049f878e67a8ab86118d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c909b6dc2254b1ceca049f878e67a8ab86118d37", "html_url": "https://github.com/rust-lang/rust/commit/c909b6dc2254b1ceca049f878e67a8ab86118d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c909b6dc2254b1ceca049f878e67a8ab86118d37/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758f4e715867573a4c56f6b92e96d6c4960bc2e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/758f4e715867573a4c56f6b92e96d6c4960bc2e8", "html_url": "https://github.com/rust-lang/rust/commit/758f4e715867573a4c56f6b92e96d6c4960bc2e8"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "4b4fcaa9c1874af8557e595df5f4602e9d7b5be4", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c909b6dc2254b1ceca049f878e67a8ab86118d37/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c909b6dc2254b1ceca049f878e67a8ab86118d37/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c909b6dc2254b1ceca049f878e67a8ab86118d37", "patch": "@@ -1655,6 +1655,8 @@ macro_rules! nop_lift {\n             type Lifted = $lifted;\n             fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n                 if tcx.interners.$set.contains_pointer_to(&InternedInSet(self.0.0)) {\n+                    // SAFETY: `self` is interned and therefore valid\n+                    // for the entire lifetime of the `TyCtxt`.\n                     Some(unsafe { mem::transmute(self) })\n                 } else {\n                     None\n@@ -1674,7 +1676,9 @@ impl<'a, 'tcx> Lift<'tcx> for &'a List<Ty<'a>> {\n             return Some(List::empty());\n         }\n         if tcx.interners.substs.contains_pointer_to(&InternedInSet(self.as_substs())) {\n-            Some(unsafe { mem::transmute(self) })\n+            // SAFETY: `self` is interned and therefore valid\n+            // for the entire lifetime of the `TyCtxt`.\n+            Some(unsafe { mem::transmute::<&'a List<Ty<'a>>, &'tcx List<Ty<'tcx>>>(self) })\n         } else {\n             None\n         }"}]}