{"sha": "9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZDg0NThjOTJmNzE2NmI4MjdlNGViNWNmNWVmZmJhOGMwZTYxNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-09T21:01:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-09T21:01:58Z"}, "message": "Auto merge of #50250 - csmoe:wf_traitref, r=scalexm\n\nChalk lowering rule: WellFormed-TraitRef\n\nAddress chalk lowering \"Implemented-From-Env\" as part of #49177.\nr? @nikomatsakis", "tree": {"sha": "c43e86341262f94eb6b8b34a19e11fb68ea5fbe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c43e86341262f94eb6b8b34a19e11fb68ea5fbe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "html_url": "https://github.com/rust-lang/rust/commit/9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd185c8970e79c2cdd3c5cfad7c4bf591836b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd185c8970e79c2cdd3c5cfad7c4bf591836b23", "html_url": "https://github.com/rust-lang/rust/commit/bdd185c8970e79c2cdd3c5cfad7c4bf591836b23"}, {"sha": "37c5c0bf9ce4e14b3cfaf102b1250c9201113b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c5c0bf9ce4e14b3cfaf102b1250c9201113b55", "html_url": "https://github.com/rust-lang/rust/commit/37c5c0bf9ce4e14b3cfaf102b1250c9201113b55"}], "stats": {"total": 105, "additions": 82, "deletions": 23}, "files": [{"sha": "cf61258577619e90dcf643ecc44c7e13dfa75cac", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 75, "deletions": 23, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "patch": "@@ -12,8 +12,10 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n use rustc::hir::{self, ImplPolarity};\n-use rustc::traits::{Clause, Clauses, DomainGoal, Goal, PolyDomainGoal, ProgramClause,\n-                    WhereClause, FromEnv, WellFormed};\n+use rustc::traits::{\n+    Clause, Clauses, DomainGoal, FromEnv, Goal, PolyDomainGoal, ProgramClause, WellFormed,\n+    WhereClause,\n+};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Slice, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -101,34 +103,50 @@ impl<'tcx> Lower<PolyDomainGoal<'tcx>> for ty::Predicate<'tcx> {\n             Predicate::RegionOutlives(predicate) => predicate.lower(),\n             Predicate::TypeOutlives(predicate) => predicate.lower(),\n             Predicate::Projection(predicate) => predicate.lower(),\n-            Predicate::WellFormed(ty) => ty::Binder::dummy(\n-                DomainGoal::WellFormed(WellFormed::Ty(*ty))\n-            ),\n-            Predicate::ObjectSafe(..) |\n-            Predicate::ClosureKind(..) |\n-            Predicate::Subtype(..) |\n-            Predicate::ConstEvaluatable(..) => {\n-                unimplemented!()\n+            Predicate::WellFormed(ty) => {\n+                ty::Binder::dummy(DomainGoal::WellFormed(WellFormed::Ty(*ty)))\n             }\n+            Predicate::ObjectSafe(..)\n+            | Predicate::ClosureKind(..)\n+            | Predicate::Subtype(..)\n+            | Predicate::ConstEvaluatable(..) => unimplemented!(),\n         }\n     }\n }\n \n-/// Transforms an existing goal into a FromEnv goal.\n-///\n-/// Used for lowered where clauses (see rustc guide).\n+/// Used for implied bounds related rules (see rustc guide).\n trait IntoFromEnvGoal {\n+    /// Transforms an existing goal into a `FromEnv` goal.\n     fn into_from_env_goal(self) -> Self;\n }\n \n+/// Used for well-formedness related rules (see rustc guide).\n+trait IntoWellFormedGoal {\n+    /// Transforms an existing goal into a `WellFormed` goal.\n+    fn into_well_formed_goal(self) -> Self;\n+}\n+\n impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n     fn into_from_env_goal(self) -> DomainGoal<'tcx> {\n         use self::WhereClause::*;\n \n         match self {\n-            DomainGoal::Holds(Implemented(trait_ref)) => DomainGoal::FromEnv(\n-                FromEnv::Trait(trait_ref)\n-            ),\n+            DomainGoal::Holds(Implemented(trait_ref)) => {\n+                DomainGoal::FromEnv(FromEnv::Trait(trait_ref))\n+            }\n+            other => other,\n+        }\n+    }\n+}\n+\n+impl<'tcx> IntoWellFormedGoal for DomainGoal<'tcx> {\n+    fn into_well_formed_goal(self) -> DomainGoal<'tcx> {\n+        use self::WhereClause::*;\n+\n+        match self {\n+            DomainGoal::Holds(Implemented(trait_ref)) => {\n+                DomainGoal::WellFormed(WellFormed::Trait(trait_ref))\n+            }\n             other => other,\n         }\n     }\n@@ -230,7 +248,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     // `Implemented(Self: Trait<P1..Pn>)`\n     let impl_trait: DomainGoal = trait_pred.lower();\n \n-     // `FromEnv(Self: Trait<P1..Pn>)`\n+    // `FromEnv(Self: Trait<P1..Pn>)`\n     let from_env_goal = impl_trait.into_from_env_goal().into_goal();\n     let hypotheses = tcx.intern_goals(&[from_env_goal]);\n \n@@ -242,6 +260,8 @@ fn program_clauses_for_trait<'a, 'tcx>(\n \n     let clauses = iter::once(Clause::ForAll(ty::Binder::dummy(implemented_from_env)));\n \n+    let where_clauses = &tcx.predicates_defined_on(def_id).predicates;\n+\n     // Rule Implied-Bound-From-Trait\n     //\n     // For each where clause WC:\n@@ -252,7 +272,6 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     // ```\n \n     // `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`, for each where clause WC\n-    let where_clauses = &tcx.predicates_defined_on(def_id).predicates;\n     let implied_bound_clauses = where_clauses\n         .into_iter()\n         .map(|wc| wc.lower())\n@@ -262,10 +281,40 @@ fn program_clauses_for_trait<'a, 'tcx>(\n             goal: goal.into_from_env_goal(),\n             hypotheses,\n         }))\n-\n         .map(Clause::ForAll);\n \n-    tcx.mk_clauses(clauses.chain(implied_bound_clauses))\n+    // Rule WellFormed-TraitRef\n+    //\n+    // Here `WC` denotes the set of all where clauses:\n+    // ```\n+    // forall<Self, P1..Pn> {\n+    //   WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n+    // }\n+    // ```\n+\n+    // `Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)`\n+    let wf_conditions = iter::once(ty::Binder::dummy(trait_pred.lower()))\n+        .chain(\n+            where_clauses\n+                .into_iter()\n+                .map(|wc| wc.lower())\n+                .map(|wc| wc.map_bound(|goal| goal.into_well_formed_goal()))\n+        );\n+\n+    // `WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)`\n+    let wf_clause = ProgramClause {\n+        goal: DomainGoal::WellFormed(WellFormed::Trait(trait_pred)),\n+        hypotheses: tcx.mk_goals(\n+            wf_conditions.map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+        ),\n+    };\n+    let wf_clause = iter::once(Clause::ForAll(ty::Binder::dummy(wf_clause)));\n+\n+    tcx.mk_clauses(\n+        clauses\n+            .chain(implied_bound_clauses)\n+            .chain(wf_clause)\n+    )\n }\n \n fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Clauses<'tcx> {\n@@ -307,7 +356,6 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Clauses<'tcx> {\n-\n     // Rule WellFormed-Type\n     //\n     // `struct Ty<P1..Pn> where WC1, ..., WCm`\n@@ -328,7 +376,10 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     let well_formed = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Ty(ty)),\n         hypotheses: tcx.mk_goals(\n-            where_clauses.iter().cloned().map(|wc| Goal::from_poly_domain_goal(wc, tcx))\n+            where_clauses\n+                .iter()\n+                .cloned()\n+                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n \n@@ -459,7 +510,8 @@ impl<'a, 'tcx> ClauseDumper<'a, 'tcx> {\n             }\n \n             if let Some(clauses) = clauses {\n-                let mut err = self.tcx\n+                let mut err = self\n+                    .tcx\n                     .sess\n                     .struct_span_err(attr.span, \"program clause dump\");\n "}, {"sha": "d6673f6a8a6fb6b77b506d79f4438ac9f11378a4", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "patch": "@@ -7,6 +7,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo), WellFormed(Self: Foo).\n \n error: program clause dump\n   --> $DIR/lower_env1.rs:19:1\n@@ -19,6 +20,9 @@ LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n    = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Foo) :- Implemented(Self: Foo).\n+   = note: WellFormed(Self: std::marker::Sized) :- Implemented(Self: std::marker::Sized).\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c4e768415d60b5501ff5156f6c8a26b8bbab1b0d", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "patch": "@@ -8,6 +8,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n    = note: FromEnv(U: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n    = note: Implemented(Self: Foo<S, T, U>) :- FromEnv(Self: Foo<S, T, U>).\n+   = note: WellFormed(Self: Foo<S, T, U>) :- Implemented(Self: Foo<S, T, U>), WellFormed(S: std::marker::Sized), WellFormed(T: std::marker::Sized), WellFormed(U: std::marker::Sized).\n \n error: aborting due to previous error\n "}, {"sha": "afb2cd4b563329aa8e07f57de163ac70aeb9aa34", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr?ref=9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "patch": "@@ -8,6 +8,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: FromEnv(F: std::ops::Fn<(&'a (u8, u16),)>) :- FromEnv(Self: Foo<F>).\n    = note: Implemented(Self: Foo<F>) :- FromEnv(Self: Foo<F>).\n    = note: ProjectionEq(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) :- FromEnv(Self: Foo<F>).\n+   = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), WellFormed(F: std::marker::Sized), forall<> { WellFormed(F: std::ops::Fn<(&'a (u8, u16),)>) }, forall<> { ProjectionEq(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) }.\n \n error: aborting due to previous error\n "}, {"sha": "5ea397d424b63986b885c9c10fb5f5bf7a768611", "filename": "src/test/ui/chalkify/lower_trait_where_clause.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bd8458c92f7166b827e4eb5cf5effba8c0e615d/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr?ref=9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "patch": "@@ -11,6 +11,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: Implemented(Self: Foo<'a, 'b, S, T, U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n    = note: RegionOutlives('a : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n    = note: TypeOutlives(U : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), WellFormed(S: std::marker::Sized), WellFormed(T: std::marker::Sized), WellFormed(S: std::fmt::Debug), WellFormed(T: std::borrow::Borrow<U>), RegionOutlives('a : 'b), TypeOutlives(U : 'b).\n \n error: aborting due to previous error\n "}]}