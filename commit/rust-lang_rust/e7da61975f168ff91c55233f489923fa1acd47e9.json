{"sha": "e7da61975f168ff91c55233f489923fa1acd47e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZGE2MTk3NWYxNjhmZjkxYzU1MjMzZjQ4OTkyM2ZhMWFjZDQ3ZTk=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-10-24T22:41:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-24T22:41:29Z"}, "message": "Rollup merge of #37328 - michaelwoerister:stable-local-symbol-names, r=nagisa\n\ntrans: Make names of internal symbols independent of CGU translation order\n\nEvery codegen unit gets its own local counter for generating new symbol names. This makes bitcode and object files reproducible at the binary level even when incremental compilation is used.\n\nThe PR also solves a rare ICE resulting from a naming conflict between a user defined name and a generated one. E.g. try compiling the following program with 1.12.1 stable:\n```rust\n\npub fn str7233() -> &'static str { \"foo\" }\n```\nThis results in:\n> error: internal compiler error: ../src/librustc_trans/common.rs:979: symbol `str7233` is already defined\n\nRunning into this is not very likely but it's also easily avoidable.", "tree": {"sha": "5a5b73a10502641b3fb082ece6014844b61919cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a5b73a10502641b3fb082ece6014844b61919cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7da61975f168ff91c55233f489923fa1acd47e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7da61975f168ff91c55233f489923fa1acd47e9", "html_url": "https://github.com/rust-lang/rust/commit/e7da61975f168ff91c55233f489923fa1acd47e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7da61975f168ff91c55233f489923fa1acd47e9/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "050499c407218fb6b0044bc4a16ffbfb906ec3a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/050499c407218fb6b0044bc4a16ffbfb906ec3a4", "html_url": "https://github.com/rust-lang/rust/commit/050499c407218fb6b0044bc4a16ffbfb906ec3a4"}, {"sha": "992203b9764c7e4e48ca454aa3162ee7d73cb87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/992203b9764c7e4e48ca454aa3162ee7d73cb87c", "html_url": "https://github.com/rust-lang/rust/commit/992203b9764c7e4e48ca454aa3162ee7d73cb87c"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "76b778fb61f258b9154eac81cc2f70dddc5d31aa", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7da61975f168ff91c55233f489923fa1acd47e9/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7da61975f168ff91c55233f489923fa1acd47e9/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=e7da61975f168ff91c55233f489923fa1acd47e9", "patch": "@@ -799,9 +799,7 @@ pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> Va\n                                                 s.as_ptr() as *const c_char,\n                                                 s.len() as c_uint,\n                                                 !null_terminated as Bool);\n-\n-        let gsym = token::gensym(\"str\");\n-        let sym = format!(\"str{}\", gsym.0);\n+        let sym = cx.generate_local_symbol_name(\"str\");\n         let g = declare::define_global(cx, &sym[..], val_ty(sc)).unwrap_or_else(||{\n             bug!(\"symbol `{}` is already defined\", sym);\n         });"}, {"sha": "0dc10aa7759ea8bee754ed1f9f792ec61735ee60", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7da61975f168ff91c55233f489923fa1acd47e9/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7da61975f168ff91c55233f489923fa1acd47e9/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=e7da61975f168ff91c55233f489923fa1acd47e9", "patch": "@@ -30,7 +30,6 @@ use rustc::hir;\n use std::ffi::{CStr, CString};\n use syntax::ast;\n use syntax::attr;\n-use syntax::parse::token;\n \n pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef {\n     unsafe {\n@@ -44,10 +43,7 @@ pub fn addr_of_mut(ccx: &CrateContext,\n                    kind: &str)\n                     -> ValueRef {\n     unsafe {\n-        // FIXME: this totally needs a better name generation scheme, perhaps a simple global\n-        // counter? Also most other uses of gensym in trans.\n-        let gsym = token::gensym(\"_\");\n-        let name = format!(\"{}{}\", kind, gsym.0);\n+        let name = ccx.generate_local_symbol_name(kind);\n         let gv = declare::define_global(ccx, &name[..], val_ty(cv)).unwrap_or_else(||{\n             bug!(\"symbol `{}` is already defined\", name);\n         });"}, {"sha": "2a72d42296d19b733c05fb300a967af1d43cb598", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7da61975f168ff91c55233f489923fa1acd47e9/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7da61975f168ff91c55233f489923fa1acd47e9/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=e7da61975f168ff91c55233f489923fa1acd47e9", "patch": "@@ -166,6 +166,9 @@ pub struct LocalCrateContext<'tcx> {\n     type_of_depth: Cell<usize>,\n \n     symbol_map: Rc<SymbolMap<'tcx>>,\n+\n+    /// A counter that is used for generating local symbol names\n+    local_gen_sym_counter: Cell<usize>,\n }\n \n // Implement DepTrackingMapConfig for `trait_cache`\n@@ -688,6 +691,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 n_llvm_insns: Cell::new(0),\n                 type_of_depth: Cell::new(0),\n                 symbol_map: symbol_map,\n+                local_gen_sym_counter: Cell::new(0),\n             };\n \n             let (int_type, opaque_vec_type, str_slice_ty, mut local_ccx) = {\n@@ -1021,6 +1025,16 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     pub fn empty_substs_for_def_id(&self, item_def_id: DefId) -> &'tcx Substs<'tcx> {\n         self.shared().empty_substs_for_def_id(item_def_id)\n     }\n+\n+    /// Generate a new symbol name with the given prefix. This symbol name must\n+    /// only be used for definitions with `internal` or `private` linkage.\n+    pub fn generate_local_symbol_name(&self, prefix: &str) -> String {\n+        let idx = self.local().local_gen_sym_counter.get();\n+        self.local().local_gen_sym_counter.set(idx + 1);\n+        // Include a '.' character, so there can be no accidental conflicts with\n+        // user defined names\n+        format!(\"{}.{}\", prefix, idx)\n+    }\n }\n \n pub struct TypeOfDepthLock<'a, 'tcx: 'a>(&'a LocalCrateContext<'tcx>);"}, {"sha": "33b4221b73338b454f993ab62a4f1a3c8f2f23e7", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7da61975f168ff91c55233f489923fa1acd47e9/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7da61975f168ff91c55233f489923fa1acd47e9/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=e7da61975f168ff91c55233f489923fa1acd47e9", "patch": "@@ -19,12 +19,12 @@\n // CHECK: @STATIC = {{.*}}, align 4\n \n // This checks the constants from inline_enum_const\n-// CHECK: @ref{{[0-9]+}} = {{.*}}, align 2\n+// CHECK: @ref.{{[0-9]+}} = {{.*}}, align 2\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used\n-// CHECK: [[LOW_HIGH:@ref[0-9]+]] = {{.*}}, align 4\n-// CHECK: [[LOW_HIGH_REF:@const[0-9]+]] = {{.*}} [[LOW_HIGH]]\n+// CHECK: [[LOW_HIGH:@ref.[0-9]+]] = {{.*}}, align 4\n+// CHECK: [[LOW_HIGH_REF:@const.[0-9]+]] = {{.*}} [[LOW_HIGH]]\n \n #[derive(Copy, Clone)]\n "}, {"sha": "1c117cf0c9e62b18b81d113f233a6d76c6022aab", "filename": "src/test/run-make/symbols-are-reasonable/Makefile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7da61975f168ff91c55233f489923fa1acd47e9/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e7da61975f168ff91c55233f489923fa1acd47e9/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile?ref=e7da61975f168ff91c55233f489923fa1acd47e9", "patch": "@@ -1,7 +1,7 @@\n -include ../tools.mk\n \n # check that the compile generated symbols for strings, binaries,\n-# vtables, etc. have semisane names (e.g. `str1234`); it's relatively\n+# vtables, etc. have semisane names (e.g. `str.1234`); it's relatively\n # easy to accidentally modify the compiler internals to make them\n # become things like `str\"str\"(1234)`.\n \n@@ -10,6 +10,6 @@ OUT=$(TMPDIR)/lib.s\n all:\n \t$(RUSTC) lib.rs --emit=asm --crate-type=staticlib\n \t# just check for symbol declarations with the names we're expecting.\n-\tgrep 'str[0-9][0-9]*:' $(OUT)\n-\tgrep 'byte_str[0-9][0-9]*:' $(OUT)\n-\tgrep 'vtable[0-9][0-9]*' $(OUT)\n+\tgrep 'str.[0-9][0-9]*:' $(OUT)\n+\tgrep 'byte_str.[0-9][0-9]*:' $(OUT)\n+\tgrep 'vtable.[0-9][0-9]*' $(OUT)"}]}