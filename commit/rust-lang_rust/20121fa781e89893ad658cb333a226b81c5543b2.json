{"sha": "20121fa781e89893ad658cb333a226b81c5543b2", "node_id": "C_kwDOAAsO6NoAKDIwMTIxZmE3ODFlODk4OTNhZDY1OGNiMzMzYTIyNmI4MWM1NTQzYjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-23T17:17:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-12T15:18:39Z"}, "message": "Point out a single arg if we have a single arg incompatibility", "tree": {"sha": "c7e57b3f245d631d6500420cd1a893f076bcd457", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7e57b3f245d631d6500420cd1a893f076bcd457"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20121fa781e89893ad658cb333a226b81c5543b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20121fa781e89893ad658cb333a226b81c5543b2", "html_url": "https://github.com/rust-lang/rust/commit/20121fa781e89893ad658cb333a226b81c5543b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20121fa781e89893ad658cb333a226b81c5543b2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569788e47ee3595c9c6f0e332844d982b3e991c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/569788e47ee3595c9c6f0e332844d982b3e991c2", "html_url": "https://github.com/rust-lang/rust/commit/569788e47ee3595c9c6f0e332844d982b3e991c2"}], "stats": {"total": 188, "additions": 130, "deletions": 58}, "files": [{"sha": "afd22094e500ce03e92db0f2206ab6541fe17eb8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -440,30 +440,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_expr: &hir::Expr<'tcx>,\n     ) {\n         // Next, let's construct the error\n-        let (error_span, full_call_span, ctor_of) = match &call_expr.kind {\n+        let (error_span, full_call_span, ctor_of, is_method) = match &call_expr.kind {\n             hir::ExprKind::Call(\n                 hir::Expr { hir_id, span, kind: hir::ExprKind::Path(qpath), .. },\n                 _,\n             ) => {\n                 if let Res::Def(DefKind::Ctor(of, _), _) =\n                     self.typeck_results.borrow().qpath_res(qpath, *hir_id)\n                 {\n-                    (call_span, *span, Some(of))\n+                    (call_span, *span, Some(of), false)\n                 } else {\n-                    (call_span, *span, None)\n+                    (call_span, *span, None, false)\n                 }\n             }\n-            hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, None),\n+            hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, None, false),\n             hir::ExprKind::MethodCall(path_segment, _, span) => {\n                 let ident_span = path_segment.ident.span;\n                 let ident_span = if let Some(args) = path_segment.args {\n                     ident_span.with_hi(args.span_ext.hi())\n                 } else {\n                     ident_span\n                 };\n-                (\n-                    *span, ident_span, None, // methods are never ctors\n-                )\n+                // methods are never ctors\n+                (*span, ident_span, None, true)\n             }\n             k => span_bug!(call_span, \"checking argument types on a non-call: `{:?}`\", k),\n         };\n@@ -659,7 +658,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             Applicability::MachineApplicable,\n                         );\n                     };\n-                    self.label_fn_like(&mut err, fn_def_id, callee_ty);\n+                    self.label_fn_like(&mut err, fn_def_id, callee_ty, Some(mismatch_idx), is_method);\n                     err.emit();\n                     return;\n                 }\n@@ -701,16 +700,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         errors.drain_filter(|error| {\n-                let Error::Invalid(provided_idx, expected_idx, Compatibility::Incompatible(error)) = error else { return false };\n+                let Error::Invalid(provided_idx, expected_idx, Compatibility::Incompatible(Some(e))) = error else { return false };\n                 let (provided_ty, provided_span) = provided_arg_tys[*provided_idx];\n                 let (expected_ty, _) = formal_and_expected_inputs[*expected_idx];\n                 let cause = &self.misc(provided_span);\n                 let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n-                if let Some(e) = error {\n-                    if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n-                        self.report_and_explain_type_error(trace, e).emit();\n-                        return true;\n-                    }\n+                if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n+                    self.report_and_explain_type_error(trace, e).emit();\n+                    return true;\n                 }\n                 false\n             });\n@@ -749,7 +746,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 format!(\"arguments to this {} are incorrect\", call_name),\n             );\n             // Call out where the function is defined\n-            self.label_fn_like(&mut err, fn_def_id, callee_ty);\n+            self.label_fn_like(&mut err, fn_def_id, callee_ty, Some(expected_idx.as_usize()), is_method);\n             err.emit();\n             return;\n         }\n@@ -1031,7 +1028,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         // Call out where the function is defined\n-        self.label_fn_like(&mut err, fn_def_id, callee_ty);\n+        self.label_fn_like(&mut err, fn_def_id, callee_ty, None, is_method);\n \n         // And add a suggestion block for all of the parameters\n         let suggestion_text = match suggestion_text {\n@@ -1781,6 +1778,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         callable_def_id: Option<DefId>,\n         callee_ty: Option<Ty<'tcx>>,\n+        // A specific argument should be labeled, instead of all of them\n+        expected_idx: Option<usize>,\n+        is_method: bool,\n     ) {\n         let Some(mut def_id) = callable_def_id else {\n             return;\n@@ -1881,10 +1881,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .get_if_local(def_id)\n                 .and_then(|node| node.body_id())\n                 .into_iter()\n-                .flat_map(|id| self.tcx.hir().body(id).params);\n+                .flat_map(|id| self.tcx.hir().body(id).params)\n+                .skip(if is_method { 1 } else { 0 });\n \n-            for param in params {\n-                spans.push_span_label(param.span, \"\");\n+            for (idx, param) in params.into_iter().enumerate() {\n+                if let Some(expected_idx) = expected_idx {\n+                    if idx == expected_idx {\n+                        spans.push_span_label(param.span, \"\");\n+                    }\n+                } else {\n+                    spans.push_span_label(param.span, \"\");\n+                }\n             }\n \n             let def_kind = self.tcx.def_kind(def_id);"}, {"sha": "303f0869578535b96d33c2a39cfefbcca30e72a7", "filename": "src/test/ui/argument-suggestions/invalid_arguments.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -24,7 +24,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:6:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n-   |    ^^^^^^^^^^^^ -------  -------\n+   |    ^^^^^^^^^^^^          -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:17:16\n@@ -38,7 +38,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:6:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n-   |    ^^^^^^^^^^^^ -------  -------\n+   |    ^^^^^^^^^^^^ -------\n \n error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:18:3\n@@ -66,7 +66,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:7:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: f32) {}\n-   |    ^^^^^^^^^^^^ -------  -------\n+   |    ^^^^^^^^^^^^          -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:20:16\n@@ -80,7 +80,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:7:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: f32) {}\n-   |    ^^^^^^^^^^^^ -------  -------\n+   |    ^^^^^^^^^^^^ -------\n \n error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:21:3\n@@ -108,7 +108,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n    |\n LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^ -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:25:21\n@@ -122,7 +122,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n    |\n LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^          -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:26:26\n@@ -136,7 +136,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n    |\n LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^                   --------\n \n error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:28:3\n@@ -207,7 +207,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n    |\n LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^^^ -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:35:23\n@@ -221,7 +221,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n    |\n LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^^^          -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:36:26\n@@ -235,7 +235,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n    |\n LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^^^                   --------\n \n error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:38:3"}, {"sha": "7ec56afae1ce993e43d68e1b74b61da19f87bd03", "filename": "src/test/ui/argument-suggestions/too-long.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.rs?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -0,0 +1,41 @@\n+struct Qux;\n+\n+impl Qux {\n+    fn foo(\n+        &self,\n+        a: i32,\n+        b: i32,\n+        c: i32,\n+        d: i32,\n+        e: i32,\n+        f: i32,\n+        g: i32,\n+        h: i32,\n+        i: i32,\n+        j: i32,\n+        k: i32,\n+        l: i32,\n+    ) {\n+    }\n+}\n+\n+fn what(\n+    qux: &Qux,\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: &i32,\n+    g: i32,\n+    h: i32,\n+    i: i32,\n+    j: i32,\n+    k: i32,\n+    l: i32,\n+) {\n+    qux.foo(a, b, c, d, e, f, g, h, i, j, k, l);\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "bd430194c5edf6ec57b7f41fa34d243bf3ff4ca2", "filename": "src/test/ui/argument-suggestions/too-long.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/too-long.rs:37:28\n+   |\n+LL |     qux.foo(a, b, c, d, e, f, g, h, i, j, k, l);\n+   |         ---                ^ expected `i32`, found `&i32`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+note: associated function defined here\n+  --> $DIR/too-long.rs:4:8\n+   |\n+LL |     fn foo(\n+   |        ^^^\n+...\n+LL |         f: i32,\n+   |         ------\n+help: consider dereferencing the borrow\n+   |\n+LL |     qux.foo(a, b, c, d, e, *f, g, h, i, j, k, l);\n+   |                            +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e761c6c62a6cf43c549b4da0d70b4cff84605167", "filename": "src/test/ui/associated-types/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -10,7 +10,7 @@ note: function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:25:4\n    |\n LL | fn dent<C:Car>(c: C, color: C::Color) { c.chip_paint(color) }\n-   |    ^^^^        ----  ---------------\n+   |    ^^^^              ---------------\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n@@ -24,7 +24,7 @@ note: function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:25:4\n    |\n LL | fn dent<C:Car>(c: C, color: C::Color) { c.chip_paint(color) }\n-   |    ^^^^        ----  ---------------\n+   |    ^^^^              ---------------\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n@@ -38,7 +38,7 @@ note: associated function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:12:8\n    |\n LL |     fn chip_paint(&self, c: Self::Color) { }\n-   |        ^^^^^^^^^^ -----  --------------\n+   |        ^^^^^^^^^^        --------------\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n@@ -52,7 +52,7 @@ note: associated function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:12:8\n    |\n LL |     fn chip_paint(&self, c: Self::Color) { }\n-   |        ^^^^^^^^^^ -----  --------------\n+   |        ^^^^^^^^^^        --------------\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c37d469890c08689134f3beadbd3a8ddd17e561b", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -10,7 +10,7 @@ note: function defined here\n   --> $DIR/associated-types-path-2.rs:13:8\n    |\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   |        ^^         ----  -------\n+   |        ^^               -------\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     f1(2i32, 4u32);"}, {"sha": "2494c3feb2a89206e5feff16ebf644aacdcb5e55", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -42,7 +42,7 @@ note: function defined here\n   --> $DIR/generator-desc.rs:8:4\n    |\n LL | fn fun<F: Future<Output = ()>>(f1: F, f2: F) {}\n-   |    ^^^                         -----  -----\n+   |    ^^^                                -----\n \n error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:14:26\n@@ -67,7 +67,7 @@ note: function defined here\n   --> $DIR/generator-desc.rs:8:4\n    |\n LL | fn fun<F: Future<Output = ()>>(f1: F, f2: F) {}\n-   |    ^^^                         -----  -----\n+   |    ^^^                                -----\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5cbdef218311416f5ed1669d6a3cb44cbb15d9d1", "filename": "src/test/ui/coercion/coerce-reborrow-multi-arg-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -12,7 +12,7 @@ note: function defined here\n   --> $DIR/coerce-reborrow-multi-arg-fail.rs:1:4\n    |\n LL | fn test<T>(_a: T, _b: T) {}\n-   |    ^^^^    -----  -----\n+   |    ^^^^           -----\n \n error: aborting due to previous error\n "}, {"sha": "1207dc7e7a2ff4415da00c5e039b3e4b16418d39", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -12,7 +12,7 @@ note: function defined here\n   --> $DIR/coerce-to-bang.rs:3:4\n    |\n LL | fn foo(x: usize, y: !, z: usize) { }\n-   |    ^^^ --------  ----  --------\n+   |    ^^^           ----\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:18:13\n@@ -28,7 +28,7 @@ note: function defined here\n   --> $DIR/coerce-to-bang.rs:3:4\n    |\n LL | fn foo(x: usize, y: !, z: usize) { }\n-   |    ^^^ --------  ----  --------\n+   |    ^^^           ----\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:26:12\n@@ -44,7 +44,7 @@ note: function defined here\n   --> $DIR/coerce-to-bang.rs:3:4\n    |\n LL | fn foo(x: usize, y: !, z: usize) { }\n-   |    ^^^ --------  ----  --------\n+   |    ^^^           ----\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:36:12\n@@ -60,7 +60,7 @@ note: function defined here\n   --> $DIR/coerce-to-bang.rs:3:4\n    |\n LL | fn foo(x: usize, y: !, z: usize) { }\n-   |    ^^^ --------  ----  --------\n+   |    ^^^           ----\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:45:12\n@@ -76,7 +76,7 @@ note: function defined here\n   --> $DIR/coerce-to-bang.rs:3:4\n    |\n LL | fn foo(x: usize, y: !, z: usize) { }\n-   |    ^^^ --------  ----  --------\n+   |    ^^^           ----\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:50:21"}, {"sha": "f03a47d5c2c75c4727ba65d9685265b190159a0f", "filename": "src/test/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -15,7 +15,7 @@ note: function defined here\n   --> $DIR/fn-item-type.rs:7:4\n    |\n LL | fn eq<T>(x: T, y: T) { }\n-   |    ^^    ----  ----\n+   |    ^^          ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:22:19\n@@ -34,7 +34,7 @@ note: function defined here\n   --> $DIR/fn-item-type.rs:7:4\n    |\n LL | fn eq<T>(x: T, y: T) { }\n-   |    ^^    ----  ----\n+   |    ^^          ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:29:23\n@@ -53,7 +53,7 @@ note: function defined here\n   --> $DIR/fn-item-type.rs:7:4\n    |\n LL | fn eq<T>(x: T, y: T) { }\n-   |    ^^    ----  ----\n+   |    ^^          ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:38:26\n@@ -72,7 +72,7 @@ note: function defined here\n   --> $DIR/fn-item-type.rs:7:4\n    |\n LL | fn eq<T>(x: T, y: T) { }\n-   |    ^^    ----  ----\n+   |    ^^          ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:45:19\n@@ -90,7 +90,7 @@ note: function defined here\n   --> $DIR/fn-item-type.rs:7:4\n    |\n LL | fn eq<T>(x: T, y: T) { }\n-   |    ^^    ----  ----\n+   |    ^^          ----\n \n error: aborting due to 5 previous errors\n "}, {"sha": "15b2bbeb7c29526b1bfb1a223ff465cf227dbca0", "filename": "src/test/ui/issues/issue-11374.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -14,7 +14,7 @@ note: associated function defined here\n   --> $DIR/issue-11374.rs:13:12\n    |\n LL |     pub fn read_to(&mut self, vec: &mut [u8]) {\n-   |            ^^^^^^^ ---------  --------------\n+   |            ^^^^^^^            --------------\n \n error: aborting due to previous error\n "}, {"sha": "e9b49c89bf162d519745cd1bbeadc824ac449e8d", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -8,7 +8,7 @@ note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:5:8\n    |\n LL |     fn zero(self) -> Foo { self }\n-   |        ^^^^ ----\n+   |        ^^^^\n help: remove the extra argument\n    |\n LL |     x.zero()\n@@ -24,7 +24,7 @@ note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:6:8\n    |\n LL |     fn one(self, _: isize) -> Foo { self }\n-   |        ^^^ ----  --------\n+   |        ^^^       --------\n help: provide the argument\n    |\n LL |      .one(/* isize */)\n@@ -40,7 +40,7 @@ note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:7:8\n    |\n LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n-   |        ^^^ ----  --------  --------\n+   |        ^^^       --------  --------\n help: provide the argument\n    |\n LL |      .two(0, /* isize */);\n@@ -80,7 +80,7 @@ note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:8:8\n    |\n LL |     fn three<T>(self, _: T, _: T, _: T) -> Foo { self }\n-   |        ^^^^^    ----  ----  ----  ----\n+   |        ^^^^^          ----  ----  ----\n help: provide the arguments\n    |\n LL |     y.three::<usize>(/* usize */, /* usize */, /* usize */);"}, {"sha": "28a911d0c5bfa2f45264f36f69c77948843a4485", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -78,7 +78,7 @@ note: function defined here\n   --> $DIR/issue-34264.rs:3:4\n    |\n LL | fn bar(x, y: usize) {}\n-   |    ^^^ -  --------\n+   |    ^^^    --------\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:10:5"}, {"sha": "d2afd277ecf79edd74633d9f74da968c2e2e4816", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -72,7 +72,7 @@ note: associated function defined here\n   --> $DIR/missing-unit-argument.rs:6:8\n    |\n LL |     fn baz(self, (): ()) { }\n-   |        ^^^ ----  ------\n+   |        ^^^       ------\n help: provide the argument\n    |\n LL |     S.baz(());\n@@ -88,7 +88,7 @@ note: associated function defined here\n   --> $DIR/missing-unit-argument.rs:7:8\n    |\n LL |     fn generic<T>(self, _: T) { }\n-   |        ^^^^^^^    ----  ----\n+   |        ^^^^^^^          ----\n help: provide the argument\n    |\n LL |     S.generic::<()>(());"}, {"sha": "d58f1e2d9e59c47a03c75a359f4ae7c8098d8e1f", "filename": "src/test/ui/traits/multidispatch-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -10,7 +10,7 @@ note: function defined here\n   --> $DIR/multidispatch-bad.rs:13:4\n    |\n LL | fn test<T,U>(_: T, _: U)\n-   |    ^^^^      ----  ----\n+   |    ^^^^            ----\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     test(22i32, 44u32);"}, {"sha": "7029d298d71e276b670de443d15171106e47ceab", "filename": "src/test/ui/tuple/add-tuple-within-arguments.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20121fa781e89893ad658cb333a226b81c5543b2/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr?ref=20121fa781e89893ad658cb333a226b81c5543b2", "patch": "@@ -8,7 +8,7 @@ note: function defined here\n   --> $DIR/add-tuple-within-arguments.rs:1:4\n    |\n LL | fn foo(s: &str, a: (i32, i32), s2: &str) {}\n-   |    ^^^ -------  -------------  --------\n+   |    ^^^          -------------\n help: wrap these arguments in parentheses to construct a tuple\n    |\n LL |     foo(\"hi\", (1, 2), \"hi\");\n@@ -28,7 +28,7 @@ note: function defined here\n   --> $DIR/add-tuple-within-arguments.rs:3:4\n    |\n LL | fn bar(s: &str, a: (&str,), s2: &str) {}\n-   |    ^^^ -------  ----------  --------\n+   |    ^^^          ----------\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     bar(\"hi\", (\"hi\",), \"hi\");"}]}