{"sha": "3c9b30e65876090b2e1e4944dac24d7e9e182d1f", "node_id": "C_kwDOAAsO6NoAKDNjOWIzMGU2NTg3NjA5MGIyZTFlNDk0NGRhYzI0ZDdlOWUxODJkMWY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-25T18:36:15Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-25T19:00:08Z"}, "message": "Define all clauses as dummy_with_span as the usages are all equivalent", "tree": {"sha": "21589ffe6ae02db9c053a81673c14bf5044c9762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21589ffe6ae02db9c053a81673c14bf5044c9762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c9b30e65876090b2e1e4944dac24d7e9e182d1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmOBEMEACgkQgTGiTgx5\n768QyxAAjVgkn/O7rDHaXiw+OrshOZbvbCWVA21/SSGO18Isi/vS56iTEc4GFPz8\nke+MUYj2HFjIJuBIqPPIAohGr4HOzm4SVi5i2iDKlrooqRtPV4MeeAroAbmr6anI\n5GZDI5FY3YvBphcMXV+NrOeyjGbsnj+OCsvy+yiNcRylLkyIvAyT4gYgg5WfIlHY\n5bhqRD1soPUlxRg91vJEXOtoaKEGCpj3tH0gabo5vhsa8wE8DkeakIqSFKO06WSt\nG8BBJrhaFVY33VhYy52LcYJSIuJdPDxHc4+Bg5oOi03LHh3AtObPJhU90Gj6ee/+\n+uEJiM6A3TD3+KXP7C2xyBBMVIo6YvdzC4kZD2rqmDKJyecYpAGSMP2F62BlU2uc\nQiuhq4fYQvNAC0Zm5ZHmJ5rltrhBpc5Z4AGq3urqQWweR1fkCbUNnmGVk0sYCH3p\nf55/YQFUauAVQN15qWXannij3+ObE19Zp+k62xxFhaOwZhHKwxId7/FQSBKTGE1M\ni5JX7uaBfi/NEmJij6PtG56WLdZlp7Tb5CfSzjF0aTm9wG7rkRBpmb1Ojbbh8EBk\n+Ks5KVLF73bDoNJLnF4qbTG+iGL3UPGbecCjdJmSjbdSdd5xx/0K/iksdehrYqqS\nTXT1bZndT7e09l8W04Ll8cTaB24d7GBUE/5KBBgqUwQnh2+sZ00=\n=0s06\n-----END PGP SIGNATURE-----", "payload": "tree 21589ffe6ae02db9c053a81673c14bf5044c9762\nparent aaa1db63ce2b92240272a1db303fa292d58373ee\nauthor Santiago Pastorino <spastorino@gmail.com> 1669401375 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669402808 -0300\n\nDefine all clauses as dummy_with_span as the usages are all equivalent\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9b30e65876090b2e1e4944dac24d7e9e182d1f", "html_url": "https://github.com/rust-lang/rust/commit/3c9b30e65876090b2e1e4944dac24d7e9e182d1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c9b30e65876090b2e1e4944dac24d7e9e182d1f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa1db63ce2b92240272a1db303fa292d58373ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa1db63ce2b92240272a1db303fa292d58373ee", "html_url": "https://github.com/rust-lang/rust/commit/aaa1db63ce2b92240272a1db303fa292d58373ee"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "c6c072ea3d2bdb0e5c249a022914d22d14d36939", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c9b30e65876090b2e1e4944dac24d7e9e182d1f/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9b30e65876090b2e1e4944dac24d7e9e182d1f/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=3c9b30e65876090b2e1e4944dac24d7e9e182d1f", "patch": "@@ -59,12 +59,13 @@ pub fn type_op_ascribe_user_type_with_span<'tcx>(\n \n     let UserSubsts { user_self_ty, substs } = user_substs;\n     let tcx = ocx.infcx.tcx;\n+    let cause = ObligationCause::dummy_with_span(span);\n \n     let ty = tcx.bound_type_of(def_id).subst(tcx, substs);\n-    let ty = ocx.normalize(ObligationCause::misc(span, hir::CRATE_HIR_ID), param_env, ty);\n+    let ty = ocx.normalize(cause.clone(), param_env, ty);\n     debug!(\"relate_type_and_user_type: ty of def-id is {:?}\", ty);\n \n-    ocx.eq(&ObligationCause::dummy_with_span(span), param_env, mir_ty, ty)?;\n+    ocx.eq(&cause, param_env, mir_ty, ty)?;\n \n     // Prove the predicates coming along with `def_id`.\n     //\n@@ -73,8 +74,6 @@ pub fn type_op_ascribe_user_type_with_span<'tcx>(\n     // outlives\" error messages.\n     let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);\n \n-    let cause = ObligationCause::dummy_with_span(span);\n-\n     debug!(?instantiated_predicates);\n     for (instantiated_predicate, predicate_span) in\n         zip(instantiated_predicates.predicates, instantiated_predicates.spans)\n@@ -93,10 +92,9 @@ pub fn type_op_ascribe_user_type_with_span<'tcx>(\n \n     if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {\n         let impl_self_ty = tcx.bound_type_of(impl_def_id).subst(tcx, substs);\n-        let impl_self_ty =\n-            ocx.normalize(ObligationCause::misc(span, hir::CRATE_HIR_ID), param_env, impl_self_ty);\n+        let impl_self_ty = ocx.normalize(cause.clone(), param_env, impl_self_ty);\n \n-        ocx.eq(&ObligationCause::dummy_with_span(span), param_env, self_ty, impl_self_ty)?;\n+        ocx.eq(&cause, param_env, self_ty, impl_self_ty)?;\n \n         let predicate: Predicate<'tcx> =\n             ty::Binder::dummy(ty::PredicateKind::WellFormed(impl_self_ty.into())).to_predicate(tcx);"}]}