{"sha": "587ca17cdb2b6dc202389a59e2b236dd63c711a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4N2NhMTdjZGIyYjZkYzIwMjM4OWE1OWUyYjIzNmRkNjNjNzExYTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-03T20:26:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-03T20:26:16Z"}, "message": "Rollup merge of #69665 - tmiasko:new-pass-manager-thin-lto-opt, r=nikic\n\nInvoke OptimizerLastEPCallbacks in PreLinkThinLTO\n\nThe default ThinLTO pre-link pipeline does not include optimizer last\nextension points. Thus, when using the new LLVM pass manager & ThinLTO\n& sanitizers on any opt-level different from zero, the sanitizer\nfunction passes would be omitted from the pipeline.\n\nAdd optimizer last extensions points manually to the pipeline, but guard\nregistration with stage check in the case this behaviour changes in the\nfuture.", "tree": {"sha": "5c22fea42afdf5b355a065f336d2df20be80ad73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c22fea42afdf5b355a065f336d2df20be80ad73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/587ca17cdb2b6dc202389a59e2b236dd63c711a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeXr1oCRBK7hj4Ov3rIwAAdHIIAGJ56CErqIIyZP7wEOXPoWm5\nuBRbbL9pdwzgY2zcNEZ2MSLi9f3x85yPDteyriP+zaMV/hM51N1HeB5ak1MOgg08\nIx1PJg51NBJiLAqh+AHseyDlMd1I6jRahauU5UeTMv58DO9ujziSgIb1qkd5emnU\nFHJh5cLKACclHjfG+gYrIK7IAt0wrFDa4vgNHCQDA5LfKUMf+7zkYgbP5OBFsV8q\nfNGSNdwn7jVs4GoufC5hyxAZxf68EMWDQD52mus1SvrtsilKMV+vZdvTNgboWxh5\n+L2Ohcmi6yIHTWcCBPvj/a51jYDMTEeB59uGH5JoREtA1524kdlyuUn/2OE7i7g=\n=hN7p\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c22fea42afdf5b355a065f336d2df20be80ad73\nparent 099cd7f402dd2ccec7f35c13c585c650243d018c\nparent b0e288d9f1d8b0f4038bb955a68308b892d54ea3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1583267176 +0100\ncommitter GitHub <noreply@github.com> 1583267176 +0100\n\nRollup merge of #69665 - tmiasko:new-pass-manager-thin-lto-opt, r=nikic\n\nInvoke OptimizerLastEPCallbacks in PreLinkThinLTO\n\nThe default ThinLTO pre-link pipeline does not include optimizer last\nextension points. Thus, when using the new LLVM pass manager & ThinLTO\n& sanitizers on any opt-level different from zero, the sanitizer\nfunction passes would be omitted from the pipeline.\n\nAdd optimizer last extensions points manually to the pipeline, but guard\nregistration with stage check in the case this behaviour changes in the\nfuture.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/587ca17cdb2b6dc202389a59e2b236dd63c711a3", "html_url": "https://github.com/rust-lang/rust/commit/587ca17cdb2b6dc202389a59e2b236dd63c711a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/587ca17cdb2b6dc202389a59e2b236dd63c711a3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099cd7f402dd2ccec7f35c13c585c650243d018c", "url": "https://api.github.com/repos/rust-lang/rust/commits/099cd7f402dd2ccec7f35c13c585c650243d018c", "html_url": "https://github.com/rust-lang/rust/commit/099cd7f402dd2ccec7f35c13c585c650243d018c"}, {"sha": "b0e288d9f1d8b0f4038bb955a68308b892d54ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e288d9f1d8b0f4038bb955a68308b892d54ea3", "html_url": "https://github.com/rust-lang/rust/commit/b0e288d9f1d8b0f4038bb955a68308b892d54ea3"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "90d24d20737db3b1fb7bafeae97f61acd9b1e70d", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/587ca17cdb2b6dc202389a59e2b236dd63c711a3/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/587ca17cdb2b6dc202389a59e2b236dd63c711a3/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=587ca17cdb2b6dc202389a59e2b236dd63c711a3", "patch": "@@ -868,15 +868,23 @@ LLVMRustOptimizeWithNewPassManager(\n     } else {\n       for (const auto &C : PipelineStartEPCallbacks)\n         PB.registerPipelineStartEPCallback(C);\n-      for (const auto &C : OptimizerLastEPCallbacks)\n-        PB.registerOptimizerLastEPCallback(C);\n+      if (OptStage != LLVMRustOptStage::PreLinkThinLTO) {\n+        for (const auto &C : OptimizerLastEPCallbacks)\n+          PB.registerOptimizerLastEPCallback(C);\n+      }\n \n       switch (OptStage) {\n       case LLVMRustOptStage::PreLinkNoLTO:\n         MPM = PB.buildPerModuleDefaultPipeline(OptLevel, DebugPassManager);\n         break;\n       case LLVMRustOptStage::PreLinkThinLTO:\n         MPM = PB.buildThinLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);\n+        if (!OptimizerLastEPCallbacks.empty()) {\n+          FunctionPassManager FPM(DebugPassManager);\n+          for (const auto &C : OptimizerLastEPCallbacks)\n+            C(FPM, OptLevel);\n+          MPM.addPass(createModuleToFunctionPassAdaptor(std::move(FPM)));\n+        }\n         break;\n       case LLVMRustOptStage::PreLinkFatLTO:\n         MPM = PB.buildLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);"}, {"sha": "05b4ab5653cc843e897838430312200385829ccb", "filename": "src/test/codegen/sanitizer-recover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/587ca17cdb2b6dc202389a59e2b236dd63c711a3/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587ca17cdb2b6dc202389a59e2b236dd63c711a3/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs?ref=587ca17cdb2b6dc202389a59e2b236dd63c711a3", "patch": "@@ -14,8 +14,8 @@\n //[MSAN-RECOVER-LTO] compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory -C lto=fat\n //\n // MSAN-NOT:         @__msan_keep_going\n-// MSAN-RECOVER:     @__msan_keep_going = weak_odr {{.*}} constant i32 1\n-// MSAN-RECOVER-LTO: @__msan_keep_going = weak_odr {{.*}} constant i32 1\n+// MSAN-RECOVER:     @__msan_keep_going = weak_odr {{.*}}constant i32 1\n+// MSAN-RECOVER-LTO: @__msan_keep_going = weak_odr {{.*}}constant i32 1\n \n // ASAN-LABEL: define i32 @penguin(\n // ASAN:         call void @__asan_report_load4(i64 %0)"}, {"sha": "61d5d51cfd2483720c81de0fdf36235b153501f4", "filename": "src/test/ui/sanitize/new-llvm-pass-manager-thin-lto.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/587ca17cdb2b6dc202389a59e2b236dd63c711a3/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587ca17cdb2b6dc202389a59e2b236dd63c711a3/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs?ref=587ca17cdb2b6dc202389a59e2b236dd63c711a3", "patch": "@@ -0,0 +1,27 @@\n+// Regression test for sanitizer function instrumentation passes not\n+// being run when compiling with new LLVM pass manager and ThinLTO.\n+// Note: The issue occured only on non-zero opt-level.\n+//\n+// min-llvm-version 9.0\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// no-prefer-dynamic\n+// revisions: opt0 opt1\n+// compile-flags: -Znew-llvm-pass-manager=yes -Zsanitizer=address -Clto=thin\n+//[opt0]compile-flags: -Copt-level=0\n+//[opt1]compile-flags: -Copt-level=1\n+// run-fail\n+// error-pattern: ERROR: AddressSanitizer: stack-use-after-scope\n+\n+static mut P: *mut usize = std::ptr::null_mut();\n+\n+fn main() {\n+    unsafe {\n+        {\n+            let mut x = 0;\n+            P = &mut x;\n+        }\n+        std::ptr::write_volatile(P, 123);\n+    }\n+}"}, {"sha": "6c478f7e29da479e2078f3c995ca2c0c45710372", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/587ca17cdb2b6dc202389a59e2b236dd63c711a3/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587ca17cdb2b6dc202389a59e2b236dd63c711a3/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=587ca17cdb2b6dc202389a59e2b236dd63c711a3", "patch": "@@ -109,6 +109,24 @@ fn no_system_llvm() {\n     assert!(parse_rs(&config, \"// no-system-llvm\").ignore);\n }\n \n+#[test]\n+fn llvm_version() {\n+    let mut config = config();\n+\n+    config.llvm_version = Some(\"8.1.2-rust\".to_owned());\n+    assert!(parse_rs(&config, \"// min-llvm-version 9.0\").ignore);\n+\n+    config.llvm_version = Some(\"9.0.1-rust-1.43.0-dev\".to_owned());\n+    assert!(parse_rs(&config, \"// min-llvm-version 9.2\").ignore);\n+\n+    config.llvm_version = Some(\"9.3.1-rust-1.43.0-dev\".to_owned());\n+    assert!(!parse_rs(&config, \"// min-llvm-version 9.2\").ignore);\n+\n+    // FIXME.\n+    // config.llvm_version = Some(\"10.0.0-rust\".to_owned());\n+    // assert!(!parse_rs(&config, \"// min-llvm-version 9.0\").ignore);\n+}\n+\n #[test]\n fn ignore_target() {\n     let mut config = config();"}]}