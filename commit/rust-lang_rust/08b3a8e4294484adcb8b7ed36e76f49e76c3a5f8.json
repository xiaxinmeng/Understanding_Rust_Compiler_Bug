{"sha": "08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YjNhOGU0Mjk0NDg0YWRjYjhiN2VkMzZlNzZmNDllNzZjM2E1Zjg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-27T13:52:17Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-08-01T15:44:53Z"}, "message": "Regression tests.", "tree": {"sha": "35cd325fc8ab844afd1f77dd2ce08c4d7d7718c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35cd325fc8ab844afd1f77dd2ce08c4d7d7718c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8", "html_url": "https://github.com/rust-lang/rust/commit/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88284baa0e3a8e8f9274b4c5a76803d84c9533a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/88284baa0e3a8e8f9274b4c5a76803d84c9533a9", "html_url": "https://github.com/rust-lang/rust/commit/88284baa0e3a8e8f9274b4c5a76803d84c9533a9"}], "stats": {"total": 344, "additions": 344, "deletions": 0}, "files": [{"sha": "e5326bb315ea392720faf822e4215479adb0c7d6", "filename": "src/test/ui/issue-45696-long-live-borrows-in-boxes.rs", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/src%2Ftest%2Fui%2Fissue-45696-long-live-borrows-in-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/src%2Ftest%2Fui%2Fissue-45696-long-live-borrows-in-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45696-long-live-borrows-in-boxes.rs?ref=08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8", "patch": "@@ -0,0 +1,103 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rust-lang/rust#45696: This test is checking that we can return\n+// mutable borrows owned by boxes even when the boxes are dropped.\n+//\n+// We will explicitly test AST-borrowck, NLL, and migration modes;\n+// thus we will also skip the automated compare-mode=nll.\n+\n+// revisions: ast nll migrate\n+// ignore-compare-mode-nll\n+\n+#![cfg_attr(nll, feature(nll))]\n+//[migrate]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// run-pass\n+\n+type Boxed<'a, 'b> = Box<(&'a mut u32, &'b mut u32)>;\n+\n+fn return_borrow_from_dropped_box<'a>(x: Boxed<'a, '_>) -> &'a mut u32 {\n+    &mut *x.0\n+}\n+\n+fn return_borrow_from_dropped_tupled_box<'a>(x: (Boxed<'a, '_>, &mut u32)) -> &'a mut u32 {\n+    &mut *(x.0).0\n+}\n+\n+fn basic_tests() {\n+    let mut x = 2;\n+    let mut y = 3;\n+    let mut z = 4;\n+    *return_borrow_from_dropped_box(Box::new((&mut x, &mut y))) += 10;\n+    assert_eq!((x, y, z), (12, 3, 4));\n+    *return_borrow_from_dropped_tupled_box((Box::new((&mut x, &mut y)), &mut z)) += 10;\n+    assert_eq!((x, y, z), (22, 3, 4));\n+}\n+\n+// These scribbling tests have been transcribed from\n+// issue-45696-scribble-on-boxed-borrow.rs\n+//\n+// In the context of that file, these tests are meant to show cases\n+// that should be *accepted* by the compiler, so here we are actually\n+// checking that the code we get when they are compiled matches our\n+// expectations.\n+\n+struct Scribble<'a>(&'a mut u32);\n+\n+impl<'a> Drop for Scribble<'a> { fn drop(&mut self) { *self.0 = 42; } }\n+\n+// this is okay, in both AST-borrowck and NLL: The `Scribble` here *has*\n+// to strictly outlive `'a`\n+fn borrowed_scribble<'a>(s: &'a mut Scribble) -> &'a mut u32 {\n+    &mut *s.0\n+}\n+\n+// this, by analogy to previous case, is also okay.\n+fn boxed_borrowed_scribble<'a>(s: Box<&'a mut Scribble>) -> &'a mut u32 {\n+    &mut *(*s).0\n+}\n+\n+// this, by analogy to previous case, is also okay.\n+fn boxed_boxed_borrowed_scribble<'a>(s: Box<Box<&'a mut Scribble>>) -> &'a mut u32 {\n+    &mut *(**s).0\n+}\n+\n+fn scribbling_tests() {\n+    let mut x = 1;\n+    {\n+        let mut long_lived = Scribble(&mut x);\n+        *borrowed_scribble(&mut long_lived) += 10;\n+        assert_eq!(*long_lived.0, 11);\n+        // (Scribble dtor runs here, after `&mut`-borrow above ends)\n+    }\n+    assert_eq!(x, 42);\n+    x = 1;\n+    {\n+        let mut long_lived = Scribble(&mut x);\n+        *boxed_borrowed_scribble(Box::new(&mut long_lived)) += 10;\n+        assert_eq!(*long_lived.0, 11);\n+        // (Scribble dtor runs here, after `&mut`-borrow above ends)\n+    }\n+    assert_eq!(x, 42);\n+    x = 1;\n+    {\n+        let mut long_lived = Scribble(&mut x);\n+        *boxed_boxed_borrowed_scribble(Box::new(Box::new(&mut long_lived))) += 10;\n+        assert_eq!(*long_lived.0, 11);\n+        // (Scribble dtor runs here, after `&mut`-borrow above ends)\n+    }\n+    assert_eq!(x, 42);\n+}\n+\n+fn main() {\n+    basic_tests();\n+    scribbling_tests();\n+}"}, {"sha": "6172a5e35a8d9520e1ff84941f0070da53f287d6", "filename": "src/test/ui/issue-45696-scribble-on-boxed-borrow.ast.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.ast.stderr?ref=08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:89:1\n+   |\n+LL | / fn main() { //[ast]~ ERROR compilation successful\n+LL | |      //[migrate]~^ ERROR compilation successful\n+LL | |     let mut x = 1;\n+LL | |     {\n+...  |\n+LL | |     *boxed_boxed_scribbled(Box::new(Box::new(Scribble(&mut x)))) += 10;\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "da0dfac2d18b10eae0c023ebd114fac3e35c854b", "filename": "src/test/ui/issue-45696-scribble-on-boxed-borrow.migrate.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr?ref=08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8", "patch": "@@ -0,0 +1,69 @@\n+warning[E0597]: `*s.0` does not live long enough\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n+   |\n+LL |     &mut *s.0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n+   |     ^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `*s.0` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 62:14...\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:62:14\n+   |\n+LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n+   |              ^^\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+warning[E0597]: `*s.0` does not live long enough\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n+   |\n+LL |     &mut *(*s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n+   |     ^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `*s.0` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 72:20...\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:72:20\n+   |\n+LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n+   |                    ^^\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+warning[E0597]: `*s.0` does not live long enough\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:83:5\n+   |\n+LL |     &mut *(**s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n+   |     ^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `*s.0` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 82:26...\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:82:26\n+   |\n+LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n+   |                          ^^\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+error: compilation successful\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:89:1\n+   |\n+LL | / fn main() { //[ast]~ ERROR compilation successful\n+LL | |      //[migrate]~^ ERROR compilation successful\n+LL | |     let mut x = 1;\n+LL | |     {\n+...  |\n+LL | |     *boxed_boxed_scribbled(Box::new(Box::new(Scribble(&mut x)))) += 10;\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "09cbc2f9451291ad6eda4cfebdeb782490878421", "filename": "src/test/ui/issue-45696-scribble-on-boxed-borrow.nll.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr?ref=08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8", "patch": "@@ -0,0 +1,48 @@\n+error[E0597]: `*s.0` does not live long enough\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n+   |\n+LL |     &mut *s.0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n+   |     ^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `*s.0` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 62:14...\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:62:14\n+   |\n+LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n+   |              ^^\n+\n+error[E0597]: `*s.0` does not live long enough\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n+   |\n+LL |     &mut *(*s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n+   |     ^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `*s.0` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 72:20...\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:72:20\n+   |\n+LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n+   |                    ^^\n+\n+error[E0597]: `*s.0` does not live long enough\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:83:5\n+   |\n+LL |     &mut *(**s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n+   |     ^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `*s.0` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 82:26...\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:82:26\n+   |\n+LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n+   |                          ^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "5a4874249e2f44a5b5fd8780eb66de0ae4253455", "filename": "src/test/ui/issue-45696-scribble-on-boxed-borrow.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45696-scribble-on-boxed-borrow.rs?ref=08b3a8e4294484adcb8b7ed36e76f49e76c3a5f8", "patch": "@@ -0,0 +1,110 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rust-lang/rust#45696: This test is checking that we *cannot* return\n+// mutable borrows that would be scribbled over by destructors before\n+// the return occurs.\n+//\n+// We will explicitly test AST-borrowck, NLL, and migration modes;\n+// thus we will also skip the automated compare-mode=nll.\n+\n+// revisions: ast nll migrate\n+// ignore-compare-mode-nll\n+\n+// This test is going to pass in the ast and migrate revisions,\n+// because the AST-borrowck accepted this code in the past (see notes\n+// below). So we use `#[rustc_error]` to keep the outcome as an error\n+// in all scenarios, and rely on the stderr files to show what the\n+// actual behavior is. (See rust-lang/rust#49855.)\n+#![feature(rustc_attrs)]\n+\n+#![cfg_attr(nll, feature(nll))]\n+//[migrate]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+struct Scribble<'a>(&'a mut u32);\n+\n+impl<'a> Drop for Scribble<'a> { fn drop(&mut self) { *self.0 = 42; } }\n+\n+// this is okay, in both AST-borrowck and NLL: The `Scribble` here *has*\n+// to strictly outlive `'a`\n+fn borrowed_scribble<'a>(s: &'a mut Scribble) -> &'a mut u32 {\n+    &mut *s.0\n+}\n+\n+// this, by analogy to previous case, is also okay.\n+fn boxed_borrowed_scribble<'a>(s: Box<&'a mut Scribble>) -> &'a mut u32 {\n+    &mut *(*s).0\n+}\n+\n+// this, by analogy to previous case, is also okay.\n+fn boxed_boxed_borrowed_scribble<'a>(s: Box<Box<&'a mut Scribble>>) -> &'a mut u32 {\n+    &mut *(**s).0\n+}\n+\n+// this is not okay: in between the time that we take the mutable\n+// borrow and the caller receives it as a return value, the drop of\n+// `s` will scribble on it, violating our aliasing guarantees.\n+//\n+// * (Maybe in the future the two-phase borrows system will be\n+//   extended to support this case. But for now, it is an error in\n+//   NLL, even with two-phase borrows.)\n+//\n+// In any case, the AST-borrowck was not smart enough to know that\n+// this should be an error. (Which is perhaps the essence of why\n+// rust-lang/rust#45696 arose in the first place.)\n+fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n+    &mut *s.0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n+    //[migrate]~^ WARNING `*s.0` does not live long enough [E0597]\n+    //[migrate]~| WARNING This error has been downgraded to a warning for backwards compatibility\n+}\n+\n+// This, by analogy to previous case, is *also* not okay.\n+//\n+// (But again, AST-borrowck was not smart enogh to know that this\n+// should be an error.)\n+fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n+    &mut *(*s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n+    //[migrate]~^ WARNING `*s.0` does not live long enough [E0597]\n+    //[migrate]~| WARNING This error has been downgraded to a warning for backwards compatibility\n+}\n+\n+// This, by analogy to previous case, is *also* not okay.\n+//\n+// (But again, AST-borrowck was not smart enogh to know that this\n+// should be an error.)\n+fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n+    &mut *(**s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n+    //[migrate]~^ WARNING `*s.0` does not live long enough [E0597]\n+    //[migrate]~| WARNING This error has been downgraded to a warning for backwards compatibility\n+}\n+\n+#[rustc_error]\n+fn main() { //[ast]~ ERROR compilation successful\n+     //[migrate]~^ ERROR compilation successful\n+    let mut x = 1;\n+    {\n+        let mut long_lived = Scribble(&mut x);\n+        *borrowed_scribble(&mut long_lived) += 10;\n+        // (Scribble dtor runs here, after `&mut`-borrow above ends)\n+    }\n+    {\n+        let mut long_lived = Scribble(&mut x);\n+        *boxed_borrowed_scribble(Box::new(&mut long_lived)) += 10;\n+        // (Scribble dtor runs here, after `&mut`-borrow above ends)\n+    }\n+    {\n+        let mut long_lived = Scribble(&mut x);\n+        *boxed_boxed_borrowed_scribble(Box::new(Box::new(&mut long_lived))) += 10;\n+        // (Scribble dtor runs here, after `&mut`-borrow above ends)\n+    }\n+    *scribbled(Scribble(&mut x)) += 10;\n+    *boxed_scribbled(Box::new(Scribble(&mut x))) += 10;\n+    *boxed_boxed_scribbled(Box::new(Box::new(Scribble(&mut x)))) += 10;\n+}"}]}