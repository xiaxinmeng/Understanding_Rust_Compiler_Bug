{"sha": "70f36e04547cc3b19ef4987adb4dc250250ad762", "node_id": "C_kwDOAAsO6NoAKDcwZjM2ZTA0NTQ3Y2MzYjE5ZWY0OTg3YWRiNGRjMjUwMjUwYWQ3NjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-15T11:16:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-15T11:16:57Z"}, "message": "Auto merge of #7824 - dswij:unnecessary_sort_by, r=llogiq\n\n`unnecessary_sort_by` checks if argument implements `Ord` trait\n\ncloses #7822\n\nchangelog: [`unnecessary_sort_by`] now checks if argument implements `Ord` trait", "tree": {"sha": "af5c719a5b28d4ad064d040ed94b0acbca475511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5c719a5b28d4ad064d040ed94b0acbca475511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f36e04547cc3b19ef4987adb4dc250250ad762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f36e04547cc3b19ef4987adb4dc250250ad762", "html_url": "https://github.com/rust-lang/rust/commit/70f36e04547cc3b19ef4987adb4dc250250ad762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f36e04547cc3b19ef4987adb4dc250250ad762/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4996e17b1450fb837ee72db739266187c486c03d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4996e17b1450fb837ee72db739266187c486c03d", "html_url": "https://github.com/rust-lang/rust/commit/4996e17b1450fb837ee72db739266187c486c03d"}, {"sha": "e4ac4c2e1a162eedd2f5ec1737fc3260a97268a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ac4c2e1a162eedd2f5ec1737fc3260a97268a2", "html_url": "https://github.com/rust-lang/rust/commit/e4ac4c2e1a162eedd2f5ec1737fc3260a97268a2"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "26b56e0f2f316c69b7e53e9f5f50020f25290c3b", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/70f36e04547cc3b19ef4987adb4dc250250ad762/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f36e04547cc3b19ef4987adb4dc250250ad762/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=70f36e04547cc3b19ef4987adb4dc250250ad762", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n@@ -193,10 +193,15 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n             let vec_name = Sugg::hir(cx, &args[0], \"..\").to_string();\n             let unstable = name == \"sort_unstable_by\";\n \n+            if_chain! {\n             if let ExprKind::Path(QPath::Resolved(_, Path {\n                 segments: [PathSegment { ident: left_name, .. }], ..\n-            })) = &left_expr.kind {\n-                if left_name == left_ident {\n+            })) = &left_expr.kind;\n+            if left_name == left_ident;\n+            if cx.tcx.get_diagnostic_item(sym::Ord).map_or(false, |id| {\n+                implements_trait(cx, cx.typeck_results().expr_ty(left_expr), id, &[])\n+            });\n+                then {\n                     return Some(LintTrigger::Sort(SortDetection { vec_name, unstable }));\n                 }\n             }"}, {"sha": "d806d620b176a3efd702bef0b00b0fb4755ce1dd", "filename": "tests/ui/unnecessary_sort_by.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70f36e04547cc3b19ef4987adb4dc250250ad762/tests%2Fui%2Funnecessary_sort_by.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f36e04547cc3b19ef4987adb4dc250250ad762/tests%2Fui%2Funnecessary_sort_by.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.fixed?ref=70f36e04547cc3b19ef4987adb4dc250250ad762", "patch": "@@ -2,6 +2,7 @@\n \n #![allow(clippy::stable_sort_primitive)]\n \n+use std::cell::Ref;\n use std::cmp::Reverse;\n \n fn unnecessary_sort_by() {\n@@ -33,6 +34,10 @@ fn unnecessary_sort_by() {\n     // `Reverse(b)` would borrow in the following cases, don't lint\n     vec.sort_by(|a, b| b.cmp(a));\n     vec.sort_unstable_by(|a, b| b.cmp(a));\n+\n+    // No warning if element does not implement `Ord`\n+    let mut vec: Vec<Ref<usize>> = Vec::new();\n+    vec.sort_unstable_by(|a, b| a.cmp(b));\n }\n \n // Do not suggest returning a reference to the closure parameter of `Vec::sort_by_key`"}, {"sha": "6ee9c3af455dfbd39c98264d2f9f386b5bc8a85b", "filename": "tests/ui/unnecessary_sort_by.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70f36e04547cc3b19ef4987adb4dc250250ad762/tests%2Fui%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f36e04547cc3b19ef4987adb4dc250250ad762/tests%2Fui%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.rs?ref=70f36e04547cc3b19ef4987adb4dc250250ad762", "patch": "@@ -2,6 +2,7 @@\n \n #![allow(clippy::stable_sort_primitive)]\n \n+use std::cell::Ref;\n use std::cmp::Reverse;\n \n fn unnecessary_sort_by() {\n@@ -33,6 +34,10 @@ fn unnecessary_sort_by() {\n     // `Reverse(b)` would borrow in the following cases, don't lint\n     vec.sort_by(|a, b| b.cmp(a));\n     vec.sort_unstable_by(|a, b| b.cmp(a));\n+\n+    // No warning if element does not implement `Ord`\n+    let mut vec: Vec<Ref<usize>> = Vec::new();\n+    vec.sort_unstable_by(|a, b| a.cmp(b));\n }\n \n // Do not suggest returning a reference to the closure parameter of `Vec::sort_by_key`"}, {"sha": "ca9641e880316533eda97e7f6904efccc7297380", "filename": "tests/ui/unnecessary_sort_by.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70f36e04547cc3b19ef4987adb4dc250250ad762/tests%2Fui%2Funnecessary_sort_by.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f36e04547cc3b19ef4987adb4dc250250ad762/tests%2Fui%2Funnecessary_sort_by.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.stderr?ref=70f36e04547cc3b19ef4987adb4dc250250ad762", "patch": "@@ -1,73 +1,73 @@\n error: use Vec::sort here instead\n-  --> $DIR/unnecessary_sort_by.rs:14:5\n+  --> $DIR/unnecessary_sort_by.rs:15:5\n    |\n LL |     vec.sort_by(|a, b| a.cmp(b));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort()`\n    |\n    = note: `-D clippy::unnecessary-sort-by` implied by `-D warnings`\n \n error: use Vec::sort here instead\n-  --> $DIR/unnecessary_sort_by.rs:15:5\n+  --> $DIR/unnecessary_sort_by.rs:16:5\n    |\n LL |     vec.sort_unstable_by(|a, b| a.cmp(b));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:16:5\n+  --> $DIR/unnecessary_sort_by.rs:17:5\n    |\n LL |     vec.sort_by(|a, b| (a + 5).abs().cmp(&(b + 5).abs()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|a| (a + 5).abs())`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:17:5\n+  --> $DIR/unnecessary_sort_by.rs:18:5\n    |\n LL |     vec.sort_unstable_by(|a, b| id(-a).cmp(&id(-b)));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_unstable_by_key(|a| id(-a))`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:20:5\n+  --> $DIR/unnecessary_sort_by.rs:21:5\n    |\n LL |     vec.sort_by(|a, b| (b + 5).abs().cmp(&(a + 5).abs()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|b| Reverse((b + 5).abs()))`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:21:5\n+  --> $DIR/unnecessary_sort_by.rs:22:5\n    |\n LL |     vec.sort_unstable_by(|a, b| id(-b).cmp(&id(-a)));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_unstable_by_key(|b| Reverse(id(-b)))`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:31:5\n+  --> $DIR/unnecessary_sort_by.rs:32:5\n    |\n LL |     vec.sort_by(|a, b| (***a).abs().cmp(&(***b).abs()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|a| (***a).abs())`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:32:5\n+  --> $DIR/unnecessary_sort_by.rs:33:5\n    |\n LL |     vec.sort_unstable_by(|a, b| (***a).abs().cmp(&(***b).abs()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_unstable_by_key(|a| (***a).abs())`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:88:9\n+  --> $DIR/unnecessary_sort_by.rs:93:9\n    |\n LL |         args.sort_by(|a, b| a.name().cmp(&b.name()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `args.sort_by_key(|a| a.name())`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:89:9\n+  --> $DIR/unnecessary_sort_by.rs:94:9\n    |\n LL |         args.sort_unstable_by(|a, b| a.name().cmp(&b.name()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `args.sort_unstable_by_key(|a| a.name())`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:91:9\n+  --> $DIR/unnecessary_sort_by.rs:96:9\n    |\n LL |         args.sort_by(|a, b| b.name().cmp(&a.name()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `args.sort_by_key(|b| Reverse(b.name()))`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:92:9\n+  --> $DIR/unnecessary_sort_by.rs:97:9\n    |\n LL |         args.sort_unstable_by(|a, b| b.name().cmp(&a.name()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `args.sort_unstable_by_key(|b| Reverse(b.name()))`"}]}