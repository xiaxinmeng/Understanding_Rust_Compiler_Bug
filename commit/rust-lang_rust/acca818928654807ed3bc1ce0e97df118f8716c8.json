{"sha": "acca818928654807ed3bc1ce0e97df118f8716c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjY2E4MTg5Mjg2NTQ4MDdlZDNiYzFjZTBlOTdkZjExOGY4NzE2Yzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-13T20:21:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-13T20:21:40Z"}, "message": "Auto merge of #83064 - cjgillot:fhash, r=jackh726\n\nTweaks to stable hashing", "tree": {"sha": "0a50dda57d881b308a60a6efe840a1d9518e1277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a50dda57d881b308a60a6efe840a1d9518e1277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acca818928654807ed3bc1ce0e97df118f8716c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acca818928654807ed3bc1ce0e97df118f8716c8", "html_url": "https://github.com/rust-lang/rust/commit/acca818928654807ed3bc1ce0e97df118f8716c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acca818928654807ed3bc1ce0e97df118f8716c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7e1dc158c3de232750b568163f6941a184ee8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e1dc158c3de232750b568163f6941a184ee8be", "html_url": "https://github.com/rust-lang/rust/commit/e7e1dc158c3de232750b568163f6941a184ee8be"}, {"sha": "34e92bbf65aa28a8192dfc0ca1edaaee95d52b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e92bbf65aa28a8192dfc0ca1edaaee95d52b37", "html_url": "https://github.com/rust-lang/rust/commit/34e92bbf65aa28a8192dfc0ca1edaaee95d52b37"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "ff28784a1dc4264b3c9f37fa95419028e16550bd", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acca818928654807ed3bc1ce0e97df118f8716c8/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acca818928654807ed3bc1ce0e97df118f8716c8/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=acca818928654807ed3bc1ce0e97df118f8716c8", "patch": "@@ -35,6 +35,7 @@ impl StableHasher {\n         StableHasher { state: SipHasher128::new_with_keys(0, 0) }\n     }\n \n+    #[inline]\n     pub fn finish<W: StableHasherResult>(self) -> W {\n         W::finish(self)\n     }"}, {"sha": "30569f20793fbae6431915bd63d0c43074690f39", "filename": "compiler/rustc_macros/src/hash_stable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acca818928654807ed3bc1ce0e97df118f8716c8/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acca818928654807ed3bc1ce0e97df118f8716c8/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs?ref=acca818928654807ed3bc1ce0e97df118f8716c8", "patch": "@@ -74,6 +74,7 @@ pub fn hash_stable_generic_derive(mut s: synstructure::Structure<'_>) -> proc_ma\n     s.bound_impl(\n         quote!(::rustc_data_structures::stable_hasher::HashStable<__CTX>),\n         quote! {\n+            #[inline]\n             fn hash_stable(\n                 &self,\n                 __hcx: &mut __CTX,\n@@ -119,6 +120,7 @@ pub fn hash_stable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::To\n             >\n         ),\n         quote! {\n+            #[inline]\n             fn hash_stable(\n                 &self,\n                 __hcx: &mut ::rustc_middle::ich::StableHashingContext<'__ctx>,"}, {"sha": "cf29d21927c0d68ac617ef5893d4cdc5a1628568", "filename": "compiler/rustc_middle/src/ich/hcx.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/acca818928654807ed3bc1ce0e97df118f8716c8/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acca818928654807ed3bc1ce0e97df118f8716c8/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs?ref=acca818928654807ed3bc1ce0e97df118f8716c8", "patch": "@@ -250,13 +250,6 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n         &CACHE\n     }\n \n-    fn byte_pos_to_line_and_col(\n-        &mut self,\n-        byte: BytePos,\n-    ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {\n-        self.source_map().byte_pos_to_line_and_col(byte)\n-    }\n-\n     fn span_data_to_lines_and_cols(\n         &mut self,\n         span: &SpanData,"}, {"sha": "e67a4ca8fb26b2326d94474d455953626c5839fa", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acca818928654807ed3bc1ce0e97df118f8716c8/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acca818928654807ed3bc1ce0e97df118f8716c8/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=acca818928654807ed3bc1ce0e97df118f8716c8", "patch": "@@ -1362,12 +1362,6 @@ fn update_disambiguator(expn_id: ExpnId) {\n         fn hash_spans(&self) -> bool {\n             true\n         }\n-        fn byte_pos_to_line_and_col(\n-            &mut self,\n-            byte: BytePos,\n-        ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {\n-            self.caching_source_map.byte_pos_to_line_and_col(byte)\n-        }\n         fn span_data_to_lines_and_cols(\n             &mut self,\n             span: &crate::SpanData,"}, {"sha": "6030c8a86d9f983f20391e6f9a32aa937251cce0", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/acca818928654807ed3bc1ce0e97df118f8716c8/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acca818928654807ed3bc1ce0e97df118f8716c8/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=acca818928654807ed3bc1ce0e97df118f8716c8", "patch": "@@ -1874,10 +1874,6 @@ pub trait HashStableContext {\n     fn expn_id_cache() -> &'static LocalKey<ExpnIdCache>;\n     fn hash_crate_num(&mut self, _: CrateNum, hasher: &mut StableHasher);\n     fn hash_spans(&self) -> bool;\n-    fn byte_pos_to_line_and_col(\n-        &mut self,\n-        byte: BytePos,\n-    ) -> Option<(Lrc<SourceFile>, usize, BytePos)>;\n     fn span_data_to_lines_and_cols(\n         &mut self,\n         span: &SpanData,\n@@ -1906,9 +1902,10 @@ where\n             return;\n         }\n \n+        self.ctxt().hash_stable(ctx, hasher);\n+\n         if self.is_dummy() {\n             Hash::hash(&TAG_INVALID_SPAN, hasher);\n-            self.ctxt().hash_stable(ctx, hasher);\n             return;\n         }\n \n@@ -1921,7 +1918,6 @@ where\n             Some(pos) => pos,\n             None => {\n                 Hash::hash(&TAG_INVALID_SPAN, hasher);\n-                span.ctxt.hash_stable(ctx, hasher);\n                 return;\n             }\n         };\n@@ -1948,7 +1944,6 @@ where\n         let len = (span.hi - span.lo).0;\n         Hash::hash(&col_line, hasher);\n         Hash::hash(&len, hasher);\n-        span.ctxt.hash_stable(ctx, hasher);\n     }\n }\n "}, {"sha": "dcdf019266016ca305552baed3fb4680911a26d1", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acca818928654807ed3bc1ce0e97df118f8716c8/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acca818928654807ed3bc1ce0e97df118f8716c8/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=acca818928654807ed3bc1ce0e97df118f8716c8", "patch": "@@ -548,10 +548,12 @@ mod impls {\n         ($(($ty:ident, $meth:ident),)*) => {$(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl Hash for $ty {\n+                #[inline]\n                 fn hash<H: Hasher>(&self, state: &mut H) {\n                     state.$meth(*self)\n                 }\n \n+                #[inline]\n                 fn hash_slice<H: Hasher>(data: &[$ty], state: &mut H) {\n                     let newlen = data.len() * mem::size_of::<$ty>();\n                     let ptr = data.as_ptr() as *const u8;\n@@ -582,20 +584,23 @@ mod impls {\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Hash for bool {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             state.write_u8(*self as u8)\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Hash for char {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             state.write_u32(*self as u32)\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Hash for str {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             state.write(self.as_bytes());\n             state.write_u8(0xff)\n@@ -604,6 +609,7 @@ mod impls {\n \n     #[stable(feature = \"never_hash\", since = \"1.29.0\")]\n     impl Hash for ! {\n+        #[inline]\n         fn hash<H: Hasher>(&self, _: &mut H) {\n             *self\n         }\n@@ -613,6 +619,7 @@ mod impls {\n         () => (\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl Hash for () {\n+                #[inline]\n                 fn hash<H: Hasher>(&self, _state: &mut H) {}\n             }\n         );\n@@ -621,6 +628,7 @@ mod impls {\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<$($name: Hash),+> Hash for ($($name,)+) where last_type!($($name,)+): ?Sized {\n                 #[allow(non_snake_case)]\n+                #[inline]\n                 fn hash<S: Hasher>(&self, state: &mut S) {\n                     let ($(ref $name,)+) = *self;\n                     $($name.hash(state);)+\n@@ -650,6 +658,7 @@ mod impls {\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: Hash> Hash for [T] {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             self.len().hash(state);\n             Hash::hash_slice(self, state)\n@@ -658,20 +667,23 @@ mod impls {\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized + Hash> Hash for &T {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             (**self).hash(state);\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized + Hash> Hash for &mut T {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             (**self).hash(state);\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized> Hash for *const T {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             #[cfg(not(bootstrap))]\n             {\n@@ -701,6 +713,7 @@ mod impls {\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized> Hash for *mut T {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             #[cfg(not(bootstrap))]\n             {"}]}