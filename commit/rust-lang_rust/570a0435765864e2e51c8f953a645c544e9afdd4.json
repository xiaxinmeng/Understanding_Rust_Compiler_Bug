{"sha": "570a0435765864e2e51c8f953a645c544e9afdd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MGEwNDM1NzY1ODY0ZTJlNTFjOGY5NTNhNjQ1YzU0NGU5YWZkZDQ=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-19T21:53:34Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-26T20:12:52Z"}, "message": "Convert 15 diagnostics to have error codes (E0380-E0394).\n\nAlso adds explanations for E0380 and E0381.", "tree": {"sha": "ba86164ba932dde82621e2b1708e8cceb31c31be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba86164ba932dde82621e2b1708e8cceb31c31be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/570a0435765864e2e51c8f953a645c544e9afdd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/570a0435765864e2e51c8f953a645c544e9afdd4", "html_url": "https://github.com/rust-lang/rust/commit/570a0435765864e2e51c8f953a645c544e9afdd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/570a0435765864e2e51c8f953a645c544e9afdd4/comments", "author": null, "committer": null, "parents": [{"sha": "fbef978fd7c406ce306c7fa060e86125b99b9498", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbef978fd7c406ce306c7fa060e86125b99b9498", "html_url": "https://github.com/rust-lang/rust/commit/fbef978fd7c406ce306c7fa060e86125b99b9498"}], "stats": {"total": 160, "additions": 94, "deletions": 66}, "files": [{"sha": "9d459027bf5cdfa7360281ceb1c78337ea0b74e9", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=570a0435765864e2e51c8f953a645c544e9afdd4", "patch": "@@ -891,5 +891,7 @@ register_diagnostics! {\n     E0315, // cannot invoke closure outside of its lifetime\n     E0316, // nested quantification of lifetimes\n     E0370, // discriminant overflow\n-    E0378  // method calls limited to constant inherent methods\n+    E0378, // method calls limited to constant inherent methods\n+    E0394  // cannot refer to other statics by value, use the address-of\n+           // operator or a constant instead\n }"}, {"sha": "c54517e00173b21f7fccd46c9b7b7f68139d4ede", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=570a0435765864e2e51c8f953a645c544e9afdd4", "patch": "@@ -762,9 +762,9 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n                         // statics cannot be consumed by value at any time, that would imply\n                         // that they're an initializer (what a const is for) or kept in sync\n                         // over time (not feasible), so deny it outright.\n-                        self.tcx.sess.span_err(consume_span,\n-                            \"cannot refer to other statics by value, use the \\\n-                             address-of operator or a constant instead\");\n+                        span_err!(self.tcx.sess, consume_span, E0394,\n+                                  \"cannot refer to other statics by value, use the \\\n+                                   address-of operator or a constant instead\");\n                     }\n                     break;\n                 }"}, {"sha": "472aff6625bc70fbdee887760ce878ca2e12a545", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 33, "deletions": 38, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=570a0435765864e2e51c8f953a645c544e9afdd4", "patch": "@@ -603,11 +603,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n         let (ol, moved_lp_msg) = match the_move.kind {\n             move_data::Declared => {\n-                self.tcx.sess.span_err(\n-                    use_span,\n-                    &format!(\"{} of possibly uninitialized variable: `{}`\",\n-                            verb,\n-                            self.loan_path_to_string(lp)));\n+                span_err!(\n+                    self.tcx.sess, use_span, E0381,\n+                    \"{} of possibly uninitialized variable: `{}`\",\n+                    verb,\n+                    self.loan_path_to_string(lp));\n+\n                 (self.loan_path_to_string(moved_lp),\n                  String::new())\n             }\n@@ -644,12 +645,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 let msg = if !has_fork && partial { \"partially \" }\n                           else if has_fork && !has_common { \"collaterally \"}\n                           else { \"\" };\n-                self.tcx.sess.span_err(\n-                    use_span,\n-                    &format!(\"{} of {}moved value: `{}`\",\n-                            verb,\n-                            msg,\n-                            nl));\n+                span_err!(\n+                    self.tcx.sess, use_span, E0382,\n+                    \"{} of {}moved value: `{}`\",\n+                    verb, msg, nl);\n                 (ol, moved_lp_msg)\n             }\n         };\n@@ -762,23 +761,21 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             &self,\n             span: Span,\n             lp: &LoanPath<'tcx>) {\n-        self.tcx\n-            .sess\n-            .span_err(span,\n-                      &format!(\"partial reinitialization of uninitialized \\\n-                               structure `{}`\",\n-                               self.loan_path_to_string(lp)));\n+        span_err!(\n+            self.tcx.sess, span, E0383,\n+            \"partial reinitialization of uninitialized structure `{}`\",\n+            self.loan_path_to_string(lp));\n     }\n \n     pub fn report_reassigned_immutable_variable(&self,\n                                                 span: Span,\n                                                 lp: &LoanPath<'tcx>,\n                                                 assign:\n                                                 &move_data::Assignment) {\n-        self.tcx.sess.span_err(\n-            span,\n-            &format!(\"re-assignment of immutable variable `{}`\",\n-                    self.loan_path_to_string(lp)));\n+        span_err!(\n+            self.tcx.sess, span, E0384,\n+            \"re-assignment of immutable variable `{}`\",\n+            self.loan_path_to_string(lp));\n         self.tcx.sess.span_note(assign.span, \"prior assignment occurs here\");\n     }\n \n@@ -896,21 +893,19 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n         match cause {\n             mc::AliasableOther => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    &format!(\"{} in an aliasable location\",\n-                             prefix));\n+                span_err!(\n+                    self.tcx.sess, span, E0385,\n+                    \"{} in an aliasable location\", prefix);\n             }\n             mc::AliasableReason::UnaliasableImmutable => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    &format!(\"{} in an immutable container\",\n-                             prefix));\n+                span_err!(\n+                    self.tcx.sess, span, E0386,\n+                    \"{} in an immutable container\", prefix);\n             }\n             mc::AliasableClosure(id) => {\n-                self.tcx.sess.span_err(span,\n-                                       &format!(\"{} in a captured outer \\\n-                                                variable in an `Fn` closure\", prefix));\n+                span_err!(\n+                    self.tcx.sess, span, E0387,\n+                    \"{} in a captured outer variable in an `Fn` closure\", prefix);\n                 if let BorrowViolation(euv::ClosureCapture(_)) = kind {\n                     // The aliasability violation with closure captures can\n                     // happen for nested closures, so we know the enclosing\n@@ -925,14 +920,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n             mc::AliasableStatic(..) |\n             mc::AliasableStaticMut(..) => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    &format!(\"{} in a static location\", prefix));\n+                span_err!(\n+                    self.tcx.sess, span, E0388,\n+                    \"{} in a static location\", prefix);\n             }\n             mc::AliasableBorrowed => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    &format!(\"{} in a `&` reference\", prefix));\n+                span_err!(\n+                    self.tcx.sess, span, E0389,\n+                    \"{} in a `&` reference\", prefix);\n             }\n         }\n "}, {"sha": "3e7cfe3ee7f88aaa8bacbaf24992108d36bdc108", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=570a0435765864e2e51c8f953a645c544e9afdd4", "patch": "@@ -10,6 +10,31 @@\n \n #![allow(non_snake_case)]\n \n+register_long_diagnostics! {\n+\n+E0381: r##\"\n+It is not allowed to use or capture an uninitialized variable. For example:\n+\n+```\n+fn main() {\n+    let x: i32;\n+    let y = x; // error, use of possibly uninitialized variable\n+```\n+\n+To fix this, ensure that any declared variables are initialized before being\n+used.\n+\"##\n+\n+}\n+\n register_diagnostics! {\n-    E0373 // closure may outlive current fn, but it borrows {}, which is owned by current fn\n+    E0373, // closure may outlive current fn, but it borrows {}, which is owned by current fn\n+    E0382, // use of partially/collaterally moved value\n+    E0383, // partial reinitialization of uninitialized structure\n+    E0384, // reassignment of immutable variable\n+    E0385, // {} in an aliasable location\n+    E0386, // {} in an immutable container\n+    E0387, // {} in a captured outer variable in an `Fn` closure\n+    E0388, // {} in a static location\n+    E0389  // {} in a `&` reference\n }"}, {"sha": "90bbd1af4efd035f43aea82d0a854dd854acbe5a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=570a0435765864e2e51c8f953a645c544e9afdd4", "patch": "@@ -437,13 +437,12 @@ fn create_substs_for_ast_path<'tcx>(\n             // defaults. This will lead to an ICE if we are not\n             // careful!\n             if self_ty.is_none() && ty::type_has_self(default) {\n-                tcx.sess.span_err(\n-                    span,\n-                    &format!(\"the type parameter `{}` must be explicitly specified \\\n-                              in an object type because its default value `{}` references \\\n-                              the type `Self`\",\n-                             param.name.user_string(tcx),\n-                             default.user_string(tcx)));\n+                span_err!(tcx.sess, span, E0393,\n+                          \"the type parameter `{}` must be explicitly specified \\\n+                           in an object type because its default value `{}` references \\\n+                           the type `Self`\",\n+                          param.name.user_string(tcx),\n+                          default.user_string(tcx));\n                 substs.types.push(TypeSpace, tcx.types.err);\n             } else {\n                 // This is a default type parameter."}, {"sha": "405d43548b23af8fa9ef8e9f13c9b02dbe6e3782", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=570a0435765864e2e51c8f953a645c544e9afdd4", "patch": "@@ -124,10 +124,9 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 reject_non_type_param_bounds(ccx.tcx, item.span, &trait_predicates);\n                 if ty::trait_has_default_impl(ccx.tcx, local_def(item.id)) {\n                     if !items.is_empty() {\n-                        ccx.tcx.sess.span_err(\n-                            item.span,\n-                            \"traits with default impls (`e.g. unsafe impl Trait for ..`) must \\\n-                            have no methods or associated items\")\n+                        span_err!(ccx.tcx.sess, item.span, E0380,\n+                                  \"traits with default impls (`e.g. unsafe impl \\\n+                                  Trait for ..`) must have no methods or associated items\")\n                     }\n                 }\n             }\n@@ -353,10 +352,8 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                          span: Span,\n                          param_name: ast::Name)\n     {\n-        self.tcx().sess.span_err(\n-            span,\n-            &format!(\"parameter `{}` is never used\",\n-                     param_name.user_string(self.tcx())));\n+        span_err!(self.tcx().sess, span, E0392,\n+            \"parameter `{}` is never used\", param_name.user_string(self.tcx()));\n \n         let suggested_marker_id = self.tcx().lang_items.phantom_data();\n         match suggested_marker_id {"}, {"sha": "7dc865ef8855cb3877a07567b9cb91f24c4ab27d", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=570a0435765864e2e51c8f953a645c544e9afdd4", "patch": "@@ -48,10 +48,9 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n         match lang_def_id {\n             Some(lang_def_id) if lang_def_id == impl_def_id => { /* OK */ },\n             _ => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    &format!(\"only a single inherent implementation marked with `#[lang = \\\"{}\\\"]` \\\n-                              is allowed for the `{}` primitive\", lang, ty));\n+                span_err!(self.tcx.sess, span, E0390,\n+                          \"only a single inherent implementation marked with `#[lang = \\\"{}\\\"]` \\\n+                           is allowed for the `{}` primitive\", lang, ty);\n             }\n         }\n     }"}, {"sha": "42d1c122fba83b5cff4cb2f3128690674e9eed66", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=570a0435765864e2e51c8f953a645c544e9afdd4", "patch": "@@ -236,9 +236,8 @@ impl<'a,'tcx> CrateCtxt<'a,'tcx> {\n         assert!(!cycle.is_empty());\n         let tcx = self.tcx;\n \n-        tcx.sess.span_err(\n-            span,\n-            &format!(\"unsupported cyclic reference between types/traits detected\"));\n+        span_err!(tcx.sess, span, E0391,\n+            \"unsupported cyclic reference between types/traits detected\");\n \n         match cycle[0] {\n             AstConvRequest::GetItemTypeScheme(def_id) |"}, {"sha": "edfad77d588df1d40a394cce1cb5b98c243e3368", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570a0435765864e2e51c8f953a645c544e9afdd4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=570a0435765864e2e51c8f953a645c544e9afdd4", "patch": "@@ -1096,6 +1096,12 @@ Trait2 { ... }`) does not work if the trait is not object-safe. Please see the\n [RFC 255] for more details on object safety rules.\n \n [RFC 255]: https://github.com/rust-lang/rfcs/pull/255\n+\"##,\n+\n+E0380: r##\"\n+Default impls are only allowed for traits with no methods or associated items.\n+For more information see the [opt-in builtin traits RFC](https://github.com/rust\n+-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md).\n \"##\n \n }\n@@ -1229,5 +1235,11 @@ register_diagnostics! {\n            // between structures\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0379  // trait fns cannot be const\n+    E0379,  // trait fns cannot be const\n+    E0390, // only a single inherent implementation marked with\n+           // `#[lang = \\\"{}\\\"]` is allowed for the `{}` primitive\n+    E0391, // unsupported cyclic reference between types/traits detected\n+    E0392, // parameter `{}` is never used\n+    E0393  // the type parameter `{}` must be explicitly specified in an object\n+           // type because its default value `{}` references the type `Self`\"\n }"}]}