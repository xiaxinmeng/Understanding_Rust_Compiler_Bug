{"sha": "8093a59ffb0318ab315a6386cfe76e6a595a313e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOTNhNTlmZmIwMzE4YWIzMTVhNjM4NmNmZTc2ZTZhNTk1YTMxM2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T21:28:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T08:07:21Z"}, "message": "move gen_random to helpers", "tree": {"sha": "fdcaf544c512969d0d6a100fd0df1779be6bcb15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdcaf544c512969d0d6a100fd0df1779be6bcb15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8093a59ffb0318ab315a6386cfe76e6a595a313e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8093a59ffb0318ab315a6386cfe76e6a595a313e", "html_url": "https://github.com/rust-lang/rust/commit/8093a59ffb0318ab315a6386cfe76e6a595a313e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8093a59ffb0318ab315a6386cfe76e6a595a313e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3c3c33ebf1f2e340e992c2f23ceaa39fc4bb365", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c3c33ebf1f2e340e992c2f23ceaa39fc4bb365", "html_url": "https://github.com/rust-lang/rust/commit/b3c3c33ebf1f2e340e992c2f23ceaa39fc4bb365"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "b2be90ca999e1769d5814a7eec8de9b5c244362c", "filename": "src/helpers.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8093a59ffb0318ab315a6386cfe76e6a595a313e/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8093a59ffb0318ab315a6386cfe76e6a595a313e/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=8093a59ffb0318ab315a6386cfe76e6a595a313e", "patch": "@@ -3,6 +3,8 @@ use std::mem;\n use rustc::ty::{self, layout::{self, Size}};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n \n+use rand::RngCore;\n+\n use crate::*;\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -65,6 +67,40 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         })\n     }\n \n+    /// Generate some random bytes, and write them to `dest`.\n+    fn gen_random(\n+        &mut self,\n+        len: usize,\n+        dest: Scalar<Tag>,\n+    ) -> InterpResult<'tcx>  {\n+        if len == 0 {\n+            // Nothing to do\n+            return Ok(());\n+        }\n+        let this = self.eval_context_mut();\n+        let ptr = dest.to_ptr()?;\n+\n+        let data = match &mut this.memory_mut().extra.rng {\n+            Some(rng) => {\n+                let mut rng = rng.borrow_mut();\n+                let mut data = vec![0; len];\n+                rng.fill_bytes(&mut data);\n+                data\n+            }\n+            None => {\n+                return err!(Unimplemented(\n+                    \"miri does not support gathering system entropy in deterministic mode!\n+                    Use '-Zmiri-seed=<seed>' to enable random number generation.\n+                    WARNING: Miri does *not* generate cryptographically secure entropy -\n+                    do not use Miri to run any program that needs secure random number generation\".to_owned(),\n+                ));\n+            }\n+        };\n+        let tcx = &{this.tcx.tcx};\n+        this.memory_mut().get_mut(ptr.alloc_id)?\n+            .write_bytes(tcx, ptr, &data)\n+    }\n+\n     /// Visits the memory covered by `place`, sensitive to freezing: the 3rd parameter\n     /// will be true if this is frozen, false if this is in an `UnsafeCell`.\n     fn visit_freeze_sensitive("}, {"sha": "7ab97c87e305650c3c8f2b67e42f221f5b0515b1", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8093a59ffb0318ab315a6386cfe76e6a595a313e/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8093a59ffb0318ab315a6386cfe76e6a595a313e/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=8093a59ffb0318ab315a6386cfe76e6a595a313e", "patch": "@@ -4,8 +4,6 @@ use rustc::mir;\n use syntax::attr;\n use syntax::symbol::sym;\n \n-use rand::RngCore;\n-\n use crate::*;\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -986,37 +984,4 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         return Ok(None);\n     }\n-\n-    fn gen_random(\n-        &mut self,\n-        len: usize,\n-        dest: Scalar<Tag>,\n-    ) -> InterpResult<'tcx>  {\n-        if len == 0 {\n-            // Nothing to do\n-            return Ok(());\n-        }\n-        let this = self.eval_context_mut();\n-        let ptr = dest.to_ptr()?;\n-\n-        let data = match &mut this.memory_mut().extra.rng {\n-            Some(rng) => {\n-                let mut rng = rng.borrow_mut();\n-                let mut data = vec![0; len];\n-                rng.fill_bytes(&mut data);\n-                data\n-            }\n-            None => {\n-                return err!(Unimplemented(\n-                    \"miri does not support gathering system entropy in deterministic mode!\n-                    Use '-Zmiri-seed=<seed>' to enable random number generation.\n-                    WARNING: Miri does *not* generate cryptographically secure entropy -\n-                    do not use Miri to run any program that needs secure random number generation\".to_owned(),\n-                ));\n-            }\n-        };\n-        let tcx = &{this.tcx.tcx};\n-        this.memory_mut().get_mut(ptr.alloc_id)?\n-            .write_bytes(tcx, ptr, &data)\n-    }\n }\n\\ No newline at end of file"}]}