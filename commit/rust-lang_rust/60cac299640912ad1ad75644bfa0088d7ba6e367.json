{"sha": "60cac299640912ad1ad75644bfa0088d7ba6e367", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwY2FjMjk5NjQwOTEyYWQxYWQ3NTY0NGJmYTAwODhkN2JhNmUzNjc=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-18T21:30:23Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-18T21:30:23Z"}, "message": "Separate out the interactive cargo watch procedure", "tree": {"sha": "50aab7bd4a56995fa965ebd4b53d70506a8b9b4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50aab7bd4a56995fa965ebd4b53d70506a8b9b4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60cac299640912ad1ad75644bfa0088d7ba6e367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60cac299640912ad1ad75644bfa0088d7ba6e367", "html_url": "https://github.com/rust-lang/rust/commit/60cac299640912ad1ad75644bfa0088d7ba6e367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60cac299640912ad1ad75644bfa0088d7ba6e367/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c3cc8c95f392c523bb638d78e0217780d6e8476", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3cc8c95f392c523bb638d78e0217780d6e8476", "html_url": "https://github.com/rust-lang/rust/commit/5c3cc8c95f392c523bb638d78e0217780d6e8476"}], "stats": {"total": 134, "additions": 70, "deletions": 64}, "files": [{"sha": "285afaaf6749bcaa73ddb6009fd34efb4a59441c", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/60cac299640912ad1ad75644bfa0088d7ba6e367/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/60cac299640912ad1ad75644bfa0088d7ba6e367/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=60cac299640912ad1ad75644bfa0088d7ba6e367", "patch": "@@ -1,5 +1,8 @@\n+import { exec } from 'child_process';\n+import * as util from 'util';\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+\n import { Server } from '../server';\n \n interface RunnablesParams {\n@@ -33,7 +36,7 @@ interface CargoTaskDefinition extends vscode.TaskDefinition {\n     env?: { [key: string]: string };\n }\n \n-export function createTask(spec: Runnable): vscode.Task {\n+function createTask(spec: Runnable): vscode.Task {\n     const TASK_SOURCE = 'Rust';\n     const definition: CargoTaskDefinition = {\n         type: 'cargo',\n@@ -143,3 +146,66 @@ export const autoCargoWatchTask: vscode.Task = {\n         runOn: 2 // RunOnOptions.folderOpen\n     } as unknown) as vscode.RunOptions\n };\n+\n+/**\n+ * Interactively asks the user whether we should run `cargo check` in order to\n+ * provide inline diagnostics; the user is met with a series of dialog boxes\n+ * that, when accepted, allow us to `cargo install cargo-watch` and then run it.\n+ */\n+export async function interactivelyStartCargoWatch() {\n+    const execAsync = util.promisify(exec);\n+\n+    const watch = await vscode.window.showInformationMessage(\n+        'Start watching changes with cargo? (Executes `cargo watch`, provides inline diagnostics)',\n+        'yes',\n+        'no'\n+    );\n+    if (watch === 'no') {\n+        return;\n+    }\n+\n+    const { stderr } = await execAsync('cargo watch --version').catch(e => e);\n+    if (stderr.includes('no such subcommand: `watch`')) {\n+        const msg =\n+            'The `cargo-watch` subcommand is not installed. Install? (takes ~1-2 minutes)';\n+        const install = await vscode.window.showInformationMessage(\n+            msg,\n+            'yes',\n+            'no'\n+        );\n+        if (install === 'no') {\n+            return;\n+        }\n+\n+        const label = 'install-cargo-watch';\n+        const taskFinished = new Promise((resolve, reject) => {\n+            let disposable = vscode.tasks.onDidEndTask(({ execution }) => {\n+                if (execution.task.name === label) {\n+                    disposable.dispose();\n+                    resolve();\n+                }\n+            });\n+        });\n+\n+        vscode.tasks.executeTask(\n+            createTask({\n+                label,\n+                bin: 'cargo',\n+                args: ['install', 'cargo-watch'],\n+                env: {}\n+            })\n+        );\n+        await taskFinished;\n+        const { stderr } = await execAsync('cargo watch --version').catch(\n+            e => e\n+        );\n+        if (stderr !== '') {\n+            vscode.window.showErrorMessage(\n+                `Couldn't install \\`cargo-\\`watch: ${stderr}`\n+            );\n+            return;\n+        }\n+    }\n+\n+    vscode.tasks.executeTask(autoCargoWatchTask);\n+}"}, {"sha": "2e13c87de16d079625b579a75f146585a7564958", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 3, "deletions": 63, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/60cac299640912ad1ad75644bfa0088d7ba6e367/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/60cac299640912ad1ad75644bfa0088d7ba6e367/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=60cac299640912ad1ad75644bfa0088d7ba6e367", "patch": "@@ -1,10 +1,8 @@\n-import { exec } from 'child_process';\n-import * as util from 'util';\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n-import { autoCargoWatchTask, createTask } from './commands/runnables';\n+import { interactivelyStartCargoWatch } from './commands/runnables';\n import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import * as events from './events';\n import * as notifications from './notifications';\n@@ -122,8 +120,8 @@ export function activate(context: vscode.ExtensionContext) {\n         context.subscriptions\n     );\n \n-    // Attempts to run `cargo watch`, which provides inline diagnostics on save\n-    askToCargoWatch();\n+    // Executing `cargo watch` provides us with inline diagnostics on save\n+    interactivelyStartCargoWatch();\n \n     // Start the language server, finally!\n     Server.start(allNotifications);\n@@ -135,61 +133,3 @@ export function deactivate(): Thenable<void> {\n     }\n     return Server.client.stop();\n }\n-\n-async function askToCargoWatch() {\n-    const watch = await vscode.window.showInformationMessage(\n-        'Start watching changes with cargo? (Executes `cargo watch`, provides inline diagnostics)',\n-        'yes',\n-        'no'\n-    );\n-    if (watch === 'no') {\n-        return;\n-    }\n-\n-    const { stderr } = await util\n-        .promisify(exec)('cargo watch --version')\n-        .catch(e => e);\n-    if (stderr.includes('no such subcommand: `watch`')) {\n-        const msg =\n-            'The `cargo-watch` subcommand is not installed. Install? (takes ~1-2 minutes)';\n-        const install = await vscode.window.showInformationMessage(\n-            msg,\n-            'yes',\n-            'no'\n-        );\n-        if (install === 'no') {\n-            return;\n-        }\n-\n-        const label = 'install-cargo-watch';\n-        const taskFinished = new Promise((resolve, reject) => {\n-            let disposable = vscode.tasks.onDidEndTask(({ execution }) => {\n-                if (execution.task.name === label) {\n-                    disposable.dispose();\n-                    resolve();\n-                }\n-            });\n-        });\n-\n-        vscode.tasks.executeTask(\n-            createTask({\n-                label,\n-                bin: 'cargo',\n-                args: ['install', 'cargo-watch'],\n-                env: {}\n-            })\n-        );\n-        await taskFinished;\n-        const { stderr } = await util\n-            .promisify(exec)('cargo watch --version')\n-            .catch(e => e);\n-        if (stderr !== '') {\n-            vscode.window.showErrorMessage(\n-                `Couldn't install \\`cargo-\\`watch: ${stderr}`\n-            );\n-            return;\n-        }\n-    }\n-\n-    vscode.tasks.executeTask(autoCargoWatchTask);\n-}"}]}