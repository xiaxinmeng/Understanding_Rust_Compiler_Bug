{"sha": "fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZDc0YzhhYzlkY2Y5Y2QwZjlkYjU0MzlhMzBlNWNhZGY1ZDY1NDI=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@users.noreply.github.com", "date": "2017-02-12T18:16:11Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-02-12T18:16:11Z"}, "message": "Support field-init-shorthand (#1308)", "tree": {"sha": "817f7891034973124308dbf8d62684b5d6514bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/817f7891034973124308dbf8d62684b5d6514bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542", "html_url": "https://github.com/rust-lang/rust/commit/fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c867d067eac285201e53672dcc5e42c2065785", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c867d067eac285201e53672dcc5e42c2065785", "html_url": "https://github.com/rust-lang/rust/commit/f2c867d067eac285201e53672dcc5e42c2065785"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "2498ee653afde69d4ac3ae91c9015d552c47395f", "filename": "src/expr.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542", "patch": "@@ -1837,22 +1837,27 @@ pub fn type_annotation_separator(config: &Config) -> &str {\n \n fn rewrite_field(context: &RewriteContext, field: &ast::Field, shape: Shape) -> Option<String> {\n     let name = &field.ident.node.to_string();\n-    let separator = type_annotation_separator(context.config);\n-    let overhead = name.len() + separator.len();\n-    let expr = field.expr.rewrite(context,\n-                                  Shape::legacy(try_opt!(shape.width.checked_sub(overhead)),\n-                                                shape.indent + overhead));\n-\n-    match expr {\n-        Some(e) => Some(format!(\"{}{}{}\", name, separator, e)),\n-        None => {\n-            let expr_offset = shape.indent.block_indent(context.config);\n-            let expr = field.expr.rewrite(context,\n-                                          Shape::legacy(try_opt!(context.config\n-                                                            .max_width\n-                                                            .checked_sub(expr_offset.width())),\n-                                                        expr_offset));\n-            expr.map(|s| format!(\"{}:\\n{}{}\", name, expr_offset.to_string(&context.config), s))\n+    if field.is_shorthand {\n+        Some(name.to_string())\n+    } else {\n+        let separator = type_annotation_separator(context.config);\n+        let overhead = name.len() + separator.len();\n+        let expr = field.expr.rewrite(context,\n+                                      Shape::legacy(try_opt!(shape.width.checked_sub(overhead)),\n+                                                    shape.indent + overhead));\n+\n+        match expr {\n+            Some(e) => Some(format!(\"{}{}{}\", name, separator, e)),\n+            None => {\n+                let expr_offset = shape.indent.block_indent(context.config);\n+                let expr = field.expr\n+                    .rewrite(context,\n+                             Shape::legacy(try_opt!(context.config\n+                                               .max_width\n+                                               .checked_sub(expr_offset.width())),\n+                                           expr_offset));\n+                expr.map(|s| format!(\"{}:\\n{}{}\", name, expr_offset.to_string(&context.config), s))\n+            }\n         }\n     }\n }"}, {"sha": "c5aaf7ef8819353aeda2aa606f04cb9342d54f7b", "filename": "tests/source/struct_lits.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542/tests%2Fsource%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542/tests%2Fsource%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits.rs?ref=fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542", "patch": "@@ -133,3 +133,11 @@ fn issue835() {\n     };\n     MyStruct {}\n }\n+\n+fn field_init_shorthand() {\n+    MyStruct { x, y, z };\n+    MyStruct { x, y, z, .. base };\n+    Foo { aaaaaaaaaa, bbbbbbbb, cccccccccc, dddddddddd, /* a comment */\n+        eeeeeeeee };\n+    Record { ffffffffffffffffffffffffffieldsaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa };\n+}"}, {"sha": "05840b703d31078e875f24c825e4aad8b0a1435e", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=fad74c8ac9dcf9cd0f9db5439a30e5cadf5d6542", "patch": "@@ -169,3 +169,18 @@ fn issue835() {\n     };\n     MyStruct {}\n }\n+\n+fn field_init_shorthand() {\n+    MyStruct { x, y, z };\n+    MyStruct { x, y, z, ..base };\n+    Foo {\n+        aaaaaaaaaa,\n+        bbbbbbbb,\n+        cccccccccc,\n+        dddddddddd, // a comment\n+        eeeeeeeee,\n+    };\n+    Record {\n+        ffffffffffffffffffffffffffieldsaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+    };\n+}"}]}