{"sha": "908328fca03c1bf69ce335974f4dcabd8e5d18f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwODMyOGZjYTAzYzFiZjY5Y2UzMzU5NzRmNGRjYWJkOGU1ZDE4ZjQ=", "commit": {"author": {"name": "Phlosioneer", "email": "mattmdrr2@gmail.com", "date": "2018-03-11T11:41:13Z"}, "committer": {"name": "Phlosioneer", "email": "mattmdrr2@gmail.com", "date": "2018-03-11T11:53:19Z"}, "message": "Document when types have OS-dependent sizes\n\nAs per issue #43601, types that can change size depending on the\ntarget operating system should say so in their documentation.\n\nI used this template when adding doc comments:\n\n The size of a(n) <name> struct may vary depending on the target\n operating system, and may change between Rust releases.\n\nFor enums, I used \"instance\" instead of \"struct\".", "tree": {"sha": "a352fda0348ab054ce225608425fa93be936d308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a352fda0348ab054ce225608425fa93be936d308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/908328fca03c1bf69ce335974f4dcabd8e5d18f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/908328fca03c1bf69ce335974f4dcabd8e5d18f4", "html_url": "https://github.com/rust-lang/rust/commit/908328fca03c1bf69ce335974f4dcabd8e5d18f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/908328fca03c1bf69ce335974f4dcabd8e5d18f4/comments", "author": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1733a61141d125beb45587dd89d54cd4a01cdd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1733a61141d125beb45587dd89d54cd4a01cdd5a", "html_url": "https://github.com/rust-lang/rust/commit/1733a61141d125beb45587dd89d54cd4a01cdd5a"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "4565b7fa0d6f2998fb036f0f119a8d2f579f5267", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/908328fca03c1bf69ce335974f4dcabd8e5d18f4/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908328fca03c1bf69ce335974f4dcabd8e5d18f4/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=908328fca03c1bf69ce335974f4dcabd8e5d18f4", "patch": "@@ -30,18 +30,27 @@ thread_local! {\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n /// the `std::io::stdio::stdin_raw` function.\n+///\n+/// The size of a StdinRaw struct may vary depending on the target operating\n+/// system, and may change between Rust releases.\n struct StdinRaw(stdio::Stdin);\n \n /// A handle to a raw instance of the standard output stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n /// the `std::io::stdio::stdout_raw` function.\n+///\n+/// The size of a StdoutRaw struct may vary depending on the target operating\n+/// system, and may change between Rust releases.\n struct StdoutRaw(stdio::Stdout);\n \n /// A handle to a raw instance of the standard output stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n /// the `std::io::stdio::stderr_raw` function.\n+///\n+/// The size of a StderrRaw struct may vary depending on the target operating\n+/// system, and may change between Rust releases.\n struct StderrRaw(stdio::Stderr);\n \n /// Constructs a new raw handle to the standard input of this process."}, {"sha": "75b050638392e45702f05fc3526340bbddd0fc28", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/908328fca03c1bf69ce335974f4dcabd8e5d18f4/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908328fca03c1bf69ce335974f4dcabd8e5d18f4/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=908328fca03c1bf69ce335974f4dcabd8e5d18f4", "patch": "@@ -28,6 +28,9 @@ use slice;\n /// as possibly some version-dependent additional information. See [`SocketAddrV4`]'s and\n /// [`SocketAddrV6`]'s respective documentation for more details.\n ///\n+/// The size of a SocketAddr instance may vary depending on the target operating\n+/// system, and may change between Rust releases.\n+///\n /// [IP address]: ../../std/net/enum.IpAddr.html\n /// [`SocketAddrV4`]: ../../std/net/struct.SocketAddrV4.html\n /// [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n@@ -61,6 +64,9 @@ pub enum SocketAddr {\n ///\n /// See [`SocketAddr`] for a type encompassing both IPv4 and IPv6 socket addresses.\n ///\n+/// The size of a SocketAddrV4 struct may vary depending on the target operating\n+/// system, and may change between Rust releases.\n+///\n /// [IETF RFC 793]: https://tools.ietf.org/html/rfc793\n /// [IPv4 address]: ../../std/net/struct.Ipv4Addr.html\n /// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n@@ -88,6 +94,9 @@ pub struct SocketAddrV4 { inner: c::sockaddr_in }\n ///\n /// See [`SocketAddr`] for a type encompassing both IPv4 and IPv6 socket addresses.\n ///\n+/// The size of a SocketAddrV6 struct may vary depending on the target operating\n+/// system, and may change between Rust releases.\n+///\n /// [IETF RFC 2553, Section 3.3]: https://tools.ietf.org/html/rfc2553#section-3.3\n /// [IPv6 address]: ../../std/net/struct.Ipv6Addr.html\n /// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html"}, {"sha": "36a34e147d5587bc60451cef1456601ed4673cee", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/908328fca03c1bf69ce335974f4dcabd8e5d18f4/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908328fca03c1bf69ce335974f4dcabd8e5d18f4/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=908328fca03c1bf69ce335974f4dcabd8e5d18f4", "patch": "@@ -26,6 +26,9 @@ use sys_common::{AsInner, FromInner};\n /// This enum can contain either an [`Ipv4Addr`] or an [`Ipv6Addr`], see their\n /// respective documentation for more details.\n ///\n+/// The size of an IpAddr instance may vary depending on the target operating\n+/// system, and may change between Rust releases.\n+///\n /// [`Ipv4Addr`]: ../../std/net/struct.Ipv4Addr.html\n /// [`Ipv6Addr`]: ../../std/net/struct.Ipv6Addr.html\n ///\n@@ -61,6 +64,9 @@ pub enum IpAddr {\n ///\n /// See [`IpAddr`] for a type encompassing both IPv4 and IPv6 addresses.\n ///\n+/// The size of an Ipv4Addr struct may vary depending on the target operating\n+/// system, and may change between Rust releases.\n+///\n /// [IETF RFC 791]: https://tools.ietf.org/html/rfc791\n /// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n ///\n@@ -93,6 +99,9 @@ pub struct Ipv4Addr {\n ///\n /// See [`IpAddr`] for a type encompassing both IPv4 and IPv6 addresses.\n ///\n+/// The size of an Ipv6Addr struct may vary depending on the target operating\n+/// system, and may change between Rust releases.\n+///\n /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n /// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n ///"}, {"sha": "054450a518629de8acd88d35913f0acb7c4a7245", "filename": "src/libstd/time.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/908328fca03c1bf69ce335974f4dcabd8e5d18f4/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908328fca03c1bf69ce335974f4dcabd8e5d18f4/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=908328fca03c1bf69ce335974f4dcabd8e5d18f4", "patch": "@@ -49,6 +49,9 @@ pub use core::time::Duration;\n /// allows measuring the duration between two instants (or comparing two\n /// instants).\n ///\n+/// The size of an Instant struct may vary depending on the target operating\n+/// system, and may change between Rust releases.\n+///\n /// Example:\n ///\n /// ```no_run\n@@ -88,6 +91,9 @@ pub struct Instant(time::Instant);\n /// fixed point in time, a `SystemTime` can be converted to a human-readable time,\n /// or perhaps some other string representation.\n ///\n+/// The size of a SystemTime struct may vary depending on the target operating\n+/// system, and may change between Rust releases.\n+///\n /// [`Instant`]: ../../std/time/struct.Instant.html\n /// [`Result`]: ../../std/result/enum.Result.html\n /// [`Duration`]: ../../std/time/struct.Duration.html"}]}