{"sha": "e7e620d0cc4ca1a971d8381a65e64efd5b66e489", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTYyMGQwY2M0Y2ExYTk3MWQ4MzgxYTY1ZTY0ZWZkNWI2NmU0ODk=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-08-04T10:04:34Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-08-04T10:04:34Z"}, "message": "Rename `ConfirmResult` fields", "tree": {"sha": "7de3c9bac35f1634db12ea21ffe079ad83030fc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de3c9bac35f1634db12ea21ffe079ad83030fc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e620d0cc4ca1a971d8381a65e64efd5b66e489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e620d0cc4ca1a971d8381a65e64efd5b66e489", "html_url": "https://github.com/rust-lang/rust/commit/e7e620d0cc4ca1a971d8381a65e64efd5b66e489", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e620d0cc4ca1a971d8381a65e64efd5b66e489/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e8e75f50f87dca154342790ba03401037a3c52e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8e75f50f87dca154342790ba03401037a3c52e", "html_url": "https://github.com/rust-lang/rust/commit/2e8e75f50f87dca154342790ba03401037a3c52e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b6a5ce0a6ce5adeef49a88d7733fa6a329da2ea0", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7e620d0cc4ca1a971d8381a65e64efd5b66e489/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e620d0cc4ca1a971d8381a65e64efd5b66e489/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=e7e620d0cc4ca1a971d8381a65e64efd5b66e489", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'gcx, 'tcx> Deref for ConfirmContext<'a, 'gcx, 'tcx> {\n \n pub struct ConfirmResult<'tcx> {\n     pub callee: MethodCallee<'tcx>,\n-    pub rerun: bool,\n+    pub illegal_sized_bound: bool,\n }\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n@@ -99,20 +99,20 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // If there is a `Self: Sized` bound and `Self` is a trait object, it is possible that\n         // something which derefs to `Self` actually implements the trait and the caller\n         // wanted to make a static dispatch on it but forgot to import the trait.\n-        // See test `src/test/compile-fail/issue-35976.rs`.\n+        // See test `src/test/ui/issue-35976.rs`.\n         //\n         // In that case, we'll error anyway, but we'll also re-run the search with all traits\n         // in scope, and if we find another method which can be used, we'll output an\n         // appropriate hint suggesting to import the trait.\n-        let rerun = self.predicates_require_illegal_sized_bound(&method_predicates);\n+        let illegal_sized_bound = self.predicates_require_illegal_sized_bound(&method_predicates);\n \n         // Unify the (adjusted) self type with what the method expects.\n         self.unify_receivers(self_ty, method_sig.inputs()[0]);\n \n         // Add any trait/regions obligations specified on the method's type parameters.\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case.\n-        if !rerun {\n+        if !illegal_sized_bound {\n             let method_ty = self.tcx.mk_fn_ptr(ty::Binder(method_sig));\n             self.add_obligations(method_ty, all_substs, &method_predicates);\n         }\n@@ -128,7 +128,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             self.convert_lvalue_derefs_to_mutable();\n         }\n \n-        ConfirmResult { callee, rerun }\n+        ConfirmResult { callee, illegal_sized_bound }\n     }\n \n     ///////////////////////////////////////////////////////////////////////////"}, {"sha": "dd5b0cdda42447233e639ef8e535e12d48efb0e9", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e620d0cc4ca1a971d8381a65e64efd5b66e489/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e620d0cc4ca1a971d8381a65e64efd5b66e489/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=e7e620d0cc4ca1a971d8381a65e64efd5b66e489", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                          pick.clone(),\n                                          segment);\n \n-        if result.rerun {\n+        if result.illegal_sized_bound {\n             // We probe again, taking all traits into account (not only those in scope).\n             let candidates =\n                 match self.lookup_probe(span,"}]}