{"sha": "cd91110ec0ca4f823145a13033cfd45f74ce72c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOTExMTBlYzBjYTRmODIzMTQ1YTEzMDMzY2ZkNDVmNzRjZTcyYzY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-05T10:46:34Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-05T10:46:34Z"}, "message": "new lint: min_max", "tree": {"sha": "4d52a0b936a0228fcf6799d2c2a3b1c92f62fbc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d52a0b936a0228fcf6799d2c2a3b1c92f62fbc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd91110ec0ca4f823145a13033cfd45f74ce72c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd91110ec0ca4f823145a13033cfd45f74ce72c6", "html_url": "https://github.com/rust-lang/rust/commit/cd91110ec0ca4f823145a13033cfd45f74ce72c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd91110ec0ca4f823145a13033cfd45f74ce72c6/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c50d763fc3a800317d81f90c729ed669ad6e476", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c50d763fc3a800317d81f90c729ed669ad6e476", "html_url": "https://github.com/rust-lang/rust/commit/0c50d763fc3a800317d81f90c729ed669ad6e476"}], "stats": {"total": 129, "additions": 124, "deletions": 5}, "files": [{"sha": "590ba60d552c5ca61bdc74e1590c93e5e4c68132", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd91110ec0ca4f823145a13033cfd45f74ce72c6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd91110ec0ca4f823145a13033cfd45f74ce72c6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cd91110ec0ca4f823145a13033cfd45f74ce72c6", "patch": "@@ -4,7 +4,7 @@\n A collection of lints that give helpful tips to newbies and catch oversights.\n \n ##Lints\n-There are 54 lints included in this crate:\n+There are 55 lints included in this crate:\n \n name                                                                                                 | default | meaning\n -----------------------------------------------------------------------------------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -31,6 +31,7 @@ name\n [let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                     | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n [linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                             | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n [match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                     | warn    | a match has all arms prefixed with `&`; the match expression can be dereferenced instead\n+[min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                   | deny    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n [modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                             | warn    | taking a number modulo 1, which always returns 0\n [mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                   | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n [needless_bool](https://github.com/Manishearth/rust-clippy/wiki#needless_bool)                       | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`"}, {"sha": "5e7cd200d0fbc024169c5bd3870e3cdc0f5290cb", "filename": "src/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd91110ec0ca4f823145a13033cfd45f74ce72c6/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd91110ec0ca4f823145a13033cfd45f74ce72c6/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=cd91110ec0ca4f823145a13033cfd45f74ce72c6", "patch": "@@ -121,10 +121,10 @@ impl PartialOrd for Constant {\n             (&ConstantInt(ref lv, lty), &ConstantInt(ref rv, rty)) =>\n                 Some(match (is_negative(lty) && *lv != 0,\n                             is_negative(rty) && *rv != 0) {\n-                    (true, true) => lv.cmp(rv),\n-                    (false, false) => rv.cmp(lv),\n-                    (true, false) => Greater,\n-                    (false, true) => Less,\n+                    (true, true) => rv.cmp(lv),\n+                    (false, false) => lv.cmp(rv),\n+                    (true, false) => Less,\n+                    (false, true) => Greater,\n                 }),\n             (&ConstantFloat(ref ls, lw), &ConstantFloat(ref rs, rw)) =>\n                 if match (lw, rw) {"}, {"sha": "7665d06b193add108fc429bf0fadda13919f0997", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd91110ec0ca4f823145a13033cfd45f74ce72c6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd91110ec0ca4f823145a13033cfd45f74ce72c6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cd91110ec0ca4f823145a13033cfd45f74ce72c6", "patch": "@@ -32,6 +32,7 @@ pub mod needless_bool;\n pub mod approx_const;\n pub mod eta_reduction;\n pub mod identity_op;\n+pub mod minmax;\n pub mod mut_mut;\n pub mod len_zero;\n pub mod attrs;\n@@ -85,6 +86,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box types::TypeComplexityPass as LintPassObject);\n     reg.register_lint_pass(box matches::MatchPass as LintPassObject);\n     reg.register_lint_pass(box misc::PatternPass as LintPassObject);\n+    reg.register_lint_pass(box minmax::MinMaxPass as LintPassObject);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n@@ -125,6 +127,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         methods::STR_TO_STRING,\n         methods::STRING_TO_STRING,\n         methods::WRONG_SELF_CONVENTION,\n+        minmax::MIN_MAX,\n         misc::CMP_NAN,\n         misc::CMP_OWNED,\n         misc::FLOAT_CMP,"}, {"sha": "2e4c9256657218877bb2d674a20b033d0d0bfd68", "filename": "src/minmax.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/cd91110ec0ca4f823145a13033cfd45f74ce72c6/src%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd91110ec0ca4f823145a13033cfd45f74ce72c6/src%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fminmax.rs?ref=cd91110ec0ca4f823145a13033cfd45f74ce72c6", "patch": "@@ -0,0 +1,90 @@\n+use rustc::lint::{Context, LintPass, LintArray};\n+use rustc_front::hir::*;\n+use syntax::codemap::Spanned;\n+use syntax::ptr::P;\n+use std::cmp::PartialOrd;\n+use std::cmp::Ordering::*;\n+\n+use consts::{Constant, constant};\n+use utils::{match_path, span_lint};\n+use self::MinMax::{Min, Max};\n+\n+declare_lint!(pub MIN_MAX, Deny,\n+    \"`min(_, max(_, _))` (or vice versa) with bounds clamping the result \\\n+    to a constant\");\n+\n+#[allow(missing_copy_implementations)]\n+pub struct MinMaxPass;\n+\n+impl LintPass for MinMaxPass {\n+    fn get_lints(&self) -> LintArray {\n+       lint_array!(MIN_MAX)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        if let Some((outer_max, outer_c, oe)) = min_max(cx, expr) {\n+            if let Some((inner_max, inner_c, _)) = min_max(cx, oe) {\n+                if outer_max == inner_max { return; }\n+                match (outer_max, outer_c.partial_cmp(&inner_c)) {\n+                    (_, None) | (Max, Some(Less)) | (Min, Some(Greater)) => (),\n+                    _ => {\n+                        span_lint(cx, MIN_MAX, expr.span,\n+                            \"this min/max combination leads to constant result\")\n+                    },\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(PartialEq, Eq, Debug)]\n+enum MinMax {\n+    Min,\n+    Max,\n+}\n+\n+fn min_max<'e>(cx: &Context, expr: &'e Expr) ->\n+        Option<(MinMax, Constant, &'e Expr)> {\n+    match expr.node {\n+        ExprMethodCall(Spanned{node: ref ident, ..}, _, ref args) => {\n+            let name = ident.name;\n+            if name == \"min\" {\n+                fetch_const(cx, args, Min)\n+            } else {\n+                if name == \"max\" {\n+                    fetch_const(cx, args, Max)\n+                } else {\n+                    None\n+                }\n+            }\n+        },\n+        ExprCall(ref path, ref args) => {\n+            if let &ExprPath(None, ref path) = &path.node {\n+                if match_path(path, &[\"min\"]) {\n+                    fetch_const(cx, args, Min)\n+                } else {\n+                    if match_path(path, &[\"max\"]) {\n+                        fetch_const(cx, args, Max)\n+                    } else {\n+                        None\n+                    }\n+                }\n+            } else { None }\n+         },\n+         _ => None,\n+     }\n+ }\n+\n+fn fetch_const<'e>(cx: &Context, args: &'e Vec<P<Expr>>, m: MinMax) ->\n+        Option<(MinMax, Constant, &'e Expr)> {\n+    if args.len() != 2 { return None }\n+    if let Some((c, _)) = constant(cx, &args[0]) {\n+        if let None = constant(cx, &args[1]) { // otherwise ignore\n+            Some((m, c, &args[1]))\n+        } else { None }\n+    } else {\n+        if let Some((c, _)) = constant(cx, &args[1]) {\n+            Some((m, c, &args[0]))\n+        } else { None }\n+    }\n+}"}, {"sha": "18f415ddc0bdbb99ec69a5d155cf09ee5c581c91", "filename": "tests/compile-fail/min_max.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cd91110ec0ca4f823145a13033cfd45f74ce72c6/tests%2Fcompile-fail%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd91110ec0ca4f823145a13033cfd45f74ce72c6/tests%2Fcompile-fail%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmin_max.rs?ref=cd91110ec0ca4f823145a13033cfd45f74ce72c6", "patch": "@@ -0,0 +1,25 @@\n+#![feature(plugin)]\n+\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+\n+use std::cmp::{min, max};\n+\n+fn main() {\n+    let x;\n+    x = 2usize;\n+    min(1, max(3, x)); //~ERROR this min/max combination leads to constant result\n+    min(max(3, x), 1); //~ERROR this min/max combination leads to constant result\n+    max(min(x, 1), 3); //~ERROR this min/max combination leads to constant result\n+    max(3, min(x, 1)); //~ERROR this min/max combination leads to constant result\n+\n+    min(3, max(1, x)); // ok, could be 1, 2 or 3 depending on x\n+\n+    let s;\n+    s = \"Hello\";\n+\n+    min(\"Apple\", max(\"Zoo\", s)); //~ERROR this min/max combination leads to constant result\n+    max(min(s, \"Apple\"), \"Zoo\"); //~ERROR this min/max combination leads to constant result\n+\n+    max(\"Apple\", min(s, \"Zoo\")); // ok\n+}"}]}