{"sha": "4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e", "node_id": "C_kwDOAAsO6NoAKDRiZmFiMzlmOWI0NjZmYTg5Zjg1YzU3YTQyYzFlNzFhOTljNmFhNGU", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-28T20:02:00Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-28T20:52:01Z"}, "message": "Check for missing space between fat arrow and range pattern", "tree": {"sha": "2c6debcee80dbbdfa88362a5dcfff6d01152e8e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c6debcee80dbbdfa88362a5dcfff6d01152e8e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e", "html_url": "https://github.com/rust-lang/rust/commit/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f0642827e21a088b0130c84857d84f5433301d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f0642827e21a088b0130c84857d84f5433301d", "html_url": "https://github.com/rust-lang/rust/commit/d6f0642827e21a088b0130c84857d84f5433301d"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "17d1e200b41aab6bd677a8e0c9e19d7104194056", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e", "patch": "@@ -3168,7 +3168,7 @@ impl<'a> Parser<'a> {\n         limits: RangeLimits,\n     ) -> ExprKind {\n         if end.is_none() && limits == RangeLimits::Closed {\n-            self.inclusive_range_with_incorrect_end(self.prev_token.span);\n+            self.inclusive_range_with_incorrect_end();\n             ExprKind::Err\n         } else {\n             ExprKind::Range(start, end, limits)"}, {"sha": "9cde00269205ee6159984d0795fc88feb0d399eb", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e", "patch": "@@ -746,32 +746,38 @@ impl<'a> Parser<'a> {\n             // Parsing e.g. `X..`.\n             if let RangeEnd::Included(_) = re.node {\n                 // FIXME(Centril): Consider semantic errors instead in `ast_validation`.\n-                self.inclusive_range_with_incorrect_end(re.span);\n+                self.inclusive_range_with_incorrect_end();\n             }\n             None\n         };\n         Ok(PatKind::Range(Some(begin), end, re))\n     }\n \n-    pub(super) fn inclusive_range_with_incorrect_end(&mut self, span: Span) {\n+    pub(super) fn inclusive_range_with_incorrect_end(&mut self) {\n         let tok = &self.token;\n-\n+        let span = self.prev_token.span;\n         // If the user typed \"..==\" instead of \"..=\", we want to give them\n         // a specific error message telling them to use \"..=\".\n+        // If they typed \"..=>\", suggest they use \".. =>\".\n         // Otherwise, we assume that they meant to type a half open exclusive\n         // range and give them an error telling them to do that instead.\n-        if matches!(tok.kind, token::Eq) && tok.span.lo() == span.hi() {\n-            let span_with_eq = span.to(tok.span);\n+        let no_space = tok.span.lo() == span.hi();\n+        match tok.kind {\n+            token::Eq if no_space => {\n+                let span_with_eq = span.to(tok.span);\n \n-            // Ensure the user doesn't receive unhelpful unexpected token errors\n-            self.bump();\n-            if self.is_pat_range_end_start(0) {\n-                let _ = self.parse_pat_range_end().map_err(|e| e.cancel());\n-            }\n+                // Ensure the user doesn't receive unhelpful unexpected token errors\n+                self.bump();\n+                if self.is_pat_range_end_start(0) {\n+                    let _ = self.parse_pat_range_end().map_err(|e| e.cancel());\n+                }\n \n-            self.error_inclusive_range_with_extra_equals(span_with_eq);\n-        } else {\n-            self.error_inclusive_range_with_no_end(span);\n+                self.error_inclusive_range_with_extra_equals(span_with_eq);\n+            }\n+            token::Gt if no_space => {\n+                self.error_inclusive_range_match_arrow(span);\n+            }\n+            _ => self.error_inclusive_range_with_no_end(span),\n         }\n     }\n \n@@ -782,6 +788,18 @@ impl<'a> Parser<'a> {\n             .emit();\n     }\n \n+    fn error_inclusive_range_match_arrow(&self, span: Span) {\n+        let without_eq = span.with_hi(span.hi() - rustc_span::BytePos(1));\n+        self.struct_span_err(span, \"unexpected `=>` after open range\")\n+            .span_suggestion_verbose(\n+                without_eq.shrink_to_hi(),\n+                \"add a space between the pattern and `=>`\",\n+                \" \",\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+    }\n+\n     fn error_inclusive_range_with_no_end(&self, span: Span) {\n         struct_span_err!(self.sess.span_diagnostic, span, E0586, \"inclusive range with no end\")\n             .span_suggestion_short(span, \"use `..` instead\", \"..\", Applicability::MachineApplicable)"}, {"sha": "7ba2b6d857cd0207ae19ee3eee3806ba65ad7f34", "filename": "tests/ui/half-open-range-patterns/half-open-range-pats-inclusive-match-arrow.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs?ref=4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let x = 42;\n+    match x {\n+        0..=73 => {},\n+        74..=> {},   //~ ERROR unexpected `=>` after open range\n+                     //~^ ERROR expected one of `=>`, `if`, or `|`, found `>`\n+    }\n+}"}, {"sha": "9ba6d15113cd648775785808181b66bb0782d73c", "filename": "tests/ui/half-open-range-patterns/half-open-range-pats-inclusive-match-arrow.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr?ref=4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e", "patch": "@@ -0,0 +1,19 @@\n+error: unexpected `=>` after open range\n+  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:11\n+   |\n+LL |         74..=> {},\n+   |           ^^^\n+   |\n+help: add a space between the pattern and `=>`\n+   |\n+LL |         74.. => {},\n+   |             +\n+\n+error: expected one of `=>`, `if`, or `|`, found `>`\n+  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:14\n+   |\n+LL |         74..=> {},\n+   |              ^ expected one of `=>`, `if`, or `|`\n+\n+error: aborting due to 2 previous errors\n+"}]}