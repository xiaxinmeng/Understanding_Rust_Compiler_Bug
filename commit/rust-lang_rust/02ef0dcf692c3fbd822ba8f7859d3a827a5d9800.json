{"sha": "02ef0dcf692c3fbd822ba8f7859d3a827a5d9800", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZWYwZGNmNjkyYzNmYmQ4MjJiYThmNzg1OWQzYTgyN2E1ZDk4MDA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-09T19:18:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-09T19:18:32Z"}, "message": "Rollup merge of #67358 - cuviper:get_or_insert_owned, r=LukasKalbertodt\n\nAdd HashSet::get_or_insert_owned\n\nThis is an extension for tracking issue #60896. The more-general `get_or_insert_with` has potential for misuse, so we might remove it, but I think `get_or_insert_owned` covers most use cases.", "tree": {"sha": "2b22db1663bfb9e9b428747d44db6b7cb23213a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b22db1663bfb9e9b428747d44db6b7cb23213a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02ef0dcf692c3fbd822ba8f7859d3a827a5d9800", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeF3yJCRBK7hj4Ov3rIwAAdHIIAJZkvx+LDfURdKGSRIgvZqzR\nNJgZrEDnGm9pQ8tUly+k74wlErcscwEJA5S+Gdbxoc9QJrQqnHkFMsAkScBpkJVW\nmVv5mT+qSOj9iC/pEIcPY1omJqh5KpGI/VoNcQhDR0ldzQ/rbqtFDs45bkfM9k5S\nM6br38cRrrUJVrbabBlApXykHXp+9xbHueH0g2m1rUwBJZxVj50PEfj952eMnvN4\nY5N3E9F3l5b1LZwyYAJoW5XzgVQ6nvAINOWn8FbM6rj8sRjkGRGnJCPo2To6JZVj\novM5obSKjRskUFpuEz2lalgrmR6UhgY2dN6i851G1AV6TamMIzXoICN26RX0w+E=\n=JsK7\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b22db1663bfb9e9b428747d44db6b7cb23213a4\nparent 68ae55bfac1a60fb3c9f45b3a223358ea598f56d\nparent 4ede63bee1c4ef6af808f1bdcd7439a88f23b096\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578597512 +0900\ncommitter GitHub <noreply@github.com> 1578597512 +0900\n\nRollup merge of #67358 - cuviper:get_or_insert_owned, r=LukasKalbertodt\n\nAdd HashSet::get_or_insert_owned\n\nThis is an extension for tracking issue #60896. The more-general `get_or_insert_with` has potential for misuse, so we might remove it, but I think `get_or_insert_owned` covers most use cases.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02ef0dcf692c3fbd822ba8f7859d3a827a5d9800", "html_url": "https://github.com/rust-lang/rust/commit/02ef0dcf692c3fbd822ba8f7859d3a827a5d9800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02ef0dcf692c3fbd822ba8f7859d3a827a5d9800/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "html_url": "https://github.com/rust-lang/rust/commit/68ae55bfac1a60fb3c9f45b3a223358ea598f56d"}, {"sha": "4ede63bee1c4ef6af808f1bdcd7439a88f23b096", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ede63bee1c4ef6af808f1bdcd7439a88f23b096", "html_url": "https://github.com/rust-lang/rust/commit/4ede63bee1c4ef6af808f1bdcd7439a88f23b096"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "b48700fb94420b0a044d701f18e3b6edd1de8b99", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/02ef0dcf692c3fbd822ba8f7859d3a827a5d9800/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ef0dcf692c3fbd822ba8f7859d3a827a5d9800/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=02ef0dcf692c3fbd822ba8f7859d3a827a5d9800", "patch": "@@ -631,6 +631,38 @@ where\n         self.map.raw_entry_mut().from_key(&value).or_insert(value, ()).0\n     }\n \n+    /// Inserts an owned copy of the given `value` into the set if it is not\n+    /// present, then returns a reference to the value in the set.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(hash_set_entry)]\n+    ///\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n+    ///     .iter().map(|&pet| pet.to_owned()).collect();\n+    ///\n+    /// assert_eq!(set.len(), 3);\n+    /// for &pet in &[\"cat\", \"dog\", \"fish\"] {\n+    ///     let value = set.get_or_insert_owned(pet);\n+    ///     assert_eq!(value, pet);\n+    /// }\n+    /// assert_eq!(set.len(), 4); // a new \"fish\" was inserted\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"hash_set_entry\", issue = \"60896\")]\n+    pub fn get_or_insert_owned<Q: ?Sized>(&mut self, value: &Q) -> &T\n+    where\n+        T: Borrow<Q>,\n+        Q: Hash + Eq + ToOwned<Owned = T>,\n+    {\n+        // Although the raw entry gives us `&mut T`, we only return `&T` to be consistent with\n+        // `get`. Key mutation is \"raw\" because you're not supposed to affect `Eq` or `Hash`.\n+        self.map.raw_entry_mut().from_key(value).or_insert_with(|| (value.to_owned(), ())).0\n+    }\n+\n     /// Inserts a value computed from `f` into the set if the given `value` is\n     /// not present, then returns a reference to the value in the set.\n     ///"}]}