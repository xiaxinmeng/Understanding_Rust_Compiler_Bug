{"sha": "200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMDk1OWQ3Y2VmNjQ3YjM0ZTFkN2NmN2Y0ZWQyYzI4YjY1ZmM3ZGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T20:29:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T22:47:04Z"}, "message": "Remove 'with'", "tree": {"sha": "d2a2e790b95f73e30320d1e49b0566423ecb17a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a2e790b95f73e30320d1e49b0566423ecb17a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "html_url": "https://github.com/rust-lang/rust/commit/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef880f22450c4f7e455f431ff4603f90d443b545", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef880f22450c4f7e455f431ff4603f90d443b545", "html_url": "https://github.com/rust-lang/rust/commit/ef880f22450c4f7e455f431ff4603f90d443b545"}], "stats": {"total": 823, "additions": 404, "deletions": 419}, "files": [{"sha": "3f368a6c06e84abf6918c89da5653678dcc009c8", "filename": "doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -1595,9 +1595,9 @@ The order of the fields in a record expression is significant, and\n determines the type of the resulting value. `{a: u8, b: u8}` and `{b:\n u8, a: u8}` are two different fields.\n \n-A record expression can terminate with the word `with` followed by an\n+A record expression can terminate with the syntax `..` followed by an\n expression to denote a functional update. The expression following\n-`with` (the base) must be of a record type that includes at least all the\n+`..` (the base) must be of a record type that includes at least all the\n fields mentioned in the record expression. A new record will be\n created, of the same type as the base expression, with the given\n values for the fields that were explicitly specified, and the values\n@@ -1606,7 +1606,7 @@ such a record expression is not significant.\n \n ~~~~\n let base = {x: 1, y: 2, z: 3};\n-{y: 0, z: 10 with base};\n+{y: 0, z: 10, .. base};\n ~~~~\n \n ### Field expressions"}, {"sha": "a33d7771021811af4b3645079fd0bb82bf997a55", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -362,7 +362,7 @@ fn load_crate(filename: &Path) -> Option<crate> {\n     let v = visit::mk_simple_visitor(@{\n         visit_view_item: |a| goto_view_item(sess, e, a),\n         visit_item: |a| goto_item(e, a),\n-        with *visit::default_simple_visitor()\n+        .. *visit::default_simple_visitor()\n     });\n \n     visit::visit_crate(*c, (), v);"}, {"sha": "4cae1aeda4344a80bc3c2cac61f902081fbe308a", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -132,8 +132,8 @@ fn steal(crate: ast::crate, tm: test_mode) -> stolen_stuff {\n     let tys = @mut ~[];\n     let v = visit::mk_simple_visitor(@{\n         visit_expr: |a| stash_expr_if(safe_to_steal_expr, exprs, a, tm),\n-        visit_ty: |a| stash_ty_if(safe_to_steal_ty, tys, a, tm)\n-        with *visit::default_simple_visitor()\n+        visit_ty: |a| stash_ty_if(safe_to_steal_ty, tys, a, tm),\n+        .. *visit::default_simple_visitor()\n     });\n     visit::visit_crate(crate, (), v);\n     {exprs: *exprs, tys: *tys}\n@@ -182,8 +182,8 @@ fn replace_expr_in_crate(crate: ast::crate, i: uint,\n     let afp = @{\n         fold_expr: fold::wrap(|a,b| {\n             fold_expr_rep(j, i, newexpr.node, a, b, tm)\n-        })\n-        with *fold::default_ast_fold()\n+        }),\n+        .. *fold::default_ast_fold()\n     };\n     let af = fold::make_fold(afp);\n     let crate2: @ast::crate = @af.fold_crate(crate);\n@@ -205,8 +205,8 @@ fn replace_ty_in_crate(crate: ast::crate, i: uint, newty: ast::ty,\n         } else { fold::noop_fold_ty(original, fld) }\n     }\n     let afp = @{\n-        fold_ty: fold::wrap(|a,b| fold_ty_rep(j, i, newty.node, a, b, tm) )\n-        with *fold::default_ast_fold()\n+        fold_ty: fold::wrap(|a,b| fold_ty_rep(j, i, newty.node, a, b, tm) ),\n+        .. *fold::default_ast_fold()\n     };\n     let af = fold::make_fold(afp);\n     let crate2: @ast::crate = @af.fold_crate(crate);\n@@ -452,8 +452,8 @@ fn has_raw_pointers(c: ast::crate) -> bool {\n         }\n     }\n     let v =\n-        visit::mk_simple_visitor(@{visit_ty: |a| visit_ty(has_rp, a)\n-                                      with *visit::default_simple_visitor()});\n+        visit::mk_simple_visitor(@{visit_ty: |a| visit_ty(has_rp, a),\n+                                      .. *visit::default_simple_visitor()});\n     visit::visit_crate(c, (), v);\n     return *has_rp;\n }"}, {"sha": "04197506d5d3b820618f0244657b60299f471e02", "filename": "src/libcore/task.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -247,7 +247,7 @@ priv impl TaskBuilder {\n             fail ~\"Cannot copy a task_builder\"; // Fake move mode on self\n         }\n         self.consumed = true;\n-        TaskBuilder({ can_not_copy: None, mut consumed: false, with *self })\n+        TaskBuilder({ can_not_copy: None, mut consumed: false,.. *self })\n     }\n }\n \n@@ -258,9 +258,9 @@ impl TaskBuilder {\n      */\n     fn unlinked() -> TaskBuilder {\n         TaskBuilder({\n-            opts: { linked: false with self.opts },\n+            opts: { linked: false,.. self.opts },\n             can_not_copy: None,\n-            with *self.consume()\n+            .. *self.consume()\n         })\n     }\n     /**\n@@ -270,9 +270,9 @@ impl TaskBuilder {\n      */\n     fn supervised() -> TaskBuilder {\n         TaskBuilder({\n-            opts: { linked: false, supervised: true with self.opts },\n+            opts: { linked: false, supervised: true,.. self.opts },\n             can_not_copy: None,\n-            with *self.consume()\n+            .. *self.consume()\n         })\n     }\n     /**\n@@ -281,9 +281,9 @@ impl TaskBuilder {\n      */\n     fn linked() -> TaskBuilder {\n         TaskBuilder({\n-            opts: { linked: true, supervised: false with self.opts },\n+            opts: { linked: true, supervised: false,.. self.opts },\n             can_not_copy: None,\n-            with *self.consume()\n+            .. *self.consume()\n         })\n     }\n \n@@ -326,18 +326,18 @@ impl TaskBuilder {\n \n         // Reconfigure self to use a notify channel.\n         TaskBuilder({\n-            opts: { notify_chan: Some(ch) with self.opts },\n+            opts: { notify_chan: Some(ch),.. self.opts },\n             can_not_copy: None,\n-            with *self.consume()\n+            .. *self.consume()\n         })\n     }\n     /// Configure a custom scheduler mode for the task.\n     fn sched_mode(mode: SchedMode) -> TaskBuilder {\n         TaskBuilder({\n-            opts: { sched: Some({ mode: mode, foreign_stack_size: None})\n-                    with self.opts },\n+            opts: { sched: Some({ mode: mode, foreign_stack_size: None}),\n+                    .. self.opts },\n             can_not_copy: None,\n-            with *self.consume()\n+            .. *self.consume()\n         })\n     }\n \n@@ -358,7 +358,7 @@ impl TaskBuilder {\n         TaskBuilder({\n             gen_body: |body| { wrapper(prev_gen_body(body)) },\n             can_not_copy: None,\n-            with *self.consume()\n+            .. *self.consume()\n         })\n     }\n \n@@ -1560,8 +1560,8 @@ fn test_spawn_raw_simple() {\n #[ignore(cfg(windows))]\n fn test_spawn_raw_unsupervise() {\n     let opts = {\n-        linked: false\n-        with default_task_opts()\n+        linked: false,\n+        .. default_task_opts()\n     };\n     do spawn_raw(opts) {\n         fail;\n@@ -1623,9 +1623,9 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n     // they don't make sense (redundant with task().supervised()).\n     let b0 = task();\n     let b1 = TaskBuilder({\n-        opts: { linked: true, supervised: true with b0.opts },\n+        opts: { linked: true, supervised: true,.. b0.opts },\n         can_not_copy: None,\n-        with *b0\n+        .. *b0\n     });\n     do b1.spawn { fail; }\n     comm::recv(po); // We should get punted awake\n@@ -1636,9 +1636,9 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n     // they don't make sense (redundant with task().supervised()).\n     let b0 = task();\n     let b1 = TaskBuilder({\n-        opts: { linked: true, supervised: true with b0.opts },\n+        opts: { linked: true, supervised: true,.. b0.opts },\n         can_not_copy: None,\n-        with *b0\n+        .. *b0\n     });\n     do b1.spawn { loop { task::yield(); } }\n     fail; // *both* mechanisms would be wrong if this didn't kill the child...\n@@ -1724,8 +1724,8 @@ fn test_spawn_raw_notify() {\n     let notify_ch = comm::Chan(notify_po);\n \n     let opts = {\n-        notify_chan: Some(notify_ch)\n-        with default_task_opts()\n+        notify_chan: Some(notify_ch),\n+        .. default_task_opts()\n     };\n     do spawn_raw(opts) {\n         comm::send(task_ch, get_task());\n@@ -1735,8 +1735,8 @@ fn test_spawn_raw_notify() {\n \n     let opts = {\n         linked: false,\n-        notify_chan: Some(notify_ch)\n-        with default_task_opts()\n+        notify_chan: Some(notify_ch),\n+        .. default_task_opts()\n     };\n     do spawn_raw(opts) {\n         comm::send(task_ch, get_task());\n@@ -2042,7 +2042,7 @@ fn test_unkillable() {\n     let ch = po.chan();\n \n     // We want to do this after failing\n-    do spawn_raw({ linked: false with default_task_opts() }) {\n+    do spawn_raw({ linked: false,.. default_task_opts() }) {\n         for iter::repeat(10u) { yield() }\n         ch.send(());\n     }\n@@ -2078,7 +2078,7 @@ fn test_unkillable_nested() {\n     let ch = po.chan();\n \n     // We want to do this after failing\n-    do spawn_raw({ linked: false with default_task_opts() }) {\n+    do spawn_raw({ linked: false,.. default_task_opts() }) {\n         for iter::repeat(10u) { yield() }\n         ch.send(());\n     }"}, {"sha": "4ea7156116b846d4eb9207e249bf15ba1f431c1a", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -96,8 +96,8 @@ fn mk_ast_map_visitor() -> vt {\n         visit_local: map_local,\n         visit_arm: map_arm,\n         visit_view_item: map_view_item,\n-        visit_block: map_block\n-        with *visit::default_visitor()\n+        visit_block: map_block,\n+        .. *visit::default_visitor()\n     });\n }\n "}, {"sha": "cd26dc58e73abba10db8884892e2a98dd7337a41", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -96,8 +96,8 @@ fn expand(cx: ext_ctxt,\n     }\n \n     fn filter_attrs(item: @ast::item) -> @ast::item {\n-        @{attrs: vec::filter(item.attrs, not_auto_serialize)\n-          with *item}\n+        @{attrs: vec::filter(item.attrs, not_auto_serialize),\n+          .. *item}\n     }\n \n     do vec::flat_map(in_items) |in_item| {\n@@ -281,8 +281,8 @@ impl ext_ctxt: ext_ctxt_helpers {\n \n     fn clone_folder() -> fold::ast_fold {\n         fold::make_fold(@{\n-            new_id: |_id| self.next_id()\n-            with *fold::default_ast_fold()\n+            new_id: |_id| self.next_id(),\n+            .. *fold::default_ast_fold()\n         })\n     }\n \n@@ -311,8 +311,8 @@ impl ext_ctxt: ext_ctxt_helpers {\n         }\n \n         let fld = fold::make_fold(@{\n-            new_span: |a| repl_sp(a, ast_util::dummy_sp(), span)\n-            with *fold::default_ast_fold()\n+            new_span: |a| repl_sp(a, ast_util::dummy_sp(), span),\n+            .. *fold::default_ast_fold()\n         });\n \n         fld.fold_expr(expr)\n@@ -799,8 +799,8 @@ fn mk_deser_fn(cx: ext_ctxt, span: span,\n                     vec::map(tps, |tp| {\n                         let cloned = cx.clone_ty_param(tp);\n                         {bounds: @(vec::append(*cloned.bounds,\n-                                               ~[ast::bound_copy]))\n-                         with cloned}\n+                                               ~[ast::bound_copy])),\n+                         .. cloned}\n                     }));\n \n     let deser_blk = cx.expr_blk(f(cx, tps_map, #ast[expr]{__d}));"}, {"sha": "984ac9fb0e3fdad5ce3551ee17065eafc4d1d54b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -160,7 +160,7 @@ fn expand_mod_items(exts: hashmap<~str, syntax_extension>, cx: ext_ctxt,\n         }\n     };\n \n-    return {items: new_items with module_};\n+    return {items: new_items,.. module_};\n }\n \n \n@@ -259,8 +259,8 @@ fn expand_crate(parse_sess: parse::parse_sess,\n         @{fold_expr: |a,b,c| expand_expr(exts, cx, a, b, c, afp.fold_expr),\n           fold_mod: |a,b| expand_mod_items(exts, cx, a, b, afp.fold_mod),\n           fold_item: |a,b| expand_item(exts, cx, a, b, afp.fold_item),\n-          new_span: |a|new_span(cx, a)\n-          with *afp};\n+          new_span: |a|new_span(cx, a),\n+          .. *afp};\n     let f = make_fold(f_pre);\n     let cm = parse_expr_from_source_str(~\"<core-macros>\",\n                                         @core_macros(),"}, {"sha": "9edf97daaeecfdc88b654bb8258ad78e59b24a5c", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -35,13 +35,13 @@ trait append_types {\n \n impl @ast::path: append_types {\n     fn add_ty(ty: @ast::ty) -> @ast::path {\n-        @{types: vec::append_one(self.types, ty)\n-          with *self}\n+        @{types: vec::append_one(self.types, ty),\n+          .. *self}\n     }\n \n     fn add_tys(+tys: ~[@ast::ty]) -> @ast::path {\n-        @{types: vec::append(self.types, tys)\n-          with *self}\n+        @{types: vec::append(self.types, tys),\n+          .. *self}\n     }\n }\n "}, {"sha": "4ebd3eafe3d4f616aa7eab757417ca953692abb9", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -117,8 +117,8 @@ impl @ast::pat: qq_helper {\n fn gather_anti_quotes<N: qq_helper>(lo: uint, node: N) -> aq_ctxt\n {\n     let v = @{visit_expr: |node, &&cx, v| visit_aq(node, ~\"from_expr\", cx, v),\n-              visit_ty: |node, &&cx, v| visit_aq(node, ~\"from_ty\", cx, v)\n-              with *default_visitor()};\n+              visit_ty: |node, &&cx, v| visit_aq(node, ~\"from_ty\", cx, v),\n+              .. *default_visitor()};\n     let cx = @{lo:lo, gather: DVec()};\n     node.visit(cx, mk_vt(v));\n     // FIXME (#2250): Maybe this is an overkill (merge_sort), it might\n@@ -301,8 +301,8 @@ fn replace<T>(node: T, repls: ~[fragment], ff: fn (ast_fold, T) -> T)\n     let f_pre = @{fold_expr: |a,b,c|replace_expr(repls, a, b, c,\n                                                   aft.fold_expr),\n                   fold_ty: |a,b,c|replace_ty(repls, a, b, c,\n-                                              aft.fold_ty)\n-                  with *aft};\n+                                              aft.fold_ty),\n+                  .. *aft};\n     return ff(make_fold(f_pre), node);\n }\n fn fold_crate(f: ast_fold, &&n: @ast::crate) -> @ast::crate {"}, {"sha": "6583a37c1f858fd32063e37a8dab40492ffe5dd0", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -196,8 +196,8 @@ fn transcribe(cx: ext_ctxt, b: bindings, body: @expr) -> @expr {\n           map_exprs: |x,y|\n               transcribe_exprs(cx, b, idx_path, x, y)\n           ,\n-          new_id: |x|new_id(x, cx)\n-          with *afp};\n+          new_id: |x|new_id(x, cx),\n+          .. *afp};\n     let f = make_fold(f_pre);\n     let result = f.fold_expr(body);\n     return result;\n@@ -246,8 +246,8 @@ fn free_vars(b: bindings, e: @expr, it: fn(ident)) {\n     // using fold is a hack: we want visit, but it doesn't hit idents ) :\n     // solve this with macros\n     let f_pre =\n-        @{fold_ident: |x,y|mark_ident(x, y, b, idents)\n-          with *default_ast_fold()};\n+        @{fold_ident: |x,y|mark_ident(x, y, b, idents),\n+          .. *default_ast_fold()};\n     let f = make_fold(f_pre);\n     f.fold_expr(e); // ignore result\n     for idents.each_key |x| { it(x); };"}, {"sha": "976a57a919c7ad48c9ed248490707a18e54f4c24", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -278,19 +278,19 @@ fn fold_struct_def(struct_def: @ast::struct_def, fld: ast_fold)\n                 node: {\n                     body: fld.fold_block(constructor.node.body),\n                     dec: fold_fn_decl(constructor.node.dec, fld),\n-                    id: fld.new_id(constructor.node.id)\n-                    with constructor.node\n-                }\n-                with constructor\n+                    id: fld.new_id(constructor.node.id),\n+                    .. constructor.node\n+                },\n+                .. constructor\n             });\n         }\n     }\n     let dtor = do option::map(struct_def.dtor) |dtor| {\n         let dtor_body = fld.fold_block(dtor.node.body);\n         let dtor_id   = fld.new_id(dtor.node.id);\n         {node: {body: dtor_body,\n-                id: dtor_id with dtor.node}\n-            with dtor}};\n+                id: dtor_id,.. dtor.node},\n+            .. dtor}};\n     return @{\n         traits: vec::map(struct_def.traits, |p| fold_trait_ref(p, fld)),\n         fields: vec::map(struct_def.fields, |f| fold_struct_field(f, fld)),\n@@ -467,14 +467,14 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n             expr_fn(proto, fold_fn_decl(decl, fld),\n                     fld.fold_block(body),\n                     @((*captures).map(|cap_item| {\n-                        @({id: fld.new_id((*cap_item).id)\n-                           with *cap_item})})))\n+                        @({id: fld.new_id((*cap_item).id),\n+                           .. *cap_item})})))\n           }\n           expr_fn_block(decl, body, captures) => {\n             expr_fn_block(fold_fn_decl(decl, fld), fld.fold_block(body),\n                           @((*captures).map(|cap_item| {\n-                              @({id: fld.new_id((*cap_item).id)\n-                                 with *cap_item})})))\n+                              @({id: fld.new_id((*cap_item).id),\n+                                 .. *cap_item})})))\n           }\n           expr_block(blk) => expr_block(fld.fold_block(blk)),\n           expr_move(el, er) => {\n@@ -575,8 +575,8 @@ fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n                 let dtor_body = fld.fold_block(dtor.node.body);\n                 let dtor_id   = fld.new_id(dtor.node.id);\n                 {node: {body: dtor_body,\n-                        id: dtor_id with dtor.node}\n-                    with dtor}};\n+                        id: dtor_id,.. dtor.node},\n+                    .. dtor}};\n             kind = struct_variant_kind(@{\n                 traits: ~[],\n                 fields: vec::map(struct_def.fields,"}, {"sha": "eca6063df39dce4c1985ae4fbb28b0d184c4d01a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -776,7 +776,7 @@ struct parser {\n \n         return @{span: mk_sp(lo, tps.span.hi),\n               rp: rp,\n-              types: tps.node with *path};\n+              types: tps.node,.. *path};\n     }\n \n     fn parse_mutability() -> mutability {\n@@ -1000,11 +1000,9 @@ struct parser {\n                     self.bump();\n                     let mut fields = ~[];\n                     vec::push(fields, self.parse_field(token::COLON));\n-                    while self.token != token::RBRACE &&\n-                            !self.is_keyword(~\"with\") {\n+                    while self.token != token::RBRACE {\n                         self.expect(token::COMMA);\n                         if self.token == token::RBRACE ||\n-                                self.is_keyword(~\"with\") ||\n                                 self.token == token::DOTDOT {\n                             // Accept an optional trailing comma.\n                             break;\n@@ -1013,7 +1011,7 @@ struct parser {\n                     }\n \n                     let base;\n-                    if self.eat_keyword(~\"with\") || self.eat(token::DOTDOT) {\n+                    if self.eat(token::DOTDOT) {\n                         base = Some(self.parse_expr());\n                     } else {\n                         base = None;\n@@ -1572,8 +1570,8 @@ struct parser {\n             let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n                                     ctor(block));\n             let args = vec::append(args, ~[last_arg]);\n-            @{node: expr_call(f, args, true)\n-              with *e}\n+            @{node: expr_call(f, args, true),\n+              .. *e}\n           }\n           expr_path(*) | expr_field(*) | expr_call(*) => {\n             let block = self.parse_lambda_block_expr();\n@@ -1661,18 +1659,6 @@ struct parser {\n                 base = Some(self.parse_expr()); break;\n             }\n \n-            // XXX: Remove \"with\" after all code is converted over and there's\n-            // a snapshot.\n-\n-            // optional comma before \"with\"\n-            if self.token == token::COMMA\n-                && self.token_is_keyword(~\"with\",\n-                                         self.look_ahead(1u)) {\n-                self.bump();\n-            }\n-            if self.eat_keyword(~\"with\") {\n-                base = Some(self.parse_expr()); break;\n-            }\n             self.expect(token::COMMA);\n             if self.token == token::RBRACE {\n                 // record ends by an optional trailing comma\n@@ -2230,7 +2216,7 @@ struct parser {\n                       token::SEMI => {\n                         self.bump();\n                         push(stmts,\n-                             @{node: stmt_semi(e, stmt_id) with *stmt});\n+                             @{node: stmt_semi(e, stmt_id),.. *stmt});\n                       }\n                       token::RBRACE => {\n                         expr = Some(e);\n@@ -2741,8 +2727,8 @@ struct parser {\n         let lo = self.last_span.lo;\n         let (decl_, _) = self.parse_fn_decl(|p| p.parse_arg());\n         let decl = {output: @{id: self.get_id(),\n-                              node: result_ty, span: decl_.output.span}\n-                    with decl_};\n+                              node: result_ty, span: decl_.output.span},\n+                    .. decl_};\n         let body = self.parse_block();\n         ctor_decl(decl, attrs, body, mk_sp(lo, self.last_span.hi))\n     }"}, {"sha": "a9bcb7625978a1a758998d6efc8bd5aef6f55c34", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -388,8 +388,7 @@ fn contextual_keyword_table() -> hashmap<~str, ()> {\n         ~\"move\",\n         ~\"priv\", ~\"pub\",\n         ~\"self\", ~\"send\", ~\"static\",\n-        ~\"use\",\n-        ~\"with\"\n+        ~\"use\"\n     ];\n     for keys.each |word| {\n         words.insert(word, ());"}, {"sha": "ac970faf954805cc4b93b15c1a1020d7d7248daf", "filename": "src/rustc/front/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fconfig.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -26,8 +26,8 @@ fn strip_items(crate: @ast::crate, in_cfg: in_cfg_pred)\n     let precursor =\n         @{fold_mod: |a,b| fold_mod(ctxt, a, b),\n           fold_block: fold::wrap(|a,b| fold_block(ctxt, a, b) ),\n-          fold_foreign_mod: |a,b| fold_foreign_mod(ctxt, a, b)\n-          with *fold::default_ast_fold()};\n+          fold_foreign_mod: |a,b| fold_foreign_mod(ctxt, a, b),\n+          .. *fold::default_ast_fold()};\n \n     let fold = fold::make_fold(precursor);\n     let res = @fold.fold_crate(*crate);"}, {"sha": "7bdd2f064853e99d5443e45da7ae20d87be05ace", "filename": "src/rustc/front/core_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fcore_inject.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -44,6 +44,6 @@ fn inject_libcore_ref(sess: session,\n \n     let vis = vec::append(~[vi1, vi2], crate.node.module.view_items);\n \n-    return @{node: {module: { view_items: vis with crate.node.module }\n-                 with crate.node} with *crate }\n+    return @{node: {module: { view_items: vis,.. crate.node.module },\n+                 .. crate.node},.. *crate }\n }"}, {"sha": "8fd885e8f8b59661264950a3b3554a9b80a6d55b", "filename": "src/rustc/front/intrinsic_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic_inject.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -24,6 +24,6 @@ fn inject_intrinsic(sess: session,\n \n     let items = vec::append(~[item], crate.node.module.items);\n \n-    return @{node: {module: { items: items with crate.node.module }\n-                 with crate.node} with *crate }\n+    return @{node: {module: { items: items ,.. crate.node.module }\n+                 ,.. crate.node} ,.. *crate }\n }"}, {"sha": "604a95a59b004be79c82f00c53722e5f9b740f36", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -47,7 +47,7 @@ fn generate_test_harness(sess: session::session,\n     let precursor =\n         @{fold_crate: fold::wrap(|a,b| fold_crate(cx, a, b) ),\n           fold_item: |a,b| fold_item(cx, a, b),\n-          fold_mod: |a,b| fold_mod(cx, a, b) with *fold::default_ast_fold()};\n+          fold_mod: |a,b| fold_mod(cx, a, b),.. *fold::default_ast_fold()};\n \n     let fold = fold::make_fold(precursor);\n     let res = @fold.fold_crate(*crate);\n@@ -92,7 +92,7 @@ fn fold_crate(cx: test_ctxt, c: ast::crate_, fld: fold::ast_fold) ->\n \n     // Add a special __test module to the crate that will contain code\n     // generated for the test harness\n-    return {module: add_test_module(cx, folded.module) with folded};\n+    return {module: add_test_module(cx, folded.module),.. folded};\n }\n \n \n@@ -166,7 +166,7 @@ fn should_fail(i: @ast::item) -> bool {\n \n fn add_test_module(cx: test_ctxt, m: ast::_mod) -> ast::_mod {\n     let testmod = mk_test_module(cx);\n-    return {items: vec::append_one(m.items, testmod) with m};\n+    return {items: vec::append_one(m.items, testmod),.. m};\n }\n \n /*"}, {"sha": "362220d06e86b3dc0968b75ca359ed4e9ac66587", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -31,7 +31,7 @@ fn read_crates(diag: span_handler, crate: ast::crate,\n         visit::mk_simple_visitor(@{visit_view_item:\n                                        |a| visit_view_item(e, a),\n                                    visit_item: |a| visit_item(e, a)\n-                                   with *visit::default_simple_visitor()});\n+                                   ,.. *visit::default_simple_visitor()});\n     visit::visit_crate(crate, (), v);\n     dump_crates(e.crate_cache);\n     warn_if_multiple_versions(e, diag, e.crate_cache.get());"}, {"sha": "090fa67b79acdb1bbdc19c2d230b7b29bbfe523c", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -858,7 +858,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::Writer,\n               _ => fail ~\"bad foreign item\"\n             }\n         }\n-        with *visit::default_visitor()\n+        ,.. *visit::default_visitor()\n     }));\n     ebml_w.end_tag();\n     return *index;"}, {"sha": "3bd4cdd47db42a9b705ec2aeaf4804284c57005f", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -294,7 +294,7 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         match st.tcx.rcache.find({cnum: st.crate, pos: pos, len: len}) {\n           Some(tt) => return tt,\n           None => {\n-            let ps = @{pos: pos with *st};\n+            let ps = @{pos: pos ,.. *st};\n             let tt = parse_ty(ps, conv);\n             st.tcx.rcache.insert({cnum: st.crate, pos: pos, len: len}, tt);\n             return tt;"}, {"sha": "8cfcaddaa7bb2d3800abaf41c30656fc28868b6e", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -247,13 +247,13 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n               ast::stmt_decl(@{node: ast::decl_item(_), span: _}, _) => false\n             }\n         };\n-        let blk_sans_items = { stmts: stmts_sans_items with blk };\n+        let blk_sans_items = { stmts: stmts_sans_items,.. blk };\n         fold::noop_fold_block(blk_sans_items, fld)\n     }\n \n     let fld = fold::make_fold(@{\n-        fold_block: fold::wrap(drop_nested_items)\n-        with *fold::default_ast_fold()\n+        fold_block: fold::wrap(drop_nested_items),\n+        .. *fold::default_ast_fold()\n     });\n \n     match ii {\n@@ -269,15 +269,15 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n       ast::ii_ctor(ctor, nm, tps, parent_id) => {\n         let ctor_body = fld.fold_block(ctor.node.body);\n         let ctor_decl = fold::fold_fn_decl(ctor.node.dec, fld);\n-        ast::ii_ctor({node: {body: ctor_body, dec: ctor_decl\n-                              with ctor.node}\n-            with ctor}, nm, tps, parent_id)\n+        ast::ii_ctor({node: {body: ctor_body, dec: ctor_decl,\n+                              .. ctor.node},\n+            .. ctor}, nm, tps, parent_id)\n       }\n       ast::ii_dtor(dtor, nm, tps, parent_id) => {\n         let dtor_body = fld.fold_block(dtor.node.body);\n-        ast::ii_dtor({node: {body: dtor_body\n-                              with dtor.node}\n-            with dtor}, nm, tps, parent_id)\n+        ast::ii_dtor({node: {body: dtor_body,\n+                              .. dtor.node},\n+            .. dtor}, nm, tps, parent_id)\n       }\n     }\n }\n@@ -292,8 +292,8 @@ fn renumber_ast(xcx: extended_decode_ctxt, ii: ast::inlined_item)\n     -> ast::inlined_item {\n     let fld = fold::make_fold(@{\n         new_id: |a| xcx.tr_id(a),\n-        new_span: |a| xcx.tr_span(a)\n-        with *fold::default_ast_fold()\n+        new_span: |a| xcx.tr_span(a),\n+        .. *fold::default_ast_fold()\n     });\n \n     match ii {\n@@ -314,9 +314,9 @@ fn renumber_ast(xcx: extended_decode_ctxt, ii: ast::inlined_item)\n         let ctor_id = fld.new_id(ctor.node.id);\n         let new_parent = xcx.tr_def_id(parent_id);\n         ast::ii_ctor({node: {body: ctor_body, attrs: ctor_attrs,\n-                dec: ctor_decl, id: ctor_id\n-                              with ctor.node}\n-            with ctor}, nm, new_params, new_parent)\n+                dec: ctor_decl, id: ctor_id,\n+                              .. ctor.node},\n+            .. ctor}, nm, new_params, new_parent)\n       }\n       ast::ii_dtor(dtor, nm, tps, parent_id) => {\n         let dtor_body = fld.fold_block(dtor.node.body);\n@@ -326,8 +326,8 @@ fn renumber_ast(xcx: extended_decode_ctxt, ii: ast::inlined_item)\n         let new_parent = xcx.tr_def_id(parent_id);\n         let new_self = fld.new_id(dtor.node.self_id);\n         ast::ii_dtor({node: {id: dtor_id, attrs: dtor_attrs,\n-                self_id: new_self, body: dtor_body}\n-                        with dtor},\n+                self_id: new_self, body: dtor_body},\n+                        .. dtor},\n           nm, new_params, new_parent)\n       }\n      }\n@@ -432,7 +432,7 @@ impl method_origin: tr {\n             typeck::method_static(did.tr(xcx))\n           }\n           typeck::method_param(mp) => {\n-            typeck::method_param({trait_id:mp.trait_id.tr(xcx) with mp})\n+            typeck::method_param({trait_id:mp.trait_id.tr(xcx),.. mp})\n           }\n           typeck::method_trait(did, m) => {\n             typeck::method_trait(did.tr(xcx), m)"}, {"sha": "55067d82a77e5e723c5edf8c9de4d720ac269867", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -443,7 +443,7 @@ impl borrowck_ctxt {\n     }\n \n     fn cat_discr(cmt: cmt, alt_id: ast::node_id) -> cmt {\n-        return @{cat:cat_discr(cmt, alt_id) with *cmt};\n+        return @{cat:cat_discr(cmt, alt_id),.. *cmt};\n     }\n \n     fn cat_pattern(cmt: cmt, pat: @ast::pat, op: fn(cmt, @ast::pat)) {"}, {"sha": "a2e2049dcf773d55078bc5f0b60a15c203019810", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -67,8 +67,8 @@ fn check_loans(bccx: borrowck_ctxt,\n     let vt = visit::mk_vt(@{visit_expr: check_loans_in_expr,\n                             visit_local: check_loans_in_local,\n                             visit_block: check_loans_in_block,\n-                            visit_fn: check_loans_in_fn\n-                            with *visit::default_visitor()});\n+                            visit_fn: check_loans_in_fn,\n+                            .. *visit::default_visitor()});\n     visit::visit_crate(*crate, clcx, vt);\n }\n "}, {"sha": "3f31e011b0543391b5eb07b3f54e6a00ae1a0a3d", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -53,7 +53,7 @@ fn gather_loans(bccx: borrowck_ctxt, crate: @ast::crate) -> req_maps {\n                                   mut root_ub: 0});\n     let v = visit::mk_vt(@{visit_expr: req_loans_in_expr,\n                            visit_fn: req_loans_in_fn,\n-                           with *visit::default_visitor()});\n+                           .. *visit::default_visitor()});\n     visit::visit_crate(*crate, glcx, v);\n     return glcx.req_maps;\n }"}, {"sha": "d1c7e36a27ac52cfbb6c4152e39bd5975d5faa23", "filename": "src/rustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -158,7 +158,7 @@ priv impl &preserve_ctxt {\n             debug!(\"base.mutbl = %?\", self.bccx.mut_to_str(base.mutbl));\n             if base.mutbl == m_imm {\n                 let non_rooting_ctxt =\n-                    preserve_ctxt({root_managed_data: false with **self});\n+                    preserve_ctxt({root_managed_data: false,.. **self});\n                 match (&non_rooting_ctxt).preserve(base) {\n                   Ok(pc_ok) => {\n                     Ok(pc_ok)\n@@ -232,8 +232,8 @@ priv impl &preserve_ctxt {\n             // in the *arm* vs the *alt*.\n \n             let alt_rooting_ctxt =\n-                preserve_ctxt({scope_region: ty::re_scope(alt_id)\n-                               with **self});\n+                preserve_ctxt({scope_region: ty::re_scope(alt_id),\n+                               .. **self});\n             (&alt_rooting_ctxt).preserve(base)\n           }\n         }"}, {"sha": "f56833c1dbcc20c2534ce67b48b927bda29879d6", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -15,8 +15,8 @@ use std::map::hashmap;\n fn check_crate(tcx: ty::ctxt, crate: @crate) {\n     visit::visit_crate(*crate, (), visit::mk_vt(@{\n         visit_expr: |a,b,c| check_expr(tcx, a, b, c),\n-        visit_local: |a,b,c| check_local(tcx, a, b, c)\n-        with *visit::default_visitor::<()>()\n+        visit_local: |a,b,c| check_local(tcx, a, b, c),\n+        .. *visit::default_visitor::<()>()\n     }));\n     tcx.sess.abort_if_errors();\n }"}, {"sha": "c01eab9574bfca237a516fcba8b2001a578d2caa", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -11,8 +11,8 @@ fn check_crate(sess: session, crate: @crate, ast_map: ast_map::map,\n         visit_item: |a,b,c| check_item(sess, ast_map, def_map, a, b, c),\n         visit_pat: check_pat,\n         visit_expr: |a,b,c|\n-            check_expr(sess, def_map, method_map, tcx, a, b, c)\n-        with *visit::default_visitor()\n+            check_expr(sess, def_map, method_map, tcx, a, b, c),\n+        .. *visit::default_visitor()\n     }));\n     sess.abort_if_errors();\n }\n@@ -163,8 +163,8 @@ fn check_item_recursion(sess: session, ast_map: ast_map::map,\n \n     let visitor = visit::mk_vt(@{\n         visit_item: visit_item,\n-        visit_expr: visit_expr\n-        with *visit::default_visitor()\n+        visit_expr: visit_expr,\n+        .. *visit::default_visitor()\n     });\n     visitor.visit_item(it, env, visitor);\n "}, {"sha": "3cd26f3039b4cd2d72fdcda3eb3e97f43f1d5e51", "filename": "src/rustc/middle/check_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_loop.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -13,10 +13,10 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n             match e.node {\n               expr_while(e, b) => {\n                 v.visit_expr(e, cx, v);\n-                v.visit_block(b, {in_loop: true with cx}, v);\n+                v.visit_block(b, {in_loop: true,.. cx}, v);\n               }\n               expr_loop(b, _) => {\n-                v.visit_block(b, {in_loop: true with cx}, v);\n+                v.visit_block(b, {in_loop: true,.. cx}, v);\n               }\n               expr_fn(_, _, _, _) => {\n                 visit::visit_expr(e, {in_loop: false, can_ret: true}, v);\n@@ -47,7 +47,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n               }\n               _ => visit::visit_expr(e, cx, v)\n             }\n-        }\n-        with *visit::default_visitor()\n+        },\n+        .. *visit::default_visitor()\n     }));\n }"}, {"sha": "a06403af2e00c383713625d6900a7aaa964ced5e", "filename": "src/rustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fconst_eval.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -171,8 +171,8 @@ fn process_crate(crate: @ast::crate,\n                  def_map: resolve::DefMap,\n                  tcx: ty::ctxt) {\n     let v = visit::mk_simple_visitor(@{\n-        visit_expr_post: |e| { classify(e, def_map, tcx); }\n-        with *visit::default_simple_visitor()\n+        visit_expr_post: |e| { classify(e, def_map, tcx); },\n+        .. *visit::default_simple_visitor()\n     });\n     visit::visit_crate(*crate, (), v);\n     tcx.sess.abort_if_errors();"}, {"sha": "549a11242640017d0c6f0877c53300b04edf753b", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -74,8 +74,8 @@ fn collect_freevars(def_map: resolve::DefMap, blk: ast::blk)\n             }\n         };\n \n-    let v = visit::mk_vt(@{visit_item: ignore_item, visit_expr: walk_expr\n-                           with *visit::default_visitor()});\n+    let v = visit::mk_vt(@{visit_item: ignore_item, visit_expr: walk_expr,\n+                           .. *visit::default_visitor()});\n     v.visit_block(blk, 1, v);\n     return @*refs;\n }\n@@ -96,8 +96,8 @@ fn annotate_freevars(def_map: resolve::DefMap, crate: @ast::crate) ->\n     };\n \n     let visitor =\n-        visit::mk_simple_visitor(@{visit_fn: walk_fn\n-                                   with *visit::default_simple_visitor()});\n+        visit::mk_simple_visitor(@{visit_fn: walk_fn,\n+                                   .. *visit::default_simple_visitor()});\n     visit::visit_crate(*crate, (), visitor);\n \n     return freevars;"}, {"sha": "259b0a111f8903658cca59152eadb450394e4ae7", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -81,9 +81,9 @@ fn check_crate(tcx: ty::ctxt,\n         visit_fn: check_fn,\n         visit_ty: check_ty,\n         visit_item: fn@(i: @item, cx: ctx, v: visit::vt<ctx>) {\n-            visit::visit_item(i, {current_item: i.id with cx}, v);\n-        }\n-        with *visit::default_visitor()\n+            visit::visit_item(i, {current_item: i.id,.. cx}, v);\n+        },\n+        .. *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, ctx, visit);\n     tcx.sess.abort_if_errors();"}, {"sha": "b57f1eac19b545b0eb199406e671ae0b879bfb37", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -165,8 +165,8 @@ struct LanguageItemCollector {\n                                                                      .value);\n                     }\n                 }\n-            }\n-            with *default_simple_visitor()\n+            },\n+            .. *default_simple_visitor()\n         }));\n     }\n "}, {"sha": "349e308255a572130c4988103abbd59da173d697", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -321,7 +321,7 @@ impl ctxt {\n                 new_ctxt =\n                     ctxt_({is_default: false,\n                            curr: c,\n-                           with *new_ctxt});\n+                           .. *new_ctxt});\n                 new_ctxt.set_level(lint.lint, level);\n               }\n             }\n@@ -362,11 +362,11 @@ fn build_settings_crate(sess: session::session, crate: @ast::crate) {\n             sess.lint_settings.default_settings.insert(k, v);\n         }\n \n-        let cx = ctxt_({is_default: true with *cx});\n+        let cx = ctxt_({is_default: true,.. *cx});\n \n         let visit = visit::mk_vt(@{\n-            visit_item: build_settings_item\n-            with *visit::default_visitor()\n+            visit_item: build_settings_item,\n+            .. *visit::default_visitor()\n         });\n         visit::visit_crate(*crate, cx, visit);\n     }\n@@ -387,7 +387,7 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n // not traverse into subitems, since that is handled by the outer\n // lint visitor.\n fn item_stopping_visitor<E>(v: visit::vt<E>) -> visit::vt<E> {\n-    visit::mk_vt(@{visit_item: |_i, _e, _v| { } with **v})\n+    visit::mk_vt(@{visit_item: |_i, _e, _v| { },.. **v})\n }\n \n fn check_item_while_true(cx: ty::ctxt, it: @ast::item) {\n@@ -407,8 +407,8 @@ fn check_item_while_true(cx: ty::ctxt, it: @ast::item) {\n              }\n              _ => ()\n           }\n-        }\n-        with *visit::default_simple_visitor()\n+        },\n+        .. *visit::default_simple_visitor()\n     }));\n     visit::visit_item(it, (), visit);\n }\n@@ -519,8 +519,8 @@ fn check_item_heap(cx: ty::ctxt, it: @ast::item) {\n         visit_expr: fn@(e: @ast::expr) {\n             let ty = ty::expr_ty(cx, e);\n             check_type(cx, e.id, it.id, e.span, ty);\n-        }\n-        with *visit::default_simple_visitor()\n+        },\n+        .. *visit::default_simple_visitor()\n     }));\n     visit::visit_item(it, (), visit);\n }\n@@ -540,8 +540,8 @@ fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n               }\n               _ => ()\n             }\n-        }\n-        with *visit::default_simple_visitor()\n+        },\n+        .. *visit::default_simple_visitor()\n     }));\n     visit::visit_item(it, (), visit);\n }\n@@ -681,7 +681,7 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n             check_fn(tcx, fk, decl, body, span, id),\n         visit_pat: |pat|\n             check_pat(tcx, pat),\n-        with *visit::default_simple_visitor()\n+        .. *visit::default_simple_visitor()\n     });\n     visit::visit_crate(*crate, (), v);\n "}, {"sha": "1dbbec91402ff977479f8212eceea1609c2974c7", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -185,7 +185,7 @@ fn check_crate(tcx: ty::ctxt,\n         visit_local: visit_local,\n         visit_expr: visit_expr,\n         visit_arm: visit_arm,\n-        with *visit::default_visitor()\n+        .. *visit::default_visitor()\n     });\n \n     let last_use_map = int_hash();\n@@ -457,7 +457,7 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n         visit_local: check_local,\n         visit_expr: check_expr,\n         visit_arm: check_arm,\n-        with *visit::default_visitor()\n+        .. *visit::default_visitor()\n     });\n     check_vt.visit_block(body, lsets, check_vt);\n     lsets.check_ret(id, sp, fk, entry_ln);"}, {"sha": "5c7ca0092c7e4d007a28f4318c86b61db06ee712", "filename": "src/rustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fprivacy.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -67,8 +67,8 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n             }\n \n             visit::visit_expr(expr, env, visitor);\n-        }\n-        with *visit::default_visitor()\n+        },\n+        .. *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, (), visitor);\n }"}, {"sha": "5b9a2e7010655092ad0b9bba5e031e74c5f4fe21", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -206,7 +206,7 @@ fn resolve_block(blk: ast::blk, cx: ctxt, visitor: visit::vt<ctxt>) {\n     record_parent(cx, blk.node.id);\n \n     // Descend.\n-    let new_cx: ctxt = ctxt {parent: Some(blk.node.id) with cx};\n+    let new_cx: ctxt = ctxt {parent: Some(blk.node.id),.. cx};\n     visit::visit_block(blk, new_cx, visitor);\n }\n \n@@ -293,7 +293,7 @@ fn resolve_local(local: @ast::local, cx: ctxt, visitor: visit::vt<ctxt>) {\n \n fn resolve_item(item: @ast::item, cx: ctxt, visitor: visit::vt<ctxt>) {\n     // Items create a new outer block scope as far as we're concerned.\n-    let new_cx: ctxt = ctxt {parent: None with cx};\n+    let new_cx: ctxt = ctxt {parent: None,.. cx};\n     visit::visit_item(item, new_cx, visitor);\n }\n \n@@ -305,7 +305,7 @@ fn resolve_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n       visit::fk_item_fn(*) | visit::fk_method(*) |\n       visit::fk_ctor(*) | visit::fk_dtor(*) => {\n         // Top-level functions are a root scope.\n-        ctxt {parent: Some(id) with cx}\n+        ctxt {parent: Some(id),.. cx}\n       }\n \n       visit::fk_anon(*) | visit::fk_fn_block(*) => {\n@@ -340,8 +340,8 @@ fn resolve_crate(sess: session, def_map: resolve::DefMap,\n         visit_pat: resolve_pat,\n         visit_stmt: resolve_stmt,\n         visit_expr: resolve_expr,\n-        visit_local: resolve_local\n-        with *visit::default_visitor()\n+        visit_local: resolve_local,\n+        .. *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, cx, visitor);\n     return cx.region_map;\n@@ -771,7 +771,7 @@ fn determine_rp_in_crate(sess: session,\n         visit_ty: determine_rp_in_ty,\n         visit_ty_method: determine_rp_in_ty_method,\n         visit_struct_field: determine_rp_in_struct_field,\n-        with *visit::default_visitor()\n+        .. *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, cx, visitor);\n "}, {"sha": "079f4ad14d930436737e57704b590fd48a5c3c31", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -777,9 +777,9 @@ struct Resolver {\n             visit_block: |block, context, visitor|\n                 (*this).build_reduced_graph_for_block(block,\n                                                       context,\n-                                                      visitor)\n+                                                      visitor),\n \n-            with *default_visitor()\n+            .. *default_visitor()\n         }));\n     }\n \n@@ -3025,8 +3025,8 @@ struct Resolver {\n             visit_local: |local, _context, visitor|\n                 self.resolve_local(local, visitor),\n             visit_ty: |ty, _context, visitor|\n-                self.resolve_type(ty, visitor)\n-            with *default_visitor()\n+                self.resolve_type(ty, visitor),\n+            .. *default_visitor()\n         }));\n     }\n "}, {"sha": "b7379b587da2b3b0cf2900e28260a9c7afb8d467", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -140,8 +140,8 @@ fn expand_nested_bindings(bcx: block, m: match_, col: uint, val: ValueRef)\n                                             mode: mode,\n                                             ty: node_id_type(bcx,\n                                                              br.pats[col].id)\n-                                         }}])\n-                                with *br});\n+                                         }}]),\n+                                .. *br});\n           }\n           _ => vec::push(result, br)\n         }\n@@ -174,7 +174,7 @@ fn enter_match(bcx: block, dm: DefMap, m: match_, col: uint, val: ValueRef,\n               }\n               _ => br.bound\n             };\n-            vec::push(result, @{pats: pats, bound: bound with *br});\n+            vec::push(result, @{pats: pats, bound: bound,.. *br});\n           }\n           None => ()\n         }"}, {"sha": "88fc4fb3ff1c9f1c74e5c2b60b7f6582eb16623c", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -2841,7 +2841,7 @@ fn trans_lval(cx: block, e: @ast::expr) -> lval_result {\n         let root_loc = alloca_zeroed(lv.bcx, type_of(cx.ccx(), ty));\n         let bcx = store_temp_expr(lv.bcx, INIT, root_loc, lv, ty, false);\n         add_root_cleanup(bcx, scope_id, root_loc, ty);\n-        {bcx: bcx with lv}\n+        {bcx: bcx,.. lv}\n       }\n     };\n \n@@ -3335,7 +3335,7 @@ fn body_contains_ret(body: ast::blk) -> bool {\n                   _ => visit::visit_expr(e, cx, v),\n                 }\n             }\n-        } with *visit::default_visitor()\n+        } ,.. *visit::default_visitor()\n     }));\n     cx.found\n }\n@@ -4883,7 +4883,7 @@ fn copy_args_to_allocas(fcx: fn_ctxt, bcx: block, args: ~[ast::arg],\n         if slf.is_owned {\n             let self_val = PointerCast(bcx, slf.v,\n                                        T_ptr(type_of(bcx.ccx(), slf.t)));\n-            fcx.llself = Some({v: self_val with slf});\n+            fcx.llself = Some({v: self_val,.. slf});\n             add_clean(bcx, self_val, slf.t);\n         }\n       }\n@@ -5667,8 +5667,8 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item) {\n \n fn trans_constants(ccx: @crate_ctxt, crate: @ast::crate) {\n     visit::visit_crate(*crate, (), visit::mk_simple_visitor(@{\n-        visit_item: |a| trans_constant(ccx, a)\n-        with *visit::default_simple_visitor()\n+        visit_item: |a| trans_constant(ccx, a),\n+        .. *visit::default_simple_visitor()\n     }));\n }\n \n@@ -5775,8 +5775,8 @@ fn gather_local_rtcalls(ccx: @crate_ctxt, crate: @ast::crate) {\n             }\n           }\n           _ => ()\n-        }\n-        with *visit::default_simple_visitor()\n+        },\n+        .. *visit::default_simple_visitor()\n     }));\n }\n "}, {"sha": "81e57898091e93d78e353067ff50646bda0a5628", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -120,8 +120,8 @@ fn trans_method_callee(bcx: block, callee_id: ast::node_id,\n \n         let {bcx, val} = trans_self_arg(bcx, self, mentry);\n         {env: self_env(val, node_id_type(bcx, self.id), None,\n-                       mentry.self_mode)\n-         with lval_static_fn(bcx, did, callee_id)}\n+                       mentry.self_mode),\n+         .. lval_static_fn(bcx, did, callee_id)}\n       }\n       typeck::method_param({trait_id:trait_id, method_num:off,\n                             param_num:p, bound_num:b}) => {\n@@ -186,8 +186,8 @@ fn trans_static_method_callee(bcx: block, method_id: ast::def_id,\n                                         Some(sub_origins));\n         {env: null_env,\n          val: PointerCast(bcx, lval.val, T_ptr(type_of_fn_from_ty(\n-             ccx, node_id_type(bcx, callee_id))))\n-         with lval}\n+             ccx, node_id_type(bcx, callee_id)))),\n+         .. lval}\n       }\n       _ => {\n         fail ~\"vtable_param left in monomorphized function's vtable substs\";\n@@ -255,8 +255,8 @@ fn trans_monomorphized_callee(bcx: block, callee_id: ast::node_id,\n         {env: self_env(val, node_id_type(bcx, base.id),\n                        None, mentry.self_mode),\n          val: PointerCast(bcx, lval.val, T_ptr(type_of_fn_from_ty(\n-             ccx, node_id_type(bcx, callee_id))))\n-         with lval}\n+             ccx, node_id_type(bcx, callee_id)))),\n+         .. lval}\n       }\n       typeck::vtable_trait(*) => {\n         let {bcx, val} = trans_temp_expr(bcx, base);"}, {"sha": "234a81a0a288858364f1943472f44f39c0061287", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -144,7 +144,7 @@ fn traverse_public_item(cx: ctx, item: @item) {\n }\n \n fn mk_ty_visitor() -> visit::vt<ctx> {\n-    visit::mk_vt(@{visit_ty: traverse_ty with *visit::default_visitor()})\n+    visit::mk_vt(@{visit_ty: traverse_ty,.. *visit::default_visitor()})\n }\n \n fn traverse_ty(ty: @ty, cx: ctx, v: visit::vt<ctx>) {\n@@ -199,8 +199,8 @@ fn traverse_inline_body(cx: ctx, body: blk) {\n     }\n      visit::visit_block(body, cx, visit::mk_vt(@{\n         visit_expr: traverse_expr,\n-        visit_item: traverse_item\n-        with *visit::default_visitor()\n+        visit_item: traverse_item,\n+        .. *visit::default_visitor()\n     }));\n }\n \n@@ -218,8 +218,8 @@ fn traverse_all_resources_and_impls(cx: ctx, crate_mod: _mod) {\n               }\n               _ => ()\n             }\n-        }\n-        with *visit::default_visitor()\n+        },\n+        .. *visit::default_visitor()\n     }));\n }\n "}, {"sha": "10b7992c0f2179eaaaeb5f667066e1554a222eaf", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -287,8 +287,8 @@ fn handle_body(cx: ctx, body: blk) {\n                 node_type_needs(cx, use_repr, e.id);\n             }\n         },\n-        visit_item: |_i, _cx, _v| { }\n-        with *visit::default_visitor()\n+        visit_item: |_i, _cx, _v| { },\n+        .. *visit::default_visitor()\n     });\n     v.visit_block(body, cx, v);\n }"}, {"sha": "e0d8f969c05ffaef10afe94165c9ab7ed5bb051f", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -1011,7 +1011,7 @@ fn fold_sty(sty: &sty, fldop: fn(t) -> t) -> sty {\n             {mode: a.mode, ty: new_ty}\n         });\n         let new_output = fldop(f.output);\n-        ty_fn({inputs: new_args, output: new_output with *f})\n+        ty_fn({inputs: new_args, output: new_output,.. *f})\n       }\n       ty_rptr(r, tm) => {\n         ty_rptr(r, {ty: fldop(tm.ty), mutbl: tm.mutbl})\n@@ -1110,7 +1110,7 @@ fn fold_regions_and_ty(\n         ty::mk_fn(cx, {\n             inputs: new_args,\n             output: new_output,\n-            proto: new_proto with f\n+            proto: new_proto,.. f\n         })\n       }\n       ref sty => {\n@@ -2915,7 +2915,7 @@ fn substd_enum_variants(cx: ctxt,\n \n         let substd_ctor_ty = subst(cx, substs, variant_info.ctor_ty);\n \n-        @{args: substd_args, ctor_ty: substd_ctor_ty with *variant_info}\n+        @{args: substd_args, ctor_ty: substd_ctor_ty,.. *variant_info}\n     }\n }\n "}, {"sha": "ef3b22909831ffe66b1f93ef21505a5dafe8adaf", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -188,8 +188,8 @@ impl isr_alist: get_and_find_region {\n \n fn check_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n     let visit = visit::mk_simple_visitor(@{\n-        visit_item: |a| check_item(ccx, a)\n-        with *visit::default_simple_visitor()\n+        visit_item: |a| check_item(ccx, a),\n+        .. *visit::default_simple_visitor()\n     });\n     visit::visit_crate(*crate, (), visit);\n }\n@@ -286,7 +286,7 @@ fn check_fn(ccx: @crate_ctxt,\n             let ty = method::transform_self_type_for_method(\n                 fcx.tcx(), self_region,\n                 info.self_ty, info.explicit_self.node);\n-            Some({self_ty: ty with info})\n+            Some({self_ty: ty,.. info})\n         }\n     };\n \n@@ -405,8 +405,8 @@ fn check_fn(ccx: @crate_ctxt,\n                                    visit_pat: visit_pat,\n                                    visit_fn: visit_fn,\n                                    visit_item: visit_item,\n-                                   visit_block: visit_block\n-                                   with *visit::default_visitor()});\n+                                   visit_block: visit_block,\n+                                   .. *visit::default_visitor()});\n \n         visit.visit_block(body, (), visit);\n     }\n@@ -1649,7 +1649,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                                     fcx.infcx().ty_to_str(fty.output)));\n               }\n             }\n-            ty::mk_fn(tcx, {output: ty::mk_nil(tcx) with fty})\n+            ty::mk_fn(tcx, {output: ty::mk_nil(tcx),.. fty})\n           }\n           _ => {\n             tcx.sess.span_fatal(expr.span, ~\"a `loop` function's last \\\n@@ -1672,8 +1672,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             fcx, expr.span, fcx.node_ty(b.id));\n         match ty::get(block_ty).struct {\n           ty::ty_fn(fty) => {\n-            fcx.write_ty(expr.id, ty::mk_fn(tcx, {output: ty::mk_bool(tcx)\n-                                                  with fty}));\n+            fcx.write_ty(expr.id, ty::mk_fn(tcx, {output: ty::mk_bool(tcx),\n+                                                  .. fty}));\n           }\n           _ => fail ~\"expected fn type\"\n         }\n@@ -2113,8 +2113,8 @@ fn check_block_no_value(fcx: @fn_ctxt, blk: ast::blk) -> bool {\n \n fn check_block(fcx0: @fn_ctxt, blk: ast::blk) -> bool {\n     let fcx = match blk.node.rules {\n-      ast::unchecked_blk => @fn_ctxt {purity: ast::impure_fn with *fcx0},\n-      ast::unsafe_blk => @fn_ctxt {purity: ast::unsafe_fn with *fcx0},\n+      ast::unchecked_blk => @fn_ctxt {purity: ast::impure_fn,.. *fcx0},\n+      ast::unsafe_blk => @fn_ctxt {purity: ast::unsafe_fn,.. *fcx0},\n       ast::default_blk => fcx0\n     };\n     do fcx.with_region_lb(blk.node.id) {"}, {"sha": "cb4bd4296e313eb18494ed459d26880372733947", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -324,8 +324,8 @@ struct lookup {\n                 // (where the self type is not permitted), or from a trait\n                 // type (in which case methods that refer to self are not\n                 // permitted).\n-                let substs = {self_ty: Some(self.self_ty)\n-                              with bound_substs};\n+                let substs = {self_ty: Some(self.self_ty),\n+                              .. bound_substs};\n \n                 self.add_candidates_from_m(\n                     inner_ty,\n@@ -371,8 +371,8 @@ struct lookup {\n             // Note: although it is illegal to invoke a method that uses self\n             // through a trait instance, we use a dummy subst here so that we\n             // can soldier on with the compilation.\n-            let substs = {self_ty: Some(self.self_ty)\n-                          with trait_substs};\n+            let substs = {self_ty: Some(self.self_ty),\n+                          .. trait_substs};\n \n             self.add_candidates_from_m(\n                 inner_ty, mode, substs, m, method_trait(did, i));\n@@ -411,7 +411,7 @@ struct lookup {\n         match ty::get(ty::lookup_item_type(self.tcx(), did).ty).struct {\n           ty::ty_fn(fty) => {\n             ty::mk_fn(self.tcx(),\n-                      {proto: ty::proto_vstore(ty::vstore_box) with fty})\n+                      {proto: ty::proto_vstore(ty::vstore_box),.. fty})\n           }\n           _ => fail ~\"ty_from_did: not function ty\"\n         }\n@@ -534,7 +534,7 @@ struct lookup {\n           }\n           Some(_) => self_substs.self_r\n         };\n-        let self_substs = {self_r: self_r with self_substs};\n+        let self_substs = {self_r: self_r,.. self_substs};\n \n         // Before we can be sure we succeeded we need to match the\n         // self type against the impl type that we get when we apply\n@@ -551,8 +551,8 @@ struct lookup {\n \n         // a bit hokey, but the method unbound has a bare protocol, whereas\n         // a.b has a protocol like fn@() (perhaps eventually fn&()):\n-        let fty = ty::mk_fn(tcx, {proto: ty::proto_vstore(ty::vstore_box)\n-                                  with m.fty});\n+        let fty = ty::mk_fn(tcx, {proto: ty::proto_vstore(ty::vstore_box),\n+                                  .. m.fty});\n \n         self.candidates.push(\n             {self_ty: self.self_ty,\n@@ -689,8 +689,8 @@ struct lookup {\n             }\n         };\n \n-        let all_substs = {tps: vec::append(cand.self_substs.tps, m_substs)\n-                          with cand.self_substs};\n+        let all_substs = {tps: vec::append(cand.self_substs.tps, m_substs),\n+                          .. cand.self_substs};\n \n         self.fcx.write_ty_substs(self.node_id, cand.fty, all_substs);\n "}, {"sha": "c980b6670a5b836c0e5f461285c8d7e92a9d7b43", "filename": "src/rustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -112,8 +112,8 @@ fn regionck_visitor() -> rvt {\n                    visit_stmt: visit_stmt,\n                    visit_expr: visit_expr,\n                    visit_block: visit_block,\n-                   visit_local: visit_local\n-                   with *visit::default_visitor()})\n+                   visit_local: visit_local,\n+                   .. *visit::default_visitor()})\n }\n \n fn visit_item(_item: @ast::item, &&_rcx: @rcx, _v: rvt) {"}, {"sha": "50666b92023220eb0748730a0eb8b6d5c82a3e0a", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -16,7 +16,7 @@ fn replace_bound_regions_in_fn_ty(\n     // Take self_info apart; the self_ty part is the only one we want\n     // to update here.\n     let (self_ty, rebuild_self_info) = match self_info {\n-      Some(s) => (Some(s.self_ty), |t| Some({self_ty: t with s})),\n+      Some(s) => (Some(s.self_ty), |t| Some({self_ty: t,.. s})),\n       None => (None, |_t| None)\n     };\n "}, {"sha": "fa0de2e68db5ff2d5b23eb3f9f9277ee002d0e6f", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -464,8 +464,8 @@ fn resolve_in_block(fcx: @fn_ctxt, bl: ast::blk) {\n     visit::visit_block(bl, fcx, visit::mk_vt(@{\n         visit_expr: resolve_expr,\n         visit_item: fn@(_i: @ast::item, &&_e: @fn_ctxt,\n-                        _v: visit::vt<@fn_ctxt>) {}\n-        with *visit::default_visitor()\n+                        _v: visit::vt<@fn_ctxt>) {},\n+        .. *visit::default_visitor()\n     }));\n }\n "}, {"sha": "f132337b68671aeae689b9781773fab4a5d2b4a5", "filename": "src/rustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -185,8 +185,8 @@ fn mk_visitor() -> visit::vt<wb_ctxt> {\n                    visit_expr: visit_expr,\n                    visit_block: visit_block,\n                    visit_pat: visit_pat,\n-                   visit_local: visit_local\n-                   with *visit::default_visitor()})\n+                   visit_local: visit_local,\n+                   .. *visit::default_visitor()})\n }\n \n fn resolve_type_vars_in_expr(fcx: @fn_ctxt, e: @ast::expr) -> bool {"}, {"sha": "1377e41cdca8e64923af5821930b450403afede4", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -212,8 +212,8 @@ struct CoherenceChecker {\n                     // Nothing to do.\n                   }\n                 };\n-            }\n-            with *default_simple_visitor()\n+            },\n+            .. *default_simple_visitor()\n         }));\n     }\n \n@@ -237,8 +237,8 @@ struct CoherenceChecker {\n                         // Nothing to do.\n                     }\n                 };\n-            }\n-            with *default_simple_visitor()\n+            },\n+            .. *default_simple_visitor()\n         }));\n \n         // Check trait coherence.\n@@ -501,8 +501,8 @@ struct CoherenceChecker {\n                         visit_item(item, (), visitor);\n                     }\n                 }\n-            }\n-            with *default_visitor()\n+            },\n+            .. *default_visitor()\n         }));\n     }\n "}, {"sha": "7bde062008dfa3ed24846a2b02ccfc00d595e7bf", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -66,8 +66,8 @@ fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n \n     visit::visit_crate(*crate, (), visit::mk_simple_visitor(@{\n         visit_item: |a|convert(ccx, a),\n-        visit_foreign_item: |a|convert_foreign(ccx, a)\n-        with *visit::default_simple_visitor()\n+        visit_foreign_item: |a|convert_foreign(ccx, a),\n+        .. *visit::default_simple_visitor()\n     }));\n }\n "}, {"sha": "998d32bdad3d103a0b1cbb4f144ed32d61c77118", "filename": "src/rustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -17,7 +17,7 @@ trait lattice_ops {\n impl Lub: lattice_ops {\n     fn bnd(b: bounds<ty::t>) -> Option<ty::t> { b.ub }\n     fn with_bnd(b: bounds<ty::t>, t: ty::t) -> bounds<ty::t> {\n-        {ub: Some(t) with b}\n+        {ub: Some(t),.. b}\n     }\n     fn ty_bot(t: ty::t) -> cres<ty::t> {\n         Ok(t)\n@@ -27,7 +27,7 @@ impl Lub: lattice_ops {\n impl Glb: lattice_ops {\n     fn bnd(b: bounds<ty::t>) -> Option<ty::t> { b.lb }\n     fn with_bnd(b: bounds<ty::t>, t: ty::t) -> bounds<ty::t> {\n-        {lb: Some(t) with b}\n+        {lb: Some(t),.. b}\n     }\n     fn ty_bot(_t: ty::t) -> cres<ty::t> {\n         Ok(ty::mk_bot(self.infcx.tcx))"}, {"sha": "1163c75c7fef3e23d5a71c824908cd44cf5ba169", "filename": "src/rustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -15,14 +15,14 @@ impl Sub: combine {\n \n     fn contratys(a: ty::t, b: ty::t) -> cres<ty::t> {\n         let opp = combine_fields {\n-            a_is_expected: !self.a_is_expected, with *self\n+            a_is_expected: !self.a_is_expected,.. *self\n         };\n         Sub(opp).tys(b, a)\n     }\n \n     fn contraregions(a: ty::region, b: ty::region) -> cres<ty::region> {\n         let opp = combine_fields {\n-            a_is_expected: !self.a_is_expected, with *self\n+            a_is_expected: !self.a_is_expected,.. *self\n         };\n         Sub(opp).regions(b, a)\n     }"}, {"sha": "a4754fd4769679ceee5bf39d0fa6a81c01902e14", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -51,7 +51,7 @@ fn loop_query(b: ast::blk, p: fn@(ast::expr_) -> bool) -> bool {\n         }\n     };\n     let v = visit::mk_vt(@{visit_expr: visit_expr\n-                           with *visit::default_visitor()});\n+                           ,.. *visit::default_visitor()});\n     visit::visit_block(b, rs, v);\n     return *rs;\n }"}, {"sha": "7e4d89e5bb485aec6cd404933092706044d57689", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -30,8 +30,8 @@ fn run(\n         fold_item: fold_item,\n         fold_enum: fold_enum,\n         fold_trait: fold_trait,\n-        fold_impl: fold_impl\n-        with *fold::default_any_fold(srv)\n+        fold_impl: fold_impl,\n+        .. *fold::default_any_fold(srv)\n     });\n     fold.fold_doc(fold, doc)\n }\n@@ -52,10 +52,10 @@ fn fold_crate(\n     {\n         topmod: doc::moddoc_({\n             item: {\n-                name: option::get_default(attrs.name, doc.topmod.name())\n-                with doc.topmod.item\n-            }\n-            with *doc.topmod\n+                name: option::get_default(attrs.name, doc.topmod.name()),\n+                .. doc.topmod.item\n+            },\n+            .. *doc.topmod\n         })\n     }\n }\n@@ -84,8 +84,8 @@ fn fold_item(\n     };\n \n     {\n-        desc: desc\n-        with doc\n+        desc: desc,\n+        .. doc\n     }\n }\n \n@@ -162,11 +162,11 @@ fn fold_enum(\n             };\n \n             {\n-                desc: desc\n-                with variant\n+                desc: desc,\n+                .. variant\n             }\n-        }\n-        with doc\n+        },\n+        .. doc\n     }\n }\n \n@@ -191,8 +191,8 @@ fn fold_trait(\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n     {\n-        methods: merge_method_attrs(srv, doc.id(), doc.methods)\n-        with doc\n+        methods: merge_method_attrs(srv, doc.id(), doc.methods),\n+        .. doc\n     }\n }\n \n@@ -235,8 +235,8 @@ fn merge_method_attrs(\n         let desc = attrs.second();\n \n         {\n-            desc: desc\n-            with doc\n+            desc: desc,\n+            .. doc\n         }\n     }\n }\n@@ -266,8 +266,8 @@ fn fold_impl(\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     {\n-        methods: merge_method_attrs(srv, doc.id(), doc.methods)\n-        with doc\n+        methods: merge_method_attrs(srv, doc.id(), doc.methods),\n+        .. doc\n     }\n }\n "}, {"sha": "d30e41590f76830cb491e3b184b3c504e026c992", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -141,8 +141,8 @@ fn config_from_opts(\n         let output_dir = getopts::opt_maybe_str(matches, opt_output_dir());\n         let output_dir = option::map(output_dir, |s| Path(s));\n         result::Ok({\n-            output_dir: option::get_default(output_dir, config.output_dir)\n-            with config\n+            output_dir: option::get_default(output_dir, config.output_dir),\n+            .. config\n         })\n     };\n     let result = do result::chain(result) |config| {\n@@ -154,8 +154,8 @@ fn config_from_opts(\n                 |output_format| {\n \n                 result::Ok({\n-                    output_format: output_format\n-                    with config\n+                    output_format: output_format,\n+                    .. config\n                 })\n             }\n         }\n@@ -168,8 +168,8 @@ fn config_from_opts(\n             do result::chain(parse_output_style(output_style))\n                 |output_style| {\n                 result::Ok({\n-                    output_style: output_style\n-                    with config\n+                    output_style: output_style,\n+                    .. config\n                 })\n             }\n         }\n@@ -180,8 +180,8 @@ fn config_from_opts(\n             config, pandoc_cmd, program_output);\n         do result::chain(pandoc_cmd) |pandoc_cmd| {\n             result::Ok({\n-                pandoc_cmd: pandoc_cmd\n-                with config\n+                pandoc_cmd: pandoc_cmd,\n+                .. config\n             })\n         }\n     };\n@@ -241,8 +241,8 @@ fn maybe_find_pandoc(\n #[test]\n fn should_find_pandoc() {\n     let config = {\n-        output_format: pandoc_html\n-        with default_config(&Path(\"test\"))\n+        output_format: pandoc_html,\n+        .. default_config(&Path(\"test\"))\n     };\n     let mock_program_output = fn~(_prog: &str, _args: &[~str]) -> {\n         status: int, out: ~str, err: ~str\n@@ -258,8 +258,8 @@ fn should_find_pandoc() {\n #[test]\n fn should_error_with_no_pandoc() {\n     let config = {\n-        output_format: pandoc_html\n-        with default_config(&Path(\"test\"))\n+        output_format: pandoc_html,\n+        .. default_config(&Path(\"test\"))\n     };\n     let mock_program_output = fn~(_prog: &str, _args: &[~str]) -> {\n         status: int, out: ~str, err: ~str"}, {"sha": "cfccae19833f7fab09ce70b0c02907e554085378", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -23,8 +23,8 @@ fn run(\n     let fold = fold::fold({\n         fold_item: fold_item,\n         fold_trait: fold_trait,\n-        fold_impl: fold_impl\n-        with *fold::default_any_fold(())\n+        fold_impl: fold_impl,\n+        .. *fold::default_any_fold(())\n     });\n     fold.fold_doc(fold, doc)\n }\n@@ -33,8 +33,8 @@ fn fold_item(fold: fold::fold<()>, doc: doc::itemdoc) -> doc::itemdoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n \n     {\n-        brief: extract(doc.desc)\n-        with doc\n+        brief: extract(doc.desc),\n+        .. doc\n     }\n }\n \n@@ -43,10 +43,10 @@ fn fold_trait(fold: fold::fold<()>, doc: doc::traitdoc) -> doc::traitdoc {\n \n     {\n         methods: par::map(doc.methods, |doc| {\n-            brief: extract(doc.desc)\n-            with doc\n-        })\n-        with doc\n+            brief: extract(doc.desc),\n+            .. doc\n+        }),\n+        .. doc\n     }\n }\n \n@@ -55,10 +55,10 @@ fn fold_impl(fold: fold::fold<()>, doc: doc::impldoc) -> doc::impldoc {\n \n     {\n         methods: par::map(doc.methods, |doc| {\n-            brief: extract(doc.desc)\n-            with doc\n-        })\n-        with doc\n+            brief: extract(doc.desc),\n+            .. doc\n+        }),\n+        .. doc\n     }\n }\n "}, {"sha": "5dcbfb664eae731595eb2c0f32c51796f23b9fe8", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -142,8 +142,8 @@ fn default_seq_fold_doc<T>(fold: fold<T>, doc: doc::doc) -> doc::doc {\n                 doc::itempage(fold_itemtag(fold, doc))\n               }\n             }\n-        }\n-        with *doc\n+        },\n+        .. *doc\n     })\n }\n \n@@ -171,8 +171,8 @@ fn default_any_fold_mod<T:send copy>(\n         item: fold.fold_item(fold, doc.item),\n         items: par::map(doc.items, |itemtag, copy fold| {\n             fold_itemtag(fold, itemtag)\n-        })\n-        with *doc\n+        }),\n+        .. *doc\n     })\n }\n \n@@ -184,8 +184,8 @@ fn default_seq_fold_mod<T>(\n         item: fold.fold_item(fold, doc.item),\n         items: vec::map(doc.items, |itemtag| {\n             fold_itemtag(fold, itemtag)\n-        })\n-        with *doc\n+        }),\n+        .. *doc\n     })\n }\n \n@@ -197,8 +197,8 @@ fn default_par_fold_mod<T:send copy>(\n         item: fold.fold_item(fold, doc.item),\n         items: par::map(doc.items, |itemtag, copy fold| {\n             fold_itemtag(fold, itemtag)\n-        })\n-        with *doc\n+        }),\n+        .. *doc\n     })\n }\n \n@@ -210,8 +210,8 @@ fn default_any_fold_nmod<T:send copy>(\n         item: fold.fold_item(fold, doc.item),\n         fns: par::map(doc.fns, |fndoc, copy fold| {\n             fold.fold_fn(fold, fndoc)\n-        })\n-        with doc\n+        }),\n+        .. doc\n     }\n }\n \n@@ -223,8 +223,8 @@ fn default_seq_fold_nmod<T>(\n         item: fold.fold_item(fold, doc.item),\n         fns: vec::map(doc.fns, |fndoc| {\n             fold.fold_fn(fold, fndoc)\n-        })\n-        with doc\n+        }),\n+        .. doc\n     }\n }\n \n@@ -236,8 +236,8 @@ fn default_par_fold_nmod<T:send copy>(\n         item: fold.fold_item(fold, doc.item),\n         fns: par::map(doc.fns, |fndoc, copy fold| {\n             fold.fold_fn(fold, fndoc)\n-        })\n-        with doc\n+        }),\n+        .. doc\n     }\n }\n \n@@ -275,8 +275,8 @@ fn default_seq_fold_fn<T>(\n     doc: doc::fndoc\n ) -> doc::fndoc {\n     {\n-        item: fold.fold_item(fold, doc.item)\n-        with doc\n+        item: fold.fold_item(fold, doc.item),\n+        .. doc\n     }\n }\n \n@@ -285,8 +285,8 @@ fn default_seq_fold_const<T>(\n     doc: doc::constdoc\n ) -> doc::constdoc {\n     {\n-        item: fold.fold_item(fold, doc.item)\n-        with doc\n+        item: fold.fold_item(fold, doc.item),\n+        .. doc\n     }\n }\n \n@@ -295,8 +295,8 @@ fn default_seq_fold_enum<T>(\n     doc: doc::enumdoc\n ) -> doc::enumdoc {\n     {\n-        item: fold.fold_item(fold, doc.item)\n-        with doc\n+        item: fold.fold_item(fold, doc.item),\n+        .. doc\n     }\n }\n \n@@ -305,8 +305,8 @@ fn default_seq_fold_trait<T>(\n     doc: doc::traitdoc\n ) -> doc::traitdoc {\n     {\n-        item: fold.fold_item(fold, doc.item)\n-        with doc\n+        item: fold.fold_item(fold, doc.item),\n+        .. doc\n     }\n }\n \n@@ -315,8 +315,8 @@ fn default_seq_fold_impl<T>(\n     doc: doc::impldoc\n ) -> doc::impldoc {\n     {\n-        item: fold.fold_item(fold, doc.item)\n-        with doc\n+        item: fold.fold_item(fold, doc.item),\n+        .. doc\n     }\n }\n \n@@ -325,8 +325,8 @@ fn default_seq_fold_type<T>(\n     doc: doc::tydoc\n ) -> doc::tydoc {\n     {\n-        item: fold.fold_item(fold, doc.item)\n-        with doc\n+        item: fold.fold_item(fold, doc.item),\n+        .. doc\n     }\n }\n "}, {"sha": "6897f3b293878fae015acee3592c07573f5e1312", "filename": "src/rustdoc/markdown_index_pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_index_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -20,8 +20,8 @@ fn run(\n ) -> doc::doc {\n     let fold = fold::fold({\n         fold_mod: fold_mod,\n-        fold_nmod: fold_nmod\n-        with *fold::default_any_fold(config)\n+        fold_nmod: fold_nmod,\n+        .. *fold::default_any_fold(config)\n     });\n     fold.fold_doc(fold, doc)\n }\n@@ -34,8 +34,8 @@ fn fold_mod(\n     let doc = fold::default_any_fold_mod(fold, doc);\n \n     doc::moddoc_({\n-        index: Some(build_mod_index(doc, fold.ctxt))\n-        with *doc\n+        index: Some(build_mod_index(doc, fold.ctxt)),\n+        .. *doc\n     })\n }\n \n@@ -47,8 +47,8 @@ fn fold_nmod(\n     let doc = fold::default_any_fold_nmod(fold, doc);\n \n     {\n-        index: Some(build_nmod_index(doc, fold.ctxt))\n-        with doc\n+        index: Some(build_nmod_index(doc, fold.ctxt)),\n+        .. doc\n     }\n }\n \n@@ -229,8 +229,8 @@ mod test {\n     fn mk_doc(output_style: config::output_style, source: ~str) -> doc::doc {\n         do astsrv::from_str(source) |srv| {\n             let config = {\n-                output_style: output_style\n-                with config::default_config(&Path(\"whatever\"))\n+                output_style: output_style,\n+                .. config::default_config(&Path(\"whatever\"))\n             };\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = attr_pass::mk_pass().f(srv, doc);"}, {"sha": "cd743e5609d98add312cc37fd10259de0dc6d4f4", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -537,12 +537,12 @@ fn should_correctly_indent_fn_signature() {\n             doc::cratepage({\n                 topmod: doc::moddoc_({\n                     items: ~[doc::fntag({\n-                        sig: Some(~\"line 1\\nline 2\")\n-                        with doc.cratemod().fns()[0]\n-                    })]\n-                    with *doc.cratemod()\n-                })\n-                with doc.cratedoc()\n+                        sig: Some(~\"line 1\\nline 2\"),\n+                        .. doc.cratemod().fns()[0]\n+                    })],\n+                    .. *doc.cratemod()\n+                }),\n+                .. doc.cratedoc()\n             })\n         ]\n     });\n@@ -784,8 +784,8 @@ mod test {\n         do astsrv::from_str(source) |srv| {\n \n             let config = {\n-                output_style: config::doc_per_crate\n-                with config::default_config(&Path(\"whatever\"))\n+                output_style: config::doc_per_crate,\n+                .. config::default_config(&Path(\"whatever\"))\n             };\n \n             let doc = extract::from_srv(srv, ~\"\");"}, {"sha": "b44ba7bcb44542c1fc3ff203a2f2cde9dd6a380a", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -205,8 +205,8 @@ fn should_use_markdown_file_name_based_off_crate() {\n     let config = {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::markdown,\n-        output_style: config::doc_per_crate\n-        with config::default_config(&Path(\"input/test.rc\"))\n+        output_style: config::doc_per_crate,\n+        .. config::default_config(&Path(\"input/test.rc\"))\n     };\n     let doc = test::mk_doc(~\"test\", ~\"\");\n     let page = doc::cratepage(doc.cratedoc());\n@@ -219,8 +219,8 @@ fn should_name_html_crate_file_name_index_html_when_doc_per_mod() {\n     let config = {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::pandoc_html,\n-        output_style: config::doc_per_mod\n-        with config::default_config(&Path(\"input/test.rc\"))\n+        output_style: config::doc_per_mod,\n+        .. config::default_config(&Path(\"input/test.rc\"))\n     };\n     let doc = test::mk_doc(~\"\", ~\"\");\n     let page = doc::cratepage(doc.cratedoc());\n@@ -233,8 +233,8 @@ fn should_name_mod_file_names_by_path() {\n     let config = {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::pandoc_html,\n-        output_style: config::doc_per_mod\n-        with config::default_config(&Path(\"input/test.rc\"))\n+        output_style: config::doc_per_mod,\n+        .. config::default_config(&Path(\"input/test.rc\"))\n     };\n     let doc = test::mk_doc(~\"\", ~\"mod a { mod b { } }\");\n     let modb = doc.cratemod().mods()[0].mods()[0];"}, {"sha": "a8500c8e4004433d42bdde0e4fb269f7a3f4dbb9", "filename": "src/rustdoc/page_pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpage_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -60,8 +60,8 @@ fn find_pages(doc: doc::doc, page_chan: page_chan) {\n     let fold = fold::fold({\n         fold_crate: fold_crate,\n         fold_mod: fold_mod,\n-        fold_nmod: fold_nmod\n-        with *fold::default_any_fold(page_chan)\n+        fold_nmod: fold_nmod,\n+        .. *fold::default_any_fold(page_chan)\n     });\n     fold.fold_doc(fold, doc);\n \n@@ -76,8 +76,8 @@ fn fold_crate(\n     let doc = fold::default_seq_fold_crate(fold, doc);\n \n     let page = doc::cratepage({\n-        topmod: strip_mod(doc.topmod)\n-        with doc\n+        topmod: strip_mod(doc.topmod),\n+        .. doc\n     });\n \n     comm::send(fold.ctxt, Some(page));\n@@ -110,8 +110,8 @@ fn strip_mod(doc: doc::moddoc) -> doc::moddoc {\n               doc::nmodtag(_) => false,\n               _ => true\n             }\n-        }\n-        with *doc\n+        },\n+        .. *doc\n     })\n }\n "}, {"sha": "23cd67cf875e6a22d9b4b319d701e671875cb7f0", "filename": "src/rustdoc/path_pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpath_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -26,16 +26,16 @@ fn run(srv: astsrv::srv, doc: doc::doc) -> doc::doc {\n     let fold = fold::fold({\n         fold_item: fold_item,\n         fold_mod: fold_mod,\n-        fold_nmod: fold_nmod\n-        with *fold::default_any_fold(ctxt)\n+        fold_nmod: fold_nmod,\n+        .. *fold::default_any_fold(ctxt)\n     });\n     fold.fold_doc(fold, doc)\n }\n \n fn fold_item(fold: fold::fold<ctxt>, doc: doc::itemdoc) -> doc::itemdoc {\n     {\n-        path: fold.ctxt.path\n-        with doc\n+        path: fold.ctxt.path,\n+        .. doc\n     }\n }\n \n@@ -48,8 +48,8 @@ fn fold_mod(fold: fold::fold<ctxt>, doc: doc::moddoc) -> doc::moddoc {\n     if !is_topmod { vec::pop(fold.ctxt.path); }\n \n     doc::moddoc_({\n-        item: fold.fold_item(fold, doc.item)\n-        with *doc\n+        item: fold.fold_item(fold, doc.item),\n+        .. *doc\n     })\n }\n \n@@ -59,8 +59,8 @@ fn fold_nmod(fold: fold::fold<ctxt>, doc: doc::nmoddoc) -> doc::nmoddoc {\n     vec::pop(fold.ctxt.path);\n \n     {\n-        item: fold.fold_item(fold, doc.item)\n-        with doc\n+        item: fold.fold_item(fold, doc.item),\n+        .. doc\n     }\n }\n "}, {"sha": "af0c8a19702f12f8c266bb0add56314e50e7ea87", "filename": "src/rustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_hidden_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -13,8 +13,8 @@ fn mk_pass() -> pass {\n \n fn run(srv: astsrv::srv, doc: doc::doc) -> doc::doc {\n     let fold = fold::fold({\n-        fold_mod: fold_mod\n-        with *fold::default_any_fold(srv)\n+        fold_mod: fold_mod,\n+        .. *fold::default_any_fold(srv)\n     });\n     fold.fold_doc(fold, doc)\n }\n@@ -28,8 +28,8 @@ fn fold_mod(\n     doc::moddoc_({\n         items: vec::filter(doc.items, |itemtag| {\n             !is_hidden(fold.ctxt, itemtag.item())\n-        })\n-        with *doc\n+        }),\n+        .. *doc\n     })\n }\n "}, {"sha": "c3f6bc476c1a497b6a5b80effabb1882d09396d0", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -53,8 +53,8 @@ fn test_run_passes() {\n                 doc::cratepage({\n                     topmod: doc::moddoc_({\n                         item: {\n-                            name: doc.cratemod().name() + ~\"two\"\n-                            with doc.cratemod().item\n+                            name: doc.cratemod().name() + ~\"two\",\n+                            .. doc.cratemod().item\n                         },\n                         items: ~[],\n                         index: None\n@@ -72,8 +72,8 @@ fn test_run_passes() {\n                 doc::cratepage({\n                     topmod: doc::moddoc_({\n                         item: {\n-                            name: doc.cratemod().name() + ~\"three\"\n-                            with doc.cratemod().item\n+                            name: doc.cratemod().name() + ~\"three\",\n+                            .. doc.cratemod().item\n                         },\n                         items: ~[],\n                         index: None"}, {"sha": "1a156b9d2a3de5379e1cc033f50433360d0e1a17", "filename": "src/rustdoc/sectionalize_pass.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsectionalize_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -15,8 +15,8 @@ fn run(_srv: astsrv::srv, doc: doc::doc) -> doc::doc {\n     let fold = fold::fold({\n         fold_item: fold_item,\n         fold_trait: fold_trait,\n-        fold_impl: fold_impl\n-        with *fold::default_any_fold(())\n+        fold_impl: fold_impl,\n+        .. *fold::default_any_fold(())\n     });\n     fold.fold_doc(fold, doc)\n }\n@@ -27,8 +27,8 @@ fn fold_item(fold: fold::fold<()>, doc: doc::itemdoc) -> doc::itemdoc {\n \n     {\n         desc: desc,\n-        sections: sections\n-        with doc\n+        sections: sections,\n+        .. doc\n     }\n }\n \n@@ -41,11 +41,11 @@ fn fold_trait(fold: fold::fold<()>, doc: doc::traitdoc) -> doc::traitdoc {\n \n             {\n                 desc: desc,\n-                sections: sections\n-                with method\n+                sections: sections,\n+                ..method\n             }\n-        }\n-        with doc\n+        },\n+        .. doc\n     }\n }\n \n@@ -58,11 +58,11 @@ fn fold_impl(fold: fold::fold<()>, doc: doc::impldoc) -> doc::impldoc {\n \n             {\n                 desc: desc,\n-                sections: sections\n-                with method\n+                sections: sections,\n+                .. method\n             }\n-        }\n-        with doc\n+        },\n+        .. doc\n     }\n }\n \n@@ -109,8 +109,8 @@ fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::section]) {\n             match copy current_section {\n               Some(section) => {\n                 current_section = Some({\n-                    body: section.body + ~\"\\n\" + line\n-                    with section\n+                    body: section.body + ~\"\\n\" + line,\n+                    .. section\n                 });\n               }\n               None => {"}, {"sha": "971b3200be1b407e28cff3911e46ff29edf5609e", "filename": "src/rustdoc/sort_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -23,8 +23,8 @@ fn run(\n     lteq: item_lteq\n ) -> doc::doc {\n     let fold = fold::fold({\n-        fold_mod: fold_mod\n-        with *fold::default_any_fold(lteq)\n+        fold_mod: fold_mod,\n+        .. *fold::default_any_fold(lteq)\n     });\n     fold.fold_doc(fold, doc)\n }\n@@ -36,8 +36,8 @@ fn fold_mod(\n ) -> doc::moddoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n     doc::moddoc_({\n-        items: sort::merge_sort(fold.ctxt, doc.items)\n-        with *doc\n+        items: sort::merge_sort(fold.ctxt, doc.items),\n+        .. *doc\n     })\n }\n "}, {"sha": "e82abf46795d8fc0dc29ed11756975602ebdda1c", "filename": "src/rustdoc/text_pass.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftext_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -25,8 +25,8 @@ fn run(\n         fold_item: fold_item,\n         fold_enum: fold_enum,\n         fold_trait: fold_trait,\n-        fold_impl: fold_impl\n-        with *fold::default_any_fold(op)\n+        fold_impl: fold_impl,\n+        .. *fold::default_any_fold(op)\n     });\n     fold.fold_doc(fold, doc)\n }\n@@ -41,8 +41,8 @@ fn fold_item(fold: fold::fold<op>, doc: doc::itemdoc) -> doc::itemdoc {\n     {\n         brief: maybe_apply_op(fold.ctxt, doc.brief),\n         desc: maybe_apply_op(fold.ctxt, doc.desc),\n-        sections: apply_to_sections(fold.ctxt, doc.sections)\n-        with doc\n+        sections: apply_to_sections(fold.ctxt, doc.sections),\n+        .. doc\n     }\n }\n \n@@ -59,20 +59,20 @@ fn fold_enum(fold: fold::fold<op>, doc: doc::enumdoc) -> doc::enumdoc {\n     {\n         variants: do par::map(doc.variants) |variant, copy fold| {\n             {\n-                desc: maybe_apply_op(fold.ctxt, variant.desc)\n-                with variant\n+                desc: maybe_apply_op(fold.ctxt, variant.desc),\n+                .. variant\n             }\n-        }\n-        with doc\n+        },\n+        .. doc\n     }\n }\n \n fn fold_trait(fold: fold::fold<op>, doc: doc::traitdoc) -> doc::traitdoc {\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n     {\n-        methods: apply_to_methods(fold.ctxt, doc.methods)\n-        with doc\n+        methods: apply_to_methods(fold.ctxt, doc.methods),\n+        .. doc\n     }\n }\n \n@@ -81,8 +81,8 @@ fn apply_to_methods(op: op, docs: ~[doc::methoddoc]) -> ~[doc::methoddoc] {\n         {\n             brief: maybe_apply_op(op, doc.brief),\n             desc: maybe_apply_op(op, doc.desc),\n-            sections: apply_to_sections(op, doc.sections)\n-            with doc\n+            sections: apply_to_sections(op, doc.sections),\n+            .. doc\n         }\n     }\n }\n@@ -91,8 +91,8 @@ fn fold_impl(fold: fold::fold<op>, doc: doc::impldoc) -> doc::impldoc {\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     {\n-        methods: apply_to_methods(fold.ctxt, doc.methods)\n-        with doc\n+        methods: apply_to_methods(fold.ctxt, doc.methods),\n+        .. doc\n     }\n }\n "}, {"sha": "518d0ae565f8b5b757d100178c25af33182ed20a", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -26,8 +26,8 @@ fn run(\n         fold_enum: fold_enum,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n-        fold_type: fold_type\n-        with *fold::default_any_fold(srv)\n+        fold_type: fold_type,\n+        .. *fold::default_any_fold(srv)\n     });\n     fold.fold_doc(fold, doc)\n }\n@@ -40,8 +40,8 @@ fn fold_fn(\n     let srv = fold.ctxt;\n \n     {\n-        sig: get_fn_sig(srv, doc.id())\n-        with doc\n+        sig: get_fn_sig(srv, doc.id()),\n+        .. doc\n     }\n }\n \n@@ -91,8 +91,8 @@ fn fold_const(\n               }\n               _ => fail ~\"fold_const: id not bound to a const item\"\n             }\n-        })\n-        with doc\n+        }),\n+        .. doc\n     }\n }\n \n@@ -128,11 +128,11 @@ fn fold_enum(\n             };\n \n             {\n-                sig: Some(sig)\n-                with variant\n+                sig: Some(sig),\n+                .. variant\n             }\n-        }\n-        with doc\n+        },\n+        .. doc\n     }\n }\n \n@@ -147,8 +147,8 @@ fn fold_trait(\n     doc: doc::traitdoc\n ) -> doc::traitdoc {\n     {\n-        methods: merge_methods(fold.ctxt, doc.id(), doc.methods)\n-        with doc\n+        methods: merge_methods(fold.ctxt, doc.id(), doc.methods),\n+        .. doc\n     }\n }\n \n@@ -159,8 +159,8 @@ fn merge_methods(\n ) -> ~[doc::methoddoc] {\n     do par::map(docs) |doc| {\n         {\n-            sig: get_method_sig(srv, item_id, doc.name)\n-            with doc\n+            sig: get_method_sig(srv, item_id, doc.name),\n+            .. doc\n         }\n     }\n }\n@@ -258,8 +258,8 @@ fn fold_impl(\n     {\n         trait_types: trait_types,\n         self_ty: self_ty,\n-        methods: merge_methods(fold.ctxt, doc.id(), doc.methods)\n-        with doc\n+        methods: merge_methods(fold.ctxt, doc.id(), doc.methods),\n+        .. doc\n     }\n }\n \n@@ -311,8 +311,8 @@ fn fold_type(\n               }\n               _ => fail ~\"expected type\"\n             }\n-        }\n-        with doc\n+        },\n+        .. doc\n     }\n }\n "}, {"sha": "47ed293e5c00de4c2c30e16816977123a2e92caa", "filename": "src/test/compile-fail/fru-extra-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Fcompile-fail%2Ffru-extra-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Fcompile-fail%2Ffru-extra-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffru-extra-field.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -7,5 +7,5 @@ type point = {x: int, y: int};\n fn main() {\n     let origin: point = {x: 0, y: 0};\n \n-    let origin3d: point = {z: 0 with origin};\n+    let origin3d: point = {z: 0,.. origin};\n }"}, {"sha": "4939364621d995d2200e9d4c34397c02a2f68627", "filename": "src/test/compile-fail/liveness-init-in-fru.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fru.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -4,6 +4,6 @@ type point = {x: int, y: int};\n \n fn main() {\n     let mut origin: point;\n-    origin = {x: 10 with origin}; //~ ERROR use of possibly uninitialized variable: `origin`\n+    origin = {x: 10,.. origin}; //~ ERROR use of possibly uninitialized variable: `origin`\n     copy origin;\n }"}, {"sha": "06593df79df3f3e6b970921d48618a08b70a1649", "filename": "src/test/compile-fail/rec-extend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Fcompile-fail%2Frec-extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Fcompile-fail%2Frec-extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-extend.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -4,5 +4,5 @@ fn main() {\n \n     let a = {foo: 0i};\n \n-    let b = {foo: true with a};\n+    let b = {foo: true,.. a};\n }"}, {"sha": "e194f73c75313f698f1eb87403a04917a3df5244", "filename": "src/test/compile-fail/record-with-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -9,7 +9,7 @@ struct my_resource {\n fn main() {\n     {\n         let a = {x: 0, y: my_resource(20)};\n-        let b = {x: 2 with a};\n+        let b = {x: 2,.. a};\n         log(error, (a, b));\n     }\n }"}, {"sha": "db29bbaaf64408d909b4fb730297348f5a66a662", "filename": "src/test/run-fail/issue-948.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Frun-fail%2Fissue-948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Frun-fail%2Fissue-948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-948.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:beep boop\n fn main() {\n     let origin = {x: 0, y: 0};\n-    let f: {x:int,y:int} = {x: (fail ~\"beep boop\") with origin};\n+    let f: {x:int,y:int} = {x: (fail ~\"beep boop\"),.. origin};\n }"}, {"sha": "da7b06f4652a26b4f4b01a9556f532bc13cf3d3a", "filename": "src/test/run-pass/issue-2463.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Frun-pass%2Fissue-2463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Frun-pass%2Fissue-2463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2463.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -8,12 +8,12 @@ fn main() {\n     let y = {\n         f: 1,\n         g: 1,\n-        with x\n+        .. x\n     };\n \n     let z = {\n         f: 1,\n-        with x\n+        .. x\n     };\n \n }"}, {"sha": "50bf3f4d3a169302ad51180062a97de085f466c2", "filename": "src/test/run-pass/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Frun-pass%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Frun-pass%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack4.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -47,7 +47,7 @@ type biggy = {\n \n fn getbig(i: biggy) {\n     if i.a00 != 0u64 {\n-        getbig({a00: i.a00 - 1u64 with i});\n+        getbig({a00: i.a00 - 1u64,.. i});\n     }\n }\n "}, {"sha": "32754146e4679895924a416327fa8735b5e17285", "filename": "src/test/run-pass/rec-extend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Frun-pass%2Frec-extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc/src%2Ftest%2Frun-pass%2Frec-extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-extend.rs?ref=200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "patch": "@@ -6,8 +6,8 @@ type point = {x: int, y: int};\n \n fn main() {\n     let origin: point = {x: 0, y: 0};\n-    let right: point = {x: origin.x + 10 with origin};\n-    let up: point = {y: origin.y + 10 with origin};\n+    let right: point = {x: origin.x + 10,.. origin};\n+    let up: point = {y: origin.y + 10,.. origin};\n     assert (origin.x == 0);\n     assert (origin.y == 0);\n     assert (right.x == 10);"}]}