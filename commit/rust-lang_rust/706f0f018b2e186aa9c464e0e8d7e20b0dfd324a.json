{"sha": "706f0f018b2e186aa9c464e0e8d7e20b0dfd324a", "node_id": "C_kwDOAAsO6NoAKDcwNmYwZjAxOGIyZTE4NmFhOWM0NjRlMGU4ZDdlMjBiMGRmZDMyNGE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-09-16T21:28:02Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-09-16T21:35:00Z"}, "message": "Pass --cfg=bootstrap for rustdoc for proc_macro crates\n\nThis commit does three things:\n\n* First, it passes --cfg=bootstrap on stage 0 for rustdoc\n  invocations on proc_macro crates. This mirrors what we\n  do already for rustc invocations of those, and is needed\n  because cargo doesn't respect RUSTFLAGS or RUSTDOCFLAGS\n  when confronted with a proc macro.\n* Second, it marks the bootstrap config variable as expected.\n  This is needed both on later stages where it's not set,\n  but also on stage 0, where it is set.\n* Third, it adjusts the comment in the rustc wrapper to better\n  reflect the reason why we set the bootstrap variable as\n  expected: due to recent changes, setting it as expected\n  is also required even if the cfg variable is passed: ebf4cc361e0d0f11a25b42372bd629953365d17e .", "tree": {"sha": "9712dc8ae5eaf0951cb27fbc895240b8de920190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9712dc8ae5eaf0951cb27fbc895240b8de920190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/706f0f018b2e186aa9c464e0e8d7e20b0dfd324a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/706f0f018b2e186aa9c464e0e8d7e20b0dfd324a", "html_url": "https://github.com/rust-lang/rust/commit/706f0f018b2e186aa9c464e0e8d7e20b0dfd324a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/706f0f018b2e186aa9c464e0e8d7e20b0dfd324a/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a0407814a6b5a04f0929105631e9c69e293e9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a0407814a6b5a04f0929105631e9c69e293e9d", "html_url": "https://github.com/rust-lang/rust/commit/35a0407814a6b5a04f0929105631e9c69e293e9d"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "e96f8b0d3125fe172d453801ac6aea0e7db52d4a", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/706f0f018b2e186aa9c464e0e8d7e20b0dfd324a/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/706f0f018b2e186aa9c464e0e8d7e20b0dfd324a/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=706f0f018b2e186aa9c464e0e8d7e20b0dfd324a", "patch": "@@ -139,10 +139,8 @@ fn main() {\n         // Cargo doesn't pass RUSTFLAGS to proc_macros:\n         // https://github.com/rust-lang/cargo/issues/4423\n         // Thus, if we are on stage 0, we explicitly set `--cfg=bootstrap`.\n-        // We also declare that the flag is expected, which is mainly needed for\n-        // later stages so that they don't warn about #[cfg(bootstrap)],\n-        // but enabling it for stage 0 too lets any warnings, if they occur,\n-        // occur more early on, e.g. about #[cfg(bootstrap = \"foo\")].\n+        // We also declare that the flag is expected, which we need to do to not\n+        // get warnings about it being unexpected.\n         if stage == \"0\" {\n             cmd.arg(\"--cfg=bootstrap\");\n         }"}, {"sha": "e69cab956c5078eed10822aefc6cf5b0489c718d", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/706f0f018b2e186aa9c464e0e8d7e20b0dfd324a/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/706f0f018b2e186aa9c464e0e8d7e20b0dfd324a/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=706f0f018b2e186aa9c464e0e8d7e20b0dfd324a", "patch": "@@ -11,6 +11,7 @@ include!(\"../dylib_util.rs\");\n \n fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n+    let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n     let rustdoc = env::var_os(\"RUSTDOC_REAL\").expect(\"RUSTDOC_REAL was not set\");\n     let libdir = env::var_os(\"RUSTDOC_LIBDIR\").expect(\"RUSTDOC_LIBDIR was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n@@ -62,6 +63,16 @@ fn main() {\n             cmd.arg(\"-Clink-arg=-Wl,--threads=1\");\n         }\n     }\n+    // Cargo doesn't pass RUSTDOCFLAGS to proc_macros:\n+    // https://github.com/rust-lang/cargo/issues/4423\n+    // Thus, if we are on stage 0, we explicitly set `--cfg=bootstrap`.\n+    // We also declare that the flag is expected, which we need to do to not\n+    // get warnings about it being unexpected.\n+    if stage == \"0\" {\n+        cmd.arg(\"--cfg=bootstrap\");\n+    }\n+    cmd.arg(\"-Zunstable-options\");\n+    cmd.arg(\"--check-cfg=values(bootstrap)\");\n \n     if verbose > 1 {\n         eprintln!("}]}