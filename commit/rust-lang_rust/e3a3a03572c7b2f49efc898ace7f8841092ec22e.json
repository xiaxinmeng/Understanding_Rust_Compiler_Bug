{"sha": "e3a3a03572c7b2f49efc898ace7f8841092ec22e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYTNhMDM1NzJjN2IyZjQ5ZWZjODk4YWNlN2Y4ODQxMDkyZWMyMmU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-09T00:20:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-09T00:20:04Z"}, "message": "Fix boxed returns.", "tree": {"sha": "463d40b27d31e6e2ee36dac68afc24af5bef605a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/463d40b27d31e6e2ee36dac68afc24af5bef605a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a3a03572c7b2f49efc898ace7f8841092ec22e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a3a03572c7b2f49efc898ace7f8841092ec22e", "html_url": "https://github.com/rust-lang/rust/commit/e3a3a03572c7b2f49efc898ace7f8841092ec22e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a3a03572c7b2f49efc898ace7f8841092ec22e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "264de9c7fcffe265eb09dc992c3ba023dd45dc9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/264de9c7fcffe265eb09dc992c3ba023dd45dc9a", "html_url": "https://github.com/rust-lang/rust/commit/264de9c7fcffe265eb09dc992c3ba023dd45dc9a"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "e48c693643d67ec5629296fb15295878839b9af4", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3a03572c7b2f49efc898ace7f8841092ec22e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3a03572c7b2f49efc898ace7f8841092ec22e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e3a3a03572c7b2f49efc898ace7f8841092ec22e", "patch": "@@ -1395,13 +1395,20 @@ impure fn trans_args(@block_ctxt cx, &vec[@ast.expr] es, @typeck.ty fn_ty)\n }\n \n impure fn trans_call(@block_ctxt cx, @ast.expr f,\n-                     vec[@ast.expr] args) -> result {\n+                     vec[@ast.expr] args, &ast.ann ann) -> result {\n     auto f_res = trans_lval(cx, f);\n     check (! f_res._1);\n     auto fn_ty = typeck.expr_ty(f);\n+    auto ret_ty = typeck.ann_to_type(ann);\n     auto args_res = trans_args(f_res._0.bcx, args, fn_ty);\n-    ret res(args_res._0,\n-            args_res._0.build.FastCall(f_res._0.val, args_res._1));\n+    auto retval = args_res._0.build.FastCall(f_res._0.val, args_res._1);\n+\n+    // Retval doesn't correspond to anything really tangible in the frame, but\n+    // it's a ref all the same, so we put a note here to drop it when we're\n+    // done in this scope.\n+    find_scope_cx(cx).cleanups += clean(bind drop_ty(_, retval, ret_ty));\n+\n+    ret res(args_res._0, retval);\n }\n \n impure fn trans_tup(@block_ctxt cx, vec[ast.elt] elts,\n@@ -1502,8 +1509,8 @@ impure fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret copy_ty(rhs_res.bcx, false, lhs_res._0.val, v, t);\n         }\n \n-        case (ast.expr_call(?f, ?args, _)) {\n-            ret trans_call(cx, f, args);\n+        case (ast.expr_call(?f, ?args, ?ann)) {\n+            ret trans_call(cx, f, args, ann);\n         }\n \n         case (ast.expr_cast(?e, _, ?ann)) {\n@@ -1590,7 +1597,21 @@ impure fn trans_ret(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n     auto r = res(cx, C_nil());\n     alt (e) {\n         case (some[@ast.expr](?x)) {\n+            auto t = typeck.expr_ty(x);\n             r = trans_expr(cx, x);\n+            if (typeck.type_is_structural(t)) {\n+                // We usually treat structurals by-pointer; in particular,\n+                // trans_expr will have given us a structure pointer. But in\n+                // this case we're about to return. LLVM wants a first-class\n+                // value here (which makes sense; the frame is going away!)\n+                r.val = r.bcx.build.Load(r.val);\n+            }\n+            if (typeck.type_is_boxed(t)) {\n+                // A return is an implicit ++ on the refcount on any boxed\n+                // value, as it is being newly referenced as the anonymous\n+                // 'return value' from the function, in the caller frame.\n+                r.bcx = incr_refcnt(r.bcx, r.val).bcx;\n+            }\n         }\n         case (_) { /* fall through */  }\n     }\n@@ -1611,14 +1632,7 @@ impure fn trans_ret(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n     }\n \n     alt (e) {\n-        case (some[@ast.expr](?e)) {\n-            if (typeck.type_is_structural(typeck.expr_ty(e))) {\n-                // We usually treat structurals by-pointer; in particular,\n-                // trans_expr will have given us a structure pointer. But in\n-                // this case we're about to return. LLVM wants a first-class\n-                // value here (which makes sense; the frame is going away!)\n-                r.val = r.bcx.build.Load(r.val);\n-            }\n+        case (some[@ast.expr](_)) {\n             r.val = r.bcx.build.Ret(r.val);\n             ret r;\n         }"}]}