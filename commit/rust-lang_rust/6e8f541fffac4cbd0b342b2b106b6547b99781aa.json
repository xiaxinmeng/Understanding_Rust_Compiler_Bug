{"sha": "6e8f541fffac4cbd0b342b2b106b6547b99781aa", "node_id": "C_kwDOAAsO6NoAKDZlOGY1NDFmZmZhYzRjYmQwYjM0MmIyYjEwNmI2NTQ3Yjk5NzgxYWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-19T13:26:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-19T13:26:28Z"}, "message": "Rollup merge of #98136 - fee1-dead-contrib:rename_impl_constness, r=oli-obk\n\nRename `impl_constness` to `constness`\n\nThe current code is a basis for `is_const_fn_raw`, and `impl_constness`\nis no longer a valid name, which is previously used for determining the\nconstness of impls, and not items in general.\n\nr? `@oli-obk`", "tree": {"sha": "cb612db96104e7951152e513c984939b8cbcb8f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb612db96104e7951152e513c984939b8cbcb8f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e8f541fffac4cbd0b342b2b106b6547b99781aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiryQECRBK7hj4Ov3rIwAAyDYIAKcljZcAro4djwBmFDfg1jIA\nGVsj5uY4XxJ4EdRckWT9dPIiafVD4s8ZH3ArOwdVDObL8lUlemVN9Vwl8dfHJ27I\nFxdsmRK5P7PutGiqf9+pCZ8XqKCMlizAGR7zzaHlGulVS+7hbLKEYlkT/zN3EeZ6\nJD8kdOHtLPw4zdPFVp5kvMnEUc6UiwX2fACegqzSaOJ1nXWWptHToP6t1uCb6h4W\ntiGo+9abAg5aaOibcpUg4Ny23qCI6bsW1QG6g2DnGWWSLRcm6jaSLMFTlEPp8oky\n2RumbdvW2iyiqW0D9uWjXHs10YkCCXsIDpnjCqvQL5i7yS+8iVJmzZ8cB37Iqiw=\n=KZhD\n-----END PGP SIGNATURE-----\n", "payload": "tree cb612db96104e7951152e513c984939b8cbcb8f8\nparent 3174a694e08d00beff59a07d4117b9ccdb870dd9\nparent 26ac45614bac5f8ebdd1ad53c7b9f189e9b6b6d6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655645188 +0200\ncommitter GitHub <noreply@github.com> 1655645188 +0200\n\nRollup merge of #98136 - fee1-dead-contrib:rename_impl_constness, r=oli-obk\n\nRename `impl_constness` to `constness`\n\nThe current code is a basis for `is_const_fn_raw`, and `impl_constness`\nis no longer a valid name, which is previously used for determining the\nconstness of impls, and not items in general.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8f541fffac4cbd0b342b2b106b6547b99781aa", "html_url": "https://github.com/rust-lang/rust/commit/6e8f541fffac4cbd0b342b2b106b6547b99781aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e8f541fffac4cbd0b342b2b106b6547b99781aa/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3174a694e08d00beff59a07d4117b9ccdb870dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3174a694e08d00beff59a07d4117b9ccdb870dd9", "html_url": "https://github.com/rust-lang/rust/commit/3174a694e08d00beff59a07d4117b9ccdb870dd9"}, {"sha": "26ac45614bac5f8ebdd1ad53c7b9f189e9b6b6d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ac45614bac5f8ebdd1ad53c7b9f189e9b6b6d6", "html_url": "https://github.com/rust-lang/rust/commit/26ac45614bac5f8ebdd1ad53c7b9f189e9b6b6d6"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "f1674d04f8d15f16be1f3011eaead81daad003e7", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=6e8f541fffac4cbd0b342b2b106b6547b99781aa", "patch": "@@ -17,13 +17,14 @@ pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n \n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     let parent_id = tcx.local_parent(def_id);\n-    tcx.def_kind(parent_id) == DefKind::Impl\n-        && tcx.impl_constness(parent_id) == hir::Constness::Const\n+    tcx.def_kind(parent_id) == DefKind::Impl && tcx.constness(parent_id) == hir::Constness::Const\n }\n \n-/// Checks whether the function has a `const` modifier or, in case it is an intrinsic, whether\n-/// said intrinsic has a `rustc_const_{un,}stable` attribute.\n-fn impl_constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n+/// Checks whether an item is considered to be `const`. If it is a constructor, it is const. If\n+/// it is a trait impl/function, return if it has a `const` modifier. If it is an intrinsic,\n+/// report whether said intrinsic has a `rustc_const_{un,}stable` attribute. Otherwise, return\n+/// `Constness::NotConst`.\n+fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n     let def_id = def_id.expect_local();\n     let node = tcx.hir().get_by_def_id(def_id);\n \n@@ -77,5 +78,5 @@ fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    *providers = Providers { impl_constness, is_promotable_const_fn, ..*providers };\n+    *providers = Providers { constness, is_promotable_const_fn, ..*providers };\n }"}, {"sha": "069fbed36ee3a0190797be7ad2e7e304a0bbabe2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=6e8f541fffac4cbd0b342b2b106b6547b99781aa", "patch": "@@ -753,7 +753,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                                 callee = did;\n                             }\n \n-                            if let hir::Constness::NotConst = tcx.impl_constness(data.impl_def_id) {\n+                            if let hir::Constness::NotConst = tcx.constness(data.impl_def_id) {\n                                 self.check_op(ops::FnCallNonConst {\n                                     caller,\n                                     callee,"}, {"sha": "0bea2a10da8967094d0ef605cd53092eae6ab028", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=6e8f541fffac4cbd0b342b2b106b6547b99781aa", "patch": "@@ -214,7 +214,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     impl_parent => { table }\n     impl_polarity => { table_direct }\n     impl_defaultness => { table_direct }\n-    impl_constness => { table_direct }\n+    constness => { table_direct }\n     coerce_unsized_info => { table }\n     mir_const_qualif => { table }\n     rendered_const => { table }"}, {"sha": "75286b8906871a81e2a4c0cb05002c57bd460c4e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6e8f541fffac4cbd0b342b2b106b6547b99781aa", "patch": "@@ -1063,7 +1063,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         record_array!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n             f.did.index\n@@ -1092,7 +1092,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -1175,7 +1175,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.repr_options[def_id] <- adt_def.repr());\n-        self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data)));\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n@@ -1226,7 +1226,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     }\n                 };\n                 self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n-                self.tables.impl_constness.set(def_id.index, hir::Constness::NotConst);\n+                self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n                     container,\n                     has_self: trait_item.fn_has_self_parameter,\n@@ -1290,7 +1290,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 } else {\n                     hir::Constness::NotConst\n                 };\n-                self.tables.impl_constness.set(def_id.index, constness);\n+                self.tables.constness.set(def_id.index, constness);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n                     container,\n                     has_self: impl_item.fn_has_self_parameter,\n@@ -1413,7 +1413,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 self.tables.asyncness.set(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n-                self.tables.impl_constness.set(def_id.index, sig.header.constness);\n+                self.tables.constness.set(def_id.index, sig.header.constness);\n                 EntryKind::Fn\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n@@ -1437,7 +1437,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());\n-                self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n+                self.tables.constness.set(def_id.index, hir::Constness::Const);\n \n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n@@ -1468,7 +1468,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 self.tables.impl_defaultness.set(def_id.index, *defaultness);\n-                self.tables.impl_constness.set(def_id.index, *constness);\n+                self.tables.constness.set(def_id.index, *constness);\n \n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n                 if let Some(trait_ref) = trait_ref {\n@@ -1934,7 +1934,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 } else {\n                     hir::Constness::NotConst\n                 };\n-                self.tables.impl_constness.set(def_id.index, constness);\n+                self.tables.constness.set(def_id.index, constness);\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignFn);\n             }\n             hir::ForeignItemKind::Static(..) => {"}, {"sha": "a58c0e68ee38c3dfe1506a2805549c911589835e", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=6e8f541fffac4cbd0b342b2b106b6547b99781aa", "patch": "@@ -364,7 +364,7 @@ define_tables! {\n     thir_abstract_const: Table<DefIndex, LazyValue<&'static [thir::abstract_const::Node<'static>]>>,\n     impl_parent: Table<DefIndex, RawDefId>,\n     impl_polarity: Table<DefIndex, ty::ImplPolarity>,\n-    impl_constness: Table<DefIndex, hir::Constness>,\n+    constness: Table<DefIndex, hir::Constness>,\n     is_intrinsic: Table<DefIndex, ()>,\n     impl_defaultness: Table<DefIndex, hir::Defaultness>,\n     // FIXME(eddyb) perhaps compute this on the fly if cheap enough?"}, {"sha": "ca2c03cb614bb5747980af10bb4f8cdcb4a7f423", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=6e8f541fffac4cbd0b342b2b106b6547b99781aa", "patch": "@@ -590,9 +590,9 @@ rustc_queries! {\n     /// not have the feature gate active).\n     ///\n     /// **Do not call this function manually.** It is only meant to cache the base data for the\n-    /// `is_const_fn` function.\n-    query impl_constness(key: DefId) -> hir::Constness {\n-        desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n+    /// `is_const_fn` function. Consider using `is_const_fn` or `is_const_fn_raw` instead.\n+    query constness(key: DefId) -> hir::Constness {\n+        desc { |tcx| \"checking if item is const: `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }"}, {"sha": "6789f02c46abfd03bb832ff4201b7a7476965876", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6e8f541fffac4cbd0b342b2b106b6547b99781aa", "patch": "@@ -2341,7 +2341,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn is_const_fn_raw(self, def_id: DefId) -> bool {\n         matches!(self.def_kind(def_id), DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..))\n-            && self.impl_constness(def_id) == hir::Constness::Const\n+            && self.constness(def_id) == hir::Constness::Const\n     }\n \n     #[inline]"}, {"sha": "b9c95813121398e49401e84ba23ae80e580bb8b0", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=6e8f541fffac4cbd0b342b2b106b6547b99781aa", "patch": "@@ -376,7 +376,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let (did, constness) = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n             if let Some(item_id) = self.associated_item_def_ids(impl_did).first() {\n                 if validate(self, impl_did).is_ok() {\n-                    return Some((*item_id, self.impl_constness(impl_did)));\n+                    return Some((*item_id, self.constness(impl_did)));\n                 }\n             }\n             None"}, {"sha": "cfd50c1afb9e228ffb56978ae3c20f0f13979193", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=6e8f541fffac4cbd0b342b2b106b6547b99781aa", "patch": "@@ -970,7 +970,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 if let Some(impl_def_id) = relevant_impl {\n                     // Check that `impl Drop` is actually const, if there is a custom impl\n-                    if self.tcx().impl_constness(impl_def_id) == hir::Constness::Const {\n+                    if self.tcx().constness(impl_def_id) == hir::Constness::Const {\n                         candidates.vec.push(ConstDestructCandidate(Some(impl_def_id)));\n                     }\n                 } else {"}, {"sha": "297fbfa1c327653e60e6551ab68d28a619729a69", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8f541fffac4cbd0b342b2b106b6547b99781aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=6e8f541fffac4cbd0b342b2b106b6547b99781aa", "patch": "@@ -1119,8 +1119,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             if obligation.is_const() {\n                 match candidate {\n                     // const impl\n-                    ImplCandidate(def_id)\n-                        if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n+                    ImplCandidate(def_id) if tcx.constness(def_id) == hir::Constness::Const => {}\n                     // const param\n                     ParamCandidate(trait_pred) if trait_pred.is_const_if_const() => {}\n                     // auto trait impl"}]}