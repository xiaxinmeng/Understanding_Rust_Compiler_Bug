{"sha": "499e6f88440730375fea8facbc433de9818f48dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OWU2Zjg4NDQwNzMwMzc1ZmVhOGZhY2JjNDMzZGU5ODE4ZjQ4ZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-05T05:24:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-05T05:24:08Z"}, "message": "Auto merge of #34594 - willcrichton:master, r=nrc\n\nMove LLVM cleanup so modules are accessible during `after_llvm` phase\n\nFix for #34432. Also added a new phase controller `after_compilation_done` that gets called at the very end (i.e. after linking) at the suggestion of @nrc. The added test will segfault if the modules get deallocated too early, so it ensures the LLVM is not prematurely cleaned up.\n\nr? @nrc", "tree": {"sha": "df570f4ee18fb428ac8581c0a9a3a249249909f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df570f4ee18fb428ac8581c0a9a3a249249909f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/499e6f88440730375fea8facbc433de9818f48dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/499e6f88440730375fea8facbc433de9818f48dc", "html_url": "https://github.com/rust-lang/rust/commit/499e6f88440730375fea8facbc433de9818f48dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/499e6f88440730375fea8facbc433de9818f48dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4c4f8c2910d717044a041039a1a1aa914ff59e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4c4f8c2910d717044a041039a1a1aa914ff59e", "html_url": "https://github.com/rust-lang/rust/commit/0f4c4f8c2910d717044a041039a1a1aa914ff59e"}, {"sha": "5b0f334c6b0fdc7e022537e42fd39e3b17edd8f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0f334c6b0fdc7e022537e42fd39e3b17edd8f9", "html_url": "https://github.com/rust-lang/rust/commit/5b0f334c6b0fdc7e022537e42fd39e3b17edd8f9"}], "stats": {"total": 119, "additions": 117, "deletions": 2}, "files": [{"sha": "277789f5312eee0dd9ce8c73e133714ec6d0832a", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/499e6f88440730375fea8facbc433de9818f48dc/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/499e6f88440730375fea8facbc433de9818f48dc/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=499e6f88440730375fea8facbc433de9818f48dc", "patch": "@@ -225,8 +225,15 @@ pub fn compile_input(sess: &Session,\n                             phase5_result);\n     phase5_result?;\n \n+    write::cleanup_llvm(&trans);\n+\n     phase_6_link_output(sess, &trans, &outputs);\n \n+    controller_entry_point!(compilation_done,\n+                            sess,\n+                            CompileState::state_when_compilation_done(input, sess, outdir, output),\n+                            Ok(()));\n+\n     Ok(())\n }\n \n@@ -274,6 +281,7 @@ pub struct CompileController<'a> {\n     pub after_hir_lowering: PhaseController<'a>,\n     pub after_analysis: PhaseController<'a>,\n     pub after_llvm: PhaseController<'a>,\n+    pub compilation_done: PhaseController<'a>,\n \n     pub make_glob_map: MakeGlobMap,\n }\n@@ -286,6 +294,7 @@ impl<'a> CompileController<'a> {\n             after_hir_lowering: PhaseController::basic(),\n             after_analysis: PhaseController::basic(),\n             after_llvm: PhaseController::basic(),\n+            compilation_done: PhaseController::basic(),\n             make_glob_map: MakeGlobMap::No,\n         }\n     }\n@@ -453,6 +462,17 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n             ..CompileState::empty(input, session, out_dir)\n         }\n     }\n+\n+    fn state_when_compilation_done(input: &'a Input,\n+                                    session: &'ast Session,\n+                                    out_dir: &'a Option<PathBuf>,\n+                                    out_file: &'a Option<PathBuf>)\n+                                    -> CompileState<'a, 'b, 'ast, 'tcx> {\n+        CompileState {\n+            out_file: out_file.as_ref().map(|s| &**s),\n+            ..CompileState::empty(input, session, out_dir)\n+        }\n+    }\n }\n \n pub fn phase_1_parse_input<'a>(sess: &'a Session,"}, {"sha": "ec20381d1890d1f55f5d6e543104503ac4542ae5", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/499e6f88440730375fea8facbc433de9818f48dc/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/499e6f88440730375fea8facbc433de9818f48dc/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=499e6f88440730375fea8facbc433de9818f48dc", "patch": "@@ -616,11 +616,19 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n         }\n     }\n \n-    llvm::LLVMDisposeModule(llmod);\n-    llvm::LLVMContextDispose(llcx);\n     llvm::LLVMRustDisposeTargetMachine(tm);\n }\n \n+\n+pub fn cleanup_llvm(trans: &CrateTranslation) {\n+    for module in trans.modules.iter() {\n+        unsafe {\n+            llvm::LLVMDisposeModule(module.llmod);\n+            llvm::LLVMContextDispose(module.llcx);\n+        }\n+    }\n+}\n+\n pub fn run_passes(sess: &Session,\n                   trans: &CrateTranslation,\n                   output_types: &HashMap<OutputType, Option<PathBuf>>,"}, {"sha": "6a8e1728b20a83773edaac0598ce0e119455cdd0", "filename": "src/test/run-make/llvm-phase/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/499e6f88440730375fea8facbc433de9818f48dc/src%2Ftest%2Frun-make%2Fllvm-phase%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/499e6f88440730375fea8facbc433de9818f48dc/src%2Ftest%2Frun-make%2Fllvm-phase%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fllvm-phase%2FMakefile?ref=499e6f88440730375fea8facbc433de9818f48dc", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) test.rs\n+\t$(call RUN,test $(RUSTC))"}, {"sha": "402b5ed83556cd5f5326168269e67c157c554de5", "filename": "src/test/run-make/llvm-phase/test.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/499e6f88440730375fea8facbc433de9818f48dc/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/499e6f88440730375fea8facbc433de9818f48dc/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs?ref=499e6f88440730375fea8facbc433de9818f48dc", "patch": "@@ -0,0 +1,82 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(plugin, rustc_private, box_syntax)]\n+\n+extern crate rustc;\n+extern crate rustc_driver;\n+extern crate rustc_llvm;\n+#[macro_use] extern crate syntax;\n+extern crate getopts;\n+\n+use rustc_driver::{CompilerCalls, Compilation};\n+use rustc_driver::driver::CompileController;\n+use rustc::session::Session;\n+use syntax::codemap::FileLoader;\n+use std::io;\n+use std::path::{PathBuf, Path};\n+\n+struct JitLoader;\n+\n+impl FileLoader for JitLoader {\n+    fn file_exists(&self, _: &Path) -> bool { true }\n+    fn abs_path(&self, _: &Path) -> Option<PathBuf> { None }\n+    fn read_file(&self, _: &Path) -> io::Result<String> {\n+        Ok(r#\"\n+#[no_mangle]\n+pub fn test_add(a: i32, b: i32) -> i32 { a + b }\n+\"#.to_string())\n+    }\n+}\n+\n+#[derive(Copy, Clone)]\n+struct JitCalls;\n+\n+impl<'a> CompilerCalls<'a> for JitCalls {\n+    fn build_controller(&mut self,\n+                        _: &Session,\n+                        _: &getopts::Matches)\n+                        -> CompileController<'a> {\n+        let mut cc = CompileController::basic();\n+        cc.after_llvm.stop = Compilation::Stop;\n+        cc.after_llvm.run_callback_on_error = true;\n+        cc.after_llvm.callback = Box::new(|state| {\n+            state.session.abort_if_errors();\n+            let trans = state.trans.unwrap();\n+            assert_eq!(trans.modules.len(), 1);\n+            let rs_llmod = trans.modules[0].llmod;\n+            unsafe { rustc_llvm::LLVMDumpModule(rs_llmod) };\n+        });\n+        cc\n+    }\n+}\n+\n+fn main() {\n+    use rustc_driver;\n+\n+    let mut path = match std::env::args().nth(2) {\n+        Some(path) => PathBuf::from(&path),\n+        None => panic!(\"missing rustc path\")\n+    };\n+\n+    // Remove two segments from rustc path to get sysroot.\n+    path.pop();\n+    path.pop();\n+\n+    let args: Vec<String> =\n+        format!(\"_ _ --sysroot {} --crate-type dylib\", path.to_str().unwrap())\n+        .split(' ').map(|s| s.to_string()).collect();\n+\n+    let (result, _) = rustc_driver::run_compiler_with_file_loader(\n+        &args, &mut JitCalls, box JitLoader);\n+    if let Err(n) = result {\n+        panic!(\"Error {}\", n);\n+    }\n+}"}]}