{"sha": "f52ef3b839e688ea02fad67e7b45e9d68f26614e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MmVmM2I4MzllNjg4ZWEwMmZhZDY3ZTdiNDVlOWQ2OGYyNjYxNGU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T19:46:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T19:46:27Z"}, "message": "Rollup merge of #52835 - GuillaumeGomez:ice-rustdoc-links, r=eddyb\n\nFix Alias intra doc ICE\n\nFixes #52611.\n\ncc @QuietMisdreavus\n\nr? @varkor", "tree": {"sha": "74c16fcb75efa12b09f0aa22e65bb33e3186b636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74c16fcb75efa12b09f0aa22e65bb33e3186b636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f52ef3b839e688ea02fad67e7b45e9d68f26614e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYg4TCRBK7hj4Ov3rIwAAdHIIAGWW614pLuXQlFbGxzVKYXzX\nEc0xgbkBkbo1itbt1fk4++HXG9bUFvO0HC2mv3SkVDftt/RzWCFdKDVFS+N4VrSq\n7OMsAW8JFH/qeBYUottfDsz/rxyKWesx0kxXK+5RdYyhxWcIjXG6IMXrPfzo6Vm9\nQ3eSiRy9scoaSGWG3lXhDQeSqW/uQGG5Vr6RvMq/nxOU7SG/lKBEkWh1uQ1LCvvy\nKwMTgRVVofXuTd/0+hjzWQL5ANGYkbqVzC+IfWFjX3ij/vl4R/PBu9jMaD6Trql3\ng9nTeNWaA88zpZ98yrP8Mb5UW16HX4v2Z5SdLqdzRkEihURz6DLLWdyqyBlUILk=\n=zkP+\n-----END PGP SIGNATURE-----\n", "payload": "tree 74c16fcb75efa12b09f0aa22e65bb33e3186b636\nparent d5fcd27eb9b79d7e191d39289aaffd6277312ed2\nparent d94bdf8c66932b0cecc0024508316131c797dc2a\nauthor Pietro Albini <pietro@pietroalbini.org> 1533152787 +0200\ncommitter GitHub <noreply@github.com> 1533152787 +0200\n\nRollup merge of #52835 - GuillaumeGomez:ice-rustdoc-links, r=eddyb\n\nFix Alias intra doc ICE\n\nFixes #52611.\n\ncc @QuietMisdreavus\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f52ef3b839e688ea02fad67e7b45e9d68f26614e", "html_url": "https://github.com/rust-lang/rust/commit/f52ef3b839e688ea02fad67e7b45e9d68f26614e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f52ef3b839e688ea02fad67e7b45e9d68f26614e/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5fcd27eb9b79d7e191d39289aaffd6277312ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5fcd27eb9b79d7e191d39289aaffd6277312ed2", "html_url": "https://github.com/rust-lang/rust/commit/d5fcd27eb9b79d7e191d39289aaffd6277312ed2"}, {"sha": "d94bdf8c66932b0cecc0024508316131c797dc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d94bdf8c66932b0cecc0024508316131c797dc2a", "html_url": "https://github.com/rust-lang/rust/commit/d94bdf8c66932b0cecc0024508316131c797dc2a"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "45566230fdaae29cdcb5f88a40f229779756bab8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f52ef3b839e688ea02fad67e7b45e9d68f26614e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52ef3b839e688ea02fad67e7b45e9d68f26614e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f52ef3b839e688ea02fad67e7b45e9d68f26614e", "patch": "@@ -1194,7 +1194,8 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n         })?;\n         match ty.def {\n             Def::Struct(did) | Def::Union(did) | Def::Enum(did) | Def::TyAlias(did) => {\n-                let item = cx.tcx.inherent_impls(did).iter()\n+                let item = cx.tcx.inherent_impls(did)\n+                                 .iter()\n                                  .flat_map(|imp| cx.tcx.associated_items(*imp))\n                                  .find(|item| item.ident.name == item_name);\n                 if let Some(item) = item {\n@@ -1205,26 +1206,29 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n                     };\n                     Ok((ty.def, Some(format!(\"{}.{}\", out, item_name))))\n                 } else {\n-                    let is_enum = match ty.def {\n-                        Def::Enum(_) => true,\n-                        _ => false,\n-                    };\n-                    let elem = if is_enum {\n-                        cx.tcx.adt_def(did).all_fields().find(|item| item.ident.name == item_name)\n-                    } else {\n-                        cx.tcx.adt_def(did)\n-                              .non_enum_variant()\n-                              .fields\n-                              .iter()\n-                              .find(|item| item.ident.name == item_name)\n-                    };\n-                    if let Some(item) = elem {\n-                        Ok((ty.def,\n-                            Some(format!(\"{}.{}\",\n-                                         if is_enum { \"variant\" } else { \"structfield\" },\n-                                         item.ident))))\n-                    } else {\n-                        Err(())\n+                    match cx.tcx.type_of(did).sty {\n+                        ty::TyAdt(def, _) => {\n+                            if let Some(item) = if def.is_enum() {\n+                                def.all_fields().find(|item| item.ident.name == item_name)\n+                            } else {\n+                                def.non_enum_variant()\n+                                   .fields\n+                                   .iter()\n+                                   .find(|item| item.ident.name == item_name)\n+                            } {\n+                                Ok((ty.def,\n+                                    Some(format!(\"{}.{}\",\n+                                                 if def.is_enum() {\n+                                                     \"variant\"\n+                                                 } else {\n+                                                     \"structfield\"\n+                                                 },\n+                                                 item.ident))))\n+                            } else {\n+                                Err(())\n+                            }\n+                        }\n+                        _ => Err(()),\n                     }\n                 }\n             }"}, {"sha": "287913d2cc9b88f7e06ac25b0eaa6173949c725d", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f52ef3b839e688ea02fad67e7b45e9d68f26614e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52ef3b839e688ea02fad67e7b45e9d68f26614e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=f52ef3b839e688ea02fad67e7b45e9d68f26614e", "patch": "@@ -105,8 +105,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n     }\n \n     pub fn visit_variant_data(&mut self, item: &hir::Item,\n-                            name: ast::Name, sd: &hir::VariantData,\n-                            generics: &hir::Generics) -> Struct {\n+                              name: ast::Name, sd: &hir::VariantData,\n+                              generics: &hir::Generics) -> Struct {\n         debug!(\"Visiting struct\");\n         let struct_type = struct_type_from_def(&*sd);\n         Struct {"}, {"sha": "a459ab5dd2bea058b2079b2100caf526f97c59db", "filename": "src/test/rustdoc-ui/intra-doc-alias-ice.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f52ef3b839e688ea02fad67e7b45e9d68f26614e/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52ef3b839e688ea02fad67e7b45e9d68f26614e/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.rs?ref=f52ef3b839e688ea02fad67e7b45e9d68f26614e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+pub type TypeAlias = usize;\n+\n+/// [broken cross-reference](TypeAlias::hoge) //~ ERROR\n+pub fn some_public_item() {}"}, {"sha": "231963976ea75958bb59f9d2b9801c0f07b738fb", "filename": "src/test/rustdoc-ui/intra-doc-alias-ice.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f52ef3b839e688ea02fad67e7b45e9d68f26614e/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52ef3b839e688ea02fad67e7b45e9d68f26614e/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr?ref=f52ef3b839e688ea02fad67e7b45e9d68f26614e", "patch": "@@ -0,0 +1,13 @@\n+error: `[TypeAlias::hoge]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-doc-alias-ice.rs:15:30\n+   |\n+15 | /// [broken cross-reference](TypeAlias::hoge) //~ ERROR\n+   |                              ^^^^^^^^^^^^^^^ cannot be resolved, ignoring\n+   |\n+note: lint level defined here\n+  --> $DIR/intra-doc-alias-ice.rs:11:9\n+   |\n+11 | #![deny(intra_doc_link_resolution_failure)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+"}]}