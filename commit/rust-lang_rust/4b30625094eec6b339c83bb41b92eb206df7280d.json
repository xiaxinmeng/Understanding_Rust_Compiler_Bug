{"sha": "4b30625094eec6b339c83bb41b92eb206df7280d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMzA2MjUwOTRlZWM2YjMzOWM4M2JiNDFiOTJlYjIwNmRmNzI4MGQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-13T20:44:42Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-04T20:22:42Z"}, "message": "Don't warn for `missing_doc_examples` when item is #[doc(hidden)]", "tree": {"sha": "49ef3aba336c3abd043d674e24565c5701424781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ef3aba336c3abd043d674e24565c5701424781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b30625094eec6b339c83bb41b92eb206df7280d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b30625094eec6b339c83bb41b92eb206df7280d", "html_url": "https://github.com/rust-lang/rust/commit/4b30625094eec6b339c83bb41b92eb206df7280d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b30625094eec6b339c83bb41b92eb206df7280d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409920873cf8a95739a55dc5fe5adb05e1b4758e", "url": "https://api.github.com/repos/rust-lang/rust/commits/409920873cf8a95739a55dc5fe5adb05e1b4758e", "html_url": "https://github.com/rust-lang/rust/commit/409920873cf8a95739a55dc5fe5adb05e1b4758e"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "19815c7cd5f75bd4e7eaa19e1e5070dd721c10f2", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b30625094eec6b339c83bb41b92eb206df7280d/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30625094eec6b339c83bb41b92eb206df7280d/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=4b30625094eec6b339c83bb41b92eb206df7280d", "patch": "@@ -9,8 +9,10 @@ use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::{find_testable_code, ErrorCodes, Ignore, LangString};\n+use crate::visit_ast::inherits_doc_hidden;\n use rustc_middle::lint::LintLevelSource;\n use rustc_session::lint;\n+use rustc_span::symbol::sym;\n \n crate const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n     name: \"check-private-items-doc-tests\",\n@@ -68,6 +70,11 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n         return false;\n     }\n     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id.expect_local());\n+    if cx.tcx.hir().attrs(hir_id).lists(sym::doc).has_word(sym::hidden)\n+        || inherits_doc_hidden(cx, hir_id)\n+    {\n+        return false;\n+    }\n     let (level, source) = cx.tcx.lint_level_at_node(crate::lint::MISSING_DOC_CODE_EXAMPLES, hir_id);\n     level != lint::Level::Allow || matches!(source, LintLevelSource::Default)\n }\n@@ -86,7 +93,9 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n \n     if tests.found_tests == 0 && cx.tcx.sess.is_nightly_build() {\n-        if should_have_doc_example(cx, &item) {\n+        if cx.renderinfo.borrow().access_levels.is_public(item.def_id)\n+            && should_have_doc_example(cx, &item)\n+        {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n             let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n             cx.tcx.struct_span_lint_hir("}, {"sha": "b9b2be1db802ebb9a0f7efed1dee232b40e33dc5", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4b30625094eec6b339c83bb41b92eb206df7280d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30625094eec6b339c83bb41b92eb206df7280d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4b30625094eec6b339c83bb41b92eb206df7280d", "patch": "@@ -29,6 +29,19 @@ fn def_id_to_path(tcx: TyCtxt<'_>, did: DefId) -> Vec<String> {\n     std::iter::once(crate_name).chain(relative).collect()\n }\n \n+crate fn inherits_doc_hidden(cx: &core::DocContext<'_>, mut node: hir::HirId) -> bool {\n+    while let Some(id) = cx.tcx.hir().get_enclosing_scope(node) {\n+        node = id;\n+        if cx.tcx.hir().attrs(node).lists(sym::doc).has_word(sym::hidden) {\n+            return true;\n+        }\n+        if node == hir::CRATE_HIR_ID {\n+            break;\n+        }\n+    }\n+    false\n+}\n+\n // Also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?.\n \n@@ -158,19 +171,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         om: &mut Module<'tcx>,\n         please_inline: bool,\n     ) -> bool {\n-        fn inherits_doc_hidden(cx: &core::DocContext<'_>, mut node: hir::HirId) -> bool {\n-            while let Some(id) = cx.tcx.hir().get_enclosing_scope(node) {\n-                node = id;\n-                if cx.tcx.hir().attrs(node).lists(sym::doc).has_word(sym::hidden) {\n-                    return true;\n-                }\n-                if node == hir::CRATE_HIR_ID {\n-                    break;\n-                }\n-            }\n-            false\n-        }\n-\n         debug!(\"maybe_inline_local res: {:?}\", res);\n \n         let tcx = self.cx.tcx;"}]}