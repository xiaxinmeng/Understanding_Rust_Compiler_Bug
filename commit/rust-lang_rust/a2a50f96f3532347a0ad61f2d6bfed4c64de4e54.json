{"sha": "a2a50f96f3532347a0ad61f2d6bfed4c64de4e54", "node_id": "C_kwDOAAsO6NoAKGEyYTUwZjk2ZjM1MzIzNDdhMGFkNjFmMmQ2YmZlZDRjNjRkZTRlNTQ", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-01-14T19:03:50Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-01-18T04:07:39Z"}, "message": "actually print out non local anon consts", "tree": {"sha": "96b6c8995ab936d843d546bdce91f466519f1d8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b6c8995ab936d843d546bdce91f466519f1d8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2a50f96f3532347a0ad61f2d6bfed4c64de4e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a50f96f3532347a0ad61f2d6bfed4c64de4e54", "html_url": "https://github.com/rust-lang/rust/commit/a2a50f96f3532347a0ad61f2d6bfed4c64de4e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2a50f96f3532347a0ad61f2d6bfed4c64de4e54/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f81a0de122843afc122468823f1ed6f0b8f2c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f81a0de122843afc122468823f1ed6f0b8f2c8", "html_url": "https://github.com/rust-lang/rust/commit/88f81a0de122843afc122468823f1ed6f0b8f2c8"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "df37b2b4628b5f3b7f68533e7be1f806218f5319", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2a50f96f3532347a0ad61f2d6bfed4c64de4e54/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a50f96f3532347a0ad61f2d6bfed4c64de4e54/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a2a50f96f3532347a0ad61f2d6bfed4c64de4e54", "patch": "@@ -1295,10 +1295,10 @@ pub trait PrettyPrinter<'tcx>:\n                             if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span) {\n                                 p!(write(\"{}\", snip))\n                             } else {\n-                                print_underscore!()\n+                                p!(print_value_path(def.did, substs))\n                             }\n                         } else {\n-                            print_underscore!()\n+                            p!(print_value_path(def.did, substs))\n                         }\n                     }\n                     defkind => bug!(\"`{:?}` has unexpcted defkind {:?}\", ct, defkind),\n@@ -1323,7 +1323,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::ConstKind::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n             // FIXME(generic_const_exprs):\n             // write out some legible representation of an abstract const?\n-            ty::ConstKind::Expr(_) => p!(\"[Const Expr]\"),\n+            ty::ConstKind::Expr(_) => p!(\"[const expr]\"),\n             ty::ConstKind::Error(_) => p!(\"[const error]\"),\n         };\n         Ok(self)"}, {"sha": "c1a846acf886272a66b3f511411232a1453a8b95", "filename": "tests/ui/const-generics/generic_const_exprs/non_local_anon_const_diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2a50f96f3532347a0ad61f2d6bfed4c64de4e54/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2a50f96f3532347a0ad61f2d6bfed4c64de4e54/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.stderr?ref=a2a50f96f3532347a0ad61f2d6bfed4c64de4e54", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/non_local_anon_const_diagnostics.rs:12:43\n    |\n LL |     let _: anon_const_non_local::Foo<2> = anon_const_non_local::foo::<M>();\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2`, found `_`\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2`, found `foo::<M>::{constant#0}`\n    |\n    = note: expected constant `2`\n-              found constant `_`\n+              found constant `foo::<M>::{constant#0}`\n \n error: aborting due to previous error\n "}]}