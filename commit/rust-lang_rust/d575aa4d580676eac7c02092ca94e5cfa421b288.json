{"sha": "d575aa4d580676eac7c02092ca94e5cfa421b288", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NzVhYTRkNTgwNjc2ZWFjN2MwMjA5MmNhOTRlNWNmYTQyMWIyODg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-18T22:55:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-19T16:25:20Z"}, "message": "expand: Mark some dead code in derive expansion as unreachable", "tree": {"sha": "d0bc5289e46f1e676531219fb55298a70ef8b115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0bc5289e46f1e676531219fb55298a70ef8b115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d575aa4d580676eac7c02092ca94e5cfa421b288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d575aa4d580676eac7c02092ca94e5cfa421b288", "html_url": "https://github.com/rust-lang/rust/commit/d575aa4d580676eac7c02092ca94e5cfa421b288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d575aa4d580676eac7c02092ca94e5cfa421b288/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd2177f3de22f54d7e71eea1e270f4e424394fc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2177f3de22f54d7e71eea1e270f4e424394fc7", "html_url": "https://github.com/rust-lang/rust/commit/cd2177f3de22f54d7e71eea1e270f4e424394fc7"}], "stats": {"total": 59, "additions": 5, "deletions": 54}, "files": [{"sha": "a767de53dae1fcad387ff1e3dc48afbc6f24f3a1", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d575aa4d580676eac7c02092ca94e5cfa421b288/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d575aa4d580676eac7c02092ca94e5cfa421b288/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=d575aa4d580676eac7c02092ca94e5cfa421b288", "patch": "@@ -407,13 +407,7 @@ impl<'a> TraitDef<'a> {\n                             _ => false,\n                         })\n                     }\n-                    _ => {\n-                        // Non-ADT derive is an error, but it should have been\n-                        // set earlier; see\n-                        // librustc_expand/expand.rs:MacroExpander::fully_expand_fragment()\n-                        // librustc_expand/base.rs:Annotatable::derive_allowed()\n-                        return;\n-                    }\n+                    _ => unreachable!(),\n                 };\n                 let container_id = cx.current_expansion.id.expn_data().parent;\n                 let always_copy = has_no_type_params && cx.resolver.has_derive_copy(container_id);\n@@ -475,12 +469,7 @@ impl<'a> TraitDef<'a> {\n                 );\n                 push(Annotatable::Item(P(ast::Item { attrs, ..(*newitem).clone() })))\n             }\n-            _ => {\n-                // Non-Item derive is an error, but it should have been\n-                // set earlier; see\n-                // librustc_expand/expand.rs:MacroExpander::fully_expand_fragment()\n-                // librustc_expand/base.rs:Annotatable::derive_allowed()\n-            }\n+            _ => unreachable!(),\n         }\n     }\n "}, {"sha": "72d94af4694abf477ead0f110f9a47b3e8a70d89", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d575aa4d580676eac7c02092ca94e5cfa421b288/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d575aa4d580676eac7c02092ca94e5cfa421b288/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=d575aa4d580676eac7c02092ca94e5cfa421b288", "patch": "@@ -98,13 +98,7 @@ fn inject_impl_of_structural_trait(\n ) {\n     let item = match *item {\n         Annotatable::Item(ref item) => item,\n-        _ => {\n-            // Non-Item derive is an error, but it should have been\n-            // set earlier; see\n-            // librustc_expand/expand.rs:MacroExpander::fully_expand_fragment()\n-            // librustc_expand/base.rs:Annotatable::derive_allowed()\n-            return;\n-        }\n+        _ => unreachable!(),\n     };\n \n     let generics = match item.kind {"}, {"sha": "5be2fee8b38fa8074505a3e7c8aed90060c8625a", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d575aa4d580676eac7c02092ca94e5cfa421b288/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d575aa4d580676eac7c02092ca94e5cfa421b288/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=d575aa4d580676eac7c02092ca94e5cfa421b288", "patch": "@@ -767,9 +767,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             InvocationKind::Derive { path, item } => match ext {\n                 SyntaxExtensionKind::Derive(expander)\n                 | SyntaxExtensionKind::LegacyDerive(expander) => {\n-                    if !item.derive_allowed() {\n-                        return ExpandResult::Ready(fragment_kind.dummy(span));\n-                    }\n                     if let SyntaxExtensionKind::Derive(..) = ext {\n                         self.gate_proc_macro_input(&item);\n                     }"}, {"sha": "dea167740edca5611dced8456d7a7b1a0e962784", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d575aa4d580676eac7c02092ca94e5cfa421b288/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d575aa4d580676eac7c02092ca94e5cfa421b288/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=d575aa4d580676eac7c02092ca94e5cfa421b288", "patch": "@@ -75,38 +75,9 @@ impl MultiItemModifier for ProcMacroDerive {\n         item: Annotatable,\n     ) -> ExpandResult<Vec<Annotatable>, Annotatable> {\n         let item = match item {\n-            Annotatable::Arm(..)\n-            | Annotatable::Field(..)\n-            | Annotatable::FieldPat(..)\n-            | Annotatable::GenericParam(..)\n-            | Annotatable::Param(..)\n-            | Annotatable::StructField(..)\n-            | Annotatable::Variant(..) => panic!(\"unexpected annotatable\"),\n-            Annotatable::Item(item) => item,\n-            Annotatable::ImplItem(_)\n-            | Annotatable::TraitItem(_)\n-            | Annotatable::ForeignItem(_)\n-            | Annotatable::Stmt(_)\n-            | Annotatable::Expr(_) => {\n-                ecx.span_err(\n-                    span,\n-                    \"proc-macro derives may only be applied to a struct, enum, or union\",\n-                );\n-                return ExpandResult::Ready(Vec::new());\n-            }\n+            Annotatable::Item(item) => token::NtItem(item),\n+            _ => unreachable!(),\n         };\n-        match item.kind {\n-            ItemKind::Struct(..) | ItemKind::Enum(..) | ItemKind::Union(..) => {}\n-            _ => {\n-                ecx.span_err(\n-                    span,\n-                    \"proc-macro derives may only be applied to a struct, enum, or union\",\n-                );\n-                return ExpandResult::Ready(Vec::new());\n-            }\n-        }\n-\n-        let item = token::NtItem(item);\n         let input = if item.pretty_printing_compatibility_hack() {\n             TokenTree::token(token::Interpolated(Lrc::new(item)), DUMMY_SP).into()\n         } else {"}]}