{"sha": "7975391808105565247d876c4efcfb1e07e34fae", "node_id": "C_kwDOAAsO6NoAKDc5NzUzOTE4MDgxMDU1NjUyNDdkODc2YzRlZmNmYjFlMDdlMzRmYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T19:47:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T19:47:48Z"}, "message": "Auto merge of #2402 - RalfJung:cargo-target, r=RalfJung\n\ncargo-miri: reorder --target to after the user-defined commands\n\nThis should help with https://github.com/rust-lang/miri/pull/2398.", "tree": {"sha": "fafa806bb7f07392e0244f44efb5e70d47668416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fafa806bb7f07392e0244f44efb5e70d47668416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7975391808105565247d876c4efcfb1e07e34fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7975391808105565247d876c4efcfb1e07e34fae", "html_url": "https://github.com/rust-lang/rust/commit/7975391808105565247d876c4efcfb1e07e34fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7975391808105565247d876c4efcfb1e07e34fae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1366bf6b073f272e81fce3bc6f3eae90d2e6bcce", "url": "https://api.github.com/repos/rust-lang/rust/commits/1366bf6b073f272e81fce3bc6f3eae90d2e6bcce", "html_url": "https://github.com/rust-lang/rust/commit/1366bf6b073f272e81fce3bc6f3eae90d2e6bcce"}, {"sha": "c81cfe240ab478b79d6167ebba28eb8fba3cd24c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81cfe240ab478b79d6167ebba28eb8fba3cd24c", "html_url": "https://github.com/rust-lang/rust/commit/c81cfe240ab478b79d6167ebba28eb8fba3cd24c"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "ecce1dece028460a32aaa6221bce7f146cf1a107", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7975391808105565247d876c4efcfb1e07e34fae/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7975391808105565247d876c4efcfb1e07e34fae/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=7975391808105565247d876c4efcfb1e07e34fae", "patch": "@@ -609,27 +609,12 @@ fn phase_cargo_miri(mut args: env::Args) {\n         MiriCommand::Forward(s) => s,\n         MiriCommand::Setup => return, // `cargo miri setup` stops here.\n     };\n+    let metadata = get_cargo_metadata();\n     let mut cmd = cargo();\n     cmd.arg(cargo_cmd);\n \n-    // Make sure we know the build target, and cargo does, too.\n-    // This is needed to make the `CARGO_TARGET_*_RUNNER` env var do something,\n-    // and it later helps us detect which crates are proc-macro/build-script\n-    // (host crates) and which crates are needed for the program itself.\n-    let host = version_info().host;\n-    let target = get_arg_flag_value(\"--target\");\n-    let target = if let Some(ref target) = target {\n-        target\n-    } else {\n-        // No target given. Pick default and tell cargo about it.\n-        cmd.arg(\"--target\");\n-        cmd.arg(&host);\n-        &host\n-    };\n-\n-    let mut target_dir = None;\n-\n     // Forward all arguments before `--` other than `--target-dir` and its value to Cargo.\n+    let mut target_dir = None;\n     for arg in ArgSplitFlagValue::new(&mut args, \"--target-dir\") {\n         match arg {\n             Ok(value) => {\n@@ -643,16 +628,27 @@ fn phase_cargo_miri(mut args: env::Args) {\n             }\n         }\n     }\n-\n-    let metadata = get_cargo_metadata();\n-\n     // Detect the target directory if it's not specified via `--target-dir`.\n     let target_dir = target_dir.get_or_insert_with(|| metadata.target_directory.clone());\n-\n     // Set `--target-dir` to `miri` inside the original target directory.\n     target_dir.push(\"miri\");\n     cmd.arg(\"--target-dir\").arg(target_dir);\n \n+    // Make sure we know the build target, and cargo does, too.\n+    // This is needed to make the `CARGO_TARGET_*_RUNNER` env var do something,\n+    // and it later helps us detect which crates are proc-macro/build-script\n+    // (host crates) and which crates are needed for the program itself.\n+    let host = version_info().host;\n+    let target = get_arg_flag_value(\"--target\");\n+    let target = if let Some(ref target) = target {\n+        target\n+    } else {\n+        // No target given. Pick default and tell cargo about it.\n+        cmd.arg(\"--target\");\n+        cmd.arg(&host);\n+        &host\n+    };\n+\n     // Forward all further arguments after `--` to cargo.\n     cmd.arg(\"--\").args(args);\n "}]}