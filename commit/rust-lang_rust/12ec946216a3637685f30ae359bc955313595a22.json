{"sha": "12ec946216a3637685f30ae359bc955313595a22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZWM5NDYyMTZhMzYzNzY4NWYzMGFlMzU5YmM5NTUzMTM1OTVhMjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T17:50:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T17:50:34Z"}, "message": "Simplify generic params", "tree": {"sha": "62cbd8b20865648660be5a7b9dd7a65486e54535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62cbd8b20865648660be5a7b9dd7a65486e54535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ec946216a3637685f30ae359bc955313595a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ec946216a3637685f30ae359bc955313595a22", "html_url": "https://github.com/rust-lang/rust/commit/12ec946216a3637685f30ae359bc955313595a22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ec946216a3637685f30ae359bc955313595a22/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb642fc578100c0945088accb85acb8f03d2e1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb642fc578100c0945088accb85acb8f03d2e1fd", "html_url": "https://github.com/rust-lang/rust/commit/cb642fc578100c0945088accb85acb8f03d2e1fd"}], "stats": {"total": 73, "additions": 34, "deletions": 39}, "files": [{"sha": "e2638cf92f92bf640c907fb2af107c3a4839b4fd", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/12ec946216a3637685f30ae359bc955313595a22/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ec946216a3637685f30ae359bc955313595a22/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=12ec946216a3637685f30ae359bc955313595a22", "patch": "@@ -322,9 +322,7 @@ impl Struct {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_generic_params_scope(db, self.into())\n     }\n }\n \n@@ -352,9 +350,7 @@ impl Union {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_generic_params_scope(db, self.into())\n     }\n }\n \n@@ -402,8 +398,7 @@ impl Enum {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n+        let r = r.push_generic_params_scope(db, self.into());\n         r.push_scope(Scope::AdtScope(self.into()))\n     }\n }\n@@ -709,9 +704,7 @@ impl Function {\n         // take the outer scope...\n         let r = self.container(db).map_or_else(|| self.module(db).resolver(db), |c| c.resolver(db));\n         // ...and add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_generic_params_scope(db, self.into())\n     }\n \n     pub fn diagnostics(self, db: &impl HirDatabase, sink: &mut DiagnosticSink) {\n@@ -946,9 +939,7 @@ impl Trait {\n     pub(crate) fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         let r = self.module(db).resolver(db);\n         // add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_generic_params_scope(db, self.into())\n     }\n }\n \n@@ -1010,9 +1001,7 @@ impl TypeAlias {\n             .map(|ib| ib.resolver(db))\n             .unwrap_or_else(|| self.module(db).resolver(db));\n         // ...and add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_generic_params_scope(db, self.into())\n     }\n }\n "}, {"sha": "492d964a43c493a63d8a24b255d7af07461d0abc", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ec946216a3637685f30ae359bc955313595a22/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ec946216a3637685f30ae359bc955313595a22/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=12ec946216a3637685f30ae359bc955313595a22", "patch": "@@ -5,7 +5,6 @@ use ra_syntax::ast::{self};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    generics::HasGenericParams,\n     resolve::Resolver,\n     ty::Ty,\n     AssocItem, Crate, HasSource, ImplBlock, Module, Source, TraitRef,\n@@ -52,12 +51,11 @@ impl ImplBlock {\n         Crate { crate_id: self.module(db).id.krate }\n     }\n \n-    pub(crate) fn resolver(&self, db: &impl DefDatabase) -> Resolver {\n+    pub(crate) fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         let r = self.module(db).resolver(db);\n         // add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        let r = r.push_impl_block_scope(self.clone());\n+        let r = r.push_generic_params_scope(db, self.into());\n+        let r = r.push_impl_block_scope(self);\n         r\n     }\n }"}, {"sha": "e5e768be90e0db631f5934a335e46630614eae51", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/12ec946216a3637685f30ae359bc955313595a22/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ec946216a3637685f30ae359bc955313595a22/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=12ec946216a3637685f30ae359bc955313595a22", "patch": "@@ -14,9 +14,9 @@ use crate::{\n     code_model::Crate,\n     db::{DefDatabase, HirDatabase},\n     expr::{ExprScopes, PatId, ScopeId},\n-    generics::GenericParams,\n-    Adt, Const, DefWithBody, Enum, EnumVariant, Function, ImplBlock, Local, MacroDef, ModuleDef,\n-    PerNs, Static, Struct, Trait, TypeAlias,\n+    generics::{GenericParams, HasGenericParams},\n+    Adt, Const, DefWithBody, Enum, EnumVariant, Function, GenericDef, ImplBlock, Local, MacroDef,\n+    ModuleDef, PerNs, Static, Struct, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -43,7 +43,7 @@ pub(crate) enum Scope {\n     /// All the items and imported names of a module\n     ModuleScope(ModuleItemMap),\n     /// Brings the generic parameters of an item into scope\n-    GenericParams(Arc<GenericParams>),\n+    GenericParams { def: GenericDef, params: Arc<GenericParams> },\n     /// Brings `Self` in `impl` block into scope\n     ImplBlockScope(ImplBlock),\n     /// Brings `Self` in enum, struct and union definitions into scope\n@@ -141,9 +141,9 @@ impl Resolver {\n         for scope in self.scopes.iter().rev() {\n             match scope {\n                 Scope::ExprScope(_) => continue,\n-                Scope::GenericParams(_) | Scope::ImplBlockScope(_) if skip_to_mod => continue,\n+                Scope::GenericParams { .. } | Scope::ImplBlockScope(_) if skip_to_mod => continue,\n \n-                Scope::GenericParams(params) => {\n+                Scope::GenericParams { params, .. } => {\n                     if let Some(param) = params.find_by_name(first_name) {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((TypeNs::GenericParam(param.idx), idx));\n@@ -212,7 +212,7 @@ impl Resolver {\n             match scope {\n                 Scope::AdtScope(_)\n                 | Scope::ExprScope(_)\n-                | Scope::GenericParams(_)\n+                | Scope::GenericParams { .. }\n                 | Scope::ImplBlockScope(_)\n                     if skip_to_mod =>\n                 {\n@@ -232,13 +232,13 @@ impl Resolver {\n                 }\n                 Scope::ExprScope(_) => continue,\n \n-                Scope::GenericParams(params) if n_segments > 1 => {\n+                Scope::GenericParams { params, .. } if n_segments > 1 => {\n                     if let Some(param) = params.find_by_name(first_name) {\n                         let ty = TypeNs::GenericParam(param.idx);\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n                 }\n-                Scope::GenericParams(_) => continue,\n+                Scope::GenericParams { .. } => continue,\n \n                 Scope::ImplBlockScope(impl_) if n_segments > 1 => {\n                     if first_name == &name::SELF_TYPE {\n@@ -361,15 +361,15 @@ impl Resolver {\n         self.scopes\n             .iter()\n             .filter_map(|scope| match scope {\n-                Scope::GenericParams(params) => Some(params),\n+                Scope::GenericParams { params, .. } => Some(params),\n                 _ => None,\n             })\n             .flat_map(|params| params.where_predicates.iter())\n     }\n \n     pub(crate) fn generic_def(&self) -> Option<crate::generics::GenericDef> {\n         self.scopes.iter().find_map(|scope| match scope {\n-            Scope::GenericParams(params) => Some(params.def.into()),\n+            Scope::GenericParams { def, .. } => Some(*def),\n             _ => None,\n         })\n     }\n@@ -381,8 +381,17 @@ impl Resolver {\n         self\n     }\n \n-    pub(crate) fn push_generic_params_scope(self, params: Arc<GenericParams>) -> Resolver {\n-        self.push_scope(Scope::GenericParams(params))\n+    pub(crate) fn push_generic_params_scope(\n+        self,\n+        db: &impl DefDatabase,\n+        def: GenericDef,\n+    ) -> Resolver {\n+        let params = def.generic_params(db);\n+        if params.params.is_empty() {\n+            self\n+        } else {\n+            self.push_scope(Scope::GenericParams { def, params })\n+        }\n     }\n \n     pub(crate) fn push_impl_block_scope(self, impl_block: ImplBlock) -> Resolver {\n@@ -457,8 +466,8 @@ impl Scope {\n                     });\n                 }\n             }\n-            Scope::GenericParams(gp) => {\n-                for param in &gp.params {\n+            Scope::GenericParams { params, .. } => {\n+                for param in params.params.iter() {\n                     f(param.name.clone(), ScopeDef::GenericParam(param.idx))\n                 }\n             }"}, {"sha": "9e2e4c3cc311b0657d5d2dc9e7862ef40f5b58c4", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12ec946216a3637685f30ae359bc955313595a22/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ec946216a3637685f30ae359bc955313595a22/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=12ec946216a3637685f30ae359bc955313595a22", "patch": "@@ -25,7 +25,6 @@ pub struct GenericParam {\n /// Data about the generic parameters of a function, struct, impl, etc.\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct GenericParams {\n-    pub def: GenericDefId,\n     pub parent_params: Option<Arc<GenericParams>>,\n     pub params: Vec<GenericParam>,\n     pub where_predicates: Vec<WherePredicate>,\n@@ -56,7 +55,7 @@ impl GenericParams {\n         parent_params: Option<Arc<GenericParams>>,\n     ) -> GenericParams {\n         let mut generics =\n-            GenericParams { def, params: Vec::new(), parent_params, where_predicates: Vec::new() };\n+            GenericParams { params: Vec::new(), parent_params, where_predicates: Vec::new() };\n         let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         match def {"}]}