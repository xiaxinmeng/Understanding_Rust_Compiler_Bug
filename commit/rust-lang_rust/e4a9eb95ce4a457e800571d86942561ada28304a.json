{"sha": "e4a9eb95ce4a457e800571d86942561ada28304a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YTllYjk1Y2U0YTQ1N2U4MDA1NzFkODY5NDI1NjFhZGEyODMwNGE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-13T03:40:57Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-13T03:40:57Z"}, "message": "Remove `_VALUE` from the float extremes constants.\n\nIn `std::f32` and `std::f64`:\n\n- `MIN_VALUE` \u2192 `MIN`\n- `MAX_VALUE` \u2192 `MAX`\n- `MIN_POS_VALUE` \u2192 `MIN_POSITIVE`\n\nThis matches the corresponding integer constants.\n\n[breaking-change]", "tree": {"sha": "7e5a34459f01dd7059afb010ef9019eab77a70f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e5a34459f01dd7059afb010ef9019eab77a70f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4a9eb95ce4a457e800571d86942561ada28304a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a9eb95ce4a457e800571d86942561ada28304a", "html_url": "https://github.com/rust-lang/rust/commit/e4a9eb95ce4a457e800571d86942561ada28304a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4a9eb95ce4a457e800571d86942561ada28304a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39b463f15328f448c13fa990f9fc8897e0af55c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/39b463f15328f448c13fa990f9fc8897e0af55c2", "html_url": "https://github.com/rust-lang/rust/commit/39b463f15328f448c13fa990f9fc8897e0af55c2"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "b542c9d47f7d4a386d9ac5148b7275ae245d008b", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=e4a9eb95ce4a457e800571d86942561ada28304a", "patch": "@@ -35,14 +35,27 @@ pub const EPSILON: f32 = 1.19209290e-07_f32;\n \n /// Smallest finite f32 value\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\", reason = \"use `std::f32::MIN`\")]\n pub const MIN_VALUE: f32 = -3.40282347e+38_f32;\n /// Smallest positive, normalized f32 value\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\", reason = \"use `std::f32::MIN_POSITIVE`\")]\n pub const MIN_POS_VALUE: f32 = 1.17549435e-38_f32;\n /// Largest finite f32 value\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\", reason = \"use `std::f32::MAX`\")]\n pub const MAX_VALUE: f32 = 3.40282347e+38_f32;\n \n+/// Smallest finite f32 value\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub const MIN: f32 = -3.40282347e+38_f32;\n+/// Smallest positive, normalized f32 value\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub const MIN_POSITIVE: f32 = 1.17549435e-38_f32;\n+/// Largest finite f32 value\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub const MAX: f32 = 3.40282347e+38_f32;\n+\n #[unstable(feature = \"core\", reason = \"pending integer conventions\")]\n pub const MIN_EXP: int = -125;\n #[unstable(feature = \"core\", reason = \"pending integer conventions\")]\n@@ -215,17 +228,17 @@ impl Float for f32 {\n     #[inline]\n     #[unstable(feature = \"core\")]\n     #[deprecated(since = \"1.0.0\")]\n-    fn min_value() -> f32 { MIN_VALUE }\n+    fn min_value() -> f32 { MIN }\n \n     #[inline]\n     #[unstable(feature = \"core\")]\n     #[deprecated(since = \"1.0.0\")]\n-    fn min_pos_value(_: Option<f32>) -> f32 { MIN_POS_VALUE }\n+    fn min_pos_value(_: Option<f32>) -> f32 { MIN_POSITIVE }\n \n     #[inline]\n     #[unstable(feature = \"core\")]\n     #[deprecated(since = \"1.0.0\")]\n-    fn max_value() -> f32 { MAX_VALUE }\n+    fn max_value() -> f32 { MAX }\n \n     /// Returns the mantissa, exponent and sign as integers.\n     fn integer_decode(self) -> (u64, i16, i8) {"}, {"sha": "2aae7107548c6f3ecab3fa7d632635b7c277933e", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=e4a9eb95ce4a457e800571d86942561ada28304a", "patch": "@@ -38,14 +38,27 @@ pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n \n /// Smallest finite f64 value\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\", reason = \"use `std::f64::MIN`\")]\n pub const MIN_VALUE: f64 = -1.7976931348623157e+308_f64;\n /// Smallest positive, normalized f64 value\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\", reason = \"use `std::f64::MIN_POSITIVE`\")]\n pub const MIN_POS_VALUE: f64 = 2.2250738585072014e-308_f64;\n /// Largest finite f64 value\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\", reason = \"use `std::f64::MAX`\")]\n pub const MAX_VALUE: f64 = 1.7976931348623157e+308_f64;\n \n+/// Smallest finite f64 value\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub const MIN: f64 = -1.7976931348623157e+308_f64;\n+/// Smallest positive, normalized f64 value\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub const MIN_POSITIVE: f64 = 2.2250738585072014e-308_f64;\n+/// Largest finite f64 value\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub const MAX: f64 = 1.7976931348623157e+308_f64;\n+\n #[unstable(feature = \"core\", reason = \"pending integer conventions\")]\n pub const MIN_EXP: int = -1021;\n #[unstable(feature = \"core\", reason = \"pending integer conventions\")]\n@@ -222,17 +235,17 @@ impl Float for f64 {\n     #[inline]\n     #[unstable(feature = \"core\")]\n     #[deprecated(since = \"1.0.0\")]\n-    fn min_value() -> f64 { MIN_VALUE }\n+    fn min_value() -> f64 { MIN }\n \n     #[inline]\n     #[unstable(feature = \"core\")]\n     #[deprecated(since = \"1.0.0\")]\n-    fn min_pos_value(_: Option<f64>) -> f64 { MIN_POS_VALUE }\n+    fn min_pos_value(_: Option<f64>) -> f64 { MIN_POSITIVE }\n \n     #[inline]\n     #[unstable(feature = \"core\")]\n     #[deprecated(since = \"1.0.0\")]\n-    fn max_value() -> f64 { MAX_VALUE }\n+    fn max_value() -> f64 { MAX }\n \n     /// Returns the mantissa, exponent and sign as integers.\n     fn integer_decode(self) -> (u64, i16, i8) {"}, {"sha": "8aef16c2874ee26813fffc1da75f15c3940028ad", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e4a9eb95ce4a457e800571d86942561ada28304a", "patch": "@@ -956,7 +956,7 @@ macro_rules! impl_to_primitive_float_to_float {\n             Some($slf as $DstT)\n         } else {\n             let n = $slf as f64;\n-            let max_value: $SrcT = ::$SrcT::MAX_VALUE;\n+            let max_value: $SrcT = ::$SrcT::MAX;\n             if -max_value as f64 <= n && n <= max_value as f64 {\n                 Some($slf as $DstT)\n             } else {\n@@ -1331,18 +1331,18 @@ pub trait Float\n     /// Returns the smallest finite value that this type can represent.\n     #[unstable(feature = \"core\")]\n     #[deprecated(since = \"1.0.0\",\n-                 reason = \"use `std::f32::MIN_VALUE` or `std::f64::MIN_VALUE` as appropriate\")]\n+                 reason = \"use `std::f32::MIN` or `std::f64::MIN` as appropriate\")]\n     fn min_value() -> Self;\n     /// Returns the smallest normalized positive number that this type can represent.\n     #[unstable(feature = \"core\")]\n     #[deprecated(since = \"1.0.0\",\n-                 reason = \"use `std::f32::MIN_POS_VALUE` or \\\n-                           `std::f64::MIN_POS_VALUE` as appropriate\")]\n+                 reason = \"use `std::f32::MIN_POSITIVE` or \\\n+                           `std::f64::MIN_POSITIVE` as appropriate\")]\n     fn min_pos_value(unused_self: Option<Self>) -> Self;\n     /// Returns the largest finite value that this type can represent.\n     #[unstable(feature = \"core\")]\n     #[deprecated(since = \"1.0.0\",\n-                 reason = \"use `std::f32::MAX_VALUE` or `std::f64::MAX_VALUE` as appropriate\")]\n+                 reason = \"use `std::f32::MAX` or `std::f64::MAX` as appropriate\")]\n     fn max_value() -> Self;\n \n     /// Returns true if this value is NaN and false otherwise."}, {"sha": "5aff5b0d3c72df3d641ffe7897286fcfe0d96050", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e4a9eb95ce4a457e800571d86942561ada28304a", "patch": "@@ -318,8 +318,8 @@ impl LintPass for TypeLimits {\n \n         fn float_ty_range(float_ty: ast::FloatTy) -> (f64, f64) {\n             match float_ty {\n-                ast::TyF32  => (f32::MIN_VALUE as f64, f32::MAX_VALUE as f64),\n-                ast::TyF64  => (f64::MIN_VALUE,        f64::MAX_VALUE)\n+                ast::TyF32  => (f32::MIN as f64, f32::MAX as f64),\n+                ast::TyF64  => (f64::MIN,        f64::MAX)\n             }\n         }\n "}, {"sha": "83a5c68912cf34aaa447397c2afc0b17c2599492", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=e4a9eb95ce4a457e800571d86942561ada28304a", "patch": "@@ -30,6 +30,7 @@ use core::num;\n pub use core::f32::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON, MIN_VALUE};\n pub use core::f32::{MIN_POS_VALUE, MAX_VALUE, MIN_EXP, MAX_EXP, MIN_10_EXP};\n pub use core::f32::{MAX_10_EXP, NAN, INFINITY, NEG_INFINITY};\n+pub use core::f32::{MIN, MIN_POSITIVE, MAX};\n pub use core::f32::consts;\n \n #[allow(dead_code)]"}, {"sha": "f243955d199dc1477d1a5b7a095bc12760654801", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a9eb95ce4a457e800571d86942561ada28304a/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=e4a9eb95ce4a457e800571d86942561ada28304a", "patch": "@@ -29,6 +29,7 @@ use core::num;\n pub use core::f64::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON, MIN_VALUE};\n pub use core::f64::{MIN_POS_VALUE, MAX_VALUE, MIN_EXP, MAX_EXP, MIN_10_EXP};\n pub use core::f64::{MAX_10_EXP, NAN, INFINITY, NEG_INFINITY};\n+pub use core::f64::{MIN, MIN_POSITIVE, MAX};\n pub use core::f64::consts;\n \n #[allow(dead_code)]"}]}