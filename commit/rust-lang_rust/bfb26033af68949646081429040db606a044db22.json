{"sha": "bfb26033af68949646081429040db606a044db22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYjI2MDMzYWY2ODk0OTY0NjA4MTQyOTA0MGRiNjA2YTA0NGRiMjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-02T22:49:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-02T22:49:37Z"}, "message": "Auto merge of #28662 - semmaz:fmt-debug, r=alexcrichton\n\nfixes #26920", "tree": {"sha": "312d5abd0a61c9971eef77f3ce82cc369bd33b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/312d5abd0a61c9971eef77f3ce82cc369bd33b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfb26033af68949646081429040db606a044db22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb26033af68949646081429040db606a044db22", "html_url": "https://github.com/rust-lang/rust/commit/bfb26033af68949646081429040db606a044db22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfb26033af68949646081429040db606a044db22/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f", "url": "https://api.github.com/repos/rust-lang/rust/commits/669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f", "html_url": "https://github.com/rust-lang/rust/commit/669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f"}, {"sha": "0294098d8f3e2926cf0e6adba9a96e47099c3c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0294098d8f3e2926cf0e6adba9a96e47099c3c0f", "html_url": "https://github.com/rust-lang/rust/commit/0294098d8f3e2926cf0e6adba9a96e47099c3c0f"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "ccce2ad22ddc283846f8bc2a7495141ca558853f", "filename": "src/libcore/char.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bfb26033af68949646081429040db606a044db22/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb26033af68949646081429040db606a044db22/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=bfb26033af68949646081429040db606a044db22", "patch": "@@ -185,9 +185,7 @@ impl CharExt for char {\n             '\\t' => EscapeDefaultState::Backslash('t'),\n             '\\r' => EscapeDefaultState::Backslash('r'),\n             '\\n' => EscapeDefaultState::Backslash('n'),\n-            '\\\\' => EscapeDefaultState::Backslash('\\\\'),\n-            '\\'' => EscapeDefaultState::Backslash('\\''),\n-            '\"'  => EscapeDefaultState::Backslash('\"'),\n+            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n             '\\x20' ... '\\x7e' => EscapeDefaultState::Char(self),\n             _ => EscapeDefaultState::Unicode(self.escape_unicode())\n         };\n@@ -344,6 +342,22 @@ impl Iterator for EscapeUnicode {\n             EscapeUnicodeState::Done => None,\n         }\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let mut n = 0;\n+        while (self.c as usize) >> (4 * (n + 1)) != 0 {\n+            n += 1;\n+        }\n+        let n = match self.state {\n+            EscapeUnicodeState::Backslash => n + 5,\n+            EscapeUnicodeState::Type => n + 4,\n+            EscapeUnicodeState::LeftBrace => n + 3,\n+            EscapeUnicodeState::Value(offset) => offset + 2,\n+            EscapeUnicodeState::RightBrace => 1,\n+            EscapeUnicodeState::Done => 0,\n+        };\n+        (n, Some(n))\n+    }\n }\n \n /// An iterator over the characters that represent a `char`, escaped\n@@ -377,7 +391,16 @@ impl Iterator for EscapeDefault {\n                 Some(c)\n             }\n             EscapeDefaultState::Done => None,\n-            EscapeDefaultState::Unicode(ref mut iter) => iter.next()\n+            EscapeDefaultState::Unicode(ref mut iter) => iter.next(),\n+        }\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        match self.state {\n+            EscapeDefaultState::Char(_) => (1, Some(1)),\n+            EscapeDefaultState::Backslash(_) => (2, Some(2)),\n+            EscapeDefaultState::Unicode(ref iter) => iter.size_hint(),\n+            EscapeDefaultState::Done => (0, Some(0)),\n         }\n     }\n }"}, {"sha": "f6053a75f1f90cb924c7bd78b8117e197a9d6d2d", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bfb26033af68949646081429040db606a044db22/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb26033af68949646081429040db606a044db22/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=bfb26033af68949646081429040db606a044db22", "patch": "@@ -1332,11 +1332,21 @@ impl Display for bool {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for str {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        try!(write!(f, \"\\\"\"));\n-        for c in self.chars().flat_map(|c| c.escape_default()) {\n-            try!(f.write_char(c))\n+        try!(f.write_char('\"'));\n+        let mut from = 0;\n+        for (i, c) in self.char_indices() {\n+            let esc = c.escape_default();\n+            // If char needs escaping, flush backlog so far and write, else skip\n+            if esc.size_hint() != (1, Some(1)) {\n+                try!(f.write_str(&self[from..i]));\n+                for c in esc {\n+                    try!(f.write_char(c));\n+                }\n+                from = i + c.len_utf8();\n+            }\n         }\n-        write!(f, \"\\\"\")\n+        try!(f.write_str(&self[from..]));\n+        f.write_char('\"')\n     }\n }\n \n@@ -1350,12 +1360,11 @@ impl Display for str {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        use char::CharExt;\n-        try!(write!(f, \"'\"));\n+        try!(f.write_char('\\''));\n         for c in self.escape_default() {\n             try!(f.write_char(c))\n         }\n-        write!(f, \"'\")\n+        f.write_char('\\'')\n     }\n }\n "}, {"sha": "2cc033b8a46e136cbe6f00130ab6f15f6bc359dd", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfb26033af68949646081429040db606a044db22/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb26033af68949646081429040db606a044db22/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=bfb26033af68949646081429040db606a044db22", "patch": "@@ -74,6 +74,10 @@ pub fn main() {\n     t!(format!(\"{:?}\", 10_usize), \"10\");\n     t!(format!(\"{:?}\", \"true\"), \"\\\"true\\\"\");\n     t!(format!(\"{:?}\", \"foo\\nbar\"), \"\\\"foo\\\\nbar\\\"\");\n+    t!(format!(\"{:?}\", \"foo\\n\\\"bar\\\"\\r\\n\\'baz\\'\\t\\\\qux\\\\\"),\n+       r#\"\"foo\\n\\\"bar\\\"\\r\\n\\'baz\\'\\t\\\\qux\\\\\"\"#);\n+    t!(format!(\"{:?}\", \"foo\\0bar\\x01baz\\u{3b1}q\\u{75}x\"),\n+       r#\"\"foo\\u{0}bar\\u{1}baz\\u{3b1}qux\"\"#);\n     t!(format!(\"{:o}\", 10_usize), \"12\");\n     t!(format!(\"{:x}\", 10_usize), \"a\");\n     t!(format!(\"{:X}\", 10_usize), \"A\");"}]}