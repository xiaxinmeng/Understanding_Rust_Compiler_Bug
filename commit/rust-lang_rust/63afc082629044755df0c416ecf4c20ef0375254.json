{"sha": "63afc082629044755df0c416ecf4c20ef0375254", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYWZjMDgyNjI5MDQ0NzU1ZGYwYzQxNmVjZjRjMjBlZjAzNzUyNTQ=", "commit": {"author": {"name": "zzmp", "email": "zmp@umich.edu", "date": "2014-06-28T10:35:25Z"}, "committer": {"name": "zzmp", "email": "zmp@umich.edu", "date": "2014-06-30T07:03:34Z"}, "message": "Allow external html in rustdoc for crates.\n\nUpdated documentation to reflect md->html.\nModularized external file loading.", "tree": {"sha": "0f9b43085214bb6d8e0b2e72a1158eee50a07f10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f9b43085214bb6d8e0b2e72a1158eee50a07f10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63afc082629044755df0c416ecf4c20ef0375254", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63afc082629044755df0c416ecf4c20ef0375254", "html_url": "https://github.com/rust-lang/rust/commit/63afc082629044755df0c416ecf4c20ef0375254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63afc082629044755df0c416ecf4c20ef0375254/comments", "author": {"login": "zzmp", "id": 5403956, "node_id": "MDQ6VXNlcjU0MDM5NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5403956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzmp", "html_url": "https://github.com/zzmp", "followers_url": "https://api.github.com/users/zzmp/followers", "following_url": "https://api.github.com/users/zzmp/following{/other_user}", "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions", "organizations_url": "https://api.github.com/users/zzmp/orgs", "repos_url": "https://api.github.com/users/zzmp/repos", "events_url": "https://api.github.com/users/zzmp/events{/privacy}", "received_events_url": "https://api.github.com/users/zzmp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zzmp", "id": 5403956, "node_id": "MDQ6VXNlcjU0MDM5NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5403956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzmp", "html_url": "https://github.com/zzmp", "followers_url": "https://api.github.com/users/zzmp/followers", "following_url": "https://api.github.com/users/zzmp/following{/other_user}", "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions", "organizations_url": "https://api.github.com/users/zzmp/orgs", "repos_url": "https://api.github.com/users/zzmp/repos", "events_url": "https://api.github.com/users/zzmp/events{/privacy}", "received_events_url": "https://api.github.com/users/zzmp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ddf6f4b7c45bb6003a7c917e24583fc2b606826", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddf6f4b7c45bb6003a7c917e24583fc2b606826", "html_url": "https://github.com/rust-lang/rust/commit/0ddf6f4b7c45bb6003a7c917e24583fc2b606826"}], "stats": {"total": 212, "additions": 143, "deletions": 69}, "files": [{"sha": "d5795c328e7d52d8bf4ef7382d355fb2862f0d8a", "filename": "man/rustdoc.1", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63afc082629044755df0c416ecf4c20ef0375254/man%2Frustdoc.1", "raw_url": "https://github.com/rust-lang/rust/raw/63afc082629044755df0c416ecf4c20ef0375254/man%2Frustdoc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustdoc.1?ref=63afc082629044755df0c416ecf4c20ef0375254", "patch": "@@ -38,6 +38,15 @@ directory to load plugins from (default: /tmp/rustdoc_ng/plugins)\n -L --library-path <val>\n directory to add to crate search path\n .TP\n+--html-in-header <val>\n+file to add to <head>\n+.TP\n+--html-before-content <val>\n+file to add in <body>, before content\n+.TP\n+--html-after-content <val>\n+file to add in <body>, after content\n+.TP\n -h, --help\n Print help\n "}, {"sha": "213565b09ac27d0633a81cbdb6fde4cc5cf61b5d", "filename": "mk/docs.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63afc082629044755df0c416ecf4c20ef0375254/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/63afc082629044755df0c416ecf4c20ef0375254/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=63afc082629044755df0c416ecf4c20ef0375254", "patch": "@@ -35,16 +35,16 @@ DOCS := index intro tutorial guide guide-ffi guide-macros guide-lifetimes \\\n PDF_DOCS := tutorial rust\n \n RUSTDOC_DEPS_rust := doc/full-toc.inc\n-RUSTDOC_FLAGS_rust := --markdown-in-header=doc/full-toc.inc\n+RUSTDOC_FLAGS_rust := --html-in-header=doc/full-toc.inc\n \n L10N_LANGS := ja\n \n # Generally no need to edit below here.\n \n # The options are passed to the documentation generators.\n-RUSTDOC_HTML_OPTS_NO_CSS = --markdown-before-content=doc/version_info.html \\\n-\t--markdown-in-header=doc/favicon.inc \\\n-\t--markdown-after-content=doc/footer.inc \\\n+RUSTDOC_HTML_OPTS_NO_CSS = --html-before-content=doc/version_info.html \\\n+\t--html-in-header=doc/favicon.inc \\\n+\t--html-after-content=doc/footer.inc \\\n \t--markdown-playground-url='http://play.rust-lang.org/'\n \n RUSTDOC_HTML_OPTS = $(RUSTDOC_HTML_OPTS_NO_CSS) --markdown-css rust.css"}, {"sha": "8199eaea82c683b7cc29489b682e11fa8d9d89db", "filename": "src/doc/rustdoc.md", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/63afc082629044755df0c416ecf4c20ef0375254/src%2Fdoc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/63afc082629044755df0c416ecf4c20ef0375254/src%2Fdoc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc.md?ref=63afc082629044755df0c416ecf4c20ef0375254", "patch": "@@ -103,6 +103,17 @@ rustdoc can also generate JSON, for consumption by other tools, with\n `rustdoc --output-format json`, and also consume already-generated JSON with\n `rustdoc --input-format json`.\n \n+rustdoc also supports personalizing the output from crates' documentation,\n+similar to markdown options.\n+\n+- `--html-in-header FILE`: includes the contents of `FILE` at the\n+  end of the `<head>...</head>` section.\n+- `--html-before-content FILE`: includes the contents of `FILE`\n+  directly after `<body>`, before the rendered content (including the\n+  search bar).\n+- `--html-after-content FILE`: includes the contents of `FILE`\n+  after all the rendered content.\n+\n # Using the Documentation\n \n The web pages generated by rustdoc present the same logical hierarchy that one\n@@ -238,16 +249,16 @@ detected by a `.md` or `.markdown` extension.\n There are 4 options to modify the output that Rustdoc creates.\n \n - `--markdown-css PATH`: adds a `<link rel=\"stylesheet\">` tag pointing to `PATH`.\n-- `--markdown-in-header FILE`: includes the contents of `FILE` at the\n+- `--html-in-header FILE`: includes the contents of `FILE` at the\n   end of the `<head>...</head>` section.\n-- `--markdown-before-content FILE`: includes the contents of `FILE`\n+- `--html-before-content FILE`: includes the contents of `FILE`\n   directly after `<body>`, before the rendered content (including the\n   title).\n-- `--markdown-after-content FILE`: includes the contents of `FILE`\n+- `--html-after-content FILE`: includes the contents of `FILE`\n   directly before `</body>`, after all the rendered content.\n \n All of these can be specified multiple times, and they are output in\n-the order in which they are specified. The first line of the file must\n+the order in which they are specified. The first line of the file being rendered must\n be the title, prefixed with `%` (e.g. this page has `% Rust\n Documentation` on the first line).\n "}, {"sha": "0931f132c0214b8a784e931d39145b74ae4cfc1b", "filename": "src/librustdoc/externalfiles.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/63afc082629044755df0c416ecf4c20ef0375254/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63afc082629044755df0c416ecf4c20ef0375254/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=63afc082629044755df0c416ecf4c20ef0375254", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::{io, str};\n+\n+#[deriving(Clone)]\n+pub struct ExternalHtml{\n+    pub in_header: String,\n+    pub before_content: String,\n+    pub after_content: String\n+}\n+\n+impl ExternalHtml {\n+    pub fn load(in_header: &[String], before_content: &[String], after_content: &[String])\n+            -> Option<ExternalHtml> {\n+        match (load_external_files(in_header),\n+               load_external_files(before_content),\n+               load_external_files(after_content)) {\n+            (Some(ih), Some(bc), Some(ac)) => Some(ExternalHtml {\n+                in_header: ih,\n+                before_content: bc,\n+                after_content: ac\n+            }),\n+            _ => None\n+        }\n+    }\n+}\n+\n+pub fn load_string(input: &Path) -> io::IoResult<Option<String>> {\n+    let mut f = try!(io::File::open(input));\n+    let d = try!(f.read_to_end());\n+    Ok(str::from_utf8(d.as_slice()).map(|s| s.to_string()))\n+}\n+\n+macro_rules! load_or_return {\n+    ($input: expr, $cant_read: expr, $not_utf8: expr) => {\n+        {\n+            let input = Path::new($input);\n+            match ::externalfiles::load_string(&input) {\n+                Err(e) => {\n+                    let _ = writeln!(&mut io::stderr(),\n+                                     \"error reading `{}`: {}\", input.display(), e);\n+                    return $cant_read;\n+                }\n+                Ok(None) => {\n+                    let _ = writeln!(&mut io::stderr(),\n+                                     \"error reading `{}`: not UTF-8\", input.display());\n+                    return $not_utf8;\n+                }\n+                Ok(Some(s)) => s\n+            }\n+        }\n+    }\n+}\n+\n+pub fn load_external_files(names: &[String]) -> Option<String> {\n+    let mut out = String::new();\n+    for name in names.iter() {\n+        out.push_str(load_or_return!(name.as_slice(), None, None).as_slice());\n+        out.push_char('\\n');\n+    }\n+    Some(out)\n+}"}, {"sha": "aa298d07780bfe341da75be01175462e3ba40542", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63afc082629044755df0c416ecf4c20ef0375254/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63afc082629044755df0c416ecf4c20ef0375254/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=63afc082629044755df0c416ecf4c20ef0375254", "patch": "@@ -11,10 +11,13 @@\n use std::fmt;\n use std::io;\n \n+use externalfiles::ExternalHtml;\n+\n #[deriving(Clone)]\n pub struct Layout {\n     pub logo: String,\n     pub favicon: String,\n+    pub external_html: ExternalHtml,\n     pub krate: String,\n     pub playground_url: String,\n }\n@@ -44,6 +47,7 @@ r##\"<!DOCTYPE html>\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"{root_path}main.css\">\n \n     {favicon}\n+    {in_header}\n </head>\n <body>\n     <!--[if lte IE 8]>\n@@ -53,6 +57,8 @@ r##\"<!DOCTYPE html>\n     </div>\n     <![endif]-->\n \n+    {before_content}\n+\n     <section class=\"sidebar\">\n         {logo}\n         {sidebar}\n@@ -105,6 +111,8 @@ r##\"<!DOCTYPE html>\n         </div>\n     </div>\n \n+    {after_content}\n+\n     <script>\n         window.rootPath = \"{root_path}\";\n         window.currentCrate = \"{krate}\";\n@@ -133,6 +141,9 @@ r##\"<!DOCTYPE html>\n     } else {\n         format!(r#\"<link rel=\"shortcut icon\" href=\"{}\">\"#, layout.favicon)\n     },\n+    in_header = layout.external_html.in_header,\n+    before_content = layout.external_html.before_content,\n+    after_content = layout.external_html.after_content,\n     sidebar   = *sidebar,\n     krate     = layout.krate,\n     play_url  = layout.playground_url,"}, {"sha": "f5d379c4bafa10844c903ec6789f3638ff0498e2", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63afc082629044755df0c416ecf4c20ef0375254/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63afc082629044755df0c416ecf4c20ef0375254/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=63afc082629044755df0c416ecf4c20ef0375254", "patch": "@@ -41,6 +41,8 @@ use std::str;\n use std::string::String;\n use std::sync::Arc;\n \n+use externalfiles::ExternalHtml;\n+\n use serialize::json::ToJson;\n use syntax::ast;\n use syntax::ast_util;\n@@ -78,7 +80,7 @@ pub struct Context {\n     /// This changes as the context descends into the module hierarchy.\n     pub dst: Path,\n     /// This describes the layout of each page, and is not modified after\n-    /// creation of the context (contains info like the favicon)\n+    /// creation of the context (contains info like the favicon and added html).\n     pub layout: layout::Layout,\n     /// This map is a list of what should be displayed on the sidebar of the\n     /// current page. The key is the section header (traits, modules,\n@@ -220,7 +222,7 @@ local_data_key!(pub cache_key: Arc<Cache>)\n local_data_key!(pub current_location_key: Vec<String> )\n \n /// Generates the documentation for `crate` into the directory `dst`\n-pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n+pub fn run(mut krate: clean::Crate, external_html: &ExternalHtml, dst: Path) -> io::IoResult<()> {\n     let mut cx = Context {\n         dst: dst,\n         current: Vec::new(),\n@@ -229,12 +231,14 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n         layout: layout::Layout {\n             logo: \"\".to_string(),\n             favicon: \"\".to_string(),\n+            external_html: external_html.clone(),\n             krate: krate.name.clone(),\n             playground_url: \"\".to_string(),\n         },\n         include_sources: true,\n         render_redirect_pages: false,\n     };\n+\n     try!(mkdir(&cx.dst));\n \n     // Crawl the crate attributes looking for attributes which control how we're"}, {"sha": "46aa6cb5e94ebe59961ad4b7246073b68a181c39", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/63afc082629044755df0c416ecf4c20ef0375254/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63afc082629044755df0c416ecf4c20ef0375254/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=63afc082629044755df0c416ecf4c20ef0375254", "patch": "@@ -32,13 +32,16 @@ use std::io::{File, MemWriter};\n use std::str;\n use std::gc::Gc;\n use serialize::{json, Decodable, Encodable};\n+use externalfiles::ExternalHtml;\n \n // reexported from `clean` so it can be easily updated with the mod itself\n pub use clean::SCHEMA_VERSION;\n \n pub mod clean;\n pub mod core;\n pub mod doctree;\n+#[macro_escape]\n+pub mod externalfiles;\n pub mod fold;\n pub mod html {\n     pub mod highlight;\n@@ -113,16 +116,17 @@ pub fn opts() -> Vec<getopts::OptGroup> {\n                  \"ARGS\"),\n         optmulti(\"\", \"markdown-css\", \"CSS files to include via <link> in a rendered Markdown file\",\n                  \"FILES\"),\n-        optmulti(\"\", \"markdown-in-header\",\n-                 \"files to include inline in the <head> section of a rendered Markdown file\",\n+        optmulti(\"\", \"html-in-header\",\n+                 \"files to include inline in the <head> section of a rendered Markdown file \\\n+                 or generated documentation\",\n                  \"FILES\"),\n-        optmulti(\"\", \"markdown-before-content\",\n+        optmulti(\"\", \"html-before-content\",\n                  \"files to include inline between <body> and the content of a rendered \\\n-                 Markdown file\",\n+                 Markdown file or generated documentation\",\n                  \"FILES\"),\n-        optmulti(\"\", \"markdown-after-content\",\n+        optmulti(\"\", \"html-after-content\",\n                  \"files to include inline between the content and </body> of a rendered \\\n-                 Markdown file\",\n+                 Markdown file or generated documentation\",\n                  \"FILES\"),\n         optopt(\"\", \"markdown-playground-url\",\n                \"URL to send code snippets to\", \"URL\")\n@@ -179,6 +183,14 @@ pub fn main_args(args: &[String]) -> int {\n     let output = matches.opt_str(\"o\").map(|s| Path::new(s));\n     let cfgs = matches.opt_strs(\"cfg\");\n \n+    let external_html = match ExternalHtml::load(\n+            matches.opt_strs(\"html-in-header\").as_slice(),\n+            matches.opt_strs(\"html-before-content\").as_slice(),\n+            matches.opt_strs(\"html-after-content\").as_slice()) {\n+        Some(eh) => eh,\n+        None => return 3\n+    };\n+\n     match (should_test, markdown_input) {\n         (true, true) => {\n             return markdown::test(input, libs, test_args)\n@@ -187,7 +199,7 @@ pub fn main_args(args: &[String]) -> int {\n             return test::run(input, cfgs, libs, test_args)\n         }\n         (false, true) => return markdown::render(input, output.unwrap_or(Path::new(\"doc\")),\n-                                                 &matches),\n+                                                 &matches, &external_html),\n         (false, false) => {}\n     }\n \n@@ -215,7 +227,7 @@ pub fn main_args(args: &[String]) -> int {\n     let started = time::precise_time_ns();\n     match matches.opt_str(\"w\").as_ref().map(|s| s.as_slice()) {\n         Some(\"html\") | None => {\n-            match html::render::run(krate, output.unwrap_or(Path::new(\"doc\"))) {\n+            match html::render::run(krate, &external_html, output.unwrap_or(Path::new(\"doc\"))) {\n                 Ok(()) => {}\n                 Err(e) => fail!(\"failed to generate documentation: {}\", e),\n             }"}, {"sha": "da271be4768e3de393d2a22389a4db620cd7a360", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 8, "deletions": 51, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/63afc082629044755df0c416ecf4c20ef0375254/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63afc082629044755df0c416ecf4c20ef0375254/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=63afc082629044755df0c416ecf4c20ef0375254", "patch": "@@ -9,43 +9,19 @@\n // except according to those terms.\n \n use std::collections::HashSet;\n-use std::{str, io};\n+use std::io;\n use std::string::String;\n \n use getopts;\n use testing;\n \n+use externalfiles::ExternalHtml;\n+\n use html::escape::Escape;\n use html::markdown;\n use html::markdown::{MarkdownWithToc, find_testable_code, reset_headers};\n use test::Collector;\n \n-fn load_string(input: &Path) -> io::IoResult<Option<String>> {\n-    let mut f = try!(io::File::open(input));\n-    let d = try!(f.read_to_end());\n-    Ok(str::from_utf8(d.as_slice()).map(|s| s.to_string()))\n-}\n-macro_rules! load_or_return {\n-    ($input: expr, $cant_read: expr, $not_utf8: expr) => {\n-        {\n-            let input = Path::new($input);\n-            match load_string(&input) {\n-                Err(e) => {\n-                    let _ = writeln!(&mut io::stderr(),\n-                                     \"error reading `{}`: {}\", input.display(), e);\n-                    return $cant_read;\n-                }\n-                Ok(None) => {\n-                    let _ = writeln!(&mut io::stderr(),\n-                                     \"error reading `{}`: not UTF-8\", input.display());\n-                    return $not_utf8;\n-                }\n-                Ok(Some(s)) => s\n-            }\n-        }\n-    }\n-}\n-\n /// Separate any lines at the start of the file that begin with `%`.\n fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n     let mut metadata = Vec::new();\n@@ -62,18 +38,10 @@ fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n     (metadata, \"\")\n }\n \n-fn load_external_files(names: &[String]) -> Option<String> {\n-    let mut out = String::new();\n-    for name in names.iter() {\n-        out.push_str(load_or_return!(name.as_slice(), None, None).as_slice());\n-        out.push_char('\\n');\n-    }\n-    Some(out)\n-}\n-\n /// Render `input` (e.g. \"foo.md\") into an HTML file in `output`\n /// (e.g. output = \"bar\" => \"bar/foo.html\").\n-pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int {\n+pub fn render(input: &str, mut output: Path, matches: &getopts::Matches,\n+              external_html: &ExternalHtml) -> int {\n     let input_p = Path::new(input);\n     output.push(input_p.filestem().unwrap());\n     output.set_extension(\"html\");\n@@ -91,17 +59,6 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int\n     }\n     let playground = playground.unwrap_or(\"\".to_string());\n \n-    let (in_header, before_content, after_content) =\n-        match (load_external_files(matches.opt_strs(\"markdown-in-header\")\n-                                          .as_slice()),\n-               load_external_files(matches.opt_strs(\"markdown-before-content\")\n-                                          .as_slice()),\n-               load_external_files(matches.opt_strs(\"markdown-after-content\")\n-                                          .as_slice())) {\n-        (Some(a), Some(b), Some(c)) => (a,b,c),\n-        _ => return 3\n-    };\n-\n     let mut out = match io::File::create(&output) {\n         Err(e) => {\n             let _ = writeln!(&mut io::stderr(),\n@@ -153,10 +110,10 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int\n </html>\"#,\n         title = Escape(title),\n         css = css,\n-        in_header = in_header,\n-        before_content = before_content,\n+        in_header = external_html.in_header,\n+        before_content = external_html.before_content,\n         text = MarkdownWithToc(text),\n-        after_content = after_content,\n+        after_content = external_html.after_content,\n         playground = playground,\n         );\n "}]}