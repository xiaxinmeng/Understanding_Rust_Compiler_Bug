{"sha": "cc8902994248930ef0902ff68483ce1991fa4e24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjODkwMjk5NDI0ODkzMGVmMDkwMmZmNjg0ODNjZTE5OTFmYTRlMjQ=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-02-15T00:00:04Z"}, "committer": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-02-15T02:36:10Z"}, "message": "libcore: Remove ptr::mut_addr_of since &mut is coerced to *mut", "tree": {"sha": "fe17e307be4296daae5f2afe8e1df0f2ee19b7de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe17e307be4296daae5f2afe8e1df0f2ee19b7de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc8902994248930ef0902ff68483ce1991fa4e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8902994248930ef0902ff68483ce1991fa4e24", "html_url": "https://github.com/rust-lang/rust/commit/cc8902994248930ef0902ff68483ce1991fa4e24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc8902994248930ef0902ff68483ce1991fa4e24/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af2f0ef0888d05209bddd16ab210ae0e8400b7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2f0ef0888d05209bddd16ab210ae0e8400b7de", "html_url": "https://github.com/rust-lang/rust/commit/af2f0ef0888d05209bddd16ab210ae0e8400b7de"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "b16cc1a1a1c0b360d9a2f17a24438e7cb845165e", "filename": "src/libcore/os.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=cc8902994248930ef0902ff68483ce1991fa4e24", "patch": "@@ -306,10 +306,9 @@ pub fn waitpid(pid: pid_t) -> c_int {\n pub fn waitpid(pid: pid_t) -> c_int {\n     unsafe {\n         use libc::funcs::posix01::wait::*;\n-        let status = 0 as c_int;\n+        let mut status = 0 as c_int;\n \n-        assert (waitpid(pid, ptr::mut_addr_of(&status),\n-                        0 as c_int) != (-1 as c_int));\n+        assert (waitpid(pid, &mut status, 0 as c_int) != (-1 as c_int));\n         return status;\n     }\n }\n@@ -322,7 +321,7 @@ pub fn pipe() -> Pipe {\n     unsafe {\n         let mut fds = Pipe {mut in: 0 as c_int,\n                         mut out: 0 as c_int };\n-        assert (libc::pipe(ptr::mut_addr_of(&(fds.in))) == (0 as c_int));\n+        assert (libc::pipe(&mut fds.in) == (0 as c_int));\n         return Pipe {in: fds.in, out: fds.out};\n     }\n }\n@@ -339,8 +338,7 @@ pub fn pipe() -> Pipe {\n         // first, as in rust_run_program.\n         let mut fds = Pipe { mut in: 0 as c_int,\n                     mut out: 0 as c_int };\n-        let res = libc::pipe(ptr::mut_addr_of(&(fds.in)),\n-                             1024 as c_uint,\n+        let res = libc::pipe(&mut fds.in, 1024 as c_uint,\n                              (libc::O_BINARY | libc::O_NOINHERIT) as c_int);\n         assert (res == 0 as c_int);\n         assert (fds.in != -1 as c_int && fds.in != 0 as c_int);\n@@ -374,8 +372,8 @@ pub fn self_exe_path() -> Option<Path> {\n                            KERN_PROC as c_int,\n                            KERN_PROC_PATHNAME as c_int, -1 as c_int];\n                 sysctl(vec::raw::to_ptr(mib), vec::len(mib) as c_uint,\n-                       buf as *mut c_void, ptr::mut_addr_of(&sz),\n-                       ptr::null(), 0u as size_t) == (0 as c_int)\n+                       buf, &mut sz, ptr::null(),\n+                       0u as size_t) == (0 as c_int)\n             }\n         }\n     }\n@@ -407,7 +405,7 @@ pub fn self_exe_path() -> Option<Path> {\n         unsafe {\n             do fill_charp_buf() |buf, sz| {\n                 libc::funcs::extra::_NSGetExecutablePath(\n-                    buf, ptr::mut_addr_of(&(sz as u32))) == (0 as c_int)\n+                    buf, &mut (sz as u32)) == (0 as c_int)\n             }\n         }\n     }"}, {"sha": "f196b97e5e53e4d14efdf5ba72525de0c526605c", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=cc8902994248930ef0902ff68483ce1991fa4e24", "patch": "@@ -243,7 +243,7 @@ impl Path {\n         unsafe {\n              do str::as_c_str(self.to_str()) |buf| {\n                 let mut st = stat::arch::default_stat();\n-                let r = libc::stat(buf, ptr::mut_addr_of(&st));\n+                let r = libc::stat(buf, &mut st);\n \n                 if r == 0 { Some(move st) } else { None }\n             }\n@@ -255,7 +255,7 @@ impl Path {\n         unsafe {\n             do str::as_c_str(self.to_str()) |buf| {\n                 let mut st = stat::arch::default_stat();\n-                let r = libc::lstat(buf, ptr::mut_addr_of(&st));\n+                let r = libc::lstat(buf, &mut st);\n \n                 if r == 0 { Some(move st) } else { None }\n             }"}, {"sha": "c6617bdd516e5c4a2e1b6f9a4012926e42278d3d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=cc8902994248930ef0902ff68483ce1991fa4e24", "patch": "@@ -44,14 +44,6 @@ extern mod rusti {\n #[inline(always)]\n pub pure fn addr_of<T>(val: &T) -> *T { unsafe { rusti::addr_of(*val) } }\n \n-/// Get an unsafe mut pointer to a value\n-#[inline(always)]\n-pub pure fn mut_addr_of<T>(val: &T) -> *mut T {\n-    unsafe {\n-        cast::reinterpret_cast(&rusti::addr_of(*val))\n-    }\n-}\n-\n /// Calculate the offset from a pointer\n #[inline(always)]\n pub pure fn offset<T>(ptr: *T, count: uint) -> *T {\n@@ -313,8 +305,8 @@ impl<T:Ord> Ord for &const T {\n pub fn test() {\n     unsafe {\n         struct Pair {mut fst: int, mut snd: int};\n-        let p = Pair {mut fst: 10, mut snd: 20};\n-        let pptr: *mut Pair = mut_addr_of(&p);\n+        let mut p = Pair {mut fst: 10, mut snd: 20};\n+        let pptr: *mut Pair = &mut p;\n         let iptr: *mut int = cast::reinterpret_cast(&pptr);\n         assert (*iptr == 10);;\n         *iptr = 30;"}, {"sha": "a95d4236ce9604a18ba39c7d337dafe78b3e6016", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=cc8902994248930ef0902ff68483ce1991fa4e24", "patch": "@@ -2110,7 +2110,7 @@ pub mod raw {\n         let v: **vec::raw::VecRepr = cast::transmute(v);\n         let repr: *vec::raw::VecRepr = *v;\n         (*repr).unboxed.fill = new_len + 1u;\n-        let null = ptr::mut_offset(ptr::mut_addr_of(&((*repr).unboxed.data)),\n+        let null = ptr::mut_offset(cast::transmute(&((*repr).unboxed.data)),\n                                    new_len);\n         *null = 0u8;\n     }"}, {"sha": "ed356f4001dd6bcbceeed7dcaf8871f6198f5847", "filename": "src/test/compile-fail/mutable-huh-ptr-assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs?ref=cc8902994248930ef0902ff68483ce1991fa4e24", "patch": "@@ -16,8 +16,8 @@ fn main() {\n     }\n \n     unsafe {\n-        let a = 0;\n-        let v = ptr::mut_addr_of(&a);\n+        let mut a = 0;\n+        let v = &mut a;\n         f(v);\n     }\n }"}, {"sha": "dba6f9ae3fa0fb5df1db58067dc842f0e5086a7b", "filename": "src/test/compile-fail/mutable-huh-variance-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs?ref=cc8902994248930ef0902ff68483ce1991fa4e24", "patch": "@@ -13,8 +13,8 @@\n extern mod std;\n \n fn main() {\n-    let a = ~[0];\n-    let v: *mut ~[int] = ptr::mut_addr_of(&a);\n+    let mut a = ~[0];\n+    let v: *mut ~[int] = &mut a;\n \n     fn f(&&v: *mut ~[const int]) {\n         unsafe {"}, {"sha": "fbea8022cfc3c0000e29de1bd769639fcbe0befb", "filename": "src/test/run-fail/too-much-recursion-unwinding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8902994248930ef0902ff68483ce1991fa4e24/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs?ref=cc8902994248930ef0902ff68483ce1991fa4e24", "patch": "@@ -39,6 +39,6 @@ fn r(recursed: *mut bool) -> r {\n \n fn main() {\n     let mut recursed = false;\n-    let _r = r(ptr::mut_addr_of(&recursed));\n+    let _r = r(&mut recursed);\n     recurse();\n }"}]}