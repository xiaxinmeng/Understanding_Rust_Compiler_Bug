{"sha": "6b39781df6ad149c4fb5cb7d714daf1b7168081f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMzk3ODFkZjZhZDE0OWM0ZmI1Y2I3ZDcxNGRhZjFiNzE2ODA4MWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-12T14:06:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:38:12Z"}, "message": "connect NLL machinery to the `NiceRegionError` code", "tree": {"sha": "d419a2cc716dc07915d177ac4635237b3a89c516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d419a2cc716dc07915d177ac4635237b3a89c516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b39781df6ad149c4fb5cb7d714daf1b7168081f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b39781df6ad149c4fb5cb7d714daf1b7168081f", "html_url": "https://github.com/rust-lang/rust/commit/6b39781df6ad149c4fb5cb7d714daf1b7168081f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b39781df6ad149c4fb5cb7d714daf1b7168081f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e7072d0b57c12135175bac494c6d1ddd00d285", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e7072d0b57c12135175bac494c6d1ddd00d285", "html_url": "https://github.com/rust-lang/rust/commit/94e7072d0b57c12135175bac494c6d1ddd00d285"}], "stats": {"total": 226, "additions": 144, "deletions": 82}, "files": [{"sha": "1d5ecd1483a2309b9baeedd95bb85fb7817add17", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -78,7 +78,7 @@ mod note;\n \n mod need_type_info;\n \n-mod nice_region_error;\n+pub mod nice_region_error;\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn note_and_explain_region(self,"}, {"sha": "a6fcbdea959c19e96887556a01ee7817049888a1", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -15,11 +15,13 @@ use rustc::infer::NLLRegionVariableOrigin;\n use rustc::infer::RegionObligation;\n use rustc::infer::RegionVariableOrigin;\n use rustc::infer::SubregionOrigin;\n+use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::region_constraints::{GenericKind, VarOrigins};\n use rustc::mir::{ClosureOutlivesRequirement, ClosureOutlivesSubject, ClosureRegionRequirements,\n                  Local, Location, Mir};\n use rustc::traits::ObligationCause;\n use rustc::ty::{self, RegionVid, Ty, TypeFoldable};\n+use rustc::util::common::ErrorReported;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::DiagnosticBuilder;\n use std::fmt;\n@@ -230,7 +232,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// `num_region_variables` valid inference variables; the first N\n     /// of those will be constant regions representing the free\n     /// regions defined in `universal_regions`.\n-    pub fn new(\n+    pub(crate) fn new(\n         var_origins: VarOrigins,\n         universal_regions: UniversalRegions<'tcx>,\n         mir: &Mir<'tcx>,\n@@ -430,7 +432,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         self.check_type_tests(infcx, mir, outlives_requirements.as_mut());\n \n-        self.check_universal_regions(infcx, mir, outlives_requirements.as_mut());\n+        self.check_universal_regions(infcx, mir, mir_def_id, outlives_requirements.as_mut());\n \n         let outlives_requirements = outlives_requirements.unwrap_or(vec![]);\n \n@@ -807,6 +809,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n         mir: &Mir<'tcx>,\n+        mir_def_id: DefId,\n         mut propagated_outlives_requirements: Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n     ) {\n         // The universal regions are always found in a prefix of the\n@@ -819,7 +822,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // they did not grow too large, accumulating any requirements\n         // for our caller into the `outlives_requirements` vector.\n         for (fr, _) in universal_definitions {\n-            self.check_universal_region(infcx, mir, fr, &mut propagated_outlives_requirements);\n+            self.check_universal_region(\n+                infcx,\n+                mir,\n+                mir_def_id,\n+                fr,\n+                &mut propagated_outlives_requirements,\n+            );\n         }\n     }\n \n@@ -835,6 +844,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n         mir: &Mir<'tcx>,\n+        mir_def_id: DefId,\n         longer_fr: RegionVid,\n         propagated_outlives_requirements: &mut Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n     ) {\n@@ -891,7 +901,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // Note: in this case, we use the unapproximated regions\n             // to report the error. This gives better error messages\n             // in some cases.\n-            self.report_error(infcx, mir, longer_fr, shorter_fr, blame_span);\n+            self.report_error(infcx, mir, mir_def_id, longer_fr, shorter_fr, blame_span);\n         }\n     }\n \n@@ -907,18 +917,30 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir: &Mir<'tcx>,\n+        mir_def_id: DefId,\n         fr: RegionVid,\n         outlived_fr: RegionVid,\n         blame_span: Span,\n     ) {\n         // Obviously uncool error reporting.\n \n-        let fr_string = match self.definitions[fr].external_name {\n+        let fr_name = self.definitions[fr].external_name;\n+        let outlived_fr_name = self.definitions[outlived_fr].external_name;\n+\n+        if let (Some(f), Some(o)) = (fr_name, outlived_fr_name) {\n+            let tables = infcx.tcx.typeck_tables_of(mir_def_id);\n+            let nice = NiceRegionError::new(infcx.tcx, blame_span, o, f, Some(tables));\n+            if let Some(ErrorReported) = nice.try_report() {\n+                return;\n+            }\n+        }\n+\n+        let fr_string = match fr_name {\n             Some(r) => format!(\"free region `{}`\", r),\n             None => format!(\"free region `{:?}`\", fr),\n         };\n \n-        let outlived_fr_string = match self.definitions[outlived_fr].external_name {\n+        let outlived_fr_string = match outlived_fr_name {\n             Some(r) => format!(\"free region `{}`\", r),\n             None => format!(\"free region `{:?}`\", outlived_fr),\n         };"}, {"sha": "45604d52958c185f7535ab98a4bc3ebd00ad0d91", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -445,16 +445,20 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let defining_ty = self.defining_ty();\n         debug!(\"build: defining_ty={:?}\", defining_ty);\n \n-        let indices = self.compute_indices(fr_static, defining_ty);\n+        let mut indices = self.compute_indices(fr_static, defining_ty);\n         debug!(\"build: indices={:?}\", indices);\n \n         let bound_inputs_and_output = self.compute_inputs_and_output(&indices, defining_ty);\n \n         // \"Liberate\" the late-bound regions. These correspond to\n         // \"local\" free regions.\n         let first_local_index = self.infcx.num_region_vars();\n-        let inputs_and_output = self.infcx\n-            .replace_bound_regions_with_nll_infer_vars(FR, &bound_inputs_and_output);\n+        let inputs_and_output = self.infcx.replace_bound_regions_with_nll_infer_vars(\n+            FR,\n+            self.mir_def_id,\n+            &bound_inputs_and_output,\n+            &mut indices,\n+        );\n         let fr_fn_body = self.infcx.next_nll_region_var(FR).to_region_vid();\n         let num_universals = self.infcx.num_region_vars();\n \n@@ -717,7 +721,7 @@ impl UniversalRegionRelations {\n     }\n }\n \n-pub(crate) trait InferCtxtExt<'tcx> {\n+trait InferCtxtExt<'tcx> {\n     fn replace_free_regions_with_nll_infer_vars<T>(\n         &self,\n         origin: NLLRegionVariableOrigin,\n@@ -729,7 +733,9 @@ pub(crate) trait InferCtxtExt<'tcx> {\n     fn replace_bound_regions_with_nll_infer_vars<T>(\n         &self,\n         origin: NLLRegionVariableOrigin,\n+        all_outlive_scope: DefId,\n         value: &ty::Binder<T>,\n+        indices: &mut UniversalRegionIndices<'tcx>,\n     ) -> T\n     where\n         T: TypeFoldable<'tcx>;\n@@ -752,18 +758,38 @@ impl<'cx, 'gcx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'gcx, 'tcx> {\n     fn replace_bound_regions_with_nll_infer_vars<T>(\n         &self,\n         origin: NLLRegionVariableOrigin,\n+        all_outlive_scope: DefId,\n         value: &ty::Binder<T>,\n+        indices: &mut UniversalRegionIndices<'tcx>,\n     ) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let (value, _map) = self.tcx\n-            .replace_late_bound_regions(value, |_br| self.next_nll_region_var(origin));\n+        let (value, _map) = self.tcx.replace_late_bound_regions(value, |br| {\n+            let liberated_region = self.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n+                scope: all_outlive_scope,\n+                bound_region: br,\n+            }));\n+            let region_vid = self.next_nll_region_var(origin);\n+            indices.insert_late_bound_region(liberated_region, region_vid.to_region_vid());\n+            region_vid\n+        });\n         value\n     }\n }\n \n impl<'tcx> UniversalRegionIndices<'tcx> {\n+    /// Initially, the `UniversalRegionIndices` map contains only the\n+    /// early-bound regions in scope. Once that is all setup, we come\n+    /// in later and instantiate the late-bound regions, and then we\n+    /// insert the `ReFree` version of those into the map as\n+    /// well. These are used for error reporting.\n+    fn insert_late_bound_region(&mut self, r: ty::Region<'tcx>,\n+                                vid: ty::RegionVid)\n+    {\n+        self.indices.insert(r, vid);\n+    }\n+\n     /// Converts `r` into a local inference variable: `r` can either\n     /// by a `ReVar` (i.e., already a reference to an inference\n     /// variable) or it can be `'static` or some early-bound"}, {"sha": "f6ad2820d17ce4d6e651eb1a88198e277767a61e", "filename": "src/test/compile-fail/mir_check_cast_reify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_reify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_reify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_reify.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -45,7 +45,7 @@ fn bar<'a>(x: &'a u32) -> &'static u32 {\n     // as part of checking the `ReifyFnPointer`.\n     let f: fn(_) -> _ = foo;\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR free region `'_#1r` does not outlive free region `'static`\n+    //~| ERROR free region `'a` does not outlive free region `'static`\n     f(x)\n }\n "}, {"sha": "c9b378dacd540cb7bfd283efbe2d895a1f5f780c", "filename": "src/test/compile-fail/mir_check_cast_unsafe_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsafe_fn.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -17,7 +17,7 @@ fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n     // in `g`. These are related via the `UnsafeFnPointer` cast.\n     let g: unsafe fn(_) -> _ = f;\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR free region `'_#1r` does not outlive free region `'static`\n+    //~| ERROR free region `'a` does not outlive free region `'static`\n     unsafe { g(input) }\n }\n "}, {"sha": "1df56793f73bdab5d5c30c07d6b40f56e4253639", "filename": "src/test/compile-fail/mir_check_cast_unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsize.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -16,7 +16,7 @@\n use std::fmt::Debug;\n \n fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n-    //~^ ERROR free region `'_#1r` does not outlive free region `'static`\n+    //~^ ERROR free region `'a` does not outlive free region `'static`\n     x\n     //~^ WARNING not reporting region error due to -Znll\n }"}, {"sha": "ecea8756903aeb9f694ef3830f3a1fa7ab20e2ef", "filename": "src/test/compile-fail/nll/where_clauses_in_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_functions.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -21,7 +21,7 @@ where\n \n fn bar<'a, 'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n     foo(x, y)\n-    //~^ ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+    //~^ ERROR lifetime mismatch [E0623]\n     //~| WARNING not reporting region error due to -Znll\n }\n "}, {"sha": "f1a6dc48e13b80ed809652e7cb18c8042626dfcb", "filename": "src/test/compile-fail/nll/where_clauses_in_structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_structs.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -21,7 +21,7 @@ struct Foo<'a: 'b, 'b> {\n \n fn bar<'a, 'b>(x: Cell<&'a u32>, y: Cell<&'b u32>) {\n     Foo { x, y };\n-    //~^ ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+    //~^ ERROR lifetime mismatch [E0623]\n     //~| WARNING not reporting region error due to -Znll\n }\n "}, {"sha": "a217cc9ebfa527a70f768f5ca954cf0c16177065", "filename": "src/test/compile-fail/regions-static-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -24,10 +24,10 @@ fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n fn error(u: &(), v: &()) {\n     static_id(&u); //[ll]~ ERROR cannot infer an appropriate lifetime\n     //[nll]~^ WARNING not reporting region error due to -Znll\n-    //[nll]~| ERROR free region `'_#1r` does not outlive free region `'static`\n+    //[nll]~| ERROR free region `` does not outlive free region `'static`\n     static_id_indirect(&v); //[ll]~ ERROR cannot infer an appropriate lifetime\n     //[nll]~^ WARNING not reporting region error due to -Znll\n-    //[nll]~| ERROR free region `'_#2r` does not outlive free region `'static`\n+    //[nll]~| ERROR free region `` does not outlive free region `'static`\n }\n \n fn main() {}"}, {"sha": "41c744fec6e762024430a75c82cc4ed51acc1534", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -34,7 +34,7 @@ fn test() {\n     {\n         let y = 22;\n         let mut closure = expect_sig(|p, y| *p = y);\n-        //~^ ERROR free region `'_#4r` does not outlive free region `'_#3r`\n+        //~^ ERROR does not outlive free region\n         //~| WARNING not reporting region error due to -Znll\n         closure(&mut p, &y);\n     }"}, {"sha": "3bd02f308c883414032ded73ddc542c6d55d1373", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -4,7 +4,7 @@ warning: not reporting region error due to -Znll\n 36 |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                                  ^\n \n-error: free region `'_#4r` does not outlive free region `'_#3r`\n+error: free region `ReFree(DefId(0/1:9 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]), BrAnon(3))` does not outlive free region `ReFree(DefId(0/1:9 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]), BrAnon(2))`\n   --> $DIR/escape-argument-callee.rs:36:45\n    |\n 36 |         let mut closure = expect_sig(|p, y| *p = y);"}, {"sha": "30a6dfc5b3edd05bf737f99c8b22c69a633f4427", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -54,7 +54,7 @@ fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell\n             // Only works if 'x: 'y:\n             let p = x.get();\n             //~^ WARN not reporting region error due to -Znll\n-            //~| ERROR free region `'_#5r` does not outlive free region `'_#6r`\n+            //~| ERROR does not outlive free region\n             demand_y(x, y, p)\n         },\n     );"}, {"sha": "7e48c0fc5842a14d61e19fc451f91d945256b083", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -4,7 +4,7 @@ warning: not reporting region error due to -Znll\n 55 |             let p = x.get();\n    |                     ^^^^^^^\n \n-error: free region `'_#5r` does not outlive free region `'_#6r`\n+error: free region `ReFree(DefId(0/1:20 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]), BrAnon(1))` does not outlive free region `ReFree(DefId(0/1:20 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]), BrAnon(2))`\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:55:17\n    |\n 55 |             let p = x.get();\n@@ -17,7 +17,7 @@ note: No external requirements\n 54 | |             // Only works if 'x: 'y:\n 55 | |             let p = x.get();\n 56 | |             //~^ WARN not reporting region error due to -Znll\n-57 | |             //~| ERROR free region `'_#5r` does not outlive free region `'_#6r`\n+57 | |             //~| ERROR does not outlive free region\n 58 | |             demand_y(x, y, p)\n 59 | |         },\n    | |_________^"}, {"sha": "91128035f3d95162d81615b188c68c3ecde35611", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -51,7 +51,7 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n #[rustc_regions]\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-        //~^ ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+        //~^ ERROR lifetime mismatch\n \n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll"}, {"sha": "f9a6999243a9c14ec89868a9df6400689bf53783", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -9,7 +9,7 @@ note: External requirements\n    |\n 53 |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n-54 | |         //~^ ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+54 | |         //~^ ERROR lifetime mismatch\n 55 | |\n 56 | |         // Only works if 'x: 'y:\n 57 | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll\n@@ -23,18 +23,22 @@ note: External requirements\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r\n \n-error: free region `'_#1r` does not outlive free region `'_#2r`\n+error[E0623]: lifetime mismatch\n   --> $DIR/propagate-approximated-ref.rs:53:29\n    |\n+52 | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |                                -------                -------\n+   |                                |\n+   |                                these two types are declared with different lifetimes...\n 53 |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                             ^^^^^^^\n+   |                             ^^^^^^^ ...but data from `cell_a` flows into `cell_b` here\n \n note: No external requirements\n   --> $DIR/propagate-approximated-ref.rs:52:1\n    |\n 52 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n 53 | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-54 | |         //~^ ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+54 | |         //~^ ERROR lifetime mismatch\n 55 | |\n ...  |\n 58 | |     });"}, {"sha": "f210346a82a675b1f9a5062cbd063f320a56306d", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -31,7 +31,7 @@ fn case1() {\n     foo(cell, |cell_a, cell_x| {\n         //~^ WARNING not reporting region error due to -Znll\n         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n-        //~^ ERROR free region `'_#2r` does not outlive free region `'_#1r`\n+        //~^ ERROR does not outlive free region\n     })\n }\n "}, {"sha": "290377996c942a593bf17d08f3de7d50f54cae86", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -4,7 +4,7 @@ warning: not reporting region error due to -Znll\n 31 |     foo(cell, |cell_a, cell_x| {\n    |     ^^^\n \n-error: free region `'_#2r` does not outlive free region `'_#1r`\n+error: free region `ReFree(DefId(0/1:12 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]), BrAnon(1))` does not outlive free region `'_#1r`\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:33:9\n    |\n 33 |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n@@ -17,7 +17,7 @@ note: No external requirements\n    |  _______________^\n 32 | |         //~^ WARNING not reporting region error due to -Znll\n 33 | |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n-34 | |         //~^ ERROR free region `'_#2r` does not outlive free region `'_#1r`\n+34 | |         //~^ ERROR does not outlive free region\n 35 | |     })\n    | |_____^\n    |"}, {"sha": "c66472d5ce9b1ec1060843ca0532457e56e61e1c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -43,7 +43,7 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n #[rustc_regions]\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-        //~^ ERROR free region `'_#1r` does not outlive free region `ReStatic`\n+        //~^ ERROR does not outlive free region\n \n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll"}, {"sha": "13aedc408cf06ed8ca7e9e8b7d0ef292eef379b9", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -9,7 +9,7 @@ note: External requirements\n    |\n 45 |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |  _______________________________________________^\n-46 | |         //~^ ERROR free region `'_#1r` does not outlive free region `ReStatic`\n+46 | |         //~^ ERROR does not outlive free region\n 47 | |\n 48 | |         // Only works if 'x: 'y:\n 49 | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll\n@@ -23,12 +23,12 @@ note: External requirements\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r\n \n-error: free region `'_#1r` does not outlive free region `ReStatic`\n+error: free region `ReFree(DefId(0/0:6 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]), BrNamed(crate0:DefIndex(1:16), 'a))` does not outlive free region `ReStatic`\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:47\n    |\n 45 |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |  _______________________________________________^\n-46 | |         //~^ ERROR free region `'_#1r` does not outlive free region `ReStatic`\n+46 | |         //~^ ERROR does not outlive free region\n 47 | |\n 48 | |         // Only works if 'x: 'y:\n 49 | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll\n@@ -40,7 +40,7 @@ note: No external requirements\n    |\n 44 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n 45 | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-46 | |         //~^ ERROR free region `'_#1r` does not outlive free region `ReStatic`\n+46 | |         //~^ ERROR does not outlive free region\n 47 | |\n ...  |\n 50 | |     });"}, {"sha": "f4011a0e5335e8fdee25a809af6ef98ef133a545", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -46,7 +46,7 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n #[rustc_regions]\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-        //~^ ERROR free region `'_#1r` does not outlive free region `ReStatic`\n+        //~^ ERROR does not outlive free region\n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())\n         //~^ WARNING not reporting region error due to -Znll"}, {"sha": "947ed650e6bcac055cc7496d60923841452df962", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -9,7 +9,7 @@ note: External requirements\n    |\n 48 |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n-49 | |         //~^ ERROR free region `'_#1r` does not outlive free region `ReStatic`\n+49 | |         //~^ ERROR does not outlive free region\n 50 | |         // Only works if 'x: 'y:\n 51 | |         demand_y(x, y, x.get())\n 52 | |         //~^ WARNING not reporting region error due to -Znll\n@@ -23,12 +23,12 @@ note: External requirements\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#0r\n \n-error: free region `'_#1r` does not outlive free region `ReStatic`\n+error: free region `ReFree(DefId(0/0:6 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]), BrNamed(crate0:DefIndex(1:16), 'a))` does not outlive free region `ReStatic`\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:47\n    |\n 48 |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n-49 | |         //~^ ERROR free region `'_#1r` does not outlive free region `ReStatic`\n+49 | |         //~^ ERROR does not outlive free region\n 50 | |         // Only works if 'x: 'y:\n 51 | |         demand_y(x, y, x.get())\n 52 | |         //~^ WARNING not reporting region error due to -Znll\n@@ -40,7 +40,7 @@ note: No external requirements\n    |\n 47 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n 48 | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-49 | |         //~^ ERROR free region `'_#1r` does not outlive free region `ReStatic`\n+49 | |         //~^ ERROR does not outlive free region\n 50 | |         // Only works if 'x: 'y:\n ...  |\n 53 | |     });"}, {"sha": "d163f304ae5b17f2509448dd3f1404e8b2aec70c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -44,7 +44,7 @@ fn demand_y<'x, 'y>(_outlives1: Cell<&&'x u32>, _outlives2: Cell<&'y &u32>, _y:\n #[rustc_regions]\n fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-        //~^ ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+        //~^ ERROR lifetime mismatch\n \n         // Only works if 'x: 'y:\n         demand_y(outlives1, outlives2, x.get()) //~ WARNING not reporting region error due to -Znll"}, {"sha": "64766296e65a55388b1fee1cab1e88743a2f955e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -9,7 +9,7 @@ note: External requirements\n    |\n 46 |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n    |  _____________________________________________^\n-47 | |         //~^ ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+47 | |         //~^ ERROR lifetime mismatch\n 48 | |\n 49 | |         // Only works if 'x: 'y:\n 50 | |         demand_y(outlives1, outlives2, x.get()) //~ WARNING not reporting region error due to -Znll\n@@ -23,18 +23,22 @@ note: External requirements\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r\n \n-error: free region `'_#1r` does not outlive free region `'_#2r`\n+error[E0623]: lifetime mismatch\n   --> $DIR/propagate-approximated-val.rs:46:29\n    |\n+45 | fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |                              -------                -------\n+   |                              |\n+   |                              these two types are declared with different lifetimes...\n 46 |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-   |                             ^^^^^^\n+   |                             ^^^^^^ ...but data from `cell_a` flows into `cell_b` here\n \n note: No external requirements\n   --> $DIR/propagate-approximated-val.rs:45:1\n    |\n 45 | / fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n 46 | |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-47 | |         //~^ ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+47 | |         //~^ ERROR lifetime mismatch\n 48 | |\n ...  |\n 51 | |     });"}, {"sha": "eb512a3b9b1fb13eded1a71570b5c7510a9b82ac", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -46,7 +46,7 @@ fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())\n         //~^ WARN not reporting region error due to -Znll\n-        //~| ERROR free region `'_#6r` does not outlive free region `'_#4r`\n+        //~| ERROR does not outlive free region\n     });\n }\n "}, {"sha": "08dcfb042b5f4152f74284d22d27b24effbaeff3", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -4,7 +4,7 @@ warning: not reporting region error due to -Znll\n 47 |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: free region `'_#6r` does not outlive free region `'_#4r`\n+error: free region `ReFree(DefId(0/1:18 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]), BrAnon(4))` does not outlive free region `ReFree(DefId(0/1:18 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]), BrAnon(2))`\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:18\n    |\n 47 |         demand_y(x, y, x.get())\n@@ -18,7 +18,7 @@ note: No external requirements\n 46 | |         // Only works if 'x: 'y:\n 47 | |         demand_y(x, y, x.get())\n 48 | |         //~^ WARN not reporting region error due to -Znll\n-49 | |         //~| ERROR free region `'_#6r` does not outlive free region `'_#4r`\n+49 | |         //~| ERROR does not outlive free region\n 50 | |     });\n    | |_____^\n    |"}, {"sha": "930742464297202f9abd7f651fa9189c11935d01", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -50,7 +50,7 @@ fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())\n         //~^ WARN not reporting region error due to -Znll\n-        //~| ERROR free region `'_#5r` does not outlive free region `'_#7r`\n+        //~| ERROR does not outlive free region\n     });\n }\n "}, {"sha": "502f56502497046b3488d0558d562ab650c371df", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -4,7 +4,7 @@ warning: not reporting region error due to -Znll\n 51 |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: free region `'_#5r` does not outlive free region `'_#7r`\n+error: free region `ReFree(DefId(0/1:18 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]), BrAnon(2))` does not outlive free region `ReFree(DefId(0/1:18 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]), BrAnon(4))`\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:18\n    |\n 51 |         demand_y(x, y, x.get())\n@@ -18,7 +18,7 @@ note: No external requirements\n 50 | |         // Only works if 'x: 'y:\n 51 | |         demand_y(x, y, x.get())\n 52 | |         //~^ WARN not reporting region error due to -Znll\n-53 | |         //~| ERROR free region `'_#5r` does not outlive free region `'_#7r`\n+53 | |         //~| ERROR does not outlive free region\n 54 | |     });\n    | |_____^\n    |"}, {"sha": "3f56dfe5af48dbe9cfd2cc9ecc3c08eeb3d24f4c", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -18,7 +18,7 @@\n fn foo(x: &u32) -> &'static u32 {\n     &*x\n         //~^ WARN not reporting region error due to -Znll\n-        //~| ERROR free region `'_#1r` does not outlive free region `ReStatic`\n+        //~| ERROR does not outlive free region\n }\n \n fn main() { }"}, {"sha": "6648e38e7dea8c44f21f746feca5a2e298db305c", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -4,7 +4,7 @@ warning: not reporting region error due to -Znll\n 19 |     &*x\n    |     ^^^\n \n-error: free region `'_#1r` does not outlive free region `ReStatic`\n+error: free region `ReFree(DefId(0/0:3 ~ region_lbr_anon_does_not_outlive_static[317d]::foo[0]), BrAnon(0))` does not outlive free region `ReStatic`\n   --> $DIR/region-lbr-anon-does-not-outlive-static.rs:19:5\n    |\n 19 |     &*x"}, {"sha": "a1be8e851851599161c10f5e79b868bede8f43d3", "filename": "src/test/ui/nll/closure-requirements/region-lbr-named-does-not-outlive-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -18,7 +18,7 @@\n fn foo<'a>(x: &'a u32) -> &'static u32 {\n     &*x\n         //~^ WARN not reporting region error due to -Znll\n-        //~| ERROR free region `'_#1r` does not outlive free region `ReStatic`\n+        //~| ERROR does not outlive free region\n }\n \n fn main() { }"}, {"sha": "1edceba7b0916e4c14b8ae12600e0dec1429e47f", "filename": "src/test/ui/nll/closure-requirements/region-lbr-named-does-not-outlive-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -4,7 +4,7 @@ warning: not reporting region error due to -Znll\n 19 |     &*x\n    |     ^^^\n \n-error: free region `'_#1r` does not outlive free region `ReStatic`\n+error: free region `ReFree(DefId(0/0:3 ~ region_lbr_named_does_not_outlive_static[317d]::foo[0]), BrNamed(crate0:DefIndex(1:9), 'a))` does not outlive free region `ReStatic`\n   --> $DIR/region-lbr-named-does-not-outlive-static.rs:19:5\n    |\n 19 |     &*x"}, {"sha": "00b09e2ab21ada08e8600b54eb510271993ea1c1", "filename": "src/test/ui/nll/closure-requirements/region-lbr1-does-not-outlive-ebr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -18,7 +18,7 @@\n fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> &'b u32 {\n     &*x\n         //~^ WARN not reporting region error due to -Znll\n-        //~| ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+        //~| ERROR lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "efe0b73f195a905c8aacc6f3ea76c15d97811807", "filename": "src/test/ui/nll/closure-requirements/region-lbr1-does-not-outlive-ebr2.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -4,11 +4,15 @@ warning: not reporting region error due to -Znll\n 19 |     &*x\n    |     ^^^\n \n-error: free region `'_#1r` does not outlive free region `'_#2r`\n+error[E0623]: lifetime mismatch\n   --> $DIR/region-lbr1-does-not-outlive-ebr2.rs:19:5\n    |\n+18 | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> &'b u32 {\n+   |                   -------                 -------\n+   |                   |\n+   |                   this parameter and the return type are declared with different lifetimes...\n 19 |     &*x\n-   |     ^^^\n+   |     ^^^ ...but data from `x` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "754df4f2c5db624b95f6dfdab3b49da248635869", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -20,7 +20,7 @@\n fn test() {\n     expect_sig(|a, b| b); // ought to return `a`\n     //~^ WARN not reporting region error due to -Znll\n-    //~| ERROR free region `'_#3r` does not outlive free region `'_#2r`\n+    //~| ERROR does not outlive free region\n }\n \n fn expect_sig<F>(f: F) -> F"}, {"sha": "58a26e61e57671ccf12afd159afce367ff81355f", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -4,7 +4,7 @@ warning: not reporting region error due to -Znll\n 21 |     expect_sig(|a, b| b); // ought to return `a`\n    |                       ^\n \n-error: free region `'_#3r` does not outlive free region `'_#2r`\n+error: free region `ReFree(DefId(0/1:9 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]), BrAnon(2))` does not outlive free region `ReFree(DefId(0/1:9 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]), BrAnon(1))`\n   --> $DIR/return-wrong-bound-region.rs:21:23\n    |\n 21 |     expect_sig(|a, b| b); // ought to return `a`\n@@ -27,7 +27,7 @@ note: No external requirements\n 20 | / fn test() {\n 21 | |     expect_sig(|a, b| b); // ought to return `a`\n 22 | |     //~^ WARN not reporting region error due to -Znll\n-23 | |     //~| ERROR free region `'_#3r` does not outlive free region `'_#2r`\n+23 | |     //~| ERROR does not outlive free region\n 24 | | }\n    | |_^\n    |"}, {"sha": "850cd1e7336d739fa9df08a06f695f4edaa44e57", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -21,7 +21,7 @@ impl<'a, T> Foo<'a> for T { }\n fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n     x\n         //~^ WARNING not reporting region error due to -Znll\n-        //~| ERROR free region `'_#2r` does not outlive free region `ReEarlyBound(0, 'a)`\n+        //~| ERROR explicit lifetime required in the type of `x` [E0621]\n }\n \n fn main() {}"}, {"sha": "4cfd12002e79612d1c91fa16690ba579d5f8b9b2", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -4,11 +4,13 @@ warning: not reporting region error due to -Znll\n 22 |     x\n    |     ^\n \n-error: free region `'_#2r` does not outlive free region `ReEarlyBound(0, 'a)`\n+error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/impl-trait-captures.rs:22:5\n    |\n+21 | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n+   |               - consider changing the type of `x` to `&ReEarlyBound(0, 'a) T`\n 22 |     x\n-   |     ^\n+   |     ^ lifetime `ReEarlyBound(0, 'a)` required\n \n error: aborting due to previous error\n "}, {"sha": "5d68cc6a7a9fa981c4c81d6f8e25493435a85ad3", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -56,7 +56,7 @@ where\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n     //~| ERROR `T` does not outlive\n-    //~| ERROR free region `ReEarlyBound(0, 'b)` does not outlive free region `'_#2r`\n+    //~| ERROR does not outlive free region\n }\n \n #[rustc_regions]\n@@ -68,7 +68,7 @@ where\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n     //~| ERROR `T` does not outlive\n-    //~| ERROR free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n+    //~| ERROR does not outlive free region\n }\n \n #[rustc_regions]"}, {"sha": "73cfa0d18fa4a2b8ba4ed589bd382ceb2c0a8251", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -89,7 +89,7 @@ error: `T` does not outlive `'_#5r`\n 56 |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: free region `ReEarlyBound(0, 'b)` does not outlive free region `'_#2r`\n+error: free region `ReEarlyBound(0, 'b)` does not outlive free region `ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:17), 'a))`\n   --> $DIR/projection-one-region-closure.rs:56:20\n    |\n 56 |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -103,7 +103,7 @@ note: No external requirements\n 54 | |     T: Anything<'b>,\n 55 | | {\n ...  |\n-59 | |     //~| ERROR free region `ReEarlyBound(0, 'b)` does not outlive free region `'_#2r`\n+59 | |     //~| ERROR does not outlive free region\n 60 | | }\n    | |_^\n    |\n@@ -132,7 +132,7 @@ note: No external requirements\n 65 | |     T: Anything<'b>,\n 66 | |     'a: 'a,\n ...  |\n-71 | |     //~| ERROR free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n+71 | |     //~| ERROR does not outlive free region\n 72 | | }\n    | |_^\n    |"}, {"sha": "232025b57355cf98f5037d52e371b6e1e1358f90", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -47,7 +47,7 @@ where\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR free region `ReEarlyBound(0, 'b)` does not outlive free region `'_#2r`\n+    //~| ERROR does not outlive free region\n }\n \n #[rustc_regions]\n@@ -58,7 +58,7 @@ where\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n+    //~| ERROR does not outlive free region\n }\n \n #[rustc_regions]\n@@ -79,7 +79,7 @@ where\n \n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n+    //~| ERROR does not outlive free region\n }\n \n #[rustc_regions]"}, {"sha": "5053b8486959a4cb8f2bc8d49f35629f6feef2c6", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -94,7 +94,7 @@ note: External requirements\n     = note: number of external vids: 3\n     = note: where '_#1r: '_#2r\n \n-error: free region `ReEarlyBound(0, 'b)` does not outlive free region `'_#2r`\n+error: free region `ReEarlyBound(0, 'b)` does not outlive free region `ReFree(DefId(0/0:8 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:17), 'a))`\n   --> $DIR/projection-one-region-trait-bound-closure.rs:48:20\n    |\n 48 |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -108,7 +108,7 @@ note: No external requirements\n 46 | |     T: Anything<'b>,\n 47 | | {\n ...  |\n-50 | |     //~| ERROR free region `ReEarlyBound(0, 'b)` does not outlive free region `'_#2r`\n+50 | |     //~| ERROR does not outlive free region\n 51 | | }\n    | |_^\n    |\n@@ -131,7 +131,7 @@ note: No external requirements\n 56 | |     T: Anything<'b>,\n 57 | |     'a: 'a,\n ...  |\n-61 | |     //~| ERROR free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n+61 | |     //~| ERROR does not outlive free region\n 62 | | }\n    | |_^\n    |\n@@ -155,7 +155,7 @@ note: No external requirements\n 67 | |     T: Anything<'b>,\n 68 | |     T::AssocType: 'a,\n ...  |\n-82 | |     //~| ERROR free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n+82 | |     //~| ERROR does not outlive free region\n 83 | | }\n    | |_^\n    |"}, {"sha": "e129ac146fcf3b2c4e69d796859afcc9e857e8c7", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -108,7 +108,7 @@ where\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR free region `ReEarlyBound(0, 'b)` does not outlive free region `'_#2r`\n+    //~| ERROR does not outlive free region\n }\n \n #[rustc_regions]"}, {"sha": "b26cf2ca4cb288fe13f711ae3d7c895fb177eca2", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b39781df6ad149c4fb5cb7d714daf1b7168081f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=6b39781df6ad149c4fb5cb7d714daf1b7168081f", "patch": "@@ -264,7 +264,7 @@ note: No external requirements\n                 T\n             ]\n \n-error: free region `ReEarlyBound(0, 'b)` does not outlive free region `'_#2r`\n+error: free region `ReEarlyBound(0, 'b)` does not outlive free region `ReFree(DefId(0/0:13 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]), BrNamed(crate0:DefIndex(1:44), 'a))`\n    --> $DIR/projection-two-region-trait-bound-closure.rs:109:20\n     |\n 109 |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -278,7 +278,7 @@ note: No external requirements\n 107 | |     T: Anything<'b, 'b>,\n 108 | | {\n ...   |\n-111 | |     //~| ERROR free region `ReEarlyBound(0, 'b)` does not outlive free region `'_#2r`\n+111 | |     //~| ERROR does not outlive free region\n 112 | | }\n     | |_^\n     |"}]}