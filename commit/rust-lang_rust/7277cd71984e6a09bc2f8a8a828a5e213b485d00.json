{"sha": "7277cd71984e6a09bc2f8a8a828a5e213b485d00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNzdjZDcxOTg0ZTZhMDliYzJmOGE4YTgyOGE1ZTIxM2I0ODVkMDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-15T18:34:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-15T23:13:42Z"}, "message": "core: Add task::unkillable", "tree": {"sha": "1bab4372580c8f39c7514923f13fef9da33219e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bab4372580c8f39c7514923f13fef9da33219e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7277cd71984e6a09bc2f8a8a828a5e213b485d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7277cd71984e6a09bc2f8a8a828a5e213b485d00", "html_url": "https://github.com/rust-lang/rust/commit/7277cd71984e6a09bc2f8a8a828a5e213b485d00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7277cd71984e6a09bc2f8a8a828a5e213b485d00/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe0461f06ac4a7fe9705d2cd62e8bb547975c8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe0461f06ac4a7fe9705d2cd62e8bb547975c8f", "html_url": "https://github.com/rust-lang/rust/commit/8fe0461f06ac4a7fe9705d2cd62e8bb547975c8f"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "b9a07a7625b37002cba0a3b5affb5978b13ebeb7", "filename": "src/libcore/task.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7277cd71984e6a09bc2f8a8a828a5e213b485d00/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7277cd71984e6a09bc2f8a8a828a5e213b485d00/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=7277cd71984e6a09bc2f8a8a828a5e213b485d00", "patch": "@@ -51,7 +51,7 @@ export try;\n export yield;\n export failing;\n export get_task;\n-\n+export unkillable;\n \n /* Data types */\n \n@@ -467,6 +467,29 @@ fn get_task() -> task {\n     task(rustrt::get_task_id())\n }\n \n+#[doc = \"\n+Temporarily make the task unkillable\n+\n+# Example\n+\n+    task::unkillable {||\n+        // detach / yield / destroy must all be called together\n+        rustrt::rust_port_detach(po);\n+        // This must not result in the current task being killed\n+        task::yield();\n+        rustrt::rust_port_destroy(po);\n+    }\n+\n+\"]\n+unsafe fn unkillable(f: fn()) {\n+    resource allow_failure(_i: ()) {\n+        rustrt::rust_task_allow_kill();\n+    }\n+    let _allow_failure = allow_failure(());\n+    rustrt::rust_task_inhibit_kill();\n+    f();\n+}\n+\n \n /* Internal */\n \n@@ -566,6 +589,8 @@ native mod rustrt {\n     fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n     fn unsupervise();\n     fn rust_osmain_sched_id() -> sched_id;\n+    fn rust_task_inhibit_kill();\n+    fn rust_task_allow_kill();\n }\n \n \n@@ -930,3 +955,39 @@ fn test_osmain() {\n     }\n     comm::recv(po);\n }\n+\n+#[test]\n+#[ignore(cfg(target_os = \"win32\"))]\n+#[should_fail]\n+fn test_unkillable() unsafe {\n+    import comm::methods;\n+    let po = comm::port();\n+    let ch = po.chan();\n+\n+    // We want to do this after failing\n+    spawn {||\n+        iter::repeat(10u, yield);\n+        ch.send(());\n+    }\n+\n+    spawn {||\n+        yield();\n+        // We want to fail after the unkillable task\n+        // blocks on recv\n+        fail;\n+    }\n+\n+    unkillable {||\n+        let p = ~0;\n+        let pp: *uint = unsafe::reinterpret_cast(p);\n+        unsafe::forget(p);\n+\n+        // If we are killed here then the box will leak\n+        po.recv();\n+\n+        let _p: ~int = unsafe::reinterpret_cast(pp);\n+    }\n+\n+    // Now we can be killed\n+    po.recv();\n+}"}, {"sha": "8f5c3c6fa14aeb838acd366dd7e480f4b331e08c", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7277cd71984e6a09bc2f8a8a828a5e213b485d00/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7277cd71984e6a09bc2f8a8a828a5e213b485d00/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=7277cd71984e6a09bc2f8a8a828a5e213b485d00", "patch": "@@ -805,6 +805,18 @@ rust_global_env_chan_ptr() {\n     return task->kernel->get_global_env_chan();\n }\n \n+extern \"C\" void\n+rust_task_inhibit_kill() {\n+    rust_task *task = rust_get_current_task();\n+    task->inhibit_kill();\n+}\n+\n+extern \"C\" void\n+rust_task_allow_kill() {\n+    rust_task *task = rust_get_current_task();\n+    task->allow_kill();\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "823937443b5de76f346c8816752bcfc3e626abf2", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7277cd71984e6a09bc2f8a8a828a5e213b485d00/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7277cd71984e6a09bc2f8a8a828a5e213b485d00/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=7277cd71984e6a09bc2f8a8a828a5e213b485d00", "patch": "@@ -37,6 +37,7 @@ rust_task::rust_task(rust_sched_loop *sched_loop, rust_task_state state,\n     cond_name(\"none\"),\n     killed(false),\n     reentered_rust_stack(false),\n+    disallow_kill(false),\n     c_stack(NULL),\n     next_c_sp(0),\n     next_rust_sp(0),\n@@ -211,7 +212,7 @@ rust_task::must_fail_from_being_killed() {\n bool\n rust_task::must_fail_from_being_killed_unlocked() {\n     kill_lock.must_have_lock();\n-    return killed && !reentered_rust_stack;\n+    return killed && !reentered_rust_stack && !disallow_kill;\n }\n \n // Only run this on the rust stack\n@@ -645,6 +646,16 @@ rust_task::on_rust_stack() {\n     }\n }\n \n+void\n+rust_task::inhibit_kill() {\n+    disallow_kill = true;\n+}\n+\n+void\n+rust_task::allow_kill() {\n+    disallow_kill = false;\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "1867c8f4ed81a9da8849e31d710aefd4a86ce4f5", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7277cd71984e6a09bc2f8a8a828a5e213b485d00/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/7277cd71984e6a09bc2f8a8a828a5e213b485d00/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=7277cd71984e6a09bc2f8a8a828a5e213b485d00", "patch": "@@ -155,6 +155,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     bool killed;\n     // Indicates that we've called back into Rust from C\n     bool reentered_rust_stack;\n+    bool disallow_kill;\n \n     // The stack used for running C code, borrowed from the scheduler thread\n     stk_seg *c_stack;\n@@ -268,6 +269,9 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     const char *get_cond_name() { return cond_name; }\n \n     void cleanup_after_turn();\n+\n+    void inhibit_kill();\n+    void allow_kill();\n };\n \n // FIXME: It would be really nice to be able to get rid of this."}, {"sha": "345cd5f7a2e7720ce69a681296650378d82f3891", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7277cd71984e6a09bc2f8a8a828a5e213b485d00/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/7277cd71984e6a09bc2f8a8a828a5e213b485d00/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=7277cd71984e6a09bc2f8a8a828a5e213b485d00", "patch": "@@ -152,3 +152,5 @@ rust_global_env_chan_ptr\n rust_port_take\n rust_port_drop\n rust_port_task\n+rust_task_inhibit_kill\n+rust_task_allow_kill\n\\ No newline at end of file"}]}