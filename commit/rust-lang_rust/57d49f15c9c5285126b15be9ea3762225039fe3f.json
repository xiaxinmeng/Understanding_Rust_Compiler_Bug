{"sha": "57d49f15c9c5285126b15be9ea3762225039fe3f", "node_id": "C_kwDOAAsO6NoAKDU3ZDQ5ZjE1YzljNTI4NTEyNmIxNWJlOWVhMzc2MjIyNTAzOWZlM2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-18T09:26:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T09:26:36Z"}, "message": "Rollup merge of #91516 - rukai:improve_mut_addition_help, r=estebank\n\nImprove suggestion to change struct field to &mut\n\nr? ``@estebank``\n\nNow displays a proper underline style suggestion instead of including the code change inline with the message.", "tree": {"sha": "244041d5aaa1701a36fed8c0154e5c0c44c37dee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/244041d5aaa1701a36fed8c0154e5c0c44c37dee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57d49f15c9c5285126b15be9ea3762225039fe3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvalMCRBK7hj4Ov3rIwAAOZ4IAIOOIECIpKLk5atpTiTNIA8W\n8vh+WjCATMM178iPf8mwDeXYRd3yKQ9T6pz+EdhcJ5yaecZpZ2CpwiWF/Rex4c1A\n//etl1v5q21HrAYMVlCTfh9acbBtufE2DoP6649wWZGQpvJlWC96x/XD7dSBXLaU\n4FXPQ1/GCjAfkEC5CjU4+ApO+3fCjgYC9imrC3y+hmyPvFp2Ua1WKtiR9KqTmegG\npjtmiWdr8ip4aEEnI8UVSTIEcewKfRIQSGmLl5BbFDbGmOKNc17F7ZhGpzhVDzwi\nx1AdTQof/GzUP4URY9vAOyct8VyYRNkJ517ijEpmmvLjuB1ZG2BWPE1umrAFbcU=\n=QkKM\n-----END PGP SIGNATURE-----\n", "payload": "tree 244041d5aaa1701a36fed8c0154e5c0c44c37dee\nparent 359c88e426c7a696ebaac071feaeea1799d4db58\nparent e57307560e7ac522b18f79fc7e98a808664f4059\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639819596 +0100\ncommitter GitHub <noreply@github.com> 1639819596 +0100\n\nRollup merge of #91516 - rukai:improve_mut_addition_help, r=estebank\n\nImprove suggestion to change struct field to &mut\n\nr? ``@estebank``\n\nNow displays a proper underline style suggestion instead of including the code change inline with the message.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57d49f15c9c5285126b15be9ea3762225039fe3f", "html_url": "https://github.com/rust-lang/rust/commit/57d49f15c9c5285126b15be9ea3762225039fe3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57d49f15c9c5285126b15be9ea3762225039fe3f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "359c88e426c7a696ebaac071feaeea1799d4db58", "url": "https://api.github.com/repos/rust-lang/rust/commits/359c88e426c7a696ebaac071feaeea1799d4db58", "html_url": "https://github.com/rust-lang/rust/commit/359c88e426c7a696ebaac071feaeea1799d4db58"}, {"sha": "e57307560e7ac522b18f79fc7e98a808664f4059", "url": "https://api.github.com/repos/rust-lang/rust/commits/e57307560e7ac522b18f79fc7e98a808664f4059", "html_url": "https://github.com/rust-lang/rust/commit/e57307560e7ac522b18f79fc7e98a808664f4059"}], "stats": {"total": 77, "additions": 41, "deletions": 36}, "files": [{"sha": "b5dad5ccdea8ead7f3054015f95d2dc9a42eda7f", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/57d49f15c9c5285126b15be9ea3762225039fe3f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d49f15c9c5285126b15be9ea3762225039fe3f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=57d49f15c9c5285126b15be9ea3762225039fe3f", "patch": "@@ -229,15 +229,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             } => {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n \n-                if let Some((span, message)) = annotate_struct_field(\n+                if let Some(span) = get_mut_span_in_struct_field(\n                     self.infcx.tcx,\n                     Place::ty_from(local, proj_base, self.body, self.infcx.tcx).ty,\n                     field,\n                 ) {\n-                    err.span_suggestion(\n+                    err.span_suggestion_verbose(\n                         span,\n                         \"consider changing this to be mutable\",\n-                        message,\n+                        \" mut \".into(),\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -1059,18 +1059,18 @@ fn is_closure_or_generator(ty: Ty<'_>) -> bool {\n     ty.is_closure() || ty.is_generator()\n }\n \n-/// Adds a suggestion to a struct definition given a field access to a local.\n-/// This function expects the local to be a reference to a struct in order to produce a suggestion.\n+/// Given a field that needs to be mutable, returns a span where the \" mut \" could go.\n+/// This function expects the local to be a reference to a struct in order to produce a span.\n ///\n /// ```text\n-/// LL |     s: &'a String\n-///    |        ---------- use `&'a mut String` here to make mutable\n+/// LL |     s: &'a   String\n+///    |           ^^^ returns a span taking up the space here\n /// ```\n-fn annotate_struct_field<'tcx>(\n+fn get_mut_span_in_struct_field<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n     field: &mir::Field,\n-) -> Option<(Span, String)> {\n+) -> Option<Span> {\n     // Expect our local to be a reference to a struct of some kind.\n     if let ty::Ref(_, ty, _) = ty.kind() {\n         if let ty::Adt(def, _) = ty.kind() {\n@@ -1081,25 +1081,10 @@ fn annotate_struct_field<'tcx>(\n             // Now we're dealing with the actual struct that we're going to suggest a change to,\n             // we can expect a field that is an immutable reference to a type.\n             if let hir::Node::Field(field) = node {\n-                if let hir::TyKind::Rptr(\n-                    lifetime,\n-                    hir::MutTy { mutbl: hir::Mutability::Not, ref ty },\n-                ) = field.ty.kind\n+                if let hir::TyKind::Rptr(lifetime, hir::MutTy { mutbl: hir::Mutability::Not, ty }) =\n+                    field.ty.kind\n                 {\n-                    // Get the snippets in two parts - the named lifetime (if there is one) and\n-                    // type being referenced, that way we can reconstruct the snippet without loss\n-                    // of detail.\n-                    let type_snippet = tcx.sess.source_map().span_to_snippet(ty.span).ok()?;\n-                    let lifetime_snippet = if !lifetime.is_elided() {\n-                        format!(\"{} \", tcx.sess.source_map().span_to_snippet(lifetime.span).ok()?)\n-                    } else {\n-                        String::new()\n-                    };\n-\n-                    return Some((\n-                        field.ty.span,\n-                        format!(\"&{}mut {}\", lifetime_snippet, &*type_snippet,),\n-                    ));\n+                    return Some(lifetime.span.between(ty.span));\n                 }\n             }\n         }"}, {"sha": "154b149b72073f58925e624d84df03c3c1b8e1c6", "filename": "src/test/ui/did_you_mean/issue-38147-2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57d49f15c9c5285126b15be9ea3762225039fe3f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d49f15c9c5285126b15be9ea3762225039fe3f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs?ref=57d49f15c9c5285126b15be9ea3762225039fe3f", "patch": "@@ -1,11 +1,16 @@\n struct Bar<'a> {\n-    s: &'a String\n+    s: &'a String,\n+    // use wonky spaces to ensure we are creating the span correctly\n+    longer_name:   &   'a     Vec<u8>\n }\n \n impl<'a> Bar<'a> {\n     fn f(&mut self) {\n         self.s.push('x');\n         //~^ ERROR cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n+\n+        self.longer_name.push(13);\n+        //~^ ERROR cannot borrow `*self.longer_name` as mutable, as it is behind a `&` reference\n     }\n }\n "}, {"sha": "7c287a7dbfa0d0e9893c9653bbd416e9fd2516c1", "filename": "src/test/ui/did_you_mean/issue-38147-2.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57d49f15c9c5285126b15be9ea3762225039fe3f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d49f15c9c5285126b15be9ea3762225039fe3f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr?ref=57d49f15c9c5285126b15be9ea3762225039fe3f", "patch": "@@ -1,12 +1,25 @@\n error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n-  --> $DIR/issue-38147-2.rs:7:9\n+  --> $DIR/issue-38147-2.rs:9:9\n    |\n-LL |     s: &'a String\n-   |        ---------- help: consider changing this to be mutable: `&'a mut String`\n-...\n LL |         self.s.push('x');\n    |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     s: &'a mut String,\n+   |            +++\n+\n+error[E0596]: cannot borrow `*self.longer_name` as mutable, as it is behind a `&` reference\n+  --> $DIR/issue-38147-2.rs:12:9\n+   |\n+LL |         self.longer_name.push(13);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     longer_name:   &   'a mut Vec<u8>\n+   |                           +++\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "94ffe17f101161e1492422db59dca58cf20debe8", "filename": "src/test/ui/did_you_mean/issue-38147-3.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57d49f15c9c5285126b15be9ea3762225039fe3f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d49f15c9c5285126b15be9ea3762225039fe3f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr?ref=57d49f15c9c5285126b15be9ea3762225039fe3f", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-3.rs:7:9\n    |\n-LL |     s: &'a String\n-   |        ---------- help: consider changing this to be mutable: `&'a mut String`\n-...\n LL |         self.s.push('x');\n    |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     s: &'a mut String\n+   |            +++\n \n error: aborting due to previous error\n "}]}