{"sha": "7eca647e5ae5bef69999c41216e7a8508758d67a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlY2E2NDdlNWFlNWJlZjY5OTk5YzQxMjE2ZTdhODUwODc1OGQ2N2E=", "commit": {"author": {"name": "trixnz", "email": "mtatrix@gmail.com", "date": "2016-08-05T17:53:14Z"}, "committer": {"name": "trixnz", "email": "mtatrix@gmail.com", "date": "2016-08-05T17:53:14Z"}, "message": "Update error format for E0373", "tree": {"sha": "038c0e397afa77204379cd539d805775db22ad6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038c0e397afa77204379cd539d805775db22ad6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eca647e5ae5bef69999c41216e7a8508758d67a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eca647e5ae5bef69999c41216e7a8508758d67a", "html_url": "https://github.com/rust-lang/rust/commit/7eca647e5ae5bef69999c41216e7a8508758d67a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eca647e5ae5bef69999c41216e7a8508758d67a/comments", "author": {"login": "trixnz", "id": 2995953, "node_id": "MDQ6VXNlcjI5OTU5NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2995953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trixnz", "html_url": "https://github.com/trixnz", "followers_url": "https://api.github.com/users/trixnz/followers", "following_url": "https://api.github.com/users/trixnz/following{/other_user}", "gists_url": "https://api.github.com/users/trixnz/gists{/gist_id}", "starred_url": "https://api.github.com/users/trixnz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trixnz/subscriptions", "organizations_url": "https://api.github.com/users/trixnz/orgs", "repos_url": "https://api.github.com/users/trixnz/repos", "events_url": "https://api.github.com/users/trixnz/events{/privacy}", "received_events_url": "https://api.github.com/users/trixnz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "trixnz", "id": 2995953, "node_id": "MDQ6VXNlcjI5OTU5NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2995953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trixnz", "html_url": "https://github.com/trixnz", "followers_url": "https://api.github.com/users/trixnz/followers", "following_url": "https://api.github.com/users/trixnz/following{/other_user}", "gists_url": "https://api.github.com/users/trixnz/gists{/gist_id}", "starred_url": "https://api.github.com/users/trixnz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trixnz/subscriptions", "organizations_url": "https://api.github.com/users/trixnz/orgs", "repos_url": "https://api.github.com/users/trixnz/repos", "events_url": "https://api.github.com/users/trixnz/events{/privacy}", "received_events_url": "https://api.github.com/users/trixnz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c02363852e6ce41cf2da1b43a32cb7780a9b067", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c02363852e6ce41cf2da1b43a32cb7780a9b067", "html_url": "https://github.com/rust-lang/rust/commit/4c02363852e6ce41cf2da1b43a32cb7780a9b067"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "9115fd42be870e02aec87792b163d02ca5657720", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=7eca647e5ae5bef69999c41216e7a8508758d67a", "patch": "@@ -942,9 +942,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                           but it borrows {}, \\\n                           which is owned by the current function\",\n                          cmt_path_or_string)\n-            .span_note(capture_span,\n+            .span_label(capture_span,\n                        &format!(\"{} is borrowed here\",\n                                 cmt_path_or_string))\n+            .span_label(err.span,\n+                       &format!(\"may outlive borrowed value {}\",\n+                                cmt_path_or_string))\n             .span_suggestion(err.span,\n                              &format!(\"to force the closure to take ownership of {} \\\n                                        (and any other referenced variables), \\"}, {"sha": "ec330247f238b07c77a7f6a6b955dcaced8651b0", "filename": "src/test/compile-fail/borrowck/borrowck-escaping-closure-error-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs?ref=7eca647e5ae5bef69999c41216e7a8508758d67a", "patch": "@@ -22,4 +22,6 @@ fn main() {\n     let mut books = vec![1,2,3];\n     spawn(|| books.push(4));\n     //~^ ERROR E0373\n+    //~| NOTE `books` is borrowed here\n+    //~| NOTE may outlive borrowed value `books`\n }"}, {"sha": "81685c32f2f29b6285b5fdadd05532746cc4c5b0", "filename": "src/test/compile-fail/borrowck/borrowck-escaping-closure-error-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs?ref=7eca647e5ae5bef69999c41216e7a8508758d67a", "patch": "@@ -20,6 +20,8 @@ fn foo<'a>(x: &'a i32) -> Box<FnMut()+'a> {\n     let mut books = vec![1,2,3];\n     Box::new(|| books.push(4))\n     //~^ ERROR E0373\n+    //~| NOTE `books` is borrowed here\n+    //~| NOTE may outlive borrowed value `books`\n }\n \n fn main() { }"}, {"sha": "09371fbafcb560f98e91acab4a483709a4745a6b", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=7eca647e5ae5bef69999c41216e7a8508758d67a", "patch": "@@ -14,7 +14,10 @@ fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     id(Box::new(|| *v))\n         //~^ ERROR E0373\n-        //~| ERROR cannot move out of borrowed content\n+        //~| NOTE `v` is borrowed here\n+        //~| NOTE may outlive borrowed value `v`\n+        //~| ERROR E0507\n+        //~| NOTE cannot move out of borrowed content\n }\n \n fn main() {"}, {"sha": "6be2adbe2a0d1ac0eb200159b11af647bc1f875b", "filename": "src/test/compile-fail/region-borrow-params-issue-29793-small.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-small.rs?ref=7eca647e5ae5bef69999c41216e7a8508758d67a", "patch": "@@ -16,6 +16,10 @@\n \n fn escaping_borrow_of_closure_params_1() {\n     let g = |x: usize, y:usize| {\n+        //~^ NOTE reference must be valid for the scope of call-site for function\n+        //~| NOTE ...but borrowed value is only valid for the scope of function body\n+        //~| NOTE reference must be valid for the scope of call-site for function\n+        //~| NOTE ...but borrowed value is only valid for the scope of function body\n         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n         //~^ ERROR `x` does not live long enough\n         //~| ERROR `y` does not live long enough\n@@ -31,6 +35,10 @@ fn escaping_borrow_of_closure_params_1() {\n \n fn escaping_borrow_of_closure_params_2() {\n     let g = |x: usize, y:usize| {\n+        //~^ NOTE reference must be valid for the scope of call-site for function\n+        //~| NOTE ...but borrowed value is only valid for the scope of function body\n+        //~| NOTE reference must be valid for the scope of call-site for function\n+        //~| NOTE ...but borrowed value is only valid for the scope of function body\n         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n         //~^ ERROR `x` does not live long enough\n         //~| ERROR `y` does not live long enough\n@@ -64,7 +72,11 @@ fn escaping_borrow_of_fn_params_1() {\n     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n         //~^ ERROR E0373\n+        //~| NOTE `x` is borrowed here\n+        //~| NOTE may outlive borrowed value `x`\n         //~| ERROR E0373\n+        //~| NOTE `y` is borrowed here\n+        //~| NOTE may outlive borrowed value `y`\n         return Box::new(f);\n     };\n \n@@ -75,7 +87,11 @@ fn escaping_borrow_of_fn_params_2() {\n     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n         //~^ ERROR E0373\n+        //~| NOTE `x` is borrowed here\n+        //~| NOTE may outlive borrowed value `x`\n         //~| ERROR E0373\n+        //~| NOTE `y` is borrowed here\n+        //~| NOTE may outlive borrowed value `y`\n         Box::new(f)\n     };\n \n@@ -99,7 +115,11 @@ fn escaping_borrow_of_method_params_1() {\n         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n             //~^ ERROR E0373\n+            //~| NOTE `x` is borrowed here\n+            //~| NOTE may outlive borrowed value `x`\n             //~| ERROR E0373\n+            //~| NOTE `y` is borrowed here\n+            //~| NOTE may outlive borrowed value `y`\n             return Box::new(f);\n         }\n     }\n@@ -113,7 +133,11 @@ fn escaping_borrow_of_method_params_2() {\n         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n             //~^ ERROR E0373\n+            //~| NOTE `x` is borrowed here\n+            //~| NOTE may outlive borrowed value `x`\n             //~| ERROR E0373\n+            //~| NOTE `y` is borrowed here\n+            //~| NOTE may outlive borrowed value `y`\n             Box::new(f)\n         }\n     }\n@@ -141,7 +165,11 @@ fn escaping_borrow_of_trait_impl_params_1() {\n         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n             //~^ ERROR E0373\n+            //~| NOTE `x` is borrowed here\n+            //~| NOTE may outlive borrowed value `x`\n             //~| ERROR E0373\n+            //~| NOTE `y` is borrowed here\n+            //~| NOTE may outlive borrowed value `y`\n             return Box::new(f);\n         }\n     }\n@@ -156,7 +184,11 @@ fn escaping_borrow_of_trait_impl_params_2() {\n         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n             //~^ ERROR E0373\n+            //~| NOTE `x` is borrowed here\n+            //~| NOTE may outlive borrowed value `x`\n             //~| ERROR E0373\n+            //~| NOTE `y` is borrowed here\n+            //~| NOTE may outlive borrowed value `y`\n             Box::new(f)\n         }\n     }\n@@ -184,7 +216,11 @@ fn escaping_borrow_of_trait_default_params_1() {\n         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n             //~^ ERROR E0373\n+            //~| NOTE `x` is borrowed here\n+            //~| NOTE may outlive borrowed value `x`\n             //~| ERROR E0373\n+            //~| NOTE `y` is borrowed here\n+            //~| NOTE may outlive borrowed value `y`\n             return Box::new(f);\n         }\n     }\n@@ -198,7 +234,11 @@ fn escaping_borrow_of_trait_default_params_2() {\n         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n             //~^ ERROR E0373\n+            //~| NOTE `x` is borrowed here\n+            //~| NOTE may outlive borrowed value `x`\n             //~| ERROR E0373\n+            //~| NOTE `y` is borrowed here\n+            //~| NOTE may outlive borrowed value `y`\n             Box::new(f)\n         }\n     }"}, {"sha": "40ba34b26ede673a1c0fb4f88e34f3d8b68e627e", "filename": "src/test/compile-fail/regions-nested-fns-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eca647e5ae5bef69999c41216e7a8508758d67a/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs?ref=7eca647e5ae5bef69999c41216e7a8508758d67a", "patch": "@@ -13,8 +13,11 @@ fn ignore<F>(_f: F) where F: for<'z> FnOnce(&'z isize) -> &'z isize {}\n fn nested() {\n     let y = 3;\n     ignore(\n-        |z| { //~ ERROR E0373\n+        |z| {\n+            //~^ ERROR E0373\n+            //~| NOTE may outlive borrowed value `y`\n             if false { &y } else { z }\n+            //~^ NOTE `y` is borrowed here\n         });\n }\n "}]}