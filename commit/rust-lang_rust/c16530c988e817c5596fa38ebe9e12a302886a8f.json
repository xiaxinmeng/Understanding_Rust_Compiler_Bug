{"sha": "c16530c988e817c5596fa38ebe9e12a302886a8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNjUzMGM5ODhlODE3YzU1OTZmYTM4ZWJlOWUxMmEzMDI4ODZhOGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T07:12:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T07:12:28Z"}, "message": "visitor-less scopes", "tree": {"sha": "fabd59d72906ef169665357dd219a2b862f623f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fabd59d72906ef169665357dd219a2b862f623f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c16530c988e817c5596fa38ebe9e12a302886a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c16530c988e817c5596fa38ebe9e12a302886a8f", "html_url": "https://github.com/rust-lang/rust/commit/c16530c988e817c5596fa38ebe9e12a302886a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c16530c988e817c5596fa38ebe9e12a302886a8f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b0298ce095b6dd635f7ed35dc97f1874157040b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0298ce095b6dd635f7ed35dc97f1874157040b", "html_url": "https://github.com/rust-lang/rust/commit/8b0298ce095b6dd635f7ed35dc97f1874157040b"}], "stats": {"total": 66, "additions": 49, "deletions": 17}, "files": [{"sha": "ec9388ee3ad271c0396b10f50fccd07ee318350e", "filename": "crates/libeditor/src/completion.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c16530c988e817c5596fa38ebe9e12a302886a8f/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16530c988e817c5596fa38ebe9e12a302886a8f/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=c16530c988e817c5596fa38ebe9e12a302886a8f", "patch": "@@ -5,7 +5,6 @@ use libsyntax2::{\n     ast::{self, NameOwner},\n     algo::{\n         ancestors,\n-        visit::{visitor_ctx, VisitorCtx},\n         walk::preorder,\n         generate,\n     },\n@@ -52,24 +51,24 @@ fn compute_scopes(fn_def: ast::FnDef) -> FnScopes {\n \n     let mut scope = root;\n     if let Some(body) = fn_def.body() {\n-        for child in body.syntax().children() {\n-            let _ = visitor_ctx((&mut scopes, &mut scope))\n-                .visit::<ast::LetStmt, _>(|stmt, (scopes, scope)| {\n-                    *scope = scopes.new_scope(*scope);\n+        for stmt in body.statements() {\n+            match stmt {\n+                ast::Stmt::LetStmt(stmt) => {\n+                    scope = scopes.new_scope(scope);\n                     if let Some(pat) = stmt.pat() {\n-                        scopes.add_bindings(*scope, pat);\n+                        scopes.add_bindings(scope, pat);\n                     }\n                     if let Some(expr) = stmt.initializer() {\n-                        scopes.set_scope(expr.syntax(), *scope)\n+                        scopes.set_scope(expr.syntax(), scope)\n                     }\n-                })\n-                .visit::<ast::ExprStmt, _>(|expr, (scopes, scope)| {\n-                    scopes.set_scope(expr.syntax(), *scope)\n-                })\n-                .visit::<ast::Expr, _>(|expr, (scopes, scope)| {\n-                    scopes.set_scope(expr.syntax(), *scope)\n-                })\n-                .accept(child);\n+                }\n+                ast::Stmt::ExprStmt(expr) => {\n+                    scopes.set_scope(expr.syntax(), scope)\n+                }\n+            }\n+        }\n+        if let Some(expr) = body.expr() {\n+            scopes.set_scope(expr.syntax(), scope)\n         }\n     }\n     scopes"}, {"sha": "1dd161f5271356e25dd0aa0fc5388139b3b08915", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c16530c988e817c5596fa38ebe9e12a302886a8f/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16530c988e817c5596fa38ebe9e12a302886a8f/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=c16530c988e817c5596fa38ebe9e12a302886a8f", "patch": "@@ -116,9 +116,13 @@ impl<'a> AstNode<'a> for Block<'a> {\n }\n \n impl<'a> Block<'a> {\n-    pub fn let_stmts(self) -> impl Iterator<Item = LetStmt<'a>> + 'a {\n+    pub fn statements(self) -> impl Iterator<Item = Stmt<'a>> + 'a {\n         super::children(self)\n     }\n+\n+    pub fn expr(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n }\n \n // BlockExpr\n@@ -1370,6 +1374,31 @@ impl<'a> ast::TypeParamsOwner<'a> for StaticDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for StaticDef<'a> {}\n impl<'a> StaticDef<'a> {}\n \n+// Stmt\n+#[derive(Debug, Clone, Copy)]\n+pub enum Stmt<'a> {\n+    ExprStmt(ExprStmt<'a>),\n+    LetStmt(LetStmt<'a>),\n+}\n+\n+impl<'a> AstNode<'a> for Stmt<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            EXPR_STMT => Some(Stmt::ExprStmt(ExprStmt { syntax })),\n+            LET_STMT => Some(Stmt::LetStmt(LetStmt { syntax })),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> {\n+        match self {\n+            Stmt::ExprStmt(inner) => inner.syntax(),\n+            Stmt::LetStmt(inner) => inner.syntax(),\n+        }\n+    }\n+}\n+\n+impl<'a> Stmt<'a> {}\n+\n // StructDef\n #[derive(Debug, Clone, Copy)]\n pub struct StructDef<'a> {"}, {"sha": "f3c3d30367cef4c344b2493715b6087307590e9d", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c16530c988e817c5596fa38ebe9e12a302886a8f/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/c16530c988e817c5596fa38ebe9e12a302886a8f/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=c16530c988e817c5596fa38ebe9e12a302886a8f", "patch": "@@ -437,9 +437,13 @@ Grammar(\n             [\"pat\", \"Pat\"],\n             [\"initializer\", \"Expr\"],\n         ]),\n+        \"Stmt\": (\n+            enum: [\"ExprStmt\", \"LetStmt\"],\n+        ),\n         \"Block\": (\n+            options: [[\"expr\", \"Expr\"]],\n             collections: [\n-                [\"let_stmts\", \"LetStmt\"],\n+                [\"statements\", \"Stmt\"],\n             ]\n         ),\n         \"ParamList\": ("}]}