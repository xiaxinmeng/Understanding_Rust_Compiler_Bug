{"sha": "f22fdb03ebb684c1dee1b38990918df6a4537481", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMmZkYjAzZWJiNjg0YzFkZWUxYjM4OTkwOTE4ZGY2YTQ1Mzc0ODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-17T00:30:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-17T00:30:27Z"}, "message": "Auto merge of #37375 - GuillaumeGomez:cast_message, r=arielb1\n\nImprove reference cast help message\n\nFixes #37338.", "tree": {"sha": "1760289307cf993c0a96538f3f15fbe9d216702b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1760289307cf993c0a96538f3f15fbe9d216702b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f22fdb03ebb684c1dee1b38990918df6a4537481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f22fdb03ebb684c1dee1b38990918df6a4537481", "html_url": "https://github.com/rust-lang/rust/commit/f22fdb03ebb684c1dee1b38990918df6a4537481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f22fdb03ebb684c1dee1b38990918df6a4537481/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba872f270781ada15426cfac7db20b30b81777dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba872f270781ada15426cfac7db20b30b81777dc", "html_url": "https://github.com/rust-lang/rust/commit/ba872f270781ada15426cfac7db20b30b81777dc"}, {"sha": "37903bfcf6dc15f9647b1a7f08af4757198fa189", "url": "https://api.github.com/repos/rust-lang/rust/commits/37903bfcf6dc15f9647b1a7f08af4757198fa189", "html_url": "https://github.com/rust-lang/rust/commit/37903bfcf6dc15f9647b1a7f08af4757198fa189"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "4edf0011cb39044d8ed60620ab41a82967879095", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 36, "deletions": 23, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=f22fdb03ebb684c1dee1b38990918df6a4537481", "patch": "@@ -105,7 +105,6 @@ enum CastError {\n     NeedViaPtr,\n     NeedViaThinPtr,\n     NeedViaInt,\n-    NeedViaUsize,\n     NonScalar,\n }\n \n@@ -139,26 +138,39 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n \n     fn report_cast_error(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>, e: CastError) {\n         match e {\n-            CastError::NeedViaPtr |\n             CastError::NeedViaThinPtr |\n-            CastError::NeedViaInt |\n-            CastError::NeedViaUsize => {\n+            CastError::NeedViaPtr => {\n+                let mut err = fcx.type_error_struct(self.span,\n+                                                    |actual| {\n+                                                        format!(\"casting `{}` as `{}` is invalid\",\n+                                                                actual,\n+                                                                fcx.ty_to_string(self.cast_ty))\n+                                                    },\n+                                                    self.expr_ty);\n+                if self.cast_ty.is_uint() {\n+                    err.help(&format!(\"cast through {} first\",\n+                                      match e {\n+                                          CastError::NeedViaPtr => \"a raw pointer\",\n+                                          CastError::NeedViaThinPtr => \"a thin pointer\",\n+                                          _ => bug!(),\n+                                      }));\n+                }\n+                err.emit();\n+            }\n+            CastError::NeedViaInt => {\n                 fcx.type_error_struct(self.span,\n-                                       |actual| {\n-                                           format!(\"casting `{}` as `{}` is invalid\",\n-                                                   actual,\n-                                                   fcx.ty_to_string(self.cast_ty))\n-                                       },\n-                                       self.expr_ty)\n-                    .help(&format!(\"cast through {} first\",\n-                                   match e {\n-                                       CastError::NeedViaPtr => \"a raw pointer\",\n-                                       CastError::NeedViaThinPtr => \"a thin pointer\",\n-                                       CastError::NeedViaInt => \"an integer\",\n-                                       CastError::NeedViaUsize => \"a usize\",\n-                                       _ => bug!(),\n-                                   }))\n-                    .emit();\n+                                      |actual| {\n+                                          format!(\"casting `{}` as `{}` is invalid\",\n+                                                  actual,\n+                                                  fcx.ty_to_string(self.cast_ty))\n+                                      },\n+                                      self.expr_ty)\n+                   .help(&format!(\"cast through {} first\",\n+                                  match e {\n+                                      CastError::NeedViaInt => \"an integer\",\n+                                      _ => bug!(),\n+                                  }))\n+                   .emit();\n             }\n             CastError::CastToBool => {\n                 struct_span_err!(fcx.tcx.sess, self.span, E0054, \"cannot cast as `bool`\")\n@@ -366,21 +378,23 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             (Int(Bool), Float) |\n             (Int(CEnum), Float) |\n             (Int(Char), Float) => Err(CastError::NeedViaInt),\n+\n             (Int(Bool), Ptr(_)) |\n             (Int(CEnum), Ptr(_)) |\n-            (Int(Char), Ptr(_)) => Err(CastError::NeedViaUsize),\n+            (Int(Char), Ptr(_)) |\n+            (Ptr(_), Float) |\n+            (FnPtr, Float) |\n+            (Float, Ptr(_)) => Err(CastError::IllegalCast),\n \n             // ptr -> *\n             (Ptr(m_e), Ptr(m_c)) => self.check_ptr_ptr_cast(fcx, m_e, m_c), // ptr-ptr-cast\n             (Ptr(m_expr), Int(_)) => self.check_ptr_addr_cast(fcx, m_expr), // ptr-addr-cast\n-            (Ptr(_), Float) | (FnPtr, Float) => Err(CastError::NeedViaUsize),\n             (FnPtr, Int(_)) => Ok(CastKind::FnPtrAddrCast),\n             (RPtr(_), Int(_)) |\n             (RPtr(_), Float) => Err(CastError::NeedViaPtr),\n             // * -> ptr\n             (Int(_), Ptr(mt)) => self.check_addr_ptr_cast(fcx, mt), // addr-ptr-cast\n             (FnPtr, Ptr(mt)) => self.check_fptr_ptr_cast(fcx, mt),\n-            (Float, Ptr(_)) => Err(CastError::NeedViaUsize),\n             (RPtr(rmt), Ptr(mt)) => self.check_ref_cast(fcx, rmt, mt), // array-ptr-cast\n \n             // prim -> prim\n@@ -391,7 +405,6 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             (Int(_), Int(_)) | (Int(_), Float) | (Float, Int(_)) | (Float, Float) => {\n                 Ok(CastKind::NumericCast)\n             }\n-\n         }\n     }\n "}, {"sha": "1dbad9e30e3addd8c4f7293a9d585437db6efe94", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=f22fdb03ebb684c1dee1b38990918df6a4537481", "patch": "@@ -48,16 +48,13 @@ fn main()\n \n     let _ = v as f32;\n     //~^ ERROR casting\n-    //~^^ HELP through a usize first\n     let _ = main as f64;\n     //~^ ERROR casting\n-    //~^^ HELP through a usize first\n     let _ = &v as usize;\n     //~^ ERROR casting\n     //~^^ HELP through a raw pointer first\n     let _ = f as *const u8;\n     //~^ ERROR casting\n-    //~^^ HELP through a usize first\n     let _ = 3_i32 as bool;\n     //~^ ERROR cannot cast as `bool` [E0054]\n     //~| unsupported cast\n@@ -80,13 +77,10 @@ fn main()\n \n     let _ = false as *const u8;\n     //~^ ERROR casting\n-    //~^^ HELP through a usize first\n     let _ = E::A as *const u8;\n     //~^ ERROR casting\n-    //~^^ HELP through a usize first\n     let _ = 'a' as *const u8;\n     //~^ ERROR casting\n-    //~^^ HELP through a usize first\n \n     let _ = 42usize as *const [u8]; //~ ERROR casting\n     let _ = v as *const [u8]; //~ ERROR cannot cast"}, {"sha": "c62987a5b900e60c637858a63374061934adcc53", "filename": "src/test/compile-fail/fat-ptr-cast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs?ref=f22fdb03ebb684c1dee1b38990918df6a4537481", "patch": "@@ -19,6 +19,9 @@ fn main() {\n \n     a as usize; //~ ERROR casting\n     //~^ HELP cast through a raw pointer first\n+    a as isize; //~ ERROR casting\n+    a as i16; //~ ERROR casting `&[i32]` as `i16` is invalid\n+    a as u32; //~ ERROR casting `&[i32]` as `u32` is invalid\n     b as usize; //~ ERROR non-scalar cast\n     p as usize;\n     //~^ ERROR casting"}, {"sha": "dafcff238387e2ca8969236119be5faa793f7749", "filename": "src/test/compile-fail/issue-17444.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs?ref=f22fdb03ebb684c1dee1b38990918df6a4537481", "patch": "@@ -15,5 +15,4 @@ enum Test {\n fn main() {\n     let _x = Test::Foo as *const isize;\n     //~^ ERROR casting `Test` as `*const isize` is invalid\n-    //~^^ HELP cast through a usize first\n }"}, {"sha": "1b87862a056df7d8371576b0485e121dd4191e07", "filename": "src/test/compile-fail/issue-21554.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs?ref=f22fdb03ebb684c1dee1b38990918df6a4537481", "patch": "@@ -13,5 +13,4 @@ struct Inches(i32);\n fn main() {\n     Inches as f32;\n     //~^ ERROR casting\n-    //~^^ cast through a usize first\n }"}, {"sha": "3f8b8f49cb3066782231d1c07f74c4c920ca6dcb", "filename": "src/test/compile-fail/typeck-cast-pointer-to-float.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22fdb03ebb684c1dee1b38990918df6a4537481/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs?ref=f22fdb03ebb684c1dee1b38990918df6a4537481", "patch": "@@ -12,5 +12,4 @@ fn main() {\n     let x : i16 = 22;\n     ((&x) as *const i16) as f32;\n     //~^ ERROR casting `*const i16` as `f32` is invalid\n-    //~^^ HELP cast through a usize first\n }"}]}