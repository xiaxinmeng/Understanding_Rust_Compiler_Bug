{"sha": "8de111018d036c977ccb03aca55a43c18413fd69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZTExMTAxOGQwMzZjOTc3Y2NiMDNhY2E1NWE0M2MxODQxM2ZkNjk=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-22T12:16:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-22T12:16:45Z"}, "message": "Merge pull request #201 from oli-obk/test_suite_fails\n\n\"Support\" more libc functions", "tree": {"sha": "d3ab8deb905b6344498473de0c1c472e82bec46d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3ab8deb905b6344498473de0c1c472e82bec46d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8de111018d036c977ccb03aca55a43c18413fd69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8de111018d036c977ccb03aca55a43c18413fd69", "html_url": "https://github.com/rust-lang/rust/commit/8de111018d036c977ccb03aca55a43c18413fd69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8de111018d036c977ccb03aca55a43c18413fd69/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522ac493642b6f3355e79e3ea7d66c24ea1763ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/522ac493642b6f3355e79e3ea7d66c24ea1763ab", "html_url": "https://github.com/rust-lang/rust/commit/522ac493642b6f3355e79e3ea7d66c24ea1763ab"}, {"sha": "2b9cfb68500ec0e2ada1fe698950606f2322d983", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b9cfb68500ec0e2ada1fe698950606f2322d983", "html_url": "https://github.com/rust-lang/rust/commit/2b9cfb68500ec0e2ada1fe698950606f2322d983"}], "stats": {"total": 233, "additions": 220, "deletions": 13}, "files": [{"sha": "8995a199f1370c8e1257e691bf3141cdc11b0e7d", "filename": "src/eval_context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8de111018d036c977ccb03aca55a43c18413fd69/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de111018d036c977ccb03aca55a43c18413fd69/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=8de111018d036c977ccb03aca55a43c18413fd69", "patch": "@@ -41,6 +41,10 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n     /// This prevents infinite loops and huge computations from freezing up const eval.\n     /// Remove once halting problem is solved.\n     pub(crate) steps_remaining: u64,\n+\n+    /// Environment variables set by `setenv`\n+    /// Miri does not expose env vars from the host to the emulated program\n+    pub(crate) env_vars: HashMap<Vec<u8>, Pointer>,\n }\n \n /// A stack frame.\n@@ -134,6 +138,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             stack: Vec::new(),\n             stack_limit: limits.stack_limit,\n             steps_remaining: limits.step_limit,\n+            env_vars: HashMap::new(),\n         }\n     }\n "}, {"sha": "0b9a37512ede8e5d72dc4e82d8115693724839bb", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8de111018d036c977ccb03aca55a43c18413fd69/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de111018d036c977ccb03aca55a43c18413fd69/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=8de111018d036c977ccb03aca55a43c18413fd69", "patch": "@@ -542,12 +542,11 @@ fn numeric_intrinsic<'tcx>(\n     kind: PrimValKind\n ) -> EvalResult<'tcx, PrimVal> {\n     macro_rules! integer_intrinsic {\n-        ($name:expr, $val:expr, $kind:expr, $method:ident) => ({\n-            let val = $val;\n+        ($method:ident) => ({\n             let bytes = val.to_bytes()?;\n \n             use value::PrimValKind::*;\n-            let result_bytes = match $kind {\n+            let result_bytes = match kind {\n                 I8 => (bytes as i8).$method() as u128,\n                 U8 => (bytes as u8).$method() as u128,\n                 I16 => (bytes as i16).$method() as u128,\n@@ -558,18 +557,18 @@ fn numeric_intrinsic<'tcx>(\n                 U64 => (bytes as u64).$method() as u128,\n                 I128 => (bytes as i128).$method() as u128,\n                 U128 => bytes.$method() as u128,\n-                _ => bug!(\"invalid `{}` argument: {:?}\", $name, val),\n+                _ => bug!(\"invalid `{}` argument: {:?}\", name, val),\n             };\n \n             PrimVal::Bytes(result_bytes)\n         });\n     }\n \n     let result_val = match name {\n-        \"bswap\" => integer_intrinsic!(\"bswap\", val, kind, swap_bytes),\n-        \"ctlz\"  => integer_intrinsic!(\"ctlz\",  val, kind, leading_zeros),\n-        \"ctpop\" => integer_intrinsic!(\"ctpop\", val, kind, count_ones),\n-        \"cttz\"  => integer_intrinsic!(\"cttz\",  val, kind, trailing_zeros),\n+        \"bswap\" => integer_intrinsic!(swap_bytes),\n+        \"ctlz\"  => integer_intrinsic!(leading_zeros),\n+        \"ctpop\" => integer_intrinsic!(count_ones),\n+        \"cttz\"  => integer_intrinsic!(trailing_zeros),\n         _       => bug!(\"not a numeric intrinsic: {}\", name),\n     };\n "}, {"sha": "7cb1a3cd6299307cd4cd482f15a85a054854bbb5", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 99, "deletions": 5, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8de111018d036c977ccb03aca55a43c18413fd69/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de111018d036c977ccb03aca55a43c18413fd69/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=8de111018d036c977ccb03aca55a43c18413fd69", "patch": "@@ -559,6 +559,42 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let usize = self.tcx.types.usize;\n \n         match &link_name[..] {\n+            \"malloc\" => {\n+                let size = self.value_to_primval(args[0], usize)?.to_u64()?;\n+                if size == 0 {\n+                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                } else {\n+                    let align = self.memory.pointer_size();\n+                    let ptr = self.memory.allocate(size, align)?;\n+                    self.write_primval(dest, PrimVal::Ptr(ptr), dest_ty)?;\n+                }\n+            }\n+\n+            \"free\" => {\n+                let ptr = args[0].read_ptr(&self.memory)?;\n+                if !ptr.is_null()? {\n+                    self.memory.deallocate(ptr.to_ptr()?)?;\n+                }\n+            }\n+\n+            \"syscall\" => {\n+                match self.value_to_primval(args[0], usize)?.to_u64()? {\n+                    511 => return Err(EvalError::Unimplemented(\"miri does not support random number generators\".to_owned())),\n+                    id => return Err(EvalError::Unimplemented(format!(\"miri does not support syscall id {}\", id))),\n+                }\n+            }\n+\n+            \"dlsym\" => {\n+                let handle = args[0].read_ptr(&self.memory)?;\n+                {\n+                    let symbol = args[1].read_ptr(&self.memory)?.to_ptr()?;\n+                    let symbol_name = self.memory.read_c_str(symbol)?;\n+                    let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n+                    let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n+                    return Err(EvalError::Unimplemented(format!(\"miri does not support dynamically loading libraries (requested symbol: {})\", symbol_name)));\n+                }\n+            }\n+\n             \"__rust_allocate\" => {\n                 let size = self.value_to_primval(args[0], usize)?.to_u64()?;\n                 let align = self.value_to_primval(args[1], usize)?.to_u64()?;\n@@ -670,12 +706,63 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"getenv\" => {\n-                {\n+                let result = {\n                     let name_ptr = args[0].read_ptr(&self.memory)?.to_ptr()?;\n                     let name = self.memory.read_c_str(name_ptr)?;\n-                    info!(\"ignored env var request for `{:?}`\", ::std::str::from_utf8(name));\n+                    match self.env_vars.get(name) {\n+                        Some(&var) => PrimVal::Ptr(var),\n+                        None => PrimVal::Bytes(0),\n+                    }\n+                };\n+                self.write_primval(dest, result, dest_ty)?;\n+            }\n+\n+            \"unsetenv\" => {\n+                let mut success = None;\n+                {\n+                    let name_ptr = args[0].read_ptr(&self.memory)?;\n+                    if !name_ptr.is_null()? {\n+                        let name = self.memory.read_c_str(name_ptr.to_ptr()?)?;\n+                        if !name.is_empty() && !name.contains(&b'=') {\n+                            success = Some(self.env_vars.remove(name));\n+                        }\n+                    }\n+                }\n+                if let Some(old) = success {\n+                    if let Some(var) = old {\n+                        self.memory.deallocate(var)?;\n+                    }\n+                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                } else {\n+                    self.write_primval(dest, PrimVal::from_i128(-1), dest_ty)?;\n+                }\n+            }\n+\n+            \"setenv\" => {\n+                let mut new = None;\n+                {\n+                    let name_ptr = args[0].read_ptr(&self.memory)?;\n+                    let value_ptr = args[1].read_ptr(&self.memory)?.to_ptr()?;\n+                    let value = self.memory.read_c_str(value_ptr)?;\n+                    if !name_ptr.is_null()? {\n+                        let name = self.memory.read_c_str(name_ptr.to_ptr()?)?;\n+                        if !name.is_empty() && !name.contains(&b'=') {\n+                            new = Some((name.to_owned(), value.to_owned()));\n+                        }\n+                    }\n+                }\n+                if let Some((name, value)) = new {\n+                    // +1 for the null terminator\n+                    let value_copy = self.memory.allocate((value.len() + 1) as u64, 1)?;\n+                    self.memory.write_bytes(value_copy, &value)?;\n+                    self.memory.write_bytes(value_copy.offset(value.len() as u64, self.memory.layout)?, &[0])?;\n+                    if let Some(var) = self.env_vars.insert(name.to_owned(), value_copy) {\n+                        self.memory.deallocate(var)?;\n+                    }\n+                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                } else {\n+                    self.write_primval(dest, PrimVal::from_i128(-1), dest_ty)?;\n                 }\n-                self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n             }\n \n             \"write\" => {\n@@ -696,6 +783,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::Bytes(result as u128), dest_ty)?;\n             }\n \n+            \"strlen\" => {\n+                let ptr = args[0].read_ptr(&self.memory)?.to_ptr()?;\n+                let n = self.memory.read_c_str(ptr)?.len();\n+                self.write_primval(dest, PrimVal::Bytes(n as u128), dest_ty)?;\n+            }\n+\n             // Some things needed for sys::thread initialization to go through\n             \"signal\" | \"sigaction\" | \"sigaltstack\" => {\n                 self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n@@ -705,10 +798,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let name = self.value_to_primval(args[0], usize)?.to_u64()?;\n                 trace!(\"sysconf() called with name {}\", name);\n                 let result = match name {\n-                    30 => 4096, // _SC_PAGESIZE\n+                    30 => PrimVal::Bytes(4096), // _SC_PAGESIZE\n+                    70 => PrimVal::from_i128(-1), // _SC_GETPW_R_SIZE_MAX\n                     _ => return Err(EvalError::Unimplemented(format!(\"Unimplemented sysconf name: {}\", name)))\n                 };\n-                self.write_primval(dest, PrimVal::Bytes(result), dest_ty)?;\n+                self.write_primval(dest, result, dest_ty)?;\n             }\n \n             \"mmap\" => {"}, {"sha": "66c3049b9c7cd789016bd5eab83bc4c0c82ab4e2", "filename": "src/value.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8de111018d036c977ccb03aca55a43c18413fd69/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de111018d036c977ccb03aca55a43c18413fd69/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=8de111018d036c977ccb03aca55a43c18413fd69", "patch": "@@ -226,6 +226,14 @@ impl<'tcx> PrimVal {\n         }\n     }\n \n+    pub fn is_null(self) -> EvalResult<'tcx, bool> {\n+        match self {\n+            PrimVal::Bytes(b) => Ok(b == 0),\n+            PrimVal::Ptr(_) => Ok(false),\n+            PrimVal::Undef => Err(EvalError::ReadUndefBytes),\n+        }\n+    }\n+\n     pub fn signed_offset(self, i: i64, layout: &TargetDataLayout) -> EvalResult<'tcx, Self> {\n         match self {\n             PrimVal::Bytes(b) => {"}, {"sha": "b569cd0a66291342487a9d44c8e0516c111082a8", "filename": "tests/run-pass-fullmir/foreign-fn-linkname.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8de111018d036c977ccb03aca55a43c18413fd69/tests%2Frun-pass-fullmir%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de111018d036c977ccb03aca55a43c18413fd69/tests%2Frun-pass-fullmir%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fforeign-fn-linkname.rs?ref=8de111018d036c977ccb03aca55a43c18413fd69", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+\n+#![feature(libc)]\n+\n+extern crate libc;\n+use std::ffi::CString;\n+\n+mod mlibc {\n+    use libc::{c_char, size_t};\n+\n+    extern {\n+        #[link_name = \"strlen\"]\n+        pub fn my_strlen(str: *const c_char) -> size_t;\n+    }\n+}\n+\n+fn strlen(str: String) -> usize {\n+    // C string is terminated with a zero\n+    let s = CString::new(str).unwrap();\n+    unsafe {\n+        mlibc::my_strlen(s.as_ptr()) as usize\n+    }\n+}\n+\n+pub fn main() {\n+    let len = strlen(\"Rust\".to_string());\n+    assert_eq!(len, 4);\n+}"}, {"sha": "7d9d31b0dda19827357d7f161da9c83d07e01b39", "filename": "tests/run-pass-fullmir/regions-mock-trans.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8de111018d036c977ccb03aca55a43c18413fd69/tests%2Frun-pass-fullmir%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de111018d036c977ccb03aca55a43c18413fd69/tests%2Frun-pass-fullmir%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fregions-mock-trans.rs?ref=8de111018d036c977ccb03aca55a43c18413fd69", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-expanded FIXME #23616\n+\n+#![feature(libc)]\n+\n+#![allow(dead_code)]\n+\n+extern crate libc;\n+use std::mem;\n+\n+struct Arena(());\n+\n+struct Bcx<'a> {\n+    fcx: &'a Fcx<'a>\n+}\n+\n+struct Fcx<'a> {\n+    arena: &'a Arena,\n+    ccx: &'a Ccx\n+}\n+\n+struct Ccx {\n+    x: isize\n+}\n+\n+fn alloc<'a>(_bcx : &'a Arena) -> &'a Bcx<'a> {\n+    unsafe {\n+        mem::transmute(libc::malloc(mem::size_of::<Bcx<'a>>()\n+            as libc::size_t))\n+    }\n+}\n+\n+fn h<'a>(bcx : &'a Bcx<'a>) -> &'a Bcx<'a> {\n+    return alloc(bcx.fcx.arena);\n+}\n+\n+fn g(fcx : &Fcx) {\n+    let bcx = Bcx { fcx: fcx };\n+    let bcx2 = h(&bcx);\n+    unsafe {\n+        libc::free(mem::transmute(bcx2));\n+    }\n+}\n+\n+fn f(ccx : &Ccx) {\n+    let a = Arena(());\n+    let fcx = Fcx { arena: &a, ccx: ccx };\n+    return g(&fcx);\n+}\n+\n+pub fn main() {\n+    let ccx = Ccx { x: 0 };\n+    f(&ccx);\n+}"}]}