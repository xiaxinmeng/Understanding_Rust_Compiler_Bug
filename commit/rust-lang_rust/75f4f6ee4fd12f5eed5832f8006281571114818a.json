{"sha": "75f4f6ee4fd12f5eed5832f8006281571114818a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZjRmNmVlNGZkMTJmNWVlZDU4MzJmODAwNjI4MTU3MTExNDgxOGE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T10:26:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:43Z"}, "message": "Use () for mir_keys.", "tree": {"sha": "9ca2b067d9044bce3256b2f276484b88da1dc2cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca2b067d9044bce3256b2f276484b88da1dc2cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75f4f6ee4fd12f5eed5832f8006281571114818a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75f4f6ee4fd12f5eed5832f8006281571114818a", "html_url": "https://github.com/rust-lang/rust/commit/75f4f6ee4fd12f5eed5832f8006281571114818a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75f4f6ee4fd12f5eed5832f8006281571114818a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d15abe0cc3f8d5dc73c6acc829ca66e1eebaf60", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d15abe0cc3f8d5dc73c6acc829ca66e1eebaf60", "html_url": "https://github.com/rust-lang/rust/commit/9d15abe0cc3f8d5dc73c6acc829ca66e1eebaf60"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "ccf4a4eeefe206d414a8f9d61c0bc522c828dfa5", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75f4f6ee4fd12f5eed5832f8006281571114818a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f4f6ee4fd12f5eed5832f8006281571114818a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=75f4f6ee4fd12f5eed5832f8006281571114818a", "patch": "@@ -265,7 +265,7 @@ fn add_unused_functions<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     let ignore_unused_generics = tcx.sess.instrument_coverage_except_unused_generics();\n \n     let all_def_ids: DefIdSet = tcx\n-        .mir_keys(LOCAL_CRATE)\n+        .mir_keys(())\n         .iter()\n         .filter_map(|local_def_id| {\n             let def_id = local_def_id.to_def_id();"}, {"sha": "707d72d58d59bab92693657c958493ee1396a684", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75f4f6ee4fd12f5eed5832f8006281571114818a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f4f6ee4fd12f5eed5832f8006281571114818a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=75f4f6ee4fd12f5eed5832f8006281571114818a", "patch": "@@ -1237,7 +1237,7 @@ impl EncodeContext<'a, 'tcx> {\n \n         let mut keys_and_jobs = self\n             .tcx\n-            .mir_keys(LOCAL_CRATE)\n+            .mir_keys(())\n             .iter()\n             .filter_map(|&def_id| {\n                 let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);\n@@ -2002,7 +2002,7 @@ fn prefetch_mir(tcx: TyCtxt<'_>) {\n         return;\n     }\n \n-    par_iter(tcx.mir_keys(LOCAL_CRATE)).for_each(|&def_id| {\n+    par_iter(tcx.mir_keys(())).for_each(|&def_id| {\n         let (encode_const, encode_opt) = should_encode_mir(tcx, def_id);\n \n         if encode_const {"}, {"sha": "40bb31c93df58046b8504765cf22a613c1d721ca", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75f4f6ee4fd12f5eed5832f8006281571114818a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f4f6ee4fd12f5eed5832f8006281571114818a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=75f4f6ee4fd12f5eed5832f8006281571114818a", "patch": "@@ -223,7 +223,7 @@ rustc_queries! {\n     /// Set of all the `DefId`s in this crate that have MIR associated with\n     /// them. This includes all the body owners, but also things like struct\n     /// constructors.\n-    query mir_keys(_: CrateNum) -> FxHashSet<LocalDefId> {\n+    query mir_keys(_: ()) -> FxHashSet<LocalDefId> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"getting a list of all mir_keys\" }\n     }"}, {"sha": "2201223e13eabd92b0314a4bd20ed5c01b3ddae0", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75f4f6ee4fd12f5eed5832f8006281571114818a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f4f6ee4fd12f5eed5832f8006281571114818a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=75f4f6ee4fd12f5eed5832f8006281571114818a", "patch": "@@ -3,7 +3,7 @@ use required_consts::RequiredConstsVisitor;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::steal::Steal;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n@@ -98,14 +98,13 @@ pub(crate) fn provide(providers: &mut Providers) {\n }\n \n fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    tcx.mir_keys(def_id.krate).contains(&def_id.expect_local())\n+    let def_id = def_id.expect_local();\n+    tcx.mir_keys(()).contains(&def_id)\n }\n \n /// Finds the full set of `DefId`s within the current crate that have\n /// MIR associated with them.\n-fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> FxHashSet<LocalDefId> {\n-    assert_eq!(krate, LOCAL_CRATE);\n-\n+fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n     let mut set = FxHashSet::default();\n \n     // All body-owners have MIR associated with them."}, {"sha": "b35b744aa785688e9c51ad8561fb891020018e65", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75f4f6ee4fd12f5eed5832f8006281571114818a/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f4f6ee4fd12f5eed5832f8006281571114818a/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=75f4f6ee4fd12f5eed5832f8006281571114818a", "patch": "@@ -10,7 +10,7 @@ use super::spanview::write_mir_fn_spanview;\n use crate::transform::MirSource;\n use either::Either;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, Pointer,\n@@ -1017,6 +1017,6 @@ pub fn dump_mir_def_ids(tcx: TyCtxt<'_>, single: Option<DefId>) -> Vec<DefId> {\n     if let Some(i) = single {\n         vec![i]\n     } else {\n-        tcx.mir_keys(LOCAL_CRATE).iter().map(|def_id| def_id.to_def_id()).collect()\n+        tcx.mir_keys(()).iter().map(|def_id| def_id.to_def_id()).collect()\n     }\n }"}]}