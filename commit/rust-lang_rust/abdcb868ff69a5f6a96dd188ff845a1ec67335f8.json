{"sha": "abdcb868ff69a5f6a96dd188ff845a1ec67335f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZGNiODY4ZmY2OWE1ZjZhOTZkZDE4OGZmODQ1YTFlYzY3MzM1Zjg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-11-09T01:51:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-11-22T22:14:27Z"}, "message": "Point at every unexpected lifetime and type argument in E0107", "tree": {"sha": "f17cca278a41f4713443b2a4f18ff1cfa67d490d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f17cca278a41f4713443b2a4f18ff1cfa67d490d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abdcb868ff69a5f6a96dd188ff845a1ec67335f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abdcb868ff69a5f6a96dd188ff845a1ec67335f8", "html_url": "https://github.com/rust-lang/rust/commit/abdcb868ff69a5f6a96dd188ff845a1ec67335f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "910ec6d97ff03549c22352d7763be02b60d73470", "url": "https://api.github.com/repos/rust-lang/rust/commits/910ec6d97ff03549c22352d7763be02b60d73470", "html_url": "https://github.com/rust-lang/rust/commit/910ec6d97ff03549c22352d7763be02b60d73470"}], "stats": {"total": 98, "additions": 69, "deletions": 29}, "files": [{"sha": "277f7d345462e0e7fdbed286ea609f7cee6e6b0e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=abdcb868ff69a5f6a96dd188ff845a1ec67335f8", "patch": "@@ -338,33 +338,31 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 (required, \"\")\n             };\n \n-            let mut span = span;\n-            let label = if required == permitted && provided > permitted {\n-                let diff = provided - permitted;\n-                if diff == 1 {\n-                    // In the case when the user has provided too many arguments,\n-                    // we want to point to the first unexpected argument.\n-                    let first_superfluous_arg: &GenericArg = &args.args[offset + permitted];\n-                    span = first_superfluous_arg.span();\n-                }\n-                format!(\n-                    \"{}unexpected {} argument{}\",\n-                    if diff != 1 { format!(\"{} \", diff) } else { String::new() },\n-                    kind,\n-                    if diff != 1 { \"s\" } else { \"\" },\n+            let (spans, label) = if required == permitted && provided > permitted {\n+                // In the case when the user has provided too many arguments,\n+                // we want to point to the unexpected arguments.\n+                (\n+                    args.args[offset+permitted .. offset+provided]\n+                        .iter()\n+                        .map(|arg| arg.span())\n+                        .collect(),\n+                    format!(\n+                        \"unexpected {} argument\",\n+                        kind,\n+                    ),\n                 )\n             } else {\n-                format!(\n+                (vec![span], format!(\n                     \"expected {}{} {} argument{}\",\n                     quantifier,\n                     bound,\n                     kind,\n                     if bound != 1 { \"s\" } else { \"\" },\n-                )\n+                ))\n             };\n \n-            tcx.sess.struct_span_err_with_code(\n-                span,\n+            let mut err = tcx.sess.struct_span_err_with_code(\n+                spans.clone(),\n                 &format!(\n                     \"wrong number of {} arguments: expected {}{}, found {}\",\n                     kind,\n@@ -373,7 +371,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                     provided,\n                 ),\n                 DiagnosticId::Error(\"E0107\".into())\n-            ).span_label(span, label).emit();\n+            );\n+            for span in spans {\n+                err.span_label(span, label.as_str());\n+            }\n+            err.emit();\n \n             provided > required // `suppress_error`\n         };\n@@ -1030,13 +1032,16 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         for item_def_id in associated_types {\n             let assoc_item = tcx.associated_item(item_def_id);\n             let trait_def_id = assoc_item.container.id();\n-            struct_span_err!(tcx.sess, span, E0191, \"the value of the associated type `{}` \\\n-                                                     (from the trait `{}`) must be specified\",\n-                                                    assoc_item.ident,\n-                                                    tcx.item_path_str(trait_def_id))\n-                .span_label(span, format!(\"missing associated type `{}` value\",\n-                                          assoc_item.ident))\n-                .emit();\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0191,\n+                \"the value of the associated type `{}` (from the trait `{}`) must be specified\",\n+                assoc_item.ident,\n+                tcx.item_path_str(trait_def_id),\n+            );\n+            err.span_label(span, format!(\"missing associated type `{}` value\", assoc_item.ident));\n+            err.emit();\n         }\n \n         // Erase the `dummy_self` (`TRAIT_OBJECT_DUMMY_SELF`) used above."}, {"sha": "58e7718ba5bb4fbdcbb088c0f2c191576dde78d2", "filename": "src/test/ui/error-codes/E0107-b.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/src%2Ftest%2Fui%2Ferror-codes%2FE0107-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/src%2Ftest%2Fui%2Ferror-codes%2FE0107-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107-b.rs?ref=abdcb868ff69a5f6a96dd188ff845a1ec67335f8", "patch": "@@ -0,0 +1,8 @@\n+pub trait T<X, Y> {\n+    type A;\n+    type B;\n+    type C;\n+}\n+ pub struct Foo { i: Box<T<usize, usize, usize, usize, B=usize>> }\n+\n+ fn main() {}"}, {"sha": "28b957dc91e778fbb983fbc5e3577ff1d2a5ba8a", "filename": "src/test/ui/error-codes/E0107-b.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/src%2Ftest%2Fui%2Ferror-codes%2FE0107-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/src%2Ftest%2Fui%2Ferror-codes%2FE0107-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107-b.stderr?ref=abdcb868ff69a5f6a96dd188ff845a1ec67335f8", "patch": "@@ -0,0 +1,24 @@\n+error[E0107]: wrong number of type arguments: expected 2, found 4\n+  --> $DIR/E0107-b.rs:6:42\n+   |\n+LL |  pub struct Foo { i: Box<T<usize, usize, usize, usize, B=usize>> }\n+   |                                          ^^^^^  ^^^^^ unexpected type argument\n+   |                                          |\n+   |                                          unexpected type argument\n+\n+error[E0191]: the value of the associated type `A` (from the trait `T`) must be specified\n+  --> $DIR/E0107-b.rs:6:26\n+   |\n+LL |  pub struct Foo { i: Box<T<usize, usize, usize, usize, B=usize>> }\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing associated type `A` value\n+\n+error[E0191]: the value of the associated type `C` (from the trait `T`) must be specified\n+  --> $DIR/E0107-b.rs:6:26\n+   |\n+LL |  pub struct Foo { i: Box<T<usize, usize, usize, usize, B=usize>> }\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing associated type `C` value\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0107, E0191.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "87ac9e37853c01ce518c65a1f7233bea661afec4", "filename": "src/test/ui/error-codes/E0107.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs?ref=abdcb868ff69a5f6a96dd188ff845a1ec67335f8", "patch": "@@ -26,7 +26,8 @@ struct Baz<'a, 'b, 'c> {\n     //~| unexpected lifetime argument\n     foo2: Foo<'a, 'b, 'c>,\n     //~^ ERROR E0107\n-    //~| 2 unexpected lifetime arguments\n+    //~| unexpected lifetime argument\n+    //~| unexpected lifetime argument\n }\n \n fn main() {}"}, {"sha": "a07c92cf26afb06c174a6b381d2b9005c889ed25", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abdcb868ff69a5f6a96dd188ff845a1ec67335f8/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=abdcb868ff69a5f6a96dd188ff845a1ec67335f8", "patch": "@@ -11,10 +11,12 @@ LL |     bar: Bar<'a>,\n    |              ^^ unexpected lifetime argument\n \n error[E0107]: wrong number of lifetime arguments: expected 1, found 3\n-  --> $DIR/E0107.rs:27:11\n+  --> $DIR/E0107.rs:27:19\n    |\n LL |     foo2: Foo<'a, 'b, 'c>,\n-   |           ^^^^^^^^^^^^^^^ 2 unexpected lifetime arguments\n+   |                   ^^  ^^ unexpected lifetime argument\n+   |                   |\n+   |                   unexpected lifetime argument\n \n error: aborting due to 3 previous errors\n "}]}