{"sha": "b85e2e4735fe78fffeecd2fce96d7ce40d22438c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NWUyZTQ3MzVmZTc4ZmZmZWVjZDJmY2U5NmQ3Y2U0MGQyMjQzOGM=", "commit": {"author": {"name": "Matt Ickstadt", "email": "mattico8@gmail.com", "date": "2017-04-08T21:12:58Z"}, "committer": {"name": "Matt Ickstadt", "email": "mattico8@gmail.com", "date": "2017-04-24T02:23:45Z"}, "message": "Update splice impl", "tree": {"sha": "76388e913c195a5d7c5e15b5b637d04292cbadb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76388e913c195a5d7c5e15b5b637d04292cbadb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85e2e4735fe78fffeecd2fce96d7ce40d22438c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85e2e4735fe78fffeecd2fce96d7ce40d22438c", "html_url": "https://github.com/rust-lang/rust/commit/b85e2e4735fe78fffeecd2fce96d7ce40d22438c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85e2e4735fe78fffeecd2fce96d7ce40d22438c/comments", "author": {"login": "mattico", "id": 853158, "node_id": "MDQ6VXNlcjg1MzE1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/853158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattico", "html_url": "https://github.com/mattico", "followers_url": "https://api.github.com/users/mattico/followers", "following_url": "https://api.github.com/users/mattico/following{/other_user}", "gists_url": "https://api.github.com/users/mattico/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattico/subscriptions", "organizations_url": "https://api.github.com/users/mattico/orgs", "repos_url": "https://api.github.com/users/mattico/repos", "events_url": "https://api.github.com/users/mattico/events{/privacy}", "received_events_url": "https://api.github.com/users/mattico/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattico", "id": 853158, "node_id": "MDQ6VXNlcjg1MzE1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/853158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattico", "html_url": "https://github.com/mattico", "followers_url": "https://api.github.com/users/mattico/followers", "following_url": "https://api.github.com/users/mattico/following{/other_user}", "gists_url": "https://api.github.com/users/mattico/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattico/subscriptions", "organizations_url": "https://api.github.com/users/mattico/orgs", "repos_url": "https://api.github.com/users/mattico/repos", "events_url": "https://api.github.com/users/mattico/events{/privacy}", "received_events_url": "https://api.github.com/users/mattico/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2111aff682ee4ced9dca27defb4643cc78ab8762", "url": "https://api.github.com/repos/rust-lang/rust/commits/2111aff682ee4ced9dca27defb4643cc78ab8762", "html_url": "https://github.com/rust-lang/rust/commit/2111aff682ee4ced9dca27defb4643cc78ab8762"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "cc4f9b86be4d64b3ec9830d62638f3b65b9e4234", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b85e2e4735fe78fffeecd2fce96d7ce40d22438c/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85e2e4735fe78fffeecd2fce96d7ce40d22438c/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=b85e2e4735fe78fffeecd2fce96d7ce40d22438c", "patch": "@@ -1421,8 +1421,16 @@ impl String {\n         // Because the range removal happens in Drop, if the Splice iterator is leaked,\n         // the removal will not happen.\n         let len = self.len();\n-        let start = *range.start().unwrap_or(&0);\n-        let end = *range.end().unwrap_or(&len);\n+        let start = match range.start() {\n+             Included(&n) => n,\n+             Excluded(&n) => n + 1,\n+             Unbounded => 0,\n+        };\n+        let end = match range.end() {\n+             Included(&n) => n + 1,\n+             Excluded(&n) => n,\n+             Unbounded => len,\n+        };\n \n         // Take out two simultaneous borrows. The &mut String won't be accessed\n         // until iteration is over, in Drop.\n@@ -2210,6 +2218,7 @@ impl<'a> FusedIterator for Drain<'a> {}\n ///\n /// [`splice()`]: struct.String.html#method.splice\n /// [`String`]: struct.String.html\n+#[derive(Debug)]\n #[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n pub struct Splice<'a, 'b> {\n     /// Will be used as &'a mut String in the destructor"}, {"sha": "dc330d4b2590b6cb56d11e396f1868084aae393f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b85e2e4735fe78fffeecd2fce96d7ce40d22438c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85e2e4735fe78fffeecd2fce96d7ce40d22438c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b85e2e4735fe78fffeecd2fce96d7ce40d22438c", "patch": "@@ -2394,7 +2394,14 @@ impl<'a, T> InPlace<T> for PlaceBack<'a, T> {\n }\n \n \n-/// A splicing iterator for `Vec<T>`. See the [`Vec::splice`](struct.Vec.html#method.splice) method.\n+/// A splicing iterator for `Vec`.\n+///\n+/// This struct is created by the [`splice()`] method on [`Vec`]. See its\n+/// documentation for more.\n+///\n+/// [`splice()`]: struct.Vec.html#method.splice\n+/// [`Vec`]: struct.Vec.html\n+#[derive(Debug)]\n #[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n pub struct Splice<'a, I: Iterator + 'a> {\n     drain: Drain<'a, I::Item>,\n@@ -2434,7 +2441,7 @@ impl<'a, I: Iterator> Drop for Splice<'a, I> {\n \n         unsafe {\n             if self.drain.tail_len == 0 {\n-                let vec = &mut *self.drain.vec;\n+                let vec = &mut *self.drain.vec.as_mut_ptr();\n                 vec.extend(self.replace_with.by_ref());\n                 return\n             }\n@@ -2476,7 +2483,7 @@ impl<'a, T> Drain<'a, T> {\n     /// Fill that range as much as possible with new elements from the `replace_with` iterator.\n     /// Return whether we filled the entire range. (`replace_with.next()` didn\u2019t return `None`.)\n     unsafe fn fill<I: Iterator<Item=T>>(&mut self, replace_with: &mut I) -> bool {\n-        let vec = &mut *self.vec;\n+        let vec = &mut *self.vec.as_mut_ptr();\n         let range_start = vec.len;\n         let range_end = self.tail_start;\n         let range_slice = slice::from_raw_parts_mut(\n@@ -2496,7 +2503,7 @@ impl<'a, T> Drain<'a, T> {\n \n     /// Make room for inserting more elements before the tail.\n     unsafe fn move_tail(&mut self, extra_capacity: usize) {\n-        let vec = &mut *self.vec;\n+        let vec = &mut *self.vec.as_mut_ptr();\n         let used_capacity = self.tail_start + self.tail_len;\n         vec.buf.reserve(used_capacity, extra_capacity);\n "}]}