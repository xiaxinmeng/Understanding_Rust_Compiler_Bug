{"sha": "f1ffd14922d2dc885ba6441ca8380f7d4cb75269", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZmZkMTQ5MjJkMmRjODg1YmE2NDQxY2E4MzgwZjdkNGNiNzUyNjk=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-04T16:11:56Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-04T16:11:56Z"}, "message": "Reduce string copying", "tree": {"sha": "6beb6f77893e4eed93e06cff6dfeb231e6dfe3b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6beb6f77893e4eed93e06cff6dfeb231e6dfe3b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ffd14922d2dc885ba6441ca8380f7d4cb75269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ffd14922d2dc885ba6441ca8380f7d4cb75269", "html_url": "https://github.com/rust-lang/rust/commit/f1ffd14922d2dc885ba6441ca8380f7d4cb75269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ffd14922d2dc885ba6441ca8380f7d4cb75269/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b86ff3e91838e58397ec39502d85056e46fcfcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b86ff3e91838e58397ec39502d85056e46fcfcb", "html_url": "https://github.com/rust-lang/rust/commit/5b86ff3e91838e58397ec39502d85056e46fcfcb"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "423a4934e82d08028db703d1d3a98db96975421e", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f1ffd14922d2dc885ba6441ca8380f7d4cb75269/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ffd14922d2dc885ba6441ca8380f7d4cb75269/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=f1ffd14922d2dc885ba6441ca8380f7d4cb75269", "patch": "@@ -414,7 +414,7 @@ trait TokenConvertor {\n     fn id_alloc(&mut self) -> &mut TokenIdAlloc;\n }\n \n-impl<'a> SrcToken for (RawToken, &'a str) {\n+impl<'a> SrcToken for (&'a RawToken, &'a str) {\n     fn kind(&self) -> SyntaxKind {\n         self.0.kind\n     }\n@@ -431,7 +431,7 @@ impl<'a> SrcToken for (RawToken, &'a str) {\n impl RawConvertor<'_> {}\n \n impl<'a> TokenConvertor for RawConvertor<'a> {\n-    type Token = (RawToken, &'a str);\n+    type Token = (&'a RawToken, &'a str);\n \n     fn convert_doc_comment(&self, token: &Self::Token) -> Option<Vec<tt::TokenTree>> {\n         convert_doc_comment(&doc_comment(token.1))\n@@ -442,11 +442,11 @@ impl<'a> TokenConvertor for RawConvertor<'a> {\n         let range = TextRange::at(self.offset, token.len);\n         self.offset += token.len;\n \n-        Some(((*token, &self.text[range]), range))\n+        Some(((token, &self.text[range]), range))\n     }\n \n     fn peek(&self) -> Option<Self::Token> {\n-        let token = self.inner.as_slice().get(0).cloned();\n+        let token = self.inner.as_slice().get(0);\n \n         token.map(|it| {\n             let range = TextRange::at(self.offset, it.len);\n@@ -601,17 +601,16 @@ impl<'a> TtTreeSink<'a> {\n     }\n }\n \n-fn delim_to_str(d: Option<tt::DelimiterKind>, closing: bool) -> SmolStr {\n+fn delim_to_str(d: Option<tt::DelimiterKind>, closing: bool) -> &'static str {\n     let texts = match d {\n         Some(tt::DelimiterKind::Parenthesis) => \"()\",\n         Some(tt::DelimiterKind::Brace) => \"{}\",\n         Some(tt::DelimiterKind::Bracket) => \"[]\",\n-        None => return \"\".into(),\n+        None => return \"\",\n     };\n \n     let idx = closing as usize;\n-    let text = &texts[idx..texts.len() - (1 - idx)];\n-    text.into()\n+    &texts[idx..texts.len() - (1 - idx)]\n }\n \n impl<'a> TreeSink for TtTreeSink<'a> {\n@@ -626,22 +625,25 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n \n         let mut last = self.cursor;\n         for _ in 0..n_tokens {\n+            let tmp_str: SmolStr;\n             if self.cursor.eof() {\n                 break;\n             }\n             last = self.cursor;\n-            let text: SmolStr = match self.cursor.token_tree() {\n+            let text: &str = match self.cursor.token_tree() {\n                 Some(tt::TokenTree::Leaf(leaf)) => {\n                     // Mark the range if needed\n                     let (text, id) = match leaf {\n-                        tt::Leaf::Ident(ident) => (ident.text.clone(), ident.id),\n+                        tt::Leaf::Ident(ident) => (&ident.text, ident.id),\n                         tt::Leaf::Punct(punct) => {\n                             assert!(punct.char.is_ascii());\n                             let char = &(punct.char as u8);\n-                            let text = std::str::from_utf8(std::slice::from_ref(char)).unwrap();\n-                            (SmolStr::new_inline(text), punct.id)\n+                            tmp_str = SmolStr::new_inline(\n+                                std::str::from_utf8(std::slice::from_ref(char)).unwrap(),\n+                            );\n+                            (&tmp_str, punct.id)\n                         }\n-                        tt::Leaf::Literal(lit) => (lit.text.clone(), lit.id),\n+                        tt::Leaf::Literal(lit) => (&lit.text, lit.id),\n                     };\n                     let range = TextRange::at(self.text_pos, TextSize::of(text.as_str()));\n                     self.token_map.insert(id, range);\n@@ -672,7 +674,7 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n                 }\n             };\n             self.buf += &text;\n-            self.text_pos += TextSize::of(text.as_str());\n+            self.text_pos += TextSize::of(text);\n         }\n \n         let text = SmolStr::new(self.buf.as_str());"}]}