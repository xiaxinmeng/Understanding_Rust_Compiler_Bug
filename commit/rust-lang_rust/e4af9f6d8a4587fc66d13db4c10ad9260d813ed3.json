{"sha": "e4af9f6d8a4587fc66d13db4c10ad9260d813ed3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YWY5ZjZkOGE0NTg3ZmM2NmQxM2RiNGMxMGFkOTI2MGQ4MTNlZDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-24T13:49:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-24T13:49:32Z"}, "message": "Reorgonise extensions docs", "tree": {"sha": "c184fc376a13ec8c9b75e0185fa3012a899c8188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c184fc376a13ec8c9b75e0185fa3012a899c8188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4af9f6d8a4587fc66d13db4c10ad9260d813ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4af9f6d8a4587fc66d13db4c10ad9260d813ed3", "html_url": "https://github.com/rust-lang/rust/commit/e4af9f6d8a4587fc66d13db4c10ad9260d813ed3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4af9f6d8a4587fc66d13db4c10ad9260d813ed3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f", "html_url": "https://github.com/rust-lang/rust/commit/d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f"}], "stats": {"total": 98, "additions": 50, "deletions": 48}, "files": [{"sha": "1cc51410b7f39cfa628b1149b54bb73f89c622cb", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 50, "deletions": 48, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e4af9f6d8a4587fc66d13db4c10ad9260d813ed3/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/e4af9f6d8a4587fc66d13db4c10ad9260d813ed3/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=e4af9f6d8a4587fc66d13db4c10ad9260d813ed3", "patch": "@@ -3,7 +3,9 @@\n This document describes LSP extensions used by rust-analyzer.\n It's a best effort document, when in doubt, consult the source (and send a PR with clarification ;-) ).\n We aim to upstream all non Rust-specific extensions to the protocol, but this is not a top priority.\n-All capabilities are enabled via `experimental` field of `ClientCapabilities`.\n+All capabilities are enabled via `experimental` field of `ClientCapabilities` or `ServerCapabilities`.\n+Requests which we hope to upstream live under `experimental/` namespace.\n+Requests, which are likely to always remain specific to `rust-analyzer` are under `rust-analyzer/` namespace.\n \n ## Snippet `TextEdit`\n \n@@ -38,6 +40,53 @@ At the moment, rust-analyzer guarantees that only a single edit will have `Inser\n * Where exactly are `SnippetTextEdit`s allowed (only in code actions at the moment)?\n * Can snippets span multiple files (so far, no)?\n \n+## `CodeAction` Groups\n+\n+**Issue:** https://github.com/microsoft/language-server-protocol/issues/994\n+\n+**Client Capability:** `{ \"codeActionGroup\": boolean }`\n+\n+If this capability is set, `CodeAction` returned from the server contain an additional field, `group`:\n+\n+```typescript\n+interface CodeAction {\n+    title: string;\n+    group?: string;\n+    ...\n+}\n+```\n+\n+All code-actions with the same `group` should be grouped under single (extendable) entry in lightbulb menu.\n+The set of actions `[ { title: \"foo\" }, { group: \"frobnicate\", title: \"bar\" }, { group: \"frobnicate\", title: \"baz\" }]` should be rendered as\n+\n+```\n+\ud83d\udca1\n+  +-------------+\n+  | foo         |\n+  +-------------+-----+\n+  | frobnicate >| bar |\n+  +-------------+-----+\n+                | baz |\n+                +-----+\n+```\n+\n+Alternatively, selecting `frobnicate` could present a user with an additional menu to choose between `bar` and `baz`.\n+\n+### Example\n+\n+```rust\n+fn main() {\n+    let x: Entry/*cursor here*/ = todo!();\n+}\n+```\n+\n+Invoking code action at this position will yield two code actions for importing `Entry` from either `collections::HashMap` or `collection::BTreeMap`, grouped under a single \"import\" group.\n+\n+### Unresolved Questions\n+\n+* Is a fixed two-level structure enough?\n+* Should we devise a general way to encode custom interaction protocols for GUI refactorings?\n+\n ## Join Lines\n \n **Issue:** https://github.com/microsoft/language-server-protocol/issues/992\n@@ -123,50 +172,3 @@ SSR with query `foo($a:expr, $b:expr) ==>> ($a).foo($b)` will transform, eg `foo\n \n * Probably needs search without replace mode\n * Needs a way to limit the scope to certain files.\n-\n-## `CodeAction` Groups\n-\n-**Issue:** https://github.com/microsoft/language-server-protocol/issues/994\n-\n-**Client Capability:** `{ \"codeActionGroup\": boolean }`\n-\n-If this capability is set, `CodeAction` returned from the server contain an additional field, `group`:\n-\n-```typescript\n-interface CodeAction {\n-    title: string;\n-    group?: string;\n-    ...\n-}\n-```\n-\n-All code-actions with the same `group` should be grouped under single (extendable) entry in lightbulb menu.\n-The set of actions `[ { title: \"foo\" }, { group: \"frobnicate\", title: \"bar\" }, { group: \"frobnicate\", title: \"baz\" }]` should be rendered as\n-\n-```\n-\ud83d\udca1\n-  +-------------+\n-  | foo         |\n-  +-------------+-----+\n-  | frobnicate >| bar |\n-  +-------------+-----+\n-                | baz |\n-                +-----+\n-```\n-\n-Alternatively, selecting `frobnicate` could present a user with an additional menu to choose between `bar` and `baz`.\n-\n-### Example\n-\n-```rust\n-fn main() {\n-    let x: Entry/*cursor here*/ = todo!();\n-}\n-```\n-\n-Invoking code action at this position will yield two code actions for importing `Entry` from either `collections::HashMap` or `collection::BTreeMap`, grouped under a single \"import\" group.\n-\n-### Unresolved Questions\n-\n-* Is a fixed two-level structure enough?\n-* Should we devise a general way to encode custom interaction protocols for GUI refactorings?"}]}