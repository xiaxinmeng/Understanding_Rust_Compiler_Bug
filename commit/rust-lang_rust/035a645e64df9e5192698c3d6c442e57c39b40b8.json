{"sha": "035a645e64df9e5192698c3d6c442e57c39b40b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNWE2NDVlNjRkZjllNTE5MjY5OGMzZDZjNDQyZTU3YzM5YjQwYjg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-22T17:23:36Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-26T23:23:28Z"}, "message": "rustc_trans: move the contents of the trans module to top-level.", "tree": {"sha": "0e519e345bfbf043c687170d9e7c4d7319a916eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e519e345bfbf043c687170d9e7c4d7319a916eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/035a645e64df9e5192698c3d6c442e57c39b40b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/035a645e64df9e5192698c3d6c442e57c39b40b8", "html_url": "https://github.com/rust-lang/rust/commit/035a645e64df9e5192698c3d6c442e57c39b40b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/035a645e64df9e5192698c3d6c442e57c39b40b8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98359283a4aaffe21d68bf110017dcb315a10606", "url": "https://api.github.com/repos/rust-lang/rust/commits/98359283a4aaffe21d68bf110017dcb315a10606", "html_url": "https://github.com/rust-lang/rust/commit/98359283a4aaffe21d68bf110017dcb315a10606"}], "stats": {"total": 1092, "additions": 535, "deletions": 557}, "files": [{"sha": "468dc7b12c16255e2cde1739f5f1b3149c04e7b5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -30,7 +30,7 @@ use rustc_metadata::creader::LocalCrateReader;\n use rustc_metadata::cstore::CStore;\n use rustc_trans::back::link;\n use rustc_trans::back::write;\n-use rustc_trans::trans;\n+use rustc_trans as trans;\n use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_plugin::registry::Registry;"}, {"sha": "008323ee5bf31a9c57a7b582cf86c8c991ca63b8", "filename": "src/librustc_trans/_match.rs", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -201,23 +201,23 @@ use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n use middle::pat_util::*;\n use rustc::ty::subst::Substs;\n-use trans::adt;\n-use trans::base::*;\n-use trans::build::{AddCase, And, Br, CondBr, GEPi, InBoundsGEP, Load, PointerCast};\n-use trans::build::{Not, Store, Sub, add_comment};\n-use trans::build;\n-use trans::callee::{Callee, ArgVals};\n-use trans::cleanup::{self, CleanupMethods, DropHintMethods};\n-use trans::common::*;\n-use trans::consts;\n-use trans::datum::*;\n-use trans::debuginfo::{self, DebugLoc, ToDebugLoc};\n-use trans::expr::{self, Dest};\n-use trans::monomorphize;\n-use trans::tvec;\n-use trans::type_of;\n-use trans::Disr;\n-use trans::value::Value;\n+use adt;\n+use base::*;\n+use build::{AddCase, And, Br, CondBr, GEPi, InBoundsGEP, Load, PointerCast};\n+use build::{Not, Store, Sub, add_comment};\n+use build;\n+use callee::{Callee, ArgVals};\n+use cleanup::{self, CleanupMethods, DropHintMethods};\n+use common::*;\n+use consts;\n+use datum::*;\n+use debuginfo::{self, DebugLoc, ToDebugLoc};\n+use expr::{self, Dest};\n+use monomorphize;\n+use tvec;\n+use type_of;\n+use Disr;\n+use value::Value;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::traits::ProjectionMode;\n use session::config::NoDebugInfo;\n@@ -281,7 +281,7 @@ impl<'a, 'tcx> Opt<'a, 'tcx> {\n     }\n \n     fn trans<'blk>(&self, mut bcx: Block<'blk, 'tcx>) -> OptResult<'blk, 'tcx> {\n-        use trans::consts::TrueConst::Yes;\n+        use consts::TrueConst::Yes;\n         let _icx = push_ctxt(\"match::trans_opt\");\n         let ccx = bcx.ccx();\n         match *self {", "previous_filename": "src/librustc_trans/trans/_match.rs"}, {"sha": "dd72322997af88939f9d39dec74423191319c871", "filename": "src/librustc_trans/abi.rs", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -9,22 +9,22 @@\n // except according to those terms.\n \n use llvm::{self, ValueRef};\n-use trans::base;\n-use trans::builder::Builder;\n-use trans::common::{type_is_fat_ptr, BlockAndBuilder};\n-use trans::context::CrateContext;\n-use trans::cabi_x86;\n-use trans::cabi_x86_64;\n-use trans::cabi_x86_win64;\n-use trans::cabi_arm;\n-use trans::cabi_aarch64;\n-use trans::cabi_powerpc;\n-use trans::cabi_powerpc64;\n-use trans::cabi_mips;\n-use trans::cabi_asmjs;\n-use trans::machine::{llalign_of_min, llsize_of, llsize_of_real};\n-use trans::type_::Type;\n-use trans::type_of;\n+use base;\n+use builder::Builder;\n+use common::{type_is_fat_ptr, BlockAndBuilder};\n+use context::CrateContext;\n+use cabi_x86;\n+use cabi_x86_64;\n+use cabi_x86_win64;\n+use cabi_arm;\n+use cabi_aarch64;\n+use cabi_powerpc;\n+use cabi_powerpc64;\n+use cabi_mips;\n+use cabi_asmjs;\n+use machine::{llalign_of_min, llsize_of, llsize_of_real};\n+use type_::Type;\n+use type_of;\n \n use rustc_front::hir;\n use rustc::ty::{self, Ty};", "previous_filename": "src/librustc_trans/trans/abi.rs"}, {"sha": "7c190c2ff71215eabc3e58ad24805ad65b34dfa3", "filename": "src/librustc_trans/adt.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -53,21 +53,21 @@ use rustc::ty::{self, Ty, TyCtxt};\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::IntType;\n-use trans::_match;\n-use trans::abi::FAT_PTR_ADDR;\n-use trans::base::InitAlloca;\n-use trans::build::*;\n-use trans::cleanup;\n-use trans::cleanup::CleanupMethods;\n-use trans::common::*;\n-use trans::datum;\n-use trans::debuginfo::DebugLoc;\n-use trans::glue;\n-use trans::machine;\n-use trans::monomorphize;\n-use trans::type_::Type;\n-use trans::type_of;\n-use trans::value::Value;\n+use _match;\n+use abi::FAT_PTR_ADDR;\n+use base::InitAlloca;\n+use build::*;\n+use cleanup;\n+use cleanup::CleanupMethods;\n+use common::*;\n+use datum;\n+use debuginfo::DebugLoc;\n+use glue;\n+use machine;\n+use monomorphize;\n+use type_::Type;\n+use type_of;\n+use value::Value;\n \n type Hint = attr::ReprAttr;\n ", "previous_filename": "src/librustc_trans/trans/adt.rs"}, {"sha": "41f1f4ae5f8ba9f756e56ceb53ec0c03b4cf6aeb", "filename": "src/librustc_trans/asm.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fasm.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -11,12 +11,12 @@\n //! # Translation of inline assembly.\n \n use llvm::{self, ValueRef};\n-use trans::base;\n-use trans::build::*;\n-use trans::common::*;\n-use trans::datum::{Datum, Lvalue};\n-use trans::type_of;\n-use trans::type_::Type;\n+use base;\n+use build::*;\n+use common::*;\n+use datum::{Datum, Lvalue};\n+use type_of;\n+use type_::Type;\n \n use rustc_front::hir as ast;\n use std::ffi::CString;", "previous_filename": "src/librustc_trans/trans/asm.rs"}, {"sha": "dcf23039e2563d435012b85b9c54d701e154b060", "filename": "src/librustc_trans/assert_dep_graph.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fassert_dep_graph.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "previous_filename": "src/librustc_trans/trans/assert_dep_graph.rs"}, {"sha": "d4930f37dcd5e5c3f06551f9047d05979f173dbf", "filename": "src/librustc_trans/attributes.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -14,7 +14,7 @@ use llvm::{self, ValueRef};\n use session::config::NoDebugInfo;\n pub use syntax::attr::InlineAttr;\n use syntax::ast;\n-use trans::context::CrateContext;\n+use context::CrateContext;\n \n /// Mark LLVM function to use provided inline heuristic.\n #[inline]", "previous_filename": "src/librustc_trans/trans/attributes.rs"}, {"sha": "062f9482c7248f770ffe29ed1be59c0f4a270e33", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -23,7 +23,7 @@ use session::Session;\n use middle::cstore::{self, CrateStore, LinkMeta};\n use middle::cstore::{LinkagePreference, NativeLibraryKind};\n use middle::dependency_format::Linkage;\n-use trans::CrateTranslation;\n+use CrateTranslation;\n use util::common::time;\n use util::fs::fix_windows_verbatim_for_gcc;\n use rustc_back::tempdir::TempDir;"}, {"sha": "29caf93dcd5324ef990082239bfac0b7fae5c2d1", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -22,7 +22,7 @@ use session::Session;\n use session::config::CrateTypeDylib;\n use session::config;\n use syntax::ast;\n-use trans::CrateTranslation;\n+use CrateTranslation;\n \n /// Linker abstraction used by back::link to build up the command to invoke a\n /// linker."}, {"sha": "ee5282e9881b8f4476615d5cd7a0a597e2fc8df3", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -97,7 +97,8 @@\n //! virtually impossible. Thus, symbol hash generation exclusively relies on\n //! DefPaths which are much more robust in the face of changes to the code base.\n \n-use trans::{CrateContext, Instance, gensym_name};\n+use common::{CrateContext, gensym_name};\n+use monomorphize::Instance;\n use util::sha2::{Digest, Sha256};\n \n use rustc::middle::cstore;"}, {"sha": "2de650a59beda0470db3343381094aeb35c42316", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -16,7 +16,7 @@ use session::config::{self, OutputType};\n use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef, ContextRef};\n use llvm::SMDiagnosticRef;\n-use trans::{CrateTranslation, ModuleTranslation};\n+use {CrateTranslation, ModuleTranslation};\n use util::common::time;\n use util::common::path2cstr;\n use syntax::codemap;"}, {"sha": "5f9997ffbb8cf9846c31d07a9d8f9bec109704e7", "filename": "src/librustc_trans/base.rs", "status": "renamed", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -51,46 +51,46 @@ use rustc::util::common::time;\n use rustc::mir::mir_map::MirMap;\n use session::config::{self, NoDebugInfo, FullDebugInfo};\n use session::Session;\n-use trans::_match;\n-use trans::abi::{self, Abi, FnType};\n-use trans::adt;\n-use trans::assert_dep_graph;\n-use trans::attributes;\n-use trans::build::*;\n-use trans::builder::{Builder, noname};\n-use trans::callee::{Callee, CallArgs, ArgExprs, ArgVals};\n-use trans::cleanup::{self, CleanupMethods, DropHint};\n-use trans::closure;\n-use trans::common::{Block, C_bool, C_bytes_in_context, C_i32, C_int, C_uint, C_integral};\n-use trans::collector::{self, TransItem, TransItemState, TransItemCollectionMode};\n-use trans::common::{C_null, C_struct_in_context, C_u64, C_u8, C_undef};\n-use trans::common::{CrateContext, DropFlagHintsMap, Field, FunctionContext};\n-use trans::common::{Result, NodeIdAndSpan, VariantInfo};\n-use trans::common::{node_id_type, fulfill_obligation};\n-use trans::common::{type_is_immediate, type_is_zero_size, val_ty};\n-use trans::common;\n-use trans::consts;\n-use trans::context::SharedCrateContext;\n-use trans::controlflow;\n-use trans::datum;\n-use trans::debuginfo::{self, DebugLoc, ToDebugLoc};\n-use trans::declare;\n-use trans::expr;\n-use trans::glue;\n-use trans::inline;\n-use trans::intrinsic;\n-use trans::machine;\n-use trans::machine::{llalign_of_min, llsize_of, llsize_of_real};\n-use trans::meth;\n-use trans::mir;\n-use trans::monomorphize::{self, Instance};\n-use trans::symbol_names_test;\n-use trans::tvec;\n-use trans::type_::Type;\n-use trans::type_of;\n-use trans::type_of::*;\n-use trans::value::Value;\n-use trans::Disr;\n+use _match;\n+use abi::{self, Abi, FnType};\n+use adt;\n+use assert_dep_graph;\n+use attributes;\n+use build::*;\n+use builder::{Builder, noname};\n+use callee::{Callee, CallArgs, ArgExprs, ArgVals};\n+use cleanup::{self, CleanupMethods, DropHint};\n+use closure;\n+use common::{Block, C_bool, C_bytes_in_context, C_i32, C_int, C_uint, C_integral};\n+use collector::{self, TransItem, TransItemState, TransItemCollectionMode};\n+use common::{C_null, C_struct_in_context, C_u64, C_u8, C_undef};\n+use common::{CrateContext, DropFlagHintsMap, Field, FunctionContext};\n+use common::{Result, NodeIdAndSpan, VariantInfo};\n+use common::{node_id_type, fulfill_obligation};\n+use common::{type_is_immediate, type_is_zero_size, val_ty};\n+use common;\n+use consts;\n+use context::SharedCrateContext;\n+use controlflow;\n+use datum;\n+use debuginfo::{self, DebugLoc, ToDebugLoc};\n+use declare;\n+use expr;\n+use glue;\n+use inline;\n+use intrinsic;\n+use machine;\n+use machine::{llalign_of_min, llsize_of, llsize_of_real};\n+use meth;\n+use mir;\n+use monomorphize::{self, Instance};\n+use symbol_names_test;\n+use tvec;\n+use type_::Type;\n+use type_of;\n+use type_of::*;\n+use value::Value;\n+use Disr;\n use util::common::indenter;\n use util::sha2::Sha256;\n use util::nodemap::{NodeMap, NodeSet};", "previous_filename": "src/librustc_trans/trans/base.rs"}, {"sha": "919ea49b392c6192804b531b2d236db5310e79b9", "filename": "src/librustc_trans/basic_block.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbasic_block.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -10,7 +10,7 @@\n \n use llvm;\n use llvm::BasicBlockRef;\n-use trans::value::{Users, Value};\n+use value::{Users, Value};\n use std::iter::{Filter, Map};\n \n #[derive(Copy, Clone)]", "previous_filename": "src/librustc_trans/trans/basic_block.rs"}, {"sha": "0ce7fdb8b6d1d9193c6537ffc669e555f56d529b", "filename": "src/librustc_trans/build.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuild.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -15,13 +15,13 @@ use llvm;\n use llvm::{AtomicBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n use llvm::{Opcode, IntPredicate, RealPredicate};\n use llvm::{ValueRef, BasicBlockRef};\n-use trans::common::*;\n+use common::*;\n use syntax::codemap::Span;\n \n-use trans::builder::Builder;\n-use trans::type_::Type;\n-use trans::value::Value;\n-use trans::debuginfo::DebugLoc;\n+use builder::Builder;\n+use type_::Type;\n+use value::Value;\n+use debuginfo::DebugLoc;\n \n use libc::{c_uint, c_char};\n ", "previous_filename": "src/librustc_trans/trans/build.rs"}, {"sha": "55f65d29bfd6d2d4e042c72c0662d4dd972deeb0", "filename": "src/librustc_trans/builder.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -14,11 +14,11 @@ use llvm;\n use llvm::{AtomicBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n use llvm::{Opcode, IntPredicate, RealPredicate, False, OperandBundleDef};\n use llvm::{ValueRef, BasicBlockRef, BuilderRef, ModuleRef};\n-use trans::base;\n-use trans::common::*;\n-use trans::machine::llalign_of_pref;\n-use trans::type_::Type;\n-use trans::value::Value;\n+use base;\n+use common::*;\n+use machine::llalign_of_pref;\n+use type_::Type;\n+use value::Value;\n use util::nodemap::FnvHashMap;\n use libc::{c_uint, c_char};\n ", "previous_filename": "src/librustc_trans/trans/builder.rs"}, {"sha": "b2929d118a6affa6cdc2dfd63a28331729a871d1", "filename": "src/librustc_trans/cabi_aarch64.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_aarch64.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -11,9 +11,9 @@\n #![allow(non_upper_case_globals)]\n \n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use trans::abi::{FnType, ArgType};\n-use trans::context::CrateContext;\n-use trans::type_::Type;\n+use abi::{FnType, ArgType};\n+use context::CrateContext;\n+use type_::Type;\n \n use std::cmp;\n ", "previous_filename": "src/librustc_trans/trans/cabi_aarch64.rs"}, {"sha": "5dbcf1ef86ea5bf45ebf373c332410fa3a1479ab", "filename": "src/librustc_trans/cabi_arm.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_arm.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -11,9 +11,9 @@\n #![allow(non_upper_case_globals)]\n \n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use trans::abi::{FnType, ArgType};\n-use trans::context::CrateContext;\n-use trans::type_::Type;\n+use abi::{FnType, ArgType};\n+use context::CrateContext;\n+use type_::Type;\n \n use std::cmp;\n ", "previous_filename": "src/librustc_trans/trans/cabi_arm.rs"}, {"sha": "3cbc378ab021619d9939395f53d928c719ae248a", "filename": "src/librustc_trans/cabi_asmjs.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_asmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_asmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_asmjs.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -11,8 +11,8 @@\n #![allow(non_upper_case_globals)]\n \n use llvm::{Struct, Array, Attribute};\n-use trans::abi::{FnType, ArgType};\n-use trans::context::CrateContext;\n+use abi::{FnType, ArgType};\n+use context::CrateContext;\n \n // Data layout: e-p:32:32-i64:64-v128:32:128-n32-S128\n ", "previous_filename": "src/librustc_trans/trans/cabi_asmjs.rs"}, {"sha": "d0fce01ce73a9129e885f794499053897fff0943", "filename": "src/librustc_trans/cabi_mips.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_mips.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -14,9 +14,9 @@ use libc::c_uint;\n use std::cmp;\n use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use trans::abi::{ArgType, FnType};\n-use trans::context::CrateContext;\n-use trans::type_::Type;\n+use abi::{ArgType, FnType};\n+use context::CrateContext;\n+use type_::Type;\n \n fn align_up_to(off: usize, a: usize) -> usize {\n     return (off + a - 1) / a * a;", "previous_filename": "src/librustc_trans/trans/cabi_mips.rs"}, {"sha": "c9751aa25c1e2c5cb7ad02e3a555d57a0c26760b", "filename": "src/librustc_trans/cabi_powerpc.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_powerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_powerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_powerpc.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -11,9 +11,9 @@\n use libc::c_uint;\n use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n-use trans::abi::{FnType, ArgType};\n-use trans::context::CrateContext;\n-use trans::type_::Type;\n+use abi::{FnType, ArgType};\n+use context::CrateContext;\n+use type_::Type;\n \n use std::cmp;\n ", "previous_filename": "src/librustc_trans/trans/cabi_powerpc.rs"}, {"sha": "7e7033b4686e056ac669d95c724107a95c7fad97", "filename": "src/librustc_trans/cabi_powerpc64.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_powerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_powerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_powerpc64.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -16,9 +16,9 @@\n // need to be fixed when PowerPC vector support is added.\n \n use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n-use trans::abi::{FnType, ArgType};\n-use trans::context::CrateContext;\n-use trans::type_::Type;\n+use abi::{FnType, ArgType};\n+use context::CrateContext;\n+use type_::Type;\n \n use std::cmp;\n ", "previous_filename": "src/librustc_trans/trans/cabi_powerpc64.rs"}, {"sha": "415579eb221dda071cd0c7e49e563e6c10700b43", "filename": "src/librustc_trans/cabi_x86.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use llvm::*;\n-use trans::abi::FnType;\n-use trans::type_::Type;\n+use abi::FnType;\n+use type_::Type;\n use super::common::*;\n use super::machine::*;\n ", "previous_filename": "src/librustc_trans/trans/cabi_x86.rs"}, {"sha": "a08d9fb5b40954c03109b1a40c9af0e1c414d95b", "filename": "src/librustc_trans/cabi_x86_64.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_64.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -16,9 +16,9 @@ use self::RegClass::*;\n \n use llvm::{Integer, Pointer, Float, Double};\n use llvm::{Struct, Array, Attribute, Vector};\n-use trans::abi::{ArgType, FnType};\n-use trans::context::CrateContext;\n-use trans::type_::Type;\n+use abi::{ArgType, FnType};\n+use context::CrateContext;\n+use type_::Type;\n \n use std::cmp;\n ", "previous_filename": "src/librustc_trans/trans/cabi_x86_64.rs"}, {"sha": "a5077f68fb58c22f4419909d260301c58e7e4ec2", "filename": "src/librustc_trans/cabi_x86_win64.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_x86_win64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcabi_x86_win64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_win64.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -11,8 +11,8 @@\n use llvm::*;\n use super::common::*;\n use super::machine::*;\n-use trans::abi::{ArgType, FnType};\n-use trans::type_::Type;\n+use abi::{ArgType, FnType};\n+use type_::Type;\n \n // Win64 ABI: http://msdn.microsoft.com/en-us/library/zthk2dkh.aspx\n ", "previous_filename": "src/librustc_trans/trans/cabi_x86_win64.rs"}, {"sha": "d3c2a89537942bf0c208b021f6a73b9d5927c0de", "filename": "src/librustc_trans/callee.rs", "status": "renamed", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -27,32 +27,32 @@ use rustc::ty::subst;\n use rustc::ty::subst::{Substs};\n use rustc::traits;\n use rustc::front::map as hir_map;\n-use trans::abi::{Abi, FnType};\n-use trans::adt;\n-use trans::attributes;\n-use trans::base;\n-use trans::base::*;\n-use trans::build::*;\n-use trans::cleanup;\n-use trans::cleanup::CleanupMethods;\n-use trans::closure;\n-use trans::common::{self, Block, Result, CrateContext, FunctionContext};\n-use trans::common::{C_uint, C_undef};\n-use trans::consts;\n-use trans::datum::*;\n-use trans::debuginfo::DebugLoc;\n-use trans::declare;\n-use trans::expr;\n-use trans::glue;\n-use trans::inline;\n-use trans::intrinsic;\n-use trans::machine::{llalign_of_min, llsize_of_store};\n-use trans::meth;\n-use trans::monomorphize::{self, Instance};\n-use trans::type_::Type;\n-use trans::type_of;\n-use trans::value::Value;\n-use trans::Disr;\n+use abi::{Abi, FnType};\n+use adt;\n+use attributes;\n+use base;\n+use base::*;\n+use build::*;\n+use cleanup;\n+use cleanup::CleanupMethods;\n+use closure;\n+use common::{self, Block, Result, CrateContext, FunctionContext};\n+use common::{C_uint, C_undef};\n+use consts;\n+use datum::*;\n+use debuginfo::DebugLoc;\n+use declare;\n+use expr;\n+use glue;\n+use inline;\n+use intrinsic;\n+use machine::{llalign_of_min, llsize_of_store};\n+use meth;\n+use monomorphize::{self, Instance};\n+use type_::Type;\n+use type_of;\n+use value::Value;\n+use Disr;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_front::hir;\n ", "previous_filename": "src/librustc_trans/trans/callee.rs"}, {"sha": "3a8dc144f9c7e4bbf79d2af32ded645662b13e8b", "filename": "src/librustc_trans/cleanup.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -120,16 +120,16 @@ pub use self::EarlyExitLabel::*;\n pub use self::Heap::*;\n \n use llvm::{BasicBlockRef, ValueRef};\n-use trans::base;\n-use trans::build;\n-use trans::common;\n-use trans::common::{Block, FunctionContext, NodeIdAndSpan, LandingPad};\n-use trans::datum::{Datum, Lvalue};\n-use trans::debuginfo::{DebugLoc, ToDebugLoc};\n-use trans::glue;\n+use base;\n+use build;\n+use common;\n+use common::{Block, FunctionContext, NodeIdAndSpan, LandingPad};\n+use datum::{Datum, Lvalue};\n+use debuginfo::{DebugLoc, ToDebugLoc};\n+use glue;\n use middle::region;\n-use trans::type_::Type;\n-use trans::value::Value;\n+use type_::Type;\n+use value::Value;\n use rustc::ty::{Ty, TyCtxt};\n \n use std::fmt;", "previous_filename": "src/librustc_trans/trans/cleanup.rs"}, {"sha": "44b4f25608291223c4d3383262d844a19107d5d0", "filename": "src/librustc_trans/closure.rs", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -14,22 +14,22 @@ use llvm::{ValueRef, get_param, get_params};\n use middle::def_id::DefId;\n use rustc::infer;\n use rustc::traits::ProjectionMode;\n-use trans::abi::{Abi, FnType};\n-use trans::adt;\n-use trans::attributes;\n-use trans::base::*;\n-use trans::build::*;\n-use trans::callee::{self, ArgVals, Callee};\n-use trans::cleanup::{CleanupMethods, CustomScope, ScopeId};\n-use trans::common::*;\n-use trans::datum::{ByRef, Datum, lvalue_scratch_datum};\n-use trans::datum::{rvalue_scratch_datum, Rvalue};\n-use trans::debuginfo::{self, DebugLoc};\n-use trans::declare;\n-use trans::expr;\n-use trans::monomorphize::{Instance};\n-use trans::value::Value;\n-use trans::Disr;\n+use abi::{Abi, FnType};\n+use adt;\n+use attributes;\n+use base::*;\n+use build::*;\n+use callee::{self, ArgVals, Callee};\n+use cleanup::{CleanupMethods, CustomScope, ScopeId};\n+use common::*;\n+use datum::{ByRef, Datum, lvalue_scratch_datum};\n+use datum::{rvalue_scratch_datum, Rvalue};\n+use debuginfo::{self, DebugLoc};\n+use declare;\n+use expr;\n+use monomorphize::{Instance};\n+use value::Value;\n+use Disr;\n use rustc::ty::{self, Ty, TyCtxt};\n use session::config::FullDebugInfo;\n ", "previous_filename": "src/librustc_trans/trans/closure.rs"}, {"sha": "7c5f784216a9c6f8851a392007d9098a7b74ecae", "filename": "src/librustc_trans/collector.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -207,13 +207,13 @@ use syntax::codemap::DUMMY_SP;\n use syntax::errors;\n use syntax::parse::token;\n \n-use trans::base::custom_coerce_unsize_info;\n-use trans::context::CrateContext;\n-use trans::common::{fulfill_obligation, normalize_and_test_predicates,\n+use base::custom_coerce_unsize_info;\n+use context::CrateContext;\n+use common::{fulfill_obligation, normalize_and_test_predicates,\n                     type_is_sized};\n-use trans::glue;\n-use trans::meth;\n-use trans::monomorphize::{self, Instance};\n+use glue;\n+use meth;\n+use monomorphize::{self, Instance};\n use util::nodemap::{FnvHashSet, FnvHashMap, DefIdMap};\n \n use std::hash::{Hash, Hasher};\n@@ -1202,7 +1202,7 @@ pub fn push_unique_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 output.push_str(\"unsafe \");\n             }\n \n-            if abi != ::trans::abi::Abi::Rust {\n+            if abi != ::abi::Abi::Rust {\n                 output.push_str(\"extern \\\"\");\n                 output.push_str(abi.name());\n                 output.push_str(\"\\\" \");", "previous_filename": "src/librustc_trans/trans/collector.rs"}, {"sha": "c5d54e30f13fa2727e16fb966bfdc18bcff7bf1b", "filename": "src/librustc_trans/common.rs", "status": "renamed", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -22,21 +22,21 @@ use middle::def_id::DefId;\n use rustc::infer;\n use middle::lang_items::LangItem;\n use rustc::ty::subst::Substs;\n-use trans::abi::{Abi, FnType};\n-use trans::base;\n-use trans::build;\n-use trans::builder::Builder;\n-use trans::callee::Callee;\n-use trans::cleanup;\n-use trans::consts;\n-use trans::datum;\n-use trans::debuginfo::{self, DebugLoc};\n-use trans::declare;\n-use trans::machine;\n-use trans::mir::CachedMir;\n-use trans::monomorphize;\n-use trans::type_::Type;\n-use trans::value::Value;\n+use abi::{Abi, FnType};\n+use base;\n+use build;\n+use builder::Builder;\n+use callee::Callee;\n+use cleanup;\n+use consts;\n+use datum;\n+use debuginfo::{self, DebugLoc};\n+use declare;\n+use machine;\n+use mir::CachedMir;\n+use monomorphize;\n+use type_::Type;\n+use value::Value;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::traits::{self, SelectionContext, ProjectionMode};\n use rustc::ty::fold::{TypeFolder, TypeFoldable};\n@@ -54,7 +54,7 @@ use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n \n-pub use trans::context::CrateContext;\n+pub use context::CrateContext;\n \n /// Is the type's representation size known at compile time?\n pub fn type_is_sized<'tcx>(tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n@@ -75,8 +75,8 @@ pub fn type_is_fat_ptr<'tcx>(cx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n pub fn type_is_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    use trans::machine::llsize_of_alloc;\n-    use trans::type_of::sizing_type_of;\n+    use machine::llsize_of_alloc;\n+    use type_of::sizing_type_of;\n \n     let tcx = ccx.tcx();\n     let simple = ty.is_scalar() ||\n@@ -100,8 +100,8 @@ pub fn type_is_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -\n \n /// Identify types which have size zero at runtime.\n pub fn type_is_zero_size<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    use trans::machine::llsize_of_alloc;\n-    use trans::type_of::sizing_type_of;\n+    use machine::llsize_of_alloc;\n+    use type_of::sizing_type_of;\n     let llty = sizing_type_of(ccx, ty);\n     llsize_of_alloc(ccx, llty) == 0\n }\n@@ -141,7 +141,7 @@ pub fn gensym_name(name: &str) -> ast::Name {\n *\n */\n \n-use trans::Disr;\n+use Disr;\n \n #[derive(Copy, Clone)]\n pub struct NodeIdAndSpan {\n@@ -491,7 +491,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n     // Returns a ValueRef of the \"eh_unwind_resume\" lang item if one is defined,\n     // otherwise declares it as an external function.\n     pub fn eh_unwind_resume(&self) -> Callee<'tcx> {\n-        use trans::attributes;\n+        use attributes;\n         let ccx = self.ccx;\n         let tcx = ccx.tcx();\n         assert!(ccx.sess().target.target.options.custom_unwind_resume);", "previous_filename": "src/librustc_trans/trans/common.rs"}, {"sha": "8302fc0158c6af96ca31c230e65b337c3d660dc6", "filename": "src/librustc_trans/consts.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -17,21 +17,21 @@ use middle::const_eval::{self, ConstEvalErr};\n use middle::def::Def;\n use middle::def_id::DefId;\n use rustc::front::map as hir_map;\n-use trans::{abi, adt, closure, debuginfo, expr, machine};\n-use trans::base::{self, exported_name, imported_name, push_ctxt};\n-use trans::callee::Callee;\n-use trans::collector::{self, TransItem};\n-use trans::common::{type_is_sized, C_nil, const_get_elt};\n-use trans::common::{CrateContext, C_integral, C_floating, C_bool, C_str_slice, C_bytes, val_ty};\n-use trans::common::{C_struct, C_undef, const_to_opt_int, const_to_opt_uint, VariantInfo, C_uint};\n-use trans::common::{type_is_fat_ptr, Field, C_vector, C_array, C_null};\n-use trans::datum::{Datum, Lvalue};\n-use trans::declare;\n-use trans::monomorphize::{self, Instance};\n-use trans::type_::Type;\n-use trans::type_of;\n-use trans::value::Value;\n-use trans::Disr;\n+use {abi, adt, closure, debuginfo, expr, machine};\n+use base::{self, exported_name, imported_name, push_ctxt};\n+use callee::Callee;\n+use collector::{self, TransItem};\n+use common::{type_is_sized, C_nil, const_get_elt};\n+use common::{CrateContext, C_integral, C_floating, C_bool, C_str_slice, C_bytes, val_ty};\n+use common::{C_struct, C_undef, const_to_opt_int, const_to_opt_uint, VariantInfo, C_uint};\n+use common::{type_is_fat_ptr, Field, C_vector, C_array, C_null};\n+use datum::{Datum, Lvalue};\n+use declare;\n+use monomorphize::{self, Instance};\n+use type_::Type;\n+use type_of;\n+use value::Value;\n+use Disr;\n use rustc::ty::subst::Substs;\n use rustc::ty::adjustment::{AdjustDerefRef, AdjustReifyFnPointer};\n use rustc::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};", "previous_filename": "src/librustc_trans/trans/consts.rs"}, {"sha": "dcf96cfa814805b2aab2b25f14f0c5f698633def", "filename": "src/librustc_trans/context.rs", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -17,18 +17,18 @@ use middle::def_id::DefId;\n use rustc::traits;\n use rustc::mir::mir_map::MirMap;\n use rustc::mir::repr as mir;\n-use trans::adt;\n-use trans::base;\n-use trans::builder::Builder;\n-use trans::common::BuilderRef_res;\n-use trans::debuginfo;\n-use trans::declare;\n-use trans::glue::DropGlueKind;\n-use trans::mir::CachedMir;\n-use trans::Instance;\n-\n-use trans::collector::{TransItem, TransItemState};\n-use trans::type_::{Type, TypeNames};\n+use adt;\n+use base;\n+use builder::Builder;\n+use common::BuilderRef_res;\n+use debuginfo;\n+use declare;\n+use glue::DropGlueKind;\n+use mir::CachedMir;\n+use monomorphize::Instance;\n+\n+use collector::{TransItem, TransItemState};\n+use type_::{Type, TypeNames};\n use rustc::ty::subst::{Substs, VecPerParamSpace};\n use rustc::ty::{self, Ty, TyCtxt};\n use session::config::NoDebugInfo;", "previous_filename": "src/librustc_trans/trans/context.rs"}, {"sha": "04562087af7b79a08013bef9b729cae416469f9e", "filename": "src/librustc_trans/controlflow.rs", "status": "renamed", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontrolflow.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -12,19 +12,18 @@ use llvm::ValueRef;\n use middle::def::Def;\n use middle::lang_items::{PanicFnLangItem, PanicBoundsCheckFnLangItem};\n use rustc::ty::subst::Substs;\n-use trans::base::*;\n-use trans::basic_block::BasicBlock;\n-use trans::build::*;\n-use trans::callee::{Callee, ArgVals};\n-use trans::cleanup::CleanupMethods;\n-use trans::cleanup;\n-use trans::common::*;\n-use trans::consts;\n-use trans::debuginfo;\n-use trans::debuginfo::{DebugLoc, ToDebugLoc};\n-use trans::expr;\n-use trans::machine;\n-use trans;\n+use base::*;\n+use basic_block::BasicBlock;\n+use build::*;\n+use callee::{Callee, ArgVals};\n+use cleanup::CleanupMethods;\n+use cleanup;\n+use common::*;\n+use consts;\n+use debuginfo;\n+use debuginfo::{DebugLoc, ToDebugLoc};\n+use expr;\n+use machine;\n \n use rustc_front::hir;\n use rustc_front::util as ast_util;\n@@ -169,11 +168,11 @@ pub fn trans_if<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         if cv == 1 {\n             // if true { .. } [else { .. }]\n             bcx = trans_block(bcx, &thn, dest);\n-            trans::debuginfo::clear_source_location(bcx.fcx);\n+            debuginfo::clear_source_location(bcx.fcx);\n         } else {\n             if let Some(elexpr) = els {\n                 bcx = expr::trans_into(bcx, &elexpr, dest);\n-                trans::debuginfo::clear_source_location(bcx.fcx);\n+                debuginfo::clear_source_location(bcx.fcx);\n             }\n         }\n \n@@ -183,7 +182,7 @@ pub fn trans_if<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let name = format!(\"then-block-{}-\", thn.id);\n     let then_bcx_in = bcx.fcx.new_id_block(&name[..], thn.id);\n     let then_bcx_out = trans_block(then_bcx_in, &thn, dest);\n-    trans::debuginfo::clear_source_location(bcx.fcx);\n+    debuginfo::clear_source_location(bcx.fcx);\n \n     let cond_source_loc = cond.debug_loc();\n \n@@ -206,7 +205,7 @@ pub fn trans_if<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     // Clear the source location because it is still set to whatever has been translated\n     // right before.\n-    trans::debuginfo::clear_source_location(next_bcx.fcx);\n+    debuginfo::clear_source_location(next_bcx.fcx);\n \n     next_bcx\n }", "previous_filename": "src/librustc_trans/trans/controlflow.rs"}, {"sha": "6f96b5769bfe31cc6cd455821c538ddb6a6d1f1e", "filename": "src/librustc_trans/datum.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdatum.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -93,15 +93,15 @@ pub use self::Expr::*;\n pub use self::RvalueMode::*;\n \n use llvm::ValueRef;\n-use trans::adt;\n-use trans::base::*;\n-use trans::build::{Load, Store};\n-use trans::common::*;\n-use trans::cleanup;\n-use trans::cleanup::{CleanupMethods, DropHintDatum, DropHintMethods};\n-use trans::expr;\n-use trans::tvec;\n-use trans::value::Value;\n+use adt;\n+use base::*;\n+use build::{Load, Store};\n+use common::*;\n+use cleanup;\n+use cleanup::{CleanupMethods, DropHintDatum, DropHintMethods};\n+use expr;\n+use tvec;\n+use value::Value;\n use rustc::ty::Ty;\n \n use std::fmt;", "previous_filename": "src/librustc_trans/trans/datum.rs"}, {"sha": "20e8a3fb0cfecef6a1cc0b6ef6c4a6d9cdc2f624", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -13,7 +13,7 @@ use super::utils::DIB;\n \n use llvm;\n use llvm::debuginfo::{DIScope, DISubprogram};\n-use trans::common::CrateContext;\n+use common::CrateContext;\n use middle::pat_util;\n use rustc::util::nodemap::NodeMap;\n ", "previous_filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs"}, {"sha": "bcf5eb99200766c3b758e1154cb57ed705e75bcf", "filename": "src/librustc_trans/debuginfo/doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fdoc.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "previous_filename": "src/librustc_trans/trans/debuginfo/doc.rs"}, {"sha": "5612f3d1e90d792e52d0c4d99a29976fbdf357dd", "filename": "src/librustc_trans/debuginfo/gdb.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -12,9 +12,9 @@\n \n use llvm;\n \n-use trans::common::{C_bytes, CrateContext, C_i32};\n-use trans::declare;\n-use trans::type_::Type;\n+use common::{C_bytes, CrateContext, C_i32};\n+use declare;\n+use type_::Type;\n use session::config::NoDebugInfo;\n \n use std::ffi::CString;", "previous_filename": "src/librustc_trans/trans/debuginfo/gdb.rs"}, {"sha": "af7ccdb6cf51e15c7f87fb27cbe461b5e95c8a0a", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -29,10 +29,10 @@ use middle::pat_util;\n use rustc::ty::subst;\n use rustc::front::map as hir_map;\n use rustc_front::hir::{self, PatKind};\n-use trans::{type_of, adt, machine, monomorphize};\n-use trans::common::{self, CrateContext, FunctionContext, Block};\n-use trans::_match::{BindingInfo, TransBindingMode};\n-use trans::type_::Type;\n+use {type_of, adt, machine, monomorphize};\n+use common::{self, CrateContext, FunctionContext, Block};\n+use _match::{BindingInfo, TransBindingMode};\n+use type_::Type;\n use rustc::ty::{self, Ty};\n use session::config::{self, FullDebugInfo};\n use util::nodemap::FnvHashMap;", "previous_filename": "src/librustc_trans/trans/debuginfo/metadata.rs"}, {"sha": "66e33698389ae2fddd281c598003d73f4ef3f73f", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -32,10 +32,9 @@ use rustc::ty::subst::{self, Substs};\n use rustc_front;\n use rustc_front::hir;\n \n-use trans::abi::Abi;\n-use trans::common::{NodeIdAndSpan, CrateContext, FunctionContext, Block};\n-use trans;\n-use trans::monomorphize;\n+use abi::Abi;\n+use common::{NodeIdAndSpan, CrateContext, FunctionContext, Block};\n+use monomorphize;\n use rustc::infer;\n use rustc::ty::{self, Ty};\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n@@ -632,7 +631,7 @@ fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     debug_loc,\n                     bcx.llbb);\n \n-                llvm::LLVMSetInstDebugLocation(trans::build::B(bcx).llbuilder, instr);\n+                llvm::LLVMSetInstDebugLocation(::build::B(bcx).llbuilder, instr);\n             }\n         }\n     }", "previous_filename": "src/librustc_trans/trans/debuginfo/mod.rs"}, {"sha": "552188ae2a6eb12fa5163dd3541335ceaf6e6ddf", "filename": "src/librustc_trans/debuginfo/namespace.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -16,7 +16,7 @@ use llvm;\n use llvm::debuginfo::DIScope;\n use rustc::middle::def_id::DefId;\n use rustc::front::map as hir_map;\n-use trans::common::CrateContext;\n+use common::CrateContext;\n \n use std::ffi::CString;\n use std::ptr;", "previous_filename": "src/librustc_trans/trans/debuginfo/namespace.rs"}, {"sha": "2879da7d03b81981d364a3c26c56d28b9011e369", "filename": "src/librustc_trans/debuginfo/source_loc.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -16,7 +16,7 @@ use super::{FunctionDebugContext, DebugLoc};\n \n use llvm;\n use llvm::debuginfo::DIScope;\n-use trans::common::{NodeIdAndSpan, CrateContext, FunctionContext};\n+use common::{NodeIdAndSpan, CrateContext, FunctionContext};\n \n use libc::c_uint;\n use std::ptr;", "previous_filename": "src/librustc_trans/trans/debuginfo/source_loc.rs"}, {"sha": "71dd3e432df0d4c4ac6e699d9bf226051f8daddc", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -12,7 +12,7 @@\n \n use super::namespace::crate_root_namespace;\n \n-use trans::common::CrateContext;\n+use common::CrateContext;\n use middle::def_id::DefId;\n use rustc::infer;\n use rustc::ty::subst;\n@@ -107,7 +107,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 output.push_str(\"unsafe \");\n             }\n \n-            if abi != ::trans::abi::Abi::Rust {\n+            if abi != ::abi::Abi::Rust {\n                 output.push_str(\"extern \\\"\");\n                 output.push_str(abi.name());\n                 output.push_str(\"\\\" \");", "previous_filename": "src/librustc_trans/trans/debuginfo/type_names.rs"}, {"sha": "d2ae74569e711d3f544f90d619c6ca089820edc5", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -17,9 +17,9 @@ use middle::def_id::DefId;\n \n use llvm;\n use llvm::debuginfo::{DIScope, DIBuilderRef, DIDescriptor, DIArray};\n-use trans::machine;\n-use trans::common::{CrateContext, FunctionContext};\n-use trans::type_::Type;\n+use machine;\n+use common::{CrateContext, FunctionContext};\n+use type_::Type;\n \n use syntax::codemap::Span;\n use syntax::{ast, codemap};", "previous_filename": "src/librustc_trans/trans/debuginfo/utils.rs"}, {"sha": "28a70fd5e0bdef918960f2e4b701d8b52de60539", "filename": "src/librustc_trans/declare.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -22,10 +22,10 @@\n use llvm::{self, ValueRef};\n use rustc::ty;\n use rustc::infer;\n-use trans::abi::{Abi, FnType};\n-use trans::attributes;\n-use trans::context::CrateContext;\n-use trans::type_::Type;\n+use abi::{Abi, FnType};\n+use attributes;\n+use context::CrateContext;\n+use type_::Type;\n \n use std::ffi::CString;\n use libc::c_uint;", "previous_filename": "src/librustc_trans/trans/declare.rs"}, {"sha": "fc79fa813aa5ad8e3080c64704ef841a83a8ff38", "filename": "src/librustc_trans/disr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdisr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fdisr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdisr.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "previous_filename": "src/librustc_trans/trans/disr.rs"}, {"sha": "b2e2e93a2be4c2147bb21ddc918f992663f80f44", "filename": "src/librustc_trans/expr.rs", "status": "renamed", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fexpr.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -55,30 +55,30 @@ use llvm::{self, ValueRef, TypeKind};\n use middle::const_qualif::ConstQualif;\n use middle::def::Def;\n use rustc::ty::subst::Substs;\n-use trans::{_match, abi, adt, asm, base, closure, consts, controlflow};\n-use trans::base::*;\n-use trans::build::*;\n-use trans::callee::{Callee, ArgExprs, ArgOverloadedCall, ArgOverloadedOp};\n-use trans::cleanup::{self, CleanupMethods, DropHintMethods};\n-use trans::common::*;\n-use trans::datum::*;\n-use trans::debuginfo::{self, DebugLoc, ToDebugLoc};\n-use trans::declare;\n-use trans::glue;\n-use trans::machine;\n-use trans::tvec;\n-use trans::type_of;\n-use trans::value::Value;\n-use trans::Disr;\n+use {_match, abi, adt, asm, base, closure, consts, controlflow};\n+use base::*;\n+use build::*;\n+use callee::{Callee, ArgExprs, ArgOverloadedCall, ArgOverloadedOp};\n+use cleanup::{self, CleanupMethods, DropHintMethods};\n+use common::*;\n+use datum::*;\n+use debuginfo::{self, DebugLoc, ToDebugLoc};\n+use declare;\n+use glue;\n+use machine;\n+use tvec;\n+use type_of;\n+use value::Value;\n+use Disr;\n use rustc::ty::adjustment::{AdjustDerefRef, AdjustReifyFnPointer};\n use rustc::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::MethodCall;\n use rustc::ty::cast::{CastKind, CastTy};\n use util::common::indenter;\n-use trans::machine::{llsize_of, llsize_of_alloc};\n-use trans::type_::Type;\n+use machine::{llsize_of, llsize_of_alloc};\n+use type_::Type;\n \n use rustc_front;\n use rustc_front::hir;", "previous_filename": "src/librustc_trans/trans/expr.rs"}, {"sha": "1af816845b0b5cb0764e43c7b5f3d0285581fff0", "filename": "src/librustc_trans/glue.rs", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -21,24 +21,24 @@ use middle::lang_items::ExchangeFreeFnLangItem;\n use rustc::ty::subst::{Substs};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n-use trans::abi::{Abi, FnType};\n-use trans::adt;\n-use trans::adt::GetDtorType; // for tcx.dtor_type()\n-use trans::base::*;\n-use trans::build::*;\n-use trans::callee::{Callee, ArgVals};\n-use trans::cleanup;\n-use trans::cleanup::CleanupMethods;\n-use trans::collector::{self, TransItem};\n-use trans::common::*;\n-use trans::debuginfo::DebugLoc;\n-use trans::declare;\n-use trans::expr;\n-use trans::machine::*;\n-use trans::monomorphize;\n-use trans::type_of::{type_of, sizing_type_of, align_of};\n-use trans::type_::Type;\n-use trans::value::Value;\n+use abi::{Abi, FnType};\n+use adt;\n+use adt::GetDtorType; // for tcx.dtor_type()\n+use base::*;\n+use build::*;\n+use callee::{Callee, ArgVals};\n+use cleanup;\n+use cleanup::CleanupMethods;\n+use collector::{self, TransItem};\n+use common::*;\n+use debuginfo::DebugLoc;\n+use declare;\n+use expr;\n+use machine::*;\n+use monomorphize;\n+use type_of::{type_of, sizing_type_of, align_of};\n+use type_::Type;\n+use value::Value;\n \n use arena::TypedArena;\n use syntax::codemap::DUMMY_SP;", "previous_filename": "src/librustc_trans/trans/glue.rs"}, {"sha": "cf1542b7b034eef7653853ca57e740b01a22a32a", "filename": "src/librustc_trans/inline.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Finline.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -12,9 +12,9 @@ use llvm::{AvailableExternallyLinkage, InternalLinkage, SetLinkage};\n use middle::cstore::{CrateStore, FoundAst, InlinedItem};\n use middle::def_id::DefId;\n use rustc::ty::subst::Substs;\n-use trans::base::{push_ctxt, trans_item, trans_fn};\n-use trans::callee::Callee;\n-use trans::common::*;\n+use base::{push_ctxt, trans_item, trans_fn};\n+use callee::Callee;\n+use common::*;\n \n use rustc::dep_graph::DepNode;\n use rustc_front::hir;", "previous_filename": "src/librustc_trans/trans/inline.rs"}, {"sha": "b7b74e44d3ed470b0f9abccdb33f2cc48ec2cae4", "filename": "src/librustc_trans/intrinsic.rs", "status": "renamed", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -18,26 +18,26 @@ use llvm::{ValueRef, TypeKind};\n use rustc::infer;\n use rustc::ty::subst;\n use rustc::ty::subst::FnSpace;\n-use trans::abi::{Abi, FnType};\n-use trans::adt;\n-use trans::attributes;\n-use trans::base::*;\n-use trans::build::*;\n-use trans::callee::{self, Callee};\n-use trans::cleanup;\n-use trans::cleanup::CleanupMethods;\n-use trans::common::*;\n-use trans::consts;\n-use trans::datum::*;\n-use trans::debuginfo::DebugLoc;\n-use trans::declare;\n-use trans::expr;\n-use trans::glue;\n-use trans::type_of;\n-use trans::machine;\n-use trans::type_::Type;\n+use abi::{Abi, FnType};\n+use adt;\n+use attributes;\n+use base::*;\n+use build::*;\n+use callee::{self, Callee};\n+use cleanup;\n+use cleanup::CleanupMethods;\n+use common::*;\n+use consts;\n+use datum::*;\n+use debuginfo::DebugLoc;\n+use declare;\n+use expr;\n+use glue;\n+use type_of;\n+use machine;\n+use type_::Type;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use trans::Disr;\n+use Disr;\n use rustc::ty::subst::Substs;\n use rustc::dep_graph::DepNode;\n use rustc_front::hir;", "previous_filename": "src/librustc_trans/trans/intrinsic.rs"}, {"sha": "103de7e42af39ee93d4d2972b461199ef094cae5", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 66, "deletions": 3, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -61,6 +61,9 @@ pub use rustc::middle;\n pub use rustc::lint;\n pub use rustc::util;\n \n+pub use base::trans_crate;\n+pub use disr::Disr;\n+\n pub mod back {\n     pub use rustc_back::rpath;\n     pub use rustc_back::svh;\n@@ -76,10 +79,70 @@ pub mod back {\n \n pub mod diagnostics;\n \n-pub mod trans;\n+#[macro_use]\n+mod macros;\n+\n+mod abi;\n+mod adt;\n+mod asm;\n+mod assert_dep_graph;\n+mod attributes;\n+mod base;\n+mod basic_block;\n+mod build;\n+mod builder;\n+mod cabi_aarch64;\n+mod cabi_arm;\n+mod cabi_asmjs;\n+mod cabi_mips;\n+mod cabi_powerpc;\n+mod cabi_powerpc64;\n+mod cabi_x86;\n+mod cabi_x86_64;\n+mod cabi_x86_win64;\n+mod callee;\n+mod cleanup;\n+mod closure;\n+mod common;\n+mod consts;\n+mod context;\n+mod controlflow;\n+mod datum;\n+mod debuginfo;\n+mod declare;\n+mod disr;\n+mod expr;\n+mod glue;\n+mod inline;\n+mod intrinsic;\n+mod machine;\n+mod _match;\n+mod meth;\n+mod mir;\n+mod monomorphize;\n+mod collector;\n+mod symbol_names_test;\n+mod tvec;\n+mod type_;\n+mod type_of;\n+mod value;\n+\n+#[derive(Copy, Clone)]\n+pub struct ModuleTranslation {\n+    pub llcx: llvm::ContextRef,\n+    pub llmod: llvm::ModuleRef,\n+}\n+\n+unsafe impl Send for ModuleTranslation { }\n+unsafe impl Sync for ModuleTranslation { }\n \n-pub mod lib {\n-    pub use llvm;\n+pub struct CrateTranslation {\n+    pub modules: Vec<ModuleTranslation>,\n+    pub metadata_module: ModuleTranslation,\n+    pub link: middle::cstore::LinkMeta,\n+    pub metadata: Vec<u8>,\n+    pub reachable: Vec<String>,\n+    pub no_builtins: bool,\n }\n \n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }"}, {"sha": "59020b38ddcd31d2bc26bc9cfc36637c2d62138f", "filename": "src/librustc_trans/machine.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmachine.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -13,9 +13,9 @@\n #![allow(non_camel_case_types)]\n \n use llvm::{self, ValueRef};\n-use trans::common::*;\n+use common::*;\n \n-use trans::type_::Type;\n+use type_::Type;\n \n pub type llbits = u64;\n pub type llsize = u64;", "previous_filename": "src/librustc_trans/trans/machine.rs"}, {"sha": "77efcc6fb0030d9d768d644c02f30696ec91b09b", "filename": "src/librustc_trans/macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmacros.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "previous_filename": "src/librustc_trans/trans/macros.rs"}, {"sha": "65f52fd0799d0cd1e0e2daaa0b3ed720a016a609", "filename": "src/librustc_trans/meth.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -18,21 +18,21 @@ use rustc::infer;\n use rustc::ty::subst::{FnSpace, Subst, Substs};\n use rustc::ty::subst;\n use rustc::traits::{self, ProjectionMode};\n-use trans::abi::FnType;\n-use trans::base::*;\n-use trans::build::*;\n-use trans::callee::{Callee, Virtual, ArgVals, trans_fn_pointer_shim};\n-use trans::closure;\n-use trans::common::*;\n-use trans::consts;\n-use trans::debuginfo::DebugLoc;\n-use trans::declare;\n-use trans::expr;\n-use trans::glue;\n-use trans::machine;\n-use trans::type_::Type;\n-use trans::type_of::*;\n-use trans::value::Value;\n+use abi::FnType;\n+use base::*;\n+use build::*;\n+use callee::{Callee, Virtual, ArgVals, trans_fn_pointer_shim};\n+use closure;\n+use common::*;\n+use consts;\n+use debuginfo::DebugLoc;\n+use declare;\n+use expr;\n+use glue;\n+use machine;\n+use type_::Type;\n+use type_of::*;\n+use value::Value;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n use syntax::ast::Name;", "previous_filename": "src/librustc_trans/trans/meth.rs"}, {"sha": "9aa3d6c7dd08e764ce50f5057a6d12ff8fd595ce", "filename": "src/librustc_trans/mir/analyze.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -14,7 +14,7 @@\n use rustc_data_structures::bitvec::BitVector;\n use rustc::mir::repr as mir;\n use rustc::mir::visit::{Visitor, LvalueContext};\n-use trans::common::{self, Block};\n+use common::{self, Block};\n use super::rvalue;\n \n pub fn lvalue_temps<'bcx,'tcx>(bcx: Block<'bcx,'tcx>,", "previous_filename": "src/librustc_trans/trans/mir/analyze.rs"}, {"sha": "a60b03dd72413eb3dda3dd0871e9b8e7c342277e", "filename": "src/librustc_trans/mir/block.rs", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -11,19 +11,19 @@\n use llvm::{self, BasicBlockRef, ValueRef, OperandBundleDef};\n use rustc::ty;\n use rustc::mir::repr as mir;\n-use trans::abi::{Abi, FnType};\n-use trans::adt;\n-use trans::base;\n-use trans::build;\n-use trans::callee::{Callee, CalleeData, Fn, Intrinsic, NamedTupleConstructor, Virtual};\n-use trans::common::{self, Block, BlockAndBuilder, C_undef};\n-use trans::debuginfo::DebugLoc;\n-use trans::Disr;\n-use trans::machine::{llalign_of_min, llbitsize_of_real};\n-use trans::meth;\n-use trans::type_of;\n-use trans::glue;\n-use trans::type_::Type;\n+use abi::{Abi, FnType};\n+use adt;\n+use base;\n+use build;\n+use callee::{Callee, CalleeData, Fn, Intrinsic, NamedTupleConstructor, Virtual};\n+use common::{self, Block, BlockAndBuilder, C_undef};\n+use debuginfo::DebugLoc;\n+use Disr;\n+use machine::{llalign_of_min, llbitsize_of_real};\n+use meth;\n+use type_of;\n+use glue;\n+use type_::Type;\n \n use super::{MirContext, drop};\n use super::lvalue::{LvalueRef, load_fat_ptr};\n@@ -265,9 +265,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         callee.reify(bcx.ccx()).val\n                     }\n                     Intrinsic => {\n-                        use trans::callee::ArgVals;\n-                        use trans::expr::{Ignore, SaveIn};\n-                        use trans::intrinsic::trans_intrinsic_call;\n+                        use callee::ArgVals;\n+                        use expr::{Ignore, SaveIn};\n+                        use intrinsic::trans_intrinsic_call;\n \n                         let (dest, llargs) = if fn_ty.ret.is_indirect() {\n                             (SaveIn(llargs[0]), &llargs[1..])", "previous_filename": "src/librustc_trans/trans/mir/block.rs"}, {"sha": "be1c3f3b56b2cf6a4d85bbde0feb483ebe9d416f", "filename": "src/librustc_trans/mir/constant.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -13,14 +13,14 @@ use rustc::ty::{Ty, TypeFoldable};\n use rustc::middle::const_eval::{self, ConstVal};\n use rustc_const_eval::ConstInt::*;\n use rustc::mir::repr as mir;\n-use trans::abi;\n-use trans::common::{self, BlockAndBuilder, C_bool, C_bytes, C_floating_f64, C_integral,\n+use abi;\n+use common::{self, BlockAndBuilder, C_bool, C_bytes, C_floating_f64, C_integral,\n                     C_str_slice, C_undef};\n-use trans::consts;\n-use trans::datum;\n-use trans::expr;\n-use trans::type_of;\n-use trans::type_::Type;\n+use consts;\n+use datum;\n+use expr;\n+use type_of;\n+use type_::Type;\n \n use super::operand::{OperandRef, OperandValue};\n use super::MirContext;", "previous_filename": "src/librustc_trans/trans/mir/constant.rs"}, {"sha": "623cd5a6f8cc9009914ac8f298e2392ea3556030", "filename": "src/librustc_trans/mir/drop.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fdrop.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -10,12 +10,12 @@\n \n use llvm::ValueRef;\n use rustc::ty::Ty;\n-use trans::adt;\n-use trans::base;\n-use trans::common::{self, BlockAndBuilder};\n-use trans::machine;\n-use trans::type_of;\n-use trans::type_::Type;\n+use adt;\n+use base;\n+use common::{self, BlockAndBuilder};\n+use machine;\n+use type_of;\n+use type_::Type;\n \n pub fn drop_fill<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>, value: ValueRef, ty: Ty<'tcx>) {\n     let llty = type_of::type_of(bcx.ccx(), ty);", "previous_filename": "src/librustc_trans/trans/mir/drop.rs"}, {"sha": "f5f8c23a9824b5f9834f7cd967825949641f7465", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -12,16 +12,16 @@ use llvm::ValueRef;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::mir::repr as mir;\n use rustc::mir::tcx::LvalueTy;\n-use trans::abi;\n-use trans::adt;\n-use trans::base;\n-use trans::builder::Builder;\n-use trans::common::{self, BlockAndBuilder, C_uint};\n-use trans::consts;\n-use trans::machine;\n-use trans::mir::drop;\n+use abi;\n+use adt;\n+use base;\n+use builder::Builder;\n+use common::{self, BlockAndBuilder, C_uint};\n+use consts;\n+use machine;\n+use mir::drop;\n use llvm;\n-use trans::Disr;\n+use Disr;\n \n use std::ptr;\n ", "previous_filename": "src/librustc_trans/trans/mir/lvalue.rs"}, {"sha": "61536f3ecae875a9d4b980fdd7538e441655f99e", "filename": "src/librustc_trans/mir/mod.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -13,8 +13,8 @@ use llvm::{self, ValueRef};\n use rustc::ty;\n use rustc::mir::repr as mir;\n use rustc::mir::tcx::LvalueTy;\n-use trans::base;\n-use trans::common::{self, Block, BlockAndBuilder, FunctionContext};\n+use base;\n+use common::{self, Block, BlockAndBuilder, FunctionContext};\n \n use std::ops::Deref;\n use std::rc::Rc;", "previous_filename": "src/librustc_trans/trans/mir/mod.rs"}, {"sha": "3b909353f73456cbd02ddeeafac2d2ba0af21b4b", "filename": "src/librustc_trans/mir/operand.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -11,11 +11,11 @@\n use llvm::ValueRef;\n use rustc::ty::Ty;\n use rustc::mir::repr as mir;\n-use trans::base;\n-use trans::common::{self, Block, BlockAndBuilder};\n-use trans::datum;\n-use trans::value::Value;\n-use trans::glue;\n+use base;\n+use common::{self, Block, BlockAndBuilder};\n+use datum;\n+use value::Value;\n+use glue;\n \n use std::fmt;\n ", "previous_filename": "src/librustc_trans/trans/mir/operand.rs"}, {"sha": "47fa618ebad838df10c4a1f851cf94447914931b", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -15,20 +15,20 @@ use middle::const_eval::ConstVal;\n use rustc_const_eval::ConstInt;\n use rustc::mir::repr as mir;\n \n-use trans::asm;\n-use trans::base;\n-use trans::callee::Callee;\n-use trans::common::{self, C_uint, BlockAndBuilder, Result};\n-use trans::datum::{Datum, Lvalue};\n-use trans::debuginfo::DebugLoc;\n-use trans::declare;\n-use trans::adt;\n-use trans::machine;\n-use trans::type_::Type;\n-use trans::type_of;\n-use trans::tvec;\n-use trans::value::Value;\n-use trans::Disr;\n+use asm;\n+use base;\n+use callee::Callee;\n+use common::{self, C_uint, BlockAndBuilder, Result};\n+use datum::{Datum, Lvalue};\n+use debuginfo::DebugLoc;\n+use declare;\n+use adt;\n+use machine;\n+use type_::Type;\n+use type_of;\n+use tvec;\n+use value::Value;\n+use Disr;\n \n use super::MirContext;\n use super::operand::{OperandRef, OperandValue};\n@@ -138,7 +138,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             use syntax::ast::DUMMY_NODE_ID;\n                             use syntax::codemap::DUMMY_SP;\n                             use syntax::ptr::P;\n-                            use trans::closure;\n+                            use closure;\n \n                             closure::trans_closure_expr(closure::Dest::Ignore(bcx.ccx()),\n                                                         &hir::FnDecl {", "previous_filename": "src/librustc_trans/trans/mir/rvalue.rs"}, {"sha": "d291bc19db5e8b36ce668d848a77a9a71a90d176", "filename": "src/librustc_trans/mir/statement.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::mir::repr as mir;\n-use trans::common::BlockAndBuilder;\n+use common::BlockAndBuilder;\n \n use super::MirContext;\n use super::TempRef;", "previous_filename": "src/librustc_trans/trans/mir/statement.rs"}, {"sha": "fe3ab58761a028520d459901ddfd57fe97eef328", "filename": "src/librustc_trans/monomorphize.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -16,13 +16,13 @@ use rustc::infer::normalize_associated_type;\n use rustc::ty::subst;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TypeFoldable, TyCtxt};\n-use trans::attributes;\n-use trans::base::{push_ctxt};\n-use trans::base::trans_fn;\n-use trans::base;\n-use trans::common::*;\n-use trans::declare;\n-use trans::Disr;\n+use attributes;\n+use base::{push_ctxt};\n+use base::trans_fn;\n+use base;\n+use common::*;\n+use declare;\n+use Disr;\n use rustc::front::map as hir_map;\n use rustc::util::ppaux;\n ", "previous_filename": "src/librustc_trans/trans/monomorphize.rs"}, {"sha": "a75b6f736eee2c13542d9f7457d53237d929890c", "filename": "src/librustc_trans/symbol_names_test.rs", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_names_test.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -15,13 +15,13 @@\n //! paths etc in all kinds of annoying scenarios.\n \n use back::symbol_names;\n-use rustc::ty::TyCtxt;\n use rustc_front::hir;\n use rustc_front::intravisit::{self, Visitor};\n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n-use trans::common::CrateContext;\n-use trans::monomorphize::Instance;\n+\n+use common::CrateContext;\n+use monomorphize::Instance;\n \n const SYMBOL_NAME: &'static str = \"rustc_symbol_name\";\n const ITEM_PATH: &'static str = \"rustc_item_path\";\n@@ -36,28 +36,28 @@ pub fn report_symbol_names(ccx: &CrateContext) {\n     }\n \n     let _ignore = tcx.dep_graph.in_ignore();\n-    let mut visitor = SymbolNamesTest { ccx: ccx, tcx: tcx };\n+    let mut visitor = SymbolNamesTest { ccx: ccx };\n     tcx.map.krate().visit_all_items(&mut visitor);\n }\n \n struct SymbolNamesTest<'a, 'tcx:'a> {\n     ccx: &'a CrateContext<'a, 'tcx>,\n-    tcx: &'a TyCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> SymbolNamesTest<'a, 'tcx> {\n     fn process_attrs(&mut self,\n                      node_id: ast::NodeId) {\n-        let def_id = self.tcx.map.local_def_id(node_id);\n-        for attr in self.tcx.get_attrs(def_id).iter() {\n+        let tcx = self.ccx.tcx();\n+        let def_id = tcx.map.local_def_id(node_id);\n+        for attr in tcx.get_attrs(def_id).iter() {\n             if attr.check_name(SYMBOL_NAME) {\n                 // for now, can only use on monomorphic names\n-                let instance = Instance::mono(self.tcx, def_id);\n+                let instance = Instance::mono(tcx, def_id);\n                 let name = symbol_names::exported_name(self.ccx, &instance);\n-                self.tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", name));\n+                tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", name));\n             } else if attr.check_name(ITEM_PATH) {\n-                let path = self.tcx.item_path_str(def_id);\n-                self.tcx.sess.span_err(attr.span, &format!(\"item-path({})\", path));\n+                let path = tcx.item_path_str(def_id);\n+                tcx.sess.span_err(attr.span, &format!(\"item-path({})\", path));\n             }\n \n             // (*) The formatting of `tag({})` is chosen so that tests can elect", "previous_filename": "src/librustc_trans/trans/symbol_names_test.rs"}, {"sha": "930f37ce256345ca80b5728a61a2552ea6d343e3", "filename": "src/librustc_trans/trans/mod.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/98359283a4aaffe21d68bf110017dcb315a10606/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98359283a4aaffe21d68bf110017dcb315a10606/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=98359283a4aaffe21d68bf110017dcb315a10606", "patch": "@@ -1,84 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use llvm::{ContextRef, ModuleRef};\n-use middle::cstore::LinkMeta;\n-\n-pub use self::base::trans_crate;\n-pub use self::context::CrateContext;\n-pub use self::common::gensym_name;\n-pub use self::disr::Disr;\n-pub use self::monomorphize::Instance;\n-\n-#[macro_use]\n-mod macros;\n-\n-mod abi;\n-mod adt;\n-mod asm;\n-mod assert_dep_graph;\n-mod attributes;\n-mod base;\n-mod basic_block;\n-mod build;\n-mod builder;\n-mod cabi_aarch64;\n-mod cabi_arm;\n-mod cabi_asmjs;\n-mod cabi_mips;\n-mod cabi_powerpc;\n-mod cabi_powerpc64;\n-mod cabi_x86;\n-mod cabi_x86_64;\n-mod cabi_x86_win64;\n-mod callee;\n-mod cleanup;\n-mod closure;\n-mod common;\n-mod consts;\n-mod context;\n-mod controlflow;\n-mod datum;\n-mod debuginfo;\n-mod declare;\n-mod disr;\n-mod expr;\n-mod glue;\n-mod inline;\n-mod intrinsic;\n-mod machine;\n-mod _match;\n-mod meth;\n-mod mir;\n-mod monomorphize;\n-mod collector;\n-mod symbol_names_test;\n-mod tvec;\n-mod type_;\n-mod type_of;\n-mod value;\n-\n-#[derive(Copy, Clone)]\n-pub struct ModuleTranslation {\n-    pub llcx: ContextRef,\n-    pub llmod: ModuleRef,\n-}\n-\n-unsafe impl Send for ModuleTranslation { }\n-unsafe impl Sync for ModuleTranslation { }\n-\n-pub struct CrateTranslation {\n-    pub modules: Vec<ModuleTranslation>,\n-    pub metadata_module: ModuleTranslation,\n-    pub link: LinkMeta,\n-    pub metadata: Vec<u8>,\n-    pub reachable: Vec<String>,\n-    pub no_builtins: bool,\n-}"}, {"sha": "c42bad0bc0bd1a5a192162e19dc31a246df00c56", "filename": "src/librustc_trans/tvec.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftvec.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -12,21 +12,21 @@\n \n use llvm;\n use llvm::ValueRef;\n-use trans::base::*;\n-use trans::base;\n-use trans::build::*;\n-use trans::cleanup;\n-use trans::cleanup::CleanupMethods;\n-use trans::common::*;\n-use trans::consts;\n-use trans::datum::*;\n-use trans::debuginfo::DebugLoc;\n-use trans::expr::{Dest, Ignore, SaveIn};\n-use trans::expr;\n-use trans::machine::llsize_of_alloc;\n-use trans::type_::Type;\n-use trans::type_of;\n-use trans::value::Value;\n+use base::*;\n+use base;\n+use build::*;\n+use cleanup;\n+use cleanup::CleanupMethods;\n+use common::*;\n+use consts;\n+use datum::*;\n+use debuginfo::DebugLoc;\n+use expr::{Dest, Ignore, SaveIn};\n+use expr;\n+use machine::llsize_of_alloc;\n+use type_::Type;\n+use type_of;\n+use value::Value;\n use rustc::ty::{self, Ty};\n \n use rustc_front::hir;", "previous_filename": "src/librustc_trans/trans/tvec.rs"}, {"sha": "910a1c7f729c93eff49df857c44a7f1f2d042f83", "filename": "src/librustc_trans/type_.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -14,7 +14,7 @@ use llvm;\n use llvm::{TypeRef, Bool, False, True, TypeKind};\n use llvm::{Float, Double, X86_FP80, PPC_FP128, FP128};\n \n-use trans::context::CrateContext;\n+use context::CrateContext;\n use util::nodemap::FnvHashMap;\n \n use syntax::ast;", "previous_filename": "src/librustc_trans/trans/type_.rs"}, {"sha": "02f659fdc2e6fdfd0fbd0c5db5420ccdfbc0eae1", "filename": "src/librustc_trans/type_of.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -13,13 +13,13 @@\n use middle::def_id::DefId;\n use rustc::infer;\n use rustc::ty::subst;\n-use trans::abi::FnType;\n-use trans::adt;\n-use trans::common::*;\n-use trans::machine;\n+use abi::FnType;\n+use adt;\n+use common::*;\n+use machine;\n use rustc::ty::{self, Ty, TypeFoldable};\n \n-use trans::type_::Type;\n+use type_::Type;\n \n use syntax::ast;\n ", "previous_filename": "src/librustc_trans/trans/type_of.rs"}, {"sha": "00b316cc420ee8f035fe6616cf56b8c3e479fc1f", "filename": "src/librustc_trans/value.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035a645e64df9e5192698c3d6c442e57c39b40b8/src%2Flibrustc_trans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fvalue.rs?ref=035a645e64df9e5192698c3d6c442e57c39b40b8", "patch": "@@ -10,8 +10,8 @@\n \n use llvm;\n use llvm::{UseRef, ValueRef};\n-use trans::basic_block::BasicBlock;\n-use trans::common::Block;\n+use basic_block::BasicBlock;\n+use common::Block;\n \n use std::fmt;\n ", "previous_filename": "src/librustc_trans/trans/value.rs"}]}