{"sha": "c9b4ac5be4daaabc062ab1ee663eba8594750003", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YjRhYzViZTRkYWFhYmMwNjJhYjFlZTY2M2ViYTg1OTQ3NTAwMDM=", "commit": {"author": {"name": "Maan2003", "email": "manmeetmann2003@gmail.com", "date": "2021-06-13T03:54:16Z"}, "committer": {"name": "Maan2003", "email": "manmeetmann2003@gmail.com", "date": "2021-06-13T03:54:16Z"}, "message": "clippy::redudant_borrow", "tree": {"sha": "6090c8c38c735875c916255920525cf5fff45c75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6090c8c38c735875c916255920525cf5fff45c75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9b4ac5be4daaabc062ab1ee663eba8594750003", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVt0Hfgx04mDvJfYh6a8CS6Y8cO0FAmDFgXsACgkQ6a8CS6Y8\ncO02RQ/8CmxWi8zb9FByD3yxnNL4254XeVm6+cF3T8b2ulujBSXovfo8RPWSfutG\nl/F0SBtHyY6MguY5fHGRCUsHh1VO+JVULxSZcCRIEJTBFi0DJY5qqWhb4+BICX6V\nCr0o0TmZGEp0LhbMpMoQ8WBeu5khEJaHxUyWK3tkDK/tSVhuULFdeanshqjI/Uqk\nv9r6YQXyLY0cxVDqRQwEij5H3UVOEoRCPq7u/slI1VjOi0o0Ooh29LK2Jc/oZiJL\n357aVH2O3BSwngp6I166OPuGtJ0ikcu5Zwo1vQaC3xAJaMipDI+lwcVBCewi4Rdn\nnXwOY5c6pXD0tHgTGWvPT7bNbO8gUzQTmYjpHuMa8KDqgOTKbFZjJtG8Rbe/eCNz\nY32bf7K9D8pvjgy4eDHzAcJD3KB/5ued+KJTDgvlTDwil2yrGf56fXN0AUxHuCTD\nJHMluynaKu14rMywFNkpm0zzARC9DeNrcLg5AJoG15FDuDOAvxBD9QMdbGI67ZQ3\nlbor4a/QRwQOnqcSEINeJQs3N5/qAsuokxxjKONVJ8X+Ipp3A08uB6ItmUXV9zl+\nC/Su4MwOgmiD0e7jb18zJGO8slc9PgpB/DgJUEUKxxWPtocMQ024hO5BSOuiWrGY\ny9fQ5xDEpORyTjGFwxZv9Dmf61tiOKIOVM5aSkjVdtfixjMTMCM=\n=lGyp\n-----END PGP SIGNATURE-----", "payload": "tree 6090c8c38c735875c916255920525cf5fff45c75\nparent d6737e55fb49d286b5e646f57975b27b2c95ce92\nauthor Maan2003 <manmeetmann2003@gmail.com> 1623556456 +0530\ncommitter Maan2003 <manmeetmann2003@gmail.com> 1623556456 +0530\n\nclippy::redudant_borrow\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b4ac5be4daaabc062ab1ee663eba8594750003", "html_url": "https://github.com/rust-lang/rust/commit/c9b4ac5be4daaabc062ab1ee663eba8594750003", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9b4ac5be4daaabc062ab1ee663eba8594750003/comments", "author": {"login": "Maan2003", "id": 49202620, "node_id": "MDQ6VXNlcjQ5MjAyNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/49202620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maan2003", "html_url": "https://github.com/Maan2003", "followers_url": "https://api.github.com/users/Maan2003/followers", "following_url": "https://api.github.com/users/Maan2003/following{/other_user}", "gists_url": "https://api.github.com/users/Maan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maan2003/subscriptions", "organizations_url": "https://api.github.com/users/Maan2003/orgs", "repos_url": "https://api.github.com/users/Maan2003/repos", "events_url": "https://api.github.com/users/Maan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/Maan2003/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Maan2003", "id": 49202620, "node_id": "MDQ6VXNlcjQ5MjAyNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/49202620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maan2003", "html_url": "https://github.com/Maan2003", "followers_url": "https://api.github.com/users/Maan2003/followers", "following_url": "https://api.github.com/users/Maan2003/following{/other_user}", "gists_url": "https://api.github.com/users/Maan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maan2003/subscriptions", "organizations_url": "https://api.github.com/users/Maan2003/orgs", "repos_url": "https://api.github.com/users/Maan2003/repos", "events_url": "https://api.github.com/users/Maan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/Maan2003/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6737e55fb49d286b5e646f57975b27b2c95ce92", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6737e55fb49d286b5e646f57975b27b2c95ce92", "html_url": "https://github.com/rust-lang/rust/commit/d6737e55fb49d286b5e646f57975b27b2c95ce92"}], "stats": {"total": 570, "additions": 285, "deletions": 285}, "files": [{"sha": "da4afb5ebcf7fa7797a9da4faa42d7346f7ae603", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -190,7 +190,7 @@ impl From<Fixture> for FileMeta {\n             edition: f\n                 .edition\n                 .as_ref()\n-                .map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap()),\n+                .map_or(Edition::Edition2018, |v| Edition::from_str(v).unwrap()),\n             env: f.env.into_iter().collect(),\n             introduce_new_source_root: f.introduce_new_source_root,\n         }"}, {"sha": "f6eb2326215ec4fc062f2d4b533b5532e0357a89", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -1112,7 +1112,7 @@ impl Function {\n                                     .collect();\n                                 sink.push(MissingFields {\n                                     file: source_ptr.file_id,\n-                                    field_list_parent: AstPtr::new(&record_expr),\n+                                    field_list_parent: AstPtr::new(record_expr),\n                                     field_list_parent_path: record_expr\n                                         .path()\n                                         .map(|path| AstPtr::new(&path)),\n@@ -2531,13 +2531,13 @@ impl Type {\n             match ty.kind(&Interner) {\n                 TyKind::Adt(_, substs) => {\n                     cb(type_.derived(ty.clone()));\n-                    walk_substs(db, type_, &substs, cb);\n+                    walk_substs(db, type_, substs, cb);\n                 }\n                 TyKind::AssociatedType(_, substs) => {\n                     if let Some(_) = ty.associated_type_parent_trait(db) {\n                         cb(type_.derived(ty.clone()));\n                     }\n-                    walk_substs(db, type_, &substs, cb);\n+                    walk_substs(db, type_, substs, cb);\n                 }\n                 TyKind::OpaqueType(_, subst) => {\n                     if let Some(bounds) = ty.impl_trait_bounds(db) {\n@@ -2577,7 +2577,7 @@ impl Type {\n                 TyKind::FnDef(_, substs)\n                 | TyKind::Tuple(_, substs)\n                 | TyKind::Closure(.., substs) => {\n-                    walk_substs(db, type_, &substs, cb);\n+                    walk_substs(db, type_, substs, cb);\n                 }\n                 TyKind::Function(hir_ty::FnPointer { substitution, .. }) => {\n                     walk_substs(db, type_, &substitution.0, cb);"}, {"sha": "613266e0706f07684924aea9225e17d4ef8e8460", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -192,7 +192,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         node: &SyntaxNode,\n         offset: TextSize,\n     ) -> Option<N> {\n-        if let Some(it) = find_node_at_offset(&node, offset) {\n+        if let Some(it) = find_node_at_offset(node, offset) {\n             return Some(it);\n         }\n \n@@ -744,7 +744,7 @@ impl<'db> SemanticsImpl<'db> {\n                     return None;\n                 }\n \n-                let func = self.resolve_method_call(&method_call_expr).map(Function::from)?;\n+                let func = self.resolve_method_call(method_call_expr).map(Function::from)?;\n                 let res = match func.self_param(self.db)?.access(self.db) {\n                     Access::Shared | Access::Exclusive => true,\n                     Access::Owned => false,"}, {"sha": "c9744d81d221ddfc03c02ccc36102b8e6fdf6b40", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -222,7 +222,7 @@ impl SourceAnalyzer {\n             Pat::Path(path) => path,\n             _ => return None,\n         };\n-        let res = resolve_hir_path(db, &self.resolver, &path)?;\n+        let res = resolve_hir_path(db, &self.resolver, path)?;\n         match res {\n             PathResolution::Def(def) => Some(def),\n             _ => None,\n@@ -329,7 +329,7 @@ impl SourceAnalyzer {\n \n         let (variant, missing_fields, _exhaustive) =\n             record_literal_missing_fields(db, infer, expr_id, &body[expr_id])?;\n-        let res = self.missing_fields(db, krate, &substs, variant, missing_fields);\n+        let res = self.missing_fields(db, krate, substs, variant, missing_fields);\n         Some(res)\n     }\n \n@@ -347,7 +347,7 @@ impl SourceAnalyzer {\n \n         let (variant, missing_fields, _exhaustive) =\n             record_pattern_missing_fields(db, infer, pat_id, &body[pat_id])?;\n-        let res = self.missing_fields(db, krate, &substs, variant, missing_fields);\n+        let res = self.missing_fields(db, krate, substs, variant, missing_fields);\n         Some(res)\n     }\n "}, {"sha": "a8bd36a0a072be8301442e76d7ecc181e2b407e3", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -1002,16 +1002,16 @@ impl From<ast::LiteralKind> for Literal {\n                 if let builtin @ Some(_) = lit.suffix().and_then(BuiltinFloat::from_suffix) {\n                     return Literal::Float(Default::default(), builtin);\n                 } else if let builtin @ Some(_) =\n-                    lit.suffix().and_then(|it| BuiltinInt::from_suffix(&it))\n+                    lit.suffix().and_then(|it| BuiltinInt::from_suffix(it))\n                 {\n                     Literal::Int(lit.value().unwrap_or(0) as i128, builtin)\n                 } else {\n-                    let builtin = lit.suffix().and_then(|it| BuiltinUint::from_suffix(&it));\n+                    let builtin = lit.suffix().and_then(|it| BuiltinUint::from_suffix(it));\n                     Literal::Uint(lit.value().unwrap_or(0), builtin)\n                 }\n             }\n             LiteralKind::FloatNumber(lit) => {\n-                let ty = lit.suffix().and_then(|it| BuiltinFloat::from_suffix(&it));\n+                let ty = lit.suffix().and_then(|it| BuiltinFloat::from_suffix(it));\n                 Literal::Float(Default::default(), ty)\n             }\n             LiteralKind::ByteString(bs) => {"}, {"sha": "58a1fc81cba1a358531dd9270be0a0ceedca8608", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -198,7 +198,7 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n         }\n         Expr::Lambda { args, body: body_expr, .. } => {\n             let scope = scopes.new_scope(scope);\n-            scopes.add_params_bindings(body, scope, &args);\n+            scopes.add_params_bindings(body, scope, args);\n             compute_expr_scopes(*body_expr, body, scopes, scope);\n         }\n         Expr::Match { expr, arms } => {"}, {"sha": "6933f6e3c334a6ee2cb7fcd8ea6fa0e2ac785528", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -280,7 +280,7 @@ impl GenericParams {\n             sm.type_params.insert(param_id, Either::Right(type_param.clone()));\n \n             let type_ref = TypeRef::Path(name.into());\n-            self.fill_bounds(&lower_ctx, &type_param, Either::Left(type_ref));\n+            self.fill_bounds(lower_ctx, &type_param, Either::Left(type_ref));\n         }\n         for lifetime_param in params.lifetime_params() {\n             let name =\n@@ -289,7 +289,7 @@ impl GenericParams {\n             let param_id = self.lifetimes.alloc(param);\n             sm.lifetime_params.insert(param_id, lifetime_param.clone());\n             let lifetime_ref = LifetimeRef::new_name(name);\n-            self.fill_bounds(&lower_ctx, &lifetime_param, Either::Right(lifetime_ref));\n+            self.fill_bounds(lower_ctx, &lifetime_param, Either::Right(lifetime_ref));\n         }\n         for const_param in params.const_params() {\n             let name = const_param.name().map_or_else(Name::missing, |it| it.as_name());"}, {"sha": "3f90bda742e24c9b0b95d5197d42459934e160a6", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -823,7 +823,7 @@ fn is_intrinsic_fn_unsafe(name: &Name) -> bool {\n         known::type_name,\n         known::variant_count,\n     ]\n-    .contains(&name)\n+    .contains(name)\n }\n \n fn lower_abi(abi: ast::Abi) -> Interned<str> {\n@@ -855,7 +855,7 @@ impl UseTreeLowering<'_> {\n                 // E.g. `use something::{inner}` (prefix is `None`, path is `something`)\n                 // or `use something::{path::{inner::{innerer}}}` (prefix is `something::path`, path is `inner`)\n                 Some(path) => {\n-                    match ModPath::from_src(self.db, path, &self.hygiene) {\n+                    match ModPath::from_src(self.db, path, self.hygiene) {\n                         Some(it) => Some(it),\n                         None => return None, // FIXME: report errors somewhere\n                     }\n@@ -874,7 +874,7 @@ impl UseTreeLowering<'_> {\n         } else {\n             let is_glob = tree.star_token().is_some();\n             let path = match tree.path() {\n-                Some(path) => Some(ModPath::from_src(self.db, path, &self.hygiene)?),\n+                Some(path) => Some(ModPath::from_src(self.db, path, self.hygiene)?),\n                 None => None,\n             };\n             let alias = tree.rename().map(|a| {"}, {"sha": "6fab58f159387a4b31429886bf3dfbcb96d7bacd", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -500,7 +500,7 @@ impl DefCollector<'_> {\n             let (per_ns, _) = self.def_map.resolve_path(\n                 self.db,\n                 self.def_map.root,\n-                &path,\n+                path,\n                 BuiltinShadowMode::Other,\n             );\n \n@@ -722,7 +722,7 @@ impl DefCollector<'_> {\n         if import.is_extern_crate {\n             let res = self.def_map.resolve_name_in_extern_prelude(\n                 self.db,\n-                &import\n+                import\n                     .path\n                     .as_ident()\n                     .expect(\"extern crate should have been desugared to one-element path\"),\n@@ -1351,7 +1351,7 @@ impl ModCollector<'_, '_> {\n                     let imports = Import::from_use(\n                         self.def_collector.db,\n                         krate,\n-                        &self.item_tree,\n+                        self.item_tree,\n                         ItemTreeId::new(self.file_id, import_id),\n                     );\n                     self.def_collector.unresolved_imports.extend(imports.into_iter().map(\n@@ -1368,7 +1368,7 @@ impl ModCollector<'_, '_> {\n                         import: Import::from_extern_crate(\n                             self.def_collector.db,\n                             krate,\n-                            &self.item_tree,\n+                            self.item_tree,\n                             ItemTreeId::new(self.file_id, import_id),\n                         ),\n                         status: PartialResolvedImport::Unresolved,\n@@ -1889,7 +1889,7 @@ impl ModCollector<'_, '_> {\n                     self.def_collector.def_map.with_ancestor_maps(\n                         self.def_collector.db,\n                         self.module_id,\n-                        &mut |map, module| map[module].scope.get_legacy_macro(&name),\n+                        &mut |map, module| map[module].scope.get_legacy_macro(name),\n                     )\n                 })\n             },\n@@ -1993,7 +1993,7 @@ mod tests {\n     }\n \n     fn do_resolve(code: &str) -> DefMap {\n-        let (db, _file_id) = TestDB::with_single_file(&code);\n+        let (db, _file_id) = TestDB::with_single_file(code);\n         let krate = db.test_crate();\n \n         let edition = db.crate_graph()[krate].edition;"}, {"sha": "629bc7952c23e6640bf0cbec5fcf7bd2c7518eba", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -93,7 +93,7 @@ impl DefMap {\n         let mut vis = match visibility {\n             RawVisibility::Module(path) => {\n                 let (result, remaining) =\n-                    self.resolve_path(db, original_module, &path, BuiltinShadowMode::Module);\n+                    self.resolve_path(db, original_module, path, BuiltinShadowMode::Module);\n                 if remaining.is_some() {\n                     return None;\n                 }\n@@ -205,7 +205,7 @@ impl DefMap {\n                     None => return ResolvePathResult::empty(ReachedFixedPoint::Yes),\n                 };\n                 log::debug!(\"resolving {:?} in crate root (+ extern prelude)\", segment);\n-                self.resolve_name_in_crate_root_or_extern_prelude(db, &segment)\n+                self.resolve_name_in_crate_root_or_extern_prelude(db, segment)\n             }\n             PathKind::Plain => {\n                 let (_, segment) = match segments.next() {\n@@ -222,7 +222,7 @@ impl DefMap {\n                     if path.segments().len() == 1 { shadow } else { BuiltinShadowMode::Module };\n \n                 log::debug!(\"resolving {:?} in module\", segment);\n-                self.resolve_name_in_module(db, original_module, &segment, prefer_module)\n+                self.resolve_name_in_module(db, original_module, segment, prefer_module)\n             }\n             PathKind::Super(lvl) => {\n                 let mut module = original_module;\n@@ -269,7 +269,7 @@ impl DefMap {\n                     Some((_, segment)) => segment,\n                     None => return ResolvePathResult::empty(ReachedFixedPoint::Yes),\n                 };\n-                if let Some(def) = self.extern_prelude.get(&segment) {\n+                if let Some(def) = self.extern_prelude.get(segment) {\n                     log::debug!(\"absolute path {:?} resolved to crate {:?}\", path, def);\n                     PerNs::types(*def, Visibility::Public)\n                 } else {\n@@ -319,13 +319,13 @@ impl DefMap {\n                     };\n \n                     // Since it is a qualified path here, it should not contains legacy macros\n-                    module_data.scope.get(&segment)\n+                    module_data.scope.get(segment)\n                 }\n                 ModuleDefId::AdtId(AdtId::EnumId(e)) => {\n                     // enum variant\n                     cov_mark::hit!(can_import_enum_variant);\n                     let enum_data = db.enum_data(e);\n-                    match enum_data.variant(&segment) {\n+                    match enum_data.variant(segment) {\n                         Some(local_id) => {\n                             let variant = EnumVariantId { parent: e, local_id };\n                             match &*enum_data.variants[local_id].variant_data {"}, {"sha": "27345d07ce708de3af116323025f2d7bc0cfe250", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -208,13 +208,13 @@ fn lower_generic_args_from_fn_path(\n     let params = params?;\n     let mut param_types = Vec::new();\n     for param in params.params() {\n-        let type_ref = TypeRef::from_ast_opt(&ctx, param.ty());\n+        let type_ref = TypeRef::from_ast_opt(ctx, param.ty());\n         param_types.push(type_ref);\n     }\n     let arg = GenericArg::Type(TypeRef::Tuple(param_types));\n     args.push(arg);\n     if let Some(ret_type) = ret_type {\n-        let type_ref = TypeRef::from_ast_opt(&ctx, ret_type.ty());\n+        let type_ref = TypeRef::from_ast_opt(ctx, ret_type.ty());\n         bindings.push(AssociatedTypeBinding {\n             name: name![Output],\n             type_ref: Some(type_ref),"}, {"sha": "d4681fa3e66976eeb13a93c52abc008106327c25", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -133,7 +133,7 @@ impl Resolver {\n             Some(it) => it,\n             None => return PerNs::none(),\n         };\n-        let (module_res, segment_index) = item_map.resolve_path(db, module, &path, shadow);\n+        let (module_res, segment_index) = item_map.resolve_path(db, module, path, shadow);\n         if segment_index.is_some() {\n             return PerNs::none();\n         }\n@@ -150,7 +150,7 @@ impl Resolver {\n         path: &ModPath,\n     ) -> Option<TraitId> {\n         let (item_map, module) = self.module_scope()?;\n-        let (module_res, ..) = item_map.resolve_path(db, module, &path, BuiltinShadowMode::Module);\n+        let (module_res, ..) = item_map.resolve_path(db, module, path, BuiltinShadowMode::Module);\n         match module_res.take_types()? {\n             ModuleDefId::TraitId(it) => Some(it),\n             _ => None,\n@@ -325,7 +325,7 @@ impl Resolver {\n         path: &ModPath,\n     ) -> Option<MacroDefId> {\n         let (item_map, module) = self.module_scope()?;\n-        item_map.resolve_path(db, module, &path, BuiltinShadowMode::Other).0.take_macros()\n+        item_map.resolve_path(db, module, path, BuiltinShadowMode::Other).0.take_macros()\n     }\n \n     pub fn process_all_names(&self, db: &dyn DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n@@ -561,7 +561,7 @@ impl ModuleItemMap {\n         path: &ModPath,\n     ) -> Option<ResolveValueResult> {\n         let (module_def, idx) =\n-            self.def_map.resolve_path_locally(db, self.module_id, &path, BuiltinShadowMode::Other);\n+            self.def_map.resolve_path_locally(db, self.module_id, path, BuiltinShadowMode::Other);\n         match idx {\n             None => {\n                 let value = to_value_ns(module_def)?;\n@@ -591,7 +591,7 @@ impl ModuleItemMap {\n         path: &ModPath,\n     ) -> Option<(TypeNs, Option<usize>)> {\n         let (module_def, idx) =\n-            self.def_map.resolve_path_locally(db, self.module_id, &path, BuiltinShadowMode::Other);\n+            self.def_map.resolve_path_locally(db, self.module_id, path, BuiltinShadowMode::Other);\n         let res = to_type_ns(module_def)?;\n         Some((res, idx))\n     }"}, {"sha": "ffe4999738a1285ab17075ffe291b19f77f2d4dd", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -128,7 +128,7 @@ impl TypeRef {\n     /// Converts an `ast::TypeRef` to a `hir::TypeRef`.\n     pub fn from_ast(ctx: &LowerCtx, node: ast::Type) -> Self {\n         match node {\n-            ast::Type::ParenType(inner) => TypeRef::from_ast_opt(&ctx, inner.ty()),\n+            ast::Type::ParenType(inner) => TypeRef::from_ast_opt(ctx, inner.ty()),\n             ast::Type::TupleType(inner) => {\n                 TypeRef::Tuple(inner.fields().map(|it| TypeRef::from_ast(ctx, it)).collect())\n             }\n@@ -142,7 +142,7 @@ impl TypeRef {\n                     .unwrap_or(TypeRef::Error)\n             }\n             ast::Type::PtrType(inner) => {\n-                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.ty());\n+                let inner_ty = TypeRef::from_ast_opt(ctx, inner.ty());\n                 let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::RawPtr(Box::new(inner_ty), mutability)\n             }\n@@ -156,13 +156,13 @@ impl TypeRef {\n                     .map(ConstScalar::usize_from_literal_expr)\n                     .unwrap_or(ConstScalar::Unknown);\n \n-                TypeRef::Array(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())), len)\n+                TypeRef::Array(Box::new(TypeRef::from_ast_opt(ctx, inner.ty())), len)\n             }\n             ast::Type::SliceType(inner) => {\n-                TypeRef::Slice(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())))\n+                TypeRef::Slice(Box::new(TypeRef::from_ast_opt(ctx, inner.ty())))\n             }\n             ast::Type::RefType(inner) => {\n-                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.ty());\n+                let inner_ty = TypeRef::from_ast_opt(ctx, inner.ty());\n                 let lifetime = inner.lifetime().map(|lt| LifetimeRef::new(&lt));\n                 let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::Reference(Box::new(inner_ty), lifetime, mutability)\n@@ -180,15 +180,15 @@ impl TypeRef {\n                         is_varargs = param.dotdotdot_token().is_some();\n                     }\n \n-                    pl.params().map(|p| p.ty()).map(|it| TypeRef::from_ast_opt(&ctx, it)).collect()\n+                    pl.params().map(|p| p.ty()).map(|it| TypeRef::from_ast_opt(ctx, it)).collect()\n                 } else {\n                     Vec::new()\n                 };\n                 params.push(ret_ty);\n                 TypeRef::Fn(params, is_varargs)\n             }\n             // for types are close enough for our purposes to the inner type for now...\n-            ast::Type::ForType(inner) => TypeRef::from_ast_opt(&ctx, inner.ty()),\n+            ast::Type::ForType(inner) => TypeRef::from_ast_opt(ctx, inner.ty()),\n             ast::Type::ImplTraitType(inner) => {\n                 TypeRef::ImplTrait(type_bounds_from_ast(ctx, inner.type_bound_list()))\n             }\n@@ -229,7 +229,7 @@ impl TypeRef {\n                 TypeRef::RawPtr(type_ref, _)\n                 | TypeRef::Reference(type_ref, ..)\n                 | TypeRef::Array(type_ref, _)\n-                | TypeRef::Slice(type_ref) => go(&type_ref, f),\n+                | TypeRef::Slice(type_ref) => go(type_ref, f),\n                 TypeRef::ImplTrait(bounds) | TypeRef::DynTrait(bounds) => {\n                     for bound in bounds {\n                         match bound.as_ref() {"}, {"sha": "51572226e38e064f338aeee27b3edcaa66d42e32", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -354,7 +354,7 @@ fn concat_expand(\n                 // concat works with string and char literals, so remove any quotes.\n                 // It also works with integer, float and boolean literals, so just use the rest\n                 // as-is.\n-                let component = unquote_str(&it).unwrap_or_else(|| it.text.to_string());\n+                let component = unquote_str(it).unwrap_or_else(|| it.text.to_string());\n                 text.push_str(&component);\n             }\n             // handle boolean literals\n@@ -417,7 +417,7 @@ fn parse_string(tt: &tt::Subtree) -> Result<String, mbe::ExpandError> {\n     tt.token_trees\n         .get(0)\n         .and_then(|tt| match tt {\n-            tt::TokenTree::Leaf(tt::Leaf::Literal(it)) => unquote_str(&it),\n+            tt::TokenTree::Leaf(tt::Leaf::Literal(it)) => unquote_str(it),\n             _ => None,\n         })\n         .ok_or_else(|| mbe::ExpandError::ConversionError)\n@@ -561,7 +561,7 @@ mod tests {\n     use syntax::ast::NameOwner;\n \n     fn expand_builtin_macro(ra_fixture: &str) -> String {\n-        let (db, file_id) = TestDB::with_single_file(&ra_fixture);\n+        let (db, file_id) = TestDB::with_single_file(ra_fixture);\n         let parsed = db.parse(file_id);\n         let mut macro_rules: Vec<_> =\n             parsed.syntax_node().descendants().filter_map(ast::MacroRules::cast).collect();"}, {"sha": "bc3ecc59301a76f295fbf48aa2f611eb211cd384", "filename": "crates/hir_expand/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_expand%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_expand%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Finput.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -78,7 +78,7 @@ mod tests {\n     use super::*;\n \n     fn test_remove_derives_up_to(attr: usize, ra_fixture: &str, expect: Expect) {\n-        let (db, file_id) = TestDB::with_single_file(&ra_fixture);\n+        let (db, file_id) = TestDB::with_single_file(ra_fixture);\n         let parsed = db.parse(file_id);\n \n         let mut items: Vec<_> ="}, {"sha": "3ad2d3bf738b0062b59e1b341ae25b4edd5330a0", "filename": "crates/hir_expand/src/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -51,7 +51,7 @@ impl ProcMacroExpander {\n                 // Proc macros have access to the environment variables of the invoking crate.\n                 let env = &krate_graph[calling_crate].env;\n \n-                proc_macro.expander.expand(&tt, attr_arg, &env).map_err(mbe::ExpandError::from)\n+                proc_macro.expander.expand(tt, attr_arg, env).map_err(mbe::ExpandError::from)\n             }\n             None => Err(mbe::ExpandError::UnresolvedProcMacro),\n         }"}, {"sha": "088d2791e307ce69837ab44c05c2ad11029453d6", "filename": "crates/hir_ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -528,7 +528,7 @@ impl SplitWildcard {\n                 smallvec![NonExhaustive]\n             }\n             TyKind::Never => SmallVec::new(),\n-            _ if cx.is_uninhabited(&pcx.ty) => SmallVec::new(),\n+            _ if cx.is_uninhabited(pcx.ty) => SmallVec::new(),\n             TyKind::Adt(..) | TyKind::Tuple(..) | TyKind::Ref(..) => smallvec![Single],\n             // This type is one for which we cannot list constructors, like `str` or `f64`.\n             _ => smallvec![NonExhaustive],"}, {"sha": "f5ac714446d4fc5d277475bbf091eb8ce295e332", "filename": "crates/hir_ty/src/diagnostics/match_check/usefulness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -645,7 +645,7 @@ impl SubPatSet {\n             (Seq { subpats: s_set }, Seq { subpats: mut o_set }) => {\n                 s_set.retain(|i, s_sub_set| {\n                     // Missing entries count as full.\n-                    let o_sub_set = o_set.remove(&i).unwrap_or(Full);\n+                    let o_sub_set = o_set.remove(i).unwrap_or(Full);\n                     s_sub_set.union(o_sub_set);\n                     // We drop full entries.\n                     !s_sub_set.is_full()\n@@ -656,7 +656,7 @@ impl SubPatSet {\n             (Alt { subpats: s_set, .. }, Alt { subpats: mut o_set, .. }) => {\n                 s_set.retain(|i, s_sub_set| {\n                     // Missing entries count as empty.\n-                    let o_sub_set = o_set.remove(&i).unwrap_or(Empty);\n+                    let o_sub_set = o_set.remove(i).unwrap_or(Empty);\n                     s_sub_set.union(o_sub_set);\n                     // We drop empty entries.\n                     !s_sub_set.is_empty()\n@@ -898,7 +898,7 @@ impl Usefulness {\n                 } else {\n                     witnesses\n                         .into_iter()\n-                        .map(|witness| witness.apply_constructor(pcx, &ctor, ctor_wild_subpatterns))\n+                        .map(|witness| witness.apply_constructor(pcx, ctor, ctor_wild_subpatterns))\n                         .collect()\n                 };\n                 WithWitnesses(new_witnesses)"}, {"sha": "9590c2e47bc8c238a6f1b8be3ed45e6aa474c54f", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -782,7 +782,7 @@ impl Expectation {\n     fn adjust_for_branches(&self, table: &mut unify::InferenceTable) -> Expectation {\n         match self {\n             Expectation::HasType(ety) => {\n-                let ety = table.resolve_ty_shallow(&ety);\n+                let ety = table.resolve_ty_shallow(ety);\n                 if !ety.is_ty_var() {\n                     Expectation::HasType(ety)\n                 } else {"}, {"sha": "8647d74372a6192727a6046e12ecf053277d25f3", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -109,7 +109,7 @@ impl<'a> InferenceContext<'a> {\n         }\n \n         // Consider coercing the subtype to a DST\n-        if let Ok(ret) = self.try_coerce_unsized(&from_ty, &to_ty) {\n+        if let Ok(ret) = self.try_coerce_unsized(&from_ty, to_ty) {\n             return Ok(ret);\n         }\n "}, {"sha": "4805c0a008c619dedbb1aa1f1e75f0d1051bcc54", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -54,7 +54,7 @@ impl<'a> InferenceContext<'a> {\n     /// Infer type of expression with possibly implicit coerce to the expected type.\n     /// Return the type after possible coercion.\n     pub(super) fn infer_expr_coerce(&mut self, expr: ExprId, expected: &Expectation) -> Ty {\n-        let ty = self.infer_expr_inner(expr, &expected);\n+        let ty = self.infer_expr_inner(expr, expected);\n         let ty = if let Some(target) = expected.only_has_type(&mut self.table) {\n             if !self.coerce(&ty, &target) {\n                 self.result\n@@ -135,11 +135,11 @@ impl<'a> InferenceContext<'a> {\n                 let mut both_arms_diverge = Diverges::Always;\n \n                 let mut result_ty = self.table.new_type_var();\n-                let then_ty = self.infer_expr_inner(*then_branch, &expected);\n+                let then_ty = self.infer_expr_inner(*then_branch, expected);\n                 both_arms_diverge &= mem::replace(&mut self.diverges, Diverges::Maybe);\n                 result_ty = self.coerce_merge_branch(Some(*then_branch), &result_ty, &then_ty);\n                 let else_ty = match else_branch {\n-                    Some(else_branch) => self.infer_expr_inner(*else_branch, &expected),\n+                    Some(else_branch) => self.infer_expr_inner(*else_branch, expected),\n                     None => TyBuilder::unit(),\n                 };\n                 both_arms_diverge &= self.diverges;\n@@ -330,8 +330,8 @@ impl<'a> InferenceContext<'a> {\n                 .infer_method_call(\n                     tgt_expr,\n                     *receiver,\n-                    &args,\n-                    &method_name,\n+                    args,\n+                    method_name,\n                     generic_args.as_deref(),\n                 ),\n             Expr::Match { expr, arms } => {\n@@ -993,7 +993,7 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn register_obligations_for_call(&mut self, callable_ty: &Ty) {\n-        let callable_ty = self.resolve_ty_shallow(&callable_ty);\n+        let callable_ty = self.resolve_ty_shallow(callable_ty);\n         if let TyKind::FnDef(fn_def, parameters) = callable_ty.kind(&Interner) {\n             let def: CallableDefId = from_chalk(self.db, *fn_def);\n             let generic_predicates = self.db.generic_predicates(def.into());"}, {"sha": "8f5db1f407fef5c7337b1b59de655b8841379b1d", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -192,7 +192,7 @@ impl<'a> InferenceContext<'a> {\n             Pat::Path(path) => {\n                 // FIXME use correct resolver for the surrounding expression\n                 let resolver = self.resolver.clone();\n-                self.infer_path(&resolver, &path, pat.into()).unwrap_or(self.err_ty())\n+                self.infer_path(&resolver, path, pat.into()).unwrap_or(self.err_ty())\n             }\n             Pat::Bind { mode, name: _, subpat } => {\n                 let mode = if mode == &BindingAnnotation::Unannotated {"}, {"sha": "056cdb5d5ba1b90a1d5a779b2976ae673e2e4f58", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -43,11 +43,11 @@ impl<'a> InferenceContext<'a> {\n             }\n             let ty = self.make_ty(type_ref);\n             let remaining_segments_for_ty = path.segments().take(path.segments().len() - 1);\n-            let ctx = crate::lower::TyLoweringContext::new(self.db, &resolver);\n+            let ctx = crate::lower::TyLoweringContext::new(self.db, resolver);\n             let (ty, _) = ctx.lower_ty_relative_path(ty, None, remaining_segments_for_ty);\n             self.resolve_ty_assoc_item(\n                 ty,\n-                &path.segments().last().expect(\"path had at least one segment\").name,\n+                path.segments().last().expect(\"path had at least one segment\").name,\n                 id,\n             )?\n         } else {\n@@ -154,7 +154,7 @@ impl<'a> InferenceContext<'a> {\n                 let segment =\n                     remaining_segments.last().expect(\"there should be at least one segment here\");\n \n-                self.resolve_ty_assoc_item(ty, &segment.name, id)\n+                self.resolve_ty_assoc_item(ty, segment.name, id)\n             }\n         }\n     }"}, {"sha": "5fef878e899e6156b6d0901f1c5953d4fef04edf", "filename": "crates/hir_ty/src/interner.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finterner.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -331,7 +331,7 @@ impl chalk_ir::interner::Interner for Interner {\n         &self,\n         clauses: &'a Self::InternedProgramClauses,\n     ) -> &'a [chalk_ir::ProgramClause<Self>] {\n-        &clauses\n+        clauses\n     }\n \n     fn intern_quantified_where_clauses<E>(\n@@ -373,7 +373,7 @@ impl chalk_ir::interner::Interner for Interner {\n         &self,\n         canonical_var_kinds: &'a Self::InternedCanonicalVarKinds,\n     ) -> &'a [chalk_ir::CanonicalVarKind<Self>] {\n-        &canonical_var_kinds\n+        canonical_var_kinds\n     }\n \n     fn intern_constraints<E>(\n@@ -413,7 +413,7 @@ impl chalk_ir::interner::Interner for Interner {\n         &self,\n         variances: &'a Self::InternedVariances,\n     ) -> &'a [chalk_ir::Variance] {\n-        &variances\n+        variances\n     }\n }\n "}, {"sha": "0b8f21e5df1be0362f0881d25832be51139a09d4", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -238,7 +238,7 @@ impl<'a> TyLoweringContext<'a> {\n                         // away instead of two.\n                         let actual_opaque_type_data = self\n                             .with_debruijn(DebruijnIndex::INNERMOST, |ctx| {\n-                                ctx.lower_impl_trait(&bounds)\n+                                ctx.lower_impl_trait(bounds)\n                             });\n                         self.opaque_type_data.borrow_mut()[idx as usize] = actual_opaque_type_data;\n \n@@ -421,7 +421,7 @@ impl<'a> TyLoweringContext<'a> {\n                     let found = self\n                         .db\n                         .trait_data(trait_ref.hir_trait_id())\n-                        .associated_type_by_name(&segment.name);\n+                        .associated_type_by_name(segment.name);\n                     match found {\n                         Some(associated_ty) => {\n                             // FIXME handle type parameters on the segment\n@@ -505,7 +505,7 @@ impl<'a> TyLoweringContext<'a> {\n     pub(crate) fn lower_path(&self, path: &Path) -> (Ty, Option<TypeNs>) {\n         // Resolve the path (in type namespace)\n         if let Some(type_ref) = path.type_anchor() {\n-            let (ty, res) = self.lower_ty_ext(&type_ref);\n+            let (ty, res) = self.lower_ty_ext(type_ref);\n             return self.lower_ty_relative_path(ty, res, path.segments());\n         }\n         let (resolution, remaining_index) ="}, {"sha": "8c00a636995389f7414beba841efaab9ab6c40da", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -372,7 +372,7 @@ pub(crate) fn lookup_method(\n         db,\n         env,\n         krate,\n-        &traits_in_scope,\n+        traits_in_scope,\n         visible_from_module,\n         Some(name),\n         LookupMode::MethodCall,\n@@ -484,7 +484,7 @@ fn iterate_method_candidates_impl(\n         LookupMode::Path => {\n             // No autoderef for path lookups\n             iterate_method_candidates_for_self_ty(\n-                &ty,\n+                ty,\n                 db,\n                 env,\n                 krate,\n@@ -513,7 +513,7 @@ fn iterate_method_candidates_with_autoref(\n         db,\n         env.clone(),\n         krate,\n-        &traits_in_scope,\n+        traits_in_scope,\n         visible_from_module,\n         name,\n         &mut callback,\n@@ -531,7 +531,7 @@ fn iterate_method_candidates_with_autoref(\n         db,\n         env.clone(),\n         krate,\n-        &traits_in_scope,\n+        traits_in_scope,\n         visible_from_module,\n         name,\n         &mut callback,\n@@ -549,7 +549,7 @@ fn iterate_method_candidates_with_autoref(\n         db,\n         env,\n         krate,\n-        &traits_in_scope,\n+        traits_in_scope,\n         visible_from_module,\n         name,\n         &mut callback,\n@@ -593,7 +593,7 @@ fn iterate_method_candidates_by_receiver(\n             db,\n             env.clone(),\n             krate,\n-            &traits_in_scope,\n+            traits_in_scope,\n             name,\n             Some(receiver_ty),\n             &mut callback,\n@@ -870,7 +870,7 @@ fn transform_receiver_ty(\n             .fill_with_unknown()\n             .build(),\n         AssocContainerId::ImplId(impl_id) => {\n-            let impl_substs = inherent_impl_substs(db, env, impl_id, &self_ty)?;\n+            let impl_substs = inherent_impl_substs(db, env, impl_id, self_ty)?;\n             TyBuilder::subst_for_def(db, function_id)\n                 .use_parent_substs(&impl_substs)\n                 .fill_with_unknown()"}, {"sha": "31d5cfedca0fd3f2a9fee3fc90222604f12ae945", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -208,7 +208,7 @@ pub(crate) fn diagnostics(\n     match sema.to_module_def(file_id) {\n         Some(m) => m.diagnostics(db, &mut sink, internal_diagnostics),\n         None => {\n-            sink.push(UnlinkedFile { file_id, node: SyntaxNodePtr::new(&parse.tree().syntax()) });\n+            sink.push(UnlinkedFile { file_id, node: SyntaxNodePtr::new(parse.tree().syntax()) });\n         }\n     }\n \n@@ -222,7 +222,7 @@ fn diagnostic_with_fix<D: DiagnosticWithFixes>(\n     resolve: &AssistResolveStrategy,\n ) -> Diagnostic {\n     Diagnostic::error(sema.diagnostics_display_range(d.display_source()).range, d.message())\n-        .with_fixes(d.fixes(&sema, resolve))\n+        .with_fixes(d.fixes(sema, resolve))\n         .with_code(Some(d.code()))\n }\n \n@@ -232,7 +232,7 @@ fn warning_with_fix<D: DiagnosticWithFixes>(\n     resolve: &AssistResolveStrategy,\n ) -> Diagnostic {\n     Diagnostic::hint(sema.diagnostics_display_range(d.display_source()).range, d.message())\n-        .with_fixes(d.fixes(&sema, resolve))\n+        .with_fixes(d.fixes(sema, resolve))\n         .with_code(Some(d.code()))\n }\n "}, {"sha": "f6e45967ad2d75005b5a7fcbaf5a613ba3040fc5", "filename": "crates/ide/src/diagnostics/fixes/create_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fcreate_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fcreate_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fcreate_field.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -18,7 +18,7 @@ impl DiagnosticWithFixes for NoSuchField {\n     ) -> Option<Vec<Assist>> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         missing_record_expr_field_fixes(\n-            &sema,\n+            sema,\n             self.file.original_file(sema.db),\n             &self.field.to_node(&root),\n         )"}, {"sha": "c76f6008a3096257b04d2d14d5e009623812276c", "filename": "crates/ide/src/diagnostics/fixes/fill_missing_fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Ffill_missing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Ffill_missing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Ffill_missing_fields.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -37,15 +37,15 @@ impl DiagnosticWithFixes for MissingFields {\n \n         let edit = {\n             let mut builder = TextEdit::builder();\n-            algo::diff(&old_field_list.syntax(), &new_field_list.syntax())\n+            algo::diff(old_field_list.syntax(), new_field_list.syntax())\n                 .into_text_edit(&mut builder);\n             builder.finish()\n         };\n         Some(vec![fix(\n             \"fill_missing_fields\",\n             \"Fill struct fields\",\n             SourceChange::from_text_edit(self.file.original_file(sema.db), edit),\n-            sema.original_range(&field_list_parent.syntax()).range,\n+            sema.original_range(field_list_parent.syntax()).range,\n         )])\n     }\n }"}, {"sha": "774952d962af5f0f095cde88294a486ecb263eae", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -151,18 +151,18 @@ pub(crate) fn resolve_doc_path_for_def(\n ) -> Option<hir::ModuleDef> {\n     match def {\n         Definition::ModuleDef(def) => match def {\n-            hir::ModuleDef::Module(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Function(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Adt(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Variant(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Const(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Static(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Trait(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::TypeAlias(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Module(it) => it.resolve_doc_path(db, link, ns),\n+            hir::ModuleDef::Function(it) => it.resolve_doc_path(db, link, ns),\n+            hir::ModuleDef::Adt(it) => it.resolve_doc_path(db, link, ns),\n+            hir::ModuleDef::Variant(it) => it.resolve_doc_path(db, link, ns),\n+            hir::ModuleDef::Const(it) => it.resolve_doc_path(db, link, ns),\n+            hir::ModuleDef::Static(it) => it.resolve_doc_path(db, link, ns),\n+            hir::ModuleDef::Trait(it) => it.resolve_doc_path(db, link, ns),\n+            hir::ModuleDef::TypeAlias(it) => it.resolve_doc_path(db, link, ns),\n             hir::ModuleDef::BuiltinType(_) => None,\n         },\n-        Definition::Macro(it) => it.resolve_doc_path(db, &link, ns),\n-        Definition::Field(it) => it.resolve_doc_path(db, &link, ns),\n+        Definition::Macro(it) => it.resolve_doc_path(db, link, ns),\n+        Definition::Field(it) => it.resolve_doc_path(db, link, ns),\n         Definition::SelfType(_)\n         | Definition::Local(_)\n         | Definition::GenericParam(_)"}, {"sha": "c7ec87edf14463895d276b3b58a181e406e878d8", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -328,7 +328,7 @@ mod tests {\n     use super::*;\n \n     fn do_check(before: &str, afters: &[&str]) {\n-        let (analysis, position) = fixture::position(&before);\n+        let (analysis, position) = fixture::position(before);\n         let before = analysis.file_text(position.file_id).unwrap();\n         let range = TextRange::empty(position.offset);\n         let mut frange = FileRange { file_id: position.file_id, range };"}, {"sha": "27a292d83edaad56da60414ccf3b3dec1590ccd1", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -57,7 +57,7 @@ pub(crate) fn goto_definition(\n             },\n             ast::Name(name) => {\n                 let def = NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db);\n-                try_find_trait_item_definition(&sema.db, &def)\n+                try_find_trait_item_definition(sema.db, &def)\n                     .or_else(|| def.try_to_nav(sema.db))\n             },\n             ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {"}, {"sha": "b4b3b45b565a1c8ce2b9e49e14c25c591f66b55c", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -288,7 +288,7 @@ fn runnable_action(\n ) -> Option<HoverAction> {\n     match def {\n         Definition::ModuleDef(it) => match it {\n-            ModuleDef::Module(it) => runnable_mod(&sema, it).map(|it| HoverAction::Runnable(it)),\n+            ModuleDef::Module(it) => runnable_mod(sema, it).map(|it| HoverAction::Runnable(it)),\n             ModuleDef::Function(func) => {\n                 let src = func.source(sema.db)?;\n                 if src.file_id != file_id.into() {\n@@ -297,7 +297,7 @@ fn runnable_action(\n                     return None;\n                 }\n \n-                runnable_fn(&sema, func).map(HoverAction::Runnable)\n+                runnable_fn(sema, func).map(HoverAction::Runnable)\n             }\n             _ => None,\n         },\n@@ -432,7 +432,7 @@ fn hover_for_definition(\n     return match def {\n         Definition::Macro(it) => match &it.source(db)?.value {\n             Either::Left(mac) => {\n-                let label = macro_label(&mac);\n+                let label = macro_label(mac);\n                 from_def_source_labeled(db, it, Some(label), mod_path)\n             }\n             Either::Right(_) => {\n@@ -516,7 +516,7 @@ fn hover_for_keyword(\n     if !token.kind().is_keyword() {\n         return None;\n     }\n-    let famous_defs = FamousDefs(&sema, sema.scope(&token.parent()?).krate());\n+    let famous_defs = FamousDefs(sema, sema.scope(&token.parent()?).krate());\n     // std exposes {}_keyword modules with docstrings on the root to document keywords\n     let keyword_mod = format!(\"{}_keyword\", token.text());\n     let doc_owner = find_std_module(&famous_defs, &keyword_mod)?;"}, {"sha": "9cd33d0e450bb9ea2935a4b3e7fff40b0fa09466", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -96,7 +96,7 @@ fn get_chaining_hints(\n     }\n \n     let krate = sema.scope(expr.syntax()).module().map(|it| it.krate());\n-    let famous_defs = FamousDefs(&sema, krate);\n+    let famous_defs = FamousDefs(sema, krate);\n \n     let mut tokens = expr\n         .syntax()\n@@ -165,7 +165,7 @@ fn get_param_name_hints(\n             };\n             Some((param_name, arg))\n         })\n-        .filter(|(param_name, arg)| !should_hide_param_name_hint(sema, &callable, param_name, &arg))\n+        .filter(|(param_name, arg)| !should_hide_param_name_hint(sema, &callable, param_name, arg))\n         .map(|(param_name, arg)| InlayHint {\n             range: arg.syntax().text_range(),\n             kind: InlayKind::ParameterHint,\n@@ -187,7 +187,7 @@ fn get_bind_pat_hints(\n     }\n \n     let krate = sema.scope(pat.syntax()).module().map(|it| it.krate());\n-    let famous_defs = FamousDefs(&sema, krate);\n+    let famous_defs = FamousDefs(sema, krate);\n \n     let ty = sema.type_of_pat(&pat.clone().into())?;\n "}, {"sha": "93d3760bf2598965ddde7e001e74ab506a323c0c", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -60,7 +60,7 @@ fn remove_newlines(edit: &mut TextEditBuilder, token: &SyntaxToken, range: TextR\n         let pos: TextSize = (pos as u32).into();\n         let offset = token.text_range().start() + range.start() + pos;\n         if !edit.invalidates_offset(offset) {\n-            remove_newline(edit, &token, offset);\n+            remove_newline(edit, token, offset);\n         }\n     }\n }"}, {"sha": "0511efae3834e96043ec24a2188c4bd5a87a2492", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -282,20 +282,20 @@ impl Analysis {\n         file_id: FileId,\n         text_range: Option<TextRange>,\n     ) -> Cancellable<String> {\n-        self.with_db(|db| syntax_tree::syntax_tree(&db, file_id, text_range))\n+        self.with_db(|db| syntax_tree::syntax_tree(db, file_id, text_range))\n     }\n \n     pub fn view_hir(&self, position: FilePosition) -> Cancellable<String> {\n-        self.with_db(|db| view_hir::view_hir(&db, position))\n+        self.with_db(|db| view_hir::view_hir(db, position))\n     }\n \n     pub fn view_item_tree(&self, file_id: FileId) -> Cancellable<String> {\n-        self.with_db(|db| view_item_tree::view_item_tree(&db, file_id))\n+        self.with_db(|db| view_item_tree::view_item_tree(db, file_id))\n     }\n \n     /// Renders the crate graph to GraphViz \"dot\" syntax.\n     pub fn view_crate_graph(&self) -> Cancellable<Result<String, String>> {\n-        self.with_db(|db| view_crate_graph::view_crate_graph(&db))\n+        self.with_db(|db| view_crate_graph::view_crate_graph(db))\n     }\n \n     pub fn expand_macro(&self, position: FilePosition) -> Cancellable<Option<ExpandedMacro>> {\n@@ -315,7 +315,7 @@ impl Analysis {\n     /// up minor stuff like continuing the comment.\n     /// The edit will be a snippet (with `$0`).\n     pub fn on_enter(&self, position: FilePosition) -> Cancellable<Option<TextEdit>> {\n-        self.with_db(|db| typing::on_enter(&db, position))\n+        self.with_db(|db| typing::on_enter(db, position))\n     }\n \n     /// Returns an edit which should be applied after a character was typed.\n@@ -331,7 +331,7 @@ impl Analysis {\n         if !typing::TRIGGER_CHARS.contains(char_typed) {\n             return Ok(None);\n         }\n-        self.with_db(|db| typing::on_char_typed(&db, position, char_typed))\n+        self.with_db(|db| typing::on_char_typed(db, position, char_typed))\n     }\n \n     /// Returns a tree representation of symbols in the file. Useful to draw a"}, {"sha": "a0fdead2c169704dac4ee2b11ab4b006dec43c9a", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -62,7 +62,7 @@ pub(crate) fn find_all_refs(\n         if let Some(name) = get_name_of_item_declaration(&syntax, position) {\n             (NameClass::classify(sema, &name)?.referenced_or_defined(sema.db), true)\n         } else {\n-            (find_def(&sema, &syntax, position)?, false)\n+            (find_def(sema, &syntax, position)?, false)\n         };\n \n     let mut usages = def.usages(sema).set_scope(search_scope).include_self_refs().all();"}, {"sha": "02b171bdaa38daa30f3cc84aac5124b372b55333", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -64,7 +64,7 @@ pub(crate) fn prepare_rename(\n         }\n     };\n     let name_like = sema\n-        .find_node_at_offset_with_descend(&syntax, position.offset)\n+        .find_node_at_offset_with_descend(syntax, position.offset)\n         .ok_or_else(|| format_err!(\"No references found at position\"))?;\n     let node = match &name_like {\n         ast::NameLike::Name(it) => it.syntax(),\n@@ -104,7 +104,7 @@ pub(crate) fn rename_with_semantics(\n \n     let def = find_definition(sema, syntax, position)?;\n     match def {\n-        Definition::ModuleDef(ModuleDef::Module(module)) => rename_mod(&sema, module, new_name),\n+        Definition::ModuleDef(ModuleDef::Module(module)) => rename_mod(sema, module, new_name),\n         Definition::SelfType(_) => bail!(\"Cannot rename `Self`\"),\n         Definition::ModuleDef(ModuleDef::BuiltinType(_)) => bail!(\"Cannot rename builtin type\"),\n         def => rename_reference(sema, def, new_name),\n@@ -323,7 +323,7 @@ fn rename_reference(\n     }\n     let mut source_change = SourceChange::default();\n     source_change.extend(usages.iter().map(|(&file_id, references)| {\n-        (file_id, source_edit_from_references(&references, def, new_name))\n+        (file_id, source_edit_from_references(references, def, new_name))\n     }));\n \n     let (file_id, edit) = source_edit_from_def(sema, def, new_name)?;\n@@ -413,7 +413,7 @@ fn rename_self_to_param(\n     let mut source_change = SourceChange::default();\n     source_change.insert_source_edit(file_id.original_file(sema.db), edit);\n     source_change.extend(usages.iter().map(|(&file_id, references)| {\n-        (file_id, source_edit_from_references(&references, def, new_name))\n+        (file_id, source_edit_from_references(references, def, new_name))\n     }));\n     Ok(source_change)\n }"}, {"sha": "03faabadca688c551d31d514d46d2156ffbed069", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -158,7 +158,7 @@ fn find_related_tests(\n     search_scope: Option<SearchScope>,\n     tests: &mut FxHashSet<Runnable>,\n ) {\n-    if let Some(refs) = references::find_all_refs(&sema, position, search_scope) {\n+    if let Some(refs) = references::find_all_refs(sema, position, search_scope) {\n         for (file_id, refs) in refs.references {\n             let file = sema.parse(file_id);\n             let file = file.syntax();\n@@ -169,10 +169,10 @@ fn find_related_tests(\n             });\n \n             for fn_def in functions {\n-                if let Some(runnable) = as_test_runnable(&sema, &fn_def) {\n+                if let Some(runnable) = as_test_runnable(sema, &fn_def) {\n                     // direct test\n                     tests.insert(runnable);\n-                } else if let Some(module) = parent_test_module(&sema, &fn_def) {\n+                } else if let Some(module) = parent_test_module(sema, &fn_def) {\n                     // indirect test\n                     find_related_tests_in_module(sema, &fn_def, &module, tests);\n                 }\n@@ -203,7 +203,7 @@ fn find_related_tests_in_module(\n }\n \n fn as_test_runnable(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Option<Runnable> {\n-    if test_related_attribute(&fn_def).is_some() {\n+    if test_related_attribute(fn_def).is_some() {\n         let function = sema.to_def(fn_def)?;\n         runnable_fn(sema, function)\n     } else {"}, {"sha": "e186b82b7ca36183d4e74d976956852398165361", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -323,7 +323,7 @@ fn traverse(\n         if let Some(token) = element.as_token().cloned().and_then(ast::String::cast) {\n             if token.is_raw() {\n                 let expanded = element_to_highlight.as_token().unwrap().clone();\n-                if inject::ra_fixture(hl, &sema, token, expanded).is_some() {\n+                if inject::ra_fixture(hl, sema, token, expanded).is_some() {\n                     continue;\n                 }\n             }\n@@ -334,7 +334,7 @@ fn traverse(\n         }\n \n         if let Some((mut highlight, binding_hash)) = highlight::element(\n-            &sema,\n+            sema,\n             krate,\n             &mut bindings_shadow_count,\n             syntactic_name_ref_highlighting,"}, {"sha": "8c0e553c035975911c94e1a16e6e383b705742ba", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -449,12 +449,12 @@ fn highlight_method_call(\n     krate: Option<hir::Crate>,\n     method_call: &ast::MethodCallExpr,\n ) -> Option<Highlight> {\n-    let func = sema.resolve_method_call(&method_call)?;\n+    let func = sema.resolve_method_call(method_call)?;\n \n     let mut h = SymbolKind::Function.into();\n     h |= HlMod::Associated;\n \n-    if func.is_unsafe(sema.db) || sema.is_unsafe_method_call(&method_call) {\n+    if func.is_unsafe(sema.db) || sema.is_unsafe_method_call(method_call) {\n         h |= HlMod::Unsafe;\n     }\n     if func.is_async(sema.db) {"}, {"sha": "478facfee8b268a695bb30f14929427272760315", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n     let hl_ranges = highlight(db, file_id, None, false);\n     let text = parse.tree().syntax().to_string();\n     let mut buf = String::new();\n-    buf.push_str(&STYLE);\n+    buf.push_str(STYLE);\n     buf.push_str(\"<pre><code>\");\n     for r in &hl_ranges {\n         let chunk = html_escape(&text[r.range]);"}, {"sha": "883252c0e534dc3eb72f31864451a9b76b8c0b60", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -23,7 +23,7 @@ pub(super) fn ra_fixture(\n     literal: ast::String,\n     expanded: SyntaxToken,\n ) -> Option<()> {\n-    let active_parameter = ActiveParameter::at_token(&sema, expanded)?;\n+    let active_parameter = ActiveParameter::at_token(sema, expanded)?;\n     if !active_parameter.ident().map_or(false, |name| name.text().starts_with(\"ra_fixture\")) {\n         return None;\n     }\n@@ -124,7 +124,7 @@ pub(super) fn doc_comment(\n     }\n \n     for attr in attributes.by_key(\"doc\").attrs() {\n-        let InFile { file_id, value: src } = attrs_source_map.source_of(&attr);\n+        let InFile { file_id, value: src } = attrs_source_map.source_of(attr);\n         if file_id != node.file_id {\n             continue;\n         }"}, {"sha": "5cba9d11d004d982c9700063ff137c428f49793f", "filename": "crates/ide/src/typing/on_enter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -88,12 +88,12 @@ fn on_enter_in_comment(\n         if comment.text().ends_with(' ') {\n             cov_mark::hit!(continues_end_of_line_comment_with_space);\n             remove_trailing_whitespace = true;\n-        } else if !followed_by_comment(&comment) {\n+        } else if !followed_by_comment(comment) {\n             return None;\n         }\n     }\n \n-    let indent = node_indent(&file, comment.syntax())?;\n+    let indent = node_indent(file, comment.syntax())?;\n     let inserted = format!(\"\\n{}{} $0\", indent, prefix);\n     let delete = if remove_trailing_whitespace {\n         let trimmed_len = comment.text().trim_end().len() as u32;\n@@ -188,7 +188,7 @@ mod tests {\n     use crate::fixture;\n \n     fn apply_on_enter(before: &str) -> Option<String> {\n-        let (analysis, position) = fixture::position(&before);\n+        let (analysis, position) = fixture::position(before);\n         let result = analysis.on_enter(position).unwrap()?;\n \n         let mut actual = analysis.file_text(position.file_id).unwrap().to_string();"}, {"sha": "749e8685bf18e24e8af4f513545e3b86202b2b52", "filename": "crates/ide_assists/src/handlers/convert_comment_block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -88,7 +88,7 @@ fn line_to_block(acc: &mut Assists, comment: ast::Comment) -> Option<()> {\n             // We pick a single indentation level for the whole block comment based on the\n             // comment where the assist was invoked. This will be prepended to the\n             // contents of each line comment when they're put into the block comment.\n-            let indentation = IndentLevel::from_token(&comment.syntax());\n+            let indentation = IndentLevel::from_token(comment.syntax());\n \n             let block_comment_body =\n                 comments.into_iter().map(|c| line_comment_text(indentation, c)).join(\"\\n\");\n@@ -167,7 +167,7 @@ fn line_comment_text(indentation: IndentLevel, comm: ast::Comment) -> String {\n     if contents.is_empty() {\n         contents.to_owned()\n     } else {\n-        indentation.to_string() + &contents\n+        indentation.to_string() + contents\n     }\n }\n "}, {"sha": "ef4a7cb50c8d9a753228a9ad8b0cf32a655957cc", "filename": "crates/ide_assists/src/handlers/early_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -108,7 +108,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n         \"Convert to guarded return\",\n         target,\n         |edit| {\n-            let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n+            let if_indent_level = IndentLevel::from_node(if_expr.syntax());\n             let new_block = match if_let_pat {\n                 None => {\n                     // If.\n@@ -174,7 +174,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                         .take_while(|i| *i != end_of_then),\n                 );\n                 replace_children(\n-                    &parent_block.syntax(),\n+                    parent_block.syntax(),\n                     RangeInclusive::new(\n                         if_expr.clone().syntax().clone().into(),\n                         if_expr.syntax().clone().into(),"}, {"sha": "63d28480afd46ed27d29ddfe81f66642af34c427", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -76,7 +76,7 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n     let module = ctx.sema.scope(&insert_after).module()?;\n \n     let vars_defined_in_body_and_outlive =\n-        vars_defined_in_body_and_outlive(ctx, &body, &node.parent().as_ref().unwrap_or(&node));\n+        vars_defined_in_body_and_outlive(ctx, &body, node.parent().as_ref().unwrap_or(&node));\n     let ret_ty = body_return_ty(ctx, &body)?;\n \n     // FIXME: we compute variables that outlive here just to check `never!` condition\n@@ -808,7 +808,7 @@ trait HasTokenAtOffset {\n \n impl HasTokenAtOffset for SyntaxNode {\n     fn token_at_offset(&self, offset: TextSize) -> TokenAtOffset<SyntaxToken> {\n-        SyntaxNode::token_at_offset(&self, offset)\n+        SyntaxNode::token_at_offset(self, offset)\n     }\n }\n \n@@ -854,7 +854,7 @@ fn vars_defined_in_body_and_outlive(\n     body: &FunctionBody,\n     parent: &SyntaxNode,\n ) -> Vec<OutlivedLocal> {\n-    let vars_defined_in_body = vars_defined_in_body(&body, ctx);\n+    let vars_defined_in_body = vars_defined_in_body(body, ctx);\n     vars_defined_in_body\n         .into_iter()\n         .filter_map(|var| var_outlives_body(ctx, body, var, parent))\n@@ -868,7 +868,7 @@ fn is_defined_before(\n     src: &hir::InFile<Either<ast::IdentPat, ast::SelfParam>>,\n ) -> bool {\n     src.file_id.original_file(ctx.db()) == ctx.frange.file_id\n-        && !body.contains_node(&either_syntax(&src.value))\n+        && !body.contains_node(either_syntax(&src.value))\n }\n \n fn either_syntax(value: &Either<ast::IdentPat, ast::SelfParam>) -> &SyntaxNode {"}, {"sha": "c8bc923f5d6d01834e6192b4aeecbee59c13314b", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -212,7 +212,7 @@ impl ExtendedEnum {\n }\n \n fn resolve_enum_def(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<ExtendedEnum> {\n-    sema.type_of_expr(&expr)?.autoderef(sema.db).find_map(|ty| match ty.as_adt() {\n+    sema.type_of_expr(expr)?.autoderef(sema.db).find_map(|ty| match ty.as_adt() {\n         Some(Adt::Enum(e)) => Some(ExtendedEnum::Enum(e)),\n         _ => {\n             if ty.is_bool() {\n@@ -228,7 +228,7 @@ fn resolve_tuple_of_enum_def(\n     sema: &Semantics<RootDatabase>,\n     expr: &ast::Expr,\n ) -> Option<Vec<ExtendedEnum>> {\n-    sema.type_of_expr(&expr)?\n+    sema.type_of_expr(expr)?\n         .tuple_fields(sema.db)\n         .iter()\n         .map(|ty| {"}, {"sha": "9b432e92ffc95bef98ab20775c349ac1838014c8", "filename": "crates/ide_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -43,7 +43,7 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n         _ => return None,\n     };\n \n-    let current_module = ctx.sema.scope(&path.syntax()).module()?;\n+    let current_module = ctx.sema.scope(path.syntax()).module()?;\n     let target_module = def.module(ctx.db())?;\n \n     let vis = target_module.visibility_of(ctx.db(), &def)?;"}, {"sha": "24939f2622adb050417169a5822d4ae4088ddd88", "filename": "crates/ide_assists/src/handlers/generate_enum_is_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) ->\n     let fn_name = format!(\"is_{}\", &to_lower_snake_case(&variant_name.text()));\n \n     // Return early if we've found an existing new fn\n-    let impl_def = find_struct_impl(&ctx, &parent_enum, &fn_name)?;\n+    let impl_def = find_struct_impl(ctx, &parent_enum, &fn_name)?;\n \n     let target = variant.syntax().text_range();\n     acc.add("}, {"sha": "986fb2315562d609e58ed9d101e8f218eb2b8edc", "filename": "crates/ide_assists/src/handlers/generate_enum_projection_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -136,7 +136,7 @@ fn generate_enum_projection_method(\n         format!(\"{}_{}\", props.fn_name_prefix, &to_lower_snake_case(&variant_name.text()));\n \n     // Return early if we've found an existing new fn\n-    let impl_def = find_struct_impl(&ctx, &parent_enum, &fn_name)?;\n+    let impl_def = find_struct_impl(ctx, &parent_enum, &fn_name)?;\n \n     let target = variant.syntax().text_range();\n     acc.add(AssistId(assist_id, AssistKind::Generate), assist_description, target, |builder| {"}, {"sha": "706c995ac6fc3b5e14632a01aca336f6bd007663", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn generate_function(acc: &mut Assists, ctx: &AssistContext) -> Optio\n         None => None,\n     };\n \n-    let function_builder = FunctionBuilder::from_call(&ctx, &call, &path, target_module)?;\n+    let function_builder = FunctionBuilder::from_call(ctx, &call, &path, target_module)?;\n \n     let target = call.syntax().text_range();\n     acc.add(\n@@ -128,12 +128,12 @@ impl FunctionBuilder {\n                 file = in_file;\n                 target\n             }\n-            None => next_space_for_fn_after_call_site(&call)?,\n+            None => next_space_for_fn_after_call_site(call)?,\n         };\n         let needs_pub = target_module.is_some();\n         let target_module = target_module.or_else(|| ctx.sema.scope(target.syntax()).module())?;\n-        let fn_name = fn_name(&path)?;\n-        let (type_params, params) = fn_args(ctx, target_module, &call)?;\n+        let fn_name = fn_name(path)?;\n+        let (type_params, params) = fn_args(ctx, target_module, call)?;\n \n         // should_render_snippet intends to express a rough level of confidence about\n         // the correctness of the return type."}, {"sha": "cc020c92c522ba868a5649bdbad93d4347b2cd68", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -75,7 +75,7 @@ pub(crate) fn generate_getter_impl(\n     if mutable {\n         format_to!(fn_name, \"_mut\");\n     }\n-    let impl_def = find_struct_impl(&ctx, &ast::Adt::Struct(strukt.clone()), fn_name.as_str())?;\n+    let impl_def = find_struct_impl(ctx, &ast::Adt::Struct(strukt.clone()), fn_name.as_str())?;\n \n     let (id, label) = if mutable {\n         (\"generate_getter_mut\", \"Generate a mut getter method\")"}, {"sha": "b65e8387b00b5ff60c36ff296f7d1b6b48ce2c80", "filename": "crates/ide_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -36,7 +36,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     };\n \n     // Return early if we've found an existing new fn\n-    let impl_def = find_struct_impl(&ctx, &ast::Adt::Struct(strukt.clone()), \"new\")?;\n+    let impl_def = find_struct_impl(ctx, &ast::Adt::Struct(strukt.clone()), \"new\")?;\n \n     let target = strukt.syntax().text_range();\n     acc.add(AssistId(\"generate_new\", AssistKind::Generate), \"Generate `new`\", target, |builder| {"}, {"sha": "5bdf6b3f44a3956b481c300a5d08e4992d2314df", "filename": "crates/ide_assists/src/handlers/generate_setter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn generate_setter(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     // Return early if we've found an existing fn\n     let fn_name = to_lower_snake_case(&field_name.to_string());\n     let impl_def = find_struct_impl(\n-        &ctx,\n+        ctx,\n         &ast::Adt::Struct(strukt.clone()),\n         format!(\"set_{}\", fn_name).as_str(),\n     )?;"}, {"sha": "b20fe992d89c20f7914b46ed6f473fc79b3a291a", "filename": "crates/ide_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -85,7 +85,7 @@ fn whitespace_start(it: SyntaxElement) -> Option<TextSize> {\n }\n \n fn adjusted_macro_contents(macro_call: &ast::MacroCall) -> Option<String> {\n-    let contents = get_valid_macrocall_contents(&macro_call, \"dbg\")?;\n+    let contents = get_valid_macrocall_contents(macro_call, \"dbg\")?;\n     let macro_text_with_brackets = macro_call.token_tree()?.syntax().text();\n     let macro_text_in_brackets = macro_text_with_brackets.slice(TextRange::new(\n         TextSize::of('('),"}, {"sha": "f6a926042c139c3919d10975d0575580b64d902d", "filename": "crates/ide_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn reorder_fields(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         .or_else(|| ctx.find_node_at_offset::<ast::RecordPat>().map(Either::Right))?;\n \n     let path = record.as_ref().either(|it| it.path(), |it| it.path())?;\n-    let ranks = compute_fields_ranks(&path, &ctx)?;\n+    let ranks = compute_fields_ranks(&path, ctx)?;\n     let get_rank_of_field =\n         |of: Option<_>| *ranks.get(&of.unwrap_or_default()).unwrap_or(&usize::MAX);\n "}, {"sha": "f9474c9f58331a78ada41551dbe9ed2abe68980b", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -112,7 +112,7 @@ fn add_assist(\n             let insert_pos = adt.syntax().text_range().end();\n             let impl_def_with_items =\n                 impl_def_from_trait(&ctx.sema, &annotated_name, trait_, trait_path);\n-            update_attribute(builder, &input, &trait_name, &attr);\n+            update_attribute(builder, input, &trait_name, attr);\n             let trait_path = format!(\"{}\", trait_path);\n             match (ctx.config.snippet_cap, impl_def_with_items) {\n                 (None, _) => {"}, {"sha": "9404aa26dbe93068065c968dafa8c1f92a3f1ab7", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -169,7 +169,7 @@ pub(crate) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext)\n }\n \n fn is_pat_wildcard_or_sad(sema: &hir::Semantics<RootDatabase>, pat: &ast::Pat) -> bool {\n-    sema.type_of_pat(&pat)\n+    sema.type_of_pat(pat)\n         .and_then(|ty| TryEnum::from_ty(sema, &ty))\n         .map(|it| it.sad_pattern().syntax().text() == pat.syntax().text())\n         .unwrap_or_else(|| matches!(pat, ast::Pat::WildcardPat(_)))"}, {"sha": "140e27356fedd4f6c63da3579253b942bba1d433", "filename": "crates/ide_assists/src/handlers/wrap_return_type_in_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -123,7 +123,7 @@ impl TailReturnCollector {\n     fn handle_exprs(&mut self, expr: &Expr, collect_break: bool) {\n         match expr {\n             Expr::BlockExpr(block_expr) => {\n-                self.collect_jump_exprs(&block_expr, collect_break);\n+                self.collect_jump_exprs(block_expr, collect_break);\n             }\n             Expr::ReturnExpr(ret_expr) => {\n                 if let Some(ret_expr_arg) = &ret_expr.expr() {"}, {"sha": "bdf9cb71c5fcd287a863b3cdcb87909e868ccb9e", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -74,7 +74,7 @@ pub(crate) fn check_assist_unresolved(assist: Handler, ra_fixture: &str) {\n #[track_caller]\n fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let after = trim_indent(after);\n-    let (db, file_id, selection) = RootDatabase::with_range_or_offset(&before);\n+    let (db, file_id, selection) = RootDatabase::with_range_or_offset(before);\n     let before = db.file_text(file_id).to_string();\n     let frange = FileRange { file_id, range: selection.into() };\n "}, {"sha": "068df005bfaa218cc8e9343cfc1210c8b354628b", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -492,7 +492,7 @@ pub(crate) fn add_method_to_adt(\n     let start_offset = impl_def\n         .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n         .unwrap_or_else(|| {\n-            buf = generate_impl_text(&adt, &buf);\n+            buf = generate_impl_text(adt, &buf);\n             adt.syntax().text_range().end()\n         });\n "}, {"sha": "cb8bc8b2fe502cfde95d71faae29fbdbb738d2d4", "filename": "crates/ide_assists/src/utils/suggest_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -187,7 +187,7 @@ fn from_method_call(expr: &ast::Expr) -> Option<String> {\n         }\n     }\n \n-    normalize(&name)\n+    normalize(name)\n }\n \n fn from_param(expr: &ast::Expr, sema: &Semantics<'_, RootDatabase>) -> Option<String> {"}, {"sha": "9552875c11fa53d87bb349ab35fb1f988cc4d9a3", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n         _ => return complete_undotted_self(acc, ctx),\n     };\n \n-    let receiver_ty = match ctx.sema.type_of_expr(&dot_receiver) {\n+    let receiver_ty = match ctx.sema.type_of_expr(dot_receiver) {\n         Some(ty) => ty,\n         _ => return,\n     };"}, {"sha": "9f98b21be220856607fdd8fd73216ffff4c29846", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -34,7 +34,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n \n     let receiver_text = get_receiver_text(dot_receiver, receiver_is_ambiguous_float_literal);\n \n-    let receiver_ty = match ctx.sema.type_of_expr(&dot_receiver) {\n+    let receiver_ty = match ctx.sema.type_of_expr(dot_receiver) {\n         Some(it) => it,\n         None => return,\n     };\n@@ -50,7 +50,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n                 postfix_snippet(\n                     ctx,\n                     cap,\n-                    &dot_receiver,\n+                    dot_receiver,\n                     \"ifl\",\n                     \"if let Ok {}\",\n                     &format!(\"if let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n@@ -60,7 +60,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n                 postfix_snippet(\n                     ctx,\n                     cap,\n-                    &dot_receiver,\n+                    dot_receiver,\n                     \"while\",\n                     \"while let Ok {}\",\n                     &format!(\"while let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n@@ -71,7 +71,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n                 postfix_snippet(\n                     ctx,\n                     cap,\n-                    &dot_receiver,\n+                    dot_receiver,\n                     \"ifl\",\n                     \"if let Some {}\",\n                     &format!(\"if let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n@@ -81,7 +81,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n                 postfix_snippet(\n                     ctx,\n                     cap,\n-                    &dot_receiver,\n+                    dot_receiver,\n                     \"while\",\n                     \"while let Some {}\",\n                     &format!(\"while let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n@@ -93,7 +93,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         postfix_snippet(\n             ctx,\n             cap,\n-            &dot_receiver,\n+            dot_receiver,\n             \"if\",\n             \"if expr {}\",\n             &format!(\"if {} {{\\n    $0\\n}}\", receiver_text),\n@@ -102,22 +102,22 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         postfix_snippet(\n             ctx,\n             cap,\n-            &dot_receiver,\n+            dot_receiver,\n             \"while\",\n             \"while expr {}\",\n             &format!(\"while {} {{\\n    $0\\n}}\", receiver_text),\n         )\n         .add_to(acc);\n-        postfix_snippet(ctx, cap, &dot_receiver, \"not\", \"!expr\", &format!(\"!{}\", receiver_text))\n+        postfix_snippet(ctx, cap, dot_receiver, \"not\", \"!expr\", &format!(\"!{}\", receiver_text))\n             .add_to(acc);\n     }\n \n-    postfix_snippet(ctx, cap, &dot_receiver, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text))\n+    postfix_snippet(ctx, cap, dot_receiver, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text))\n         .add_to(acc);\n     postfix_snippet(\n         ctx,\n         cap,\n-        &dot_receiver,\n+        dot_receiver,\n         \"refm\",\n         \"&mut expr\",\n         &format!(\"&mut {}\", receiver_text),"}, {"sha": "f619f8b5223aba85c04af3f10833d0dd62e76e52", "filename": "crates/ide_completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn add_format_like_completions(\n         for (label, macro_name) in KINDS {\n             let snippet = parser.into_suggestion(macro_name);\n \n-            postfix_snippet(ctx, cap, &dot_receiver, label, macro_name, &snippet).add_to(acc);\n+            postfix_snippet(ctx, cap, dot_receiver, label, macro_name, &snippet).add_to(acc);\n         }\n     }\n }"}, {"sha": "6083537b73e4dc2735292201aef334c66ee1fc9e", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -15,7 +15,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         None => return,\n     };\n \n-    let resolution = match ctx.sema.resolve_path(&path) {\n+    let resolution = match ctx.sema.resolve_path(path) {\n         Some(res) => res,\n         None => return,\n     };"}, {"sha": "e4abe2742b6a9999932e849fc601e036ed932e75", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -467,7 +467,7 @@ impl<'a> CompletionContext<'a> {\n         self.expected_type = expected_type;\n         self.expected_name = expected_name;\n \n-        let name_like = match find_node_at_offset(&&file_with_fake_ident, offset) {\n+        let name_like = match find_node_at_offset(&file_with_fake_ident, offset) {\n             Some(it) => it,\n             None => return,\n         };"}, {"sha": "c567ac63dc963ac4e4feb0127fc07a97b60fdc5e", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -115,20 +115,20 @@ pub(crate) fn determine_location(\n ) -> Option<ImmediateLocation> {\n     let node = match name_like {\n         ast::NameLike::NameRef(name_ref) => {\n-            if ast::RecordExprField::for_field_name(&name_ref).is_some() {\n+            if ast::RecordExprField::for_field_name(name_ref).is_some() {\n                 return sema\n                     .find_node_at_offset_with_macros(original_file, offset)\n                     .map(ImmediateLocation::RecordExpr);\n             }\n-            if ast::RecordPatField::for_field_name_ref(&name_ref).is_some() {\n+            if ast::RecordPatField::for_field_name_ref(name_ref).is_some() {\n                 return sema\n                     .find_node_at_offset_with_macros(original_file, offset)\n                     .map(ImmediateLocation::RecordPat);\n             }\n             maximize_name_ref(name_ref)\n         }\n         ast::NameLike::Name(name) => {\n-            if ast::RecordPatField::for_field_name(&name).is_some() {\n+            if ast::RecordPatField::for_field_name(name).is_some() {\n                 return sema\n                     .find_node_at_offset_with_macros(original_file, offset)\n                     .map(ImmediateLocation::RecordPat);"}, {"sha": "a5508163124a58705200fcc1dfc2d2520140e044", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -86,7 +86,7 @@ impl<'a> RenderContext<'a> {\n     }\n \n     fn db(&self) -> &'a RootDatabase {\n-        &self.completion.db\n+        self.completion.db\n     }\n \n     fn source_range(&self) -> TextRange {"}, {"sha": "3717a0409a9ffbc753d04945b8400203c2207ab8", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -75,18 +75,18 @@ fn render_pat(\n ) -> Option<String> {\n     let mut pat = match kind {\n         StructKind::Tuple if ctx.snippet_cap().is_some() => {\n-            render_tuple_as_pat(&fields, &name, fields_omitted)\n+            render_tuple_as_pat(fields, name, fields_omitted)\n         }\n         StructKind::Record => {\n-            render_record_as_pat(ctx.db(), ctx.snippet_cap(), &fields, &name, fields_omitted)\n+            render_record_as_pat(ctx.db(), ctx.snippet_cap(), fields, name, fields_omitted)\n         }\n         _ => return None,\n     };\n \n     if ctx.completion.is_param {\n         pat.push(':');\n         pat.push(' ');\n-        pat.push_str(&name);\n+        pat.push_str(name);\n     }\n     if ctx.snippet_cap().is_some() {\n         pat.push_str(\"$0\");"}, {"sha": "4795e25650bee16c4346aa1b2c5a24a74f8f6c7a", "filename": "crates/ide_db/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -162,7 +162,7 @@ impl ActiveParameter {\n     }\n \n     pub fn at_token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Option<Self> {\n-        let (signature, active_parameter) = call_info_impl(&sema, token)?;\n+        let (signature, active_parameter) = call_info_impl(sema, token)?;\n \n         let idx = active_parameter?;\n         let mut params = signature.params(sema.db);"}, {"sha": "9634d872e49ca3608659e70c3bf0b2fb3812f030", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -323,7 +323,7 @@ fn import_for_item(\n     }\n \n     let segment_import =\n-        find_import_for_segment(db, original_item_candidate, &unresolved_first_segment)?;\n+        find_import_for_segment(db, original_item_candidate, unresolved_first_segment)?;\n     let trait_item_to_import = item_as_assoc(db, original_item)\n         .and_then(|assoc| assoc.containing_trait(db))\n         .map(|trait_| ItemInNs::from(ModuleDef::from(trait_)));\n@@ -383,7 +383,7 @@ fn find_import_for_segment(\n         original_item\n     } else {\n         let matching_module =\n-            module_with_segment_name(db, &unresolved_first_segment, original_item)?;\n+            module_with_segment_name(db, unresolved_first_segment, original_item)?;\n         ItemInNs::from(ModuleDef::from(matching_module))\n     })\n }"}, {"sha": "ec29476a492d86ae902f4e0e3f97a7852808ee66", "filename": "crates/ide_db/src/helpers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -124,7 +124,7 @@ fn recursive_merge(\n                             .map(|tree_list| tree_list.use_trees().any(tree_is_self))\n                             .unwrap_or(false)\n                     };\n-                    match (tree_contains_self(&lhs_t), tree_contains_self(&rhs_t)) {\n+                    match (tree_contains_self(lhs_t), tree_contains_self(&rhs_t)) {\n                         (true, false) => continue,\n                         (false, true) => {\n                             *lhs_t = rhs_t;"}, {"sha": "8bfbba4bbdddebcd06eb20651aefe888ab347bf9", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -409,7 +409,7 @@ impl<'a> FindUsages<'a> {\n                     if let Some(ast::NameLike::NameRef(name_ref)) =\n                         sema.find_node_at_offset_with_descend(&tree, offset)\n                     {\n-                        if self.found_self_ty_name_ref(&self_ty, &name_ref, sink) {\n+                        if self.found_self_ty_name_ref(self_ty, &name_ref, sink) {\n                             return;\n                         }\n                     }\n@@ -424,7 +424,7 @@ impl<'a> FindUsages<'a> {\n         name_ref: &ast::NameRef,\n         sink: &mut dyn FnMut(FileId, FileReference) -> bool,\n     ) -> bool {\n-        match NameRefClass::classify(self.sema, &name_ref) {\n+        match NameRefClass::classify(self.sema, name_ref) {\n             Some(NameRefClass::Definition(Definition::SelfType(impl_)))\n                 if impl_.self_ty(self.sema.db) == *self_ty =>\n             {\n@@ -464,13 +464,13 @@ impl<'a> FindUsages<'a> {\n         name_ref: &ast::NameRef,\n         sink: &mut dyn FnMut(FileId, FileReference) -> bool,\n     ) -> bool {\n-        match NameRefClass::classify(self.sema, &name_ref) {\n+        match NameRefClass::classify(self.sema, name_ref) {\n             Some(NameRefClass::Definition(def)) if def == self.def => {\n                 let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n                 let reference = FileReference {\n                     range,\n                     name: ast::NameLike::NameRef(name_ref.clone()),\n-                    access: reference_access(&def, &name_ref),\n+                    access: reference_access(&def, name_ref),\n                 };\n                 sink(file_id, reference)\n             }\n@@ -480,7 +480,7 @@ impl<'a> FindUsages<'a> {\n                     let reference = FileReference {\n                         range,\n                         name: ast::NameLike::NameRef(name_ref.clone()),\n-                        access: reference_access(&def, &name_ref),\n+                        access: reference_access(&def, name_ref),\n                     };\n                     sink(file_id, reference)\n                 } else {\n@@ -491,10 +491,10 @@ impl<'a> FindUsages<'a> {\n                 let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n                 let access = match self.def {\n                     Definition::Field(_) if field == self.def => {\n-                        reference_access(&field, &name_ref)\n+                        reference_access(&field, name_ref)\n                     }\n                     Definition::Local(l) if local == l => {\n-                        reference_access(&Definition::Local(local), &name_ref)\n+                        reference_access(&Definition::Local(local), name_ref)\n                     }\n                     _ => return false,\n                 };"}, {"sha": "fb92a0ccc727956d35d4ba5a0caf546b2e0fc29a", "filename": "crates/ide_ssr/src/matching.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fmatching.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -382,7 +382,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         code: Option<T>,\n     ) -> Result<(), MatchFailed> {\n         match (pattern, code) {\n-            (Some(p), Some(c)) => self.attempt_match_node(phase, &p.syntax(), &c.syntax()),\n+            (Some(p), Some(c)) => self.attempt_match_node(phase, p.syntax(), c.syntax()),\n             (None, None) => Ok(()),\n             (Some(p), None) => fail_match!(\"Pattern `{}` had nothing to match\", p.syntax().text()),\n             (None, Some(c)) => {\n@@ -478,7 +478,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n                                 if Some(first_token.text()) == next_pattern_token.as_deref() {\n                                     if let Some(SyntaxElement::Node(p)) = pattern.next() {\n                                         // We have a subtree that starts with the next token in our pattern.\n-                                        self.attempt_match_token_tree(phase, &p, &n)?;\n+                                        self.attempt_match_token_tree(phase, &p, n)?;\n                                         break;\n                                     }\n                                 }\n@@ -609,7 +609,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         expr: &ast::Expr,\n     ) -> Result<usize, MatchFailed> {\n         use hir::HirDisplay;\n-        let code_type = self.sema.type_of_expr(&expr).ok_or_else(|| {\n+        let code_type = self.sema.type_of_expr(expr).ok_or_else(|| {\n             match_error!(\"Failed to get receiver type for `{}`\", expr.syntax().text())\n         })?;\n         // Temporary needed to make the borrow checker happy."}, {"sha": "9265af7c13a65dcb4b9f2df41dd6daf2534eecf0", "filename": "crates/ide_ssr/src/replacing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_ssr%2Fsrc%2Freplacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_ssr%2Fsrc%2Freplacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Freplacing.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -84,16 +84,16 @@ impl ReplacementRenderer<'_> {\n     fn render_node_or_token(&mut self, node_or_token: &SyntaxElement) {\n         match node_or_token {\n             SyntaxElement::Token(token) => {\n-                self.render_token(&token);\n+                self.render_token(token);\n             }\n             SyntaxElement::Node(child_node) => {\n-                self.render_node(&child_node);\n+                self.render_node(child_node);\n             }\n         }\n     }\n \n     fn render_node(&mut self, node: &SyntaxNode) {\n-        if let Some(mod_path) = self.match_info.rendered_template_paths.get(&node) {\n+        if let Some(mod_path) = self.match_info.rendered_template_paths.get(node) {\n             self.out.push_str(&mod_path.to_string());\n             // Emit everything except for the segment's name-ref, since we already effectively\n             // emitted that as part of `mod_path`.\n@@ -107,12 +107,12 @@ impl ReplacementRenderer<'_> {\n                 }\n             }\n         } else {\n-            self.render_node_children(&node);\n+            self.render_node_children(node);\n         }\n     }\n \n     fn render_token(&mut self, token: &SyntaxToken) {\n-        if let Some(placeholder) = self.rule.get_placeholder(&token) {\n+        if let Some(placeholder) = self.rule.get_placeholder(token) {\n             if let Some(placeholder_value) =\n                 self.match_info.placeholder_values.get(&placeholder.ident)\n             {"}, {"sha": "a66a7a4a8400d769fbb0522270f5018436ac63ce", "filename": "crates/ide_ssr/src/resolving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fresolving.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -211,7 +211,7 @@ impl<'db> ResolutionScope<'db> {\n         // First try resolving the whole path. This will work for things like\n         // `std::collections::HashMap`, but will fail for things like\n         // `std::collections::HashMap::new`.\n-        if let Some(resolution) = self.scope.speculative_resolve(&path) {\n+        if let Some(resolution) = self.scope.speculative_resolve(path) {\n             return Some(resolution);\n         }\n         // Resolution failed, try resolving the qualifier (e.g. `std::collections::HashMap` and if"}, {"sha": "f2056919ed0e168105560570a652dbcad4715844", "filename": "crates/ide_ssr/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_ssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_ssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fsearch.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -173,7 +173,7 @@ impl<'db> MatchFinder<'db> {\n         if !is_search_permitted(code) {\n             return;\n         }\n-        self.try_add_match(rule, &code, restrict_range, matches_out);\n+        self.try_add_match(rule, code, restrict_range, matches_out);\n         // If we've got a macro call, we already tried matching it pre-expansion, which is the only\n         // way to match the whole macro, now try expanding it and matching the expansion.\n         if let Some(macro_call) = ast::MacroCall::cast(code.clone()) {"}, {"sha": "5dd0d600fe7c91a40f9b254684ffef25160e7206", "filename": "crates/ide_ssr/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fide_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ftests.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -129,7 +129,7 @@ fn assert_matches(pattern: &str, code: &str, expected: &[&str]) {\n     let matched_strings: Vec<String> =\n         match_finder.matches().flattened().matches.iter().map(|m| m.matched_text()).collect();\n     if matched_strings != expected && !expected.is_empty() {\n-        print_match_debug_info(&match_finder, position.file_id, &expected[0]);\n+        print_match_debug_info(&match_finder, position.file_id, expected[0]);\n     }\n     assert_eq!(matched_strings, expected);\n }"}, {"sha": "c0e1705c06f1167b0f5e3b7951d7322e1b7190c9", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -121,7 +121,7 @@ impl Match {\n \n /// Matching errors are added to the `Match`.\n pub(super) fn match_(pattern: &MetaTemplate, input: &tt::Subtree) -> Match {\n-    let mut res = match_loop(pattern, &input);\n+    let mut res = match_loop(pattern, input);\n     res.bound_count = count(res.bindings.bindings());\n     return res;\n \n@@ -202,7 +202,7 @@ impl BindingsBuilder {\n     }\n \n     fn push_nested(&mut self, parent: &mut BindingsIdx, child: &BindingsIdx) {\n-        let BindingsIdx(idx, nidx) = self.copy(&child);\n+        let BindingsIdx(idx, nidx) = self.copy(child);\n         self.nodes[parent.0].push(LinkNode::Node(Rc::new(BindingKind::Nested(idx, nidx))));\n     }\n \n@@ -221,7 +221,7 @@ impl BindingsBuilder {\n \n     fn build_inner(&self, bindings: &mut Bindings, link_nodes: &[LinkNode<Rc<BindingKind>>]) {\n         let mut nodes = Vec::new();\n-        self.collect_nodes(&link_nodes, &mut nodes);\n+        self.collect_nodes(link_nodes, &mut nodes);\n \n         for cmd in nodes {\n             match &**cmd {\n@@ -282,7 +282,7 @@ impl BindingsBuilder {\n \n         nested_refs.into_iter().for_each(|iter| {\n             let mut child_bindings = Bindings::default();\n-            self.build_inner(&mut child_bindings, &iter);\n+            self.build_inner(&mut child_bindings, iter);\n             nested.push(child_bindings)\n         })\n     }\n@@ -417,7 +417,7 @@ fn match_loop_inner<'t>(\n                     let sep_len = item.sep.as_ref().map_or(0, Separator::tt_count);\n                     if item.sep.is_some() && sep_idx != sep_len {\n                         let sep = item.sep.as_ref().unwrap();\n-                        if src.clone().expect_separator(&sep, sep_idx) {\n+                        if src.clone().expect_separator(sep, sep_idx) {\n                             item.dot.next();\n                             item.sep_parsed = Some(sep_idx + 1);\n                             try_push!(next_items, item);\n@@ -487,15 +487,15 @@ fn match_loop_inner<'t>(\n                                 item.meta_result = Some((fork, match_res));\n                                 try_push!(bb_items, item);\n                             } else {\n-                                bindings_builder.push_optional(&mut item.bindings, &name);\n+                                bindings_builder.push_optional(&mut item.bindings, name);\n                                 item.dot.next();\n                                 cur_items.push(item);\n                             }\n                         }\n                         Some(err) => {\n                             res.add_err(err);\n                             if let Some(fragment) = match_res.value {\n-                                bindings_builder.push_fragment(&mut item.bindings, &name, fragment);\n+                                bindings_builder.push_fragment(&mut item.bindings, name, fragment);\n                             }\n                             item.is_error = true;\n                             error_items.push(item);\n@@ -504,7 +504,7 @@ fn match_loop_inner<'t>(\n                 }\n             }\n             OpDelimited::Op(Op::Leaf(leaf)) => {\n-                if let Err(err) = match_leaf(&leaf, &mut src.clone()) {\n+                if let Err(err) = match_leaf(leaf, &mut src.clone()) {\n                     res.add_err(err);\n                     item.is_error = true;\n                 } else {\n@@ -640,10 +640,10 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n                 let (iter, match_res) = item.meta_result.take().unwrap();\n                 match match_res.value {\n                     Some(fragment) => {\n-                        bindings_builder.push_fragment(&mut item.bindings, &name, fragment);\n+                        bindings_builder.push_fragment(&mut item.bindings, name, fragment);\n                     }\n                     None if match_res.err.is_none() => {\n-                        bindings_builder.push_optional(&mut item.bindings, &name);\n+                        bindings_builder.push_optional(&mut item.bindings, name);\n                     }\n                     _ => {}\n                 }"}, {"sha": "9a9c1a467ffc9a75b792f37e6aa1ad87d44c3a71", "filename": "crates/mbe/src/expander/transcriber.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -55,7 +55,7 @@ pub(super) fn transcribe(\n     template: &MetaTemplate,\n     bindings: &Bindings,\n ) -> ExpandResult<tt::Subtree> {\n-    let mut ctx = ExpandCtx { bindings: &bindings, nesting: Vec::new() };\n+    let mut ctx = ExpandCtx { bindings: bindings, nesting: Vec::new() };\n     let mut arena: Vec<tt::TokenTree> = Vec::new();\n     expand_subtree(&mut ctx, template, None, &mut arena)\n }\n@@ -91,12 +91,12 @@ fn expand_subtree(\n             Op::Leaf(tt) => arena.push(tt.clone().into()),\n             Op::Subtree { tokens, delimiter } => {\n                 let ExpandResult { value: tt, err: e } =\n-                    expand_subtree(ctx, &tokens, *delimiter, arena);\n+                    expand_subtree(ctx, tokens, *delimiter, arena);\n                 err = err.or(e);\n                 arena.push(tt.into());\n             }\n             Op::Var { name, id, .. } => {\n-                let ExpandResult { value: fragment, err: e } = expand_var(ctx, &name, *id);\n+                let ExpandResult { value: fragment, err: e } = expand_var(ctx, name, *id);\n                 err = err.or(e);\n                 push_fragment(arena, fragment);\n             }\n@@ -141,7 +141,7 @@ fn expand_var(ctx: &mut ExpandCtx, v: &SmolStr, id: tt::TokenId) -> ExpandResult\n         .into();\n         ExpandResult::ok(Fragment::Tokens(tt))\n     } else {\n-        ctx.bindings.get(&v, &mut ctx.nesting).map_or_else(\n+        ctx.bindings.get(v, &mut ctx.nesting).map_or_else(\n             |e| ExpandResult { value: Fragment::Tokens(tt::TokenTree::empty()), err: Some(e) },\n             |b| ExpandResult::ok(b.clone()),\n         )"}, {"sha": "8c8528aafe12d6e8db53ab3224d76d15a129dbfe", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -280,8 +280,8 @@ impl Rule {\n             .expect_subtree()\n             .map_err(|()| ParseError::Expected(\"expected subtree\".to_string()))?;\n \n-        let lhs = MetaTemplate(parse_pattern(&lhs)?);\n-        let rhs = MetaTemplate(parse_template(&rhs)?);\n+        let lhs = MetaTemplate(parse_pattern(lhs)?);\n+        let rhs = MetaTemplate(parse_template(rhs)?);\n \n         Ok(crate::Rule { lhs, rhs })\n     }\n@@ -290,7 +290,7 @@ impl Rule {\n fn validate(pattern: &MetaTemplate) -> Result<(), ParseError> {\n     for op in pattern.iter() {\n         match op {\n-            Op::Subtree { tokens, .. } => validate(&tokens)?,\n+            Op::Subtree { tokens, .. } => validate(tokens)?,\n             Op::Repeat { tokens: subtree, separator, .. } => {\n                 // Checks that no repetition which could match an empty token\n                 // https://github.com/rust-lang/rust/blob/a58b1ed44f5e06976de2bdc4d7dc81c36a96934f/src/librustc_expand/mbe/macro_rules.rs#L558"}, {"sha": "deed884d2ddc864e8fe817f9762224e75a3b1a45", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -42,7 +42,7 @@ impl<'a> OpDelimitedIter<'a> {\n     }\n \n     pub(crate) fn reset(&self) -> Self {\n-        Self { inner: &self.inner, idx: 0, delimited: self.delimited }\n+        Self { inner: self.inner, idx: 0, delimited: self.delimited }\n     }\n }\n \n@@ -126,11 +126,11 @@ impl Separator {\n }\n \n pub(crate) fn parse_template(template: &tt::Subtree) -> Result<Vec<Op>, ParseError> {\n-    parse_inner(&template, Mode::Template).into_iter().collect()\n+    parse_inner(template, Mode::Template).into_iter().collect()\n }\n \n pub(crate) fn parse_pattern(pattern: &tt::Subtree) -> Result<Vec<Op>, ParseError> {\n-    parse_inner(&pattern, Mode::Pattern).into_iter().collect()\n+    parse_inner(pattern, Mode::Pattern).into_iter().collect()\n }\n \n #[derive(Clone, Copy)]\n@@ -140,7 +140,7 @@ enum Mode {\n }\n \n fn parse_inner(tt: &tt::Subtree, mode: Mode) -> Vec<Result<Op, ParseError>> {\n-    let mut src = TtIter::new(&tt);\n+    let mut src = TtIter::new(tt);\n     std::iter::from_fn(move || {\n         let first = src.next()?;\n         Some(next_op(first, &mut src, mode))\n@@ -171,7 +171,7 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n             match second {\n                 tt::TokenTree::Subtree(subtree) => {\n                     let (separator, kind) = parse_repeat(src)?;\n-                    let tokens = parse_inner(&subtree, mode)\n+                    let tokens = parse_inner(subtree, mode)\n                         .into_iter()\n                         .collect::<Result<Vec<Op>, ParseError>>()?;\n                     Op::Repeat { tokens: MetaTemplate(tokens), separator, kind }\n@@ -191,7 +191,7 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n                         Op::Var { name, kind, id }\n                     }\n                     tt::Leaf::Literal(lit) => {\n-                        if is_boolean_literal(&lit) {\n+                        if is_boolean_literal(lit) {\n                             let name = lit.text.clone();\n                             let kind = eat_fragment_kind(src, mode)?;\n                             let id = lit.id;\n@@ -206,7 +206,7 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n         tt::TokenTree::Leaf(tt) => Op::Leaf(tt.clone()),\n         tt::TokenTree::Subtree(subtree) => {\n             let tokens =\n-                parse_inner(&subtree, mode).into_iter().collect::<Result<Vec<Op>, ParseError>>()?;\n+                parse_inner(subtree, mode).into_iter().collect::<Result<Vec<Op>, ParseError>>()?;\n             Op::Subtree { tokens: MetaTemplate(tokens), delimiter: subtree.delimiter }\n         }\n     };"}, {"sha": "ee80807ad42bbf212a9cf408d27cc3580661bf9d", "filename": "crates/mbe/src/subtree_source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -22,7 +22,7 @@ impl<'a> SubtreeTokenSource {\n     #[cfg(test)]\n     pub(crate) fn text(&self) -> SmolStr {\n         match self.cached.get(self.curr.1) {\n-            Some(ref tt) => tt.text.clone(),\n+            Some(tt) => tt.text.clone(),\n             _ => SmolStr::new(\"\"),\n         }\n     }\n@@ -59,7 +59,7 @@ impl<'a> SubtreeTokenSource {\n \n             current = match tt {\n                 Some(tt::buffer::TokenTreeRef::Leaf(leaf, _)) => {\n-                    cached.push(convert_leaf(&leaf));\n+                    cached.push(convert_leaf(leaf));\n                     cursor.bump()\n                 }\n                 Some(tt::buffer::TokenTreeRef::Subtree(subtree, _)) => {\n@@ -114,7 +114,7 @@ impl<'a> TokenSource for SubtreeTokenSource {\n     /// Is the current token a specified keyword?\n     fn is_keyword(&self, kw: &str) -> bool {\n         match self.cached.get(self.curr.1) {\n-            Some(ref t) => t.text == *kw,\n+            Some(t) => t.text == *kw,\n             _ => false,\n         }\n     }"}, {"sha": "cdc22425d9abcdf853fed044a31c6718667c86d7", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -633,7 +633,7 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n                     }\n                 }\n             };\n-            self.buf += &text;\n+            self.buf += text;\n             self.text_pos += TextSize::of(text);\n         }\n "}, {"sha": "c788e427e7e07813e6081d99150fb0af41de582a", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -490,7 +490,7 @@ MACRO_ITEMS@0..40\n \n fn to_subtree(tt: &tt::TokenTree) -> &tt::Subtree {\n     if let tt::TokenTree::Subtree(subtree) = tt {\n-        return &subtree;\n+        return subtree;\n     }\n     unreachable!(\"It is not a subtree\");\n }"}, {"sha": "5a4eca7bf00a2781d53129de3c78f42669b91a87", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -115,7 +115,7 @@ impl<'a> TtIter<'a> {\n             }\n         }\n \n-        let buffer = TokenBuffer::from_tokens(&self.inner.as_slice());\n+        let buffer = TokenBuffer::from_tokens(self.inner.as_slice());\n         let mut src = SubtreeTokenSource::new(&buffer);\n         let mut sink = OffsetTokenSink { cursor: buffer.begin(), error: false };\n "}, {"sha": "899895578682cd4d2e92a686bc768391fd2f8748", "filename": "crates/proc_macro_api/src/msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -59,7 +59,7 @@ pub trait Message: Serialize + DeserializeOwned {\n         Ok(match read_json(inp, buf)? {\n             None => None,\n             Some(text) => {\n-                let mut deserializer = serde_json::Deserializer::from_str(&text);\n+                let mut deserializer = serde_json::Deserializer::from_str(text);\n                 // Note that some proc-macro generate very deep syntax tree\n                 // We have to disable the current limit of serde here\n                 deserializer.disable_recursion_limit();"}, {"sha": "53cb4bae7388a3719712988afb63c4d9b652b2a8", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -184,7 +184,7 @@ impl WorkspaceBuildData {\n \n                 // Copy-pasted from existing cargo_metadata. It seems like we\n                 // should be using sered_stacker here?\n-                let mut deserializer = serde_json::Deserializer::from_str(&line);\n+                let mut deserializer = serde_json::Deserializer::from_str(line);\n                 deserializer.disable_recursion_limit();\n                 let message = Message::deserialize(&mut deserializer)\n                     .unwrap_or(Message::TextLine(line.to_string()));"}, {"sha": "ac079f83e6d6eed18c77ea6ef6785f19313abe72", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -278,7 +278,7 @@ impl CargoWorkspace {\n                 id, edition, name, manifest_path, version, metadata, ..\n             } = meta_pkg;\n             let meta = from_value::<PackageMetadata>(metadata.clone()).unwrap_or_default();\n-            let is_member = ws_members.contains(&id);\n+            let is_member = ws_members.contains(id);\n             let edition = edition\n                 .parse::<Edition>()\n                 .with_context(|| format!(\"Failed to parse edition {}\", edition))?;"}, {"sha": "a22f79c15d8969d0d61a31dc4555370eda55c293", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -142,12 +142,12 @@ fn discover_sysroot_src_dir(\n         log::debug!(\"RUST_SRC_PATH is set, but is invalid (no core: {:?}), ignoring\", core);\n     }\n \n-    get_rust_src(&sysroot_path)\n+    get_rust_src(sysroot_path)\n         .or_else(|| {\n             let mut rustup = Command::new(toolchain::rustup());\n             rustup.current_dir(current_dir).args(&[\"component\", \"add\", \"rust-src\"]);\n             utf8_stdout(rustup).ok()?;\n-            get_rust_src(&sysroot_path)\n+            get_rust_src(sysroot_path)\n         })\n         .ok_or_else(|| {\n             format_err!("}, {"sha": "ef0f3c9e424e98c26d2ef16057b325078813183e", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -185,7 +185,7 @@ impl ProjectWorkspace {\n \n     pub fn load_detached_files(detached_files: Vec<AbsPathBuf>) -> Result<ProjectWorkspace> {\n         let sysroot = Sysroot::discover(\n-            &detached_files.first().ok_or_else(|| format_err!(\"No detached files to load\"))?,\n+            detached_files.first().ok_or_else(|| format_err!(\"No detached files to load\"))?,\n         )?;\n         let rustc_cfg = rustc_cfg::get(None, None);\n         Ok(ProjectWorkspace::DetachedFiles { files: detached_files, sysroot, rustc_cfg })\n@@ -324,7 +324,7 @@ impl ProjectWorkspace {\n     pub fn collect_build_data_configs(&self, collector: &mut BuildDataCollector) {\n         match self {\n             ProjectWorkspace::Cargo { cargo, .. } => {\n-                collector.add_config(&cargo.workspace_root(), cargo.build_data_config().clone());\n+                collector.add_config(cargo.workspace_root(), cargo.build_data_config().clone());\n             }\n             _ => {}\n         }\n@@ -348,7 +348,7 @@ fn project_json_to_crate_graph(\n         .crates()\n         .filter_map(|(crate_id, krate)| {\n             let file_path = &krate.root_module;\n-            let file_id = load(&file_path)?;\n+            let file_id = load(file_path)?;\n             Some((crate_id, krate, file_id))\n         })\n         .map(|(crate_id, krate, file_id)| {\n@@ -534,7 +534,7 @@ fn detached_files_to_crate_graph(\n     cfg_options.extend(rustc_cfg);\n \n     for detached_file in detached_files {\n-        let file_id = match load(&detached_file) {\n+        let file_id = match load(detached_file) {\n             Some(file_id) => file_id,\n             None => {\n                 log::error!(\"Failed to load detached file {:?}\", detached_file);\n@@ -602,7 +602,7 @@ fn handle_rustc_crates(\n                         crate_graph,\n                         &rustc_workspace[pkg],\n                         rustc_build_data_map.and_then(|it| it.get(&rustc_workspace[pkg].id)),\n-                        &cfg_options,\n+                        cfg_options,\n                         proc_macro_loader,\n                         file_id,\n                         &rustc_workspace[tgt].name,\n@@ -685,7 +685,7 @@ fn add_target_crate_root(\n     let proc_macro = build_data\n         .as_ref()\n         .and_then(|it| it.proc_macro_dylib_path.as_ref())\n-        .map(|it| proc_macro_loader(&it))\n+        .map(|it| proc_macro_loader(it))\n         .unwrap_or_default();\n \n     let display_name = CrateDisplayName::from_canonical_name(cargo_name.to_string());"}, {"sha": "5d854715299098e84f25f2f53f6aadcfaa8f650e", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -123,7 +123,7 @@ impl CargoTargetSpec {\n         let res = CargoTargetSpec {\n             workspace_root: cargo_ws.workspace_root().to_path_buf(),\n             cargo_toml: package_data.manifest.clone(),\n-            package: cargo_ws.package_flag(&package_data),\n+            package: cargo_ws.package_flag(package_data),\n             target: target_data.name.clone(),\n             target_kind: target_data.kind,\n         };"}, {"sha": "b5f5519b43ef2b856fec20c3f5548cec07c04b64", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -126,7 +126,7 @@ fn load_crate_graph(\n             }\n         }\n     }\n-    let source_roots = source_root_config.partition(&vfs);\n+    let source_roots = source_root_config.partition(vfs);\n     analysis_change.set_roots(source_roots);\n \n     analysis_change.set_crate_graph(crate_graph);"}, {"sha": "2f63c26ce516ff655ac48009414438ee12c863c1", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -47,7 +47,7 @@ impl DiagnosticCollection {\n     ) {\n         let diagnostics = self.check.entry(file_id).or_default();\n         for existing_diagnostic in diagnostics.iter() {\n-            if are_diagnostics_equal(&existing_diagnostic, &diagnostic) {\n+            if are_diagnostics_equal(existing_diagnostic, &diagnostic) {\n                 return;\n             }\n         }"}, {"sha": "8594d923cd014d6df81e82a71713cba4aee029b7", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -224,7 +224,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n \n     let mut message = rd.message.clone();\n     for child in &rd.children {\n-        let child = map_rust_child_diagnostic(config, workspace_root, &child);\n+        let child = map_rust_child_diagnostic(config, workspace_root, child);\n         match child {\n             MappedRustChildDiagnostic::SubDiagnostic(sub) => {\n                 subdiagnostics.push(sub);\n@@ -268,7 +268,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     primary_spans\n         .iter()\n         .flat_map(|primary_span| {\n-            let primary_location = primary_location(config, workspace_root, &primary_span);\n+            let primary_location = primary_location(config, workspace_root, primary_span);\n \n             let mut message = message.clone();\n             if needs_primary_span_label {\n@@ -298,7 +298,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 // generated that code.\n                 let is_in_macro_call = i != 0;\n \n-                let secondary_location = location(config, workspace_root, &span);\n+                let secondary_location = location(config, workspace_root, span);\n                 if secondary_location == primary_location {\n                     continue;\n                 }"}, {"sha": "583900cfeef2becc62209e7da78ed97f3090c52e", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -194,7 +194,7 @@ impl GlobalState {\n                 change.change_file(file.file_id, text);\n             }\n             if has_fs_changes {\n-                let roots = self.source_root_config.partition(&vfs);\n+                let roots = self.source_root_config.partition(vfs);\n                 change.set_roots(roots);\n             }\n             change\n@@ -291,7 +291,7 @@ impl GlobalStateSnapshot {\n     }\n \n     pub(crate) fn url_file_version(&self, url: &Url) -> Option<i32> {\n-        let path = from_proto::vfs_path(&url).ok()?;\n+        let path = from_proto::vfs_path(url).ok()?;\n         Some(self.mem_docs.get(&path)?.version)\n     }\n \n@@ -300,7 +300,7 @@ impl GlobalStateSnapshot {\n         base.pop();\n         let path = base.join(&path.path).unwrap();\n         let path = path.as_path().unwrap();\n-        url_from_abs_path(&path)\n+        url_from_abs_path(path)\n     }\n \n     pub(crate) fn cargo_target_for_crate_root(\n@@ -312,7 +312,7 @@ impl GlobalStateSnapshot {\n         let path = path.as_path()?;\n         self.workspaces.iter().find_map(|ws| match ws {\n             ProjectWorkspace::Cargo { cargo, .. } => {\n-                cargo.target_by_root(&path).map(|it| (cargo, it))\n+                cargo.target_by_root(path).map(|it| (cargo, it))\n             }\n             ProjectWorkspace::Json { .. } => None,\n             ProjectWorkspace::DetachedFiles { .. } => None,\n@@ -323,7 +323,7 @@ impl GlobalStateSnapshot {\n pub(crate) fn file_id_to_url(vfs: &vfs::Vfs, id: FileId) -> Url {\n     let path = vfs.file_path(id);\n     let path = path.as_path().unwrap();\n-    url_from_abs_path(&path)\n+    url_from_abs_path(path)\n }\n \n pub(crate) fn url_to_file_id(vfs: &vfs::Vfs, url: &Url) -> Result<FileId> {"}, {"sha": "59339d4015e016bfa2fc454743da8f1d8756282a", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -1396,7 +1396,7 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n \n     if let Some(prev_id) = &cached_tokens.result_id {\n         if *prev_id == params.previous_result_id {\n-            let delta = to_proto::semantic_token_delta(&cached_tokens, &semantic_tokens);\n+            let delta = to_proto::semantic_token_delta(cached_tokens, &semantic_tokens);\n             *cached_tokens = semantic_tokens;\n             return Ok(Some(delta.into()));\n         }\n@@ -1540,7 +1540,7 @@ fn runnable_action_links(\n     snap: &GlobalStateSnapshot,\n     runnable: Runnable,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    let cargo_spec = CargoTargetSpec::for_file(&snap, runnable.nav.file_id).ok()?;\n+    let cargo_spec = CargoTargetSpec::for_file(snap, runnable.nav.file_id).ok()?;\n     let hover_config = snap.config.hover();\n     if !hover_config.runnable() || should_skip_target(&runnable, cargo_spec.as_ref()) {\n         return None;\n@@ -1624,7 +1624,7 @@ fn run_rustfmt(\n     text_document: TextDocumentIdentifier,\n     range: Option<lsp_types::Range>,\n ) -> Result<Option<Vec<lsp_types::TextEdit>>> {\n-    let file_id = from_proto::file_id(&snap, &text_document.uri)?;\n+    let file_id = from_proto::file_id(snap, &text_document.uri)?;\n     let file = snap.analysis.file_text(file_id)?;\n     let crate_ids = snap.analysis.crate_for(file_id)?;\n \n@@ -1671,7 +1671,7 @@ fn run_rustfmt(\n                     .into());\n                 }\n \n-                let frange = from_proto::file_range(&snap, text_document, range)?;\n+                let frange = from_proto::file_range(snap, text_document, range)?;\n                 let start_line = line_index.index.line_col(frange.range.start()).line;\n                 let end_line = line_index.index.line_col(frange.range.end()).line;\n "}, {"sha": "087c26a71fe11a827146316bcaf878d3121569f5", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -124,7 +124,7 @@ pub(crate) fn apply_document_changes(\n         match change.range {\n             Some(range) => {\n                 if !index_valid.covers(range.end.line) {\n-                    line_index.index = Arc::new(ide::LineIndex::new(&old_text));\n+                    line_index.index = Arc::new(ide::LineIndex::new(old_text));\n                 }\n                 index_valid = IndexValid::UpToLineExclusive(range.start.line);\n                 let range = from_proto::text_range(&line_index, range);"}, {"sha": "fa5fc6fbfdb54c89593f5243778ac16a80adc9e0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -740,7 +740,7 @@ impl GlobalState {\n         let subscriptions = self\n             .mem_docs\n             .keys()\n-            .map(|path| self.vfs.read().0.file_id(&path).unwrap())\n+            .map(|path| self.vfs.read().0.file_id(path).unwrap())\n             .collect::<Vec<_>>();\n \n         log::trace!(\"updating notifications for {:?}\", subscriptions);"}, {"sha": "e53cd3c7ba541b59440823d49f233713f8f78a69", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -405,7 +405,7 @@ pub(crate) fn semantic_tokens(\n                 text_range =\n                     TextRange::new(text_range.start(), text_range.end() - TextSize::of('\\n'));\n             }\n-            let range = range(&line_index, text_range);\n+            let range = range(line_index, text_range);\n             builder.push(range, token_index, modifier_bitset);\n         }\n     }\n@@ -781,7 +781,7 @@ pub(crate) fn snippet_workspace_edit(\n         document_changes.extend_from_slice(&ops);\n     }\n     for (file_id, edit) in source_change.source_file_edits {\n-        let edit = snippet_text_document_edit(&snap, source_change.is_snippet, file_id, edit)?;\n+        let edit = snippet_text_document_edit(snap, source_change.is_snippet, file_id, edit)?;\n         document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Edit(edit));\n     }\n     let mut workspace_edit = lsp_ext::SnippetWorkspaceEdit {\n@@ -957,7 +957,7 @@ pub(crate) fn code_lens(\n             let annotation_range = range(&line_index, annotation.range);\n \n             let action = run.action();\n-            let r = runnable(&snap, run)?;\n+            let r = runnable(snap, run)?;\n \n             let command = if debug {\n                 command::debug_single(&r)\n@@ -1236,12 +1236,12 @@ fn main() {\n         assert_eq!(folds.len(), 4);\n \n         let line_index = LineIndex {\n-            index: Arc::new(ide::LineIndex::new(&text)),\n+            index: Arc::new(ide::LineIndex::new(text)),\n             endings: LineEndings::Unix,\n             encoding: OffsetEncoding::Utf16,\n         };\n         let converted: Vec<lsp_types::FoldingRange> =\n-            folds.into_iter().map(|it| folding_range(&text, &line_index, true, it)).collect();\n+            folds.into_iter().map(|it| folding_range(text, &line_index, true, it)).collect();\n \n         let expected_lines = [(0, 2), (4, 10), (5, 6), (7, 9)];\n         assert_eq!(converted.len(), expected_lines.len());"}, {"sha": "3585132d45e8b6302810655e1d20ec1ddf3c810f", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -493,7 +493,7 @@ fn preserves_dos_line_endings() {\n     }\n \n     let server = Project::with_fixture(\n-        &\"\n+        \"\n //- /Cargo.toml\n [package]\n name = \\\"foo\\\"\n@@ -758,7 +758,7 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n         ```rust\n         fn bar()\n         ```\"#]]\n-    .assert_eq(&value);\n+    .assert_eq(value);\n }\n \n #[test]\n@@ -795,7 +795,7 @@ fn main() {}\n \n \"#;\n     let server =\n-        Project::with_fixture(&code).tmp_dir(tmp_dir).server().wait_until_workspace_is_loaded();\n+        Project::with_fixture(code).tmp_dir(tmp_dir).server().wait_until_workspace_is_loaded();\n \n     //rename same level file\n     server.request::<WillRenameFiles>("}, {"sha": "e22c295f93589ec982572bd17e50b0df9dafd1bf", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -323,7 +323,7 @@ fn find_mismatch<'a>(expected: &'a Value, actual: &'a Value) -> Option<(&'a Valu\n \n             if !l.is_empty() {\n                 assert!(!r.is_empty());\n-                Some((&l[0], &r[0]))\n+                Some((l[0], r[0]))\n             } else {\n                 assert_eq!(r.len(), 0);\n                 None"}, {"sha": "8698687d898a63d095f569b31065c84d438aa6e9", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -30,7 +30,7 @@ impl ast::UseTree {\n         let suffix = if self.path().as_ref() == Some(prefix) && self.use_tree_list().is_none() {\n             make::path_unqualified(make::path_segment_self())\n         } else {\n-            match split_path_prefix(&prefix) {\n+            match split_path_prefix(prefix) {\n                 Some(it) => it,\n                 None => return self.clone(),\n             }"}, {"sha": "ad52d9f54066f922407135b048384980d8ebfcf8", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -242,7 +242,7 @@ impl ast::ByteString {\n             (Ok(c), true) if char_range.len() == 1 && Some(c) == text_iter.next() => (),\n             (Ok(c), true) => {\n                 buf.reserve_exact(text.len());\n-                buf.extend_from_slice(&text[..char_range.start].as_bytes());\n+                buf.extend_from_slice(text[..char_range.start].as_bytes());\n                 buf.push(c as u8);\n             }\n             (Err(_), _) => has_error = true,"}, {"sha": "001921343d1dbde88ce1015f0dd304a9e1160f48", "filename": "crates/syntax/src/parsing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -15,7 +15,7 @@ use crate::{syntax_node::GreenNode, AstNode, SyntaxError, SyntaxNode};\n pub(crate) use crate::parsing::{lexer::*, reparsing::incremental_reparse};\n \n pub(crate) fn parse_text(text: &str) -> (GreenNode, Vec<SyntaxError>) {\n-    let (tokens, lexer_errors) = tokenize(&text);\n+    let (tokens, lexer_errors) = tokenize(text);\n \n     let mut token_source = TextTokenSource::new(text, &tokens);\n     let mut tree_sink = TextTreeSink::new(text, &tokens);\n@@ -33,7 +33,7 @@ pub(crate) fn parse_text_fragment<T: AstNode>(\n     text: &str,\n     fragment_kind: parser::FragmentKind,\n ) -> Result<T, ()> {\n-    let (tokens, lexer_errors) = tokenize(&text);\n+    let (tokens, lexer_errors) = tokenize(text);\n     if !lexer_errors.is_empty() {\n         return Err(());\n     }"}, {"sha": "ae4844e486e586669e427fce6b3fcd9fbfa4b8d1", "filename": "crates/syntax/src/parsing/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -144,7 +144,7 @@ fn rustc_token_kind_to_syntax_kind(\n             }\n \n             rustc_lexer::TokenKind::RawIdent => IDENT,\n-            rustc_lexer::TokenKind::Literal { kind, .. } => return match_literal_kind(&kind),\n+            rustc_lexer::TokenKind::Literal { kind, .. } => return match_literal_kind(kind),\n \n             rustc_lexer::TokenKind::Lifetime { starts_with_number: false } => LIFETIME_IDENT,\n             rustc_lexer::TokenKind::Lifetime { starts_with_number: true } => {"}, {"sha": "186cc9e74c8c8fcdfe24a9070146992a1ea1ce9c", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -26,11 +26,11 @@ pub(crate) fn incremental_reparse(\n     edit: &Indel,\n     errors: Vec<SyntaxError>,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n-    if let Some((green, new_errors, old_range)) = reparse_token(node, &edit) {\n+    if let Some((green, new_errors, old_range)) = reparse_token(node, edit) {\n         return Some((green, merge_errors(errors, new_errors, old_range, edit), old_range));\n     }\n \n-    if let Some((green, new_errors, old_range)) = reparse_block(node, &edit) {\n+    if let Some((green, new_errors, old_range)) = reparse_block(node, edit) {\n         return Some((green, merge_errors(errors, new_errors, old_range, edit), old_range));\n     }\n     None\n@@ -52,7 +52,7 @@ fn reparse_token(\n                 }\n             }\n \n-            let mut new_text = get_text_after_edit(prev_token.clone().into(), &edit);\n+            let mut new_text = get_text_after_edit(prev_token.clone().into(), edit);\n             let (new_token_kind, new_err) = lex_single_syntax_kind(&new_text)?;\n \n             if new_token_kind != prev_token_kind"}, {"sha": "4961ca08dd0ceca99c9ae205deec3aa4850029d4", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -69,13 +69,13 @@ fn parser_tests() {\n     dir_tests(&test_data_dir(), &[\"parser/inline/ok\", \"parser/ok\"], \"rast\", |text, path| {\n         let parse = SourceFile::parse(text);\n         let errors = parse.errors();\n-        assert_errors_are_absent(&errors, path);\n+        assert_errors_are_absent(errors, path);\n         parse.debug_dump()\n     });\n     dir_tests(&test_data_dir(), &[\"parser/err\", \"parser/inline/err\"], \"rast\", |text, path| {\n         let parse = SourceFile::parse(text);\n         let errors = parse.errors();\n-        assert_errors_are_present(&errors, path);\n+        assert_errors_are_present(errors, path);\n         parse.debug_dump()\n     });\n }"}, {"sha": "0011f73c960e81aa062dd68cdfa592dc01c0f53e", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -111,7 +111,7 @@ impl FileSetConfig {\n         let mut scratch_space = Vec::new();\n         let mut res = vec![FileSet::default(); self.len()];\n         for (file_id, path) in vfs.iter() {\n-            let root = self.classify(&path, &mut scratch_space);\n+            let root = self.classify(path, &mut scratch_space);\n             res[root].insert(file_id, path.clone())\n         }\n         res"}, {"sha": "4aebb02bde8f8c9f5d2f670cf85131e8d0362991", "filename": "xtask/src/codegen/gen_lint_completions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn generate_lint_completions() -> Result<()> {\n     contents.push('\\n');\n \n     cmd!(\"curl https://rust-lang.github.io/rust-clippy/master/lints.json --output ./target/clippy_lints.json\").run()?;\n-    generate_descriptor_clippy(&mut contents, &Path::new(\"./target/clippy_lints.json\"))?;\n+    generate_descriptor_clippy(&mut contents, Path::new(\"./target/clippy_lints.json\"))?;\n     let contents = reformat(&contents)?;\n \n     let destination = project_root().join(\"crates/ide_db/src/helpers/generated_lints.rs\");"}, {"sha": "5435da76e414c0197405c81cc71aceba49cd37fb", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -258,7 +258,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> Result<String> {\n     for chunk in ast.split(\"# [pretty_doc_comment_placeholder_workaround] \") {\n         res.push_str(chunk);\n         if let Some(doc) = docs.next() {\n-            write_doc_comment(&doc, &mut res);\n+            write_doc_comment(doc, &mut res);\n         }\n     }\n \n@@ -294,14 +294,14 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> Result<String> {\n \n     let full_keywords_values = &grammar.keywords;\n     let full_keywords =\n-        full_keywords_values.iter().map(|kw| format_ident!(\"{}_KW\", to_upper_snake_case(&kw)));\n+        full_keywords_values.iter().map(|kw| format_ident!(\"{}_KW\", to_upper_snake_case(kw)));\n \n     let all_keywords_values =\n         grammar.keywords.iter().chain(grammar.contextual_keywords.iter()).collect::<Vec<_>>();\n     let all_keywords_idents = all_keywords_values.iter().map(|kw| format_ident!(\"{}\", kw));\n     let all_keywords = all_keywords_values\n         .iter()\n-        .map(|name| format_ident!(\"{}_KW\", to_upper_snake_case(&name)))\n+        .map(|name| format_ident!(\"{}_KW\", to_upper_snake_case(name)))\n         .collect::<Vec<_>>();\n \n     let literals ="}, {"sha": "7b190d425f4702e29de7aa96d5c3d0aaaa26a3b7", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4ac5be4daaabc062ab1ee663eba8594750003/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4ac5be4daaabc062ab1ee663eba8594750003/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=c9b4ac5be4daaabc062ab1ee663eba8594750003", "patch": "@@ -71,7 +71,7 @@ impl Metrics {\n         Ok(())\n     }\n     fn measure_analysis_stats_self(&mut self) -> Result<()> {\n-        self.measure_analysis_stats_path(\"self\", &\".\")\n+        self.measure_analysis_stats_path(\"self\", \".\")\n     }\n     fn measure_analysis_stats(&mut self, bench: &str) -> Result<()> {\n         self.measure_analysis_stats_path("}]}