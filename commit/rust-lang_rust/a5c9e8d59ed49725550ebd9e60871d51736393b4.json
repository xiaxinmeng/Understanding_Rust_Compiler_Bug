{"sha": "a5c9e8d59ed49725550ebd9e60871d51736393b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YzllOGQ1OWVkNDk3MjU1NTBlYmQ5ZTYwODcxZDUxNzM2MzkzYjQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-06T21:58:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-06T22:08:24Z"}, "message": "Fix tests to avoid empty classes", "tree": {"sha": "05739b4593ec91ab867183c31c187186152cd5d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05739b4593ec91ab867183c31c187186152cd5d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c9e8d59ed49725550ebd9e60871d51736393b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c9e8d59ed49725550ebd9e60871d51736393b4", "html_url": "https://github.com/rust-lang/rust/commit/a5c9e8d59ed49725550ebd9e60871d51736393b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c9e8d59ed49725550ebd9e60871d51736393b4/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feece9814af5ed64ecf1961e4fff9b681f3b45ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/feece9814af5ed64ecf1961e4fff9b681f3b45ac", "html_url": "https://github.com/rust-lang/rust/commit/feece9814af5ed64ecf1961e4fff9b681f3b45ac"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "736fee0f66cb9e2ef575fe09974b9e0706f787de", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=a5c9e8d59ed49725550ebd9e60871d51736393b4", "patch": "@@ -3,14 +3,15 @@\n // Test that a class with a non-copyable field can't be\n // copied\n class bar {\n-  new() {}\n+  let x: int;\n+  new(x:int) {self.x = x;}\n   drop {}\n }\n \n class foo {\n   let i: int;\n   let j: bar;\n-  new(i:int) { self.i = i; self.j = bar(); }\n+  new(i:int) { self.i = i; self.j = bar(5); }\n }\n \n fn main() { let x <- foo(10); let y = x; log(error, x); }"}, {"sha": "c62db9b8fff2a123eca35dd352134f50dc3e1648", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=a5c9e8d59ed49725550ebd9e60871d51736393b4", "patch": "@@ -4,7 +4,7 @@\n \n enum an_enum/& { }\n iface an_iface/& { }\n-class a_class/& { new() { } }\n+class a_class/& { let x:int; new(x:int) { self.x = x; } }\n \n fn a_fn1(e: an_enum/&a) -> an_enum/&b {\n     ret e; //! ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`"}, {"sha": "f6388b19798393e114e1ae9bcb5fdb33fcf41883", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=a5c9e8d59ed49725550ebd9e60871d51736393b4", "patch": "@@ -1,7 +1,8 @@\n // error-pattern: copying a noncopyable value\n \n class r {\n-  new(_i:int) {}\n+  let i:int;\n+  new(i:int) {self.i = i;}\n   drop {}\n }\n "}, {"sha": "d68e9c49789563c7107cfd541fc969ffba23a875", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=a5c9e8d59ed49725550ebd9e60871d51736393b4", "patch": "@@ -21,7 +21,8 @@ fn getbig_call_c_and_fail(i: int) {\n }\n \n class and_then_get_big_again {\n-  new() {}\n+  let x:int;\n+  new(x:int) {self.x = x;}\n   drop {\n     fn getbig(i: int) {\n         if i != 0 {\n@@ -34,7 +35,7 @@ class and_then_get_big_again {\n \n fn main() {\n     task::spawn {||\n-        let r = and_then_get_big_again();\n+        let r = and_then_get_big_again(4);\n         getbig_call_c_and_fail(10000);\n     };\n }\n\\ No newline at end of file"}, {"sha": "0f0aea5ccd122a2d606929bfd26d3ddd0f1defcb", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=a5c9e8d59ed49725550ebd9e60871d51736393b4", "patch": "@@ -5,7 +5,7 @@\n use std;\n \n fn getbig_and_fail(&&i: int) {\n-    let _r = and_then_get_big_again();\n+    let _r = and_then_get_big_again(5);\n     if i != 0 {\n         getbig_and_fail(i - 1);\n     } else {\n@@ -14,7 +14,8 @@ fn getbig_and_fail(&&i: int) {\n }\n \n class and_then_get_big_again {\n-  new() {}\n+  let x:int;\n+  new(x:int) {self.x = x;}\n   drop {\n     fn getbig(i: int) {\n         if i != 0 {"}, {"sha": "b1c86d5110a9a260abf6f4630d5a433c4126bbe1", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=a5c9e8d59ed49725550ebd9e60871d51736393b4", "patch": "@@ -5,7 +5,7 @@\n use std;\n \n fn getbig_and_fail(&&i: int) {\n-    let r = and_then_get_big_again();\n+    let r = and_then_get_big_again(5);\n     if i != 0 {\n         getbig_and_fail(i - 1);\n     } else {\n@@ -14,7 +14,8 @@ fn getbig_and_fail(&&i: int) {\n }\n \n class and_then_get_big_again {\n-  new() {}\n+  let x:int;\n+  new(x:int) {self.x = x;}\n   drop {}\n }\n "}, {"sha": "2c2665446cdf4f7f362be0c118c98063fcb7c0a0", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c9e8d59ed49725550ebd9e60871d51736393b4/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=a5c9e8d59ed49725550ebd9e60871d51736393b4", "patch": "@@ -1,19 +1,20 @@\n // error-pattern:whatever\n \n class r {\n+  let x:int;\n             // Setting the exit status after the runtime has already\n             // failed has no effect and the process exits with the\n             // runtime's exit code\n   drop {\n     os::set_exit_status(50);\n   }\n-  new() {}\n+  new(x:int) {self.x = x;}\n }\n \n fn main() {\n     log(error, \"whatever\");\n     task::spawn {||\n-      let i = r();\n+      let i = r(5);\n     };\n     fail;\n }\n\\ No newline at end of file"}]}