{"sha": "abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYmU2MjU5ZTFhNGU3YmY2ZTJlY2NiYWUwNzQ4YzBlNWMxNWViYjA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-28T22:50:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:20:09Z"}, "message": "Handle Attributes in arena.", "tree": {"sha": "1e449d18ad49c82871fa4a6d5880b78562404494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e449d18ad49c82871fa4a6d5880b78562404494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "html_url": "https://github.com/rust-lang/rust/commit/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084e6722f97560891cfe70dc7ab649f22eaf9aae", "url": "https://api.github.com/repos/rust-lang/rust/commits/084e6722f97560891cfe70dc7ab649f22eaf9aae", "html_url": "https://github.com/rust-lang/rust/commit/084e6722f97560891cfe70dc7ab649f22eaf9aae"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "56e089f20badd17ba632cd8738100cb514ae7000", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -127,7 +127,7 @@ macro_rules! arena_types {\n             [] attribute: syntax::ast::Attribute,\n             [] global_asm: rustc::hir::GlobalAsm,\n             [] impl_item_ref: rustc::hir::ImplItemRef,\n-            [] macro_def: rustc::hir::MacroDef,\n+            [] macro_def: rustc::hir::MacroDef<$tcx>,\n             [] path: rustc::hir::Path,\n             [] trait_item_ref: rustc::hir::TraitItemRef,\n             [] ty: rustc::hir::Ty,"}, {"sha": "becbada225d388e06ab494279f2a710b7d805f31", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -4,7 +4,7 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use crate::hir::{self, HirId, HirVec, Attribute, Item, ItemKind, TraitItem, TraitItemKind};\n+use crate::hir::{self, HirId, Attribute, Item, ItemKind, TraitItem, TraitItemKind};\n use crate::hir::DUMMY_HIR_ID;\n use crate::hir::def_id::DefId;\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -158,7 +158,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_attributes(\n         &self,\n         hir_id: HirId,\n-        attrs: &HirVec<Attribute>,\n+        attrs: &'hir [Attribute],\n         span: &Span,\n         target: Target,\n         item: Option<&Item<'_>>,\n@@ -241,7 +241,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_track_caller(\n         &self,\n         attr_span: &Span,\n-        attrs: &HirVec<Attribute>,\n+        attrs: &'hir [Attribute],\n         span: &Span,\n         target: Target,\n     ) -> bool {\n@@ -332,7 +332,7 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks if the `#[repr]` attributes on `item` are valid.\n     fn check_repr(\n         &self,\n-        attrs: &HirVec<Attribute>,\n+        attrs: &'hir [Attribute],\n         span: &Span,\n         target: Target,\n         item: Option<&Item<'_>>,\n@@ -477,7 +477,7 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn check_used(&self, attrs: &HirVec<Attribute>, target: Target) {\n+    fn check_used(&self, attrs: &'hir [Attribute], target: Target) {\n         for attr in attrs {\n             if attr.check_name(sym::used) && target != Target::Static {\n                 self.tcx.sess\n@@ -494,7 +494,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n         let target = Target::from_item(item);\n-        self.check_attributes(item.hir_id, &item.attrs, &item.span, target, Some(item));\n+        self.check_attributes(item.hir_id, item.attrs, &item.span, target, Some(item));\n         intravisit::walk_item(self, item)\n     }\n "}, {"sha": "8fe3c7232b147f9eabcd85ba6311b0f171d039a2", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -367,7 +367,7 @@ pub trait Visitor<'v>: Sized {\n     }\n     fn visit_attribute(&mut self, _attr: &'v Attribute) {\n     }\n-    fn visit_macro_def(&mut self, macro_def: &'v MacroDef) {\n+    fn visit_macro_def(&mut self, macro_def: &'v MacroDef<'v>) {\n         walk_macro_def(self, macro_def)\n     }\n     fn visit_vis(&mut self, vis: &'v Visibility) {\n@@ -388,10 +388,10 @@ pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n     walk_list!(visitor, visit_macro_def, krate.exported_macros);\n }\n \n-pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef) {\n+pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef<'v>) {\n     visitor.visit_id(macro_def.hir_id);\n     visitor.visit_name(macro_def.span, macro_def.name);\n-    walk_list!(visitor, visit_attribute, &macro_def.attrs);\n+    walk_list!(visitor, visit_attribute, macro_def.attrs);\n }\n \n pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod, mod_hir_id: HirId) {\n@@ -554,7 +554,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n     }\n-    walk_list!(visitor, visit_attribute, &item.attrs);\n+    walk_list!(visitor, visit_attribute, item.attrs);\n }\n \n pub fn walk_use<'v, V: Visitor<'v>>(visitor: &mut V,"}, {"sha": "522f9adbaef355095c88201beecd344f87a38abd", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -100,7 +100,7 @@ pub struct LoweringContext<'a, 'hir: 'a> {\n     trait_items: BTreeMap<hir::TraitItemId, hir::TraitItem>,\n     impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem>,\n     bodies: BTreeMap<hir::BodyId, hir::Body>,\n-    exported_macros: Vec<hir::MacroDef>,\n+    exported_macros: Vec<hir::MacroDef<'hir>>,\n     non_exported_macro_attrs: Vec<ast::Attribute>,\n \n     trait_impls: BTreeMap<DefId, Vec<hir::HirId>>,\n@@ -989,15 +989,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_attrs_extendable(&mut self, attrs: &[Attribute]) -> Vec<Attribute> {\n-        attrs\n-            .iter()\n-            .map(|a| self.lower_attr(a))\n-            .collect()\n+    fn lower_attrs_arena(&mut self, attrs: &[Attribute]) -> &'hir [Attribute] {\n+        self.arena.alloc_from_iter(\n+            attrs.iter().map(|a| self.lower_attr(a))\n+        )\n     }\n \n     fn lower_attrs(&mut self, attrs: &[Attribute]) -> hir::HirVec<Attribute> {\n-        self.lower_attrs_extendable(attrs).into()\n+        attrs.iter().map(|a| self.lower_attr(a)).collect::<Vec<_>>().into()\n     }\n \n     fn lower_attr(&mut self, attr: &Attribute) -> Attribute {"}, {"sha": "0bc08dac151e3b66269a37aff4ade3b4042085a3", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -228,7 +228,7 @@ impl LoweringContext<'_, 'hir> {\n     pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item<'hir>> {\n         let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n-        let attrs = self.lower_attrs(&i.attrs);\n+        let attrs = self.lower_attrs_arena(&i.attrs);\n \n         if let ItemKind::MacroDef(ref def) = i.kind {\n             if !def.legacy || attr::contains_name(&i.attrs, sym::macro_export) {\n@@ -244,12 +244,12 @@ impl LoweringContext<'_, 'hir> {\n                     legacy: def.legacy,\n                 });\n             } else {\n-                self.non_exported_macro_attrs.extend(attrs.into_iter());\n+                self.non_exported_macro_attrs.extend(attrs.iter().cloned());\n             }\n             return None;\n         }\n \n-        let kind = self.lower_item_kind(i.span, i.id, &mut ident, &attrs, &mut vis, &i.kind);\n+        let kind = self.lower_item_kind(i.span, i.id, &mut ident, attrs, &mut vis, &i.kind);\n \n         Some(hir::Item {\n             hir_id: self.lower_node_id(i.id),\n@@ -266,7 +266,7 @@ impl LoweringContext<'_, 'hir> {\n         span: Span,\n         id: NodeId,\n         ident: &mut Ident,\n-        attrs: &hir::HirVec<Attribute>,\n+        attrs: &'hir [Attribute],\n         vis: &mut hir::Visibility,\n         i: &ItemKind,\n     ) -> hir::ItemKind<'hir> {\n@@ -487,7 +487,7 @@ impl LoweringContext<'_, 'hir> {\n         id: NodeId,\n         vis: &mut hir::Visibility,\n         ident: &mut Ident,\n-        attrs: &hir::HirVec<Attribute>,\n+        attrs: &'hir [Attribute],\n     ) -> hir::ItemKind<'hir> {\n         debug!(\"lower_use_tree(tree={:?})\", tree);\n         debug!(\"lower_use_tree: vis = {:?}\", vis);\n@@ -550,7 +550,7 @@ impl LoweringContext<'_, 'hir> {\n                             hir::Item {\n                                 hir_id: new_id,\n                                 ident,\n-                                attrs: attrs.into_iter().cloned().collect(),\n+                                attrs,\n                                 kind,\n                                 vis,\n                                 span,\n@@ -634,7 +634,7 @@ impl LoweringContext<'_, 'hir> {\n                             hir::Item {\n                                 hir_id: new_hir_id,\n                                 ident,\n-                                attrs: attrs.into_iter().cloned().collect(),\n+                                attrs,\n                                 kind,\n                                 vis,\n                                 span: use_tree.span,"}, {"sha": "c460d9ef6cc75360250555adecd3bcc20ec650de", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -530,7 +530,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         }\n     }\n \n-    fn visit_macro_def(&mut self, macro_def: &'hir MacroDef) {\n+    fn visit_macro_def(&mut self, macro_def: &'hir MacroDef<'hir>) {\n         let node_id = self.hir_to_node_id[&macro_def.hir_id];\n         let def_index = self.definitions.opt_def_index(node_id).unwrap();\n "}, {"sha": "063c0f9b2784f2c6d1131abfd2183455a23425d2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -746,7 +746,7 @@ pub struct Crate<'hir> {\n     pub module: Mod,\n     pub attrs: &'hir [Attribute],\n     pub span: Span,\n-    pub exported_macros: &'hir [MacroDef],\n+    pub exported_macros: &'hir [MacroDef<'hir>],\n     // Attributes from non-exported macros, kept only for collecting the library feature list.\n     pub non_exported_macro_attrs: &'hir [Attribute],\n \n@@ -841,10 +841,10 @@ impl Crate<'_> {\n ///\n /// Not parsed directly, but created on macro import or `macro_rules!` expansion.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct MacroDef {\n+pub struct MacroDef<'hir> {\n     pub name: Name,\n     pub vis: Visibility,\n-    pub attrs: HirVec<Attribute>,\n+    pub attrs: &'hir [Attribute],\n     pub hir_id: HirId,\n     pub span: Span,\n     pub body: TokenStream,\n@@ -2445,7 +2445,7 @@ pub struct ItemId {\n pub struct Item<'hir> {\n     pub ident: Ident,\n     pub hir_id: HirId,\n-    pub attrs: HirVec<Attribute>,\n+    pub attrs: &'hir [Attribute],\n     pub kind: ItemKind<'hir>,\n     pub vis: Visibility,\n     pub span: Span,\n@@ -2804,7 +2804,7 @@ pub enum Node<'hir> {\n     Arm(&'hir Arm),\n     Block(&'hir Block),\n     Local(&'hir Local),\n-    MacroDef(&'hir MacroDef),\n+    MacroDef(&'hir MacroDef<'hir>),\n \n     /// `Ctor` refers to the constructor of an enum variant or struct. Only tuple or unit variants\n     /// with synthesized constructors."}, {"sha": "1c717f0f1f507e77b268926fcdc53bd80afe6de2", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         });\n     }\n \n-    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n+    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n         self.annotate(md.hir_id, &md.attrs, md.span, AnnotationKind::Required, |_| {});\n     }\n }\n@@ -397,7 +397,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n         intravisit::walk_foreign_item(self, i);\n     }\n \n-    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n+    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n         self.check_missing_stability(md.hir_id, md.span, \"macro\");\n     }\n }"}, {"sha": "e1750887ac43e95ae625dcdea8db007a7df43e2e", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -232,7 +232,7 @@ impl CodegenCx<'ll, 'tcx> {\n             let llty = self.layout_of(ty).llvm_type(self);\n             let (g, attrs) = match self.tcx.hir().get(id) {\n                 Node::Item(&hir::Item {\n-                    ref attrs, span, kind: hir::ItemKind::Static(..), ..\n+                    attrs, span, kind: hir::ItemKind::Static(..), ..\n                 }) => {\n                     let sym_str = sym.as_str();\n                     if let Some(g) = self.get_declared_value(&sym_str) {\n@@ -256,7 +256,7 @@ impl CodegenCx<'ll, 'tcx> {\n                     ref attrs, span, kind: hir::ForeignItemKind::Static(..), ..\n                 }) => {\n                     let fn_attrs = self.tcx.codegen_fn_attrs(def_id);\n-                    (check_and_apply_linkage(&self, &fn_attrs, ty, sym, span), attrs)\n+                    (check_and_apply_linkage(&self, &fn_attrs, ty, sym, span), &**attrs)\n                 }\n \n                 item => bug!(\"get_static: expected static, found {:?}\", item)"}, {"sha": "4d7e18828d170ee44db7839dee5cf42e2edc778b", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -1160,7 +1160,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.visibility[def_id] <-\n             ty::Visibility::from_hir(&item.vis, item.hir_id, tcx));\n         record!(self.per_def.span[def_id] <- item.span);\n-        record!(self.per_def.attributes[def_id] <- &item.attrs);\n+        record!(self.per_def.attributes[def_id] <- item.attrs);\n         // FIXME(eddyb) there should be a nicer way to do this.\n         match item.kind {\n             hir::ItemKind::ForeignMod(ref fm) => record!(self.per_def.children[def_id] <-\n@@ -1271,7 +1271,7 @@ impl EncodeContext<'tcx> {\n     }\n \n     /// Serialize the text of exported macros\n-    fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef) {\n+    fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef<'_>) {\n         use syntax::print::pprust;\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         record!(self.per_def.kind[def_id] <- EntryKind::MacroDef(self.lazy(MacroDef {\n@@ -1280,7 +1280,7 @@ impl EncodeContext<'tcx> {\n         })));\n         record!(self.per_def.visibility[def_id] <- ty::Visibility::Public);\n         record!(self.per_def.span[def_id] <- macro_def.span);\n-        record!(self.per_def.attributes[def_id] <- &macro_def.attrs);\n+        record!(self.per_def.attributes[def_id] <- macro_def.attrs);\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n     }\n@@ -1599,7 +1599,7 @@ impl Visitor<'tcx> for EncodeContext<'tcx> {\n         intravisit::walk_generics(self, generics);\n         self.encode_info_for_generics(generics);\n     }\n-    fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef) {\n+    fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef<'tcx>) {\n         self.encode_info_for_macro_def(macro_def);\n     }\n }"}, {"sha": "d7639362c57eec60060b6d6c2b4c03d5534583d4", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -247,7 +247,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         self.record(\"Attribute\", Id::Attr(attr.id), attr);\n     }\n \n-    fn visit_macro_def(&mut self, macro_def: &'v hir::MacroDef) {\n+    fn visit_macro_def(&mut self, macro_def: &'v hir::MacroDef<'v>) {\n         self.record(\"MacroDef\", Id::Node(macro_def.hir_id), macro_def);\n         hir_visit::walk_macro_def(self, macro_def)\n     }"}, {"sha": "b60c6fe183f3ac27baa1cacc792d353136cbb22a", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -870,7 +870,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         intravisit::walk_mod(self, m, id);\n     }\n \n-    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n+    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n         if attr::find_transparency(&md.attrs, md.legacy).0 != Transparency::Opaque {\n             self.update(md.hir_id, Some(AccessLevel::Public));\n             return"}, {"sha": "99525cc30fdb7e698fb51d87b623560e72a3ef1f", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "patch": "@@ -1127,7 +1127,7 @@ impl hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n                             self.span = Some(item.span.shrink_to_lo());\n                         } else {\n                             // Find the first attribute on the item.\n-                            for attr in &item.attrs {\n+                            for attr in item.attrs {\n                                 if self.span.map_or(true, |span| attr.span < span) {\n                                     self.span = Some(attr.span.shrink_to_lo());\n                                 }"}]}