{"sha": "a5277622c52741165e43ba45e7b982474548962d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Mjc3NjIyYzUyNzQxMTY1ZTQzYmE0NWU3Yjk4MjQ3NDU0ODk2MmQ=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-09-29T13:23:02Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-11-03T20:27:40Z"}, "message": "Remove examples in doc-comments of `AsciiExt` methods\n\nThe doc comments were incorrect before: since the inherent ascii methods\nshadow the `AsciiExt` methods, the examples didn't use the `AsciiExt` at\nall. Since the trait will be deprecated soon anyway, the easiest solution\nwas to remove the examples and already mention that the methods will be\ndeprecated in the near future.", "tree": {"sha": "03e5f2cb120632802548ef2b1b40dac2a3790913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e5f2cb120632802548ef2b1b40dac2a3790913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5277622c52741165e43ba45e7b982474548962d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5277622c52741165e43ba45e7b982474548962d", "html_url": "https://github.com/rust-lang/rust/commit/a5277622c52741165e43ba45e7b982474548962d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5277622c52741165e43ba45e7b982474548962d/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f5556854ebe396d6e4550e5255de6696a924e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5556854ebe396d6e4550e5255de6696a924e1c", "html_url": "https://github.com/rust-lang/rust/commit/6f5556854ebe396d6e4550e5255de6696a924e1c"}], "stats": {"total": 367, "additions": 48, "deletions": 319}, "files": [{"sha": "6524838f8b0435f998b4f0002763a95b510c1e7e", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 48, "deletions": 319, "changes": 367, "blob_url": "https://github.com/rust-lang/rust/blob/a5277622c52741165e43ba45e7b982474548962d/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5277622c52741165e43ba45e7b982474548962d/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=a5277622c52741165e43ba45e7b982474548962d", "patch": "@@ -60,19 +60,10 @@ pub trait AsciiExt {\n \n     /// Checks if the value is within the ASCII range.\n     ///\n-    /// # Examples\n+    /// # Note\n     ///\n-    /// ```\n-    /// use std::ascii::AsciiExt;\n-    ///\n-    /// let ascii = 'a';\n-    /// let non_ascii = '\u2764';\n-    /// let int_ascii = 97;\n-    ///\n-    /// assert!(ascii.is_ascii());\n-    /// assert!(!non_ascii.is_ascii());\n-    /// assert!(int_ascii.is_ascii());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn is_ascii(&self) -> bool;\n \n@@ -86,19 +77,10 @@ pub trait AsciiExt {\n     /// To uppercase ASCII characters in addition to non-ASCII characters, use\n     /// [`str::to_uppercase`].\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ascii::AsciiExt;\n+    /// # Note\n     ///\n-    /// let ascii = 'a';\n-    /// let non_ascii = '\u2764';\n-    /// let int_ascii = 97;\n-    ///\n-    /// assert_eq!('A', ascii.to_ascii_uppercase());\n-    /// assert_eq!('\u2764', non_ascii.to_ascii_uppercase());\n-    /// assert_eq!(65, int_ascii.to_ascii_uppercase());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     ///\n     /// [`make_ascii_uppercase`]: #tymethod.make_ascii_uppercase\n     /// [`str::to_uppercase`]: ../primitive.str.html#method.to_uppercase\n@@ -115,19 +97,10 @@ pub trait AsciiExt {\n     /// To lowercase ASCII characters in addition to non-ASCII characters, use\n     /// [`str::to_lowercase`].\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ascii::AsciiExt;\n-    ///\n-    /// let ascii = 'A';\n-    /// let non_ascii = '\u2764';\n-    /// let int_ascii = 65;\n+    /// # Note\n     ///\n-    /// assert_eq!('a', ascii.to_ascii_lowercase());\n-    /// assert_eq!('\u2764', non_ascii.to_ascii_lowercase());\n-    /// assert_eq!(97, int_ascii.to_ascii_lowercase());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     ///\n     /// [`make_ascii_lowercase`]: #tymethod.make_ascii_lowercase\n     /// [`str::to_lowercase`]: ../primitive.str.html#method.to_lowercase\n@@ -139,20 +112,10 @@ pub trait AsciiExt {\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\n     /// but without allocating and copying temporaries.\n     ///\n-    /// # Examples\n+    /// # Note\n     ///\n-    /// ```\n-    /// use std::ascii::AsciiExt;\n-    ///\n-    /// let ascii1 = 'A';\n-    /// let ascii2 = 'a';\n-    /// let ascii3 = 'A';\n-    /// let ascii4 = 'z';\n-    ///\n-    /// assert!(ascii1.eq_ignore_ascii_case(&ascii2));\n-    /// assert!(ascii1.eq_ignore_ascii_case(&ascii3));\n-    /// assert!(!ascii1.eq_ignore_ascii_case(&ascii4));\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn eq_ignore_ascii_case(&self, other: &Self) -> bool;\n \n@@ -164,17 +127,10 @@ pub trait AsciiExt {\n     /// To return a new uppercased value without modifying the existing one, use\n     /// [`to_ascii_uppercase`].\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ascii::AsciiExt;\n+    /// # Note\n     ///\n-    /// let mut ascii = 'a';\n-    ///\n-    /// ascii.make_ascii_uppercase();\n-    ///\n-    /// assert_eq!('A', ascii);\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     ///\n     /// [`to_ascii_uppercase`]: #tymethod.to_ascii_uppercase\n     #[stable(feature = \"ascii\", since = \"1.9.0\")]\n@@ -188,17 +144,10 @@ pub trait AsciiExt {\n     /// To return a new lowercased value without modifying the existing one, use\n     /// [`to_ascii_lowercase`].\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ascii::AsciiExt;\n+    /// # Note\n     ///\n-    /// let mut ascii = 'A';\n-    ///\n-    /// ascii.make_ascii_lowercase();\n-    ///\n-    /// assert_eq!('a', ascii);\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     ///\n     /// [`to_ascii_lowercase`]: #tymethod.to_ascii_lowercase\n     #[stable(feature = \"ascii\", since = \"1.9.0\")]\n@@ -209,32 +158,10 @@ pub trait AsciiExt {\n     /// For strings, true if all characters in the string are\n     /// ASCII alphabetic.\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(ascii_ctype)]\n-    /// # #![allow(non_snake_case)]\n-    /// use std::ascii::AsciiExt;\n-    /// let A = 'A';\n-    /// let G = 'G';\n-    /// let a = 'a';\n-    /// let g = 'g';\n-    /// let zero = '0';\n-    /// let percent = '%';\n-    /// let space = ' ';\n-    /// let lf = '\\n';\n-    /// let esc = '\\u{001b}';\n+    /// # Note\n     ///\n-    /// assert!(A.is_ascii_alphabetic());\n-    /// assert!(G.is_ascii_alphabetic());\n-    /// assert!(a.is_ascii_alphabetic());\n-    /// assert!(g.is_ascii_alphabetic());\n-    /// assert!(!zero.is_ascii_alphabetic());\n-    /// assert!(!percent.is_ascii_alphabetic());\n-    /// assert!(!space.is_ascii_alphabetic());\n-    /// assert!(!lf.is_ascii_alphabetic());\n-    /// assert!(!esc.is_ascii_alphabetic());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     fn is_ascii_alphabetic(&self) -> bool { unimplemented!(); }\n \n@@ -243,32 +170,10 @@ pub trait AsciiExt {\n     /// For strings, true if all characters in the string are\n     /// ASCII uppercase.\n     ///\n-    /// # Examples\n+    /// # Note\n     ///\n-    /// ```\n-    /// #![feature(ascii_ctype)]\n-    /// # #![allow(non_snake_case)]\n-    /// use std::ascii::AsciiExt;\n-    /// let A = 'A';\n-    /// let G = 'G';\n-    /// let a = 'a';\n-    /// let g = 'g';\n-    /// let zero = '0';\n-    /// let percent = '%';\n-    /// let space = ' ';\n-    /// let lf = '\\n';\n-    /// let esc = '\\u{001b}';\n-    ///\n-    /// assert!(A.is_ascii_uppercase());\n-    /// assert!(G.is_ascii_uppercase());\n-    /// assert!(!a.is_ascii_uppercase());\n-    /// assert!(!g.is_ascii_uppercase());\n-    /// assert!(!zero.is_ascii_uppercase());\n-    /// assert!(!percent.is_ascii_uppercase());\n-    /// assert!(!space.is_ascii_uppercase());\n-    /// assert!(!lf.is_ascii_uppercase());\n-    /// assert!(!esc.is_ascii_uppercase());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     fn is_ascii_uppercase(&self) -> bool { unimplemented!(); }\n \n@@ -277,32 +182,10 @@ pub trait AsciiExt {\n     /// For strings, true if all characters in the string are\n     /// ASCII lowercase.\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(ascii_ctype)]\n-    /// # #![allow(non_snake_case)]\n-    /// use std::ascii::AsciiExt;\n-    /// let A = 'A';\n-    /// let G = 'G';\n-    /// let a = 'a';\n-    /// let g = 'g';\n-    /// let zero = '0';\n-    /// let percent = '%';\n-    /// let space = ' ';\n-    /// let lf = '\\n';\n-    /// let esc = '\\u{001b}';\n+    /// # Note\n     ///\n-    /// assert!(!A.is_ascii_lowercase());\n-    /// assert!(!G.is_ascii_lowercase());\n-    /// assert!(a.is_ascii_lowercase());\n-    /// assert!(g.is_ascii_lowercase());\n-    /// assert!(!zero.is_ascii_lowercase());\n-    /// assert!(!percent.is_ascii_lowercase());\n-    /// assert!(!space.is_ascii_lowercase());\n-    /// assert!(!lf.is_ascii_lowercase());\n-    /// assert!(!esc.is_ascii_lowercase());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     fn is_ascii_lowercase(&self) -> bool { unimplemented!(); }\n \n@@ -312,32 +195,10 @@ pub trait AsciiExt {\n     /// For strings, true if all characters in the string are\n     /// ASCII alphanumeric.\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(ascii_ctype)]\n-    /// # #![allow(non_snake_case)]\n-    /// use std::ascii::AsciiExt;\n-    /// let A = 'A';\n-    /// let G = 'G';\n-    /// let a = 'a';\n-    /// let g = 'g';\n-    /// let zero = '0';\n-    /// let percent = '%';\n-    /// let space = ' ';\n-    /// let lf = '\\n';\n-    /// let esc = '\\u{001b}';\n+    /// # Note\n     ///\n-    /// assert!(A.is_ascii_alphanumeric());\n-    /// assert!(G.is_ascii_alphanumeric());\n-    /// assert!(a.is_ascii_alphanumeric());\n-    /// assert!(g.is_ascii_alphanumeric());\n-    /// assert!(zero.is_ascii_alphanumeric());\n-    /// assert!(!percent.is_ascii_alphanumeric());\n-    /// assert!(!space.is_ascii_alphanumeric());\n-    /// assert!(!lf.is_ascii_alphanumeric());\n-    /// assert!(!esc.is_ascii_alphanumeric());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     fn is_ascii_alphanumeric(&self) -> bool { unimplemented!(); }\n \n@@ -346,32 +207,10 @@ pub trait AsciiExt {\n     /// For strings, true if all characters in the string are\n     /// ASCII digits.\n     ///\n-    /// # Examples\n+    /// # Note\n     ///\n-    /// ```\n-    /// #![feature(ascii_ctype)]\n-    /// # #![allow(non_snake_case)]\n-    /// use std::ascii::AsciiExt;\n-    /// let A = 'A';\n-    /// let G = 'G';\n-    /// let a = 'a';\n-    /// let g = 'g';\n-    /// let zero = '0';\n-    /// let percent = '%';\n-    /// let space = ' ';\n-    /// let lf = '\\n';\n-    /// let esc = '\\u{001b}';\n-    ///\n-    /// assert!(!A.is_ascii_digit());\n-    /// assert!(!G.is_ascii_digit());\n-    /// assert!(!a.is_ascii_digit());\n-    /// assert!(!g.is_ascii_digit());\n-    /// assert!(zero.is_ascii_digit());\n-    /// assert!(!percent.is_ascii_digit());\n-    /// assert!(!space.is_ascii_digit());\n-    /// assert!(!lf.is_ascii_digit());\n-    /// assert!(!esc.is_ascii_digit());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     fn is_ascii_digit(&self) -> bool { unimplemented!(); }\n \n@@ -381,32 +220,10 @@ pub trait AsciiExt {\n     /// For strings, true if all characters in the string are\n     /// ASCII hex digits.\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(ascii_ctype)]\n-    /// # #![allow(non_snake_case)]\n-    /// use std::ascii::AsciiExt;\n-    /// let A = 'A';\n-    /// let G = 'G';\n-    /// let a = 'a';\n-    /// let g = 'g';\n-    /// let zero = '0';\n-    /// let percent = '%';\n-    /// let space = ' ';\n-    /// let lf = '\\n';\n-    /// let esc = '\\u{001b}';\n+    /// # Note\n     ///\n-    /// assert!(A.is_ascii_hexdigit());\n-    /// assert!(!G.is_ascii_hexdigit());\n-    /// assert!(a.is_ascii_hexdigit());\n-    /// assert!(!g.is_ascii_hexdigit());\n-    /// assert!(zero.is_ascii_hexdigit());\n-    /// assert!(!percent.is_ascii_hexdigit());\n-    /// assert!(!space.is_ascii_hexdigit());\n-    /// assert!(!lf.is_ascii_hexdigit());\n-    /// assert!(!esc.is_ascii_hexdigit());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     fn is_ascii_hexdigit(&self) -> bool { unimplemented!(); }\n \n@@ -420,32 +237,10 @@ pub trait AsciiExt {\n     /// For strings, true if all characters in the string are\n     /// ASCII punctuation.\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(ascii_ctype)]\n-    /// # #![allow(non_snake_case)]\n-    /// use std::ascii::AsciiExt;\n-    /// let A = 'A';\n-    /// let G = 'G';\n-    /// let a = 'a';\n-    /// let g = 'g';\n-    /// let zero = '0';\n-    /// let percent = '%';\n-    /// let space = ' ';\n-    /// let lf = '\\n';\n-    /// let esc = '\\u{001b}';\n+    /// # Note\n     ///\n-    /// assert!(!A.is_ascii_punctuation());\n-    /// assert!(!G.is_ascii_punctuation());\n-    /// assert!(!a.is_ascii_punctuation());\n-    /// assert!(!g.is_ascii_punctuation());\n-    /// assert!(!zero.is_ascii_punctuation());\n-    /// assert!(percent.is_ascii_punctuation());\n-    /// assert!(!space.is_ascii_punctuation());\n-    /// assert!(!lf.is_ascii_punctuation());\n-    /// assert!(!esc.is_ascii_punctuation());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     fn is_ascii_punctuation(&self) -> bool { unimplemented!(); }\n \n@@ -454,32 +249,10 @@ pub trait AsciiExt {\n     /// For strings, true if all characters in the string are\n     /// ASCII punctuation.\n     ///\n-    /// # Examples\n+    /// # Note\n     ///\n-    /// ```\n-    /// #![feature(ascii_ctype)]\n-    /// # #![allow(non_snake_case)]\n-    /// use std::ascii::AsciiExt;\n-    /// let A = 'A';\n-    /// let G = 'G';\n-    /// let a = 'a';\n-    /// let g = 'g';\n-    /// let zero = '0';\n-    /// let percent = '%';\n-    /// let space = ' ';\n-    /// let lf = '\\n';\n-    /// let esc = '\\u{001b}';\n-    ///\n-    /// assert!(A.is_ascii_graphic());\n-    /// assert!(G.is_ascii_graphic());\n-    /// assert!(a.is_ascii_graphic());\n-    /// assert!(g.is_ascii_graphic());\n-    /// assert!(zero.is_ascii_graphic());\n-    /// assert!(percent.is_ascii_graphic());\n-    /// assert!(!space.is_ascii_graphic());\n-    /// assert!(!lf.is_ascii_graphic());\n-    /// assert!(!esc.is_ascii_graphic());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     fn is_ascii_graphic(&self) -> bool { unimplemented!(); }\n \n@@ -505,32 +278,10 @@ pub trait AsciiExt {\n     /// [pct]: http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01\n     /// [bfs]: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(ascii_ctype)]\n-    /// # #![allow(non_snake_case)]\n-    /// use std::ascii::AsciiExt;\n-    /// let A = 'A';\n-    /// let G = 'G';\n-    /// let a = 'a';\n-    /// let g = 'g';\n-    /// let zero = '0';\n-    /// let percent = '%';\n-    /// let space = ' ';\n-    /// let lf = '\\n';\n-    /// let esc = '\\u{001b}';\n+    /// # Note\n     ///\n-    /// assert!(!A.is_ascii_whitespace());\n-    /// assert!(!G.is_ascii_whitespace());\n-    /// assert!(!a.is_ascii_whitespace());\n-    /// assert!(!g.is_ascii_whitespace());\n-    /// assert!(!zero.is_ascii_whitespace());\n-    /// assert!(!percent.is_ascii_whitespace());\n-    /// assert!(space.is_ascii_whitespace());\n-    /// assert!(lf.is_ascii_whitespace());\n-    /// assert!(!esc.is_ascii_whitespace());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     fn is_ascii_whitespace(&self) -> bool { unimplemented!(); }\n \n@@ -539,32 +290,10 @@ pub trait AsciiExt {\n     /// Note that most ASCII whitespace characters are control\n     /// characters, but SPACE is not.\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(ascii_ctype)]\n-    /// # #![allow(non_snake_case)]\n-    /// use std::ascii::AsciiExt;\n-    /// let A = 'A';\n-    /// let G = 'G';\n-    /// let a = 'a';\n-    /// let g = 'g';\n-    /// let zero = '0';\n-    /// let percent = '%';\n-    /// let space = ' ';\n-    /// let lf = '\\n';\n-    /// let esc = '\\u{001b}';\n+    /// # Note\n     ///\n-    /// assert!(!A.is_ascii_control());\n-    /// assert!(!G.is_ascii_control());\n-    /// assert!(!a.is_ascii_control());\n-    /// assert!(!g.is_ascii_control());\n-    /// assert!(!zero.is_ascii_control());\n-    /// assert!(!percent.is_ascii_control());\n-    /// assert!(!space.is_ascii_control());\n-    /// assert!(lf.is_ascii_control());\n-    /// assert!(esc.is_ascii_control());\n-    /// ```\n+    /// This method will be deprecated in favor of the identically-named\n+    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     fn is_ascii_control(&self) -> bool { unimplemented!(); }\n }"}]}