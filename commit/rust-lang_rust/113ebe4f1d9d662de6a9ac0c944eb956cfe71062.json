{"sha": "113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExM2ViZTRmMWQ5ZDY2MmRlNmE5YWMwYzk0NGViOTU2Y2ZlNzEwNjI=", "commit": {"author": {"name": "Marco Concetto Rudilosso", "email": "marcoconcettorudilosso@gmail.com", "date": "2017-10-21T21:50:15Z"}, "committer": {"name": "Marco Concetto Rudilosso", "email": "marcoconcettorudilosso@gmail.com", "date": "2017-10-21T21:50:15Z"}, "message": "Create NormalizeTy query", "tree": {"sha": "78e56086157683b9ae8b1eb740461d15454fa26d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78e56086157683b9ae8b1eb740461d15454fa26d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "html_url": "https://github.com/rust-lang/rust/commit/113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/comments", "author": {"login": "Maaarcocr", "id": 9624267, "node_id": "MDQ6VXNlcjk2MjQyNjc=", "avatar_url": "https://avatars.githubusercontent.com/u/9624267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maaarcocr", "html_url": "https://github.com/Maaarcocr", "followers_url": "https://api.github.com/users/Maaarcocr/followers", "following_url": "https://api.github.com/users/Maaarcocr/following{/other_user}", "gists_url": "https://api.github.com/users/Maaarcocr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maaarcocr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maaarcocr/subscriptions", "organizations_url": "https://api.github.com/users/Maaarcocr/orgs", "repos_url": "https://api.github.com/users/Maaarcocr/repos", "events_url": "https://api.github.com/users/Maaarcocr/events{/privacy}", "received_events_url": "https://api.github.com/users/Maaarcocr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Maaarcocr", "id": 9624267, "node_id": "MDQ6VXNlcjk2MjQyNjc=", "avatar_url": "https://avatars.githubusercontent.com/u/9624267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maaarcocr", "html_url": "https://github.com/Maaarcocr", "followers_url": "https://api.github.com/users/Maaarcocr/followers", "following_url": "https://api.github.com/users/Maaarcocr/following{/other_user}", "gists_url": "https://api.github.com/users/Maaarcocr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maaarcocr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maaarcocr/subscriptions", "organizations_url": "https://api.github.com/users/Maaarcocr/orgs", "repos_url": "https://api.github.com/users/Maaarcocr/repos", "events_url": "https://api.github.com/users/Maaarcocr/events{/privacy}", "received_events_url": "https://api.github.com/users/Maaarcocr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff8773d7be45699fe1aa847b83d096e1c00a516b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8773d7be45699fe1aa847b83d096e1c00a516b", "html_url": "https://github.com/rust-lang/rust/commit/ff8773d7be45699fe1aa847b83d096e1c00a516b"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "ebb8868642b1b0a601f5d98a8d874ec3a79058eb", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -635,6 +635,7 @@ define_dep_nodes!( <'tcx>\n \n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n+    [] NormalizeTy,\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "78e6e9ae15338c8ba40f6fa9e518dab3700942b8", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -480,16 +480,16 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     {\n         assert!(!value.needs_subst());\n         let value = self.erase_late_bound_regions(value);\n-        self.normalize_associated_type(&value)\n+        self.normalize_associated_type_in(&value)\n     }\n \n     /// Fully normalizes any associated types in `value`, using an\n     /// empty environment and `Reveal::All` mode (therefore, suitable\n     /// only for monomorphized code during trans, basically).\n-    pub fn normalize_associated_type<T>(self, value: &T) -> T\n+    pub fn normalize_associated_type_in<T>(self, value: &T) -> T\n         where T: TransNormalize<'tcx>\n     {\n-        debug!(\"normalize_associated_type(t={:?})\", value);\n+        debug!(\"normalize_associated_type_in(t={:?})\", value);\n \n         let param_env = ty::ParamEnv::empty(Reveal::All);\n         let value = self.erase_regions(value);"}, {"sha": "d082fb889b7b4a7ee397060cc0428a05d3685cfd", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -130,10 +130,8 @@ impl<'a, 'gcx> TypeFolder<'gcx, 'gcx> for AssociatedTypeNormalizer<'a, 'gcx> {\n         if !ty.has_projections() {\n             ty\n         } else {\n-            self.tcx.trans_trait_caches.project_cache.memoize(ty, || {\n-                debug!(\"AssociatedTypeNormalizer: ty={:?}\", ty);\n-                self.tcx.normalize_associated_type(&ty)\n-            })\n+            debug!(\"AssociatedTypeNormalizer: ty={:?}\", ty);\n+            self.tcx.normalize_ty(ty)\n         }\n     }\n }"}, {"sha": "b5f04a91203ec92e950375653cbbcfc127950685", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -2322,4 +2322,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.sess.features.borrow().clone_closures\n     };\n+    providers.normalize_ty = |tcx, ty| {\n+        tcx.normalize_associated_type_in(&ty)\n+    };\n }"}, {"sha": "0d6fc561a8350981e0cb62fd80b9f16692453e84", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -532,3 +532,9 @@ impl<'tcx> QueryDescription for queries::has_copy_closures<'tcx> {\n         format!(\"seeing if the crate has enabled `Copy` closures\")\n     }\n }\n+\n+impl<'tcx> QueryDescription for queries::normalize_ty<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: Ty) -> String {\n+        format!(\"normalising types\")\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "f68e15f269511a82c3ea95179978510fc35e2246", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -349,6 +349,7 @@ define_maps! { <'tcx>\n     // Normally you would just use `tcx.erase_regions(&value)`,\n     // however, which uses this query as a kind of cache.\n     [] fn erase_regions_ty: erase_regions_ty(Ty<'tcx>) -> Ty<'tcx>,\n+    [] fn normalize_ty: normalize_ty_node(Ty<'tcx>) -> Ty<'tcx>,\n }\n \n //////////////////////////////////////////////////////////////////////\n@@ -490,3 +491,6 @@ fn output_filenames_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n fn vtable_methods_node<'tcx>(trait_ref: ty::PolyTraitRef<'tcx>) -> DepConstructor<'tcx> {\n     DepConstructor::VtableMethods{ trait_ref }\n }\n+fn normalize_ty_node<'tcx>(_: Ty<'tcx>) -> DepConstructor<'tcx> {\n+    DepConstructor::NormalizeTy\n+}"}, {"sha": "0baa65508b527512f5cb37d5d901c2b5bc509f99", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -431,7 +431,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         // fields are actually safe.\n                         let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n-                            let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n+                            let field_ty = cx.normalize_associated_type_in(&field.ty(cx, substs));\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n                                 FfiSafe => {\n@@ -463,7 +463,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n                         let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n-                            let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n+                            let field_ty = cx.normalize_associated_type_in(&field.ty(cx, substs));\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n                                 FfiSafe => {\n@@ -516,7 +516,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         // Check the contained variants.\n                         for variant in &def.variants {\n                             for field in &variant.fields {\n-                                let arg = cx.normalize_associated_type(&field.ty(cx, substs));\n+                                let arg = cx.normalize_associated_type_in(&field.ty(cx, substs));\n                                 let r = self.check_type_for_ffi(cache, arg);\n                                 match r {\n                                     FfiSafe => {}\n@@ -629,7 +629,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n-        let ty = self.cx.tcx.normalize_associated_type(&ty);\n+        let ty = self.cx.tcx.normalize_associated_type_in(&ty);\n \n         match self.check_type_for_ffi(&mut FxHashSet(), ty) {\n             FfiResult::FfiSafe => {}"}, {"sha": "6fd406037cde241a4f9baf97dbe9c1c65070508c", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -80,7 +80,7 @@ pub fn compute_fields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,\n         ty::TyGenerator(def_id, substs, _) => {\n             if variant_index > 0 { bug!(\"{} is a generator, which only has one variant\", t);}\n             substs.field_tys(def_id, cx.tcx()).map(|t| {\n-                cx.tcx().normalize_associated_type(&t)\n+                cx.tcx().normalize_associated_type_in(&t)\n             }).collect()\n         },\n         _ => bug!(\"{} is not a type that can have fields.\", t)"}, {"sha": "a1bf64681c00c31501b5550c1c2d684cd7928682", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -642,7 +642,7 @@ impl<'a, 'tcx> LayoutTyper<'tcx> for &'a SharedCrateContext<'a, 'tcx> {\n     }\n \n     fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.tcx().normalize_associated_type(&ty)\n+        self.tcx().normalize_associated_type_in(&ty)\n     }\n }\n "}, {"sha": "a6827abd41b22591c0e589b5d44d5e61d9d46105", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -582,7 +582,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n         ty::TyGenerator(def_id, substs, _) => {\n             let upvar_tys : Vec<_> = substs.field_tys(def_id, cx.tcx()).map(|t| {\n-                cx.tcx().normalize_associated_type(&t)\n+                cx.tcx().normalize_associated_type_in(&t)\n             }).collect();\n             prepare_tuple_metadata(cx,\n                                    t,"}, {"sha": "0fe5b8f4ca265ed5359249d45a3f2eaec925bb7e", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -376,7 +376,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 name_to_append_suffix_to.push_str(\",\");\n             }\n \n-            let actual_type = cx.tcx().normalize_associated_type(&actual_type);\n+            let actual_type = cx.tcx().normalize_associated_type_in(&actual_type);\n             // Add actual type name to <...> clause of function name\n             let actual_type_name = compute_debuginfo_type_name(cx,\n                                                                actual_type,\n@@ -389,7 +389,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         let template_params: Vec<_> = if cx.sess().opts.debuginfo == FullDebugInfo {\n             let names = get_type_parameter_names(cx, generics);\n             substs.types().zip(names).map(|(ty, name)| {\n-                let actual_type = cx.tcx().normalize_associated_type(&ty);\n+                let actual_type = cx.tcx().normalize_associated_type_in(&ty);\n                 let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n                 let name = CString::new(name.as_str().as_bytes()).unwrap();\n                 unsafe {"}, {"sha": "079b7ee3eaba88efcb61e1c6485dc95040f0585a", "filename": "src/librustc_trans_utils/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ebe4f1d9d662de6a9ac0c944eb956cfe71062/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fmonomorphize.rs?ref=113ebe4f1d9d662de6a9ac0c944eb956cfe71062", "patch": "@@ -131,6 +131,6 @@ pub fn field_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           f: &'tcx ty::FieldDef)\n                           -> Ty<'tcx>\n {\n-    tcx.normalize_associated_type(&f.ty(tcx, param_substs))\n+    tcx.normalize_associated_type_in(&f.ty(tcx, param_substs))\n }\n "}]}