{"sha": "5e178b29b43adbd3313fbc70037cf7aba0c98a56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMTc4YjI5YjQzYWRiZDMzMTNmYmM3MDAzN2NmN2FiYTBjOThhNTY=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-28T03:13:32Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-01T03:29:49Z"}, "message": "Do the check even when the feature is not enabled", "tree": {"sha": "9785dc027f65aef345383770f0b23794da07daec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9785dc027f65aef345383770f0b23794da07daec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e178b29b43adbd3313fbc70037cf7aba0c98a56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjbeLZzPb62/vY3smZSV3NIU3bZIFAmDdNq0ACgkQZSV3NIU3\nbZJBKQ//V4bHPr3wnvsQFjrACYbMJIvUhxtOJ5c22RQSGJy5wmkXS/HC/pLK++yY\nx8qDCE4/0yBjg5NJN6cCY0u03HKdcHaimP3wdyT82JVN0H/V/15ZxoI6yCPRTNPG\nywu1/LLTPHlJV5XTULxeahADE8ZsAdWpncv7QD65zVNP1gFeXf7jmZGNQ91xrwvo\nbXduKI9Y6KlQkw/dKZ81ZRetJlFeUHRsrJgwmAvogr6QpKWiUqrVcdk25HTspT+I\nwok8sInrg21wVppvTTnRVifwHv50c9wfiyn0KFtB/tPA34mii+SOD0EB1b0s9rqx\nTluweGuCcxOEiOHyUn4M8pnZ3ViUSN5Ac1NfzUCnqA2oJ7A2RNOKUl8ug5w3Sh+R\naKWv56VrDrEPuEm4um+nM2IwKed+cxQ8HpNEWAdxlT/AxjayJfGbvw4qr9K9lR8f\nIKPkr2LVK7gHN+r/uGhNWphsY+xKsQibYs6i1TkaLtxryL02vEcul+VCyCkZc5Nd\n/J7WODOHcnX9r7GGDvVu4PbPiukQshGzEGAY5GU2WPDJ6S1lJAzzSAQllvxLUVwn\n7fRXWQlI9+0E67bhypv69uOi2tNXwqKuU8keBBdyjW0goY5qAm26lyvWncKYExoY\nzoW7c6hFKW2VTWpdGXwb6YFpnqbjaPpDdlYAdmjFO+hEyyo6t6Q=\n=QB20\n-----END PGP SIGNATURE-----", "payload": "tree 9785dc027f65aef345383770f0b23794da07daec\nparent 22a8d46ed36271ed3a3d73b7747ab3a300b5af10\nauthor Deadbeef <ent3rm4n@gmail.com> 1624850012 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1625110189 +0800\n\nDo the check even when the feature is not enabled\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e178b29b43adbd3313fbc70037cf7aba0c98a56", "html_url": "https://github.com/rust-lang/rust/commit/5e178b29b43adbd3313fbc70037cf7aba0c98a56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e178b29b43adbd3313fbc70037cf7aba0c98a56/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "url": "https://api.github.com/repos/rust-lang/rust/commits/22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "html_url": "https://github.com/rust-lang/rust/commit/22a8d46ed36271ed3a3d73b7747ab3a300b5af10"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "d783852aacadd205294ff5584939f70e454d668f", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e178b29b43adbd3313fbc70037cf7aba0c98a56/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e178b29b43adbd3313fbc70037cf7aba0c98a56/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=5e178b29b43adbd3313fbc70037cf7aba0c98a56", "patch": "@@ -60,9 +60,7 @@ impl NonConstExpr {\n fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let mut vis = CheckConstVisitor::new(tcx);\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut vis.as_deep_visitor());\n-    if tcx.features().enabled(sym::const_trait_impl) {\n-        tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckConstTraitVisitor::new(tcx));\n-    }\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckConstTraitVisitor::new(tcx));\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n@@ -80,6 +78,8 @@ impl<'tcx> CheckConstTraitVisitor<'tcx> {\n }\n \n impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<'tcx> {\n+    /// check for const trait impls, and errors if the impl uses provided/default functions\n+    /// of the trait being implemented; as those provided functions can be non-const.\n     fn visit_item(&mut self, item: &'hir hir::Item<'hir>) {\n         let _: Option<_> = try {\n             if let hir::ItemKind::Impl(ref imp) = item.kind {\n@@ -103,6 +103,9 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n                         .filter(|it| matches!(it.kind, hir::AssocItemKind::Fn { .. }))\n                         .count();\n \n+                    // number of trait functions unequal to functions in impl,\n+                    // meaning that one or more provided/default functions of the\n+                    // trait are used.\n                     if trait_fn_cnt != impl_fn_cnt {\n                         self.tcx\n                             .sess"}]}