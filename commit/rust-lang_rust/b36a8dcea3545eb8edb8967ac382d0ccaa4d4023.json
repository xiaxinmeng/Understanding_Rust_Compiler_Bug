{"sha": "b36a8dcea3545eb8edb8967ac382d0ccaa4d4023", "node_id": "C_kwDOAAsO6NoAKGIzNmE4ZGNlYTM1NDVlYjhlZGI4OTY3YWMzODJkMGNjYWE0ZDQwMjM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-01-25T11:31:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-25T11:31:40Z"}, "message": "Rollup merge of #106583 - estebank:suggest-result-coercion, r=compiler-errors\n\nSuggest coercion of `Result` using `?`\n\nFix #47560.", "tree": {"sha": "153a1883dca48ddf8ec16921ecda6fba65ea404f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/153a1883dca48ddf8ec16921ecda6fba65ea404f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0RMcCRBK7hj4Ov3rIwAASIoIAFNfOBu0D5qoVOZFgqMcP9ps\njilpWQ1ZpZnBKF9daiRgwBChN/AMYnUTk5zOBSqTjhVltv6JhXaHHGrVwh4O4/L2\niZ4d98L7egXVo552oEw2L6UhqgXynB2UjGJQWUwh7DVPEWEalsO0p/rspNQpegpD\n7YPepHh/G+4HDizyyJmm6fx0oKCbDnBEuXDiIDA3Wp7W5H0iOEkdqHdbUzZXhZOz\ngPBGmxCm7POen4umULJiODZRlRem8hlcL3ZS2q19+7hmP3/JLIMx4PSGtTjhhJRp\nK0OdW96GETa58eF4KaiVbI4XWQVBZjGw0iCUquPzUxMWKgOWvMjgHbOHK5hm5qs=\n=NAQj\n-----END PGP SIGNATURE-----\n", "payload": "tree 153a1883dca48ddf8ec16921ecda6fba65ea404f\nparent c0930c497c404c30eb610efe660b09049e223b16\nparent 62aff3bbc75468bedf751b01a746e52886be760c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1674646300 +0530\ncommitter GitHub <noreply@github.com> 1674646300 +0530\n\nRollup merge of #106583 - estebank:suggest-result-coercion, r=compiler-errors\n\nSuggest coercion of `Result` using `?`\n\nFix #47560.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023", "html_url": "https://github.com/rust-lang/rust/commit/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0930c497c404c30eb610efe660b09049e223b16", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0930c497c404c30eb610efe660b09049e223b16", "html_url": "https://github.com/rust-lang/rust/commit/c0930c497c404c30eb610efe660b09049e223b16"}, {"sha": "62aff3bbc75468bedf751b01a746e52886be760c", "url": "https://api.github.com/repos/rust-lang/rust/commits/62aff3bbc75468bedf751b01a746e52886be760c", "html_url": "https://github.com/rust-lang/rust/commit/62aff3bbc75468bedf751b01a746e52886be760c"}], "stats": {"total": 237, "additions": 236, "deletions": 1}, "files": [{"sha": "7379e75963f532b5d6642b27d2b025b6cb739b30", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=b36a8dcea3545eb8edb8967ac382d0ccaa4d4023", "patch": "@@ -59,7 +59,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_copied_or_cloned(err, expr, expr_ty, expected)\n             || self.suggest_clone_for_ref(err, expr, expr_ty, expected)\n             || self.suggest_into(err, expr, expr_ty, expected)\n-            || self.suggest_floating_point_literal(err, expr, expected);\n+            || self.suggest_floating_point_literal(err, expr, expected)\n+            || self.note_result_coercion(err, expr, expected, expr_ty);\n         if !suggested {\n             self.point_at_expr_source_of_inferred_type(err, expr, expr_ty, expected);\n         }\n@@ -696,6 +697,56 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n     }\n \n+    pub(crate) fn note_result_coercion(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'tcx>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) -> bool {\n+        let ty::Adt(e, substs_e) = expected.kind() else { return false; };\n+        let ty::Adt(f, substs_f) = found.kind() else { return false; };\n+        if e.did() != f.did() {\n+            return false;\n+        }\n+        if Some(e.did()) != self.tcx.get_diagnostic_item(sym::Result) {\n+            return false;\n+        }\n+        let map = self.tcx.hir();\n+        if let Some(hir::Node::Expr(expr)) = map.find_parent(expr.hir_id)\n+            && let hir::ExprKind::Ret(_) = expr.kind\n+        {\n+            // `return foo;`\n+        } else if map.get_return_block(expr.hir_id).is_some() {\n+            // Function's tail expression.\n+        } else {\n+            return false;\n+        }\n+        let e = substs_e.type_at(1);\n+        let f = substs_f.type_at(1);\n+        if self\n+            .infcx\n+            .type_implements_trait(\n+                self.tcx.get_diagnostic_item(sym::Into).unwrap(),\n+                [f, e],\n+                self.param_env,\n+            )\n+            .must_apply_modulo_regions()\n+        {\n+            err.multipart_suggestion(\n+                \"use `?` to coerce and return an appropriate `Err`, and wrap the resulting value \\\n+                 in `Ok` so the expression remains of type `Result`\",\n+                vec![\n+                    (expr.span.shrink_to_lo(), \"Ok(\".to_string()),\n+                    (expr.span.shrink_to_hi(), \"?)\".to_string()),\n+                ],\n+                Applicability::MaybeIncorrect,\n+            );\n+            return true;\n+        }\n+        false\n+    }\n+\n     /// If the expected type is an enum (Issue #55250) with any variants whose\n     /// sole field is of the found type, suggest such variants. (Issue #42764)\n     fn suggest_compatible_variants("}, {"sha": "23bafa6c5c94c70a93afabd380f71ab5c3f74427", "filename": "tests/ui/type/type-check/coerce-result-return-value-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.rs?ref=b36a8dcea3545eb8edb8967ac382d0ccaa4d4023", "patch": "@@ -0,0 +1,24 @@\n+struct A;\n+struct B;\n+impl From<A> for B {\n+    fn from(_: A) -> Self { B }\n+}\n+fn foo4(x: Result<(), A>) -> Result<(), B> {\n+    match true {\n+        true => x, //~ ERROR mismatched types\n+        false => x,\n+    }\n+}\n+fn foo5(x: Result<(), A>) -> Result<(), B> {\n+    match true {\n+        true => return x, //~ ERROR mismatched types\n+        false => return x,\n+    }\n+}\n+fn main() {\n+    let _ = foo4(Ok(()));\n+    let _ = foo5(Ok(()));\n+    let _: Result<(), B> = { //~ ERROR mismatched types\n+        Err(A);\n+    };\n+}"}, {"sha": "5992162341e6e25198d6361572f47847a70f5a9c", "filename": "tests/ui/type/type-check/coerce-result-return-value-2.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.stderr?ref=b36a8dcea3545eb8edb8967ac382d0ccaa4d4023", "patch": "@@ -0,0 +1,47 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value-2.rs:8:17\n+   |\n+LL | fn foo4(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+LL |     match true {\n+LL |         true => x,\n+   |                 ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n+   |\n+LL |         true => Ok(x?),\n+   |                 +++ ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value-2.rs:14:24\n+   |\n+LL | fn foo5(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+LL |     match true {\n+LL |         true => return x,\n+   |                        ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n+   |\n+LL |         true => return Ok(x?),\n+   |                        +++ ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value-2.rs:21:28\n+   |\n+LL |       let _: Result<(), B> = {\n+   |  ____________________________^\n+LL | |         Err(A);\n+LL | |     };\n+   | |_____^ expected enum `Result`, found `()`\n+   |\n+   = note:   expected enum `Result<(), B>`\n+           found unit type `()`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8a05407070dada4298d08914dc33301334f89d97", "filename": "tests/ui/type/type-check/coerce-result-return-value.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.fixed?ref=b36a8dcea3545eb8edb8967ac382d0ccaa4d4023", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+struct A;\n+struct B;\n+impl From<A> for B {\n+    fn from(_: A) -> Self { B }\n+}\n+fn foo1(x: Result<(), A>) -> Result<(), B> {\n+    Ok(x?) //~ ERROR mismatched types\n+}\n+fn foo2(x: Result<(), A>) -> Result<(), B> {\n+    return Ok(x?); //~ ERROR mismatched types\n+}\n+fn foo3(x: Result<(), A>) -> Result<(), B> {\n+    if true {\n+        Ok(x?) //~ ERROR mismatched types\n+    } else {\n+        Ok(x?) //~ ERROR mismatched types\n+    }\n+}\n+fn main() {\n+    let _ = foo1(Ok(()));\n+    let _ = foo2(Ok(()));\n+    let _ = foo3(Ok(()));\n+}"}, {"sha": "442203addb787241788f92c9ee179506ae498367", "filename": "tests/ui/type/type-check/coerce-result-return-value.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.rs?ref=b36a8dcea3545eb8edb8967ac382d0ccaa4d4023", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+struct A;\n+struct B;\n+impl From<A> for B {\n+    fn from(_: A) -> Self { B }\n+}\n+fn foo1(x: Result<(), A>) -> Result<(), B> {\n+    x //~ ERROR mismatched types\n+}\n+fn foo2(x: Result<(), A>) -> Result<(), B> {\n+    return x; //~ ERROR mismatched types\n+}\n+fn foo3(x: Result<(), A>) -> Result<(), B> {\n+    if true {\n+        x //~ ERROR mismatched types\n+    } else {\n+        x //~ ERROR mismatched types\n+    }\n+}\n+fn main() {\n+    let _ = foo1(Ok(()));\n+    let _ = foo2(Ok(()));\n+    let _ = foo3(Ok(()));\n+}"}, {"sha": "550153520782c683848d4bdd0d7b2ad13d9089ec", "filename": "tests/ui/type/type-check/coerce-result-return-value.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b36a8dcea3545eb8edb8967ac382d0ccaa4d4023/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr?ref=b36a8dcea3545eb8edb8967ac382d0ccaa4d4023", "patch": "@@ -0,0 +1,65 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value.rs:8:5\n+   |\n+LL | fn foo1(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+LL |     x\n+   |     ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n+   |\n+LL |     Ok(x?)\n+   |     +++ ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value.rs:11:12\n+   |\n+LL | fn foo2(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+LL |     return x;\n+   |            ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n+   |\n+LL |     return Ok(x?);\n+   |            +++ ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value.rs:15:9\n+   |\n+LL | fn foo3(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+LL |     if true {\n+LL |         x\n+   |         ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n+   |\n+LL |         Ok(x?)\n+   |         +++ ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value.rs:17:9\n+   |\n+LL | fn foo3(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+...\n+LL |         x\n+   |         ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n+   |\n+LL |         Ok(x?)\n+   |         +++ ++\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}