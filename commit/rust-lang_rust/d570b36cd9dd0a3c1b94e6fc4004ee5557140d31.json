{"sha": "d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NzBiMzZjZDlkZDBhM2MxYjk0ZTZmYzQwMDRlZTU1NTcxNDBkMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-23T04:05:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-23T04:05:50Z"}, "message": "Auto merge of #54778 - scottmcm:stabilize-ihle, r=pnkfelix\n\nStabilize impl_header_lifetime_elision in 2015\n\n~~This is currently blocked on https://github.com/rust-lang/rust/issues/54902; it should be good after that~~\n\nIt's already stable in 2018; this finishes the stabilization.\n\nFCP completed (https://github.com/rust-lang/rust/issues/15872#issuecomment-417953153), proposal (https://github.com/rust-lang/rust/issues/15872#issuecomment-412759783).\n\nTracking issue: https://github.com/rust-lang/rust/issues/15872\nUsage examples (from libcore): https://github.com/rust-lang/rust/pull/54687", "tree": {"sha": "f13031b3fda69007a6bb6ea2d8d448e0e9c923bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f13031b3fda69007a6bb6ea2d8d448e0e9c923bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "html_url": "https://github.com/rust-lang/rust/commit/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "979fb16db9649bf7d9e2f979f8e0630689eefc0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/979fb16db9649bf7d9e2f979f8e0630689eefc0e", "html_url": "https://github.com/rust-lang/rust/commit/979fb16db9649bf7d9e2f979f8e0630689eefc0e"}, {"sha": "18f7db3d69377ebf85b6ff3a319445411f4b16b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f7db3d69377ebf85b6ff3a319445411f4b16b1", "html_url": "https://github.com/rust-lang/rust/commit/18f7db3d69377ebf85b6ff3a319445411f4b16b1"}], "stats": {"total": 420, "additions": 156, "deletions": 264}, "files": [{"sha": "4156b1bec92a09dc1a9bb7ffcd5a0e1db9db6aed", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -87,7 +87,7 @@\n #![feature(doc_spotlight)]\n #![feature(extern_types)]\n #![feature(fundamental)]\n-#![feature(impl_header_lifetime_elision)]\n+#![cfg_attr(stage0, feature(impl_header_lifetime_elision))]\n #![feature(intrinsics)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]"}, {"sha": "d340924aab1db7b602ef44070b11a1f7eaa3327f", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -19,7 +19,7 @@\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n-#![feature(impl_header_lifetime_elision)]\n+#![cfg_attr(stage0, feature(impl_header_lifetime_elision))]\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]"}, {"sha": "a1363168f0117b732e413dfae32c0edee0d94b3e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -125,9 +125,8 @@ pub struct LoweringContext<'a> {\n \n     // Whether or not in-band lifetimes are being collected. This is used to\n     // indicate whether or not we're in a place where new lifetimes will result\n-    // in in-band lifetime definitions, such a function or an impl header.\n-    // This will always be false unless the `in_band_lifetimes` or\n-    // `impl_header_lifetime_elision` feature is enabled.\n+    // in in-band lifetime definitions, such a function or an impl header,\n+    // including implicit lifetimes from `impl_header_lifetime_elision`.\n     is_collecting_in_band_lifetimes: bool,\n \n     // Currently in-scope lifetimes defined in impl headers, fn headers, or HRTB.\n@@ -709,12 +708,8 @@ impl<'a> LoweringContext<'a> {\n         assert!(self.lifetimes_to_define.is_empty());\n         let old_anonymous_lifetime_mode = self.anonymous_lifetime_mode;\n \n-        if self.sess.features_untracked().impl_header_lifetime_elision {\n-            self.anonymous_lifetime_mode = anonymous_lifetime_mode;\n-            self.is_collecting_in_band_lifetimes = true;\n-        } else if self.sess.features_untracked().in_band_lifetimes {\n-            self.is_collecting_in_band_lifetimes = true;\n-        }\n+        self.anonymous_lifetime_mode = anonymous_lifetime_mode;\n+        self.is_collecting_in_band_lifetimes = true;\n \n         let (in_band_ty_params, res) = f(self);\n "}, {"sha": "d8defabd3fe6616f90802efe8d956f438952c158", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -67,7 +67,7 @@\n #![feature(step_trait)]\n #![feature(integer_atomics)]\n #![feature(test)]\n-#![feature(impl_header_lifetime_elision)]\n+#![cfg_attr(stage0, feature(impl_header_lifetime_elision))]\n #![feature(in_band_lifetimes)]\n #![feature(macro_at_most_once_rep)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "b197d29b184de11f6adec4e559c466290d270f06", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -21,7 +21,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(in_band_lifetimes)]\n-#![feature(impl_header_lifetime_elision)]\n+#![cfg_attr(stage0, feature(impl_header_lifetime_elision))]\n #![feature(unboxed_closures)]\n #![feature(fn_traits)]\n #![feature(unsize)]"}, {"sha": "2f44dff2e22c3472cc18c58232f2ab585600fb57", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -16,7 +16,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n-#![feature(impl_header_lifetime_elision)]\n+#![cfg_attr(stage0, feature(impl_header_lifetime_elision))]\n #![feature(slice_patterns)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(box_patterns)]"}, {"sha": "cd421de5f1db4a93d60dfb8decce359228a8aeaf", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -375,15 +375,15 @@ and likely to change in the future.\n \n E0705: r##\"\n A `#![feature]` attribute was declared for a feature that is stable in\n-the current edition.\n+the current edition, but not in all editions.\n \n Erroneous code example:\n \n ```ignore (limited to a warning during 2018 edition development)\n #![feature(rust_2018_preview)]\n-#![feature(impl_header_lifetime_elision)] // error: the feature\n-                                          // `impl_header_lifetime_elision` is\n-                                          // included in the Rust 2018 edition\n+#![feature(test_2018_feature)] // error: the feature\n+                               // `test_2018_feature` is\n+                               // included in the Rust 2018 edition\n ```\n \n \"##,"}, {"sha": "d0f407aa9243b84d8b410756c9a417eeb844e5d6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -462,9 +462,8 @@ declare_features! (\n \n     (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n \n-    // impl<I:Iterator> Iterator for &mut Iterator\n-    // impl Debug for Foo<'_>\n-    (active, impl_header_lifetime_elision, \"1.30.0\", Some(15872), Some(Edition::Edition2018)),\n+    // Perma-unstable; added for testing E0705\n+    (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n \n     // Support for arbitrary delimited token streams in non-macro attributes\n     (active, unrestricted_attribute_tokens, \"1.30.0\", Some(44690), None),\n@@ -684,6 +683,9 @@ declare_features! (\n     (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n     // Scoped lints\n     (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n+    // impl<I:Iterator> Iterator for &mut Iterator\n+    // impl Debug for Foo<'_>\n+    (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "19f9ecc26cf0127545fe7f748f2d12146db8bc77", "filename": "src/test/ui/E0705.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2FE0705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2FE0705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0705.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -10,8 +10,11 @@\n \n // compile-pass\n \n-#![feature(impl_header_lifetime_elision)]\n-//~^ WARN the feature `impl_header_lifetime_elision` is included in the Rust 2018 edition\n+// This is a stub feature that doesn't control anything, so to make tidy happy,\n+// gate-test-test_2018_feature\n+\n+#![feature(test_2018_feature)]\n+//~^ WARN the feature `test_2018_feature` is included in the Rust 2018 edition\n #![feature(rust_2018_preview)]\n \n fn main() {}"}, {"sha": "ccf8a04fdfc66cea1ff3a8024c51ed684494810a", "filename": "src/test/ui/E0705.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2FE0705.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2FE0705.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0705.stderr?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -1,6 +1,6 @@\n-warning[E0705]: the feature `impl_header_lifetime_elision` is included in the Rust 2018 edition\n-  --> $DIR/E0705.rs:13:12\n+warning[E0705]: the feature `test_2018_feature` is included in the Rust 2018 edition\n+  --> $DIR/E0705.rs:16:12\n    |\n-LL | #![feature(impl_header_lifetime_elision)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![feature(test_2018_feature)]\n+   |            ^^^^^^^^^^^^^^^^^\n "}, {"sha": "9487d11d505ca184fc23c0aa838086b34505f0bb", "filename": "src/test/ui/feature-gates/feature-gate-impl_header_lifetime_elision-with-in_band.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_header_lifetime_elision-with-in_band.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_header_lifetime_elision-with-in_band.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_header_lifetime_elision-with-in_band.stderr?ref=979fb16db9649bf7d9e2f979f8e0630689eefc0e", "patch": "@@ -1,15 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/feature-gate-impl_header_lifetime_elision-with-in_band.rs:18:22\n-   |\n-LL | impl MyTrait<'a> for &u32 { }\n-   |                      ^ expected lifetime parameter\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/feature-gate-impl_header_lifetime_elision-with-in_band.rs:24:23\n-   |\n-LL | impl MarkerTrait for &'_ MyStruct { }\n-   |                       ^^ expected lifetime parameter\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "2c8a7dd4305a76e8777a251df1000616db422a90", "filename": "src/test/ui/feature-gates/feature-gate-impl_header_lifetime_elision.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_header_lifetime_elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_header_lifetime_elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_header_lifetime_elision.stderr?ref=979fb16db9649bf7d9e2f979f8e0630689eefc0e", "patch": "@@ -1,15 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/feature-gate-impl_header_lifetime_elision.rs:15:26\n-   |\n-LL | impl<'a> MyTrait<'a> for &u32 { }\n-   |                          ^ expected lifetime parameter\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/feature-gate-impl_header_lifetime_elision.rs:18:18\n-   |\n-LL | impl<'a> MyTrait<'_> for &'a f32 { }\n-   |                  ^^ expected lifetime parameter\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "ae1f81c2f5721fd54742b3036ebd2b7d0dcb8b60", "filename": "src/test/ui/feature-gates/feature-gate-in_band_lifetimes.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -10,9 +10,6 @@\n \n #![allow(warnings)]\n \n-// Make sure this related feature didn't accidentally enable this\n-#![feature(impl_header_lifetime_elision)]\n-\n fn foo(x: &'x u8) -> &'x u8 { x }\n //~^ ERROR use of undeclared lifetime name\n //~^^ ERROR use of undeclared lifetime name"}, {"sha": "cc0855306e162e97d984ca8807d8cebbd90b6aeb", "filename": "src/test/ui/feature-gates/feature-gate-in_band_lifetimes.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -1,101 +1,101 @@\n error[E0261]: use of undeclared lifetime name `'x`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:16:12\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:13:12\n    |\n LL | fn foo(x: &'x u8) -> &'x u8 { x }\n    |            ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'x`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:16:23\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:13:23\n    |\n LL | fn foo(x: &'x u8) -> &'x u8 { x }\n    |                       ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:28:12\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:25:12\n    |\n LL | impl<'a> X<'b> {\n    |            ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:30:27\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:27:27\n    |\n LL |     fn inner_2(&self) -> &'b u8 {\n    |                           ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:36:8\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:33:8\n    |\n LL | impl X<'b> {\n    |        ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:38:27\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:35:27\n    |\n LL |     fn inner_3(&self) -> &'b u8 {\n    |                           ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:46:9\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:43:9\n    |\n LL | impl Y<&'a u8> {\n    |         ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:48:25\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:45:25\n    |\n LL |     fn inner(&self) -> &'a u8 {\n    |                         ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:56:27\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:53:27\n    |\n LL |     fn any_lifetime() -> &'b u8;\n    |                           ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:58:27\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:55:27\n    |\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n    |                           ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:58:40\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:55:40\n    |\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n    |                                        ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:63:14\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:60:14\n    |\n LL | impl MyTrait<'a> for Y<&'a u8> {\n    |              ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:63:25\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:60:25\n    |\n LL | impl MyTrait<'a> for Y<&'a u8> {\n    |                         ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:66:31\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:63:31\n    |\n LL |     fn my_lifetime(&self) -> &'a u8 { self.0 }\n    |                               ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:68:27\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:65:27\n    |\n LL |     fn any_lifetime() -> &'b u8 { &0 }\n    |                           ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:70:27\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:67:27\n    |\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n    |                           ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:70:40\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:67:40\n    |\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n    |                                        ^^ undeclared lifetime"}, {"sha": "49f528df8f6ccf88817e1fed056e6ee41684b0af", "filename": "src/test/ui/impl-header-lifetime-elision/assoc-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -13,8 +13,6 @@\n \n #![allow(warnings)]\n \n-#![feature(impl_header_lifetime_elision)]\n-\n trait MyTrait {\n     type Output;\n }"}, {"sha": "022b8bc717b96120a93bc35a6e565fa32c2e3e5f", "filename": "src/test/ui/impl-header-lifetime-elision/assoc-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -1,11 +1,11 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/assoc-type.rs:23:19\n+  --> $DIR/assoc-type.rs:21:19\n    |\n LL |     type Output = &i32;\n    |                   ^ expected lifetime parameter\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/assoc-type.rs:28:20\n+  --> $DIR/assoc-type.rs:26:20\n    |\n LL |     type Output = &'_ i32;\n    |                    ^^ expected lifetime parameter"}, {"sha": "384c08ff5bb38f8e4b51ccd90c1c7b71678988a0", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -13,8 +13,6 @@\n \n #![allow(warnings)]\n \n-#![feature(impl_header_lifetime_elision)]\n-\n use std::fmt::Debug;\n \n // Equivalent to `Box<dyn Debug + 'static>`:"}, {"sha": "f0e174a12074d8a24e098dff3beb54e4549439f5", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -1,11 +1,11 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/dyn-trait.rs:32:16\n+  --> $DIR/dyn-trait.rs:30:16\n    |\n LL |     static_val(x); //~ ERROR cannot infer\n    |                ^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 31:26...\n-  --> $DIR/dyn-trait.rs:31:26\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 29:26...\n+  --> $DIR/dyn-trait.rs:29:26\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                          ^^"}, {"sha": "c0d454d9426464e83338c777de0dd44bfaf02a1c", "filename": "src/test/ui/impl-header-lifetime-elision/explicit-and-elided-same-header.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fexplicit-and-elided-same-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fexplicit-and-elided-same-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fexplicit-and-elided-same-header.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -12,8 +12,6 @@\n \n #![allow(warnings)]\n \n-#![feature(impl_header_lifetime_elision)]\n-\n // This works for functions...\n fn foo<'a>(x: &str, y: &'a str) {}\n "}, {"sha": "d4b8acd60108bc7490eed0f472e2a1871f6a8749", "filename": "src/test/ui/impl-header-lifetime-elision/inherent-impl.rs", "status": "renamed", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Finherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Finherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Finherent-impl.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(warnings)]\n+// compile-pass\n \n-trait MyTrait<'a> { }\n+struct Foo<'a>(&'a u8);\n \n-impl<'a> MyTrait<'a> for &u32 { }\n-//~^ ERROR missing lifetime specifier\n-\n-impl<'a> MyTrait<'_> for &'a f32 { }\n-//~^ ERROR missing lifetime specifier\n+impl Foo<'_> {\n+    fn x() {}\n+}\n \n fn main() {}", "previous_filename": "src/test/ui/feature-gates/feature-gate-impl_header_lifetime_elision.rs"}, {"sha": "b68a0f375f60d5c5ffc0d8362ee3609bb6c42a96", "filename": "src/test/ui/impl-header-lifetime-elision/path-elided.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n #![allow(warnings)]\n \n-#![feature(impl_header_lifetime_elision)]\n-\n trait MyTrait { }\n \n struct Foo<'a> { x: &'a u32 }"}, {"sha": "03e8f8c9ad5d2cb8ec2570785438eee54abbf7d6", "filename": "src/test/ui/impl-header-lifetime-elision/path-elided.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/path-elided.rs:18:18\n+  --> $DIR/path-elided.rs:16:18\n    |\n LL | impl MyTrait for Foo {\n    |                  ^^^ expected lifetime parameter"}, {"sha": "b2c7a415efe98f4122e8cd55f0cea5df61e73ffe", "filename": "src/test/ui/impl-header-lifetime-elision/path-underscore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-underscore.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -14,8 +14,6 @@\n \n #![allow(warnings)]\n \n-#![feature(impl_header_lifetime_elision)]\n-\n trait MyTrait { }\n \n struct Foo<'a> { x: &'a u32 }"}, {"sha": "e62e7dc56a4afa595ebfc2871b487dd0cdd962c1", "filename": "src/test/ui/impl-header-lifetime-elision/ref-underscore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fref-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fref-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fref-underscore.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -14,8 +14,6 @@\n \n #![allow(warnings)]\n \n-#![feature(impl_header_lifetime_elision)]\n-\n trait MyTrait { }\n \n impl MyTrait for &i32 {"}, {"sha": "1fb57b96ba9b444a1c7be9e2ae53f6f4d06e64af", "filename": "src/test/ui/impl-header-lifetime-elision/trait-elided.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n #![allow(warnings)]\n \n-#![feature(impl_header_lifetime_elision)]\n-\n trait MyTrait<'a> { }\n \n impl MyTrait for u32 {"}, {"sha": "7138b321f97d46712c45ab98aaa1a257333e971f", "filename": "src/test/ui/impl-header-lifetime-elision/trait-elided.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/trait-elided.rs:16:6\n+  --> $DIR/trait-elided.rs:14:6\n    |\n LL | impl MyTrait for u32 {\n    |      ^^^^^^^ expected lifetime parameter"}, {"sha": "54d23f5f4dea8c4bbf532fcf96e0bba03ad70052", "filename": "src/test/ui/impl-header-lifetime-elision/trait-underscore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-underscore.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -15,8 +15,6 @@\n \n #![allow(warnings)]\n \n-#![feature(impl_header_lifetime_elision)]\n-\n trait MyTrait<'a> { }\n \n // This is equivalent to `MyTrait<'a> for &'b i32`, which is proven by"}, {"sha": "7b4a40e26b1bf2f2814796770ae38bc70a9ac7c3", "filename": "src/test/ui/issues/issue-17905-2.rs", "status": "renamed", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,20 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(warnings)]\n+#[derive(Debug)]\n+struct Pair<T, V> (T, V);\n \n-// Make sure this related feature didn't accidentally enable this\n-#![feature(in_band_lifetimes)]\n+impl Pair<\n+    &str,\n+    isize\n+> {\n+    fn say(self: &Pair<&str, isize>) {\n+        println!(\"{:?}\", self);\n+    }\n+}\n \n-trait MyTrait<'a> { }\n-\n-impl MyTrait<'a> for &u32 { }\n-//~^ ERROR missing lifetime specifier\n-\n-struct MyStruct;\n-trait MarkerTrait {}\n-\n-impl MarkerTrait for &'_ MyStruct { }\n-//~^ ERROR missing lifetime specifier\n-\n-fn main() {}\n+fn main() {\n+    let result = &Pair(\"shane\", 1);\n+    result.say();\n+}", "previous_filename": "src/test/ui/feature-gates/feature-gate-impl_header_lifetime_elision-with-in_band.rs"}, {"sha": "f6f23be2ab88a30d0bd28482911dff6e672282c5", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -0,0 +1,45 @@\n+error[E0308]: mismatched method receiver\n+  --> $DIR/issue-17905-2.rs:18:18\n+   |\n+LL |     fn say(self: &Pair<&str, isize>) {\n+   |                  ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `Pair<&'_ str, _>`\n+              found type `Pair<&str, _>`\n+note: the anonymous lifetime #2 defined on the method body at 18:5...\n+  --> $DIR/issue-17905-2.rs:18:5\n+   |\n+LL | /     fn say(self: &Pair<&str, isize>) {\n+LL | |         println!(\"{:?}\", self);\n+LL | |     }\n+   | |_____^\n+note: ...does not necessarily outlive the lifetime '_ as defined on the impl at 15:5\n+  --> $DIR/issue-17905-2.rs:15:5\n+   |\n+LL |     &str,\n+   |     ^\n+\n+error[E0308]: mismatched method receiver\n+  --> $DIR/issue-17905-2.rs:18:18\n+   |\n+LL |     fn say(self: &Pair<&str, isize>) {\n+   |                  ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `Pair<&'_ str, _>`\n+              found type `Pair<&str, _>`\n+note: the lifetime '_ as defined on the impl at 15:5...\n+  --> $DIR/issue-17905-2.rs:15:5\n+   |\n+LL |     &str,\n+   |     ^\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 18:5\n+  --> $DIR/issue-17905-2.rs:18:5\n+   |\n+LL | /     fn say(self: &Pair<&str, isize>) {\n+LL | |         println!(\"{:?}\", self);\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "fc5069d9443f5aff18968c3a4a7059bac4583e73", "filename": "src/test/ui/issues/issue-17905.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fissues%2Fissue-17905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fissues%2Fissue-17905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -8,15 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #[derive(Debug)]\n struct Pair<T, V> (T, V);\n \n impl Pair<\n-    &str, //~ ERROR missing lifetime specifier\n+    &str,\n     isize\n > {\n-    fn say(self: &Pair<&str, isize>) {\n-        println!(\"{}\", self);\n+    fn say(&self) {\n+        println!(\"{:?}\", self);\n     }\n }\n "}, {"sha": "1a7aba1748015062f54dc85c6b7ad82140768dcf", "filename": "src/test/ui/issues/issue-17905.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Fissues%2Fissue-17905.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Fissues%2Fissue-17905.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905.stderr?ref=979fb16db9649bf7d9e2f979f8e0630689eefc0e", "patch": "@@ -1,9 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-17905.rs:15:5\n-   |\n-LL |     &str, //~ ERROR missing lifetime specifier\n-   |     ^ expected lifetime parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "8c3462dcf45d215372f57ba19ced2023edce0bfa", "filename": "src/test/ui/issues/issue-19982-2.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Fissues%2Fissue-19982-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Fissues%2Fissue-19982-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19982-2.rs?ref=979fb16db9649bf7d9e2f979f8e0630689eefc0e", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-pass\n-// pretty-expanded FIXME #23616\n-\n-#![feature(fn_traits, unboxed_closures)]\n-\n-#[allow(dead_code)]\n-struct Foo;\n-\n-impl<'a> Fn<(&'a (),)> for Foo {\n-    extern \"rust-call\" fn call(&self, (_,): (&(),)) {}\n-}\n-\n-impl<'a> FnMut<(&'a (),)> for Foo {\n-    extern \"rust-call\" fn call_mut(&mut self, (_,): (&(),)) {}\n-}\n-\n-impl<'a> FnOnce<(&'a (),)> for Foo {\n-    type Output = ();\n-\n-    extern \"rust-call\" fn call_once(self, (_,): (&(),)) {}\n-}\n-\n-fn main() {}"}, {"sha": "3de817c28a85f5bb6921b16d2214bb9b34a1690c", "filename": "src/test/ui/issues/issue-19982.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fissues%2Fissue-19982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fissues%2Fissue-19982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19982.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -8,10 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+// compile-pass\n \n+#![feature(fn_traits, unboxed_closures)]\n+\n+#[allow(dead_code)]\n struct Foo;\n \n-impl Fn<(&(),)> for Foo { } //~ ERROR missing lifetime specifier\n+impl Fn<(&(),)> for Foo {\n+    extern \"rust-call\" fn call(&self, (_,): (&(),)) {}\n+}\n+\n+impl FnMut<(&(),)> for Foo {\n+    extern \"rust-call\" fn call_mut(&mut self, (_,): (&(),)) {}\n+}\n+\n+impl FnOnce<(&(),)> for Foo {\n+    type Output = ();\n+\n+    extern \"rust-call\" fn call_once(self, (_,): (&(),)) {}\n+}\n \n fn main() {}"}, {"sha": "9f13ba640a9507ac862153099da0f70874f29700", "filename": "src/test/ui/issues/issue-19982.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Fissues%2Fissue-19982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Fissues%2Fissue-19982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19982.stderr?ref=979fb16db9649bf7d9e2f979f8e0630689eefc0e", "patch": "@@ -1,9 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-19982.rs:15:10\n-   |\n-LL | impl Fn<(&(),)> for Foo { } //~ ERROR missing lifetime specifier\n-   |          ^ expected lifetime parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "84d06a1d20aac76485ed819f553df31cff08644b", "filename": "src/test/ui/nll/issue-52742.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -10,7 +10,6 @@\n \n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n-#![feature(impl_header_lifetime_elision)]\n \n struct Foo<'a, 'b> {\n     x: &'a u32,"}, {"sha": "ccd6ec5cb77fa8f5f9d62e4c425a1fdcff92dfea", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -1,5 +1,5 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/issue-52742.rs:26:9\n+  --> $DIR/issue-52742.rs:25:9\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n    |                 ---------         -- let's call this `'1`"}, {"sha": "a851e6b2071b26be0cbe770a573c92536869210d", "filename": "src/test/ui/underscore-lifetime/in-binder.Rust2015.stderr", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.Rust2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/979fb16db9649bf7d9e2f979f8e0630689eefc0e/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.Rust2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.Rust2015.stderr?ref=979fb16db9649bf7d9e2f979f8e0630689eefc0e", "patch": "@@ -1,46 +0,0 @@\n-error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:12:6\n-   |\n-LL | impl<'_> IceCube<'_> {}\n-   |      ^^ `'_` is a reserved lifetime name\n-\n-error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:17:15\n-   |\n-LL | struct Struct<'_> {\n-   |               ^^ `'_` is a reserved lifetime name\n-\n-error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:23:11\n-   |\n-LL | enum Enum<'_> {\n-   |           ^^ `'_` is a reserved lifetime name\n-\n-error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:29:13\n-   |\n-LL | union Union<'_> {\n-   |             ^^ `'_` is a reserved lifetime name\n-\n-error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:35:13\n-   |\n-LL | trait Trait<'_> {\n-   |             ^^ `'_` is a reserved lifetime name\n-\n-error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:40:8\n-   |\n-LL | fn foo<'_>() {\n-   |        ^^ `'_` is a reserved lifetime name\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/in-binder.rs:12:18\n-   |\n-LL | impl<'_> IceCube<'_> {}\n-   |                  ^^ expected lifetime parameter\n-\n-error: aborting due to 7 previous errors\n-\n-Some errors occurred: E0106, E0637.\n-For more information about an error, try `rustc --explain E0106`."}, {"sha": "e4ee5e8cb2741e8b5cf49a0cc4e32c17d3c43763", "filename": "src/test/ui/underscore-lifetime/in-binder.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -2,44 +2,34 @@\n //\n // Regression test for #52098.\n \n-// revisions: Rust2015 Rust2018\n-//[Rust2018] edition:2018\n-\n struct IceCube<'a> {\n     v: Vec<&'a char>\n }\n \n impl<'_> IceCube<'_> {}\n-//[Rust2015]~^ ERROR `'_` cannot be used here\n-//[Rust2015]~| ERROR missing lifetime specifier\n-//[Rust2018]~^^^ ERROR `'_` cannot be used here\n+//~^ ERROR `'_` cannot be used here\n \n struct Struct<'_> {\n-//[Rust2015]~^ ERROR `'_` cannot be used here\n-//[Rust2018]~^^ ERROR `'_` cannot be used here\n+//~^ ERROR `'_` cannot be used here\n     v: Vec<&'static char>\n }\n \n enum Enum<'_> {\n-//[Rust2015]~^ ERROR `'_` cannot be used here\n-//[Rust2018]~^^ ERROR `'_` cannot be used here\n+//~^ ERROR `'_` cannot be used here\n     Variant\n }\n \n union Union<'_> {\n-//[Rust2015]~^ ERROR `'_` cannot be used here\n-//[Rust2018]~^^ ERROR `'_` cannot be used here\n+//~^ ERROR `'_` cannot be used here\n     a: u32\n }\n \n trait Trait<'_> {\n-//[Rust2015]~^ ERROR `'_` cannot be used here\n-//[Rust2018]~^^ ERROR `'_` cannot be used here\n+//~^ ERROR `'_` cannot be used here\n }\n \n fn foo<'_>() {\n-    //[Rust2015]~^ ERROR `'_` cannot be used here\n-    //[Rust2018]~^^ ERROR `'_` cannot be used here\n+    //~^ ERROR `'_` cannot be used here\n }\n \n fn main() {}"}, {"sha": "fcd7eddb57605197fd7fd9a115847d17d7499ef9", "filename": "src/test/ui/underscore-lifetime/in-binder.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.stderr?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -1,35 +1,35 @@\n error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:12:6\n+  --> $DIR/in-binder.rs:9:6\n    |\n LL | impl<'_> IceCube<'_> {}\n    |      ^^ `'_` is a reserved lifetime name\n \n error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:17:15\n+  --> $DIR/in-binder.rs:12:15\n    |\n LL | struct Struct<'_> {\n    |               ^^ `'_` is a reserved lifetime name\n \n error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:23:11\n+  --> $DIR/in-binder.rs:17:11\n    |\n LL | enum Enum<'_> {\n    |           ^^ `'_` is a reserved lifetime name\n \n error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:29:13\n+  --> $DIR/in-binder.rs:22:13\n    |\n LL | union Union<'_> {\n    |             ^^ `'_` is a reserved lifetime name\n \n error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:35:13\n+  --> $DIR/in-binder.rs:27:13\n    |\n LL | trait Trait<'_> {\n    |             ^^ `'_` is a reserved lifetime name\n \n error[E0637]: `'_` cannot be used here\n-  --> $DIR/in-binder.rs:40:8\n+  --> $DIR/in-binder.rs:31:8\n    |\n LL | fn foo<'_>() {\n    |        ^^ `'_` is a reserved lifetime name", "previous_filename": "src/test/ui/underscore-lifetime/in-binder.Rust2018.stderr"}, {"sha": "9048e65648a2bcdb7ecfeb055bbd75e11673954a", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.rs?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -11,10 +11,6 @@\n struct Foo<'a>(&'a u8);\n struct Baz<'a>(&'_ &'a u8); //~ ERROR missing lifetime specifier\n \n-impl Foo<'_> { //~ ERROR missing lifetime specifier\n-    fn x() {}\n-}\n-\n fn foo<'_> //~ ERROR cannot be used here\n (_: Foo<'_>) {}\n "}, {"sha": "bccecd60e1c9e39f38d85466c6e408bc54a68996", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d570b36cd9dd0a3c1b94e6fc4004ee5557140d31/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=d570b36cd9dd0a3c1b94e6fc4004ee5557140d31", "patch": "@@ -1,11 +1,11 @@\n error[E0637]: `'_` cannot be used here\n-  --> $DIR/underscore-lifetime-binders.rs:18:8\n+  --> $DIR/underscore-lifetime-binders.rs:14:8\n    |\n LL | fn foo<'_> //~ ERROR cannot be used here\n    |        ^^ `'_` is a reserved lifetime name\n \n error[E0637]: `'_` cannot be used here\n-  --> $DIR/underscore-lifetime-binders.rs:24:21\n+  --> $DIR/underscore-lifetime-binders.rs:20:21\n    |\n LL | fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR cannot be used here\n    |                     ^^ `'_` is a reserved lifetime name\n@@ -17,13 +17,7 @@ LL | struct Baz<'a>(&'_ &'a u8); //~ ERROR missing lifetime specifier\n    |                 ^^ expected lifetime parameter\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/underscore-lifetime-binders.rs:14:10\n-   |\n-LL | impl Foo<'_> { //~ ERROR missing lifetime specifier\n-   |          ^^ expected lifetime parameter\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/underscore-lifetime-binders.rs:24:29\n+  --> $DIR/underscore-lifetime-binders.rs:20:29\n    |\n LL | fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR cannot be used here\n    |                             ^^ expected lifetime parameter\n@@ -32,14 +26,14 @@ LL | fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR cannot be used here\n    = help: consider giving it a 'static lifetime\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/underscore-lifetime-binders.rs:30:35\n+  --> $DIR/underscore-lifetime-binders.rs:26:35\n    |\n LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y } //~ ERROR missing lifetime specifier\n    |                                   ^^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_` or `y`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0106, E0637.\n For more information about an error, try `rustc --explain E0106`."}]}