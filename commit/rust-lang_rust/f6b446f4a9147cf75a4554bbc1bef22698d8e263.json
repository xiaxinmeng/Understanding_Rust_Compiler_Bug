{"sha": "f6b446f4a9147cf75a4554bbc1bef22698d8e263", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YjQ0NmY0YTkxNDdjZjc1YTQ1NTRiYmMxYmVmMjI2OThkOGUyNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-20T04:28:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-20T04:28:47Z"}, "message": "Auto merge of #25624 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #25583, #25585, #25602, #25604, #25607, #25611, #25614, #25620\n- Failed merges:", "tree": {"sha": "e44a4246ab05f13ea9fd43a70ba251989eb81477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e44a4246ab05f13ea9fd43a70ba251989eb81477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6b446f4a9147cf75a4554bbc1bef22698d8e263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b446f4a9147cf75a4554bbc1bef22698d8e263", "html_url": "https://github.com/rust-lang/rust/commit/f6b446f4a9147cf75a4554bbc1bef22698d8e263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6b446f4a9147cf75a4554bbc1bef22698d8e263/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43cf733bfa5affc74485daeae179cc2f855b5512", "url": "https://api.github.com/repos/rust-lang/rust/commits/43cf733bfa5affc74485daeae179cc2f855b5512", "html_url": "https://github.com/rust-lang/rust/commit/43cf733bfa5affc74485daeae179cc2f855b5512"}, {"sha": "395d01cf64579312b9b6924d8056264abaaf33f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/395d01cf64579312b9b6924d8056264abaaf33f7", "html_url": "https://github.com/rust-lang/rust/commit/395d01cf64579312b9b6924d8056264abaaf33f7"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "de5adfd1297865314c63abf6ddc589c092b95f99", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6b446f4a9147cf75a4554bbc1bef22698d8e263/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f6b446f4a9147cf75a4554bbc1bef22698d8e263/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=f6b446f4a9147cf75a4554bbc1bef22698d8e263", "patch": "@@ -32,7 +32,7 @@ CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)\n CFG_DISABLE_UNSTABLE_FEATURES=1\n endif\n ifeq ($(CFG_RELEASE_CHANNEL),beta)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-beta\n+CFG_RELEASE=$(CFG_RELEASE_NUM)-beta$(CFG_PRERELEASE_VERSION)\n # When building beta distributables just reuse the same \"beta\" name\n # so when we upload we'll always override the previous beta. This\n # doesn't actually impact the version reported by rustc - it's just"}, {"sha": "4c230c3b0e686b5d93e0ee2657a9dad4f4186e84", "filename": "src/doc/trpl/dining-philosophers.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md?ref=f6b446f4a9147cf75a4554bbc1bef22698d8e263", "patch": "@@ -7,20 +7,20 @@ called \u2018the dining philosophers\u2019. It was originally conceived by Dijkstra in\n [paper]: http://www.usingcsp.com/cspbook.pdf\n \n > In ancient times, a wealthy philanthropist endowed a College to accommodate\n-> five eminent philosophers. Each philosopher had a room in which he could\n-> engage in his professional activity of thinking; there was also a common\n+> five eminent philosophers. Each philosopher had a room in which she could\n+> engage in her professional activity of thinking; there was also a common\n > dining room, furnished with a circular table, surrounded by five chairs, each\n > labelled by the name of the philosopher who was to sit in it. They sat\n > anticlockwise around the table. To the left of each philosopher there was\n > laid a golden fork, and in the centre stood a large bowl of spaghetti, which\n-> was constantly replenished. A philosopher was expected to spend most of his\n-> time thinking; but when he felt hungry, he went to the dining room, sat down\n-> in his own chair, picked up his own fork on his left, and plunged it into the\n+> was constantly replenished. A philosopher was expected to spend most of her\n+> time thinking; but when she felt hungry, she went to the dining room, sat down\n+> in her own chair, picked up her own fork on her left, and plunged it into the\n > spaghetti. But such is the tangled nature of spaghetti that a second fork is\n > required to carry it to the mouth. The philosopher therefore had also to pick\n-> up the fork on his right. When he was finished he would put down both his\n-> forks, get up from his chair, and continue thinking. Of course, a fork can be\n-> used by only one philosopher at a time. If the other philosopher wants it, he\n+> up the fork on her right. When she was finished she would put down both her\n+> forks, get up from her chair, and continue thinking. Of course, a fork can be\n+> used by only one philosopher at a time. If the other philosopher wants it, she\n > just has to wait until the fork is available again.\n \n This classic problem shows off a few different elements of concurrency. The"}, {"sha": "0039f90b82c35c3d37de17700c2d838c94dfe5e0", "filename": "src/doc/trpl/lifetimes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Fdoc%2Ftrpl%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Fdoc%2Ftrpl%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flifetimes.md?ref=f6b446f4a9147cf75a4554bbc1bef22698d8e263", "patch": "@@ -219,7 +219,7 @@ to it.\n ## Lifetime Elision\n \n Rust supports powerful local type inference in function bodies, but it\u2019s\n-forbidden in item signatures to allow reasoning about the types just based in\n+forbidden in item signatures to allow reasoning about the types based on\n the item signature alone. However, for ergonomic reasons a very restricted\n secondary inference algorithm called \u201clifetime elision\u201d applies in function\n signatures. It infers only based on the signature components themselves and not"}, {"sha": "cc7d9b595f910f9b8e7178589779828042cd17f5", "filename": "src/doc/trpl/macros.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Fdoc%2Ftrpl%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Fdoc%2Ftrpl%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmacros.md?ref=f6b446f4a9147cf75a4554bbc1bef22698d8e263", "patch": "@@ -683,9 +683,9 @@ let v = vec![0; 100];\n \n ## assert! and assert_eq!\n \n-These two macros are used in tests. `assert!` takes a boolean, and `assert_eq!`\n-takes two values and compares them. Truth passes, success `panic!`s. Like\n-this:\n+These two macros are used in tests. `assert!` takes a boolean. `assert_eq!`\n+takes two values and checks them for equality. `true` passes, `false` `panic!`s.\n+Like this:\n \n ```rust,no_run\n // A-ok!"}, {"sha": "cb023bcb7a586b3e7be08f26f12007ace67050bd", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=f6b446f4a9147cf75a4554bbc1bef22698d8e263", "patch": "@@ -353,6 +353,10 @@\n //! * `^` - the argument is center-aligned in `width` columns\n //! * `>` - the argument is right-aligned in `width` columns\n //!\n+//! Note that alignment may not be implemented by some types. A good way\n+//! to ensure padding is applied is to format your input, then use this\n+//! resulting string to pad your output.\n+//!\n //! ## Sign/#/0\n //!\n //! These can all be interpreted as flags for a particular formatter."}, {"sha": "b390055664ba030b7a84f83bfd81989e8a9cac64", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=f6b446f4a9147cf75a4554bbc1bef22698d8e263", "patch": "@@ -1841,8 +1841,12 @@ impl str {\n     ///\n     /// # Examples\n     ///\n+    /// ```\n+    /// #![feature(collections)]\n+    ///\n     /// let s = \"HELLO\";\n     /// assert_eq!(s.to_lowercase(), \"hello\");\n+    /// ```\n     #[unstable(feature = \"collections\")]\n     pub fn to_lowercase(&self) -> String {\n         let mut s = String::with_capacity(self.len());\n@@ -1854,8 +1858,12 @@ impl str {\n     ///\n     /// # Examples\n     ///\n+    /// ```\n+    /// #![feature(collections)]\n+    ///\n     /// let s = \"hello\";\n     /// assert_eq!(s.to_uppercase(), \"HELLO\");\n+    /// ```\n     #[unstable(feature = \"collections\")]\n     pub fn to_uppercase(&self) -> String {\n         let mut s = String::with_capacity(self.len());"}, {"sha": "e560fae31a17e91f2bf43e5dae1f39f7631160bc", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f6b446f4a9147cf75a4554bbc1bef22698d8e263", "patch": "@@ -132,15 +132,11 @@ macro_rules! int_impl {\n         ///\n         /// Leading and trailing whitespace represent an error.\n         ///\n-        /// # Arguments\n-        ///\n-        /// * src - A string slice\n-        /// * radix - The base to use. Must lie in the range [2 .. 36]\n-        ///\n-        /// # Return value\n+        /// # Examples\n         ///\n-        /// `Err(ParseIntError)` if the string did not represent a valid number.\n-        /// Otherwise, `Ok(n)` where `n` is the integer represented by `src`.\n+        /// ```\n+        /// assert_eq!(u32::from_str_radix(\"A\", 16), Ok(10));\n+        /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[allow(deprecated)]\n         pub fn from_str_radix(src: &str, radix: u32) -> Result<$T, ParseIntError> {"}, {"sha": "9dfd172707d7b15dd42b36588c3c0e317bb0d13a", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b446f4a9147cf75a4554bbc1bef22698d8e263/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=f6b446f4a9147cf75a4554bbc1bef22698d8e263", "patch": "@@ -429,7 +429,7 @@ impl char {\n     ///\n     /// [1]: ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt\n     ///\n-    /// [`SpecialCasing`.txt`]: ftp://ftp.unicode.org/Public/UNIDATA/SpecialCasing.txt\n+    /// [`SpecialCasing.txt`]: ftp://ftp.unicode.org/Public/UNIDATA/SpecialCasing.txt\n     ///\n     /// [2]: http://www.unicode.org/versions/Unicode4.0.0/ch03.pdf#G33992\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}