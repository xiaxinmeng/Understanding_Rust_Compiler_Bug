{"sha": "26047f15e5f1db33d66979554c29fba3cf4d2c33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MDQ3ZjE1ZTVmMWRiMzNkNjY5Nzk1NTRjMjlmYmEzY2Y0ZDJjMzM=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-20T12:33:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:54:31Z"}, "message": "Move intersection above difference and symmetric_differance.\n\nSo all comes in the order union, intersection, difference and\nsymmetric_difference.", "tree": {"sha": "a6f1f5746305abf6d95e066af23a682ae9961867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6f1f5746305abf6d95e066af23a682ae9961867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26047f15e5f1db33d66979554c29fba3cf4d2c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26047f15e5f1db33d66979554c29fba3cf4d2c33", "html_url": "https://github.com/rust-lang/rust/commit/26047f15e5f1db33d66979554c29fba3cf4d2c33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26047f15e5f1db33d66979554c29fba3cf4d2c33/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05f6050b67d1485702ff5ffed666290d4bd1e4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05f6050b67d1485702ff5ffed666290d4bd1e4d", "html_url": "https://github.com/rust-lang/rust/commit/b05f6050b67d1485702ff5ffed666290d4bd1e4d"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "08720341dbf7eb9f64ae19ca5ab26a21273e293d", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/26047f15e5f1db33d66979554c29fba3cf4d2c33/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26047f15e5f1db33d66979554c29fba3cf4d2c33/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=26047f15e5f1db33d66979554c29fba3cf4d2c33", "patch": "@@ -1124,8 +1124,8 @@ impl BitvSet {\n         }\n     }\n \n-    /// Iterator over each uint stored in the `self` setminus `other`.\n-    /// See [difference_with](#method.difference_with) for an efficient in-place version.\n+    /// Iterator over each uint stored in `self` intersect `other`.\n+    /// See [intersect_with](#method.intersect_with) for an efficient in-place version.\n     ///\n     /// # Example\n     ///\n@@ -1136,32 +1136,25 @@ impl BitvSet {\n     /// let a = BitvSet::from_bitv(from_bytes([0b01101000]));\n     /// let b = BitvSet::from_bitv(from_bytes([0b10100000]));\n     ///\n-    /// // Print 2, 4 in arbitrary order\n-    /// for x in a.difference(&b) {\n-    ///     println!(\"{}\", x);\n-    /// }\n-    ///\n-    /// // Note that difference is not symmetric,\n-    /// // and `b - a` means something else.\n-    /// // This prints 0\n-    /// for x in b.difference(&a) {\n+    /// // Print 2\n+    /// for x in a.intersection(&b) {\n     ///     println!(\"{}\", x);\n     /// }\n     /// ```\n     #[inline]\n-    pub fn difference<'a>(&'a self, other: &'a BitvSet) -> TwoBitPositions<'a> {\n+    pub fn intersection<'a>(&'a self, other: &'a BitvSet) -> Take<TwoBitPositions<'a>> {\n+        let min = cmp::min(self.capacity(), other.capacity());\n         TwoBitPositions {\n             set: self,\n             other: other,\n-            merge: |w1, w2| w1 & !w2,\n+            merge: |w1, w2| w1 & w2,\n             current_word: 0,\n             next_idx: 0\n-        }\n+        }.take(min)\n     }\n \n-    /// Iterator over each uint stored in the symmetric difference of `self` and `other`.\n-    /// See [symmetric_difference_with](#method.symmetric_difference_with) for\n-    /// an efficient in-place version.\n+    /// Iterator over each uint stored in the `self` setminus `other`.\n+    /// See [difference_with](#method.difference_with) for an efficient in-place version.\n     ///\n     /// # Example\n     ///\n@@ -1172,24 +1165,32 @@ impl BitvSet {\n     /// let a = BitvSet::from_bitv(from_bytes([0b01101000]));\n     /// let b = BitvSet::from_bitv(from_bytes([0b10100000]));\n     ///\n-    /// // Print 0, 1, 4 in arbitrary order\n-    /// for x in a.symmetric_difference(&b) {\n+    /// // Print 2, 4 in arbitrary order\n+    /// for x in a.difference(&b) {\n+    ///     println!(\"{}\", x);\n+    /// }\n+    ///\n+    /// // Note that difference is not symmetric,\n+    /// // and `b - a` means something else.\n+    /// // This prints 0\n+    /// for x in b.difference(&a) {\n     ///     println!(\"{}\", x);\n     /// }\n     /// ```\n     #[inline]\n-    pub fn symmetric_difference<'a>(&'a self, other: &'a BitvSet) -> TwoBitPositions<'a> {\n+    pub fn difference<'a>(&'a self, other: &'a BitvSet) -> TwoBitPositions<'a> {\n         TwoBitPositions {\n             set: self,\n             other: other,\n-            merge: |w1, w2| w1 ^ w2,\n+            merge: |w1, w2| w1 & !w2,\n             current_word: 0,\n             next_idx: 0\n         }\n     }\n \n-    /// Iterator over each uint stored in `self` intersect `other`.\n-    /// See [intersect_with](#method.intersect_with) for an efficient in-place version.\n+    /// Iterator over each uint stored in the symmetric difference of `self` and `other`.\n+    /// See [symmetric_difference_with](#method.symmetric_difference_with) for\n+    /// an efficient in-place version.\n     ///\n     /// # Example\n     ///\n@@ -1200,21 +1201,20 @@ impl BitvSet {\n     /// let a = BitvSet::from_bitv(from_bytes([0b01101000]));\n     /// let b = BitvSet::from_bitv(from_bytes([0b10100000]));\n     ///\n-    /// // Print 2\n-    /// for x in a.intersection(&b) {\n+    /// // Print 0, 1, 4 in arbitrary order\n+    /// for x in a.symmetric_difference(&b) {\n     ///     println!(\"{}\", x);\n     /// }\n     /// ```\n     #[inline]\n-    pub fn intersection<'a>(&'a self, other: &'a BitvSet) -> Take<TwoBitPositions<'a>> {\n-        let min = cmp::min(self.capacity(), other.capacity());\n+    pub fn symmetric_difference<'a>(&'a self, other: &'a BitvSet) -> TwoBitPositions<'a> {\n         TwoBitPositions {\n             set: self,\n             other: other,\n-            merge: |w1, w2| w1 & w2,\n+            merge: |w1, w2| w1 ^ w2,\n             current_word: 0,\n             next_idx: 0\n-        }.take(min)\n+        }\n     }\n \n     /// Union in-place with the specified other bit vector."}]}