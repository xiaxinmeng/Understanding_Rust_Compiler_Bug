{"sha": "407958a2b88d1028e2a86f5927091540f6be04c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNzk1OGEyYjg4ZDEwMjhlMmE4NmY1OTI3MDkxNTQwZjZiZTA0YzQ=", "commit": {"author": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-05-17T08:49:18Z"}, "committer": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-05-22T06:46:17Z"}, "message": "Replace obligation construction with deref_steps()", "tree": {"sha": "a574d94493bc68c0a0ce9c71796bacacb2d68fe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a574d94493bc68c0a0ce9c71796bacacb2d68fe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/407958a2b88d1028e2a86f5927091540f6be04c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/407958a2b88d1028e2a86f5927091540f6be04c4", "html_url": "https://github.com/rust-lang/rust/commit/407958a2b88d1028e2a86f5927091540f6be04c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/407958a2b88d1028e2a86f5927091540f6be04c4/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "458a3e76294fd859fb037f425404180c91e14767", "url": "https://api.github.com/repos/rust-lang/rust/commits/458a3e76294fd859fb037f425404180c91e14767", "html_url": "https://github.com/rust-lang/rust/commit/458a3e76294fd859fb037f425404180c91e14767"}], "stats": {"total": 74, "additions": 27, "deletions": 47}, "files": [{"sha": "a324bd03eca8f7f234c723254b1c30e33168cc29", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/407958a2b88d1028e2a86f5927091540f6be04c4/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/407958a2b88d1028e2a86f5927091540f6be04c4/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=407958a2b88d1028e2a86f5927091540f6be04c4", "patch": "@@ -887,7 +887,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let coerce = Coerce::new(self, cause, AllowTwoPhase::No);\n         coerce\n             .autoderef(rustc_span::DUMMY_SP, expr_ty)\n-            .find_map(|(ty, steps)| coerce.unify(ty, target).ok().map(|_| steps))\n+            .find_map(|(ty, steps)| self.probe(|_| coerce.unify(ty, target)).ok().map(|_| steps))\n     }\n \n     /// Given some expressions, their known unified type and another expression,"}, {"sha": "700b9359d06ed40fd4f6bdf91c068bd993396710", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 26, "deletions": 46, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/407958a2b88d1028e2a86f5927091540f6be04c4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/407958a2b88d1028e2a86f5927091540f6be04c4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=407958a2b88d1028e2a86f5927091540f6be04c4", "patch": "@@ -1,16 +1,15 @@\n use crate::check::FnCtxt;\n use rustc_infer::infer::InferOk;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n-use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCause};\n+use rustc_trait_selection::traits::ObligationCause;\n \n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::lang_items::{CloneTraitLangItem, DerefTraitLangItem};\n+use rustc_hir::lang_items::CloneTraitLangItem;\n use rustc_hir::{is_range_literal, Node};\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n-use rustc_middle::ty::{self, AssocItem, ToPredicate, Ty, TypeAndMut};\n+use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -633,48 +632,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             _ if sp == expr.span && !is_macro => {\n-                // Check for `Deref` implementations by constructing a predicate to\n-                // prove: `<T as Deref>::Output == U`\n-                let deref_trait = self.tcx.require_lang_item(DerefTraitLangItem, Some(sp));\n-                let item_def_id = self\n-                    .tcx\n-                    .associated_items(deref_trait)\n-                    .in_definition_order()\n-                    .find(|item| item.kind == ty::AssocKind::Type)\n-                    .unwrap()\n-                    .def_id;\n-                let predicate =\n-                    ty::PredicateKind::Projection(ty::Binder::bind(ty::ProjectionPredicate {\n-                        // `<T as Deref>::Output`\n-                        projection_ty: ty::ProjectionTy {\n-                            // `T`\n-                            substs: self.tcx.intern_substs(&[checked_ty.into()]),\n-                            // `Deref::Output`\n-                            item_def_id,\n-                        },\n-                        // `U`\n-                        ty: expected,\n-                    }))\n-                    .to_predicate(self.tcx);\n-                let obligation = traits::Obligation::new(self.misc(sp), self.param_env, predicate);\n-                let impls_deref = self.infcx.predicate_may_hold(&obligation);\n-\n-                // For a suggestion to make sense, the type would need to be `Copy`.\n-                let is_copy = self.infcx.type_is_copy_modulo_regions(self.param_env, expected, sp);\n-\n-                if is_copy && impls_deref {\n-                    if let Ok(code) = sm.span_to_snippet(sp) {\n-                        let message = if checked_ty.is_region_ptr() {\n-                            \"consider dereferencing the borrow\"\n-                        } else {\n-                            \"consider dereferencing the type\"\n-                        };\n-                        let suggestion = if is_struct_pat_shorthand_field {\n-                            format!(\"{}: *{}\", code, code)\n-                        } else {\n-                            format!(\"*{}\", code)\n-                        };\n-                        return Some((sp, message, suggestion, Applicability::MachineApplicable));\n+                if let Some(steps) = self.deref_steps(checked_ty, expected) {\n+                    if steps == 1 {\n+                        // For a suggestion to make sense, the type would need to be `Copy`.\n+                        if self.infcx.type_is_copy_modulo_regions(self.param_env, expected, sp) {\n+                            if let Ok(code) = sm.span_to_snippet(sp) {\n+                                let message = if checked_ty.is_region_ptr() {\n+                                    \"consider dereferencing the borrow\"\n+                                } else {\n+                                    \"consider dereferencing the type\"\n+                                };\n+                                let suggestion = if is_struct_pat_shorthand_field {\n+                                    format!(\"{}: *{}\", code, code)\n+                                } else {\n+                                    format!(\"*{}\", code)\n+                                };\n+                                return Some((\n+                                    sp,\n+                                    message,\n+                                    suggestion,\n+                                    Applicability::MachineApplicable,\n+                                ));\n+                            }\n+                        }\n                     }\n                 }\n             }"}]}