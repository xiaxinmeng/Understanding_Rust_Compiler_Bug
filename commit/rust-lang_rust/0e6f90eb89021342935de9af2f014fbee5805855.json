{"sha": "0e6f90eb89021342935de9af2f014fbee5805855", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNmY5MGViODkwMjEzNDI5MzVkZTlhZjJmMDE0ZmJlZTU4MDU4NTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-22T18:06:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-22T18:06:46Z"}, "message": "auto merge of #12995 : Kroisse/rust/vec_ng_mut_slices, r=alexcrichton\n\nThese functions are implemented for &mut [T], but std::vec_ng::Vec has not yet.", "tree": {"sha": "f67fcfb398a5ba8af7205bce495475559db00544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f67fcfb398a5ba8af7205bce495475559db00544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e6f90eb89021342935de9af2f014fbee5805855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6f90eb89021342935de9af2f014fbee5805855", "html_url": "https://github.com/rust-lang/rust/commit/0e6f90eb89021342935de9af2f014fbee5805855", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e6f90eb89021342935de9af2f014fbee5805855/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "403e8695712cd9779b9cc91c61e780d3bfb8212a", "url": "https://api.github.com/repos/rust-lang/rust/commits/403e8695712cd9779b9cc91c61e780d3bfb8212a", "html_url": "https://github.com/rust-lang/rust/commit/403e8695712cd9779b9cc91c61e780d3bfb8212a"}, {"sha": "5b03050f66fb59480884cb0a34bd8eb826d9f53a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b03050f66fb59480884cb0a34bd8eb826d9f53a", "html_url": "https://github.com/rust-lang/rust/commit/5b03050f66fb59480884cb0a34bd8eb826d9f53a"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "c1f5dea91d11d693f2c621e6f5ee76e1f404a476", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/0e6f90eb89021342935de9af2f014fbee5805855/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6f90eb89021342935de9af2f014fbee5805855/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=0e6f90eb89021342935de9af2f014fbee5805855", "patch": "@@ -951,6 +951,79 @@ impl<T> Vec<T> {\n         self.as_mut_slice().mut_slice(start, end)\n     }\n \n+    /// Returns a mutable slice of self from `start` to the end of the vec.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails when `start` points outside the bounds of self.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1, 2, 3, 4);\n+    /// assert!(vec.mut_slice_from(2) == [3, 4]);\n+    /// ```\n+    #[inline]\n+    pub fn mut_slice_from<'a>(&'a mut self, start: uint) -> &'a mut [T] {\n+        self.as_mut_slice().mut_slice_from(start)\n+    }\n+\n+    /// Returns a mutable slice of self from the start of the vec to `end`.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails when `end` points outside the bounds of self.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1, 2, 3, 4);\n+    /// assert!(vec.mut_slice_to(2) == [1, 2]);\n+    /// ```\n+    #[inline]\n+    pub fn mut_slice_to<'a>(&'a mut self, end: uint) -> &'a mut [T] {\n+        self.as_mut_slice().mut_slice_to(end)\n+    }\n+\n+    /// Returns a pair of mutable slices that divides the vec at an index.\n+    ///\n+    /// The first will contain all indices from `[0, mid)` (excluding\n+    /// the index `mid` itself) and the second will contain all\n+    /// indices from `[mid, len)` (excluding the index `len` itself).\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if `mid > len`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1, 2, 3, 4, 5, 6);\n+    ///\n+    /// // scoped to restrict the lifetime of the borrows\n+    /// {\n+    ///    let (left, right) = vec.mut_split_at(0);\n+    ///    assert!(left == &mut []);\n+    ///    assert!(right == &mut [1, 2, 3, 4, 5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = vec.mut_split_at(2);\n+    ///     assert!(left == &mut [1, 2]);\n+    ///     assert!(right == &mut [3, 4, 5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = vec.mut_split_at(6);\n+    ///     assert!(left == &mut [1, 2, 3, 4, 5, 6]);\n+    ///     assert!(right == &mut []);\n+    /// }\n+    /// ```\n+    #[inline]\n+    pub fn mut_split_at<'a>(&'a mut self, mid: uint) -> (&'a mut [T], &'a mut [T]) {\n+        self.as_mut_slice().mut_split_at(mid)\n+    }\n+\n     /// Reverse the order of elements in a vector, in place.\n     ///\n     /// # Example\n@@ -1293,6 +1366,8 @@ mod tests {\n     use ops::Drop;\n     use option::{Some, None};\n     use ptr;\n+    use container::Container;\n+    use slice::{Vector, MutableVector, ImmutableVector};\n \n     #[test]\n     fn test_small_vec_struct() {\n@@ -1375,4 +1450,51 @@ mod tests {\n \n         assert_eq!(v, w);\n     }\n+\n+    #[test]\n+    fn test_mut_slice_from() {\n+        let mut values = Vec::from_slice([1u8,2,3,4,5]);\n+        {\n+            let slice = values.mut_slice_from(2);\n+            assert!(slice == [3, 4, 5]);\n+            for p in slice.mut_iter() {\n+                *p += 2;\n+            }\n+        }\n+\n+        assert!(values.as_slice() == [1, 2, 5, 6, 7]);\n+    }\n+\n+    #[test]\n+    fn test_mut_slice_to() {\n+        let mut values = Vec::from_slice([1u8,2,3,4,5]);\n+        {\n+            let slice = values.mut_slice_to(2);\n+            assert!(slice == [1, 2]);\n+            for p in slice.mut_iter() {\n+                *p += 1;\n+            }\n+        }\n+\n+        assert!(values.as_slice() == [2, 3, 3, 4, 5]);\n+    }\n+\n+    #[test]\n+    fn test_mut_split_at() {\n+        let mut values = Vec::from_slice([1u8,2,3,4,5]);\n+        {\n+            let (left, right) = values.mut_split_at(2);\n+            assert!(left.slice(0, left.len()) == [1, 2]);\n+            for p in left.mut_iter() {\n+                *p += 1;\n+            }\n+\n+            assert!(right.slice(0, right.len()) == [3, 4, 5]);\n+            for p in right.mut_iter() {\n+                *p += 2;\n+            }\n+        }\n+\n+        assert!(values == Vec::from_slice([2u8, 3, 5, 6, 7]));\n+    }\n }"}]}