{"sha": "372439dec88f8ce3350f29aa56801c8f30e59abe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MjQzOWRlYzg4ZjhjZTMzNTBmMjlhYTU2ODAxYzhmMzBlNTlhYmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-19T13:56:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-19T13:56:22Z"}, "message": "Merge NameDefinition and NameKind", "tree": {"sha": "4c93760e3d696a6a1a1e8acf10eebf1a29be85f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c93760e3d696a6a1a1e8acf10eebf1a29be85f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/372439dec88f8ce3350f29aa56801c8f30e59abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/372439dec88f8ce3350f29aa56801c8f30e59abe", "html_url": "https://github.com/rust-lang/rust/commit/372439dec88f8ce3350f29aa56801c8f30e59abe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/372439dec88f8ce3350f29aa56801c8f30e59abe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5ae89948903bb150b72885c6d9f24dc7a2bb51", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5ae89948903bb150b72885c6d9f24dc7a2bb51", "html_url": "https://github.com/rust-lang/rust/commit/0d5ae89948903bb150b72885c6d9f24dc7a2bb51"}], "stats": {"total": 210, "additions": 91, "deletions": 119}, "files": [{"sha": "cce539e563fb99dc049e6fdd7de32e04c8234ab8", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=372439dec88f8ce3350f29aa56801c8f30e59abe", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::{db::AstDatabase, InFile, SourceBinder};\n-use ra_ide_db::{symbol_index, RootDatabase};\n+use ra_ide_db::{defs::NameDefinition, symbol_index, RootDatabase};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n     match_ast, AstNode,\n@@ -12,7 +12,7 @@ use ra_syntax::{\n use crate::{\n     display::{ShortLabel, ToNav},\n     expand::descend_into_macros,\n-    references::{classify_name_ref, NameKind::*},\n+    references::classify_name_ref,\n     FilePosition, NavigationTarget, RangeInfo,\n };\n \n@@ -73,17 +73,17 @@ pub(crate) fn reference_definition(\n ) -> ReferenceResult {\n     use self::ReferenceResult::*;\n \n-    let name_kind = classify_name_ref(sb, name_ref).map(|d| d.kind);\n+    let name_kind = classify_name_ref(sb, name_ref);\n     match name_kind {\n-        Some(Macro(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(StructField(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(TypeParam(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(Local(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(ModuleDef(def)) => match NavigationTarget::from_def(sb.db, def) {\n+        Some(NameDefinition::Macro(it)) => return Exact(it.to_nav(sb.db)),\n+        Some(NameDefinition::StructField(it)) => return Exact(it.to_nav(sb.db)),\n+        Some(NameDefinition::TypeParam(it)) => return Exact(it.to_nav(sb.db)),\n+        Some(NameDefinition::Local(it)) => return Exact(it.to_nav(sb.db)),\n+        Some(NameDefinition::ModuleDef(def)) => match NavigationTarget::from_def(sb.db, def) {\n             Some(nav) => return Exact(nav),\n             None => return Approximate(vec![]),\n         },\n-        Some(SelfType(imp)) => {\n+        Some(NameDefinition::SelfType(imp)) => {\n             // FIXME: ideally, this should point to the type in the impl, and\n             // not at the whole impl. And goto **type** definition should bring\n             // us to the actual type"}, {"sha": "1c6ca36df1d3785823528019de4bc30f7269d4bc", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=372439dec88f8ce3350f29aa56801c8f30e59abe", "patch": "@@ -2,7 +2,7 @@\n \n use hir::{db::AstDatabase, Adt, HasSource, HirDisplay, SourceBinder};\n use ra_db::SourceDatabase;\n-use ra_ide_db::RootDatabase;\n+use ra_ide_db::{defs::NameDefinition, RootDatabase};\n use ra_syntax::{\n     algo::find_covering_element,\n     ast::{self, DocCommentsOwner},\n@@ -14,7 +14,7 @@ use ra_syntax::{\n use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n     expand::{descend_into_macros, original_range},\n-    references::{classify_name, classify_name_ref, NameKind, NameKind::*},\n+    references::{classify_name, classify_name_ref},\n     FilePosition, FileRange, RangeInfo,\n };\n \n@@ -92,20 +92,20 @@ fn hover_text(docs: Option<String>, desc: Option<String>) -> Option<String> {\n     }\n }\n \n-fn hover_text_from_name_kind(db: &RootDatabase, name_kind: NameKind) -> Option<String> {\n-    return match name_kind {\n-        Macro(it) => {\n+fn hover_text_from_name_kind(db: &RootDatabase, def: NameDefinition) -> Option<String> {\n+    return match def {\n+        NameDefinition::Macro(it) => {\n             let src = it.source(db);\n             hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)))\n         }\n-        StructField(it) => {\n+        NameDefinition::StructField(it) => {\n             let src = it.source(db);\n             match src.value {\n                 hir::FieldSource::Named(it) => hover_text(it.doc_comment_text(), it.short_label()),\n                 _ => None,\n             }\n         }\n-        ModuleDef(it) => match it {\n+        NameDefinition::ModuleDef(it) => match it {\n             hir::ModuleDef::Module(it) => match it.definition_source(db).value {\n                 hir::ModuleSource::Module(it) => {\n                     hover_text(it.doc_comment_text(), it.short_label())\n@@ -123,8 +123,10 @@ fn hover_text_from_name_kind(db: &RootDatabase, name_kind: NameKind) -> Option<S\n             hir::ModuleDef::TypeAlias(it) => from_def_source(db, it),\n             hir::ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n-        Local(it) => Some(rust_code_markup(it.ty(db).display_truncated(db, None).to_string())),\n-        TypeParam(_) | SelfType(_) => {\n+        NameDefinition::Local(it) => {\n+            Some(rust_code_markup(it.ty(db).display_truncated(db, None).to_string()))\n+        }\n+        NameDefinition::TypeParam(_) | NameDefinition::SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n         }\n@@ -151,10 +153,10 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     if let Some((node, name_kind)) = match_ast! {\n         match (token.value.parent()) {\n             ast::NameRef(name_ref) => {\n-                classify_name_ref(&mut sb, token.with_value(&name_ref)).map(|d| (name_ref.syntax().clone(), d.kind))\n+                classify_name_ref(&mut sb, token.with_value(&name_ref)).map(|d| (name_ref.syntax().clone(), d))\n             },\n             ast::Name(name) => {\n-                classify_name(&mut sb, token.with_value(&name)).map(|d| (name.syntax().clone(), d.kind))\n+                classify_name(&mut sb, token.with_value(&name)).map(|d| (name.syntax().clone(), d))\n             },\n             _ => None,\n         }"}, {"sha": "7f790a62d6946901590623ba6e564635e8eacd76", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=372439dec88f8ce3350f29aa56801c8f30e59abe", "patch": "@@ -31,7 +31,7 @@ pub(crate) use self::{\n     classify::{classify_name, classify_name_ref},\n     rename::rename,\n };\n-pub(crate) use ra_ide_db::defs::{NameDefinition, NameKind};\n+pub(crate) use ra_ide_db::defs::NameDefinition;\n \n pub use self::search_scope::SearchScope;\n \n@@ -126,13 +126,13 @@ pub(crate) fn find_all_refs(\n \n     let RangeInfo { range, info: (name, def) } = find_name(db, &syntax, position, opt_name)?;\n \n-    let declaration = match def.kind {\n-        NameKind::Macro(mac) => mac.to_nav(db),\n-        NameKind::StructField(field) => field.to_nav(db),\n-        NameKind::ModuleDef(def) => NavigationTarget::from_def(db, def)?,\n-        NameKind::SelfType(imp) => imp.to_nav(db),\n-        NameKind::Local(local) => local.to_nav(db),\n-        NameKind::TypeParam(_) => return None,\n+    let declaration = match def {\n+        NameDefinition::Macro(mac) => mac.to_nav(db),\n+        NameDefinition::StructField(field) => field.to_nav(db),\n+        NameDefinition::ModuleDef(def) => NavigationTarget::from_def(db, def)?,\n+        NameDefinition::SelfType(imp) => imp.to_nav(db),\n+        NameDefinition::Local(local) => local.to_nav(db),\n+        NameDefinition::TypeParam(_) => return None,\n     };\n \n     let search_scope = {\n@@ -148,7 +148,7 @@ pub(crate) fn find_all_refs(\n     let declaration = Declaration {\n         nav: declaration,\n         kind: ReferenceKind::Other,\n-        access: decl_access(&def.kind, &name, &syntax, decl_range),\n+        access: decl_access(&def, &name, &syntax, decl_range),\n     };\n \n     let references = process_definition(db, def, name, search_scope)\n@@ -247,7 +247,7 @@ fn process_definition(\n                     refs.push(Reference {\n                         file_range: FileRange { file_id, range },\n                         kind,\n-                        access: reference_access(&d.kind, &name_ref.value),\n+                        access: reference_access(&d, &name_ref.value),\n                     });\n                 }\n             }\n@@ -257,13 +257,13 @@ fn process_definition(\n }\n \n fn decl_access(\n-    kind: &NameKind,\n+    def: &NameDefinition,\n     name: &str,\n     syntax: &SyntaxNode,\n     range: TextRange,\n ) -> Option<ReferenceAccess> {\n-    match kind {\n-        NameKind::Local(_) | NameKind::StructField(_) => {}\n+    match def {\n+        NameDefinition::Local(_) | NameDefinition::StructField(_) => {}\n         _ => return None,\n     };\n \n@@ -280,10 +280,10 @@ fn decl_access(\n     None\n }\n \n-fn reference_access(kind: &NameKind, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {\n+fn reference_access(def: &NameDefinition, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {\n     // Only Locals and Fields have accesses for now.\n-    match kind {\n-        NameKind::Local(_) | NameKind::StructField(_) => {}\n+    match def {\n+        NameDefinition::Local(_) | NameDefinition::StructField(_) => {}\n         _ => return None,\n     };\n "}, {"sha": "478e18871205d82a588052286ec07e70c4af3ff6", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=372439dec88f8ce3350f29aa56801c8f30e59abe", "patch": "@@ -5,7 +5,7 @@ use ra_prof::profile;\n use ra_syntax::{ast, AstNode};\n use test_utils::tested_by;\n \n-use super::{NameDefinition, NameKind};\n+use super::NameDefinition;\n use ra_ide_db::RootDatabase;\n \n pub use ra_ide_db::defs::{classify_name, from_module_def, from_struct_field};\n@@ -46,8 +46,7 @@ pub(crate) fn classify_name_ref(\n         if let Some(macro_def) =\n             analyzer.resolve_macro_call(sb.db, name_ref.with_value(&macro_call))\n         {\n-            let kind = NameKind::Macro(macro_def);\n-            return Some(NameDefinition { kind });\n+            return Some(NameDefinition::Macro(macro_def));\n         }\n     }\n \n@@ -63,22 +62,10 @@ pub(crate) fn classify_name_ref(\n             };\n             from_module_def(def)\n         }\n-        PathResolution::Local(local) => {\n-            let kind = NameKind::Local(local);\n-            NameDefinition { kind }\n-        }\n-        PathResolution::TypeParam(par) => {\n-            let kind = NameKind::TypeParam(par);\n-            NameDefinition { kind }\n-        }\n-        PathResolution::Macro(def) => {\n-            let kind = NameKind::Macro(def);\n-            NameDefinition { kind }\n-        }\n-        PathResolution::SelfType(impl_block) => {\n-            let kind = NameKind::SelfType(impl_block);\n-            NameDefinition { kind }\n-        }\n+        PathResolution::Local(local) => NameDefinition::Local(local),\n+        PathResolution::TypeParam(par) => NameDefinition::TypeParam(par),\n+        PathResolution::Macro(def) => NameDefinition::Macro(def),\n+        PathResolution::SelfType(impl_block) => NameDefinition::SelfType(impl_block),\n     };\n     Some(res)\n }"}, {"sha": "27d483233383469a9b2fe3d657a1ec36bdd734b5", "filename": "crates/ra_ide/src/references/search_scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=372439dec88f8ce3350f29aa56801c8f30e59abe", "patch": "@@ -12,7 +12,7 @@ use rustc_hash::FxHashMap;\n \n use ra_ide_db::RootDatabase;\n \n-use super::{NameDefinition, NameKind};\n+use super::NameDefinition;\n \n pub struct SearchScope {\n     entries: FxHashMap<FileId, Option<TextRange>>,\n@@ -32,7 +32,7 @@ impl SearchScope {\n         let module_src = module.definition_source(db);\n         let file_id = module_src.file_id.original_file(db);\n \n-        if let NameKind::Local(var) = def.kind {\n+        if let NameDefinition::Local(var) = def {\n             let range = match var.parent(db) {\n                 DefWithBody::Function(f) => f.source(db).value.syntax().text_range(),\n                 DefWithBody::Const(c) => c.source(db).value.syntax().text_range(),"}, {"sha": "d873f153ee2f11d60a7d4432cee174d0cf958021", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=372439dec88f8ce3350f29aa56801c8f30e59abe", "patch": "@@ -2,7 +2,7 @@\n \n use hir::{HirFileId, InFile, Name, SourceAnalyzer, SourceBinder};\n use ra_db::SourceDatabase;\n-use ra_ide_db::RootDatabase;\n+use ra_ide_db::{defs::NameDefinition, RootDatabase};\n use ra_prof::profile;\n use ra_syntax::{\n     ast, AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxToken, TextRange,\n@@ -12,7 +12,7 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     expand::descend_into_macros_with_analyzer,\n-    references::{classify_name, classify_name_ref, NameKind},\n+    references::{classify_name, classify_name_ref},\n     FileId,\n };\n \n@@ -186,10 +186,10 @@ fn highlight_node(\n         NAME_REF if node.value.ancestors().any(|it| it.kind() == ATTR) => return None,\n         NAME_REF => {\n             let name_ref = node.value.as_node().cloned().and_then(ast::NameRef::cast).unwrap();\n-            let name_kind = classify_name_ref(sb, node.with_value(&name_ref)).map(|d| d.kind);\n+            let name_kind = classify_name_ref(sb, node.with_value(&name_ref));\n             match name_kind {\n                 Some(name_kind) => {\n-                    if let NameKind::Local(local) = &name_kind {\n+                    if let NameDefinition::Local(local) = &name_kind {\n                         if let Some(name) = local.name(db) {\n                             let shadow_count =\n                                 bindings_shadow_count.entry(name.clone()).or_default();\n@@ -205,9 +205,9 @@ fn highlight_node(\n         }\n         NAME => {\n             let name = node.value.as_node().cloned().and_then(ast::Name::cast).unwrap();\n-            let name_kind = classify_name(sb, node.with_value(&name)).map(|d| d.kind);\n+            let name_kind = classify_name(sb, node.with_value(&name));\n \n-            if let Some(NameKind::Local(local)) = &name_kind {\n+            if let Some(NameDefinition::Local(local)) = &name_kind {\n                 if let Some(name) = local.name(db) {\n                     let shadow_count = bindings_shadow_count.entry(name.clone()).or_default();\n                     *shadow_count += 1;\n@@ -310,22 +310,22 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n     buf\n }\n \n-fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n-    match name_kind {\n-        NameKind::Macro(_) => tags::MACRO,\n-        NameKind::StructField(_) => tags::FIELD,\n-        NameKind::ModuleDef(hir::ModuleDef::Module(_)) => tags::MODULE,\n-        NameKind::ModuleDef(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n-        NameKind::ModuleDef(hir::ModuleDef::Adt(_)) => tags::TYPE,\n-        NameKind::ModuleDef(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n-        NameKind::ModuleDef(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n-        NameKind::ModuleDef(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n-        NameKind::ModuleDef(hir::ModuleDef::Trait(_)) => tags::TYPE,\n-        NameKind::ModuleDef(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n-        NameKind::ModuleDef(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n-        NameKind::SelfType(_) => tags::TYPE_SELF,\n-        NameKind::TypeParam(_) => tags::TYPE_PARAM,\n-        NameKind::Local(local) => {\n+fn highlight_name(db: &RootDatabase, def: NameDefinition) -> &'static str {\n+    match def {\n+        NameDefinition::Macro(_) => tags::MACRO,\n+        NameDefinition::StructField(_) => tags::FIELD,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Module(_)) => tags::MODULE,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Adt(_)) => tags::TYPE,\n+        NameDefinition::ModuleDef(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Trait(_)) => tags::TYPE,\n+        NameDefinition::ModuleDef(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n+        NameDefinition::ModuleDef(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n+        NameDefinition::SelfType(_) => tags::TYPE_SELF,\n+        NameDefinition::TypeParam(_) => tags::TYPE_PARAM,\n+        NameDefinition::Local(local) => {\n             if local.is_mut(db) || local.ty(db).is_mutable_reference() {\n                 tags::VARIABLE_MUT\n             } else {"}, {"sha": "04c214624b0d4a674240fa18440a97bef23c94f1", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=372439dec88f8ce3350f29aa56801c8f30e59abe", "patch": "@@ -18,7 +18,7 @@ use ra_syntax::{\n use crate::RootDatabase;\n \n #[derive(Debug, PartialEq, Eq)]\n-pub enum NameKind {\n+pub enum NameDefinition {\n     Macro(MacroDef),\n     StructField(StructField),\n     ModuleDef(ModuleDef),\n@@ -27,33 +27,26 @@ pub enum NameKind {\n     TypeParam(TypeParam),\n }\n \n-#[derive(PartialEq, Eq)]\n-pub struct NameDefinition {\n-    /// FIXME: this doesn't really make sense. For example, builtin types don't\n-    /// really have a module.\n-    pub kind: NameKind,\n-}\n-\n impl NameDefinition {\n     pub fn module(&self, db: &RootDatabase) -> Option<Module> {\n-        match self.kind {\n-            NameKind::Macro(it) => it.module(db),\n-            NameKind::StructField(it) => Some(it.parent_def(db).module(db)),\n-            NameKind::ModuleDef(it) => it.module(db),\n-            NameKind::SelfType(it) => Some(it.module(db)),\n-            NameKind::Local(it) => Some(it.module(db)),\n-            NameKind::TypeParam(it) => Some(it.module(db)),\n+        match self {\n+            NameDefinition::Macro(it) => it.module(db),\n+            NameDefinition::StructField(it) => Some(it.parent_def(db).module(db)),\n+            NameDefinition::ModuleDef(it) => it.module(db),\n+            NameDefinition::SelfType(it) => Some(it.module(db)),\n+            NameDefinition::Local(it) => Some(it.module(db)),\n+            NameDefinition::TypeParam(it) => Some(it.module(db)),\n         }\n     }\n \n     pub fn visibility(&self, db: &RootDatabase) -> Option<ast::Visibility> {\n-        match self.kind {\n-            NameKind::Macro(_) => None,\n-            NameKind::StructField(sf) => match sf.source(db).value {\n+        match self {\n+            NameDefinition::Macro(_) => None,\n+            NameDefinition::StructField(sf) => match sf.source(db).value {\n                 FieldSource::Named(it) => it.visibility(),\n                 FieldSource::Pos(it) => it.visibility(),\n             },\n-            NameKind::ModuleDef(def) => match def {\n+            NameDefinition::ModuleDef(def) => match def {\n                 ModuleDef::Module(it) => it.declaration_source(db)?.value.visibility(),\n                 ModuleDef::Function(it) => it.source(db).value.visibility(),\n                 ModuleDef::Adt(adt) => match adt {\n@@ -68,9 +61,9 @@ impl NameDefinition {\n                 ModuleDef::EnumVariant(_) => None,\n                 ModuleDef::BuiltinType(_) => None,\n             },\n-            NameKind::SelfType(_) => None,\n-            NameKind::Local(_) => None,\n-            NameKind::TypeParam(_) => None,\n+            NameDefinition::SelfType(_) => None,\n+            NameDefinition::Local(_) => None,\n+            NameDefinition::TypeParam(_) => None,\n         }\n     }\n }\n@@ -87,9 +80,7 @@ pub fn classify_name(\n             ast::BindPat(it) => {\n                 let src = name.with_value(it);\n                 let local = sb.to_def(src)?;\n-                Some(NameDefinition {\n-                    kind: NameKind::Local(local),\n-                })\n+                Some(NameDefinition::Local(local))\n             },\n             ast::RecordFieldDef(it) => {\n                 let src = name.with_value(it);\n@@ -144,28 +135,22 @@ pub fn classify_name(\n                 let src = name.with_value(it);\n                 let def = sb.to_def(src.clone())?;\n \n-                Some(NameDefinition {\n-                    kind: NameKind::Macro(def),\n-                })\n+                Some(NameDefinition::Macro(def))\n             },\n             ast::TypeParam(it) => {\n                 let src = name.with_value(it);\n                 let def = sb.to_def(src)?;\n-                Some(NameDefinition {\n-                    kind: NameKind::TypeParam(def),\n-                })\n+                Some(NameDefinition::TypeParam(def))\n             },\n             _ => None,\n         }\n     }\n }\n \n pub fn from_struct_field(field: StructField) -> NameDefinition {\n-    let kind = NameKind::StructField(field);\n-    NameDefinition { kind }\n+    NameDefinition::StructField(field)\n }\n \n pub fn from_module_def(def: ModuleDef) -> NameDefinition {\n-    let kind = NameKind::ModuleDef(def);\n-    NameDefinition { kind }\n+    NameDefinition::ModuleDef(def)\n }"}, {"sha": "b8dd358a97b52c2272797351adb56ed387a4a6a5", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372439dec88f8ce3350f29aa56801c8f30e59abe/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=372439dec88f8ce3350f29aa56801c8f30e59abe", "patch": "@@ -6,8 +6,7 @@ use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n \n use crate::{\n-    defs::classify_name,\n-    defs::NameKind,\n+    defs::{classify_name, NameDefinition},\n     symbol_index::{self, FileSymbol, Query},\n     RootDatabase,\n };\n@@ -44,7 +43,7 @@ impl<'a> ImportsLocator<'a> {\n             .chain(lib_results.into_iter())\n             .filter_map(|import_candidate| self.get_name_definition(db, &import_candidate))\n             .filter_map(|name_definition_to_import| match name_definition_to_import {\n-                NameKind::ModuleDef(module_def) => Some(module_def),\n+                NameDefinition::ModuleDef(module_def) => Some(module_def),\n                 _ => None,\n             })\n             .collect()\n@@ -54,7 +53,7 @@ impl<'a> ImportsLocator<'a> {\n         &mut self,\n         db: &impl HirDatabase,\n         import_candidate: &FileSymbol,\n-    ) -> Option<NameKind> {\n+    ) -> Option<NameDefinition> {\n         let _p = profile(\"get_name_definition\");\n         let file_id = import_candidate.file_id.into();\n         let candidate_node = import_candidate.ptr.to_node(&db.parse_or_expand(file_id)?);\n@@ -67,6 +66,5 @@ impl<'a> ImportsLocator<'a> {\n             &mut self.source_binder,\n             hir::InFile { file_id, value: &ast::Name::cast(candidate_name_node)? },\n         )\n-        .map(|it| it.kind)\n     }\n }"}]}