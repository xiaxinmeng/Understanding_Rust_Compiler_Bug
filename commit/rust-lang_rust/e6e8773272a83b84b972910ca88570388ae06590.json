{"sha": "e6e8773272a83b84b972910ca88570388ae06590", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZTg3NzMyNzJhODNiODRiOTcyOTEwY2E4ODU3MDM4OGFlMDY1OTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-09T08:43:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-19T07:25:08Z"}, "message": "start messages in lower-case", "tree": {"sha": "0250499a87ddcd444cb30f6370f3d172e797f9bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0250499a87ddcd444cb30f6370f3d172e797f9bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6e8773272a83b84b972910ca88570388ae06590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e8773272a83b84b972910ca88570388ae06590", "html_url": "https://github.com/rust-lang/rust/commit/e6e8773272a83b84b972910ca88570388ae06590", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6e8773272a83b84b972910ca88570388ae06590/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "html_url": "https://github.com/rust-lang/rust/commit/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "43d9f1bf0b06dac495c26dd9c3447f36b4aebf87", "filename": "src/helpers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6e8773272a83b84b972910ca88570388ae06590/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e8773272a83b84b972910ca88570388ae06590/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=e6e8773272a83b84b972910ca88570388ae06590", "patch": "@@ -359,7 +359,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn check_no_isolation(&self, name: &str) -> InterpResult<'tcx> {\n         if !self.eval_context_ref().machine.communicate {\n             throw_unsup_format!(\n-                \"`{}` not available when isolation is enabled. Pass the flag `-Zmiri-disable-isolation` to disable it.\",\n+                \"`{}` not available when isolation is enabled (pass the flag `-Zmiri-disable-isolation` to disable isolation)\",\n                 name,\n             )\n         }\n@@ -415,13 +415,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 AlreadyExists => \"EEXIST\",\n                 WouldBlock => \"EWOULDBLOCK\",\n                 _ => {\n-                    throw_unsup_format!(\"The {} error cannot be transformed into a raw os error\", e)\n+                    throw_unsup_format!(\"io error {} cannot be transformed into a raw os error\", e)\n                 }\n             })?\n         } else {\n             // FIXME: we have to implement the Windows equivalent of this.\n             throw_unsup_format!(\n-                \"Setting the last OS error from an io::Error is unsupported for {}.\",\n+                \"setting the last OS error from an io::Error is unsupported for {}.\",\n                 target.target_os\n             )\n         };"}, {"sha": "b0e1850ec55d00f830d4d4c46942af8f62a8c25a", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e8773272a83b84b972910ca88570388ae06590/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e8773272a83b84b972910ca88570388ae06590/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=e6e8773272a83b84b972910ca88570388ae06590", "patch": "@@ -15,7 +15,7 @@ impl Dlsym {\n         Ok(match name {\n             \"getentropy\" => Some(GetEntropy),\n             \"__pthread_get_minstack\" => None,\n-            _ => throw_unsup_format!(\"Unsupported dlsym: {}\", name),\n+            _ => throw_unsup_format!(\"unsupported dlsym: {}\", name),\n         })\n     }\n }"}, {"sha": "b4931d36004444f20f79359d90b86b4d296c4fa7", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e8773272a83b84b972910ca88570388ae06590/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e8773272a83b84b972910ca88570388ae06590/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=e6e8773272a83b84b972910ca88570388ae06590", "patch": "@@ -436,7 +436,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             _ => match this.tcx.sess.target.target.target_os.as_str() {\n                 \"linux\" | \"macos\" => return posix::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                 \"windows\" => return windows::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n-                target => throw_unsup_format!(\"The {} target platform is not supported\", target),\n+                target => throw_unsup_format!(\"the {} target platform is not supported\", target),\n             }\n         };\n "}, {"sha": "b9449c2653d623f17157c582964bdaca9133851d", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e8773272a83b84b972910ca88570388ae06590/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e8773272a83b84b972910ca88570388ae06590/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=e6e8773272a83b84b972910ca88570388ae06590", "patch": "@@ -310,7 +310,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if let Some(result) = result {\n                     this.write_scalar(result, dest)?;\n                 } else {\n-                    throw_unsup_format!(\"Unimplemented sysconf name: {}\", name)\n+                    throw_unsup_format!(\"unimplemented sysconf name: {}\", name)\n                 }\n             }\n "}, {"sha": "6894647de44da6ab65b2874e6abd6733eab6f533", "filename": "src/shims/fs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e6e8773272a83b84b972910ca88570388ae06590/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e8773272a83b84b972910ca88570388ae06590/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=e6e8773272a83b84b972910ca88570388ae06590", "patch": "@@ -198,7 +198,7 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n             }\n             Err(e) => return match e.raw_os_error() {\n                 Some(error) => Ok(error),\n-                None => throw_unsup_format!(\"The error {} couldn't be converted to a return value\", e),\n+                None => throw_unsup_format!(\"the error {} couldn't be converted to a return value\", e),\n             }\n         }\n     }\n@@ -261,7 +261,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // windows. We need to check that in fact the access mode flags for the current platform\n         // only use these two bits, otherwise we are in an unsupported platform and should error.\n         if (o_rdonly | o_wronly | o_rdwr) & !0b11 != 0 {\n-            throw_unsup_format!(\"Access mode flags on this platform are unsupported\");\n+            throw_unsup_format!(\"access mode flags on this platform are unsupported\");\n         }\n         let mut writable = true;\n \n@@ -276,7 +276,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else if access_mode == o_rdwr {\n             options.read(true).write(true);\n         } else {\n-            throw_unsup_format!(\"Unsupported access mode {:#x}\", access_mode);\n+            throw_unsup_format!(\"unsupported access mode {:#x}\", access_mode);\n         }\n         // We need to check that there aren't unsupported options in `flag`. For this we try to\n         // reproduce the content of `flag` in the `mirror` variable using only the supported\n@@ -351,7 +351,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // differ in whether the FD_CLOEXEC flag is pre-set on the new file descriptor,\n             // thus they can share the same implementation here.\n             if fd < MIN_NORMAL_FILE_FD {\n-                throw_unsup_format!(\"Duplicating file descriptors for stdin, stdout, or stderr is not supported\")\n+                throw_unsup_format!(\"duplicating file descriptors for stdin, stdout, or stderr is not supported\")\n             }\n             let start_op = start_op.ok_or_else(|| {\n                 err_unsup_format!(\n@@ -369,7 +369,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             });\n             this.try_unwrap_io_result(fd_result)\n         } else {\n-            throw_unsup_format!(\"The {:#x} command is not supported for `fcntl`)\", cmd);\n+            throw_unsup_format!(\"the {:#x} command is not supported for `fcntl`)\", cmd);\n         }\n     }\n \n@@ -913,7 +913,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     name_place.layout.size.bytes(),\n                 )?;\n                 if !name_fits {\n-                    throw_unsup_format!(\"A directory entry had a name too large to fit in libc::dirent64\");\n+                    throw_unsup_format!(\"a directory entry had a name too large to fit in libc::dirent64\");\n                 }\n \n                 let entry_place = this.deref_operand(entry_op)?;\n@@ -953,7 +953,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // return positive error number on error\n                 Some(error) => Ok(error),\n                 None => {\n-                    throw_unsup_format!(\"The error {} couldn't be converted to a return value\", e)\n+                    throw_unsup_format!(\"the error {} couldn't be converted to a return value\", e)\n                 }\n             },\n         }\n@@ -1001,7 +1001,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     name_place.layout.size.bytes(),\n                 )?;\n                 if !name_fits {\n-                    throw_unsup_format!(\"A directory entry had a name too large to fit in libc::dirent\");\n+                    throw_unsup_format!(\"a directory entry had a name too large to fit in libc::dirent\");\n                 }\n \n                 let entry_place = this.deref_operand(entry_op)?;\n@@ -1042,7 +1042,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // return positive error number on error\n                 Some(error) => Ok(error),\n                 None => {\n-                    throw_unsup_format!(\"The error {} couldn't be converted to a return value\", e)\n+                    throw_unsup_format!(\"the error {} couldn't be converted to a return value\", e)\n                 }\n             },\n         }"}]}