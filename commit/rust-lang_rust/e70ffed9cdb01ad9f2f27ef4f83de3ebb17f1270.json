{"sha": "e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MGZmZWQ5Y2RiMDFhZDlmMmYyN2VmNGY4M2RlM2ViYjE3ZjEyNzA=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-08-27T14:42:44Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-10-07T04:01:54Z"}, "message": "Add feature gate for raw_dylib.", "tree": {"sha": "6594d9a806cc89493824cb64861429aab794fc88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6594d9a806cc89493824cb64861429aab794fc88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "html_url": "https://github.com/rust-lang/rust/commit/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac4809ccf5f77083ae7155dcc83e921341c2614", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac4809ccf5f77083ae7155dcc83e921341c2614", "html_url": "https://github.com/rust-lang/rust/commit/4ac4809ccf5f77083ae7155dcc83e921341c2614"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "c45b3dfc3dc6ac1a1073970ea3dce51fdc394c58", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -96,6 +96,8 @@ pub enum NativeLibraryKind {\n     NativeStaticNobundle,\n     /// macOS-specific\n     NativeFramework,\n+    /// windows dynamic library without import library\n+    NativeRawDylib,\n     /// default way to specify a dynamic library\n     NativeUnknown,\n }"}, {"sha": "50d9c088a85e975fbd0e724eb4c8ee208803aba7", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -323,6 +323,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n             NativeLibraryKind::NativeStatic => {}\n             NativeLibraryKind::NativeStaticNobundle |\n             NativeLibraryKind::NativeFramework |\n+            NativeLibraryKind::NativeRawDylib |\n             NativeLibraryKind::NativeUnknown => continue,\n         }\n         if let Some(name) = lib.name {\n@@ -883,7 +884,8 @@ pub fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLibrary\n                     Some(format!(\"-framework {}\", name))\n                 },\n                 // These are included, no need to print them\n-                NativeLibraryKind::NativeStatic => None,\n+                NativeLibraryKind::NativeStatic |\n+                NativeLibraryKind::NativeRawDylib => None,\n             }\n         })\n         .collect();\n@@ -1293,7 +1295,11 @@ pub fn add_local_native_libraries(cmd: &mut dyn Linker,\n             NativeLibraryKind::NativeUnknown => cmd.link_dylib(name),\n             NativeLibraryKind::NativeFramework => cmd.link_framework(name),\n             NativeLibraryKind::NativeStaticNobundle => cmd.link_staticlib(name),\n-            NativeLibraryKind::NativeStatic => cmd.link_whole_staticlib(name, &search_path)\n+            NativeLibraryKind::NativeStatic => cmd.link_whole_staticlib(name, &search_path),\n+            NativeLibraryKind::NativeRawDylib => {\n+                // FIXME(#58713): Proper handling for raw dylibs.\n+                bug!(\"raw_dylib feature not yet implemented\");\n+            },\n         }\n     }\n }\n@@ -1678,7 +1684,11 @@ pub fn add_upstream_native_libraries(\n                 // ignore statically included native libraries here as we've\n                 // already included them when we included the rust library\n                 // previously\n-                NativeLibraryKind::NativeStatic => {}\n+                NativeLibraryKind::NativeStatic => {},\n+                NativeLibraryKind::NativeRawDylib => {\n+                    // FIXME(#58713): Proper handling for raw dylibs.\n+                    bug!(\"raw_dylib feature not yet implemented\");\n+                },\n             }\n         }\n     }"}, {"sha": "cce0900bef3dde658af98a6113cfcb74ae5402cb", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -270,7 +270,11 @@ pub fn provide(providers: &mut Providers<'_>) {\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n         is_dllimport_foreign_item: |tcx, id| {\n-            tcx.native_library_kind(id) == Some(NativeLibraryKind::NativeUnknown)\n+            match tcx.native_library_kind(id) {\n+                Some(NativeLibraryKind::NativeUnknown) |\n+                Some(NativeLibraryKind::NativeRawDylib) => true,\n+                _ => false,\n+            }\n         },\n         is_statically_included_foreign_item: |tcx, id| {\n             match tcx.native_library_kind(id) {"}, {"sha": "df81bd4c09c7c3cac9e155af6bab704c8d03c157", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -73,6 +73,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                         \"static-nobundle\" => cstore::NativeStaticNobundle,\n                         \"dylib\" => cstore::NativeUnknown,\n                         \"framework\" => cstore::NativeFramework,\n+                        \"raw-dylib\" => cstore::NativeRawDylib,\n                         k => {\n                             struct_span_err!(self.tcx.sess, item.span(), E0458,\n                                       \"unknown kind: `{}`\", k)\n@@ -169,6 +170,14 @@ impl Collector<'tcx> {\n                                            GateIssue::Language,\n                                            \"kind=\\\"static-nobundle\\\" is unstable\");\n         }\n+        if lib.kind == cstore::NativeRawDylib &&\n+           !self.tcx.features().raw_dylib {\n+            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n+                                           sym::raw_dylib,\n+                                           span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n+                                           GateIssue::Language,\n+                                           \"kind=\\\"raw-dylib\\\" is feature gated\");\n+        }\n         self.libs.push(lib);\n     }\n "}, {"sha": "195cd460ee366a24a50a986cb8a60780259f80e4", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -522,6 +522,9 @@ declare_features! (\n     /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n \n+    // Allows the use of raw-dylibs (RFC 2627).\n+    (active, raw_dylib, \"1.39.0\", Some(58713), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "0dc2f24a67b0498ec4fb550468c72da2606b1b5c", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -276,7 +276,13 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"the `link_args` attribute is experimental and not portable across platforms, \\\n         it is recommended to use `#[link(name = \\\"foo\\\")] instead\",\n     ),\n-\n+    gated!(\n+        link_ordinal,\n+        Whitelisted,\n+        template!(List: \"ordinal\"),\n+        raw_dylib,\n+        experimental!(link_ordinal)\n+    ),\n     // Plugins:\n     (\n         sym::plugin_registrar, Normal, template!(Word),"}, {"sha": "c7230d5ca15224e5276b6deb2c6edf1623f0de51", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -389,6 +389,7 @@ symbols! {\n         link_cfg,\n         link_llvm_intrinsics,\n         link_name,\n+        link_ordinal,\n         link_section,\n         LintPass,\n         lint_reasons,\n@@ -531,6 +532,7 @@ symbols! {\n         RangeInclusive,\n         RangeTo,\n         RangeToInclusive,\n+        raw_dylib,\n         raw_identifiers,\n         Ready,\n         reason,"}, {"sha": "d6aac45d28ffb0158c86b203d8b7eb3d434f5c6a", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -0,0 +1,8 @@\n+#[link(name=\"foo\")]\n+extern {\n+#[link_ordinal(42)]\n+//~^ ERROR: the `#[link_ordinal]` attribute is an experimental feature\n+fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "e4ff390819b54d10fa14a9ce63a9c593c620c514", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.stderr?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[link_ordinal]` attribute is an experimental feature\n+  --> $DIR/feature-gate-raw-dylib-2.rs:3:1\n+   |\n+LL | #[link_ordinal(42)]\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/58713\n+   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6977f53e56f4ef4e09cfdb5332f9f8bce90b2d67", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -0,0 +1,5 @@\n+#[link(name=\"foo\", kind=\"raw-dylib\")]\n+//~^ ERROR: kind=\"raw-dylib\" is feature gated\n+extern {}\n+\n+fn main() {}"}, {"sha": "ad5cf4615ae09e39e79480a1aac245eaadcfa91f", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr?ref=e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: kind=\"raw-dylib\" is feature gated\n+  --> $DIR/feature-gate-raw-dylib.rs:1:1\n+   |\n+LL | #[link(name=\"foo\", kind=\"raw-dylib\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/58713\n+   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}