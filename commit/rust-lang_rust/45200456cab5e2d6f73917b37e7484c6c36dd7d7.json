{"sha": "45200456cab5e2d6f73917b37e7484c6c36dd7d7", "node_id": "C_kwDOAAsO6NoAKDQ1MjAwNDU2Y2FiNWUyZDZmNzM5MTdiMzdlNzQ4NGM2YzM2ZGQ3ZDc", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-02-25T05:44:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-25T05:44:33Z"}, "message": "Do not suggest using a const parameter when there are bounds on an unused type parameter\n\nThe user wrote the bound, so it's obvious they want a type.", "tree": {"sha": "5c4a90551dd76fb84e4f4065c5b3dac6a44e3e9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c4a90551dd76fb84e4f4065c5b3dac6a44e3e9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45200456cab5e2d6f73917b37e7484c6c36dd7d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45200456cab5e2d6f73917b37e7484c6c36dd7d7", "html_url": "https://github.com/rust-lang/rust/commit/45200456cab5e2d6f73917b37e7484c6c36dd7d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45200456cab5e2d6f73917b37e7484c6c36dd7d7/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4de1f230ca30b7ce08fbf453daebf8b2e7ffcc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4de1f230ca30b7ce08fbf453daebf8b2e7ffcc9", "html_url": "https://github.com/rust-lang/rust/commit/d4de1f230ca30b7ce08fbf453daebf8b2e7ffcc9"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "a42ed9eab64367f9eb8dbd86503c49bcbd9771f9", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/45200456cab5e2d6f73917b37e7484c6c36dd7d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45200456cab5e2d6f73917b37e7484c6c36dd7d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=45200456cab5e2d6f73917b37e7484c6c36dd7d7", "patch": "@@ -31,6 +31,7 @@ use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode,\n \n use std::convert::TryInto;\n use std::iter;\n+use std::lazy::Lazy;\n use std::ops::ControlFlow;\n \n /// Helper type of a temporary returned by `.for_item(...)`.\n@@ -1720,8 +1721,29 @@ fn check_variances_for_type_defn<'tcx>(\n \n     identify_constrained_generic_params(tcx, ty_predicates, None, &mut constrained_parameters);\n \n+    // Lazily calculated because it is only needed in case of an error.\n+    let explicitly_bounded_params = Lazy::new(|| {\n+        let icx = crate::collect::ItemCtxt::new(tcx, item.def_id.to_def_id());\n+        hir_generics\n+            .where_clause\n+            .predicates\n+            .iter()\n+            .filter_map(|predicate| match predicate {\n+                hir::WherePredicate::BoundPredicate(predicate) => {\n+                    match icx.to_ty(predicate.bounded_ty).kind() {\n+                        ty::Param(data) => Some(Parameter(data.index)),\n+                        _ => None,\n+                    }\n+                }\n+                _ => None,\n+            })\n+            .collect::<FxHashSet<_>>()\n+    });\n+\n     for (index, _) in variances.iter().enumerate() {\n-        if constrained_parameters.contains(&Parameter(index as u32)) {\n+        let parameter = Parameter(index as u32);\n+\n+        if constrained_parameters.contains(&parameter) {\n             continue;\n         }\n \n@@ -1730,13 +1752,19 @@ fn check_variances_for_type_defn<'tcx>(\n         match param.name {\n             hir::ParamName::Error => {}\n             _ => {\n-                report_bivariance(tcx, param);\n+                let has_explicit_bounds =\n+                    !param.bounds.is_empty() || explicitly_bounded_params.contains(&parameter);\n+                report_bivariance(tcx, param, has_explicit_bounds);\n             }\n         }\n     }\n }\n \n-fn report_bivariance(tcx: TyCtxt<'_>, param: &rustc_hir::GenericParam<'_>) -> ErrorReported {\n+fn report_bivariance(\n+    tcx: TyCtxt<'_>,\n+    param: &rustc_hir::GenericParam<'_>,\n+    has_explicit_bounds: bool,\n+) -> ErrorReported {\n     let span = param.span;\n     let param_name = param.name.ident().name;\n     let mut err = error_392(tcx, span, param_name);\n@@ -1754,7 +1782,7 @@ fn report_bivariance(tcx: TyCtxt<'_>, param: &rustc_hir::GenericParam<'_>) -> Er\n     };\n     err.help(&msg);\n \n-    if matches!(param.kind, rustc_hir::GenericParamKind::Type { .. }) {\n+    if matches!(param.kind, hir::GenericParamKind::Type { .. }) && !has_explicit_bounds {\n         err.help(&format!(\n             \"if you intended `{0}` to be a const parameter, use `const {0}: usize` instead\",\n             param_name"}, {"sha": "bbfe5295fe107f6ec9e1ad223120a7402968ec2b", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45200456cab5e2d6f73917b37e7484c6c36dd7d7/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45200456cab5e2d6f73917b37e7484c6c36dd7d7/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=45200456cab5e2d6f73917b37e7484c6c36dd7d7", "patch": "@@ -68,6 +68,7 @@ This API is completely unstable and subject to change.\n #![feature(slice_partition_dedup)]\n #![feature(control_flow_enum)]\n #![feature(hash_drain_filter)]\n+#![feature(once_cell)]\n #![recursion_limit = \"256\"]\n #![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n "}, {"sha": "62b7b79538c612c9ff3a8767acf1bcc8172bf652", "filename": "src/test/ui/issues/issue-17904-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45200456cab5e2d6f73917b37e7484c6c36dd7d7/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45200456cab5e2d6f73917b37e7484c6c36dd7d7/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr?ref=45200456cab5e2d6f73917b37e7484c6c36dd7d7", "patch": "@@ -5,7 +5,6 @@ LL | struct Foo<T> where T: Copy;\n    |            ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to previous error\n "}, {"sha": "895479986f1d1a0323d5ee3cd305ed33f2ce2f74", "filename": "src/test/ui/issues/issue-37534.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45200456cab5e2d6f73917b37e7484c6c36dd7d7/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45200456cab5e2d6f73917b37e7484c6c36dd7d7/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr?ref=45200456cab5e2d6f73917b37e7484c6c36dd7d7", "patch": "@@ -22,7 +22,6 @@ LL | struct Foo<T: ?Hash> { }\n    |            ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "d111406436478372eb2d350f4bae42f8f19548b6", "filename": "src/test/ui/variance/variance-unused-type-param.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45200456cab5e2d6f73917b37e7484c6c36dd7d7/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45200456cab5e2d6f73917b37e7484c6c36dd7d7/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.rs?ref=45200456cab5e2d6f73917b37e7484c6c36dd7d7", "patch": "@@ -16,4 +16,13 @@ enum ListCell<T> {\n     Nil\n }\n \n+struct WithBounds<T: Sized> {}\n+//~^ ERROR parameter `T` is never used\n+\n+struct WithWhereBounds<T> where T: Sized {}\n+//~^ ERROR parameter `T` is never used\n+\n+struct WithOutlivesBounds<T: 'static> {}\n+//~^ ERROR parameter `T` is never used\n+\n fn main() {}"}, {"sha": "e612da118f058e2625650cb8964e8a5bf9255e58", "filename": "src/test/ui/variance/variance-unused-type-param.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45200456cab5e2d6f73917b37e7484c6c36dd7d7/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45200456cab5e2d6f73917b37e7484c6c36dd7d7/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr?ref=45200456cab5e2d6f73917b37e7484c6c36dd7d7", "patch": "@@ -25,6 +25,30 @@ LL | enum ListCell<T> {\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n-error: aborting due to 3 previous errors\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/variance-unused-type-param.rs:19:19\n+   |\n+LL | struct WithBounds<T: Sized> {}\n+   |                   ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/variance-unused-type-param.rs:22:24\n+   |\n+LL | struct WithWhereBounds<T> where T: Sized {}\n+   |                        ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/variance-unused-type-param.rs:25:27\n+   |\n+LL | struct WithOutlivesBounds<T: 'static> {}\n+   |                           ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0392`."}]}