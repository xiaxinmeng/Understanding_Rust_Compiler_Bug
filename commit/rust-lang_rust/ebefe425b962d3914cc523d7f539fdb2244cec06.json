{"sha": "ebefe425b962d3914cc523d7f539fdb2244cec06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZWZlNDI1Yjk2MmQzOTE0Y2M1MjNkN2Y1MzlmZGIyMjQ0Y2VjMDY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T14:49:19Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T14:49:19Z"}, "message": "std: remove str::to_chars", "tree": {"sha": "0cc1f5e4804870961a6d04dcd7ea7f5b1e04042c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc1f5e4804870961a6d04dcd7ea7f5b1e04042c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebefe425b962d3914cc523d7f539fdb2244cec06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebefe425b962d3914cc523d7f539fdb2244cec06", "html_url": "https://github.com/rust-lang/rust/commit/ebefe425b962d3914cc523d7f539fdb2244cec06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebefe425b962d3914cc523d7f539fdb2244cec06/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c59d920a12fe40398a0033438ff426bb3387fd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c59d920a12fe40398a0033438ff426bb3387fd0", "html_url": "https://github.com/rust-lang/rust/commit/8c59d920a12fe40398a0033438ff426bb3387fd0"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "434583eb79eda59037f19095b2bb3d30efec0cb6", "filename": "src/librustpkg/version.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebefe425b962d3914cc523d7f539fdb2244cec06/src%2Flibrustpkg%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebefe425b962d3914cc523d7f539fdb2244cec06/src%2Flibrustpkg%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fversion.rs?ref=ebefe425b962d3914cc523d7f539fdb2244cec06", "patch": "@@ -143,8 +143,7 @@ fn try_parsing_version(s: &str) -> Option<Version> {\n     let s = s.trim();\n     debug!(\"Attempting to parse: %s\", s);\n     let mut parse_state = Start;\n-    // I gave up on using external iterators (tjc)\n-    for str::to_chars(s).each() |&c| {\n+    for s.iter().advance |&c| {\n         if char::is_digit(c) {\n             parse_state = SawDigit;\n         }\n@@ -172,7 +171,7 @@ fn is_url_like(p: &RemotePath) -> bool {\n /// Otherwise, return None.\n pub fn split_version<'a>(s: &'a str) -> Option<(&'a str, Version)> {\n     // reject strings with multiple '#'s\n-    if { let mut i: uint = 0; for str::to_chars(s).each |&c| { if c == '#' { i += 1; } }; i > 1 } {\n+    if s.splitn_iter('#', 2).count() > 1 {\n         return None;\n     }\n     match s.rfind('#') {"}, {"sha": "8967b447fd7f9971277d263a2d4f21f79b618be4", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebefe425b962d3914cc523d7f539fdb2244cec06/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebefe425b962d3914cc523d7f539fdb2244cec06/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=ebefe425b962d3914cc523d7f539fdb2244cec06", "patch": "@@ -432,11 +432,6 @@ pub fn byte_slice_no_callback<'a>(s: &'a str) -> &'a [u8] {\n     }\n }\n \n-/// Convert a string to a unique vector of characters\n-pub fn to_chars(s: &str) -> ~[char] {\n-    s.iter().collect()\n-}\n-\n /**\n  * Take a substring of another.\n  *"}, {"sha": "d3bfd9b0164d5eb2e7fe12e64f1d6270daddf52c", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebefe425b962d3914cc523d7f539fdb2244cec06/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebefe425b962d3914cc523d7f539fdb2244cec06/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=ebefe425b962d3914cc523d7f539fdb2244cec06", "patch": "@@ -10,18 +10,20 @@\n \n extern mod extra;\n \n+use std::iterator::IteratorUtil;\n use std::str;\n use std::vec;\n \n pub fn main() {\n     // Chars of 1, 2, 3, and 4 bytes\n     let chs: ~[char] = ~['e', '\u00e9', '\u20ac', 0x10000 as char];\n     let s: ~str = str::from_chars(chs);\n+    let schs: ~[char] = s.iter().collect();\n \n     assert!(s.len() == 10u);\n     assert!(str::char_len(s) == 4u);\n-    assert!(str::to_chars(s).len() == 4u);\n-    assert!(str::from_chars(str::to_chars(s)) == s);\n+    assert!(schs.len() == 4u);\n+    assert!(str::from_chars(schs) == s);\n     assert!(s.char_at(0u) == 'e');\n     assert!(s.char_at(1u) == '\u00e9');\n "}]}