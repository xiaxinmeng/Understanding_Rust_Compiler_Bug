{"sha": "267370ed585a722a551e3b493e4a32dc6ebe80ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NzM3MGVkNTg1YTcyMmE1NTFlM2I0OTNlNGEzMmRjNmViZTgwY2U=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-21T17:11:42Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-27T09:44:55Z"}, "message": "Use `eq_relations`", "tree": {"sha": "7d69a59d7ef2332e3cff13ee1ac65dd19acec31d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d69a59d7ef2332e3cff13ee1ac65dd19acec31d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/267370ed585a722a551e3b493e4a32dc6ebe80ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/267370ed585a722a551e3b493e4a32dc6ebe80ce", "html_url": "https://github.com/rust-lang/rust/commit/267370ed585a722a551e3b493e4a32dc6ebe80ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/267370ed585a722a551e3b493e4a32dc6ebe80ce/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6", "html_url": "https://github.com/rust-lang/rust/commit/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "18573b9ce176faad1b6d38be0bfa0f917da80a06", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/267370ed585a722a551e3b493e4a32dc6ebe80ce/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267370ed585a722a551e3b493e4a32dc6ebe80ce/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=267370ed585a722a551e3b493e4a32dc6ebe80ce", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let value = self.resolve_type_vars_if_possible(&value);\n \n                     // At this point, `value` could in principle refer\n-                    // to types/regions that have been created during\n+                    // to inference variables that have been created during\n                     // the snapshot. Once we exit `probe()`, those are\n                     // going to be popped, so we will have to\n                     // eliminate any references to them.\n@@ -106,10 +106,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             fudger.int_vars.is_empty() &&\n             fudger.float_vars.is_empty() &&\n             fudger.region_vars.is_empty() {\n-            return Ok(value);\n+            Ok(value)\n+        } else {\n+            Ok(value.fold_with(&mut fudger))\n         }\n-\n-        Ok(value.fold_with(&mut fudger))\n     }\n }\n \n@@ -137,7 +137,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx>\n                     self.infcx.next_ty_var(origin)\n                 } else {\n                     // This variable was created before the\n-                    // \"fudging\".  Since we refresh all type\n+                    // \"fudging\". Since we refresh all type\n                     // variables to their binding anyhow, we know\n                     // that it is unbound, so we can just return\n                     // it."}, {"sha": "5b9c3f25b20fd6b79fe6e4c68d47c67150a92835", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/267370ed585a722a551e3b493e4a32dc6ebe80ce/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267370ed585a722a551e3b493e4a32dc6ebe80ce/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=267370ed585a722a551e3b493e4a32dc6ebe80ce", "patch": "@@ -8,7 +8,6 @@ use std::ops::Range;\n use std::u32;\n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::unify as ut;\n-use ut::UnifyKey;\n \n pub struct TypeVariableTable<'tcx> {\n     values: sv::SnapshotVec<Delegate>,\n@@ -291,11 +290,10 @@ impl<'tcx> TypeVariableTable<'tcx> {\n         self.sub_relations.commit(sub_snapshot);\n     }\n \n-    /// Returns a map from the type variables created during the\n-    /// snapshot to the origin of the type variable.\n+    /// Returns a range of the type variables created during the snapshot.\n     pub fn vars_since_snapshot(&mut self, s: &Snapshot<'tcx>) -> Range<TyVid> {\n-        let range = self.values.values_since_snapshot(&s.snapshot);\n-        TyVid::from_index(range.start as u32)..TyVid::from_index(range.end as u32)\n+        let range = self.eq_relations.vars_since_snapshot(&s.eq_snapshot);\n+        range.start.vid..range.end.vid\n     }\n \n     /// Finds the set of type variables that existed *before* `s`"}]}