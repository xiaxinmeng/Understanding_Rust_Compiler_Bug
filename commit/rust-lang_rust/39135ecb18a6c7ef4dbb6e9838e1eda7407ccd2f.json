{"sha": "39135ecb18a6c7ef4dbb6e9838e1eda7407ccd2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MTM1ZWNiMThhNmM3ZWY0ZGJiNmU5ODM4ZTFlZGE3NDA3Y2NkMmY=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-07-28T06:23:16Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-07-28T14:39:13Z"}, "message": "Omit unnecessary stack slots for ignored return values\n\nIf we have an immediate return value that doesn't need to be dropped, we\ndon't have to create a stack slot for it.", "tree": {"sha": "6cb43f12574fa5e9322732db7e57edbf7ec9ad5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb43f12574fa5e9322732db7e57edbf7ec9ad5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39135ecb18a6c7ef4dbb6e9838e1eda7407ccd2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39135ecb18a6c7ef4dbb6e9838e1eda7407ccd2f", "html_url": "https://github.com/rust-lang/rust/commit/39135ecb18a6c7ef4dbb6e9838e1eda7407ccd2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39135ecb18a6c7ef4dbb6e9838e1eda7407ccd2f/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e9f14abf50eecb7d3c53f10ad900615bb2d397", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e9f14abf50eecb7d3c53f10ad900615bb2d397", "html_url": "https://github.com/rust-lang/rust/commit/79e9f14abf50eecb7d3c53f10ad900615bb2d397"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "341281c41927e5cbc6b050471191359b9a48f531", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39135ecb18a6c7ef4dbb6e9838e1eda7407ccd2f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39135ecb18a6c7ef4dbb6e9838e1eda7407ccd2f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=39135ecb18a6c7ef4dbb6e9838e1eda7407ccd2f", "patch": "@@ -775,6 +775,8 @@ pub fn trans_call_inner<'a>(\n     // We trans them in place in `trans_intrinsic_call`\n     assert!(abi != synabi::RustIntrinsic);\n \n+    let is_rust_fn = abi == synabi::Rust || abi == synabi::RustCall;\n+\n     // Generate a location to store the result. If the user does\n     // not care about the result, just make a stack slot.\n     let opt_llretslot = match dest {\n@@ -783,14 +785,17 @@ pub fn trans_call_inner<'a>(\n             None\n         }\n         Some(expr::SaveIn(dst)) => Some(dst),\n-        Some(expr::Ignore) => {\n+        Some(expr::Ignore) if !is_rust_fn ||\n+                type_of::return_uses_outptr(ccx, ret_ty) ||\n+                ty::type_needs_drop(bcx.tcx(), ret_ty) => {\n             if !type_is_zero_size(ccx, ret_ty) {\n                 Some(alloc_ty(bcx, ret_ty, \"__llret\"))\n             } else {\n                 let llty = type_of::type_of(ccx, ret_ty);\n                 Some(C_undef(llty.ptr_to()))\n             }\n         }\n+        Some(expr::Ignore) => None\n     };\n \n     let mut llresult = unsafe {\n@@ -803,7 +808,7 @@ pub fn trans_call_inner<'a>(\n     // and done, either the return value of the function will have been\n     // written in opt_llretslot (if it is Some) or `llresult` will be\n     // set appropriately (otherwise).\n-    if abi == synabi::Rust || abi == synabi::RustCall {\n+    if is_rust_fn {\n         let mut llargs = Vec::new();\n \n         // Push the out-pointer if we use an out-pointer for this\n@@ -878,15 +883,12 @@ pub fn trans_call_inner<'a>(\n \n     // If the caller doesn't care about the result of this fn call,\n     // drop the temporary slot we made.\n-    match dest {\n-        None => {\n-            assert!(!type_of::return_uses_outptr(bcx.ccx(), ret_ty));\n-        }\n-        Some(expr::Ignore) => {\n+    match (dest, opt_llretslot) {\n+        (Some(expr::Ignore), Some(llretslot)) => {\n             // drop the value if it is not being saved.\n-            bcx = glue::drop_ty(bcx, opt_llretslot.unwrap(), ret_ty);\n+            bcx = glue::drop_ty(bcx, llretslot, ret_ty);\n         }\n-        Some(expr::SaveIn(_)) => { }\n+        _ => {}\n     }\n \n     if ty::type_is_bot(ret_ty) {"}]}