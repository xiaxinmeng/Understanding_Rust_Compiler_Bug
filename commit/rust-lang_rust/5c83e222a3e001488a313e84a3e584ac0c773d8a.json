{"sha": "5c83e222a3e001488a313e84a3e584ac0c773d8a", "node_id": "C_kwDOAAsO6NoAKDVjODNlMjIyYTNlMDAxNDg4YTMxM2U4NGEzZTU4NGFjMGM3NzNkOGE", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-18T09:02:41Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-18T09:02:41Z"}, "message": "fix `format_args` expansion error with raw strings", "tree": {"sha": "cb8f608e2a9342e7e7b13c21290eedb6758c9f7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb8f608e2a9342e7e7b13c21290eedb6758c9f7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c83e222a3e001488a313e84a3e584ac0c773d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c83e222a3e001488a313e84a3e584ac0c773d8a", "html_url": "https://github.com/rust-lang/rust/commit/5c83e222a3e001488a313e84a3e584ac0c773d8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c83e222a3e001488a313e84a3e584ac0c773d8a/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2fba7c67ec46afc78701759719ffabf4218ad3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fba7c67ec46afc78701759719ffabf4218ad3d", "html_url": "https://github.com/rust-lang/rust/commit/a2fba7c67ec46afc78701759719ffabf4218ad3d"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "f5346898c2029e80a8148291d7c47153200badc0", "filename": "crates/hir-def/src/macro_expansion_tests/builtin_fn_macro.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5c83e222a3e001488a313e84a3e584ac0c773d8a/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c83e222a3e001488a313e84a3e584ac0c773d8a/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs?ref=5c83e222a3e001488a313e84a3e584ac0c773d8a", "patch": "@@ -235,6 +235,39 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn test_format_args_expand_with_raw_strings() {\n+    check(\n+        r##\"\n+#[rustc_builtin_macro]\n+macro_rules! format_args {\n+    ($fmt:expr) => ({ /* compiler built-in */ });\n+    ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+\n+fn main() {\n+    format_args!(\n+        r#\"{},mismatch,\"{}\",\"{}\"\"#,\n+        location_csv_pat(db, &analysis, vfs, &sm, pat_id),\n+        mismatch.expected.display(db),\n+        mismatch.actual.display(db)\n+    );\n+}\n+\"##,\n+        expect![[r##\"\n+#[rustc_builtin_macro]\n+macro_rules! format_args {\n+    ($fmt:expr) => ({ /* compiler built-in */ });\n+    ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+\n+fn main() {\n+    $crate::fmt::Arguments::new_v1(&[r#\"\"#, r#\",mismatch,\"\"#, r#\"\",\"\"#, r#\"\"\"#, ], &[$crate::fmt::ArgumentV1::new(&(location_csv_pat(db, &analysis, vfs, &sm, pat_id)), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(mismatch.expected.display(db)), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(mismatch.actual.display(db)), $crate::fmt::Display::fmt), ]);\n+}\n+\"##]],\n+    );\n+}\n+\n #[test]\n fn test_format_args_expand_eager() {\n     check("}, {"sha": "e9e1c6c3b3340a3296c0034dd591103b8f1954cd", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5c83e222a3e001488a313e84a3e584ac0c773d8a/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c83e222a3e001488a313e84a3e584ac0c773d8a/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=5c83e222a3e001488a313e84a3e584ac0c773d8a", "patch": "@@ -287,16 +287,27 @@ fn format_args_expand_general(\n         match token_tree {\n             tt::TokenTree::Leaf(l) => match l {\n                 tt::Leaf::Literal(l) => {\n-                    let text = l.text.strip_prefix('\"')?.strip_suffix('\"')?;\n-                    let span = l.span;\n-                    Some((text, span))\n+                    if let Some(mut text) = l.text.strip_prefix('r') {\n+                        let mut raw_sharps = String::new();\n+                        while let Some(t) = text.strip_prefix('#') {\n+                            text = t;\n+                            raw_sharps.push('#');\n+                        }\n+                        text =\n+                            text.strip_suffix(&raw_sharps)?.strip_prefix('\"')?.strip_suffix('\"')?;\n+                        Some((text, l.span, Some(raw_sharps)))\n+                    } else {\n+                        let text = l.text.strip_prefix('\"')?.strip_suffix('\"')?;\n+                        let span = l.span;\n+                        Some((text, span, None))\n+                    }\n                 }\n                 _ => None,\n             },\n             tt::TokenTree::Subtree(_) => None,\n         }\n     })();\n-    let Some((format_string, _format_string_span)) = format_string else {\n+    let Some((format_string, _format_string_span, raw_sharps)) = format_string else {\n         return expand_error;\n     };\n     let mut format_iter = format_string.chars().peekable();\n@@ -379,7 +390,12 @@ fn format_args_expand_general(\n         parts.push(last_part);\n     }\n     let part_tts = parts.into_iter().map(|x| {\n-        let l = tt::Literal { span: tt::TokenId::unspecified(), text: format!(\"\\\"{}\\\"\", x).into() };\n+        let text = if let Some(raw) = &raw_sharps {\n+            format!(\"r{raw}\\\"{}\\\"{raw}\", x).into()\n+        } else {\n+            format!(\"\\\"{}\\\"\", x).into()\n+        };\n+        let l = tt::Literal { span: tt::TokenId::unspecified(), text };\n         quote!(#l ,)\n     });\n     let arg_tts = arg_tts.into_iter().flat_map(|arg| arg.token_trees);"}]}