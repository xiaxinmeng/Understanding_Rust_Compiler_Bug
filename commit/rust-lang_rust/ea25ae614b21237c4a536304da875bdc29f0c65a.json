{"sha": "ea25ae614b21237c4a536304da875bdc29f0c65a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMjVhZTYxNGIyMTIzN2M0YTUzNjMwNGRhODc1YmRjMjlmMGM2NWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-23T21:54:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-23T21:54:45Z"}, "message": "Merge #6336\n\n6336: Improve Chalk debugging r=matklad a=flodiebold\n\n - add panic context for the trait goal if CHALK_DEBUG is set\r\n - print the Chalk program even if we're panicking\r\n - log goal/solution while TLS is still set\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "fcd6dc1c0dcd7e13dee8ace524ef848dd174e479", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcd6dc1c0dcd7e13dee8ace524ef848dd174e479"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea25ae614b21237c4a536304da875bdc29f0c65a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfk1ElCRBK7hj4Ov3rIwAAdHIIAEnyIr0M3nYZUX0dB+nF+N9e\ngdOOw1Ezv3jVv3xgJCyW2HTmi3uZz20kL/XiarxNcBPXv69UrgFPi0DdMviUgPP0\ns6YQ1sZiDi0zvXOsm7VS0EXThvoqoEVVE05WMY0oToCbp5976SqLQcuwhaH1xuVT\nEG71AdHBY0Nq7oL5QCcWhQhDA1rBQxkUtA/3CrZO449zW5A0M8yEZn94PNkfN6OB\n2VmIc7vcvmjA27pxIeT4akPfbR82Za+xdQFBntuwLwnwxcCwtHjm5qQh2N5ITMOc\nMk+SqHscaS0GRsoyc9u8gVvqVl7ObOwcr8vdiu7Yu1EGZ0yqW3a3Zs9RjtEUr7M=\n=R5gU\n-----END PGP SIGNATURE-----\n", "payload": "tree fcd6dc1c0dcd7e13dee8ace524ef848dd174e479\nparent 0c6f10ce42ba9f694963e8e45b4a8f3681656902\nparent baeb16e83f7b2beee8211e2c3ad5e4a7dc3a5434\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603490085 +0000\ncommitter GitHub <noreply@github.com> 1603490085 +0000\n\nMerge #6336\n\n6336: Improve Chalk debugging r=matklad a=flodiebold\n\n - add panic context for the trait goal if CHALK_DEBUG is set\r\n - print the Chalk program even if we're panicking\r\n - log goal/solution while TLS is still set\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea25ae614b21237c4a536304da875bdc29f0c65a", "html_url": "https://github.com/rust-lang/rust/commit/ea25ae614b21237c4a536304da875bdc29f0c65a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea25ae614b21237c4a536304da875bdc29f0c65a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6f10ce42ba9f694963e8e45b4a8f3681656902", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6f10ce42ba9f694963e8e45b4a8f3681656902", "html_url": "https://github.com/rust-lang/rust/commit/0c6f10ce42ba9f694963e8e45b4a8f3681656902"}, {"sha": "baeb16e83f7b2beee8211e2c3ad5e4a7dc3a5434", "url": "https://api.github.com/repos/rust-lang/rust/commits/baeb16e83f7b2beee8211e2c3ad5e4a7dc3a5434", "html_url": "https://github.com/rust-lang/rust/commit/baeb16e83f7b2beee8211e2c3ad5e4a7dc3a5434"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "ce1174cbef586cc28c24d1df68be37b3be2b048d", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ea25ae614b21237c4a536304da875bdc29f0c65a/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea25ae614b21237c4a536304da875bdc29f0c65a/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=ea25ae614b21237c4a536304da875bdc29f0c65a", "patch": "@@ -5,6 +5,7 @@ use base_db::CrateId;\n use chalk_ir::cast::Cast;\n use chalk_solve::{logging_db::LoggingRustIrDatabase, Solver};\n use hir_def::{lang_item::LangItemTarget, TraitId};\n+use stdx::panic_context;\n \n use crate::{db::HirDatabase, DebruijnIndex, Substs};\n \n@@ -168,26 +169,41 @@ fn solve(\n     };\n \n     let mut solve = || {\n-        if is_chalk_print() {\n-            let logging_db = LoggingRustIrDatabase::new(context);\n-            let solution = solver.solve_limited(&logging_db, goal, &should_continue);\n-            log::debug!(\"chalk program:\\n{}\", logging_db);\n+        let _ctx = if is_chalk_debug() || is_chalk_print() {\n+            Some(panic_context::enter(format!(\"solving {:?}\", goal)))\n+        } else {\n+            None\n+        };\n+        let solution = if is_chalk_print() {\n+            let logging_db =\n+                LoggingRustIrDatabaseLoggingOnDrop(LoggingRustIrDatabase::new(context));\n+            let solution = solver.solve_limited(&logging_db.0, goal, &should_continue);\n             solution\n         } else {\n             solver.solve_limited(&context, goal, &should_continue)\n-        }\n+        };\n+\n+        log::debug!(\"solve({:?}) => {:?}\", goal, solution);\n+\n+        solution\n     };\n \n     // don't set the TLS for Chalk unless Chalk debugging is active, to make\n     // extra sure we only use it for debugging\n     let solution =\n         if is_chalk_debug() { chalk::tls::set_current_program(db, solve) } else { solve() };\n \n-    log::debug!(\"solve({:?}) => {:?}\", goal, solution);\n-\n     solution\n }\n \n+struct LoggingRustIrDatabaseLoggingOnDrop<'a>(LoggingRustIrDatabase<Interner, ChalkContext<'a>>);\n+\n+impl<'a> Drop for LoggingRustIrDatabaseLoggingOnDrop<'a> {\n+    fn drop(&mut self) {\n+        eprintln!(\"chalk program:\\n{}\", self.0);\n+    }\n+}\n+\n fn is_chalk_debug() -> bool {\n     std::env::var(\"CHALK_DEBUG\").is_ok()\n }"}]}