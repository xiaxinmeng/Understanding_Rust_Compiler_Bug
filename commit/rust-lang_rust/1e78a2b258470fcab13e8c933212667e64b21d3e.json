{"sha": "1e78a2b258470fcab13e8c933212667e64b21d3e", "node_id": "C_kwDOAAsO6NoAKDFlNzhhMmIyNTg0NzBmY2FiMTNlOGM5MzMyMTI2NjdlNjRiMjFkM2U", "commit": {"author": {"name": "Yacin Tmimi", "email": "yacintmimi@gmail.com", "date": "2021-12-30T00:59:54Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-02-11T23:31:06Z"}, "message": "Leverage itemized blocks to support formatting markdown block quotes\n\nFixes 5157\n\nDoc comments support markdown, but rustfmt didn't previously assign any\nsemantic value to leading '> ' in comments. This lead to poor formatting\nwhen using ``wrap_comments=true``.\n\nNow, rustfmt treats block quotes as itemized blocks, which greatly\nimproves how block quotes are formatted when ``wrap_comments=true``.", "tree": {"sha": "ecf40fa6cec26fd7abbdcce772912c923b5e1417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecf40fa6cec26fd7abbdcce772912c923b5e1417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e78a2b258470fcab13e8c933212667e64b21d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e78a2b258470fcab13e8c933212667e64b21d3e", "html_url": "https://github.com/rust-lang/rust/commit/1e78a2b258470fcab13e8c933212667e64b21d3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e78a2b258470fcab13e8c933212667e64b21d3e/comments", "author": {"login": "ytmimi", "id": 29028348, "node_id": "MDQ6VXNlcjI5MDI4MzQ4", "avatar_url": "https://avatars.githubusercontent.com/u/29028348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ytmimi", "html_url": "https://github.com/ytmimi", "followers_url": "https://api.github.com/users/ytmimi/followers", "following_url": "https://api.github.com/users/ytmimi/following{/other_user}", "gists_url": "https://api.github.com/users/ytmimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ytmimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ytmimi/subscriptions", "organizations_url": "https://api.github.com/users/ytmimi/orgs", "repos_url": "https://api.github.com/users/ytmimi/repos", "events_url": "https://api.github.com/users/ytmimi/events{/privacy}", "received_events_url": "https://api.github.com/users/ytmimi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05b3138001c97cbabeb3e20a0960b9f75341ee0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05b3138001c97cbabeb3e20a0960b9f75341ee0", "html_url": "https://github.com/rust-lang/rust/commit/b05b3138001c97cbabeb3e20a0960b9f75341ee0"}], "stats": {"total": 94, "additions": 87, "deletions": 7}, "files": [{"sha": "96778c4ef1ddb925ae012ff994eb873dae17c867", "filename": "src/comment.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1e78a2b258470fcab13e8c933212667e64b21d3e/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e78a2b258470fcab13e8c933212667e64b21d3e/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=1e78a2b258470fcab13e8c933212667e64b21d3e", "patch": "@@ -432,36 +432,49 @@ impl CodeBlockAttribute {\n \n /// Block that is formatted as an item.\n ///\n-/// An item starts with either a star `*` or a dash `-`. Different level of indentation are\n-/// handled by shrinking the shape accordingly.\n+/// An item starts with either a star `*` a dash `-` or a greater-than `>`.\n+/// Different level of indentation are handled by shrinking the shape accordingly.\n struct ItemizedBlock {\n     /// the lines that are identified as part of an itemized block\n     lines: Vec<String>,\n-    /// the number of whitespaces up to the item sigil\n+    /// the number of characters (typically whitespaces) up to the item sigil\n     indent: usize,\n     /// the string that marks the start of an item\n     opener: String,\n-    /// sequence of whitespaces to prefix new lines that are part of the item\n+    /// sequence of characters (typically whitespaces) to prefix new lines that are part of the item\n     line_start: String,\n }\n \n impl ItemizedBlock {\n     /// Returns `true` if the line is formatted as an item\n     fn is_itemized_line(line: &str) -> bool {\n         let trimmed = line.trim_start();\n-        trimmed.starts_with(\"* \") || trimmed.starts_with(\"- \")\n+        trimmed.starts_with(\"* \") || trimmed.starts_with(\"- \") || trimmed.starts_with(\"> \")\n     }\n \n     /// Creates a new ItemizedBlock described with the given line.\n     /// The `is_itemized_line` needs to be called first.\n     fn new(line: &str) -> ItemizedBlock {\n         let space_to_sigil = line.chars().take_while(|c| c.is_whitespace()).count();\n-        let indent = space_to_sigil + 2;\n+        // +2 = '* ', which will add the appropriate amount of whitespace to keep itemized\n+        // content formatted correctly.\n+        let mut indent = space_to_sigil + 2;\n+        let mut line_start = \" \".repeat(indent);\n+\n+        // Markdown blockquote start with a \"> \"\n+        if line.trim_start().starts_with(\">\") {\n+            // remove the original +2 indent because there might be multiple nested block quotes\n+            // and it's easier to reason about the final indent by just taking the length\n+            // of th new line_start. We update the indent because it effects the max width\n+            // of each formatted line.\n+            line_start = itemized_block_quote_start(line, line_start, 2);\n+            indent = line_start.len();\n+        }\n         ItemizedBlock {\n             lines: vec![line[indent..].to_string()],\n             indent,\n             opener: line[..indent].to_string(),\n-            line_start: \" \".repeat(indent),\n+            line_start,\n         }\n     }\n \n@@ -504,6 +517,25 @@ impl ItemizedBlock {\n     }\n }\n \n+/// Determine the line_start when formatting markdown block quotes.\n+/// The original line_start likely contains indentation (whitespaces), which we'd like to\n+/// replace with '> ' characters.\n+fn itemized_block_quote_start(line: &str, mut line_start: String, remove_indent: usize) -> String {\n+    let quote_level = line\n+        .chars()\n+        .take_while(|c| !c.is_alphanumeric())\n+        .fold(0, |acc, c| if c == '>' { acc + 1 } else { acc });\n+\n+    for _ in 0..remove_indent {\n+        line_start.pop();\n+    }\n+\n+    for _ in 0..quote_level {\n+        line_start.push_str(\"> \")\n+    }\n+    line_start\n+}\n+\n struct CommentRewrite<'a> {\n     result: String,\n     code_block_buffer: String,"}, {"sha": "5c1d79a74309876f6f04b626bad77e117bd7bcc2", "filename": "tests/source/issue-5157/indented_itemized_markdown_blockquote.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Fsource%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Fsource%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs?ref=1e78a2b258470fcab13e8c933212667e64b21d3e", "patch": "@@ -0,0 +1,4 @@\n+// rustfmt-wrap_comments: true\n+\n+///        > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "cf200d04e08ef9bdb77717872584a1c86156590a", "filename": "tests/source/issue-5157/nested_itemized_markdown_blockquote.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Fsource%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Fsource%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs?ref=1e78a2b258470fcab13e8c933212667e64b21d3e", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-wrap_comments: true\n+\n+/// > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+///\n+/// > > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+///\n+/// > > > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+///\n+/// > > > > > > > > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "eb436402e4e00fd2be93a07da36b6c2529d5a2d6", "filename": "tests/source/issue-5157/support_itemized_markdown_blockquote.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Fsource%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Fsource%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs?ref=1e78a2b258470fcab13e8c933212667e64b21d3e", "patch": "@@ -0,0 +1,4 @@\n+// rustfmt-wrap_comments: true\n+\n+/// > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "e47677f203903ea10193d24d7f88fa603cb02185", "filename": "tests/target/issue-5157/indented_itemized_markdown_blockquote.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Ftarget%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Ftarget%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs?ref=1e78a2b258470fcab13e8c933212667e64b21d3e", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-wrap_comments: true\n+\n+///        > For each sample received, the middleware internally maintains a\n+///        > sample_state relative to each DataReader. The sample_state can\n+///        > either be READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "079510442b7992ad183b9edaa458f8c4f7b77f97", "filename": "tests/target/issue-5157/nested_itemized_markdown_blockquote.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Ftarget%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Ftarget%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs?ref=1e78a2b258470fcab13e8c933212667e64b21d3e", "patch": "@@ -0,0 +1,18 @@\n+// rustfmt-wrap_comments: true\n+\n+/// > For each sample received, the middleware internally maintains a\n+/// > sample_state relative to each DataReader. The sample_state can either be\n+/// > READ or NOT_READ.\n+///\n+/// > > For each sample received, the middleware internally maintains a\n+/// > > sample_state relative to each DataReader. The sample_state can either be\n+/// > > READ or NOT_READ.\n+///\n+/// > > > For each sample received, the middleware internally maintains a\n+/// > > > sample_state relative to each DataReader. The sample_state can either\n+/// > > > be READ or NOT_READ.\n+///\n+/// > > > > > > > > For each sample received, the middleware internally\n+/// > > > > > > > > maintains a sample_state relative to each DataReader. The\n+/// > > > > > > > > sample_state can either be READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "029ee37d22a8ba73722459683bdbe1982302bca3", "filename": "tests/target/issue-5157/support_itemized_markdown_blockquote.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Ftarget%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e78a2b258470fcab13e8c933212667e64b21d3e/tests%2Ftarget%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs?ref=1e78a2b258470fcab13e8c933212667e64b21d3e", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-wrap_comments: true\n+\n+/// > For each sample received, the middleware internally maintains a\n+/// > sample_state relative to each DataReader. The sample_state can either be\n+/// > READ or NOT_READ.\n+fn block_quote() {}"}]}