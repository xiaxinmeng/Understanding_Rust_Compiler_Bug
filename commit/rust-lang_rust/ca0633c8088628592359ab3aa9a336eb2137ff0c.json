{"sha": "ca0633c8088628592359ab3aa9a336eb2137ff0c", "node_id": "C_kwDOAAsO6NoAKGNhMDYzM2M4MDg4NjI4NTkyMzU5YWIzYWE5YTMzNmViMjEzN2ZmMGM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-06T12:31:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-11T08:26:53Z"}, "message": "feat: Deprioritize ops methods in completion", "tree": {"sha": "e91472c1d25fc99881547b978af8e7c3e4b332f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e91472c1d25fc99881547b978af8e7c3e4b332f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca0633c8088628592359ab3aa9a336eb2137ff0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0633c8088628592359ab3aa9a336eb2137ff0c", "html_url": "https://github.com/rust-lang/rust/commit/ca0633c8088628592359ab3aa9a336eb2137ff0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca0633c8088628592359ab3aa9a336eb2137ff0c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a0e95d6125c7d15aad4daa48123afd5d410af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a0e95d6125c7d15aad4daa48123afd5d410af7", "html_url": "https://github.com/rust-lang/rust/commit/41a0e95d6125c7d15aad4daa48123afd5d410af7"}], "stats": {"total": 136, "additions": 106, "deletions": 30}, "files": [{"sha": "2c91a11e152781284c79542da1ab96f112fe2282", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ca0633c8088628592359ab3aa9a336eb2137ff0c", "patch": "@@ -1610,6 +1610,12 @@ pub struct Trait {\n }\n \n impl Trait {\n+    pub fn lang(db: &dyn HirDatabase, krate: Crate, name: &Name) -> Option<Trait> {\n+        db.lang_item(krate.into(), name.to_smol_str())\n+            .and_then(LangItemTarget::as_trait)\n+            .map(Into::into)\n+    }\n+\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n         Module { id: self.id.lookup(db.upcast()).container }\n     }"}, {"sha": "8778501845876d5aaed04881da7d37eceea3a2ee", "filename": "crates/hir_def/src/lang_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fhir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fhir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flang_item.rs?ref=ca0633c8088628592359ab3aa9a336eb2137ff0c", "patch": "@@ -144,8 +144,8 @@ impl LangItems {\n         let _p = profile::span(\"lang_item_query\");\n         let lang_items = db.crate_lang_items(start_crate);\n         let start_crate_target = lang_items.items.get(&item);\n-        if let Some(target) = start_crate_target {\n-            return Some(*target);\n+        if let Some(&target) = start_crate_target {\n+            return Some(target);\n         }\n         db.crate_graph()[start_crate]\n             .dependencies"}, {"sha": "4dcda0fcdc88779fffa994f204687401c1734e7a", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=ca0633c8088628592359ab3aa9a336eb2137ff0c", "patch": "@@ -309,39 +309,45 @@ pub mod known {\n         wrapping_mul,\n         wrapping_sub,\n         // known methods of lang items\n-        add,\n-        mul,\n-        sub,\n-        div,\n-        rem,\n-        shl,\n-        shr,\n-        bitxor,\n-        bitor,\n-        bitand,\n-        add_assign,\n-        mul_assign,\n-        sub_assign,\n-        div_assign,\n-        rem_assign,\n-        shl_assign,\n-        shr_assign,\n-        bitxor_assign,\n-        bitor_assign,\n-        bitand_assign,\n         eq,\n         ne,\n         ge,\n         gt,\n         le,\n         lt,\n         // lang items\n-        not,\n-        neg,\n+        add_assign,\n+        add,\n+        bitand_assign,\n+        bitand,\n+        bitor_assign,\n+        bitor,\n+        bitxor_assign,\n+        bitxor,\n+        deref_mut,\n+        deref,\n+        div_assign,\n+        div,\n+        fn_mut,\n+        fn_once,\n         future_trait,\n-        owned_box,\n         index,\n-        partial_ord\n+        index_mut,\n+        mul_assign,\n+        mul,\n+        neg,\n+        not,\n+        owned_box,\n+        partial_ord,\n+        r#fn,\n+        rem_assign,\n+        rem,\n+        shl_assign,\n+        shl,\n+        shr_assign,\n+        shr,\n+        sub_assign,\n+        sub,\n     );\n \n     // self/Self cannot be used as an identifier"}, {"sha": "965f9b356a4fb31c88c75c4292b09ad8426f3572", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=ca0633c8088628592359ab3aa9a336eb2137ff0c", "patch": "@@ -3,13 +3,14 @@\n use std::iter;\n \n use base_db::SourceDatabaseExt;\n-use hir::{Local, Name, ScopeDef, Semantics, SemanticsScope, Type, TypeInfo};\n+use hir::{known, Local, Name, ScopeDef, Semantics, SemanticsScope, Type, TypeInfo};\n use ide_db::{\n     active_parameter::ActiveParameter,\n     base_db::{FilePosition, SourceDatabase},\n     helpers::FamousDefs,\n     RootDatabase,\n };\n+use rustc_hash::FxHashSet;\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, HasName, NameOrNameRef},\n@@ -85,6 +86,7 @@ pub(crate) enum ParamKind {\n     Function,\n     Closure,\n }\n+\n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n@@ -120,7 +122,10 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) lifetime_ctx: Option<LifetimeContext>,\n     pub(super) pattern_ctx: Option<PatternContext>,\n     pub(super) path_context: Option<PathCompletionContext>,\n+\n     pub(super) locals: Vec<(Name, Local)>,\n+    /// Operator traits defined in the project\n+    pub(super) ops_traits: FxHashSet<hir::Trait>,\n \n     no_completion_required: bool,\n }\n@@ -308,6 +313,11 @@ impl<'a> CompletionContext<'a> {\n         self.token.kind() == BANG && self.token.parent().map_or(false, |it| it.kind() == MACRO_CALL)\n     }\n \n+    /// Whether the given trait is an operator trait or not.\n+    pub(crate) fn is_ops_trait(&self, trait_: hir::Trait) -> bool {\n+        self.ops_traits.contains(&trait_)\n+    }\n+\n     /// A version of [`SemanticsScope::process_all_names`] that filters out `#[doc(hidden)]` items.\n     pub(crate) fn process_all_names(&self, f: &mut dyn FnMut(Name, ScopeDef)) {\n         let _p = profile::span(\"CompletionContext::process_all_names\");\n@@ -388,6 +398,17 @@ impl<'a> CompletionContext<'a> {\n                 locals.push((name, local));\n             }\n         });\n+        let mut ops_traits =\n+            FxHashSet::with_capacity_and_hasher(OP_TRAIT_LANG_NAMES.len(), Default::default());\n+        if let Some(krate) = krate {\n+            let _p = profile::span(\"CompletionContext::new ops\");\n+            for trait_ in\n+                OP_TRAIT_LANG_NAMES.iter().filter_map(|item| hir::Trait::lang(db, krate, item))\n+            {\n+                ops_traits.insert(trait_);\n+            }\n+        }\n+\n         let mut ctx = CompletionContext {\n             sema,\n             scope,\n@@ -413,6 +434,7 @@ impl<'a> CompletionContext<'a> {\n             locals,\n             incomplete_let: false,\n             no_completion_required: false,\n+            ops_traits,\n         };\n         ctx.expand_and_fill(\n             original_file.syntax().clone(),\n@@ -889,6 +911,7 @@ fn pattern_context_for(pat: ast::Pat) -> PatternContext {\n         });\n     PatternContext { refutability, is_param, has_type_ascription }\n }\n+\n fn find_node_with_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Option<N> {\n     syntax.covering_element(range).ancestors().find_map(N::cast)\n }\n@@ -915,6 +938,37 @@ fn has_ref(token: &SyntaxToken) -> bool {\n     token.kind() == T![&]\n }\n \n+const OP_TRAIT_LANG_NAMES: &[hir::Name] = &[\n+    known::add_assign,\n+    known::add,\n+    known::bitand_assign,\n+    known::bitand,\n+    known::bitor_assign,\n+    known::bitor,\n+    known::bitxor_assign,\n+    known::bitxor,\n+    known::deref_mut,\n+    known::deref,\n+    known::div_assign,\n+    known::div,\n+    known::fn_mut,\n+    known::fn_once,\n+    known::r#fn,\n+    known::index_mut,\n+    known::index,\n+    known::mul_assign,\n+    known::mul,\n+    known::neg,\n+    known::not,\n+    known::rem_assign,\n+    known::rem,\n+    known::shl_assign,\n+    known::shl,\n+    known::shr_assign,\n+    known::shr,\n+    known::sub,\n+    known::sub,\n+];\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};"}, {"sha": "f2cf577285c38991173afd47a545a4e40fff221a", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=ca0633c8088628592359ab3aa9a336eb2137ff0c", "patch": "@@ -139,6 +139,8 @@ pub struct CompletionRelevance {\n     /// }\n     /// ```\n     pub is_local: bool,\n+    /// Set for method completions of the `core::ops` family.\n+    pub is_op_method: bool,\n     /// This is set in cases like these:\n     ///\n     /// ```\n@@ -198,6 +200,9 @@ impl CompletionRelevance {\n         if self.is_local {\n             score += 1;\n         }\n+        if self.is_op_method {\n+            score -= 1;\n+        }\n         if self.exact_postfix_snippet_match {\n             score += 100;\n         }\n@@ -588,10 +593,8 @@ mod tests {\n                 ..CompletionRelevance::default()\n             }],\n             vec![CompletionRelevance {\n-                exact_name_match: false,\n-                type_match: None,\n-                is_local: false,\n                 exact_postfix_snippet_match: true,\n+                ..CompletionRelevance::default()\n             }],\n         ];\n "}, {"sha": "fc2cb933db2e4be5deafbdcb03b66b5155ee9936", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0633c8088628592359ab3aa9a336eb2137ff0c/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=ca0633c8088628592359ab3aa9a336eb2137ff0c", "patch": "@@ -70,6 +70,13 @@ fn render(\n     item.set_relevance(CompletionRelevance {\n         type_match: compute_type_match(completion, &ret_type),\n         exact_name_match: compute_exact_name_match(completion, &call),\n+        is_op_method: match func_type {\n+            FuncType::Method(_) => func\n+                .as_assoc_item(ctx.db())\n+                .and_then(|trait_| trait_.containing_trait_or_trait_impl(ctx.db()))\n+                .map_or(false, |trait_| completion.is_ops_trait(trait_)),\n+            _ => false,\n+        },\n         ..CompletionRelevance::default()\n     });\n "}]}