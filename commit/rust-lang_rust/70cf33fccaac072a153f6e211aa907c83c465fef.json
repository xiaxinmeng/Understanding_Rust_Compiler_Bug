{"sha": "70cf33fccaac072a153f6e211aa907c83c465fef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwY2YzM2ZjY2FhYzA3MmExNTNmNmUyMTFhYTkwN2M4M2M0NjVmZWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-05-22T17:48:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-22T18:51:05Z"}, "message": "remove snapshot calls from \"match\" operations during select\n\nMotivation:\n\n- we want to use leak-check sparingly, first off\n- these calls were essentially the same as doing the check during subtyping", "tree": {"sha": "56aca53ec7410ded0b905cd770c7b0d982cae6fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56aca53ec7410ded0b905cd770c7b0d982cae6fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70cf33fccaac072a153f6e211aa907c83c465fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70cf33fccaac072a153f6e211aa907c83c465fef", "html_url": "https://github.com/rust-lang/rust/commit/70cf33fccaac072a153f6e211aa907c83c465fef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70cf33fccaac072a153f6e211aa907c83c465fef/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e00e1b6debce8270dd75e795458ba8becdffe1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e00e1b6debce8270dd75e795458ba8becdffe1f", "html_url": "https://github.com/rust-lang/rust/commit/1e00e1b6debce8270dd75e795458ba8becdffe1f"}], "stats": {"total": 326, "additions": 138, "deletions": 188}, "files": [{"sha": "4dab5814f7b7ea8d6d0c177a71703a250fdafe7c", "filename": "src/librustc_trait_selection/traits/select/candidate_assembly.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -163,9 +163,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => return,\n         }\n \n-        let result = self.infcx.probe(|snapshot| {\n-            self.match_projection_obligation_against_definition_bounds(obligation, snapshot)\n-        });\n+        let result = self\n+            .infcx\n+            .probe(|_| self.match_projection_obligation_against_definition_bounds(obligation));\n \n         if result {\n             candidates.vec.push(ProjectionCandidate);\n@@ -345,8 +345,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().trait_ref.self_ty(),\n             |impl_def_id| {\n-                self.infcx.probe(|snapshot| {\n-                    if let Ok(_substs) = self.match_impl(impl_def_id, obligation, snapshot) {\n+                self.infcx.probe(|_| {\n+                    if let Ok(_substs) = self.match_impl(impl_def_id, obligation) {\n                         candidates.vec.push(ImplCandidate(impl_def_id));\n                     }\n                 });"}, {"sha": "834bf17227d2ebe05bfb34cb6a784818ec26ee0a", "filename": "src/librustc_trait_selection/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -121,9 +121,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn confirm_projection_candidate(&mut self, obligation: &TraitObligation<'tcx>) {\n-        self.infcx.commit_unconditionally(|snapshot| {\n-            let result =\n-                self.match_projection_obligation_against_definition_bounds(obligation, snapshot);\n+        self.infcx.commit_unconditionally(|_| {\n+            let result = self.match_projection_obligation_against_definition_bounds(obligation);\n             assert!(result);\n         })\n     }\n@@ -265,8 +264,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // First, create the substitutions by matching the impl again,\n         // this time not in a probe.\n-        self.infcx.commit_unconditionally(|snapshot| {\n-            let substs = self.rematch_impl(impl_def_id, obligation, snapshot);\n+        self.infcx.commit_unconditionally(|_| {\n+            let substs = self.rematch_impl(impl_def_id, obligation);\n             debug!(\"confirm_impl_candidate: substs={:?}\", substs);\n             let cause = obligation.derived_cause(ImplDerivedObligation);\n             ensure_sufficient_stack(|| {"}, {"sha": "cff5efbfd0fd169ec6e9c1e514b2df761681a6dd", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -21,7 +21,7 @@ use super::{Normalized, ProjectionCacheKey};\n use super::{ObligationCause, PredicateObligation, TraitObligation};\n use super::{Overflow, SelectionError, Unimplemented};\n \n-use crate::infer::{CombinedSnapshot, InferCtxt, InferOk, TypeFreshener};\n+use crate::infer::{InferCtxt, InferOk, TypeFreshener};\n use crate::traits::error_reporting::InferCtxtExt;\n use crate::traits::project::ProjectionCacheKeyExt;\n use rustc_ast::attr;\n@@ -1268,7 +1268,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn match_projection_obligation_against_definition_bounds(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> bool {\n         let poly_trait_predicate = self.infcx().resolve_vars_if_possible(&obligation.predicate);\n         let (placeholder_trait_predicate, _) =\n@@ -1299,12 +1298,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             if let ty::PredicateKind::Trait(bound, _) = bound.kind() {\n                 let bound = bound.to_poly_trait_ref();\n                 if self.infcx.probe(|_| {\n-                    self.match_projection(\n-                        obligation,\n-                        bound,\n-                        placeholder_trait_predicate.trait_ref,\n-                        snapshot,\n-                    )\n+                    self.match_projection(obligation, bound, placeholder_trait_predicate.trait_ref)\n                 }) {\n                     return Some(bound);\n                 }\n@@ -1321,12 +1315,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             None => false,\n             Some(bound) => {\n                 // Repeat the successful match, if any, this time outside of a probe.\n-                let result = self.match_projection(\n-                    obligation,\n-                    bound,\n-                    placeholder_trait_predicate.trait_ref,\n-                    snapshot,\n-                );\n+                let result =\n+                    self.match_projection(obligation, bound, placeholder_trait_predicate.trait_ref);\n \n                 assert!(result);\n                 true\n@@ -1339,14 +1329,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n         trait_bound: ty::PolyTraitRef<'tcx>,\n         placeholder_trait_ref: ty::TraitRef<'tcx>,\n-        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> bool {\n         debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());\n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n             .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)\n             .is_ok()\n-            && self.infcx.leak_check(false, snapshot).is_ok()\n     }\n \n     fn evaluate_where_clause<'o>(\n@@ -1811,9 +1799,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n-        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> Normalized<'tcx, SubstsRef<'tcx>> {\n-        match self.match_impl(impl_def_id, obligation, snapshot) {\n+        match self.match_impl(impl_def_id, obligation) {\n             Ok(substs) => substs,\n             Err(()) => {\n                 bug!(\n@@ -1829,7 +1816,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n-        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {\n         let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n \n@@ -1872,11 +1858,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e))?;\n         nested_obligations.extend(obligations);\n \n-        if let Err(e) = self.infcx.leak_check(false, snapshot) {\n-            debug!(\"match_impl: failed leak check due to `{}`\", e);\n-            return Err(());\n-        }\n-\n         if !self.intercrate\n             && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation\n         {"}, {"sha": "70e4be5929fb9497bb179a667d0e017094e15cda", "filename": "src/test/ui/associated-types/associated-types-eq-hr.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -7,7 +7,7 @@ pub trait TheTrait<T> {\n }\n \n struct IntStruct {\n-    x: isize\n+    x: isize,\n }\n \n impl<'a> TheTrait<&'a isize> for IntStruct {\n@@ -19,7 +19,7 @@ impl<'a> TheTrait<&'a isize> for IntStruct {\n }\n \n struct UintStruct {\n-    x: isize\n+    x: isize,\n }\n \n impl<'a> TheTrait<&'a isize> for UintStruct {\n@@ -30,8 +30,7 @@ impl<'a> TheTrait<&'a isize> for UintStruct {\n     }\n }\n \n-struct Tuple {\n-}\n+struct Tuple {}\n \n impl<'a> TheTrait<(&'a isize, &'a isize)> for Tuple {\n     type A = &'a isize;\n@@ -42,37 +41,43 @@ impl<'a> TheTrait<(&'a isize, &'a isize)> for Tuple {\n }\n \n fn foo<T>()\n-    where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n+where\n+    T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n {\n     // ok for IntStruct, but not UintStruct\n }\n \n fn bar<T>()\n-    where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n+where\n+    T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n {\n     // ok for UintStruct, but not IntStruct\n }\n \n fn tuple_one<T>()\n-    where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n+where\n+    T: for<'x, 'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>,\n {\n     // not ok for tuple, two lifetimes and we pick first\n }\n \n fn tuple_two<T>()\n-    where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n+where\n+    T: for<'x, 'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>,\n {\n     // not ok for tuple, two lifetimes and we pick second\n }\n \n fn tuple_three<T>()\n-    where T : for<'x> TheTrait<(&'x isize, &'x isize), A = &'x isize>\n+where\n+    T: for<'x> TheTrait<(&'x isize, &'x isize), A = &'x isize>,\n {\n     // ok for tuple\n }\n \n fn tuple_four<T>()\n-    where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n+where\n+    T: for<'x, 'y> TheTrait<(&'x isize, &'y isize)>,\n {\n     // not ok for tuple, two lifetimes, and lifetime matching is invariant\n }\n@@ -89,14 +94,12 @@ pub fn call_bar() {\n \n pub fn call_tuple_one() {\n     tuple_one::<Tuple>();\n-    //~^ ERROR not satisfied\n-    //~| ERROR type mismatch\n+    //~^ ERROR type mismatch\n }\n \n pub fn call_tuple_two() {\n     tuple_two::<Tuple>();\n-    //~^ ERROR not satisfied\n-    //~| ERROR type mismatch\n+    //~^ ERROR type mismatch\n }\n \n pub fn call_tuple_three() {\n@@ -105,7 +108,7 @@ pub fn call_tuple_three() {\n \n pub fn call_tuple_four() {\n     tuple_four::<Tuple>();\n-    //~^ ERROR not satisfied\n+    //~^ ERROR implementation of `TheTrait` is not general enough\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "626cb55588fae523ce3ad958053aab6285b62cf1", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 32, "deletions": 55, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -1,10 +1,11 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n-  --> $DIR/associated-types-eq-hr.rs:82:5\n+  --> $DIR/associated-types-eq-hr.rs:87:5\n    |\n LL | fn foo<T>()\n    |    --- required by a bound in this\n-LL |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n-   |                                           ------------- required by this bound in `foo`\n+LL | where\n+LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n+   |                                    ------------- required by this bound in `foo`\n ...\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n@@ -13,84 +14,60 @@ LL |     foo::<UintStruct>();\n               found reference `&usize`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n-  --> $DIR/associated-types-eq-hr.rs:86:5\n+  --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL | fn bar<T>()\n    |    --- required by a bound in this\n-LL |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n-   |                                           ------------- required by this bound in `bar`\n+LL | where\n+LL |     T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n+   |                                    ------------- required by this bound in `bar`\n ...\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n    |\n    = note: expected reference `&usize`\n               found reference `&isize`\n \n-error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:91:17\n-   |\n-LL | fn tuple_one<T>()\n-   |    --------- required by a bound in this\n-LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n-   |               ---------------------------------------------------------- required by this bound in `tuple_one`\n-...\n-LL |     tuple_one::<Tuple>();\n-   |                 ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n-   |\n-   = help: the following implementations were found:\n-             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n-\n error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'x isize`\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+  --> $DIR/associated-types-eq-hr.rs:96:5\n    |\n LL | fn tuple_one<T>()\n    |    --------- required by a bound in this\n-LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n-   |                                                           ------------- required by this bound in `tuple_one`\n+LL | where\n+LL |     T: for<'x, 'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>,\n+   |                                                     ------------- required by this bound in `tuple_one`\n ...\n LL |     tuple_one::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'y, found concrete lifetime\n-\n-error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:97:17\n-   |\n-LL | fn tuple_two<T>()\n-   |    --------- required by a bound in this\n-LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n-   |               ---------------------------------------------------------- required by this bound in `tuple_two`\n-...\n-LL |     tuple_two::<Tuple>();\n-   |                 ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n-   |\n-   = help: the following implementations were found:\n-             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n \n error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'y isize`\n-  --> $DIR/associated-types-eq-hr.rs:97:5\n+  --> $DIR/associated-types-eq-hr.rs:101:5\n    |\n LL | fn tuple_two<T>()\n    |    --------- required by a bound in this\n-LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n-   |                                                           ------------- required by this bound in `tuple_two`\n+LL | where\n+LL |     T: for<'x, 'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>,\n+   |                                                     ------------- required by this bound in `tuple_two`\n ...\n LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'y, found concrete lifetime\n \n-error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:107:18\n+error: implementation of `TheTrait` is not general enough\n+  --> $DIR/associated-types-eq-hr.rs:110:5\n    |\n-LL | fn tuple_four<T>()\n-   |    ---------- required by a bound in this\n-LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n-   |               ------------------------------------------- required by this bound in `tuple_four`\n+LL | / pub trait TheTrait<T> {\n+LL | |     type A;\n+LL | |\n+LL | |     fn get(&self, t: T) -> Self::A;\n+LL | | }\n+   | |_- trait `TheTrait` defined here\n ...\n-LL |     tuple_four::<Tuple>();\n-   |                  ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+LL |       tuple_four::<Tuple>();\n+   |       ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n+   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0271, E0277.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "45573814d13c0945f2577dd3843a8e13da15fb06", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -1,17 +1,16 @@\n-error[E0277]: the trait bound `for<'a, 'b> SomeStruct: Foo<(&'a isize, &'b isize)>` is not satisfied\n-  --> $DIR/hrtb-conflate-regions.rs:27:22\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/hrtb-conflate-regions.rs:27:10\n    |\n-LL | fn want_foo2<T>()\n-   |    --------- required by a bound in this\n-LL |     where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n-   |               -------------------------------------- required by this bound in `want_foo2`\n+LL | / trait Foo<X> {\n+LL | |     fn foo(&self, x: X) { }\n+LL | | }\n+   | |_- trait `Foo` defined here\n ...\n-LL | fn b() { want_foo2::<SomeStruct>(); }\n-   |                      ^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n+LL |   fn b() { want_foo2::<SomeStruct>(); }\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <SomeStruct as Foo<(&'a isize, &'a isize)>>\n+   = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `SomeStruct` actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "921061916fc95b7d46c891db83d39cfae29499a5", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -32,5 +32,5 @@ fn main() {\n     // NB. *However*, the reinstated leak-check gives an error here.\n \n     foo::<()>();\n-    //~^ ERROR not satisfied\n+    //~^ ERROR implementation of `Trait` is not general enough\n }"}, {"sha": "fe8209d054c8ad641044ddda3eda030241b2ec80", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -1,18 +1,14 @@\n-error[E0277]: the trait bound `(): Trait<for<'b> fn(&'b u32)>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:11\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n    |\n-LL | fn foo<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     T: Trait<for<'b> fn(&'b u32)>,\n-   |        -------------------------- required by this bound in `foo`\n+LL | trait Trait<T> {}\n+   | ----------------- trait `Trait` defined here\n ...\n LL |     foo::<()>();\n-   |           ^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n+   |     ^^^^^^^^^ implementation of `Trait` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <() as Trait<fn(&'a u32)>>\n+   = note: `()` must implement `Trait<for<'b> fn(&'b u32)>`\n+   = note: ...but `()` actually implements `Trait<fn(&'0 u32)>`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "b1b7ec6bcf1a5803b80ee3f6b0a8bc1225d90f30", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -25,5 +25,5 @@ fn main() {\n     //     yielding `fn(&!b u32)`, in a fresh universe U1\n     //   - So we get `?a = !b` but the universe U0 assigned to `?a` cannot name `!b`.\n \n-    foo::<()>(); //~ ERROR not satisfied\n+    foo::<()>(); //~ ERROR implementation of `Trait` is not general enough\n }"}, {"sha": "720e2276d5343705292569e851f3dc6815dad7f3", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -1,18 +1,14 @@\n-error[E0277]: the trait bound `(): Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:11\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n    |\n-LL | fn foo<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     T: Trait<for<'b> fn(Cell<&'b u32>)>,\n-   |        -------------------------------- required by this bound in `foo`\n+LL | trait Trait<T> {}\n+   | ----------------- trait `Trait` defined here\n ...\n LL |     foo::<()>();\n-   |           ^^ the trait `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not implemented for `()`\n+   |     ^^^^^^^^^ implementation of `Trait` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <() as Trait<fn(std::cell::Cell<&'a u32>)>>\n+   = note: `()` must implement `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>`\n+   = note: ...but `()` actually implements `Trait<fn(std::cell::Cell<&'0 u32>)>`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "5e3014317f5bc7025c8eddaeee4a217aee17639f", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -1,31 +1,30 @@\n-error[E0277]: the trait bound `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n-  --> $DIR/hrtb-just-for-static.rs:24:17\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n-LL | fn want_hrtb<T>()\n-   |    --------- required by a bound in this\n-LL |     where T : for<'a> Foo<&'a isize>\n-   |               ---------------------- required by this bound in `want_hrtb`\n+LL | / trait Foo<X> {\n+LL | |     fn foo(&self, x: X) { }\n+LL | | }\n+   | |_- trait `Foo` defined here\n ...\n-LL |     want_hrtb::<StaticInt>()\n-   |                 ^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n+LL |       want_hrtb::<StaticInt>()\n+   |       ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <StaticInt as Foo<&'static isize>>\n+   = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`...\n+   = note: ...but `StaticInt` actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n \n-error[E0277]: the trait bound `for<'a> &'a u32: Foo<&'a isize>` is not satisfied\n-  --> $DIR/hrtb-just-for-static.rs:30:17\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/hrtb-just-for-static.rs:30:5\n    |\n-LL | fn want_hrtb<T>()\n-   |    --------- required by a bound in this\n-LL |     where T : for<'a> Foo<&'a isize>\n-   |               ---------------------- required by this bound in `want_hrtb`\n+LL | / trait Foo<X> {\n+LL | |     fn foo(&self, x: X) { }\n+LL | | }\n+   | |_- trait `Foo` defined here\n ...\n-LL |     want_hrtb::<&'a u32>()\n-   |                 ^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `&'a u32`\n+LL |       want_hrtb::<&'a u32>()\n+   |       ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <&'a u32 as Foo<&'a isize>>\n+   = note: `Foo<&'0 isize>` would have to be implemented for the type `&'a u32`, for any lifetime `'0`...\n+   = note: ...but `Foo<&'1 isize>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "4a09f4be156e2bb60a879883cf640004796c28d1", "filename": "src/test/ui/hrtb/issue-46989.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -28,15 +28,13 @@\n //\n // holds because 'a can be instantiated to 'empty.\n \n-trait Foo {\n+trait Foo {}\n \n-}\n-\n-impl<A> Foo for fn(A) { }\n+impl<A> Foo for fn(A) {}\n \n fn assert_foo<T: Foo>() {}\n \n fn main() {\n     assert_foo::<fn(&i32)>();\n-    //~^ ERROR the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n+    //~^ ERROR implementation of `Foo` is not general enough\n }"}, {"sha": "c85c37ff9239e3a3a6d78870395c7c0789843cd9", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -1,15 +1,14 @@\n-error[E0277]: the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n-  --> $DIR/issue-46989.rs:40:18\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/issue-46989.rs:38:5\n    |\n-LL | fn assert_foo<T: Foo>() {}\n-   |                  --- required by this bound in `assert_foo`\n+LL | trait Foo {}\n+   | ------------ trait `Foo` defined here\n ...\n LL |     assert_foo::<fn(&i32)>();\n-   |                  ^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <fn(A) as Foo>\n+   = note: `Foo` would have to be implemented for the type `for<'r> fn(&'r i32)`\n+   = note: ...but `Foo` is actually implemented for the type `fn(&'0 i32)`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "47cc64ec470a5f5b0167c8a2300251bd7bdfbafd", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -4,6 +4,8 @@ error[E0599]: no function or associated item named `make_g` found for fn pointer\n LL |     let x = <fn (&())>::make_g();\n    |                         ^^^^^^ function or associated item not found in `for<'r> fn(&'r ())`\n    |\n+   = note: the method `make_g` exists but the following trait bounds were not satisfied:\n+           `for<'r> fn(&'r ()): X`\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `X` defines an item `make_g`, perhaps you need to implement it\n   --> $DIR/issue-57362-2.rs:8:1"}, {"sha": "37c6954fd52ee1d49c4fe7b46d2f934ab2786eb1", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -14,9 +14,11 @@ impl Bar for &'static u32 {\n }\n \n fn foo<T>(x: &T)\n-    where for<'a> &'a T: Bar\n-{}\n+where\n+    for<'a> &'a T: Bar,\n+{\n+}\n \n fn main() {\n-    foo(&X); //~ ERROR trait bound\n+    foo(&X); //~ ERROR implementation of `Bar` is not general enough\n }"}, {"sha": "30eb78b2da4f73d1def0a8c41f4d2a81197bb935", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70cf33fccaac072a153f6e211aa907c83c465fef/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=70cf33fccaac072a153f6e211aa907c83c465fef", "patch": "@@ -1,17 +1,16 @@\n-error[E0277]: the trait bound `for<'a> &'a _: Bar` is not satisfied\n-  --> $DIR/where-for-self-2.rs:21:5\n+error: implementation of `Bar` is not general enough\n+  --> $DIR/where-for-self-2.rs:23:5\n    |\n-LL | fn foo<T>(x: &T)\n-   |    --- required by a bound in this\n-LL |     where for<'a> &'a T: Bar\n-   |                          --- required by this bound in `foo`\n+LL | / trait Bar {\n+LL | |     fn bar(&self);\n+LL | | }\n+   | |_- trait `Bar` defined here\n ...\n-LL |     foo(&X);\n-   |     ^^^ the trait `for<'a> Bar` is not implemented for `&'a _`\n+LL |       foo(&X);\n+   |       ^^^ implementation of `Bar` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <&'static u32 as Bar>\n+   = note: `Bar` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n+   = note: ...but `Bar` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}]}