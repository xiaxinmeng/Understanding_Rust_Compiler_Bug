{"sha": "069529bc5cc14f63035609cdfae5b21ca7999d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OTUyOWJjNWNjMTRmNjMwMzU2MDljZGZhZTViMjFjYTc5OTlkNGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-26T19:04:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-27T17:04:03Z"}, "message": "Autoref the argument to the index operator (#4920)", "tree": {"sha": "b3050a72dd53e3f5cd950cbd37dff6ee25b1ec0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3050a72dd53e3f5cd950cbd37dff6ee25b1ec0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/069529bc5cc14f63035609cdfae5b21ca7999d4b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/069529bc5cc14f63035609cdfae5b21ca7999d4b", "html_url": "https://github.com/rust-lang/rust/commit/069529bc5cc14f63035609cdfae5b21ca7999d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/069529bc5cc14f63035609cdfae5b21ca7999d4b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c17ff7dbc667a7d579b02b86d4c08a1093683fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c17ff7dbc667a7d579b02b86d4c08a1093683fd", "html_url": "https://github.com/rust-lang/rust/commit/2c17ff7dbc667a7d579b02b86d4c08a1093683fd"}], "stats": {"total": 137, "additions": 88, "deletions": 49}, "files": [{"sha": "d0623ef604076c6cd69cbfdaf42575842af87ddf", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=069529bc5cc14f63035609cdfae5b21ca7999d4b", "patch": "@@ -77,5 +77,5 @@ pub trait Shr<RHS,Result> {\n \n #[lang=\"index\"]\n pub trait Index<Index,Result> {\n-    fn index(&self, index: Index) -> Result;\n+    fn index(&self, index: &Index) -> Result;\n }"}, {"sha": "2ec5b59b9c5517495b7402e9602a25406ea0c94f", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=069529bc5cc14f63035609cdfae5b21ca7999d4b", "patch": "@@ -342,7 +342,7 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n }\n \n fn decode_ast(par_doc: ebml::Doc) -> ast::inlined_item {\n-    let chi_doc = par_doc[c::tag_tree as uint];\n+    let chi_doc = par_doc.get(c::tag_tree as uint);\n     let d = &reader::Decoder(chi_doc);\n     Decodable::decode(d)\n }\n@@ -1089,9 +1089,9 @@ impl ebml_decoder_decoder_helpers for reader::Decoder {\n fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                       ast_doc: ebml::Doc) {\n     let dcx = xcx.dcx;\n-    let tbl_doc = ast_doc[c::tag_table as uint];\n+    let tbl_doc = ast_doc.get(c::tag_table as uint);\n     for reader::docs(tbl_doc) |tag, entry_doc| {\n-        let id0 = entry_doc[c::tag_table_id as uint].as_int();\n+        let id0 = entry_doc.get(c::tag_table_id as uint).as_int();\n         let id = xcx.tr_id(id0);\n \n         debug!(\">> Side table document with tag 0x%x \\\n@@ -1103,7 +1103,7 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n         } else if tag == (c::tag_table_moves_map as uint) {\n             dcx.maps.moves_map.insert(id);\n         } else {\n-            let val_doc = entry_doc[c::tag_table_val as uint];\n+            let val_doc = entry_doc.get(c::tag_table_val as uint);\n             let val_dsr = &reader::Decoder(val_doc);\n             if tag == (c::tag_table_def as uint) {\n                 let def = decode_def(xcx, val_doc);\n@@ -1172,7 +1172,7 @@ fn encode_item_ast(ebml_w: writer::Encoder, item: @ast::item) {\n \n #[cfg(test)]\n fn decode_item_ast(par_doc: ebml::Doc) -> @ast::item {\n-    let chi_doc = par_doc[c::tag_tree as uint];\n+    let chi_doc = par_doc.get(c::tag_tree as uint);\n     let d = &reader::Decoder(chi_doc);\n     @Decodable::decode(d)\n }"}, {"sha": "f5382d69174d0003f418b871cee3a22678e61ddd", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=069529bc5cc14f63035609cdfae5b21ca7999d4b", "patch": "@@ -436,7 +436,7 @@ pub impl VisitContext {\n \n             expr_unary(deref, base) => {       // *base\n                 if !self.use_overloaded_operator(\n-                    expr, DontDerefArgs, base, [], visitor)\n+                    expr, base, [], visitor)\n                 {\n                     // Moving out of *base moves out of base.\n                     self.use_expr(base, comp_mode, visitor);\n@@ -450,7 +450,7 @@ pub impl VisitContext {\n \n             expr_index(lhs, rhs) => {          // lhs[rhs]\n                 if !self.use_overloaded_operator(\n-                    expr, DontDerefArgs, lhs, [rhs], visitor)\n+                    expr, lhs, [rhs], visitor)\n                 {\n                     self.use_expr(lhs, comp_mode, visitor);\n                     self.consume_expr(rhs, visitor);\n@@ -579,15 +579,15 @@ pub impl VisitContext {\n \n             expr_unary(_, lhs) => {\n                 if !self.use_overloaded_operator(\n-                    expr, DontDerefArgs, lhs, [], visitor)\n+                    expr, lhs, [], visitor)\n                 {\n                     self.consume_expr(lhs, visitor);\n                 }\n             }\n \n             expr_binary(_, lhs, rhs) => {\n                 if !self.use_overloaded_operator(\n-                    expr, DoDerefArgs, lhs, [rhs], visitor)\n+                    expr, lhs, [rhs], visitor)\n                 {\n                     self.consume_expr(lhs, visitor);\n                     self.consume_expr(rhs, visitor);\n@@ -659,7 +659,6 @@ pub impl VisitContext {\n \n     fn use_overloaded_operator(&self,\n                                expr: @expr,\n-                               deref_args: DerefArgs,\n                                receiver_expr: @expr,\n                                arg_exprs: &[@expr],\n                                visitor: vt<VisitContext>) -> bool\n@@ -670,21 +669,10 @@ pub impl VisitContext {\n \n         self.use_receiver(expr.id, expr.span, receiver_expr, visitor);\n \n-        // The deref_args stuff should eventually be converted into\n-        // adjustments.  Moreover, it should eventually be applied\n-        // consistently to all overloaded operators.  But that's not\n-        // how it is today.\n-        match deref_args {\n-            DoDerefArgs => {\n-                // we are always passing in a borrowed pointer,\n-                // so it's always read mode:\n-                for arg_exprs.each |arg_expr| {\n-                    self.use_expr(*arg_expr, Read, visitor);\n-                }\n-            }\n-            DontDerefArgs => {\n-                self.use_fn_args(expr.callee_id, arg_exprs, visitor);\n-            }\n+        // for overloaded operatrs, we are always passing in a\n+        // borrowed pointer, so it's always read mode:\n+        for arg_exprs.each |arg_expr| {\n+            self.use_expr(*arg_expr, Read, visitor);\n         }\n \n         return true;"}, {"sha": "0da1a9acef21225856ae3b63f03fbcf0b9f20f5e", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=069529bc5cc14f63035609cdfae5b21ca7999d4b", "patch": "@@ -766,18 +766,15 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         }\n         ast::expr_binary(_, lhs, rhs) => {\n             // if not overloaded, would be RvalueDatumExpr\n-            return trans_overloaded_op(bcx, expr, lhs, ~[rhs], dest,\n-                                       DoAutorefArg);\n+            return trans_overloaded_op(bcx, expr, lhs, ~[rhs], dest);\n         }\n         ast::expr_unary(_, subexpr) => {\n             // if not overloaded, would be RvalueDatumExpr\n-            return trans_overloaded_op(bcx, expr, subexpr, ~[], dest,\n-                                       DontAutorefArg);\n+            return trans_overloaded_op(bcx, expr, subexpr, ~[], dest);\n         }\n         ast::expr_index(base, idx) => {\n             // if not overloaded, would be RvalueDatumExpr\n-            return trans_overloaded_op(bcx, expr, base, ~[idx], dest,\n-                                       DontAutorefArg);\n+            return trans_overloaded_op(bcx, expr, base, ~[idx], dest);\n         }\n         ast::expr_cast(val, _) => {\n             match ty::get(node_id_type(bcx, expr.id)).sty {\n@@ -1644,16 +1641,15 @@ fn trans_overloaded_op(bcx: block,\n                        expr: @ast::expr,\n                        rcvr: @ast::expr,\n                        +args: ~[@ast::expr],\n-                       dest: Dest,\n-                       +autoref_arg: AutorefArg) -> block\n+                       dest: Dest) -> block\n {\n     let origin = *bcx.ccx().maps.method_map.get(&expr.id);\n     let fty = node_id_type(bcx, expr.callee_id);\n     return callee::trans_call_inner(\n         bcx, expr.info(), fty,\n         expr_ty(bcx, expr),\n         |bcx| meth::trans_method_callee(bcx, expr.callee_id, rcvr, origin),\n-        callee::ArgExprs(args), dest, autoref_arg);\n+        callee::ArgExprs(args), dest, DoAutorefArg);\n }\n \n fn int_cast(bcx: block, lldsttype: TypeRef, llsrctype: TypeRef,\n@@ -1806,7 +1802,7 @@ fn trans_assign_op(bcx: block,\n         // FIXME(#2528) evaluates the receiver twice!!\n         let scratch = scratch_datum(bcx, dst_datum.ty, false);\n         let bcx = trans_overloaded_op(bcx, expr, dst, ~[src],\n-                                      SaveIn(scratch.val), DoAutorefArg);\n+                                      SaveIn(scratch.val));\n         return scratch.move_to_datum(bcx, DROP_EXISTING, dst_datum);\n     }\n "}, {"sha": "732026a3033a0a54965fc7acbed4f6f16da0983b", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=069529bc5cc14f63035609cdfae5b21ca7999d4b", "patch": "@@ -1549,7 +1549,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n        lookup_op_method(\n             fcx, ex, rhs_expr, rhs_t,\n             fcx.tcx().sess.ident_of(mname), ~[],\n-            DontDerefArgs, DontAutoderefReceiver,\n+            DoDerefArgs, DontAutoderefReceiver,\n             || {\n                 fcx.type_error_message(ex.span, |actual| {\n                     fmt!(\"cannot apply unary operator `%s` to type `%s`\",\n@@ -2757,7 +2757,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                           expr.span, raw_base_t);\n                       let ret_ty = lookup_op_method(fcx, expr, base, resolved,\n                                              tcx.sess.ident_of(~\"index\"),\n-                                             ~[idx], DontDerefArgs, AutoderefReceiver,\n+                                             ~[idx], DoDerefArgs, AutoderefReceiver,\n                         || {\n                             fcx.type_error_message(expr.span, |actual|\n                                 fmt!(\"cannot index a value \\"}, {"sha": "8bac0fed3c925caf5920d5703b4c5cee9f741648", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=069529bc5cc14f63035609cdfae5b21ca7999d4b", "patch": "@@ -437,7 +437,8 @@ pub impl Bitv {\n             if offset >= bitv.nbits {\n                 0\n             } else {\n-                bitv[offset] as u8 << (7 - bit)\n+                // NOTE cannot use bitv[offset] until snapshot\n+                bitv.index(&offset) as u8 << (7 - bit)\n             }\n         }\n \n@@ -459,7 +460,8 @@ pub impl Bitv {\n      * Transform self into a [bool] by turning each bit into a bool\n      */\n     fn to_bools(&self) -> ~[bool] {\n-        vec::from_fn(self.nbits, |i| self[i])\n+        // NOTE cannot use self[i] until snapshot\n+        vec::from_fn(self.nbits, |i| self.index(&i))\n     }\n \n     /**\n@@ -555,8 +557,8 @@ pub fn from_fn(len: uint, f: &fn(index: uint) -> bool) -> Bitv {\n }\n \n impl ops::Index<uint,bool> for Bitv {\n-    fn index(&self, i: uint) -> bool {\n-        self.get(i)\n+    fn index(&self, i: &uint) -> bool {\n+        self.get(*i)\n     }\n }\n "}, {"sha": "b82616d386af8e9bd588191ecb16215c864e347f", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=069529bc5cc14f63035609cdfae5b21ca7999d4b", "patch": "@@ -68,11 +68,9 @@ pub mod reader {\n \n     // ebml reading\n \n-    impl ops::Index<uint,Doc> for Doc {\n-        fn index(&self, tag: uint) -> Doc {\n-            unsafe {\n-                get_doc(*self, tag)\n-            }\n+    pub impl Doc {\n+        fn get(&self, tag: uint) -> Doc {\n+            get_doc(*self, tag)\n         }\n     }\n "}, {"sha": "6f479140d73aec1cc89ef102ff8ceaacef9a3020", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=069529bc5cc14f63035609cdfae5b21ca7999d4b", "patch": "@@ -40,8 +40,8 @@ impl ops::Not<Point> for Point {\n }\n \n impl ops::Index<bool,int> for Point {\n-    fn index(&self, +x: bool) -> int {\n-        if x { self.x } else { self.y }\n+    fn index(&self, +x: &bool) -> int {\n+        if *x { self.x } else { self.y }\n     }\n }\n "}, {"sha": "7d1d0c6be0e5e7fc3ea0d57538b858fc22495b8f", "filename": "src/test/run-pass/overload-index-operator.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069529bc5cc14f63035609cdfae5b21ca7999d4b/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs?ref=069529bc5cc14f63035609cdfae5b21ca7999d4b", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test overloading of the `[]` operator.  In particular test that it\n+// takes its argument *by reference*.\n+\n+use core::ops::Index;\n+\n+struct AssociationList<K,V> {\n+    pairs: ~[AssociationPair<K,V>]\n+}\n+\n+struct AssociationPair<K,V> {\n+    key: K,\n+    value: V\n+}\n+\n+impl<K,V> AssociationList<K,V> {\n+    fn push(&mut self, key: K, value: V) {\n+        self.pairs.push(AssociationPair {key: key, value: value});\n+    }\n+}\n+\n+impl<K:Eq,V:Copy> Index<K,V> for AssociationList<K,V> {\n+    fn index(&self, index: &K) -> V {\n+        for self.pairs.each |pair| {\n+            if pair.key == *index {\n+                return copy pair.value;\n+            }\n+        }\n+        fail!(fmt!(\"No value found for key: %?\", index));\n+    }\n+}\n+\n+pub fn main() {\n+    let foo = ~\"foo\";\n+    let bar = ~\"bar\";\n+\n+    let mut list = AssociationList {pairs: ~[]};\n+    list.push(copy foo, 22);\n+    list.push(copy bar, 44);\n+\n+    fail_unless!(list[foo] == 22)\n+    fail_unless!(list[bar] == 44)\n+\n+    fail_unless!(list[foo] == 22)\n+    fail_unless!(list[bar] == 44)\n+}\n\\ No newline at end of file"}]}