{"sha": "fe3f606cda083aec9564add4f7ff6ed4c4a0fff7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlM2Y2MDZjZGEwODNhZWM5NTY0YWRkNGY3ZmY2ZWQ0YzRhMGZmZjc=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-09-11T14:26:38Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-24T12:59:06Z"}, "message": "Add ty_fn_sig_vtable for getting adjusted signature for vtable shims.", "tree": {"sha": "8d17d0fb27e1809aac66d557110044db5ca16502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d17d0fb27e1809aac66d557110044db5ca16502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe3f606cda083aec9564add4f7ff6ed4c4a0fff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe3f606cda083aec9564add4f7ff6ed4c4a0fff7", "html_url": "https://github.com/rust-lang/rust/commit/fe3f606cda083aec9564add4f7ff6ed4c4a0fff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe3f606cda083aec9564add4f7ff6ed4c4a0fff7/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824315a7220895b0e21783726eb2b7856bc27406", "url": "https://api.github.com/repos/rust-lang/rust/commits/824315a7220895b0e21783726eb2b7856bc27406", "html_url": "https://github.com/rust-lang/rust/commit/824315a7220895b0e21783726eb2b7856bc27406"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "501a0b8af76bb447106ee10c60b6689f03b88936", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe3f606cda083aec9564add4f7ff6ed4c4a0fff7/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe3f606cda083aec9564add4f7ff6ed4c4a0fff7/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=fe3f606cda083aec9564add4f7ff6ed4c4a0fff7", "patch": "@@ -492,7 +492,7 @@ pub fn codegen_instance<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, instance: Instance<'\n     info!(\"codegen_instance({})\", instance);\n \n     let fn_ty = instance.ty(cx.tcx);\n-    let sig = common::ty_fn_sig(cx, fn_ty);\n+    let sig = common::ty_fn_sig_vtable(cx, fn_ty, instance.is_vtable_shim());\n     let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n \n     let lldecl = cx.instances.borrow().get(&instance).cloned().unwrap_or_else(||"}, {"sha": "972cccd5d68e0ca7653aacad641dd402dc576e50", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe3f606cda083aec9564add4f7ff6ed4c4a0fff7/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe3f606cda083aec9564add4f7ff6ed4c4a0fff7/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=fe3f606cda083aec9564add4f7ff6ed4c4a0fff7", "patch": "@@ -56,7 +56,7 @@ pub fn get_fn(\n     debug!(\"get_fn({:?}: {:?}) => {}\", instance, fn_ty, sym);\n \n     // Create a fn pointer with the substituted signature.\n-    let fn_ptr_ty = tcx.mk_fn_ptr(common::ty_fn_sig(cx, fn_ty));\n+    let fn_ptr_ty = tcx.mk_fn_ptr(common::ty_fn_sig_vtable(cx, fn_ty, instance.is_vtable_shim()));\n     let llptrty = cx.layout_of(fn_ptr_ty).llvm_type(cx);\n \n     let llfn = if let Some(llfn) = declare::get_declared_value(cx, &sym) {"}, {"sha": "df91f75837422c00ac797be5ce95b5ea751f8cc9", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fe3f606cda083aec9564add4f7ff6ed4c4a0fff7/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe3f606cda083aec9564add4f7ff6ed4c4a0fff7/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=fe3f606cda083aec9564add4f7ff6ed4c4a0fff7", "patch": "@@ -453,3 +453,22 @@ pub fn ty_fn_sig<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         _ => bug!(\"unexpected type {:?} to ty_fn_sig\", ty)\n     }\n }\n+\n+pub fn ty_fn_sig_vtable<'a, 'tcx>(\n+    cx: &CodegenCx<'a, 'tcx>,\n+    ty: Ty<'tcx>,\n+    is_vtable_shim: bool\n+    ) -> ty::PolyFnSig<'tcx>\n+{\n+    let mut fn_sig = ty_fn_sig(cx, ty);\n+    if is_vtable_shim {\n+        // Modify fn(self, ...) to fn(self: *mut Self, ...)\n+        fn_sig = fn_sig.map_bound(|mut fn_sig| {\n+            let mut inputs_and_output = fn_sig.inputs_and_output.to_vec();\n+            inputs_and_output[0] = cx.tcx.mk_mut_ptr(inputs_and_output[0]);\n+            fn_sig.inputs_and_output = cx.tcx.intern_type_list(&inputs_and_output);\n+            fn_sig\n+        });\n+    }\n+    fn_sig\n+}"}]}