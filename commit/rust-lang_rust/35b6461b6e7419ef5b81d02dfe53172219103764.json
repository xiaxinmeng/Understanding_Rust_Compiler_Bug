{"sha": "35b6461b6e7419ef5b81d02dfe53172219103764", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YjY0NjFiNmU3NDE5ZWY1YjgxZDAyZGZlNTMxNzIyMTkxMDM3NjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-13T01:53:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-13T01:53:06Z"}, "message": "Auto merge of #30310 - mbrubeck:doc-vec-bounds, r=steveklabnik\n\nr? @steveklabnik\n\nCurrently neither the API docs nor the book clearly explain that out-of-bounds array indexing causes a panic.  Since this is fairly important and seems to surprise a number of new Rust programmers, I think it's worth adding to both places.  (But if you think it would be better to put this info in the API docs only, that's fine too.)\n\nSome specific things I'd like feedback on:\n\n* The new text here talks about panicking, which hasn't been formally introduced at this point in chapter 5 (though it has been mentioned in previous sections too).\n* Similarly the `Vec::get` example uses `Option<T>` which hasn't been fully introduced yet.  Should we leave out this example?", "tree": {"sha": "95f680e691b393f79d02f822f917ff69d2771ec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95f680e691b393f79d02f822f917ff69d2771ec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35b6461b6e7419ef5b81d02dfe53172219103764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35b6461b6e7419ef5b81d02dfe53172219103764", "html_url": "https://github.com/rust-lang/rust/commit/35b6461b6e7419ef5b81d02dfe53172219103764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35b6461b6e7419ef5b81d02dfe53172219103764/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a", "html_url": "https://github.com/rust-lang/rust/commit/1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a"}, {"sha": "5b9dd6a016adb5ed67e150643fb7e21dcc916845", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9dd6a016adb5ed67e150643fb7e21dcc916845", "html_url": "https://github.com/rust-lang/rust/commit/5b9dd6a016adb5ed67e150643fb7e21dcc916845"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "b09735c3feee6b9d12c7816fe06c8adafa6933d0", "filename": "src/doc/book/vectors.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/35b6461b6e7419ef5b81d02dfe53172219103764/src%2Fdoc%2Fbook%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/35b6461b6e7419ef5b81d02dfe53172219103764/src%2Fdoc%2Fbook%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvectors.md?ref=35b6461b6e7419ef5b81d02dfe53172219103764", "patch": "@@ -61,6 +61,33 @@ error: aborting due to previous error\n There\u2019s a lot of punctuation in that message, but the core of it makes sense:\n you cannot index with an `i32`.\n \n+## Out-of-bounds Access\n+\n+If you try to access an index that doesn\u2019t exist:\n+\n+```ignore\n+let v = vec![1, 2, 3];\n+println!(\"Item 7 is {}\", v[7]);\n+```\n+\n+then the current thread will [panic] with a message like this:\n+\n+```text\n+thread '<main>' panicked at 'index out of bounds: the len is 3 but the index is 7'\n+```\n+\n+If you want to handle out-of-bounds errors without panicking, you can use\n+methods like [`get`][get] or [`get_mut`][get_mut] that return `None` when\n+given an invalid index:\n+\n+```rust\n+let v = vec![1, 2, 3];\n+match v.get(7) {\n+    Some(x) => println!(\"Item 7 is {}\", x),\n+    None => println!(\"Sorry, this vector is too short.\")\n+}\n+```\n+\n ## Iterating\n \n Once you have a vector, you can iterate through its elements with `for`. There\n@@ -87,3 +114,6 @@ API documentation][vec].\n \n [vec]: ../std/vec/index.html\n [generic]: generics.html\n+[panic]: concurrency.html#panics\n+[get]: http://doc.rust-lang.org/std/vec/struct.Vec.html#method.get\n+[get_mut]: http://doc.rust-lang.org/std/vec/struct.Vec.html#method.get_mut"}]}