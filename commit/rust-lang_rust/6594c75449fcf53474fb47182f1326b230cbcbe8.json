{"sha": "6594c75449fcf53474fb47182f1326b230cbcbe8", "node_id": "C_kwDOAAsO6NoAKDY1OTRjNzU0NDlmY2Y1MzQ3NGZiNDcxODJmMTMyNmIyMzBjYmNiZTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-15T18:35:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-17T21:27:13Z"}, "message": "Move ConstEvaluatable to Clause", "tree": {"sha": "99103f58394cf58ad03248de5379907dc4380285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99103f58394cf58ad03248de5379907dc4380285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6594c75449fcf53474fb47182f1326b230cbcbe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6594c75449fcf53474fb47182f1326b230cbcbe8", "html_url": "https://github.com/rust-lang/rust/commit/6594c75449fcf53474fb47182f1326b230cbcbe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6594c75449fcf53474fb47182f1326b230cbcbe8/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52d3fc93f2194b0646e5447f29e6702b7c71ddae", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d3fc93f2194b0646e5447f29e6702b7c71ddae", "html_url": "https://github.com/rust-lang/rust/commit/52d3fc93f2194b0646e5447f29e6702b7c71ddae"}], "stats": {"total": 109, "additions": 54, "deletions": 55}, "files": [{"sha": "f29ed903c95d754385457c160a4b8975cae57e37", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -1529,14 +1529,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                     ty::Clause::RegionOutlives(_)\n                     | ty::Clause::ConstArgHasType(..)\n-                    | ty::Clause::WellFormed(_) => bug!(),\n+                    | ty::Clause::WellFormed(_)\n+                    | ty::Clause::ConstEvaluatable(_) => bug!(),\n                 },\n                 ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ObjectSafe(_)\n                 | ty::PredicateKind::ClosureKind(_, _, _)\n                 | ty::PredicateKind::Subtype(_)\n                 | ty::PredicateKind::Coerce(_)\n-                | ty::PredicateKind::ConstEvaluatable(_)\n                 | ty::PredicateKind::ConstEquate(_, _)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(_)\n                 | ty::PredicateKind::Ambiguous => bug!(),"}, {"sha": "73a7ba005b33017a67fbed6da79ba886202c5c8c", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -1032,9 +1032,9 @@ fn check_type_defn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'tcx>, all_sized: b\n                     tcx,\n                     cause,\n                     wfcx.param_env,\n-                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n+                    ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(\n                         ty::Const::from_anon_const(tcx, discr_def_id.expect_local()),\n-                    )),\n+                    ))),\n                 ));\n             }\n         }"}, {"sha": "c67f82968f06a91faa63ca75799a7713ae9211b0", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -353,7 +353,7 @@ fn const_evaluatable_predicates_of(\n             if let ty::ConstKind::Unevaluated(_) = ct.kind() {\n                 let span = self.tcx.def_span(c.def_id);\n                 self.preds.insert((\n-                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct))\n+                    ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(ct)))\n                         .to_predicate(self.tcx),\n                     span,\n                 ));"}, {"sha": "201cb94f0b31969115b479dd6d94ff10ec370fcb", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -547,7 +547,7 @@ fn trait_predicate_kind<'tcx>(\n         | ty::PredicateKind::Coerce(_)\n         | ty::PredicateKind::ObjectSafe(_)\n         | ty::PredicateKind::ClosureKind(..)\n-        | ty::PredicateKind::ConstEvaluatable(..)\n+        | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n         | ty::PredicateKind::ConstEquate(..)\n         | ty::PredicateKind::Ambiguous\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,"}, {"sha": "79c56490f3c1a6cb43709f4a9ebf0e2c70420988", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     | ty::PredicateKind::ClosureKind(..)\n                     | ty::PredicateKind::Subtype(..)\n                     | ty::PredicateKind::Coerce(..)\n-                    | ty::PredicateKind::ConstEvaluatable(..)\n+                    | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n                     | ty::PredicateKind::ConstEquate(..)\n                     | ty::PredicateKind::Ambiguous\n                     | ty::PredicateKind::TypeWellFormedFromEnv(..) => (),"}, {"sha": "34f98f4310ee4dec019e7224e96970d784187e2b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -671,7 +671,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ty::PredicateKind::Clause(ty::Clause::WellFormed(..))\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::AliasRelate(..)\n-                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n                 | ty::PredicateKind::ConstEquate(..)\n                 // N.B., this predicate is created by breaking down a\n                 // `ClosureType: FnFoo()` predicate, where"}, {"sha": "2135643cbeb932eb1d1868bd56129a2d3ff9cf27", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(arg, ty)) => {\n                 vec![ty.into(), arg.into()]\n             }\n-            ty::PredicateKind::ConstEvaluatable(e) => vec![e.into()],\n+            ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(e)) => vec![e.into()],\n             _ => return false,\n         };\n "}, {"sha": "91347c01327c3fdc95d9676ca83b5acb2ff46b98", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -842,7 +842,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n-                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n                 | ty::PredicateKind::AliasRelate(..)"}, {"sha": "c1f0b9253a5e8386280d828fd2eb33ccb8f95c39", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -33,7 +33,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n-            | ty::PredicateKind::ConstEvaluatable(..)\n+            | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n             | ty::PredicateKind::ConstEquate(..)\n             | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,"}, {"sha": "5622062ef7ef73c0b3aaac02e96c1f6ceeff000a", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -249,7 +249,7 @@ impl<'tcx, O: Elaboratable<'tcx>> Elaborator<'tcx, O> {\n             ty::PredicateKind::ClosureKind(..) => {\n                 // Nothing to elaborate when waiting for a closure's kind to be inferred.\n             }\n-            ty::PredicateKind::ConstEvaluatable(..) => {\n+            ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..)) => {\n                 // Currently, we do not elaborate const-evaluatable\n                 // predicates.\n             }"}, {"sha": "785adc0b4fb693fa03c9b18474d685ac0fb4e375", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -1611,12 +1611,12 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     AliasRelate(..) |\n                     // Ignore bounds that a user can't type\n                     Clause(Clause::WellFormed(..)) |\n+                    // FIXME(generic_const_exprs): `ConstEvaluatable` can be written\n+                    Clause(Clause::ConstEvaluatable(..)) |\n                     ObjectSafe(..) |\n                     ClosureKind(..) |\n                     Subtype(..) |\n                     Coerce(..) |\n-                    // FIXME(generic_const_exprs): `ConstEvaluatable` can be written\n-                    ConstEvaluatable(..) |\n                     ConstEquate(..) |\n                     Ambiguous |\n                     TypeWellFormedFromEnv(..) => continue,"}, {"sha": "684af1abdf6f671ccaab5e9ab107f27de895fb07", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -277,7 +277,7 @@ impl FlagComputation {\n             ty::PredicateKind::ClosureKind(_def_id, substs, _kind) => {\n                 self.add_substs(substs);\n             }\n-            ty::PredicateKind::ConstEvaluatable(uv) => {\n+            ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(uv)) => {\n                 self.add_const(uv);\n             }\n             ty::PredicateKind::ConstEquate(expected, found) => {"}, {"sha": "e516e843d06c799e85bcdd9d51b5d6bf079f1ca2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -547,7 +547,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::ClosureKind(_, _, _)\n             | PredicateKind::Subtype(_)\n             | PredicateKind::Coerce(_)\n-            | PredicateKind::ConstEvaluatable(_)\n+            | PredicateKind::Clause(Clause::ConstEvaluatable(_))\n             | PredicateKind::ConstEquate(_, _)\n             | PredicateKind::Ambiguous\n             | PredicateKind::TypeWellFormedFromEnv(_) => true,\n@@ -587,6 +587,9 @@ pub enum Clause<'tcx> {\n \n     /// No syntax: `T` well-formed.\n     WellFormed(GenericArg<'tcx>),\n+\n+    /// Constant initializer must evaluate successfully.\n+    ConstEvaluatable(ty::Const<'tcx>),\n }\n \n impl<'tcx> Binder<'tcx, Clause<'tcx>> {\n@@ -638,9 +641,6 @@ pub enum PredicateKind<'tcx> {\n     /// logic.\n     Coerce(CoercePredicate<'tcx>),\n \n-    /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(ty::Const<'tcx>),\n-\n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(Const<'tcx>, Const<'tcx>),\n \n@@ -1328,7 +1328,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::ObjectSafe(..)\n             | PredicateKind::ClosureKind(..)\n             | PredicateKind::Clause(Clause::TypeOutlives(..))\n-            | PredicateKind::ConstEvaluatable(..)\n+            | PredicateKind::Clause(Clause::ConstEvaluatable(..))\n             | PredicateKind::ConstEquate(..)\n             | PredicateKind::Ambiguous\n             | PredicateKind::TypeWellFormedFromEnv(..) => None,\n@@ -1349,7 +1349,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::ObjectSafe(..)\n             | PredicateKind::ClosureKind(..)\n             | PredicateKind::Clause(Clause::TypeOutlives(..))\n-            | PredicateKind::ConstEvaluatable(..)\n+            | PredicateKind::Clause(Clause::ConstEvaluatable(..))\n             | PredicateKind::ConstEquate(..)\n             | PredicateKind::Ambiguous\n             | PredicateKind::TypeWellFormedFromEnv(..) => None,\n@@ -1370,7 +1370,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Clause(Clause::WellFormed(..))\n             | PredicateKind::ObjectSafe(..)\n             | PredicateKind::ClosureKind(..)\n-            | PredicateKind::ConstEvaluatable(..)\n+            | PredicateKind::Clause(Clause::ConstEvaluatable(..))\n             | PredicateKind::ConstEquate(..)\n             | PredicateKind::Ambiguous\n             | PredicateKind::TypeWellFormedFromEnv(..) => None,\n@@ -1384,10 +1384,8 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::AliasRelate(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n-            | PredicateKind::WellFormed(..)\n             | PredicateKind::ObjectSafe(..)\n             | PredicateKind::ClosureKind(..)\n-            | PredicateKind::ConstEvaluatable(..)\n             | PredicateKind::ConstEquate(..)\n             | PredicateKind::Ambiguous\n             | PredicateKind::TypeWellFormedFromEnv(..) => None,"}, {"sha": "4bfed74f7054d3115343b0db63a7eb6cebfdc884", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -2886,7 +2886,7 @@ define_print_and_forward_display! {\n                 print_value_path(closure_def_id, &[]),\n                 write(\"` implements the trait `{}`\", kind)\n             ),\n-            ty::PredicateKind::ConstEvaluatable(ct) => {\n+            ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(ct)) => {\n                 p!(\"the constant `\", print(ct), \"` can be evaluated\")\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => {"}, {"sha": "a4a2fec07ec3a403ed67eff10ec00f2127c546f7", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -180,6 +180,9 @@ impl<'tcx> fmt::Debug for ty::Clause<'tcx> {\n             ty::Clause::TypeOutlives(ref pair) => pair.fmt(f),\n             ty::Clause::Projection(ref pair) => pair.fmt(f),\n             ty::Clause::WellFormed(ref data) => write!(f, \"WellFormed({:?})\", data),\n+            ty::Clause::ConstEvaluatable(ct) => {\n+                write!(f, \"ConstEvaluatable({ct:?})\")\n+            }\n         }\n     }\n }\n@@ -196,9 +199,6 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n             ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n                 write!(f, \"ClosureKind({:?}, {:?}, {:?})\", closure_def_id, closure_substs, kind)\n             }\n-            ty::PredicateKind::ConstEvaluatable(ct) => {\n-                write!(f, \"ConstEvaluatable({ct:?})\")\n-            }\n             ty::PredicateKind::ConstEquate(c1, c2) => write!(f, \"ConstEquate({:?}, {:?})\", c1, c2),\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n                 write!(f, \"TypeWellFormedFromEnv({:?})\", ty)"}, {"sha": "0809919016852b6f2e0a1b4da7356d11c2733a89", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -182,7 +182,7 @@ where\n                 ct.visit_with(self)?;\n                 ty.visit_with(self)\n             }\n-            ty::PredicateKind::ConstEvaluatable(ct) => ct.visit_with(self),\n+            ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(ct)) => ct.visit_with(self),\n             ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => arg.visit_with(self),\n \n             ty::PredicateKind::ObjectSafe(_)"}, {"sha": "8625958ff5a2c4759fedab8e51b4a5c4573b79b5", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -326,7 +326,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                     self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS)\n                 }\n                 // FIXME: implement this predicate :)\n-                ty::PredicateKind::ConstEvaluatable(_) => {\n+                ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(_)) => {\n                     self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }\n                 ty::PredicateKind::ConstEquate(_, _) => {"}, {"sha": "65c8d9c8f697967a60baacf05b0c44a5c4836e0d", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -121,7 +121,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                 ty::PredicateKind::Clause(_)\n                                 | ty::PredicateKind::ObjectSafe(_)\n                                 | ty::PredicateKind::ClosureKind(_, _, _)\n-                                | ty::PredicateKind::ConstEvaluatable(_)\n                                 | ty::PredicateKind::Ambiguous => {\n                                     FulfillmentErrorCode::CodeSelectionError(\n                                         SelectionError::Unimplemented,"}, {"sha": "56fde8cd70cb37fa09e001a09b8f5c082994588b", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -833,7 +833,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n                 // FIXME(generic_const_exprs): you can absolutely add this as a where clauses\n-                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n                 | ty::PredicateKind::Coerce(..) => {}\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"predicate should only exist in the environment: {bound_predicate:?}\")"}, {"sha": "f8789b554b1ad70c89b10b3e571d14876b88654e", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -207,7 +207,7 @@ fn satisfied_from_param_env<'tcx>(\n \n     for pred in param_env.caller_bounds() {\n         match pred.kind().skip_binder() {\n-            ty::PredicateKind::ConstEvaluatable(ce) => {\n+            ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(ce)) => {\n                 let b_ct = tcx.expand_abstract_consts(ce);\n                 let mut v = Visitor { ct, infcx, param_env, single_match };\n                 let _ = b_ct.visit_with(&mut v);"}, {"sha": "398ec28a42638cead2da9708baa048729487f8af", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -1069,7 +1069,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         }\n                     }\n \n-                    ty::PredicateKind::ConstEvaluatable(..) => {\n+                    ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..)) => {\n                         // Errors for `ConstEvaluatable` predicates show up as\n                         // `SelectionError::ConstEvalFailure`,\n                         // not `Unimplemented`.\n@@ -2487,7 +2487,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n \n-            ty::PredicateKind::ConstEvaluatable(data) => {\n+            ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(data)) => {\n                 if predicate.references_error() || self.tainted_by_errors().is_some() {\n                     return;\n                 }\n@@ -3325,7 +3325,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n \n         match obligation.predicate.kind().skip_binder() {\n-            ty::PredicateKind::ConstEvaluatable(ct) => {\n+            ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(ct)) => {\n                 let ty::ConstKind::Unevaluated(uv) = ct.kind() else {\n                     bug!(\"const evaluatable failed for non-unevaluated const `{ct:?}`\");\n                 };"}, {"sha": "6e4bda3df03e720c739b879bfd8b009d53494c90", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -359,7 +359,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(_)\n                 | ty::PredicateKind::Coerce(_)\n-                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n                 | ty::PredicateKind::ConstEquate(..) => {\n                     let pred =\n                         ty::Binder::dummy(infcx.instantiate_binder_with_placeholders(binder));\n@@ -498,7 +498,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                     }\n                 }\n \n-                ty::PredicateKind::ConstEvaluatable(uv) => {\n+                ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(uv)) => {\n                     match const_evaluatable::is_const_evaluatable(\n                         self.selcx.infcx,\n                         uv,"}, {"sha": "8c42df6e012d3ae664f86e402719eb1c3b187028", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -318,7 +318,7 @@ fn predicate_references_self<'tcx>(\n         | ty::PredicateKind::Subtype(..)\n         | ty::PredicateKind::Coerce(..)\n         // FIXME(generic_const_exprs): this can mention `Self`\n-        | ty::PredicateKind::ConstEvaluatable(..)\n+        | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n         | ty::PredicateKind::ConstEquate(..)\n         | ty::PredicateKind::Ambiguous\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n@@ -365,7 +365,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n-        | ty::PredicateKind::ConstEvaluatable(..)\n+        | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n         | ty::PredicateKind::ConstEquate(..)\n         | ty::PredicateKind::AliasRelate(..)\n         | ty::PredicateKind::Ambiguous"}, {"sha": "8761f4fea6c2c7a335c5819a09a55e218e6d08ef", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -130,7 +130,7 @@ pub fn compute_implied_outlives_bounds_inner<'tcx>(\n                 | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n-                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n                 | ty::PredicateKind::AliasRelate(..)"}, {"sha": "ca2ae9b523509a27996bf3f48ce06ceb3f23c9ef", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -862,7 +862,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n \n-                ty::PredicateKind::ConstEvaluatable(uv) => {\n+                ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(uv)) => {\n                     match const_evaluatable::is_const_evaluatable(\n                         self.infcx,\n                         uv,"}, {"sha": "676978fabe4d18a0f5548116c80a753a25e38e08", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -164,7 +164,7 @@ pub fn predicate_obligations<'tcx>(\n             wf.compute(arg);\n         }\n \n-        ty::PredicateKind::ConstEvaluatable(ct) => {\n+        ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(ct)) => {\n             wf.compute(ct.into());\n         }\n \n@@ -521,8 +521,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 let obligations = self.nominal_obligations(uv.def, uv.substs);\n                                 self.out.extend(obligations);\n \n-                                let predicate =\n-                                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct));\n+                                let predicate = ty::Binder::dummy(ty::PredicateKind::Clause(\n+                                    ty::Clause::ConstEvaluatable(ct),\n+                                ));\n                                 let cause = self.cause(traits::WellFormed(None));\n                                 self.out.push(traits::Obligation::with_depth(\n                                     self.tcx(),\n@@ -554,8 +555,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             // the future we may allow directly lowering to `ConstKind::Expr` in which case\n                             // we would not be proving bounds we should.\n \n-                            let predicate =\n-                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct));\n+                            let predicate = ty::Binder::dummy(ty::PredicateKind::Clause(\n+                                ty::Clause::ConstEvaluatable(ct),\n+                            ));\n                             let cause = self.cause(traits::WellFormed(None));\n                             self.out.push(traits::Obligation::with_depth(\n                                 self.tcx(),\n@@ -977,7 +979,7 @@ pub(crate) fn required_region_bounds<'tcx>(\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n-                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n                 | ty::PredicateKind::AliasRelate(..)"}, {"sha": "1d4219bc0c0b1e57e0cfc9aaef456ffc32fa662e", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n-                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n                 | ty::PredicateKind::Ambiguous\n                 | ty::PredicateKind::ConstEquate(..) => bug!(\"unexpected predicate {}\", predicate),\n             };\n@@ -231,7 +231,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n             | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::Coerce(..)\n-            | ty::PredicateKind::ConstEvaluatable(..)\n+            | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n             | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::ConstEquate(..) => {\n                 chalk_ir::GoalData::All(chalk_ir::Goals::empty(interner))\n@@ -680,7 +680,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::Coerce(..)\n-            | ty::PredicateKind::ConstEvaluatable(..)\n+            | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n             | ty::PredicateKind::ConstEquate(..)\n             | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n@@ -816,7 +816,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::Coerce(..)\n-            | ty::PredicateKind::ConstEvaluatable(..)\n+            | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n             | ty::PredicateKind::ConstEquate(..)\n             | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => {"}, {"sha": "7f6d53fe860434299e3fc40840404c9ceef64b85", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -67,7 +67,7 @@ fn not_outlives_predicate(p: ty::Predicate<'_>) -> bool {\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::Subtype(..)\n         | ty::PredicateKind::Coerce(..)\n-        | ty::PredicateKind::ConstEvaluatable(..)\n+        | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n         | ty::PredicateKind::ConstEquate(..)\n         | ty::PredicateKind::Ambiguous\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => true,"}, {"sha": "29c11e1f3359da5e85a1810925d0cd2635dedcc5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -344,7 +344,7 @@ pub(crate) fn clean_predicate<'tcx>(\n             Some(clean_projection_predicate(bound_predicate.rebind(pred), cx))\n         }\n         // FIXME(generic_const_exprs): should this do something?\n-        ty::PredicateKind::ConstEvaluatable(..) => None,\n+        ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..)) => None,\n         ty::PredicateKind::Clause(ty::Clause::WellFormed(..)) => None,\n         ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n "}, {"sha": "860a489494c88be5af1521775b8469cc93a75bf4", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6594c75449fcf53474fb47182f1326b230cbcbe8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6594c75449fcf53474fb47182f1326b230cbcbe8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=6594c75449fcf53474fb47182f1326b230cbcbe8", "patch": "@@ -34,7 +34,7 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n                     | ty::Clause::ConstArgHasType(..),\n                 )\n                 | ty::PredicateKind::Clause(ty::Clause::WellFormed(_))\n-                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstEvaluatable(..))\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateKind::AliasRelate(..) => panic!(\"alias relate predicate on function: {predicate:#?}\"),"}]}