{"sha": "9c569189c8b8b5d635b6704c489a8410c81570a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNTY5MTg5YzhiOGI1ZDYzNWI2NzA0YzQ4OWE4NDEwYzgxNTcwYTA=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2016-01-15T18:04:53Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2016-01-15T18:04:53Z"}, "message": "Addressed comments", "tree": {"sha": "0865c64a5a53d5001b4080e2d7fd162b6ba701d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0865c64a5a53d5001b4080e2d7fd162b6ba701d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c569189c8b8b5d635b6704c489a8410c81570a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c569189c8b8b5d635b6704c489a8410c81570a0", "html_url": "https://github.com/rust-lang/rust/commit/9c569189c8b8b5d635b6704c489a8410c81570a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c569189c8b8b5d635b6704c489a8410c81570a0/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1230a08679e70b8d9a9ce653f8663ff27832db54", "url": "https://api.github.com/repos/rust-lang/rust/commits/1230a08679e70b8d9a9ce653f8663ff27832db54", "html_url": "https://github.com/rust-lang/rust/commit/1230a08679e70b8d9a9ce653f8663ff27832db54"}], "stats": {"total": 135, "additions": 75, "deletions": 60}, "files": [{"sha": "40c08b17680048c335911fad4f9ef59cd9c5085f", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9c569189c8b8b5d635b6704c489a8410c81570a0/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c569189c8b8b5d635b6704c489a8410c81570a0/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=9c569189c8b8b5d635b6704c489a8410c81570a0", "patch": "@@ -414,8 +414,8 @@ impl OpenOptions {\n     /// This option, when true, will indicate that the file should be\n     /// `write`-able if opened.\n     ///\n-    /// If a file already exist, the contents of that file get overwritten, but it is\n-    /// not truncated.\n+    /// If a file already exist, any write calls on the file will overwrite its\n+    /// contents, without truncating it.\n     ///\n     /// # Examples\n     ///\n@@ -436,19 +436,20 @@ impl OpenOptions {\n     /// Note that setting `.write(true).append(true)` has the same effect as\n     /// setting only `.append(true)`.\n     ///\n-    /// For most filesystems the operating system guarantees all writes are atomic:\n-    /// no writes get mangled because another process writes at the same time.\n+    /// For most filesystems the operating system guarantees all writes are\n+    /// atomic: no writes get mangled because another process writes at the same\n+    /// time.\n     ///\n-    /// One maybe obvious note when using append-mode: make sure that all data that\n-    /// belongs together, is written the the file in one operation. This can be done\n-    /// by concatenating strings before passing them to `write()`, or using a buffered\n-    /// writer (with a more than adequately sized buffer) and calling `flush()` when the\n-    /// message is complete.\n+    /// One maybe obvious note when using append-mode: make sure that all data\n+    /// that belongs together, is written the the file in one operation. This\n+    /// can be done by concatenating strings before passing them to `write()`,\n+    /// or using a buffered writer (with a more than adequately sized buffer)\n+    /// and calling `flush()` when the message is complete.\n     ///\n-    /// If a file is opened with both read and append access, beware that after opening\n-    /// and after every write the position for reading may be set at the end of the file.\n-    /// So before writing save the current position (using `seek(SeekFrom::Current(0))`,\n-    /// and restore it before the next read.\n+    /// If a file is opened with both read and append access, beware that after\n+    /// opening and after every write the position for reading may be set at the\n+    /// end of the file. So before writing save the current position (using\n+    /// `seek(SeekFrom::Current(0))`, and restore it before the next read.\n     ///\n     /// # Examples\n     ///\n@@ -507,7 +508,12 @@ impl OpenOptions {\n     /// No file is allowed to exist at the target location, also no (dangling)\n     /// symlink.\n     ///\n-    /// if `.create_new(true)` is set, `.create()` and `.truncate()` are ignored.\n+    /// This option is usefull because it as atomic. Otherwise between checking\n+    /// whether a file exists and creating a new one, the file may have been\n+    /// created by another process (a TOCTOU race condition / attack).\n+    ///\n+    /// If `.create_new(true)` is set, `.create()` and `.truncate()` are\n+    /// ignored.\n     ///\n     /// The file must be opened with write or append access in order to create\n     /// a new file.\n@@ -518,7 +524,9 @@ impl OpenOptions {\n     /// #![feature(expand_open_options)]\n     /// use std::fs::OpenOptions;\n     ///\n-    /// let file = OpenOptions::new().write(true).create_new(true).open(\"foo.txt\");\n+    /// let file = OpenOptions::new().write(true)\n+    ///                              .create_new(true)\n+    ///                              .open(\"foo.txt\");\n     /// ```\n     #[unstable(feature = \"expand_open_options\",\n                reason = \"recently added\",\n@@ -534,7 +542,8 @@ impl OpenOptions {\n     /// This function will return an error under a number of different\n     /// circumstances, to include but not limited to:\n     ///\n-    /// * Opening a file that does not exist without setting `create` or `create_new`.\n+    /// * Opening a file that does not exist without setting `create` or\n+    ///   `create_new`.\n     /// * Attempting to open a file with access that the user lacks\n     ///   permissions for\n     /// * Filesystem-level errors (full disk, etc)"}, {"sha": "46416753c02a7f9d9026de4a93a9fe11ddd33e9d", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c569189c8b8b5d635b6704c489a8410c81570a0/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c569189c8b8b5d635b6704c489a8410c81570a0/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=9c569189c8b8b5d635b6704c489a8410c81570a0", "patch": "@@ -107,10 +107,11 @@ pub trait OpenOptionsExt {\n \n     /// Pass custom flags to the `flags` agument of `open`.\n     ///\n-    /// The bits that define the access mode are masked out with `O_ACCMODE`, to ensure\n-    /// they do not interfere with the access mode set by Rusts options.\n+    /// The bits that define the access mode are masked out with `O_ACCMODE`, to\n+    /// ensure they do not interfere with the access mode set by Rusts options.\n     ///\n     /// Custom flags can only set flags, not remove flags set by Rusts options.\n+    /// This options overwrites any previously set custom flags.\n     ///\n     /// # Examples\n     ///\n@@ -121,7 +122,9 @@ pub trait OpenOptionsExt {\n     ///\n     /// let mut options = OpenOptions::new();\n     /// options.write(true);\n-    /// if cfg!(unix) { options.custom_flags(libc::O_NOFOLLOW); }\n+    /// if cfg!(unix) {\n+    ///     options.custom_flags(libc::O_NOFOLLOW);\n+    /// }\n     /// let file = options.open(\"foo.txt\");\n     /// ```\n     #[unstable(feature = \"expand_open_options\","}, {"sha": "1e5dc972bc5337cf211bfe9be6d5cab602df844e", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9c569189c8b8b5d635b6704c489a8410c81570a0/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c569189c8b8b5d635b6704c489a8410c81570a0/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=9c569189c8b8b5d635b6704c489a8410c81570a0", "patch": "@@ -275,13 +275,15 @@ impl OpenOptions {\n \n     fn get_creation_mode(&self) -> io::Result<c_int> {\n         match (self.write, self.append) {\n-            (true,  false) => {}\n-            (false, false) => if self.truncate || self.create || self.create_new {\n-                                  return Err(Error::from_raw_os_error(libc::EINVAL));\n-                              },\n-            (_,     true)  => if self.truncate && !self.create_new {\n-                                  return Err(Error::from_raw_os_error(libc::EINVAL));\n-                              },\n+            (true, false) => {}\n+            (false, false) =>\n+                if self.truncate || self.create || self.create_new {\n+                    return Err(Error::from_raw_os_error(libc::EINVAL));\n+                },\n+            (_, true) =>\n+                if self.truncate && !self.create_new {\n+                    return Err(Error::from_raw_os_error(libc::EINVAL));\n+                },\n         }\n \n         Ok(match (self.create, self.truncate, self.create_new) {"}, {"sha": "d060c902fba2fe27a38feef827a2fe6f6cb291ca", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9c569189c8b8b5d635b6704c489a8410c81570a0/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c569189c8b8b5d635b6704c489a8410c81570a0/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=9c569189c8b8b5d635b6704c489a8410c81570a0", "patch": "@@ -27,9 +27,9 @@ pub trait OpenOptionsExt {\n     /// with the specified value.\n     ///\n     /// This will override the `read`, `write`, and `append` flags on the\n-    /// `OpenOptions` structure. This method provides fine-grained control\n-    /// over the permissions to read, write and append data, attributes\n-    /// (like hidden and system) and extended attributes.\n+    /// `OpenOptions` structure. This method provides fine-grained control over\n+    /// the permissions to read, write and append data, attributes (like hidden\n+    /// and system) and extended attributes.\n     ///\n     /// # Examples\n     ///\n@@ -38,18 +38,19 @@ pub trait OpenOptionsExt {\n     /// use std::fs::OpenOptions;\n     /// use std::os::windows::fs::OpenOptionsExt;\n     ///\n-    /// // Open without read and write permission, for example if you only need to call `stat()`\n-    /// // on the file\n+    /// // Open without read and write permission, for example if you only need\n+    /// // to call `stat()` on the file\n     /// let file = OpenOptions::new().access_mode(0).open(\"foo.txt\");\n     /// ```\n     fn access_mode(&mut self, access: u32) -> &mut Self;\n \n     /// Overrides the `dwShareMode` argument to the call to `CreateFile` with\n     /// the specified value.\n     ///\n-    /// By default `share_mode` is set to `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`.\n-    /// Specifying less permissions denies others to read from, write to and/or\n-    /// delete the file while it is open.\n+    /// By default `share_mode` is set to\n+    /// `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`. Specifying\n+    /// less permissions denies others to read from, write to and/or delete the\n+    /// file while it is open.\n     ///\n     /// # Examples\n     ///\n@@ -58,17 +59,20 @@ pub trait OpenOptionsExt {\n     /// use std::fs::OpenOptions;\n     /// use std::os::windows::fs::OpenOptionsExt;\n     ///\n+    /// // Do not allow others to read or modify this file while we have it open\n+    /// // for writing\n     /// let file = OpenOptions::new().write(true)\n-    ///                              .share_mode(0) // Do not allow others to read or modify\n+    ///                              .share_mode(0)\n     ///                              .open(\"foo.txt\");\n     /// ```\n     fn share_mode(&mut self, val: u32) -> &mut Self;\n \n-    /// Sets extra flags for the `dwFileFlags` argument to the call to `CreateFile2`\n-    /// (or combines it with `attributes` and `security_qos_flags` to set the\n-    /// `dwFlagsAndAttributes` for `CreateFile`).\n+    /// Sets extra flags for the `dwFileFlags` argument to the call to\n+    /// `CreateFile2` (or combines it with `attributes` and `security_qos_flags`\n+    /// to set the `dwFlagsAndAttributes` for `CreateFile`).\n     ///\n     /// Custom flags can only set flags, not remove flags set by Rusts options.\n+    /// This options overwrites any previously set custom flags.\n     ///\n     /// # Examples\n     ///\n@@ -79,7 +83,9 @@ pub trait OpenOptionsExt {\n     ///\n     /// let mut options = OpenOptions::new();\n     /// options.create(true).write(true);\n-    /// if cfg!(windows) { options.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE); }\n+    /// if cfg!(windows) {\n+    ///     options.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE);\n+    /// }\n     /// let file = options.open(\"foo.txt\");\n     /// ```\n     #[unstable(feature = \"expand_open_options\",\n@@ -89,15 +95,16 @@ pub trait OpenOptionsExt {\n \n     /// Sets the `dwFileAttributes` argument to the call to `CreateFile2` to\n     /// the specified value (or combines it with `custom_flags` and\n-    /// `security_qos_flags` to set the `dwFlagsAndAttributes` for `CreateFile`).\n+    /// `security_qos_flags` to set the `dwFlagsAndAttributes` for\n+    /// `CreateFile`).\n     ///\n-    /// If a _new_ file is created because it does not yet exist and `.create(true)` or\n-    /// `.create_new(true)` are specified, the new file is given the attributes declared\n-    /// with `.attributes()`.\n+    /// If a _new_ file is created because it does not yet exist and\n+    ///`.create(true)` or `.create_new(true)` are specified, the new file is\n+    /// given the attributes declared with `.attributes()`.\n     ///\n     /// If an _existing_ file is opened with `.create(true).truncate(true)`, its\n-    /// existing attributes are preserved and combined with the ones declared with\n-    /// `.attributes()`.\n+    /// existing attributes are preserved and combined with the ones declared\n+    /// with `.attributes()`.\n     ///\n     /// In all other cases the attributes get ignored.\n     ///\n@@ -119,10 +126,6 @@ pub trait OpenOptionsExt {\n     /// the specified value (or combines it with `custom_flags` and `attributes`\n     /// to set the `dwFlagsAndAttributes` for `CreateFile`).\n     fn security_qos_flags(&mut self, flags: u32) -> &mut OpenOptions;\n-\n-    /// Sets the `lpSecurityAttributes` argument to the call to `CreateFile` to\n-    /// the specified value.\n-    fn security_attributes(&mut self, attrs: sys::c::LPSECURITY_ATTRIBUTES) -> &mut OpenOptions;\n }\n \n #[unstable(feature = \"open_options_ext\",\n@@ -148,10 +151,6 @@ impl OpenOptionsExt for OpenOptions {\n     fn security_qos_flags(&mut self, flags: u32) -> &mut OpenOptions {\n         self.as_inner_mut().security_qos_flags(flags); self\n     }\n-\n-    fn security_attributes(&mut self, attrs: sys::c::LPSECURITY_ATTRIBUTES) -> &mut OpenOptions {\n-        self.as_inner_mut().security_attributes(attrs); self\n-    }\n }\n \n /// Extension methods for `fs::Metadata` to access the raw fields contained"}, {"sha": "df0a7bda18d73196a8c50ebcb2d9388e0a1ffa05", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9c569189c8b8b5d635b6704c489a8410c81570a0/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c569189c8b8b5d635b6704c489a8410c81570a0/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=9c569189c8b8b5d635b6704c489a8410c81570a0", "patch": "@@ -209,13 +209,15 @@ impl OpenOptions {\n         const ERROR_INVALID_PARAMETER: i32 = 87;\n \n         match (self.write, self.append) {\n-            (true,  false) => {}\n-            (false, false) => if self.truncate || self.create || self.create_new {\n-                                  return Err(Error::from_raw_os_error(ERROR_INVALID_PARAMETER));\n-                              },\n-            (_,     true)  => if self.truncate && !self.create_new {\n-                                  return Err(Error::from_raw_os_error(ERROR_INVALID_PARAMETER));\n-                              },\n+            (true, false) => {}\n+            (false, false) =>\n+                if self.truncate || self.create || self.create_new {\n+                    return Err(Error::from_raw_os_error(ERROR_INVALID_PARAMETER));\n+                },\n+            (_, true) =>\n+                if self.truncate && !self.create_new {\n+                    return Err(Error::from_raw_os_error(ERROR_INVALID_PARAMETER));\n+                },\n         }\n \n         Ok(match (self.create, self.truncate, self.create_new) {"}]}