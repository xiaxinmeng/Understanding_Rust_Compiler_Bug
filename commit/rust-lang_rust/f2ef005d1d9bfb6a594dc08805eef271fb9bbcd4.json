{"sha": "f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZWYwMDVkMWQ5YmZiNmE1OTRkYzA4ODA1ZWVmMjcxZmI5YmJjZDQ=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-09-11T14:30:55Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-24T12:59:07Z"}, "message": "Resolve to Instance::VtableShim when necessary.", "tree": {"sha": "8b874e8b74c382e56f7e1608902595f8ffd5f26d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b874e8b74c382e56f7e1608902595f8ffd5f26d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4", "html_url": "https://github.com/rust-lang/rust/commit/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "250979c0ae90aa9c309efc9dcdac9e559b72b74d", "url": "https://api.github.com/repos/rust-lang/rust/commits/250979c0ae90aa9c309efc9dcdac9e559b72b74d", "html_url": "https://github.com/rust-lang/rust/commit/250979c0ae90aa9c309efc9dcdac9e559b72b74d"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "153e300a5232ecd6e3b4fbc76a44f543b06d5347", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4", "patch": "@@ -220,3 +220,19 @@ pub fn resolve_and_get_fn(\n         ).unwrap()\n     )\n }\n+\n+pub fn resolve_and_get_fn_for_vtable(\n+    cx: &CodegenCx<'ll, 'tcx>,\n+    def_id: DefId,\n+    substs: &'tcx Substs<'tcx>,\n+) -> &'ll Value {\n+    get_fn(\n+        cx,\n+        ty::Instance::resolve_for_vtable(\n+            cx.tcx,\n+            ty::ParamEnv::reveal_all(),\n+            def_id,\n+            substs\n+        ).unwrap()\n+    )\n+}"}, {"sha": "d38f343d01f34981b5088ff949df6494df9fd924", "filename": "src/librustc_codegen_llvm/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmeth.rs?ref=f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4", "patch": "@@ -89,7 +89,7 @@ pub fn get_vtable(\n     let methods = tcx.vtable_methods(trait_ref.with_self_ty(tcx, ty));\n     let methods = methods.iter().cloned().map(|opt_mth| {\n         opt_mth.map_or(nullptr, |(def_id, substs)| {\n-            callee::resolve_and_get_fn(cx, def_id, substs)\n+            callee::resolve_and_get_fn_for_vtable(cx, def_id, substs)\n         })\n     });\n "}, {"sha": "6062131c9d2179a79b40c3b51bb7aa7d0712116a", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4", "patch": "@@ -915,7 +915,7 @@ fn create_mono_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Walk all methods of the trait, including those of its supertraits\n         let methods = tcx.vtable_methods(poly_trait_ref);\n         let methods = methods.iter().cloned().filter_map(|method| method)\n-            .map(|(def_id, substs)| ty::Instance::resolve(\n+            .map(|(def_id, substs)| ty::Instance::resolve_for_vtable(\n                     tcx,\n                     ty::ParamEnv::reveal_all(),\n                     def_id,"}]}