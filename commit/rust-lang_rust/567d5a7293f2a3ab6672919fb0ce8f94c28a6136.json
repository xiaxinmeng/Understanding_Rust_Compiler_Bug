{"sha": "567d5a7293f2a3ab6672919fb0ce8f94c28a6136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2N2Q1YTcyOTNmMmEzYWI2NjcyOTE5ZmIwY2U4Zjk0YzI4YTYxMzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-12T22:46:05Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-12T22:46:05Z"}, "message": "Improve cmp_owned suggestions (fixes #386)", "tree": {"sha": "568cbc9dd926a10045ed6f9c01132334d1e55808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/568cbc9dd926a10045ed6f9c01132334d1e55808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/567d5a7293f2a3ab6672919fb0ce8f94c28a6136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/567d5a7293f2a3ab6672919fb0ce8f94c28a6136", "html_url": "https://github.com/rust-lang/rust/commit/567d5a7293f2a3ab6672919fb0ce8f94c28a6136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/567d5a7293f2a3ab6672919fb0ce8f94c28a6136/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a04745e16c2ec1a803dc94fcdaf55fca438e73ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04745e16c2ec1a803dc94fcdaf55fca438e73ba", "html_url": "https://github.com/rust-lang/rust/commit/a04745e16c2ec1a803dc94fcdaf55fca438e73ba"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "497bb6692c706aced471f2088663f872d93a2c2a", "filename": "src/misc.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/567d5a7293f2a3ab6672919fb0ce8f94c28a6136/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567d5a7293f2a3ab6672919fb0ce8f94c28a6136/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=567d5a7293f2a3ab6672919fb0ce8f94c28a6136", "patch": "@@ -165,37 +165,49 @@ impl LateLintPass for CmpOwned {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if let ExprBinary(ref cmp, ref left, ref right) = expr.node {\n             if is_comparison_binop(cmp.node) {\n-                check_to_owned(cx, left, right.span);\n-                check_to_owned(cx, right, left.span)\n+                check_to_owned(cx, left, right.span, true, cmp.span);\n+                check_to_owned(cx, right, left.span, false, cmp.span)\n             }\n         }\n     }\n }\n \n-fn check_to_owned(cx: &LateContext, expr: &Expr, other_span: Span) {\n-    match expr.node {\n-        ExprMethodCall(Spanned{node: ref name, ..}, _, ref args) => {\n+fn check_to_owned(cx: &LateContext, expr: &Expr, other_span: Span, left: bool, op: Span) {\n+    let snip = match expr.node {\n+        ExprMethodCall(Spanned{node: ref name, ..}, _, ref args) if args.len() == 1 => {\n             if name.as_str() == \"to_string\" ||\n                 name.as_str() == \"to_owned\" && is_str_arg(cx, args) {\n-                    span_lint(cx, CMP_OWNED, expr.span, &format!(\n-                        \"this creates an owned instance just for comparison. \\\n-                         Consider using `{}.as_slice()` to compare without allocation\",\n-                        snippet(cx, other_span, \"..\")))\n+                    snippet(cx, args[0].span, \"..\")\n+                } else {\n+                    return\n                 }\n         },\n-        ExprCall(ref path, _) => {\n+        ExprCall(ref path, ref v) if v.len() == 1 => {\n             if let &ExprPath(None, ref path) = &path.node {\n                 if match_path(path, &[\"String\", \"from_str\"]) ||\n                     match_path(path, &[\"String\", \"from\"]) {\n-                        span_lint(cx, CMP_OWNED, expr.span, &format!(\n-                            \"this creates an owned instance just for comparison. \\\n-                             Consider using `{}.as_slice()` to compare without allocation\",\n-                            snippet(cx, other_span, \"..\")))\n+                            snippet(cx, v[0].span, \"..\")\n+                    } else {\n+                        return\n                     }\n+            } else {\n+                return\n             }\n         },\n-        _ => ()\n+        _ => return\n+    };\n+    if left {\n+        span_lint(cx, CMP_OWNED, expr.span, &format!(\n+        \"this creates an owned instance just for comparison. Consider using \\\n+        `{} {} {}` to compare without allocation\", snip,\n+        snippet(cx, op, \"==\"), snippet(cx, other_span, \"..\")));\n+    } else {\n+        span_lint(cx, CMP_OWNED, expr.span, &format!(\n+        \"this creates an owned instance just for comparison. Consider using \\\n+        `{} {} {}` to compare without allocation\",\n+        snippet(cx, other_span, \"..\"), snippet(cx, op, \"==\"),  snip));\n     }\n+\n }\n \n fn is_str_arg(cx: &LateContext, args: &[P<Expr>]) -> bool {"}, {"sha": "afca83e1d32f8c1ac3f7e1099bf010621cf6db23", "filename": "tests/compile-fail/cmp_owned.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/567d5a7293f2a3ab6672919fb0ce8f94c28a6136/tests%2Fcompile-fail%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567d5a7293f2a3ab6672919fb0ce8f94c28a6136/tests%2Fcompile-fail%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_owned.rs?ref=567d5a7293f2a3ab6672919fb0ce8f94c28a6136", "patch": "@@ -7,7 +7,11 @@ fn main() {\n \n     #[allow(str_to_string)]\n     fn with_to_string(x : &str) {\n-        x != \"foo\".to_string(); //~ERROR this creates an owned instance\n+        x != \"foo\".to_string();\n+        //~^ ERROR this creates an owned instance just for comparison. Consider using `x != \"foo\"` to compare without allocation\n+\n+        \"foo\".to_string() != x;\n+        //~^ ERROR this creates an owned instance just for comparison. Consider using `\"foo\" != x` to compare without allocation\n     }\n     with_to_string(x);\n "}]}