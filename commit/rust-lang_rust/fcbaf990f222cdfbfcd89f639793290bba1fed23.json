{"sha": "fcbaf990f222cdfbfcd89f639793290bba1fed23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYmFmOTkwZjIyMmNkZmJmY2Q4OWY2Mzk3OTMyOTBiYmExZmVkMjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-26T09:37:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-26T09:37:23Z"}, "message": "check `Pointer::to_int` for non-integer pointers", "tree": {"sha": "095427cd7bbe3850ce8f508c14155a49f5a80ea0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/095427cd7bbe3850ce8f508c14155a49f5a80ea0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcbaf990f222cdfbfcd89f639793290bba1fed23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX6OxTAAoJEFbW7qD8Z6xG0zkP/Ag774paSc4ajN9715vuPdjL\nmzOD/6lC+HU4R4TsPWo6q4+yH3X8KrbZgKVC7aNg9rYEuGHtkDzhTgyk0Y6yUM/Z\n4R5Jr/q+zYPndM29Hl16f8Ugv2LGYupHFCCDZ05EA8mYt3yZ3jWab7nqLjtaktX2\nf2I1zM4W5u+gEJrKxVbs+K7dYolScvDCpLlQSrRLDiDecGr1Wr/thuehmNbzEUJY\nhBTZ4BAdcEu+es+gcA9Dzvxq35JbbWHoXe08zsC9QplEI3eaezuCITkYxrBUbG6s\nzu2UGtX72eWvrDYMCoA2DdXPwn6wxNMRvEjpPt7/Ve/JRE25IUqtKbOUhScSeFnj\ntC4GkMLMxKclInJ2P1zSL5QjTo4MrhC2WkZ1kxLWUw1Q+Xh86KpkaSGPW5VJ1IVk\nNErT5c9dulJis5aAxq9gBpN25SBMK19r+Odz6K362V7g0o/YXcGTmmhYKOTZI+cz\nMuTrUA+Zsiya3MrdIJLqN4pnyl4ZzB5H9C4aVD3S+Rsmzm5xjBEcPH9bDugWLCuU\nl6CaL8018ormyVE9j3eYaDWb77r0aHxxqjZjjKykXr7S+j6uU55pRcJg955+KhDl\nDXfGgpQ0rONCvUpCIymsrYIv8+8GtkRBDbpNslL4z2XfXT8muz0VizeU/6Ye5pPN\nuoB6IWcCsnPf2uZlS/XL\n=Y50p\n-----END PGP SIGNATURE-----", "payload": "tree 095427cd7bbe3850ce8f508c14155a49f5a80ea0\nparent c874290054bee94b5564127f66cf5d55b34dab2a\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474882643 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474882643 +0200\n\ncheck `Pointer::to_int` for non-integer pointers"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbaf990f222cdfbfcd89f639793290bba1fed23", "html_url": "https://github.com/rust-lang/rust/commit/fcbaf990f222cdfbfcd89f639793290bba1fed23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcbaf990f222cdfbfcd89f639793290bba1fed23/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c874290054bee94b5564127f66cf5d55b34dab2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c874290054bee94b5564127f66cf5d55b34dab2a", "html_url": "https://github.com/rust-lang/rust/commit/c874290054bee94b5564127f66cf5d55b34dab2a"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "a924d59782ad45be42e5adf04ab184ade4d60b80", "filename": "src/interpreter/cast.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fcbaf990f222cdfbfcd89f639793290bba1fed23/src%2Finterpreter%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbaf990f222cdfbfcd89f639793290bba1fed23/src%2Finterpreter%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fcast.rs?ref=fcbaf990f222cdfbfcd89f639793290bba1fed23", "patch": "@@ -8,7 +8,7 @@ use primval::PrimVal;\n use memory::Pointer;\n \n use rustc::ty::Ty;\n-use syntax::ast;\n+use syntax::ast::{self, IntTy, UintTy};\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(super) fn cast_primval(&self, val: PrimVal, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n@@ -38,6 +38,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ty::TyRef(..) |\n             ty::TyRawPtr(_) => Ok(Ptr(ptr)),\n             ty::TyFnPtr(_) => Ok(FnPtr(ptr)),\n+            // FIXME: can truncation happen here?\n+            ty::TyInt(IntTy::I8) => Ok(I8(ptr.to_int()? as i8)),\n+            ty::TyInt(IntTy::I16) => Ok(I16(ptr.to_int()? as i16)),\n+            ty::TyInt(IntTy::I32) => Ok(I32(ptr.to_int()? as i32)),\n+            ty::TyInt(IntTy::I64) => Ok(I64(ptr.to_int()? as i64)),\n+            ty::TyUint(UintTy::U8) => Ok(U8(ptr.to_int()? as u8)),\n+            ty::TyUint(UintTy::U16) => Ok(U16(ptr.to_int()? as u16)),\n+            ty::TyUint(UintTy::U32) => Ok(U32(ptr.to_int()? as u32)),\n+            ty::TyUint(UintTy::U64) => Ok(U64(ptr.to_int()? as u64)),\n             _ => Err(EvalError::Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n         }\n     }"}, {"sha": "bdd9cd2fa0f4fa25ca4ac62191194223f6078c14", "filename": "src/memory.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcbaf990f222cdfbfcd89f639793290bba1fed23/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbaf990f222cdfbfcd89f639793290bba1fed23/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=fcbaf990f222cdfbfcd89f639793290bba1fed23", "patch": "@@ -55,8 +55,12 @@ impl Pointer {\n     pub fn points_to_zst(&self) -> bool {\n         self.alloc_id == ZST_ALLOC_ID\n     }\n-    pub fn to_int(&self) -> usize {\n-        self.offset\n+    pub fn to_int<'tcx>(&self) -> EvalResult<'tcx, usize> {\n+        if self.points_to_zst() {\n+            Ok(self.offset)\n+        } else {\n+            Err(EvalError::ReadPointerAsBytes)\n+        }\n     }\n     pub fn from_int(i: usize) -> Self {\n         Pointer {"}, {"sha": "7d88e2ee7b14fb1222ea1741682c75eee42ad4bb", "filename": "src/primval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcbaf990f222cdfbfcd89f639793290bba1fed23/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbaf990f222cdfbfcd89f639793290bba1fed23/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=fcbaf990f222cdfbfcd89f639793290bba1fed23", "patch": "@@ -46,7 +46,7 @@ impl PrimVal {\n             U16(u) => u as u64,\n             U32(u) => u as u64,\n             U64(u) => u,\n-            Ptr(ptr) => ptr.to_int() as u64,\n+            Ptr(ptr) => ptr.to_int().expect(\"non abstract ptr\") as u64,\n             _ => bug!(\"{}\", error_msg),\n         }\n     }\n@@ -58,7 +58,7 @@ impl PrimVal {\n             I16(i) => i as i64,\n             I32(i) => i as i64,\n             I64(i) => i,\n-            Ptr(ptr) => ptr.to_int() as i64,\n+            Ptr(ptr) => ptr.to_int().expect(\"non abstract ptr\") as i64,\n             _ => bug!(\"{}\", error_msg),\n         }\n     }"}]}