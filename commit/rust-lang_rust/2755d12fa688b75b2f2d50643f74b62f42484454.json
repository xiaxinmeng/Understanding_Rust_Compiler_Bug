{"sha": "2755d12fa688b75b2f2d50643f74b62f42484454", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NTVkMTJmYTY4OGI3NWIyZjJkNTA2NDNmNzRiNjJmNDI0ODQ0NTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T13:39:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T13:39:46Z"}, "message": "Auto merge of #3744 - phansch:fix3144, r=oli-obk\n\nFix ICE in needless_pass_by_value lint\n\nIf I understand it correctly, we were first creating a type with a\n`RegionKind::ReErased` region and then deleted it again in\n`util::implements_trait` with:\n\n    cx.tcx.erase_regions(&ty);\n\ncausing the type query to fail.\n\nIt looks like using `ReEmpty` works around that deletion.\n\nFixes #3144", "tree": {"sha": "4052ea35146c2a9e63bf413e48c2bc8c202ddc64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4052ea35146c2a9e63bf413e48c2bc8c202ddc64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2755d12fa688b75b2f2d50643f74b62f42484454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2755d12fa688b75b2f2d50643f74b62f42484454", "html_url": "https://github.com/rust-lang/rust/commit/2755d12fa688b75b2f2d50643f74b62f42484454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2755d12fa688b75b2f2d50643f74b62f42484454/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af43950143b1672efd9fd5681d3fb52d0108f716", "url": "https://api.github.com/repos/rust-lang/rust/commits/af43950143b1672efd9fd5681d3fb52d0108f716", "html_url": "https://github.com/rust-lang/rust/commit/af43950143b1672efd9fd5681d3fb52d0108f716"}, {"sha": "f3cd81980db4fc74df110ec540da8e5c0c363872", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3cd81980db4fc74df110ec540da8e5c0c363872", "html_url": "https://github.com/rust-lang/rust/commit/f3cd81980db4fc74df110ec540da8e5c0c363872"}], "stats": {"total": 67, "additions": 39, "deletions": 28}, "files": [{"sha": "c7af5fa79f3086941941d6096716f236e7240f87", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2755d12fa688b75b2f2d50643f74b62f42484454/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2755d12fa688b75b2f2d50643f74b62f42484454/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=2755d12fa688b75b2f2d50643f74b62f42484454", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                 .skip(1)\n                                 .cloned()\n                                 .collect::<Vec<_>>();\n-                            implements_trait(cx, cx.tcx.mk_imm_ref(&RegionKind::ReErased, ty), t.def_id(), ty_params)\n+                            implements_trait(cx, cx.tcx.mk_imm_ref(&RegionKind::ReEmpty, ty), t.def_id(), ty_params)\n                         }),\n                 )\n             };"}, {"sha": "0d093adf8cd3103c0cb1a7b8db26755340744443", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2755d12fa688b75b2f2d50643f74b62f42484454/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2755d12fa688b75b2f2d50643f74b62f42484454/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=2755d12fa688b75b2f2d50643f74b62f42484454", "patch": "@@ -8,6 +8,7 @@\n )]\n \n use std::borrow::Borrow;\n+use std::collections::HashSet;\n use std::convert::AsRef;\n \n // `v` should be warned\n@@ -145,4 +146,14 @@ trait Club<'a, A> {}\n impl<T> Club<'static, T> for T {}\n fn more_fun(_item: impl Club<'static, i32>) {}\n \n-fn main() {}\n+fn is_sync<T>(_: T)\n+where\n+    T: Sync,\n+{\n+}\n+\n+fn main() {\n+    // This should not cause an ICE either\n+    // https://github.com/rust-lang/rust-clippy/issues/3144\n+    is_sync(HashSet::<usize>::new());\n+}"}, {"sha": "ad0e6461c22feb80c92740633789476f30c89c53", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2755d12fa688b75b2f2d50643f74b62f42484454/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2755d12fa688b75b2f2d50643f74b62f42484454/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=2755d12fa688b75b2f2d50643f74b62f42484454", "patch": "@@ -1,31 +1,31 @@\n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:15:23\n+  --> $DIR/needless_pass_by_value.rs:16:23\n    |\n LL | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n    |                       ^^^^^^ help: consider changing the type to: `&[T]`\n    |\n    = note: `-D clippy::needless-pass-by-value` implied by `-D warnings`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:29:11\n+  --> $DIR/needless_pass_by_value.rs:30:11\n    |\n LL | fn bar(x: String, y: Wrapper) {\n    |           ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:29:22\n+  --> $DIR/needless_pass_by_value.rs:30:22\n    |\n LL | fn bar(x: String, y: Wrapper) {\n    |                      ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:35:71\n+  --> $DIR/needless_pass_by_value.rs:36:71\n    |\n LL | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n    |                                                                       ^ help: consider taking a reference instead: `&V`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:47:18\n+  --> $DIR/needless_pass_by_value.rs:48:18\n    |\n LL | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,13 +36,13 @@ LL |     match *x {\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:60:24\n+  --> $DIR/needless_pass_by_value.rs:61:24\n    |\n LL | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                        ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:60:36\n+  --> $DIR/needless_pass_by_value.rs:61:36\n    |\n LL | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                                    ^^^^^^^\n@@ -55,19 +55,19 @@ LL |     let Wrapper(_) = *y; // still not moved\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:76:49\n+  --> $DIR/needless_pass_by_value.rs:77:49\n    |\n LL | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n    |                                                 ^ help: consider taking a reference instead: `&T`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:78:18\n+  --> $DIR/needless_pass_by_value.rs:79:18\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                  ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:78:29\n+  --> $DIR/needless_pass_by_value.rs:79:29\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^^^\n@@ -81,13 +81,13 @@ LL |     let _ = t.to_string();\n    |             ^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:78:40\n+  --> $DIR/needless_pass_by_value.rs:79:40\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                        ^^^^^^^^ help: consider taking a reference instead: `&Vec<i32>`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:78:53\n+  --> $DIR/needless_pass_by_value.rs:79:53\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                                     ^^^^^^^^\n@@ -101,61 +101,61 @@ LL |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:91:12\n+  --> $DIR/needless_pass_by_value.rs:92:12\n    |\n LL |         s: String,\n    |            ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:92:12\n+  --> $DIR/needless_pass_by_value.rs:93:12\n    |\n LL |         t: String,\n    |            ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:101:23\n+  --> $DIR/needless_pass_by_value.rs:102:23\n    |\n LL |     fn baz(&self, _u: U, _s: Self) {}\n    |                       ^ help: consider taking a reference instead: `&U`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:101:30\n+  --> $DIR/needless_pass_by_value.rs:102:30\n    |\n LL |     fn baz(&self, _u: U, _s: Self) {}\n    |                              ^^^^ help: consider taking a reference instead: `&Self`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:123:24\n+  --> $DIR/needless_pass_by_value.rs:124:24\n    |\n LL | fn bar_copy(x: u32, y: CopyWrapper) {\n    |                        ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:121:1\n+  --> $DIR/needless_pass_by_value.rs:122:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:129:29\n+  --> $DIR/needless_pass_by_value.rs:130:29\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:121:1\n+  --> $DIR/needless_pass_by_value.rs:122:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:129:45\n+  --> $DIR/needless_pass_by_value.rs:130:45\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                                             ^^^^^^^^^^^\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:121:1\n+  --> $DIR/needless_pass_by_value.rs:122:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -168,13 +168,13 @@ LL |     let CopyWrapper(_) = *y; // still not moved\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:129:61\n+  --> $DIR/needless_pass_by_value.rs:130:61\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                                                             ^^^^^^^^^^^\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:121:1\n+  --> $DIR/needless_pass_by_value.rs:122:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -185,13 +185,13 @@ LL |     let CopyWrapper(s) = *z; // moved\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:141:40\n+  --> $DIR/needless_pass_by_value.rs:142:40\n    |\n LL | fn some_fun<'b, S: Bar<'b, ()>>(_item: S) {}\n    |                                        ^ help: consider taking a reference instead: `&S`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:146:20\n+  --> $DIR/needless_pass_by_value.rs:147:20\n    |\n LL | fn more_fun(_item: impl Club<'static, i32>) {}\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ help: consider taking a reference instead: `&impl Club<'static, i32>`"}]}