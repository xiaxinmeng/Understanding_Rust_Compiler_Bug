{"sha": "c4ad273fe168cba92a298e35826b37f7177ce599", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YWQyNzNmZTE2OGNiYTkyYTI5OGUzNTgyNmIzN2Y3MTc3Y2U1OTk=", "commit": {"author": {"name": "Ian Wahbe", "email": "ian@wahbe.com", "date": "2021-07-01T19:08:01Z"}, "committer": {"name": "Ian Wahbe", "email": "ian@wahbe.com", "date": "2021-07-01T19:08:01Z"}, "message": "Implement changes suggested by @Amanieu", "tree": {"sha": "e73a6eed41e55a737881944a07d1e61d83459955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e73a6eed41e55a737881944a07d1e61d83459955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4ad273fe168cba92a298e35826b37f7177ce599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4ad273fe168cba92a298e35826b37f7177ce599", "html_url": "https://github.com/rust-lang/rust/commit/c4ad273fe168cba92a298e35826b37f7177ce599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4ad273fe168cba92a298e35826b37f7177ce599/comments", "author": {"login": "iwahbe", "id": 22222529, "node_id": "MDQ6VXNlcjIyMjIyNTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22222529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iwahbe", "html_url": "https://github.com/iwahbe", "followers_url": "https://api.github.com/users/iwahbe/followers", "following_url": "https://api.github.com/users/iwahbe/following{/other_user}", "gists_url": "https://api.github.com/users/iwahbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/iwahbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iwahbe/subscriptions", "organizations_url": "https://api.github.com/users/iwahbe/orgs", "repos_url": "https://api.github.com/users/iwahbe/repos", "events_url": "https://api.github.com/users/iwahbe/events{/privacy}", "received_events_url": "https://api.github.com/users/iwahbe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iwahbe", "id": 22222529, "node_id": "MDQ6VXNlcjIyMjIyNTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22222529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iwahbe", "html_url": "https://github.com/iwahbe", "followers_url": "https://api.github.com/users/iwahbe/followers", "following_url": "https://api.github.com/users/iwahbe/following{/other_user}", "gists_url": "https://api.github.com/users/iwahbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/iwahbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iwahbe/subscriptions", "organizations_url": "https://api.github.com/users/iwahbe/orgs", "repos_url": "https://api.github.com/users/iwahbe/repos", "events_url": "https://api.github.com/users/iwahbe/events{/privacy}", "received_events_url": "https://api.github.com/users/iwahbe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e77acf7d27f7690f6cdb18d2ce68a37cbabd884c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77acf7d27f7690f6cdb18d2ce68a37cbabd884c", "html_url": "https://github.com/rust-lang/rust/commit/e77acf7d27f7690f6cdb18d2ce68a37cbabd884c"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "ea216786ea2d45a6a815565f92baa662e408b33d", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c4ad273fe168cba92a298e35826b37f7177ce599/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ad273fe168cba92a298e35826b37f7177ce599/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=c4ad273fe168cba92a298e35826b37f7177ce599", "patch": "@@ -1247,14 +1247,14 @@ impl<'a, T> Cursor<'a, T> {\n     /// Provides a reference to the front element of the cursor's parent list,\n     /// or None if the list is empty.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n-    pub fn front(&self) -> Option<&T> {\n+    pub fn front(&self) -> Option<&'a T> {\n         self.list.front()\n     }\n \n     /// Provides a reference to the back element of the cursor's parent list,\n     /// or None if the list is empty.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n-    pub fn back(&self) -> Option<&T> {\n+    pub fn back(&self) -> Option<&'a T> {\n         self.list.back()\n     }\n }\n@@ -1546,6 +1546,11 @@ impl<'a, T> CursorMut<'a, T> {\n         // memory of other nodes. This ensures that `self.current` remains\n         // valid.\n         self.list.push_back(elt);\n+        if self.current().is_none() {\n+            // The index of \"ghost\" is the length of the list, so we just need\n+            // to increment self.index to reflect the new length of the list.\n+            self.index += 1;\n+        }\n     }\n \n     /// Removes the first element from the cursor's parent list and returns it,\n@@ -1565,21 +1570,20 @@ impl<'a, T> CursorMut<'a, T> {\n             // We can't point to the node that we pop. Copying the behavior of\n             // `remove_current`, we move on the the next node in the sequence.\n             // If the list is of length 1 then we end pointing to the \"ghost\"\n-            // node, which is expected.\n+            // node at index 0, which is expected.\n             if self.list.head == self.current {\n                 self.move_next();\n+            } else {\n+                self.index -= 1;\n             }\n-            // We always need to change the index since `head` comes before any\n-            // other element.\n-            self.index.checked_sub(1).unwrap_or(0);\n             self.list.pop_front()\n         }\n     }\n \n     /// Removes the last element from the cursor's parent list and returns it,\n     /// or None if the list is empty. The element the cursor points to remains\n     /// unchanged, unless it was pointing to the back element. In that case, it\n-    /// points to the new back element.\n+    /// points to the \"ghost\" element.\n     ///\n     /// This operation should compute in O(1) time.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n@@ -1588,10 +1592,13 @@ impl<'a, T> CursorMut<'a, T> {\n             None\n         } else {\n             if self.list.tail == self.current {\n-                self.move_prev()\n+                // The index now reflects the length of the list. It was the\n+                // length of the list minus 1, but now the list is 1 smaller. No\n+                // change is needed for `index`.\n+                self.current = None;\n+            } else if self.current.is_none() {\n+                self.index = self.list.len - 1;\n             }\n-            // We don't need to change the index since `current` points to a\n-            // node before `tail`.\n             self.list.pop_back()\n         }\n     }"}, {"sha": "5a65ed7a962e9eabdca357380e8d7da19bfbc872", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4ad273fe168cba92a298e35826b37f7177ce599/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ad273fe168cba92a298e35826b37f7177ce599/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=c4ad273fe168cba92a298e35826b37f7177ce599", "patch": "@@ -442,6 +442,8 @@ fn test_cursor_push_front_back() {\n     assert_eq!(c.index(), Some(1));\n     c.push_back(11);\n     drop(c);\n+    let p = ll.cursor_back().front().unwrap();\n+    assert_eq!(p, &0);\n     assert_eq!(ll, (0..12).collect());\n     check_links(&ll);\n }\n@@ -459,7 +461,17 @@ fn test_cursor_pop_front_back() {\n     let c = c.as_cursor();\n     assert_eq!(c.front(), Some(&2));\n     assert_eq!(c.back(), Some(&5));\n+    assert_eq!(c.index(), Some(1));\n     drop(c);\n     assert_eq!(ll, (2..6).collect());\n     check_links(&ll);\n+    let mut c = ll.cursor_back_mut();\n+    assert_eq!(c.current(), Some(&mut 5));\n+    assert_eq!(c.index, 3);\n+    assert_eq!(c.pop_back(), Some(5));\n+    assert_eq!(c.current(), None);\n+    assert_eq!(c.index, 3);\n+    assert_eq!(c.pop_back(), Some(4));\n+    assert_eq!(c.current(), None);\n+    assert_eq!(c.index, 2);\n }"}]}