{"sha": "ee67e14034438972c5aae46f8773fe69f20f14aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNjdlMTQwMzQ0Mzg5NzJjNWFhZTQ2Zjg3NzNmZTY5ZjIwZjE0YWE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-23T09:57:28Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-23T10:37:07Z"}, "message": "Stabilize the copy_closures and clone_closures features\n\nIn addition to the `Fn*` family of traits, closures now implement `Copy` (and similarly `Clone`) if all of the captures do.", "tree": {"sha": "2e06620d77b1082d1a9098f4a0530cf2c758decd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e06620d77b1082d1a9098f4a0530cf2c758decd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee67e14034438972c5aae46f8773fe69f20f14aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee67e14034438972c5aae46f8773fe69f20f14aa", "html_url": "https://github.com/rust-lang/rust/commit/ee67e14034438972c5aae46f8773fe69f20f14aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee67e14034438972c5aae46f8773fe69f20f14aa/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52f7e8836cc2e6c0edfaf402ee40ca724a8c0989", "url": "https://api.github.com/repos/rust-lang/rust/commits/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989", "html_url": "https://github.com/rust-lang/rust/commit/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989"}], "stats": {"total": 184, "additions": 15, "deletions": 169}, "files": [{"sha": "5421d2add2594b228c0ed08211b267fe8b74d241", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -616,8 +616,6 @@ define_dep_nodes!( <'tcx>\n     [input] MissingExternCrateItem(CrateNum),\n     [input] UsedCrateSource(CrateNum),\n     [input] PostorderCnums,\n-    [] HasCloneClosures(CrateNum),\n-    [] HasCopyClosures(CrateNum),\n \n     // This query is not expected to have inputs -- as a result, it's\n     // not a good candidate for \"replay\" because it's essentially a"}, {"sha": "a759ce59cb644b553067ced78165198284ca2662", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -45,7 +45,7 @@\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]\n #![feature(const_fn)]\n-#![feature(copy_closures, clone_closures)]\n+#![cfg_attr(stage0, feature(copy_closures, clone_closures))]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![feature(dyn_trait)]"}, {"sha": "f414374d0083a08be63d714ff4bdb73a4df9f495", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -2086,12 +2086,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n             ty::TyClosure(def_id, substs) => {\n                 let trait_id = obligation.predicate.def_id();\n-                let copy_closures =\n-                    Some(trait_id) == self.tcx().lang_items().copy_trait() &&\n-                    self.tcx().has_copy_closures(def_id.krate);\n-                let clone_closures =\n-                    Some(trait_id) == self.tcx().lang_items().clone_trait() &&\n-                    self.tcx().has_clone_closures(def_id.krate);\n+                let copy_closures = Some(trait_id) == self.tcx().lang_items().copy_trait();\n+                let clone_closures = Some(trait_id) == self.tcx().lang_items().clone_trait();\n \n                 if copy_closures || clone_closures {\n                     Where(ty::Binder(substs.upvar_tys(def_id, self.tcx()).collect()))"}, {"sha": "f56d866cba5fbef8c6dc88a96671f6ffc8340bf8", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -2520,14 +2520,6 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.output_filenames.clone()\n     };\n-    providers.has_copy_closures = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.features().copy_closures\n-    };\n-    providers.has_clone_closures = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.features().clone_closures\n-    };\n     providers.features_query = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         Lrc::new(tcx.sess.features_untracked().clone())"}, {"sha": "400bc6ba41518534c293f465b566a794da1857bb", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -604,24 +604,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::output_filenames<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::has_clone_closures<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"seeing if the crate has enabled `Clone` closures\")\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::vtable_methods<'tcx> {\n     fn describe(tcx: TyCtxt, key: ty::PolyTraitRef<'tcx> ) -> String {\n         format!(\"finding all methods for trait {}\", tcx.item_path_str(key.def_id()))\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::has_copy_closures<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"seeing if the crate has enabled `Copy` closures\")\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::features_query<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up enabled feature gates\")"}, {"sha": "95e00418658bf4f449e92e6a3aa5cae51f1a1545", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -382,9 +382,6 @@ define_maps! { <'tcx>\n     [] fn output_filenames: output_filenames_node(CrateNum)\n         -> Arc<OutputFilenames>,\n \n-    [] fn has_copy_closures: HasCopyClosures(CrateNum) -> bool,\n-    [] fn has_clone_closures: HasCloneClosures(CrateNum) -> bool,\n-\n     // Erases regions from `ty` to yield a new type.\n     // Normally you would just use `tcx.erase_regions(&value)`,\n     // however, which uses this query as a kind of cache."}, {"sha": "d9caf94ed7f60047f66abe8bf6bcd33fd533511f", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -917,8 +917,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         }\n         DepKind::UsedCrateSource => { force!(used_crate_source, krate!()); }\n         DepKind::PostorderCnums => { force!(postorder_cnums, LOCAL_CRATE); }\n-        DepKind::HasCloneClosures => { force!(has_clone_closures, krate!()); }\n-        DepKind::HasCopyClosures => { force!(has_copy_closures, krate!()); }\n \n         DepKind::Freevars => { force!(freevars, def_id!()); }\n         DepKind::MaybeUnusedTraitImport => {"}, {"sha": "b9623f2854055b7a82a730756245d043de0fa3e9", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -228,16 +228,6 @@ impl CrateMetadata {\n         attr::contains_name(&attrs, \"no_builtins\")\n     }\n \n-     pub fn has_copy_closures(&self, sess: &Session) -> bool {\n-        let attrs = self.get_item_attrs(CRATE_DEF_INDEX, sess);\n-        attr::contains_feature_attr(&attrs, \"copy_closures\")\n-    }\n-\n-    pub fn has_clone_closures(&self, sess: &Session) -> bool {\n-        let attrs = self.get_item_attrs(CRATE_DEF_INDEX, sess);\n-        attr::contains_feature_attr(&attrs, \"clone_closures\")\n-    }\n-\n     pub fn panic_strategy(&self) -> PanicStrategy {\n         self.root.panic_strategy.clone()\n     }"}, {"sha": "f02a1831db223e5425ef2006391a9c4877e672ea", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -256,9 +256,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n     used_crate_source => { Lrc::new(cdata.source.clone()) }\n \n-    has_copy_closures => { cdata.has_copy_closures(tcx.sess) }\n-    has_clone_closures => { cdata.has_clone_closures(tcx.sess) }\n-\n     exported_symbols => {\n         let cnum = cdata.cnum;\n         assert!(cnum != LOCAL_CRATE);"}, {"sha": "8a1d87fe1ea78bd3d6025d1438deb448f82ff75c", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -76,7 +76,7 @@ This API is completely unstable and subject to change.\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]\n-#![feature(copy_closures, clone_closures)]\n+#![cfg_attr(stage0, feature(copy_closures, clone_closures))]\n #![feature(crate_visibility_modifier)]\n #![feature(from_ref)]\n #![feature(match_default_bindings)]"}, {"sha": "73d088fb5854135dd6fbcf3d5f8b5baba2838150", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -391,10 +391,6 @@ declare_features! (\n     // Future-proofing enums/structs with #[non_exhaustive] attribute (RFC 2008)\n     (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n-    // Copy/Clone closures (RFC 2132)\n-    (active, clone_closures, \"1.22.0\", Some(44490), None),\n-    (active, copy_closures, \"1.22.0\", Some(44490), None),\n-\n     // allow `'_` placeholder lifetimes\n     (active, underscore_lifetimes, \"1.22.0\", Some(44524), None),\n \n@@ -556,6 +552,9 @@ declare_features! (\n     (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n     // allow `..=` in patterns (RFC 1192)\n     (accepted, dotdoteq_in_patterns, \"1.26.0\", Some(28237), None),\n+    // Copy/Clone closures (RFC 2132)\n+    (accepted, clone_closures, \"1.26.0\", Some(44490), None),\n+    (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1867,8 +1866,6 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n struct FeatureChecker {\n     proc_macro: Option<Span>,\n     custom_attribute: Option<Span>,\n-    copy_closures: Option<Span>,\n-    clone_closures: Option<Span>,\n }\n \n impl FeatureChecker {\n@@ -1884,14 +1881,6 @@ impl FeatureChecker {\n         if features.custom_attribute {\n             self.custom_attribute = self.custom_attribute.or(Some(span));\n         }\n-\n-        if features.copy_closures {\n-            self.copy_closures = self.copy_closures.or(Some(span));\n-        }\n-\n-        if features.clone_closures {\n-            self.clone_closures = self.clone_closures.or(Some(span));\n-        }\n     }\n \n     fn check(self, handler: &Handler) {\n@@ -1903,15 +1892,6 @@ impl FeatureChecker {\n \n             FatalError.raise();\n         }\n-\n-        if let (Some(span), None) = (self.copy_closures, self.clone_closures) {\n-            handler.struct_span_err(span, \"`#![feature(copy_closures)]` can only be used with \\\n-                                           `#![feature(clone_closures)]`\")\n-                  .span_note(span, \"`#![feature(copy_closures)]` declared here\")\n-                  .emit();\n-\n-            FatalError.raise();\n-        }\n     }\n }\n "}, {"sha": "967cb3610ca5f261081c155237a9f284c79949df", "filename": "src/test/compile-fail/not-clone-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Fcompile-fail%2Fnot-clone-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Fcompile-fail%2Fnot-clone-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-clone-closure.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -10,8 +10,6 @@\n \n // Check that closures do not implement `Clone` if their environment is not `Clone`.\n \n-#![feature(clone_closures)]\n-\n struct S(i32);\n \n fn main() {"}, {"sha": "10567c5c961a212d20b04252743d8f76899bb17a", "filename": "src/test/compile-fail/not-copy-closure.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Fcompile-fail%2Fnot-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Fcompile-fail%2Fnot-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-copy-closure.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -10,9 +10,6 @@\n \n // Check that closures do not implement `Copy` if their environment is not `Copy`.\n \n-#![feature(copy_closures)]\n-#![feature(clone_closures)]\n-\n fn main() {\n     let mut a = 5;\n     let hello = || {"}, {"sha": "2d559794919817754daa3e1c606253d58c39afd2", "filename": "src/test/compile-fail/unboxed-closer-non-implicit-copyable.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989/src%2Ftest%2Fcompile-fail%2Funboxed-closer-non-implicit-copyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989/src%2Ftest%2Fcompile-fail%2Funboxed-closer-non-implicit-copyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closer-non-implicit-copyable.rs?ref=52f7e8836cc2e6c0edfaf402ee40ca724a8c0989", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(unboxed_closures)]\n-\n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n-\n-fn main() {\n-    let f = to_fn_once(move|| ());\n-    f();\n-    f(); //~ ERROR use of moved value\n-}"}, {"sha": "0fe3711d8d32e1196ea85b135de25117bb93c04b", "filename": "src/test/run-pass/clone-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Frun-pass%2Fclone-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Frun-pass%2Fclone-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-closure.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -10,8 +10,6 @@\n \n // Check that closures implement `Clone`.\n \n-#![feature(clone_closures)]\n-\n #[derive(Clone)]\n struct S(i32);\n "}, {"sha": "a211d6fc3a385972092b174ac44ce1d2ec6d58a2", "filename": "src/test/run-pass/copy-closure.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Frun-pass%2Fcopy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Frun-pass%2Fcopy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcopy-closure.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -10,9 +10,6 @@\n \n // Check that closures implement `Copy`.\n \n-#![feature(copy_closures)]\n-#![feature(clone_closures)]\n-\n fn call<T, F: FnOnce() -> T>(f: F) -> T { f() }\n \n fn main() {"}, {"sha": "a15153ea7bf0ab947bbd0b04b0288bfc4899ef1d", "filename": "src/test/ui/feature-gate-clone-closures.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.rs?ref=52f7e8836cc2e6c0edfaf402ee40ca724a8c0989", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[derive(Clone)]\n-struct S(i32);\n-\n-fn main() {\n-    let a = S(5);\n-    let hello = move || {\n-        println!(\"Hello {}\", a.0);\n-    };\n-\n-    let hello = hello.clone(); //~ ERROR no method named `clone` found for type\n-}"}, {"sha": "7038a76380d6b9663d9239eb4956007911125aa1", "filename": "src/test/ui/feature-gate-clone-closures.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.stderr?ref=52f7e8836cc2e6c0edfaf402ee40ca724a8c0989", "patch": "@@ -1,11 +0,0 @@\n-error[E0599]: no method named `clone` found for type `[closure@$DIR/feature-gate-clone-closures.rs:16:17: 18:6 a:_]` in the current scope\n-  --> $DIR/feature-gate-clone-closures.rs:20:23\n-   |\n-LL |     let hello = hello.clone(); //~ ERROR no method named `clone` found for type\n-   |                       ^^^^^\n-   |\n-   = note: hello is a function, perhaps you wish to call it\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "b11b09eb9fd9bfab6787d6dc53f5332d98ae1288", "filename": "src/test/ui/feature-gate-copy-closures.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.rs?ref=52f7e8836cc2e6c0edfaf402ee40ca724a8c0989", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let a = 5;\n-    let hello = || {\n-        println!(\"Hello {}\", a);\n-    };\n-\n-    let b = hello;\n-    let c = hello; //~ ERROR use of moved value: `hello` [E0382]\n-}"}, {"sha": "e72680b69eaea12fe1b996b359de5b7668f72063", "filename": "src/test/ui/feature-gate-copy-closures.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f7e8836cc2e6c0edfaf402ee40ca724a8c0989/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.stderr?ref=52f7e8836cc2e6c0edfaf402ee40ca724a8c0989", "patch": "@@ -1,13 +0,0 @@\n-error[E0382]: use of moved value: `hello`\n-  --> $DIR/feature-gate-copy-closures.rs:18:9\n-   |\n-LL |     let b = hello;\n-   |         - value moved here\n-LL |     let c = hello; //~ ERROR use of moved value: `hello` [E0382]\n-   |         ^ value used here after move\n-   |\n-   = note: move occurs because `hello` has type `[closure@$DIR/feature-gate-copy-closures.rs:13:17: 15:6 a:&i32]`, which does not implement the `Copy` trait\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "e8227971691e947d46e1684554fdf5926c4ef5e8", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -58,7 +58,10 @@ fn test6() {\n \n fn test7() {\n     fn foo<F>(_: F) where F: FnMut(Box<FnMut(isize)>, isize) {}\n-    let mut f = |g: Box<FnMut(isize)>, b: isize| {};\n+    let s = String::new();  // Capture to make f !Copy\n+    let mut f = move |g: Box<FnMut(isize)>, b: isize| {\n+        let _ = s.len();\n+    };\n     f(Box::new(|a| {\n         foo(f);\n         //~^ ERROR cannot move `f` into closure because it is borrowed"}, {"sha": "2e7e1e0744141f474a848eaa1098b8ebdee82061", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee67e14034438972c5aae46f8773fe69f20f14aa/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=ee67e14034438972c5aae46f8773fe69f20f14aa", "patch": "@@ -28,19 +28,19 @@ LL |     f.f.call_mut(())\n    |     ^^^ cannot borrow as mutable\n \n error[E0504]: cannot move `f` into closure because it is borrowed\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:63:13\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:66:13\n    |\n LL |     f(Box::new(|a| {\n    |     - borrow of `f` occurs here\n LL |         foo(f);\n    |             ^ move into closure occurs here\n \n error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:63:13\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:66:13\n    |\n-LL |     let mut f = |g: Box<FnMut(isize)>, b: isize| {};\n+LL |     let mut f = move |g: Box<FnMut(isize)>, b: isize| {\n    |         ----- captured outer variable\n-LL |     f(Box::new(|a| {\n+...\n LL |         foo(f);\n    |             ^ cannot move out of captured outer variable in an `FnMut` closure\n "}]}