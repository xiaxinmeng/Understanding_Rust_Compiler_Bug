{"sha": "20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZjFiMmE5NjlmNmQ2MWY1ZjhiZjRkNzg3N2QzMGM2NmUyMmU3MGY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-29T22:16:12Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-29T22:16:12Z"}, "message": "Run fmt", "tree": {"sha": "824f103a2b048631199ea6af55de927ffa6e6dcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/824f103a2b048631199ea6af55de927ffa6e6dcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmCyvSwACgkQtAh+UQ6Y\nsWQQTw/+NdFosZxfdUNOfoFzjKnnIZibAFqqwjNHipFJo2YdyiDiO8BvF6ZPj3GN\nKgp3f7Drxmks7CfSnLGn/UugWJEJbmtCCRQ8iFi5DdsqlBF/BjqYsM9SIDGxU/LG\nUTx/9li9YrdwwiUp8C2yN4t/PB8iEETLoZOEdJdtKxF1hmt9QdEsdjCmgIyEMypB\nL0EXikSY13J9Udry04QEuGnvz+wjz5C+2KpNp/9Zp8JW3TWLqY6empdLuYTBbSXA\nWyCmRGhM3YKzkta7R3zZYAdqlNQ7XXIFxJoH/Ub4zCMtzE7YAgoYOZ0/OWv2FGFH\njf/q4KpWoR2Vmkqzd4ggBQ9YyYHqcSpZRZhZpjFv0U02iAPdYlV60vEVhL4vn9x7\n/YJ9l8TF8cTRcHPBzM8IB/Zr+GXpWnEoLXO4IzyxzPJ6Nol2zC5G5XB6LsuYkBRU\n1A4dcrSuK/BNg5b81m+gThknKv5kQzK9gaPY+skb0Jt6fkOGctheVRX8N//Mimhm\n9xoth3raqAdxTPJgWMHHWcRUiEPRMfWArrcruaJ5/vVimHGOrOGlnPPRB+cuuTi+\ns7ase4Xcqqkonl1OSsqd9NMU0+VBIlcyVlLk0sMUXZkMbL1EMAe8VjdGho1UUjyC\nlOBEbNz3bDo7XqGTCBOlBZw0AGImb4ODbgSX5bq9L/bKwSHqaDE=\n=MNcd\n-----END PGP SIGNATURE-----", "payload": "tree 824f103a2b048631199ea6af55de927ffa6e6dcf\nparent 16f469280ee8dfea1ca4f24a272f44865896006e\nauthor Aaron Hill <aa1ronham@gmail.com> 1622326572 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1622326572 -0500\n\nRun fmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f", "html_url": "https://github.com/rust-lang/rust/commit/20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16f469280ee8dfea1ca4f24a272f44865896006e", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f469280ee8dfea1ca4f24a272f44865896006e", "html_url": "https://github.com/rust-lang/rust/commit/16f469280ee8dfea1ca4f24a272f44865896006e"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "1a01ece6c9a8df5480f0dce7a1887df09b18c005", "filename": "src/machine.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f", "patch": "@@ -8,9 +8,9 @@ use std::num::NonZeroU64;\n use std::time::Instant;\n \n use log::trace;\n+use measureme::{DetachedTiming, EventId, Profiler, StringId};\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n-use measureme::{Profiler, StringId, EventId, DetachedTiming};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::{\n@@ -285,15 +285,13 @@ pub struct Evaluator<'mir, 'tcx> {\n }\n \n impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n-    pub(crate) fn new(\n-        config: &MiriConfig,\n-        layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>,\n-    ) -> Self {\n+    pub(crate) fn new(config: &MiriConfig, layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Self {\n         let layouts =\n             PrimitiveLayouts::new(layout_cx).expect(\"Couldn't get layouts of primitive types\");\n-        let profiler = config.measureme_out.as_ref().map(|out| {\n-            Profiler::new(out).expect(\"Couldn't create `measureme` profiler\")\n-        });\n+        let profiler = config\n+            .measureme_out\n+            .as_ref()\n+            .map(|out| Profiler::new(out).expect(\"Couldn't create `measureme` profiler\"));\n         Evaluator {\n             // `env_vars` could be initialized properly here if `Memory` were available before\n             // calling this method.\n@@ -617,9 +615,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         let timing = if let Some(profiler) = ecx.machine.profiler.as_ref() {\n             let fn_name = frame.instance.to_string();\n             let entry = ecx.machine.string_cache.entry(fn_name.clone());\n-            let name = entry.or_insert_with(|| {\n-                profiler.alloc_string(&*fn_name)\n-            });\n+            let name = entry.or_insert_with(|| profiler.alloc_string(&*fn_name));\n \n             Some(profiler.start_recording_interval_event_detached(\n                 *name,"}]}