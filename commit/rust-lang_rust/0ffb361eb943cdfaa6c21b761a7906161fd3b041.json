{"sha": "0ffb361eb943cdfaa6c21b761a7906161fd3b041", "node_id": "C_kwDOAAsO6NoAKDBmZmIzNjFlYjk0M2NkZmFhNmMyMWI3NjFhNzkwNjE2MWZkM2IwNDE", "commit": {"author": {"name": "Kartavya Vashishtha", "email": "sendtokartavya@gmail.com", "date": "2022-11-19T05:40:47Z"}, "committer": {"name": "Kartavya Vashishtha", "email": "sendtokartavya@gmail.com", "date": "2022-11-19T05:40:47Z"}, "message": "feat: adds hover hint to \"..\" in record pattern\n\ncurrently only works with struct pattern", "tree": {"sha": "f5a8b8567e97082d06dae1cf8c981bc0153a046d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5a8b8567e97082d06dae1cf8c981bc0153a046d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ffb361eb943cdfaa6c21b761a7906161fd3b041", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE+fRQYdEX7Emd36W/pQASwjJOXfAFAmN4bF8ACgkQpQASwjJO\nXfDdEw//TX3ilWQhXlLYXW+/1WvNdbvSwxvJtpoBczzuRSWSyAm0wcCb/3/W2k5u\nrD7RASUJ9opycjY1Q5jljK9DVwTmQBOgK7OqKtVxU7/Q1Lat3g1aNq4rYEDpBf1u\nDuIcu4YRUBYwZCevNki5SrKX7K2Ht0enKwG6dgI4e53Sys8De7ByeAmCbbZ0ACdu\nfZVn2Pn9zzsnr2+rmwMMVhKbO3SAbuv5E3iplHQU4avdNTxrfuMaMTsaI0ZpX2ky\ncyZGwuN6ex3enLl4It/agHTFZsVv6qbV7OOHhWPtYxqCYqpkCLLGszD83cOtF5LJ\nbHN0IcXKkqYm6ke0b4yEzxhvpbG+Ejwv6g+ZU7Ltr6JkbA1Tqlt3ZKEan5Ix70Il\nJ4+HfU2T2WfHe1Fi4I4iF8xD0Cr7qDcBZl5KGBFnSNfQzJ2v0SlGLmb2STfsWDQP\nwn14ZN66qVC78FxULUHRO9HJcpxXLpInNg+tHdUrB85e6SYuvLb6YNrJjkbXG7zU\n+Dbx3AccCdy0ea6Ft57VQgr1qBPDAbNA0FWc+v2JrGFlAzixmNkdfdz+bQgrCs1g\nOMETOSr93KIWSk2F4D7R2MxxcJWOYS2jTwYrNc4oVPZuUIzW2mjSyjc4YXxccjkn\n1vAIdnTbIX5wRMKu0lIPCNpsmd3MHYFrbqqDO2NbHGbf6Mqr7S8=\n=MXEE\n-----END PGP SIGNATURE-----", "payload": "tree f5a8b8567e97082d06dae1cf8c981bc0153a046d\nparent 791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3\nauthor Kartavya Vashishtha <sendtokartavya@gmail.com> 1668836447 +0530\ncommitter Kartavya Vashishtha <sendtokartavya@gmail.com> 1668836447 +0530\n\nfeat: adds hover hint to \"..\" in record pattern\n\ncurrently only works with struct pattern\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ffb361eb943cdfaa6c21b761a7906161fd3b041", "html_url": "https://github.com/rust-lang/rust/commit/0ffb361eb943cdfaa6c21b761a7906161fd3b041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ffb361eb943cdfaa6c21b761a7906161fd3b041/comments", "author": {"login": "DesmondWillowbrook", "id": 51814158, "node_id": "MDQ6VXNlcjUxODE0MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51814158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesmondWillowbrook", "html_url": "https://github.com/DesmondWillowbrook", "followers_url": "https://api.github.com/users/DesmondWillowbrook/followers", "following_url": "https://api.github.com/users/DesmondWillowbrook/following{/other_user}", "gists_url": "https://api.github.com/users/DesmondWillowbrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesmondWillowbrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesmondWillowbrook/subscriptions", "organizations_url": "https://api.github.com/users/DesmondWillowbrook/orgs", "repos_url": "https://api.github.com/users/DesmondWillowbrook/repos", "events_url": "https://api.github.com/users/DesmondWillowbrook/events{/privacy}", "received_events_url": "https://api.github.com/users/DesmondWillowbrook/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DesmondWillowbrook", "id": 51814158, "node_id": "MDQ6VXNlcjUxODE0MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51814158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesmondWillowbrook", "html_url": "https://github.com/DesmondWillowbrook", "followers_url": "https://api.github.com/users/DesmondWillowbrook/followers", "following_url": "https://api.github.com/users/DesmondWillowbrook/following{/other_user}", "gists_url": "https://api.github.com/users/DesmondWillowbrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesmondWillowbrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesmondWillowbrook/subscriptions", "organizations_url": "https://api.github.com/users/DesmondWillowbrook/orgs", "repos_url": "https://api.github.com/users/DesmondWillowbrook/repos", "events_url": "https://api.github.com/users/DesmondWillowbrook/events{/privacy}", "received_events_url": "https://api.github.com/users/DesmondWillowbrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "html_url": "https://github.com/rust-lang/rust/commit/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "966daad1358d4fed0257414766e8f90664899fe6", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ffb361eb943cdfaa6c21b761a7906161fd3b041/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ffb361eb943cdfaa6c21b761a7906161fd3b041/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=0ffb361eb943cdfaa6c21b761a7906161fd3b041", "patch": "@@ -87,7 +87,7 @@ pub struct HoverResult {\n // Shows additional information, like the type of an expression or the documentation for a definition when \"focusing\" code.\n // Focusing is usually hovering with a mouse, but can also be triggered with a shortcut.\n //\n-// image::https://user-images.githubusercontent.com/48062697/113020658-b5f98b80-917a-11eb-9f88-3dbc27320c95.gif[]\n+// image::https://user-images.githubusercontent.com/48062697/113020658-b5f98b80-917a-11eb-9f88-3dbc27320c95.gif\n pub(crate) fn hover(\n     db: &RootDatabase,\n     FileRange { file_id, range }: FileRange,\n@@ -268,7 +268,10 @@ fn hover_type_fallback(\n         }\n     };\n \n-    let res = render::type_info(sema, config, &expr_or_pat)?;\n+    let res =\n+        render::type_info(sema, config, &expr_or_pat)\n+        .or_else(|| render::struct_rest_pat(sema, config, &expr_or_pat))?;\n+\n     let range = sema\n         .original_range_opt(&node)\n         .map(|frange| frange.range)"}, {"sha": "3b561f65da971dc67af854745c0e9063d745b255", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0ffb361eb943cdfaa6c21b761a7906161fd3b041/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ffb361eb943cdfaa6c21b761a7906161fd3b041/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=0ffb361eb943cdfaa6c21b761a7906161fd3b041", "patch": "@@ -14,7 +14,7 @@ use ide_db::{\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n-    algo, ast, match_ast, AstNode, Direction,\n+    algo, ast::{self, RecordPat}, match_ast, AstNode, Direction,\n     SyntaxKind::{LET_EXPR, LET_STMT},\n     SyntaxToken, T,\n };\n@@ -250,6 +250,58 @@ pub(super) fn keyword(\n     Some(HoverResult { markup, actions })\n }\n \n+pub(super) fn struct_rest_pat(\n+    sema: &Semantics<'_, RootDatabase>,\n+    config: &HoverConfig,\n+    expr_or_pat: &Either<ast::Expr, ast::Pat>,\n+) -> Option<HoverResult> {\n+    let pat = expr_or_pat.as_ref().right()?;\n+\n+    let mut ancestors = sema.ancestors_with_macros(pat.syntax().clone());\n+    let _record_pat_field_list = ancestors.next()?;\n+    let record_pat = ancestors.next()?;\n+    let pattern = sema\n+        .find_nodes_at_offset_with_descend::<RecordPat>(\n+            &record_pat,\n+        record_pat.text_range().start())\n+        .next()?;\n+\n+    let missing_fields = sema.record_pattern_missing_fields(&pattern);\n+\n+    // if there are no missing fields, the end result is a hover that shows \"..\"\n+    // should be left in to indicate that there are no more fields in the pattern\n+    // example, S {a: 1, b: 2, ..} when struct S {a: u32, b: u32}\n+\n+    let mut res = HoverResult::default();\n+    let mut targets: Vec<hir::ModuleDef> = Vec::new();\n+    let mut push_new_def = |item: hir::ModuleDef| {\n+        if !targets.contains(&item) {\n+            targets.push(item);\n+        }\n+    };\n+    for (_, t) in &missing_fields {\n+        walk_and_push_ty(sema.db, &t, &mut push_new_def);\n+    }\n+\n+    res.markup = {\n+        let mut s = String::from(\".., \");\n+        for (f, _) in &missing_fields {\n+            s += f.display(sema.db).to_string().as_ref();\n+            s += \", \";\n+        }\n+        // get rid of trailing comma\n+        if s.len() > 0 {s.truncate(s.len() - 2);}\n+\n+        if config.markdown() {\n+            Markup::fenced_block(&s)\n+        } else {\n+            s.into()\n+        }\n+    };\n+    res.actions.push(HoverAction::goto_type_from_targets(sema.db, targets));\n+    Some(res)\n+}\n+\n pub(super) fn try_for_lint(attr: &ast::Attr, token: &SyntaxToken) -> Option<HoverResult> {\n     let (path, tt) = attr.as_simple_call()?;\n     if !tt.syntax().text_range().contains(token.text_range().start()) {"}]}