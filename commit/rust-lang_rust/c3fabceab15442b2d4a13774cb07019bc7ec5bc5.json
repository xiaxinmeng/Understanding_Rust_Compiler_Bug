{"sha": "c3fabceab15442b2d4a13774cb07019bc7ec5bc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZmFiY2VhYjE1NDQyYjJkNGExMzc3NGNiMDcwMTliYzdlYzViYzU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-22T17:18:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-22T17:19:41Z"}, "message": "Inline some rustc_driver function", "tree": {"sha": "d7109c48acbc86a0d14a580d0a4388b34e3dbff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7109c48acbc86a0d14a580d0a4388b34e3dbff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3fabceab15442b2d4a13774cb07019bc7ec5bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fabceab15442b2d4a13774cb07019bc7ec5bc5", "html_url": "https://github.com/rust-lang/rust/commit/c3fabceab15442b2d4a13774cb07019bc7ec5bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3fabceab15442b2d4a13774cb07019bc7ec5bc5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdc18b3067b5bad257ccbe7400e3c4fb617e9e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc18b3067b5bad257ccbe7400e3c4fb617e9e18", "html_url": "https://github.com/rust-lang/rust/commit/fdc18b3067b5bad257ccbe7400e3c4fb617e9e18"}], "stats": {"total": 61, "additions": 22, "deletions": 39}, "files": [{"sha": "f19ffc0e12af69ba55963fa0c3c4ab3e232affc2", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c3fabceab15442b2d4a13774cb07019bc7ec5bc5/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fabceab15442b2d4a13774cb07019bc7ec5bc5/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c3fabceab15442b2d4a13774cb07019bc7ec5bc5", "patch": "@@ -51,14 +51,12 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n use std::sync::mpsc;\n-use syntax::{ast, diagnostics, visit};\n-use syntax::attr;\n+use syntax::{self, ast, attr, diagnostics, visit};\n use syntax::ext::base::ExtCtxt;\n use syntax::fold::Folder;\n use syntax::parse::{self, PResult};\n use syntax::util::node_count::NodeCounter;\n use syntax_pos::FileName;\n-use syntax;\n use syntax_ext;\n \n use derive_registrar;\n@@ -274,10 +272,6 @@ pub fn compile_input(trans: Box<TransCrate>,\n     Ok(())\n }\n \n-fn keep_hygiene_data(sess: &Session) -> bool {\n-    sess.opts.debugging_opts.keep_hygiene_data\n-}\n-\n pub fn source_name(input: &Input) -> FileName {\n     match *input {\n         Input::File(ref ifile) => ifile.clone().into(),\n@@ -851,7 +845,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n          || lint::check_ast_crate(sess, &krate));\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n-    if !keep_hygiene_data(sess) {\n+    if !sess.opts.debugging_opts.keep_hygiene_data {\n         syntax::ext::hygiene::clear_markings();\n     }\n \n@@ -915,18 +909,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(trans: &TransCrate,\n                             mpsc::Receiver<Box<Any + Send>>,\n                             CompileResult) -> R\n {\n-    macro_rules! try_with_f {\n-        ($e: expr, ($($t:tt)*)) => {\n-            match $e {\n-                Ok(x) => x,\n-                Err(x) => {\n-                    f($($t)*, Err(x));\n-                    return Err(x);\n-                }\n-            }\n-        }\n-    }\n-\n     let time_passes = sess.time_passes();\n \n     let query_result_on_disk_cache = time(time_passes,\n@@ -987,7 +969,13 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(trans: &TransCrate,\n              || stability::check_unstable_api_usage(tcx));\n \n         // passes are timed inside typeck\n-        try_with_f!(typeck::check_crate(tcx), (tcx, analysis, rx));\n+        match typeck::check_crate(tcx) {\n+            Ok(x) => x,\n+            Err(x) => {\n+                f(tcx, analysis, rx, Err(x));\n+                return Err(x);\n+            }\n+        }\n \n         time(time_passes,\n              \"const checking\","}, {"sha": "c05004d1c155c3d74ed5d0f34a51f099e009aa3a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c3fabceab15442b2d4a13774cb07019bc7ec5bc5/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fabceab15442b2d4a13774cb07019bc7ec5bc5/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c3fabceab15442b2d4a13774cb07019bc7ec5bc5", "patch": "@@ -669,7 +669,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.after_hir_lowering.stop = Compilation::Stop;\n         }\n \n-        if save_analysis(sess) {\n+        if sess.opts.debugging_opts.save_analysis {\n             enable_save_analysis(&mut control);\n         }\n \n@@ -704,10 +704,6 @@ pub fn enable_save_analysis(control: &mut CompileController) {\n     control.make_glob_map = resolve::MakeGlobMap::Yes;\n }\n \n-fn save_analysis(sess: &Session) -> bool {\n-    sess.opts.debugging_opts.save_analysis\n-}\n-\n impl RustcDefaultCalls {\n     pub fn list_metadata(sess: &Session,\n                          cstore: &CrateStore,\n@@ -1329,20 +1325,19 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     Registry::new(&all_errors)\n }\n \n-pub fn get_args() -> Vec<String> {\n-    env::args_os().enumerate()\n-        .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n-             early_error(ErrorOutputType::default(),\n-                         &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n-         }))\n-        .collect()\n-}\n-\n pub fn main() {\n     env_logger::init().unwrap();\n-    let result = run(|| run_compiler(&get_args(),\n-                                     &mut RustcDefaultCalls,\n-                                     None,\n-                                     None));\n+    let result = run(|| {\n+        let args = env::args_os().enumerate()\n+            .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n+                early_error(ErrorOutputType::default(),\n+                            &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n+            }))\n+            .collect::<Vec<_>>();\n+        run_compiler(&args,\n+                     &mut RustcDefaultCalls,\n+                     None,\n+                     None)\n+    });\n     process::exit(result as i32);\n }"}]}