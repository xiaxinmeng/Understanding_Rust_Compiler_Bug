{"sha": "d747de5a927e405c7d12ae04d213bdc05add2032", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NDdkZTVhOTI3ZTQwNWM3ZDEyYWUwNGQyMTNiZGMwNWFkZDIwMzI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-03-16T08:29:05Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-06-21T17:59:58Z"}, "message": "Compile bools to i1\n\nWe currently compiled bools to i8 values, because there was a bug in\nLLVM that sometimes caused miscompilations when using i1 in, for\nexample, structs.\n\nUsing i8 means a lot of unnecessary zero-extend and truncate operations\nthough, since we have to convert the value from and to i1 when using for\nexample icmp or br instructions. Besides the unnecessary overhead caused\nby this, it also sometimes made LLVM miss some optimizations.\n\nFixes #8106.", "tree": {"sha": "79105f6a528eed06cb85780f8bf2fe4379a31b26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79105f6a528eed06cb85780f8bf2fe4379a31b26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d747de5a927e405c7d12ae04d213bdc05add2032", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d747de5a927e405c7d12ae04d213bdc05add2032", "html_url": "https://github.com/rust-lang/rust/commit/d747de5a927e405c7d12ae04d213bdc05add2032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d747de5a927e405c7d12ae04d213bdc05add2032/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90a9f65b8da62f7495e56cab252efe590dd456e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a9f65b8da62f7495e56cab252efe590dd456e5", "html_url": "https://github.com/rust-lang/rust/commit/90a9f65b8da62f7495e56cab252efe590dd456e5"}], "stats": {"total": 113, "additions": 44, "deletions": 69}, "files": [{"sha": "5fae1635bee8e491dc458670c6856a41a0aa6213", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -1200,8 +1200,6 @@ fn pick_col(m: &[Match]) -> uint {\n pub enum branch_kind { no_branch, single, switch, compare, compare_vec_len, }\n \n // Compiles a comparison between two things.\n-//\n-// NB: This must produce an i1, not a Rust bool (i8).\n fn compare_values<'a>(\n                   cx: &'a Block<'a>,\n                   lhs: ValueRef,\n@@ -1218,11 +1216,7 @@ fn compare_values<'a>(\n                            format!(\"comparison of `{}`\",\n                                    cx.ty_to_str(rhs_t)).as_slice(),\n                            StrEqFnLangItem);\n-        let result = callee::trans_lang_call(cx, did, [lhs, rhs], None);\n-        Result {\n-            bcx: result.bcx,\n-            val: bool_to_i1(result.bcx, result.val)\n-        }\n+        callee::trans_lang_call(cx, did, [lhs, rhs], None)\n     }\n \n     let _icx = push_ctxt(\"compare_values\");\n@@ -1243,11 +1237,7 @@ fn compare_values<'a>(\n                                    format!(\"comparison of `{}`\",\n                                            cx.ty_to_str(rhs_t)).as_slice(),\n                                    UniqStrEqFnLangItem);\n-                let result = callee::trans_lang_call(cx, did, [scratch_lhs, scratch_rhs], None);\n-                Result {\n-                    bcx: result.bcx,\n-                    val: bool_to_i1(result.bcx, result.val)\n-                }\n+                callee::trans_lang_call(cx, did, [scratch_lhs, scratch_rhs], None)\n             }\n             _ => cx.sess().bug(\"only strings supported in compare_values\"),\n         },"}, {"sha": "da49c7764ce535604d2fc38093007a2419ea5a51", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -501,7 +501,6 @@ pub fn maybe_name_value(cx: &CrateContext, v: ValueRef, s: &str) {\n // Used only for creating scalar comparison glue.\n pub enum scalar_type { nil_type, signed_int, unsigned_int, floating_point, }\n \n-// NB: This produces an i1, not a Rust bool (i8).\n pub fn compare_scalar_types<'a>(\n                             cx: &'a Block<'a>,\n                             lhs: ValueRef,\n@@ -1815,6 +1814,13 @@ pub fn get_fn_llvm_attributes(ccx: &CrateContext, fn_ty: ty::t) -> Vec<(uint, u6\n             }\n             _ => {}\n         }\n+\n+        match ty::get(ret_ty).sty {\n+            ty::ty_bool => {\n+                attrs.push((lib::llvm::ReturnIndex as uint, lib::llvm::ZExtAttribute as u64));\n+            }\n+            _ => {}\n+        }\n     }\n \n     for (idx, &t) in fn_sig.inputs.iter().enumerate().map(|(i, v)| (i + first_arg_offset, v)) {\n@@ -1828,6 +1834,9 @@ pub fn get_fn_llvm_attributes(ccx: &CrateContext, fn_ty: ty::t) -> Vec<(uint, u6\n                 attrs.push((idx, lib::llvm::NoCaptureAttribute as u64));\n                 attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n             }\n+            ty::ty_bool => {\n+                attrs.push((idx, lib::llvm::ZExtAttribute as u64));\n+            }\n             // `~` pointer parameters never alias because ownership is transferred\n             ty::ty_uniq(_) => {\n                 attrs.push((idx, lib::llvm::NoAliasAttribute as u64));"}, {"sha": "01bef64ebba642bf1fa0347de358191b179049eb", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_uppercase_pattern_statics)]\n \n use lib::llvm::{llvm, Integer, Pointer, Float, Double, Struct, Array};\n-use lib::llvm::StructRetAttribute;\n+use lib::llvm::{StructRetAttribute, ZExtAttribute};\n use middle::trans::cabi::{FnType, ArgType};\n use middle::trans::context::CrateContext;\n use middle::trans::type_::Type;\n@@ -85,7 +85,8 @@ fn ty_size(ty: Type) -> uint {\n \n fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n     if is_reg_ty(ty) {\n-        return ArgType::direct(ty, None, None, None);\n+        let attr = if ty == Type::bool(ccx) { Some(ZExtAttribute) } else { None };\n+        return ArgType::direct(ty, None, None, attr);\n     }\n     let size = ty_size(ty);\n     if size <= 4 {\n@@ -103,7 +104,8 @@ fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n \n fn classify_arg_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n     if is_reg_ty(ty) {\n-        return ArgType::direct(ty, None, None, None);\n+        let attr = if ty == Type::bool(ccx) { Some(ZExtAttribute) } else { None };\n+        return ArgType::direct(ty, None, None, attr);\n     }\n     let align = ty_align(ty);\n     let size = ty_size(ty);"}, {"sha": "60db609e59ed184cc9b7eac69e711be04643296f", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -13,7 +13,7 @@\n use libc::c_uint;\n use std::cmp;\n use lib::llvm::{llvm, Integer, Pointer, Float, Double, Struct, Array};\n-use lib::llvm::StructRetAttribute;\n+use lib::llvm::{StructRetAttribute, ZExtAttribute};\n use middle::trans::context::CrateContext;\n use middle::trans::cabi::*;\n use middle::trans::type_::Type;\n@@ -83,9 +83,10 @@ fn ty_size(ty: Type) -> uint {\n     }\n }\n \n-fn classify_ret_ty(ty: Type) -> ArgType {\n+fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n     if is_reg_ty(ty) {\n-        ArgType::direct(ty, None, None, None)\n+        let attr = if ty == Type::bool(ccx) { Some(ZExtAttribute) } else { None };\n+        ArgType::direct(ty, None, None, attr)\n     } else {\n         ArgType::indirect(ty, Some(StructRetAttribute))\n     }\n@@ -101,7 +102,8 @@ fn classify_arg_ty(ccx: &CrateContext, ty: Type, offset: &mut uint) -> ArgType {\n     *offset += align_up_to(size, align * 8) / 8;\n \n     if is_reg_ty(ty) {\n-        ArgType::direct(ty, None, None, None)\n+        let attr = if ty == Type::bool(ccx) { Some(ZExtAttribute) } else { None };\n+        ArgType::direct(ty, None, None, attr)\n     } else {\n         ArgType::direct(\n             ty,\n@@ -160,7 +162,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n                         rty: Type,\n                         ret_def: bool) -> FnType {\n     let ret_ty = if ret_def {\n-        classify_ret_ty(rty)\n+        classify_ret_ty(ccx, rty)\n     } else {\n         ArgType::direct(Type::void(ccx), None, None, None)\n     };"}, {"sha": "5fffdf08646b9824b9f8b1846fbe9041002bdcd2", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -59,7 +59,8 @@ pub fn compute_abi_info(ccx: &CrateContext,\n             }\n         }\n     } else {\n-        ret_ty = ArgType::direct(rty, None, None, None);\n+        let attr = if rty == Type::bool(ccx) { Some(ZExtAttribute) } else { None };\n+        ret_ty = ArgType::direct(rty, None, None, attr);\n     }\n \n     for &t in atys.iter() {\n@@ -72,7 +73,10 @@ pub fn compute_abi_info(ccx: &CrateContext,\n                     ArgType::indirect(t, Some(ByValAttribute))\n                 }\n             }\n-            _ => ArgType::direct(t, None, None, None),\n+            _ => {\n+                let attr = if t == Type::bool(ccx) { Some(ZExtAttribute) } else { None };\n+                ArgType::direct(t, None, None, attr)\n+            }\n         };\n         arg_tys.push(ty);\n     }"}, {"sha": "b2cd9d256dd43c4ea9845a3a74cf84d658433166", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -15,7 +15,7 @@\n \n use lib::llvm::{llvm, Integer, Pointer, Float, Double};\n use lib::llvm::{Struct, Array, Attribute};\n-use lib::llvm::{StructRetAttribute, ByValAttribute};\n+use lib::llvm::{StructRetAttribute, ByValAttribute, ZExtAttribute};\n use middle::trans::cabi::*;\n use middle::trans::context::CrateContext;\n use middle::trans::type_::Type;\n@@ -337,20 +337,21 @@ pub fn compute_abi_info(ccx: &CrateContext,\n     fn x86_64_ty(ccx: &CrateContext,\n                  ty: Type,\n                  is_mem_cls: |cls: &[RegClass]| -> bool,\n-                 attr: Attribute)\n+                 ind_attr: Attribute)\n                  -> ArgType {\n         if !ty.is_reg_ty() {\n             let cls = classify_ty(ty);\n             if is_mem_cls(cls.as_slice()) {\n-                ArgType::indirect(ty, Some(attr))\n+                ArgType::indirect(ty, Some(ind_attr))\n             } else {\n                 ArgType::direct(ty,\n                                 Some(llreg_ty(ccx, cls.as_slice())),\n                                 None,\n                                 None)\n             }\n         } else {\n-            ArgType::direct(ty, None, None, None)\n+            let attr = if ty == Type::bool(ccx) { Some(ZExtAttribute) } else { None };\n+            ArgType::direct(ty, None, None, attr)\n         }\n     }\n "}, {"sha": "a1923022e7b176dad7326b7000356453f8e6b033", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -818,11 +818,6 @@ pub fn find_vtable(tcx: &ty::ctxt,\n     param_bounds.get(n_bound).clone()\n }\n \n-// Casts a Rust bool value to an i1.\n-pub fn bool_to_i1(bcx: &Block, llval: ValueRef) -> ValueRef {\n-    build::ICmp(bcx, lib::llvm::IntNE, llval, C_bool(bcx.ccx(), false))\n-}\n-\n pub fn langcall(bcx: &Block,\n                 span: Option<Span>,\n                 msg: &str,"}, {"sha": "527ce5dfaae4591d62285d229780ae8137279736", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -399,18 +399,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n                 let (dv, _dt) = const_deref(cx, te, ty, true);\n                 dv\n               }\n-              ast::UnNot    => {\n-                match ty::get(ty).sty {\n-                    ty::ty_bool => {\n-                        // Somewhat questionable, but I believe this is\n-                        // correct.\n-                        let te = llvm::LLVMConstTrunc(te, Type::i1(cx).to_ref());\n-                        let te = llvm::LLVMConstNot(te);\n-                        llvm::LLVMConstZExt(te, Type::bool(cx).to_ref())\n-                    }\n-                    _ => llvm::LLVMConstNot(te),\n-                }\n-              }\n+              ast::UnNot    => llvm::LLVMConstNot(te),\n               ast::UnNeg    => {\n                 if is_float { llvm::LLVMConstFNeg(te) }\n                 else        { llvm::LLVMConstNeg(te) }"}, {"sha": "440aa36b28cbd2e9e8cb864b0bc9aa044fa27150", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -525,8 +525,6 @@ fn load<'a>(bcx: &'a Block<'a>, llptr: ValueRef, ty: ty::t) -> ValueRef {\n \n     if type_is_zero_size(bcx.ccx(), ty) {\n         C_undef(type_of::type_of(bcx.ccx(), ty))\n-    } else if ty::type_is_bool(ty) {\n-        LoadRangeAssert(bcx, llptr, 0, 2, lib::llvm::False)\n     } else if ty::type_is_char(ty) {\n         // a char is a unicode codepoint, and so takes values from 0\n         // to 0x10FFFF inclusive only.\n@@ -652,8 +650,7 @@ impl<K:KindOps> Datum<K> {\n \n     pub fn to_llbool<'a>(self, bcx: &'a Block<'a>) -> ValueRef {\n         assert!(ty::type_is_bool(self.ty) || ty::type_is_bot(self.ty))\n-        let cond_val = self.to_llscalarish(bcx);\n-        bool_to_i1(bcx, cond_val)\n+        self.to_llscalarish(bcx)\n     }\n }\n "}, {"sha": "9af5c7aa792358e4021ee7ec2c6c8ffbd6260ce2", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -1147,11 +1147,7 @@ fn trans_unary<'a>(bcx: &'a Block<'a>,\n             let datum = unpack_datum!(bcx, trans(bcx, sub_expr));\n             let llresult = if ty::type_is_bool(un_ty) {\n                 let val = datum.to_llscalarish(bcx);\n-                let llcond = ICmp(bcx,\n-                                  lib::llvm::IntEQ,\n-                                  val,\n-                                  C_bool(ccx, false));\n-                Select(bcx, llcond, C_bool(ccx, true), C_bool(ccx, false))\n+                Xor(bcx, val, C_bool(ccx, true))\n             } else {\n                 // Note: `Not` is bitwise, not suitable for logical not.\n                 Not(bcx, datum.to_llscalarish(bcx))\n@@ -1325,9 +1321,7 @@ fn trans_eager_binop<'a>(\n         if ty::type_is_bot(rhs_t) {\n             C_bool(bcx.ccx(), false)\n         } else if ty::type_is_scalar(rhs_t) {\n-            let cmpr = base::compare_scalar_types(bcx, lhs, rhs, rhs_t, op);\n-            bcx = cmpr.bcx;\n-            ZExt(bcx, cmpr.val, Type::i8(bcx.ccx()))\n+            unpack_result!(bcx, base::compare_scalar_types(bcx, lhs, rhs, rhs_t, op))\n         } else if is_simd {\n             base::compare_simd_types(bcx, lhs, rhs, intype, ty::simd_size(tcx, lhs_t), op)\n         } else {\n@@ -1369,10 +1363,9 @@ fn trans_lazy_binop<'a>(\n     let join = fcx.new_id_block(\"join\", binop_expr.id);\n     let before_rhs = fcx.new_id_block(\"before_rhs\", b.id);\n \n-    let lhs_i1 = bool_to_i1(past_lhs, lhs);\n     match op {\n-      lazy_and => CondBr(past_lhs, lhs_i1, before_rhs.llbb, join.llbb),\n-      lazy_or => CondBr(past_lhs, lhs_i1, join.llbb, before_rhs.llbb)\n+      lazy_and => CondBr(past_lhs, lhs, before_rhs.llbb, join.llbb),\n+      lazy_or => CondBr(past_lhs, lhs, join.llbb, before_rhs.llbb)\n     }\n \n     let DatumBlock {bcx: past_rhs, datum: rhs} = trans(before_rhs, b);"}, {"sha": "bc0c88ceee95fc5866159c067f70773851ad51f5", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -96,19 +96,13 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n         let b = get_param(bcx.fcx.llfn, first_real_arg + 1);\n         let llfn = bcx.ccx().get_intrinsic(&name);\n \n-        // convert `i1` to a `bool`, and write to the out parameter\n         let val = Call(bcx, llfn, [a, b], []);\n-        let result = ExtractValue(bcx, val, 0);\n-        let overflow = ZExt(bcx, ExtractValue(bcx, val, 1), Type::bool(bcx.ccx()));\n-        let ret = C_undef(type_of::type_of(bcx.ccx(), t));\n-        let ret = InsertValue(bcx, ret, result, 0);\n-        let ret = InsertValue(bcx, ret, overflow, 1);\n \n         if type_is_immediate(bcx.ccx(), t) {\n-            Ret(bcx, ret);\n+            Ret(bcx, val);\n         } else {\n             let retptr = get_param(bcx.fcx.llfn, bcx.fcx.out_arg_pos());\n-            Store(bcx, ret, retptr);\n+            Store(bcx, val, retptr);\n             RetVoid(bcx);\n         }\n     }"}, {"sha": "59903324e10eaaf2c5c6b2061eb59df0ff6e659d", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -107,7 +107,6 @@ impl<'a, 'b> Reflector<'a, 'b> {\n                                                          mth_idx,\n                                                          v),\n             ArgVals(args), None));\n-        let result = bool_to_i1(bcx, result);\n         let next_bcx = fcx.new_temp_block(\"next\");\n         CondBr(bcx, result, next_bcx.llbb, self.final_bcx.llbb);\n         self.bcx = next_bcx"}, {"sha": "75f884aac34cf28f58e46ac0eaa0d45ca18a26db", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d747de5a927e405c7d12ae04d213bdc05add2032/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=d747de5a927e405c7d12ae04d213bdc05add2032", "patch": "@@ -93,7 +93,7 @@ impl Type {\n     }\n \n     pub fn bool(ccx: &CrateContext) -> Type {\n-        Type::i8(ccx)\n+        Type::i1(ccx)\n     }\n \n     pub fn char(ccx: &CrateContext) -> Type {"}]}