{"sha": "0019ca9141d0e397534df87a6a7c4c7ece2646d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMTljYTkxNDFkMGUzOTc1MzRkZjg3YTZhN2M0YzdlY2UyNjQ2ZDc=", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-04-07T19:47:01Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-04-08T16:12:14Z"}, "message": "Fix outdated crate names in compiler docs\n\nChanges `librustc_X` to `rustc_X`, only in documentation comments.\nPlain code comments are left unchanged.\n\nAlso fix incorrect file paths.", "tree": {"sha": "adfd5610650d2d998dceba4d5a7b461e7f136cb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adfd5610650d2d998dceba4d5a7b461e7f136cb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0019ca9141d0e397534df87a6a7c4c7ece2646d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0019ca9141d0e397534df87a6a7c4c7ece2646d7", "html_url": "https://github.com/rust-lang/rust/commit/0019ca9141d0e397534df87a6a7c4c7ece2646d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0019ca9141d0e397534df87a6a7c4c7ece2646d7/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01026de465d5a5ef51e32c1012c43927d2a111c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01026de465d5a5ef51e32c1012c43927d2a111c", "html_url": "https://github.com/rust-lang/rust/commit/b01026de465d5a5ef51e32c1012c43927d2a111c"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "2ee1bfe0ae71ba273835c9b2db5369002fee6512", "filename": "compiler/rustc_ast/src/expand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fmod.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -1,3 +1,3 @@\n-//! Definitions shared by macros / syntax extensions and e.g. librustc_middle.\n+//! Definitions shared by macros / syntax extensions and e.g. `rustc_middle`.\n \n pub mod allocator;"}, {"sha": "1e6da044ec03969c4e05353829e831cee5788ec3", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -59,7 +59,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n-/// instead of implementing everything in librustc_middle.\n+/// instead of implementing everything in `rustc_middle`.\n pub trait HashStableContext: rustc_span::HashStableContext {\n     fn hash_attr(&mut self, _: &ast::Attribute, hasher: &mut StableHasher);\n }"}, {"sha": "b173cb8b4e181ed572621c0cfd83a19c3e15db61", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -93,7 +93,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     /// HACK(Centril): there is a cyclic dependency between the parser and lowering\n     /// if we don't have this function pointer. To avoid that dependency so that\n-    /// librustc_middle is independent of the parser, we use dynamic dispatch here.\n+    /// `rustc_middle` is independent of the parser, we use dynamic dispatch here.\n     nt_to_tokenstream: NtToTokenstream,\n \n     /// Used to allocate HIR nodes."}, {"sha": "9053d1aa1b05af027e20b0510ad766baaca0bc0b", "filename": "compiler/rustc_codegen_cranelift/src/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -1,6 +1,6 @@\n //! Codegen vtables and vtable accesses.\n //!\n-//! See librustc_codegen_llvm/meth.rs for reference\n+//! See `rustc_codegen_ssa/src/meth.rs` for reference.\n // FIXME dedup this logic between miri, cg_llvm and cg_clif\n \n use crate::prelude::*;"}, {"sha": "ce90fbacaa46c9094d21287fad2e55603788052a", "filename": "compiler/rustc_data_structures/src/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -19,7 +19,7 @@ pub struct Svh {\n impl Svh {\n     /// Creates a new `Svh` given the hash. If you actually want to\n     /// compute the SVH from some HIR, you want the `calculate_svh`\n-    /// function found in `librustc_incremental`.\n+    /// function found in `rustc_incremental`.\n     pub fn new(hash: u64) -> Svh {\n         Svh { hash }\n     }"}, {"sha": "654d2408580fe932e23195dd659267b4d9e50860", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -1,7 +1,7 @@\n //! # Feature gates\n //!\n //! This crate declares the set of past and present unstable features in the compiler.\n-//! Feature gate checking itself is done in `librustc_ast_passes/feature_gate.rs`\n+//! Feature gate checking itself is done in `rustc_ast_passes/src/feature_gate.rs`\n //! at the moment.\n //!\n //! Features are enabled in programs via the crate-level attributes of"}, {"sha": "0232654aaa5242c72ad8e2211f93ad6414ee6f3f", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -9,7 +9,7 @@ use rustc_span::def_id::{DefPathHash, LocalDefId};\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n-/// instead of implementing everything in librustc_middle.\n+/// instead of implementing everything in `rustc_middle`.\n pub trait HashStableContext:\n     rustc_ast::HashStableContext + rustc_target::HashStableContext\n {"}, {"sha": "58c3065240c9495770ebb6d6cf9d7cfc48f78930", "filename": "compiler/rustc_hir/src/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -18,8 +18,8 @@ pub static WEAK_ITEMS_REFS: SyncLazy<StableMap<Symbol, LangItem>> = SyncLazy::ne\n     map\n });\n \n-/// The `check_name` argument avoids the need for `librustc_hir` to depend on\n-/// `librustc_session`.\n+/// The `check_name` argument avoids the need for `rustc_hir` to depend on\n+/// `rustc_session`.\n pub fn link_name<'a, F>(check_name: F, attrs: &'a [ast::Attribute]) -> Option<Symbol>\n where\n     F: Fn(&'a ast::Attribute, Symbol) -> bool"}, {"sha": "25a262d7e482b6e1e77c5c90139da39d81b8444d", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -2,7 +2,7 @@\n //!\n //! - **Type inference.** The type inference code can be found in the `infer` module;\n //!   this code handles low-level equality and subtyping operations. The\n-//!   type check pass in the compiler is found in the `librustc_typeck` crate.\n+//!   type check pass in the compiler is found in the `rustc_typeck` crate.\n //!\n //! For more information about how rustc works, see the [rustc dev guide].\n //!"}, {"sha": "b9781581ff75d2507b46bbd88c0a92bd4499f202", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -1,13 +1,13 @@\n //! Low-level Rust lexer.\n //!\n-//! The idea with `librustc_lexer` is to make a reusable library,\n+//! The idea with `rustc_lexer` is to make a reusable library,\n //! by separating out pure lexing and rustc-specific concerns, like spans,\n //! error reporting, and interning.  So, rustc_lexer operates directly on `&str`,\n //! produces simple tokens which are a pair of type-tag and a bit of original text,\n //! and does not report errors, instead storing them as flags on the token.\n //!\n //! Tokens produced by this lexer are not yet ready for parsing the Rust syntax.\n-//! For that see [`librustc_parse::lexer`], which converts this basic token stream\n+//! For that see [`rustc_parse::lexer`], which converts this basic token stream\n //! into wide tokens used by actual parser.\n //!\n //! The purpose of this crate is to convert raw sources into a labeled sequence\n@@ -17,7 +17,7 @@\n //! The main entity of this crate is the [`TokenKind`] enum which represents common\n //! lexeme types.\n //!\n-//! [`librustc_parse::lexer`]: ../rustc_parse/lexer/index.html\n+//! [`rustc_parse::lexer`]: ../rustc_parse/lexer/index.html\n // We want to be able to build this crate with a stable compiler, so no\n // `#![feature]` attributes should be added.\n "}, {"sha": "563da1598c4fed0a452aac15414545e0297a08f1", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -2280,7 +2280,7 @@ declare_lint! {\n }\n \n declare_lint_pass!(\n-    /// Check for used feature gates in `INCOMPLETE_FEATURES` in `librustc_feature/active.rs`.\n+    /// Check for used feature gates in `INCOMPLETE_FEATURES` in `rustc_feature/src/active.rs`.\n     IncompleteFeatures => [INCOMPLETE_FEATURES]\n );\n "}, {"sha": "b93b25d6b5c9afe610eb4a311a7f6b953091f2cd", "filename": "compiler/rustc_middle/src/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -1,5 +1,5 @@\n //! This module contains `HashStable` implementations for various data types\n-//! from librustc_ast in no particular order.\n+//! from `rustc_ast` in no particular order.\n \n use crate::ich::StableHashingContext;\n "}, {"sha": "3b8a4adfb930aa3d2ddde93b8de23b1361c31fbe", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -46,7 +46,7 @@ static_assert_size!(InterpErrorInfo<'_>, 8);\n /// Packages the kind of error we got from the const code interpreter\n /// up with a Rust-level backtrace of where the error occurred.\n /// Thsese should always be constructed by calling `.into()` on\n-/// a `InterpError`. In `librustc_mir::interpret`, we have `throw_err_*`\n+/// a `InterpError`. In `rustc_mir::interpret`, we have `throw_err_*`\n /// macros for this.\n #[derive(Debug)]\n pub struct InterpErrorInfo<'tcx>(Box<InterpErrorInfoInner<'tcx>>);"}, {"sha": "b0ab0c9ae52cedd18dbe4354e2ebad89ca2f78a1", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -3,7 +3,7 @@\n //! which makes a canonical query by replacing unbound inference\n //! variables and regions, so that results can be reused more broadly.\n //! The providers for the queries defined here can be found in\n-//! `librustc_traits`.\n+//! `rustc_traits`.\n \n use crate::ich::StableHashingContext;\n use crate::infer::canonical::{Canonical, QueryResponse};"}, {"sha": "eb6d163312c83ea1eabd89ecef365fd24c330dbf", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -44,7 +44,7 @@ use std::ops::ControlFlow;\n /// This trait is implemented for every type that can be folded.\n /// Basically, every type that has a corresponding method in `TypeFolder`.\n ///\n-/// To implement this conveniently, use the derive macro located in librustc_macros.\n+/// To implement this conveniently, use the derive macro located in `rustc_macros`.\n pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self;\n     fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {"}, {"sha": "691bfcc98d105674913c4b6cb167c21c9b0e9029", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -80,7 +80,7 @@ impl BoundRegionKind {\n /// Defines the kinds of types.\n ///\n /// N.B., if you change this, you'll probably want to change the corresponding\n-/// AST structure in `librustc_ast/ast.rs` as well.\n+/// AST structure in `rustc_ast/src/ast.rs` as well.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]\n #[derive(HashStable)]\n #[rustc_diagnostic_item = \"TyKind\"]\n@@ -2116,7 +2116,7 @@ impl<'tcx> TyS<'tcx> {\n     ///\n     /// Note that during type checking, we use an inference variable\n     /// to represent the closure kind, because it has not yet been\n-    /// inferred. Once upvar inference (in `src/librustc_typeck/check/upvar.rs`)\n+    /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)\n     /// is complete, that type variable will be unified.\n     pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {\n         match self.kind() {"}, {"sha": "7156612f4730f05d3917bb7b8b2b5e79bda3a27e", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fgraphviz.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -1,5 +1,5 @@\n //! This module provides linkage between RegionInferenceContext and\n-//! librustc_graphviz traits, specialized to attaching borrowck analysis\n+//! `rustc_graphviz` traits, specialized to attaching borrowck analysis\n //! data to rendered labels.\n \n use std::borrow::Cow;"}, {"sha": "bd8dfd678a97b3bbddd8b203dc1542e7737317c6", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -128,7 +128,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     /// Turns simple `rustc_lexer::TokenKind` enum into a rich\n-    /// `librustc_ast::TokenKind`. This turns strings into interned\n+    /// `rustc_ast::TokenKind`. This turns strings into interned\n     /// symbols and runs additional validation.\n     fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {\n         Some(match token {"}, {"sha": "59ef6052a60c0b1bcd272b2f1c0512d6dfb4b0ae", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -26,7 +26,7 @@\n //!   could not be instantiated because the current compilation session\n //!   contained no `DefId` for thing that had been removed.\n //!\n-//! `DepNode` definition happens in `librustc_middle` with the `define_dep_nodes!()` macro.\n+//! `DepNode` definition happens in `rustc_middle` with the `define_dep_nodes!()` macro.\n //! This macro defines the `DepKind` enum and a corresponding `DepConstructor` enum. The\n //! `DepConstructor` enum links a `DepKind` to the parameters that are needed at runtime in order\n //! to construct a valid `DepNode` fingerprint."}, {"sha": "3fdd47e1ecb8e627957770f9f2b851ee6059a45a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -6,7 +6,7 @@\n //! Paths in macros, imports, expressions, types, patterns are resolved here.\n //! Label and lifetime names are resolved here as well.\n //!\n-//! Type-relative name resolution (methods, fields, associated items) happens in `librustc_typeck`.\n+//! Type-relative name resolution (methods, fields, associated items) happens in `rustc_typeck`.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]"}, {"sha": "ca72a89da5a3e597034e10f47c2e207e0a3247dd", "filename": "compiler/rustc_target/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_target%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_target%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2FREADME.md?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -1,4 +1,4 @@\n-`librustc_target` contains some very low-level details that are\n+`rustc_target` contains some very low-level details that are\n specific to different compilation targets and so forth.\n \n For more information about how rustc works, see the [rustc dev guide]."}, {"sha": "b54764b9e323915915c4fac6eac59d542f7d8185", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -28,5 +28,5 @@ pub mod spec;\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n-/// instead of implementing everything in librustc_middle.\n+/// instead of implementing everything in `rustc_middle`.\n pub trait HashStableContext {}"}, {"sha": "f6f42814d3f07cba4f9c19ecc23d99bc50e7ba0a", "filename": "compiler/rustc_trait_selection/src/traits/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0019ca9141d0e397534df87a6a7c4c7ece2646d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs?ref=0019ca9141d0e397534df87a6a7c4c7ece2646d7", "patch": "@@ -3,7 +3,7 @@\n //! which makes a canonical query by replacing unbound inference\n //! variables and regions, so that results can be reused more broadly.\n //! The providers for the queries defined here can be found in\n-//! `librustc_traits`.\n+//! `rustc_traits`.\n \n pub mod dropck_outlives;\n pub mod evaluate_obligation;"}]}