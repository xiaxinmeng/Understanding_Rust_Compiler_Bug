{"sha": "c84b1fee0980493a65880234c96577985fa193e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NGIxZmVlMDk4MDQ5M2E2NTg4MDIzNGM5NjU3Nzk4NWZhMTkzZTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-27T14:14:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Record users of stack_addr and stack_load return values", "tree": {"sha": "b559be43d8251c45c286406201adf2a8dbc2e806", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b559be43d8251c45c286406201adf2a8dbc2e806"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c84b1fee0980493a65880234c96577985fa193e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c84b1fee0980493a65880234c96577985fa193e3", "html_url": "https://github.com/rust-lang/rust/commit/c84b1fee0980493a65880234c96577985fa193e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c84b1fee0980493a65880234c96577985fa193e3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73961709d623cc46ec39458f46a7173e189cda66", "url": "https://api.github.com/repos/rust-lang/rust/commits/73961709d623cc46ec39458f46a7173e189cda66", "html_url": "https://github.com/rust-lang/rust/commit/73961709d623cc46ec39458f46a7173e189cda66"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "2951cd76ef2494d6619efa3d0901b731a989c834", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c84b1fee0980493a65880234c96577985fa193e3/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84b1fee0980493a65880234c96577985fa193e3/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=c84b1fee0980493a65880234c96577985fa193e3", "patch": "@@ -1,3 +1,5 @@\n+use std::collections::HashSet;\n+\n use cranelift_codegen::cursor::{Cursor, FuncCursor};\n use cranelift_codegen::ir::{Opcode, InstructionData, ValueDef};\n use cranelift_codegen::ir::immediates::Offset32;\n@@ -15,9 +17,9 @@ pub(super) fn optimize_function(\n     // Record all stack_addr, stack_load and stack_store instructions. Also record all stack_addr\n     // and stack_load insts whose result is used.\n     let mut stack_addr_insts = SecondaryMap::new();\n-    let mut used_stack_addr_insts = SecondaryMap::new();\n+    let mut stack_addr_insts_users = SecondaryMap::<Inst, HashSet<Inst>>::new();\n     let mut stack_load_insts = SecondaryMap::new();\n-    let mut used_stack_load_insts = SecondaryMap::new();\n+    let mut stack_load_insts_users = SecondaryMap::<Inst, HashSet<Inst>>::new();\n     let mut stack_store_insts = SecondaryMap::new();\n \n     let mut cursor = FuncCursor::new(func);\n@@ -52,8 +54,12 @@ pub(super) fn optimize_function(\n             for &arg in cursor.func.dfg.inst_args(inst) {\n                 if let ValueDef::Result(arg_origin, 0) = cursor.func.dfg.value_def(arg) {\n                     match cursor.func.dfg[arg_origin].opcode() {\n-                        Opcode::StackAddr => used_stack_addr_insts[arg_origin] = true,\n-                        Opcode::StackLoad => used_stack_load_insts[arg_origin] = true,\n+                        Opcode::StackAddr => {\n+                            stack_addr_insts_users[arg_origin].insert(inst);\n+                        }\n+                        Opcode::StackLoad => {\n+                            stack_load_insts_users[arg_origin].insert(inst);\n+                        }\n                         _ => {}\n                     }\n                 }\n@@ -62,34 +68,35 @@ pub(super) fn optimize_function(\n     }\n \n     println!(\n-        \"stack_addr: [{}] ([{}] used)\\nstack_load: [{}] ([{}] used)\\nstack_store: [{}]\",\n+        \"{}:\\nstack_addr: [{}] ({{{}}} used)\\nstack_load: [{}] ([{{{}}}] used)\\nstack_store: [{}]\",\n+        name,\n         bool_secondary_map_to_string(&stack_addr_insts),\n-        bool_secondary_map_to_string(&used_stack_addr_insts),\n+        usage_secondary_map_to_string(&stack_addr_insts_users),\n         bool_secondary_map_to_string(&stack_load_insts),\n-        bool_secondary_map_to_string(&used_stack_load_insts),\n+        usage_secondary_map_to_string(&stack_load_insts_users),\n         bool_secondary_map_to_string(&stack_store_insts),\n     );\n \n-    for inst in used_stack_addr_insts.keys().filter(|&inst| used_stack_addr_insts[inst]) {\n+    for inst in stack_addr_insts_users.keys().filter(|&inst| !stack_addr_insts_users[inst].is_empty()) {\n         assert!(stack_addr_insts[inst]);\n     }\n \n     // Replace all unused stack_addr instructions with nop.\n     for inst in stack_addr_insts.keys() {\n-        if stack_addr_insts[inst] && !used_stack_addr_insts[inst] {\n+        if stack_addr_insts[inst] && stack_addr_insts_users[inst].is_empty() {\n             func.dfg.detach_results(inst);\n             func.dfg.replace(inst).nop();\n             stack_addr_insts[inst] = false;\n         }\n     }\n \n-    for inst in used_stack_load_insts.keys().filter(|&inst| used_stack_load_insts[inst]) {\n+    for inst in stack_load_insts_users.keys().filter(|&inst| !stack_load_insts_users[inst].is_empty()) {\n         assert!(stack_load_insts[inst]);\n     }\n \n     // Replace all unused stack_load instructions with nop.\n     for inst in stack_load_insts.keys() {\n-        if stack_load_insts[inst] && !used_stack_load_insts[inst] {\n+        if stack_load_insts[inst] && !stack_addr_insts_users[inst].is_empty() {\n             func.dfg.detach_results(inst);\n             func.dfg.replace(inst).nop();\n             stack_load_insts[inst] = false;\n@@ -138,7 +145,7 @@ pub(super) fn optimize_function(\n         }\n     }\n \n-    println!(\"{:?}\\n\", stack_slot_usage_map);\n+    println!(\"stack slot usage: {{{}}}\", usage_secondary_map_to_string(&stack_slot_usage_map));\n \n     for (stack_slot, users) in stack_slot_usage_map.iter_mut() {\n         let mut is_addr_leaked = false;\n@@ -186,6 +193,8 @@ pub(super) fn optimize_function(\n             }\n         }\n     }\n+\n+    println!();\n }\n \n fn combine_stack_addr_with_load_store(func: &mut Function) {\n@@ -250,3 +259,20 @@ fn bool_secondary_map_to_string<E>(map: &SecondaryMap<E, bool>) -> String\n         .collect::<Vec<String>>()\n         .join(\", \")\n }\n+\n+fn usage_secondary_map_to_string<E>(map: &SecondaryMap<E, HashSet<Inst>>) -> String\n+    where E: cranelift_codegen::entity::EntityRef + std::fmt::Display,\n+{\n+    map\n+        .keys()\n+        .filter_map(|inst| {\n+            // EntitySet::keys returns all possible entities until the last entity inserted.\n+            if !map[inst].is_empty() {\n+                Some(format!(\"{}: {:?}\", inst, map[inst]))\n+            } else {\n+                None\n+            }\n+        })\n+        .collect::<Vec<String>>()\n+        .join(\", \")\n+}"}]}