{"sha": "c9a17ef174522ebbc75e7dfa6a50d73d1b610fee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YTE3ZWYxNzQ1MjJlYmJjNzVlN2RmYTZhNTBkNzNkMWI2MTBmZWU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-27T16:42:31Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-02T13:38:57Z"}, "message": "incr.comp.: Add some logging to DepGraph::try_mark_green().", "tree": {"sha": "a72ae2f05be29c931accde6c5279dc94ea7fbdfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a72ae2f05be29c931accde6c5279dc94ea7fbdfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9a17ef174522ebbc75e7dfa6a50d73d1b610fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a17ef174522ebbc75e7dfa6a50d73d1b610fee", "html_url": "https://github.com/rust-lang/rust/commit/c9a17ef174522ebbc75e7dfa6a50d73d1b610fee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9a17ef174522ebbc75e7dfa6a50d73d1b610fee/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1994bd27bd3eea840c0a466f6366259f2d2318f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1994bd27bd3eea840c0a466f6366259f2d2318f", "html_url": "https://github.com/rust-lang/rust/commit/e1994bd27bd3eea840c0a466f6366259f2d2318f"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "36236ff25b0cf3eca68352f0c262baf162a01316", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9a17ef174522ebbc75e7dfa6a50d73d1b610fee/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a17ef174522ebbc75e7dfa6a50d73d1b610fee/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=c9a17ef174522ebbc75e7dfa6a50d73d1b610fee", "patch": "@@ -347,7 +347,7 @@ impl fmt::Debug for DepNode {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:?}\", self.kind)?;\n \n-        if !self.kind.has_params() {\n+        if !self.kind.has_params() && !self.kind.is_anon() {\n             return Ok(());\n         }\n \n@@ -356,14 +356,14 @@ impl fmt::Debug for DepNode {\n         ::ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {\n                 if let Some(def_id) = self.extract_def_id(tcx) {\n-                    write!(f, \"{}\", tcx.item_path_str(def_id))?;\n+                    write!(f, \"{}\", tcx.def_path(def_id).to_string(tcx))?;\n                 } else if let Some(ref s) = tcx.dep_graph.dep_node_debug_str(*self) {\n                     write!(f, \"{}\", s)?;\n                 } else {\n-                    write!(f, \"{:?}\", self.hash)?;\n+                    write!(f, \"{}\", self.hash)?;\n                 }\n             } else {\n-                write!(f, \"{:?}\", self.hash)?;\n+                write!(f, \"{}\", self.hash)?;\n             }\n             Ok(())\n         })?;"}, {"sha": "1fccde12d18ab713b9d8639a23759e0bd6f64720", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c9a17ef174522ebbc75e7dfa6a50d73d1b610fee/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a17ef174522ebbc75e7dfa6a50d73d1b610fee/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=c9a17ef174522ebbc75e7dfa6a50d73d1b610fee", "patch": "@@ -429,6 +429,7 @@ impl DepGraph {\n                           tcx: TyCtxt,\n                           dep_node: &DepNode)\n                           -> Option<DepNodeIndex> {\n+        debug!(\"try_mark_green({:?}) - BEGIN\", dep_node);\n         let data = self.data.as_ref().unwrap();\n \n         debug_assert!(!data.colors.borrow().contains_key(dep_node));\n@@ -440,6 +441,7 @@ impl DepGraph {\n             // eagerly marked as either red/green before any queries are\n             // executed.\n             debug_assert!(dep_node.extract_def_id(tcx).is_none());\n+            debug!(\"try_mark_green({:?}) - END - DepNode is deleted input\", dep_node);\n             return None;\n         }\n \n@@ -454,6 +456,8 @@ impl DepGraph {\n             None => {\n                 // This DepNode did not exist in the previous compilation session,\n                 // so we cannot mark it as green.\n+                debug!(\"try_mark_green({:?}) - END - DepNode does not exist in \\\n+                        current compilation session anymore\", dep_node);\n                 return None\n             }\n         };\n@@ -469,35 +473,56 @@ impl DepGraph {\n                     // This dependency has been marked as green before, we are\n                     // still fine and can continue with checking the other\n                     // dependencies.\n+                    debug!(\"try_mark_green({:?}) --- found dependency {:?} to \\\n+                            be immediately green\", dep_node, dep_dep_node);\n                     current_deps.push(node_index);\n                 }\n                 Some(DepNodeColor::Red) => {\n                     // We found a dependency the value of which has changed\n                     // compared to the previous compilation session. We cannot\n                     // mark the DepNode as green and also don't need to bother\n                     // with checking any of the other dependencies.\n+                    debug!(\"try_mark_green({:?}) - END - dependency {:?} was \\\n+                            immediately red\", dep_node, dep_dep_node);\n                     return None\n                 }\n                 None => {\n                     if dep_dep_node.kind.is_input() {\n                         // This input does not exist anymore.\n                         debug_assert!(dep_dep_node.extract_def_id(tcx).is_none());\n+                        debug!(\"try_mark_green({:?}) - END - dependency {:?} \\\n+                                was deleted input\", dep_node, dep_dep_node);\n                         return None;\n                     }\n \n+                    debug!(\"try_mark_green({:?}) --- state of dependency {:?} \\\n+                            is unknown, trying to mark it green\", dep_node,\n+                            dep_dep_node);\n+\n                     // We don't know the state of this dependency. Let's try to\n                     // mark it green.\n                     if let Some(node_index) = self.try_mark_green(tcx, dep_dep_node) {\n+                        debug!(\"try_mark_green({:?}) --- managed to MARK \\\n+                                dependency {:?} as green\", dep_node, dep_dep_node);\n                         current_deps.push(node_index);\n                     } else {\n                         // We failed to mark it green, so we try to force the query.\n+                        debug!(\"try_mark_green({:?}) --- trying to force \\\n+                                dependency {:?}\", dep_node, dep_dep_node);\n                         if ::ty::maps::force_from_dep_node(tcx, dep_dep_node) {\n                             let dep_dep_node_color = data.colors.borrow().get(dep_dep_node).cloned();\n                             match dep_dep_node_color {\n                                 Some(DepNodeColor::Green(node_index)) => {\n+                                    debug!(\"try_mark_green({:?}) --- managed to \\\n+                                            FORCE dependency {:?} to green\",\n+                                            dep_node, dep_dep_node);\n                                     current_deps.push(node_index);\n                                 }\n                                 Some(DepNodeColor::Red) => {\n+                                    debug!(\"try_mark_green({:?}) - END - \\\n+                                            dependency {:?} was red after forcing\",\n+                                           dep_node,\n+                                           dep_dep_node);\n                                     return None\n                                 }\n                                 None => {\n@@ -507,6 +532,8 @@ impl DepGraph {\n                             }\n                         } else {\n                             // The DepNode could not be forced.\n+                            debug!(\"try_mark_green({:?}) - END - dependency {:?} \\\n+                                    could not be forced\", dep_node, dep_dep_node);\n                             return None\n                         }\n                     }\n@@ -553,6 +580,7 @@ impl DepGraph {\n                     .insert(*dep_node, DepNodeColor::Green(node_index))\n                     .is_none());\n \n+        debug!(\"try_mark_green({:?}) - END - successfully marked as green\", dep_node.kind);\n         Some(node_index)\n     }\n "}]}