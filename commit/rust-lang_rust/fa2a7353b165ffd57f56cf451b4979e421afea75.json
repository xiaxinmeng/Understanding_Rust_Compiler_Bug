{"sha": "fa2a7353b165ffd57f56cf451b4979e421afea75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMmE3MzUzYjE2NWZmZDU3ZjU2Y2Y0NTFiNDk3OWU0MjFhZmVhNzU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-14T01:21:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-14T01:21:20Z"}, "message": "Merge pull request #54 from oli-obk/clippy\n\nClippy and `assume` intrinsic implementation", "tree": {"sha": "e59c00bd30cf3d293c811fad4e533b78ab8a9ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59c00bd30cf3d293c811fad4e533b78ab8a9ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa2a7353b165ffd57f56cf451b4979e421afea75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2a7353b165ffd57f56cf451b4979e421afea75", "html_url": "https://github.com/rust-lang/rust/commit/fa2a7353b165ffd57f56cf451b4979e421afea75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa2a7353b165ffd57f56cf451b4979e421afea75/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4051b0e36a67049ee8a381f239afc519c82a47d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4051b0e36a67049ee8a381f239afc519c82a47d6", "html_url": "https://github.com/rust-lang/rust/commit/4051b0e36a67049ee8a381f239afc519c82a47d6"}, {"sha": "23eb8a5cf2053f65d629e0ea6a65aa9560a2f708", "url": "https://api.github.com/repos/rust-lang/rust/commits/23eb8a5cf2053f65d629e0ea6a65aa9560a2f708", "html_url": "https://github.com/rust-lang/rust/commit/23eb8a5cf2053f65d629e0ea6a65aa9560a2f708"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "5624734e888abd7befc99a65f333ae34d78419d9", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa2a7353b165ffd57f56cf451b4979e421afea75/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2a7353b165ffd57f56cf451b4979e421afea75/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=fa2a7353b165ffd57f56cf451b4979e421afea75", "patch": "@@ -43,6 +43,7 @@ pub enum EvalError<'tcx> {\n     CalledClosureAsFunction,\n     VtableForArgumentlessMethod,\n     ModifiedConstantMemory,\n+    AssumptionNotHeld,\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -97,6 +98,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"tried to call a vtable function without arguments\",\n             EvalError::ModifiedConstantMemory =>\n                 \"tried to modify constant memory\",\n+            EvalError::AssumptionNotHeld =>\n+                \"`assume` argument was false\"\n         }\n     }\n "}, {"sha": "7eaf92c9b5ace5f51c0a9c766f9893177d9a1620", "filename": "src/interpreter/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa2a7353b165ffd57f56cf451b4979e421afea75/src%2Finterpreter%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2a7353b165ffd57f56cf451b4979e421afea75/src%2Finterpreter%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstep.rs?ref=fa2a7353b165ffd57f56cf451b4979e421afea75", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let mir = self.mir();\n         let basic_block = &mir.basic_blocks()[block];\n \n-        if let Some(ref stmt) = basic_block.statements.get(stmt_id) {\n+        if let Some(stmt) = basic_block.statements.get(stmt_id) {\n             let mut new = Ok(0);\n             ConstantExtractor {\n                 span: stmt.source_info.span,"}, {"sha": "23396e0694e1ba1d76114d998917edbad6fae9ea", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa2a7353b165ffd57f56cf451b4979e421afea75/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2a7353b165ffd57f56cf451b4979e421afea75/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=fa2a7353b165ffd57f56cf451b4979e421afea75", "patch": "@@ -284,8 +284,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"sub_with_overflow\" => self.intrinsic_with_overflow(mir::BinOp::Sub, &args[0], &args[1], dest, dest_layout)?,\n             \"mul_with_overflow\" => self.intrinsic_with_overflow(mir::BinOp::Mul, &args[0], &args[1], dest, dest_layout)?,\n \n-            // FIXME: turn into an assertion to catch wrong `assume` that would cause UB in llvm\n-            \"assume\" => {}\n+            \"assume\" => {\n+                if !self.memory.read_bool(args_ptrs[0])? {\n+                    return Err(EvalError::AssumptionNotHeld);\n+                }\n+            }\n \n             \"copy_nonoverlapping\" => {\n                 let elem_ty = substs.type_at(0);"}, {"sha": "726c6ce3913a308e7f411f9c2ebbc097b52f494a", "filename": "src/interpreter/vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa2a7353b165ffd57f56cf451b4979e421afea75/src%2Finterpreter%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2a7353b165ffd57f56cf451b4979e421afea75/src%2Finterpreter%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fvtable.rs?ref=fa2a7353b165ffd57f56cf451b4979e421afea75", "patch": "@@ -20,8 +20,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         debug!(\"get_vtable(trait_ref={:?})\", trait_ref);\n \n-        let methods: Vec<_> = traits::supertraits(tcx, trait_ref.clone()).flat_map(|trait_ref| {\n-            match self.fulfill_obligation(trait_ref.clone()) {\n+        let methods: Vec<_> = traits::supertraits(tcx, trait_ref).flat_map(|trait_ref| {\n+            match self.fulfill_obligation(trait_ref) {\n                 // Should default trait error here?\n                 traits::VtableDefaultImpl(_) |\n                 traits::VtableBuiltin(_) => {\n@@ -164,7 +164,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // method could then never be called, so we do not want to\n                 // try and trans it, in that case. Issue #23435.\n                 if mth.is_provided {\n-                    let predicates = mth.method.predicates.predicates.subst(self.tcx, &mth.substs);\n+                    let predicates = mth.method.predicates.predicates.subst(self.tcx, mth.substs);\n                     if !self.normalize_and_test_predicates(predicates) {\n                         debug!(\"get_vtable_methods: predicates do not hold\");\n                         return None;"}, {"sha": "79b4b8b64d61a5e4698536397ed57c06688eb2ab", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa2a7353b165ffd57f56cf451b4979e421afea75/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2a7353b165ffd57f56cf451b4979e421afea75/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=fa2a7353b165ffd57f56cf451b4979e421afea75", "patch": "@@ -314,7 +314,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             Some(&FunctionDefinition {\n                 def_id,\n                 kind: FunctionKind::Closure { ref substs, ref ty }\n-            }) => Ok((def_id, substs.clone(), ty.clone())),\n+            }) => Ok((def_id, *substs, ty.clone())),\n             Some(&FunctionDefinition {\n                 kind: FunctionKind::Function { .. }, ..\n             }) => Err(EvalError::CalledClosureAsFunction),"}, {"sha": "69758a5d7fe8ceb8082ab9fbd5e9d7f9606f31e9", "filename": "tests/compile-fail/assume.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa2a7353b165ffd57f56cf451b4979e421afea75/tests%2Fcompile-fail%2Fassume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2a7353b165ffd57f56cf451b4979e421afea75/tests%2Fcompile-fail%2Fassume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassume.rs?ref=fa2a7353b165ffd57f56cf451b4979e421afea75", "patch": "@@ -0,0 +1,10 @@\n+#![feature(core_intrinsics)]\n+\n+fn main() {\n+    let x = 5;\n+    unsafe {\n+        std::intrinsics::assume(x < 10);\n+        std::intrinsics::assume(x > 1);\n+        std::intrinsics::assume(x > 42); //~ ERROR: `assume` argument was false\n+    }\n+}"}]}