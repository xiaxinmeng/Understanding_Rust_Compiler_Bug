{"sha": "6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjlhOThlYmRlZThjZTAxNTEwZjVkNDMwN2RkYjc3MWM4Y2IwZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-28T03:28:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-28T03:28:04Z"}, "message": "Auto merge of #77008 - fortanix:raoul/lvi-tests, r=Mark-Simulacrum\n\nLVI hardening tests\n\nMitigating the speculative execution LVI attack against SGX enclaves requires compiler changes (i.e., adding lfences). This pull requests adds various tests to check if this happens correctly.", "tree": {"sha": "90c8ee36f0e707a658f46bea9fd4de5727615b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c8ee36f0e707a658f46bea9fd4de5727615b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "html_url": "https://github.com/rust-lang/rust/commit/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7ee7cc0ddf46a52f53a8a141cd0747f829999a", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7ee7cc0ddf46a52f53a8a141cd0747f829999a", "html_url": "https://github.com/rust-lang/rust/commit/db7ee7cc0ddf46a52f53a8a141cd0747f829999a"}, {"sha": "159d11fb069fca88056bc1b8194d520489e3e921", "url": "https://api.github.com/repos/rust-lang/rust/commits/159d11fb069fca88056bc1b8194d520489e3e921", "html_url": "https://github.com/rust-lang/rust/commit/159d11fb069fca88056bc1b8194d520489e3e921"}], "stats": {"total": 521, "additions": 519, "deletions": 2}, "files": [{"sha": "6bba00ee85e144fe115d737a2e643d508cfadcc6", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -630,7 +630,14 @@ impl Step for TestHelpers {\n         if builder.config.dry_run {\n             return;\n         }\n-        let target = self.target;\n+        // The x86_64-fortanix-unknown-sgx target doesn't have a working C\n+        // toolchain. However, some x86_64 ELF objects can be linked\n+        // without issues. Use this hack to compile the test helpers.\n+        let target = if self.target == \"x86_64-fortanix-unknown-sgx\" {\n+            TargetSelection::from_user(\"x86_64-unknown-linux-gnu\")\n+        } else {\n+            self.target\n+        };\n         let dst = builder.test_helpers_out(target);\n         let src = builder.src.join(\"src/test/auxiliary/rust_test_helpers.c\");\n         if up_to_date(&src, &dst.join(\"librust_test_helpers.a\")) {\n@@ -654,7 +661,6 @@ impl Step for TestHelpers {\n             }\n             cfg.compiler(builder.cc(target));\n         }\n-\n         cfg.cargo_metadata(false)\n             .out_dir(&dst)\n             .target(&target.triple)"}, {"sha": "79d82cf70d381374af922e500e62f26b1cab45ca", "filename": "src/test/assembly/x86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,17 @@\n+// Test LVI load hardening on SGX enclave code\n+\n+// assembly-output: emit-asm\n+// compile-flags: --crate-type staticlib\n+// only-x86_64-fortanix-unknown-sgx\n+\n+#[no_mangle]\n+pub extern fn plus_one(r: &mut u64) {\n+    *r = *r + 1;\n+}\n+\n+// CHECK: plus_one\n+// CHECK: lfence\n+// CHECK-NEXT: addq\n+// CHECK: popq [[REGISTER:%[a-z]+]]\n+// CHECK-NEXT: lfence\n+// CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "a21ef6b75894e441a60c2f965d030be0d486d99c", "filename": "src/test/assembly/x86_64-fortanix-unknown-sgx-lvi-generic-ret.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-ret.rs?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,12 @@\n+// Test LVI ret hardening on generic rust code\n+\n+// assembly-output: emit-asm\n+// compile-flags: --crate-type staticlib\n+// only-x86_64-fortanix-unknown-sgx\n+\n+#[no_mangle]\n+pub extern fn myret() {}\n+// CHECK: myret:\n+// CHECK: popq [[REGISTER:%[a-z]+]]\n+// CHECK-NEXT: lfence\n+// CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "7e440169edbb1e4f309630135844901bdfae8326", "filename": "src/test/assembly/x86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,41 @@\n+// Test LVI load hardening on SGX inline assembly code\n+\n+// assembly-output: emit-asm\n+// compile-flags: --crate-type staticlib\n+// only-x86_64-fortanix-unknown-sgx\n+\n+#![feature(asm)]\n+\n+#[no_mangle]\n+pub extern fn get(ptr: *const u64) -> u64 {\n+    let value : u64;\n+    unsafe {\n+        asm!(\".start_inline_asm:\",\n+            \"mov {}, [{}]\",\n+            \".end_inline_asm:\",\n+            out(reg) value,\n+            in(reg) ptr);\n+    }\n+    value\n+}\n+\n+// CHECK: get\n+// CHECK: .start_inline_asm\n+// CHECK-NEXT: movq\n+// CHECK-NEXT: lfence\n+// CHECK-NEXT: .end_inline_asm\n+\n+#[no_mangle]\n+pub extern fn myret() {\n+    unsafe {\n+        asm!(\".start_myret_inline_asm:\n+            ret\n+            .end_myret_inline_asm:\");\n+    }\n+}\n+\n+// CHECK: myret\n+// CHECK: .start_myret_inline_asm\n+// CHECK-NEXT: shlq $0, (%rsp)\n+// CHECK-NEXT: lfence\n+// CHECK-NEXT: retq"}, {"sha": "6a04d343910357dcf494cca7326f6a997fbef048", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/Makefile", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2FMakefile?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,23 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+#only-x86_64-fortanix-unknown-sgx\n+\n+# For cargo setting\n+export RUSTC := $(RUSTC_ORIGINAL)\n+export LD_LIBRARY_PATH := $(HOST_RPATH_DIR)\n+# We need to be outside of 'src' dir in order to run cargo\n+export WORK_DIR := $(TMPDIR)\n+export TEST_DIR := $(shell pwd)\n+\n+## clean up unused env variables which might cause harm.\n+unexport RUSTC_LINKER\n+unexport RUSTC_BOOTSTRAP\n+unexport RUST_BUILD_STAGE\n+unexport RUST_TEST_THREADS\n+unexport RUST_TEST_TMPDIR\n+unexport AR\n+unexport CC\n+unexport CXX\n+\n+all:\n+\tbash script.sh"}, {"sha": "e839c200bbb96a5feb5399cfba92b5ff3f5293c6", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cc_plus_one_asm.checks", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,8 @@\n+CHECK: cc_plus_one_asm\n+CHECK-NEXT: movl\n+CHECK-NEXT: lfence\n+CHECK-NEXT: inc\n+CHECK-NEXT: notq (%rsp)\n+CHECK-NEXT: notq (%rsp)\n+CHECK-NEXT: lfence\n+CHECK-NEXT: retq"}, {"sha": "b93b33afb3fc45aa2c2b31ed0cfa4d76f5ae329c", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cc_plus_one_c.checks", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_c.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_c.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_c.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,6 @@\n+CHECK: cc_plus_one_c\n+CHECK:      lfence\n+CHECK:      popq\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "d1fae3d495fb1254c023da523dd202cdd940d244", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cc_plus_one_c_asm.checks", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_c_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_c_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_c_asm.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,15 @@\n+CHECK: cc_plus_one_c_asm\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK-NEXT: incl\n+CHECK-NEXT: jmp\n+CHECK-NEXT: shlq    $0, (%rsp)\n+CHECK-NEXT: lfence\n+CHECK-NEXT: retq\n+CHECK:      popq\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "f96f152c02fcc7a64a4e9605b1a32724f5fb7f06", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cc_plus_one_cxx.checks", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_cxx.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_cxx.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_cxx.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,6 @@\n+CHECK: cc_plus_one_cxx\n+CHECK:      lfence\n+CHECK:      popq\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "e704bf41724343b9b23f3136806739a28240f153", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cc_plus_one_cxx_asm.checks", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_cxx_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_cxx_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_cxx_asm.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,16 @@\n+CHECK: cc_plus_one_cxx_asm\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      movl\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK-NEXT: incl\n+CHECK-NEXT: jmp     0x{{[[:xdigit:]]+}} <cc_plus_one_cxx_asm+0x{{[[:xdigit:]]+}}>\n+CHECK-NEXT: shlq    $0, (%rsp)\n+CHECK-NEXT: lfence\n+CHECK-NEXT: retq\n+CHECK:      popq\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "78b18ccbfcb31f0e742b64ffc8bedf661f17356c", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cmake_plus_one_asm.checks", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_asm.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,7 @@\n+CHECK: cmake_plus_one_asm\n+CHECK-NEXT: movl\n+CHECK-NEXT: lfence\n+CHECK-NEXT: incl\n+CHECK-NEXT: shlq    $0, (%rsp)\n+CHECK-NEXT: lfence\n+CHECK-NEXT: retq"}, {"sha": "f551356b2ff81dcffb5cb1670057b89fe49aa3fc", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cmake_plus_one_c.checks", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,6 @@\n+CHECK: cmake_plus_one_c\n+CHECK:      lfence\n+CHECK:      popq\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "87c806f137a94493ca8f57d51b1415715872ff79", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cmake_plus_one_c_asm.checks", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c_asm.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,16 @@\n+CHECK: cmake_plus_one_c_asm\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      movl\n+CHECK:      lfence\n+CHECK-NEXT: incl\n+CHECK-NEXT: jmp     0x{{[[:xdigit:]]+}} <cmake_plus_one_c_asm+0x{{[[:xdigit:]]+}}>\n+CHECK-NEXT: shlq    $0, (%rsp)\n+CHECK-NEXT: lfence\n+CHECK-NEXT: retq\n+CHECK:      popq\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "4b66cc5bc83b5136d7db5856dac5e75248e9617b", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cmake_plus_one_c_global_asm.checks", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c_global_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c_global_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_c_global_asm.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,2 @@\n+CHECK: cmake_plus_one_c_global_asm\n+CHECK: lfence"}, {"sha": "0f403e0203c122508c7a2c418630e929942ad363", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cmake_plus_one_cxx.checks", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,6 @@\n+CHECK: cmake_plus_one_cxx\n+CHECK:      lfence\n+CHECK:      popq\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "9cac8711ea84bcfb973d31bc882b3104ccb67fb2", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cmake_plus_one_cxx_asm.checks", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx_asm.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,16 @@\n+CHECK: cmake_plus_one_cxx_asm\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      movl\n+CHECK:      lfence\n+CHECK-NEXT: incl\n+CHECK-NEXT: jmp     0x{{[[:xdigit:]]+}} <cmake_plus_one_cxx_asm+0x{{[[:xdigit:]]+}}>\n+CHECK-NEXT: shlq    $0, (%rsp)\n+CHECK-NEXT: lfence\n+CHECK-NEXT: retq\n+CHECK:      popq\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "d4a3d4479014cf7269fc92576be2dbd312793b1c", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/cmake_plus_one_cxx_global_asm.checks", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx_global_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx_global_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcmake_plus_one_cxx_global_asm.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,2 @@\n+CHECK: cmake_plus_one_cxx_global_asm\n+CHECK: lfence"}, {"sha": "89490686584d57657bf639f37f072285f784f967", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/Cargo.toml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2FCargo.toml?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,13 @@\n+[package]\n+name = \"enclave\"\n+version = \"0.1.0\"\n+authors = [\"Raoul Strackx <raoul.strackx@fortanix.com>\"]\n+edition = \"2018\"\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]\n+\n+[build-dependencies]\n+cc = \"1.0\"\n+cmake = \"0.1\""}, {"sha": "3a7aa1be868c9e919e5acad0337addce73ca4011", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/build.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Fbuild.rs?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,30 @@\n+fn main() {\n+    cc::Build::new()\n+        .file(\"foo.c\")\n+        .compile(\"foo_c\");\n+\n+    cc::Build::new()\n+        .file(\"foo_asm.s\")\n+        .compile(\"foo_asm\");\n+\n+    cc::Build::new()\n+        .cpp(true)\n+        .cpp_set_stdlib(None)\n+        .file(\"foo_cxx.cpp\")\n+        .compile(\"foo_cxx\");\n+\n+    // When the cmake crate detects the clang compiler, it passes the\n+    //  \"--target\" argument to the linker which subsequently fails. The\n+    //  `CMAKE_C_COMPILER_FORCED` option makes sure that `cmake` does not\n+    //  tries to test the compiler. From version 3.6 the option\n+    //  `CMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY` can be used\n+    //  https://cmake.org/cmake/help/v3.5/module/CMakeForceCompiler.html\n+    let dst = cmake::Config::new(\"libcmake_foo\")\n+                .build_target(\"cmake_foo\")\n+                .define(\"CMAKE_C_COMPILER_FORCED\", \"1\")\n+                .define(\"CMAKE_CXX_COMPILER_FORCED\", \"1\")\n+                .define(\"CMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY\", \"1\")\n+                .build();\n+    println!(\"cargo:rustc-link-search=native={}/build/\", dst.display());\n+    println!(\"cargo:rustc-link-lib=static=cmake_foo\");\n+}"}, {"sha": "dd76d4f303a9545a22320b2d04417176a0f13826", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/foo.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo.c?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,18 @@\n+int cc_plus_one_c(int *arg) {\n+    return *arg + 1;\n+}\n+\n+int cc_plus_one_c_asm(int *arg) {\n+    int value = 0;\n+\n+    asm volatile ( \"    movl (%1), %0\\n\"\n+                   \"    inc %0\\n\"\n+                   \"    jmp 1f\\n\"\n+                   \"    retq\\n\"  // never executed, but a shortcut to determine how\n+                                 // the assembler deals with `ret` instructions\n+                   \"1:\\n\"\n+                   : \"=r\"(value)\n+                   : \"r\"(arg) );\n+\n+    return value;\n+}"}, {"sha": "6d56214e87ed9dc79adf20edddf6f2ee4fb993c5", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/foo_asm.s", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo_asm.s", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo_asm.s", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo_asm.s?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,7 @@\n+    .text\n+    .global cc_plus_one_asm\n+    .type cc_plus_one_asm, @function\n+cc_plus_one_asm:\n+    movl (%rdi), %eax\n+    inc %eax\n+    retq"}, {"sha": "ac6f64ac413d0d2f3b44f971f67178f9871191f8", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/foo_cxx.cpp", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo_cxx.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo_cxx.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo_cxx.cpp?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,21 @@\n+extern \"C\" int cc_plus_one_cxx(int *arg);\n+extern \"C\" int cc_plus_one_cxx_asm(int *arg);\n+\n+int cc_plus_one_cxx(int *arg) {\n+    return *arg + 1;\n+}\n+\n+int cc_plus_one_cxx_asm(int *arg) {\n+    int value = 0;\n+\n+    asm volatile ( \"    movl (%1), %0\\n\"\n+                   \"    inc %0\\n\"\n+                   \"    jmp 1f\\n\"\n+                   \"    retq\\n\"  // never executed, but a shortcut to determine how\n+                                 // the assembler deals with `ret` instructions\n+                   \"1:\\n\"\n+                   : \"=r\"(value)\n+                   : \"r\"(arg) );\n+\n+    return value;\n+}"}, {"sha": "27cdf2ecf826d08400494c5d4663ce84968cca8b", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/CMakeLists.txt", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2FCMakeLists.txt", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2FCMakeLists.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2FCMakeLists.txt?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,33 @@\n+enable_language(C CXX ASM)\n+\n+set(C_SOURCES\n+    src/foo.c\n+    )\n+\n+set_source_files_properties(${C_SOURCES}\n+                            PROPERTIES\n+                            LANGUAGE C)\n+\n+set(CXX_SOURCES\n+    src/foo_cxx.cpp\n+    )\n+\n+set_source_files_properties(${CXX_SOURCES}\n+                            PROPERTIES\n+                            LANGUAGE CXX)\n+\n+set(ASM_SOURCES\n+    src/foo_asm.s\n+    )\n+\n+set_source_files_properties(${ASM_SOURCES}\n+                            PROPERTIES\n+                            LANGUAGE ASM)\n+\n+set(SOURCES\n+    ${C_SOURCES}\n+    ${CXX_SOURCES}\n+    ${ASM_SOURCES})\n+        \n+add_library(cmake_foo STATIC\n+    ${SOURCES})"}, {"sha": "c3b731a2d50966696400419cf046b77ecb00b44c", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/src/foo.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo.c?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,26 @@\n+int cmake_plus_one_c(int *arg) {\n+    return *arg + 1;\n+}\n+\n+int cmake_plus_one_c_asm(int *arg) {\n+    int value = 0;\n+\n+    asm volatile ( \"    movl (%1), %0\\n\"\n+                   \"    inc %0\\n\"\n+                   \"    jmp 1f\\n\"\n+                   \"    retq\\n\"  // never executed, but a shortcut to determine how\n+                                 // the assembler deals with `ret` instructions\n+                   \"1:\\n\"\n+                   : \"=r\"(value)\n+                   : \"r\"(arg) );\n+\n+    return value;\n+}\n+\n+asm(\".text\\n\"\n+\"    .global cmake_plus_one_c_global_asm\\n\"\n+\"    .type cmake_plus_one_c_global_asm, @function\\n\"\n+\"cmake_plus_one_c_global_asm:\\n\"\n+\"    movl (%rdi), %eax\\n\"\n+\"    inc %eax\\n\"\n+\"    retq\\n\" );"}, {"sha": "64b6b430eeaa1cdb0972ce8704d12c40ab9c39eb", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/src/foo_asm.s", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo_asm.s", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo_asm.s", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo_asm.s?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,7 @@\n+    .text\n+    .global cmake_plus_one_asm\n+    .type cmake_plus_one_asm, @function\n+cmake_plus_one_asm:\n+    movl (%rdi), %eax\n+    inc %eax\n+    retq"}, {"sha": "824e2afebcc78cd3cc01b9fbdb5089fa7f92f58e", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/src/foo_cxx.cpp", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo_cxx.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo_cxx.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo_cxx.cpp?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,29 @@\n+extern \"C\" int cmake_plus_one_cxx(int *arg);\n+extern \"C\" int cmake_plus_one_cxx_asm(int *arg);\n+\n+int cmake_plus_one_cxx(int *arg) {\n+    return *arg + 1;\n+}\n+\n+int cmake_plus_one_cxx_asm(int *arg) {\n+    int value = 0;\n+\n+    asm volatile ( \"    movl (%1), %0\\n\"\n+                   \"    inc %0\\n\"\n+                   \"    jmp 1f\\n\"\n+                   \"    retq\\n\"  // never executed, but a shortcut to determine how\n+                                 // the assembler deals with `ret` instructions\n+                   \"1:\\n\"\n+                   : \"=r\"(value)\n+                   : \"r\"(arg) );\n+\n+    return value;\n+}\n+\n+asm(\".text\\n\"\n+\"    .global cmake_plus_one_cxx_global_asm\\n\"\n+\"    .type cmake_plus_one_cxx_global_asm, @function\\n\"\n+\"cmake_plus_one_cxx_global_asm:\\n\"\n+\"    movl (%rdi), %eax\\n\"\n+\"    inc %eax\\n\"\n+\"    retq\\n\" );"}, {"sha": "8e91a8d842c6247575ec2090788f0bf86a7d35f5", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/src/main.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Fsrc%2Fmain.rs?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,48 @@\n+#![feature(global_asm)]\n+\n+global_asm!( r#\"\n+    .text\n+    .global rust_plus_one_global_asm\n+    .type rust_plus_one_global_asm, @function\n+rust_plus_one_global_asm:\n+    movl (%rdi), %eax\n+    inc %eax\n+    retq\n+\"# );\n+\n+extern {\n+    fn cc_plus_one_c(arg : &u32) -> u32;\n+    fn cc_plus_one_c_asm(arg : &u32) -> u32;\n+    fn cc_plus_one_cxx(arg : &u32) -> u32;\n+    fn cc_plus_one_cxx_asm(arg : &u32) -> u32;\n+    fn cc_plus_one_asm(arg : &u32) -> u32;\n+    fn cmake_plus_one_c(arg : &u32) -> u32;\n+    fn cmake_plus_one_c_asm(arg : &u32) -> u32;\n+    fn cmake_plus_one_cxx(arg : &u32) -> u32;\n+    fn cmake_plus_one_cxx_asm(arg : &u32) -> u32;\n+    fn cmake_plus_one_c_global_asm(arg : &u32) -> u32;\n+    fn cmake_plus_one_cxx_global_asm(arg : &u32) -> u32;\n+    fn cmake_plus_one_asm(arg : &u32) -> u32;\n+    fn rust_plus_one_global_asm(arg : &u32) -> u32;\n+}\n+\n+fn main() {\n+    let value : u32 = 41;\n+    let question = \"Answer to the Ultimate Question of Life, the Universe, and Everything:\";\n+\n+    unsafe{\n+        println!(\"{}: {}!\", question,rust_plus_one_global_asm(&value));\n+        println!(\"{}: {}!\", question,cc_plus_one_c(&value));\n+        println!(\"{}: {}!\", question,cc_plus_one_c_asm(&value));\n+        println!(\"{}: {}!\", question,cc_plus_one_cxx(&value));\n+        println!(\"{}: {}!\", question,cc_plus_one_cxx_asm(&value));\n+        println!(\"{}: {}!\", question,cc_plus_one_asm(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_c(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_c_asm(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_cxx(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_cxx_asm(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_c_global_asm(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_cxx_global_asm(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_asm(&value));\n+    }\n+}"}, {"sha": "15211e3ade7956b7ce5e0e2f6602fa80f7d30a56", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/jumpto.checks", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fjumpto.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fjumpto.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fjumpto.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,8 @@\n+CHECK: libunwind::Registers_x86_64::jumpto\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      shlq    $0, (%rsp)\n+CHECK-NEXT: lfence\n+CHECK-NEXT: retq"}, {"sha": "0fe88141b24739f2c4b075befcc5f7ca961c1d64", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/print.checks", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,7 @@\n+CHECK: print\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      popq\n+CHECK:      callq 0x{{[[:xdigit:]]*}} <_Unwind_Resume>\n+CHECK-NEXT: ud2"}, {"sha": "fe6777537fb80375666f51e8542626dbb408317f", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/rust_plus_one_global_asm.checks", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Frust_plus_one_global_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Frust_plus_one_global_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Frust_plus_one_global_asm.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,2 @@\n+CHECK: rust_plus_one_global_asm\n+CHECK: lfence"}, {"sha": "ec93c98016078f5f25a962ef9bc4542adaba4caf", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/script.sh", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,57 @@\n+set -exuo pipefail\n+\n+function build {\n+    CRATE=enclave\n+\n+    mkdir -p $WORK_DIR\n+    pushd $WORK_DIR\n+        rm -rf $CRATE\n+        cp -a $TEST_DIR/enclave .\n+        pushd $CRATE\n+            echo ${WORK_DIR}\n+            # HACK(eddyb) sets `RUSTC_BOOTSTRAP=1` so Cargo can accept nightly features.\n+            # These come from the top-level Rust workspace, that this crate is not a\n+            # member of, but Cargo tries to load the workspace `Cargo.toml` anyway.\n+            env RUSTC_BOOTSTRAP=1\n+                cargo -v run --target $TARGET\n+        popd\n+    popd\n+}\n+\n+function check {\n+    local func=$1\n+    local checks=\"${TEST_DIR}/$2\"\n+    local asm=$(mktemp)\n+    local objdump=\"${BUILD_DIR}/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-objdump\"\n+    local filecheck=\"${BUILD_DIR}/x86_64-unknown-linux-gnu/llvm/build/bin/FileCheck\"\n+\n+    ${objdump} --disassemble-symbols=${func} --demangle \\\n+      ${WORK_DIR}/enclave/target/x86_64-fortanix-unknown-sgx/debug/enclave > ${asm}\n+    ${filecheck} --input-file ${asm} ${checks}\n+}\n+\n+build\n+\n+check unw_getcontext unw_getcontext.checks\n+check \"libunwind::Registers_x86_64::jumpto()\" jumpto.checks\n+check \"std::io::stdio::_print::h87f0c238421c45bc\" print.checks\n+check rust_plus_one_global_asm rust_plus_one_global_asm.checks \\\n+  || echo \"warning: module level assembly currently not hardened\"\n+\n+check cc_plus_one_c cc_plus_one_c.checks\n+check cc_plus_one_c_asm cc_plus_one_c_asm.checks\n+check cc_plus_one_cxx cc_plus_one_cxx.checks\n+check cc_plus_one_cxx_asm cc_plus_one_cxx_asm.checks\n+check cc_plus_one_asm cc_plus_one_asm.checks \\\n+  || echo \"warning: the cc crate forwards assembly files to the CC compiler.\" \\\n+           \"Clang uses its own intergrated assembler, which does not include the LVI passes.\"\n+\n+check cmake_plus_one_c cmake_plus_one_c.checks\n+check cmake_plus_one_c_asm cmake_plus_one_c_asm.checks\n+check cmake_plus_one_c_global_asm cmake_plus_one_c_global_asm.checks \\\n+  || echo \"warning: module level assembly currently not hardened\"\n+check cmake_plus_one_cxx cmake_plus_one_cxx.checks\n+check cmake_plus_one_cxx_asm cmake_plus_one_cxx_asm.checks\n+check cmake_plus_one_cxx_global_asm cmake_plus_one_cxx_global_asm.checks \\\n+  || echo \"warning: module level assembly currently not hardened\"\n+check cmake_plus_one_asm cmake_plus_one_asm.checks"}, {"sha": "4b7615b115dc4fe5f062bb37d82899811edd84aa", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/unw_getcontext.checks", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Funw_getcontext.checks", "raw_url": "https://github.com/rust-lang/rust/raw/6369a98ebdee8ce01510f5d4307ddb771c8cb0e5/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Funw_getcontext.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Funw_getcontext.checks?ref=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5", "patch": "@@ -0,0 +1,6 @@\n+CHECK: unw_getcontext\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      shlq    $0, (%rsp)\n+CHECK-NEXT: lfence\n+CHECK-NEXT: retq"}]}