{"sha": "a225f0a66b83b79e62d679568675adea284bfe21", "node_id": "C_kwDOAAsO6NoAKGEyMjVmMGE2NmI4M2I3OWU2MmQ2Nzk1Njg2NzVhZGVhMjg0YmZlMjE", "commit": {"author": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-05-03T04:53:10Z"}, "committer": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-05-03T04:53:10Z"}, "message": "Pass a pointee type to `<Builder as BuilderMethods>::load` when calling it ourselves\n\nThe parameter name isn't very descriptive, but it actually supposed to\ntake a pointee type. When calling it ourselves, we've been passing a\n*pointer* type, which made it impossible to make any meaningful uses of\nthis parameter in the method implementation. This commit intends to\nrectify that.", "tree": {"sha": "ec7500b30cfdb5fafcf0a374081054aef17f6c96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec7500b30cfdb5fafcf0a374081054aef17f6c96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a225f0a66b83b79e62d679568675adea284bfe21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a225f0a66b83b79e62d679568675adea284bfe21", "html_url": "https://github.com/rust-lang/rust/commit/a225f0a66b83b79e62d679568675adea284bfe21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a225f0a66b83b79e62d679568675adea284bfe21/comments", "author": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0405aa0065f567ac11756c8ce5845a5bc9604f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/0405aa0065f567ac11756c8ce5845a5bc9604f94", "html_url": "https://github.com/rust-lang/rust/commit/0405aa0065f567ac11756c8ce5845a5bc9604f94"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "4cc5eef9dad4021612b2ed0d60d1846b37b58e2a", "filename": "src/builder.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a225f0a66b83b79e62d679568675adea284bfe21/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a225f0a66b83b79e62d679568675adea284bfe21/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=a225f0a66b83b79e62d679568675adea284bfe21", "patch": "@@ -652,7 +652,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         unimplemented!();\n     }\n \n-    fn load(&mut self, _ty: Type<'gcc>, ptr: RValue<'gcc>, _align: Align) -> RValue<'gcc> {\n+    fn load(&mut self, _pointee_ty: Type<'gcc>, ptr: RValue<'gcc>, _align: Align) -> RValue<'gcc> {\n         // TODO(antoyo): use ty.\n         let block = self.llbb();\n         let function = block.get_function();\n@@ -715,7 +715,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n                 OperandValue::Ref(place.llval, Some(llextra), place.align)\n             }\n             else if place.layout.is_gcc_immediate() {\n-                let load = self.load(place.llval.get_type(), place.llval, place.align);\n+                let load = self.load(\n+                    place.layout.gcc_type(self, false),\n+                    place.llval,\n+                    place.align,\n+                );\n                 if let abi::Abi::Scalar(ref scalar) = place.layout.abi {\n                     scalar_load_metadata(self, load, scalar);\n                 }\n@@ -727,7 +731,8 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n \n                 let mut load = |i, scalar: &abi::Scalar, align| {\n                     let llptr = self.struct_gep(pair_type, place.llval, i as u64);\n-                    let load = self.load(llptr.get_type(), llptr, align);\n+                    let llty = place.layout.scalar_pair_element_gcc_type(self, i, false);\n+                    let load = self.load(llty, llptr, align);\n                     scalar_load_metadata(self, load, scalar);\n                     if scalar.is_bool() { self.trunc(load, self.type_i1()) } else { load }\n                 };\n@@ -980,7 +985,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     fn memmove(&mut self, dst: RValue<'gcc>, dst_align: Align, src: RValue<'gcc>, src_align: Align, size: RValue<'gcc>, flags: MemFlags) {\n         if flags.contains(MemFlags::NONTEMPORAL) {\n             // HACK(nox): This is inefficient but there is no nontemporal memmove.\n-            let val = self.load(src.get_type(), src, src_align);\n+            let val = self.load(src.get_type().get_pointee().expect(\"get_pointee\"), src, src_align);\n             let ptr = self.pointercast(dst, self.type_ptr_to(self.val_ty(val)));\n             self.store_with_flags(val, ptr, dst_align, flags);\n             return;"}]}