{"sha": "d4d9e7f67fa8661757769b8d87f6343ca8251f24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZDllN2Y2N2ZhODY2MTc1Nzc2OWI4ZDg3ZjYzNDNjYTgyNTFmMjQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-28T19:27:59Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:30Z"}, "message": "Remove unused part of return value from `replace_bound_vars_with_placeholders`", "tree": {"sha": "05cba5b325f86af6fd8e2a5729165b404f1d0e20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05cba5b325f86af6fd8e2a5729165b404f1d0e20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d9e7f67fa8661757769b8d87f6343ca8251f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d9e7f67fa8661757769b8d87f6343ca8251f24", "html_url": "https://github.com/rust-lang/rust/commit/d4d9e7f67fa8661757769b8d87f6343ca8251f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d9e7f67fa8661757769b8d87f6343ca8251f24/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b0799157450a2ef6c50b4ffb9c0c40ee105fe8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0799157450a2ef6c50b4ffb9c0c40ee105fe8f", "html_url": "https://github.com/rust-lang/rust/commit/1b0799157450a2ef6c50b4ffb9c0c40ee105fe8f"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "e3365e8590b5edecf7d25beb7e04ee9fe2a46e10", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4d9e7f67fa8661757769b8d87f6343ca8251f24/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d9e7f67fa8661757769b8d87f6343ca8251f24/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=d4d9e7f67fa8661757769b8d87f6343ca8251f24", "patch": "@@ -2,7 +2,7 @@\n //! the end of the file for details.\n \n use super::combine::CombineFields;\n-use super::{HigherRankedType, InferCtxt, PlaceholderMap};\n+use super::{HigherRankedType, InferCtxt};\n \n use crate::infer::CombinedSnapshot;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n@@ -33,7 +33,7 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n         self.infcx.commit_if_ok(|_| {\n             // First, we instantiate each bound region in the supertype with a\n             // fresh placeholder region.\n-            let (b_prime, _) = self.infcx.replace_bound_vars_with_placeholders(&b);\n+            let b_prime = self.infcx.replace_bound_vars_with_placeholders(&b);\n \n             // Next, we instantiate each bound region in the subtype\n             // with a fresh region variable. These region variables --\n@@ -66,10 +66,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// the [rustc dev guide].\n     ///\n     /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n-    pub fn replace_bound_vars_with_placeholders<T>(\n-        &self,\n-        binder: &ty::Binder<T>,\n-    ) -> (T, PlaceholderMap<'tcx>)\n+    pub fn replace_bound_vars_with_placeholders<T>(&self, binder: &ty::Binder<T>) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -122,7 +119,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             next_universe, binder, result, map,\n         );\n \n-        (result, map)\n+        result\n     }\n \n     /// See `infer::region_constraints::RegionConstraintCollector::leak_check`."}, {"sha": "9742f5e2346516339033b96264b0ed9ef362b6d1", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4d9e7f67fa8661757769b8d87f6343ca8251f24/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d9e7f67fa8661757769b8d87f6343ca8251f24/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=d4d9e7f67fa8661757769b8d87f6343ca8251f24", "patch": "@@ -351,11 +351,6 @@ pub struct InferCtxt<'a, 'tcx> {\n     universe: Cell<ty::UniverseIndex>,\n }\n \n-/// A map returned by `replace_bound_vars_with_placeholders()`\n-/// indicating the placeholder region that each late-bound region was\n-/// replaced with.\n-pub type PlaceholderMap<'tcx> = BTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n-\n /// See the `error_reporting` module for more details.\n #[derive(Clone, Debug, PartialEq, Eq, TypeFoldable)]\n pub enum ValuePairs<'tcx> {\n@@ -992,7 +987,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         Some(self.commit_if_ok(|_snapshot| {\n-            let (ty::SubtypePredicate { a_is_expected, a, b }, _) =\n+            let ty::SubtypePredicate { a_is_expected, a, b } =\n                 self.replace_bound_vars_with_placeholders(&predicate);\n \n             let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;\n@@ -1007,7 +1002,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         predicate: ty::PolyRegionOutlivesPredicate<'tcx>,\n     ) -> UnitResult<'tcx> {\n         self.commit_if_ok(|_snapshot| {\n-            let (ty::OutlivesPredicate(r_a, r_b), _) =\n+            let ty::OutlivesPredicate(r_a, r_b) =\n                 self.replace_bound_vars_with_placeholders(&predicate);\n             let origin = SubregionOrigin::from_obligation_cause(cause, || {\n                 RelateRegionParamBound(cause.span)"}, {"sha": "f23d3bb761154d6aa7d696ba689e6eaf3cd4ca83", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d9e7f67fa8661757769b8d87f6343ca8251f24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d9e7f67fa8661757769b8d87f6343ca8251f24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d4d9e7f67fa8661757769b8d87f6343ca8251f24", "patch": "@@ -167,7 +167,7 @@ pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n \n     let infcx = selcx.infcx();\n     infcx.commit_if_ok(|_snapshot| {\n-        let (placeholder_predicate, _) =\n+        let placeholder_predicate =\n             infcx.replace_bound_vars_with_placeholders(&obligation.predicate);\n \n         let placeholder_obligation = obligation.with(placeholder_predicate);"}, {"sha": "76be4a8045282fd5f600f4e90de6537eb008e3eb", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4d9e7f67fa8661757769b8d87f6343ca8251f24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d9e7f67fa8661757769b8d87f6343ca8251f24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=d4d9e7f67fa8661757769b8d87f6343ca8251f24", "patch": "@@ -253,7 +253,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let trait_obligations: Vec<PredicateObligation<'_>> =\n                 self.infcx.commit_unconditionally(|_| {\n                     let poly_trait_ref = obligation.predicate.to_poly_trait_ref();\n-                    let (trait_ref, _) =\n+                    let trait_ref =\n                         self.infcx.replace_bound_vars_with_placeholders(&poly_trait_ref);\n                     let cause = obligation.derived_cause(ImplDerivedObligation);\n                     self.impl_or_trait_obligations(\n@@ -437,7 +437,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(\"confirm_trait_alias_candidate({:?}, {:?})\", obligation, alias_def_id);\n \n         self.infcx.commit_unconditionally(|_| {\n-            let (predicate, _) =\n+            let predicate =\n                 self.infcx().replace_bound_vars_with_placeholders(&obligation.predicate);\n             let trait_ref = predicate.trait_ref;\n             let trait_def_id = trait_ref.def_id;"}, {"sha": "ab4226c4ed6e23baf7fa10a77704763f29d483dc", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4d9e7f67fa8661757769b8d87f6343ca8251f24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d9e7f67fa8661757769b8d87f6343ca8251f24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d4d9e7f67fa8661757769b8d87f6343ca8251f24", "patch": "@@ -1161,7 +1161,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n     ) -> Option<ty::PolyTraitRef<'tcx>> {\n         let poly_trait_predicate = self.infcx().resolve_vars_if_possible(&obligation.predicate);\n-        let (placeholder_trait_predicate, _) =\n+        let placeholder_trait_predicate =\n             self.infcx().replace_bound_vars_with_placeholders(&poly_trait_predicate);\n         debug!(\n             \"match_projection_obligation_against_definition_bounds: \\\n@@ -1640,7 +1640,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let ty: ty::Binder<Ty<'tcx>> = ty::Binder::bind(ty); // <----/\n \n                 self.infcx.commit_unconditionally(|_| {\n-                    let (placeholder_ty, _) = self.infcx.replace_bound_vars_with_placeholders(&ty);\n+                    let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(&ty);\n                     let Normalized { value: normalized_ty, mut obligations } =\n                         ensure_sufficient_stack(|| {\n                             project::normalize_with_depth(\n@@ -1708,7 +1708,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Err(());\n         }\n \n-        let (placeholder_obligation, _) =\n+        let placeholder_obligation =\n             self.infcx().replace_bound_vars_with_placeholders(&obligation.predicate);\n         let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;\n "}]}