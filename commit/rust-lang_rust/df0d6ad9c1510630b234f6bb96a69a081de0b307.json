{"sha": "df0d6ad9c1510630b234f6bb96a69a081de0b307", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMGQ2YWQ5YzE1MTA2MzBiMjM0ZjZiYjk2YTY5YTA4MWRlMGIzMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-16T02:06:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-16T02:06:26Z"}, "message": "Auto merge of #55023 - euclio:llvm-error-handler, r=cuviper\n\nExit with code 101 on fatal codegen errors\n\nFixes #54992.\n\nThis PR installs a custom fatal error handler that prints the error from LLVM and exits with 101. There should be no visible change in the output from LLVM. This allows distinguishing a fatal LLVM error with a compilation error by exit code.\n\nThis PR also modifies the LLVM codegen backend to ICE instead of emitting a fatal error when encountering a LLVM worker thread panic for the same reason.\n\nr? @cuviper", "tree": {"sha": "3888a6b11bf0f8628561ab18c06d774d468258d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3888a6b11bf0f8628561ab18c06d774d468258d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df0d6ad9c1510630b234f6bb96a69a081de0b307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df0d6ad9c1510630b234f6bb96a69a081de0b307", "html_url": "https://github.com/rust-lang/rust/commit/df0d6ad9c1510630b234f6bb96a69a081de0b307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df0d6ad9c1510630b234f6bb96a69a081de0b307/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46880f41b7aeb897b8245474196bba9dc11f0e88", "url": "https://api.github.com/repos/rust-lang/rust/commits/46880f41b7aeb897b8245474196bba9dc11f0e88", "html_url": "https://github.com/rust-lang/rust/commit/46880f41b7aeb897b8245474196bba9dc11f0e88"}, {"sha": "1811f1322a46658c1b5b765b5cf6d52aace34e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/1811f1322a46658c1b5b765b5cf6d52aace34e30", "html_url": "https://github.com/rust-lang/rust/commit/1811f1322a46658c1b5b765b5cf6d52aace34e30"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "95281e2445a1c36baecc71c9f116094e085b3668", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df0d6ad9c1510630b234f6bb96a69a081de0b307/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0d6ad9c1510630b234f6bb96a69a081de0b307/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=df0d6ad9c1510630b234f6bb96a69a081de0b307", "patch": "@@ -2031,9 +2031,7 @@ fn start_executing_work(tcx: TyCtxt,\n                     main_thread_worker_state = MainThreadWorkerState::Idle;\n                 }\n                 Message::Done { result: Err(()), worker_id: _ } => {\n-                    shared_emitter.fatal(\"aborting due to worker thread failure\");\n-                    // Exit the coordinator thread\n-                    return Err(())\n+                    bug!(\"worker thread panicked\");\n                 }\n                 Message::CodegenItem => {\n                     bug!(\"the coordinator should not receive codegen requests\")\n@@ -2392,7 +2390,7 @@ impl OngoingCodegen {\n                 panic!(\"expected abort due to worker thread errors\")\n             },\n             Err(_) => {\n-                sess.fatal(\"Error during codegen/LLVM phase.\");\n+                bug!(\"panic during codegen/LLVM phase\");\n             }\n         };\n "}, {"sha": "6108af6c884cbb06358285b0f9b909410e33dff2", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df0d6ad9c1510630b234f6bb96a69a081de0b307/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0d6ad9c1510630b234f6bb96a69a081de0b307/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=df0d6ad9c1510630b234f6bb96a69a081de0b307", "patch": "@@ -482,6 +482,8 @@ pub mod debuginfo {\n extern { pub type ModuleBuffer; }\n \n extern \"C\" {\n+    pub fn LLVMRustInstallFatalErrorHandler();\n+\n     // Create and destroy contexts.\n     pub fn LLVMRustContextCreate(shouldDiscardNames: bool) -> &'static mut Context;\n     pub fn LLVMContextDispose(C: &'static mut Context);"}, {"sha": "0a80fdddbf9fdb4197d3b0b2f937a47e2c423a18", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df0d6ad9c1510630b234f6bb96a69a081de0b307/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0d6ad9c1510630b234f6bb96a69a081de0b307/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=df0d6ad9c1510630b234f6bb96a69a081de0b307", "patch": "@@ -56,6 +56,8 @@ unsafe fn configure_llvm(sess: &Session) {\n     let mut llvm_c_strs = Vec::with_capacity(n_args + 1);\n     let mut llvm_args = Vec::with_capacity(n_args + 1);\n \n+    llvm::LLVMRustInstallFatalErrorHandler();\n+\n     {\n         let mut add = |arg: &str| {\n             let s = CString::new(arg).unwrap();"}, {"sha": "bf7afa1b6c0684d15f2e19300e114af89c8ce3a4", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df0d6ad9c1510630b234f6bb96a69a081de0b307/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/df0d6ad9c1510630b234f6bb96a69a081de0b307/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=df0d6ad9c1510630b234f6bb96a69a081de0b307", "patch": "@@ -17,6 +17,7 @@\n #include \"llvm/Object/Archive.h\"\n #include \"llvm/Object/ObjectFile.h\"\n #include \"llvm/Bitcode/BitcodeWriterPass.h\"\n+#include \"llvm/Support/Signals.h\"\n \n #include \"llvm/IR/CallSite.h\"\n \n@@ -26,6 +27,8 @@\n #include <cstdlib>\n #endif\n \n+#include <iostream>\n+\n //===----------------------------------------------------------------------===\n //\n // This file defines alternate interfaces to core functions that are more\n@@ -62,6 +65,27 @@ static AtomicOrdering fromRust(LLVMAtomicOrdering Ordering) {\n \n static LLVM_THREAD_LOCAL char *LastError;\n \n+// Custom error handler for fatal LLVM errors.\n+//\n+// Notably it exits the process with code 101, unlike LLVM's default of 1.\n+static void FatalErrorHandler(void *UserData,\n+                              const std::string& Reason,\n+                              bool GenCrashDiag) {\n+  // Do the same thing that the default error handler does.\n+  std::cerr << \"LLVM ERROR: \" << Reason << std::endl;\n+\n+  // Since this error handler exits the process, we have to run any cleanup that\n+  // LLVM would run after handling the error. This might change with an LLVM\n+  // upgrade.\n+  sys::RunInterruptHandlers();\n+\n+  exit(101);\n+}\n+\n+extern \"C\" void LLVMRustInstallFatalErrorHandler() {\n+  install_fatal_error_handler(FatalErrorHandler);\n+}\n+\n extern \"C\" LLVMMemoryBufferRef\n LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n   ErrorOr<std::unique_ptr<MemoryBuffer>> BufOr ="}]}