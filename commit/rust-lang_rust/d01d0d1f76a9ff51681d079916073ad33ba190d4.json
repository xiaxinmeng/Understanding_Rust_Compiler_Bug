{"sha": "d01d0d1f76a9ff51681d079916073ad33ba190d4", "node_id": "C_kwDOAAsO6NoAKGQwMWQwZDFmNzZhOWZmNTE2ODFkMDc5OTE2MDczYWQzM2JhMTkwZDQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-25T07:52:37Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-02-28T23:57:14Z"}, "message": "Box `CastTarget` within `PassMode`.\n\nBecause `PassMode::Cast` is by far the largest variant, but is\nrelatively rare.\n\nThis requires making `PassMode` not impl `Copy`, and `Clone` is no\nlonger necessary. This causes lots of sigil adjusting, but nothing very\nnotable.", "tree": {"sha": "3a76cf805b28dbcb5f2b98160686f0d1576d098c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a76cf805b28dbcb5f2b98160686f0d1576d098c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d01d0d1f76a9ff51681d079916073ad33ba190d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d01d0d1f76a9ff51681d079916073ad33ba190d4", "html_url": "https://github.com/rust-lang/rust/commit/d01d0d1f76a9ff51681d079916073ad33ba190d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d01d0d1f76a9ff51681d079916073ad33ba190d4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32a2e378f4cc509718cba147b0d6588528cdd6e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/32a2e378f4cc509718cba147b0d6588528cdd6e5", "html_url": "https://github.com/rust-lang/rust/commit/32a2e378f4cc509718cba147b0d6588528cdd6e5"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "9b55db6a5476473119276c011d7427236fd4a929", "filename": "src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d01d0d1f76a9ff51681d079916073ad33ba190d4/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01d0d1f76a9ff51681d079916073ad33ba190d4/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=d01d0d1f76a9ff51681d079916073ad33ba190d4", "patch": "@@ -133,7 +133,7 @@ impl<'gcc, 'tcx> FnAbiGccExt<'gcc, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             match self.ret.mode {\n                 PassMode::Ignore => cx.type_void(),\n                 PassMode::Direct(_) | PassMode::Pair(..) => self.ret.layout.immediate_gcc_type(cx),\n-                PassMode::Cast(cast) => cast.gcc_type(cx),\n+                PassMode::Cast(ref cast) => cast.gcc_type(cx),\n                 PassMode::Indirect { .. } => {\n                     argument_tys.push(cx.type_ptr_to(self.ret.memory_ty(cx)));\n                     cx.type_void()\n@@ -157,7 +157,7 @@ impl<'gcc, 'tcx> FnAbiGccExt<'gcc, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n                 PassMode::Indirect { extra_attrs: Some(_), .. } => {\n                     unimplemented!();\n                 }\n-                PassMode::Cast(cast) => cast.gcc_type(cx),\n+                PassMode::Cast(ref cast) => cast.gcc_type(cx),\n                 PassMode::Indirect { extra_attrs: None, on_stack: true, .. } => {\n                     on_stack_param_indices.insert(argument_tys.len());\n                     arg.memory_ty(cx)"}, {"sha": "90c49c627019ed802f7f41c1b3c3c7687a1ec87e", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d01d0d1f76a9ff51681d079916073ad33ba190d4/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01d0d1f76a9ff51681d079916073ad33ba190d4/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=d01d0d1f76a9ff51681d079916073ad33ba190d4", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                 sym::volatile_load | sym::unaligned_volatile_load => {\n                     let tp_ty = substs.type_at(0);\n                     let mut ptr = args[0].immediate();\n-                    if let PassMode::Cast(ty) = fn_abi.ret.mode {\n+                    if let PassMode::Cast(ty) = &fn_abi.ret.mode {\n                         ptr = self.pointercast(ptr, self.type_ptr_to(ty.gcc_type(self)));\n                     }\n                     let load = self.volatile_load(ptr.get_type(), ptr);\n@@ -331,7 +331,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n             };\n \n         if !fn_abi.ret.is_ignore() {\n-            if let PassMode::Cast(ty) = fn_abi.ret.mode {\n+            if let PassMode::Cast(ty) = &fn_abi.ret.mode {\n                 let ptr_llty = self.type_ptr_to(ty.gcc_type(self));\n                 let ptr = self.pointercast(result.llval, ptr_llty);\n                 self.store(llval, ptr, result.align);\n@@ -427,7 +427,7 @@ impl<'gcc, 'tcx> ArgAbiExt<'gcc, 'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n         else if self.is_unsized_indirect() {\n             bug!(\"unsized `ArgAbi` must be handled through `store_fn_arg`\");\n         }\n-        else if let PassMode::Cast(cast) = self.mode {\n+        else if let PassMode::Cast(ref cast) = self.mode {\n             // FIXME(eddyb): Figure out when the simpler Store is safe, clang\n             // uses it for i16 -> {i8, i8}, but not for i24 -> {i8, i8, i8}.\n             let can_store_through_cast_ptr = false;"}]}