{"sha": "810dfd7cd451c370d0c47d6aa9e62b16292a29e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMGRmZDdjZDQ1MWMzNzBkMGM0N2Q2YWE5ZTYyYjE2MjkyYTI5ZTA=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-08-16T15:44:24Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-08-16T15:45:08Z"}, "message": "Reuse more internal Rc and Arc methods", "tree": {"sha": "06b7afd1169de7041dc2bc7a72cae2ce81018818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b7afd1169de7041dc2bc7a72cae2ce81018818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/810dfd7cd451c370d0c47d6aa9e62b16292a29e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/810dfd7cd451c370d0c47d6aa9e62b16292a29e0", "html_url": "https://github.com/rust-lang/rust/commit/810dfd7cd451c370d0c47d6aa9e62b16292a29e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/810dfd7cd451c370d0c47d6aa9e62b16292a29e0/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae1e201a0cd37a48bd3dabf1c643ccd5f53f7680", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1e201a0cd37a48bd3dabf1c643ccd5f53f7680", "html_url": "https://github.com/rust-lang/rust/commit/ae1e201a0cd37a48bd3dabf1c643ccd5f53f7680"}], "stats": {"total": 84, "additions": 14, "deletions": 70}, "files": [{"sha": "abb09684260d0702f647e44dad9ad1ef24370c80", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/810dfd7cd451c370d0c47d6aa9e62b16292a29e0/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dfd7cd451c370d0c47d6aa9e62b16292a29e0/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=810dfd7cd451c370d0c47d6aa9e62b16292a29e0", "patch": "@@ -350,17 +350,11 @@ impl<T> Rc<T> {\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Rc<mem::MaybeUninit<T>> {\n-        let layout = Layout::new::<RcBox<mem::MaybeUninit<T>>>();\n         unsafe {\n-            let mut ptr = Global.alloc(layout)\n-                .unwrap_or_else(|_| handle_alloc_error(layout))\n-                .cast::<RcBox<mem::MaybeUninit<T>>>();\n-            ptr::write(&mut ptr.as_mut().strong, Cell::new(1));\n-            ptr::write(&mut ptr.as_mut().weak, Cell::new(1));\n-            Rc {\n-                ptr,\n-                phantom: PhantomData,\n-            }\n+            Rc::from_ptr(Rc::allocate_for_unsized(\n+                Layout::new::<T>(),\n+                |mem| mem as *mut RcBox<mem::MaybeUninit<T>>,\n+            ))\n         }\n     }\n \n@@ -440,24 +434,8 @@ impl<T> Rc<[T]> {\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_slice(len: usize) -> Rc<[mem::MaybeUninit<T>]> {\n-        let data_layout = Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n-        // This relies on `value` being the last field of `RcBox` in memory,\n-        // so that the layout of `RcBox<T>` is the same as that of `RcBox<()>` followed by `T`.\n-        let (layout, offset) = Layout::new::<RcBox<()>>().extend(data_layout).unwrap();\n         unsafe {\n-            let allocated_ptr = Global.alloc(layout)\n-                .unwrap_or_else(|_| handle_alloc_error(layout))\n-                .as_ptr();\n-            let data_ptr = allocated_ptr.add(offset) as *mut mem::MaybeUninit<T>;\n-            let slice: *mut [mem::MaybeUninit<T>] = from_raw_parts_mut(data_ptr, len);\n-            let wide_ptr = slice as *mut RcBox<[mem::MaybeUninit<T>]>;\n-            let wide_ptr = set_data_ptr(wide_ptr, allocated_ptr);\n-            ptr::write(&mut (*wide_ptr).strong, Cell::new(1));\n-            ptr::write(&mut (*wide_ptr).weak, Cell::new(1));\n-            Rc {\n-                ptr: NonNull::new_unchecked(wide_ptr),\n-                phantom: PhantomData,\n-            }\n+            Rc::from_ptr(Rc::allocate_for_slice(len))\n         }\n     }\n }\n@@ -497,10 +475,7 @@ impl<T> Rc<mem::MaybeUninit<T>> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Rc<T> {\n-        Rc {\n-            ptr: mem::ManuallyDrop::new(self).ptr.cast(),\n-            phantom: PhantomData,\n-        }\n+        Rc::from_inner(mem::ManuallyDrop::new(self).ptr.cast())\n     }\n }\n \n@@ -541,10 +516,7 @@ impl<T> Rc<[mem::MaybeUninit<T>]> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Rc<[T]> {\n-        Rc {\n-            ptr: NonNull::new_unchecked(mem::ManuallyDrop::new(self).ptr.as_ptr() as _),\n-            phantom: PhantomData,\n-        }\n+        Rc::from_ptr(mem::ManuallyDrop::new(self).ptr.as_ptr() as _)\n     }\n }\n "}, {"sha": "bb4d1499014c1a9ce1b7608f6e3d18f7ab23db55", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/810dfd7cd451c370d0c47d6aa9e62b16292a29e0/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dfd7cd451c370d0c47d6aa9e62b16292a29e0/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=810dfd7cd451c370d0c47d6aa9e62b16292a29e0", "patch": "@@ -334,17 +334,11 @@ impl<T> Arc<T> {\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Arc<mem::MaybeUninit<T>> {\n-        let layout = Layout::new::<ArcInner<mem::MaybeUninit<T>>>();\n         unsafe {\n-            let mut ptr = Global.alloc(layout)\n-                .unwrap_or_else(|_| handle_alloc_error(layout))\n-                .cast::<ArcInner<mem::MaybeUninit<T>>>();\n-            ptr::write(&mut ptr.as_mut().strong, atomic::AtomicUsize::new(1));\n-            ptr::write(&mut ptr.as_mut().weak, atomic::AtomicUsize::new(1));\n-            Arc {\n-                ptr,\n-                phantom: PhantomData,\n-            }\n+            Arc::from_ptr(Arc::allocate_for_unsized(\n+                Layout::new::<T>(),\n+                |mem| mem as *mut ArcInner<mem::MaybeUninit<T>>,\n+            ))\n         }\n     }\n \n@@ -424,24 +418,8 @@ impl<T> Arc<[T]> {\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n-        let data_layout = Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n-        // This relies on `value` being the last field of `RcBox` in memory,\n-        // so that the layout of `RcBox<T>` is the same as that of `RcBox<()>` followed by `T`.\n-        let (layout, offset) = Layout::new::<ArcInner<()>>().extend(data_layout).unwrap();\n         unsafe {\n-            let allocated_ptr = Global.alloc(layout)\n-                .unwrap_or_else(|_| handle_alloc_error(layout))\n-                .as_ptr();\n-            let data_ptr = allocated_ptr.add(offset) as *mut mem::MaybeUninit<T>;\n-            let slice: *mut [mem::MaybeUninit<T>] = from_raw_parts_mut(data_ptr, len);\n-            let wide_ptr = slice as *mut ArcInner<[mem::MaybeUninit<T>]>;\n-            let wide_ptr = set_data_ptr(wide_ptr, allocated_ptr);\n-            ptr::write(&mut (*wide_ptr).strong, atomic::AtomicUsize::new(1));\n-            ptr::write(&mut (*wide_ptr).weak, atomic::AtomicUsize::new(1));\n-            Arc {\n-                ptr: NonNull::new_unchecked(wide_ptr),\n-                phantom: PhantomData,\n-            }\n+            Arc::from_ptr(Arc::allocate_for_slice(len))\n         }\n     }\n }\n@@ -481,10 +459,7 @@ impl<T> Arc<mem::MaybeUninit<T>> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Arc<T> {\n-        Arc {\n-            ptr: mem::ManuallyDrop::new(self).ptr.cast(),\n-            phantom: PhantomData,\n-        }\n+        Arc::from_inner(mem::ManuallyDrop::new(self).ptr.cast())\n     }\n }\n \n@@ -525,10 +500,7 @@ impl<T> Arc<[mem::MaybeUninit<T>]> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Arc<[T]> {\n-        Arc {\n-            ptr: NonNull::new_unchecked(mem::ManuallyDrop::new(self).ptr.as_ptr() as _),\n-            phantom: PhantomData,\n-        }\n+        Arc::from_ptr(mem::ManuallyDrop::new(self).ptr.as_ptr() as _)\n     }\n }\n "}]}