{"sha": "c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "node_id": "C_kwDOAAsO6NoAKGM2NWMzNjI0MmU5OWRkYmY3ODdkY2RkOWJkMmQxNGY0MmY3Y2ZjZTY", "commit": {"author": {"name": "Alex Gaynor", "email": "alex.gaynor@gmail.com", "date": "2022-06-30T19:01:38Z"}, "committer": {"name": "Alex Gaynor", "email": "alex.gaynor@gmail.com", "date": "2022-10-04T11:39:51Z"}, "message": "resolve error when attempting to link a universal library on macOS\n\nPreviously attempting to link universal libraries into libraries (but not binaries) would produce an error that \"File too small to be an archive\". This works around this by using `object` to extract a library for the target platform when passed a univeral library.\n\nFixes #55235", "tree": {"sha": "f929294341d97a5cc916d714f3da894e4fdd3a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f929294341d97a5cc916d714f3da894e4fdd3a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "comment_count": 0, "verification": {"verified": false, "reason": "bad_cert", "signature": "-----BEGIN SIGNED MESSAGE-----\nMIIEBAYJKoZIhvcNAQcCoIID9TCCA/ECAQExDTALBglghkgBZQMEAgEwCwYJKoZI\nhvcNAQcBoIICpjCCAqIwggIpoAMCAQICFF3JvlYOvWCAobil8M4pEj55lG4jMAoG\nCCqGSM49BAMDMDcxFTATBgNVBAoTDHNpZ3N0b3JlLmRldjEeMBwGA1UEAxMVc2ln\nc3RvcmUtaW50ZXJtZWRpYXRlMB4XDTIyMTAwNDExNDAyMVoXDTIyMTAwNDExNTAy\nMVowADBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABJD4yjx8QVevbcwpM1Pxnq9x\ny6qsMugrSz8mTrkX8djy8jkCkwarMJcGTQ5vDBJ9Lx4lIFjtjf44P3TfDpvIOVij\nggFIMIIBRDAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwHQYD\nVR0OBBYEFFxZv4sZiU9Qh2E4AcsAavTXT/vjMB8GA1UdIwQYMBaAFN/T6c9WJBGW\n+ajY6ShVosYuGGQ/MCMGA1UdEQEB/wQZMBeBFWFsZXguZ2F5bm9yQGdtYWlsLmNv\nbTAsBgorBgEEAYO/MAEBBB5odHRwczovL2dpdGh1Yi5jb20vbG9naW4vb2F1dGgw\ngYkGCisGAQQB1nkCBAIEewR5AHcAdQAIYJLwKFL/aEXR0WsnhJxFZxisFj3DONJt\n5rwiBjZvcgAAAYOiy/3zAAAEAwBGMEQCICAaVTi4kBOBf/pK0NyACjjx73lWuhB9\nQa2HM5Fujl1QAiBVBqDEwTGrFeAWtXpOTDWXG7S63VrsgVZkgbWRhHElozAKBggq\nhkjOPQQDAwNnADBkAjByWsseO8nByhV93aFfOIK9zEOnjj6ywjGpU7vIZeyyCY+C\nIyIO3ggJaot/Y71IRUMCMHmbFzo+E9qHbRpP9MfEfGtRvQfCLDHaS9SMveUKlyPu\nfCFhIEh1QCKJoMDFz4F/fDGCASQwggEgAgEBME8wNzEVMBMGA1UEChMMc2lnc3Rv\ncmUuZGV2MR4wHAYDVQQDExVzaWdzdG9yZS1pbnRlcm1lZGlhdGUCFF3JvlYOvWCA\nobil8M4pEj55lG4jMAsGCWCGSAFlAwQCAaBpMBgGCSqGSIb3DQEJAzELBgkqhkiG\n9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTIyMTAwNDExNDAyMVowLwYJKoZIhvcNAQkE\nMSIEIJZ6fhIjiJJKF5vf3g51ohKBgfjXPH0omTDV6r9AkOzCMAoGCCqGSM49BAMC\nBEYwRAIgIGoY9le3Bv9sFGc9ju/vpQgVAKwWlBiekH99hq+ZlYICIC5JZS2mlR+o\nDpUcK/Lpio3xcy1devzHQ4nsM10m7kQY\n-----END SIGNED MESSAGE-----", "payload": "tree f929294341d97a5cc916d714f3da894e4fdd3a55\nparent 6b139c5b3e2bad623bdbd8583bc4f2b0f763113a\nauthor Alex Gaynor <alex.gaynor@gmail.com> 1656615698 -0400\ncommitter Alex Gaynor <alex.gaynor@gmail.com> 1664883591 -0400\n\nresolve error when attempting to link a universal library on macOS\n\nPreviously attempting to link universal libraries into libraries (but not binaries) would produce an error that \"File too small to be an archive\". This works around this by using `object` to extract a library for the target platform when passed a univeral library.\n\nFixes #55235\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "html_url": "https://github.com/rust-lang/rust/commit/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/comments", "author": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "html_url": "https://github.com/rust-lang/rust/commit/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a"}], "stats": {"total": 83, "additions": 80, "deletions": 3}, "files": [{"sha": "6814d533d1cce090fe5e1b613052202a37663364", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "patch": "@@ -3297,6 +3297,7 @@ dependencies = [\n  \"rustc_symbol_mangling\",\n  \"rustc_target\",\n  \"smallvec\",\n+ \"tempfile\",\n  \"tracing\",\n ]\n "}, {"sha": "df4a9fea19d740aee21ce707d677c876a454c427", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "patch": "@@ -34,3 +34,4 @@ rustc_target = { path = \"../rustc_target\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n+tempfile = \"3.2.0\""}, {"sha": "20a063f80fd00d2e0a89535b943086b4e4a945a5", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "patch": "@@ -2,16 +2,20 @@\n \n use std::env;\n use std::ffi::{CStr, CString, OsString};\n-use std::io;\n+use std::fs;\n+use std::io::{self, Write};\n use std::mem;\n use std::path::{Path, PathBuf};\n use std::ptr;\n use std::str;\n \n+use object::read::macho::FatArch;\n+\n use crate::common;\n use crate::llvm::archive_ro::{ArchiveRO, Child};\n use crate::llvm::{self, ArchiveKind, LLVMMachineType, LLVMRustCOFFShortExport};\n use rustc_codegen_ssa::back::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n+use rustc_data_structures::memmap::Mmap;\n use rustc_session::cstore::DllImport;\n use rustc_session::Session;\n \n@@ -53,21 +57,78 @@ fn llvm_machine_type(cpu: &str) -> LLVMMachineType {\n     }\n }\n \n+fn try_filter_fat_archs(\n+    archs: object::read::Result<&[impl FatArch]>,\n+    target_arch: object::Architecture,\n+    archive_path: &Path,\n+    archive_map_data: &[u8],\n+) -> io::Result<Option<PathBuf>> {\n+    let archs = archs.map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;\n+\n+    let desired = match archs.iter().filter(|a| a.architecture() == target_arch).next() {\n+        Some(a) => a,\n+        None => return Ok(None),\n+    };\n+\n+    let (mut new_f, extracted_path) = tempfile::Builder::new()\n+        .suffix(archive_path.file_name().unwrap())\n+        .tempfile()?\n+        .keep()\n+        .unwrap();\n+\n+    new_f.write_all(\n+        desired.data(archive_map_data).map_err(|e| io::Error::new(io::ErrorKind::Other, e))?,\n+    )?;\n+\n+    Ok(Some(extracted_path))\n+}\n+\n+fn try_extract_macho_fat_archive(\n+    sess: &Session,\n+    archive_path: &Path,\n+) -> io::Result<Option<PathBuf>> {\n+    let archive_map = unsafe { Mmap::map(fs::File::open(&archive_path)?)? };\n+    let target_arch = match sess.target.arch.as_ref() {\n+        \"aarch64\" => object::Architecture::Aarch64,\n+        \"x86_64\" => object::Architecture::X86_64,\n+        _ => return Ok(None),\n+    };\n+\n+    match object::macho::FatHeader::parse(&*archive_map) {\n+        Ok(h) if h.magic.get(object::endian::BigEndian) == object::macho::FAT_MAGIC => {\n+            let archs = object::macho::FatHeader::parse_arch32(&*archive_map);\n+            try_filter_fat_archs(archs, target_arch, archive_path, &*archive_map)\n+        }\n+        Ok(h) if h.magic.get(object::endian::BigEndian) == object::macho::FAT_MAGIC_64 => {\n+            let archs = object::macho::FatHeader::parse_arch64(&*archive_map);\n+            try_filter_fat_archs(archs, target_arch, archive_path, &*archive_map)\n+        }\n+        // Not a FatHeader at all, just return None.\n+        _ => Ok(None),\n+    }\n+}\n+\n impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n     fn add_archive(\n         &mut self,\n         archive: &Path,\n         skip: Box<dyn FnMut(&str) -> bool + 'static>,\n     ) -> io::Result<()> {\n-        let archive_ro = match ArchiveRO::open(archive) {\n+        let mut archive = archive.to_path_buf();\n+        if self.sess.target.llvm_target.contains(\"-apple-macosx\") {\n+            if let Some(new_archive) = try_extract_macho_fat_archive(&self.sess, &archive)? {\n+                archive = new_archive\n+            }\n+        }\n+        let archive_ro = match ArchiveRO::open(&archive) {\n             Ok(ar) => ar,\n             Err(e) => return Err(io::Error::new(io::ErrorKind::Other, e)),\n         };\n         if self.additions.iter().any(|ar| ar.path() == archive) {\n             return Ok(());\n         }\n         self.additions.push(Addition::Archive {\n-            path: archive.to_path_buf(),\n+            path: archive,\n             archive: archive_ro,\n             skip: Box::new(skip),\n         });"}, {"sha": "cc99375db6902410e10d0359ad6191c1084cbd97", "filename": "src/test/run-make/macos-fat-archive/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2FMakefile?ref=c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "patch": "@@ -0,0 +1,10 @@\n+# only-macos\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+\"$(TMPDIR)\"/libnative-library.a: native-library.c\n+\t$(CC) -arch arm64 -arch x86_64 native-library.c -c -o \"$(TMPDIR)\"/native-library.o\n+\t$(AR) crs \"$(TMPDIR)\"/libnative-library.a \"$(TMPDIR)\"/native-library.o\n+\n+all: \"$(TMPDIR)\"/libnative-library.a\n+\t$(RUSTC) lib.rs --crate-type=lib -L \"native=$(TMPDIR)\" -l static=native-library"}, {"sha": "9943a266c3e4c857aa6439aea3ac0161f8d66691", "filename": "src/test/run-make/macos-fat-archive/lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Flib.rs?ref=c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "patch": "@@ -0,0 +1,3 @@\n+extern \"C\" {\n+    pub fn native_func();\n+}"}, {"sha": "d300fdf1c1742457d38238032f368dc10853d629", "filename": "src/test/run-make/macos-fat-archive/native-library.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Fnative-library.c", "raw_url": "https://github.com/rust-lang/rust/raw/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Fnative-library.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Fnative-library.c?ref=c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "patch": "@@ -0,0 +1 @@\n+void native_func() {}"}]}