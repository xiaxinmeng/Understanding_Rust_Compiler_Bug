{"sha": "b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NGQ3Y2I4OWM1N2IxZmMwNDk1YjMzN2RmZGRiZTVjZGMyZWQ2YjI=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-12T03:29:24Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-29T00:40:48Z"}, "message": "Don't expose NonZero through libstd.", "tree": {"sha": "8b635a7045b5a8c0a153738a665b43a7107d6aa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b635a7045b5a8c0a153738a665b43a7107d6aa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "html_url": "https://github.com/rust-lang/rust/commit/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e83272b62883f97b8717a8150d894e89d7ae18d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e83272b62883f97b8717a8150d894e89d7ae18d6", "html_url": "https://github.com/rust-lang/rust/commit/e83272b62883f97b8717a8150d894e89d7ae18d6"}], "stats": {"total": 201, "additions": 109, "deletions": 92}, "files": [{"sha": "3e235caab18ad1431befa20a802419cb497f1c88", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "patch": "@@ -76,10 +76,11 @@ use core::default::Default;\n use core::kinds::{Sync, Send};\n use core::mem::{min_align_of, size_of, drop};\n use core::mem;\n+use core::nonzero::NonZero;\n use core::ops::{Drop, Deref};\n use core::option::Option;\n use core::option::Option::{Some, None};\n-use core::ptr::{mod, NonZero, RawPtr};\n+use core::ptr::{mod, RawPtr};\n use heap::deallocate;\n \n /// An atomically reference counted wrapper for shared state."}, {"sha": "13dc4474c1a193e6124f1993cac4c78237d52bac", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "patch": "@@ -150,10 +150,11 @@ use core::fmt;\n use core::hash::{mod, Hash};\n use core::kinds::marker;\n use core::mem::{transmute, min_align_of, size_of, forget};\n+use core::nonzero::NonZero;\n use core::ops::{Deref, Drop};\n use core::option::Option;\n use core::option::Option::{Some, None};\n-use core::ptr::{mod, NonZero, RawPtr};\n+use core::ptr::{mod, RawPtr};\n use core::result::Result;\n use core::result::Result::{Ok, Err};\n "}, {"sha": "f65527d3f6664360cb79c97dda16f92fa37930a2", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "patch": "@@ -56,9 +56,10 @@ use core::hash::{mod, Hash};\n use core::iter::repeat;\n use core::kinds::marker::{ContravariantLifetime, InvariantType};\n use core::mem;\n+use core::nonzero::NonZero;\n use core::num::{Int, UnsignedInt};\n use core::ops;\n-use core::ptr::{mod, NonZero};\n+use core::ptr;\n use core::raw::Slice as RawSlice;\n use core::uint;\n "}, {"sha": "d646245510d505394c1553dff7fac7bef96f4e11", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "patch": "@@ -93,6 +93,7 @@ pub mod prelude;\n \n pub mod intrinsics;\n pub mod mem;\n+pub mod nonzero;\n pub mod ptr;\n \n /* Core language traits */"}, {"sha": "f976f08bf843c91664b8a70385b05ea5371d9c3a", "filename": "src/libcore/nonzero.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "patch": "@@ -0,0 +1,98 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Exposes the NonZero lang item which provides optimization hints.\n+\n+use cmp::Eq;\n+use intrinsics;\n+use kinds::Copy;\n+use ops::Deref;\n+use option::Option;\n+use option::Option::Some;\n+use ptr::{null, null_mut, RawPtr, RawMutPtr};\n+\n+/// A wrapper type for raw pointers and integers that will never be\n+/// NULL or 0 that might allow certain optimizations.\n+#[lang=\"non_zero\"]\n+#[deriving(Clone, PartialEq, Eq, PartialOrd)]\n+#[experimental]\n+pub struct NonZero<T>(T);\n+\n+impl<T> NonZero<T> {\n+    /// Create an instance of NonZero with the provided value.\n+    /// You must indeed ensure that the value is actually \"non-zero\".\n+    #[inline(always)]\n+    pub unsafe fn new(inner: T) -> NonZero<T> {\n+        NonZero(inner)\n+    }\n+}\n+\n+impl<T: Copy> Copy for NonZero<T> {}\n+\n+impl<T> Deref<T> for NonZero<T> {\n+    #[inline]\n+    fn deref<'a>(&'a self) -> &'a T {\n+        let NonZero(ref inner) = *self;\n+        inner\n+    }\n+}\n+\n+impl<T> RawPtr<T> for NonZero<*const T> {\n+    #[inline]\n+    fn null() -> NonZero<*const T> { NonZero(null()) }\n+\n+    #[inline]\n+    fn is_null(&self) -> bool { false }\n+\n+    #[inline]\n+    fn to_uint(&self) -> uint {\n+        **self as uint\n+    }\n+\n+    #[inline]\n+    unsafe fn offset(self, count: int) -> NonZero<*const T> {\n+        NonZero(intrinsics::offset(*self, count))\n+    }\n+\n+    #[inline]\n+    unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n+        Some(&***self)\n+    }\n+}\n+\n+impl<T> RawPtr<T> for NonZero<*mut T> {\n+    #[inline]\n+    fn null() -> NonZero<*mut T> { NonZero(null_mut()) }\n+\n+    #[inline]\n+    fn is_null(&self) -> bool { false }\n+\n+    #[inline]\n+    fn to_uint(&self) -> uint {\n+        **self as uint\n+    }\n+\n+    #[inline]\n+    unsafe fn offset(self, count: int) -> NonZero<*mut T> {\n+        NonZero(intrinsics::offset(*self as *const T, count) as *mut T)\n+    }\n+\n+    #[inline]\n+    unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n+        Some(&***self)\n+    }\n+}\n+\n+impl<T> RawMutPtr<T> for NonZero<*mut T> {\n+    #[inline]\n+    unsafe fn as_mut<'a>(&self) -> Option<&'a mut T> {\n+        Some(&mut ***self)\n+    }\n+}"}, {"sha": "8c724b4d8521fdeec603b29edf7876ea5fa977ec", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 88, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "patch": "@@ -90,8 +90,7 @@\n use mem;\n use clone::Clone;\n use intrinsics;\n-use kinds::{Copy, Send, Sync};\n-use ops::Deref;\n+use kinds::{Send, Sync};\n use option::Option;\n use option::Option::{Some, None};\n \n@@ -111,32 +110,6 @@ pub use intrinsics::copy_memory;\n pub use intrinsics::set_memory;\n \n \n-/// A wrapper type for raw pointers and integers that will never be\n-/// NULL or 0 that might allow certain optimizations.\n-#[lang=\"non_zero\"]\n-#[deriving(Clone, PartialEq, Eq, PartialOrd)]\n-#[experimental]\n-pub struct NonZero<T>(T);\n-\n-impl<T> NonZero<T> {\n-    /// Create an instance of NonZero with the provided value.\n-    /// You must indeed ensure that the value is actually \"non-zero\".\n-    #[inline(always)]\n-    pub unsafe fn new(inner: T) -> NonZero<T> {\n-        NonZero(inner)\n-    }\n-}\n-\n-impl<T> Deref<T> for NonZero<T> {\n-    #[inline]\n-    fn deref<'a>(&'a self) -> &'a T {\n-        let NonZero(ref inner) = *self;\n-        inner\n-    }\n-}\n-\n-impl<T: Copy> Copy for NonZero<T> {}\n-\n /// Creates a null raw pointer.\n ///\n /// # Examples\n@@ -341,32 +314,6 @@ impl<T> RawPtr<T> for *const T {\n     }\n }\n \n-impl<T> RawPtr<T> for NonZero<*const T> {\n-    #[inline]\n-    fn null() -> NonZero<*const T> { NonZero(null()) }\n-\n-    #[inline]\n-    fn is_null(&self) -> bool { false }\n-\n-    #[inline]\n-    fn to_uint(&self) -> uint {\n-        let NonZero(p) = *self;\n-        p as uint\n-    }\n-\n-    #[inline]\n-    unsafe fn offset(self, count: int) -> NonZero<*const T> {\n-        let NonZero(p) = self;\n-        NonZero(intrinsics::offset(p, count))\n-    }\n-\n-    #[inline]\n-    unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n-        let NonZero(p) = *self;\n-        Some(&*p)\n-    }\n-}\n-\n impl<T> RawPtr<T> for *mut T {\n     #[inline]\n     fn null() -> *mut T { null_mut() }\n@@ -392,32 +339,6 @@ impl<T> RawPtr<T> for *mut T {\n     }\n }\n \n-impl<T> RawPtr<T> for NonZero<*mut T> {\n-    #[inline]\n-    fn null() -> NonZero<*mut T> { NonZero(null_mut()) }\n-\n-    #[inline]\n-    fn is_null(&self) -> bool { false }\n-\n-    #[inline]\n-    fn to_uint(&self) -> uint {\n-        let NonZero(p) = *self;\n-        p as uint\n-    }\n-\n-    #[inline]\n-    unsafe fn offset(self, count: int) -> NonZero<*mut T> {\n-        let NonZero(p) = self;\n-        NonZero(intrinsics::offset(p as *const T, count) as *mut T)\n-    }\n-\n-    #[inline]\n-    unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n-        let NonZero(p) = *self;\n-        Some(&*p)\n-    }\n-}\n-\n impl<T> RawMutPtr<T> for *mut T {\n     #[inline]\n     unsafe fn as_mut<'a>(&self) -> Option<&'a mut T> {\n@@ -429,14 +350,6 @@ impl<T> RawMutPtr<T> for *mut T {\n     }\n }\n \n-impl<T> RawMutPtr<T> for NonZero<*mut T> {\n-    #[inline]\n-    unsafe fn as_mut<'a>(&self) -> Option<&'a mut T> {\n-        let NonZero(p) = *self;\n-        Some(&mut *p)\n-    }\n-}\n-\n // Equality for pointers\n impl<T> PartialEq for *const T {\n     #[inline]"}, {"sha": "d8d74c8bb45ae2eaa7cbba22f4264e378494a8be", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "patch": "@@ -9,8 +9,10 @@\n // except according to those terms.\n \n \n+extern crate core;\n+\n+use core::nonzero::NonZero;\n use std::mem::size_of;\n-use std::ptr::NonZero;\n use std::rc::Rc;\n use std::sync::Arc;\n "}]}