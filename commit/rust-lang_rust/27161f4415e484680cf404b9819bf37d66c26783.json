{"sha": "27161f4415e484680cf404b9819bf37d66c26783", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MTYxZjQ0MTVlNDg0NjgwY2Y0MDRiOTgxOWJmMzdkNjZjMjY3ODM=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-11T11:20:45Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-12T00:39:39Z"}, "message": "using str::index...", "tree": {"sha": "95d6b672323ae58ecac7bd2adea14a2b4391beb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d6b672323ae58ecac7bd2adea14a2b4391beb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27161f4415e484680cf404b9819bf37d66c26783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27161f4415e484680cf404b9819bf37d66c26783", "html_url": "https://github.com/rust-lang/rust/commit/27161f4415e484680cf404b9819bf37d66c26783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27161f4415e484680cf404b9819bf37d66c26783/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14baf88f89241f1384e4d12b4751910fe16c947c", "url": "https://api.github.com/repos/rust-lang/rust/commits/14baf88f89241f1384e4d12b4751910fe16c947c", "html_url": "https://github.com/rust-lang/rust/commit/14baf88f89241f1384e4d12b4751910fe16c947c"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "ac1727ffdb7c871c9bbbbb755f23b0e14496894b", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/27161f4415e484680cf404b9819bf37d66c26783/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27161f4415e484680cf404b9819bf37d66c26783/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=27161f4415e484680cf404b9819bf37d66c26783", "patch": "@@ -651,25 +651,27 @@ fn cmd_install(c: cargo) unsafe {\n \n     if str::starts_with(target, \"uuid:\") {\n         let uuid = rest(target, 5u);\n-        let idx = str::index_byte(uuid, '/' as u8);\n-        if idx != -1 {\n-            let source = str::unsafe::slice_bytes(uuid, 0u, idx as uint);\n-            uuid = str::unsafe::slice_bytes(uuid, idx as uint + 1u,\n-                                      str::byte_len(uuid));\n-            install_uuid_specific(c, wd, source, uuid);\n-        } else {\n-            install_uuid(c, wd, uuid);\n+        alt str::index(uuid, '/') {\n+            option::some(idx) {\n+               let source = str::slice(uuid, 0u, idx);\n+               uuid = str::slice(uuid, idx + 1u, str::char_len(uuid));\n+               install_uuid_specific(c, wd, source, uuid);\n+            }\n+            option::none {\n+               install_uuid(c, wd, uuid);\n+            }\n         }\n     } else {\n         let name = target;\n-        let idx = str::index_byte(name, '/' as u8);\n-        if idx != -1 {\n-            let source = str::unsafe::slice_bytes(name, 0u, idx as uint);\n-            name = str::unsafe::slice_bytes(name, idx as uint + 1u,\n-                                      str::byte_len(name));\n-            install_named_specific(c, wd, source, name);\n-        } else {\n-            install_named(c, wd, name);\n+        alt str::index(name, '/') {\n+            option::some(idx) {\n+               let source = str::slice(name, 0u, idx);\n+               name = str::slice(name, idx + 1u, str::char_len(name));\n+               install_named_specific(c, wd, source, name);\n+            }\n+            option::none {\n+               install_named(c, wd, name);\n+            }\n         }\n     }\n }"}, {"sha": "5fa7841c97246c67618d70af90be0a65b106c32b", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27161f4415e484680cf404b9819bf37d66c26783/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27161f4415e484680cf404b9819bf37d66c26783/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=27161f4415e484680cf404b9819bf37d66c26783", "patch": "@@ -109,14 +109,16 @@ mod write {\n     // Decides what to call an intermediate file, given the name of the output\n     // and the extension to use.\n     fn mk_intermediate_name(output_path: str, extension: str) -> str unsafe {\n-        let dot_pos = str::index_byte(output_path, '.' as u8);\n-        let stem;\n-        if dot_pos < 0 {\n-            stem = output_path;\n-        } else { stem = str::unsafe::slice_bytes(output_path, 0u,\n-                                                 dot_pos as uint); }\n+        let stem = alt str::index(output_path, '.') {\n+                       option::some(dot_pos) {\n+                           str::slice(output_path, 0u, dot_pos)\n+                       }\n+                       option::none { output_path }\n+                   };\n+\n         ret stem + \".\" + extension;\n     }\n+\n     fn run_passes(sess: session, llmod: ModuleRef, output: str) {\n         let opts = sess.opts;\n         if opts.time_llvm_passes { llvm::LLVMRustEnableTimePasses(); }"}, {"sha": "cb2590e195188f66d95d9632a3a0a5f12d010450", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27161f4415e484680cf404b9819bf37d66c26783/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27161f4415e484680cf404b9819bf37d66c26783/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=27161f4415e484680cf404b9819bf37d66c26783", "patch": "@@ -119,16 +119,13 @@ fn get_line(fm: filemap, line: int) -> str unsafe {\n     let end: uint;\n     if line as uint < vec::len(fm.lines) - 1u {\n         end = fm.lines[line + 1].byte - fm.start_pos.byte;\n+        ret str::unsafe::slice_bytes(*fm.src, begin, end);\n     } else {\n         // If we're not done parsing the file, we're at the limit of what's\n         // parsed. If we just slice the rest of the string, we'll print out\n         // the remainder of the file, which is undesirable.\n-        end = str::byte_len(*fm.src);\n-        let rest = str::unsafe::slice_bytes(*fm.src, begin, end);\n-        let newline = str::index_byte(rest, '\\n' as u8);\n-        if newline != -1 { end = begin + (newline as uint); }\n+        ret str::splitn_char(*fm.src, '\\n', 1u)[0];\n     }\n-    ret str::unsafe::slice_bytes(*fm.src, begin, end);\n }\n \n fn lookup_byte_offset(cm: codemap::codemap, chpos: uint)"}, {"sha": "9ff1fcfb59e1481b07430b0cd97b0add32b1ae0a", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27161f4415e484680cf404b9819bf37d66c26783/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27161f4415e484680cf404b9819bf37d66c26783/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=27161f4415e484680cf404b9819bf37d66c26783", "patch": "@@ -70,7 +70,7 @@ export\n    lines_iter,\n \n    // Searching\n-   //index,\n+   index,\n    //rindex,\n    index_byte,\n    rindex_byte,"}, {"sha": "8288501defc31bf5ecb47b80b8aef9d3659ec0d2", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27161f4415e484680cf404b9819bf37d66c26783/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27161f4415e484680cf404b9819bf37d66c26783/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=27161f4415e484680cf404b9819bf37d66c26783", "patch": "@@ -230,16 +230,14 @@ fn getopts(args: [str], opts: [opt]) -> result unsafe {\n             let i_arg = option::none::<str>;\n             if cur[1] == '-' as u8 {\n                 let tail = str::unsafe::slice_bytes(cur, 2u, curlen);\n-                let eq = str::index_byte(tail, '=' as u8);\n-                if eq == -1 {\n+                let tail_eq = str::splitn_char(tail, '=', 1u);\n+                if vec::len(tail_eq) <= 1u {\n                     names = [long(tail)];\n                 } else {\n                     names =\n-                        [long(str::unsafe::slice_bytes(tail,0u,eq as uint))];\n+                        [long(tail_eq[0])];\n                     i_arg =\n-                        option::some::<str>(str::unsafe::slice_bytes(tail,\n-                                                       (eq as uint) + 1u,\n-                                                       curlen - 2u));\n+                        option::some::<str>(tail_eq[1]);\n                 }\n             } else {\n                 let j = 1u;"}]}