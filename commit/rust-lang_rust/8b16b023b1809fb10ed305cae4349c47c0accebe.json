{"sha": "8b16b023b1809fb10ed305cae4349c47c0accebe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMTZiMDIzYjE4MDlmYjEwZWQzMDVjYWU0MzQ5YzQ3YzBhY2NlYmU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-09T14:32:00Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:30Z"}, "message": "Index HIR after creating TyCtxt", "tree": {"sha": "a7cb43a4d9badfe53001b1b6183db7e875c575e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7cb43a4d9badfe53001b1b6183db7e875c575e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b16b023b1809fb10ed305cae4349c47c0accebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b16b023b1809fb10ed305cae4349c47c0accebe", "html_url": "https://github.com/rust-lang/rust/commit/8b16b023b1809fb10ed305cae4349c47c0accebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b16b023b1809fb10ed305cae4349c47c0accebe/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3538cb38fceb82bbde827aeb44e96e25c4873b7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3538cb38fceb82bbde827aeb44e96e25c4873b7c", "html_url": "https://github.com/rust-lang/rust/commit/3538cb38fceb82bbde827aeb44e96e25c4873b7c"}], "stats": {"total": 459, "additions": 180, "deletions": 279}, "files": [{"sha": "72258c0537a96eddafc86113c01bd7535925fc61", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -163,7 +163,7 @@ macro_rules! arena_types {\n             [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n \n             // HIR query types\n-            [few] hir_map: rustc::hir::map::Map<$tcx>,\n+            [few] indexed_hir: rustc::hir::map::IndexedHir<$tcx>,\n             [few] hir_definitions: rustc::hir::map::definitions::Definitions,\n             [] hir_owner: rustc::hir::HirOwner<$tcx>,\n             [] hir_owner_items: rustc::hir::HirOwnerItems<$tcx>,"}, {"sha": "1b95be9a3c526d39cbb11d31331017e2d3407235", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         panic!(\"`visit_nested_xxx` must be manually implemented in this visitor\");\n     }\n "}, {"sha": "281056684a185813c0b4f516f961ad12cafdfeb1", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -1,4 +1,4 @@\n-use crate::hir::map::EarlyMap;\n+use crate::ty::TyCtxt;\n /*use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;\n@@ -7,8 +7,8 @@ use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ItemLocalId};*/\n \n-pub fn check_crate(_: &EarlyMap<'_>, sess: &rustc_session::Session) {\n-    /*hir_map.dep_graph.assert_ignored();\n+pub fn check_crate(_tcx: TyCtxt<'_>) {\n+    /*tcx.dep_graph.assert_ignored();\n \n     let errors = Lock::new(Vec::new());\n \n@@ -24,7 +24,7 @@ pub fn check_crate(_: &EarlyMap<'_>, sess: &rustc_session::Session) {\n \n     if !errors.is_empty() {\n         let message = errors.iter().fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n-        sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n+        tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n     }*/\n }\n /*\n@@ -135,7 +135,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n     type Map = EarlyMap<'hir>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n "}, {"sha": "d3aff7c963fab85ae9e6553288887fc975445ceb", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 39, "deletions": 65, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -3,16 +3,14 @@ pub use self::definitions::{\n     DefKey, DefPath, DefPathData, DefPathHash, Definitions, DisambiguatedDefPathData,\n };\n \n-use crate::arena::Arena;\n use crate::hir::{HirOwner, HirOwnerItems};\n-use crate::middle::cstore::CrateStoreDyn;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_ast::ast::{self, Name, NodeId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::Nested;\n@@ -129,38 +127,20 @@ fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {\n     }\n }\n \n-/// Represents a mapping from `NodeId`s to AST elements and their parent `NodeId`s.\n-pub struct EarlyMap<'hir> {\n-    pub krate: &'hir Crate<'hir>,\n-\n+pub struct IndexedHir<'hir> {\n     /// The SVH of the local crate.\n     pub crate_hash: Svh,\n \n     pub(super) owner_map: FxHashMap<DefIndex, &'hir HirOwner<'hir>>,\n     pub(super) owner_items_map: FxHashMap<DefIndex, &'hir HirOwnerItems<'hir>>,\n \n-    pub(crate) definitions: &'hir Definitions,\n-\n     /// The reverse mapping of `node_to_hir_id`.\n     pub(super) hir_to_node_id: FxHashMap<HirId, NodeId>,\n }\n \n-/// Represents a mapping from `NodeId`s to AST elements and their parent `NodeId`s.\n+#[derive(Copy, Clone)]\n pub struct Map<'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n-\n-    pub(super) krate: &'hir Crate<'hir>,\n-\n-    /// The SVH of the local crate.\n-    pub crate_hash: Svh,\n-\n-    pub(super) owner_map: FxHashMap<DefIndex, &'hir HirOwner<'hir>>,\n-    pub(super) owner_items_map: FxHashMap<DefIndex, &'hir HirOwnerItems<'hir>>,\n-\n-    pub(super) definitions: &'hir Definitions,\n-\n-    /// The reverse mapping of `node_to_hir_id`.\n-    pub(super) hir_to_node_id: FxHashMap<HirId, NodeId>,\n }\n \n /// An iterator that walks up the ancestor tree of a given `HirId`.\n@@ -196,21 +176,18 @@ impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n }\n \n impl<'hir> Map<'hir> {\n-    /// This is used internally in the dependency tracking system.\n-    /// Use the `krate` method to ensure your dependency on the\n-    /// crate is tracked.\n-    pub fn untracked_krate(&self) -> &Crate<'hir> {\n-        &self.krate\n+    pub fn krate(&self) -> &'hir Crate<'hir> {\n+        self.tcx.hir_crate(LOCAL_CRATE)\n     }\n \n     #[inline]\n-    pub fn definitions(&self) -> &Definitions {\n-        &self.definitions\n+    pub fn definitions(&self) -> &'hir Definitions {\n+        &self.tcx.definitions\n     }\n \n     pub fn def_key(&self, def_id: DefId) -> DefKey {\n         assert!(def_id.is_local());\n-        self.definitions.def_key(def_id.index)\n+        self.tcx.definitions.def_key(def_id.index)\n     }\n \n     pub fn def_path_from_hir_id(&self, id: HirId) -> Option<DefPath> {\n@@ -219,7 +196,7 @@ impl<'hir> Map<'hir> {\n \n     pub fn def_path(&self, def_id: DefId) -> DefPath {\n         assert!(def_id.is_local());\n-        self.definitions.def_path(def_id.index)\n+        self.tcx.definitions.def_path(def_id.index)\n     }\n \n     #[inline]\n@@ -248,42 +225,42 @@ impl<'hir> Map<'hir> {\n     #[inline]\n     pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<DefId> {\n         let node_id = self.hir_to_node_id(hir_id);\n-        self.definitions.opt_local_def_id(node_id)\n+        self.tcx.definitions.opt_local_def_id(node_id)\n     }\n \n     #[inline]\n     pub fn opt_local_def_id_from_node_id(&self, node: NodeId) -> Option<DefId> {\n-        self.definitions.opt_local_def_id(node)\n+        self.tcx.definitions.opt_local_def_id(node)\n     }\n \n     #[inline]\n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<NodeId> {\n-        self.definitions.as_local_node_id(def_id)\n+        self.tcx.definitions.as_local_node_id(def_id)\n     }\n \n     #[inline]\n     pub fn as_local_hir_id(&self, def_id: DefId) -> Option<HirId> {\n-        self.definitions.as_local_hir_id(def_id)\n+        self.tcx.definitions.as_local_hir_id(def_id)\n     }\n \n     #[inline]\n     pub fn hir_to_node_id(&self, hir_id: HirId) -> NodeId {\n-        self.hir_to_node_id[&hir_id]\n+        self.tcx.index_hir(LOCAL_CRATE).hir_to_node_id[&hir_id]\n     }\n \n     #[inline]\n     pub fn node_to_hir_id(&self, node_id: NodeId) -> HirId {\n-        self.definitions.node_to_hir_id(node_id)\n+        self.tcx.definitions.node_to_hir_id(node_id)\n     }\n \n     #[inline]\n     pub fn def_index_to_hir_id(&self, def_index: DefIndex) -> HirId {\n-        self.definitions.def_index_to_hir_id(def_index)\n+        self.tcx.definitions.def_index_to_hir_id(def_index)\n     }\n \n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n-        self.definitions.def_index_to_hir_id(def_id.to_def_id().index)\n+        self.tcx.definitions.def_index_to_hir_id(def_id.to_def_id().index)\n     }\n \n     pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n@@ -1045,45 +1022,42 @@ impl Named for ImplItem<'_> {\n     }\n }\n \n-pub fn map_crate<'hir>(\n-    sess: &rustc_session::Session,\n-    arena: &'hir Arena<'hir>,\n-    cstore: &CrateStoreDyn,\n-    krate: &'hir Crate<'hir>,\n-    definitions: Definitions,\n-) -> EarlyMap<'hir> {\n-    let _prof_timer = sess.prof.generic_activity(\"build_hir_map\");\n+pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx IndexedHir<'tcx> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n+\n+    let _prof_timer = tcx.sess.prof.generic_activity(\"build_hir_map\");\n \n     // Build the reverse mapping of `node_to_hir_id`.\n-    let hir_to_node_id = definitions\n+    let hir_to_node_id = tcx\n+        .definitions\n         .node_to_hir_id\n         .iter_enumerated()\n         .map(|(node_id, &hir_id)| (hir_id, node_id))\n         .collect();\n \n     let (owner_map, owner_items_map, crate_hash) = {\n-        let hcx = crate::ich::StableHashingContext::new(sess, krate, &definitions, cstore);\n-\n-        let mut collector =\n-            NodeCollector::root(sess, arena, krate, &definitions, &hir_to_node_id, hcx);\n-        intravisit::walk_crate(&mut collector, krate);\n-\n-        let crate_disambiguator = sess.local_crate_disambiguator();\n-        let cmdline_args = sess.opts.dep_tracking_hash();\n-        collector.finalize_and_compute_crate_hash(crate_disambiguator, cstore, cmdline_args)\n+        let hcx = tcx.create_stable_hashing_context();\n+\n+        let mut collector = NodeCollector::root(\n+            tcx.sess,\n+            &**tcx.arena,\n+            tcx.untracked_crate,\n+            &tcx.definitions,\n+            &hir_to_node_id,\n+            hcx,\n+        );\n+        intravisit::walk_crate(&mut collector, tcx.untracked_crate);\n+\n+        let crate_disambiguator = tcx.sess.local_crate_disambiguator();\n+        let cmdline_args = tcx.sess.opts.dep_tracking_hash();\n+        collector.finalize_and_compute_crate_hash(crate_disambiguator, &*tcx.cstore, cmdline_args)\n     };\n \n-    let map = EarlyMap {\n-        krate,\n+    let map = tcx.arena.alloc(IndexedHir {\n         crate_hash,\n         owner_map,\n         owner_items_map: owner_items_map.into_iter().map(|(k, v)| (k, &*v)).collect(),\n         hir_to_node_id,\n-        definitions: arena.alloc(definitions),\n-    };\n-\n-    sess.time(\"validate_HIR_map\", || {\n-        hir_id_validator::check_crate(&map, sess);\n     });\n \n     map"}, {"sha": "2142e61ca987609364e6b2bde6fb9d691cbc119c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 71, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -8,18 +8,14 @@ pub mod map;\n use crate::ich::StableHashingContext;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n-use rustc_data_structures::cold_path;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_hir::print;\n use rustc_hir::Body;\n-use rustc_hir::Crate;\n use rustc_hir::HirId;\n use rustc_hir::ItemLocalId;\n use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n-use std::ops::Deref;\n \n #[derive(HashStable)]\n pub struct HirOwner<'tcx> {\n@@ -60,48 +56,10 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for HirOwnerItems<'tcx> {\n     }\n }\n \n-/// A wrapper type which allows you to access HIR.\n-#[derive(Clone)]\n-pub struct Hir<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    map: &'tcx map::Map<'tcx>,\n-}\n-\n-impl<'tcx> Hir<'tcx> {\n-    pub fn krate(&self) -> &'tcx Crate<'tcx> {\n-        self.tcx.hir_crate(LOCAL_CRATE)\n-    }\n-}\n-\n-impl<'tcx> Deref for Hir<'tcx> {\n-    type Target = &'tcx map::Map<'tcx>;\n-\n-    #[inline(always)]\n-    fn deref(&self) -> &Self::Target {\n-        &self.map\n-    }\n-}\n-\n-impl<'hir> print::PpAnn for Hir<'hir> {\n-    fn nested(&self, state: &mut print::State<'_>, nested: print::Nested) {\n-        self.map.nested(state, nested)\n-    }\n-}\n-\n impl<'tcx> TyCtxt<'tcx> {\n     #[inline(always)]\n-    pub fn hir(self) -> Hir<'tcx> {\n-        let map = self.late_hir_map.load();\n-        let map = if unlikely!(map.is_none()) {\n-            cold_path(|| {\n-                let map = self.hir_map(LOCAL_CRATE);\n-                self.late_hir_map.store(Some(map));\n-                map\n-            })\n-        } else {\n-            map.unwrap()\n-        };\n-        Hir { tcx: self, map }\n+    pub fn hir(self) -> map::Map<'tcx> {\n+        map::Map { tcx: self }\n     }\n \n     pub fn parent_module(self, id: HirId) -> DefId {\n@@ -114,37 +72,16 @@ pub fn provide(providers: &mut Providers<'_>) {\n         let hir = tcx.hir();\n         hir.local_def_id(hir.get_module_parent_node(hir.as_local_hir_id(id).unwrap()))\n     };\n-    providers.hir_crate = |tcx, _| tcx.hir_map(LOCAL_CRATE).untracked_krate();\n-    providers.hir_map = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        let early = tcx.hir_map.steal();\n-        tcx.arena.alloc(map::Map {\n-            tcx,\n-            krate: early.krate,\n-\n-            crate_hash: early.crate_hash,\n-\n-            owner_map: early.owner_map,\n-            owner_items_map: early.owner_items_map,\n-\n-            definitions: early.definitions,\n-\n-            hir_to_node_id: early.hir_to_node_id,\n-        })\n-    };\n+    providers.hir_crate = |tcx, _| tcx.untracked_crate;\n+    providers.index_hir = map::index_hir;\n     providers.hir_module_items = |tcx, id| {\n         assert_eq!(id.krate, LOCAL_CRATE);\n         let hir = tcx.hir();\n         let module = hir.as_local_hir_id(id).unwrap();\n-        &hir.untracked_krate().modules[&module]\n-    };\n-    providers.hir_owner = |tcx, id| {\n-        assert_eq!(id.krate, LOCAL_CRATE);\n-        *tcx.hir().map.owner_map.get(&id.index).unwrap()\n-    };\n-    providers.hir_owner_items = |tcx, id| {\n-        assert_eq!(id.krate, LOCAL_CRATE);\n-        *tcx.hir().map.owner_items_map.get(&id.index).unwrap()\n+        &tcx.untracked_crate.modules[&module]\n     };\n+    providers.hir_owner = |tcx, id| *tcx.index_hir(id.krate).owner_map.get(&id.index).unwrap();\n+    providers.hir_owner_items =\n+        |tcx, id| *tcx.index_hir(id.krate).owner_items_map.get(&id.index).unwrap();\n     map::provide(providers);\n }"}, {"sha": "866fe8c88a858bbce29b4d5f5b14400f3a23e31a", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -55,7 +55,7 @@ rustc_queries! {\n             desc { \"get the crate HIR\" }\n         }\n \n-        query hir_map(_: CrateNum) -> &'tcx map::Map<'tcx> {\n+        query index_hir(_: CrateNum) -> &'tcx map::IndexedHir<'tcx> {\n             eval_always\n             no_hash\n             desc { \"index HIR\" }"}, {"sha": "611a2dc20b41025c53f01dff6a72d1601e140b17", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -53,7 +53,7 @@ use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{\n     hash_stable_hashmap, HashStable, StableHasher, StableVec,\n };\n-use rustc_data_structures::sync::{self, AtomicCell, Lock, Lrc, WorkerLocal};\n+use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n@@ -939,7 +939,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     interners: CtxtInterners<'tcx>,\n \n-    cstore: Box<CrateStoreDyn>,\n+    pub(crate) cstore: Box<CrateStoreDyn>,\n \n     pub sess: &'tcx Session,\n \n@@ -972,9 +972,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// Export map produced by name resolution.\n     export_map: FxHashMap<DefId, Vec<Export<hir::HirId>>>,\n \n-    /// These should usually be accessed with the `tcx.hir()` method.\n-    pub(crate) hir_map: Steal<hir_map::EarlyMap<'tcx>>,\n-    pub(crate) late_hir_map: AtomicCell<Option<&'tcx hir_map::Map<'tcx>>>,\n     pub(crate) untracked_crate: &'tcx hir::Crate<'tcx>,\n     pub(crate) definitions: &'tcx Definitions,\n \n@@ -1120,7 +1117,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         extern_providers: ty::query::Providers<'tcx>,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         resolutions: ty::ResolverOutputs,\n-        hir: hir_map::EarlyMap<'tcx>,\n+        krate: &'tcx hir::Crate<'tcx>,\n+        definitions: &'tcx Definitions,\n         dep_graph: DepGraph,\n         on_disk_query_result_cache: query::OnDiskCache<'tcx>,\n         crate_name: &str,\n@@ -1133,7 +1131,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         let common_types = CommonTypes::new(&interners);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n-        let definitions = hir.definitions;\n         let cstore = resolutions.cstore;\n         let crates = cstore.crates_untracked();\n         let max_cnum = crates.iter().map(|c| c.as_usize()).max().unwrap_or(0);\n@@ -1213,9 +1210,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .map(|(id, names)| (definitions.local_def_id(id), names))\n                 .collect(),\n             extern_prelude: resolutions.extern_prelude,\n-            untracked_crate: hir.krate,\n-            hir_map: Steal::new(hir),\n-            late_hir_map: AtomicCell::new(None),\n+            untracked_crate: krate,\n             definitions,\n             def_path_hash_to_def_id,\n             queries: query::Queries::new(providers, extern_providers, on_disk_query_result_cache),"}, {"sha": "b5b1d82f1ee7f3d7115b2a93f40e8098c98b07d1", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -1462,7 +1462,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         impl<'r, 'a, 'v, 'hir> intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n             type Map = Map<'v>;\n \n-            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n                 intravisit::NestedVisitorMap::None\n             }\n "}, {"sha": "2361046c0366c7eca54ab3352e7182cfd9118d23", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -106,7 +106,7 @@ trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n \n     /// Provides a uniform interface for re-extracting a reference to an\n     /// `hir_map::Map` from a value that now owns it.\n-    fn hir_map(&self) -> Option<&hir_map::Map<'hir>>;\n+    fn hir_map(&self) -> Option<hir_map::Map<'hir>>;\n \n     /// Produces the pretty-print annotation object.\n     ///\n@@ -142,8 +142,8 @@ impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n         self.sess\n     }\n \n-    fn hir_map(&self) -> Option<&hir_map::Map<'hir>> {\n-        self.tcx.map(|tcx| *tcx.hir())\n+    fn hir_map(&self) -> Option<hir_map::Map<'hir>> {\n+        self.tcx.map(|tcx| tcx.hir())\n     }\n \n     fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n@@ -155,7 +155,7 @@ impl<'hir> pprust::PpAnn for NoAnn<'hir> {}\n impl<'hir> pprust_hir::PpAnn for NoAnn<'hir> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n         if let Some(tcx) = self.tcx {\n-            pprust_hir::PpAnn::nested(*tcx.hir(), state, nested)\n+            pprust_hir::PpAnn::nested(&tcx.hir(), state, nested)\n         }\n     }\n }\n@@ -216,8 +216,8 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n         self.sess\n     }\n \n-    fn hir_map(&self) -> Option<&hir_map::Map<'hir>> {\n-        self.tcx.map(|tcx| *tcx.hir())\n+    fn hir_map(&self) -> Option<hir_map::Map<'hir>> {\n+        self.tcx.map(|tcx| tcx.hir())\n     }\n \n     fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n@@ -228,7 +228,7 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n         if let Some(ref tcx) = self.tcx {\n-            pprust_hir::PpAnn::nested(*tcx.hir(), state, nested)\n+            pprust_hir::PpAnn::nested(&tcx.hir(), state, nested)\n         }\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {\n@@ -315,8 +315,8 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n         &self.tcx.sess\n     }\n \n-    fn hir_map(&self) -> Option<&hir_map::Map<'tcx>> {\n-        Some(&self.tcx.hir())\n+    fn hir_map(&self) -> Option<hir_map::Map<'tcx>> {\n+        Some(self.tcx.hir())\n     }\n \n     fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n@@ -334,7 +334,7 @@ impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n         if let pprust_hir::Nested::Body(id) = nested {\n             self.tables.set(self.tcx.body_tables(id));\n         }\n-        pprust_hir::PpAnn::nested(*self.tcx.hir(), state, nested);\n+        pprust_hir::PpAnn::nested(&self.tcx.hir(), state, nested);\n         self.tables.set(old_tables);\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {"}, {"sha": "7202c6cac26975b0d35279ee9728eb716565548a", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -134,7 +134,7 @@ pub trait Map<'hir> {\n ///\n /// See the comments on `ItemLikeVisitor` for more details on the overall\n /// visit strategy.\n-pub enum NestedVisitorMap<'this, M> {\n+pub enum NestedVisitorMap<M> {\n     /// Do not visit any nested things. When you add a new\n     /// \"non-nested\" thing, you will want to audit such uses to see if\n     /// they remain valid.\n@@ -151,20 +151,20 @@ pub enum NestedVisitorMap<'this, M> {\n     /// to use `visit_all_item_likes()` as an outer loop,\n     /// and to have the visitor that visits the contents of each item\n     /// using this setting.\n-    OnlyBodies(&'this M),\n+    OnlyBodies(M),\n \n     /// Visits all nested things, including item-likes.\n     ///\n     /// **This is an unusual choice.** It is used when you want to\n     /// process everything within their lexical context. Typically you\n     /// kick off the visit by doing `walk_krate()`.\n-    All(&'this M),\n+    All(M),\n }\n \n-impl<'this, M> NestedVisitorMap<'this, M> {\n+impl<M> NestedVisitorMap<M> {\n     /// Returns the map to use for an \"intra item-like\" thing (if any).\n     /// E.g., function body.\n-    fn intra(self) -> Option<&'this M> {\n+    fn intra(self) -> Option<M> {\n         match self {\n             NestedVisitorMap::None => None,\n             NestedVisitorMap::OnlyBodies(map) => Some(map),\n@@ -174,7 +174,7 @@ impl<'this, M> NestedVisitorMap<'this, M> {\n \n     /// Returns the map to use for an \"item-like\" thing (if any).\n     /// E.g., item, impl-item.\n-    fn inter(self) -> Option<&'this M> {\n+    fn inter(self) -> Option<M> {\n         match self {\n             NestedVisitorMap::None => None,\n             NestedVisitorMap::OnlyBodies(_) => None,\n@@ -221,7 +221,7 @@ pub trait Visitor<'v>: Sized {\n     /// `panic!()`. This way, if a new `visit_nested_XXX` variant is\n     /// added in the future, we will see the panic in your code and\n     /// fix it appropriately.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map>;\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map>;\n \n     /// Invoked when a nested item is encountered. By default does\n     /// nothing unless you override `nested_visit_map` to return other than"}, {"sha": "a7dccaf974b8240146a6c8cd8e1dd7ab37bb5ccb", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -162,8 +162,8 @@ impl IfThisChanged<'tcx> {\n impl Visitor<'tcx> for IfThisChanged<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "c2274a7424e11f760cf387ae9b3f236cf095cbcf", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -547,8 +547,8 @@ impl FindAllAttrs<'tcx> {\n impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n-        intravisit::NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        intravisit::NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_attribute(&mut self, attr: &'tcx Attribute) {"}, {"sha": "0eda4555e25656f671c9d6f8c88dbf739c85dd4a", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -16,7 +16,7 @@ use std::borrow::Cow;\n struct FindLocalByTypeVisitor<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     target_ty: Ty<'tcx>,\n-    hir_map: &'a Map<'tcx>,\n+    hir_map: Map<'tcx>,\n     found_local_pattern: Option<&'tcx Pat<'tcx>>,\n     found_arg_pattern: Option<&'tcx Pat<'tcx>>,\n     found_ty: Option<Ty<'tcx>>,\n@@ -25,7 +25,7 @@ struct FindLocalByTypeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> FindLocalByTypeVisitor<'a, 'tcx> {\n-    fn new(infcx: &'a InferCtxt<'a, 'tcx>, target_ty: Ty<'tcx>, hir_map: &'a Map<'tcx>) -> Self {\n+    fn new(infcx: &'a InferCtxt<'a, 'tcx>, target_ty: Ty<'tcx>, hir_map: Map<'tcx>) -> Self {\n         Self {\n             infcx,\n             target_ty,\n@@ -69,8 +69,8 @@ impl<'a, 'tcx> FindLocalByTypeVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for FindLocalByTypeVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.hir_map)\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n \n     fn visit_local(&mut self, local: &'tcx Local<'tcx>) {\n@@ -223,7 +223,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n         let (name, name_sp, descr, parent_name, parent_descr) = self.extract_type_name(&ty, None);\n \n-        let mut local_visitor = FindLocalByTypeVisitor::new(&self, ty, &self.tcx.hir());\n+        let mut local_visitor = FindLocalByTypeVisitor::new(&self, ty, self.tcx.hir());\n         let ty_to_string = |ty: Ty<'tcx>| -> String {\n             let mut s = String::new();\n             let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);"}, {"sha": "47d6f5ccbb16dd50ad9bc0b956e97fbdfbbf8606", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -93,8 +93,8 @@ struct FindNestedTypeVisitor<'tcx> {\n impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n@@ -212,8 +212,8 @@ struct TyPathVisitor<'tcx> {\n impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Map<'tcx>> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Map<'tcx>> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {"}, {"sha": "a250fcc217a477d6e9bc4852ebb92ef53260dd74", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -5,7 +5,7 @@ use crate::util;\n use log::{info, log_enabled, warn};\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::hir::map;\n+use rustc::hir::map::Definitions;\n use rustc::lint;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n@@ -713,10 +713,7 @@ pub fn create_global_ctxt<'tcx>(\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n     let sess = &compiler.session();\n-    let defs = mem::take(&mut resolver_outputs.definitions);\n-\n-    // Construct the HIR map.\n-    let hir_map = map::map_crate(sess, &**arena, &*resolver_outputs.cstore, krate, defs);\n+    let defs: &'tcx Definitions = arena.alloc(mem::take(&mut resolver_outputs.definitions));\n \n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n \n@@ -742,7 +739,8 @@ pub fn create_global_ctxt<'tcx>(\n                 extern_providers,\n                 arena,\n                 resolver_outputs,\n-                hir_map,\n+                krate,\n+                defs,\n                 dep_graph,\n                 query_result_on_disk_cache,\n                 &crate_name,"}, {"sha": "d9333658b90e2e78c36c5d3990228bfcc09dc32c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -1073,7 +1073,7 @@ impl TypeAliasBounds {\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n             type Map = Map<'v>;\n \n-            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n                 intravisit::NestedVisitorMap::None\n             }\n "}, {"sha": "d2cc55106035752bbab53f6575eaf576a4288fc6", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -99,8 +99,8 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> hir_visit::Visitor<'tcx>\n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<'_, Self::Map> {\n-        hir_visit::NestedVisitorMap::All(&self.context.tcx.hir())\n+    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n+        hir_visit::NestedVisitorMap::All(self.context.tcx.hir())\n     }\n \n     fn visit_nested_body(&mut self, body: hir::BodyId) {"}, {"sha": "2062f9499aeb96f0e0980e8597a3a3bc7e10d97a", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -438,8 +438,8 @@ impl LintLevelMapBuilder<'_, '_> {\n impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n-        intravisit::NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        intravisit::NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {"}, {"sha": "06475ab270c6a663b6bec1c759d2d04dae8a7e71", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -1505,8 +1505,8 @@ impl EncodeContext<'tcx> {\n impl Visitor<'tcx> for EncodeContext<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {\n         intravisit::walk_expr(self, ex);"}, {"sha": "21788593259c2f96bcd42c73695a98c5186e7367", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -453,7 +453,7 @@ struct UnusedUnsafeVisitor<'a> {\n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n "}, {"sha": "d4a5966af4afe49e57f3acf250d726237b1ffe18", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -87,7 +87,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             intravisit::walk_struct_def(self, v)\n         }\n         type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n     }"}, {"sha": "96172a4aca20f1ccf07c79bc10d7f371290dfc43", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -45,7 +45,7 @@ struct MatchVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -752,7 +752,7 @@ fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pa\n     impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n         type Map = Map<'v>;\n \n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "702872400c45ef4a1d7567bb27e868ad345fca2c", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -418,8 +418,8 @@ impl CheckAttrVisitor<'tcx> {\n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {"}, {"sha": "af06fc0c0026d2d829a7657434e7feec8f54446d", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -8,7 +8,6 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc::hir::map::Map;\n-use rustc::hir::Hir;\n use rustc::session::config::nightly_options;\n use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n@@ -75,7 +74,7 @@ enum ConstKind {\n }\n \n impl ConstKind {\n-    fn for_body(body: &hir::Body<'_>, hir_map: Hir<'_>) -> Option<Self> {\n+    fn for_body(body: &hir::Body<'_>, hir_map: Map<'_>) -> Option<Self> {\n         let is_const_fn = |id| hir_map.fn_sig_by_hir_id(id).unwrap().header.is_const();\n \n         let owner = hir_map.body_owner(body.id());\n@@ -202,8 +201,8 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {"}, {"sha": "7460b8e2fe9301a6f2f9347a57cb51a251acde64", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -212,7 +212,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -568,8 +568,8 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     /// on inner functions when the outer function is already getting\n     /// an error. We could do this also by checking the parents, but\n     /// this is how the code is setup and it seems harmless enough.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "2cabe786d0cda8aa1f97771728e75a862c087ab3", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -1,4 +1,4 @@\n-use rustc::hir::Hir;\n+use rustc::hir::map::Map;\n use rustc::session::config::EntryFnType;\n use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n@@ -15,7 +15,7 @@ use rustc_span::{Span, DUMMY_SP};\n struct EntryContext<'a, 'tcx> {\n     session: &'a Session,\n \n-    map: Hir<'tcx>,\n+    map: Map<'tcx>,\n \n     /// The top-level function called `main`.\n     main_fn: Option<(HirId, Span)>,"}, {"sha": "7037ed0d9b9332c559ab691114be61005d38a6c8", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -95,7 +95,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n \n     type Map = Map<'v>;\n \n-    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n         panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n     }\n "}, {"sha": "5cf9666797ebb6d6a556b8d969bda60e5201b589", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -124,7 +124,7 @@ impl ExprVisitor<'tcx> {\n impl Visitor<'tcx> for ItemVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -141,7 +141,7 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n impl Visitor<'tcx> for ExprVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "133e30f6ff01a2cf61f3a73830e7a6796c801329", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -114,8 +114,8 @@ impl LibFeatureCollector<'tcx> {\n impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_attribute(&mut self, attr: &'tcx Attribute) {"}, {"sha": "030d0893b0274a6cd5405985c9ebad2aae8ae2e7", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -156,8 +156,8 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_fn(\n@@ -1361,7 +1361,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "1daef45a1f591776f159c17bd4d76c328af114cc", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -24,15 +24,14 @@ enum Context {\n #[derive(Copy, Clone)]\n struct CheckLoopVisitor<'a, 'hir> {\n     sess: &'a Session,\n-    hir_map: &'a Map<'hir>,\n+    hir_map: Map<'hir>,\n     cx: Context,\n }\n \n fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n-        &mut CheckLoopVisitor { sess: &tcx.sess, hir_map: &tcx.hir(), cx: Normal }\n-            .as_deep_visitor(),\n+        &mut CheckLoopVisitor { sess: &tcx.sess, hir_map: tcx.hir(), cx: Normal }.as_deep_visitor(),\n     );\n }\n \n@@ -43,8 +42,8 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n     type Map = Map<'hir>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.hir_map)\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n \n     fn visit_anon_const(&mut self, c: &'hir hir::AnonConst) {"}, {"sha": "ad415ed8f62cf3ec7c92c86ff9ae5ac10c2a4a45", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -85,7 +85,7 @@ struct ReachableContext<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "640a3a35aa032e5a425f305448d310ebe87d415f", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -698,7 +698,7 @@ impl<'tcx> RegionResolutionVisitor<'tcx> {\n impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "6cf4132141b13b72c66e32133a5abcafcb4df209", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -259,8 +259,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     /// deep-walking.\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n@@ -350,8 +350,8 @@ impl<'a, 'tcx> MissingStabilityAnnotations<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n@@ -492,8 +492,8 @@ impl Visitor<'tcx> for Checker<'tcx> {\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "d20237a22d99db7fe2a60cea24fb9224cff6d42f", "filename": "src/librustc_passes/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fupvars.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -46,7 +46,7 @@ struct LocalCollector {\n impl Visitor<'tcx> for LocalCollector {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -75,7 +75,7 @@ impl CaptureCollector<'_, '_> {\n impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "d85c7d8c6de04c6ffc09ee42b5c17f5c31919553", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     type Map = Map<'v>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Map<'v>> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Map<'v>> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "46067187173a0a6d287ed0db5fd5c3410ddcb819", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -373,8 +373,8 @@ struct PubRestrictedVisitor<'tcx> {\n impl Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n     fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {\n         self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();\n@@ -678,8 +678,8 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -1049,8 +1049,8 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {\n@@ -1191,8 +1191,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {\n@@ -1449,7 +1449,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n     type Map = Map<'v>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -1479,8 +1479,8 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -1925,8 +1925,8 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "ddee73e72a409704b669b924f33f0372fd9e5058", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -367,8 +367,8 @@ fn sub_items_have_self_param(node: &hir::ItemKind<'_>) -> bool {\n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     // We want to nest trait/impl items in their parent, but nothing else.\n@@ -1125,7 +1125,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     impl<'v, 'a, 'tcx> Visitor<'v> for GatherLabels<'a, 'tcx> {\n         type Map = Map<'v>;\n \n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -2174,7 +2174,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             impl<'a> Visitor<'a> for SelfVisitor<'a> {\n                 type Map = Map<'a>;\n \n-                fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+                fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n                     NestedVisitorMap::None\n                 }\n \n@@ -2265,7 +2265,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         impl<'v, 'a> Visitor<'v> for GatherLifetimes<'a> {\n             type Map = Map<'v>;\n \n-            fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+            fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n                 NestedVisitorMap::None\n             }\n \n@@ -2854,7 +2854,7 @@ fn insert_late_bound_lifetimes(\n     impl<'v> Visitor<'v> for ConstrainedCollector {\n         type Map = Map<'v>;\n \n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -2897,7 +2897,7 @@ fn insert_late_bound_lifetimes(\n     impl<'v> Visitor<'v> for AllCollector {\n         type Map = Map<'v>;\n \n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "656c3c7e6138f0623b84a2c324310afc08580d43", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -1569,7 +1569,7 @@ struct ReturnsVisitor<'v> {\n impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n     type Map = rustc::hir::map::Map<'v>;\n \n-    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n         hir::intravisit::NestedVisitorMap::None\n     }\n "}, {"sha": "3a0c36a84ae813fddbefc8785613250f77934ee1", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -603,8 +603,8 @@ impl ClauseDumper<'tcx> {\n impl Visitor<'tcx> for ClauseDumper<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "387d1d9923da203d7f3e8311fc2a7dce2529e16e", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -273,8 +273,7 @@ fn original_crate_name(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Symbol {\n }\n \n fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-    tcx.hir().crate_hash\n+    tcx.index_hir(crate_num).crate_hash\n }\n \n fn instance_def_size_estimate<'tcx>("}, {"sha": "1dde57124ee0ac9bf88247c1bf70f9343020b5af", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -893,7 +893,7 @@ fn compare_synthetic_generics<'tcx>(\n                             type Map = Map<'v>;\n                             fn nested_visit_map(\n                                 &mut self,\n-                            ) -> intravisit::NestedVisitorMap<'_, Self::Map>\n+                            ) -> intravisit::NestedVisitorMap<Self::Map>\n                             {\n                                 intravisit::NestedVisitorMap::None\n                             }"}, {"sha": "5208e2f56a5c2bc4f51b748ded1b60e7444d2449", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -211,7 +211,7 @@ pub fn resolve_interior<'a, 'tcx>(\n impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "ef779cfa8343101fa9cbfaedabead27deb2226dd", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -1349,7 +1349,7 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n \n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n }"}, {"sha": "d0d421746ae8f33b0e6b494d16d4c40a33ae3ec7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -1179,7 +1179,7 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "975c6e101a6915aae833ead41b0f45c92a883f40", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -419,7 +419,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n \n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "7bc121733a4e679875de72f2c699e3c19e19f331", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -62,7 +62,7 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "b8f8030e3cdd7c0668c5af70f96142dbdb2e2039", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -246,7 +246,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "779b30c55e12d9cf3d142ece6d0eb59df4dcad38", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -107,7 +107,7 @@ crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n     type Map = Map<'v>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n     fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n@@ -201,8 +201,8 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -1047,7 +1047,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     impl Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n         type Map = Map<'tcx>;\n \n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "c4a8edd86f83fa18d9f0c72f3ca40a96d0b3ad90", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -529,8 +529,8 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     impl<'tcx> intravisit::Visitor<'tcx> for ConstraintLocator<'tcx> {\n         type Map = Map<'tcx>;\n \n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n-            intravisit::NestedVisitorMap::All(&self.tcx.hir())\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+            intravisit::NestedVisitorMap::All(self.tcx.hir())\n         }\n         fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n             if let hir::ExprKind::Closure(..) = ex.kind {"}, {"sha": "15e588705f734831177b13dd13132599618f7a1b", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16b023b1809fb10ed305cae4349c47c0accebe/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8b16b023b1809fb10ed305cae4349c47c0accebe", "patch": "@@ -107,7 +107,7 @@ pub fn run(options: Options) -> i32 {\n                 let mut hir_collector = HirCollector {\n                     sess: compiler.session(),\n                     collector: &mut collector,\n-                    map: *tcx.hir(),\n+                    map: tcx.hir(),\n                     codes: ErrorCodes::from(\n                         compiler.session().opts.unstable_features.is_nightly_build(),\n                     ),\n@@ -856,7 +856,7 @@ impl Tester for Collector {\n struct HirCollector<'a, 'hir> {\n     sess: &'a session::Session,\n     collector: &'a mut Collector,\n-    map: &'a Map<'hir>,\n+    map: Map<'hir>,\n     codes: ErrorCodes,\n }\n \n@@ -904,8 +904,8 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n     type Map = Map<'hir>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n-        intravisit::NestedVisitorMap::All(&self.map)\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        intravisit::NestedVisitorMap::All(self.map)\n     }\n \n     fn visit_item(&mut self, item: &'hir hir::Item) {"}]}