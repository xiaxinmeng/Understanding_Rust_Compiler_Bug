{"sha": "047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "node_id": "C_kwDOAAsO6NoAKDA0N2Y5YzRiYzRlMjZkZjRmNTRjM2M3NmFmM2U5NjM3ODJlZDA1ZTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-04T10:38:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-04T10:38:11Z"}, "message": "Auto merge of #94539 - tmiasko:string-attributes, r=nikic\n\nPass LLVM string attributes as string slices", "tree": {"sha": "38f0265287eb1fd99c918a06ee788ba01bc16bf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38f0265287eb1fd99c918a06ee788ba01bc16bf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "html_url": "https://github.com/rust-lang/rust/commit/047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62ff2bcf9485f52050093d1780f409d50953549b", "url": "https://api.github.com/repos/rust-lang/rust/commits/62ff2bcf9485f52050093d1780f409d50953549b", "html_url": "https://github.com/rust-lang/rust/commit/62ff2bcf9485f52050093d1780f409d50953549b"}, {"sha": "926bf1a3718fc408b2d75a7536b7a2ed3d2d070b", "url": "https://api.github.com/repos/rust-lang/rust/commits/926bf1a3718fc408b2d75a7536b7a2ed3d2d070b", "html_url": "https://github.com/rust-lang/rust/commit/926bf1a3718fc408b2d75a7536b7a2ed3d2d070b"}], "stats": {"total": 90, "additions": 47, "deletions": 43}, "files": [{"sha": "b14a4f28c756ca5b2a85cb411e1fe36f1192f027", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "patch": "@@ -561,8 +561,7 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n         if self.conv == Conv::CCmseNonSecureCall {\n             // This will probably get ignored on all targets but those supporting the TrustZone-M\n             // extension (thumbv8m targets).\n-            let cmse_nonsecure_call =\n-                llvm::CreateAttrString(bx.cx.llcx, cstr::cstr!(\"cmse_nonsecure_call\"));\n+            let cmse_nonsecure_call = llvm::CreateAttrString(bx.cx.llcx, \"cmse_nonsecure_call\");\n             attributes::apply_to_callsite(\n                 callsite,\n                 llvm::AttributePlace::Function,"}, {"sha": "6fd836946ffb464d88a417b8b4f0064129d2d46a", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "patch": "@@ -1,10 +1,6 @@\n //! Set and unset common attributes on LLVM values.\n \n-use std::ffi::CString;\n-\n-use cstr::cstr;\n use rustc_codegen_ssa::traits::*;\n-use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -103,11 +99,11 @@ pub fn frame_pointer_type_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attr\n         fp = FramePointer::Always;\n     }\n     let attr_value = match fp {\n-        FramePointer::Always => cstr!(\"all\"),\n-        FramePointer::NonLeaf => cstr!(\"non-leaf\"),\n+        FramePointer::Always => \"all\",\n+        FramePointer::NonLeaf => \"non-leaf\",\n         FramePointer::MayOmit => return None,\n     };\n-    Some(llvm::CreateAttrStringValue(cx.llcx, cstr!(\"frame-pointer\"), attr_value))\n+    Some(llvm::CreateAttrStringValue(cx.llcx, \"frame-pointer\", attr_value))\n }\n \n /// Tell LLVM what instrument function to insert.\n@@ -119,11 +115,11 @@ fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribu\n \n         // The function name varies on platforms.\n         // See test/CodeGen/mcount.c in clang.\n-        let mcount_name = CString::new(cx.sess().target.mcount.as_str().as_bytes()).unwrap();\n+        let mcount_name = cx.sess().target.mcount.as_str();\n \n         Some(llvm::CreateAttrStringValue(\n             cx.llcx,\n-            cstr!(\"instrument-function-entry-inlined\"),\n+            \"instrument-function-entry-inlined\",\n             &mcount_name,\n         ))\n     } else {\n@@ -159,20 +155,20 @@ fn probestack_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n         StackProbeType::None => return None,\n         // Request LLVM to generate the probes inline. If the given LLVM version does not support\n         // this, no probe is generated at all (even if the attribute is specified).\n-        StackProbeType::Inline => cstr!(\"inline-asm\"),\n+        StackProbeType::Inline => \"inline-asm\",\n         // Flag our internal `__rust_probestack` function as the stack probe symbol.\n         // This is defined in the `compiler-builtins` crate for each architecture.\n-        StackProbeType::Call => cstr!(\"__rust_probestack\"),\n+        StackProbeType::Call => \"__rust_probestack\",\n         // Pick from the two above based on the LLVM version.\n         StackProbeType::InlineOrCall { min_llvm_version_for_inline } => {\n             if llvm_util::get_version() < min_llvm_version_for_inline {\n-                cstr!(\"__rust_probestack\")\n+                \"__rust_probestack\"\n             } else {\n-                cstr!(\"inline-asm\")\n+                \"inline-asm\"\n             }\n         }\n     };\n-    Some(llvm::CreateAttrStringValue(cx.llcx, cstr!(\"probe-stack\"), attr_value))\n+    Some(llvm::CreateAttrStringValue(cx.llcx, \"probe-stack\", attr_value))\n }\n \n fn stackprotector_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n@@ -187,15 +183,13 @@ fn stackprotector_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n }\n \n pub fn target_cpu_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> &'ll Attribute {\n-    let target_cpu = SmallCStr::new(llvm_util::target_cpu(cx.tcx.sess));\n-    llvm::CreateAttrStringValue(cx.llcx, cstr!(\"target-cpu\"), target_cpu.as_c_str())\n+    let target_cpu = llvm_util::target_cpu(cx.tcx.sess);\n+    llvm::CreateAttrStringValue(cx.llcx, \"target-cpu\", target_cpu)\n }\n \n pub fn tune_cpu_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n-    llvm_util::tune_cpu(cx.tcx.sess).map(|tune| {\n-        let tune_cpu = SmallCStr::new(tune);\n-        llvm::CreateAttrStringValue(cx.llcx, cstr!(\"tune-cpu\"), tune_cpu.as_c_str())\n-    })\n+    llvm_util::tune_cpu(cx.tcx.sess)\n+        .map(|tune_cpu| llvm::CreateAttrStringValue(cx.llcx, \"tune-cpu\", tune_cpu))\n }\n \n /// Get the `NonLazyBind` LLVM attribute,\n@@ -280,7 +274,7 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     }\n \n     if cx.sess().opts.debugging_opts.profile_sample_use.is_some() {\n-        to_add.push(llvm::CreateAttrString(cx.llcx, cstr!(\"use-sample-profile\")));\n+        to_add.push(llvm::CreateAttrString(cx.llcx, \"use-sample-profile\"));\n     }\n \n     // FIXME: none of these three functions interact with source level attributes.\n@@ -310,7 +304,7 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         attributes::apply_to_llfn(llfn, AttributePlace::ReturnValue, &[no_alias]);\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY) {\n-        to_add.push(llvm::CreateAttrString(cx.llcx, cstr!(\"cmse_nonsecure_entry\")));\n+        to_add.push(llvm::CreateAttrString(cx.llcx, \"cmse_nonsecure_entry\"));\n     }\n     if let Some(align) = codegen_fn_attrs.alignment {\n         llvm::set_alignment(llfn, align as usize);\n@@ -363,12 +357,12 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         // If this function is an import from the environment but the wasm\n         // import has a specific module/name, apply them here.\n         if let Some(module) = wasm_import_module(cx.tcx, instance.def_id()) {\n-            to_add.push(llvm::CreateAttrStringValue(cx.llcx, cstr!(\"wasm-import-module\"), &module));\n+            to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"wasm-import-module\", &module));\n \n             let name =\n                 codegen_fn_attrs.link_name.unwrap_or_else(|| cx.tcx.item_name(instance.def_id()));\n-            let name = CString::new(name.as_str()).unwrap();\n-            to_add.push(llvm::CreateAttrStringValue(cx.llcx, cstr!(\"wasm-import-name\"), &name));\n+            let name = name.as_str();\n+            to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"wasm-import-name\", name));\n         }\n \n         // The `\"wasm\"` abi on wasm targets automatically enables the\n@@ -388,13 +382,13 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         let val = global_features\n             .chain(function_features.iter().map(|s| &s[..]))\n             .intersperse(\",\")\n-            .collect::<SmallCStr>();\n-        to_add.push(llvm::CreateAttrStringValue(cx.llcx, cstr!(\"target-features\"), &val));\n+            .collect::<String>();\n+        to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"target-features\", &val));\n     }\n \n     attributes::apply_to_llfn(llfn, Function, &to_add);\n }\n \n-fn wasm_import_module(tcx: TyCtxt<'_>, id: DefId) -> Option<CString> {\n-    tcx.wasm_import_module_map(id.krate).get(&id).map(|s| CString::new(&s[..]).unwrap())\n+fn wasm_import_module(tcx: TyCtxt<'_>, id: DefId) -> Option<&String> {\n+    tcx.wasm_import_module_map(id.krate).get(&id)\n }"}, {"sha": "375b9927c867219579c4cf15d9ad6cf19a7ec792", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "patch": "@@ -1176,11 +1176,12 @@ extern \"C\" {\n \n     // Operations on attributes\n     pub fn LLVMRustCreateAttrNoValue(C: &Context, attr: AttributeKind) -> &Attribute;\n-    pub fn LLVMRustCreateAttrString(C: &Context, Name: *const c_char) -> &Attribute;\n-    pub fn LLVMRustCreateAttrStringValue(\n+    pub fn LLVMCreateStringAttribute(\n         C: &Context,\n         Name: *const c_char,\n+        NameLen: c_uint,\n         Value: *const c_char,\n+        ValueLen: c_uint,\n     ) -> &Attribute;\n     pub fn LLVMRustCreateAlignmentAttr(C: &Context, bytes: u64) -> &Attribute;\n     pub fn LLVMRustCreateDereferenceableAttr(C: &Context, bytes: u64) -> &Attribute;"}, {"sha": "48fbc1de8ee4407adbf323e87430a66ad98ff3c2", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "patch": "@@ -47,12 +47,28 @@ pub fn AddCallSiteAttributes<'ll>(\n     }\n }\n \n-pub fn CreateAttrStringValue<'ll>(llcx: &'ll Context, attr: &CStr, value: &CStr) -> &'ll Attribute {\n-    unsafe { LLVMRustCreateAttrStringValue(llcx, attr.as_ptr(), value.as_ptr()) }\n+pub fn CreateAttrStringValue<'ll>(llcx: &'ll Context, attr: &str, value: &str) -> &'ll Attribute {\n+    unsafe {\n+        LLVMCreateStringAttribute(\n+            llcx,\n+            attr.as_ptr().cast(),\n+            attr.len().try_into().unwrap(),\n+            value.as_ptr().cast(),\n+            value.len().try_into().unwrap(),\n+        )\n+    }\n }\n \n-pub fn CreateAttrString<'ll>(llcx: &'ll Context, attr: &CStr) -> &'ll Attribute {\n-    unsafe { LLVMRustCreateAttrStringValue(llcx, attr.as_ptr(), std::ptr::null()) }\n+pub fn CreateAttrString<'ll>(llcx: &'ll Context, attr: &str) -> &'ll Attribute {\n+    unsafe {\n+        LLVMCreateStringAttribute(\n+            llcx,\n+            attr.as_ptr().cast(),\n+            attr.len().try_into().unwrap(),\n+            std::ptr::null(),\n+            0,\n+        )\n+    }\n }\n \n pub fn CreateAlignmentAttr(llcx: &Context, bytes: u64) -> &Attribute {"}, {"sha": "ef6c9ef6627d5beb3c2af7d11aa75ac6b767a4d6", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "patch": "@@ -267,12 +267,6 @@ extern \"C\" LLVMAttributeRef LLVMRustCreateAttrNoValue(LLVMContextRef C,\n   return wrap(Attribute::get(*unwrap(C), fromRust(RustAttr)));\n }\n \n-extern \"C\" LLVMAttributeRef LLVMRustCreateAttrStringValue(LLVMContextRef C,\n-                                                          const char *Name,\n-                                                          const char *Value) {\n-  return wrap(Attribute::get(*unwrap(C), StringRef(Name), StringRef(Value)));\n-}\n-\n extern \"C\" LLVMAttributeRef LLVMRustCreateAlignmentAttr(LLVMContextRef C,\n                                                         uint64_t Bytes) {\n   return wrap(Attribute::getWithAlignment(*unwrap(C), llvm::Align(Bytes)));"}]}