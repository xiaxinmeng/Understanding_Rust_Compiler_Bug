{"sha": "36791dabe8698e5faa78caa4ad043629875e5fbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NzkxZGFiZTg2OThlNWZhYTc4Y2FhNGFkMDQzNjI5ODc1ZTVmYmM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-19T13:12:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-19T13:12:38Z"}, "message": "Rollup merge of #71188 - Duddino:fix, r=matthewjasper\n\nFixed missing trait method suggests incorrect code (self parameter not named \"self\").\n\nfixes #71150", "tree": {"sha": "0113d2138f3bb1abdf2c2de2f4638e1a5513e76f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0113d2138f3bb1abdf2c2de2f4638e1a5513e76f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36791dabe8698e5faa78caa4ad043629875e5fbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJenE5GCRBK7hj4Ov3rIwAAdHIIABauGNL8PkseAi867VZgDr25\n1JO0Lu2//KZ8BKtm+kxDqv5T2fPNP0I7nVhVkYV9/dzkreeXmkgNRsfXHQPVrskn\nPmmSOFFoU7IVl/oOtJM7M/pWUcrkYQ/U/+L0OfWXsZaItmKKJ6Z9suk2tTxmyndk\nAoVpMgQkfqgGGJEsRt/CZFf/uiifVZrXLAZHc1TieYSaojVk+1SAjZXF5uG36Jff\n67EFjxKLZx+F2vIKcoX4i3BTEcZdgXPMV7Asd7hca0a7qoqR4mH1NjorJHvWfE4f\nOHISafMygP0iOSLIFgUs3WpPXmGvriWM+poNkgrWlDh+2AZ5ENl2zIapHZ4l3nM=\n=V53X\n-----END PGP SIGNATURE-----\n", "payload": "tree 0113d2138f3bb1abdf2c2de2f4638e1a5513e76f\nparent 4d11c3fe3065042c946cdb7e775ed999ab6f0031\nparent f36f78f571f06b966d4f80a24dd9287546aeaf94\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587301958 +0200\ncommitter GitHub <noreply@github.com> 1587301958 +0200\n\nRollup merge of #71188 - Duddino:fix, r=matthewjasper\n\nFixed missing trait method suggests incorrect code (self parameter not named \"self\").\n\nfixes #71150\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36791dabe8698e5faa78caa4ad043629875e5fbc", "html_url": "https://github.com/rust-lang/rust/commit/36791dabe8698e5faa78caa4ad043629875e5fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36791dabe8698e5faa78caa4ad043629875e5fbc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d11c3fe3065042c946cdb7e775ed999ab6f0031", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d11c3fe3065042c946cdb7e775ed999ab6f0031", "html_url": "https://github.com/rust-lang/rust/commit/4d11c3fe3065042c946cdb7e775ed999ab6f0031"}, {"sha": "f36f78f571f06b966d4f80a24dd9287546aeaf94", "url": "https://api.github.com/repos/rust-lang/rust/commits/f36f78f571f06b966d4f80a24dd9287546aeaf94", "html_url": "https://github.com/rust-lang/rust/commit/f36f78f571f06b966d4f80a24dd9287546aeaf94"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "9bb81c322ab1b9ed9a127a389fdd2df169b9e773", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/36791dabe8698e5faa78caa4ad043629875e5fbc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36791dabe8698e5faa78caa4ad043629875e5fbc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=36791dabe8698e5faa78caa4ad043629875e5fbc", "patch": "@@ -2251,26 +2251,39 @@ fn fn_sig_suggestion(\n     sig: &ty::FnSig<'_>,\n     ident: Ident,\n     predicates: ty::GenericPredicates<'_>,\n+    assoc: &ty::AssocItem,\n ) -> String {\n     let args = sig\n         .inputs()\n         .iter()\n-        .map(|ty| {\n+        .enumerate()\n+        .map(|(i, ty)| {\n             Some(match ty.kind {\n-                ty::Param(param) if param.name == kw::SelfUpper => \"self\".to_string(),\n-                ty::Ref(reg, ref_ty, mutability) => {\n+                ty::Param(_) if assoc.fn_has_self_parameter && i == 0 => \"self\".to_string(),\n+                ty::Ref(reg, ref_ty, mutability) if i == 0 => {\n                     let reg = match &format!(\"{}\", reg)[..] {\n                         \"'_\" | \"\" => String::new(),\n                         reg => format!(\"{} \", reg),\n                     };\n-                    match ref_ty.kind {\n-                        ty::Param(param) if param.name == kw::SelfUpper => {\n-                            format!(\"&{}{}self\", reg, mutability.prefix_str())\n+                    if assoc.fn_has_self_parameter {\n+                        match ref_ty.kind {\n+                            ty::Param(param) if param.name == kw::SelfUpper => {\n+                                format!(\"&{}{}self\", reg, mutability.prefix_str())\n+                            }\n+\n+                            _ => format!(\"self: {}\", ty),\n                         }\n-                        _ => format!(\"_: {:?}\", ty),\n+                    } else {\n+                        format!(\"_: {:?}\", ty)\n+                    }\n+                }\n+                _ => {\n+                    if assoc.fn_has_self_parameter && i == 0 {\n+                        format!(\"self: {:?}\", ty)\n+                    } else {\n+                        format!(\"_: {:?}\", ty)\n                     }\n                 }\n-                _ => format!(\"_: {:?}\", ty),\n             })\n         })\n         .chain(std::iter::once(if sig.c_variadic { Some(\"...\".to_string()) } else { None }))\n@@ -2309,6 +2322,7 @@ fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n                 tcx.fn_sig(assoc.def_id).skip_binder(),\n                 assoc.ident,\n                 tcx.predicates_of(assoc.def_id),\n+                assoc,\n             )\n         }\n         ty::AssocKind::Type => format!(\"type {} = Type;\", assoc.ident),"}, {"sha": "fcf52c9e88743093482a5c5365b1cb158638557e", "filename": "src/test/ui/missing/missing-items/auxiliary/m1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36791dabe8698e5faa78caa4ad043629875e5fbc/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fauxiliary%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36791dabe8698e5faa78caa4ad043629875e5fbc/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fauxiliary%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fauxiliary%2Fm1.rs?ref=36791dabe8698e5faa78caa4ad043629875e5fbc", "patch": "@@ -2,4 +2,8 @@ pub trait X {\n     const CONSTANT: u32;\n     type Type;\n     fn method(&self, s: String) -> Self::Type;\n+    fn method2(self: Box<Self>, s: String) -> Self::Type;\n+    fn method3(other: &Self, s: String) -> Self::Type;\n+    fn method4(&self, other: &Self) -> Self::Type;\n+    fn method5(self: &Box<Self>) -> Self::Type;\n }"}, {"sha": "64e9530e61348276b9a7bc51ccb76b9d0697bdd4", "filename": "src/test/ui/missing/missing-items/m2.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36791dabe8698e5faa78caa4ad043629875e5fbc/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36791dabe8698e5faa78caa4ad043629875e5fbc/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr?ref=36791dabe8698e5faa78caa4ad043629875e5fbc", "patch": "@@ -1,12 +1,16 @@\n-error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `method`\n+error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `method`, `method2`, `method3`, `method4`, `method5`\n   --> $DIR/m2.rs:9:1\n    |\n LL | impl m1::X for X {\n-   | ^^^^^^^^^^^^^^^^ missing `CONSTANT`, `Type`, `method` in implementation\n+   | ^^^^^^^^^^^^^^^^ missing `CONSTANT`, `Type`, `method`, `method2`, `method3`, `method4`, `method5` in implementation\n    |\n    = help: implement the missing item: `const CONSTANT: u32 = 42;`\n    = help: implement the missing item: `type Type = Type;`\n    = help: implement the missing item: `fn method(&self, _: std::string::String) -> <Self as m1::X>::Type { todo!() }`\n+   = help: implement the missing item: `fn method2(self: std::boxed::Box<Self>, _: std::string::String) -> <Self as m1::X>::Type { todo!() }`\n+   = help: implement the missing item: `fn method3(_: &Self, _: std::string::String) -> <Self as m1::X>::Type { todo!() }`\n+   = help: implement the missing item: `fn method4(&self, _: &Self) -> <Self as m1::X>::Type { todo!() }`\n+   = help: implement the missing item: `fn method5(self: &std::boxed::Box<Self>) -> <Self as m1::X>::Type { todo!() }`\n \n error: aborting due to previous error\n "}]}