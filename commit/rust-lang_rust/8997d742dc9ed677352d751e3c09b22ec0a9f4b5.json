{"sha": "8997d742dc9ed677352d751e3c09b22ec0a9f4b5", "node_id": "C_kwDOAAsO6NoAKDg5OTdkNzQyZGM5ZWQ2NzczNTJkNzUxZTNjMDliMjJlYzBhOWY0YjU", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:08:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:08:49Z"}, "message": "move tests", "tree": {"sha": "37c355c5ae655724f9d08de52fd8fb9a797e2cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c355c5ae655724f9d08de52fd8fb9a797e2cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8997d742dc9ed677352d751e3c09b22ec0a9f4b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8997d742dc9ed677352d751e3c09b22ec0a9f4b5", "html_url": "https://github.com/rust-lang/rust/commit/8997d742dc9ed677352d751e3c09b22ec0a9f4b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8997d742dc9ed677352d751e3c09b22ec0a9f4b5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "464fb9f0d45d0b5226936222727ca9b76f5b8424", "url": "https://api.github.com/repos/rust-lang/rust/commits/464fb9f0d45d0b5226936222727ca9b76f5b8424", "html_url": "https://github.com/rust-lang/rust/commit/464fb9f0d45d0b5226936222727ca9b76f5b8424"}], "stats": {"total": 305, "additions": 203, "deletions": 102}, "files": [{"sha": "eb41a595ce43c9c7141897ac9a2095d997691dd7", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8997d742dc9ed677352d751e3c09b22ec0a9f4b5/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8997d742dc9ed677352d751e3c09b22ec0a9f4b5/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=8997d742dc9ed677352d751e3c09b22ec0a9f4b5", "patch": "@@ -28,6 +28,7 @@ use crate::{\n     db::DefDatabase, nameres::ModuleSource, resolver::HasResolver, test_db::TestDB, AsMacroCall,\n };\n \n+#[track_caller]\n fn check(ra_fixture: &str, mut expect: Expect) {\n     let db = TestDB::with_files(ra_fixture);\n     let krate = db.crate_graph().iter().next().unwrap();"}, {"sha": "26fd807e65dafb752a4bb2a2b3a81f544c8c5001", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/regression.rs", "status": "modified", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/8997d742dc9ed677352d751e3c09b22ec0a9f4b5/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8997d742dc9ed677352d751e3c09b22ec0a9f4b5/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs?ref=8997d742dc9ed677352d751e3c09b22ec0a9f4b5", "patch": "@@ -173,3 +173,205 @@ macro_rules! int_base {\n \"##]],\n     );\n }\n+\n+#[test]\n+fn test_generate_pattern_iterators() {\n+    // From <https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src/libcore/str/mod.rs>.\n+    check(\n+        r#\"\n+macro_rules! generate_pattern_iterators {\n+    { double ended; with $(#[$common_stability_attribute:meta])*,\n+                        $forward_iterator:ident,\n+                        $reverse_iterator:ident, $iterty:ty\n+    } => { ok!(); }\n+}\n+generate_pattern_iterators ! ( double ended ; with # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] , Split , RSplit , & 'a str );\n+\"#,\n+        expect![[r##\"\n+macro_rules! generate_pattern_iterators {\n+    { double ended; with $(#[$common_stability_attribute:meta])*,\n+                        $forward_iterator:ident,\n+                        $reverse_iterator:ident, $iterty:ty\n+    } => { ok!(); }\n+}\n+ok!();\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_impl_fn_for_zst() {\n+    // From <https://github.com/rust-lang/rust/blob/5d20ff4d2718c820632b38c1e49d4de648a9810b/src/libcore/internal_macros.rs>.\n+    check(\n+        r#\"\n+macro_rules! impl_fn_for_zst  {\n+    {$( $( #[$attr: meta] )*\n+    struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )? Fn =\n+        |$( $arg: ident: $ArgTy: ty ),*| -> $ReturnTy: ty $body: block;\n+    )+} => {$(\n+        $( #[$attr] )*\n+        struct $Name;\n+\n+        impl $( <$( $lifetime ),+> )? Fn<($( $ArgTy, )*)> for $Name {\n+            #[inline]\n+            extern \"rust-call\" fn call(&self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n+                $body\n+            }\n+        }\n+\n+        impl $( <$( $lifetime ),+> )? FnMut<($( $ArgTy, )*)> for $Name {\n+            #[inline]\n+            extern \"rust-call\" fn call_mut(\n+                &mut self,\n+                ($( $arg, )*): ($( $ArgTy, )*)\n+            ) -> $ReturnTy {\n+                Fn::call(&*self, ($( $arg, )*))\n+            }\n+        }\n+\n+        impl $( <$( $lifetime ),+> )? FnOnce<($( $ArgTy, )*)> for $Name {\n+            type Output = $ReturnTy;\n+\n+            #[inline]\n+            extern \"rust-call\" fn call_once(self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n+                Fn::call(&self, ($( $arg, )*))\n+            }\n+        }\n+    )+}\n+}\n+\n+impl_fn_for_zst !   {\n+    #[derive(Clone)]\n+    struct CharEscapeDebugContinue impl Fn = |c: char| -> char::EscapeDebug {\n+        c.escape_debug_ext(false)\n+    };\n+\n+    #[derive(Clone)]\n+    struct CharEscapeUnicode impl Fn = |c: char| -> char::EscapeUnicode {\n+        c.escape_unicode()\n+    };\n+\n+    #[derive(Clone)]\n+    struct CharEscapeDefault impl Fn = |c: char| -> char::EscapeDefault {\n+        c.escape_default()\n+    };\n+}\n+\n+\"#,\n+        expect![[r##\"\n+macro_rules! impl_fn_for_zst  {\n+    {$( $( #[$attr: meta] )*\n+    struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )? Fn =\n+        |$( $arg: ident: $ArgTy: ty ),*| -> $ReturnTy: ty $body: block;\n+    )+} => {$(\n+        $( #[$attr] )*\n+        struct $Name;\n+\n+        impl $( <$( $lifetime ),+> )? Fn<($( $ArgTy, )*)> for $Name {\n+            #[inline]\n+            extern \"rust-call\" fn call(&self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n+                $body\n+            }\n+        }\n+\n+        impl $( <$( $lifetime ),+> )? FnMut<($( $ArgTy, )*)> for $Name {\n+            #[inline]\n+            extern \"rust-call\" fn call_mut(\n+                &mut self,\n+                ($( $arg, )*): ($( $ArgTy, )*)\n+            ) -> $ReturnTy {\n+                Fn::call(&*self, ($( $arg, )*))\n+            }\n+        }\n+\n+        impl $( <$( $lifetime ),+> )? FnOnce<($( $ArgTy, )*)> for $Name {\n+            type Output = $ReturnTy;\n+\n+            #[inline]\n+            extern \"rust-call\" fn call_once(self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n+                Fn::call(&self, ($( $arg, )*))\n+            }\n+        }\n+    )+}\n+}\n+\n+#[derive(Clone)] struct CharEscapeDebugContinue;\n+impl Fn<(char, )> for CharEscapeDebugContinue {\n+    #[inline] extern \"rust-call\"fn call(&self , (c, ): (char, )) -> char::EscapeDebug { {\n+            c.escape_debug_ext(false )\n+        }\n+    }\n+}\n+impl FnMut<(char, )> for CharEscapeDebugContinue {\n+    #[inline] extern \"rust-call\"fn call_mut(&mut self , (c, ): (char, )) -> char::EscapeDebug {\n+        Fn::call(&*self , (c, ))\n+    }\n+}\n+impl FnOnce<(char, )> for CharEscapeDebugContinue {\n+    type Output = char::EscapeDebug;\n+    #[inline] extern \"rust-call\"fn call_once(self , (c, ): (char, )) -> char::EscapeDebug {\n+        Fn::call(&self , (c, ))\n+    }\n+}\n+#[derive(Clone)] struct CharEscapeUnicode;\n+impl Fn<(char, )> for CharEscapeUnicode {\n+    #[inline] extern \"rust-call\"fn call(&self , (c, ): (char, )) -> char::EscapeUnicode { {\n+            c.escape_unicode()\n+        }\n+    }\n+}\n+impl FnMut<(char, )> for CharEscapeUnicode {\n+    #[inline] extern \"rust-call\"fn call_mut(&mut self , (c, ): (char, )) -> char::EscapeUnicode {\n+        Fn::call(&*self , (c, ))\n+    }\n+}\n+impl FnOnce<(char, )> for CharEscapeUnicode {\n+    type Output = char::EscapeUnicode;\n+    #[inline] extern \"rust-call\"fn call_once(self , (c, ): (char, )) -> char::EscapeUnicode {\n+        Fn::call(&self , (c, ))\n+    }\n+}\n+#[derive(Clone)] struct CharEscapeDefault;\n+impl Fn<(char, )> for CharEscapeDefault {\n+    #[inline] extern \"rust-call\"fn call(&self , (c, ): (char, )) -> char::EscapeDefault { {\n+            c.escape_default()\n+        }\n+    }\n+}\n+impl FnMut<(char, )> for CharEscapeDefault {\n+    #[inline] extern \"rust-call\"fn call_mut(&mut self , (c, ): (char, )) -> char::EscapeDefault {\n+        Fn::call(&*self , (c, ))\n+    }\n+}\n+impl FnOnce<(char, )> for CharEscapeDefault {\n+    type Output = char::EscapeDefault;\n+    #[inline] extern \"rust-call\"fn call_once(self , (c, ): (char, )) -> char::EscapeDefault {\n+        Fn::call(&self , (c, ))\n+    }\n+}\n+\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_impl_nonzero_fmt() {\n+    // From <https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src/libcore/num/mod.rs#L12>.\n+    check(\n+        r#\"\n+macro_rules! impl_nonzero_fmt {\n+    ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => { ok!(); }\n+}\n+impl_nonzero_fmt! {\n+    #[stable(feature= \"nonzero\",since=\"1.28.0\")]\n+    (Debug, Display, Binary, Octal, LowerHex, UpperHex) for NonZeroU8\n+}\n+\"#,\n+        expect![[r##\"\n+macro_rules! impl_nonzero_fmt {\n+    ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => { ok!(); }\n+}\n+ok!();\n+\"##]],\n+    );\n+}"}, {"sha": "6152e01bc8790cb510a493730845ee00b1a63f3f", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/8997d742dc9ed677352d751e3c09b22ec0a9f4b5/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8997d742dc9ed677352d751e3c09b22ec0a9f4b5/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=8997d742dc9ed677352d751e3c09b22ec0a9f4b5", "patch": "@@ -98,108 +98,6 @@ fn test_attr_to_token_tree() {\n     );\n }\n \n-#[test]\n-fn test_generate_pattern_iterators() {\n-    // from https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src/libcore/str/mod.rs\n-    parse_macro(\n-        r#\"\n-macro_rules! generate_pattern_iterators {\n-        { double ended; with $(#[$common_stability_attribute:meta])*,\n-                           $forward_iterator:ident,\n-                           $reverse_iterator:ident, $iterty:ty\n-        } => {\n-            fn foo(){}\n-        }\n-}\n-\"#,\n-    ).assert_expand_items(\n-        r#\"generate_pattern_iterators ! ( double ended ; with # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] , Split , RSplit , & 'a str );\"#,\n-        \"fn foo () {}\",\n-    );\n-}\n-\n-#[test]\n-fn test_impl_fn_for_zst() {\n-    // from https://github.com/rust-lang/rust/blob/5d20ff4d2718c820632b38c1e49d4de648a9810b/src/libcore/internal_macros.rs\n-    parse_macro(\n-        r#\"\n-macro_rules! impl_fn_for_zst  {\n-        {  $( $( #[$attr: meta] )*\n-        struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )? Fn =\n-            |$( $arg: ident: $ArgTy: ty ),*| -> $ReturnTy: ty\n-$body: block; )+\n-        } => {\n-           $(\n-            $( #[$attr] )*\n-            struct $Name;\n-\n-            impl $( <$( $lifetime ),+> )? Fn<($( $ArgTy, )*)> for $Name {\n-                #[inline]\n-                extern \"rust-call\" fn call(&self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n-                    $body\n-                }\n-            }\n-\n-            impl $( <$( $lifetime ),+> )? FnMut<($( $ArgTy, )*)> for $Name {\n-                #[inline]\n-                extern \"rust-call\" fn call_mut(\n-                    &mut self,\n-                    ($( $arg, )*): ($( $ArgTy, )*)\n-                ) -> $ReturnTy {\n-                    Fn::call(&*self, ($( $arg, )*))\n-                }\n-            }\n-\n-            impl $( <$( $lifetime ),+> )? FnOnce<($( $ArgTy, )*)> for $Name {\n-                type Output = $ReturnTy;\n-\n-                #[inline]\n-                extern \"rust-call\" fn call_once(self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n-                    Fn::call(&self, ($( $arg, )*))\n-                }\n-            }\n-        )+\n-}\n-        }\n-\"#,\n-    ).assert_expand_items(r#\"\n-impl_fn_for_zst !   {\n-     # [ derive ( Clone ) ]\n-     struct   CharEscapeDebugContinue   impl   Fn   =   | c :   char |   ->   char :: EscapeDebug   {\n-         c . escape_debug_ext ( false )\n-     } ;\n-\n-     # [ derive ( Clone ) ]\n-     struct   CharEscapeUnicode   impl   Fn   =   | c :   char |   ->   char :: EscapeUnicode   {\n-         c . escape_unicode ( )\n-     } ;\n-     # [ derive ( Clone ) ]\n-     struct   CharEscapeDefault   impl   Fn   =   | c :   char |   ->   char :: EscapeDefault   {\n-         c . escape_default ( )\n-     } ;\n- }\n-\"#,\n-        \"# [derive (Clone)] struct CharEscapeDebugContinue ; impl Fn < (char ,) > for CharEscapeDebugContinue {# [inline] extern \\\"rust-call\\\" fn call (& self , (c ,) : (char ,)) -> char :: EscapeDebug {{c . escape_debug_ext (false)}}} impl FnMut < (char ,) > for CharEscapeDebugContinue {# [inline] extern \\\"rust-call\\\" fn call_mut (& mut self , (c ,) : (char ,)) -> char :: EscapeDebug {Fn :: call (&* self , (c ,))}} impl FnOnce < (char ,) > for CharEscapeDebugContinue {type Output = char :: EscapeDebug ; # [inline] extern \\\"rust-call\\\" fn call_once (self , (c ,) : (char ,)) -> char :: EscapeDebug {Fn :: call (& self , (c ,))}} # [derive (Clone)] struct CharEscapeUnicode ; impl Fn < (char ,) > for CharEscapeUnicode {# [inline] extern \\\"rust-call\\\" fn call (& self , (c ,) : (char ,)) -> char :: EscapeUnicode {{c . escape_unicode ()}}} impl FnMut < (char ,) > for CharEscapeUnicode {# [inline] extern \\\"rust-call\\\" fn call_mut (& mut self , (c ,) : (char ,)) -> char :: EscapeUnicode {Fn :: call (&* self , (c ,))}} impl FnOnce < (char ,) > for CharEscapeUnicode {type Output = char :: EscapeUnicode ; # [inline] extern \\\"rust-call\\\" fn call_once (self , (c ,) : (char ,)) -> char :: EscapeUnicode {Fn :: call (& self , (c ,))}} # [derive (Clone)] struct CharEscapeDefault ; impl Fn < (char ,) > for CharEscapeDefault {# [inline] extern \\\"rust-call\\\" fn call (& self , (c ,) : (char ,)) -> char :: EscapeDefault {{c . escape_default ()}}} impl FnMut < (char ,) > for CharEscapeDefault {# [inline] extern \\\"rust-call\\\" fn call_mut (& mut self , (c ,) : (char ,)) -> char :: EscapeDefault {Fn :: call (&* self , (c ,))}} impl FnOnce < (char ,) > for CharEscapeDefault {type Output = char :: EscapeDefault ; # [inline] extern \\\"rust-call\\\" fn call_once (self , (c ,) : (char ,)) -> char :: EscapeDefault {Fn :: call (& self , (c ,))}}\"\n-    );\n-}\n-\n-#[test]\n-fn test_impl_nonzero_fmt() {\n-    // from https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src/libcore/num/mod.rs#L12\n-    parse_macro(\n-        r#\"\n-        macro_rules! impl_nonzero_fmt {\n-            ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n-                fn foo () {}\n-            }\n-        }\n-\"#,\n-    ).assert_expand_items(\n-        r#\"impl_nonzero_fmt! { # [stable(feature= \"nonzero\",since=\"1.28.0\")] (Debug,Display,Binary,Octal,LowerHex,UpperHex) for NonZeroU8}\"#,\n-        \"fn foo () {}\",\n-    );\n-}\n-\n #[test]\n fn test_cfg_if_items() {\n     // from https://github.com/rust-lang/rust/blob/33fe1131cadba69d317156847be9a402b89f11bb/src/libstd/macros.rs#L986"}]}