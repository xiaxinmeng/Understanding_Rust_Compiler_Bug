{"sha": "181d28bb6110dc974879db20d433f21aa142db3a", "node_id": "C_kwDOAAsO6NoAKDE4MWQyOGJiNjExMGRjOTc0ODc5ZGIyMGQ0MzNmMjFhYTE0MmRiM2E", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2022-04-05T20:42:23Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2022-04-05T21:18:40Z"}, "message": "trivial cfg(bootstrap) changes", "tree": {"sha": "3bbc185fd9386b9cc050235fd1785820fcaaae5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bbc185fd9386b9cc050235fd1785820fcaaae5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/181d28bb6110dc974879db20d433f21aa142db3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAmJMsjAACgkQPgar6Auq\n8ZyuuBAAxD2Dc9HeYIAFliOup5Jyi92ZAYflqdW5mQsidPoa0POsZV0Tu8bX6rvD\n6MENvYO1/GWKtkrLdTuQAB4B4Aj6XjvYhbVTeOPvsYr1HUQgPMtUG9suu5ybnOL7\nLlQO4t/ZTIiQ44wucgBjG+hBWvSmDmiGFZnuYTgeL4m/+yLap9kGvDrGx6JXK8rX\n51LYm/UdrFm1Z6jTtUiP5ehBjwmQvf4WQZutRSQZk+WZoQjVGESaXgL8gMy5g3VT\nohvVizw5fOOUtXq4zA69ZaDwNBphYB5fJ1Krox+fdbwu4ZZQI9JwniUbNm9kvsz+\nVyivRIpkSMd5dTDGWBrV8P9bmBKZSpPs4OlRnUz7NuoYh6zdIz8Ft5etNCmKNX2f\ng592cyYPgBtT3Daz/N3YnV8VbH4m5c5X5ey19UJoct8f/Q1X6DJqJjEIoG1JeMxa\nc38jopxW3gniAwLPalRPOoh7m2S0VvM25lJ/PEUU1EN3lEsAdoiMELrvfxxfeEFU\nCr+d8EQyOzuz1jNV1IjYU/oEOsGsgfeFLaE3euvCT0e370DUl9buKK3mtw9r5Dz9\n4OipuOSFmJTFkYDJbNjfSrdyPXPytsRKlS9jblPQlyadVlUVlIcoyj9cx2BpTbJP\n48dL2SAHuODmko6RZF/Xuvlsx5v9xyrx1yD3xw7B09YR9mKsUlw=\n=LnXH\n-----END PGP SIGNATURE-----", "payload": "tree 3bbc185fd9386b9cc050235fd1785820fcaaae5c\nparent e96538aeeb2a71e672e1d1a40dcaf0ad34a826b5\nauthor Pietro Albini <pietro@pietroalbini.org> 1649191343 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1649193520 +0200\n\ntrivial cfg(bootstrap) changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/181d28bb6110dc974879db20d433f21aa142db3a", "html_url": "https://github.com/rust-lang/rust/commit/181d28bb6110dc974879db20d433f21aa142db3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/181d28bb6110dc974879db20d433f21aa142db3a/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e96538aeeb2a71e672e1d1a40dcaf0ad34a826b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e96538aeeb2a71e672e1d1a40dcaf0ad34a826b5", "html_url": "https://github.com/rust-lang/rust/commit/e96538aeeb2a71e672e1d1a40dcaf0ad34a826b5"}], "stats": {"total": 490, "additions": 176, "deletions": 314}, "files": [{"sha": "b63f81bffaa37d61777e958f63488b00d857a0b1", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -1,5 +1,4 @@\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(native_link_modifiers))]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n \n // NOTE: This crate only exists to allow linking on mingw targets."}, {"sha": "63f2bc51aeeaa2a45f5df3cce07265ddab7b91d5", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -58,7 +58,7 @@ pub struct Allocation<Tag = AllocId, Extra = ()> {\n /// means that both the inner type (`Allocation`) and the outer type\n /// (`ConstAllocation`) are used quite a bit.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n-#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+#[rustc_pass_by_value]\n pub struct ConstAllocation<'tcx, Tag = AllocId, Extra = ()>(\n     pub Interned<'tcx, Allocation<Tag, Extra>>,\n );"}, {"sha": "fc6710f07e37b655bf6aa3d1f5592e75b5ed8344", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -161,7 +161,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for AdtDefData {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, HashStable)]\n-#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+#[rustc_pass_by_value]\n pub struct AdtDef<'tcx>(pub Interned<'tcx, AdtDefData>);\n \n impl<'tcx> AdtDef<'tcx> {"}, {"sha": "169167f69bf8c6eea720579f272aca9911fec50c", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -1262,7 +1262,7 @@ impl<'a> fmt::Debug for LayoutS<'a> {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, HashStable_Generic)]\n-#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+#[rustc_pass_by_value]\n pub struct Layout<'a>(pub Interned<'a, LayoutS<'a>>);\n \n impl<'a> fmt::Debug for Layout<'a> {"}, {"sha": "39f8f1d5a0ec758812568ad6e4d9c4c974147dff", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -326,16 +326,12 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n #[cfg_attr(not(test), lang = \"box_free\")]\n #[inline]\n #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n-#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n // This signature has to be the same as `Box`, otherwise an ICE will happen.\n // When an additional parameter to `Box` is added (like `A: Allocator`), this has to be added here as\n // well.\n // For example if `Box` is changed to  `struct Box<T: ?Sized, A: Allocator>(Unique<T>, A)`,\n // this function has to be changed to `fn box_free<T: ?Sized, A: Allocator>(Unique<T>, A)` as well.\n-pub(crate) const unsafe fn box_free<\n-    T: ?Sized,\n-    A: ~const Allocator + ~const Drop + ~const Destruct,\n->(\n+pub(crate) const unsafe fn box_free<T: ?Sized, A: ~const Allocator + ~const Destruct>(\n     ptr: Unique<T>,\n     alloc: A,\n ) {"}, {"sha": "8b13e36c4b3c7e342a45d403b0ef901f3dd80c0c", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -331,7 +331,6 @@ impl<B: ?Sized + ToOwned> Cow<'_, B> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_deref\", issue = \"88955\")]\n-#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n impl<B: ?Sized + ToOwned> const Deref for Cow<'_, B>\n where\n     B::Owned: ~const Borrow<B>,"}, {"sha": "a56d4de03cd0ec9c4d417435b28866687b9ca67e", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -349,10 +349,9 @@ impl<T, A: Allocator> Box<T, A> {\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[must_use]\n     #[inline]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn new_in(x: T, alloc: A) -> Self\n     where\n-        A: ~const Allocator + ~const Drop + ~const Destruct,\n+        A: ~const Allocator + ~const Destruct,\n     {\n         let mut boxed = Self::new_uninit_in(alloc);\n         unsafe {\n@@ -379,11 +378,10 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn try_new_in(x: T, alloc: A) -> Result<Self, AllocError>\n     where\n-        T: ~const Drop + ~const Destruct,\n-        A: ~const Allocator + ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n+        A: ~const Allocator + ~const Destruct,\n     {\n         let mut boxed = Self::try_new_uninit_in(alloc)?;\n         unsafe {\n@@ -417,10 +415,9 @@ impl<T, A: Allocator> Box<T, A> {\n     #[cfg(not(no_global_oom_handling))]\n     #[must_use]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A>\n     where\n-        A: ~const Allocator + ~const Drop + ~const Destruct,\n+        A: ~const Allocator + ~const Destruct,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n@@ -456,10 +453,9 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn try_new_uninit_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\n     where\n-        A: ~const Allocator + ~const Drop + ~const Destruct,\n+        A: ~const Allocator + ~const Destruct,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         let ptr = alloc.allocate(layout)?.cast();\n@@ -491,10 +487,9 @@ impl<T, A: Allocator> Box<T, A> {\n     #[cfg(not(no_global_oom_handling))]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[must_use]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A>\n     where\n-        A: ~const Allocator + ~const Drop + ~const Destruct,\n+        A: ~const Allocator + ~const Destruct,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n@@ -530,10 +525,9 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\n     where\n-        A: ~const Allocator + ~const Drop + ~const Destruct,\n+        A: ~const Allocator + ~const Destruct,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         let ptr = alloc.allocate_zeroed(layout)?.cast();\n@@ -547,10 +541,9 @@ impl<T, A: Allocator> Box<T, A> {\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[must_use]\n     #[inline(always)]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn pin_in(x: T, alloc: A) -> Pin<Self>\n     where\n-        A: 'static + ~const Allocator + ~const Drop + ~const Destruct,\n+        A: 'static + ~const Allocator + ~const Destruct,\n     {\n         Self::into_pin(Self::new_in(x, alloc))\n     }\n@@ -579,10 +572,9 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"box_into_inner\", issue = \"80437\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn into_inner(boxed: Self) -> T\n     where\n-        Self: ~const Drop + ~const Destruct,\n+        Self: ~const Destruct,\n     {\n         *boxed\n     }"}, {"sha": "72d6c267290e168ec09159f4324fae9f971c9dd3", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -141,7 +141,6 @@\n #![feature(box_syntax)]\n #![feature(cfg_sanitize)]\n #![feature(const_deref)]\n-#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n #![feature(const_mut_refs)]\n #![feature(const_ptr_write)]\n #![feature(const_precise_live_drops)]"}, {"sha": "31edbe0c5afd5d299e294900a5799648f2affc5d", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -237,7 +237,6 @@ mod hack {\n     }\n }\n \n-#[cfg_attr(bootstrap, lang = \"slice_alloc\")]\n #[cfg(not(test))]\n impl<T> [T] {\n     /// Sorts the slice.\n@@ -267,7 +266,7 @@ impl<T> [T] {\n     /// assert!(v == [-5, -3, 1, 2, 4]);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sort(&mut self)\n@@ -323,7 +322,7 @@ impl<T> [T] {\n     /// assert!(v == [5, 4, 3, 2, 1]);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sort_by<F>(&mut self, mut compare: F)\n@@ -365,7 +364,7 @@ impl<T> [T] {\n     /// assert!(v == [1, 2, -3, 4, -5]);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"slice_sort_by_key\", since = \"1.7.0\")]\n     #[inline]\n     pub fn sort_by_key<K, F>(&mut self, mut f: F)\n@@ -412,7 +411,7 @@ impl<T> [T] {\n     ///\n     /// [pdqsort]: https://github.com/orlp/pdqsort\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"slice_sort_by_cached_key\", since = \"1.34.0\")]\n     #[inline]\n     pub fn sort_by_cached_key<K, F>(&mut self, f: F)\n@@ -471,7 +470,7 @@ impl<T> [T] {\n     /// // Here, `s` and `x` can be modified independently.\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[rustc_conversion_suggestion]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -496,7 +495,7 @@ impl<T> [T] {\n     /// // Here, `s` and `x` can be modified independently.\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[inline]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     pub fn to_vec_in<A: Allocator>(&self, alloc: A) -> Vec<T, A>\n@@ -521,7 +520,7 @@ impl<T> [T] {\n     ///\n     /// assert_eq!(x, vec![10, 40, 30]);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn into_vec<A: Allocator>(self: Box<Self, A>) -> Vec<T, A> {\n@@ -549,7 +548,7 @@ impl<T> [T] {\n     /// // this will panic at runtime\n     /// b\"0123456789abcdef\".repeat(usize::MAX);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"repeat_generic_slice\", since = \"1.40.0\")]\n     pub fn repeat(&self, n: usize) -> Vec<T>\n@@ -618,7 +617,7 @@ impl<T> [T] {\n     /// assert_eq!([\"hello\", \"world\"].concat(), \"helloworld\");\n     /// assert_eq!([[1, 2], [3, 4]].concat(), [1, 2, 3, 4]);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn concat<Item: ?Sized>(&self) -> <Self as Concat<Item>>::Output\n     where\n@@ -637,7 +636,7 @@ impl<T> [T] {\n     /// assert_eq!([[1, 2], [3, 4]].join(&0), [1, 2, 0, 3, 4]);\n     /// assert_eq!([[1, 2], [3, 4]].join(&[0, 0][..]), [1, 2, 0, 0, 3, 4]);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"rename_connect_to_join\", since = \"1.3.0\")]\n     pub fn join<Separator>(&self, sep: Separator) -> <Self as Join<Separator>>::Output\n     where\n@@ -656,7 +655,7 @@ impl<T> [T] {\n     /// assert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");\n     /// assert_eq!([[1, 2], [3, 4]].connect(&0), [1, 2, 0, 3, 4]);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.3.0\", reason = \"renamed to join\")]\n     pub fn connect<Separator>(&self, sep: Separator) -> <Self as Join<Separator>>::Output\n@@ -667,7 +666,6 @@ impl<T> [T] {\n     }\n }\n \n-#[cfg_attr(bootstrap, lang = \"slice_u8_alloc\")]\n #[cfg(not(test))]\n impl [u8] {\n     /// Returns a vector containing a copy of this slice where each byte\n@@ -680,7 +678,7 @@ impl [u8] {\n     ///\n     /// [`make_ascii_uppercase`]: slice::make_ascii_uppercase\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"this returns the uppercase bytes as a new Vec, \\\n                   without modifying the original\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n@@ -701,7 +699,7 @@ impl [u8] {\n     ///\n     /// [`make_ascii_lowercase`]: slice::make_ascii_lowercase\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"this returns the lowercase bytes as a new Vec, \\\n                   without modifying the original\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"}, {"sha": "0eaa2639863575c83ee1b5c798dc65f45f861344", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -235,7 +235,6 @@ impl ToOwned for str {\n }\n \n /// Methods for string slices.\n-#[cfg_attr(bootstrap, lang = \"str_alloc\")]\n #[cfg(not(test))]\n impl str {\n     /// Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n@@ -250,7 +249,7 @@ impl str {\n     /// let boxed_bytes = boxed_str.into_boxed_bytes();\n     /// assert_eq!(*boxed_bytes, *s.as_bytes());\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n@@ -281,7 +280,7 @@ impl str {\n     /// assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"this returns the replaced string as a new allocation, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -322,7 +321,7 @@ impl str {\n     /// assert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"this returns the replaced string as a new allocation, \\\n                   without modifying the original\"]\n     #[stable(feature = \"str_replacen\", since = \"1.16.0\")]\n@@ -379,7 +378,7 @@ impl str {\n     /// assert_eq!(new_year, new_year.to_lowercase());\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"this returns the lowercase string as a new String, \\\n                   without modifying the original\"]\n     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n@@ -462,7 +461,7 @@ impl str {\n     /// assert_eq!(\"TSCH\u00dcSS\", s.to_uppercase());\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"this returns the uppercase string as a new String, \\\n                   without modifying the original\"]\n     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n@@ -498,7 +497,7 @@ impl str {\n     /// assert_eq!(boxed_str.into_string(), string);\n     /// ```\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub fn into_string(self: Box<str>) -> String {\n@@ -527,7 +526,7 @@ impl str {\n     /// let huge = \"0123456789abcdef\".repeat(usize::MAX);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use]\n     #[stable(feature = \"repeat_str\", since = \"1.16.0\")]\n     pub fn repeat(&self, n: usize) -> String {\n@@ -556,7 +555,7 @@ impl str {\n     /// [`make_ascii_uppercase`]: str::make_ascii_uppercase\n     /// [`to_uppercase`]: #method.to_uppercase\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n@@ -589,7 +588,7 @@ impl str {\n     /// [`make_ascii_lowercase`]: str::make_ascii_lowercase\n     /// [`to_lowercase`]: #method.to_lowercase\n     #[cfg(not(no_global_oom_handling))]\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]"}, {"sha": "af661e485f5e14890029378face10858ac36deb3", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -395,7 +395,6 @@ macro_rules! array_impl_default {\n \n array_impl_default! {32, T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T}\n \n-#[cfg_attr(bootstrap, lang = \"array\")]\n impl<T, const N: usize> [T; N] {\n     /// Returns an array of the same size as `self`, with function `f` applied to each element\n     /// in order."}, {"sha": "36000f8f38988763fbcc21beb963044d7a587366", "filename": "library/core/src/bool.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fbool.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -2,7 +2,6 @@\n \n use crate::marker::Destruct;\n \n-#[cfg_attr(bootstrap, lang = \"bool\")]\n impl bool {\n     /// Returns `Some(t)` if the `bool` is [`true`](../std/keyword.true.html),\n     /// or `None` otherwise.\n@@ -18,10 +17,9 @@ impl bool {\n     #[unstable(feature = \"bool_to_option\", issue = \"80967\")]\n     #[rustc_const_unstable(feature = \"const_bool_to_option\", issue = \"91917\")]\n     #[inline]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn then_some<T>(self, t: T) -> Option<T>\n     where\n-        T: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n     {\n         if self { Some(t) } else { None }\n     }\n@@ -38,11 +36,10 @@ impl bool {\n     #[stable(feature = \"lazy_bool_to_option\", since = \"1.50.0\")]\n     #[rustc_const_unstable(feature = \"const_bool_to_option\", issue = \"91917\")]\n     #[inline]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn then<T, F>(self, f: F) -> Option<T>\n     where\n         F: ~const FnOnce() -> T,\n-        F: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n     {\n         if self { Some(f()) } else { None }\n     }"}, {"sha": "f9b0d69b18e9f7ed549b993b30e9ce653ac65be5", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -7,7 +7,6 @@ use crate::unicode::{self, conversions};\n \n use super::*;\n \n-#[cfg_attr(bootstrap, lang = \"char\")]\n impl char {\n     /// The highest valid code point a `char` can have, `'\\u{10FFFF}'`.\n     ///"}, {"sha": "0444a9575d1af1c67d07baf167e6e83ffadd7d87", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -130,10 +130,9 @@ pub trait Clone: Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[default_method_body_is_const]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     fn clone_from(&mut self, source: &Self)\n     where\n-        Self: ~const Drop + ~const Destruct,\n+        Self: ~const Destruct,\n     {\n         *self = source.clone()\n     }"}, {"sha": "cdade0cf997e3cb5d8239002989d9746197d5ebc", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -2348,15 +2348,14 @@ pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n #[lang = \"const_eval_select\"]\n #[rustc_do_not_const_check]\n-#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n pub const unsafe fn const_eval_select<ARG, F, G, RET>(\n     arg: ARG,\n     _called_in_const: F,\n     called_at_rt: G,\n ) -> RET\n where\n     F: ~const FnOnce<ARG, Output = RET>,\n-    G: FnOnce<ARG, Output = RET> + ~const Drop + ~const Destruct,\n+    G: FnOnce<ARG, Output = RET> + ~const Destruct,\n {\n     called_at_rt.call_once(arg)\n }\n@@ -2368,15 +2367,14 @@ where\n )]\n #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n #[lang = \"const_eval_select_ct\"]\n-#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n pub const unsafe fn const_eval_select_ct<ARG, F, G, RET>(\n     arg: ARG,\n     called_in_const: F,\n     _called_at_rt: G,\n ) -> RET\n where\n     F: ~const FnOnce<ARG, Output = RET>,\n-    G: FnOnce<ARG, Output = RET> + ~const Drop + ~const Destruct,\n+    G: FnOnce<ARG, Output = RET> + ~const Destruct,\n {\n     called_in_const.call_once(arg)\n }"}, {"sha": "660f6d92fe18408630ef06ecf5c704105abaa7c8", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -84,7 +84,7 @@\n     target_has_atomic_load_store = \"ptr\",\n ))]\n #![no_core]\n-#![cfg_attr(not(bootstrap), rustc_coherence_is_core)]\n+#![rustc_coherence_is_core]\n //\n // Lints:\n #![deny(rust_2021_incompatible_or_patterns)]\n@@ -163,15 +163,12 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_has_atomic_equal_alignment)]\n #![feature(const_fn_floating_point_arithmetic)]\n-#![cfg_attr(bootstrap, feature(const_fn_fn_ptr_basics))]\n-#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n-#![cfg_attr(bootstrap, feature(const_impl_trait))]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n #![feature(const_refs_to_cell)]\n #![feature(decl_macro)]\n #![feature(derive_default_enum)]\n-#![cfg_attr(not(bootstrap), feature(deprecated_suggestion))]\n+#![feature(deprecated_suggestion)]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n #![feature(rustdoc_internals)]\n@@ -208,7 +205,6 @@\n #![feature(asm_const)]\n //\n // Target features:\n-#![cfg_attr(bootstrap, feature(aarch64_target_feature))]\n #![feature(arm_target_feature)]\n #![feature(avx512_target_feature)]\n #![feature(cmpxchg16b_target_feature)]\n@@ -220,7 +216,6 @@\n #![feature(sse4a_target_feature)]\n #![feature(tbm_target_feature)]\n #![feature(wasm_target_feature)]\n-#![cfg_attr(bootstrap, feature(adx_target_feature))]\n \n // allow using `core::` in intra-doc links\n #[allow(unused_extern_crates)]"}, {"sha": "4a90ef9545d68ebf84e15a0c3809ff24bf627bbd", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -797,17 +797,10 @@ impl<T: ?Sized> Unpin for *mut T {}\n /// This should be used for `~const` bounds,\n /// as non-const bounds will always hold for every type.\n #[unstable(feature = \"const_trait_impl\", issue = \"67792\")]\n-#[cfg_attr(not(bootstrap), lang = \"destruct\")]\n-#[cfg_attr(\n-    not(bootstrap),\n-    rustc_on_unimplemented(message = \"can't drop `{Self}`\", append_const_msg,)\n-)]\n+#[lang = \"destruct\"]\n+#[rustc_on_unimplemented(message = \"can't drop `{Self}`\", append_const_msg)]\n pub trait Destruct {}\n \n-#[cfg(bootstrap)]\n-#[unstable(feature = \"const_trait_impl\", issue = \"67792\")]\n-impl<T: ?Sized> const Destruct for T {}\n-\n /// Implementations of `Copy` for primitive types.\n ///\n /// Implementations that cannot be described in Rust"}, {"sha": "a983d0872bcf00828f16cc63385dadc44899e1b8", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -370,7 +370,6 @@ pub mod consts {\n     pub const LN_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n-#[cfg_attr(bootstrap, lang = \"f32\")]\n #[cfg(not(test))]\n impl f32 {\n     /// The radix or base of the internal representation of `f32`."}, {"sha": "05598e5fe7b07f81d94d5c41c51422a7c6641918", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -370,7 +370,6 @@ pub mod consts {\n     pub const LN_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n-#[cfg_attr(bootstrap, lang = \"f64\")]\n #[cfg(not(test))]\n impl f64 {\n     /// The radix or base of the internal representation of `f64`."}, {"sha": "a30d2ff0ea642690c1c44b94bb72b6384e105e06", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -193,34 +193,29 @@ macro_rules! widening_impl {\n     };\n }\n \n-#[cfg_attr(bootstrap, lang = \"i8\")]\n impl i8 {\n     int_impl! { i8, i8, u8, 8, 7, -128, 127, 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n     \"[0x12]\", \"[0x12]\", \"\", \"\" }\n }\n \n-#[cfg_attr(bootstrap, lang = \"i16\")]\n impl i16 {\n     int_impl! { i16, i16, u16, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n     \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n-#[cfg_attr(bootstrap, lang = \"i32\")]\n impl i32 {\n     int_impl! { i32, i32, u32, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n-#[cfg_attr(bootstrap, lang = \"i64\")]\n impl i64 {\n     int_impl! { i64, i64, u64, 64, 63, -9223372036854775808, 9223372036854775807, 12,\n     \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n     \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\" }\n }\n \n-#[cfg_attr(bootstrap, lang = \"i128\")]\n impl i128 {\n     int_impl! { i128, i128, u128, 128, 127, -170141183460469231731687303715884105728,\n     170141183460469231731687303715884105727, 16,\n@@ -233,15 +228,13 @@ impl i128 {\n }\n \n #[cfg(target_pointer_width = \"16\")]\n-#[cfg_attr(bootstrap, lang = \"isize\")]\n impl isize {\n     int_impl! { isize, i16, usize, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n     \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n-#[cfg_attr(bootstrap, lang = \"isize\")]\n impl isize {\n     int_impl! { isize, i32, usize, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n@@ -250,7 +243,6 @@ impl isize {\n }\n \n #[cfg(target_pointer_width = \"64\")]\n-#[cfg_attr(bootstrap, lang = \"isize\")]\n impl isize {\n     int_impl! { isize, i64, usize, 64, 63, -9223372036854775808, 9223372036854775807,\n     12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n@@ -262,7 +254,6 @@ impl isize {\n /// If 6th bit set ascii is upper case.\n const ASCII_CASE_MASK: u8 = 0b0010_0000;\n \n-#[cfg_attr(bootstrap, lang = \"u8\")]\n impl u8 {\n     uint_impl! { u8, u8, i8, NonZeroU8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n     \"[0x12]\", \"\", \"\" }\n@@ -816,7 +807,6 @@ impl u8 {\n     }\n }\n \n-#[cfg_attr(bootstrap, lang = \"u16\")]\n impl u16 {\n     uint_impl! { u16, u16, i16, NonZeroU16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n@@ -848,14 +838,12 @@ impl u16 {\n     }\n }\n \n-#[cfg_attr(bootstrap, lang = \"u32\")]\n impl u32 {\n     uint_impl! { u32, u32, i32, NonZeroU32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n     widening_impl! { u32, u64, 32, unsigned }\n }\n \n-#[cfg_attr(bootstrap, lang = \"u64\")]\n impl u64 {\n     uint_impl! { u64, u64, i64, NonZeroU64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n@@ -865,7 +853,6 @@ impl u64 {\n     widening_impl! { u64, u128, 64, unsigned }\n }\n \n-#[cfg_attr(bootstrap, lang = \"u128\")]\n impl u128 {\n     uint_impl! { u128, u128, i128, NonZeroU128, 128, 340282366920938463463374607431768211455, 16,\n     \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n@@ -878,15 +865,13 @@ impl u128 {\n }\n \n #[cfg(target_pointer_width = \"16\")]\n-#[cfg_attr(bootstrap, lang = \"usize\")]\n impl usize {\n     uint_impl! { usize, u16, isize, NonZeroUsize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n     widening_impl! { usize, u32, 16, unsigned }\n }\n #[cfg(target_pointer_width = \"32\")]\n-#[cfg_attr(bootstrap, lang = \"usize\")]\n impl usize {\n     uint_impl! { usize, u32, isize, NonZeroUsize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n@@ -895,7 +880,6 @@ impl usize {\n }\n \n #[cfg(target_pointer_width = \"64\")]\n-#[cfg_attr(bootstrap, lang = \"usize\")]\n impl usize {\n     uint_impl! { usize, u64, isize, NonZeroUsize, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\","}, {"sha": "91e4708f6a6090381e0fc5e67e6865f3861a5b1d", "filename": "library/core/src/option.rs", "status": "modified", "additions": 27, "deletions": 47, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -773,10 +773,9 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn unwrap_or(self, default: T) -> T\n     where\n-        T: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n     {\n         match self {\n             Some(x) => x,\n@@ -796,11 +795,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn unwrap_or_else<F>(self, f: F) -> T\n     where\n         F: ~const FnOnce() -> T,\n-        F: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n     {\n         match self {\n             Some(x) => x,\n@@ -902,11 +900,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn map<U, F>(self, f: F) -> Option<U>\n     where\n         F: ~const FnOnce(T) -> U,\n-        F: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n     {\n         match self {\n             Some(x) => Some(f(x)),\n@@ -932,11 +929,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn inspect<F>(self, f: F) -> Self\n     where\n         F: ~const FnOnce(&T),\n-        F: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n     {\n         if let Some(ref x) = self {\n             f(x);\n@@ -966,12 +962,11 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn map_or<U, F>(self, default: U, f: F) -> U\n     where\n         F: ~const FnOnce(T) -> U,\n-        F: ~const Drop + ~const Destruct,\n-        U: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n+        U: ~const Destruct,\n     {\n         match self {\n             Some(t) => f(t),\n@@ -996,13 +991,12 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U\n     where\n         D: ~const FnOnce() -> U,\n-        D: ~const Drop + ~const Destruct,\n+        D: ~const Destruct,\n         F: ~const FnOnce(T) -> U,\n-        F: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n     {\n         match self {\n             Some(t) => f(t),\n@@ -1034,10 +1028,9 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn ok_or<E>(self, err: E) -> Result<T, E>\n     where\n-        E: ~const Drop + ~const Destruct,\n+        E: ~const Destruct,\n     {\n         match self {\n             Some(v) => Ok(v),\n@@ -1064,11 +1057,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>\n     where\n         F: ~const FnOnce() -> E,\n-        F: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n     {\n         match self {\n             Some(v) => Ok(v),\n@@ -1199,11 +1191,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn and<U>(self, optb: Option<U>) -> Option<U>\n     where\n-        T: ~const Drop + ~const Destruct,\n-        U: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n+        U: ~const Destruct,\n     {\n         match self {\n             Some(_) => optb,\n@@ -1242,11 +1233,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn and_then<U, F>(self, f: F) -> Option<U>\n     where\n         F: ~const FnOnce(T) -> Option<U>,\n-        F: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n     {\n         match self {\n             Some(x) => f(x),\n@@ -1281,12 +1271,11 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn filter<P>(self, predicate: P) -> Self\n     where\n-        T: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n         P: ~const FnOnce(&T) -> bool,\n-        P: ~const Drop + ~const Destruct,\n+        P: ~const Destruct,\n     {\n         if let Some(x) = self {\n             if predicate(&x) {\n@@ -1326,10 +1315,9 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn or(self, optb: Option<T>) -> Option<T>\n     where\n-        T: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n     {\n         match self {\n             Some(x) => Some(x),\n@@ -1353,11 +1341,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn or_else<F>(self, f: F) -> Option<T>\n     where\n         F: ~const FnOnce() -> Option<T>,\n-        F: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n     {\n         match self {\n             Some(x) => Some(x),\n@@ -1389,10 +1376,9 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_xor\", since = \"1.37.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn xor(self, optb: Option<T>) -> Option<T>\n     where\n-        T: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n     {\n         match (self, optb) {\n             (Some(a), None) => Some(a),\n@@ -1428,10 +1414,9 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn insert(&mut self, value: T) -> &mut T\n     where\n-        T: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n     {\n         *self = Some(value);\n \n@@ -1462,10 +1447,9 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn get_or_insert(&mut self, value: T) -> &mut T\n     where\n-        T: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n     {\n         if let None = *self {\n             *self = Some(value);\n@@ -1530,11 +1514,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T\n     where\n         F: ~const FnOnce() -> T,\n-        F: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n     {\n         if let None = *self {\n             // the compiler isn't smart enough to know that we are not dropping a `T`\n@@ -1645,11 +1628,10 @@ impl<T> Option<T> {\n     /// ```\n     #[stable(feature = \"option_zip_option\", since = \"1.46.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn zip<U>(self, other: Option<U>) -> Option<(T, U)>\n     where\n-        T: ~const Drop + ~const Destruct,\n-        U: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n+        U: ~const Destruct,\n     {\n         match (self, other) {\n             (Some(a), Some(b)) => Some((a, b)),\n@@ -1687,13 +1669,12 @@ impl<T> Option<T> {\n     /// ```\n     #[unstable(feature = \"option_zip\", issue = \"70086\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn zip_with<U, F, R>(self, other: Option<U>, f: F) -> Option<R>\n     where\n         F: ~const FnOnce(T, U) -> R,\n-        F: ~const Drop + ~const Destruct,\n-        T: ~const Drop + ~const Destruct,\n-        U: ~const Drop + ~const Destruct,\n+        F: ~const Destruct,\n+        T: ~const Destruct,\n+        U: ~const Destruct,\n     {\n         match (self, other) {\n             (Some(a), Some(b)) => Some(f(a, b)),\n@@ -1880,10 +1861,9 @@ const fn expect_failed(msg: &str) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_clone\", issue = \"91805\")]\n-#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n impl<T> const Clone for Option<T>\n where\n-    T: ~const Clone + ~const Drop + ~const Destruct,\n+    T: ~const Clone + ~const Destruct,\n {\n     #[inline]\n     fn clone(&self) -> Self {"}, {"sha": "7a575a88e52e1aa507fc512251f2ee7bdf1d7602", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -88,7 +88,6 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n // any extra arguments (including those synthesized by track_caller).\n #[cold]\n #[inline(never)]\n-#[cfg_attr(bootstrap, track_caller)]\n #[lang = \"panic_no_unwind\"] // needed by codegen for panic in nounwind function\n fn panic_no_unwind() -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {"}, {"sha": "68f39dc434780fe1471d84cf5bc41d27a76970c0", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -4,7 +4,6 @@ use crate::intrinsics;\n use crate::mem;\n use crate::slice::{self, SliceIndex};\n \n-#[cfg_attr(bootstrap, lang = \"const_ptr\")]\n impl<T: ?Sized> *const T {\n     /// Returns `true` if the pointer is null.\n     ///\n@@ -1086,7 +1085,6 @@ impl<T: ?Sized> *const T {\n     }\n }\n \n-#[cfg_attr(bootstrap, lang = \"const_slice_ptr\")]\n impl<T> *const [T] {\n     /// Returns the length of a raw slice.\n     ///"}, {"sha": "4c9b0f7cc0c0513934871184251a4a728f5243d4", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -3,7 +3,6 @@ use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::intrinsics;\n use crate::slice::{self, SliceIndex};\n \n-#[cfg_attr(bootstrap, lang = \"mut_ptr\")]\n impl<T: ?Sized> *mut T {\n     /// Returns `true` if the pointer is null.\n     ///\n@@ -1357,7 +1356,6 @@ impl<T: ?Sized> *mut T {\n     }\n }\n \n-#[cfg_attr(bootstrap, lang = \"mut_slice_ptr\")]\n impl<T> *mut [T] {\n     /// Returns the length of a raw slice.\n     ///"}, {"sha": "b2b132300a299869fcfab14e8bc4ece0b0bf4a28", "filename": "library/core/src/result.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -636,7 +636,7 @@ impl<T, E> Result<T, E> {\n     #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n     pub const fn ok(self) -> Option<T>\n     where\n-        E: ~const Drop + ~const Destruct,\n+        E: ~const Destruct,\n     {\n         match self {\n             Ok(x) => Some(x),\n@@ -667,7 +667,7 @@ impl<T, E> Result<T, E> {\n     #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n     pub const fn err(self) -> Option<E>\n     where\n-        T: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n     {\n         match self {\n             // FIXME: ~const Drop doesn't quite work right yet\n@@ -1283,9 +1283,9 @@ impl<T, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn and<U>(self, res: Result<U, E>) -> Result<U, E>\n     where\n-        T: ~const Drop + ~const Destruct,\n-        U: ~const Drop + ~const Destruct,\n-        E: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n+        U: ~const Destruct,\n+        E: ~const Destruct,\n     {\n         match self {\n             // FIXME: ~const Drop doesn't quite work right yet\n@@ -1368,9 +1368,9 @@ impl<T, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn or<F>(self, res: Result<T, F>) -> Result<T, F>\n     where\n-        T: ~const Drop + ~const Destruct,\n-        E: ~const Drop + ~const Destruct,\n-        F: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n+        E: ~const Destruct,\n+        F: ~const Destruct,\n     {\n         match self {\n             Ok(v) => Ok(v),\n@@ -1432,8 +1432,8 @@ impl<T, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn unwrap_or(self, default: T) -> T\n     where\n-        T: ~const Drop + ~const Destruct,\n-        E: ~const Drop + ~const Destruct,\n+        T: ~const Destruct,\n+        E: ~const Destruct,\n     {\n         match self {\n             Ok(t) => t,\n@@ -1803,11 +1803,10 @@ fn unwrap_failed<T>(_msg: &str, _error: &T) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_clone\", issue = \"91805\")]\n-#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n impl<T, E> const Clone for Result<T, E>\n where\n-    T: ~const Clone + ~const Drop + ~const Destruct,\n-    E: ~const Clone + ~const Drop + ~const Destruct,\n+    T: ~const Clone + ~const Destruct,\n+    E: ~const Clone + ~const Destruct,\n {\n     #[inline]\n     fn clone(&self) -> Self {"}, {"sha": "9aa5c88a62c8e22714afc6a991cfb025483f8e5a", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -6,7 +6,6 @@ use crate::iter;\n use crate::mem;\n use crate::ops;\n \n-#[cfg_attr(bootstrap, lang = \"slice_u8\")]\n #[cfg(not(test))]\n impl [u8] {\n     /// Checks if all bytes in this slice are within the ASCII range."}, {"sha": "fe084a40b6aed48f1694496d8f16b0e2a1839bfd", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -110,7 +110,6 @@ enum Direction {\n     Back,\n }\n \n-#[cfg_attr(bootstrap, lang = \"slice\")]\n #[cfg(not(test))]\n impl<T> [T] {\n     /// Returns the number of elements in the slice."}, {"sha": "bd05b2e791da7f3427a36572c0d786de4ceb2602", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -130,7 +130,6 @@ fn slice_error_fail_rt(s: &str, begin: usize, end: usize) -> ! {\n     );\n }\n \n-#[cfg_attr(bootstrap, lang = \"str\")]\n #[cfg(not(test))]\n impl str {\n     /// Returns the length of `self`."}, {"sha": "4a020e59e9cbe5b207fb69b3a237f8d0b2f4933b", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -20,8 +20,6 @@\n #![feature(rustc_allow_const_fn_unstable)]\n #![feature(nll)]\n #![feature(staged_api)]\n-#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n-#![cfg_attr(bootstrap, feature(const_fn_fn_ptr_basics))]\n #![feature(allow_internal_unstable)]\n #![feature(decl_macro)]\n #![feature(extern_types)]"}, {"sha": "49b6cd4232cd1792ae6ac046ab7530b052726b98", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -315,14 +315,11 @@ pub fn take_alloc_error_hook() -> fn(Layout) {\n }\n \n fn default_alloc_error_hook(layout: Layout) {\n-    #[cfg(not(bootstrap))]\n     extern \"Rust\" {\n         // This symbol is emitted by rustc next to __rust_alloc_error_handler.\n         // Its value depends on the -Zoom={panic,abort} compiler option.\n         static __rust_alloc_error_handler_should_panic: u8;\n     }\n-    #[cfg(bootstrap)]\n-    let __rust_alloc_error_handler_should_panic = 0;\n \n     #[allow(unused_unsafe)]\n     if unsafe { __rust_alloc_error_handler_should_panic != 0 } {"}, {"sha": "ac288c599f3a4c8b4ecc33904e5b722380353850", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -28,7 +28,6 @@ pub use core::f32::{\n };\n \n #[cfg(not(test))]\n-#[cfg_attr(bootstrap, lang = \"f32_runtime\")]\n impl f32 {\n     /// Returns the largest integer less than or equal to a number.\n     ///\n@@ -43,7 +42,7 @@ impl f32 {\n     /// assert_eq!(g.floor(), 3.0);\n     /// assert_eq!(h.floor(), -4.0);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -62,7 +61,7 @@ impl f32 {\n     /// assert_eq!(f.ceil(), 4.0);\n     /// assert_eq!(g.ceil(), 4.0);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -82,7 +81,7 @@ impl f32 {\n     /// assert_eq!(f.round(), 3.0);\n     /// assert_eq!(g.round(), -3.0);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -103,7 +102,7 @@ impl f32 {\n     /// assert_eq!(g.trunc(), 3.0);\n     /// assert_eq!(h.trunc(), -3.0);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -124,7 +123,7 @@ impl f32 {\n     /// assert!(abs_difference_x <= f32::EPSILON);\n     /// assert!(abs_difference_y <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -149,7 +148,7 @@ impl f32 {\n     ///\n     /// assert!(f32::NAN.abs().is_nan());\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -173,7 +172,7 @@ impl f32 {\n     ///\n     /// assert!(f32::NAN.signum().is_nan());\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -200,7 +199,7 @@ impl f32 {\n     ///\n     /// assert!(f32::NAN.copysign(1.0).is_nan());\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"copysign\", since = \"1.35.0\")]\n@@ -228,7 +227,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -253,7 +252,7 @@ impl f32 {\n     /// assert_eq!(a.div_euclid(-b), -1.0); // 7.0 >= -4.0 * -1.0\n     /// assert_eq!((-a).div_euclid(-b), 2.0); // -7.0 >= -4.0 * 2.0\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n@@ -288,7 +287,7 @@ impl f32 {\n     /// // limitation due to round-off error\n     /// assert!((-f32::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n@@ -309,7 +308,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -327,7 +326,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -352,7 +351,7 @@ impl f32 {\n     /// assert!(negative.sqrt().is_nan());\n     /// assert!(negative_zero.sqrt() == negative_zero);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -374,7 +373,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -394,7 +393,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -416,7 +415,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -440,7 +439,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -460,7 +459,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -483,7 +482,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -508,7 +507,7 @@ impl f32 {\n     /// assert!(abs_difference_x <= f32::EPSILON);\n     /// assert!(abs_difference_y <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -538,7 +537,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -560,7 +559,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -579,7 +578,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -598,7 +597,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -616,7 +615,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -638,7 +637,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -660,7 +659,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -681,7 +680,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -715,7 +714,7 @@ impl f32 {\n     /// assert!(abs_difference_1 <= f32::EPSILON);\n     /// assert!(abs_difference_2 <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -738,7 +737,7 @@ impl f32 {\n     /// assert!(abs_difference_0 <= f32::EPSILON);\n     /// assert!(abs_difference_1 <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sin_cos(self) -> (f32, f32) {\n@@ -759,7 +758,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -781,7 +780,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -804,7 +803,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -827,7 +826,7 @@ impl f32 {\n     /// // Same result\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -850,7 +849,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -870,7 +869,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -890,7 +889,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -910,7 +909,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= 1e-5);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "01279f01b0568caa8601f720b137b8fef866604f", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -28,7 +28,6 @@ pub use core::f64::{\n };\n \n #[cfg(not(test))]\n-#[cfg_attr(bootstrap, lang = \"f64_runtime\")]\n impl f64 {\n     /// Returns the largest integer less than or equal to a number.\n     ///\n@@ -43,7 +42,7 @@ impl f64 {\n     /// assert_eq!(g.floor(), 3.0);\n     /// assert_eq!(h.floor(), -4.0);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -62,7 +61,7 @@ impl f64 {\n     /// assert_eq!(f.ceil(), 4.0);\n     /// assert_eq!(g.ceil(), 4.0);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -82,7 +81,7 @@ impl f64 {\n     /// assert_eq!(f.round(), 3.0);\n     /// assert_eq!(g.round(), -3.0);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -103,7 +102,7 @@ impl f64 {\n     /// assert_eq!(g.trunc(), 3.0);\n     /// assert_eq!(h.trunc(), -3.0);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -124,7 +123,7 @@ impl f64 {\n     /// assert!(abs_difference_x < 1e-10);\n     /// assert!(abs_difference_y < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -149,7 +148,7 @@ impl f64 {\n     ///\n     /// assert!(f64::NAN.abs().is_nan());\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -173,7 +172,7 @@ impl f64 {\n     ///\n     /// assert!(f64::NAN.signum().is_nan());\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -200,7 +199,7 @@ impl f64 {\n     ///\n     /// assert!(f64::NAN.copysign(1.0).is_nan());\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"copysign\", since = \"1.35.0\")]\n     #[inline]\n@@ -228,7 +227,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -253,7 +252,7 @@ impl f64 {\n     /// assert_eq!(a.div_euclid(-b), -1.0); // 7.0 >= -4.0 * -1.0\n     /// assert_eq!((-a).div_euclid(-b), 2.0); // -7.0 >= -4.0 * 2.0\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n@@ -288,7 +287,7 @@ impl f64 {\n     /// // limitation due to round-off error\n     /// assert!((-f64::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n@@ -309,7 +308,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -327,7 +326,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -352,7 +351,7 @@ impl f64 {\n     /// assert!(negative.sqrt().is_nan());\n     /// assert!(negative_zero.sqrt() == negative_zero);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -374,7 +373,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -394,7 +393,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -416,7 +415,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -440,7 +439,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -460,7 +459,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -485,7 +484,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -510,7 +509,7 @@ impl f64 {\n     /// assert!(abs_difference_x < 1e-10);\n     /// assert!(abs_difference_y < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -540,7 +539,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -562,7 +561,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -581,7 +580,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -600,7 +599,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -618,7 +617,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-14);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -640,7 +639,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -662,7 +661,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -683,7 +682,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -717,7 +716,7 @@ impl f64 {\n     /// assert!(abs_difference_1 < 1e-10);\n     /// assert!(abs_difference_2 < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -740,7 +739,7 @@ impl f64 {\n     /// assert!(abs_difference_0 < 1e-10);\n     /// assert!(abs_difference_1 < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sin_cos(self) -> (f64, f64) {\n@@ -761,7 +760,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-20);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -783,7 +782,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-20);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -806,7 +805,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -829,7 +828,7 @@ impl f64 {\n     /// // Same result\n     /// assert!(abs_difference < 1.0e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -852,7 +851,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1.0e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -872,7 +871,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1.0e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -892,7 +891,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1.0e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -912,7 +911,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1.0e-10);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -923,7 +922,7 @@ impl f64 {\n     // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g., log(-n) returns -Inf instead\n     // of expected NaN).\n-    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[rustc_allow_incoherent_impl]\n     fn log_wrapper<F: Fn(f64) -> f64>(self, log_fn: F) -> f64 {\n         if !cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n             log_fn(self)"}, {"sha": "5ade65ad9c62930996bc5e61c90b8d2e0e7f9f5b", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -228,12 +228,10 @@\n #![feature(c_unwind)]\n #![feature(cfg_target_thread_local)]\n #![feature(concat_idents)]\n-#![cfg_attr(bootstrap, feature(const_fn_fn_ptr_basics))]\n-#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n #![feature(const_mut_refs)]\n #![feature(const_trait_impl)]\n #![feature(decl_macro)]\n-#![cfg_attr(not(bootstrap), feature(deprecated_suggestion))]\n+#![feature(deprecated_suggestion)]\n #![feature(doc_cfg)]\n #![feature(doc_cfg_hide)]\n #![feature(doc_masked)]"}, {"sha": "dc0123cf43266a4446fcde65f4395b2dbdb58173", "filename": "library/test/src/console.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -103,27 +103,19 @@ impl ConsoleTestState {\n         exec_time: Option<&TestExecTime>,\n     ) -> io::Result<()> {\n         self.write_log(|| {\n-            let TestDesc {\n-                name,\n-                #[cfg(not(bootstrap))]\n-                ignore_message,\n-                ..\n-            } = test;\n+            let TestDesc { name, ignore_message, .. } = test;\n             format!(\n                 \"{} {}\",\n                 match *result {\n                     TestResult::TrOk => \"ok\".to_owned(),\n                     TestResult::TrFailed => \"failed\".to_owned(),\n                     TestResult::TrFailedMsg(ref msg) => format!(\"failed: {msg}\"),\n                     TestResult::TrIgnored => {\n-                        #[cfg(not(bootstrap))]\n                         if let Some(msg) = ignore_message {\n                             format!(\"ignored: {msg}\")\n                         } else {\n                             \"ignored\".to_owned()\n                         }\n-                        #[cfg(bootstrap)]\n-                        \"ignored\".to_owned()\n                     }\n                     TestResult::TrBench(ref bs) => fmt_bench_samples(bs),\n                     TestResult::TrTimedFail => \"failed (time limit exceeded)\".to_owned(),"}, {"sha": "c07fdafb167c98871b773d1a35fb898c64096c05", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -120,22 +120,16 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n                 Some(&*format!(r#\"\"message\": \"{}\"\"#, EscapedString(m))),\n             ),\n \n-            TestResult::TrIgnored => {\n-                #[cfg(not(bootstrap))]\n-                return self.write_event(\n-                    \"test\",\n-                    desc.name.as_slice(),\n-                    \"ignored\",\n-                    exec_time,\n-                    stdout,\n-                    desc.ignore_message\n-                        .map(|msg| format!(r#\"\"message\": \"{}\"\"#, EscapedString(msg)))\n-                        .as_deref(),\n-                );\n-\n-                #[cfg(bootstrap)]\n-                self.write_event(\"test\", desc.name.as_slice(), \"ignored\", exec_time, stdout, None)\n-            }\n+            TestResult::TrIgnored => self.write_event(\n+                \"test\",\n+                desc.name.as_slice(),\n+                \"ignored\",\n+                exec_time,\n+                stdout,\n+                desc.ignore_message\n+                    .map(|msg| format!(r#\"\"message\": \"{}\"\"#, EscapedString(msg)))\n+                    .as_deref(),\n+            ),\n \n             TestResult::TrBench(ref bs) => {\n                 let median = bs.ns_iter_summ.median as usize;"}, {"sha": "694202229802f832fd5cab66db22c2464f8077e4", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -218,12 +218,7 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n         match *result {\n             TestResult::TrOk => self.write_ok()?,\n             TestResult::TrFailed | TestResult::TrFailedMsg(_) => self.write_failed()?,\n-            TestResult::TrIgnored => {\n-                #[cfg(not(bootstrap))]\n-                self.write_ignored(desc.ignore_message)?;\n-                #[cfg(bootstrap)]\n-                self.write_ignored(None)?;\n-            }\n+            TestResult::TrIgnored => self.write_ignored(desc.ignore_message)?,\n             TestResult::TrBench(ref bs) => {\n                 self.write_bench()?;\n                 self.write_plain(&format!(\": {}\", fmt_bench_samples(bs)))?;"}, {"sha": "0b81aff5907e825a9442f8891c0740965abe9761", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -61,7 +61,6 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n             desc: TestDesc {\n                 name: StaticTestName(\"1\"),\n                 ignore: true,\n-                #[cfg(not(bootstrap))]\n                 ignore_message: None,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n@@ -74,7 +73,6 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n             desc: TestDesc {\n                 name: StaticTestName(\"2\"),\n                 ignore: false,\n-                #[cfg(not(bootstrap))]\n                 ignore_message: None,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n@@ -95,7 +93,6 @@ pub fn do_not_run_ignored_tests() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n-            #[cfg(not(bootstrap))]\n             ignore_message: None,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -117,7 +114,6 @@ pub fn ignored_tests_result_in_ignored() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n-            #[cfg(not(bootstrap))]\n             ignore_message: None,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -143,7 +139,6 @@ fn test_should_panic() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n-            #[cfg(not(bootstrap))]\n             ignore_message: None,\n             should_panic: ShouldPanic::Yes,\n             compile_fail: false,\n@@ -169,7 +164,6 @@ fn test_should_panic_good_message() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n-            #[cfg(not(bootstrap))]\n             ignore_message: None,\n             should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n             compile_fail: false,\n@@ -200,7 +194,6 @@ fn test_should_panic_bad_message() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n-            #[cfg(not(bootstrap))]\n             ignore_message: None,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             compile_fail: false,\n@@ -235,7 +228,6 @@ fn test_should_panic_non_string_message_type() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n-            #[cfg(not(bootstrap))]\n             ignore_message: None,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             compile_fail: false,\n@@ -262,7 +254,6 @@ fn test_should_panic_but_succeeds() {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                #[cfg(not(bootstrap))]\n                 ignore_message: None,\n                 should_panic,\n                 compile_fail: false,\n@@ -297,7 +288,6 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n-            #[cfg(not(bootstrap))]\n             ignore_message: None,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -333,7 +323,6 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n-            #[cfg(not(bootstrap))]\n             ignore_message: None,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -373,7 +362,6 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n     TestDesc {\n         name: StaticTestName(\"whatever\"),\n         ignore: false,\n-        #[cfg(not(bootstrap))]\n         ignore_message: None,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -486,7 +474,6 @@ pub fn exclude_should_panic_option() {\n         desc: TestDesc {\n             name: StaticTestName(\"3\"),\n             ignore: false,\n-            #[cfg(not(bootstrap))]\n             ignore_message: None,\n             should_panic: ShouldPanic::Yes,\n             compile_fail: false,\n@@ -511,7 +498,6 @@ pub fn exact_filter_match() {\n                 desc: TestDesc {\n                     name: StaticTestName(name),\n                     ignore: false,\n-                    #[cfg(not(bootstrap))]\n                     ignore_message: None,\n                     should_panic: ShouldPanic::No,\n                     compile_fail: false,\n@@ -601,7 +587,6 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n             desc: TestDesc {\n                 name: DynTestName((*name).clone()),\n                 ignore: false,\n-                #[cfg(not(bootstrap))]\n                 ignore_message: None,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n@@ -753,7 +738,6 @@ pub fn test_bench_no_iter() {\n     let desc = TestDesc {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n-        #[cfg(not(bootstrap))]\n         ignore_message: None,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -776,7 +760,6 @@ pub fn test_bench_iter() {\n     let desc = TestDesc {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n-        #[cfg(not(bootstrap))]\n         ignore_message: None,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -793,7 +776,6 @@ fn should_sort_failures_before_printing_them() {\n     let test_a = TestDesc {\n         name: StaticTestName(\"a\"),\n         ignore: false,\n-        #[cfg(not(bootstrap))]\n         ignore_message: None,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -804,7 +786,6 @@ fn should_sort_failures_before_printing_them() {\n     let test_b = TestDesc {\n         name: StaticTestName(\"b\"),\n         ignore: false,\n-        #[cfg(not(bootstrap))]\n         ignore_message: None,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,"}, {"sha": "ffb1efe18cca183fba11d55574ecc97c0ebd5021", "filename": "library/test/src/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -117,7 +117,6 @@ pub struct TestId(pub usize);\n pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n-    #[cfg(not(bootstrap))]\n     pub ignore_message: Option<&'static str>,\n     pub should_panic: options::ShouldPanic,\n     pub compile_fail: bool,"}, {"sha": "a01b56004c456953eccde85536d39e562cecf646", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -1,7 +1,6 @@\n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n #![feature(link_cfg)]\n-#![cfg_attr(bootstrap, feature(native_link_modifiers))]\n #![feature(native_link_modifiers_bundle)]\n #![feature(nll)]\n #![feature(staged_api)]"}, {"sha": "50ae22b99cdf88aa531c1bdc88ae7e4ab0a69a34", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -1019,7 +1019,6 @@ impl Tester for Collector {\n                     Ignore::None => false,\n                     Ignore::Some(ref ignores) => ignores.iter().any(|s| target_str.contains(s)),\n                 },\n-                #[cfg(not(bootstrap))]\n                 ignore_message: None,\n                 // compiler failures are test failures\n                 should_panic: test::ShouldPanic::No,"}, {"sha": "15f01505eba8fdad72d7ade9da70e36404804552", "filename": "src/test/ui/target-feature/tied-features.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -1,7 +1,6 @@\n // build-fail\n // compile-flags: --crate-type=rlib --target=aarch64-unknown-linux-gnu\n // needs-llvm-components: aarch64\n-#![cfg_attr(bootstrap, feature(aarch64_target_feature))]\n #![feature(no_core, lang_items)]\n #![no_core]\n "}, {"sha": "8a72b44e2b5ac78bebdb08a5b53c7fb6ab2f43ba", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/181d28bb6110dc974879db20d433f21aa142db3a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181d28bb6110dc974879db20d433f21aa142db3a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=181d28bb6110dc974879db20d433f21aa142db3a", "patch": "@@ -806,8 +806,7 @@ pub fn make_test_description<R: Read>(\n     cfg: Option<&str>,\n ) -> test::TestDesc {\n     let mut ignore = false;\n-    #[cfg(not(bootstrap))]\n-    let ignore_message: Option<String> = None;\n+    let ignore_message = None;\n     let mut should_fail = false;\n \n     let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n@@ -879,7 +878,6 @@ pub fn make_test_description<R: Read>(\n     test::TestDesc {\n         name,\n         ignore,\n-        #[cfg(not(bootstrap))]\n         ignore_message,\n         should_panic,\n         compile_fail: false,"}]}