{"sha": "d1676b57278e90df0b38a7bb4f905e356542d575", "node_id": "C_kwDOAAsO6NoAKGQxNjc2YjU3Mjc4ZTkwZGYwYjM4YTdiYjRmOTA1ZTM1NjU0MmQ1NzU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-04T11:15:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-04T12:55:29Z"}, "message": "more details on stacked borrows tracking", "tree": {"sha": "4160277d35f707db41ce465894bdacb776acded7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4160277d35f707db41ce465894bdacb776acded7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1676b57278e90df0b38a7bb4f905e356542d575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1676b57278e90df0b38a7bb4f905e356542d575", "html_url": "https://github.com/rust-lang/rust/commit/d1676b57278e90df0b38a7bb4f905e356542d575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1676b57278e90df0b38a7bb4f905e356542d575/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17cb715b0405202132df7143e02328be1eb0c597", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cb715b0405202132df7143e02328be1eb0c597", "html_url": "https://github.com/rust-lang/rust/commit/17cb715b0405202132df7143e02328be1eb0c597"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "ecfe0cd3f8a65d7205cc0084834b56538a15b333", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d1676b57278e90df0b38a7bb4f905e356542d575/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1676b57278e90df0b38a7bb4f905e356542d575/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=d1676b57278e90df0b38a7bb4f905e356542d575", "patch": "@@ -60,7 +60,10 @@ impl MachineStopType for TerminationInfo {}\n \n /// Miri specific diagnostics\n pub enum NonHaltingDiagnostic {\n-    CreatedPointerTag(NonZeroU64, Option<(AllocId, AllocRange)>),\n+    /// (new_tag, new_kind, (alloc_id, base_offset, orig_tag))\n+    ///\n+    /// new_kind is `None` for base tags.\n+    CreatedPointerTag(NonZeroU64, Option<String>, Option<(AllocId, AllocRange, ProvenanceExtra)>),\n     /// This `Item` was popped from the borrow stack, either due to an access with the given tag or\n     /// a deallocation when the second argument is `None`.\n     PoppedPointerTag(Item, Option<(ProvenanceExtra, AccessKind)>),\n@@ -376,7 +379,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             MiriInterpCx::generate_stacktrace_from_stack(self.threads.active_thread_stack());\n         let (stacktrace, _was_pruned) = prune_stacktrace(stacktrace, self);\n \n-        let (title, diag_level) = match e {\n+        let (title, diag_level) = match &e {\n             RejectedIsolatedOp(_) => (\"operation rejected by isolation\", DiagLevel::Warning),\n             Int2Ptr { .. } => (\"integer-to-pointer cast\", DiagLevel::Warning),\n             CreatedPointerTag(..)\n@@ -388,10 +391,13 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             | WeakMemoryOutdatedLoad => (\"tracking was triggered\", DiagLevel::Note),\n         };\n \n-        let msg = match e {\n-            CreatedPointerTag(tag, None) => format!(\"created tag {tag:?}\"),\n-            CreatedPointerTag(tag, Some((alloc_id, range))) =>\n-                format!(\"created tag {tag:?} at {alloc_id:?}{range:?}\"),\n+        let msg = match &e {\n+            CreatedPointerTag(tag, None, _) => format!(\"created base tag {tag:?}\"),\n+            CreatedPointerTag(tag, Some(kind), None) => format!(\"created {tag:?} for {kind}\"),\n+            CreatedPointerTag(tag, Some(kind), Some((alloc_id, range, orig_tag))) =>\n+                format!(\n+                    \"created tag {tag:?} for {kind} at {alloc_id:?}{range:?} derived from {orig_tag:?}\"\n+                ),\n             PoppedPointerTag(item, tag) =>\n                 match tag {\n                     None => format!(\"popped tracked tag for item {item:?} due to deallocation\",),\n@@ -418,7 +424,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n                 format!(\"weak memory emulation: outdated value returned from load\"),\n         };\n \n-        let notes = match e {\n+        let notes = match &e {\n             ProgressReport { block_count } => {\n                 // It is important that each progress report is slightly different, since\n                 // identical diagnostics are being deduplicated.\n@@ -427,7 +433,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             _ => vec![],\n         };\n \n-        let helps = match e {\n+        let helps = match &e {\n             Int2Ptr { details: true } =>\n                 vec![\n                     ("}, {"sha": "429c6eb8ef555538115b7cc0efb4eb3539ba9214", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d1676b57278e90df0b38a7bb4f905e356542d575/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1676b57278e90df0b38a7bb4f905e356542d575/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=d1676b57278e90df0b38a7bb4f905e356542d575", "patch": "@@ -5,6 +5,7 @@ use log::trace;\n use std::cell::RefCell;\n use std::cmp;\n use std::fmt;\n+use std::fmt::Write;\n use std::num::NonZeroU64;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -203,7 +204,7 @@ impl GlobalStateInner {\n         self.base_ptr_tags.get(&id).copied().unwrap_or_else(|| {\n             let tag = self.new_ptr();\n             if self.tracked_pointer_tags.contains(&tag) {\n-                machine.emit_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(tag.0, None));\n+                machine.emit_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(tag.0, None, None));\n             }\n             trace!(\"New allocation {:?} has base tag {:?}\", id, tag);\n             self.base_ptr_tags.try_insert(id, tag).unwrap();\n@@ -674,10 +675,26 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                             loc: Option<(AllocId, Size, ProvenanceExtra)>| // alloc_id, base_offset, orig_tag\n          -> InterpResult<'tcx> {\n             let global = this.machine.stacked_borrows.as_ref().unwrap().borrow();\n+            let ty = place.layout.ty;\n             if global.tracked_pointer_tags.contains(&new_tag) {\n+                let mut kind_str = format!(\"{kind}\");\n+                match kind {\n+                    RefKind::Unique { two_phase: false }\n+                        if !ty.is_unpin(this.tcx.at(DUMMY_SP), this.param_env()) =>\n+                    {\n+                        write!(kind_str, \" (!Unpin pointee type {ty})\").unwrap()\n+                    },\n+                    RefKind::Shared\n+                        if !ty.is_freeze(this.tcx.at(DUMMY_SP), this.param_env()) =>\n+                    {\n+                        write!(kind_str, \" (!Freeze pointee type {ty})\").unwrap()\n+                    },\n+                    _ => write!(kind_str, \" (pointee type {ty})\").unwrap(),\n+                };\n                 this.emit_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(\n                     new_tag.0,\n-                    loc.map(|(alloc_id, base_offset, _)| (alloc_id, alloc_range(base_offset, size))),\n+                    Some(kind_str),\n+                    loc.map(|(alloc_id, base_offset, orig_tag)| (alloc_id, alloc_range(base_offset, size), orig_tag)),\n                 ));\n             }\n             drop(global); // don't hold that reference any longer than we have to"}]}