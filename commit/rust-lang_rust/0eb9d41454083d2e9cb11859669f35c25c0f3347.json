{"sha": "0eb9d41454083d2e9cb11859669f35c25c0f3347", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYjlkNDE0NTQwODNkMmU5Y2IxMTg1OTY2OWYzNWMyNWMwZjMzNDc=", "commit": {"author": {"name": "Gon\u00e7alo Cabrita", "email": "_@gmcabrita.com", "date": "2012-10-04T20:28:45Z"}, "committer": {"name": "Gon\u00e7alo Cabrita", "email": "_@gmcabrita.com", "date": "2012-10-04T20:28:45Z"}, "message": "Fixed a few typos in the tutorials.", "tree": {"sha": "92874a49d2c5f3c6ceda4d8b1ca6c1a5610ca2c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92874a49d2c5f3c6ceda4d8b1ca6c1a5610ca2c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eb9d41454083d2e9cb11859669f35c25c0f3347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb9d41454083d2e9cb11859669f35c25c0f3347", "html_url": "https://github.com/rust-lang/rust/commit/0eb9d41454083d2e9cb11859669f35c25c0f3347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eb9d41454083d2e9cb11859669f35c25c0f3347/comments", "author": {"login": "gmcabrita", "id": 957820, "node_id": "MDQ6VXNlcjk1NzgyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/957820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmcabrita", "html_url": "https://github.com/gmcabrita", "followers_url": "https://api.github.com/users/gmcabrita/followers", "following_url": "https://api.github.com/users/gmcabrita/following{/other_user}", "gists_url": "https://api.github.com/users/gmcabrita/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmcabrita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmcabrita/subscriptions", "organizations_url": "https://api.github.com/users/gmcabrita/orgs", "repos_url": "https://api.github.com/users/gmcabrita/repos", "events_url": "https://api.github.com/users/gmcabrita/events{/privacy}", "received_events_url": "https://api.github.com/users/gmcabrita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gmcabrita", "id": 957820, "node_id": "MDQ6VXNlcjk1NzgyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/957820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmcabrita", "html_url": "https://github.com/gmcabrita", "followers_url": "https://api.github.com/users/gmcabrita/followers", "following_url": "https://api.github.com/users/gmcabrita/following{/other_user}", "gists_url": "https://api.github.com/users/gmcabrita/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmcabrita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmcabrita/subscriptions", "organizations_url": "https://api.github.com/users/gmcabrita/orgs", "repos_url": "https://api.github.com/users/gmcabrita/repos", "events_url": "https://api.github.com/users/gmcabrita/events{/privacy}", "received_events_url": "https://api.github.com/users/gmcabrita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56c9c815227a107e527ef1c978bc23d9f351efb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/56c9c815227a107e527ef1c978bc23d9f351efb2", "html_url": "https://github.com/rust-lang/rust/commit/56c9c815227a107e527ef1c978bc23d9f351efb2"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "8202fbe8dc53f100e6e9ac1ae7b6e6c668683d4e", "filename": "doc/tutorial-macros.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0eb9d41454083d2e9cb11859669f35c25c0f3347/doc%2Ftutorial-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/0eb9d41454083d2e9cb11859669f35c25c0f3347/doc%2Ftutorial-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-macros.md?ref=0eb9d41454083d2e9cb11859669f35c25c0f3347", "patch": "@@ -65,7 +65,7 @@ forbidden.\n To take as an argument a fragment of Rust code, write `$` followed by a name\n  (for use on the right-hand side), followed by a `:`, followed by the sort of\n fragment to match (the most common ones are `ident`, `expr`, `ty`, `pat`, and\n-`block`). Anything not preceeded by a `$` is taken literally. The standard\n+`block`). Anything not preceded by a `$` is taken literally. The standard\n rules of tokenization apply,\n \n So `($x:ident => (($e:expr)))`, though excessively fancy, would create a macro\n@@ -88,7 +88,7 @@ position).\n \n Going back to the motivating example, suppose that we wanted each invocation\n of `early_return` to potentially accept multiple \"special\" identifiers. The\n-syntax `$(...)*` accepts zero or more occurences of its contents, much like\n+syntax `$(...)*` accepts zero or more occurrences of its contents, much like\n the Kleene star operator in regular expressions. It also supports a separator\n token (a comma-separated list could be written `$(...),*`), and `+` instead of\n `*` to mean \"at least one\"."}, {"sha": "8b9d0c0c2a7d9bc9144d3a5a060e4eb5a77fad24", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0eb9d41454083d2e9cb11859669f35c25c0f3347/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/0eb9d41454083d2e9cb11859669f35c25c0f3347/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=0eb9d41454083d2e9cb11859669f35c25c0f3347", "patch": "@@ -47,7 +47,7 @@ In particular, there are currently two independent modules that provide\n a message passing interface to Rust code: `core::comm` and `core::pipes`.\n `core::comm` is an older, less efficient system that is being phased out\n in favor of `pipes`. At some point the existing `core::comm` API will\n-be romoved and the user-facing portions of `core::pipes` will be moved\n+be removed and the user-facing portions of `core::pipes` will be moved\n to `core::comm`. In this tutorial we will discuss `pipes` and ignore\n the `comm` API.\n \n@@ -58,7 +58,7 @@ concurrency at the moment.\n * [`core::comm`] - The deprecated message passing API\n * [`core::pipes`] - The new message passing infrastructure and API\n * [`std::comm`] - Higher level messaging types based on `core::pipes`\n-* [`std::sync`] - More exotic synchronization tools, including locks \n+* [`std::sync`] - More exotic synchronization tools, including locks\n * [`std::arc`] - The ARC type, for safely sharing immutable data\n * [`std::par`] - Some basic tools for implementing parallel algorithms\n \n@@ -151,7 +151,7 @@ commonly used, which we will cover presently.\n \n The simplest way to create a pipe is to use the `pipes::stream`\n function to create a `(Chan, Port)` pair. In Rust parlance a 'channel'\n-is a sending endpoint of a pipe, and a 'port' is the recieving\n+is a sending endpoint of a pipe, and a 'port' is the receiving\n endpoint. Consider the following example of performing two calculations\n concurrently.\n \n@@ -183,7 +183,7 @@ let (chan, port): (Chan<int>, Port<int>) = stream();\n ~~~~\n \n The channel will be used by the child task to send data to the parent task,\n-which will wait to recieve the data on the port. The next statement\n+which will wait to receive the data on the port. The next statement\n spawns the child task.\n \n ~~~~\n@@ -307,7 +307,7 @@ unrecoverable within a single task - once a task fails there is no way\n to \"catch\" the exception.\n \n All tasks are, by default, _linked_ to each other, meaning their fate\n-is interwined, and if one fails so do all of them.\n+is intertwined, and if one fails so do all of them.\n \n ~~~\n # use task::spawn;"}]}