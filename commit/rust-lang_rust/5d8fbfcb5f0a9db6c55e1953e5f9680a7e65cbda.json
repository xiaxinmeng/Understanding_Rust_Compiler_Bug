{"sha": "5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOGZiZmNiNWYwYTlkYjZjNTVlMTk1M2U1Zjk2ODBhN2U2NWNiZGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-23T20:55:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-02T08:01:23Z"}, "message": "rename memory kind: Env -> Machine", "tree": {"sha": "38c7d0488badb6bfb47f913dbad3059b794004f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38c7d0488badb6bfb47f913dbad3059b794004f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda", "html_url": "https://github.com/rust-lang/rust/commit/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "340e14ee4204599c573e4f651e636aeaab5ce037", "url": "https://api.github.com/repos/rust-lang/rust/commits/340e14ee4204599c573e4f651e636aeaab5ce037", "html_url": "https://github.com/rust-lang/rust/commit/340e14ee4204599c573e4f651e636aeaab5ce037"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "a46d6ce8a8ed78a9ab3364f8851efaae5bbf6090", "filename": "src/eval.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda", "patch": "@@ -90,14 +90,14 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             // Make space for `0` terminator.\n             let size = arg.len() as u64 + 1;\n             let arg_type = tcx.mk_array(tcx.types.u8, size);\n-            let arg_place = ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Env.into());\n+            let arg_place = ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Machine.into());\n             ecx.write_os_str_to_c_str(OsStr::new(arg), arg_place.ptr, size)?;\n             argvs.push(arg_place.ptr);\n         }\n         // Make an array with all these pointers, in the Miri memory.\n         let argvs_layout =\n             ecx.layout_of(tcx.mk_array(tcx.mk_imm_ptr(tcx.types.u8), argvs.len() as u64))?;\n-        let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Env.into());\n+        let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Machine.into());\n         for (idx, arg) in argvs.into_iter().enumerate() {\n             let place = ecx.mplace_field(argvs_place, idx as u64)?;\n             ecx.write_scalar(arg, place.into())?;\n@@ -108,13 +108,13 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         // Store `argc` and `argv` for macOS `_NSGetArg{c,v}`.\n         {\n             let argc_place =\n-                ecx.allocate(ecx.layout_of(tcx.types.isize)?, MiriMemoryKind::Env.into());\n+                ecx.allocate(ecx.layout_of(tcx.types.isize)?, MiriMemoryKind::Machine.into());\n             ecx.write_scalar(argc, argc_place.into())?;\n             ecx.machine.argc = Some(argc_place.ptr);\n \n             let argv_place = ecx.allocate(\n                 ecx.layout_of(tcx.mk_imm_ptr(tcx.types.unit))?,\n-                MiriMemoryKind::Env.into(),\n+                MiriMemoryKind::Machine.into(),\n             );\n             ecx.write_scalar(argv, argv_place.into())?;\n             ecx.machine.argv = Some(argv_place.ptr);\n@@ -134,7 +134,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n \n             let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n             let cmd_type = tcx.mk_array(tcx.types.u16, cmd_utf16.len() as u64);\n-            let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Env.into());\n+            let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Machine.into());\n             ecx.machine.cmd_line = Some(cmd_place.ptr);\n             // Store the UTF-16 string. We just allocated so we know the bounds are fine.\n             let char_size = Size::from_bytes(2);\n@@ -147,7 +147,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     };\n \n     // Return place (in static memory so that it does not count as leak).\n-    let ret_place = ecx.allocate(ecx.layout_of(tcx.types.isize)?, MiriMemoryKind::Env.into());\n+    let ret_place = ecx.allocate(ecx.layout_of(tcx.types.isize)?, MiriMemoryKind::Machine.into());\n     // Call start function.\n     ecx.call_function(\n         start_instance,\n@@ -158,7 +158,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n \n     // Set the last_error to 0\n     let errno_layout = ecx.layout_of(tcx.types.u32)?;\n-    let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Env.into());\n+    let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Machine.into());\n     ecx.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n     ecx.machine.last_error = Some(errno_place);\n "}, {"sha": "9362ca16eac47a26f6f7f4fdc3e100231d877eef", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda", "patch": "@@ -48,8 +48,8 @@ pub enum MiriMemoryKind {\n     C,\n     /// Windows `HeapAlloc` memory.\n     WinHeap,\n-    /// Memory for env vars and args, errno and other parts of the machine-managed environment.\n-    Env,\n+    /// Memory for env vars and args, errno, extern statics and other parts of the machine-managed environment.\n+    Machine,\n     /// Rust statics.\n     Static,\n }\n@@ -433,7 +433,7 @@ impl MayLeak for MiriMemoryKind {\n         use self::MiriMemoryKind::*;\n         match self {\n             Rust | C | WinHeap => false,\n-            Env | Static => true,\n+            Machine | Static => true,\n         }\n     }\n }"}, {"sha": "10f749216541eecdf78d721add6e424d3c824a18", "filename": "src/shims/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda", "patch": "@@ -40,7 +40,7 @@ fn alloc_env_var_as_c_str<'mir, 'tcx>(\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n-    ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into())\n+    ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into())\n }\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -80,7 +80,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let var_ptr = alloc_env_var_as_c_str(&name, &value, &mut this);\n             if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), var_ptr) {\n                 this.memory\n-                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                    .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n             }\n             Ok(0)\n         } else {\n@@ -102,7 +102,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some(old) = success {\n             if let Some(var) = old {\n                 this.memory\n-                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                    .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n             }\n             Ok(0)\n         } else {"}, {"sha": "11c5a882be9b25847a4d3fab84a7131f05d052e9", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda", "patch": "@@ -187,7 +187,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 // First arg: Message.\n                 let msg = msg.description();\n-                let msg = this.allocate_str(msg, MiriMemoryKind::Env.into());\n+                let msg = this.allocate_str(msg, MiriMemoryKind::Machine.into());\n \n                 // Call the lang item.\n                 let panic = this.tcx.lang_items().panic_fn().unwrap();"}]}