{"sha": "643826150b502eddcc9b736e4320cb76ccedff8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MzgyNjE1MGI1MDJlZGRjYzliNzM2ZTQzMjBjYjc2Y2NlZGZmOGE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-04T15:50:24Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:16Z"}, "message": "trans: remove dead code", "tree": {"sha": "724496b1fc4538e57088c5af73acb800506cf51a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/724496b1fc4538e57088c5af73acb800506cf51a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/643826150b502eddcc9b736e4320cb76ccedff8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/643826150b502eddcc9b736e4320cb76ccedff8a", "html_url": "https://github.com/rust-lang/rust/commit/643826150b502eddcc9b736e4320cb76ccedff8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/643826150b502eddcc9b736e4320cb76ccedff8a/comments", "author": null, "committer": null, "parents": [{"sha": "5d6a6f59575ab389bb6c2f199e5723923a68ab1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d6a6f59575ab389bb6c2f199e5723923a68ab1d", "html_url": "https://github.com/rust-lang/rust/commit/5d6a6f59575ab389bb6c2f199e5723923a68ab1d"}], "stats": {"total": 120, "additions": 4, "deletions": 116}, "files": [{"sha": "f598083c5e44ae84d1b8d4227472172764e47185", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/643826150b502eddcc9b736e4320cb76ccedff8a/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643826150b502eddcc9b736e4320cb76ccedff8a/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=643826150b502eddcc9b736e4320cb76ccedff8a", "patch": "@@ -19,7 +19,7 @@ pub use self::CalleeData::*;\n pub use self::CallArgs::*;\n \n use arena::TypedArena;\n-use back::{abi,link};\n+use back::link;\n use session;\n use llvm::{ValueRef};\n use llvm::get_param;\n@@ -100,7 +100,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n \n     fn datum_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                                 -> Callee<'blk, 'tcx> {\n-        let DatumBlock {mut bcx, datum} = expr::trans(bcx, expr);\n+        let DatumBlock { datum, .. } = expr::trans(bcx, expr);\n         match datum.ty.sty {\n             ty::ty_bare_fn(..) => {\n                 let llval = datum.to_llscalarish(bcx);"}, {"sha": "6f2def16e7674f867c14e673cc2cb0fdc40269cf", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 97, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/643826150b502eddcc9b736e4320cb76ccedff8a/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643826150b502eddcc9b736e4320cb76ccedff8a/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=643826150b502eddcc9b736e4320cb76ccedff8a", "patch": "@@ -19,7 +19,7 @@ use trans::base::*;\n use trans::build::*;\n use trans::cleanup::{CleanupMethods, ScopeId};\n use trans::common::*;\n-use trans::datum::{Datum, DatumBlock, Expr, Lvalue, rvalue_scratch_datum};\n+use trans::datum::{Datum, Lvalue, rvalue_scratch_datum};\n use trans::datum::{Rvalue, ByValue};\n use trans::debuginfo;\n use trans::expr;\n@@ -29,10 +29,8 @@ use trans::type_::Type;\n use middle::ty::{self, Ty, UnboxedClosureTyper};\n use middle::subst::{Substs};\n use session::config::FullDebugInfo;\n-use util::ppaux::Repr;\n use util::ppaux::ty_to_string;\n \n-use arena::TypedArena;\n use syntax::ast;\n use syntax::ast_util;\n \n@@ -581,97 +579,3 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n \n     bcx\n }\n-\n-pub fn get_wrapper_for_bare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                         closure_ty: Ty<'tcx>,\n-                                         def_id: ast::DefId,\n-                                         fn_ptr: ValueRef,\n-                                         is_local: bool) -> ValueRef {\n-\n-    match ccx.closure_bare_wrapper_cache().borrow().get(&fn_ptr) {\n-        Some(&llval) => return llval,\n-        None => {}\n-    }\n-\n-    let tcx = ccx.tcx();\n-\n-    debug!(\"get_wrapper_for_bare_fn(closure_ty={})\", closure_ty.repr(tcx));\n-\n-    let f = match closure_ty.sty {\n-        _ => {\n-            ccx.sess().bug(format!(\"get_wrapper_for_bare_fn: \\\n-                                    expected a closure ty, got {}\",\n-                                    closure_ty.repr(tcx))[]);\n-        }\n-    };\n-\n-    let name = ty::with_path(tcx, def_id, |path| {\n-        mangle_internal_name_by_path_and_seq(path, \"as_closure\")\n-    });\n-    let llfn = if is_local {\n-        decl_internal_rust_fn(ccx, closure_ty, name[])\n-    } else {\n-        decl_rust_fn(ccx, closure_ty, name[])\n-    };\n-\n-    ccx.closure_bare_wrapper_cache().borrow_mut().insert(fn_ptr, llfn);\n-\n-    // This is only used by statics inlined from a different crate.\n-    if !is_local {\n-        // Don't regenerate the wrapper, just reuse the original one.\n-        return llfn;\n-    }\n-\n-    let _icx = push_ctxt(\"closure::get_wrapper_for_bare_fn\");\n-\n-    let arena = TypedArena::new();\n-    let empty_param_substs = Substs::trans_empty();\n-    let fcx = new_fn_ctxt(ccx, llfn, ast::DUMMY_NODE_ID, true, f.sig.0.output,\n-                          &empty_param_substs, None, &arena);\n-    let bcx = init_function(&fcx, true, f.sig.0.output);\n-\n-    let args = create_datums_for_fn_args(&fcx,\n-                                         ty::ty_fn_args(closure_ty)\n-                                            []);\n-    let mut llargs = Vec::new();\n-    match fcx.llretslotptr.get() {\n-        Some(llretptr) => {\n-            assert!(!fcx.needs_ret_allocas);\n-            llargs.push(llretptr);\n-        }\n-        None => {}\n-    }\n-    llargs.extend(args.iter().map(|arg| arg.val));\n-\n-    let retval = Call(bcx, fn_ptr, llargs.as_slice(), None);\n-    match f.sig.0.output {\n-        ty::FnConverging(output_type) => {\n-            if return_type_is_void(ccx, output_type) || fcx.llretslotptr.get().is_some() {\n-                RetVoid(bcx);\n-            } else {\n-                Ret(bcx, retval);\n-            }\n-        }\n-        ty::FnDiverging => {\n-            RetVoid(bcx);\n-        }\n-    }\n-\n-    // HACK(eddyb) finish_fn cannot be used here, we returned directly.\n-    debuginfo::clear_source_location(&fcx);\n-    fcx.cleanup();\n-\n-    llfn\n-}\n-\n-pub fn make_closure_from_bare_fn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                             closure_ty: Ty<'tcx>,\n-                                             def_id: ast::DefId,\n-                                             fn_ptr: ValueRef)\n-                                             -> DatumBlock<'blk, 'tcx, Expr>  {\n-    let scratch = rvalue_scratch_datum(bcx, closure_ty, \"__adjust\");\n-    let wrapper = get_wrapper_for_bare_fn(bcx.ccx(), closure_ty, def_id, fn_ptr, true);\n-    fill_fn_pair(bcx, scratch.val, wrapper, C_null(Type::i8p(bcx.ccx())));\n-\n-    DatumBlock::new(bcx, scratch.to_expr_datum())\n-}"}, {"sha": "7e47c8f3b959a277c5ef21856a0f2a7cf429201c", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643826150b502eddcc9b736e4320cb76ccedff8a/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643826150b502eddcc9b736e4320cb76ccedff8a/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=643826150b502eddcc9b736e4320cb76ccedff8a", "patch": "@@ -15,7 +15,7 @@ use llvm::{ConstFCmp, ConstICmp, SetLinkage, PrivateLinkage, ValueRef, Bool, Tru\n use llvm::{IntEQ, IntNE, IntUGT, IntUGE, IntULT, IntULE, IntSGT, IntSGE, IntSLT, IntSLE,\n            RealOEQ, RealOGT, RealOGE, RealOLT, RealOLE, RealONE};\n use middle::{const_eval, def};\n-use trans::{adt, closure, consts, debuginfo, expr, inline, machine};\n+use trans::{adt, consts, debuginfo, expr, inline, machine};\n use trans::base::{self, push_ctxt};\n use trans::common::*;\n use trans::type_::Type;"}, {"sha": "9221ae09df98aa7ad3f5ec174cc86ae605911785", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/643826150b502eddcc9b736e4320cb76ccedff8a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643826150b502eddcc9b736e4320cb76ccedff8a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=643826150b502eddcc9b736e4320cb76ccedff8a", "patch": "@@ -473,22 +473,6 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n         DatumBlock::new(bcx, scratch.to_expr_datum())\n     }\n-\n-    fn add_env<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                           def_id: ast::DefId,\n-                           expr: &ast::Expr,\n-                           datum: Datum<'tcx, Expr>)\n-                           -> DatumBlock<'blk, 'tcx, Expr> {\n-        // This is not the most efficient thing possible; since closures\n-        // are two words it'd be better if this were compiled in\n-        // 'dest' mode, but I can't find a nice way to structure the\n-        // code and keep it DRY that accommodates that use case at the\n-        // moment.\n-\n-        let closure_ty = expr_ty_adjusted(bcx, expr);\n-        let fn_ptr = datum.to_llscalarish(bcx);\n-        closure::make_closure_from_bare_fn(bcx, closure_ty, def_id, fn_ptr)\n-    }\n }\n \n /// Translates an expression in \"lvalue\" mode -- meaning that it returns a reference to the memory"}]}