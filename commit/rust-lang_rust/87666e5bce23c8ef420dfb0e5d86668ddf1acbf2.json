{"sha": "87666e5bce23c8ef420dfb0e5d86668ddf1acbf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjY2ZTViY2UyM2M4ZWY0MjBkZmIwZTVkODY2NjhkZGYxYWNiZjI=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-16T04:46:23Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-16T04:47:46Z"}, "message": "Prefer asm! over llvm_asm! in core", "tree": {"sha": "fb38f378afafe03e3222482d14297b8b29271f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb38f378afafe03e3222482d14297b8b29271f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87666e5bce23c8ef420dfb0e5d86668ddf1acbf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87666e5bce23c8ef420dfb0e5d86668ddf1acbf2", "html_url": "https://github.com/rust-lang/rust/commit/87666e5bce23c8ef420dfb0e5d86668ddf1acbf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87666e5bce23c8ef420dfb0e5d86668ddf1acbf2/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e4485a052857e5dd32ea29ceb7b1a8223e83cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e4485a052857e5dd32ea29ceb7b1a8223e83cc", "html_url": "https://github.com/rust-lang/rust/commit/f4e4485a052857e5dd32ea29ceb7b1a8223e83cc"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "929c22e4538f14a79de2efa617bd2635a1a11fe0", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87666e5bce23c8ef420dfb0e5d86668ddf1acbf2/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87666e5bce23c8ef420dfb0e5d86668ddf1acbf2/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=87666e5bce23c8ef420dfb0e5d86668ddf1acbf2", "patch": "@@ -111,7 +111,7 @@ pub fn spin_loop() {\n #[inline]\n #[unstable(feature = \"test\", issue = \"50297\")]\n #[allow(unreachable_code)] // this makes #[cfg] a bit easier below.\n-pub fn black_box<T>(dummy: T) -> T {\n+pub fn black_box<T>(mut dummy: T) -> T {\n     // We need to \"use\" the argument in some way LLVM can't introspect, and on\n     // targets that support it we can typically leverage inline assembly to do\n     // this. LLVM's interpretation of inline assembly is that it's, well, a black\n@@ -121,7 +121,8 @@ pub fn black_box<T>(dummy: T) -> T {\n     #[cfg(not(miri))] // This is just a hint, so it is fine to skip in Miri.\n     // SAFETY: the inline assembly is a no-op.\n     unsafe {\n-        llvm_asm!(\"\" : : \"r\"(&dummy));\n+        // FIXME: Cannot use `asm!` because it doesn't support MIPS and other architectures.\n+        llvm_asm!(\"\" : : \"r\"(&mut dummy));\n     }\n \n     dummy"}, {"sha": "a5fbdc6ee2d4802528349acde70af9ff94e994f3", "filename": "library/core/src/num/dec2flt/algorithm.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/87666e5bce23c8ef420dfb0e5d86668ddf1acbf2/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87666e5bce23c8ef420dfb0e5d86668ddf1acbf2/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=87666e5bce23c8ef420dfb0e5d86668ddf1acbf2", "patch": "@@ -60,12 +60,19 @@ mod fpu_precision {\n     fn set_cw(cw: u16) {\n         // SAFETY: the `fldcw` instruction has been audited to be able to work correctly with\n         // any `u16`\n-        unsafe { llvm_asm!(\"fldcw $0\" :: \"m\" (cw) :: \"volatile\") }\n+        unsafe {\n+            asm!(\n+                \"fldcw ({})\",\n+                in(reg) &cw,\n+                // FIXME: We are using ATT syntax to support LLVM 8 and LLVM 9.\n+                options(att_syntax, nostack),\n+            )\n+        }\n     }\n \n     /// Sets the precision field of the FPU to `T` and returns a `FPUControlWord`.\n     pub fn set_precision<T>() -> FPUControlWord {\n-        let cw = 0u16;\n+        let mut cw = 0_u16;\n \n         // Compute the value for the Precision Control field that is appropriate for `T`.\n         let cw_precision = match size_of::<T>() {\n@@ -78,7 +85,14 @@ mod fpu_precision {\n         // `FPUControlWord` structure is dropped\n         // SAFETY: the `fnstcw` instruction has been audited to be able to work correctly with\n         // any `u16`\n-        unsafe { llvm_asm!(\"fnstcw $0\" : \"=*m\" (&cw) ::: \"volatile\") }\n+        unsafe {\n+            asm!(\n+                \"fnstcw ({})\",\n+                in(reg) &mut cw,\n+                // FIXME: We are using ATT syntax to support LLVM 8 and LLVM 9.\n+                options(att_syntax, nostack),\n+            )\n+        }\n \n         // Set the control word to the desired precision. This is achieved by masking away the old\n         // precision (bits 8 and 9, 0x300) and replacing it with the precision flag computed above."}]}