{"sha": "62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYTFmNWRiYzBiYmNmODc1YjIxZGNlNjQzYWU4YjJhZTk3MWM3NGU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-20T07:34:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:07Z"}, "message": "hygiene: Remove some dead code", "tree": {"sha": "8989c0971a8ce0691f8d092b2d41f798cfaeb258", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8989c0971a8ce0691f8d092b2d41f798cfaeb258"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e", "html_url": "https://github.com/rust-lang/rust/commit/62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d4ebf01505877ff36ba63f8a26ea8ea0973969", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d4ebf01505877ff36ba63f8a26ea8ea0973969", "html_url": "https://github.com/rust-lang/rust/commit/f1d4ebf01505877ff36ba63f8a26ea8ea0973969"}], "stats": {"total": 28, "additions": 1, "deletions": 27}, "files": [{"sha": "f8318f54320e30ca7b70c6e1b00d6babd5c72014", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e", "patch": "@@ -31,7 +31,7 @@ use crate::edition::Edition;\n use crate::symbol::{kw, Symbol};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::fmt;\n \n@@ -130,32 +130,6 @@ impl Mark {\n         HygieneData::with(|data| data.is_descendant_of(self, data.outer(ctxt)))\n     }\n \n-    /// Computes a mark such that both input marks are descendants of (or equal to) the returned\n-    /// mark. That is, the following holds:\n-    ///\n-    /// ```rust\n-    /// let la = least_ancestor(a, b);\n-    /// assert!(a.is_descendant_of(la))\n-    /// assert!(b.is_descendant_of(la))\n-    /// ```\n-    pub fn least_ancestor(mut a: Mark, mut b: Mark) -> Mark {\n-        HygieneData::with(|data| {\n-            // Compute the path from a to the root\n-            let mut a_path = FxHashSet::<Mark>::default();\n-            while a != Mark::root() {\n-                a_path.insert(a);\n-                a = data.marks[a.0 as usize].parent;\n-            }\n-\n-            // While the path from b to the root hasn't intersected, move up the tree\n-            while !a_path.contains(&b) {\n-                b = data.marks[b.0 as usize].parent;\n-            }\n-\n-            b\n-        })\n-    }\n-\n     // Used for enabling some compatibility fallback in resolve.\n     #[inline]\n     pub fn looks_like_proc_macro_derive(self) -> bool {"}]}