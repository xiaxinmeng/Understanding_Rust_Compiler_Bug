{"sha": "5b4b035c7a041badcc656e3c403417f16d9a05f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNGIwMzVjN2EwNDFiYWRjYzY1NmUzYzQwMzQxN2YxNmQ5YTA1Zjg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-28T01:25:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-28T01:25:02Z"}, "message": "Start building up the expression tower.", "tree": {"sha": "0542532722a028e1bbdd7af88fea6fc6cc562f06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0542532722a028e1bbdd7af88fea6fc6cc562f06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b4b035c7a041badcc656e3c403417f16d9a05f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4b035c7a041badcc656e3c403417f16d9a05f8", "html_url": "https://github.com/rust-lang/rust/commit/5b4b035c7a041badcc656e3c403417f16d9a05f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b4b035c7a041badcc656e3c403417f16d9a05f8/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5787ed80c2a364754415d0ab0ea6668543938ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5787ed80c2a364754415d0ab0ea6668543938ce", "html_url": "https://github.com/rust-lang/rust/commit/f5787ed80c2a364754415d0ab0ea6668543938ce"}], "stats": {"total": 112, "additions": 92, "deletions": 20}, "files": [{"sha": "d4e8aaaf752fd23c1158e4302d7f918c865da5e8", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5b4b035c7a041badcc656e3c403417f16d9a05f8/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4b035c7a041badcc656e3c403417f16d9a05f8/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=5b4b035c7a041badcc656e3c403417f16d9a05f8", "patch": "@@ -9,14 +9,41 @@ type crate = rec(_mod module);\n \n type block = vec[@stmt];\n \n+tag binop {\n+    plus;\n+    minus;\n+    star;\n+    slash;\n+    percent;\n+    caret;\n+    bitand;\n+    bitor;\n+    lsl;\n+    lsr;\n+    asr;\n+    eq;\n+    lt;\n+    le;\n+    ne;\n+    ge;\n+    gt;\n+}\n+\n+tag unop {\n+    bitnot;\n+    not;\n+    neg;\n+    deref;\n+    cast(@ty);\n+}\n+\n tag stmt {\n     stmt_block(block);\n     stmt_decl(@decl);\n-    stmt_ret(option[@lval]);\n-    stmt_log(@atom);\n+    stmt_ret(option[@expr]);\n+    stmt_log(@expr);\n }\n \n-\n tag decl {\n     decl_local(ident, option[ty]);\n     decl_item(ident, @item);\n@@ -25,15 +52,23 @@ tag decl {\n tag lval {\n     lval_ident(ident);\n     lval_ext(@lval, ident);\n-    lval_idx(@lval, @atom);\n+    lval_idx(@lval, @expr);\n }\n \n-tag atom {\n-    atom_lit(@lit);\n-    atom_lval(@lval);\n+tag expr {\n+    expr_box(@expr);\n+    expr_vec(vec[@expr]);\n+    expr_tup(vec[@expr]);\n+    expr_rec(vec[tup(ident,@expr)]);\n+    expr_call(@expr, vec[@expr]);\n+    expr_binary(binop, @expr, @expr);\n+    expr_unary(unop, @expr);\n+    expr_lit(@lit);\n+    expr_lval(@lval);\n }\n \n tag lit {\n+    lit_str(str);\n     lit_char(char);\n     lit_int(int);\n     lit_uint(uint);"}, {"sha": "0dc4e50e6831532a9ef3cd4ece841d90a8441704", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5b4b035c7a041badcc656e3c403417f16d9a05f8/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4b035c7a041badcc656e3c403417f16d9a05f8/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=5b4b035c7a041badcc656e3c403417f16d9a05f8", "patch": "@@ -132,40 +132,77 @@ state fn parse_seq[T](token.token bra,\n     ret v;\n }\n \n-state fn parse_lit(parser p) -> ast.lit {\n+state fn parse_lit(parser p) -> @ast.lit {\n     alt (p.peek()) {\n         case (token.LIT_INT(?i)) {\n             p.bump();\n-            ret ast.lit_int(i);\n+            ret @ast.lit_int(i);\n         }\n         case (token.LIT_UINT(?u)) {\n             p.bump();\n-            ret ast.lit_uint(u);\n+            ret @ast.lit_uint(u);\n         }\n         case (token.LIT_CHAR(?c)) {\n             p.bump();\n-            ret ast.lit_char(c);\n+            ret @ast.lit_char(c);\n         }\n         case (token.LIT_BOOL(?b)) {\n             p.bump();\n-            ret ast.lit_bool(b);\n+            ret @ast.lit_bool(b);\n         }\n     }\n     p.err(\"expected literal\");\n     fail;\n }\n \n-state fn parse_atom(parser p) -> ast.atom {\n-    ret ast.atom_lit(@parse_lit(p));\n+\n+\n+state fn parse_bottom_expr(parser p) -> @ast.expr {\n+    alt (p.peek()) {\n+        case (token.LPAREN) {\n+            p.bump();\n+            auto e = parse_expr(p);\n+            expect(p, token.RPAREN);\n+            ret e;\n+        }\n+\n+        case (_) {\n+            ret @ast.expr_lit(parse_lit(p));\n+        }\n+    }\n+}\n+\n+\n+state fn parse_negation_expr(parser p) -> @ast.expr {\n+    alt (p.peek()) {\n+\n+        case (token.NOT) {\n+            auto e = parse_negation_expr(p);\n+            ret @ast.expr_unary(ast.not, e);\n+        }\n+\n+        case (token.TILDE) {\n+            auto e = parse_negation_expr(p);\n+            ret @ast.expr_unary(ast.bitnot, e);\n+        }\n+\n+        case (_) {\n+            ret parse_bottom_expr(p);\n+        }\n+    }\n+}\n+\n+state fn parse_expr(parser p) -> @ast.expr {\n+    ret parse_negation_expr(p);\n }\n \n state fn parse_stmt(parser p) -> @ast.stmt {\n     alt (p.peek()) {\n         case (token.LOG) {\n             p.bump();\n-            auto a = @parse_atom(p);\n+            auto e = parse_expr(p);\n             expect(p, token.SEMI);\n-            ret @ast.stmt_log(a);\n+            ret @ast.stmt_log(e);\n         }\n     }\n     p.err(\"expected statement\");"}, {"sha": "b9b3f4d20d0de58d1dfdea9f2035d7ba4e3862a1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b4b035c7a041badcc656e3c403417f16d9a05f8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4b035c7a041badcc656e3c403417f16d9a05f8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5b4b035c7a041badcc656e3c403417f16d9a05f8", "patch": "@@ -202,9 +202,9 @@ fn trans_upcall(@block_ctxt cx, str name, vec[ValueRef] args) -> ValueRef {\n     ret cx.build.Call(llglue, call_args);\n }\n \n-fn trans_log(@block_ctxt cx, &ast.atom a) {\n-    alt (a) {\n-        case (ast.atom_lit(?lit)) {\n+fn trans_log(@block_ctxt cx, &ast.expr e) {\n+    alt (e) {\n+        case (ast.expr_lit(?lit)) {\n             alt (*lit) {\n                 case (ast.lit_int(?i)) {\n                     trans_upcall(cx, \"upcall_log_int\", vec(C_int(i)));\n@@ -215,7 +215,7 @@ fn trans_log(@block_ctxt cx, &ast.atom a) {\n             }\n         }\n         case (_) {\n-            cx.fcx.tcx.sess.unimpl(\"atom variant in trans_log\");\n+            cx.fcx.tcx.sess.unimpl(\"expr variant in trans_log\");\n         }\n     }\n }"}]}