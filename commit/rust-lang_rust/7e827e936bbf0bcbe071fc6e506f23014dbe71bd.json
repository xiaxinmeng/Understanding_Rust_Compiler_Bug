{"sha": "7e827e936bbf0bcbe071fc6e506f23014dbe71bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlODI3ZTkzNmJiZjBiY2JlMDcxZmM2ZTUwNmYyMzAxNGRiZTcxYmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-05-11T00:28:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-11T00:28:04Z"}, "message": "Rollup merge of #84783 - jyn514:fmt-one, r=Mark-Simulacrum\n\nAllow formatting specific subdirectories\n\nFixes https://github.com/rust-lang/rust/issues/71094.", "tree": {"sha": "3c1ad0a589fd50bf1478612eb608703cf6958cc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c1ad0a589fd50bf1478612eb608703cf6958cc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e827e936bbf0bcbe071fc6e506f23014dbe71bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgmc+UCRBK7hj4Ov3rIwAAVl0IAIKLQ7NnId8NtUlDKcreiyYc\n9lVbHK6F+9PlcLIrOaVDFS+JoiFayBZ4P14ZhXh2p+YR+Jb3I6qOXVj58DLdxLOm\nrT+BiOAASDVHK5aF13urtM8uZMoTjclX06rtjuT+BG2Eeh0eBsfumSrKdaWkjexM\n/0raGxn7NjjjOU2uGRdGPjYC/6wKk7eE3zuy8wM/LyaFp5kM2WfiTs5JSO7lDx3Q\nv7HP1Ba0oYpQ0sYVdVYQaQNl/h9ihxXATZ4vFsf05Uga8TzKBX9UE/9qlX7PLvw4\n27faLMbwuNMOheTicpTEKa5ZNBZ+aupfdvvw6QGkoc+rJz+ZT+DTcsX00See0R8=\n=SNLf\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c1ad0a589fd50bf1478612eb608703cf6958cc4\nparent 5fc898782c3a5290ac1f8b8be025b0a73f33186e\nparent dadcb0550d41c343988310ee1946d8dd8f477008\nauthor Yuki Okushi <jtitor@2k36.org> 1620692884 +0900\ncommitter GitHub <noreply@github.com> 1620692884 +0900\n\nRollup merge of #84783 - jyn514:fmt-one, r=Mark-Simulacrum\n\nAllow formatting specific subdirectories\n\nFixes https://github.com/rust-lang/rust/issues/71094.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e827e936bbf0bcbe071fc6e506f23014dbe71bd", "html_url": "https://github.com/rust-lang/rust/commit/7e827e936bbf0bcbe071fc6e506f23014dbe71bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e827e936bbf0bcbe071fc6e506f23014dbe71bd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fc898782c3a5290ac1f8b8be025b0a73f33186e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc898782c3a5290ac1f8b8be025b0a73f33186e", "html_url": "https://github.com/rust-lang/rust/commit/5fc898782c3a5290ac1f8b8be025b0a73f33186e"}, {"sha": "dadcb0550d41c343988310ee1946d8dd8f477008", "url": "https://api.github.com/repos/rust-lang/rust/commits/dadcb0550d41c343988310ee1946d8dd8f477008", "html_url": "https://github.com/rust-lang/rust/commit/dadcb0550d41c343988310ee1946d8dd8f477008"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "80a60c79edfe4c0801e54eb59a6fd2ce8d3e8d5c", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e827e936bbf0bcbe071fc6e506f23014dbe71bd/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e827e936bbf0bcbe071fc6e506f23014dbe71bd/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=7e827e936bbf0bcbe071fc6e506f23014dbe71bd", "patch": "@@ -91,6 +91,7 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Format {\n+        paths: Vec<PathBuf>,\n         check: bool,\n     },\n     Doc {\n@@ -581,7 +582,7 @@ Arguments:\n \n                 Subcommand::Clean { all: matches.opt_present(\"all\") }\n             }\n-            \"fmt\" => Subcommand::Format { check: matches.opt_present(\"check\") },\n+            \"fmt\" => Subcommand::Format { check: matches.opt_present(\"check\"), paths },\n             \"dist\" => Subcommand::Dist { paths },\n             \"install\" => Subcommand::Install { paths },\n             \"run\" | \"r\" => {"}, {"sha": "2408344487bb1f8044b9d601bd8047dcf0e7f661", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e827e936bbf0bcbe071fc6e506f23014dbe71bd/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e827e936bbf0bcbe071fc6e506f23014dbe71bd/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=7e827e936bbf0bcbe071fc6e506f23014dbe71bd", "patch": "@@ -42,7 +42,7 @@ struct RustfmtConfig {\n     ignore: Vec<String>,\n }\n \n-pub fn format(build: &Build, check: bool) {\n+pub fn format(build: &Build, check: bool, paths: &[PathBuf]) {\n     if build.config.dry_run {\n         return;\n     }\n@@ -118,8 +118,19 @@ pub fn format(build: &Build, check: bool) {\n         .to_path_buf();\n     let src = build.src.clone();\n     let (tx, rx): (SyncSender<PathBuf>, _) = std::sync::mpsc::sync_channel(128);\n-    let walker =\n-        WalkBuilder::new(src.clone()).types(matcher).overrides(ignore_fmt).build_parallel();\n+    let walker = match paths.get(0) {\n+        Some(first) => {\n+            let mut walker = WalkBuilder::new(first);\n+            for path in &paths[1..] {\n+                walker.add(path);\n+            }\n+            walker\n+        }\n+        None => WalkBuilder::new(src.clone()),\n+    }\n+    .types(matcher)\n+    .overrides(ignore_fmt)\n+    .build_parallel();\n \n     // there is a lot of blocking involved in spawning a child process and reading files to format.\n     // spawn more processes than available concurrency to keep the CPU busy"}, {"sha": "2960dd3df6bf48b81a98cbd0ee8c80e42a6176f2", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e827e936bbf0bcbe071fc6e506f23014dbe71bd/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e827e936bbf0bcbe071fc6e506f23014dbe71bd/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7e827e936bbf0bcbe071fc6e506f23014dbe71bd", "patch": "@@ -478,8 +478,8 @@ impl Build {\n             job::setup(self);\n         }\n \n-        if let Subcommand::Format { check } = self.config.cmd {\n-            return format::format(self, check);\n+        if let Subcommand::Format { check, paths } = &self.config.cmd {\n+            return format::format(self, *check, &paths);\n         }\n \n         if let Subcommand::Clean { all } = self.config.cmd {"}, {"sha": "78163651158ed3452bb5d42640722a55787e5a06", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e827e936bbf0bcbe071fc6e506f23014dbe71bd/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e827e936bbf0bcbe071fc6e506f23014dbe71bd/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7e827e936bbf0bcbe071fc6e506f23014dbe71bd", "patch": "@@ -889,7 +889,7 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n                 );\n                 std::process::exit(1);\n             }\n-            crate::format::format(&builder.build, !builder.config.cmd.bless());\n+            crate::format::format(&builder.build, !builder.config.cmd.bless(), &[]);\n         }\n     }\n "}]}