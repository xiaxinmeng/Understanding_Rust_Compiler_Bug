{"sha": "f4d00fe78550eac378594a9c0d0708a6c871f337", "node_id": "C_kwDOAAsO6NoAKGY0ZDAwZmU3ODU1MGVhYzM3ODU5NGE5YzBkMDcwOGE2Yzg3MWYzMzc", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-28T12:38:15Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-28T17:28:30Z"}, "message": "Remove `Const::from_value`\n\n...it's just `mk_const` but without the sparcles", "tree": {"sha": "264e545c947dd8efed6735f62c951785ff9322bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/264e545c947dd8efed6735f62c951785ff9322bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4d00fe78550eac378594a9c0d0708a6c871f337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4d00fe78550eac378594a9c0d0708a6c871f337", "html_url": "https://github.com/rust-lang/rust/commit/f4d00fe78550eac378594a9c0d0708a6c871f337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4d00fe78550eac378594a9c0d0708a6c871f337/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26b87bf8ff8406e80e70559b71cf0095475cc64a", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b87bf8ff8406e80e70559b71cf0095475cc64a", "html_url": "https://github.com/rust-lang/rust/commit/26b87bf8ff8406e80e70559b71cf0095475cc64a"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "2bcb47cc38399f85b07436e792a707f3ab68bf1f", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=f4d00fe78550eac378594a9c0d0708a6c871f337", "patch": "@@ -1580,7 +1580,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         span: Option<Span>,\n     ) -> Result<ty::Const<'tcx>, ErrorHandled> {\n         match self.const_eval_resolve(param_env, unevaluated, span) {\n-            Ok(Some(val)) => Ok(ty::Const::from_value(self.tcx, val, ty)),\n+            Ok(Some(val)) => Ok(self.tcx.mk_const(val, ty)),\n             Ok(None) => {\n                 let tcx = self.tcx;\n                 let def_id = unevaluated.def.did;"}, {"sha": "eaeb08c7aed403d837e4e850567e088d0c82d6c9", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=f4d00fe78550eac378594a9c0d0708a6c871f337", "patch": "@@ -140,12 +140,6 @@ impl<'tcx> Const<'tcx> {\n         }\n     }\n \n-    /// Interns the given value as a constant.\n-    #[inline]\n-    pub fn from_value(tcx: TyCtxt<'tcx>, val: ty::ValTree<'tcx>, ty: Ty<'tcx>) -> Self {\n-        tcx.mk_const(val, ty)\n-    }\n-\n     /// Panics if self.kind != ty::ConstKind::Value\n     pub fn to_valtree(self) -> ty::ValTree<'tcx> {\n         match self.kind() {\n@@ -156,7 +150,7 @@ impl<'tcx> Const<'tcx> {\n \n     pub fn from_scalar_int(tcx: TyCtxt<'tcx>, i: ScalarInt, ty: Ty<'tcx>) -> Self {\n         let valtree = ty::ValTree::from_scalar_int(i);\n-        Self::from_value(tcx, valtree, ty)\n+        tcx.mk_const(valtree, ty)\n     }\n \n     #[inline]\n@@ -172,8 +166,7 @@ impl<'tcx> Const<'tcx> {\n     #[inline]\n     /// Creates an interned zst constant.\n     pub fn zero_sized(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Self {\n-        let valtree = ty::ValTree::zst();\n-        Self::from_value(tcx, valtree, ty)\n+        tcx.mk_const(ty::ValTree::zst(), ty)\n     }\n \n     #[inline]\n@@ -220,7 +213,7 @@ impl<'tcx> Const<'tcx> {\n     pub fn eval(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Const<'tcx> {\n         if let Some(val) = self.kind().try_eval_for_typeck(tcx, param_env) {\n             match val {\n-                Ok(val) => Const::from_value(tcx, val, self.ty()),\n+                Ok(val) => tcx.mk_const(val, self.ty()),\n                 Err(guar) => tcx.const_error_with_guaranteed(self.ty(), guar),\n             }\n         } else {"}, {"sha": "5303341ba443c6c285fc170b96aa81535641b3ad", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f4d00fe78550eac378594a9c0d0708a6c871f337", "patch": "@@ -1468,8 +1468,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             // Aggregates, printed as array/tuple/struct/variant construction syntax.\n             (ty::ValTree::Branch(_), ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) => {\n-                let contents =\n-                    self.tcx().destructure_const(ty::Const::from_value(self.tcx(), valtree, ty));\n+                let contents = self.tcx().destructure_const(self.tcx().mk_const(valtree, ty));\n                 let fields = contents.fields.iter().copied();\n                 match *ty.kind() {\n                     ty::Array(..) => {"}, {"sha": "a9ed945d4a15a9b3356653fb623d40ed6b0ed6d5", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=f4d00fe78550eac378594a9c0d0708a6c871f337", "patch": "@@ -61,5 +61,5 @@ pub(crate) fn lit_to_const<'tcx>(\n         _ => return Err(LitToConstError::TypeError),\n     };\n \n-    Ok(ty::Const::from_value(tcx, valtree, ty))\n+    Ok(tcx.mk_const(valtree, ty))\n }"}, {"sha": "8e04da4f9be2479aa584270611a9607279b495d8", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=f4d00fe78550eac378594a9c0d0708a6c871f337", "patch": "@@ -799,9 +799,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                 unevaluated,\n                                 Some(obligation.cause.span),\n                             ) {\n-                                Ok(Some(valtree)) => {\n-                                    Ok(ty::Const::from_value(selcx.tcx(), valtree, c.ty()))\n-                                }\n+                                Ok(Some(valtree)) => Ok(selcx.tcx().mk_const(valtree, c.ty())),\n                                 Ok(None) => {\n                                     let tcx = self.tcx;\n                                     let def_id = unevaluated.def.did;"}, {"sha": "f8ff31f971be66756353fd39b2f8805ff4c028f6", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d00fe78550eac378594a9c0d0708a6c871f337/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=f4d00fe78550eac378594a9c0d0708a6c871f337", "patch": "@@ -125,11 +125,11 @@ fn recurse_build<'tcx>(\n         }\n         &ExprKind::NonHirLiteral { lit, user_ty: _ } => {\n             let val = ty::ValTree::from_scalar_int(lit);\n-            ty::Const::from_value(tcx, val, node.ty)\n+            tcx.mk_const(val, node.ty)\n         }\n         &ExprKind::ZstLiteral { user_ty: _ } => {\n             let val = ty::ValTree::zst();\n-            ty::Const::from_value(tcx, val, node.ty)\n+            tcx.mk_const(val, node.ty)\n         }\n         &ExprKind::NamedConst { def_id, substs, user_ty: _ } => {\n             let uneval = ty::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);"}]}