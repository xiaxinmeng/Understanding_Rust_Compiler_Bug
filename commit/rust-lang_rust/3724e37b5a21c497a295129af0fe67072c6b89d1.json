{"sha": "3724e37b5a21c497a295129af0fe67072c6b89d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MjRlMzdiNWEyMWM0OTdhMjk1MTI5YWYwZmU2NzA3MmM2Yjg5ZDE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-01T05:49:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-01T05:50:51Z"}, "message": "Remove special treatment for `_intern_canonical_var_infos`.\n\nThis is a leftover from when there were global and thread-local arenas.", "tree": {"sha": "f0ef1f1971ac5e83f6d5a5d8f0b8e400bcf96b37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ef1f1971ac5e83f6d5a5d8f0b8e400bcf96b37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3724e37b5a21c497a295129af0fe67072c6b89d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3724e37b5a21c497a295129af0fe67072c6b89d1", "html_url": "https://github.com/rust-lang/rust/commit/3724e37b5a21c497a295129af0fe67072c6b89d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3724e37b5a21c497a295129af0fe67072c6b89d1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9d54e1860d1d246382ef222386f3b58e6e10e56", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d54e1860d1d246382ef222386f3b58e6e10e56", "html_url": "https://github.com/rust-lang/rust/commit/e9d54e1860d1d246382ef222386f3b58e6e10e56"}], "stats": {"total": 15, "additions": 1, "deletions": 14}, "files": [{"sha": "7012d34479d5921bdbdb9ac37c94dc03f022c121", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3724e37b5a21c497a295129af0fe67072c6b89d1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3724e37b5a21c497a295129af0fe67072c6b89d1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3724e37b5a21c497a295129af0fe67072c6b89d1", "patch": "@@ -2217,27 +2217,14 @@ macro_rules! slice_interners {\n slice_interners!(\n     type_list: _intern_type_list(Ty<'tcx>),\n     substs: _intern_substs(GenericArg<'tcx>),\n+    canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo),\n     existential_predicates: _intern_existential_predicates(ExistentialPredicate<'tcx>),\n     predicates: _intern_predicates(Predicate<'tcx>),\n     clauses: _intern_clauses(Clause<'tcx>),\n     goal_list: _intern_goals(Goal<'tcx>),\n     projs: _intern_projs(ProjectionKind)\n );\n \n-// This isn't a perfect fit: `CanonicalVarInfo` slices are always\n-// allocated in the global arena, so this `intern_method!` macro is\n-// overly general. However, we just return `false` for the code that checks\n-// whether they belong in the thread-local arena, so no harm done, and\n-// seems better than open-coding the rest.\n-intern_method! {\n-    'tcx,\n-    canonical_var_infos: _intern_canonical_var_infos(\n-        &[CanonicalVarInfo],\n-        |a, v| List::from_arena(a, v),\n-        Deref::deref\n-    ) -> List<CanonicalVarInfo>\n-}\n-\n impl<'tcx> TyCtxt<'tcx> {\n     /// Given a `fn` type, returns an equivalent `unsafe fn` type;\n     /// that is, a `fn` type that is equivalent in every way for being"}]}