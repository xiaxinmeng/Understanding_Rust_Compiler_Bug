{"sha": "936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNmZhNmY2N2ZiOWI5MWM3OGQ4ZTdlYjNmZGEzOGQ3Njc5MGY0ZDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-04T07:26:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-04T07:26:30Z"}, "message": "generalize the Deref case and simplify the code", "tree": {"sha": "4cb01fd618d31dcc1b85087833717d6bdafa180e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cb01fd618d31dcc1b85087833717d6bdafa180e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3", "html_url": "https://github.com/rust-lang/rust/commit/936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7d8d651d5c061242d07b908e0dbcff459b9d7ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d8d651d5c061242d07b908e0dbcff459b9d7ac", "html_url": "https://github.com/rust-lang/rust/commit/e7d8d651d5c061242d07b908e0dbcff459b9d7ac"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "40bb810b4a773da1bbcefc8315ce5de60c559233", "filename": "src/librustc_mir/borrow_check/nll/escaping_locals.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs?ref=936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3", "patch": "@@ -44,7 +44,7 @@\n \n use rustc::mir::visit::Visitor;\n use rustc::mir::*;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::TyCtxt;\n \n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::unify as ut;\n@@ -178,20 +178,29 @@ impl Visitor<'tcx> for GatherAssignedLocalsVisitor<'_, '_, 'tcx> {\n         match rvalue {\n             Rvalue::Use(op) => self.union_locals_if_needed(local, find_local_in_operand(op)),\n             Rvalue::Ref(_, _, place) => {\n-                // Special case: if you have `X = &*Y` where `Y` is a\n-                // reference, then the outlives relationships should\n-                // ensure that all regions in `Y` are constrained by\n-                // regions in `X`.\n-                if let Place::Projection(proj) = place {\n+                // Special case: if you have `X = &*Y` (or `X = &**Y`\n+                // etc), then the outlives relationships will ensure\n+                // that all regions in `Y` are constrained by regions\n+                // in `X` -- this is because the lifetimes of the\n+                // references we deref through are required to outlive\n+                // the borrow lifetime (which appears in `X`).\n+                //\n+                // (We don't actually need to check the type of `Y`:\n+                // since `ProjectionElem::Deref` represents a built-in\n+                // deref and not an overloaded deref, if the thing we\n+                // deref through is not a reference, then it must be a\n+                // `Box` or `*const`, in which case it contains no\n+                // references.)\n+                let mut place_ref = place;\n+                while let Place::Projection(proj) = place_ref {\n                     if let ProjectionElem::Deref = proj.elem {\n-                        if let ty::TyRef(..) = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx).sty\n-                        {\n-                            self.union_locals_if_needed(local, find_local_in_place(&proj.base));\n-                        }\n+                        place_ref = &proj.base;\n+                    } else {\n+                        break;\n                     }\n                 }\n \n-                self.union_locals_if_needed(local, find_local_in_place(place))\n+                self.union_locals_if_needed(local, find_local_in_place(place_ref))\n             }\n \n             Rvalue::Cast(kind, op, _) => match kind {"}]}