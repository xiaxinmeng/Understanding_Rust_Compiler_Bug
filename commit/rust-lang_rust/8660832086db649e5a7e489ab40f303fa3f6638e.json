{"sha": "8660832086db649e5a7e489ab40f303fa3f6638e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjA4MzIwODZkYjY0OWU1YTdlNDg5YWI0MGYzMDNmYTNmNjYzOGU=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-25T11:53:16Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-27T05:07:37Z"}, "message": "Introduce `~const`\n\n - [x] Removed `?const` and change uses of `?const`\n - [x] Added `~const` to the AST. It is gated behind const_trait_impl.\n - [x] Validate `~const` in ast_validation.\n - [ ] Add enum `BoundConstness` to the HIR. (With variants `NotConst` and\n `ConstIfConst` allowing future extensions)\n - [ ] Adjust trait selection and pre-existing code to use `BoundConstness`.\n - [ ] Optional steps (*for this PR, obviously*)\n      - [ ] Fix #88155\n      - [ ] Do something with constness bounds in chalk", "tree": {"sha": "201438bbce2de0c0d18e4d097b110c2fb2a67c9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/201438bbce2de0c0d18e4d097b110c2fb2a67c9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8660832086db649e5a7e489ab40f303fa3f6638e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEocxkACgkQAn35M4hi\nrd0SiQ/9HodyhO7ROD/+b0CxqssTrIds0CUasrLxnda4vGfmyZARXpqEk+c7DQBT\nk9vN3cQta5zt6fgrV1QWQeYKkVgVEpiZsZttpRAGyNImakCYVsuHmBS0dF8ydN9I\n3+r4ga+F+ZLD8PFDHSWm/qMiiOuW7alb2ZrM7q3nMaQCr2j/i1dq+KuzVB6nl6al\n39vgNtbkZ1/5UHWTGSwcyFrgtojJieSat+5XxLWQXGZKhFBTWi5yV7213LCKBY6W\n2tx2bkJqe49iDdbF0NJGKKk6jrkucksVPWhXbfNrNUB1z5OriR6uvfd0pMaGB0/u\nzLMb86/Gnv3+AiVmknZW8/ML3oHGhTUGP/nAWJRoF5yILjG+yyVcXQZNxR1G1BQD\nGmlvzcRU7AX2OfwJwZyGDSZabX71pPG/F6aI+Nsnwjo1Nbu6l9f14BpcDJ9TH+c8\nAjIgvZllu8yM9QP6FfFkl+Yn9XxAd+5XOqzoeOcbe1Xs9VNgwM8C3mbVWJEwSjn1\nalBn6ADdaaRXtCPwl58FAoORRcEfEnrZrZSOEnV4gPXx5Ys++ZAHw4ibL3kQ2x1k\nc+7Z4SFs/mRTfOEm1QcjJili9xf9V8vKw5nfn0c80ABvQGwdihzpOma3+5Qk87Mz\nt3rcwIFvJLBUcZSJV/w74KBoY7FR6kZqsIacCe4hulqBssbWXVI=\n=1OHH\n-----END PGP SIGNATURE-----", "payload": "tree 201438bbce2de0c0d18e4d097b110c2fb2a67c9e\nparent d5cd3205fd6c0817fd46c036d0f3194b7deaca93\nauthor Deadbeef <ent3rm4n@gmail.com> 1629892396 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1630040857 +0000\n\nIntroduce `~const`\n\n - [x] Removed `?const` and change uses of `?const`\n - [x] Added `~const` to the AST. It is gated behind const_trait_impl.\n - [x] Validate `~const` in ast_validation.\n - [ ] Add enum `BoundConstness` to the HIR. (With variants `NotConst` and\n `ConstIfConst` allowing future extensions)\n - [ ] Adjust trait selection and pre-existing code to use `BoundConstness`.\n - [ ] Optional steps (*for this PR, obviously*)\n      - [ ] Fix #88155\n      - [ ] Do something with constness bounds in chalk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8660832086db649e5a7e489ab40f303fa3f6638e", "html_url": "https://github.com/rust-lang/rust/commit/8660832086db649e5a7e489ab40f303fa3f6638e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8660832086db649e5a7e489ab40f303fa3f6638e/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5cd3205fd6c0817fd46c036d0f3194b7deaca93", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5cd3205fd6c0817fd46c036d0f3194b7deaca93", "html_url": "https://github.com/rust-lang/rust/commit/d5cd3205fd6c0817fd46c036d0f3194b7deaca93"}], "stats": {"total": 303, "additions": 178, "deletions": 125}, "files": [{"sha": "2b86128b3f793b4545426a0257eb8cd39b012b9b", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -284,7 +284,7 @@ impl ParenthesizedArgs {\n \n pub use crate::node_id::{NodeId, CRATE_NODE_ID, DUMMY_NODE_ID};\n \n-/// A modifier on a bound, e.g., `?Sized` or `?const Trait`.\n+/// A modifier on a bound, e.g., `?Sized` or `~const Trait`.\n ///\n /// Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug)]\n@@ -295,10 +295,10 @@ pub enum TraitBoundModifier {\n     /// `?Trait`\n     Maybe,\n \n-    /// `?const Trait`\n+    /// `~const Trait`\n     MaybeConst,\n \n-    /// `?const ?Trait`\n+    /// `~const ?Trait`\n     //\n     // This parses but will be rejected during AST validation.\n     MaybeConstMaybe,"}, {"sha": "948d74e3bf8ebd307fd25dac4389945aa9b5a198", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -1414,7 +1414,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                     ref ty,\n                                     TraitBoundModifier::None | TraitBoundModifier::MaybeConst,\n                                 ) => Some(this.lower_poly_trait_ref(ty, itctx.reborrow())),\n-                                // `?const ?Bound` will cause an error during AST validation\n+                                // `~const ?Bound` will cause an error during AST validation\n                                 // anyways, so treat it like `?Bound` as compilation proceeds.\n                                 GenericBound::Trait(\n                                     _,"}, {"sha": "2658971ecb0e86111423d399fbcd15199ac543f8", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 100, "deletions": 52, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -17,10 +17,11 @@ use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n-use rustc_session::Session;\n+use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n+use std::convert::TryInto;\n use std::mem;\n use std::ops::DerefMut;\n \n@@ -33,24 +34,6 @@ enum SelfSemantic {\n     No,\n }\n \n-/// A syntactic context that disallows certain kinds of bounds (e.g., `?Trait` or `?const Trait`).\n-#[derive(Clone, Copy)]\n-enum BoundContext {\n-    ImplTrait,\n-    TraitBounds,\n-    TraitObject,\n-}\n-\n-impl BoundContext {\n-    fn description(&self) -> &'static str {\n-        match self {\n-            Self::ImplTrait => \"`impl Trait`\",\n-            Self::TraitBounds => \"supertraits\",\n-            Self::TraitObject => \"trait objects\",\n-        }\n-    }\n-}\n-\n struct AstValidator<'a> {\n     session: &'a Session,\n \n@@ -60,18 +43,16 @@ struct AstValidator<'a> {\n     /// Are we inside a trait impl?\n     in_trait_impl: bool,\n \n+    in_const_trait_impl: bool,\n+\n     has_proc_macro_decls: bool,\n \n     /// Used to ban nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n     /// Nested `impl Trait` _is_ allowed in associated type position,\n     /// e.g., `impl Iterator<Item = impl Debug>`.\n     outer_impl_trait: Option<Span>,\n \n-    /// Keeps track of the `BoundContext` as we recurse.\n-    ///\n-    /// This is used to forbid `?const Trait` bounds in, e.g.,\n-    /// `impl Iterator<Item = Box<dyn ?const Trait>`.\n-    bound_context: Option<BoundContext>,\n+    is_tilde_const_allowed: bool,\n \n     /// Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n     /// or `Foo::Bar<impl Trait>`\n@@ -88,10 +69,18 @@ struct AstValidator<'a> {\n }\n \n impl<'a> AstValidator<'a> {\n-    fn with_in_trait_impl(&mut self, is_in: bool, f: impl FnOnce(&mut Self)) {\n+    fn with_in_trait_impl(\n+        &mut self,\n+        is_in: bool,\n+        constness: Option<Const>,\n+        f: impl FnOnce(&mut Self),\n+    ) {\n         let old = mem::replace(&mut self.in_trait_impl, is_in);\n+        let old_const =\n+            mem::replace(&mut self.in_const_trait_impl, matches!(constness, Some(Const::Yes(_))));\n         f(self);\n         self.in_trait_impl = old;\n+        self.in_const_trait_impl = old_const;\n     }\n \n     fn with_banned_impl_trait(&mut self, f: impl FnOnce(&mut Self)) {\n@@ -100,6 +89,18 @@ impl<'a> AstValidator<'a> {\n         self.is_impl_trait_banned = old;\n     }\n \n+    fn with_tilde_const_allowed(&mut self, f: impl FnOnce(&mut Self)) {\n+        let old = mem::replace(&mut self.is_tilde_const_allowed, true);\n+        f(self);\n+        self.is_tilde_const_allowed = old;\n+    }\n+\n+    fn with_banned_tilde_const(&mut self, f: impl FnOnce(&mut Self)) {\n+        let old = mem::replace(&mut self.is_tilde_const_allowed, false);\n+        f(self);\n+        self.is_tilde_const_allowed = old;\n+    }\n+\n     fn with_let_allowed(&mut self, allowed: bool, f: impl FnOnce(&mut Self, bool)) {\n         let old = mem::replace(&mut self.is_let_allowed, allowed);\n         f(self, old);\n@@ -130,19 +131,13 @@ impl<'a> AstValidator<'a> {\n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n         if outer.is_some() {\n-            self.with_bound_context(BoundContext::ImplTrait, |this| f(this));\n+            self.with_banned_tilde_const(f);\n         } else {\n-            f(self)\n+            f(self);\n         }\n         self.outer_impl_trait = old;\n     }\n \n-    fn with_bound_context(&mut self, ctx: BoundContext, f: impl FnOnce(&mut Self)) {\n-        let old = self.bound_context.replace(ctx);\n-        f(self);\n-        self.bound_context = old;\n-    }\n-\n     fn visit_assoc_ty_constraint_from_generic_args(&mut self, constraint: &'a AssocTyConstraint) {\n         match constraint.kind {\n             AssocTyConstraintKind::Equality { .. } => {}\n@@ -164,9 +159,7 @@ impl<'a> AstValidator<'a> {\n             TyKind::ImplTrait(..) => {\n                 self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t))\n             }\n-            TyKind::TraitObject(..) => {\n-                self.with_bound_context(BoundContext::TraitObject, |this| visit::walk_ty(this, t));\n-            }\n+            TyKind::TraitObject(..) => self.with_banned_tilde_const(|this| visit::walk_ty(this, t)),\n             TyKind::Path(ref qself, ref path) => {\n                 // We allow these:\n                 //  - `Option<impl Trait>`\n@@ -1083,13 +1076,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 unsafety,\n                 polarity,\n                 defaultness: _,\n-                constness: _,\n-                generics: _,\n+                constness,\n+                ref generics,\n                 of_trait: Some(ref t),\n                 ref self_ty,\n-                items: _,\n+                ref items,\n             }) => {\n-                self.with_in_trait_impl(true, |this| {\n+                self.with_in_trait_impl(true, Some(constness), |this| {\n                     this.invalid_visibility(&item.vis, None);\n                     if let TyKind::Err = self_ty.kind {\n                         this.err_handler()\n@@ -1112,7 +1105,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                     }\n \n-                    visit::walk_item(this, item);\n+                    this.visit_vis(&item.vis);\n+                    this.visit_ident(item.ident);\n+                    if let Const::Yes(_) = constness {\n+                        this.with_tilde_const_allowed(|this| this.visit_generics(generics));\n+                    } else {\n+                        this.visit_generics(generics);\n+                    }\n+                    this.visit_trait_ref(t);\n+                    this.visit_ty(self_ty);\n+\n+                    walk_list!(this, visit_assoc_item, items, AssocCtxt::Impl);\n                 });\n                 return; // Avoid visiting again.\n             }\n@@ -1157,13 +1160,23 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                 }\n             }\n-            ItemKind::Fn(box FnKind(def, _, _, ref body)) => {\n+            ItemKind::Fn(box FnKind(def, ref sig, ref generics, ref body)) => {\n                 self.check_defaultness(item.span, def);\n \n                 if body.is_none() {\n                     let msg = \"free function without a body\";\n                     self.error_item_without_body(item.span, \"function\", msg, \" { <body> }\");\n                 }\n+                self.visit_vis(&item.vis);\n+                self.visit_ident(item.ident);\n+                if let Const::Yes(_) = sig.header.constness {\n+                    self.with_tilde_const_allowed(|this| this.visit_generics(generics));\n+                } else {\n+                    self.visit_generics(generics);\n+                }\n+                let kind = FnKind::Fn(FnCtxt::Free, item.ident, sig, &item.vis, body.as_deref());\n+                self.visit_fn(kind, item.span, item.id);\n+                walk_list!(self, visit_attribute, &item.attrs);\n             }\n             ItemKind::ForeignMod(ForeignMod { unsafety, .. }) => {\n                 let old_item = mem::replace(&mut self.extern_mod, Some(item));\n@@ -1206,9 +1219,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);\n                 self.visit_generics(generics);\n-                self.with_bound_context(BoundContext::TraitBounds, |this| {\n-                    walk_list!(this, visit_param_bound, bounds);\n-                });\n+                self.with_banned_tilde_const(|this| walk_list!(this, visit_param_bound, bounds));\n                 walk_list!(self, visit_assoc_item, trait_items, AssocCtxt::Trait);\n                 walk_list!(self, visit_attribute, &item.attrs);\n                 return;\n@@ -1281,7 +1292,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             _ => {}\n         }\n \n-        visit::walk_item(self, item)\n+        visit::walk_item(self, item);\n     }\n \n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n@@ -1428,15 +1439,26 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_param_bound(&mut self, bound: &'a GenericBound) {\n         match bound {\n             GenericBound::Trait(_, TraitBoundModifier::MaybeConst) => {\n-                if let Some(ctx) = self.bound_context {\n-                    let msg = format!(\"`?const` is not permitted in {}\", ctx.description());\n-                    self.err_handler().span_err(bound.span(), &msg);\n+                if !self.is_tilde_const_allowed {\n+                    let msg = \"`~const` is not allowed here\";\n+                    let id_span_msg = (\n+                        DiagnosticMessageId::StabilityId(67792.try_into().ok()),\n+                        Some(bound.span()),\n+                        msg.to_owned(),\n+                    );\n+                    let fresh = self.session.one_time_diagnostics.borrow_mut().insert(id_span_msg);\n+                    if fresh {\n+                        self.err_handler()\n+                            .struct_span_err(bound.span(), msg)\n+                            .note(\"only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\")\n+                            .emit();\n+                    }\n                 }\n             }\n \n             GenericBound::Trait(_, TraitBoundModifier::MaybeConstMaybe) => {\n                 self.err_handler()\n-                    .span_err(bound.span(), \"`?const` and `?` are mutually exclusive\");\n+                    .span_err(bound.span(), \"`~const` and `?` are mutually exclusive\");\n             }\n \n             _ => {}\n@@ -1589,7 +1611,32 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             self.check_item_named(item.ident, \"const\");\n         }\n \n-        self.with_in_trait_impl(false, |this| visit::walk_assoc_item(this, item, ctxt));\n+        match item.kind {\n+            AssocItemKind::TyAlias(box TyAliasKind(_, ref generics, ref bounds, ref ty))\n+                if ctxt == AssocCtxt::Trait =>\n+            {\n+                self.visit_vis(&item.vis);\n+                self.visit_ident(item.ident);\n+                walk_list!(self, visit_attribute, &item.attrs);\n+                self.with_tilde_const_allowed(|this| {\n+                    this.visit_generics(generics);\n+                    walk_list!(this, visit_param_bound, bounds);\n+                });\n+                walk_list!(self, visit_ty, ty);\n+            }\n+            AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, ref body))\n+                if self.in_const_trait_impl =>\n+            {\n+                self.visit_vis(&item.vis);\n+                self.visit_ident(item.ident);\n+                self.with_tilde_const_allowed(|this| this.visit_generics(generics));\n+                let kind =\n+                    FnKind::Fn(FnCtxt::Assoc(ctxt), item.ident, sig, &item.vis, body.as_deref());\n+                self.visit_fn(kind, item.span, item.id);\n+            }\n+            _ => self\n+                .with_in_trait_impl(false, None, |this| visit::walk_assoc_item(this, item, ctxt)),\n+        }\n     }\n }\n \n@@ -1683,9 +1730,10 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) ->\n         session,\n         extern_mod: None,\n         in_trait_impl: false,\n+        in_const_trait_impl: false,\n         has_proc_macro_decls: false,\n         outer_impl_trait: None,\n-        bound_context: None,\n+        is_tilde_const_allowed: false,\n         is_impl_trait_banned: false,\n         is_assoc_ty_bound_banned: false,\n         is_let_allowed: false,"}, {"sha": "557271e32adb492d57908229c00febc6e5be6f2f", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -656,7 +656,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(more_qualified_paths, \"usage of qualified paths in this context is experimental\");\n     gate_all!(generators, \"yield syntax is experimental\");\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");\n-    gate_all!(const_trait_bound_opt_out, \"`?const` on trait bounds is experimental\");\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");"}, {"sha": "5ae106353da616286d889110fcc6d61a0e5a7c43", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -515,9 +515,6 @@ declare_features! (\n     /// Allows `impl const Trait for T` syntax.\n     (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n \n-    /// Allows `T: ?const Trait` syntax in bounds.\n-    (incomplete, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None),\n-\n     /// Allows the use of `no_sanitize` attribute.\n     (active, no_sanitize, \"1.42.0\", Some(39699), None),\n "}, {"sha": "a8aa3c606c6c0d249dfe4024f41e3dfe74f0f15b", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -123,6 +123,9 @@ declare_features! (\n     /// Allows overlapping impls of marker traits.\n     (removed, overlapping_marker_traits, \"1.42.0\", Some(29864), None,\n      Some(\"removed in favor of `#![feature(marker_trait_attr)]`\")),\n+    /// Allows `T: ?const Trait` syntax in bounds.\n+    (removed, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None,\n+     Some(\"Removed in favor of `~const` bound in #![feature(const_trait_impl)]\")),\n     /// Allows `#[no_debug]`.\n     (removed, no_debug, \"1.43.0\", Some(29721), None, Some(\"removed due to lack of demand\")),\n     /// Allows comparing raw pointers during const eval."}, {"sha": "c8ca08f9762b21adc9605f41b447d510c26dcc1b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -457,10 +457,6 @@ pub enum PredicateKind<'tcx> {\n     /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be\n     /// the `Self` type of the trait reference and `A`, `B`, and `C`\n     /// would be the type parameters.\n-    ///\n-    /// A trait predicate will have `Constness::Const` if it originates\n-    /// from a bound on a `const fn` without the `?const` opt-out (e.g.,\n-    /// `const fn foobar<Foo: Bar>() {}`).\n     Trait(TraitPredicate<'tcx>),\n \n     /// `where 'a: 'b`\n@@ -633,8 +629,7 @@ pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>,\n \n     /// A trait predicate will have `Constness::Const` if it originates\n-    /// from a bound on a `const fn` without the `?const` opt-out (e.g.,\n-    /// `const fn foobar<Foo: Bar>() {}`).\n+    /// from a bound marked with `~const`.\n     pub constness: hir::Constness,\n }\n "}, {"sha": "299fc916ac97fa7802b2f6a6865877dc8a0744e7", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -11,12 +11,12 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, PResult};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym};\n \n-/// Any `?` or `?const` modifiers that appear at the start of a bound.\n+/// Any `?` or `~const` modifiers that appear at the start of a bound.\n struct BoundModifiers {\n     /// `?Trait`.\n     maybe: Option<Span>,\n \n-    /// `?const Trait`.\n+    /// `~const Trait`.\n     maybe_const: Option<Span>,\n }\n \n@@ -609,6 +609,7 @@ impl<'a> Parser<'a> {\n         || self.check_lifetime()\n         || self.check(&token::Not) // Used for error reporting only.\n         || self.check(&token::Question)\n+        || self.check(&token::Tilde)\n         || self.check_keyword(kw::For)\n         || self.check(&token::OpenDelim(token::Paren))\n     }\n@@ -655,7 +656,7 @@ impl<'a> Parser<'a> {\n         let inner_lo = self.token.span;\n         let is_negative = self.eat(&token::Not);\n \n-        let modifiers = self.parse_ty_bound_modifiers();\n+        let modifiers = self.parse_ty_bound_modifiers()?;\n         let bound = if self.token.is_lifetime() {\n             self.error_lt_bound_with_modifiers(modifiers);\n             self.parse_generic_lt_bound(lo, inner_lo, has_parens)?\n@@ -690,7 +691,7 @@ impl<'a> Parser<'a> {\n         if let Some(span) = modifiers.maybe_const {\n             self.struct_span_err(\n                 span,\n-                \"`?const` may only modify trait bounds, not lifetime bounds\",\n+                \"`~const` may only modify trait bounds, not lifetime bounds\",\n             )\n             .emit();\n         }\n@@ -721,34 +722,27 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n-    /// Parses the modifiers that may precede a trait in a bound, e.g. `?Trait` or `?const Trait`.\n+    /// Parses the modifiers that may precede a trait in a bound, e.g. `?Trait` or `~const Trait`.\n     ///\n     /// If no modifiers are present, this does not consume any tokens.\n     ///\n     /// ```\n-    /// TY_BOUND_MODIFIERS = \"?\" [\"const\" [\"?\"]]\n+    /// TY_BOUND_MODIFIERS = [\"~const\"] [\"?\"]\n     /// ```\n-    fn parse_ty_bound_modifiers(&mut self) -> BoundModifiers {\n-        if !self.eat(&token::Question) {\n-            return BoundModifiers { maybe: None, maybe_const: None };\n-        }\n-\n-        // `? ...`\n-        let first_question = self.prev_token.span;\n-        if !self.eat_keyword(kw::Const) {\n-            return BoundModifiers { maybe: Some(first_question), maybe_const: None };\n-        }\n+    fn parse_ty_bound_modifiers(&mut self) -> PResult<'a, BoundModifiers> {\n+        let maybe_const = if self.eat(&token::Tilde) {\n+            let tilde = self.prev_token.span;\n+            self.expect_keyword(kw::Const)?;\n+            let span = tilde.to(self.prev_token.span);\n+            self.sess.gated_spans.gate(sym::const_trait_impl, span);\n+            Some(span)\n+        } else {\n+            None\n+        };\n \n-        // `?const ...`\n-        let maybe_const = first_question.to(self.prev_token.span);\n-        self.sess.gated_spans.gate(sym::const_trait_bound_opt_out, maybe_const);\n-        if !self.eat(&token::Question) {\n-            return BoundModifiers { maybe: None, maybe_const: Some(maybe_const) };\n-        }\n+        let maybe = if self.eat(&token::Question) { Some(self.prev_token.span) } else { None };\n \n-        // `?const ? ...`\n-        let second_question = self.prev_token.span;\n-        BoundModifiers { maybe: Some(second_question), maybe_const: Some(maybe_const) }\n+        Ok(BoundModifiers { maybe, maybe_const })\n     }\n \n     /// Parses a type bound according to:\n@@ -757,7 +751,7 @@ impl<'a> Parser<'a> {\n     /// TY_BOUND_NOPAREN = [TY_BOUND_MODIFIERS] [for<LT_PARAM_DEFS>] SIMPLE_PATH\n     /// ```\n     ///\n-    /// For example, this grammar accepts `?const ?for<'a: 'b> m::Trait<'a>`.\n+    /// For example, this grammar accepts `~const ?for<'a: 'b> m::Trait<'a>`.\n     fn parse_generic_ty_bound(\n         &mut self,\n         lo: Span,"}, {"sha": "3ae26c3eb78e0d7c17789516f35898d27e80c24d", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -2227,8 +2227,8 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     match bound {\n                         hir::GenericBound::Trait(poly_trait_ref, modifier) => {\n                             let constness = match modifier {\n-                                hir::TraitBoundModifier::MaybeConst => hir::Constness::NotConst,\n-                                hir::TraitBoundModifier::None => constness,\n+                                hir::TraitBoundModifier::None => hir::Constness::NotConst,\n+                                hir::TraitBoundModifier::MaybeConst => constness,\n                                 // We ignore `where T: ?Sized`, it is already part of\n                                 // type parameter `T`.\n                                 hir::TraitBoundModifier::Maybe => continue,\n@@ -2497,8 +2497,8 @@ fn predicates_from_bound<'tcx>(\n         hir::GenericBound::Trait(ref tr, modifier) => {\n             let constness = match modifier {\n                 hir::TraitBoundModifier::Maybe => return vec![],\n-                hir::TraitBoundModifier::MaybeConst => hir::Constness::NotConst,\n-                hir::TraitBoundModifier::None => constness,\n+                hir::TraitBoundModifier::MaybeConst => constness,\n+                hir::TraitBoundModifier::None => hir::Constness::NotConst,\n             };\n \n             let mut bounds = Bounds::default();"}, {"sha": "54be830bf42e7404231de5e62b66a8235d148acf", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -387,7 +387,7 @@ impl clean::GenericBound {\n                 let modifier_str = match modifier {\n                     hir::TraitBoundModifier::None => \"\",\n                     hir::TraitBoundModifier::Maybe => \"?\",\n-                    hir::TraitBoundModifier::MaybeConst => \"?const\",\n+                    hir::TraitBoundModifier::MaybeConst => \"~const\",\n                 };\n                 if f.alternate() {\n                     write!(f, \"{}{:#}\", modifier_str, ty.print(cx))"}, {"sha": "80f6bbec2a181f04d6146376b12e96c246ee72a8", "filename": "src/test/ui/consts/const-eval/issue-49296.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -1,22 +1,13 @@\n // issue-49296: Unsafe shenigans in constants can result in missing errors\n \n #![feature(const_fn_trait_bound)]\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n \n-const unsafe fn transmute<T: ?const Copy, U: ?const Copy>(t: T) -> U {\n-    #[repr(C)]\n-    union Transmute<T: Copy, U: Copy> {\n-        from: T,\n-        to: U,\n-    }\n-\n-    Transmute { from: t }.to\n-}\n+use std::mem::transmute;\n \n const fn wat(x: u64) -> &'static u64 {\n     unsafe { transmute(&x) }\n }\n+\n const X: u64 = *wat(42);\n //~^ ERROR evaluation of constant value failed\n "}, {"sha": "8a0f39acf258310e552b8c989a8d63e71b998217", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst-opt-out.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -13,12 +13,10 @@ impl PartialEq for S {\n     }\n }\n \n-const fn equals_self<T: ?const PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: PartialEq>(t: &T) -> bool {\n     true\n }\n \n pub const EQ: bool = equals_self(&S);\n \n-// Calling `equals_self` with a type that only has a non-const impl is fine, because we opted out.\n-\n fn main() {}"}, {"sha": "cde5233d4c88bc968686d88f4d0a3f2ccbadf422", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-on-non-const-fn.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-on-non-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-on-non-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-on-non-const-fn.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_trait_impl)]\n+fn a<T: ~const From<u8>>() {}\n+//~^ ERROR: `~const` is not allowed\n+\n+struct S;\n+\n+impl S {\n+    fn b<T: ~const From<u8>>() {}\n+    //~^ ERROR: `~const` is not allowed\n+}\n+\n+fn main() {}"}, {"sha": "4f81a607f6eaf1bffd45d79f7455c43c96da0e9d", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-on-non-const-fn.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-on-non-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-on-non-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-on-non-const-fn.stderr?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -0,0 +1,18 @@\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-on-non-const-fn.rs:2:9\n+   |\n+LL | fn a<T: ~const From<u8>>() {}\n+   |         ^^^^^^^^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-on-non-const-fn.rs:8:13\n+   |\n+LL |     fn b<T: ~const From<u8>>() {}\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "640d127e8609818052a0024ad2aa8f604b215066", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -537,10 +537,10 @@ impl Rewrite for ast::GenericBound {\n                         .map(|s| format!(\"?{}\", s)),\n                     ast::TraitBoundModifier::MaybeConst => poly_trait_ref\n                         .rewrite(context, shape.offset_left(7)?)\n-                        .map(|s| format!(\"?const {}\", s)),\n+                        .map(|s| format!(\"~const {}\", s)),\n                     ast::TraitBoundModifier::MaybeConstMaybe => poly_trait_ref\n                         .rewrite(context, shape.offset_left(8)?)\n-                        .map(|s| format!(\"?const ?{}\", s)),\n+                        .map(|s| format!(\"~const ?{}\", s)),\n                 };\n                 rewrite.map(|s| if has_paren { format!(\"({})\", s) } else { s })\n             }"}, {"sha": "9ab66944c8ccc69854c8def5643e4655469d4fc4", "filename": "src/tools/rustfmt/tests/target/type.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660832086db649e5a7e489ab40f303fa3f6638e/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs?ref=8660832086db649e5a7e489ab40f303fa3f6638e", "patch": "@@ -145,35 +145,33 @@ type MyFn = fn(\n     b: SomeOtherLongComplexType,\n ) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>>;\n \n-// Const opt-out\n+// Const bound\n \n-trait T: ?const Super {}\n+trait T: ~const Super {}\n \n-const fn maybe_const<S: ?const T>() -> i32 {\n+const fn not_quite_const<S: ~const T>() -> i32 {\n     <S as T>::CONST\n }\n \n-struct S<T: ?const ?Sized>(std::marker::PhantomData<T>);\n+struct S<T: ~const ?Sized>(std::marker::PhantomData<T>);\n \n-impl ?const T {}\n+impl ~const T {}\n \n-fn trait_object() -> &'static dyn ?const T {\n+fn trait_object() -> &'static dyn ~const T {\n     &S\n }\n \n-fn i(_: impl IntoIterator<Item = Box<dyn ?const T>>) {}\n+fn i(_: impl IntoIterator<Item = Box<dyn ~const T>>) {}\n \n-fn apit(_: impl ?const T) {}\n+fn apit(_: impl ~const T) {}\n \n-fn rpit() -> impl ?const T {\n+fn rpit() -> impl ~const T {\n     S\n }\n \n pub struct Foo<T: Trait>(T);\n-impl<T: ?const Trait> Foo<T> {\n+impl<T: ~const Trait> Foo<T> {\n     fn new(t: T) -> Self {\n-        // not calling methods on `t`, so we opt out of requiring\n-        // `<T as Trait>` to have const methods via `?const`\n         Self(t)\n     }\n }"}]}