{"sha": "104a3c3510bad05bc58af8f3c7b8947d04a8a3dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNGEzYzM1MTBiYWQwNWJjNThhZjhmM2M3Yjg5NDdkMDRhOGEzZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-22T11:49:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-22T11:49:13Z"}, "message": "Auto merge of #85557 - hyd-dev:abi, r=RalfJung\n\nAdd `rustc_mir::interpret::Machine::enforce_abi()`\n\nTo specify whether to skip the [ABI](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/abi/enum.Abi.html) check for function calls, so that we could test unwinding out of a `extern \"C\"` function call in Miri by disabling the check: https://github.com/rust-lang/miri/pull/1776#discussion_r633698382\n\nI have tested that it works in Miri with a `-Zmiri-disable-abi-check` command line flag.", "tree": {"sha": "8916ed146899fd077c3f49bc34df07fd65514aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8916ed146899fd077c3f49bc34df07fd65514aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104a3c3510bad05bc58af8f3c7b8947d04a8a3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104a3c3510bad05bc58af8f3c7b8947d04a8a3dd", "html_url": "https://github.com/rust-lang/rust/commit/104a3c3510bad05bc58af8f3c7b8947d04a8a3dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104a3c3510bad05bc58af8f3c7b8947d04a8a3dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70cb58ce279444ac0191c4aa6df79becbaf2bdc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/70cb58ce279444ac0191c4aa6df79becbaf2bdc1", "html_url": "https://github.com/rust-lang/rust/commit/70cb58ce279444ac0191c4aa6df79becbaf2bdc1"}, {"sha": "7e42c975b9fec39a385fb27e3f1610721a9d5e86", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e42c975b9fec39a385fb27e3f1610721a9d5e86", "html_url": "https://github.com/rust-lang/rust/commit/7e42c975b9fec39a385fb27e3f1610721a9d5e86"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "0ca99da7304b3550b15dcb91eaa15f50b031645c", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/104a3c3510bad05bc58af8f3c7b8947d04a8a3dd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104a3c3510bad05bc58af8f3c7b8947d04a8a3dd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=104a3c3510bad05bc58af8f3c7b8947d04a8a3dd", "patch": "@@ -132,6 +132,11 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n+    /// Whether function calls should be [ABI](Abi)-checked.\n+    fn enforce_abi(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        true\n+    }\n+\n     /// Entry point for obtaining the MIR of anything that should get evaluated.\n     /// So not just functions and shims, but also const/static initializers, anonymous\n     /// constants, ..."}, {"sha": "a3dc8aaef32420bf8e51fa83a46c36426ef034a4", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/104a3c3510bad05bc58af8f3c7b8947d04a8a3dd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104a3c3510bad05bc58af8f3c7b8947d04a8a3dd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=104a3c3510bad05bc58af8f3c7b8947d04a8a3dd", "patch": "@@ -232,26 +232,28 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // ABI check\n         let check_abi = |this: &Self, instance_ty: Ty<'tcx>| -> InterpResult<'tcx> {\n-            let callee_abi = match instance_ty.kind() {\n-                ty::FnDef(..) => instance_ty.fn_sig(*this.tcx).abi(),\n-                ty::Closure(..) => Abi::RustCall,\n-                ty::Generator(..) => Abi::Rust,\n-                _ => span_bug!(this.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n-            };\n-            let normalize_abi = |abi| match abi {\n-                Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n-                // These are all the same ABI, really.\n-                {\n-                    Abi::Rust\n+            if M::enforce_abi(this) {\n+                let callee_abi = match instance_ty.kind() {\n+                    ty::FnDef(..) => instance_ty.fn_sig(*this.tcx).abi(),\n+                    ty::Closure(..) => Abi::RustCall,\n+                    ty::Generator(..) => Abi::Rust,\n+                    _ => span_bug!(this.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n+                };\n+                let normalize_abi = |abi| match abi {\n+                    Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n+                    // These are all the same ABI, really.\n+                    {\n+                        Abi::Rust\n+                    }\n+                    abi => abi,\n+                };\n+                if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n+                    throw_ub_format!(\n+                        \"calling a function with ABI {} using caller ABI {}\",\n+                        callee_abi.name(),\n+                        caller_abi.name()\n+                    )\n                 }\n-                abi => abi,\n-            };\n-            if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n-                throw_ub_format!(\n-                    \"calling a function with ABI {} using caller ABI {}\",\n-                    callee_abi.name(),\n-                    caller_abi.name()\n-                )\n             }\n             Ok(())\n         };"}]}