{"sha": "607b8299c5c91b11d97bd003a54502e4284356fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwN2I4Mjk5YzVjOTFiMTFkOTdiZDAwM2E1NDUwMmU0Mjg0MzU2ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-15T12:57:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-15T12:57:51Z"}, "message": "Auto merge of #4382 - jeremystucki:unnecessary_fold_span, r=flip1995\n\nChange span of unnecessary_fold lint\n\nResolves #4381\n\nchangelog: Change linted span of `unnecessary_fold`", "tree": {"sha": "6d48cbc0cd5d02a598b310152d6a86d48cb9ce3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d48cbc0cd5d02a598b310152d6a86d48cb9ce3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/607b8299c5c91b11d97bd003a54502e4284356fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/607b8299c5c91b11d97bd003a54502e4284356fe", "html_url": "https://github.com/rust-lang/rust/commit/607b8299c5c91b11d97bd003a54502e4284356fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/607b8299c5c91b11d97bd003a54502e4284356fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3da66d6d3db4b80da10e7116302b0985b7661a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3da66d6d3db4b80da10e7116302b0985b7661a5", "html_url": "https://github.com/rust-lang/rust/commit/a3da66d6d3db4b80da10e7116302b0985b7661a5"}, {"sha": "fdf82eb1a8d3d3ba53744e0d1a24aba26f53c18c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf82eb1a8d3d3ba53744e0d1a24aba26f53c18c", "html_url": "https://github.com/rust-lang/rust/commit/fdf82eb1a8d3d3ba53744e0d1a24aba26f53c18c"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "0020dbd233d9c149ee2d30306d00d76d8ea870d5", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/607b8299c5c91b11d97bd003a54502e4284356fe/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b8299c5c91b11d97bd003a54502e4284356fe/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=607b8299c5c91b11d97bd003a54502e4284356fe", "patch": "@@ -15,7 +15,7 @@ use rustc::ty::{self, Predicate, Ty};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast;\n-use syntax::source_map::{BytePos, Span};\n+use syntax::source_map::Span;\n use syntax::symbol::LocalInternedString;\n \n use crate::utils::paths;\n@@ -1663,6 +1663,7 @@ fn lint_iter_cloned_collect<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Ex\n fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n     fn check_fold_with_op(\n         cx: &LateContext<'_, '_>,\n+        expr: &hir::Expr,\n         fold_args: &[hir::Expr],\n         op: hir::BinOpKind,\n         replacement_method_name: &str,\n@@ -1685,30 +1686,28 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n             if match_var(&*left_expr, first_arg_ident);\n             if replacement_has_args || match_var(&*right_expr, second_arg_ident);\n \n-            then {\n-                // Span containing `.fold(...)`\n-                let next_point = cx.sess().source_map().next_point(fold_args[0].span);\n-                let fold_span = next_point.with_hi(fold_args[2].span.hi() + BytePos(1));\n+            if let hir::ExprKind::MethodCall(_, span, _) = &expr.node;\n \n+            then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if replacement_has_args {\n                     format!(\n-                        \".{replacement}(|{s}| {r})\",\n+                        \"{replacement}(|{s}| {r})\",\n                         replacement = replacement_method_name,\n                         s = second_arg_ident,\n                         r = snippet_with_applicability(cx, right_expr.span, \"EXPR\", &mut applicability),\n                     )\n                 } else {\n                     format!(\n-                        \".{replacement}()\",\n+                        \"{replacement}()\",\n                         replacement = replacement_method_name,\n                     )\n                 };\n \n                 span_lint_and_sugg(\n                     cx,\n                     UNNECESSARY_FOLD,\n-                    fold_span,\n+                    span.with_hi(expr.span.hi()),\n                     // TODO #2371 don't suggest e.g., .any(|x| f(x)) if we can suggest .any(f)\n                     \"this `.fold` can be written more succinctly using another method\",\n                     \"try\",\n@@ -1732,10 +1731,10 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n     // Check if the first argument to .fold is a suitable literal\n     if let hir::ExprKind::Lit(ref lit) = fold_args[1].node {\n         match lit.node {\n-            ast::LitKind::Bool(false) => check_fold_with_op(cx, fold_args, hir::BinOpKind::Or, \"any\", true),\n-            ast::LitKind::Bool(true) => check_fold_with_op(cx, fold_args, hir::BinOpKind::And, \"all\", true),\n-            ast::LitKind::Int(0, _) => check_fold_with_op(cx, fold_args, hir::BinOpKind::Add, \"sum\", false),\n-            ast::LitKind::Int(1, _) => check_fold_with_op(cx, fold_args, hir::BinOpKind::Mul, \"product\", false),\n+            ast::LitKind::Bool(false) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Or, \"any\", true),\n+            ast::LitKind::Bool(true) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::And, \"all\", true),\n+            ast::LitKind::Int(0, _) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Add, \"sum\", false),\n+            ast::LitKind::Int(1, _) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Mul, \"product\", false),\n             _ => (),\n         }\n     }"}, {"sha": "52300a3b64061b172a27580789dd5ae516eebfe7", "filename": "tests/ui/unnecessary_fold.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/607b8299c5c91b11d97bd003a54502e4284356fe/tests%2Fui%2Funnecessary_fold.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/607b8299c5c91b11d97bd003a54502e4284356fe/tests%2Fui%2Funnecessary_fold.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.fixed?ref=607b8299c5c91b11d97bd003a54502e4284356fe", "patch": "@@ -41,4 +41,12 @@ fn unnecessary_fold_should_ignore() {\n     let _ = [(0..2), (0..3)].iter().fold(1, |a, b| a * b.len());\n }\n \n+/// Should lint only the line containing the fold\n+fn unnecessary_fold_over_multiple_lines() {\n+    let _ = (0..3)\n+        .map(|x| x + 1)\n+        .filter(|x| x % 2 == 0)\n+        .any(|x| x > 2);\n+}\n+\n fn main() {}"}, {"sha": "4028d80c0a3cb9efc58f60cde0095ee7151e805a", "filename": "tests/ui/unnecessary_fold.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/607b8299c5c91b11d97bd003a54502e4284356fe/tests%2Fui%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b8299c5c91b11d97bd003a54502e4284356fe/tests%2Fui%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.rs?ref=607b8299c5c91b11d97bd003a54502e4284356fe", "patch": "@@ -41,4 +41,12 @@ fn unnecessary_fold_should_ignore() {\n     let _ = [(0..2), (0..3)].iter().fold(1, |a, b| a * b.len());\n }\n \n+/// Should lint only the line containing the fold\n+fn unnecessary_fold_over_multiple_lines() {\n+    let _ = (0..3)\n+        .map(|x| x + 1)\n+        .filter(|x| x % 2 == 0)\n+        .fold(false, |acc, x| acc || x > 2);\n+}\n+\n fn main() {}"}, {"sha": "22c44588ab7af879b9a7b27d828144c55a9f59e8", "filename": "tests/ui/unnecessary_fold.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/607b8299c5c91b11d97bd003a54502e4284356fe/tests%2Fui%2Funnecessary_fold.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607b8299c5c91b11d97bd003a54502e4284356fe/tests%2Fui%2Funnecessary_fold.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.stderr?ref=607b8299c5c91b11d97bd003a54502e4284356fe", "patch": "@@ -1,34 +1,40 @@\n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:8:19\n+  --> $DIR/unnecessary_fold.rs:8:20\n    |\n LL |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `any(|x| x > 2)`\n    |\n    = note: `-D clippy::unnecessary-fold` implied by `-D warnings`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:10:19\n+  --> $DIR/unnecessary_fold.rs:10:20\n    |\n LL |     let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.all(|x| x > 2)`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `all(|x| x > 2)`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:12:24\n+  --> $DIR/unnecessary_fold.rs:12:25\n    |\n LL |     let _: i32 = (0..3).fold(0, |acc, x| acc + x);\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.sum()`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `sum()`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:14:24\n+  --> $DIR/unnecessary_fold.rs:14:25\n    |\n LL |     let _: i32 = (0..3).fold(1, |acc, x| acc * x);\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.product()`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `product()`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:19:40\n+  --> $DIR/unnecessary_fold.rs:19:41\n    |\n LL |     let _: bool = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `any(|x| x > 2)`\n \n-error: aborting due to 5 previous errors\n+error: this `.fold` can be written more succinctly using another method\n+  --> $DIR/unnecessary_fold.rs:49:10\n+   |\n+LL |         .fold(false, |acc, x| acc || x > 2);\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `any(|x| x > 2)`\n+\n+error: aborting due to 6 previous errors\n "}]}