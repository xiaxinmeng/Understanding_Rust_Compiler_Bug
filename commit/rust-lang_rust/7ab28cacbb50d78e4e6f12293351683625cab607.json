{"sha": "7ab28cacbb50d78e4e6f12293351683625cab607", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYjI4Y2FjYmI1MGQ3OGU0ZTZmMTIyOTMzNTE2ODM2MjVjYWI2MDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-21T18:50:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-21T18:50:53Z"}, "message": "Merge #4076\n\n4076: Improve remove derive attrs r=matklad a=edwin0cheng\n\nThis PR implemented a proper `remove_derive_attrs` function which **merely** remove  any `#[derive(*)]` attributes.\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "10242c971eecee5b10f6d02ce36c789d7da9bfd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10242c971eecee5b10f6d02ce36c789d7da9bfd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ab28cacbb50d78e4e6f12293351683625cab607", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJen0CNCRBK7hj4Ov3rIwAAdHIIAAO3modrxRdo9KSmZKHhs2ur\nCs1xu0JjKO8XDk5d+v08+kEhzIAlo9XR8crsM0n1HhhMZjNKptC+QipT/ryyGV2L\nd5h81Cyy+dfCvUjvv107zrnFMyzUIKdU0ldTYx29FeVUPYR07UZTwcz/OCv5Oz/C\nIdmhoEjeRLun/WWiOpqYLC2vh83rEZMqAUwCykR7oVNAsJA93P1xG6EexdAXSYHB\nO5WNWwQdxCRHTWJJIWm0h39sh/vCA9MOwX00j9ZJUPYwZBnwB8jj/JYkVQTviSXU\ndrWmqgKWKoftlW++SOB2wKvWydxEYRG3Q0i7XKyBn+xjPQuOs37ephNONvxYMf8=\n=E2tD\n-----END PGP SIGNATURE-----\n", "payload": "tree 10242c971eecee5b10f6d02ce36c789d7da9bfd1\nparent 4a250021b1a1def483f7faf2b534ec4dd7defd02\nparent 4a303366c85850f5af60d21ed53d1c59fc468e29\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587495053 +0000\ncommitter GitHub <noreply@github.com> 1587495053 +0000\n\nMerge #4076\n\n4076: Improve remove derive attrs r=matklad a=edwin0cheng\n\nThis PR implemented a proper `remove_derive_attrs` function which **merely** remove  any `#[derive(*)]` attributes.\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab28cacbb50d78e4e6f12293351683625cab607", "html_url": "https://github.com/rust-lang/rust/commit/7ab28cacbb50d78e4e6f12293351683625cab607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ab28cacbb50d78e4e6f12293351683625cab607/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a250021b1a1def483f7faf2b534ec4dd7defd02", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a250021b1a1def483f7faf2b534ec4dd7defd02", "html_url": "https://github.com/rust-lang/rust/commit/4a250021b1a1def483f7faf2b534ec4dd7defd02"}, {"sha": "4a303366c85850f5af60d21ed53d1c59fc468e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a303366c85850f5af60d21ed53d1c59fc468e29", "html_url": "https://github.com/rust-lang/rust/commit/4a303366c85850f5af60d21ed53d1c59fc468e29"}], "stats": {"total": 108, "additions": 98, "deletions": 10}, "files": [{"sha": "3738cfe8c2460d6b4e2474d1e6c615ee1d84ca0a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ab28cacbb50d78e4e6f12293351683625cab607/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7ab28cacbb50d78e4e6f12293351683625cab607/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7ab28cacbb50d78e4e6f12293351683625cab607", "patch": "@@ -1012,6 +1012,7 @@ dependencies = [\n  \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_tt\",\n+ \"test_utils\",\n ]\n \n [[package]]"}, {"sha": "2cd522766066d20a95614ca57f6ef06ec1ce8870", "filename": "crates/ra_hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ab28cacbb50d78e4e6f12293351683625cab607/crates%2Fra_hir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7ab28cacbb50d78e4e6f12293351683625cab607/crates%2Fra_hir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2FCargo.toml?ref=7ab28cacbb50d78e4e6f12293351683625cab607", "patch": "@@ -18,3 +18,4 @@ ra_parser = { path = \"../ra_parser\" }\n ra_prof = { path = \"../ra_prof\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n+test_utils = { path = \"../test_utils\"}"}, {"sha": "4e0e069c8c271b8e0007056631774db71fd1390c", "filename": "crates/ra_hir_expand/src/proc_macro.rs", "status": "modified", "additions": 96, "deletions": 10, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/7ab28cacbb50d78e4e6f12293351683625cab607/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab28cacbb50d78e4e6f12293351683625cab607/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs?ref=7ab28cacbb50d78e4e6f12293351683625cab607", "patch": "@@ -2,6 +2,7 @@\n \n use crate::{db::AstDatabase, LazyMacroId};\n use ra_db::{CrateId, ProcMacroId};\n+use tt::buffer::{Cursor, TokenBuffer};\n \n #[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n pub struct ProcMacroExpander {\n@@ -36,22 +37,107 @@ impl ProcMacroExpander {\n             .clone()\n             .ok_or_else(|| err!(\"No derive macro found.\"))?;\n \n-        let tt = remove_derive_atr(tt, &proc_macro.name)\n+        let tt = remove_derive_attrs(tt)\n             .ok_or_else(|| err!(\"Fail to remove derive for custom derive\"))?;\n \n         proc_macro.expander.expand(&tt, None).map_err(mbe::ExpandError::from)\n     }\n }\n \n-fn remove_derive_atr(tt: &tt::Subtree, _name: &str) -> Option<tt::Subtree> {\n-    // FIXME: proper handle the remove derive\n-    // We assume the first 2 tokens are #[derive(name)]\n-    if tt.token_trees.len() > 2 {\n-        let mut tt = tt.clone();\n-        tt.token_trees.remove(0);\n-        tt.token_trees.remove(0);\n-        return Some(tt);\n+fn eat_punct(cursor: &mut Cursor, c: char) -> bool {\n+    if let Some(tt::TokenTree::Leaf(tt::Leaf::Punct(punct))) = cursor.token_tree() {\n+        if punct.char == c {\n+            *cursor = cursor.bump();\n+            return true;\n+        }\n     }\n+    false\n+}\n+\n+fn eat_subtree(cursor: &mut Cursor, kind: tt::DelimiterKind) -> bool {\n+    if let Some(tt::TokenTree::Subtree(subtree)) = cursor.token_tree() {\n+        if Some(kind) == subtree.delimiter_kind() {\n+            *cursor = cursor.bump_subtree();\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn eat_ident(cursor: &mut Cursor, t: &str) -> bool {\n+    if let Some(tt::TokenTree::Leaf(tt::Leaf::Ident(ident))) = cursor.token_tree() {\n+        if t == ident.text.as_str() {\n+            *cursor = cursor.bump();\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn remove_derive_attrs(tt: &tt::Subtree) -> Option<tt::Subtree> {\n+    let buffer = TokenBuffer::new(&tt.token_trees);\n+    let mut p = buffer.begin();\n+    let mut result = tt::Subtree::default();\n+\n+    while !p.eof() {\n+        let curr = p;\n \n-    None\n+        if eat_punct(&mut p, '#') {\n+            eat_punct(&mut p, '!');\n+            let parent = p;\n+            if eat_subtree(&mut p, tt::DelimiterKind::Bracket) {\n+                if eat_ident(&mut p, \"derive\") {\n+                    p = parent.bump();\n+                    continue;\n+                }\n+            }\n+        }\n+\n+        result.token_trees.push(curr.token_tree()?.clone());\n+        p = curr.bump();\n+    }\n+\n+    Some(result)\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use test_utils::assert_eq_text;\n+\n+    #[test]\n+    fn test_remove_derive_attrs() {\n+        let tt = mbe::parse_to_token_tree(\n+            r#\"\n+    #[allow(unused)]\n+    #[derive(Copy)]\n+    #[derive(Hello)]\n+    struct A {\n+        bar: u32\n+    }\n+\"#,\n+        )\n+        .unwrap()\n+        .0;\n+        let result = format!(\"{:#?}\", remove_derive_attrs(&tt).unwrap());\n+\n+        assert_eq_text!(\n+            &result,\n+            r#\"\n+SUBTREE $\n+  PUNCH   # [alone] 0\n+  SUBTREE [] 1\n+    IDENT   allow 2\n+    SUBTREE () 3\n+      IDENT   unused 4\n+  IDENT   struct 15\n+  IDENT   A 16\n+  SUBTREE {} 17\n+    IDENT   bar 18\n+    PUNCH   : [alone] 19\n+    IDENT   u32 20\n+\"#\n+            .trim()\n+        );\n+    }\n }"}]}