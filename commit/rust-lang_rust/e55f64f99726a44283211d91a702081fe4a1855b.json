{"sha": "e55f64f99726a44283211d91a702081fe4a1855b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NWY2NGY5OTcyNmE0NDI4MzIxMWQ5MWE3MDIwODFmZTRhMTg1NWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-09T08:11:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-09T08:11:58Z"}, "message": "auto merge of #14709 : alexcrichton/rust/collections, r=brson\n\nThis is mostly just a cosmetic change, continuing the work from #14333.", "tree": {"sha": "f99c46e50fa840570776a65728b4bdab123d02c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f99c46e50fa840570776a65728b4bdab123d02c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55f64f99726a44283211d91a702081fe4a1855b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55f64f99726a44283211d91a702081fe4a1855b", "html_url": "https://github.com/rust-lang/rust/commit/e55f64f99726a44283211d91a702081fe4a1855b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55f64f99726a44283211d91a702081fe4a1855b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6a9e09f98cceecc866c5e6a0d9392735c351ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6a9e09f98cceecc866c5e6a0d9392735c351ae6", "html_url": "https://github.com/rust-lang/rust/commit/a6a9e09f98cceecc866c5e6a0d9392735c351ae6"}, {"sha": "da0703973af921626d7235131d14847b1aacffc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/da0703973af921626d7235131d14847b1aacffc2", "html_url": "https://github.com/rust-lang/rust/commit/da0703973af921626d7235131d14847b1aacffc2"}], "stats": {"total": 482, "additions": 249, "deletions": 233}, "files": [{"sha": "42c8177977057323d89d71363dab68d1defd5390", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -20,6 +20,7 @@ use core::slice;\n use core::uint;\n use std::hash;\n \n+use {Collection, Mutable, Set, MutableSet};\n use vec::Vec;\n \n #[deriving(Clone)]\n@@ -857,7 +858,7 @@ impl<S: hash::Writer> hash::Hash<S> for BitvSet {\n     }\n }\n \n-impl Container for BitvSet {\n+impl Collection for BitvSet {\n     #[inline]\n     fn len(&self) -> uint { self.size }\n }\n@@ -1008,6 +1009,7 @@ mod tests {\n     use std::rand::Rng;\n     use test::Bencher;\n \n+    use {Set, Mutable, MutableSet};\n     use bitv::{Bitv, SmallBitv, BigBitv, BitvSet, from_bools, from_fn,\n                from_bytes};\n     use bitv;"}, {"sha": "82abe69a63996fb3aad41a1f4deb81a8a6070a97", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -24,6 +24,7 @@ use alloc::owned::Box;\n use core::fmt;\n use core::fmt::Show;\n \n+use Collection;\n use vec::Vec;\n \n #[allow(missing_doc)]"}, {"sha": "1faa9be99e3a54e919643e4be4f4409d223c5f5b", "filename": "src/libcollections/deque.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdeque.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -10,41 +10,13 @@\n \n //! Container traits for collections\n \n-use core::prelude::*;\n-\n-/// A double-ended sequence that allows querying, insertion and deletion at both ends.\n-pub trait Deque<T> : Mutable {\n-    /// Provide a reference to the front element, or None if the sequence is empty\n-    fn front<'a>(&'a self) -> Option<&'a T>;\n-\n-    /// Provide a mutable reference to the front element, or None if the sequence is empty\n-    fn front_mut<'a>(&'a mut self) -> Option<&'a mut T>;\n-\n-    /// Provide a reference to the back element, or None if the sequence is empty\n-    fn back<'a>(&'a self) -> Option<&'a T>;\n-\n-    /// Provide a mutable reference to the back element, or None if the sequence is empty\n-    fn back_mut<'a>(&'a mut self) -> Option<&'a mut T>;\n-\n-    /// Insert an element first in the sequence\n-    fn push_front(&mut self, elt: T);\n-\n-    /// Insert an element last in the sequence\n-    fn push_back(&mut self, elt: T);\n-\n-    /// Remove the last element and return it, or None if the sequence is empty\n-    fn pop_back(&mut self) -> Option<T>;\n-\n-    /// Remove the first element and return it, or None if the sequence is empty\n-    fn pop_front(&mut self) -> Option<T>;\n-}\n-\n #[cfg(test)]\n pub mod bench {\n     use std::prelude::*;\n     use std::rand;\n     use std::rand::Rng;\n     use test::Bencher;\n+    use MutableMap;\n \n     pub fn insert_rand_n<M:MutableMap<uint,uint>>(n: uint,\n                                                   map: &mut M,\n@@ -121,3 +93,4 @@ pub mod bench {\n         })\n      }\n }\n+"}, {"sha": "5a2312456913824a385371596b0b46597620418f", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -13,7 +13,7 @@\n //! The DList allows pushing and popping elements at either end.\n //!\n //! DList implements the trait Deque. It should be imported with `use\n-//! collections::deque::Deque`.\n+//! collections::Deque`.\n \n // DList is constructed like a singly-linked list over the field `next`.\n // including the last link being None; each Node owns its `next` field.\n@@ -29,7 +29,7 @@ use core::iter;\n use core::mem;\n use core::ptr;\n \n-use deque::Deque;\n+use {Collection, Mutable, Deque};\n \n /// A doubly-linked list.\n pub struct DList<T> {\n@@ -125,7 +125,7 @@ fn link_with_prev<T>(mut next: Box<Node<T>>, prev: Rawlink<Node<T>>)\n     Some(next)\n }\n \n-impl<T> Container for DList<T> {\n+impl<T> Collection for DList<T> {\n     /// O(1)\n     #[inline]\n     fn is_empty(&self) -> bool {\n@@ -629,7 +629,7 @@ mod tests {\n     use test::Bencher;\n     use test;\n \n-    use deque::Deque;\n+    use Deque;\n     use super::{DList, Node, ListInsertion};\n     use vec::Vec;\n "}, {"sha": "602ecf39a836c837374bbe167826a9b4895e0b09", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 116, "deletions": 7, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -32,9 +32,11 @@ extern crate alloc;\n #[cfg(test)] #[phase(syntax, link)] extern crate std;\n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n+use core::prelude::*;\n+\n+pub use core::collections::Collection;\n pub use bitv::{Bitv, BitvSet};\n pub use btree::BTree;\n-pub use deque::Deque;\n pub use dlist::DList;\n pub use enum_set::EnumSet;\n pub use priority_queue::PriorityQueue;\n@@ -47,7 +49,6 @@ mod macros;\n \n pub mod bitv;\n pub mod btree;\n-pub mod deque;\n pub mod dlist;\n pub mod enum_set;\n pub mod priority_queue;\n@@ -64,12 +65,120 @@ pub mod hash;\n // Internal unicode fiddly bits for the str module\n mod unicode;\n \n-// FIXME(#14008) should this actually exist, or should a method be added?\n-fn expect<T>(a: core::option::Option<T>, b: &str) -> T {\n-    match a {\n-        core::option::Some(a) => a,\n-        core::option::None => fail!(\"{}\", b),\n+mod deque;\n+\n+/// A trait to represent mutable containers\n+pub trait Mutable: Collection {\n+    /// Clear the container, removing all values.\n+    fn clear(&mut self);\n+}\n+\n+/// A map is a key-value store where values may be looked up by their keys. This\n+/// trait provides basic operations to operate on these stores.\n+pub trait Map<K, V>: Collection {\n+    /// Return a reference to the value corresponding to the key\n+    fn find<'a>(&'a self, key: &K) -> Option<&'a V>;\n+\n+    /// Return true if the map contains a value for the specified key\n+    #[inline]\n+    fn contains_key(&self, key: &K) -> bool {\n+        self.find(key).is_some()\n+    }\n+}\n+\n+/// This trait provides basic operations to modify the contents of a map.\n+pub trait MutableMap<K, V>: Map<K, V> + Mutable {\n+    /// Insert a key-value pair into the map. An existing value for a\n+    /// key is replaced by the new value. Return true if the key did\n+    /// not already exist in the map.\n+    #[inline]\n+    fn insert(&mut self, key: K, value: V) -> bool {\n+        self.swap(key, value).is_none()\n+    }\n+\n+    /// Remove a key-value pair from the map. Return true if the key\n+    /// was present in the map, otherwise false.\n+    #[inline]\n+    fn remove(&mut self, key: &K) -> bool {\n+        self.pop(key).is_some()\n+    }\n+\n+    /// Insert a key-value pair from the map. If the key already had a value\n+    /// present in the map, that value is returned. Otherwise None is returned.\n+    fn swap(&mut self, k: K, v: V) -> Option<V>;\n+\n+    /// Removes a key from the map, returning the value at the key if the key\n+    /// was previously in the map.\n+    fn pop(&mut self, k: &K) -> Option<V>;\n+\n+    /// Return a mutable reference to the value corresponding to the key\n+    fn find_mut<'a>(&'a mut self, key: &K) -> Option<&'a mut V>;\n+}\n+\n+/// A set is a group of objects which are each distinct from one another. This\n+/// trait represents actions which can be performed on sets to iterate over\n+/// them.\n+pub trait Set<T>: Collection {\n+    /// Return true if the set contains a value\n+    fn contains(&self, value: &T) -> bool;\n+\n+    /// Return true if the set has no elements in common with `other`.\n+    /// This is equivalent to checking for an empty intersection.\n+    fn is_disjoint(&self, other: &Self) -> bool;\n+\n+    /// Return true if the set is a subset of another\n+    fn is_subset(&self, other: &Self) -> bool;\n+\n+    /// Return true if the set is a superset of another\n+    fn is_superset(&self, other: &Self) -> bool {\n+        other.is_subset(self)\n     }\n+\n+    // FIXME #8154: Add difference, sym. difference, intersection and union iterators\n+}\n+\n+/// This trait represents actions which can be performed on sets to mutate\n+/// them.\n+pub trait MutableSet<T>: Set<T> + Mutable {\n+    /// Add a value to the set. Return true if the value was not already\n+    /// present in the set.\n+    fn insert(&mut self, value: T) -> bool;\n+\n+    /// Remove a value from the set. Return true if the value was\n+    /// present in the set.\n+    fn remove(&mut self, value: &T) -> bool;\n+}\n+\n+/// A double-ended sequence that allows querying, insertion and deletion at both\n+/// ends.\n+pub trait Deque<T> : Mutable {\n+    /// Provide a reference to the front element, or None if the sequence is\n+    /// empty\n+    fn front<'a>(&'a self) -> Option<&'a T>;\n+\n+    /// Provide a mutable reference to the front element, or None if the\n+    /// sequence is empty\n+    fn front_mut<'a>(&'a mut self) -> Option<&'a mut T>;\n+\n+    /// Provide a reference to the back element, or None if the sequence is\n+    /// empty\n+    fn back<'a>(&'a self) -> Option<&'a T>;\n+\n+    /// Provide a mutable reference to the back element, or None if the sequence\n+    /// is empty\n+    fn back_mut<'a>(&'a mut self) -> Option<&'a mut T>;\n+\n+    /// Insert an element first in the sequence\n+    fn push_front(&mut self, elt: T);\n+\n+    /// Insert an element last in the sequence\n+    fn push_back(&mut self, elt: T);\n+\n+    /// Remove the last element and return it, or None if the sequence is empty\n+    fn pop_back(&mut self) -> Option<T>;\n+\n+    /// Remove the first element and return it, or None if the sequence is empty\n+    fn pop_front(&mut self) -> Option<T>;\n }\n \n // FIXME(#14344) this shouldn't be necessary"}, {"sha": "ea3e7d1747170d0d6a1ba197fc7d61de7069af3f", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -17,6 +17,7 @@ use core::prelude::*;\n use core::mem::{zeroed, replace, swap};\n use core::ptr;\n \n+use {Collection, Mutable};\n use slice;\n use vec::Vec;\n \n@@ -26,7 +27,7 @@ pub struct PriorityQueue<T> {\n     data: Vec<T>,\n }\n \n-impl<T: Ord> Container for PriorityQueue<T> {\n+impl<T: Ord> Collection for PriorityQueue<T> {\n     /// Returns the length of the queue\n     fn len(&self) -> uint { self.data.len() }\n }"}, {"sha": "addf73d67a88e7f8e0e2cb804c5f8652710f21f6", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -11,15 +11,15 @@\n //! A double-ended queue implemented as a circular buffer\n //!\n //! RingBuf implements the trait Deque. It should be imported with `use\n-//! collections::deque::Deque`.\n+//! collections::Deque`.\n \n use core::prelude::*;\n \n use core::cmp;\n use core::fmt;\n use core::iter::RandomAccessIterator;\n \n-use deque::Deque;\n+use {Deque, Collection, Mutable};\n use vec::Vec;\n \n static INITIAL_CAPACITY: uint = 8u; // 2^3\n@@ -33,7 +33,7 @@ pub struct RingBuf<T> {\n     elts: Vec<Option<T>>\n }\n \n-impl<T> Container for RingBuf<T> {\n+impl<T> Collection for RingBuf<T> {\n     /// Return the number of elements in the RingBuf\n     fn len(&self) -> uint { self.nelts }\n }\n@@ -415,7 +415,7 @@ mod tests {\n     use test::Bencher;\n     use test;\n \n-    use deque::Deque;\n+    use {Deque, Mutable};\n     use super::RingBuf;\n     use vec::Vec;\n "}, {"sha": "1bc563686933e5efa23a23d4407ad8b8c878f55c", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -109,6 +109,8 @@ use core::mem::transmute;\n use core::mem;\n use core::ptr;\n use core::iter::{range_step, MultiplicativeIterator};\n+\n+use Collection;\n use vec::Vec;\n \n pub use core::slice::{ref_slice, mut_ref_slice, Splits, Windows};\n@@ -296,9 +298,9 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n \n         let len = self.len();\n         let data_size = len.checked_mul(&mem::size_of::<T>());\n-        let data_size = ::expect(data_size, \"overflow in to_owned()\");\n+        let data_size = data_size.expect(\"overflow in to_owned()\");\n         let size = mem::size_of::<RawVec<()>>().checked_add(&data_size);\n-        let size = ::expect(size, \"overflow in to_owned()\");\n+        let size = size.expect(\"overflow in to_owned()\");\n \n         unsafe {\n             // this should pass the real required alignment\n@@ -865,6 +867,7 @@ mod tests {\n     use std::rt;\n     use slice::*;\n \n+    use Mutable;\n     use vec::Vec;\n \n     fn square(n: uint) -> uint { n * n }"}, {"sha": "cc901864ab532b3eab8bbb9ba95a1ac5527b59e0", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -21,6 +21,7 @@ use core::fmt;\n use core::iter::{Enumerate, FilterMap};\n use core::mem::replace;\n \n+use {Collection, Mutable, Map, MutableMap};\n use {vec, slice};\n use vec::Vec;\n \n@@ -29,7 +30,7 @@ pub struct SmallIntMap<T> {\n     v: Vec<Option<T>>,\n }\n \n-impl<V> Container for SmallIntMap<V> {\n+impl<V> Collection for SmallIntMap<V> {\n     /// Return the number of elements in the map\n     fn len(&self) -> uint {\n         self.v.iter().filter(|elt| elt.is_some()).count()\n@@ -123,7 +124,7 @@ impl<V> SmallIntMap<V> {\n     }\n \n     pub fn get<'a>(&'a self, key: &uint) -> &'a V {\n-        ::expect(self.find(key), \"key not present\")\n+        self.find(key).expect(\"key not present\")\n     }\n \n     /// An iterator visiting all key-value pairs in ascending order by the keys.\n@@ -264,6 +265,7 @@ double_ended_iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n mod test_map {\n     use std::prelude::*;\n \n+    use {Map, MutableMap, Mutable};\n     use super::SmallIntMap;\n \n     #[test]"}, {"sha": "49d8775dd9cb649a97570ac2416828c7779b7e7d", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -76,6 +76,7 @@ use core::cmp;\n use core::iter::AdditiveIterator;\n use core::mem;\n \n+use Collection;\n use hash;\n use string::String;\n use vec::Vec;\n@@ -610,7 +611,7 @@ impl<'a> StrAllocating for MaybeOwned<'a> {\n     }\n }\n \n-impl<'a> Container for MaybeOwned<'a> {\n+impl<'a> Collection for MaybeOwned<'a> {\n     #[inline]\n     fn len(&self) -> uint { self.as_slice().len() }\n }\n@@ -2036,7 +2037,7 @@ mod tests {\n \n     #[test]\n     fn test_str_container() {\n-        fn sum_len<S: Container>(v: &[S]) -> uint {\n+        fn sum_len<S: Collection>(v: &[S]) -> uint {\n             v.iter().map(|x| x.len()).sum()\n         }\n "}, {"sha": "76f53c9b257493216ef5ee9e715ac845fd0560de", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -18,6 +18,7 @@ use core::mem;\n use core::ptr;\n use core::raw::Slice;\n \n+use {Collection, Mutable};\n use hash;\n use str;\n use str::{CharRange, StrAllocating};\n@@ -279,7 +280,7 @@ impl String {\n     }\n }\n \n-impl Container for String {\n+impl Collection for String {\n     #[inline]\n     fn len(&self) -> uint {\n         self.vec.len()\n@@ -356,6 +357,7 @@ mod tests {\n     use std::prelude::*;\n     use test::Bencher;\n \n+    use Mutable;\n     use str::{Str, StrSlice};\n     use super::String;\n "}, {"sha": "489fe60cebf0ec021c8bb744a57dc7ee1be9aa98", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -22,6 +22,7 @@ use core::iter;\n use core::mem::{replace, swap};\n use core::ptr;\n \n+use {Collection, Mutable, Set, MutableSet, MutableMap, Map};\n use vec::Vec;\n \n // This is implemented as an AA tree, which is a simplified variation of\n@@ -86,7 +87,7 @@ impl<K: Ord + Show, V: Show> Show for TreeMap<K, V> {\n     }\n }\n \n-impl<K: Ord, V> Container for TreeMap<K, V> {\n+impl<K: Ord, V> Collection for TreeMap<K, V> {\n     fn len(&self) -> uint { self.length }\n }\n \n@@ -579,7 +580,7 @@ impl<T: Ord + Show> Show for TreeSet<T> {\n     }\n }\n \n-impl<T: Ord> Container for TreeSet<T> {\n+impl<T: Ord> Collection for TreeSet<T> {\n     #[inline]\n     fn len(&self) -> uint { self.map.len() }\n }\n@@ -1006,6 +1007,7 @@ mod test_treemap {\n     use std::rand::Rng;\n     use std::rand;\n \n+    use {Map, MutableMap, Mutable};\n     use super::{TreeMap, TreeNode};\n \n     #[test]\n@@ -1437,7 +1439,6 @@ mod test_treemap {\n \n #[cfg(test)]\n mod bench {\n-    use std::prelude::*;\n     use test::Bencher;\n \n     use super::TreeMap;\n@@ -1500,6 +1501,7 @@ mod bench {\n mod test_set {\n     use std::prelude::*;\n \n+    use {Set, MutableSet, Mutable, MutableMap};\n     use super::{TreeMap, TreeSet};\n \n     #[test]"}, {"sha": "6e99d6054a56453b099a1211c8b89c55040be939", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -17,6 +17,7 @@ use core::mem::zeroed;\n use core::mem;\n use core::uint;\n \n+use {Collection, Mutable, Map, MutableMap, Set, MutableSet};\n use slice::{Items, MutItems};\n use slice;\n \n@@ -38,7 +39,7 @@ pub struct TrieMap<T> {\n     length: uint\n }\n \n-impl<T> Container for TrieMap<T> {\n+impl<T> Collection for TrieMap<T> {\n     /// Return the number of elements in the map\n     #[inline]\n     fn len(&self) -> uint { self.length }\n@@ -285,7 +286,7 @@ pub struct TrieSet {\n     map: TrieMap<()>\n }\n \n-impl Container for TrieSet {\n+impl Collection for TrieSet {\n     /// Return the number of elements in the set\n     #[inline]\n     fn len(&self) -> uint { self.map.len() }\n@@ -645,6 +646,7 @@ mod test_map {\n     use std::iter::range_step;\n     use std::uint;\n \n+    use {MutableMap, Map};\n     use super::{TrieMap, TrieNode, Internal, External, Nothing};\n \n     fn check_integrity<T>(trie: &TrieNode<T>) {\n@@ -923,6 +925,7 @@ mod bench_map {\n     use std::rand::{weak_rng, Rng};\n     use test::Bencher;\n \n+    use MutableMap;\n     use super::TrieMap;\n \n     #[bench]\n@@ -1031,6 +1034,7 @@ mod test_set {\n     use std::prelude::*;\n     use std::uint;\n \n+    use {MutableSet, Set};\n     use super::TrieSet;\n \n     #[test]"}, {"sha": "dbef73efc479462b1539acf7ed8d47eb305648c8", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -24,6 +24,7 @@ use core::num;\n use core::ptr;\n use core::uint;\n \n+use {Collection, Mutable};\n use slice::{MutableOrdVector, OwnedVector, MutableVectorAllocating};\n use slice::{Items, MutItems};\n \n@@ -91,8 +92,8 @@ impl<T> Vec<T> {\n         } else if capacity == 0 {\n             Vec::new()\n         } else {\n-            let size = ::expect(capacity.checked_mul(&mem::size_of::<T>()),\n-                                \"capacity overflow\");\n+            let size = capacity.checked_mul(&mem::size_of::<T>())\n+                               .expect(\"capacity overflow\");\n             let ptr = unsafe { allocate(size, mem::min_align_of::<T>()) };\n             Vec { len: 0, cap: capacity, ptr: ptr as *mut T }\n         }\n@@ -393,7 +394,7 @@ impl<T: Ord> Ord for Vec<T> {\n     }\n }\n \n-impl<T> Container for Vec<T> {\n+impl<T> Collection for Vec<T> {\n     #[inline]\n     fn len(&self) -> uint {\n         self.len\n@@ -499,8 +500,8 @@ impl<T> Vec<T> {\n         if mem::size_of::<T>() == 0 { return }\n \n         if capacity > self.cap {\n-            let size = ::expect(capacity.checked_mul(&mem::size_of::<T>()),\n-                                \"capacity overflow\");\n+            let size = capacity.checked_mul(&mem::size_of::<T>())\n+                               .expect(\"capacity overflow\");\n             unsafe {\n                 self.ptr = alloc_or_realloc(self.ptr, size,\n                                             self.cap * mem::size_of::<T>());\n@@ -579,7 +580,7 @@ impl<T> Vec<T> {\n     pub fn push(&mut self, value: T) {\n         if mem::size_of::<T>() == 0 {\n             // zero-size types consume no memory, so we can't rely on the address space running out\n-            self.len = ::expect(self.len.checked_add(&1), \"length overflow\");\n+            self.len = self.len.checked_add(&1).expect(\"length overflow\");\n             unsafe { mem::forget(value); }\n             return\n         }\n@@ -1526,9 +1527,9 @@ impl<T> FromVec<T> for ~[T] {\n     fn from_vec(mut v: Vec<T>) -> ~[T] {\n         let len = v.len();\n         let data_size = len.checked_mul(&mem::size_of::<T>());\n-        let data_size = ::expect(data_size, \"overflow in from_vec()\");\n+        let data_size = data_size.expect(\"overflow in from_vec()\");\n         let size = mem::size_of::<RawVec<()>>().checked_add(&data_size);\n-        let size = ::expect(size, \"overflow in from_vec()\");\n+        let size = size.expect(\"overflow in from_vec()\");\n \n         // In a post-DST world, we can attempt to reuse the Vec allocation by calling\n         // shrink_to_fit() on it. That may involve a reallocation+memcpy, but that's no"}, {"sha": "0bb9289397a70290fdf08572cc8d2a369afb62e6", "filename": "src/libcore/collections.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcollections.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Traits for generic collections\n+\n+/// A trait to represent the abstract idea of a container. The only concrete\n+/// knowledge known is the number of elements contained within.\n+pub trait Collection {\n+    /// Return the number of elements in the container\n+    fn len(&self) -> uint;\n+\n+    /// Return true if the container contains no elements\n+    #[inline]\n+    fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}"}, {"sha": "e8ee3792dcf2cdf423398ec3606003b594d9b192", "filename": "src/libcore/container.rs", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/a6a9e09f98cceecc866c5e6a0d9392735c351ae6/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a9e09f98cceecc866c5e6a0d9392735c351ae6/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=a6a9e09f98cceecc866c5e6a0d9392735c351ae6", "patch": "@@ -1,108 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Traits for generic containers (including `Map` and `Set`)\n-\n-use option::Option;\n-\n-/// A trait to represent the abstract idea of a container. The only concrete\n-/// knowledge known is the number of elements contained within.\n-pub trait Container {\n-    /// Return the number of elements in the container\n-    fn len(&self) -> uint;\n-\n-    /// Return true if the container contains no elements\n-    #[inline]\n-    fn is_empty(&self) -> bool {\n-        self.len() == 0\n-    }\n-}\n-\n-/// A trait to represent mutable containers\n-pub trait Mutable: Container {\n-    /// Clear the container, removing all values.\n-    fn clear(&mut self);\n-}\n-\n-/// A map is a key-value store where values may be looked up by their keys. This\n-/// trait provides basic operations to operate on these stores.\n-pub trait Map<K, V>: Container {\n-    /// Return a reference to the value corresponding to the key\n-    fn find<'a>(&'a self, key: &K) -> Option<&'a V>;\n-\n-    /// Return true if the map contains a value for the specified key\n-    #[inline]\n-    fn contains_key(&self, key: &K) -> bool {\n-        self.find(key).is_some()\n-    }\n-}\n-\n-/// This trait provides basic operations to modify the contents of a map.\n-pub trait MutableMap<K, V>: Map<K, V> + Mutable {\n-    /// Insert a key-value pair into the map. An existing value for a\n-    /// key is replaced by the new value. Return true if the key did\n-    /// not already exist in the map.\n-    #[inline]\n-    fn insert(&mut self, key: K, value: V) -> bool {\n-        self.swap(key, value).is_none()\n-    }\n-\n-    /// Remove a key-value pair from the map. Return true if the key\n-    /// was present in the map, otherwise false.\n-    #[inline]\n-    fn remove(&mut self, key: &K) -> bool {\n-        self.pop(key).is_some()\n-    }\n-\n-    /// Insert a key-value pair from the map. If the key already had a value\n-    /// present in the map, that value is returned. Otherwise None is returned.\n-    fn swap(&mut self, k: K, v: V) -> Option<V>;\n-\n-    /// Removes a key from the map, returning the value at the key if the key\n-    /// was previously in the map.\n-    fn pop(&mut self, k: &K) -> Option<V>;\n-\n-    /// Return a mutable reference to the value corresponding to the key\n-    fn find_mut<'a>(&'a mut self, key: &K) -> Option<&'a mut V>;\n-}\n-\n-/// A set is a group of objects which are each distinct from one another. This\n-/// trait represents actions which can be performed on sets to iterate over\n-/// them.\n-pub trait Set<T>: Container {\n-    /// Return true if the set contains a value\n-    fn contains(&self, value: &T) -> bool;\n-\n-    /// Return true if the set has no elements in common with `other`.\n-    /// This is equivalent to checking for an empty intersection.\n-    fn is_disjoint(&self, other: &Self) -> bool;\n-\n-    /// Return true if the set is a subset of another\n-    fn is_subset(&self, other: &Self) -> bool;\n-\n-    /// Return true if the set is a superset of another\n-    fn is_superset(&self, other: &Self) -> bool {\n-        other.is_subset(self)\n-    }\n-\n-    // FIXME #8154: Add difference, sym. difference, intersection and union iterators\n-}\n-\n-/// This trait represents actions which can be performed on sets to mutate\n-/// them.\n-pub trait MutableSet<T>: Set<T> + Mutable {\n-    /// Add a value to the set. Return true if the value was not already\n-    /// present in the set.\n-    fn insert(&mut self, value: T) -> bool;\n-\n-    /// Remove a value from the set. Return true if the value was\n-    /// present in the set.\n-    fn remove(&mut self, value: &T) -> bool;\n-}"}, {"sha": "f326195be1607f270e6283c4a0830b6c9816b563", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -11,7 +11,7 @@\n #![allow(missing_doc)]\n \n use char;\n-use container::Container;\n+use collections::Collection;\n use fmt;\n use iter::{Iterator, range, DoubleEndedIterator};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive, Primitive};"}, {"sha": "37ef325d937e23d789d968c34fc2f06fdf7872fb", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -15,7 +15,7 @@\n use any;\n use cell::Cell;\n use char::Char;\n-use container::Container;\n+use collections::Collection;\n use iter::{Iterator, range};\n use kinds::Copy;\n use mem;"}, {"sha": "f36acf344e4cfe71adb2bc5c7c59f0a5563345f2", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -14,7 +14,7 @@\n \n #![allow(unsigned_negate)]\n \n-use container::Container;\n+use collections::Collection;\n use fmt;\n use iter::{Iterator, DoubleEndedIterator};\n use num::{Int, cast, zero};"}, {"sha": "5661c6683739b58ffb7b80c7d0a8218265dc7a1e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -108,7 +108,7 @@ pub mod ptr;\n #[cfg(not(test))] pub mod cmp;\n pub mod clone;\n pub mod default;\n-pub mod container;\n+pub mod collections;\n \n /* Core types and methods on primitives */\n "}, {"sha": "df9c0e67b0d6d3ab1176df298b39aacffd3db9d4", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -47,7 +47,7 @@ pub use char::Char;\n pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n-pub use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n+pub use collections::Collection;\n pub use iter::{FromIterator, Extendable};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};"}, {"sha": "ed6b73df38d4d42ebb25feaac70186b6a316d2ca", "filename": "src/libcore/should_not_exist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Fshould_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Fshould_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fshould_not_exist.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -25,7 +25,7 @@\n // Currently, no progress has been made on this list.\n \n use clone::Clone;\n-use container::Container;\n+use collections::Collection;\n use finally::try_finally;\n use intrinsics;\n use iter::{range, Iterator};"}, {"sha": "585373ec70ca560cea9de2e4b4d2b953a8ca29b4", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -16,7 +16,7 @@\n \n use mem::transmute;\n use clone::Clone;\n-use container::Container;\n+use collections::Collection;\n use cmp::{PartialEq, Ord, Ordering, Less, Equal, Greater};\n use cmp;\n use default::Default;\n@@ -253,7 +253,7 @@ pub mod traits {\n \n     use cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering, Equiv};\n     use iter::order;\n-    use container::Container;\n+    use collections::Collection;\n \n     impl<'a,T:PartialEq> PartialEq for &'a [T] {\n         fn eq(&self, other: & &'a [T]) -> bool {\n@@ -347,15 +347,15 @@ impl<T> Vector<T> for ~[T] {\n     fn as_slice<'a>(&'a self) -> &'a [T] { let v: &'a [T] = *self; v }\n }\n \n-impl<'a, T> Container for &'a [T] {\n+impl<'a, T> Collection for &'a [T] {\n     /// Returns the length of a vector\n     #[inline]\n     fn len(&self) -> uint {\n         self.repr().len\n     }\n }\n \n-impl<T> Container for ~[T] {\n+impl<T> Collection for ~[T] {\n     /// Returns the length of a vector\n     #[inline]\n     fn len(&self) -> uint {\n@@ -1205,7 +1205,7 @@ pub mod raw {\n \n /// Operations on `[u8]`.\n pub mod bytes {\n-    use container::Container;\n+    use collections::Collection;\n     use ptr;\n     use slice::MutableVector;\n "}, {"sha": "c01997f1c42c75e48491d658d00baab15ea84c80", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -19,7 +19,7 @@ use char;\n use clone::Clone;\n use cmp;\n use cmp::{PartialEq, Eq};\n-use container::Container;\n+use collections::Collection;\n use default::Default;\n use iter::{Filter, Map, Iterator};\n use iter::{DoubleEndedIterator, ExactSize};\n@@ -866,7 +866,7 @@ static TAG_CONT_U8: u8 = 128u8;\n /// Unsafe operations\n pub mod raw {\n     use mem;\n-    use container::Container;\n+    use collections::Collection;\n     use ptr::RawPtr;\n     use raw::Slice;\n     use slice::{ImmutableVector};\n@@ -930,8 +930,8 @@ Section: Trait implementations\n #[cfg(not(test))]\n #[allow(missing_doc)]\n pub mod traits {\n-    use container::Container;\n     use cmp::{Ord, Ordering, Less, Equal, Greater, PartialEq, PartialOrd, Equiv, Eq};\n+    use collections::Collection;\n     use iter::Iterator;\n     use option::{Some, None};\n     use str::{Str, StrSlice, eq_slice};\n@@ -987,7 +987,7 @@ impl<'a> Str for &'a str {\n     fn as_slice<'a>(&'a self) -> &'a str { *self }\n }\n \n-impl<'a> Container for &'a str {\n+impl<'a> Collection for &'a str {\n     #[inline]\n     fn len(&self) -> uint {\n         self.repr().len"}, {"sha": "a499c1e125dede9e2ec300e2caa962a87b2a3189", "filename": "src/libregex/re.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -775,7 +775,7 @@ impl<'t> Captures<'t> {\n     }\n }\n \n-impl<'t> Container for Captures<'t> {\n+impl<'t> Collection for Captures<'t> {\n     /// Returns the number of captured groups.\n     #[inline]\n     fn len(&self) -> uint {"}, {"sha": "9fe403159f2b7ec3ac23bb86e262b68d194b0102", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -45,7 +45,6 @@\n \n #![allow(unsigned_negate)]\n \n-use std::container::Map;\n use libc::c_ulonglong;\n use std::num::{Bitwise};\n use std::rc::Rc;"}, {"sha": "b4d9ac7efbebcce50deb04af89445f41f9756a37", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -229,7 +229,7 @@ impl Drop for CString {\n     }\n }\n \n-impl Container for CString {\n+impl Collection for CString {\n     /// Return the number of bytes in the CString (not including the NUL terminator).\n     ///\n     /// # Failure"}, {"sha": "b9edc9a811e43486af96ba81ebc99df56c73a4de", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations on ASCII strings and characters\n \n-use container::Container;\n+use collections::Collection;\n use fmt;\n use iter::Iterator;\n use mem;"}, {"sha": "e8a158ad230aa40fac8601942b609f1480fde8ee", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -33,7 +33,7 @@\n //! handled correctly, i.e. that allocated memory is eventually freed\n //! if necessary.\n \n-use container::Container;\n+use collections::Collection;\n use kinds::Send;\n use mem;\n use ops::Drop;\n@@ -149,7 +149,7 @@ impl<T> CVec<T> {\n     }\n }\n \n-impl<T> Container for CVec<T> {\n+impl<T> Collection for CVec<T> {\n     fn len(&self) -> uint { self.len }\n }\n "}, {"sha": "a780b63bfd0269c767732ea51d6690d04caa789d", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -12,7 +12,7 @@\n \n use clone::Clone;\n use cmp::{max, Eq, Equiv, PartialEq};\n-use container::{Container, Mutable, Set, MutableSet, Map, MutableMap};\n+use collections::{Collection, Mutable, Set, MutableSet, Map, MutableMap};\n use default::Default;\n use fmt::Show;\n use fmt;\n@@ -930,7 +930,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     }\n }\n \n-impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> Container for HashMap<K, V, H> {\n+impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> Collection for HashMap<K, V, H> {\n     /// Return the number of elements in the map\n     fn len(&self) -> uint { self.table.size() }\n }\n@@ -1504,7 +1504,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> PartialEq for HashSet<T, H> {\n \n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Eq for HashSet<T, H> {}\n \n-impl<T: Eq + Hash<S>, S, H: Hasher<S>> Container for HashSet<T, H> {\n+impl<T: Eq + Hash<S>, S, H: Hasher<S>> Collection for HashSet<T, H> {\n     fn len(&self) -> uint { self.map.len() }\n }\n \n@@ -2159,8 +2159,8 @@ mod test_set {\n     use prelude::*;\n \n     use super::HashSet;\n-    use container::Container;\n     use slice::ImmutableEqVector;\n+    use collections::Collection;\n \n     #[test]\n     fn test_disjoint() {"}, {"sha": "72d96804d6d7e4dd99a571ff7248c2ca37bb8017", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -38,8 +38,7 @@\n //! ```\n \n use cmp::{PartialEq, Eq};\n-use collections::HashMap;\n-use container::{Container, Mutable, MutableMap};\n+use collections::{HashMap, Collection, Mutable, MutableMap};\n use fmt;\n use hash::Hash;\n use iter::{range, Iterator};\n@@ -227,7 +226,7 @@ impl<A: fmt::Show + Hash + Eq, B: fmt::Show> fmt::Show for LruCache<A, B> {\n     }\n }\n \n-impl<K: Hash + Eq, V> Container for LruCache<K, V> {\n+impl<K: Hash + Eq, V> Collection for LruCache<K, V> {\n     /// Return the number of key-value pairs in the cache.\n     fn len(&self) -> uint {\n         self.map.len()"}, {"sha": "9e5288f9541b8c1869ac400f8936e36998dbe2b2", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -12,10 +12,12 @@\n  * Collection types.\n  */\n \n-pub use core_collections::{Bitv, BitvSet, BTree, Deque, DList, EnumSet};\n+pub use core_collections::{Collection, Mutable, Map, MutableMap};\n+pub use core_collections::{Set, MutableSet, Deque};\n+pub use core_collections::{Bitv, BitvSet, BTree, DList, EnumSet};\n pub use core_collections::{PriorityQueue, RingBuf, SmallIntMap};\n pub use core_collections::{TreeMap, TreeSet, TrieMap, TrieSet};\n-pub use core_collections::{bitv, btree, deque, dlist, enum_set};\n+pub use core_collections::{bitv, btree, dlist, enum_set};\n pub use core_collections::{priority_queue, ringbuf, smallintmap, treemap, trie};\n \n pub use self::hashmap::{HashMap, HashSet};"}, {"sha": "84ef6d0aa8fcf51ecadb6afdeedd6691a43ed80c", "filename": "src/libstd/comm/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fcomm%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fcomm%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fsync.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -33,7 +33,7 @@\n /// of a synchronous channel. There are a few branches for the unbuffered case,\n /// but they're mostly just relevant to blocking senders.\n \n-use container::Container;\n+use collections::Collection;\n use iter::Iterator;\n use kinds::Send;\n use mem;"}, {"sha": "9450f7798edcf97c3db3c59cde615ffea6eec4b0", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -11,7 +11,7 @@\n //! Buffering wrappers for I/O traits\n \n use cmp;\n-use container::Container;\n+use collections::Collection;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n use iter::ExactSize;\n use ops::Drop;"}, {"sha": "529536b0a0da78317bae8db7fedef77408c70f4f", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -10,7 +10,7 @@\n \n use clone::Clone;\n use cmp;\n-use container::Container;\n+use collections::Collection;\n use comm::{Sender, Receiver};\n use io;\n use option::{None, Option, Some};"}, {"sha": "d61518d4ee76f9aa36db766b634eebdf4c3a8402", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -15,7 +15,7 @@\n // FIXME: Not sure how this should be structured\n // FIXME: Iteration should probably be considered separately\n \n-use container::Container;\n+use collections::Collection;\n use iter::Iterator;\n use option::{Option, Some, None};\n use result::{Ok, Err};\n@@ -504,7 +504,7 @@ mod test {\n mod bench {\n     extern crate test;\n \n-    use container::Container;\n+    use collections::Collection;\n     use prelude::*;\n     use self::test::Bencher;\n "}, {"sha": "5259200133ae1974e1af84e02146849f8a2110ed", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -51,7 +51,7 @@ fs::unlink(&path);\n \n use c_str::ToCStr;\n use clone::Clone;\n-use container::Container;\n+use collections::Collection;\n use io;\n use iter::Iterator;\n use kinds::Send;"}, {"sha": "f0fbe4529b0e959c3b6aeb88155400332cf2fdd8", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -11,7 +11,7 @@\n //! Readers and Writers for in-memory buffers\n \n use cmp::min;\n-use container::Container;\n+use collections::Collection;\n use option::None;\n use result::{Err, Ok};\n use io;"}, {"sha": "6f3eec01e8e34678b8ed133e57422e44021680ba", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -214,7 +214,7 @@ responding to errors that may occur while attempting to read the numbers.\n #![deny(unused_must_use)]\n \n use char::Char;\n-use container::Container;\n+use collections::Collection;\n use fmt;\n use int;\n use iter::Iterator;"}, {"sha": "2c54bd895e952f59a635bf2041f0cd8d7cb324de", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -15,7 +15,7 @@\n \n #![allow(missing_doc)]\n \n-use container::Container;\n+use collections::Collection;\n use fmt;\n use from_str::FromStr;\n use iter::Iterator;"}, {"sha": "fbdbc13e1b430ed1ea95462c2e802e970c6a3a90", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -144,7 +144,6 @@ pub use core::cell;\n pub use core::char;\n pub use core::clone;\n #[cfg(not(test))] pub use core::cmp;\n-pub use core::container;\n pub use core::default;\n pub use core::finally;\n pub use core::intrinsics;"}, {"sha": "5028987f44fdd239e85d9421e6867e5482d68fb1", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -12,7 +12,7 @@\n \n use char;\n use clone::Clone;\n-use container::Container;\n+use collections::Collection;\n use num::{NumCast, Zero, One, cast, Int};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num;"}, {"sha": "90df18106f0a5b758f8a0ecf18e321ed830b346f", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -30,7 +30,7 @@\n #![allow(non_snake_case_functions)]\n \n use clone::Clone;\n-use container::Container;\n+use collections::Collection;\n use fmt;\n use iter::Iterator;\n use libc::{c_void, c_int};"}, {"sha": "a101f0432126e2ff4de213bd9303071fc42f9514", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -65,7 +65,7 @@ println!(\"path exists: {}\", path.exists());\n \n #![deny(deprecated_owned_vector)]\n \n-use container::Container;\n+use collections::Collection;\n use c_str::CString;\n use clone::Clone;\n use fmt;"}, {"sha": "171535edbeb346b2ac4ce429a9e4f3609db81eba", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -13,7 +13,7 @@\n use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::{PartialEq, Eq};\n-use container::Container;\n+use collections::Collection;\n use from_str::FromStr;\n use hash;\n use io::Writer;"}, {"sha": "011dfa6eeacc1e5f629164ff2b1d69b3b89fa86e", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -14,7 +14,7 @@ use ascii::AsciiCast;\n use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::{PartialEq, Eq};\n-use container::Container;\n+use collections::Collection;\n use from_str::FromStr;\n use hash;\n use io::Writer;"}, {"sha": "485c2140a8d1b035f8b2271a8dba3f4394ff6517", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -60,8 +60,8 @@\n #[doc(no_inline)] pub use clone::Clone;\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[doc(no_inline)] pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n-#[doc(no_inline)] pub use container::{Container, Mutable, Map, MutableMap};\n-#[doc(no_inline)] pub use container::{Set, MutableSet};\n+#[doc(no_inline)] pub use collections::{Collection, Mutable, Map, MutableMap};\n+#[doc(no_inline)] pub use collections::{Set, MutableSet};\n #[doc(no_inline)] pub use iter::{FromIterator, Extendable, ExactSize};\n #[doc(no_inline)] pub use iter::{Iterator, DoubleEndedIterator};\n #[doc(no_inline)] pub use iter::{RandomAccessIterator, CloneableIterator};"}, {"sha": "2654b7a1acc6af5145592e931b67a66e1ccb071d", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -62,7 +62,7 @@ mod imp {\n mod imp {\n     extern crate libc;\n \n-    use container::Container;\n+    use core_collections::Collection;\n     use io::{IoResult, IoError};\n     use mem;\n     use ops::Drop;"}, {"sha": "8655d1e47d51a01772f112c8fde0102bc45c2a82", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -10,7 +10,7 @@\n \n //! A wrapper around any Reader to treat it as an RNG.\n \n-use container::Container;\n+use collections::Collection;\n use io::Reader;\n use rand::Rng;\n use result::{Ok, Err};"}, {"sha": "83fc95267afdf3333d82335e367bf18e793514c5", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -13,7 +13,7 @@\n #![allow(non_camel_case_types)]\n \n use char::Char;\n-use container::Container;\n+use collections::Collection;\n use from_str::from_str;\n use io::{IoResult, Writer};\n use iter::Iterator;\n@@ -348,7 +348,7 @@ mod imp {\n \n     #[cfg(not(target_os = \"macos\"))]\n     fn print(w: &mut Writer, idx: int, addr: *libc::c_void) -> IoResult<()> {\n-        use container::Container;\n+        use collections::Collection;\n         use iter::Iterator;\n         use os;\n         use path::GenericPath;\n@@ -602,7 +602,7 @@ mod imp {\n #[allow(dead_code, uppercase_variables)]\n mod imp {\n     use c_str::CString;\n-    use container::Container;\n+    use core_collections::Collection;\n     use intrinsics;\n     use io::{IoResult, Writer};\n     use libc;"}, {"sha": "016dd879dcd838c3ee2f915a29fe269b6117daf6", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -121,7 +121,7 @@ impl<T: PartialEq> PartialEq for OwnedSlice<T> {\n \n impl<T: Eq> Eq for OwnedSlice<T> {}\n \n-impl<T> Container for OwnedSlice<T> {\n+impl<T> Collection for OwnedSlice<T> {\n     fn len(&self) -> uint { self.len }\n }\n "}, {"sha": "a3b2c23dfdf2d9b7219fdb187171a7023c187735", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -23,7 +23,7 @@ enum SmallVectorRepr<T> {\n     Many(Vec<T> ),\n }\n \n-impl<T> Container for SmallVector<T> {\n+impl<T> Collection for SmallVector<T> {\n     fn len(&self) -> uint {\n         match self.repr {\n             Zero => 0,"}, {"sha": "bb5f020e78c9d9ac1d1bd78f805e15278575f580", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     let x: Box<HashMap<int, int>> = box HashMap::new();\n     let x: Box<Map<int, int>> = x;\n     let y: Box<Map<uint, int>> = box x;\n-    //~^ ERROR failed to find an implementation of trait core::container::Map<uint,int>\n-    //         for ~core::container::Map<int,int>:Send\n+    //~^ ERROR failed to find an implementation of trait collections::Map<uint,int>\n+    //         for ~collections::Map<int,int>:Send\n }"}, {"sha": "924625faa1010a87338d6f025674716ae56bcee9", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -48,7 +48,7 @@ impl<T> cat<T> {\n     }\n }\n \n-impl<T> Container for cat<T> {\n+impl<T> Collection for cat<T> {\n     fn len(&self) -> uint { self.meows as uint }\n     fn is_empty(&self) -> bool { self.meows == 0 }\n }"}, {"sha": "8b041ed3a3e768bba07762abe4d789cec5838de3", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -10,7 +10,7 @@\n \n extern crate collections;\n \n-use std::container::{Map, MutableMap};\n+use std::collections::{Map, MutableMap};\n use std::str::{SendStr, Owned, Slice};\n use std::collections::HashMap;\n use std::option::Some;"}, {"sha": "68eca8f21a7f5d37c9b4a94e55a96034593bd648", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55f64f99726a44283211d91a702081fe4a1855b/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f64f99726a44283211d91a702081fe4a1855b/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=e55f64f99726a44283211d91a702081fe4a1855b", "patch": "@@ -10,7 +10,7 @@\n \n extern crate collections;\n \n-use std::container::{ Map, MutableMap};\n+use std::collections::{ Map, MutableMap};\n use std::str::{SendStr, Owned, Slice};\n use std::to_str::ToStr;\n use self::collections::TreeMap;"}]}