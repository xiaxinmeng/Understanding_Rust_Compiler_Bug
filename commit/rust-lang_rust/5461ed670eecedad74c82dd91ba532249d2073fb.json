{"sha": "5461ed670eecedad74c82dd91ba532249d2073fb", "node_id": "C_kwDOAAsO6NoAKDU0NjFlZDY3MGVlY2VkYWQ3NGM4MmRkOTFiYTUzMjI0OWQyMDczZmI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-16T14:46:02Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-16T23:39:46Z"}, "message": "Don't lint `if_same_then_else` with `if let` conditions", "tree": {"sha": "6918dee8a0f81e8706dbbfd2c38f08ba70b4f655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6918dee8a0f81e8706dbbfd2c38f08ba70b4f655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5461ed670eecedad74c82dd91ba532249d2073fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5461ed670eecedad74c82dd91ba532249d2073fb", "html_url": "https://github.com/rust-lang/rust/commit/5461ed670eecedad74c82dd91ba532249d2073fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5461ed670eecedad74c82dd91ba532249d2073fb/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d27bd846c61b50a2df3470360e6ed0613a5815f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d27bd846c61b50a2df3470360e6ed0613a5815f", "html_url": "https://github.com/rust-lang/rust/commit/0d27bd846c61b50a2df3470360e6ed0613a5815f"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "f44d370a8fd031e51073ef5f675879cb67da6cb6", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5461ed670eecedad74c82dd91ba532249d2073fb/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5461ed670eecedad74c82dd91ba532249d2073fb/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=5461ed670eecedad74c82dd91ba532249d2073fb", "patch": "@@ -183,7 +183,7 @@ impl<'tcx> LateLintPass<'tcx> for CopyAndPaste {\n                 lint_same_cond(cx, &conds);\n                 lint_same_fns_in_if_cond(cx, &conds);\n                 // Block duplication\n-                lint_same_then_else(cx, &blocks, conds.len() == blocks.len(), expr);\n+                lint_same_then_else(cx, &conds, &blocks, conds.len() == blocks.len(), expr);\n             }\n         }\n     }\n@@ -192,6 +192,7 @@ impl<'tcx> LateLintPass<'tcx> for CopyAndPaste {\n /// Implementation of `BRANCHES_SHARING_CODE` and `IF_SAME_THEN_ELSE` if the blocks are equal.\n fn lint_same_then_else<'tcx>(\n     cx: &LateContext<'tcx>,\n+    conds: &[&'tcx Expr<'_>],\n     blocks: &[&Block<'tcx>],\n     has_conditional_else: bool,\n     expr: &'tcx Expr<'_>,\n@@ -204,7 +205,7 @@ fn lint_same_then_else<'tcx>(\n     // Check if each block has shared code\n     let has_expr = blocks[0].expr.is_some();\n \n-    let (start_eq, mut end_eq, expr_eq) = if let Some(block_eq) = scan_block_for_eq(cx, blocks) {\n+    let (start_eq, mut end_eq, expr_eq) = if let Some(block_eq) = scan_block_for_eq(cx, conds, blocks) {\n         (block_eq.start_eq, block_eq.end_eq, block_eq.expr_eq)\n     } else {\n         return;\n@@ -316,14 +317,14 @@ struct BlockEqual {\n \n /// This function can also trigger the `IF_SAME_THEN_ELSE` in which case it'll return `None` to\n /// abort any further processing and avoid duplicate lint triggers.\n-fn scan_block_for_eq(cx: &LateContext<'_>, blocks: &[&Block<'_>]) -> Option<BlockEqual> {\n+fn scan_block_for_eq(cx: &LateContext<'_>, conds: &[&Expr<'_>], blocks: &[&Block<'_>]) -> Option<BlockEqual> {\n     let mut start_eq = usize::MAX;\n     let mut end_eq = usize::MAX;\n     let mut expr_eq = true;\n-    let mut iter = blocks.windows(2);\n-    while let Some(&[win0, win1]) = iter.next() {\n-        let l_stmts = win0.stmts;\n-        let r_stmts = win1.stmts;\n+    let mut iter = blocks.windows(2).enumerate();\n+    while let Some((i, &[block0, block1])) = iter.next() {\n+        let l_stmts = block0.stmts;\n+        let r_stmts = block1.stmts;\n \n         // `SpanlessEq` now keeps track of the locals and is therefore context sensitive clippy#6752.\n         // The comparison therefore needs to be done in a way that builds the correct context.\n@@ -340,22 +341,26 @@ fn scan_block_for_eq(cx: &LateContext<'_>, blocks: &[&Block<'_>]) -> Option<Bloc\n             it1.zip(it2)\n                 .fold(0, |acc, (l, r)| if evaluator.eq_stmt(l, r) { acc + 1 } else { 0 })\n         };\n-        let block_expr_eq = both(&win0.expr, &win1.expr, |l, r| evaluator.eq_expr(l, r));\n+        let block_expr_eq = both(&block0.expr, &block1.expr, |l, r| evaluator.eq_expr(l, r));\n \n         // IF_SAME_THEN_ELSE\n         if_chain! {\n             if block_expr_eq;\n             if l_stmts.len() == r_stmts.len();\n             if l_stmts.len() == current_start_eq;\n-            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, win0.hir_id);\n-            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, win1.hir_id);\n+            // `conds` may have one last item than `blocks`.\n+            // Any `i` from `blocks.windows(2)` will exist in `conds`, but `i+1` may not exist on the last iteration.\n+            if !matches!(conds[i].kind, ExprKind::Let(..));\n+            if !matches!(conds.get(i + 1).map(|e| &e.kind), Some(ExprKind::Let(..)));\n+            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, block0.hir_id);\n+            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, block1.hir_id);\n             then {\n                 span_lint_and_note(\n                     cx,\n                     IF_SAME_THEN_ELSE,\n-                    win0.span,\n+                    block0.span,\n                     \"this `if` has identical blocks\",\n-                    Some(win1.span),\n+                    Some(block1.span),\n                     \"same as this\",\n                 );\n "}, {"sha": "0016009a02f5858b39461dba03a777ba713ebf39", "filename": "tests/ui/if_same_then_else2.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5461ed670eecedad74c82dd91ba532249d2073fb/tests%2Fui%2Fif_same_then_else2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5461ed670eecedad74c82dd91ba532249d2073fb/tests%2Fui%2Fif_same_then_else2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.rs?ref=5461ed670eecedad74c82dd91ba532249d2073fb", "patch": "@@ -138,6 +138,23 @@ fn if_same_then_else2() -> Result<&'static str, ()> {\n         let (y, x) = (1, 2);\n         return Ok(&foo[x..y]);\n     }\n+\n+    // Issue #7579\n+    let _ = if let Some(0) = None { 0 } else { 0 };\n+\n+    if true {\n+        return Err(());\n+    } else if let Some(0) = None {\n+        return Err(());\n+    }\n+\n+    let _ = if let Some(0) = None {\n+        0\n+    } else if let Some(1) = None {\n+        0\n+    } else {\n+        0\n+    };\n }\n \n fn main() {}"}]}