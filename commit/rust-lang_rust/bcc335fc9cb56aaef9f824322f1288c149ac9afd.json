{"sha": "bcc335fc9cb56aaef9f824322f1288c149ac9afd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYzMzNWZjOWNiNTZhYWVmOWY4MjQzMjJmMTI4OGMxNDlhYzlhZmQ=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-09T06:20:46Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T11:01:09Z"}, "message": "Move test to new UI test system", "tree": {"sha": "774b2f3d01eba39742dc61f7e1e6187ca1812ce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/774b2f3d01eba39742dc61f7e1e6187ca1812ce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcc335fc9cb56aaef9f824322f1288c149ac9afd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa0zD1AAoJELb6Bqbg4mZb+wwP/2/6KcO0MEZUjrj/IIRj2EUa\ngeKqTt8CX2g+xh6MSSysgpeMl9LDFLXYJTHh0/1v3cXfoRWK4aXiFQYq/1VpAQRz\nV+52/M83hVoYTBwZaPBl86jVNjQ/gGyA4j5GVOXWDRjkCNnJVYF+6FWzanB7QtGi\n9vXLjEkJ0RneUCAZGsR0uXWr/HM8J4HNLMbroZYYtIz7ez502S8QUkmdLucKHrdS\nyt6V+iZwzP9o919p5U3vooAbWrHfydluAVxNi5lcG4ZNKbbYw0lEZTH305DDqiNv\nAn+7Suwwd26is0L5q8ZwO6xdfJnsJsbocVWsF+n6/35cWxW7IdTTncf1Gmm4sqUX\n33UvQGpwhWKD4v43Occax1WekexE/YtqofK8qIyiCCZVkV9jZZfaIJI58lRLQYj3\nf7fZGMAGFhFb6lXQbpsq46MdTf2itEgboh2sEbI+4oWGbTZx56p3jw6gKxvgfGbw\n0jvwnCqJgyP+nzCexWH/Xb86bLLSyfP+CYGFUslr1k3DcdkaGTWzCsI5oFogMnUg\nr/Gfv8iVvZA4/LCeNE+9ZiEEShGgDo52WzomaV7hLwvQBJORCkA2OnLY3WZQynQG\ndKoYDg/Mamp75+ArkFIgbvZU6WA7vAHSziAGCtinSHu/MWvWRNUIPOYKPAlahfub\nZPemwImaB+O3HdwPG1QT\n=vt8h\n-----END PGP SIGNATURE-----", "payload": "tree 774b2f3d01eba39742dc61f7e1e6187ca1812ce4\nparent a3ff21f4d6a957e337e46d43da4e7f45d80e1504\nauthor Philipp Hansch <dev@phansch.net> 1523254846 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1523790069 +0200\n\nMove test to new UI test system\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc335fc9cb56aaef9f824322f1288c149ac9afd", "html_url": "https://github.com/rust-lang/rust/commit/bcc335fc9cb56aaef9f824322f1288c149ac9afd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcc335fc9cb56aaef9f824322f1288c149ac9afd/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3ff21f4d6a957e337e46d43da4e7f45d80e1504", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ff21f4d6a957e337e46d43da4e7f45d80e1504", "html_url": "https://github.com/rust-lang/rust/commit/a3ff21f4d6a957e337e46d43da4e7f45d80e1504"}], "stats": {"total": 379, "additions": 237, "deletions": 142}, "files": [{"sha": "b580e53c9d864bbf11a35936fb781131aff6f07e", "filename": "tests/compile-fail/map_nil_fn.rs", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/a3ff21f4d6a957e337e46d43da4e7f45d80e1504/tests%2Fcompile-fail%2Fmap_nil_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3ff21f4d6a957e337e46d43da4e7f45d80e1504/tests%2Fcompile-fail%2Fmap_nil_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmap_nil_fn.rs?ref=a3ff21f4d6a957e337e46d43da4e7f45d80e1504", "patch": "@@ -1,142 +0,0 @@\n-#![feature(plugin)]\n-#![feature(const_fn)]\n-#![plugin(clippy)]\n-\n-#![deny(clippy_pedantic)]\n-#![allow(unused, missing_docs_in_private_items)]\n-\n-fn do_nothing<T>(_: T) {}\n-\n-fn diverge<T>(_: T) -> ! {\n-    panic!()\n-}\n-\n-fn plus_one(value: usize) -> usize {\n-    value + 1\n-}\n-\n-struct HasOption {\n-    field: Option<usize>,\n-}\n-\n-impl HasOption {\n-    fn do_option_nothing(self: &HasOption, value: usize) {}\n-\n-    fn do_option_plus_one(self: &HasOption, value: usize) -> usize {\n-        value + 1\n-    }\n-}\n-\n-#[cfg_attr(rustfmt, rustfmt_skip)]\n-fn main() {\n-    let x = HasOption { field: Some(10) };\n-\n-    x.field.map(plus_one);\n-    let _ : Option<()> = x.field.map(do_nothing);\n-\n-    x.field.map(do_nothing);\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil function\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(...) = x.field { do_nothing(...) }\n-\n-    x.field.map(do_nothing);\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil function\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(...) = x.field { do_nothing(...) }\n-\n-    x.field.map(diverge);\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil function\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(...) = x.field { diverge(...) }\n-\n-    let captured = 10;\n-    if let Some(value) = x.field { do_nothing(value + captured) };\n-    let _ : Option<()> = x.field.map(|value| do_nothing(value + captured));\n-\n-    x.field.map(|value| x.do_option_nothing(value + captured));\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { x.do_option_nothing(value + captured) }\n-\n-    x.field.map(|value| { x.do_option_plus_one(value + captured); });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { x.do_option_plus_one(value + captured); }\n-\n-\n-    x.field.map(|value| do_nothing(value + captured));\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { do_nothing(value + captured) }\n-\n-    x.field.map(|value| { do_nothing(value + captured) });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { do_nothing(value + captured) }\n-\n-    x.field.map(|value| { do_nothing(value + captured); });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { do_nothing(value + captured) }\n-\n-    x.field.map(|value| { { do_nothing(value + captured); } });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { do_nothing(value + captured) }\n-\n-\n-    x.field.map(|value| diverge(value + captured));\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { diverge(value + captured) }\n-\n-    x.field.map(|value| { diverge(value + captured) });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { diverge(value + captured) }\n-\n-    x.field.map(|value| { diverge(value + captured); });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { diverge(value + captured) }\n-\n-    x.field.map(|value| { { diverge(value + captured); } });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { diverge(value + captured) }\n-\n-\n-    x.field.map(|value| plus_one(value + captured));\n-    x.field.map(|value| { plus_one(value + captured) });\n-    x.field.map(|value| { let y = plus_one(value + captured); });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { let y = plus_one(value + captured); }\n-\n-    x.field.map(|value| { plus_one(value + captured); });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { plus_one(value + captured); }\n-\n-    x.field.map(|value| { { plus_one(value + captured); } });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { plus_one(value + captured); }\n-\n-\n-    x.field.map(|ref value| { do_nothing(value + captured) });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(ref value) = x.field { do_nothing(value + captured) }\n-\n-\n-    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { ... }\n-\n-    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n-    //~| HELP try this\n-    //~| SUGGESTION if let Some(value) = x.field { ... }\n-}"}, {"sha": "97182764e0d61840458970f27d05e54f58093152", "filename": "tests/ui/option_map_unit_fn.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/bcc335fc9cb56aaef9f824322f1288c149ac9afd/tests%2Fui%2Foption_map_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc335fc9cb56aaef9f824322f1288c149ac9afd/tests%2Fui%2Foption_map_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn.rs?ref=bcc335fc9cb56aaef9f824322f1288c149ac9afd", "patch": "@@ -0,0 +1,81 @@\n+#![warn(option_map_unit_fn)]\n+#![allow(unused)]\n+\n+fn do_nothing<T>(_: T) {}\n+\n+fn diverge<T>(_: T) -> ! {\n+    panic!()\n+}\n+\n+fn plus_one(value: usize) -> usize {\n+    value + 1\n+}\n+\n+struct HasOption {\n+    field: Option<usize>,\n+}\n+\n+impl HasOption {\n+    fn do_option_nothing(self: &Self, value: usize) {}\n+\n+    fn do_option_plus_one(self: &Self, value: usize) -> usize {\n+        value + 1\n+    }\n+}\n+\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n+fn main() {\n+    let x = HasOption { field: Some(10) };\n+\n+    x.field.map(plus_one);\n+    let _ : Option<()> = x.field.map(do_nothing);\n+\n+    x.field.map(do_nothing);\n+\n+    x.field.map(do_nothing);\n+\n+    x.field.map(diverge);\n+\n+    let captured = 10;\n+    if let Some(value) = x.field { do_nothing(value + captured) };\n+    let _ : Option<()> = x.field.map(|value| do_nothing(value + captured));\n+\n+    x.field.map(|value| x.do_option_nothing(value + captured));\n+\n+    x.field.map(|value| { x.do_option_plus_one(value + captured); });\n+\n+\n+    x.field.map(|value| do_nothing(value + captured));\n+\n+    x.field.map(|value| { do_nothing(value + captured) });\n+\n+    x.field.map(|value| { do_nothing(value + captured); });\n+\n+    x.field.map(|value| { { do_nothing(value + captured); } });\n+\n+\n+    x.field.map(|value| diverge(value + captured));\n+\n+    x.field.map(|value| { diverge(value + captured) });\n+\n+    x.field.map(|value| { diverge(value + captured); });\n+\n+    x.field.map(|value| { { diverge(value + captured); } });\n+\n+\n+    x.field.map(|value| plus_one(value + captured));\n+    x.field.map(|value| { plus_one(value + captured) });\n+    x.field.map(|value| { let y = plus_one(value + captured); });\n+\n+    x.field.map(|value| { plus_one(value + captured); });\n+\n+    x.field.map(|value| { { plus_one(value + captured); } });\n+\n+\n+    x.field.map(|ref value| { do_nothing(value + captured) });\n+\n+\n+    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+\n+    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+}"}, {"sha": "ee0945d950370524f0c91dfc257add70bc9c51a0", "filename": "tests/ui/option_map_unit_fn.stderr", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/bcc335fc9cb56aaef9f824322f1288c149ac9afd/tests%2Fui%2Foption_map_unit_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc335fc9cb56aaef9f824322f1288c149ac9afd/tests%2Fui%2Foption_map_unit_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn.stderr?ref=bcc335fc9cb56aaef9f824322f1288c149ac9afd", "patch": "@@ -0,0 +1,156 @@\n+error: called `map(f)` on an Option value where `f` is a unit function\n+  --> $DIR/option_map_unit_fn.rs:33:5\n+   |\n+33 |     x.field.map(do_nothing);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(...) = x.field { do_nothing(...) }`\n+   |\n+   = note: `-D option-map-unit-fn` implied by `-D warnings`\n+\n+error: called `map(f)` on an Option value where `f` is a unit function\n+  --> $DIR/option_map_unit_fn.rs:35:5\n+   |\n+35 |     x.field.map(do_nothing);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(...) = x.field { do_nothing(...) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit function\n+  --> $DIR/option_map_unit_fn.rs:37:5\n+   |\n+37 |     x.field.map(diverge);\n+   |     ^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(...) = x.field { diverge(...) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:43:5\n+   |\n+43 |     x.field.map(|value| x.do_option_nothing(value + captured));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:45:5\n+   |\n+45 |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:48:5\n+   |\n+48 |     x.field.map(|value| do_nothing(value + captured));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:50:5\n+   |\n+50 |     x.field.map(|value| { do_nothing(value + captured) });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:52:5\n+   |\n+52 |     x.field.map(|value| { do_nothing(value + captured); });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:54:5\n+   |\n+54 |     x.field.map(|value| { { do_nothing(value + captured); } });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:57:5\n+   |\n+57 |     x.field.map(|value| diverge(value + captured));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:59:5\n+   |\n+59 |     x.field.map(|value| { diverge(value + captured) });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:61:5\n+   |\n+61 |     x.field.map(|value| { diverge(value + captured); });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:63:5\n+   |\n+63 |     x.field.map(|value| { { diverge(value + captured); } });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:68:5\n+   |\n+68 |     x.field.map(|value| { let y = plus_one(value + captured); });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:70:5\n+   |\n+70 |     x.field.map(|value| { plus_one(value + captured); });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:72:5\n+   |\n+72 |     x.field.map(|value| { { plus_one(value + captured); } });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:75:5\n+   |\n+75 |     x.field.map(|ref value| { do_nothing(value + captured) });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:78:5\n+   |\n+78 |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { ... }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:80:5\n+   |\n+80 |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { ... }`\n+\n+error: aborting due to 19 previous errors\n+"}]}