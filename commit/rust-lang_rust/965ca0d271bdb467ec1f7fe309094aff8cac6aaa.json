{"sha": "965ca0d271bdb467ec1f7fe309094aff8cac6aaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NWNhMGQyNzFiZGI0NjdlYzFmN2ZlMzA5MDk0YWZmOGNhYzZhYWE=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-14T04:06:05Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-14T05:25:05Z"}, "message": "`.collect()` directly into `Arc<[T]>`", "tree": {"sha": "22e4cde04bf900787701b1b047ea01f1ab74d5a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22e4cde04bf900787701b1b047ea01f1ab74d5a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/965ca0d271bdb467ec1f7fe309094aff8cac6aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/965ca0d271bdb467ec1f7fe309094aff8cac6aaa", "html_url": "https://github.com/rust-lang/rust/commit/965ca0d271bdb467ec1f7fe309094aff8cac6aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/965ca0d271bdb467ec1f7fe309094aff8cac6aaa/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "html_url": "https://github.com/rust-lang/rust/commit/f8d4cdc170bead42db3ffa647318ecf2bd6430e7"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "bf7445ea359bf5d2dc944eca68158c03d8bdec78", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/965ca0d271bdb467ec1f7fe309094aff8cac6aaa/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965ca0d271bdb467ec1f7fe309094aff8cac6aaa/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=965ca0d271bdb467ec1f7fe309094aff8cac6aaa", "patch": "@@ -329,8 +329,7 @@ impl Substs {\n                 .params_including_parent()\n                 .into_iter()\n                 .map(|p| Ty::Param { idx: p.idx, name: p.name.clone() })\n-                .collect::<Vec<_>>()\n-                .into(),\n+                .collect(),\n         )\n     }\n \n@@ -341,8 +340,7 @@ impl Substs {\n                 .params_including_parent()\n                 .into_iter()\n                 .map(|p| Ty::Bound(p.idx))\n-                .collect::<Vec<_>>()\n-                .into(),\n+                .collect(),\n         )\n     }\n "}, {"sha": "2f9a2ee056a4420b7cd2ab8d0ab7c32ac59f6cc0", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/965ca0d271bdb467ec1f7fe309094aff8cac6aaa/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965ca0d271bdb467ec1f7fe309094aff8cac6aaa/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=965ca0d271bdb467ec1f7fe309094aff8cac6aaa", "patch": "@@ -31,11 +31,11 @@ impl Ty {\n         match type_ref {\n             TypeRef::Never => Ty::simple(TypeCtor::Never),\n             TypeRef::Tuple(inner) => {\n-                let inner_tys =\n-                    inner.iter().map(|tr| Ty::from_hir(db, resolver, tr)).collect::<Vec<_>>();\n+                let inner_tys: Arc<[Ty]> =\n+                    inner.iter().map(|tr| Ty::from_hir(db, resolver, tr)).collect();\n                 Ty::apply(\n                     TypeCtor::Tuple { cardinality: inner_tys.len() as u16 },\n-                    Substs(inner_tys.into()),\n+                    Substs(inner_tys),\n                 )\n             }\n             TypeRef::Path(path) => Ty::from_hir_path(db, resolver, path),\n@@ -57,9 +57,7 @@ impl Ty {\n             }\n             TypeRef::Placeholder => Ty::Unknown,\n             TypeRef::Fn(params) => {\n-                let inner_tys =\n-                    params.iter().map(|tr| Ty::from_hir(db, resolver, tr)).collect::<Vec<_>>();\n-                let sig = Substs(inner_tys.into());\n+                let sig = Substs(params.iter().map(|tr| Ty::from_hir(db, resolver, tr)).collect());\n                 Ty::apply(TypeCtor::FnPtr { num_args: sig.len() as u16 - 1 }, sig)\n             }\n             TypeRef::DynTrait(bounds) => {\n@@ -69,8 +67,8 @@ impl Ty {\n                     .flat_map(|b| {\n                         GenericPredicate::from_type_bound(db, resolver, b, self_ty.clone())\n                     })\n-                    .collect::<Vec<_>>();\n-                Ty::Dyn(predicates.into())\n+                    .collect();\n+                Ty::Dyn(predicates)\n             }\n             TypeRef::ImplTrait(bounds) => {\n                 let self_ty = Ty::Bound(0);\n@@ -79,8 +77,8 @@ impl Ty {\n                     .flat_map(|b| {\n                         GenericPredicate::from_type_bound(db, resolver, b, self_ty.clone())\n                     })\n-                    .collect::<Vec<_>>();\n-                Ty::Opaque(predicates.into())\n+                    .collect();\n+                Ty::Opaque(predicates)\n             }\n             TypeRef::Error => Ty::Unknown,\n         }\n@@ -557,13 +555,12 @@ pub(crate) fn generic_predicates_for_param_query(\n     param_idx: u32,\n ) -> Arc<[GenericPredicate]> {\n     let resolver = def.resolver(db);\n-    let predicates = resolver\n+    resolver\n         .where_predicates_in_scope()\n         // we have to filter out all other predicates *first*, before attempting to lower them\n         .filter(|pred| Ty::from_hir_only_param(db, &resolver, &pred.type_ref) == Some(param_idx))\n         .flat_map(|pred| GenericPredicate::from_where_predicate(db, &resolver, pred))\n-        .collect::<Vec<_>>();\n-    predicates.into()\n+        .collect()\n }\n \n pub(crate) fn trait_env(\n@@ -584,11 +581,10 @@ pub(crate) fn generic_predicates_query(\n     def: GenericDef,\n ) -> Arc<[GenericPredicate]> {\n     let resolver = def.resolver(db);\n-    let predicates = resolver\n+    resolver\n         .where_predicates_in_scope()\n         .flat_map(|pred| GenericPredicate::from_where_predicate(db, &resolver, pred))\n-        .collect::<Vec<_>>();\n-    predicates.into()\n+        .collect()\n }\n \n /// Resolve the default type params from generics\n@@ -602,9 +598,9 @@ pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDef) ->\n         .map(|p| {\n             p.default.as_ref().map_or(Ty::Unknown, |path| Ty::from_hir_path(db, &resolver, path))\n         })\n-        .collect::<Vec<_>>();\n+        .collect();\n \n-    Substs(defaults.into())\n+    Substs(defaults)\n }\n \n fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {"}, {"sha": "0cb5c37984b53f7e4636f08823215207f961a4a7", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/965ca0d271bdb467ec1f7fe309094aff8cac6aaa/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965ca0d271bdb467ec1f7fe309094aff8cac6aaa/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=965ca0d271bdb467ec1f7fe309094aff8cac6aaa", "patch": "@@ -89,7 +89,7 @@ pub(crate) fn impls_for_trait_query(\n     }\n     let crate_impl_blocks = db.impls_in_crate(krate);\n     impls.extend(crate_impl_blocks.lookup_impl_blocks_for_trait(trait_));\n-    impls.into_iter().collect::<Vec<_>>().into()\n+    impls.into_iter().collect()\n }\n \n /// A set of clauses that we assume to be true. E.g. if we are inside this function:"}, {"sha": "00aaf65d92a6bf5f85c63c80c62abbb56dfbe528", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/965ca0d271bdb467ec1f7fe309094aff8cac6aaa/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965ca0d271bdb467ec1f7fe309094aff8cac6aaa/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=965ca0d271bdb467ec1f7fe309094aff8cac6aaa", "patch": "@@ -126,8 +126,7 @@ impl ToChalk for Substs {\n                 chalk_ir::Parameter(chalk_ir::ParameterKind::Ty(ty)) => from_chalk(db, ty),\n                 chalk_ir::Parameter(chalk_ir::ParameterKind::Lifetime(_)) => unimplemented!(),\n             })\n-            .collect::<Vec<_>>()\n-            .into();\n+            .collect();\n         Substs(tys)\n     }\n }"}]}