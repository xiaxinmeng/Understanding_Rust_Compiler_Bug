{"sha": "aa4f82ea4887bb9e0847bb2de287ef968b6b27f4", "node_id": "C_kwDOAAsO6NoAKGFhNGY4MmVhNDg4N2JiOWUwODQ3YmIyZGUyODdlZjk2OGI2YjI3ZjQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-01T23:40:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-01T23:40:40Z"}, "message": "implement simd_select", "tree": {"sha": "4c24eb01cafad2adc1de43a1f8faee9f397dd018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c24eb01cafad2adc1de43a1f8faee9f397dd018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa4f82ea4887bb9e0847bb2de287ef968b6b27f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4f82ea4887bb9e0847bb2de287ef968b6b27f4", "html_url": "https://github.com/rust-lang/rust/commit/aa4f82ea4887bb9e0847bb2de287ef968b6b27f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa4f82ea4887bb9e0847bb2de287ef968b6b27f4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f672282bf25db5670f5809f78b1cd701037cc2dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f672282bf25db5670f5809f78b1cd701037cc2dc", "html_url": "https://github.com/rust-lang/rust/commit/f672282bf25db5670f5809f78b1cd701037cc2dc"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "cab2da408db439968d98d78038f8ec44ef8291d2", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa4f82ea4887bb9e0847bb2de287ef968b6b27f4/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/aa4f82ea4887bb9e0847bb2de287ef968b6b27f4/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=aa4f82ea4887bb9e0847bb2de287ef968b6b27f4", "patch": "@@ -1 +1 @@\n-6a705566166debf5eff88c57140df607fa409aaa\n+f0c4da49983aa699f715caf681e3154b445fb60b"}, {"sha": "e84923314186ce01d0d30cac341755b89c1b9281", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa4f82ea4887bb9e0847bb2de287ef968b6b27f4/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4f82ea4887bb9e0847bb2de287ef968b6b27f4/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=aa4f82ea4887bb9e0847bb2de287ef968b6b27f4", "patch": "@@ -386,6 +386,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 this.write_scalar(Scalar::from_bool(res), dest)?;\n             }\n+            \"simd_select\" => {\n+                let &[ref mask, ref yes, ref no] = check_arg_count(args)?;\n+                let (mask, mask_len) = this.operand_to_simd(mask)?;\n+                let (yes, yes_len) = this.operand_to_simd(yes)?;\n+                let (no, no_len) = this.operand_to_simd(no)?;\n+                let (dest, dest_len) = this.place_to_simd(dest)?;\n+\n+                assert_eq!(dest_len, mask_len);\n+                assert_eq!(dest_len, yes_len);\n+                assert_eq!(dest_len, no_len);\n+\n+                for i in 0..dest_len {\n+                    let mask = this.read_immediate(&this.mplace_index(&mask, i)?.into())?;\n+                    let yes = this.read_immediate(&this.mplace_index(&yes, i)?.into())?;\n+                    let no = this.read_immediate(&this.mplace_index(&no, i)?.into())?;\n+                    let dest = this.mplace_index(&dest, i)?;\n+\n+                    let mask = simd_element_to_bool(mask)?;\n+                    let val = if mask { yes } else { no };\n+                    this.write_immediate(*val, &dest.into())?;\n+                }\n+            }\n \n             // Atomic operations\n             \"atomic_load\" => this.atomic_load(args, dest, AtomicReadOp::SeqCst)?,"}, {"sha": "3c1437f0e0fcc6f3059bcac8414181d3dc6d02c4", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aa4f82ea4887bb9e0847bb2de287ef968b6b27f4/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4f82ea4887bb9e0847bb2de287ef968b6b27f4/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=aa4f82ea4887bb9e0847bb2de287ef968b6b27f4", "patch": "@@ -29,19 +29,22 @@ fn simd_ops_i32() {\n \n fn simd_intrinsics() {\n     extern \"platform-intrinsic\" {\n-        pub(crate) fn simd_eq<T, U>(x: T, y: T) -> U;\n-        pub(crate) fn simd_reduce_any<T>(x: T) -> bool;\n+        fn simd_eq<T, U>(x: T, y: T) -> U;\n+        fn simd_reduce_any<T>(x: T) -> bool;\n+        fn simd_select<M, T>(m: M, yes: T, no: T) -> T;\n     }\n-\n-    // Make sure simd_eq returns all-1 for `true`\n-    let a = i32x4::splat(10);\n-    let b = i32x4::from_array([1, 2, 10, 4]);\n-    let c: i32x4 = unsafe { simd_eq(a, b) };\n-    assert_eq!(c, i32x4::from_array([0, 0, -1, 0]));\n-\n     unsafe {\n+        // Make sure simd_eq returns all-1 for `true`\n+        let a = i32x4::splat(10);\n+        let b = i32x4::from_array([1, 2, 10, 4]);\n+        let c: i32x4 = simd_eq(a, b);\n+        assert_eq!(c, i32x4::from_array([0, 0, -1, 0]));\n+\n         assert!(!simd_reduce_any(i32x4::splat(0)));\n         assert!(simd_reduce_any(i32x4::splat(-1)));\n+\n+        assert_eq!(simd_select(i8x4::from_array([0, -1, -1, 0]), a, b), i32x4::from_array([1, 10, 10, 4]));\n+        assert_eq!(simd_select(i8x4::from_array([0, -1, -1, 0]), b, a), i32x4::from_array([10, 2, 10, 10]));\n     }\n }\n "}]}