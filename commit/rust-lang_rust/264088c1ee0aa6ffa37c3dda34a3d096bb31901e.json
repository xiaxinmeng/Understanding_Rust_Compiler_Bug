{"sha": "264088c1ee0aa6ffa37c3dda34a3d096bb31901e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NDA4OGMxZWUwYWE2ZmZhMzdjM2RkYTM0YTNkMDk2YmIzMTkwMWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:04:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:26:42Z"}, "message": "rollup merge of #19932: elszben/master\n\nFirst attempt to contribute to rust (and using github). This commit adds a few examples to std::io::TempDir. The examples seem to look okay (in my browser) and make check also passes.", "tree": {"sha": "5d64776c3cdb66ea6278164887ea515ff2e2879c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d64776c3cdb66ea6278164887ea515ff2e2879c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/264088c1ee0aa6ffa37c3dda34a3d096bb31901e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/264088c1ee0aa6ffa37c3dda34a3d096bb31901e", "html_url": "https://github.com/rust-lang/rust/commit/264088c1ee0aa6ffa37c3dda34a3d096bb31901e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/264088c1ee0aa6ffa37c3dda34a3d096bb31901e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e654491960a07fe4f8ab2034a080276b129c9cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e654491960a07fe4f8ab2034a080276b129c9cfd", "html_url": "https://github.com/rust-lang/rust/commit/e654491960a07fe4f8ab2034a080276b129c9cfd"}, {"sha": "c910252769370a1bc039ec25ed918d81669d28ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/c910252769370a1bc039ec25ed918d81669d28ad", "html_url": "https://github.com/rust-lang/rust/commit/c910252769370a1bc039ec25ed918d81669d28ad"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "c2b4d5a1fa98241d776a68db3e15e279d242d404", "filename": "src/libstd/io/tempfile.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/264088c1ee0aa6ffa37c3dda34a3d096bb31901e/src%2Flibstd%2Fio%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264088c1ee0aa6ffa37c3dda34a3d096bb31901e/src%2Flibstd%2Fio%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftempfile.rs?ref=264088c1ee0aa6ffa37c3dda34a3d096bb31901e", "patch": "@@ -23,6 +23,56 @@ use sync::atomic;\n \n /// A wrapper for a path to temporary directory implementing automatic\n /// scope-based deletion.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// use std::io::TempDir;\n+///\n+/// {\n+///     // create a temporary directory\n+///     let tmpdir = match TempDir::new(\"mysuffix\") {\n+///         Ok(dir) => dir,\n+///         Err(e) => panic!(\"couldn't create temporary directory: {}\", e)\n+///     };\n+///\n+///     // get the path of the temporary directory without affecting the wrapper\n+///     let tmppath = tmpdir.path();\n+///\n+///     println!(\"The path of temporary directory is {}\", tmppath.display());\n+///\n+///     // the temporary directory is automatically removed when tmpdir goes\n+///     // out of scope at the end of the block\n+/// }\n+/// {\n+///     // create a temporary directory, this time using a custom path\n+///     let tmpdir = match TempDir::new_in(&Path::new(\"/tmp/best/custom/path\"), \"mysuffix\") {\n+///         Ok(dir) => dir,\n+///         Err(e) => panic!(\"couldn't create temporary directory: {}\", e)\n+///     };\n+///\n+///     // get the path of the temporary directory and disable automatic deletion in the wrapper\n+///     let tmppath = tmpdir.into_inner();\n+///\n+///     println!(\"The path of the not-so-temporary directory is {}\", tmppath.display());\n+///\n+///     // the temporary directory is not removed here\n+///     // because the directory is detached from the wrapper\n+/// }\n+/// {\n+///     // create a temporary directory\n+///     let tmpdir = match TempDir::new(\"mysuffix\") {\n+///         Ok(dir) => dir,\n+///         Err(e) => panic!(\"couldn't create temporary directory: {}\", e)\n+///     };\n+///\n+///     // close the temporary directory manually and check the result\n+///     match tmpdir.close() {\n+///         Ok(_) => println!(\"success!\"),\n+///         Err(e) => panic!(\"couldn't remove temporary directory: {}\", e)\n+///     };\n+/// }\n+/// ```\n pub struct TempDir {\n     path: Option<Path>,\n     disarmed: bool"}]}