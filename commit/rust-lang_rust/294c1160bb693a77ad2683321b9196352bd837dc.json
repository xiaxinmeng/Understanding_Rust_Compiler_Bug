{"sha": "294c1160bb693a77ad2683321b9196352bd837dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NGMxMTYwYmI2OTNhNzdhZDI2ODMzMjFiOTE5NjM1MmJkODM3ZGM=", "commit": {"author": {"name": "Camelid", "email": "37223377+camelid@users.noreply.github.com", "date": "2020-08-26T21:51:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-26T21:51:21Z"}, "message": "Improve docs for the `const` keyword", "tree": {"sha": "f6b18cd334e5f5f6fa0fdf0c4113705189f04aa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6b18cd334e5f5f6fa0fdf0c4113705189f04aa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/294c1160bb693a77ad2683321b9196352bd837dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfRtlZCRBK7hj4Ov3rIwAAdHIIAC7p6IqIe/j6wdG7MjTKpzPW\nLfnO1a6igXXfIq3eCrUEvy+XYAPMIQt9FsrdVXvgOfeiz+3mN2g4bUxKyMmRBNJk\nS4oiax5nJwMNFRFFlNPYq6q0UXGfZlo9XHZbCxzgtdDnXDjTRf/rPlFaxlMfQjfb\nJgxZhYXgYSwcspRt4SLyj4YFdaHBw2B3EYa8TE/tGeZjLyF+UBZ/6Kb2FVN6tubp\n0ONTuTqLVHx2qYx0Q3odjNl6GFX9BXYXs4TFYrel4m27BOuIxsokuUEkbG4PKVig\nuNssqkQrNpB68s8cSdZE6ofbXzR9CdulLjpBoFXNL4475bKgpgA5GrLcZDuMwjg=\n=pf14\n-----END PGP SIGNATURE-----\n", "payload": "tree f6b18cd334e5f5f6fa0fdf0c4113705189f04aa7\nparent 48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b\nauthor Camelid <37223377+camelid@users.noreply.github.com> 1598478681 -0700\ncommitter GitHub <noreply@github.com> 1598478681 -0700\n\nImprove docs for the `const` keyword"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/294c1160bb693a77ad2683321b9196352bd837dc", "html_url": "https://github.com/rust-lang/rust/commit/294c1160bb693a77ad2683321b9196352bd837dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/294c1160bb693a77ad2683321b9196352bd837dc/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "html_url": "https://github.com/rust-lang/rust/commit/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "7e94d05d78d38c09125613bda9bedbd704143c43", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/294c1160bb693a77ad2683321b9196352bd837dc/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294c1160bb693a77ad2683321b9196352bd837dc/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=294c1160bb693a77ad2683321b9196352bd837dc", "patch": "@@ -107,18 +107,20 @@ mod break_keyword {}\n /// Sometimes a certain value is used many times throughout a program, and it can become\n /// inconvenient to copy it over and over. What's more, it's not always possible or desirable to\n /// make it a variable that gets carried around to each function that needs it. In these cases, the\n-/// `const` keyword provides a convenient alternative to code duplication.\n+/// `const` keyword provides a convenient alternative to code duplication:\n ///\n /// ```rust\n /// const THING: u32 = 0xABAD1DEA;\n ///\n /// let foo = 123 + THING;\n /// ```\n ///\n-/// Constants must be explicitly typed, unlike with `let` you can't ignore its type and let the\n-/// compiler figure it out. Any constant value can be defined in a const, which in practice happens\n-/// to be most things that would be reasonable to have a constant (barring `const fn`s). For\n-/// example, you can't have a File as a `const`.\n+/// Constants must be explicitly typed; unlike with `let`, you can't ignore its type and let the\n+/// compiler figure it out. Any constant value can be defined in a `const`, which in practice happens\n+/// to be most things that would be reasonable to have in a constant (barring `const fn`s). For\n+/// example, you can't have a [`File`] as a `const`.\n+///\n+/// [`File`]: crate::fs::File\n ///\n /// The only lifetime allowed in a constant is `'static`, which is the lifetime that encompasses\n /// all others in a Rust program. For example, if you wanted to define a constant string, it would\n@@ -128,27 +130,27 @@ mod break_keyword {}\n /// const WORDS: &'static str = \"hello rust!\";\n /// ```\n ///\n-/// Thanks to static lifetime elision, you usually don't have to explicitly use 'static:\n+/// Thanks to static lifetime elision, you usually don't have to explicitly use `'static`:\n ///\n /// ```rust\n /// const WORDS: &str = \"hello convenience!\";\n /// ```\n ///\n /// `const` items looks remarkably similar to `static` items, which introduces some confusion as\n /// to which one should be used at which times. To put it simply, constants are inlined wherever\n-/// they're used, making using them identical to simply replacing the name of the const with its\n-/// value. Static variables on the other hand point to a single location in memory, which all\n+/// they're used, making using them identical to simply replacing the name of the `const` with its\n+/// value. Static variables, on the other hand, point to a single location in memory, which all\n /// accesses share. This means that, unlike with constants, they can't have destructors, and act as\n /// a single value across the entire codebase.\n ///\n-/// Constants, as with statics, should always be in SCREAMING_SNAKE_CASE.\n+/// Constants, as with statics, should always be in `SCREAMING_SNAKE_CASE`.\n ///\n /// The `const` keyword is also used in raw pointers in combination with `mut`, as seen in `*const\n-/// T` and `*mut T`. More about that can be read at the [pointer] primitive part of the Rust docs.\n+/// T` and `*mut T`. More about that usage can be read at the Rust docs for the [pointer primitive].\n ///\n-/// For more detail on `const`, see the [Rust Book] or the [Reference]\n+/// For more detail on `const`, see the [Rust Book] or the [Reference].\n ///\n-/// [pointer]: primitive.pointer.html\n+/// [pointer primitive]: primitive.pointer.html\n /// [Rust Book]:\n /// ../book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n /// [Reference]: ../reference/items/constant-items.html"}]}