{"sha": "d09851730c47f49555c84b76dd6e71d91b0555ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOTg1MTczMGM0N2Y0OTU1NWM4NGI3NmRkNmU3MWQ5MWIwNTU1ZWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-22T01:00:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-27T17:11:15Z"}, "message": "rustc: Add support for linking arbitrary objects\n\nMUSL for example provides its own start/end objects in place of the standard\nones shipped by gcc.", "tree": {"sha": "ec86b0cd93317aebaf11fc5504395f501170301e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec86b0cd93317aebaf11fc5504395f501170301e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d09851730c47f49555c84b76dd6e71d91b0555ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d09851730c47f49555c84b76dd6e71d91b0555ed", "html_url": "https://github.com/rust-lang/rust/commit/d09851730c47f49555c84b76dd6e71d91b0555ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d09851730c47f49555c84b76dd6e71d91b0555ed/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22da16a4c5b22feac0be1fe34795c5781392bb33", "url": "https://api.github.com/repos/rust-lang/rust/commits/22da16a4c5b22feac0be1fe34795c5781392bb33", "html_url": "https://github.com/rust-lang/rust/commit/22da16a4c5b22feac0be1fe34795c5781392bb33"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "3a79ae3e7c01b6e8116f47904f33b769ff8b917b", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d09851730c47f49555c84b76dd6e71d91b0555ed/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09851730c47f49555c84b76dd6e71d91b0555ed/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=d09851730c47f49555c84b76dd6e71d91b0555ed", "patch": "@@ -91,14 +91,22 @@ pub struct Target {\n pub struct TargetOptions {\n     /// Linker to invoke. Defaults to \"cc\".\n     pub linker: String,\n-    /// Linker arguments that are unconditionally passed *before* any user-defined libraries.\n+    /// Linker arguments that are unconditionally passed *before* any\n+    /// user-defined libraries.\n     pub pre_link_args: Vec<String>,\n-    /// Linker arguments that are unconditionally passed *after* any user-defined libraries.\n+    /// Linker arguments that are unconditionally passed *after* any\n+    /// user-defined libraries.\n     pub post_link_args: Vec<String>,\n-    /// Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults to \"default\".\n+    /// Objects to link before and after all others, always found within the\n+    /// sysroot folder.\n+    pub pre_link_objects: Vec<String>,\n+    pub post_link_objects: Vec<String>,\n+    /// Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults\n+    /// to \"default\".\n     pub cpu: String,\n-    /// Default target features to pass to LLVM. These features will *always* be passed, and cannot\n-    /// be disabled even via `-C`. Corresponds to `llc -mattr=$features`.\n+    /// Default target features to pass to LLVM. These features will *always* be\n+    /// passed, and cannot be disabled even via `-C`. Corresponds to `llc\n+    /// -mattr=$features`.\n     pub features: String,\n     /// Whether dynamic linking is available on this target. Defaults to false.\n     pub dynamic_linking: bool,\n@@ -183,6 +191,8 @@ impl Default for TargetOptions {\n             has_rpath: false,\n             no_compiler_rt: false,\n             position_independent_executables: false,\n+            pre_link_objects: Vec::new(),\n+            post_link_objects: Vec::new(),\n         }\n     }\n }"}, {"sha": "3debad2e8f2013daef0b27cd330caf71e1808356", "filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d09851730c47f49555c84b76dd6e71d91b0555ed/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09851730c47f49555c84b76dd6e71d91b0555ed/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs?ref=d09851730c47f49555c84b76dd6e71d91b0555ed", "patch": "@@ -13,7 +13,6 @@ use target::Target;\n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.linker = \"musl-gcc\".to_string();\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     // Make sure that the linker/gcc really don't pull in anything, including"}, {"sha": "c72072f06965096488b14541ee982668f32c3a7e", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d09851730c47f49555c84b76dd6e71d91b0555ed/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09851730c47f49555c84b76dd6e71d91b0555ed/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=d09851730c47f49555c84b76dd6e71d91b0555ed", "patch": "@@ -794,13 +794,21 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n     let pname = get_cc_prog(sess);\n     let mut cmd = Command::new(&pname[..]);\n \n+    let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n     cmd.args(&sess.target.target.options.pre_link_args);\n+    for obj in &sess.target.target.options.pre_link_objects {\n+        cmd.arg(root.join(obj));\n+    }\n+\n     link_args(&mut cmd, sess, dylib, tmpdir.path(),\n               trans, obj_filename, out_filename);\n-    cmd.args(&sess.target.target.options.post_link_args);\n     if !sess.target.target.options.no_compiler_rt {\n         cmd.arg(\"-lcompiler-rt\");\n     }\n+    for obj in &sess.target.target.options.post_link_objects {\n+        cmd.arg(root.join(obj));\n+    }\n+    cmd.args(&sess.target.target.options.post_link_args);\n \n     if sess.opts.debugging_opts.print_link_args {\n         println!(\"{:?}\", &cmd);"}]}