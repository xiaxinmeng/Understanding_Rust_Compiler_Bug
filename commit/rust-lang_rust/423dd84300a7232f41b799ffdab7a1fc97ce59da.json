{"sha": "423dd84300a7232f41b799ffdab7a1fc97ce59da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyM2RkODQzMDBhNzIzMmY0MWI3OTlmZmRhYjdhMWZjOTdjZTU5ZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-10T11:11:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-10T11:11:17Z"}, "message": "auto merge of #11441 : jld/rust/enum-nullable-const-null-with-fields, r=alexcrichton\n\nThat is, if you have an enum type that is subject to the nullable\r\npointer optimization, but the null variant has a nonzero number of\r\nfields, and you declare a static whose value is of that variant, then\r\nthat used to be an ICE but this change fixes it.", "tree": {"sha": "f1646e51295b43f8f7f872958bba71d5c4d2774e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1646e51295b43f8f7f872958bba71d5c4d2774e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/423dd84300a7232f41b799ffdab7a1fc97ce59da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/423dd84300a7232f41b799ffdab7a1fc97ce59da", "html_url": "https://github.com/rust-lang/rust/commit/423dd84300a7232f41b799ffdab7a1fc97ce59da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/423dd84300a7232f41b799ffdab7a1fc97ce59da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a52522ca2da85006553c62134bf98299525162", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a52522ca2da85006553c62134bf98299525162", "html_url": "https://github.com/rust-lang/rust/commit/72a52522ca2da85006553c62134bf98299525162"}, {"sha": "5487f15bbfae92747373a9b9e11b67db3a82c7d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5487f15bbfae92747373a9b9e11b67db3a82c7d5", "html_url": "https://github.com/rust-lang/rust/commit/5487f15bbfae92747373a9b9e11b67db3a82c7d5"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "25a69174bb2c5e3d94aebab71e038d266e949a7d", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/423dd84300a7232f41b799ffdab7a1fc97ce59da/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423dd84300a7232f41b799ffdab7a1fc97ce59da/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=423dd84300a7232f41b799ffdab7a1fc97ce59da", "patch": "@@ -730,7 +730,6 @@ pub fn trans_const(ccx: &CrateContext, r: &Repr, discr: Disr,\n             if discr == nndiscr {\n                 C_struct(build_const_struct(ccx, nonnull, vals), false)\n             } else {\n-                assert_eq!(vals.len(), 0);\n                 let vals = nonnull.fields.iter().enumerate().map(|(i, &ty)| {\n                     let llty = type_of::sizing_type_of(ccx, ty);\n                     if i == ptrfield { C_null(llty) } else { C_undef(llty) }"}, {"sha": "5defd837022250644f4a9c0ca31ff080913bdcc7", "filename": "src/test/run-pass/enum-nullable-const-null-with-fields.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/423dd84300a7232f41b799ffdab7a1fc97ce59da/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423dd84300a7232f41b799ffdab7a1fc97ce59da/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs?ref=423dd84300a7232f41b799ffdab7a1fc97ce59da", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::result::{Result,Ok};\n+static C: Result<(), ~int> = Ok(());\n+\n+// This is because of yet another bad assertion (ICE) about the null side of a nullable enum.\n+// So we won't actually compile if the bug is present, but we check the value in main anyway.\n+\n+pub fn main() {\n+    assert!(C.is_ok());\n+}"}]}