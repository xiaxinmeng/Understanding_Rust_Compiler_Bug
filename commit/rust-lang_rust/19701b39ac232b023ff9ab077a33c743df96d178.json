{"sha": "19701b39ac232b023ff9ab077a33c743df96d178", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NzAxYjM5YWMyMzJiMDIzZmY5YWIwNzdhMzNjNzQzZGY5NmQxNzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-22T11:19:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-22T11:19:09Z"}, "message": "Merge #4928\n\n4928: Fix renaming mod in use tree r=matklad a=unexge\n\nFixes #4825\n\nCo-authored-by: unexge <unexge@gmail.com>", "tree": {"sha": "7ea5bbd972f6059e72684444ad3970c54d294f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ea5bbd972f6059e72684444ad3970c54d294f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19701b39ac232b023ff9ab077a33c743df96d178", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8JOtCRBK7hj4Ov3rIwAAdHIIAFaAIOkhhYTkvpqoWoauItl0\nRte49Q7BK8ZUH/3iuToyI2D5gf/MqEnQtGZ5SBS2FYW2r934qA/gk7EAQlAHHoeR\nM5oXGqvxN8FpY1oJgZQ28N5R+5shpmhbHSwV+UyiX6FPeRYeNhF64FMp9K1zYpKA\nc4bGwY3B5COM4TBZJaVF4GxtKOEGDuoenvrWQRifNgjahKTeQ+zCsUgmNCWF88E5\n/QDiGON1t0KFdlXpdvhQTog7dCTAnqrwQ29sPGCuqqDP6Bt4n//hq5ycs+ShOlqd\nNbMMqEh7Eu1i5LCa2rwcr5OepDQm0qfgCsc+mvWtj9x5JV11KrYh4kVigZlCTGQ=\n=AlN+\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ea5bbd972f6059e72684444ad3970c54d294f43\nparent 3370c81525c89c4f3229180f83520de29b7ee8a0\nparent 320c775ace8958f751c4e8c62e6d5e2e867706be\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592824749 +0000\ncommitter GitHub <noreply@github.com> 1592824749 +0000\n\nMerge #4928\n\n4928: Fix renaming mod in use tree r=matklad a=unexge\n\nFixes #4825\n\nCo-authored-by: unexge <unexge@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19701b39ac232b023ff9ab077a33c743df96d178", "html_url": "https://github.com/rust-lang/rust/commit/19701b39ac232b023ff9ab077a33c743df96d178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19701b39ac232b023ff9ab077a33c743df96d178/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3370c81525c89c4f3229180f83520de29b7ee8a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3370c81525c89c4f3229180f83520de29b7ee8a0", "html_url": "https://github.com/rust-lang/rust/commit/3370c81525c89c4f3229180f83520de29b7ee8a0"}, {"sha": "320c775ace8958f751c4e8c62e6d5e2e867706be", "url": "https://api.github.com/repos/rust-lang/rust/commits/320c775ace8958f751c4e8c62e6d5e2e867706be", "html_url": "https://github.com/rust-lang/rust/commit/320c775ace8958f751c4e8c62e6d5e2e867706be"}], "stats": {"total": 187, "additions": 139, "deletions": 48}, "files": [{"sha": "99c2581b7df2324bb60d234aa6dd4914497c024f", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 139, "deletions": 48, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/19701b39ac232b023ff9ab077a33c743df96d178/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19701b39ac232b023ff9ab077a33c743df96d178/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=19701b39ac232b023ff9ab077a33c743df96d178", "patch": "@@ -1,11 +1,14 @@\n //! FIXME: write short doc here\n \n-use hir::{ModuleSource, Semantics};\n+use hir::{Module, ModuleDef, ModuleSource, Semantics};\n use ra_db::{RelativePathBuf, SourceDatabaseExt};\n-use ra_ide_db::RootDatabase;\n+use ra_ide_db::{\n+    defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n+    RootDatabase,\n+};\n use ra_syntax::{\n-    algo::find_node_at_offset, ast, ast::TypeAscriptionOwner, lex_single_valid_syntax_kind,\n-    AstNode, SyntaxKind, SyntaxNode, SyntaxToken,\n+    algo::find_node_at_offset, ast, ast::NameOwner, ast::TypeAscriptionOwner,\n+    lex_single_valid_syntax_kind, match_ast, AstNode, SyntaxKind, SyntaxNode, SyntaxToken,\n };\n use ra_text_edit::TextEdit;\n use std::convert::TryInto;\n@@ -30,10 +33,8 @@ pub(crate) fn rename(\n     let sema = Semantics::new(db);\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax();\n-    if let Some((ast_name, ast_module)) = find_name_and_module_at_offset(syntax, position) {\n-        let range = ast_name.syntax().text_range();\n-        rename_mod(&sema, &ast_name, &ast_module, position, new_name)\n-            .map(|info| RangeInfo::new(range, info))\n+    if let Some(module) = find_module_at_offset(&sema, position, syntax) {\n+        rename_mod(db, position, module, new_name)\n     } else if let Some(self_token) =\n         syntax.token_at_offset(position.offset).find(|t| t.kind() == SyntaxKind::SELF_KW)\n     {\n@@ -43,13 +44,32 @@ pub(crate) fn rename(\n     }\n }\n \n-fn find_name_and_module_at_offset(\n-    syntax: &SyntaxNode,\n+fn find_module_at_offset(\n+    sema: &Semantics<RootDatabase>,\n     position: FilePosition,\n-) -> Option<(ast::Name, ast::Module)> {\n-    let ast_name = find_node_at_offset::<ast::Name>(syntax, position.offset)?;\n-    let ast_module = ast::Module::cast(ast_name.syntax().parent()?)?;\n-    Some((ast_name, ast_module))\n+    syntax: &SyntaxNode,\n+) -> Option<Module> {\n+    let ident = syntax.token_at_offset(position.offset).find(|t| t.kind() == SyntaxKind::IDENT)?;\n+\n+    let module = match_ast! {\n+        match (ident.parent()) {\n+            ast::NameRef(name_ref) => {\n+                match classify_name_ref(sema, &name_ref)? {\n+                    NameRefClass::Definition(Definition::ModuleDef(ModuleDef::Module(module))) => module,\n+                    _ => return None,\n+                }\n+            },\n+            ast::Name(name) => {\n+                match classify_name(&sema, &name)? {\n+                    NameClass::Definition(Definition::ModuleDef(ModuleDef::Module(module))) => module,\n+                    _ => return None,\n+                }\n+            },\n+            _ => return None,\n+        }\n+    };\n+\n+    Some(module)\n }\n \n fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFileEdit {\n@@ -77,49 +97,50 @@ fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFil\n }\n \n fn rename_mod(\n-    sema: &Semantics<RootDatabase>,\n-    ast_name: &ast::Name,\n-    ast_module: &ast::Module,\n+    db: &RootDatabase,\n     position: FilePosition,\n+    module: Module,\n     new_name: &str,\n-) -> Option<SourceChange> {\n+) -> Option<RangeInfo<SourceChange>> {\n     let mut source_file_edits = Vec::new();\n     let mut file_system_edits = Vec::new();\n-    if let Some(module) = sema.to_def(ast_module) {\n-        let src = module.definition_source(sema.db);\n-        let file_id = src.file_id.original_file(sema.db);\n-        match src.value {\n-            ModuleSource::SourceFile(..) => {\n-                let mod_path: RelativePathBuf = sema.db.file_relative_path(file_id);\n-                // mod is defined in path/to/dir/mod.rs\n-                let dst = if mod_path.file_stem() == Some(\"mod\") {\n-                    format!(\"../{}/mod.rs\", new_name)\n-                } else {\n-                    format!(\"{}.rs\", new_name)\n-                };\n-                let move_file =\n-                    FileSystemEdit::MoveFile { src: file_id, anchor: position.file_id, dst };\n-                file_system_edits.push(move_file);\n-            }\n-            ModuleSource::Module(..) => {}\n+\n+    let src = module.definition_source(db);\n+    let file_id = src.file_id.original_file(db);\n+    match src.value {\n+        ModuleSource::SourceFile(..) => {\n+            let mod_path: RelativePathBuf = db.file_relative_path(file_id);\n+            // mod is defined in path/to/dir/mod.rs\n+            let dst = if mod_path.file_stem() == Some(\"mod\") {\n+                format!(\"../{}/mod.rs\", new_name)\n+            } else {\n+                format!(\"{}.rs\", new_name)\n+            };\n+            let move_file =\n+                FileSystemEdit::MoveFile { src: file_id, anchor: position.file_id, dst };\n+            file_system_edits.push(move_file);\n         }\n+        ModuleSource::Module(..) => {}\n     }\n \n-    let edit = SourceFileEdit {\n-        file_id: position.file_id,\n-        edit: TextEdit::replace(ast_name.syntax().text_range(), new_name.into()),\n-    };\n-    source_file_edits.push(edit);\n-\n-    if let Some(RangeInfo { range: _, info: refs }) = find_all_refs(sema.db, position, None) {\n-        let ref_edits = refs\n-            .references\n-            .into_iter()\n-            .map(|reference| source_edit_from_reference(reference, new_name));\n-        source_file_edits.extend(ref_edits);\n+    if let Some(src) = module.declaration_source(db) {\n+        let file_id = src.file_id.original_file(db);\n+        let name = src.value.name()?;\n+        let edit = SourceFileEdit {\n+            file_id: file_id,\n+            edit: TextEdit::replace(name.syntax().text_range(), new_name.into()),\n+        };\n+        source_file_edits.push(edit);\n     }\n \n-    Some(SourceChange::from_edits(source_file_edits, file_system_edits))\n+    let RangeInfo { range, info: refs } = find_all_refs(db, position, None)?;\n+    let ref_edits = refs\n+        .references\n+        .into_iter()\n+        .map(|reference| source_edit_from_reference(reference, new_name));\n+    source_file_edits.extend(ref_edits);\n+\n+    Some(RangeInfo::new(range, SourceChange::from_edits(source_file_edits, file_system_edits)))\n }\n \n fn rename_to_self(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<SourceChange>> {\n@@ -666,6 +687,76 @@ mod foo<|>;\n         \"###);\n     }\n \n+    #[test]\n+    fn test_rename_mod_in_use_tree() {\n+        let (analysis, position) = analysis_and_position(\n+            r#\"\n+//- /main.rs\n+pub mod foo;\n+pub mod bar;\n+fn main() {}\n+\n+//- /foo.rs\n+pub struct FooContent;\n+\n+//- /bar.rs\n+use crate::foo<|>::FooContent;\n+            \"#,\n+        );\n+        let new_name = \"qux\";\n+        let source_change = analysis.rename(position, new_name).unwrap();\n+        assert_debug_snapshot!(&source_change,\n+@r###\"\n+        Some(\n+            RangeInfo {\n+                range: 11..14,\n+                info: SourceChange {\n+                    source_file_edits: [\n+                        SourceFileEdit {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            edit: TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"qux\",\n+                                        delete: 8..11,\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                        SourceFileEdit {\n+                            file_id: FileId(\n+                                3,\n+                            ),\n+                            edit: TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"qux\",\n+                                        delete: 11..14,\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                    ],\n+                    file_system_edits: [\n+                        MoveFile {\n+                            src: FileId(\n+                                2,\n+                            ),\n+                            anchor: FileId(\n+                                3,\n+                            ),\n+                            dst: \"qux.rs\",\n+                        },\n+                    ],\n+                    is_snippet: false,\n+                },\n+            },\n+        )\n+        \"###);\n+    }\n+\n     #[test]\n     fn test_rename_mod_in_dir() {\n         let (analysis, position) = analysis_and_position("}]}