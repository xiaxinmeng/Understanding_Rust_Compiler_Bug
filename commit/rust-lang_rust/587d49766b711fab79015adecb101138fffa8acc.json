{"sha": "587d49766b711fab79015adecb101138fffa8acc", "node_id": "C_kwDOAAsO6NoAKDU4N2Q0OTc2NmI3MTFmYWI3OTAxNWFkZWNiMTAxMTM4ZmZmYThhY2M", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-11-13T01:18:55Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `UnsafeCode` in `builtin.rs`", "tree": {"sha": "25d501c1314167c3cd1592201a3148d3df89ea59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25d501c1314167c3cd1592201a3148d3df89ea59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/587d49766b711fab79015adecb101138fffa8acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/587d49766b711fab79015adecb101138fffa8acc", "html_url": "https://github.com/rust-lang/rust/commit/587d49766b711fab79015adecb101138fffa8acc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/587d49766b711fab79015adecb101138fffa8acc/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c06a2426b2d260b39b1601dd732777df667428ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c06a2426b2d260b39b1601dd732777df667428ed", "html_url": "https://github.com/rust-lang/rust/commit/c06a2426b2d260b39b1601dd732777df667428ed"}], "stats": {"total": 146, "additions": 63, "deletions": 83}, "files": [{"sha": "f7055019bab69db1aed6b5daa8bcf5002f80530b", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 22, "deletions": 82, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/587d49766b711fab79015adecb101138fffa8acc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587d49766b711fab79015adecb101138fffa8acc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=587d49766b711fab79015adecb101138fffa8acc", "patch": "@@ -31,8 +31,8 @@ use crate::{\n         BuiltinMutablesTransmutes, BuiltinNoMangleGeneric, BuiltinNonShorthandFieldPatterns,\n         BuiltinSpecialModuleNameUsed, BuiltinTrivialBounds, BuiltinUnexpectedCliConfigName,\n         BuiltinUnexpectedCliConfigValue, BuiltinUnnameableTestItems, BuiltinUnreachablePub,\n-        BuiltinUnstableFeatures, BuiltinUnusedDocComment, BuiltinUnusedDocCommentSub,\n-        BuiltinWhileTrue,\n+        BuiltinUnsafe, BuiltinUnstableFeatures, BuiltinUnusedDocComment,\n+        BuiltinUnusedDocCommentSub, BuiltinWhileTrue,\n     },\n     types::{transparent_newtype_field, CItemKind},\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext,\n@@ -46,8 +46,7 @@ use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n-    fluent, Applicability, DelayDm, Diagnostic, DiagnosticBuilder, DiagnosticMessage,\n-    DiagnosticStyledString, MultiSpan,\n+    fluent, Applicability, DecorateLint, DelayDm, Diagnostic, DiagnosticStyledString, MultiSpan,\n };\n use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, GateIssue, Stability};\n use rustc_hir as hir;\n@@ -314,48 +313,21 @@ impl UnsafeCode {\n         &self,\n         cx: &EarlyContext<'_>,\n         span: Span,\n-        msg: impl Into<DiagnosticMessage>,\n-        decorate: impl for<'a, 'b> FnOnce(\n-            &'b mut DiagnosticBuilder<'a, ()>,\n-        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n+        decorate: impl for<'a> DecorateLint<'a, ()>,\n     ) {\n         // This comes from a macro that has `#[allow_internal_unsafe]`.\n         if span.allows_unsafe() {\n             return;\n         }\n \n-        cx.struct_span_lint(UNSAFE_CODE, span, msg, decorate);\n-    }\n-\n-    fn report_overridden_symbol_name(\n-        &self,\n-        cx: &EarlyContext<'_>,\n-        span: Span,\n-        msg: DiagnosticMessage,\n-    ) {\n-        self.report_unsafe(cx, span, msg, |lint| {\n-            lint.note(fluent::lint_builtin_overridden_symbol_name)\n-        })\n-    }\n-\n-    fn report_overridden_symbol_section(\n-        &self,\n-        cx: &EarlyContext<'_>,\n-        span: Span,\n-        msg: DiagnosticMessage,\n-    ) {\n-        self.report_unsafe(cx, span, msg, |lint| {\n-            lint.note(fluent::lint_builtin_overridden_symbol_section)\n-        })\n+        cx.emit_spanned_lint(UNSAFE_CODE, span, decorate);\n     }\n }\n \n impl EarlyLintPass for UnsafeCode {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n         if attr.has_name(sym::allow_internal_unsafe) {\n-            self.report_unsafe(cx, attr.span, fluent::lint_builtin_allow_internal_unsafe, |lint| {\n-                lint\n-            });\n+            self.report_unsafe(cx, attr.span, BuiltinUnsafe::AllowInternalUnsafe);\n         }\n     }\n \n@@ -364,70 +336,46 @@ impl EarlyLintPass for UnsafeCode {\n         if let ast::ExprKind::Block(ref blk, _) = e.kind {\n             // Don't warn about generated blocks; that'll just pollute the output.\n             if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {\n-                self.report_unsafe(cx, blk.span, fluent::lint_builtin_unsafe_block, |lint| lint);\n+                self.report_unsafe(cx, blk.span, BuiltinUnsafe::UnsafeBlock);\n             }\n         }\n     }\n \n     fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {\n         match it.kind {\n             ast::ItemKind::Trait(box ast::Trait { unsafety: ast::Unsafe::Yes(_), .. }) => {\n-                self.report_unsafe(cx, it.span, fluent::lint_builtin_unsafe_trait, |lint| lint)\n+                self.report_unsafe(cx, it.span, BuiltinUnsafe::UnsafeTrait);\n             }\n \n             ast::ItemKind::Impl(box ast::Impl { unsafety: ast::Unsafe::Yes(_), .. }) => {\n-                self.report_unsafe(cx, it.span, fluent::lint_builtin_unsafe_impl, |lint| lint)\n+                self.report_unsafe(cx, it.span, BuiltinUnsafe::UnsafeImpl);\n             }\n \n             ast::ItemKind::Fn(..) => {\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n-                    self.report_overridden_symbol_name(\n-                        cx,\n-                        attr.span,\n-                        fluent::lint_builtin_no_mangle_fn,\n-                    );\n+                    self.report_unsafe(cx, attr.span, BuiltinUnsafe::NoMangleFn);\n                 }\n \n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n-                    self.report_overridden_symbol_name(\n-                        cx,\n-                        attr.span,\n-                        fluent::lint_builtin_export_name_fn,\n-                    );\n+                    self.report_unsafe(cx, attr.span, BuiltinUnsafe::ExportNameFn);\n                 }\n \n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::link_section) {\n-                    self.report_overridden_symbol_section(\n-                        cx,\n-                        attr.span,\n-                        fluent::lint_builtin_link_section_fn,\n-                    );\n+                    self.report_unsafe(cx, attr.span, BuiltinUnsafe::LinkSectionFn);\n                 }\n             }\n \n             ast::ItemKind::Static(..) => {\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n-                    self.report_overridden_symbol_name(\n-                        cx,\n-                        attr.span,\n-                        fluent::lint_builtin_no_mangle_static,\n-                    );\n+                    self.report_unsafe(cx, attr.span, BuiltinUnsafe::NoMangleStatic);\n                 }\n \n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n-                    self.report_overridden_symbol_name(\n-                        cx,\n-                        attr.span,\n-                        fluent::lint_builtin_export_name_static,\n-                    );\n+                    self.report_unsafe(cx, attr.span, BuiltinUnsafe::ExportNameStatic);\n                 }\n \n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::link_section) {\n-                    self.report_overridden_symbol_section(\n-                        cx,\n-                        attr.span,\n-                        fluent::lint_builtin_link_section_static,\n-                    );\n+                    self.report_unsafe(cx, attr.span, BuiltinUnsafe::LinkSectionStatic);\n                 }\n             }\n \n@@ -438,18 +386,10 @@ impl EarlyLintPass for UnsafeCode {\n     fn check_impl_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n         if let ast::AssocItemKind::Fn(..) = it.kind {\n             if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n-                self.report_overridden_symbol_name(\n-                    cx,\n-                    attr.span,\n-                    fluent::lint_builtin_no_mangle_method,\n-                );\n+                self.report_unsafe(cx, attr.span, BuiltinUnsafe::NoMangleMethod);\n             }\n             if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n-                self.report_overridden_symbol_name(\n-                    cx,\n-                    attr.span,\n-                    fluent::lint_builtin_export_name_method,\n-                );\n+                self.report_unsafe(cx, attr.span, BuiltinUnsafe::ExportNameMethod);\n             }\n         }\n     }\n@@ -464,13 +404,13 @@ impl EarlyLintPass for UnsafeCode {\n             body,\n         ) = fk\n         {\n-            let msg = match ctxt {\n+            let decorator = match ctxt {\n                 FnCtxt::Foreign => return,\n-                FnCtxt::Free => fluent::lint_builtin_decl_unsafe_fn,\n-                FnCtxt::Assoc(_) if body.is_none() => fluent::lint_builtin_decl_unsafe_method,\n-                FnCtxt::Assoc(_) => fluent::lint_builtin_impl_unsafe_method,\n+                FnCtxt::Free => BuiltinUnsafe::DeclUnsafeFn,\n+                FnCtxt::Assoc(_) if body.is_none() => BuiltinUnsafe::DeclUnsafeMethod,\n+                FnCtxt::Assoc(_) => BuiltinUnsafe::ImplUnsafeMethod,\n             };\n-            self.report_unsafe(cx, span, msg, |lint| lint);\n+            self.report_unsafe(cx, span, decorator);\n         }\n     }\n }"}, {"sha": "147cd3e0460853d27c19d77b6c62b12b5184e4be", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/587d49766b711fab79015adecb101138fffa8acc/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587d49766b711fab79015adecb101138fffa8acc/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=587d49766b711fab79015adecb101138fffa8acc", "patch": "@@ -61,7 +61,47 @@ pub struct BuiltinNonShorthandFieldPatterns {\n     pub prefix: &'static str,\n }\n \n-// FIXME: add lint::unsafe_code\n+#[derive(LintDiagnostic)]\n+pub enum BuiltinUnsafe {\n+    #[diag(lint_builtin_allow_internal_unsafe)]\n+    AllowInternalUnsafe,\n+    #[diag(lint_builtin_unsafe_block)]\n+    UnsafeBlock,\n+    #[diag(lint_builtin_unsafe_trait)]\n+    UnsafeTrait,\n+    #[diag(lint_builtin_unsafe_impl)]\n+    UnsafeImpl,\n+    #[diag(lint_builtin_no_mangle_fn)]\n+    #[note(lint_builtin_overridden_symbol_name)]\n+    NoMangleFn,\n+    #[diag(lint_builtin_export_name_fn)]\n+    #[note(lint_builtin_overridden_symbol_name)]\n+    ExportNameFn,\n+    #[diag(lint_builtin_link_section_fn)]\n+    #[note(lint_builtin_overridden_symbol_section)]\n+    LinkSectionFn,\n+    #[diag(lint_builtin_no_mangle_static)]\n+    #[note(lint_builtin_overridden_symbol_name)]\n+    NoMangleStatic,\n+    #[diag(lint_builtin_export_name_static)]\n+    #[note(lint_builtin_overridden_symbol_name)]\n+    ExportNameStatic,\n+    #[diag(lint_builtin_link_section_static)]\n+    #[note(lint_builtin_overridden_symbol_section)]\n+    LinkSectionStatic,\n+    #[diag(lint_builtin_no_mangle_method)]\n+    #[note(lint_builtin_overridden_symbol_name)]\n+    NoMangleMethod,\n+    #[diag(lint_builtin_export_name_method)]\n+    #[note(lint_builtin_overridden_symbol_name)]\n+    ExportNameMethod,\n+    #[diag(lint_builtin_decl_unsafe_fn)]\n+    DeclUnsafeFn,\n+    #[diag(lint_builtin_decl_unsafe_method)]\n+    DeclUnsafeMethod,\n+    #[diag(lint_builtin_impl_unsafe_method)]\n+    ImplUnsafeMethod,\n+}\n \n #[derive(LintDiagnostic)]\n #[diag(lint_builtin_missing_doc)]"}]}