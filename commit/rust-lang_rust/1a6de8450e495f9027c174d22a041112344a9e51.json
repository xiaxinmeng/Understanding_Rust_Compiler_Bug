{"sha": "1a6de8450e495f9027c174d22a041112344a9e51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmRlODQ1MGU0OTVmOTAyN2MxNzRkMjJhMDQxMTEyMzQ0YTllNTE=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-21T21:51:28Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-22T09:04:29Z"}, "message": "Remove `sys::args::Args::inner_debug` and use `Debug` instead", "tree": {"sha": "dfe55246caa2104aa365cdf6866d20935fe293df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfe55246caa2104aa365cdf6866d20935fe293df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6de8450e495f9027c174d22a041112344a9e51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6de8450e495f9027c174d22a041112344a9e51", "html_url": "https://github.com/rust-lang/rust/commit/1a6de8450e495f9027c174d22a041112344a9e51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6de8450e495f9027c174d22a041112344a9e51/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62652865b6029b4776a7c03efa13a37b15c9b953", "url": "https://api.github.com/repos/rust-lang/rust/commits/62652865b6029b4776a7c03efa13a37b15c9b953", "html_url": "https://github.com/rust-lang/rust/commit/62652865b6029b4776a7c03efa13a37b15c9b953"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "addec7d9ad847498eba9fd624c0cc52391c0453a", "filename": "library/std/src/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=1a6de8450e495f9027c174d22a041112344a9e51", "patch": "@@ -799,7 +799,7 @@ impl DoubleEndedIterator for Args {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Args {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"Args\").field(\"inner\", &self.inner.inner.inner_debug()).finish()\n+        f.debug_struct(\"Args\").field(\"inner\", &self.inner.inner).finish()\n     }\n }\n \n@@ -840,7 +840,7 @@ impl DoubleEndedIterator for ArgsOs {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for ArgsOs {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"ArgsOs\").field(\"inner\", &self.inner.inner_debug()).finish()\n+        f.debug_struct(\"ArgsOs\").field(\"inner\", &self.inner).finish()\n     }\n }\n "}, {"sha": "4794f89a5aee327da89f538ce3d5bb4634379e83", "filename": "library/std/src/sys/hermit/args.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs?ref=1a6de8450e495f9027c174d22a041112344a9e51", "patch": "@@ -1,4 +1,5 @@\n use crate::ffi::OsString;\n+use crate::fmt;\n use crate::marker::PhantomData;\n use crate::vec;\n \n@@ -22,9 +23,9 @@ pub struct Args {\n     _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n-impl Args {\n-    pub fn inner_debug(&self) -> &[OsString] {\n-        self.iter.as_slice()\n+impl fmt::Debug for Args {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.iter.as_slice().fmt(f)\n     }\n }\n "}, {"sha": "463188ad7c0c33c347661f694373c85bd0592d42", "filename": "library/std/src/sys/sgx/args.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fargs.rs?ref=1a6de8450e495f9027c174d22a041112344a9e51", "patch": "@@ -1,5 +1,6 @@\n use super::abi::usercalls::{alloc, raw::ByteBuffer};\n use crate::ffi::OsString;\n+use crate::fmt;\n use crate::slice;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sys::os_str::Buf;\n@@ -31,9 +32,9 @@ pub fn args() -> Args {\n \n pub struct Args(slice::Iter<'static, OsString>);\n \n-impl Args {\n-    pub fn inner_debug(&self) -> &[OsString] {\n-        self.0.as_slice()\n+impl fmt::Debug for Args {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.as_slice().fmt(f)\n     }\n }\n "}, {"sha": "cba0627e93a8504823e10c6fda1e7b1b18ff8ea7", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=1a6de8450e495f9027c174d22a041112344a9e51", "patch": "@@ -6,6 +6,7 @@\n #![allow(dead_code)] // runtime init functions not used during testing\n \n use crate::ffi::OsString;\n+use crate::fmt;\n use crate::marker::PhantomData;\n use crate::vec;\n \n@@ -29,9 +30,9 @@ pub struct Args {\n     _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n-impl Args {\n-    pub fn inner_debug(&self) -> &[OsString] {\n-        self.iter.as_slice()\n+impl fmt::Debug for Args {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.iter.as_slice().fmt(f)\n     }\n }\n "}, {"sha": "360bb65af69535e234a3a15c526ce58fa7f65d4d", "filename": "library/std/src/sys/unsupported/args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fargs.rs?ref=1a6de8450e495f9027c174d22a041112344a9e51", "patch": "@@ -9,9 +9,9 @@ pub fn args() -> Args {\n     Args {}\n }\n \n-impl Args {\n-    pub fn inner_debug(&self) -> &[OsString] {\n-        &[]\n+impl fmt::Debug for Args {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().finish()\n     }\n }\n "}, {"sha": "86405dede4277f609a92228e7a7a1bf9fe70f958", "filename": "library/std/src/sys/wasi/args.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs?ref=1a6de8450e495f9027c174d22a041112344a9e51", "patch": "@@ -1,6 +1,7 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n use crate::ffi::{CStr, OsStr, OsString};\n+use crate::fmt;\n use crate::marker::PhantomData;\n use crate::os::wasi::ffi::OsStrExt;\n use crate::vec;\n@@ -38,9 +39,9 @@ fn maybe_args() -> Option<Vec<OsString>> {\n     }\n }\n \n-impl Args {\n-    pub fn inner_debug(&self) -> &[OsString] {\n-        self.iter.as_slice()\n+impl fmt::Debug for Args {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.iter.as_slice().fmt(f)\n     }\n }\n "}, {"sha": "99d300b53b3b91b56aa28412f8ad99364e1980cd", "filename": "library/std/src/sys/wasm/args.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs?ref=1a6de8450e495f9027c174d22a041112344a9e51", "patch": "@@ -1,4 +1,5 @@\n use crate::ffi::OsString;\n+use crate::fmt;\n use crate::marker::PhantomData;\n use crate::vec;\n \n@@ -17,9 +18,9 @@ pub struct Args {\n     _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n-impl Args {\n-    pub fn inner_debug(&self) -> &[OsString] {\n-        self.iter.as_slice()\n+impl fmt::Debug for Args {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.iter.as_slice().fmt(f)\n     }\n }\n "}, {"sha": "31197e4accc6d13730dea0e82b93ef9e18b993ad", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6de8450e495f9027c174d22a041112344a9e51/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=1a6de8450e495f9027c174d22a041112344a9e51", "patch": "@@ -164,19 +164,9 @@ pub struct Args {\n     parsed_args_list: vec::IntoIter<OsString>,\n }\n \n-pub struct ArgsInnerDebug<'a> {\n-    args: &'a Args,\n-}\n-\n-impl<'a> fmt::Debug for ArgsInnerDebug<'a> {\n+impl fmt::Debug for Args {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.args.parsed_args_list.as_slice().fmt(f)\n-    }\n-}\n-\n-impl Args {\n-    pub fn inner_debug(&self) -> ArgsInnerDebug<'_> {\n-        ArgsInnerDebug { args: self }\n+        self.parsed_args_list.as_slice().fmt(f)\n     }\n }\n "}]}