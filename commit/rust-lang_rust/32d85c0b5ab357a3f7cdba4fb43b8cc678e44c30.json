{"sha": "32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "node_id": "C_kwDOAAsO6NoAKDMyZDg1YzBiNWFiMzU3YTNmN2NkYmE0ZmI0M2I4Y2M2NzhlNDRjMzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-17T19:07:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-17T19:07:02Z"}, "message": "Rollup merge of #92164 - WaffleLapkin:rustc_must_implement_one_of_attr, r=Aaron1011\n\nImplement `#[rustc_must_implement_one_of]` attribute\n\nThis PR adds a new attribute \u2014 `#[rustc_must_implement_one_of]` that allows changing the \"minimal complete definition\" of a trait. It's similar to GHC's minimal `{-# MINIMAL #-}` pragma, though `#[rustc_must_implement_one_of]` is weaker atm.\n\nSuch attribute was long wanted. It can be, for example, used in `Read` trait to make transitions to recently added `read_buf` easier:\n```rust\n#[rustc_must_implement_one_of(read, read_buf)]\npub trait Read {\n    fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n        let mut buf = ReadBuf::new(buf);\n        self.read_buf(&mut buf)?;\n        Ok(buf.filled_len())\n    }\n\n    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> {\n        default_read_buf(|b| self.read(b), buf)\n    }\n}\n\nimpl Read for Ty0 {}\n//^ This will fail to compile even though all `Read` methods have default implementations\n\n// Both of these will compile just fine\nimpl Read for Ty1 {\n    fn read(&mut self, buf: &mut [u8]) -> Result<usize> { /* ... */ }\n}\nimpl Read for Ty2 {\n    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> { /* ... */ }\n}\n```\n\nFor now, this is implemented as an internal attribute to start experimenting on the design of this feature. In the future we may want to extend it:\n- Allow arbitrary requirements like `a | (b & c)`\n- Allow multiple requirements like\n  - ```rust\n    #[rustc_must_implement_one_of(a, b)]\n    #[rustc_must_implement_one_of(c, d)]\n    ```\n- Make it appear in rustdoc documentation\n- Change the syntax?\n- Etc\n\nEventually, we should make an RFC and make this (or rather similar) attribute public.\n\n---\n\nI'm fairly new to compiler development and not at all sure if the implementation makes sense, but at least it passes tests :)", "tree": {"sha": "91aae51eedf278b7576910b0cbc686c279736035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91aae51eedf278b7576910b0cbc686c279736035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5b5XCRBK7hj4Ov3rIwAATXIIAE4SokYZTWXOOl054HDogkC7\nDOjvwhoIvetXHrVw+Tzj2AL3OBW6bJ6JBtAb9bgOZ4Qexd77tDi/fd0QUNuyN4Iw\nSBh9ycT4jIOZ1LLNJ5x9l81rP3BXawVtz+I4VgeIJHepEv4gvKVsmI2Y+tDbw9Gz\nvDVf0V8MHQo+XygdCRlHO4EVR0Uh2E1jcJUOWY2kVLq/jmm6FjgZviawvwak29sx\nxupK9+eR3vrzP2Ag4acgXABohkLR3yM9IX5JM3l+iUnKzzPXViL2piWxS2FqtxVT\nffX17TXTYhSletqHV7J9BdZXmarPC5mLGQa7EShi7VERh8EGbgLf7tu0X/cMmk0=\n=7Cp6\n-----END PGP SIGNATURE-----\n", "payload": "tree 91aae51eedf278b7576910b0cbc686c279736035\nparent 67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d\nparent 28edd7ac090d621ad8fd0ebe220d897d9df386a9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642446422 +0100\ncommitter GitHub <noreply@github.com> 1642446422 +0100\n\nRollup merge of #92164 - WaffleLapkin:rustc_must_implement_one_of_attr, r=Aaron1011\n\nImplement `#[rustc_must_implement_one_of]` attribute\n\nThis PR adds a new attribute \u2014 `#[rustc_must_implement_one_of]` that allows changing the \"minimal complete definition\" of a trait. It's similar to GHC's minimal `{-# MINIMAL #-}` pragma, though `#[rustc_must_implement_one_of]` is weaker atm.\n\nSuch attribute was long wanted. It can be, for example, used in `Read` trait to make transitions to recently added `read_buf` easier:\n```rust\n#[rustc_must_implement_one_of(read, read_buf)]\npub trait Read {\n    fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n        let mut buf = ReadBuf::new(buf);\n        self.read_buf(&mut buf)?;\n        Ok(buf.filled_len())\n    }\n\n    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> {\n        default_read_buf(|b| self.read(b), buf)\n    }\n}\n\nimpl Read for Ty0 {}\n//^ This will fail to compile even though all `Read` methods have default implementations\n\n// Both of these will compile just fine\nimpl Read for Ty1 {\n    fn read(&mut self, buf: &mut [u8]) -> Result<usize> { /* ... */ }\n}\nimpl Read for Ty2 {\n    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> { /* ... */ }\n}\n```\n\nFor now, this is implemented as an internal attribute to start experimenting on the design of this feature. In the future we may want to extend it:\n- Allow arbitrary requirements like `a | (b & c)`\n- Allow multiple requirements like\n  - ```rust\n    #[rustc_must_implement_one_of(a, b)]\n    #[rustc_must_implement_one_of(c, d)]\n    ```\n- Make it appear in rustdoc documentation\n- Change the syntax?\n- Etc\n\nEventually, we should make an RFC and make this (or rather similar) attribute public.\n\n---\n\nI'm fairly new to compiler development and not at all sure if the implementation makes sense, but at least it passes tests :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "html_url": "https://github.com/rust-lang/rust/commit/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d", "html_url": "https://github.com/rust-lang/rust/commit/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d"}, {"sha": "28edd7ac090d621ad8fd0ebe220d897d9df386a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/28edd7ac090d621ad8fd0ebe220d897d9df386a9", "html_url": "https://github.com/rust-lang/rust/commit/28edd7ac090d621ad8fd0ebe220d897d9df386a9"}], "stats": {"total": 435, "additions": 431, "deletions": 4}, "files": [{"sha": "5309f217b4adaa755cbb47f12e0635dd497f9282", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -682,6 +682,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"the `#[rustc_skip_array_during_method_dispatch]` attribute is used to exclude a trait \\\n         from method dispatch when the receiver is an array, for compatibility in editions < 2021.\"\n     ),\n+    rustc_attr!(\n+        rustc_must_implement_one_of, Normal, template!(List: \"function1, function2, ...\"), ErrorFollowing,\n+        \"the `#[rustc_must_implement_one_of]` attribute is used to change minimal complete \\\n+        definition of a trait, it's currently in experimental form and should be changed before \\\n+        being exposed outside of the std\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Testing:"}, {"sha": "220bc9c5f752f556bcf41e55b433f3043e68ef56", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -820,6 +820,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     data.skip_array_during_method_dispatch,\n                     data.specialization_kind,\n                     self.def_path_hash(item_id),\n+                    data.must_implement_one_of,\n                 )\n             }\n             EntryKind::TraitAlias => ty::TraitDef::new(\n@@ -831,6 +832,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 false,\n                 ty::trait_def::TraitSpecializationKind::None,\n                 self.def_path_hash(item_id),\n+                None,\n             ),\n             _ => bug!(\"def-index does not refer to trait or trait alias\"),\n         }"}, {"sha": "ebb78adf343ced020eee4149784ef86687934eb5", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -1513,6 +1513,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     is_marker: trait_def.is_marker,\n                     skip_array_during_method_dispatch: trait_def.skip_array_during_method_dispatch,\n                     specialization_kind: trait_def.specialization_kind,\n+                    must_implement_one_of: trait_def.must_implement_one_of.clone(),\n                 };\n \n                 EntryKind::Trait(self.lazy(data))"}, {"sha": "8424a31d59fce72a8b2ebddd8badee4b684ef5be", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -378,6 +378,7 @@ struct TraitData {\n     is_marker: bool,\n     skip_array_during_method_dispatch: bool,\n     specialization_kind: ty::trait_def::TraitSpecializationKind,\n+    must_implement_one_of: Option<Box<[Ident]>>,\n }\n \n #[derive(TyEncodable, TyDecodable)]"}, {"sha": "9f8053d4a4eac7893c57dc9743f402638732c0c1", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -1,7 +1,7 @@\n use crate::traits::specialization_graph;\n use crate::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n use crate::ty::fold::TypeFoldable;\n-use crate::ty::{Ty, TyCtxt};\n+use crate::ty::{Ident, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::DefPathHash;\n@@ -44,6 +44,10 @@ pub struct TraitDef {\n     /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n     /// recomputed all the time.\n     pub def_path_hash: DefPathHash,\n+\n+    /// List of functions from `#[rustc_must_implement_one_of]` attribute one of which\n+    /// must be implemented.\n+    pub must_implement_one_of: Option<Box<[Ident]>>,\n }\n \n /// Whether this trait is treated specially by the standard library\n@@ -87,6 +91,7 @@ impl<'tcx> TraitDef {\n         skip_array_during_method_dispatch: bool,\n         specialization_kind: TraitSpecializationKind,\n         def_path_hash: DefPathHash,\n+        must_implement_one_of: Option<Box<[Ident]>>,\n     ) -> TraitDef {\n         TraitDef {\n             def_id,\n@@ -97,6 +102,7 @@ impl<'tcx> TraitDef {\n             skip_array_during_method_dispatch,\n             specialization_kind,\n             def_path_hash,\n+            must_implement_one_of,\n         }\n     }\n "}, {"sha": "21f4312de351631721098656995eed71465f0469", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -1162,6 +1162,7 @@ symbols! {\n         rustc_macro_transparency,\n         rustc_main,\n         rustc_mir,\n+        rustc_must_implement_one_of,\n         rustc_nonnull_optimization_guaranteed,\n         rustc_object_lifetime_default,\n         rustc_on_unimplemented,"}, {"sha": "eb49cc0233d835600a1937a35db002b98780a90d", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -978,6 +978,10 @@ fn check_impl_items_against_trait<'tcx>(\n     if let Ok(ancestors) = trait_def.ancestors(tcx, impl_id.to_def_id()) {\n         // Check for missing items from trait\n         let mut missing_items = Vec::new();\n+\n+        let mut must_implement_one_of: Option<&[Ident]> =\n+            trait_def.must_implement_one_of.as_deref();\n+\n         for &trait_item_id in tcx.associated_item_def_ids(impl_trait_ref.def_id) {\n             let is_implemented = ancestors\n                 .leaf_def(tcx, trait_item_id)\n@@ -986,12 +990,37 @@ fn check_impl_items_against_trait<'tcx>(\n             if !is_implemented && tcx.impl_defaultness(impl_id).is_final() {\n                 missing_items.push(tcx.associated_item(trait_item_id));\n             }\n+\n+            if let Some(required_items) = &must_implement_one_of {\n+                // true if this item is specifically implemented in this impl\n+                let is_implemented_here = ancestors\n+                    .leaf_def(tcx, trait_item_id)\n+                    .map_or(false, |node_item| !node_item.defining_node.is_from_trait());\n+\n+                if is_implemented_here {\n+                    let trait_item = tcx.associated_item(trait_item_id);\n+                    if required_items.contains(&trait_item.ident) {\n+                        must_implement_one_of = None;\n+                    }\n+                }\n+            }\n         }\n \n         if !missing_items.is_empty() {\n             let impl_span = tcx.sess.source_map().guess_head_span(full_impl_span);\n             missing_items_err(tcx, impl_span, &missing_items, full_impl_span);\n         }\n+\n+        if let Some(missing_items) = must_implement_one_of {\n+            let impl_span = tcx.sess.source_map().guess_head_span(full_impl_span);\n+            let attr_span = tcx\n+                .get_attrs(impl_trait_ref.def_id)\n+                .iter()\n+                .find(|attr| attr.has_name(sym::rustc_must_implement_one_of))\n+                .map(|attr| attr.span);\n+\n+            missing_items_must_implement_one_of_err(tcx, impl_span, missing_items, attr_span);\n+        }\n     }\n }\n "}, {"sha": "059d4a7f3a4bc0cf62cd21abf7016191b0ed78cf", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -637,6 +637,31 @@ fn missing_items_err(\n     err.emit();\n }\n \n+fn missing_items_must_implement_one_of_err(\n+    tcx: TyCtxt<'_>,\n+    impl_span: Span,\n+    missing_items: &[Ident],\n+    annotation_span: Option<Span>,\n+) {\n+    let missing_items_msg =\n+        missing_items.iter().map(Ident::to_string).collect::<Vec<_>>().join(\"`, `\");\n+\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        impl_span,\n+        E0046,\n+        \"not all trait items implemented, missing one of: `{}`\",\n+        missing_items_msg\n+    );\n+    err.span_label(impl_span, format!(\"missing one of `{}` in implementation\", missing_items_msg));\n+\n+    if let Some(annotation_span) = annotation_span {\n+        err.span_note(annotation_span, \"required because of this annotation\");\n+    }\n+\n+    err.emit();\n+}\n+\n /// Resugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions.\n fn bounds_from_generic_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "314174e0f8501e5c63a3f79b2ebd480b49463589", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 103, "deletions": 3, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -1190,9 +1190,11 @@ fn super_predicates_that_define_assoc_type(\n fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n     let item = tcx.hir().expect_item(def_id.expect_local());\n \n-    let (is_auto, unsafety) = match item.kind {\n-        hir::ItemKind::Trait(is_auto, unsafety, ..) => (is_auto == hir::IsAuto::Yes, unsafety),\n-        hir::ItemKind::TraitAlias(..) => (false, hir::Unsafety::Normal),\n+    let (is_auto, unsafety, items) = match item.kind {\n+        hir::ItemKind::Trait(is_auto, unsafety, .., items) => {\n+            (is_auto == hir::IsAuto::Yes, unsafety, items)\n+        }\n+        hir::ItemKind::TraitAlias(..) => (false, hir::Unsafety::Normal, &[][..]),\n         _ => span_bug!(item.span, \"trait_def_of_item invoked on non-trait\"),\n     };\n \n@@ -1219,6 +1221,103 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n         ty::trait_def::TraitSpecializationKind::None\n     };\n     let def_path_hash = tcx.def_path_hash(def_id);\n+\n+    let must_implement_one_of = tcx\n+        .get_attrs(def_id)\n+        .iter()\n+        .find(|attr| attr.has_name(sym::rustc_must_implement_one_of))\n+        // Check that there are at least 2 arguments of `#[rustc_must_implement_one_of]`\n+        // and that they are all identifiers\n+        .and_then(|attr| match attr.meta_item_list() {\n+            Some(items) if items.len() < 2 => {\n+                tcx.sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"the `#[rustc_must_implement_one_of]` attribute must be \\\n+                        used with at least 2 args\",\n+                    )\n+                    .emit();\n+\n+                None\n+            }\n+            Some(items) => items\n+                .into_iter()\n+                .map(|item| item.ident().ok_or(item.span()))\n+                .collect::<Result<Box<[_]>, _>>()\n+                .map_err(|span| {\n+                    tcx.sess\n+                        .struct_span_err(span, \"must be a name of an associated function\")\n+                        .emit();\n+                })\n+                .ok()\n+                .zip(Some(attr.span)),\n+            // Error is reported by `rustc_attr!`\n+            None => None,\n+        })\n+        // Check that all arguments of `#[rustc_must_implement_one_of]` reference\n+        // functions in the trait with default implementations\n+        .and_then(|(list, attr_span)| {\n+            let errors = list.iter().filter_map(|ident| {\n+                let item = items.iter().find(|item| item.ident == *ident);\n+\n+                match item {\n+                    Some(item) if matches!(item.kind, hir::AssocItemKind::Fn { .. }) => {\n+                        if !item.defaultness.has_value() {\n+                            tcx.sess\n+                                .struct_span_err(\n+                                    item.span,\n+                                    \"This function doesn't have a default implementation\",\n+                                )\n+                                .span_note(attr_span, \"required by this annotation\")\n+                                .emit();\n+\n+                            return Some(());\n+                        }\n+\n+                        return None;\n+                    }\n+                    Some(item) => tcx\n+                        .sess\n+                        .struct_span_err(item.span, \"Not a function\")\n+                        .span_note(attr_span, \"required by this annotation\")\n+                        .note(\n+                            \"All `#[rustc_must_implement_one_of]` arguments \\\n+                            must be associated function names\",\n+                        )\n+                        .emit(),\n+                    None => tcx\n+                        .sess\n+                        .struct_span_err(ident.span, \"Function not found in this trait\")\n+                        .emit(),\n+                }\n+\n+                Some(())\n+            });\n+\n+            (errors.count() == 0).then_some(list)\n+        })\n+        // Check for duplicates\n+        .and_then(|list| {\n+            let mut set: FxHashMap<Symbol, Span> = FxHashMap::default();\n+            let mut no_dups = true;\n+\n+            for ident in &*list {\n+                if let Some(dup) = set.insert(ident.name, ident.span) {\n+                    tcx.sess\n+                        .struct_span_err(vec![dup, ident.span], \"Functions names are duplicated\")\n+                        .note(\n+                            \"All `#[rustc_must_implement_one_of]` arguments \\\n+                            must be unique\",\n+                        )\n+                        .emit();\n+\n+                    no_dups = false;\n+                }\n+            }\n+\n+            no_dups.then_some(list)\n+        });\n+\n     ty::TraitDef::new(\n         def_id,\n         unsafety,\n@@ -1228,6 +1327,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n         skip_array_during_method_dispatch,\n         spec_kind,\n         def_path_hash,\n+        must_implement_one_of,\n     )\n }\n "}, {"sha": "5ba2f5ce3342668c16e1a3678a91ca21723846bf", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -0,0 +1,44 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_must_implement_one_of(eq, neq)]\n+trait Equal {\n+    fn eq(&self, other: &Self) -> bool {\n+        !self.neq(other)\n+    }\n+\n+    fn neq(&self, other: &Self) -> bool {\n+        !self.eq(other)\n+    }\n+}\n+\n+struct T0;\n+struct T1;\n+struct T2;\n+struct T3;\n+\n+impl Equal for T0 {\n+    fn eq(&self, _other: &Self) -> bool {\n+        true\n+    }\n+}\n+\n+impl Equal for T1 {\n+    fn neq(&self, _other: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+impl Equal for T2 {\n+    fn eq(&self, _other: &Self) -> bool {\n+        true\n+    }\n+\n+    fn neq(&self, _other: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+impl Equal for T3 {}\n+//~^ not all trait items implemented, missing one of: `eq`, `neq`\n+\n+fn main() {}"}, {"sha": "5a4dd1388b2e098b38b0f88512126a053140ba03", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of.stderr?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -0,0 +1,15 @@\n+error[E0046]: not all trait items implemented, missing one of: `eq`, `neq`\n+  --> $DIR/rustc_must_implement_one_of.rs:41:1\n+   |\n+LL | impl Equal for T3 {}\n+   | ^^^^^^^^^^^^^^^^^ missing one of `eq`, `neq` in implementation\n+   |\n+note: required because of this annotation\n+  --> $DIR/rustc_must_implement_one_of.rs:3:1\n+   |\n+LL | #[rustc_must_implement_one_of(eq, neq)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "56e8fcff0fce507f3bd96dcc969373f7b95e74f2", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_duplicates.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -0,0 +1,19 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_must_implement_one_of(a, a)]\n+//~^ Functions names are duplicated\n+trait Trait {\n+    fn a() {}\n+}\n+\n+#[rustc_must_implement_one_of(b, a, a, c, b, c)]\n+//~^ Functions names are duplicated\n+//~| Functions names are duplicated\n+//~| Functions names are duplicated\n+trait Trait1 {\n+    fn a() {}\n+    fn b() {}\n+    fn c() {}\n+}\n+\n+fn main() {}"}, {"sha": "777beba618277f50d9aa4f1314956f7de4b41838", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_duplicates.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.stderr?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -0,0 +1,34 @@\n+error: Functions names are duplicated\n+  --> $DIR/rustc_must_implement_one_of_duplicates.rs:3:31\n+   |\n+LL | #[rustc_must_implement_one_of(a, a)]\n+   |                               ^  ^\n+   |\n+   = note: All `#[rustc_must_implement_one_of]` arguments must be unique\n+\n+error: Functions names are duplicated\n+  --> $DIR/rustc_must_implement_one_of_duplicates.rs:9:34\n+   |\n+LL | #[rustc_must_implement_one_of(b, a, a, c, b, c)]\n+   |                                  ^  ^\n+   |\n+   = note: All `#[rustc_must_implement_one_of]` arguments must be unique\n+\n+error: Functions names are duplicated\n+  --> $DIR/rustc_must_implement_one_of_duplicates.rs:9:31\n+   |\n+LL | #[rustc_must_implement_one_of(b, a, a, c, b, c)]\n+   |                               ^           ^\n+   |\n+   = note: All `#[rustc_must_implement_one_of]` arguments must be unique\n+\n+error: Functions names are duplicated\n+  --> $DIR/rustc_must_implement_one_of_duplicates.rs:9:40\n+   |\n+LL | #[rustc_must_implement_one_of(b, a, a, c, b, c)]\n+   |                                        ^     ^\n+   |\n+   = note: All `#[rustc_must_implement_one_of]` arguments must be unique\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "ec2995872de021bea422bef62e3c96a5d4a05c1c", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_gated.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_gated.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -0,0 +1,13 @@\n+#[rustc_must_implement_one_of(eq, neq)]\n+//~^ the `#[rustc_must_implement_one_of]` attribute is used to change minimal complete definition of a trait, it's currently in experimental form and should be changed before being exposed outside of the std\n+trait Equal {\n+    fn eq(&self, other: &Self) -> bool {\n+        !self.neq(other)\n+    }\n+\n+    fn neq(&self, other: &Self) -> bool {\n+        !self.eq(other)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "228bc3e35c21d2ab7bf152da302314889e2fb366", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_gated.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_gated.stderr?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: the `#[rustc_must_implement_one_of]` attribute is used to change minimal complete definition of a trait, it's currently in experimental form and should be changed before being exposed outside of the std\n+  --> $DIR/rustc_must_implement_one_of_gated.rs:1:1\n+   |\n+LL | #[rustc_must_implement_one_of(eq, neq)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1089e5f9c4ab97d8b3cef3c5878d1635289a28a9", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_misuse.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.rs?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -0,0 +1,38 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_must_implement_one_of(a, b)]\n+//~^ Function not found in this trait\n+//~| Function not found in this trait\n+trait Tr0 {}\n+\n+#[rustc_must_implement_one_of(a, b)]\n+//~^ Function not found in this trait\n+trait Tr1 {\n+    fn a() {}\n+}\n+\n+#[rustc_must_implement_one_of(a)]\n+//~^ the `#[rustc_must_implement_one_of]` attribute must be used with at least 2 args\n+trait Tr2 {\n+    fn a() {}\n+}\n+\n+#[rustc_must_implement_one_of]\n+//~^ malformed `rustc_must_implement_one_of` attribute input\n+trait Tr3 {}\n+\n+#[rustc_must_implement_one_of(A, B)]\n+trait Tr4 {\n+    const A: u8 = 1; //~ Not a function\n+\n+    type B; //~ Not a function\n+}\n+\n+#[rustc_must_implement_one_of(a, b)]\n+trait Tr5 {\n+    fn a(); //~ This function doesn't have a default implementation\n+\n+    fn b(); //~ This function doesn't have a default implementation\n+}\n+\n+fn main() {}"}, {"sha": "74a6dc8fec97ceb2cc3f9bc19152cba6ba7d0e25", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_misuse.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.stderr?ref=32d85c0b5ab357a3f7cdba4fb43b8cc678e44c30", "patch": "@@ -0,0 +1,82 @@\n+error: malformed `rustc_must_implement_one_of` attribute input\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:20:1\n+   |\n+LL | #[rustc_must_implement_one_of]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_must_implement_one_of(function1, function2, ...)]`\n+\n+error: Function not found in this trait\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:3:31\n+   |\n+LL | #[rustc_must_implement_one_of(a, b)]\n+   |                               ^\n+\n+error: Function not found in this trait\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:3:34\n+   |\n+LL | #[rustc_must_implement_one_of(a, b)]\n+   |                                  ^\n+\n+error: Function not found in this trait\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:8:34\n+   |\n+LL | #[rustc_must_implement_one_of(a, b)]\n+   |                                  ^\n+\n+error: the `#[rustc_must_implement_one_of]` attribute must be used with at least 2 args\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:14:1\n+   |\n+LL | #[rustc_must_implement_one_of(a)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Not a function\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:26:5\n+   |\n+LL |     const A: u8 = 1;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: required by this annotation\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:24:1\n+   |\n+LL | #[rustc_must_implement_one_of(A, B)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: All `#[rustc_must_implement_one_of]` arguments must be associated function names\n+\n+error: Not a function\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:28:5\n+   |\n+LL |     type B;\n+   |     ^^^^^^^\n+   |\n+note: required by this annotation\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:24:1\n+   |\n+LL | #[rustc_must_implement_one_of(A, B)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: All `#[rustc_must_implement_one_of]` arguments must be associated function names\n+\n+error: This function doesn't have a default implementation\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:33:5\n+   |\n+LL |     fn a();\n+   |     ^^^^^^^\n+   |\n+note: required by this annotation\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:31:1\n+   |\n+LL | #[rustc_must_implement_one_of(a, b)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: This function doesn't have a default implementation\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:35:5\n+   |\n+LL |     fn b();\n+   |     ^^^^^^^\n+   |\n+note: required by this annotation\n+  --> $DIR/rustc_must_implement_one_of_misuse.rs:31:1\n+   |\n+LL | #[rustc_must_implement_one_of(a, b)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}]}