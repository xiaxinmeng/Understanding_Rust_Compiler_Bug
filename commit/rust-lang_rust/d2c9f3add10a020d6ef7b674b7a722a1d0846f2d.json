{"sha": "d2c9f3add10a020d6ef7b674b7a722a1d0846f2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYzlmM2FkZDEwYTAyMGQ2ZWY3YjY3NGI3YTcyMmExZDA4NDZmMmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-16T07:30:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-16T07:30:29Z"}, "message": "internal: add deref_mut to minicore", "tree": {"sha": "a20045a4daf48f3de43b96dc623422e895df9fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a20045a4daf48f3de43b96dc623422e895df9fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2c9f3add10a020d6ef7b674b7a722a1d0846f2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c9f3add10a020d6ef7b674b7a722a1d0846f2d", "html_url": "https://github.com/rust-lang/rust/commit/d2c9f3add10a020d6ef7b674b7a722a1d0846f2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2c9f3add10a020d6ef7b674b7a722a1d0846f2d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2980fd430dbe30d5d8fd28091a8c47b3ffd4008f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2980fd430dbe30d5d8fd28091a8c47b3ffd4008f", "html_url": "https://github.com/rust-lang/rust/commit/2980fd430dbe30d5d8fd28091a8c47b3ffd4008f"}], "stats": {"total": 84, "additions": 49, "deletions": 35}, "files": [{"sha": "fac83b650ec7c6811c905f3cfc7e695d1267f2de", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d2c9f3add10a020d6ef7b674b7a722a1d0846f2d/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c9f3add10a020d6ef7b674b7a722a1d0846f2d/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=d2c9f3add10a020d6ef7b674b7a722a1d0846f2d", "patch": "@@ -1191,29 +1191,19 @@ fn main() {\n     fn suggest_deref_mut() {\n         check_relevance(\n             r#\"\n-#[lang = \"deref\"]\n-trait Deref {\n-    type Target;\n-    fn deref(&self) -> &Self::Target;\n-}\n-\n-#[lang = \"deref_mut\"]\n-pub trait DerefMut: Deref {\n-    fn deref_mut(&mut self) -> &mut Self::Target;\n-}\n-\n+//- minicore: deref_mut\n struct S;\n struct T(S);\n \n-impl Deref for T {\n+impl core::ops::Deref for T {\n     type Target = S;\n \n     fn deref(&self) -> &Self::Target {\n         &self.0\n     }\n }\n \n-impl DerefMut for T {\n+impl core::ops::DerefMut for T {\n     fn deref_mut(&mut self) -> &mut Self::Target {\n         &mut self.0\n     }\n@@ -1232,12 +1222,12 @@ fn main() {\n                 lc m [local]\n                 lc t [local]\n                 lc &mut t [type+local]\n-                tt DerefMut []\n-                tt Deref []\n-                fn foo(\u2026) []\n                 st T []\n                 st S []\n                 fn main() []\n+                fn foo(\u2026) []\n+                md core []\n+                tt Sized []\n             \"#]],\n         )\n     }"}, {"sha": "313088c3766253a8c73b9e8bfa57b70a0c8a3578", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d2c9f3add10a020d6ef7b674b7a722a1d0846f2d/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c9f3add10a020d6ef7b674b7a722a1d0846f2d/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=d2c9f3add10a020d6ef7b674b7a722a1d0846f2d", "patch": "@@ -129,8 +129,18 @@ impl Fixture {\n             if line.starts_with(\"//-\") {\n                 let meta = Fixture::parse_meta_line(line);\n                 res.push(meta)\n-            } else if let Some(entry) = res.last_mut() {\n-                entry.text.push_str(line);\n+            } else {\n+                if line.starts_with(\"// \")\n+                    && line.contains(\":\")\n+                    && !line.contains(\"::\")\n+                    && line.chars().all(|it| !it.is_uppercase())\n+                {\n+                    panic!(\"looks like invalid metadata line: {:?}\", line)\n+                }\n+\n+                if let Some(entry) = res.last_mut() {\n+                    entry.text.push_str(line);\n+                }\n             }\n         }\n \n@@ -276,46 +286,52 @@ impl MiniCore {\n             }\n         }\n \n-        let mut curr_region = \"\";\n+        let mut active_regions = Vec::new();\n         let mut seen_regions = Vec::new();\n         for line in lines {\n             let trimmed = line.trim();\n             if let Some(region) = trimmed.strip_prefix(\"// region:\") {\n-                assert_eq!(curr_region, \"\");\n-                curr_region = region;\n+                active_regions.push(region);\n                 continue;\n             }\n             if let Some(region) = trimmed.strip_prefix(\"// endregion:\") {\n-                assert_eq!(curr_region, region);\n-                curr_region = \"\";\n+                let prev = active_regions.pop().unwrap();\n+                assert_eq!(prev, region);\n                 continue;\n             }\n-            seen_regions.push(curr_region);\n \n-            let mut flag = curr_region;\n+            let mut line_region = false;\n             if let Some(idx) = trimmed.find(\"// :\") {\n-                flag = &trimmed[idx + \"// :\".len()..];\n+                line_region = true;\n+                active_regions.push(&trimmed[idx + \"// :\".len()..]);\n             }\n \n-            let skip = if flag == \"\" {\n-                false\n-            } else {\n-                assert!(!flag.starts_with(' '), \"region marker starts with a space: {:?}\", flag);\n-                self.assert_valid_flag(flag);\n-                !self.has_flag(flag)\n-            };\n+            let mut keep = true;\n+            for &region in &active_regions {\n+                assert!(\n+                    !region.starts_with(' '),\n+                    \"region marker starts with a space: {:?}\",\n+                    region\n+                );\n+                self.assert_valid_flag(region);\n+                seen_regions.push(region);\n+                keep &= self.has_flag(region);\n+            }\n \n-            if !skip {\n+            if keep {\n                 buf.push_str(line)\n             }\n+            if line_region {\n+                active_regions.pop().unwrap();\n+            }\n         }\n \n         for flag in &self.valid_flags {\n             if !seen_regions.iter().any(|it| it == flag) {\n                 panic!(\"unused minicore flag: {:?}\", flag);\n             }\n         }\n-\n+        format!(\"{}\", buf);\n         buf\n     }\n }"}, {"sha": "8555ff935ad47fe45eafa7142988066d8a38e83c", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2c9f3add10a020d6ef7b674b7a722a1d0846f2d/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c9f3add10a020d6ef7b674b7a722a1d0846f2d/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=d2c9f3add10a020d6ef7b674b7a722a1d0846f2d", "patch": "@@ -13,6 +13,7 @@\n //!     range:\n //!     unsize: sized\n //!     deref: sized\n+//!     deref_mut: deref\n //!     coerce_unsized: unsize\n //!     pin:\n //!     future: pin\n@@ -64,8 +65,15 @@ pub mod ops {\n             type Target: ?Sized;\n             fn deref(&self) -> &Self::Target;\n         }\n+        // region:deref_mut\n+        #[lang = \"deref_mut\"]\n+        pub trait DerefMut: Deref {\n+            fn deref_mut(&mut self) -> &mut Self::Target;\n+        }\n+        // endregion:deref_mut\n     }\n     pub use self::deref::Deref;\n+    pub use self::deref::DerefMut; //:deref_mut\n     // endregion:deref\n \n     // region:range"}]}