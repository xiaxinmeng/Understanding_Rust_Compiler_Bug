{"sha": "b7d5172f69204b6d097d80a39dacad3494a26f5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZDUxNzJmNjkyMDRiNmQwOTdkODBhMzlkYWNhZDM0OTRhMjZmNWU=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-31T23:15:20Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-02T18:07:05Z"}, "message": "Simpify workspace handling", "tree": {"sha": "f6bd3540fb56be4fbcbbd20fae2e6574f39e99ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6bd3540fb56be4fbcbbd20fae2e6574f39e99ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7d5172f69204b6d097d80a39dacad3494a26f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d5172f69204b6d097d80a39dacad3494a26f5e", "html_url": "https://github.com/rust-lang/rust/commit/b7d5172f69204b6d097d80a39dacad3494a26f5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7d5172f69204b6d097d80a39dacad3494a26f5e/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b2bf9cf66ecfc0bca0d1405ceb0d6eb923b78e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2bf9cf66ecfc0bca0d1405ceb0d6eb923b78e2", "html_url": "https://github.com/rust-lang/rust/commit/4b2bf9cf66ecfc0bca0d1405ceb0d6eb923b78e2"}], "stats": {"total": 146, "additions": 63, "deletions": 83}, "files": [{"sha": "a133243b4774633020388c094ccf02d92b6821aa", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=b7d5172f69204b6d097d80a39dacad3494a26f5e", "patch": "@@ -58,22 +58,16 @@ pub enum ProjectWorkspace {\n #[derive(Clone)]\n pub struct PackageRoot {\n     /// Path to the root folder\n-    path: PathBuf,\n+    pub path: PathBuf,\n     /// Is a member of the current workspace\n-    is_member: bool,\n+    pub is_member: bool,\n }\n-\n impl PackageRoot {\n-    pub fn new(path: PathBuf, is_member: bool) -> PackageRoot {\n-        PackageRoot { path, is_member }\n-    }\n-\n-    pub fn path(&self) -> &PathBuf {\n-        &self.path\n+    pub fn new_member(path: PathBuf) -> PackageRoot {\n+        Self { path, is_member: true }\n     }\n-\n-    pub fn is_member(&self) -> bool {\n-        self.is_member\n+    pub fn new_non_member(path: PathBuf) -> PackageRoot {\n+        Self { path, is_member: false }\n     }\n }\n \n@@ -130,24 +124,18 @@ impl ProjectWorkspace {\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n         match self {\n             ProjectWorkspace::Json { project } => {\n-                let mut roots = Vec::with_capacity(project.roots.len());\n-                for root in &project.roots {\n-                    roots.push(PackageRoot::new(root.path.clone(), true));\n-                }\n-                roots\n-            }\n-            ProjectWorkspace::Cargo { cargo, sysroot } => {\n-                let mut roots = Vec::with_capacity(cargo.packages().len() + sysroot.crates().len());\n-                for pkg in cargo.packages() {\n-                    let root = cargo[pkg].root().to_path_buf();\n-                    let member = cargo[pkg].is_member;\n-                    roots.push(PackageRoot::new(root, member));\n-                }\n-                for krate in sysroot.crates() {\n-                    roots.push(PackageRoot::new(sysroot[krate].root_dir().to_path_buf(), false))\n-                }\n-                roots\n+                project.roots.iter().map(|r| PackageRoot::new_member(r.path.clone())).collect()\n             }\n+            ProjectWorkspace::Cargo { cargo, sysroot } => cargo\n+                .packages()\n+                .map(|pkg| PackageRoot {\n+                    path: cargo[pkg].root().to_path_buf(),\n+                    is_member: cargo[pkg].is_member,\n+                })\n+                .chain(sysroot.crates().map(|krate| {\n+                    PackageRoot::new_non_member(sysroot[krate].root_dir().to_path_buf())\n+                }))\n+                .collect(),\n         }\n     }\n "}, {"sha": "0b138edd7107ef85974fa7b31c92f1d81b12b69a", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=b7d5172f69204b6d097d80a39dacad3494a26f5e", "patch": "@@ -65,10 +65,10 @@ pub fn analysis_bench(\n         roots\n             .iter()\n             .find_map(|(source_root_id, project_root)| {\n-                if project_root.is_member() {\n+                if project_root.is_member {\n                     for file_id in db.source_root(*source_root_id).walk() {\n                         let rel_path = db.file_relative_path(file_id);\n-                        let abs_path = rel_path.to_path(project_root.path());\n+                        let abs_path = rel_path.to_path(&project_root.path);\n                         if abs_path == path {\n                             return Some(file_id);\n                         }"}, {"sha": "edd90df77fe2b4881dc743df30d8a7a8293f7ebc", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=b7d5172f69204b6d097d80a39dacad3494a26f5e", "patch": "@@ -39,7 +39,7 @@ pub fn analysis_stats(\n         roots\n             .into_iter()\n             .filter_map(|(source_root_id, project_root)| {\n-                if with_deps || project_root.is_member() {\n+                if with_deps || project_root.is_member {\n                     Some(source_root_id)\n                 } else {\n                     None"}, {"sha": "109b1d74b7073af6e075e03182e71f3176e5a256", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=b7d5172f69204b6d097d80a39dacad3494a26f5e", "patch": "@@ -36,8 +36,7 @@ pub(crate) fn load_cargo(\n     extern_dirs.extend(ws.out_dirs());\n \n     let mut project_roots = ws.to_roots();\n-    project_roots\n-        .extend(extern_dirs.iter().map(|path| PackageRoot::new(path.to_path_buf(), false)));\n+    project_roots.extend(extern_dirs.iter().cloned().map(PackageRoot::new_non_member));\n \n     let (sender, receiver) = unbounded();\n     let sender = Box::new(move |t| sender.send(t).unwrap());\n@@ -46,9 +45,9 @@ pub(crate) fn load_cargo(\n             .iter()\n             .map(|pkg_root| {\n                 RootEntry::new(\n-                    pkg_root.path().clone(),\n+                    pkg_root.path.clone(),\n                     RustPackageFilterBuilder::default()\n-                        .set_member(pkg_root.is_member())\n+                        .set_member(pkg_root.is_member)\n                         .into_vfs_filter(),\n                 )\n             })\n@@ -58,14 +57,11 @@ pub(crate) fn load_cargo(\n     );\n \n     let source_roots = roots\n-        .iter()\n-        .map(|&vfs_root| {\n+        .into_iter()\n+        .map(|vfs_root| {\n             let source_root_id = vfs_root_to_id(vfs_root);\n-            let project_root = project_roots\n-                .iter()\n-                .find(|it| it.path() == &vfs.root2path(vfs_root))\n-                .unwrap()\n-                .clone();\n+            let project_root =\n+                project_roots.iter().find(|it| it.path == vfs.root2path(vfs_root)).unwrap().clone();\n             (source_root_id, project_root)\n         })\n         .collect::<FxHashMap<_, _>>();\n@@ -97,7 +93,7 @@ pub(crate) fn load(\n             match change {\n                 VfsChange::AddRoot { root, files } => {\n                     let source_root_id = vfs_root_to_id(root);\n-                    let is_local = source_roots[&source_root_id].is_member();\n+                    let is_local = source_roots[&source_root_id].is_member;\n                     log::debug!(\n                         \"loaded source root {:?} with path {:?}\",\n                         source_root_id,\n@@ -106,7 +102,7 @@ pub(crate) fn load(\n                     analysis_change.add_root(source_root_id, is_local);\n                     analysis_change.set_debug_root_path(\n                         source_root_id,\n-                        source_roots[&source_root_id].path().display().to_string(),\n+                        source_roots[&source_root_id].path.display().to_string(),\n                     );\n \n                     let vfs_root_path = vfs.root2path(root);"}, {"sha": "e61a56935459c37e5b70a22b8c4322596c2ccbd9", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=b7d5172f69204b6d097d80a39dacad3494a26f5e", "patch": "@@ -132,8 +132,8 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n                 watchers: workspaces\n                     .iter()\n                     .flat_map(|ws| ws.to_roots())\n-                    .filter(|root| root.is_member())\n-                    .map(|root| format!(\"{}/**/*.rs\", root.path().display()))\n+                    .filter(|root| root.is_member)\n+                    .map(|root| format!(\"{}/**/*.rs\", root.path.display()))\n                     .map(|glob_pattern| req::FileSystemWatcher { glob_pattern, kind: None })\n                     .collect(),\n             };"}, {"sha": "ff37a70080dc2e3ed9e86509f729790305c57b19", "filename": "crates/rust-analyzer/src/vfs_glob.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fvfs_glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fvfs_glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fvfs_glob.rs?ref=b7d5172f69204b6d097d80a39dacad3494a26f5e", "patch": "@@ -29,10 +29,14 @@ impl RustPackageFilterBuilder {\n         self.is_member = is_member;\n         self\n     }\n-    pub fn exclude(mut self, glob: Glob) -> RustPackageFilterBuilder {\n-        self.exclude.add(glob);\n+\n+    pub fn exclude(mut self, globs: impl IntoIterator<Item = Glob>) -> RustPackageFilterBuilder {\n+        for glob in globs.into_iter() {\n+            self.exclude.add(glob);\n+        }\n         self\n     }\n+\n     pub fn into_vfs_filter(self) -> Box<dyn Filter> {\n         let RustPackageFilterBuilder { is_member, mut exclude } = self;\n         for &glob in ALWAYS_IGNORED {\n@@ -87,7 +91,7 @@ fn test_globs() {\n \n     let filter = RustPackageFilterBuilder::default()\n         .set_member(true)\n-        .exclude(Glob::new(\"src/llvm-project/**\").unwrap())\n+        .exclude(std::iter::once(Glob::new(\"src/llvm-project/**\").unwrap()))\n         .into_vfs_filter();\n \n     assert!(!filter.include_dir(RelativePath::new(\"src/llvm-project/clang\")));"}, {"sha": "a6549a8f4242b6b161c1dc13a1096655efc5aba2", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d5172f69204b6d097d80a39dacad3494a26f5e/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=b7d5172f69204b6d097d80a39dacad3494a26f5e", "patch": "@@ -87,51 +87,43 @@ impl WorldState {\n     ) -> WorldState {\n         let mut change = AnalysisChange::new();\n \n-        let mut roots = Vec::new();\n-        roots.extend(folder_roots.iter().map(|path| {\n-            let mut filter = RustPackageFilterBuilder::default().set_member(true);\n-            for glob in exclude_globs.iter() {\n-                filter = filter.exclude(glob.clone());\n-            }\n-            RootEntry::new(path.clone(), filter.into_vfs_filter())\n-        }));\n-        for ws in workspaces.iter() {\n-            roots.extend(ws.to_roots().into_iter().map(|pkg_root| {\n-                let mut filter =\n-                    RustPackageFilterBuilder::default().set_member(pkg_root.is_member());\n-                for glob in exclude_globs.iter() {\n-                    filter = filter.exclude(glob.clone());\n-                }\n-                RootEntry::new(pkg_root.path().clone(), filter.into_vfs_filter())\n-            }));\n-        }\n-\n-        let mut extern_dirs = FxHashSet::default();\n-        for ws in workspaces.iter() {\n-            extern_dirs.extend(ws.out_dirs());\n-        }\n-\n-        let mut extern_source_roots = FxHashMap::default();\n-\n-        roots.extend(extern_dirs.iter().map(|path| {\n-            let mut filter = RustPackageFilterBuilder::default().set_member(false);\n-            for glob in exclude_globs.iter() {\n-                filter = filter.exclude(glob.clone());\n-            }\n-            RootEntry::new(PathBuf::from(&path), filter.into_vfs_filter())\n-        }));\n+        let extern_dirs: FxHashSet<_> =\n+            workspaces.iter().flat_map(ProjectWorkspace::out_dirs).collect();\n+\n+        let roots: Vec<_> = {\n+            let create_filter = |is_member| {\n+                RustPackageFilterBuilder::default()\n+                    .set_member(is_member)\n+                    .exclude(exclude_globs.iter().cloned())\n+                    .into_vfs_filter()\n+            };\n+            folder_roots\n+                .iter()\n+                .map(|path| RootEntry::new(path.clone(), create_filter(true)))\n+                .chain(workspaces.iter().flat_map(ProjectWorkspace::to_roots).map(|pkg_root| {\n+                    RootEntry::new(pkg_root.path, create_filter(pkg_root.is_member))\n+                }))\n+                .chain(\n+                    extern_dirs\n+                        .iter()\n+                        .map(|path| RootEntry::new(path.to_owned(), create_filter(false))),\n+                )\n+                .collect()\n+        };\n \n         let (task_sender, task_receiver) = unbounded();\n         let task_sender = Box::new(move |t| task_sender.send(t).unwrap());\n         let (mut vfs, vfs_roots) = Vfs::new(roots, task_sender, watch);\n \n+        let mut extern_source_roots = FxHashMap::default();\n         for r in vfs_roots {\n             let vfs_root_path = vfs.root2path(r);\n             let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n             change.add_root(SourceRootId(r.0), is_local);\n             change.set_debug_root_path(SourceRootId(r.0), vfs_root_path.display().to_string());\n \n             // FIXME: add path2root in vfs to simpily this logic\n+\n             if extern_dirs.contains(&vfs_root_path) {\n                 extern_source_roots.insert(vfs_root_path, ExternSourceId(r.0));\n             }"}]}