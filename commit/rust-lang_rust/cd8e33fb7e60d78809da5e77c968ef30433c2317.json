{"sha": "cd8e33fb7e60d78809da5e77c968ef30433c2317", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOGUzM2ZiN2U2MGQ3ODgwOWRhNWU3N2M5NjhlZjMwNDMzYzIzMTc=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-19T18:33:36Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-19T20:12:18Z"}, "message": "Revert to f6f7c5", "tree": {"sha": "fe34e70340039c9f0b7105b0f49d995c9e28f114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe34e70340039c9f0b7105b0f49d995c9e28f114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8e33fb7e60d78809da5e77c968ef30433c2317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8e33fb7e60d78809da5e77c968ef30433c2317", "html_url": "https://github.com/rust-lang/rust/commit/cd8e33fb7e60d78809da5e77c968ef30433c2317", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8e33fb7e60d78809da5e77c968ef30433c2317/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a8560ba382af4b3955b14757518f748e0d67709", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8560ba382af4b3955b14757518f748e0d67709", "html_url": "https://github.com/rust-lang/rust/commit/7a8560ba382af4b3955b14757518f748e0d67709"}], "stats": {"total": 58, "additions": 22, "deletions": 36}, "files": [{"sha": "512823ddfc26e77da3ead4a39c1591428a3fe237", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cd8e33fb7e60d78809da5e77c968ef30433c2317/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8e33fb7e60d78809da5e77c968ef30433c2317/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=cd8e33fb7e60d78809da5e77c968ef30433c2317", "patch": "@@ -158,19 +158,18 @@ fn current_op(p: &Parser) -> (u8, Op) {\n // Parses expression with binding power of at least bp.\n fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n     let mut lhs = match lhs(p, r) {\n-        (Some(lhs), macro_blocklike) => {\n+        Some(lhs) => {\n             // test stmt_bin_expr_ambiguity\n             // fn foo() {\n             //     let _ = {1} & 2;\n             //     {1} &2;\n             // }\n-            if r.prefer_stmt && (is_block(lhs.kind()) || macro_blocklike == Some(BlockLike::Block))\n-            {\n+            if r.prefer_stmt && is_block(lhs.kind()) {\n                 return BlockLike::Block;\n             }\n             lhs\n         }\n-        (None, _) => return BlockLike::NotBlock,\n+        None => return BlockLike::NotBlock,\n     };\n \n     loop {\n@@ -214,7 +213,7 @@ const LHS_FIRST: TokenSet = token_set_union![\n     atom::ATOM_EXPR_FIRST,\n ];\n \n-fn lhs(p: &mut Parser, r: Restrictions) -> (Option<CompletedMarker>, Option<BlockLike>) {\n+fn lhs(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n     let m;\n     let kind = match p.current() {\n         // test ref_expr\n@@ -247,29 +246,18 @@ fn lhs(p: &mut Parser, r: Restrictions) -> (Option<CompletedMarker>, Option<Bloc\n             if p.at_ts(EXPR_FIRST) {\n                 expr_bp(p, r, 2);\n             }\n-            return (Some(m.complete(p, RANGE_EXPR)), None);\n+            return Some(m.complete(p, RANGE_EXPR));\n         }\n         _ => {\n-            let (lhs_marker, macro_block_like) = atom::atom_expr(p, r);\n-\n-            if macro_block_like == Some(BlockLike::Block) {\n-                return (lhs_marker, macro_block_like);\n-            }\n-            if let Some(lhs_marker) = lhs_marker {\n-                return (Some(postfix_expr(p, r, lhs_marker)), macro_block_like);\n-            } else {\n-                return (None, None);\n-            }\n+            let lhs = atom::atom_expr(p, r)?;\n+            return Some(postfix_expr(p, r, lhs));\n         }\n     };\n     expr_bp(p, r, 255);\n-    (Some(m.complete(p, kind)), None)\n+    Some(m.complete(p, kind))\n }\n \n fn postfix_expr(p: &mut Parser, r: Restrictions, mut lhs: CompletedMarker) -> CompletedMarker {\n-    // Calls are disallowed if the type is a block and we prefer statements because the call cannot be disambiguated from a tuple\n-    // E.g. `while true {break}();` is parsed as\n-    // `while true {break}; ();`\n     let mut allow_calls = !r.prefer_stmt || !is_block(lhs.kind());\n     loop {\n         lhs = match p.current() {\n@@ -418,22 +406,21 @@ fn arg_list(p: &mut Parser) {\n //     let _ = ::a::<b>;\n //     let _ = format!();\n // }\n-fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, Option<BlockLike>) {\n+fn path_expr(p: &mut Parser, r: Restrictions) -> CompletedMarker {\n     assert!(paths::is_path_start(p) || p.at(L_ANGLE));\n     let m = p.start();\n     paths::expr_path(p);\n-    let res = match p.current() {\n+    match p.current() {\n         L_CURLY if !r.forbid_structs => {\n             named_field_list(p);\n             m.complete(p, STRUCT_LIT)\n         }\n         EXCL => {\n-            let block_like = items::macro_call_after_excl(p); // TODO: Use return type (BlockLike)\n-            return (m.complete(p, MACRO_CALL), Some(block_like));\n+            items::macro_call_after_excl(p); // TODO: Use return type (BlockLike)\n+            m.complete(p, MACRO_CALL)\n         }\n         _ => m.complete(p, PATH_EXPR),\n-    };\n-    (res, None)\n+    }\n }\n \n // test struct_lit"}, {"sha": "04087fd6004b9d61212e920f8c1ca71048fd6e4e", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd8e33fb7e60d78809da5e77c968ef30433c2317/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8e33fb7e60d78809da5e77c968ef30433c2317/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=cd8e33fb7e60d78809da5e77c968ef30433c2317", "patch": "@@ -61,16 +61,12 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet = token_set_union![\n \n const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW];\n \n-pub(super) fn atom_expr(\n-    p: &mut Parser,\n-    r: Restrictions,\n-) -> (Option<CompletedMarker>, Option<BlockLike>) {\n+pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n     if let Some(m) = literal(p) {\n-        return (Some(m), None);\n+        return Some(m);\n     }\n     if paths::is_path_start(p) || p.at(L_ANGLE) {\n-        let path_expr = path_expr(p, r);\n-        return (Some(path_expr.0), path_expr.1);\n+        return Some(path_expr(p, r));\n     }\n     let la = p.nth(1);\n     let done = match p.current() {\n@@ -98,7 +94,7 @@ pub(super) fn atom_expr(\n                     // }\n                     p.error(\"expected a loop\");\n                     m.complete(p, ERROR);\n-                    return (None, None);\n+                    return None;\n                 }\n             }\n         }\n@@ -115,10 +111,10 @@ pub(super) fn atom_expr(\n         BREAK_KW => break_expr(p),\n         _ => {\n             p.err_recover(\"expected expression\", EXPR_RECOVERY_SET);\n-            return (None, None);\n+            return None;\n         }\n     };\n-    (Some(done), None)\n+    Some(done)\n }\n \n // test tuple_expr"}, {"sha": "7f385f86f15b2bd0d0924e557d235ab7cda800c3", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8e33fb7e60d78809da5e77c968ef30433c2317/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8e33fb7e60d78809da5e77c968ef30433c2317/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=cd8e33fb7e60d78809da5e77c968ef30433c2317", "patch": "@@ -43,6 +43,7 @@ fn parser_fuzz_tests() {\n fn self_hosting_parsing() {\n     let empty_vec = vec![];\n     let dir = project_dir();\n+    let mut count = 0u32;\n     for entry in walkdir::WalkDir::new(dir)\n         .into_iter()\n         .filter_entry(|entry| {\n@@ -63,6 +64,7 @@ fn self_hosting_parsing() {\n             !entry.path().is_dir() && (entry.path().extension() == Some(std::ffi::OsStr::new(\"rs\")))\n         })\n     {\n+        count += 1;\n         let text = read_text(entry.path());\n         let node = SourceFileNode::parse(&text);\n         let errors = node.errors();\n@@ -72,6 +74,7 @@ fn self_hosting_parsing() {\n             entry\n         );\n     }\n+    panic!(\"{}\", count)\n }\n /// Read file and normalize newlines.\n ///"}]}