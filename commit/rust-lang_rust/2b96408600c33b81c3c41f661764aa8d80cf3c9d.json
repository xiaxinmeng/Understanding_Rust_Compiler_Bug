{"sha": "2b96408600c33b81c3c41f661764aa8d80cf3c9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiOTY0MDg2MDBjMzNiODFjM2M0MWY2NjE3NjRhYThkODBjZjNjOWQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-12T01:10:59Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-12T05:53:50Z"}, "message": "extend the iterator tutorial\n\ndocuments conversion, size hints and double-ended iterators and adds\nmore of the traits to the prelude", "tree": {"sha": "e720a03eb6d2c44dd65da00a2d07b901f1a150c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e720a03eb6d2c44dd65da00a2d07b901f1a150c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b96408600c33b81c3c41f661764aa8d80cf3c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b96408600c33b81c3c41f661764aa8d80cf3c9d", "html_url": "https://github.com/rust-lang/rust/commit/2b96408600c33b81c3c41f661764aa8d80cf3c9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b96408600c33b81c3c41f661764aa8d80cf3c9d/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07183ea6e719e18f5d6b09afbe519c9f940c4705", "url": "https://api.github.com/repos/rust-lang/rust/commits/07183ea6e719e18f5d6b09afbe519c9f940c4705", "html_url": "https://github.com/rust-lang/rust/commit/07183ea6e719e18f5d6b09afbe519c9f940c4705"}], "stats": {"total": 130, "additions": 115, "deletions": 15}, "files": [{"sha": "2146b76a4afbd13ee3d1801318db28c181e3afc4", "filename": "doc/tutorial-container.md", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/2b96408600c33b81c3c41f661764aa8d80cf3c9d/doc%2Ftutorial-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/2b96408600c33b81c3c41f661764aa8d80cf3c9d/doc%2Ftutorial-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-container.md?ref=2b96408600c33b81c3c41f661764aa8d80cf3c9d", "patch": "@@ -205,3 +205,104 @@ println(fmt!(\"last: %?\", it.next()));\n // the iterator is now fully consumed\n assert!(it.next().is_none());\n ~~~\n+\n+## Conversion\n+\n+Iterators offer generic conversion to containers with the `collect` adaptor:\n+\n+~~~\n+let xs = [0, 1, 1, 2, 3, 5, 8];\n+let ys = xs.rev_iter().skip(1).transform(|&x| x * 2).collect::<~[int]>();\n+assert_eq!(ys, ~[10, 6, 4, 2, 2, 0]);\n+~~~\n+\n+The method requires a type hint for the container type, if the surrounding code\n+does not provide sufficient information.\n+\n+Containers can provide conversion from iterators through `collect` by\n+implementing the `FromIterator` trait. For example, the implementation for\n+vectors is as follows:\n+\n+~~~\n+impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n+    pub fn from_iterator(iterator: &mut T) -> ~[A] {\n+        let (lower, _) = iterator.size_hint();\n+        let mut xs = with_capacity(lower);\n+        for iterator.advance |x| {\n+            xs.push(x);\n+        }\n+        xs\n+    }\n+}\n+~~~\n+\n+### Size hints\n+\n+The `Iterator` trait provides a `size_hint` default method, returning a lower\n+bound and optionally on upper bound on the length of the iterator:\n+\n+~~~\n+fn size_hint(&self) -> (uint, Option<uint>) { (0, None) }\n+~~~\n+\n+The vector implementation of `FromIterator` from above uses the lower bound\n+to pre-allocate enough space to hold the minimum number of elements the\n+iterator will yield.\n+\n+The default implementation is always correct, but it should be overridden if\n+the iterator can provide better information.\n+\n+The `ZeroStream` from earlier can provide an exact lower and upper bound:\n+\n+~~~\n+/// A stream of N zeroes\n+struct ZeroStream {\n+    priv remaining: uint\n+}\n+\n+impl ZeroStream {\n+    fn new(n: uint) -> ZeroStream {\n+        ZeroStream { remaining: n }\n+    }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        (self.remaining, Some(self.remaining))\n+    }\n+}\n+\n+impl Iterator<int> for ZeroStream {\n+    fn next(&mut self) -> Option<int> {\n+        if self.remaining == 0 {\n+            None\n+        } else {\n+            self.remaining -= 1;\n+            Some(0)\n+        }\n+    }\n+}\n+~~~\n+\n+## Double-ended iterators\n+\n+The `DoubleEndedIterator` trait represents an iterator able to yield elements\n+from either end of a range. It inherits from the `Iterator` trait and extends\n+it with the `next_back` function.\n+\n+A `DoubleEndedIterator` can be flipped with the `invert` adaptor, returning\n+another `DoubleEndedIterator` with `next` and `next_back` exchanged.\n+\n+~~~\n+let xs = [1, 2, 3, 4, 5, 6];\n+let mut it = xs.iter();\n+println(fmt!(\"%?\", it.next())); // prints `Some(&1)`\n+println(fmt!(\"%?\", it.next())); // prints `Some(&2)`\n+println(fmt!(\"%?\", it.next_back())); // prints `Some(&6)`\n+\n+// prints `5`, `4` and `3`\n+for it.invert().advance |&x| {\n+    println(fmt!(\"%?\", x))\n+}\n+~~~\n+\n+The `rev_iter` and `mut_rev_iter` methods on vectors just return an inverted\n+version of the standard immutable and mutable vector iterators."}, {"sha": "f1637ae96a206f331fa49c03a0e7fc6e26095781", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b96408600c33b81c3c41f661764aa8d80cf3c9d/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b96408600c33b81c3c41f661764aa8d80cf3c9d/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=2b96408600c33b81c3c41f661764aa8d80cf3c9d", "patch": "@@ -104,7 +104,7 @@ impl SmallBitv {\n     }\n \n     #[inline]\n-    pub fn invert(&mut self) { self.bits = !self.bits; }\n+    pub fn negate(&mut self) { self.bits = !self.bits; }\n }\n \n struct BigBitv {\n@@ -160,7 +160,7 @@ impl BigBitv {\n     }\n \n     #[inline]\n-    pub fn invert(&mut self) { for self.each_storage |w| { *w = !*w } }\n+    pub fn negate(&mut self) { for self.each_storage |w| { *w = !*w } }\n \n     #[inline]\n     pub fn union(&mut self, b: &BigBitv, nbits: uint) -> bool {\n@@ -366,9 +366,9 @@ impl Bitv {\n \n     /// Invert all bits\n     #[inline]\n-    pub fn invert(&mut self) {\n+    pub fn negate(&mut self) {\n       match self.rep {\n-        Small(ref mut b) => b.invert(),\n+        Small(ref mut b) => b.negate(),\n         Big(ref mut s) => for s.each_storage() |w| { *w = !*w } }\n     }\n "}, {"sha": "ea49144b7716c17d39423b9f6c6b0dc26e314e2e", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b96408600c33b81c3c41f661764aa8d80cf3c9d/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b96408600c33b81c3c41f661764aa8d80cf3c9d/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=2b96408600c33b81c3c41f661764aa8d80cf3c9d", "patch": "@@ -47,8 +47,9 @@ pub use cmp::{Eq, ApproxEq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Great\n pub use char::Char;\n pub use container::{Container, Mutable, Map, Set};\n pub use hash::Hash;\n-pub use iter::{Times};\n-pub use iterator::{Iterator, IteratorUtil, OrdIterator};\n+pub use iter::Times;\n+pub use iterator::{Iterator, IteratorUtil, DoubleEndedIterator, DoubleEndedIteratorUtil};\n+pub use iterator::OrdIterator;\n pub use num::{Num, NumCast};\n pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Algebraic, Trigonometric, Exponential, Hyperbolic};"}, {"sha": "4ab93da8c09869f52adf74adc47cf2cc35fb0915", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b96408600c33b81c3c41f661764aa8d80cf3c9d/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b96408600c33b81c3c41f661764aa8d80cf3c9d/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=2b96408600c33b81c3c41f661764aa8d80cf3c9d", "patch": "@@ -760,6 +760,7 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n                         lifetime: cast::transmute(p)}\n         }\n     }\n+\n     #[inline]\n     fn rev_iter(self) -> VecRevIterator<'self, T> {\n         self.iter().invert()\n@@ -2211,7 +2212,6 @@ impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n     }\n }\n \n-\n #[cfg(test)]\n mod tests {\n     use option::{None, Option, Some};"}, {"sha": "3df60762dea02090c84d66ebbb37eb4d489e31d4", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b96408600c33b81c3c41f661764aa8d80cf3c9d/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b96408600c33b81c3c41f661764aa8d80cf3c9d/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=2b96408600c33b81c3c41f661764aa8d80cf3c9d", "patch": "@@ -11,19 +11,17 @@\n use std::vec;\n \n trait sum {\n-    fn sum(self) -> int;\n+    fn sum_(self) -> int;\n }\n \n // Note: impl on a slice\n impl<'self> sum for &'self [int] {\n-    fn sum(self) -> int {\n-        let mut sum = 0;\n-        for self.iter().advance |e| { sum += *e; }\n-        return sum;\n+    fn sum_(self) -> int {\n+        self.iter().fold(0, |a, &b| a + b)\n     }\n }\n \n-fn call_sum(x: &[int]) -> int { x.sum() }\n+fn call_sum(x: &[int]) -> int { x.sum_() }\n \n pub fn main() {\n     let x = ~[1, 2, 3];\n@@ -32,12 +30,12 @@ pub fn main() {\n     assert_eq!(y, 6);\n \n     let mut x = ~[1, 2, 3];\n-    let y = x.sum();\n+    let y = x.sum_();\n     debug!(\"y==%d\", y);\n     assert_eq!(y, 6);\n \n     let x = ~[1, 2, 3];\n-    let y = x.sum();\n+    let y = x.sum_();\n     debug!(\"y==%d\", y);\n     assert_eq!(y, 6);\n }"}]}