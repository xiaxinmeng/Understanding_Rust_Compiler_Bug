{"sha": "e69154f3705af1f69d61469d581f4c20ac5efd9d", "node_id": "C_kwDOAAsO6NoAKGU2OTE1NGYzNzA1YWYxZjY5ZDYxNDY5ZDU4MWY0YzIwYWM1ZWZkOWQ", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-09-23T15:17:54Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-09-23T15:22:38Z"}, "message": "Add test for #7650", "tree": {"sha": "add6180f24f8b26559b8ba77f1b0f32a63a9fff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add6180f24f8b26559b8ba77f1b0f32a63a9fff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69154f3705af1f69d61469d581f4c20ac5efd9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmFMm8UACgkQ2lnoZDo37QaLGgD9HEWJCTLH4mLn5yIv8rtNEWrD\nK7mnfURTl4OQEeJanvkA/2HVv1V1vRAbfpm/RaUg6Vl2cnEMQYRuN4qC0/VjM+wP\n=BXSw\n-----END PGP SIGNATURE-----", "payload": "tree add6180f24f8b26559b8ba77f1b0f32a63a9fff6\nparent 5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3\nauthor Jason Newcomb <jsnewcomb@pm.me> 1632410274 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1632410558 -0400\n\nAdd test for #7650\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69154f3705af1f69d61469d581f4c20ac5efd9d", "html_url": "https://github.com/rust-lang/rust/commit/e69154f3705af1f69d61469d581f4c20ac5efd9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69154f3705af1f69d61469d581f4c20ac5efd9d/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3", "html_url": "https://github.com/rust-lang/rust/commit/5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3"}], "stats": {"total": 102, "additions": 93, "deletions": 9}, "files": [{"sha": "26c88489b03cb4d9e75b7880ce19d3c9720ea082", "filename": "tests/ui/auxiliary/proc_macro_suspicious_else_formatting.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e69154f3705af1f69d61469d581f4c20ac5efd9d/tests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69154f3705af1f69d61469d581f4c20ac5efd9d/tests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs?ref=e69154f3705af1f69d61469d581f4c20ac5efd9d", "patch": "@@ -0,0 +1,75 @@\n+// compile-flags: --emit=link\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::{token_stream, Delimiter, Group, Ident, Span, TokenStream, TokenTree};\n+use std::iter::FromIterator;\n+\n+fn read_ident(iter: &mut token_stream::IntoIter) -> Ident {\n+    match iter.next() {\n+        Some(TokenTree::Ident(i)) => i,\n+        _ => panic!(\"expected ident\"),\n+    }\n+}\n+\n+#[proc_macro_derive(DeriveBadSpan)]\n+pub fn derive_bad_span(input: TokenStream) -> TokenStream {\n+    let mut input = input.into_iter();\n+    assert_eq!(read_ident(&mut input).to_string(), \"struct\");\n+    let ident = read_ident(&mut input);\n+    let mut tys = match input.next() {\n+        Some(TokenTree::Group(g)) if g.delimiter() == Delimiter::Parenthesis => g.stream().into_iter(),\n+        _ => panic!(),\n+    };\n+    let field1 = read_ident(&mut tys);\n+    tys.next();\n+    let field2 = read_ident(&mut tys);\n+\n+    <TokenStream as FromIterator<TokenTree>>::from_iter(\n+        [\n+            Ident::new(\"impl\", Span::call_site()).into(),\n+            ident.into(),\n+            Group::new(\n+                Delimiter::Brace,\n+                <TokenStream as FromIterator<TokenTree>>::from_iter(\n+                    [\n+                        Ident::new(\"fn\", Span::call_site()).into(),\n+                        Ident::new(\"_foo\", Span::call_site()).into(),\n+                        Group::new(Delimiter::Parenthesis, TokenStream::new()).into(),\n+                        Group::new(\n+                            Delimiter::Brace,\n+                            <TokenStream as FromIterator<TokenTree>>::from_iter(\n+                                [\n+                                    Ident::new(\"if\", field1.span()).into(),\n+                                    Ident::new(\"true\", field1.span()).into(),\n+                                    {\n+                                        let mut group = Group::new(Delimiter::Brace, TokenStream::new());\n+                                        group.set_span(field1.span());\n+                                        group.into()\n+                                    },\n+                                    Ident::new(\"if\", field2.span()).into(),\n+                                    Ident::new(\"true\", field2.span()).into(),\n+                                    {\n+                                        let mut group = Group::new(Delimiter::Brace, TokenStream::new());\n+                                        group.set_span(field2.span());\n+                                        group.into()\n+                                    },\n+                                ]\n+                                .iter()\n+                                .cloned(),\n+                            ),\n+                        )\n+                        .into(),\n+                    ]\n+                    .iter()\n+                    .cloned(),\n+                ),\n+            )\n+            .into(),\n+        ]\n+        .iter()\n+        .cloned(),\n+    )\n+}"}, {"sha": "be8bc22bf98a05d062caff083c4c6e1d1d903c85", "filename": "tests/ui/suspicious_else_formatting.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e69154f3705af1f69d61469d581f4c20ac5efd9d/tests%2Fui%2Fsuspicious_else_formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69154f3705af1f69d61469d581f4c20ac5efd9d/tests%2Fui%2Fsuspicious_else_formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_else_formatting.rs?ref=e69154f3705af1f69d61469d581f4c20ac5efd9d", "patch": "@@ -1,5 +1,10 @@\n+// aux-build:proc_macro_suspicious_else_formatting.rs\n+\n #![warn(clippy::suspicious_else_formatting)]\n \n+extern crate proc_macro_suspicious_else_formatting;\n+use proc_macro_suspicious_else_formatting::DeriveBadSpan;\n+\n fn foo() -> bool {\n     true\n }\n@@ -103,3 +108,7 @@ fn main() {\n     {\n     }\n }\n+\n+// #7650 - Don't lint. Proc-macro using bad spans for `if` expressions.\n+#[derive(DeriveBadSpan)]\n+struct _Foo(u32, u32);"}, {"sha": "d1db195cbb8787bc0003738f2f2c1e37adbf7fe3", "filename": "tests/ui/suspicious_else_formatting.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e69154f3705af1f69d61469d581f4c20ac5efd9d/tests%2Fui%2Fsuspicious_else_formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e69154f3705af1f69d61469d581f4c20ac5efd9d/tests%2Fui%2Fsuspicious_else_formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_else_formatting.stderr?ref=e69154f3705af1f69d61469d581f4c20ac5efd9d", "patch": "@@ -1,5 +1,5 @@\n error: this looks like an `else {..}` but the `else` is missing\n-  --> $DIR/suspicious_else_formatting.rs:11:6\n+  --> $DIR/suspicious_else_formatting.rs:16:6\n    |\n LL |     } {\n    |      ^\n@@ -8,31 +8,31 @@ LL |     } {\n    = note: to remove this lint, add the missing `else` or add a new line before the next block\n \n error: this looks like an `else if` but the `else` is missing\n-  --> $DIR/suspicious_else_formatting.rs:15:6\n+  --> $DIR/suspicious_else_formatting.rs:20:6\n    |\n LL |     } if foo() {\n    |      ^\n    |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this looks like an `else if` but the `else` is missing\n-  --> $DIR/suspicious_else_formatting.rs:22:10\n+  --> $DIR/suspicious_else_formatting.rs:27:10\n    |\n LL |         } if foo() {\n    |          ^\n    |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this looks like an `else if` but the `else` is missing\n-  --> $DIR/suspicious_else_formatting.rs:30:10\n+  --> $DIR/suspicious_else_formatting.rs:35:10\n    |\n LL |         } if foo() {\n    |          ^\n    |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this is an `else {..}` but the formatting might hide it\n-  --> $DIR/suspicious_else_formatting.rs:39:6\n+  --> $DIR/suspicious_else_formatting.rs:44:6\n    |\n LL |       } else\n    |  ______^\n@@ -42,7 +42,7 @@ LL | |     {\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `{..}`\n \n error: this is an `else if` but the formatting might hide it\n-  --> $DIR/suspicious_else_formatting.rs:51:6\n+  --> $DIR/suspicious_else_formatting.rs:56:6\n    |\n LL |       } else\n    |  ______^\n@@ -52,7 +52,7 @@ LL | |     if foo() { // the span of the above error should continue here\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n \n error: this is an `else if` but the formatting might hide it\n-  --> $DIR/suspicious_else_formatting.rs:56:6\n+  --> $DIR/suspicious_else_formatting.rs:61:6\n    |\n LL |       }\n    |  ______^\n@@ -63,7 +63,7 @@ LL | |     if foo() { // the span of the above error should continue here\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n \n error: this is an `else {..}` but the formatting might hide it\n-  --> $DIR/suspicious_else_formatting.rs:83:6\n+  --> $DIR/suspicious_else_formatting.rs:88:6\n    |\n LL |       }\n    |  ______^\n@@ -75,7 +75,7 @@ LL | |     {\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `{..}`\n \n error: this is an `else {..}` but the formatting might hide it\n-  --> $DIR/suspicious_else_formatting.rs:91:6\n+  --> $DIR/suspicious_else_formatting.rs:96:6\n    |\n LL |       }\n    |  ______^"}]}