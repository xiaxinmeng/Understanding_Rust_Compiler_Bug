{"sha": "93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZTEwOTc3ZDhiMGNjZDJjZGM0MWYzMGUxODdlNmViZWNkMzI0MGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-18T19:48:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-19T11:20:36Z"}, "message": "propagate other obligations that were left out\n\ncc #32730 -- I left exactly one instance where I wasn't sure of the\nright behavior.", "tree": {"sha": "ac2091f50d318a0222853c8392c2d97fe80ee449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac2091f50d318a0222853c8392c2d97fe80ee449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "html_url": "https://github.com/rust-lang/rust/commit/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa6c2b1cb73edad3ca1e8068151dd7254a3ebce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6c2b1cb73edad3ca1e8068151dd7254a3ebce1", "html_url": "https://github.com/rust-lang/rust/commit/aa6c2b1cb73edad3ca1e8068151dd7254a3ebce1"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "4d8b31a33cdef59f12344fe95e94a4da1ce78376", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "patch": "@@ -1597,9 +1597,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // generic so we don't have to do anything quite this\n             // terrible.\n             let trace = TypeTrace::dummy(self.tcx);\n-            self.equate(true, trace, a, b).map(|InferOk { obligations, .. }| {\n-                // FIXME(#32730) propagate obligations\n-                assert!(obligations.is_empty());\n+            self.equate(true, trace, a, b).map(|InferOk { obligations: _, .. }| {\n+                // We can intentionally ignore obligations here, since\n+                // this is part of a simple test for general\n+                // \"equatability\". However, it's not entirely clear\n+                // that we *ought* to be, perhaps a better thing would\n+                // be to use a mini-fulfillment context or something\n+                // like that.\n             })\n         })\n     }"}, {"sha": "d49affa3e872c0172b7d245a6129ee5de377611c", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "patch": "@@ -184,6 +184,16 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n         });\n     }\n \n+    pub fn register_predicate_obligations(&mut self,\n+                                          infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n+                                          obligations: Vec<PredicateObligation<'tcx>>)\n+    {\n+        for obligation in obligations {\n+            self.register_predicate_obligation(infcx, obligation);\n+        }\n+    }\n+\n+\n     pub fn region_obligations(&self,\n                               body_id: ast::NodeId)\n                               -> &[RegionObligation<'tcx>]"}, {"sha": "5f02688be34bcbd2e13a8bdcfb3ef270be539556", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "patch": "@@ -218,7 +218,7 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                        -> Result<&'tcx Substs<'tcx>, ()> {\n     let selcx = &mut SelectionContext::new(&infcx);\n     let target_substs = infcx.fresh_substs_for_item(DUMMY_SP, target_impl);\n-    let (target_trait_ref, obligations) = impl_trait_ref_and_oblig(selcx,\n+    let (target_trait_ref, mut obligations) = impl_trait_ref_and_oblig(selcx,\n                                                                    target_impl,\n                                                                    target_substs);\n \n@@ -227,9 +227,8 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                               &ObligationCause::dummy(),\n                               source_trait_ref,\n                               target_trait_ref) {\n-        Ok(InferOk { obligations, .. }) => {\n-            // FIXME(#32730) propagate obligations\n-            assert!(obligations.is_empty())\n+        Ok(InferOk { obligations: o, .. }) => {\n+            obligations.extend(o);\n         }\n         Err(_) => {\n             debug!(\"fulfill_implication: {:?} does not unify with {:?}\","}, {"sha": "7447fba3038eaeb151e0c4cacb1fe1aed0c95e72", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "patch": "@@ -376,7 +376,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     pub fn check_sub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) {\n         match self.sub(t1, t2) {\n             Ok(InferOk { obligations, .. }) => {\n-                // FIXME(#32730) once obligations are being propagated, assert the right thing.\n+                // None of these tests should require nested obligations:\n                 assert!(obligations.is_empty());\n             }\n             Err(ref e) => {\n@@ -400,7 +400,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     pub fn check_lub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>, t_lub: Ty<'tcx>) {\n         match self.lub(t1, t2) {\n             Ok(InferOk { obligations, value: t }) => {\n-                // FIXME(#32730) once obligations are being propagated, assert the right thing.\n+                // None of these tests should require nested obligations:\n                 assert!(obligations.is_empty());\n \n                 self.assert_eq(t, t_lub);\n@@ -415,7 +415,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n         match self.glb(t1, t2) {\n             Err(e) => panic!(\"unexpected error computing LUB: {:?}\", e),\n             Ok(InferOk { obligations, value: t }) => {\n-                // FIXME(#32730) once obligations are being propagated, assert the right thing.\n+                // None of these tests should require nested obligations:\n                 assert!(obligations.is_empty());\n \n                 self.assert_eq(t, t_glb);"}, {"sha": "ae70049cc5bdc1a253dfd0d43819833fd053958a", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "patch": "@@ -294,10 +294,9 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         debug!(\"compare_impl_method: trait_fty={:?}\", trait_fty);\n \n         let sub_result = infcx.sub_types(false, &cause, impl_fty, trait_fty)\n-            .map(|InferOk { obligations, .. }| {\n-                // FIXME(#32730) propagate obligations\n-                assert!(obligations.is_empty());\n-            });\n+                              .map(|InferOk { obligations, .. }| {\n+                                  inh.register_predicates(obligations);\n+                              });\n \n         if let Err(terr) = sub_result {\n             debug!(\"sub_types failed: impl ty {:?}, trait ty {:?}\","}, {"sha": "b71ff58ccec3305923fcf0085b165b9d607267e0", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "patch": "@@ -82,7 +82,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n     // check that the impl type can be made to match the trait type.\n \n     let impl_param_env = ty::ParameterEnvironment::for_item(tcx, self_type_node_id);\n-    tcx.infer_ctxt(impl_param_env, Reveal::UserFacing).enter(|infcx| {\n+    tcx.infer_ctxt(impl_param_env, Reveal::UserFacing).enter(|ref infcx| {\n         let tcx = infcx.tcx;\n         let mut fulfillment_cx = traits::FulfillmentContext::new();\n \n@@ -97,8 +97,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n         let cause = &ObligationCause::misc(drop_impl_span, drop_impl_node_id);\n         match infcx.eq_types(true, cause, named_type, fresh_impl_self_ty) {\n             Ok(InferOk { obligations, .. }) => {\n-                // FIXME(#32730) propagate obligations\n-                assert!(obligations.is_empty());\n+                fulfillment_cx.register_predicate_obligations(infcx, obligations);\n             }\n             Err(_) => {\n                 let item_span = tcx.hir.span(self_type_node_id);"}, {"sha": "0754b52cf280a24a225d8549b7d20bbca85298a9", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e10977d8b0ccd2cdc41f30e187e6ebecd3240b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=93e10977d8b0ccd2cdc41f30e187e6ebecd3240b", "patch": "@@ -109,7 +109,7 @@ use rustc::infer::InferOk;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n-use rustc::traits::{ObligationCause, ObligationCauseCode, Reveal};\n+use rustc::traits::{FulfillmentContext, ObligationCause, ObligationCauseCode, Reveal};\n use session::config;\n use util::common::time;\n \n@@ -153,15 +153,22 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 expected: Ty<'tcx>,\n                                 actual: Ty<'tcx>)\n                                 -> bool {\n-    tcx.infer_ctxt((), Reveal::UserFacing).enter(|infcx| {\n+    tcx.infer_ctxt((), Reveal::UserFacing).enter(|ref infcx| {\n+        let mut fulfill_cx = FulfillmentContext::new();\n         match infcx.eq_types(false, &cause, expected, actual) {\n             Ok(InferOk { obligations, .. }) => {\n-                // FIXME(#32730) propagate obligations\n-                assert!(obligations.is_empty());\n-                true\n+                fulfill_cx.register_predicate_obligations(infcx, obligations);\n             }\n             Err(err) => {\n                 infcx.report_mismatched_types(cause, expected, actual, err).emit();\n+                return false;\n+            }\n+        }\n+\n+        match fulfill_cx.select_all_or_error(infcx) {\n+            Ok(()) => true,\n+            Err(errors) => {\n+                infcx.report_fulfillment_errors(&errors);\n                 false\n             }\n         }"}]}