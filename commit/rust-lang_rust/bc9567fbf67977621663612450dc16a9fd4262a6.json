{"sha": "bc9567fbf67977621663612450dc16a9fd4262a6", "node_id": "C_kwDOAAsO6NoAKGJjOTU2N2ZiZjY3OTc3NjIxNjYzNjEyNDUwZGMxNmE5ZmQ0MjYyYTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-11T15:21:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-11T15:21:38Z"}, "message": "Rollup merge of #103445 - fmease:fix-50291, r=estebank\n\n`#[test]`: Point at return type if `Termination` bound is unsatisfied\n\nTogether with #103142 (already merged) this fully fixes #50291.\n\nI don't consider my current solution of changing a few spans \u201chere and there\u201d very clean since the\rfailed obligation is a `FunctionArgumentObligation` and we point at a type instead of a function argument.\n\nIf you agree with me on this point, I can offer to keep the spans of the existing nodes and instead inject\r`let _: AssertRetTyIsTermination<$ret_ty>;` (type to be defined in `libtest`) similar to `AssertParamIsEq` etc.\rused by some built-in derive-macros.\n\nI haven't tried that approach yet though and cannot promise that it would actually work out or\rbe \u201ccleaner\u201d for that matter.\n\n````@rustbot```` label A-libtest A-diagnostics\nr? ````@estebank````", "tree": {"sha": "0ae4d6b662e806664ae1dc1fcc409a8a7e52a4a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae4d6b662e806664ae1dc1fcc409a8a7e52a4a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9567fbf67977621663612450dc16a9fd4262a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbmiCCRBK7hj4Ov3rIwAASnoIAKC0h87ORx+/rO/8p8wJ/LJS\ngUAak2CgjvrT16cyBIT5ul+9sKTMBguXeSXfkrCFHOjpo4kTY2DXHGd0SlL8Q96T\nG32eHJGKqfXPL8+YROlzMwGdduWDQxnlXGzi87w7fXVFrFoTp7IEQNZmgVr9ZNoj\nfUy5RPn1yg2o+WV3JWntdM8CcaEfnquyhASp1T183nsNsjLFPxp7eKfvbTvsxWYB\nHbjNtuHkULuLb6wtjHvCyVzU6HhTIdTM982BqJ4V7POQilXBaaFsUtihJqIl2ud1\nMY0rrbAW9ukqLgveG3BkC4+RasEND8eUIohwuTjqiQ60BXEM22b/i8raFmuw75s=\n=kY+e\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ae4d6b662e806664ae1dc1fcc409a8a7e52a4a6\nparent 978e7abeceed3c4d0d6c729c9e492890f478e8e1\nparent 449a4404f5216a085cc0aa89042b39a4bdff5b51\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1668180098 +0530\ncommitter GitHub <noreply@github.com> 1668180098 +0530\n\nRollup merge of #103445 - fmease:fix-50291, r=estebank\n\n`#[test]`: Point at return type if `Termination` bound is unsatisfied\n\nTogether with #103142 (already merged) this fully fixes #50291.\n\nI don't consider my current solution of changing a few spans \u201chere and there\u201d very clean since the\rfailed obligation is a `FunctionArgumentObligation` and we point at a type instead of a function argument.\n\nIf you agree with me on this point, I can offer to keep the spans of the existing nodes and instead inject\r`let _: AssertRetTyIsTermination<$ret_ty>;` (type to be defined in `libtest`) similar to `AssertParamIsEq` etc.\rused by some built-in derive-macros.\n\nI haven't tried that approach yet though and cannot promise that it would actually work out or\rbe \u201ccleaner\u201d for that matter.\n\n````@rustbot```` label A-libtest A-diagnostics\nr? ````@estebank````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9567fbf67977621663612450dc16a9fd4262a6", "html_url": "https://github.com/rust-lang/rust/commit/bc9567fbf67977621663612450dc16a9fd4262a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9567fbf67977621663612450dc16a9fd4262a6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "978e7abeceed3c4d0d6c729c9e492890f478e8e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/978e7abeceed3c4d0d6c729c9e492890f478e8e1", "html_url": "https://github.com/rust-lang/rust/commit/978e7abeceed3c4d0d6c729c9e492890f478e8e1"}, {"sha": "449a4404f5216a085cc0aa89042b39a4bdff5b51", "url": "https://api.github.com/repos/rust-lang/rust/commits/449a4404f5216a085cc0aa89042b39a4bdff5b51", "html_url": "https://github.com/rust-lang/rust/commit/449a4404f5216a085cc0aa89042b39a4bdff5b51"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "b62840d4bc8221d72d4a45d5d5e3144a3a050d01", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bc9567fbf67977621663612450dc16a9fd4262a6/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9567fbf67977621663612450dc16a9fd4262a6/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=bc9567fbf67977621663612450dc16a9fd4262a6", "patch": "@@ -112,7 +112,7 @@ pub fn expand_test_or_bench(\n     };\n \n     // Note: non-associated fn items are already handled by `expand_test_or_bench`\n-    if !matches!(item.kind, ast::ItemKind::Fn(_)) {\n+    let ast::ItemKind::Fn(fn_) = &item.kind else {\n         let diag = &cx.sess.parse_sess.span_diagnostic;\n         let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n         let mut err = match item.kind {\n@@ -130,7 +130,7 @@ pub fn expand_test_or_bench(\n             .emit();\n \n         return vec![Annotatable::Item(item)];\n-    }\n+    };\n \n     // has_*_signature will report any errors in the type so compilation\n     // will fail. We shouldn't try to expand in this case because the errors\n@@ -141,12 +141,14 @@ pub fn expand_test_or_bench(\n         return vec![Annotatable::Item(item)];\n     }\n \n-    let (sp, attr_sp) = (cx.with_def_site_ctxt(item.span), cx.with_def_site_ctxt(attr_sp));\n+    let sp = cx.with_def_site_ctxt(item.span);\n+    let ret_ty_sp = cx.with_def_site_ctxt(fn_.sig.decl.output.span());\n+    let attr_sp = cx.with_def_site_ctxt(attr_sp);\n \n     let test_id = Ident::new(sym::test, attr_sp);\n \n     // creates test::$name\n-    let test_path = |name| cx.path(sp, vec![test_id, Ident::from_str_and_span(name, sp)]);\n+    let test_path = |name| cx.path(ret_ty_sp, vec![test_id, Ident::from_str_and_span(name, sp)]);\n \n     // creates test::ShouldPanic::$name\n     let should_panic_path = |name| {\n@@ -192,7 +194,7 @@ pub fn expand_test_or_bench(\n                         vec![\n                             // super::$test_fn(b)\n                             cx.expr_call(\n-                                sp,\n+                                ret_ty_sp,\n                                 cx.expr_path(cx.path(sp, vec![item.ident])),\n                                 vec![cx.expr_ident(sp, b)],\n                             ),\n@@ -216,7 +218,11 @@ pub fn expand_test_or_bench(\n                         cx.expr_path(test_path(\"assert_test_result\")),\n                         vec![\n                             // $test_fn()\n-                            cx.expr_call(sp, cx.expr_path(cx.path(sp, vec![item.ident])), vec![]), // )\n+                            cx.expr_call(\n+                                ret_ty_sp,\n+                                cx.expr_path(cx.path(sp, vec![item.ident])),\n+                                vec![],\n+                            ), // )\n                         ],\n                     ), // }\n                 ), // )"}, {"sha": "9577952119adb2c480bc9b2caf5731574304da51", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc9567fbf67977621663612450dc16a9fd4262a6/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc9567fbf67977621663612450dc16a9fd4262a6/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=bc9567fbf67977621663612450dc16a9fd4262a6", "patch": "@@ -1,12 +1,10 @@\n error[E0277]: the trait bound `f32: Termination` is not satisfied\n-  --> $DIR/termination-trait-test-wrong-type.rs:6:1\n+  --> $DIR/termination-trait-test-wrong-type.rs:6:31\n    |\n-LL |   #[test]\n-   |   ------- in this procedural macro expansion\n-LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n-LL | |     \"0\".parse()\n-LL | | }\n-   | |_^ the trait `Termination` is not implemented for `f32`\n+LL | #[test]\n+   | ------- in this procedural macro expansion\n+LL | fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Termination` is not implemented for `f32`\n    |\n    = note: required for `Result<f32, ParseFloatError>` to implement `Termination`\n note: required by a bound in `assert_test_result`"}]}