{"sha": "0873974290f4e68b9e12c6922f07c0a7c8a32c98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NzM5NzQyOTBmNGU2OGI5ZTEyYzY5MjJmMDdjMGE3YzhhMzJjOTg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-27T15:20:27Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-27T15:20:27Z"}, "message": "Rollup merge of #49417 - TimNN:fix-ios, r=alexcrichton\n\nUpdate compiler-rt with fix for 32bit iOS ARM", "tree": {"sha": "a03c3bda77f7b8c303dc3b9707aa9ede1cf78aed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a03c3bda77f7b8c303dc3b9707aa9ede1cf78aed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0873974290f4e68b9e12c6922f07c0a7c8a32c98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlq6YTwACgkQ/vbIBR0O\nATwF1BAAsgNAgvA4AAKFAkepPHnV110nqrN3Lx8VuFlDWweeZb1FObZkrjGRahA9\nFmn2wTzeJkzWBCETmewo2CKpeqJzvnUOCvyxUgNuMX0O+ovTos5aAtG1dyUEEEC/\nOmN9LegyfcBWlOqhviKdSu2ToBPxKYaCnrWwJrjXE03HbMRVfTn6ozHpE1D3nrYT\noHwXA92XGwzXCUzih05CwZVSCrvtKP+ouSygwu+WbH3St5MLwZrmXGIj+hk+3DiK\nTZ+hr35X7SXqa6vxfSj3zXA37H+LndQkMY0BOLMLN0SvJKiQo8cDm0f0ZfZOtCqM\nMfmlYKLyFFGW37vDgyf2zoff2bIQmnI1ZO15MAeLzCr+BK9w4sCQgbZHOJDrl/6h\njP5mrDQpLcI3MS63vH67/vLxaCXjtr53k+VbMH/0AB1xD8Iprn2J9ihKZ3lqPvD2\nBG2IL3XJB0lAjUE1FgD3Z9NGGqTAJRD3wK90s0DNdCuBhxKGwjcvwYKD6sR8k5bh\npzjuZlBV/xxfvwagHwvAC0gSX5pnFGW6USrAvNQ2Pr7fdq669M8DbevTI7F5XFTq\nBr6qHyBi+REUb8JSihYwzZ1+tJR/Lgkm7IRpjcUF0nHUMOZm9bt5HGmwQOcG7DMh\nJJ9GsZmerkhubZvdX123pEDCiEqjDe1dO98XMrxUF/Ywc2Ku4kA=\n=n3YO\n-----END PGP SIGNATURE-----", "payload": "tree a03c3bda77f7b8c303dc3b9707aa9ede1cf78aed\nparent b4bc2b0cf8a889bf0c1e4fdd826122ec5b4a6479\nparent 5b1a60062c8882dbf60853037e4e8908b6ce7ec7\nauthor kennytm <kennytm@gmail.com> 1522164027 +0800\ncommitter kennytm <kennytm@gmail.com> 1522164027 +0800\n\nRollup merge of #49417 - TimNN:fix-ios, r=alexcrichton\n\nUpdate compiler-rt with fix for 32bit iOS ARM\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0873974290f4e68b9e12c6922f07c0a7c8a32c98", "html_url": "https://github.com/rust-lang/rust/commit/0873974290f4e68b9e12c6922f07c0a7c8a32c98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0873974290f4e68b9e12c6922f07c0a7c8a32c98/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4bc2b0cf8a889bf0c1e4fdd826122ec5b4a6479", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bc2b0cf8a889bf0c1e4fdd826122ec5b4a6479", "html_url": "https://github.com/rust-lang/rust/commit/b4bc2b0cf8a889bf0c1e4fdd826122ec5b4a6479"}, {"sha": "5b1a60062c8882dbf60853037e4e8908b6ce7ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1a60062c8882dbf60853037e4e8908b6ce7ec7", "html_url": "https://github.com/rust-lang/rust/commit/5b1a60062c8882dbf60853037e4e8908b6ce7ec7"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "2a2f6d96c8dc578d2474742f14c9bab0b36b0408", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=0873974290f4e68b9e12c6922f07c0a7c8a32c98", "patch": "@@ -1 +1 @@\n-Subproject commit 263a703b10351d8930e48045b4fd09768991b867\n+Subproject commit 2a2f6d96c8dc578d2474742f14c9bab0b36b0408"}, {"sha": "ee38cca7828be0ef486d8f3555d0675ee6b26524", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0873974290f4e68b9e12c6922f07c0a7c8a32c98/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0873974290f4e68b9e12c6922f07c0a7c8a32c98/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=0873974290f4e68b9e12c6922f07c0a7c8a32c98", "patch": "@@ -145,7 +145,7 @@ impl<'a> AllocFnFactory<'a> {\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) =\n             self.ret_ty(&method.output, &mut abi_args, mk, result);\n-        let kind = ItemKind::Fn(self.cx.fn_decl(abi_args, output_ty),\n+        let kind = ItemKind::Fn(self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty)),\n                                 Unsafety::Unsafe,\n                                 dummy_spanned(Constness::NotConst),\n                                 Abi::Rust,"}, {"sha": "269517e998f5b1fe7dfddc9093725555ed289bf1", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0873974290f4e68b9e12c6922f07c0a7c8a32c98/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0873974290f4e68b9e12c6922f07c0a7c8a32c98/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=0873974290f4e68b9e12c6922f07c0a7c8a32c98", "patch": "@@ -214,7 +214,7 @@ pub trait AstBuilder {\n \n     fn arg(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> ast::Arg;\n     // FIXME unused self\n-    fn fn_decl(&self, inputs: Vec<ast::Arg> , output: P<ast::Ty>) -> P<ast::FnDecl>;\n+    fn fn_decl(&self, inputs: Vec<ast::Arg> , output: ast::FunctionRetTy) -> P<ast::FnDecl>;\n \n     fn item_fn_poly(&self,\n                     span: Span,\n@@ -924,7 +924,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n               -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n             ids.iter().map(|id| self.arg(span, *id, self.ty_infer(span))).collect(),\n-            self.ty_infer(span));\n+            ast::FunctionRetTy::Default(span));\n \n         // FIXME -- We are using `span` as the span of the `|...|`\n         // part of the lambda, but it probably (maybe?) corresponds to\n@@ -970,10 +970,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     // FIXME unused self\n-    fn fn_decl(&self, inputs: Vec<ast::Arg>, output: P<ast::Ty>) -> P<ast::FnDecl> {\n+    fn fn_decl(&self, inputs: Vec<ast::Arg>, output: ast::FunctionRetTy) -> P<ast::FnDecl> {\n         P(ast::FnDecl {\n             inputs,\n-            output: ast::FunctionRetTy::Ty(output),\n+            output,\n             variadic: false\n         })\n     }\n@@ -1003,7 +1003,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.item(span,\n                   name,\n                   Vec::new(),\n-                  ast::ItemKind::Fn(self.fn_decl(inputs, output),\n+                  ast::ItemKind::Fn(self.fn_decl(inputs, ast::FunctionRetTy::Ty(output)),\n                               ast::Unsafety::Normal,\n                               dummy_spanned(ast::Constness::NotConst),\n                               Abi::Rust,"}, {"sha": "67a822e4e02af052a7db504dd50db193b33f3778", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0873974290f4e68b9e12c6922f07c0a7c8a32c98/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0873974290f4e68b9e12c6922f07c0a7c8a32c98/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=0873974290f4e68b9e12c6922f07c0a7c8a32c98", "patch": "@@ -547,7 +547,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     // pub fn main() { ... }\n     let main_ret_ty = ecx.ty(sp, ast::TyKind::Tup(vec![]));\n     let main_body = ecx.block(sp, vec![call_test_main]);\n-    let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], main_ret_ty),\n+    let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty)),\n                            ast::Unsafety::Normal,\n                            dummy_spanned(ast::Constness::NotConst),\n                            ::abi::Abi::Rust, ast::Generics::default(), main_body);"}, {"sha": "88baa22e7fa1160561b664e82bb4f4a1437447b4", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0873974290f4e68b9e12c6922f07c0a7c8a32c98/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0873974290f4e68b9e12c6922f07c0a7c8a32c98/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=0873974290f4e68b9e12c6922f07c0a7c8a32c98", "patch": "@@ -228,13 +228,13 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n             }\n \n             // unit structs have no fields and need to return Ok()\n-            if stmts.is_empty() {\n+            let blk = if stmts.is_empty() {\n                 let ok = cx.expr_ok(trait_span, cx.expr_tuple(trait_span, vec![]));\n-                let ret_ok = cx.expr(trait_span, ExprKind::Ret(Some(ok)));\n-                stmts.push(cx.stmt_expr(ret_ok));\n-            }\n+                cx.lambda1(trait_span, ok, blkarg)\n+            } else {\n+                cx.lambda_stmts_1(trait_span, stmts, blkarg)\n+            };\n \n-            let blk = cx.lambda_stmts_1(trait_span, stmts, blkarg);\n             cx.expr_method_call(trait_span,\n                                 encoder,\n                                 cx.ident_of(\"emit_struct\"),"}, {"sha": "3935f1722b61525670885e978fa53a15f36b02da", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0873974290f4e68b9e12c6922f07c0a7c8a32c98/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0873974290f4e68b9e12c6922f07c0a7c8a32c98/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=0873974290f4e68b9e12c6922f07c0a7c8a32c98", "patch": "@@ -962,7 +962,7 @@ impl<'a> MethodDef<'a> {\n         let ret_type = self.get_ret_ty(cx, trait_, generics, type_ident);\n \n         let method_ident = cx.ident_of(self.name);\n-        let fn_decl = cx.fn_decl(args, ret_type);\n+        let fn_decl = cx.fn_decl(args, ast::FunctionRetTy::Ty(ret_type));\n         let body_block = cx.block_expr(body);\n \n         let unsafety = if self.is_unsafe {"}]}