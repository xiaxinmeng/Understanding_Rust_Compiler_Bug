{"sha": "f42272102a97e2f57e4d02c3a5a1defa3c800970", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MjI3MjEwMmE5N2UyZjU3ZTRkMDJjM2E1YTFkZWZhM2M4MDA5NzA=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-03T10:02:06Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-03T10:02:06Z"}, "message": "Reimplement the `fn_to_numeric_cast` lint", "tree": {"sha": "1ba034005d9ec71adf94cfd6375ed1ad438bb0fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ba034005d9ec71adf94cfd6375ed1ad438bb0fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f42272102a97e2f57e4d02c3a5a1defa3c800970", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlu0k+AACgkQtvoGpuDi\nZltq+w/9FA4DMJiMYEC6YPqgRjJny1eEObLVMi/r9o2JF5ty9JSw73VLpg1J+n2f\nPBpw42aM8vgp6JuZTdd69GffEWasilfkkG2xgH1pLZRZ4V8plK+HsMtt+GP8MOcK\npeTo57zV+5MNYOE0VjEuLVuTnkUjibae+0bjSmqJSyYtfgWmh0DXJu5atPqC7TZJ\nFeg4dDXA/cZTiBIleddahtSK81x4/G+x46ibdvoH5LxcLUTc8VenFYhV4+DBiP+k\nYjadmswCwGYUyQuZn+cug9TUF3x1pExmHYIVAA02sv0LD9i5QgeqiiTt772vyGhf\nRajjhvFtb/l7Nrd2TPWuufuu6YLAhB58oSt61ha6wo3eE/weopEO1ab/unkRQs7k\nSqTm+ugAg4DsKqxy8n5tQ6s9FomXkiYOQvofQZmNmTHPlrpZC112szzviUBbcRRM\na4ZOhJEuIEA9iBnH4mqMBQbvA26ZUOA3iBII1enOC5oqH1u+20/EKP0JIRQrOXF9\nZQECIFZ0zGFsNZhosxRDkFo9qfGWQj++2MBOo3mC0zyMyZPIAJ64Vclhy12I15Bp\nguXCTlSbKjmd8CRFRvFj+VVOY1XzA6virNZwzP4Jg+xXrirnMTFxV9+VeghskOFF\nVDqL80j9D/Yij8f8RKshY3ENZEiBhI3CC08LD5r1WWVN9qTszjM=\n=Ov3G\n-----END PGP SIGNATURE-----", "payload": "tree 1ba034005d9ec71adf94cfd6375ed1ad438bb0fe\nparent 913a5c9b56d367e5a042a7159a8fd340d1709c51\nauthor Philipp Hansch <dev@phansch.net> 1538560926 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1538560926 +0200\n\nReimplement the `fn_to_numeric_cast` lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f42272102a97e2f57e4d02c3a5a1defa3c800970", "html_url": "https://github.com/rust-lang/rust/commit/f42272102a97e2f57e4d02c3a5a1defa3c800970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f42272102a97e2f57e4d02c3a5a1defa3c800970/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "913a5c9b56d367e5a042a7159a8fd340d1709c51", "url": "https://api.github.com/repos/rust-lang/rust/commits/913a5c9b56d367e5a042a7159a8fd340d1709c51", "html_url": "https://github.com/rust-lang/rust/commit/913a5c9b56d367e5a042a7159a8fd340d1709c51"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "2373cb87eedcd70c410e6612a0ba65afb1bbafda", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f42272102a97e2f57e4d02c3a5a1defa3c800970/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f42272102a97e2f57e4d02c3a5a1defa3c800970/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f42272102a97e2f57e4d02c3a5a1defa3c800970", "patch": "@@ -688,6 +688,7 @@ All notable changes to this project will be documented in this file.\n [`float_arithmetic`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#float_arithmetic\n [`float_cmp`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#float_cmp\n [`float_cmp_const`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#float_cmp_const\n+[`fn_to_numeric_cast`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n [`for_kv_map`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_kv_map\n [`for_loop_over_option`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_loop_over_option\n [`for_loop_over_result`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_loop_over_result"}, {"sha": "f332a3f645d394b70862a092cede9c7eb09a0767", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42272102a97e2f57e4d02c3a5a1defa3c800970/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f42272102a97e2f57e4d02c3a5a1defa3c800970/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f42272102a97e2f57e4d02c3a5a1defa3c800970", "patch": "@@ -9,7 +9,7 @@ We are currently in the process of discussing Clippy 1.0 via the RFC process in\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 277 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 278 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "b181a4c17caa609208fb75fb0efd6eb6d18f0350", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42272102a97e2f57e4d02c3a5a1defa3c800970/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42272102a97e2f57e4d02c3a5a1defa3c800970/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f42272102a97e2f57e4d02c3a5a1defa3c800970", "patch": "@@ -697,6 +697,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::CAST_LOSSLESS,\n         types::CAST_PTR_ALIGNMENT,\n         types::CHAR_LIT_AS_U8,\n+        types::FN_TO_NUMERIC_CAST,\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n         types::OPTION_OPTION,\n@@ -789,6 +790,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         strings::STRING_LIT_AS_BYTES,\n+        types::FN_TO_NUMERIC_CAST,\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,"}, {"sha": "5d26e477c825ddad84072df0a0f9c48bf9efa46f", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f42272102a97e2f57e4d02c3a5a1defa3c800970/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42272102a97e2f57e4d02c3a5a1defa3c800970/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f42272102a97e2f57e4d02c3a5a1defa3c800970", "patch": "@@ -719,6 +719,30 @@ declare_clippy_lint! {\n     \"cast from a pointer to a more-strictly-aligned pointer\"\n }\n \n+/// **What it does:** Checks for casts of function pointers to something other than usize\n+///\n+/// **Why is this bad?**\n+/// Depending on the system architechture, casting a function pointer to something other than\n+/// `usize` will result in incorrect pointer addresses.\n+/// `usize` will always be able to store the function pointer on the given architechture.\n+///\n+/// **Example**\n+///\n+/// ```rust\n+/// // Bad\n+/// fn fun() -> i32 {}\n+/// let a = fun as i64;\n+///\n+/// // Good\n+/// fn fun2() -> i32 {}\n+/// let a = fun2 as usize;\n+/// ```\n+declare_clippy_lint! {\n+    pub FN_TO_NUMERIC_CAST,\n+    style,\n+    \"casting a function pointer to a numeric type other than usize\"\n+}\n+\n /// Returns the size in bits of an integral type.\n /// Will return 0 if the type is not an int or uint variant\n fn int_ty_to_nbits(typ: Ty<'_>, tcx: TyCtxt<'_, '_, '_>) -> u64 {\n@@ -913,6 +937,7 @@ impl LintPass for CastPass {\n             CAST_LOSSLESS,\n             UNNECESSARY_CAST,\n             CAST_PTR_ALIGNMENT,\n+            FN_TO_NUMERIC_CAST\n         )\n     }\n }\n@@ -921,6 +946,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Cast(ref ex, _) = expr.node {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n+            lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let ExprKind::Lit(ref lit) = ex.node {\n                 use crate::syntax::ast::{LitIntType, LitKind};\n                 match lit.node {\n@@ -1021,6 +1047,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n     }\n }\n \n+fn lint_fn_to_numeric_cast(cx: &LateContext<'_, '_>, expr: &Expr, cast_expr: &Expr, cast_from: Ty, cast_to: Ty) {\n+    match cast_from.sty {\n+        ty::FnDef(..) | ty::FnPtr(_) => {\n+            let from_snippet = snippet(cx, cast_expr.span, \"x\");\n+            if cast_to.sty != ty::Uint(UintTy::Usize) {\n+                span_lint_and_sugg(\n+                    cx,\n+                    FN_TO_NUMERIC_CAST,\n+                    expr.span,\n+                    &format!(\"casting function pointer `{}` to `{}`\", from_snippet, cast_to),\n+                    \"try\",\n+                    format!(\"{} as usize\", from_snippet)\n+                );\n+            }\n+        },\n+        _ => {}\n+    }\n+}\n+\n /// **What it does:** Checks for types used in structs, parameters and `let`\n /// declarations above a certain complexity threshold.\n ///"}, {"sha": "d250af6184731737021154f5ac2c8f3d4e521434", "filename": "tests/ui/fn_to_numeric_cast.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f42272102a97e2f57e4d02c3a5a1defa3c800970/tests%2Fui%2Ffn_to_numeric_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42272102a97e2f57e4d02c3a5a1defa3c800970/tests%2Fui%2Ffn_to_numeric_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast.rs?ref=f42272102a97e2f57e4d02c3a5a1defa3c800970", "patch": "@@ -0,0 +1,49 @@\n+#![feature(tool_lints)]\n+\n+#[warn(clippy::fn_to_numeric_cast)]\n+\n+fn foo() -> String { String::new() }\n+\n+fn test_function_to_numeric_cast() {\n+    let _ = foo as i8;\n+    let _ = foo as i16;\n+    let _ = foo as i32;\n+    let _ = foo as i64;\n+    let _ = foo as i128;\n+    let _ = foo as isize;\n+\n+    let _ = foo as u8;\n+    let _ = foo as u16;\n+    let _ = foo as u32;\n+    let _ = foo as u64;\n+    let _ = foo as u128;\n+\n+    // Casting to usize is OK and should not warn\n+    let _ = foo as usize;\n+}\n+\n+fn test_function_var_to_numeric_cast() {\n+    let abc: fn() -> String = foo;\n+\n+    let _ = abc as i8;\n+    let _ = abc as i16;\n+    let _ = abc as i32;\n+    let _ = abc as i64;\n+    let _ = abc as i128;\n+    let _ = abc as isize;\n+\n+    let _ = abc as u8;\n+    let _ = abc as u16;\n+    let _ = abc as u32;\n+    let _ = abc as u64;\n+    let _ = abc as u128;\n+\n+    // Casting to usize is OK and should not warn\n+    let _ = abc as usize;\n+}\n+\n+fn fn_with_fn_args(f: fn(i32) -> i32) -> i32 {\n+    f as i32\n+}\n+\n+fn main() {}"}]}