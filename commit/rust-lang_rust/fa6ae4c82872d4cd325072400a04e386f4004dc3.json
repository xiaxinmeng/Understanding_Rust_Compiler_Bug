{"sha": "fa6ae4c82872d4cd325072400a04e386f4004dc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNmFlNGM4Mjg3MmQ0Y2QzMjUwNzI0MDBhMDRlMzg2ZjQwMDRkYzM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-24T22:47:40Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-25T14:08:30Z"}, "message": "Suggest using slice when encountering `let x = \"\"[..];`", "tree": {"sha": "f962b080a96d91f5096334c22b3a3d3c44c645f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f962b080a96d91f5096334c22b3a3d3c44c645f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa6ae4c82872d4cd325072400a04e386f4004dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6ae4c82872d4cd325072400a04e386f4004dc3", "html_url": "https://github.com/rust-lang/rust/commit/fa6ae4c82872d4cd325072400a04e386f4004dc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa6ae4c82872d4cd325072400a04e386f4004dc3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71da1c21ebc79f19e749344c8b4e2c13f533872e", "url": "https://api.github.com/repos/rust-lang/rust/commits/71da1c21ebc79f19e749344c8b4e2c13f533872e", "html_url": "https://github.com/rust-lang/rust/commit/71da1c21ebc79f19e749344c8b4e2c13f533872e"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "986f1b9e4196f47520d60f1aed976d5bb12e7eea", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae4c82872d4cd325072400a04e386f4004dc3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae4c82872d4cd325072400a04e386f4004dc3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=fa6ae4c82872d4cd325072400a04e386f4004dc3", "patch": "@@ -244,6 +244,23 @@ impl Path {\n     pub fn is_global(&self) -> bool {\n         !self.segments.is_empty() && self.segments[0].name == keywords::CrateRoot.name()\n     }\n+\n+    /// Wether this path is any of `::std::ops::{Range, RangeTo, RangeFrom}`.\n+    pub fn is_range(&self) -> bool {\n+        let mut base = [\"{{root}}\", \"std\", \"ops\"].iter().map(|p| p.to_string()).collect::<Vec<_>>();\n+        let range_paths = [\"Range\", \"RangeTo\", \"RangeFrom\"];\n+        let segments = self.segments.iter()\n+            .map(|segment| format!(\"{}\", segment.name))\n+            .collect::<Vec<String>>();\n+        for path in &range_paths {\n+            base.push(path.to_string());\n+            if base == segments {\n+                return true;\n+            }\n+            base.pop();\n+        }\n+        false\n+    }\n }\n \n impl fmt::Debug for Path {"}, {"sha": "a8a8b20012b7acab2db0ff70432d5c40f1135543", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae4c82872d4cd325072400a04e386f4004dc3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae4c82872d4cd325072400a04e386f4004dc3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=fa6ae4c82872d4cd325072400a04e386f4004dc3", "patch": "@@ -581,6 +581,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                      trait_ref.self_ty()));\n                         }\n \n+                        self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n+\n                         // Try to report a help message\n                         if !trait_ref.has_infer_types() &&\n                             self.predicate_can_apply(obligation.param_env, trait_ref) {\n@@ -821,6 +823,33 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         err.emit();\n     }\n \n+    /// When encountering an assignment of an unsized trait, like `let x = \"\"[..];`, provide a\n+    /// suggestion to borrow the initializer in order to use have a slice instead.\n+    fn suggest_borrow_on_unsized_slice(&self,\n+                                       code: &ObligationCauseCode<'tcx>,\n+                                       err: &mut DiagnosticBuilder<'tcx>) {\n+        if let &ObligationCauseCode::VariableType(node_id) = code {\n+            let parent_node = self.tcx.hir.get_parent_node(node_id);\n+            if let Some(hir::map::NodeLocal(ref local)) = self.tcx.hir.find(parent_node) {\n+                if let Some(ref expr) = local.init {\n+                    if let hir::ExprIndex(_, ref index) = expr.node {\n+                        if let hir::ExprStruct(hir::QPath::Resolved(None, ref path),\n+                                               ..) = index.node {\n+                            if let (Ok(snippet), true) = (\n+                                self.tcx.sess.codemap().span_to_snippet(expr.span),\n+                                path.is_range()\n+                            ) {\n+                                err.span_suggestion(expr.span,\n+                                                    \"consider a slice instead\",\n+                                                    format!(\"&{}\", snippet));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     fn report_arg_count_mismatch(\n         &self,\n         span: Span,"}, {"sha": "523e7bea6224b1b9a0825d63d32ca831c28c6e69", "filename": "src/test/ui/suggestions/str-array-assignment.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae4c82872d4cd325072400a04e386f4004dc3/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae4c82872d4cd325072400a04e386f4004dc3/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs?ref=fa6ae4c82872d4cd325072400a04e386f4004dc3", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+  let s = \"abc\";\n+  let t = if true { s[..2] } else { s };\n+  let u: &str = if true { s[..2] } else { s };\n+  let v = s[..2];\n+  let w: &str = s[..2];\n+}"}, {"sha": "225dfbd98fddfdb85164a8c31b5db18782fe49b5", "filename": "src/test/ui/suggestions/str-array-assignment.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae4c82872d4cd325072400a04e386f4004dc3/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae4c82872d4cd325072400a04e386f4004dc3/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr?ref=fa6ae4c82872d4cd325072400a04e386f4004dc3", "patch": "@@ -0,0 +1,44 @@\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/str-array-assignment.rs:13:11\n+   |\n+13 |   let t = if true { s[..2] } else { s };\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found &str\n+   |\n+   = note: expected type `str`\n+              found type `&str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/str-array-assignment.rs:14:27\n+   |\n+11 | fn main() {\n+   |           - expected `()` because of default return type\n+...\n+14 |   let u: &str = if true { s[..2] } else { s };\n+   |                           ^^^^^^ expected &str, found str\n+   |\n+   = note: expected type `&str`\n+              found type `str`\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/str-array-assignment.rs:15:7\n+   |\n+15 |   let v = s[..2];\n+   |       ^   ------ help: consider a slice instead: `&s[..2]`\n+   |       |\n+   |       `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: all local variables must have a statically known size\n+\n+error[E0308]: mismatched types\n+  --> $DIR/str-array-assignment.rs:16:17\n+   |\n+16 |   let w: &str = s[..2];\n+   |                 ^^^^^^ expected &str, found str\n+   |\n+   = note: expected type `&str`\n+              found type `str`\n+   = help: try with `&s[..2]`\n+\n+error: aborting due to 4 previous errors\n+"}]}