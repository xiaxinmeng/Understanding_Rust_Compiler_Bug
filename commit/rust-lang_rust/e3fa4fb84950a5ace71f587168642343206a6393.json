{"sha": "e3fa4fb84950a5ace71f587168642343206a6393", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZmE0ZmI4NDk1MGE1YWNlNzFmNTg3MTY4NjQyMzQzMjA2YTYzOTM=", "commit": {"author": {"name": "David Renshaw", "email": "david@sandstorm.io", "date": "2017-06-29T17:06:36Z"}, "committer": {"name": "David Renshaw", "email": "david@sandstorm.io", "date": "2017-06-29T17:06:36Z"}, "message": "get cargo-miri to work", "tree": {"sha": "6521a50630f9e6acdf5485e523e0b5197b0348a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6521a50630f9e6acdf5485e523e0b5197b0348a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3fa4fb84950a5ace71f587168642343206a6393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fa4fb84950a5ace71f587168642343206a6393", "html_url": "https://github.com/rust-lang/rust/commit/e3fa4fb84950a5ace71f587168642343206a6393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3fa4fb84950a5ace71f587168642343206a6393/comments", "author": null, "committer": null, "parents": [{"sha": "8722ce8d4b66c0d7939d54c2d59502116a662a60", "url": "https://api.github.com/repos/rust-lang/rust/commits/8722ce8d4b66c0d7939d54c2d59502116a662a60", "html_url": "https://github.com/rust-lang/rust/commit/8722ce8d4b66c0d7939d54c2d59502116a662a60"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "6eff6650fa9c41b2cab4bb0730a6462f8611a2b4", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e3fa4fb84950a5ace71f587168642343206a6393/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fa4fb84950a5ace71f587168642343206a6393/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=e3fa4fb84950a5ace71f587168642343206a6393", "patch": "@@ -44,8 +44,6 @@ fn main() {\n         return;\n     }\n \n-    let dep_path = std::env::current_dir().expect(\"current dir is not readable\").join(\"target\").join(\"debug\").join(\"deps\");\n-\n     if let Some(\"miri\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n         // this arm is when `cargo miri` is called\n \n@@ -84,13 +82,11 @@ fn main() {\n             let args = std::env::args().skip(skip);\n             let kind = target.kind.get(0).expect(\"badly formatted cargo metadata: target::kind is an empty array\");\n             if test && kind == \"test\" {\n-                if let Err(code) = process(vec![\"--test\".to_string(), target.name].into_iter().chain(args),\n-                                           &dep_path) {\n+                if let Err(code) = process(vec![\"--test\".to_string(), target.name].into_iter().chain(args)) {\n                     std::process::exit(code);\n                 }\n             } else if !test && kind == \"bin\" {\n-                if let Err(code) = process(vec![\"--bin\".to_string(), target.name].into_iter().chain(args),\n-                                           &dep_path) {\n+                if let Err(code) = process(vec![\"--bin\".to_string(), target.name].into_iter().chain(args)) {\n                     std::process::exit(code);\n                 }\n             }\n@@ -117,7 +113,7 @@ fn main() {\n                 .expect(\"need to specify RUST_SYSROOT env var during miri compilation, or use rustup or multirust\")\n         };\n \n-        // this conditional check for the --sysroot flag is there so users can call `cargo-clippy` directly\n+        // this conditional check for the --sysroot flag is there so users can call `cargo-miri` directly\n         // without having to pass --sysroot or anything\n         let mut args: Vec<String> = if std::env::args().any(|s| s == \"--sysroot\") {\n             std::env::args().skip(1).collect()\n@@ -129,25 +125,29 @@ fn main() {\n         // interpreted but not built\n         let miri_enabled = std::env::args().any(|s| s == \"-Zno-trans\");\n \n-        if miri_enabled {\n-            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-miri\"\"#.to_owned()]);\n-        }\n+        let mut command = if miri_enabled {\n+            let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n+            path.set_file_name(\"miri\");\n+            Command::new(path)\n+        } else {\n+            Command::new(\"rustc\")\n+        };\n \n-        let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n-        path.set_file_name(\"miri\");\n+        args.extend_from_slice(&[\"-Z\".to_owned(), \"always-encode-mir\".to_owned()]);\n+        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-miri\"\"#.to_owned()]);\n \n-        match Command::new(path).args(&args).status() {\n+        match command.args(&args).status() {\n             Ok(exit) => if !exit.success() {\n                 std::process::exit(exit.code().unwrap_or(42));\n             },\n-            Err(e) => panic!(\"error during miri run: {:?}\", e),\n+            Err(ref e) if miri_enabled => panic!(\"error during miri run: {:?}\", e),\n+            Err(ref e) => panic!(\"error during rustc call: {:?}\", e),\n         }\n     }\n }\n \n-fn process<P, I>(old_args: I, dep_path: P) -> Result<(), i32>\n-    where P: AsRef<Path>,\n-          I: Iterator<Item = String>\n+fn process<I>(old_args: I) -> Result<(), i32>\n+    where I: Iterator<Item = String>\n {\n     let mut args = vec![\"rustc\".to_owned()];\n \n@@ -159,8 +159,6 @@ fn process<P, I>(old_args: I, dep_path: P) -> Result<(), i32>\n     if !found_dashes {\n         args.push(\"--\".to_owned());\n     }\n-    args.push(\"-L\".to_owned());\n-    args.push(dep_path.as_ref().to_string_lossy().into_owned());\n     args.push(\"-Zno-trans\".to_owned());\n     args.push(\"--cfg\".to_owned());\n     args.push(r#\"feature=\"cargo-miri\"\"#.to_owned());"}]}