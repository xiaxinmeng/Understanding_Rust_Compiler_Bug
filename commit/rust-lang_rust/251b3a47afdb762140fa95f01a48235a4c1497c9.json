{"sha": "251b3a47afdb762140fa95f01a48235a4c1497c9", "node_id": "C_kwDOAAsO6NoAKDI1MWIzYTQ3YWZkYjc2MjE0MGZhOTVmMDFhNDgyMzVhNGMxNDk3Yzk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-29T21:33:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-30T07:21:10Z"}, "message": "Simplify", "tree": {"sha": "b4b72f8da308fd091fe758e4db2aa6ebe1a2fe90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b72f8da308fd091fe758e4db2aa6ebe1a2fe90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/251b3a47afdb762140fa95f01a48235a4c1497c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/251b3a47afdb762140fa95f01a48235a4c1497c9", "html_url": "https://github.com/rust-lang/rust/commit/251b3a47afdb762140fa95f01a48235a4c1497c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/251b3a47afdb762140fa95f01a48235a4c1497c9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e79747965197e362b375a7019571331b5be2394e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e79747965197e362b375a7019571331b5be2394e", "html_url": "https://github.com/rust-lang/rust/commit/e79747965197e362b375a7019571331b5be2394e"}], "stats": {"total": 206, "additions": 98, "deletions": 108}, "files": [{"sha": "c749bf570c3816f3aec34d96ab3d8c530ab18896", "filename": "crates/hir-ty/src/autoderef.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs?ref=251b3a47afdb762140fa95f01a48235a4c1497c9", "patch": "@@ -3,8 +3,6 @@\n //! reference to a type with the field `bar`. This is an approximation of the\n //! logic in rustc (which lives in rustc_hir_analysis/check/autoderef.rs).\n \n-use std::sync::Arc;\n-\n use chalk_ir::cast::Cast;\n use hir_def::{\n     lang_item::{LangItem, LangItemTarget},\n@@ -13,10 +11,7 @@ use hir_def::{\n use hir_expand::name::name;\n use limit::Limit;\n \n-use crate::{\n-    db::HirDatabase, infer::unify::InferenceTable, Canonical, Goal, Interner, ProjectionTyExt,\n-    TraitEnvironment, Ty, TyBuilder, TyKind,\n-};\n+use crate::{infer::unify::InferenceTable, Goal, Interner, ProjectionTyExt, Ty, TyBuilder, TyKind};\n \n static AUTODEREF_RECURSION_LIMIT: Limit = Limit::new(10);\n \n@@ -27,15 +22,15 @@ pub(crate) enum AutoderefKind {\n }\n \n #[derive(Debug)]\n-pub(crate) struct Autoderef<'a, 'db> {\n-    pub(crate) table: &'a mut InferenceTable<'db>,\n+pub struct Autoderef<'a, 'db> {\n+    pub table: &'a mut InferenceTable<'db>,\n     ty: Ty,\n     at_start: bool,\n     steps: Vec<(AutoderefKind, Ty)>,\n }\n \n impl<'a, 'db> Autoderef<'a, 'db> {\n-    pub(crate) fn new(table: &'a mut InferenceTable<'db>, ty: Ty) -> Self {\n+    pub fn new(table: &'a mut InferenceTable<'db>, ty: Ty) -> Self {\n         let ty = table.resolve_ty_shallow(&ty);\n         Autoderef { table, ty, at_start: true, steps: Vec::new() }\n     }\n@@ -86,22 +81,6 @@ pub(crate) fn autoderef_step(\n     }\n }\n \n-// FIXME: replace uses of this with Autoderef above\n-pub fn autoderef(\n-    db: &dyn HirDatabase,\n-    env: Arc<TraitEnvironment>,\n-    ty: Canonical<Ty>,\n-) -> impl Iterator<Item = Canonical<Ty>> + '_ {\n-    let mut table = InferenceTable::new(db, env);\n-    let ty = table.instantiate_canonical(ty);\n-    let mut autoderef = Autoderef::new(&mut table, ty);\n-    let mut v = Vec::new();\n-    while let Some((ty, _steps)) = autoderef.next() {\n-        v.push(autoderef.table.canonicalize(ty).value);\n-    }\n-    v.into_iter()\n-}\n-\n pub(crate) fn builtin_deref<'ty>(\n     table: &mut InferenceTable<'_>,\n     ty: &'ty Ty,"}, {"sha": "73f3ba1e320c99829c50d64a2537941becbed6b8", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=251b3a47afdb762140fa95f01a48235a4c1497c9", "patch": "@@ -28,11 +28,12 @@ use crate::{\n     infer::{\n         coerce::CoerceMany, find_continuable, pat::contains_explicit_ref_binding, BreakableKind,\n     },\n+    lang_items::lang_items_for_bin_op,\n     lower::{\n         const_or_path_to_chalk, generic_arg_to_chalk, lower_to_chalk_mutability, ParamLoweringMode,\n     },\n     mapping::{from_chalk, ToChalk},\n-    method_resolution::{self, lang_items_for_bin_op, VisibleFromModule},\n+    method_resolution::{self, VisibleFromModule},\n     primitive::{self, UintTy},\n     static_lifetime, to_chalk_trait_id,\n     traits::FnTrait,\n@@ -792,7 +793,7 @@ impl<'a> InferenceContext<'a> {\n                     let canonicalized = self.canonicalize(base_ty.clone());\n                     let receiver_adjustments = method_resolution::resolve_indexing_op(\n                         self.db,\n-                        self.table.trait_env.clone(),\n+                        &mut self.table,\n                         canonicalized.value,\n                         index_trait,\n                     );"}, {"sha": "b3428938e0d956d0e8961401887250363d2a084f", "filename": "crates/hir-ty/src/infer/unify.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs?ref=251b3a47afdb762140fa95f01a48235a4c1497c9", "patch": "@@ -32,11 +32,11 @@ impl<'a> InferenceContext<'a> {\n }\n \n #[derive(Debug, Clone)]\n-pub(crate) struct Canonicalized<T>\n+pub struct Canonicalized<T>\n where\n     T: HasInterner<Interner = Interner>,\n {\n-    pub(crate) value: Canonical<T>,\n+    pub value: Canonical<T>,\n     free_vars: Vec<GenericArg>,\n }\n \n@@ -140,7 +140,7 @@ bitflags::bitflags! {\n type ChalkInferenceTable = chalk_solve::infer::InferenceTable<Interner>;\n \n #[derive(Clone)]\n-pub(crate) struct InferenceTable<'a> {\n+pub struct InferenceTable<'a> {\n     pub(crate) db: &'a dyn HirDatabase,\n     pub(crate) trait_env: Arc<TraitEnvironment>,\n     var_unification_table: ChalkInferenceTable,\n@@ -155,7 +155,7 @@ pub(crate) struct InferenceTableSnapshot {\n }\n \n impl<'a> InferenceTable<'a> {\n-    pub(crate) fn new(db: &'a dyn HirDatabase, trait_env: Arc<TraitEnvironment>) -> Self {\n+    pub fn new(db: &'a dyn HirDatabase, trait_env: Arc<TraitEnvironment>) -> Self {\n         InferenceTable {\n             db,\n             trait_env,\n@@ -204,7 +204,7 @@ impl<'a> InferenceTable<'a> {\n         .intern(Interner)\n     }\n \n-    pub(crate) fn canonicalize<T: TypeFoldable<Interner> + HasInterner<Interner = Interner>>(\n+    pub fn canonicalize<T: TypeFoldable<Interner> + HasInterner<Interner = Interner>>(\n         &mut self,\n         t: T,\n     ) -> Canonicalized<T>\n@@ -320,7 +320,7 @@ impl<'a> InferenceTable<'a> {\n         )\n     }\n \n-    pub(crate) fn instantiate_canonical<T>(&mut self, canonical: Canonical<T>) -> T\n+    pub fn instantiate_canonical<T>(&mut self, canonical: Canonical<T>) -> T\n     where\n         T: HasInterner<Interner = Interner> + TypeFoldable<Interner> + std::fmt::Debug,\n     {"}, {"sha": "28e5f6df0630a48a929eb810f212a1d47bb3b83d", "filename": "crates/hir-ty/src/lang_items.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flang_items.rs?ref=251b3a47afdb762140fa95f01a48235a4c1497c9", "patch": "@@ -1,6 +1,7 @@\n //! Functions to detect special lang items\n \n use hir_def::{lang_item::LangItem, AdtId, HasModule};\n+use hir_expand::name::Name;\n \n use crate::db::HirDatabase;\n \n@@ -17,3 +18,52 @@ pub fn is_unsafe_cell(adt: AdtId, db: &dyn HirDatabase) -> bool {\n         db.lang_item(krate, LangItem::UnsafeCell).and_then(|it| it.as_struct()).map(AdtId::from);\n     Some(adt) == box_adt\n }\n+\n+pub fn lang_items_for_bin_op(op: syntax::ast::BinaryOp) -> Option<(Name, LangItem)> {\n+    use hir_expand::name;\n+    use syntax::ast::{ArithOp, BinaryOp, CmpOp, Ordering};\n+    Some(match op {\n+        BinaryOp::LogicOp(_) => return None,\n+        BinaryOp::ArithOp(aop) => match aop {\n+            ArithOp::Add => (name![add], LangItem::Add),\n+            ArithOp::Mul => (name![mul], LangItem::Mul),\n+            ArithOp::Sub => (name![sub], LangItem::Sub),\n+            ArithOp::Div => (name![div], LangItem::Div),\n+            ArithOp::Rem => (name![rem], LangItem::Rem),\n+            ArithOp::Shl => (name![shl], LangItem::Shl),\n+            ArithOp::Shr => (name![shr], LangItem::Shr),\n+            ArithOp::BitXor => (name![bitxor], LangItem::BitXor),\n+            ArithOp::BitOr => (name![bitor], LangItem::BitOr),\n+            ArithOp::BitAnd => (name![bitand], LangItem::BitAnd),\n+        },\n+        BinaryOp::Assignment { op: Some(aop) } => match aop {\n+            ArithOp::Add => (name![add_assign], LangItem::AddAssign),\n+            ArithOp::Mul => (name![mul_assign], LangItem::MulAssign),\n+            ArithOp::Sub => (name![sub_assign], LangItem::SubAssign),\n+            ArithOp::Div => (name![div_assign], LangItem::DivAssign),\n+            ArithOp::Rem => (name![rem_assign], LangItem::RemAssign),\n+            ArithOp::Shl => (name![shl_assign], LangItem::ShlAssign),\n+            ArithOp::Shr => (name![shr_assign], LangItem::ShrAssign),\n+            ArithOp::BitXor => (name![bitxor_assign], LangItem::BitXorAssign),\n+            ArithOp::BitOr => (name![bitor_assign], LangItem::BitOrAssign),\n+            ArithOp::BitAnd => (name![bitand_assign], LangItem::BitAndAssign),\n+        },\n+        BinaryOp::CmpOp(cop) => match cop {\n+            CmpOp::Eq { negated: false } => (name![eq], LangItem::PartialEq),\n+            CmpOp::Eq { negated: true } => (name![ne], LangItem::PartialEq),\n+            CmpOp::Ord { ordering: Ordering::Less, strict: false } => {\n+                (name![le], LangItem::PartialOrd)\n+            }\n+            CmpOp::Ord { ordering: Ordering::Less, strict: true } => {\n+                (name![lt], LangItem::PartialOrd)\n+            }\n+            CmpOp::Ord { ordering: Ordering::Greater, strict: false } => {\n+                (name![ge], LangItem::PartialOrd)\n+            }\n+            CmpOp::Ord { ordering: Ordering::Greater, strict: true } => {\n+                (name![gt], LangItem::PartialOrd)\n+            }\n+        },\n+        BinaryOp::Assignment { op: None } => return None,\n+    })\n+}"}, {"sha": "1cab32e958c66e973531b6787499caf639c239ce", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=251b3a47afdb762140fa95f01a48235a4c1497c9", "patch": "@@ -7,27 +7,28 @@ macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n }\n \n-mod autoderef;\n mod builder;\n mod chalk_db;\n mod chalk_ext;\n-pub mod consteval;\n-pub mod mir;\n mod infer;\n mod inhabitedness;\n mod interner;\n mod lower;\n mod mapping;\n mod tls;\n mod utils;\n+\n+pub mod autoderef;\n+pub mod consteval;\n pub mod db;\n pub mod diagnostics;\n pub mod display;\n+pub mod lang_items;\n+pub mod layout;\n pub mod method_resolution;\n+pub mod mir;\n pub mod primitive;\n pub mod traits;\n-pub mod layout;\n-pub mod lang_items;\n \n #[cfg(test)]\n mod tests;\n@@ -51,16 +52,14 @@ use rustc_hash::FxHashSet;\n use traits::FnTrait;\n use utils::Generics;\n \n-use crate::{\n-    consteval::unknown_const, db::HirDatabase, infer::unify::InferenceTable, utils::generics,\n-};\n+use crate::{consteval::unknown_const, db::HirDatabase, utils::generics};\n \n-pub use autoderef::autoderef;\n+pub use autoderef::Autoderef;\n pub use builder::{ParamKind, TyBuilder};\n pub use chalk_ext::*;\n pub use infer::{\n-    could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, BindingMode, InferenceDiagnostic,\n-    InferenceResult, OverloadedDeref, PointerCast,\n+    could_coerce, could_unify, unify::InferenceTable, Adjust, Adjustment, AutoBorrow, BindingMode,\n+    InferenceDiagnostic, InferenceResult, OverloadedDeref, PointerCast,\n };\n pub use interner::Interner;\n pub use lower::{"}, {"sha": "e08c44f0a046d8ed8481f35135447181e52e5623", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 57, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=251b3a47afdb762140fa95f01a48235a4c1497c9", "patch": "@@ -7,9 +7,8 @@ use std::{ops::ControlFlow, sync::Arc};\n use base_db::{CrateId, Edition};\n use chalk_ir::{cast::Cast, Mutability, TyKind, UniverseIndex, WhereClause};\n use hir_def::{\n-    data::ImplData, item_scope::ItemScope, lang_item::LangItem, nameres::DefMap, AssocItemId,\n-    BlockId, ConstId, FunctionId, HasModule, ImplId, ItemContainerId, Lookup, ModuleDefId,\n-    ModuleId, TraitId,\n+    data::ImplData, item_scope::ItemScope, nameres::DefMap, AssocItemId, BlockId, ConstId,\n+    FunctionId, HasModule, ImplId, ItemContainerId, Lookup, ModuleDefId, ModuleId, TraitId,\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -451,55 +450,6 @@ pub fn def_crates(\n     }\n }\n \n-pub fn lang_items_for_bin_op(op: syntax::ast::BinaryOp) -> Option<(Name, LangItem)> {\n-    use hir_expand::name;\n-    use syntax::ast::{ArithOp, BinaryOp, CmpOp, Ordering};\n-    Some(match op {\n-        BinaryOp::LogicOp(_) => return None,\n-        BinaryOp::ArithOp(aop) => match aop {\n-            ArithOp::Add => (name![add], LangItem::Add),\n-            ArithOp::Mul => (name![mul], LangItem::Mul),\n-            ArithOp::Sub => (name![sub], LangItem::Sub),\n-            ArithOp::Div => (name![div], LangItem::Div),\n-            ArithOp::Rem => (name![rem], LangItem::Rem),\n-            ArithOp::Shl => (name![shl], LangItem::Shl),\n-            ArithOp::Shr => (name![shr], LangItem::Shr),\n-            ArithOp::BitXor => (name![bitxor], LangItem::BitXor),\n-            ArithOp::BitOr => (name![bitor], LangItem::BitOr),\n-            ArithOp::BitAnd => (name![bitand], LangItem::BitAnd),\n-        },\n-        BinaryOp::Assignment { op: Some(aop) } => match aop {\n-            ArithOp::Add => (name![add_assign], LangItem::AddAssign),\n-            ArithOp::Mul => (name![mul_assign], LangItem::MulAssign),\n-            ArithOp::Sub => (name![sub_assign], LangItem::SubAssign),\n-            ArithOp::Div => (name![div_assign], LangItem::DivAssign),\n-            ArithOp::Rem => (name![rem_assign], LangItem::RemAssign),\n-            ArithOp::Shl => (name![shl_assign], LangItem::ShlAssign),\n-            ArithOp::Shr => (name![shr_assign], LangItem::ShrAssign),\n-            ArithOp::BitXor => (name![bitxor_assign], LangItem::BitXorAssign),\n-            ArithOp::BitOr => (name![bitor_assign], LangItem::BitOrAssign),\n-            ArithOp::BitAnd => (name![bitand_assign], LangItem::BitAndAssign),\n-        },\n-        BinaryOp::CmpOp(cop) => match cop {\n-            CmpOp::Eq { negated: false } => (name![eq], LangItem::PartialEq),\n-            CmpOp::Eq { negated: true } => (name![ne], LangItem::PartialEq),\n-            CmpOp::Ord { ordering: Ordering::Less, strict: false } => {\n-                (name![le], LangItem::PartialOrd)\n-            }\n-            CmpOp::Ord { ordering: Ordering::Less, strict: true } => {\n-                (name![lt], LangItem::PartialOrd)\n-            }\n-            CmpOp::Ord { ordering: Ordering::Greater, strict: false } => {\n-                (name![ge], LangItem::PartialOrd)\n-            }\n-            CmpOp::Ord { ordering: Ordering::Greater, strict: true } => {\n-                (name![gt], LangItem::PartialOrd)\n-            }\n-        },\n-        BinaryOp::Assignment { op: None } => return None,\n-    })\n-}\n-\n /// Look up the method with the given name.\n pub(crate) fn lookup_method(\n     db: &dyn HirDatabase,\n@@ -1310,16 +1260,18 @@ fn iterate_inherent_methods(\n /// Returns the receiver type for the index trait call.\n pub fn resolve_indexing_op(\n     db: &dyn HirDatabase,\n-    env: Arc<TraitEnvironment>,\n+    table: &mut InferenceTable<'_>,\n     ty: Canonical<Ty>,\n     index_trait: TraitId,\n ) -> Option<ReceiverAdjustments> {\n-    let mut table = InferenceTable::new(db, env.clone());\n     let ty = table.instantiate_canonical(ty);\n-    let deref_chain = autoderef_method_receiver(&mut table, ty);\n+    let deref_chain = autoderef_method_receiver(table, ty);\n     for (ty, adj) in deref_chain {\n-        let goal = generic_implements_goal(db, env.clone(), index_trait, &ty);\n-        if db.trait_solve(env.krate, env.block, goal.cast(Interner)).is_some() {\n+        let goal = generic_implements_goal(db, table.trait_env.clone(), index_trait, &ty);\n+        if db\n+            .trait_solve(table.trait_env.krate, table.trait_env.block, goal.cast(Interner))\n+            .is_some()\n+        {\n             return Some(adj);\n         }\n     }"}, {"sha": "5cad83158745457455dae13e4ba3a9157857fd72", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=251b3a47afdb762140fa95f01a48235a4c1497c9", "patch": "@@ -57,7 +57,7 @@ use hir_def::{\n };\n use hir_expand::{name::name, MacroCallKind};\n use hir_ty::{\n-    all_super_traits, autoderef,\n+    all_super_traits,\n     consteval::{try_const_usize, unknown_const_as_generic, ConstEvalError, ConstExt},\n     diagnostics::BodyValidationDiagnostic,\n     display::HexifiedConst,\n@@ -66,9 +66,10 @@ use hir_ty::{\n     mir::{self, interpret_mir},\n     primitive::UintTy,\n     traits::FnTrait,\n-    AliasTy, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast, ClosureId,\n-    GenericArgData, Interner, ParamKind, QuantifiedWhereClause, Scalar, Substitution,\n-    TraitEnvironment, TraitRefExt, Ty, TyBuilder, TyDefId, TyExt, TyKind, WhereClause,\n+    AliasTy, Autoderef, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast, ClosureId,\n+    GenericArgData, InferenceTable, Interner, ParamKind, QuantifiedWhereClause, Scalar,\n+    Substitution, TraitEnvironment, TraitRefExt, Ty, TyBuilder, TyDefId, TyExt, TyKind,\n+    WhereClause,\n };\n use itertools::Itertools;\n use nameres::diagnostics::DefDiagnosticKind;\n@@ -3517,8 +3518,15 @@ impl Type {\n     fn autoderef_<'a>(&'a self, db: &'a dyn HirDatabase) -> impl Iterator<Item = Ty> + 'a {\n         // There should be no inference vars in types passed here\n         let canonical = hir_ty::replace_errors_with_variables(&self.ty);\n-        let environment = self.env.clone();\n-        autoderef(db, environment, canonical).map(|canonical| canonical.value)\n+\n+        let mut table = InferenceTable::new(db, self.env.clone());\n+        let ty = table.instantiate_canonical(canonical);\n+        let mut autoderef = Autoderef::new(&mut table, ty);\n+        let mut v = Vec::new();\n+        while let Some((ty, _steps)) = autoderef.next() {\n+            v.push(autoderef.table.canonicalize(ty).value);\n+        }\n+        v.into_iter().map(|canonical| canonical.value)\n     }\n \n     // This would be nicer if it just returned an iterator, but that runs into"}, {"sha": "4d33c71fdd84d1eb9652e44b5ec63e5adf3bb435", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251b3a47afdb762140fa95f01a48235a4c1497c9/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=251b3a47afdb762140fa95f01a48235a4c1497c9", "patch": "@@ -39,7 +39,8 @@ use hir_ty::{\n         record_literal_missing_fields, record_pattern_missing_fields, unsafe_expressions,\n         UnsafeExpr,\n     },\n-    method_resolution::{self, lang_items_for_bin_op},\n+    lang_items::lang_items_for_bin_op,\n+    method_resolution::{self},\n     Adjustment, InferenceResult, Interner, Substitution, Ty, TyExt, TyKind, TyLoweringContext,\n };\n use itertools::Itertools;"}]}