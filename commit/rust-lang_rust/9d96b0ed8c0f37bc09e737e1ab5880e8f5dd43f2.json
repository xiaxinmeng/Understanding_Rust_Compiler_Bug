{"sha": "9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOTZiMGVkOGMwZjM3YmMwOWU3MzdlMWFiNTg4MGU4ZjVkZDQzZjI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-06-04T16:38:45Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-06-04T20:03:45Z"}, "message": "Revert effects of PRs 81167 and 83091.\n\nThis is preparation for reverting 81238 for short-term resolution of issue 84297.", "tree": {"sha": "9dfbd9713ab1b6c6a5d5c515c913d5af8bdafb98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dfbd9713ab1b6c6a5d5c515c913d5af8bdafb98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2", "html_url": "https://github.com/rust-lang/rust/commit/9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "595088d602049d821bf9a217f2d79aea40715208", "url": "https://api.github.com/repos/rust-lang/rust/commits/595088d602049d821bf9a217f2d79aea40715208", "html_url": "https://github.com/rust-lang/rust/commit/595088d602049d821bf9a217f2d79aea40715208"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "c6750c52d16c8616508247fc0a5f14cd2f9eb5ce", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2", "patch": "@@ -682,8 +682,7 @@ pub unsafe fn uninitialized<T>() -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n-pub const fn swap<T>(x: &mut T, y: &mut T) {\n+pub fn swap<T>(x: &mut T, y: &mut T) {\n     // SAFETY: the raw pointers have been created from safe mutable references satisfying all the\n     // constraints on `ptr::swap_nonoverlapping_one`\n     unsafe {\n@@ -813,8 +812,7 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n-#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n-pub const fn replace<T>(dest: &mut T, src: T) -> T {\n+pub fn replace<T>(dest: &mut T, src: T) -> T {\n     // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n     // such that the old value is not duplicated. Nothing is dropped and\n     // nothing here can panic."}, {"sha": "6028326ffab47f91433a2ac4aef7ca3d33227cc2", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2", "patch": "@@ -430,8 +430,7 @@ pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n }\n \n #[inline]\n-#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n-pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n+pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n     // NOTE(eddyb) SPIR-V's Logical addressing model doesn't allow for arbitrary\n     // reinterpretation of values as (chunkable) byte arrays, and the loop in the\n     // block optimization in `swap_nonoverlapping_bytes` is hard to rewrite back\n@@ -564,8 +563,7 @@ const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n-pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n+pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n     // SAFETY: the caller must guarantee that `dst` is valid to be\n     // cast to a mutable reference (valid for writes, aligned, initialized),\n     // and cannot overlap `src` since `dst` must point to a distinct\n@@ -871,8 +869,7 @@ pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n-pub const unsafe fn write<T>(dst: *mut T, src: T) {\n+pub unsafe fn write<T>(dst: *mut T, src: T) {\n     // SAFETY: the caller must guarantee that `dst` is valid for writes.\n     // `dst` cannot overlap `src` because the caller has mutable access\n     // to `dst` while `src` is owned by this function."}, {"sha": "a6424041542d9054c79e060f23772de186088cc3", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2", "patch": "@@ -1002,9 +1002,8 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::write`]: crate::ptr::write()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n     #[inline(always)]\n-    pub const unsafe fn write(self, val: T)\n+    pub unsafe fn write(self, val: T)\n     where\n         T: Sized,\n     {"}]}