{"sha": "509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOWNiZjNlOGVjZjFjZjkyYjcwNTFmYTU0ZTkzNjBhZDdiNzQ0OWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-20T13:22:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-20T13:22:36Z"}, "message": "Auto merge of #52498 - oli-obk:const_prop, r=nikomatsakis\n\nConst propagate casts\n\nfixes #49760\n\nSo... This fixes the original issue about the missing warnings.\n\nBut our test suite contains fun things like\n\n```rust\nfn foo() {}\nassert_eq!(foo as i16, foo as usize as i16);\n```\n\nWhich, will result in\n\n> a raw memory access tried to access part of a pointer value as raw bytes\n\non both sides of the assertion. Because well... that's exactly what's going on! We're ripping out 16 bits of a pointer.", "tree": {"sha": "37ee7a6fe652135c829a046b053de90d814cc3e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37ee7a6fe652135c829a046b053de90d814cc3e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f", "html_url": "https://github.com/rust-lang/rust/commit/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bea4d1fc66b0ab1406c4c0e184af761485a3c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bea4d1fc66b0ab1406c4c0e184af761485a3c6a", "html_url": "https://github.com/rust-lang/rust/commit/3bea4d1fc66b0ab1406c4c0e184af761485a3c6a"}, {"sha": "9329957d321a3612fe9c95cf58a67115b0bbda5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9329957d321a3612fe9c95cf58a67115b0bbda5f", "html_url": "https://github.com/rust-lang/rust/commit/9329957d321a3612fe9c95cf58a67115b0bbda5f"}], "stats": {"total": 355, "additions": 207, "deletions": 148}, "files": [{"sha": "7bcf4ef6588d53d9335a767b077016d5b798b817", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 143, "deletions": 3, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f", "patch": "@@ -1,13 +1,153 @@\n-use rustc::ty::Ty;\n-use rustc::ty::layout::LayoutOf;\n+use rustc::ty::{self, Ty};\n+use rustc::ty::layout::{self, LayoutOf};\n use syntax::ast::{FloatTy, IntTy, UintTy};\n \n use rustc_apfloat::ieee::{Single, Double};\n use super::{EvalContext, Machine};\n-use rustc::mir::interpret::{Scalar, EvalResult, Pointer, PointerArithmetic};\n+use rustc::mir::interpret::{Scalar, EvalResult, Pointer, PointerArithmetic, Value, EvalErrorKind};\n+use rustc::mir::CastKind;\n use rustc_apfloat::Float;\n+use interpret::eval_context::ValTy;\n+use interpret::Place;\n \n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n+    crate fn cast(\n+        &mut self,\n+        src: ValTy<'tcx>,\n+        kind: CastKind,\n+        dest_ty: Ty<'tcx>,\n+        dest: Place,\n+    ) -> EvalResult<'tcx> {\n+        use rustc::mir::CastKind::*;\n+        match kind {\n+            Unsize => {\n+                let src_layout = self.layout_of(src.ty)?;\n+                let dst_layout = self.layout_of(dest_ty)?;\n+                self.unsize_into(src.value, src_layout, dest, dst_layout)?;\n+            }\n+\n+            Misc => {\n+                if self.type_is_fat_ptr(src.ty) {\n+                    match (src.value, self.type_is_fat_ptr(dest_ty)) {\n+                        (Value::ByRef { .. }, _) |\n+                        // pointers to extern types\n+                        (Value::Scalar(_),_) |\n+                        // slices and trait objects to other slices/trait objects\n+                        (Value::ScalarPair(..), true) => {\n+                            let valty = ValTy {\n+                                value: src.value,\n+                                ty: dest_ty,\n+                            };\n+                            self.write_value(valty, dest)?;\n+                        }\n+                        // slices and trait objects to thin pointers (dropping the metadata)\n+                        (Value::ScalarPair(data, _), false) => {\n+                            let valty = ValTy {\n+                                value: Value::Scalar(data),\n+                                ty: dest_ty,\n+                            };\n+                            self.write_value(valty, dest)?;\n+                        }\n+                    }\n+                } else {\n+                    let src_layout = self.layout_of(src.ty)?;\n+                    match src_layout.variants {\n+                        layout::Variants::Single { index } => {\n+                            if let Some(def) = src.ty.ty_adt_def() {\n+                                let discr_val = def\n+                                    .discriminant_for_variant(*self.tcx, index)\n+                                    .val;\n+                                let defined = self\n+                                    .layout_of(dest_ty)\n+                                    .unwrap()\n+                                    .size\n+                                    .bits() as u8;\n+                                return self.write_scalar(\n+                                    dest,\n+                                    Scalar::Bits {\n+                                        bits: discr_val,\n+                                        defined,\n+                                    },\n+                                    dest_ty);\n+                            }\n+                        }\n+                        layout::Variants::Tagged { .. } |\n+                        layout::Variants::NicheFilling { .. } => {},\n+                    }\n+\n+                    let src_val = self.value_to_scalar(src)?;\n+                    let dest_val = self.cast_scalar(src_val, src.ty, dest_ty)?;\n+                    let valty = ValTy {\n+                        value: Value::Scalar(dest_val),\n+                        ty: dest_ty,\n+                    };\n+                    self.write_value(valty, dest)?;\n+                }\n+            }\n+\n+            ReifyFnPointer => {\n+                match src.ty.sty {\n+                    ty::TyFnDef(def_id, substs) => {\n+                        if self.tcx.has_attr(def_id, \"rustc_args_required_const\") {\n+                            bug!(\"reifying a fn ptr that requires \\\n+                                    const arguments\");\n+                        }\n+                        let instance: EvalResult<'tcx, _> = ty::Instance::resolve(\n+                            *self.tcx,\n+                            self.param_env,\n+                            def_id,\n+                            substs,\n+                        ).ok_or_else(|| EvalErrorKind::TooGeneric.into());\n+                        let fn_ptr = self.memory.create_fn_alloc(instance?);\n+                        let valty = ValTy {\n+                            value: Value::Scalar(fn_ptr.into()),\n+                            ty: dest_ty,\n+                        };\n+                        self.write_value(valty, dest)?;\n+                    }\n+                    ref other => bug!(\"reify fn pointer on {:?}\", other),\n+                }\n+            }\n+\n+            UnsafeFnPointer => {\n+                match dest_ty.sty {\n+                    ty::TyFnPtr(_) => {\n+                        let mut src = src;\n+                        src.ty = dest_ty;\n+                        self.write_value(src, dest)?;\n+                    }\n+                    ref other => bug!(\"fn to unsafe fn cast on {:?}\", other),\n+                }\n+            }\n+\n+            ClosureFnPointer => {\n+                match src.ty.sty {\n+                    ty::TyClosure(def_id, substs) => {\n+                        let substs = self.tcx.subst_and_normalize_erasing_regions(\n+                            self.substs(),\n+                            ty::ParamEnv::reveal_all(),\n+                            &substs,\n+                        );\n+                        let instance = ty::Instance::resolve_closure(\n+                            *self.tcx,\n+                            def_id,\n+                            substs,\n+                            ty::ClosureKind::FnOnce,\n+                        );\n+                        let fn_ptr = self.memory.create_fn_alloc(instance);\n+                        let valty = ValTy {\n+                            value: Value::Scalar(fn_ptr.into()),\n+                            ty: dest_ty,\n+                        };\n+                        self.write_value(valty, dest)?;\n+                    }\n+                    ref other => bug!(\"closure fn pointer on {:?}\", other),\n+                }\n+            }\n+        }\n+        Ok(())\n+    }\n+\n     pub(super) fn cast_scalar(\n         &self,\n         val: Scalar,"}, {"sha": "fac6e8b69efaba35e83ff9922a710e5f83370d61", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 130, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f", "patch": "@@ -770,135 +770,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n             Cast(kind, ref operand, cast_ty) => {\n                 debug_assert_eq!(self.monomorphize(cast_ty, self.substs()), dest_ty);\n-                use rustc::mir::CastKind::*;\n-                match kind {\n-                    Unsize => {\n-                        let src = self.eval_operand(operand)?;\n-                        let src_layout = self.layout_of(src.ty)?;\n-                        let dst_layout = self.layout_of(dest_ty)?;\n-                        self.unsize_into(src.value, src_layout, dest, dst_layout)?;\n-                    }\n-\n-                    Misc => {\n-                        let src = self.eval_operand(operand)?;\n-                        if self.type_is_fat_ptr(src.ty) {\n-                            match (src.value, self.type_is_fat_ptr(dest_ty)) {\n-                                (Value::ByRef { .. }, _) |\n-                                // pointers to extern types\n-                                (Value::Scalar(_),_) |\n-                                // slices and trait objects to other slices/trait objects\n-                                (Value::ScalarPair(..), true) => {\n-                                    let valty = ValTy {\n-                                        value: src.value,\n-                                        ty: dest_ty,\n-                                    };\n-                                    self.write_value(valty, dest)?;\n-                                }\n-                                // slices and trait objects to thin pointers (dropping the metadata)\n-                                (Value::ScalarPair(data, _), false) => {\n-                                    let valty = ValTy {\n-                                        value: Value::Scalar(data),\n-                                        ty: dest_ty,\n-                                    };\n-                                    self.write_value(valty, dest)?;\n-                                }\n-                            }\n-                        } else {\n-                            let src_layout = self.layout_of(src.ty)?;\n-                            match src_layout.variants {\n-                                layout::Variants::Single { index } => {\n-                                    if let Some(def) = src.ty.ty_adt_def() {\n-                                        let discr_val = def\n-                                            .discriminant_for_variant(*self.tcx, index)\n-                                            .val;\n-                                        let defined = self\n-                                            .layout_of(dest_ty)\n-                                            .unwrap()\n-                                            .size\n-                                            .bits() as u8;\n-                                        return self.write_scalar(\n-                                            dest,\n-                                            Scalar::Bits {\n-                                                bits: discr_val,\n-                                                defined,\n-                                            },\n-                                            dest_ty);\n-                                    }\n-                                }\n-                                layout::Variants::Tagged { .. } |\n-                                layout::Variants::NicheFilling { .. } => {},\n-                            }\n-\n-                            let src_val = self.value_to_scalar(src)?;\n-                            let dest_val = self.cast_scalar(src_val, src.ty, dest_ty)?;\n-                            let valty = ValTy {\n-                                value: Value::Scalar(dest_val),\n-                                ty: dest_ty,\n-                            };\n-                            self.write_value(valty, dest)?;\n-                        }\n-                    }\n-\n-                    ReifyFnPointer => {\n-                        match self.eval_operand(operand)?.ty.sty {\n-                            ty::TyFnDef(def_id, substs) => {\n-                                if self.tcx.has_attr(def_id, \"rustc_args_required_const\") {\n-                                    bug!(\"reifying a fn ptr that requires \\\n-                                          const arguments\");\n-                                }\n-                                let instance: EvalResult<'tcx, _> = ty::Instance::resolve(\n-                                    *self.tcx,\n-                                    self.param_env,\n-                                    def_id,\n-                                    substs,\n-                                ).ok_or_else(|| EvalErrorKind::TooGeneric.into());\n-                                let fn_ptr = self.memory.create_fn_alloc(instance?);\n-                                let valty = ValTy {\n-                                    value: Value::Scalar(fn_ptr.into()),\n-                                    ty: dest_ty,\n-                                };\n-                                self.write_value(valty, dest)?;\n-                            }\n-                            ref other => bug!(\"reify fn pointer on {:?}\", other),\n-                        }\n-                    }\n-\n-                    UnsafeFnPointer => {\n-                        match dest_ty.sty {\n-                            ty::TyFnPtr(_) => {\n-                                let mut src = self.eval_operand(operand)?;\n-                                src.ty = dest_ty;\n-                                self.write_value(src, dest)?;\n-                            }\n-                            ref other => bug!(\"fn to unsafe fn cast on {:?}\", other),\n-                        }\n-                    }\n-\n-                    ClosureFnPointer => {\n-                        match self.eval_operand(operand)?.ty.sty {\n-                            ty::TyClosure(def_id, substs) => {\n-                                let substs = self.tcx.subst_and_normalize_erasing_regions(\n-                                    self.substs(),\n-                                    ty::ParamEnv::reveal_all(),\n-                                    &substs,\n-                                );\n-                                let instance = ty::Instance::resolve_closure(\n-                                    *self.tcx,\n-                                    def_id,\n-                                    substs,\n-                                    ty::ClosureKind::FnOnce,\n-                                );\n-                                let fn_ptr = self.memory.create_fn_alloc(instance);\n-                                let valty = ValTy {\n-                                    value: Value::Scalar(fn_ptr.into()),\n-                                    ty: dest_ty,\n-                                };\n-                                self.write_value(valty, dest)?;\n-                            }\n-                            ref other => bug!(\"closure fn pointer on {:?}\", other),\n-                        }\n-                    }\n-                }\n+                let src = self.eval_operand(operand)?;\n+                self.cast(src, kind, dest_ty, dest)?;\n             }\n \n             Discriminant(ref place) => {\n@@ -1565,7 +1438,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n     }\n \n-    fn unsize_into(\n+    crate fn unsize_into(\n         &mut self,\n         src: Value,\n         src_layout: TyLayout<'tcx>,"}, {"sha": "d15dd14084aad5faf2521d3e91942d012bf6ff8d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n-use rustc::mir::interpret::ConstEvalErr;\n+use rustc::mir::interpret::{ConstEvalErr, EvalErrorKind};\n use rustc::ty::{TyCtxt, self, Instance};\n use rustc::mir::interpret::{Value, Scalar, GlobalId, EvalResult};\n use interpret::EvalContext;\n@@ -145,17 +145,23 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         let r = match f(self) {\n             Ok(val) => Some(val),\n             Err(err) => {\n-                let (frames, span) = self.ecx.generate_stacktrace(None);\n-                let err = ConstEvalErr {\n-                    span,\n-                    error: err,\n-                    stacktrace: frames,\n-                };\n-                err.report_as_lint(\n-                    self.ecx.tcx,\n-                    \"this expression will panic at runtime\",\n-                    lint_root,\n-                );\n+                match err.kind {\n+                    // don't report these, they make no sense in a const prop context\n+                    EvalErrorKind::MachineError(_) => {},\n+                    _ => {\n+                        let (frames, span) = self.ecx.generate_stacktrace(None);\n+                        let err = ConstEvalErr {\n+                            span,\n+                            error: err,\n+                            stacktrace: frames,\n+                        };\n+                        err.report_as_lint(\n+                            self.ecx.tcx,\n+                            \"this expression will panic at runtime\",\n+                            lint_root,\n+                        );\n+                    }\n+                }\n                 None\n             },\n         };\n@@ -257,10 +263,25 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n             },\n             Rvalue::Repeat(..) |\n             Rvalue::Ref(..) |\n-            Rvalue::Cast(..) |\n             Rvalue::Aggregate(..) |\n             Rvalue::NullaryOp(NullOp::Box, _) |\n             Rvalue::Discriminant(..) => None,\n+\n+            Rvalue::Cast(kind, ref operand, _) => {\n+                let (value, ty, span) = self.eval_operand(operand, source_info)?;\n+                self.use_ecx(source_info, |this| {\n+                    let dest_ptr = this.ecx.alloc_ptr(place_ty)?;\n+                    let place_align = this.ecx.layout_of(place_ty)?.align;\n+                    let dest = ::interpret::Place::from_ptr(dest_ptr, place_align);\n+                    this.ecx.cast(ValTy { value, ty }, kind, place_ty, dest)?;\n+                    Ok((\n+                        Value::ByRef(dest_ptr.into(), place_align),\n+                        place_ty,\n+                        span,\n+                    ))\n+                })\n+            }\n+\n             // FIXME(oli-obk): evaluate static/constant slice lengths\n             Rvalue::Len(_) => None,\n             Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n@@ -354,7 +375,6 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                     )\n                 } else {\n                     if overflow {\n-                        use rustc::mir::interpret::EvalErrorKind;\n                         let err = EvalErrorKind::Overflow(op).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;"}, {"sha": "022ed6c28c3bdf8400f205951a08f4f6ec14955a", "filename": "src/test/run-pass/cast-rfc0401.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs?ref=509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f", "patch": "@@ -166,7 +166,12 @@ fn main()\n \n     assert!(foo as usize != bar as usize);\n \n-    assert_eq!(foo as i16, foo as usize as i16);\n+    // Taking a few bits of a function's address is totally pointless and we detect that\n+    // Disabling the lint to ensure that the assertion can still be run\n+    #[allow(const_err)]\n+    {\n+        assert_eq!(foo as i16, foo as usize as i16);\n+    }\n \n     // fptr-ptr-cast\n "}, {"sha": "04e9bfbc03e27bbe6267d0e851674c3dc3643b9d", "filename": "src/test/ui/const-eval/promoted_errors.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs?ref=509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f", "patch": "@@ -24,5 +24,8 @@ fn main() {\n     //~| WARN const_err\n     println!(\"{}\", 1/(false as u32));\n     //~^ WARN const_err\n+    //~| WARN const_err\n     let _x = 1/(false as u32);\n+    //~^ WARN const_err\n+    //~| WARN const_err\n }"}, {"sha": "9afe5f20af39402071ba632d149c00d671821bde", "filename": "src/test/ui/const-eval/promoted_errors.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr?ref=509cbf3e8ecf1cf92b7051fa54e9360ad7b7449f", "patch": "@@ -34,9 +34,27 @@ warning: this expression will panic at runtime\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^ attempt to divide by zero\n \n+warning: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:25:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^\n+\n warning: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:25:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n+warning: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:28:14\n+   |\n+LL |     let _x = 1/(false as u32);\n+   |              ^^^^^^^^^^^^^^^^\n+\n+warning: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:28:14\n+   |\n+LL |     let _x = 1/(false as u32);\n+   |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}]}