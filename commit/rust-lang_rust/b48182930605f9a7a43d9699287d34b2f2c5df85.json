{"sha": "b48182930605f9a7a43d9699287d34b2f2c5df85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ODE4MjkzMDYwNWY5YTdhNDNkOTY5OTI4N2QzNGIyZjJjNWRmODU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-03-22T23:45:54Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-03-25T22:53:02Z"}, "message": "docs: update to avoid mention of const.", "tree": {"sha": "71ec45ed29bd29abed9bf203a47ae831a5b00199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71ec45ed29bd29abed9bf203a47ae831a5b00199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48182930605f9a7a43d9699287d34b2f2c5df85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48182930605f9a7a43d9699287d34b2f2c5df85", "html_url": "https://github.com/rust-lang/rust/commit/b48182930605f9a7a43d9699287d34b2f2c5df85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48182930605f9a7a43d9699287d34b2f2c5df85/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62c1f049f82608446ef80d800d03944e63d2f053", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c1f049f82608446ef80d800d03944e63d2f053", "html_url": "https://github.com/rust-lang/rust/commit/62c1f049f82608446ef80d800d03944e63d2f053"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "60a83662b0e4c901b781edc1ca1f65fdcb30970b", "filename": "doc/rust.md", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b48182930605f9a7a43d9699287d34b2f2c5df85/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/b48182930605f9a7a43d9699287d34b2f2c5df85/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=b48182930605f9a7a43d9699287d34b2f2c5df85", "patch": "@@ -617,8 +617,8 @@ each of which may have some number of [attributes](#attributes) attached to it.\n ## Items\n \n ~~~~~~~~ {.ebnf .gram}\n-item : mod_item | fn_item | type_item | enum_item\n-     | const_item | trait_item | impl_item | foreign_mod_item ;\n+item : mod_item | fn_item | type_item | struct_item | enum_item\n+     | static_item | trait_item | impl_item | foreign_mod_item ;\n ~~~~~~~~\n \n An _item_ is a component of a crate; some module items can be defined in crate\n@@ -627,7 +627,7 @@ crate by a nested set of [modules](#modules). Every crate has a single\n \"outermost\" anonymous module; all further items within the crate have\n [paths](#paths) within the module tree of the crate.\n \n-Items are entirely determined at compile-time, remain constant during\n+Items are entirely determined at compile-time, generally remain fixed during\n execution, and may reside in read-only memory.\n \n There are several kinds of item:\n@@ -637,7 +637,7 @@ There are several kinds of item:\n   * [type definitions](#type-definitions)\n   * [structures](#structures)\n   * [enumerations](#enumerations)\n-  * [constants](#constants)\n+  * [static items](#static-items)\n   * [traits](#traits)\n   * [implementations](#implementations)\n \n@@ -1091,21 +1091,23 @@ a = Cat{ name: ~\"Spotty\", weight: 2.7 };\n In this example, `Cat` is a _struct-like enum variant_,\n whereas `Dog` is simply called an enum variant.\n \n-### Constants\n+### Static items\n \n ~~~~~~~~ {.ebnf .gram}\n-const_item : \"const\" ident ':' type '=' expr ';' ;\n+static_item : \"static\" ident ':' type '=' expr ';' ;\n ~~~~~~~~\n \n-A *constant* is a named value stored in read-only memory in a crate.\n-The value bound to a constant is evaluated at compile time.\n-Constants are declared with the `static` keyword.\n-A constant item must have an expression giving its definition.\n-The definition expression of a constant is limited to expression forms that can be evaluated at compile time.\n+A *static item* is a named _constant value_ stored in the global data section of a crate.\n+Immutable static items are stored in the read-only data section.\n+The constant value bound to a static item is, like all constant values, evaluated at compile time.\n+Static items have the `static` lifetime, which outlives all other lifetimes in a Rust program.\n+Static items are declared with the `static` keyword.\n+A static item must have a _constant expression_ giving its definition.\n \n-Constants must be explicitly typed. The type may be ```bool```, ```char```, a number, or a type derived from those primitive types.\n-The derived types are borrowed pointers, static arrays, tuples, and structs.\n-Borrowed pointers must be have the `'static` lifetime.\n+Static items must be explicitly typed.\n+The type may be ```bool```, ```char```, a number, or a type derived from those primitive types.\n+The derived types are borrowed pointers with the `'static` lifetime,\n+fixed-size arrays, tuples, and structs.\n \n ~~~~\n static bit1: uint = 1 << 0;\n@@ -1456,7 +1458,7 @@ The declared names may denote new slots or new items.\n \n An _item declaration statement_ has a syntactic form identical to an\n [item](#items) declaration within a module. Declaring an item -- a function,\n-enumeration, type, constant, trait, implementation or module -- locally\n+enumeration, structure, type, static, trait, implementation or module -- locally\n within a statement block is simply a way of restricting its scope to a narrow\n region containing all of its uses; it is otherwise identical in meaning to\n declaring the item outside the statement block."}, {"sha": "e8b5ab9dda22f814671d8cff571d2914fea8fec6", "filename": "doc/tutorial-borrowed-ptr.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b48182930605f9a7a43d9699287d34b2f2c5df85/doc%2Ftutorial-borrowed-ptr.md", "raw_url": "https://github.com/rust-lang/rust/raw/b48182930605f9a7a43d9699287d34b2f2c5df85/doc%2Ftutorial-borrowed-ptr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-borrowed-ptr.md?ref=b48182930605f9a7a43d9699287d34b2f2c5df85", "patch": "@@ -468,11 +468,10 @@ overwritten for the duration of the borrow.  In fact, the compiler\n would accept the example we gave earlier. The example is safe because\n the shape pointer has type `&Shape`, which means \"borrowed pointer to\n immutable memory containing a `shape`\". If, however, the type of that\n-pointer were `&const Shape` or `&mut Shape`, then the ref binding\n-would be ill-typed. Just as with unique boxes, the compiler will\n-permit `ref` bindings into data owned by the stack frame even if the\n-data are mutable, but otherwise it requires that the data reside in\n-immutable memory.\n+pointer were `&mut Shape`, then the ref binding would be ill-typed.\n+Just as with unique boxes, the compiler will permit `ref` bindings\n+into data owned by the stack frame even if the data are mutable,\n+but otherwise it requires that the data reside in immutable memory.\n \n # Returning borrowed pointers\n "}, {"sha": "30e230b67b0d377417fc1b34f46b75cc412aa95f", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48182930605f9a7a43d9699287d34b2f2c5df85/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/b48182930605f9a7a43d9699287d34b2f2c5df85/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=b48182930605f9a7a43d9699287d34b2f2c5df85", "patch": "@@ -234,7 +234,7 @@ while count < 10 {\n \n Although Rust can almost always infer the types of local variables, you\n can specify a variable's type by following it with a colon, then the type\n-name. Constants, on the other hand, always require a type annotation.\n+name. Static items, on the other hand, always require a type annotation.\n \n ~~~~\n static monster_factor: float = 57.8;"}]}