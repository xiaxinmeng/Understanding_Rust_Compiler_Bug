{"sha": "5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmM2ZmMTU3ZTNlZmU5ZjRmZTI0NjFiY2ExYTBjYWFhNWQyYzcyZTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-23T09:51:40Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-23T09:51:40Z"}, "message": "Merge #1549\n\n1549: Show type lenses for the resolved let bindings r=matklad a=SomeoneToIgnore\n\nTypes that are fully unresolved are not displayed:\r\n\r\n<img width=\"279\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2690773/61518122-8e4ba980-aa11-11e9-9249-6d9f9b202e6a.png\">\r\n\r\nA few concerns that I have about the current implementation:\r\n\r\n* I've adjusted the `file_structure` API method to return the information about the `let` bindings.\r\nAlthough it works fine, I have a feeling that adding a new API method would be the better way.\r\nBut this requires some prior discussion, so I've decided to go for an easy way with an MVP. \r\nWould be nice to hear your suggestions.\r\n\r\n* There's a hardcoded `{undersolved}` check that I was forced to use, since the method that resolves types returns a `String`. \r\nIs there a better typed API I can use? This will help, for instance, to add an action to the type lenses that will allow us to navigate to the type.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "38108566787198f9a1391cbf016b05016f3fbda0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38108566787198f9a1391cbf016b05016f3fbda0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5", "html_url": "https://github.com/rust-lang/rust/commit/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "08efe6cf92e7058ba38833dbfab8940a57a2cbfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/08efe6cf92e7058ba38833dbfab8940a57a2cbfe", "html_url": "https://github.com/rust-lang/rust/commit/08efe6cf92e7058ba38833dbfab8940a57a2cbfe"}, {"sha": "8f3377d9f93a256f8e68ae183808fd767b529d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3377d9f93a256f8e68ae183808fd767b529d18", "html_url": "https://github.com/rust-lang/rust/commit/8f3377d9f93a256f8e68ae183808fd767b529d18"}], "stats": {"total": 238, "additions": 237, "deletions": 1}, "files": [{"sha": "174662beb57b5fe095ea0c3e609f577b41f38190", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5", "patch": "@@ -0,0 +1,180 @@\n+use crate::{db::RootDatabase, FileId};\n+use hir::{HirDisplay, Ty};\n+use ra_syntax::ast::Pat;\n+use ra_syntax::{\n+    algo::visit::{visitor, Visitor},\n+    ast::{self, PatKind, TypeAscriptionOwner},\n+    AstNode, SmolStr, SourceFile, SyntaxNode, TextRange,\n+};\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub enum InlayKind {\n+    LetBindingType,\n+    ClosureParameterType,\n+}\n+\n+#[derive(Debug)]\n+pub struct InlayHint {\n+    pub range: TextRange,\n+    pub kind: InlayKind,\n+    pub label: SmolStr,\n+}\n+\n+pub(crate) fn inlay_hints(db: &RootDatabase, file_id: FileId, file: &SourceFile) -> Vec<InlayHint> {\n+    file.syntax()\n+        .descendants()\n+        .map(|node| get_inlay_hints(db, file_id, &node).unwrap_or_default())\n+        .flatten()\n+        .collect()\n+}\n+\n+fn get_inlay_hints(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    node: &SyntaxNode,\n+) -> Option<Vec<InlayHint>> {\n+    visitor()\n+        .visit(|let_statement: ast::LetStmt| {\n+            let let_syntax = let_statement.syntax();\n+\n+            if let_statement.ascribed_type().is_some() {\n+                return None;\n+            }\n+\n+            let let_pat = let_statement.pat()?;\n+            let inlay_type_string = get_node_displayable_type(db, file_id, let_syntax, &let_pat)?\n+                .display(db)\n+                .to_string()\n+                .into();\n+\n+            let pat_range = match let_pat.kind() {\n+                PatKind::BindPat(bind_pat) => bind_pat.syntax().text_range(),\n+                PatKind::TuplePat(tuple_pat) => tuple_pat.syntax().text_range(),\n+                _ => return None,\n+            };\n+\n+            Some(vec![InlayHint {\n+                range: pat_range,\n+                kind: InlayKind::LetBindingType,\n+                label: inlay_type_string,\n+            }])\n+        })\n+        .visit(|closure_parameter: ast::LambdaExpr| match closure_parameter.param_list() {\n+            Some(param_list) => Some(\n+                param_list\n+                    .params()\n+                    .filter(|closure_param| closure_param.ascribed_type().is_none())\n+                    .filter_map(|closure_param| {\n+                        let closure_param_syntax = closure_param.syntax();\n+                        let inlay_type_string = get_node_displayable_type(\n+                            db,\n+                            file_id,\n+                            closure_param_syntax,\n+                            &closure_param.pat()?,\n+                        )?\n+                        .display(db)\n+                        .to_string()\n+                        .into();\n+\n+                        Some(InlayHint {\n+                            range: closure_param_syntax.text_range(),\n+                            kind: InlayKind::ClosureParameterType,\n+                            label: inlay_type_string,\n+                        })\n+                    })\n+                    .collect(),\n+            ),\n+            None => None,\n+        })\n+        .accept(&node)?\n+}\n+\n+fn get_node_displayable_type(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    node_syntax: &SyntaxNode,\n+    node_pat: &Pat,\n+) -> Option<Ty> {\n+    let analyzer = hir::SourceAnalyzer::new(db, file_id, node_syntax, None);\n+    analyzer.type_of_pat(db, node_pat).and_then(|resolved_type| {\n+        if let Ty::Apply(_) = resolved_type {\n+            Some(resolved_type)\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::mock_analysis::single_file;\n+    use insta::assert_debug_snapshot_matches;\n+\n+    #[test]\n+    fn test_inlay_hints() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+struct OuterStruct {}\n+\n+fn main() {\n+    struct InnerStruct {}\n+\n+    let test = 54;\n+    let test = InnerStruct {};\n+    let test = OuterStruct {};\n+    let test = vec![222];\n+    let mut test = Vec::new();\n+    test.push(333);\n+    let test = test.into_iter().map(|i| i * i).collect::<Vec<_>>();\n+    let mut test = 33;\n+    let _ = 22;\n+    let test: Vec<_> = (0..3).collect();\n+\n+    let _ = (0..23).map(|i: u32| {\n+        let i_squared = i * i;\n+        i_squared\n+    });\n+\n+    let test: i32 = 33;\n+\n+    let (x, c) = (42, 'a');\n+    let test = (42, 'a');\n+}\n+\"#,\n+        );\n+\n+        assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n+    InlayHint {\n+        range: [71; 75),\n+        kind: LetBindingType,\n+        label: \"i32\",\n+    },\n+    InlayHint {\n+        range: [121; 125),\n+        kind: LetBindingType,\n+        label: \"OuterStruct\",\n+    },\n+    InlayHint {\n+        range: [297; 305),\n+        kind: LetBindingType,\n+        label: \"i32\",\n+    },\n+    InlayHint {\n+        range: [417; 426),\n+        kind: LetBindingType,\n+        label: \"u32\",\n+    },\n+    InlayHint {\n+        range: [496; 502),\n+        kind: LetBindingType,\n+        label: \"(i32, char)\",\n+    },\n+    InlayHint {\n+        range: [524; 528),\n+        kind: LetBindingType,\n+        label: \"(i32, char)\",\n+    },\n+]\"#\n+        );\n+    }\n+}"}, {"sha": "16ffb03ce929b40f7ecc1e97f202bcbdb2f59906", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5", "patch": "@@ -38,6 +38,7 @@ mod join_lines;\n mod typing;\n mod matching_brace;\n mod display;\n+mod inlay_hints;\n \n #[cfg(test)]\n mod marks;\n@@ -64,6 +65,7 @@ pub use crate::{\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n+    inlay_hints::{InlayHint, InlayKind},\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n     references::ReferenceSearchResult,\n@@ -396,6 +398,11 @@ impl Analysis {\n         file_structure(&parse.tree())\n     }\n \n+    /// Returns a list of the places in the file where type hints can be displayed.\n+    pub fn inlay_hints(&self, file_id: FileId) -> Cancelable<Vec<InlayHint>> {\n+        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, &db.parse(file_id).tree()))\n+    }\n+\n     /// Returns the set of folding ranges.\n     pub fn folding_ranges(&self, file_id: FileId) -> Vec<Fold> {\n         let parse = self.db.parse(file_id);"}, {"sha": "8e830c8b8586f9b414142b160e2909f20cca1624", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5", "patch": "@@ -362,6 +362,7 @@ fn on_request(\n         .on::<req::References>(handlers::handle_references)?\n         .on::<req::Formatting>(handlers::handle_formatting)?\n         .on::<req::DocumentHighlightRequest>(handlers::handle_document_highlight)?\n+        .on::<req::InlayHints>(handlers::handle_inlay_hints)?\n         .finish();\n     Ok(())\n }"}, {"sha": "5bf950a53780348292a79837b537465c27e93620", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5", "patch": "@@ -21,7 +21,7 @@ use url_serde::Ser;\n use crate::{\n     cargo_target_spec::{runnable_args, CargoTargetSpec},\n     conv::{to_location, Conv, ConvWith, MapConvWith, TryConvWith, TryConvWithToVec},\n-    req::{self, Decoration},\n+    req::{self, Decoration, InlayHint, InlayHintsParams, InlayKind},\n     world::WorldSnapshot,\n     LspError, Result,\n };\n@@ -874,3 +874,24 @@ fn to_diagnostic_severity(severity: Severity) -> DiagnosticSeverity {\n         WeakWarning => DiagnosticSeverity::Hint,\n     }\n }\n+\n+pub fn handle_inlay_hints(\n+    world: WorldSnapshot,\n+    params: InlayHintsParams,\n+) -> Result<Vec<InlayHint>> {\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let analysis = world.analysis();\n+    let line_index = analysis.file_line_index(file_id);\n+    Ok(analysis\n+        .inlay_hints(file_id)?\n+        .into_iter()\n+        .map(|api_type| InlayHint {\n+            label: api_type.label.to_string(),\n+            range: api_type.range.conv_with(&line_index),\n+            kind: match api_type.kind {\n+                ra_ide_api::InlayKind::LetBindingType => InlayKind::LetBindingType,\n+                ra_ide_api::InlayKind::ClosureParameterType => InlayKind::ClosureParameterType,\n+            },\n+        })\n+        .collect())\n+}"}, {"sha": "916185f99d17d99ef6b18133d0a144ee334b86e1", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=5f3ff157e3efe9f4fe2461bca1a0caaa5d2c72e5", "patch": "@@ -196,3 +196,30 @@ pub struct SourceChange {\n     pub workspace_edit: WorkspaceEdit,\n     pub cursor_position: Option<TextDocumentPositionParams>,\n }\n+\n+pub enum InlayHints {}\n+\n+impl Request for InlayHints {\n+    type Params = InlayHintsParams;\n+    type Result = Vec<InlayHint>;\n+    const METHOD: &'static str = \"rust-analyzer/inlayHints\";\n+}\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct InlayHintsParams {\n+    pub text_document: TextDocumentIdentifier,\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Deserialize, Serialize)]\n+pub enum InlayKind {\n+    LetBindingType,\n+    ClosureParameterType,\n+}\n+\n+#[derive(Debug, Deserialize, Serialize)]\n+pub struct InlayHint {\n+    pub range: Range,\n+    pub kind: InlayKind,\n+    pub label: String,\n+}"}]}