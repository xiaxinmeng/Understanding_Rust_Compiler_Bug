{"sha": "110fdb642a2fe2f680a41b47611145bc6ffdee5e", "node_id": "C_kwDOAAsO6NoAKDExMGZkYjY0MmEyZmUyZjY4MGE0MWI0NzYxMTE0NWJjNmZmZGVlNWU", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2022-07-18T10:31:34Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2022-07-18T11:03:54Z"}, "message": "Add `PhantomData` marker for dropck to `BTreeMap`\n\ncloses #99408", "tree": {"sha": "515bdf0c64a3c56ff43d9765e7d8fc07d031b24f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/515bdf0c64a3c56ff43d9765e7d8fc07d031b24f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/110fdb642a2fe2f680a41b47611145bc6ffdee5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/110fdb642a2fe2f680a41b47611145bc6ffdee5e", "html_url": "https://github.com/rust-lang/rust/commit/110fdb642a2fe2f680a41b47611145bc6ffdee5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/110fdb642a2fe2f680a41b47611145bc6ffdee5e/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "880416180b0a9ee1141c07d4d17667edb77daebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/880416180b0a9ee1141c07d4d17667edb77daebd", "html_url": "https://github.com/rust-lang/rust/commit/880416180b0a9ee1141c07d4d17667edb77daebd"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "cacbd54b6c246433ac8f93e7467a9e960c5b7769", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/110fdb642a2fe2f680a41b47611145bc6ffdee5e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110fdb642a2fe2f680a41b47611145bc6ffdee5e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=110fdb642a2fe2f680a41b47611145bc6ffdee5e", "patch": "@@ -178,6 +178,8 @@ pub struct BTreeMap<\n     length: usize,\n     /// `ManuallyDrop` to control drop order (needs to be dropped after all the nodes).\n     pub(super) alloc: ManuallyDrop<A>,\n+    // For dropck; the `Box` avoids making the `Unpin` impl more strict than before\n+    _marker: PhantomData<crate::boxed::Box<(K, V)>>,\n }\n \n #[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n@@ -187,6 +189,19 @@ unsafe impl<#[may_dangle] K, #[may_dangle] V, A: Allocator + Clone> Drop for BTr\n     }\n }\n \n+// FIXME: This implementation is \"wrong\", but changing it would be a breaking change.\n+// (The bounds of the automatic `UnwindSafe` implementation have been like this since Rust 1.50.)\n+// Maybe we can fix it nonetheless with a crater run, or if the `UnwindSafe`\n+// traits are deprecated, or disarmed (no longer causing hard errors) in the future.\n+#[stable(feature = \"btree_unwindsafe\", since = \"1.64.0\")]\n+impl<K, V, A: Allocator + Clone> core::panic::UnwindSafe for BTreeMap<K, V, A>\n+where\n+    A: core::panic::UnwindSafe,\n+    K: core::panic::RefUnwindSafe,\n+    V: core::panic::RefUnwindSafe,\n+{\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Clone, V: Clone, A: Allocator + Clone> Clone for BTreeMap<K, V, A> {\n     fn clone(&self) -> BTreeMap<K, V, A> {\n@@ -204,6 +219,7 @@ impl<K: Clone, V: Clone, A: Allocator + Clone> Clone for BTreeMap<K, V, A> {\n                         root: Some(Root::new(alloc.clone())),\n                         length: 0,\n                         alloc: ManuallyDrop::new(alloc),\n+                        _marker: PhantomData,\n                     };\n \n                     {\n@@ -567,7 +583,7 @@ impl<K, V> BTreeMap<K, V> {\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     #[must_use]\n     pub const fn new() -> BTreeMap<K, V> {\n-        BTreeMap { root: None, length: 0, alloc: ManuallyDrop::new(Global) }\n+        BTreeMap { root: None, length: 0, alloc: ManuallyDrop::new(Global), _marker: PhantomData }\n     }\n }\n \n@@ -593,6 +609,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n             root: mem::replace(&mut self.root, None),\n             length: mem::replace(&mut self.length, 0),\n             alloc: self.alloc.clone(),\n+            _marker: PhantomData,\n         });\n     }\n \n@@ -615,7 +632,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// ```\n     #[unstable(feature = \"btreemap_alloc\", issue = \"32838\")]\n     pub fn new_in(alloc: A) -> BTreeMap<K, V, A> {\n-        BTreeMap { root: None, length: 0, alloc: ManuallyDrop::new(alloc) }\n+        BTreeMap { root: None, length: 0, alloc: ManuallyDrop::new(alloc), _marker: PhantomData }\n     }\n }\n \n@@ -1320,7 +1337,12 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n         let (new_left_len, right_len) = Root::calc_split_length(total_num, &left_root, &right_root);\n         self.length = new_left_len;\n \n-        BTreeMap { root: Some(right_root), length: right_len, alloc: self.alloc.clone() }\n+        BTreeMap {\n+            root: Some(right_root),\n+            length: right_len,\n+            alloc: self.alloc.clone(),\n+            _marker: PhantomData,\n+        }\n     }\n \n     /// Creates an iterator that visits all elements (key-value pairs) in\n@@ -1445,7 +1467,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n         let mut root = Root::new(alloc.clone());\n         let mut length = 0;\n         root.bulk_push(DedupSortedIter::new(iter.into_iter()), &mut length, alloc.clone());\n-        BTreeMap { root: Some(root), length, alloc: ManuallyDrop::new(alloc) }\n+        BTreeMap { root: Some(root), length, alloc: ManuallyDrop::new(alloc), _marker: PhantomData }\n     }\n }\n "}, {"sha": "c58727df30cae10d0c271932e32d77395fa247fa", "filename": "src/test/ui/btreemap/btreemap_dropck.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/110fdb642a2fe2f680a41b47611145bc6ffdee5e/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap_dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110fdb642a2fe2f680a41b47611145bc6ffdee5e/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap_dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap_dropck.rs?ref=110fdb642a2fe2f680a41b47611145bc6ffdee5e", "patch": "@@ -0,0 +1,16 @@\n+struct PrintOnDrop<'a>(&'a str);\n+\n+impl Drop for PrintOnDrop<'_> {\n+    fn drop(&mut self) {\n+        println!(\"printint: {}\", self.0);\n+    }\n+}\n+\n+use std::collections::BTreeMap;\n+use std::iter::FromIterator;\n+\n+fn main() {\n+    let s = String::from(\"Hello World!\");\n+    let _map = BTreeMap::from_iter([((), PrintOnDrop(&s))]);\n+    drop(s); //~ ERROR cannot move out of `s` because it is borrowed\n+}"}, {"sha": "e953e7ae82bb8443f17b230b9d465d2d5315a633", "filename": "src/test/ui/btreemap/btreemap_dropck.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/110fdb642a2fe2f680a41b47611145bc6ffdee5e/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap_dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/110fdb642a2fe2f680a41b47611145bc6ffdee5e/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap_dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap_dropck.stderr?ref=110fdb642a2fe2f680a41b47611145bc6ffdee5e", "patch": "@@ -0,0 +1,13 @@\n+error[E0505]: cannot move out of `s` because it is borrowed\n+  --> $DIR/btreemap_dropck.rs:15:10\n+   |\n+LL |     let _map = BTreeMap::from_iter([((), PrintOnDrop(&s))]);\n+   |                                                      -- borrow of `s` occurs here\n+LL |     drop(s);\n+   |          ^ move out of `s` occurs here\n+LL | }\n+   | - borrow might be used here, when `_map` is dropped and runs the `Drop` code for type `BTreeMap`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "7287639c61dde128fc2f4d663859238c76af45c0", "filename": "src/test/ui/issues/issue-72554.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/110fdb642a2fe2f680a41b47611145bc6ffdee5e/src%2Ftest%2Fui%2Fissues%2Fissue-72554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110fdb642a2fe2f680a41b47611145bc6ffdee5e/src%2Ftest%2Fui%2Fissues%2Fissue-72554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72554.rs?ref=110fdb642a2fe2f680a41b47611145bc6ffdee5e", "patch": "@@ -1,10 +1,13 @@\n use std::collections::BTreeSet;\n \n #[derive(Hash)]\n-pub enum ElemDerived { //~ ERROR recursive type `ElemDerived` has infinite size\n+pub enum ElemDerived {\n+    //~^ ERROR recursive type `ElemDerived` has infinite size\n+    //~| ERROR cycle detected when computing drop-check constraints for `ElemDerived`\n     A(ElemDerived)\n }\n \n+\n pub enum Elem {\n     Derived(ElemDerived)\n }"}, {"sha": "3e5adcae133ca7a7c0e6bd613b6355028ab6cea7", "filename": "src/test/ui/issues/issue-72554.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/110fdb642a2fe2f680a41b47611145bc6ffdee5e/src%2Ftest%2Fui%2Fissues%2Fissue-72554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/110fdb642a2fe2f680a41b47611145bc6ffdee5e/src%2Ftest%2Fui%2Fissues%2Fissue-72554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72554.stderr?ref=110fdb642a2fe2f680a41b47611145bc6ffdee5e", "patch": "@@ -3,6 +3,7 @@ error[E0072]: recursive type `ElemDerived` has infinite size\n    |\n LL | pub enum ElemDerived {\n    | ^^^^^^^^^^^^^^^^^^^^ recursive type has infinite size\n+...\n LL |     A(ElemDerived)\n    |       ----------- recursive without indirection\n    |\n@@ -11,6 +12,20 @@ help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `ElemDerived\n LL |     A(Box<ElemDerived>)\n    |       ++++           +\n \n-error: aborting due to previous error\n+error[E0391]: cycle detected when computing drop-check constraints for `ElemDerived`\n+  --> $DIR/issue-72554.rs:4:1\n+   |\n+LL | pub enum ElemDerived {\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: ...which immediately requires computing drop-check constraints for `ElemDerived` again\n+note: cycle used when computing drop-check constraints for `Elem`\n+  --> $DIR/issue-72554.rs:11:1\n+   |\n+LL | pub enum Elem {\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0072`.\n+Some errors have detailed explanations: E0072, E0391.\n+For more information about an error, try `rustc --explain E0072`."}]}