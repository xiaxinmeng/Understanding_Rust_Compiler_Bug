{"sha": "b8bc00772901fe19c381a636c3c1680d0363d62a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YmMwMDc3MjkwMWZlMTljMzgxYTYzNmMzYzE2ODBkMDM2M2Q2MmE=", "commit": {"author": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2019-06-05T17:53:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T11:17:01Z"}, "message": "Separate librustc_metadata module", "tree": {"sha": "b90aad138f5d2fd3d63ec9deeb609ec9b077614b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b90aad138f5d2fd3d63ec9deeb609ec9b077614b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8bc00772901fe19c381a636c3c1680d0363d62a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bc00772901fe19c381a636c3c1680d0363d62a", "html_url": "https://github.com/rust-lang/rust/commit/b8bc00772901fe19c381a636c3c1680d0363d62a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8bc00772901fe19c381a636c3c1680d0363d62a/comments", "author": null, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9266794dad230556cd1969f00dcd9e33d92f9d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9266794dad230556cd1969f00dcd9e33d92f9d0", "html_url": "https://github.com/rust-lang/rust/commit/b9266794dad230556cd1969f00dcd9e33d92f9d0"}], "stats": {"total": 97, "additions": 48, "deletions": 49}, "files": [{"sha": "76a9a3405bd813271adbdce8e19506c5724d9351", "filename": "src/librustc_metadata/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b8bc00772901fe19c381a636c3c1680d0363d62a/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bc00772901fe19c381a636c3c1680d0363d62a/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib.rs?ref=b8bc00772901fe19c381a636c3c1680d0363d62a", "patch": "@@ -74,55 +74,7 @@ impl DynamicLibrary {\n }\n \n #[cfg(test)]\n-mod tests {\n-    use super::*;\n-    use std::mem;\n-\n-    #[test]\n-    fn test_loading_atoi() {\n-        if cfg!(windows) {\n-            return\n-        }\n-\n-        // The C library does not need to be loaded since it is already linked in\n-        let lib = match DynamicLibrary::open(None) {\n-            Err(error) => panic!(\"Could not load self as module: {}\", error),\n-            Ok(lib) => lib\n-        };\n-\n-        let atoi: extern fn(*const libc::c_char) -> libc::c_int = unsafe {\n-            match lib.symbol(\"atoi\") {\n-                Err(error) => panic!(\"Could not load function atoi: {}\", error),\n-                Ok(atoi) => mem::transmute::<*mut u8, _>(atoi)\n-            }\n-        };\n-\n-        let argument = CString::new(\"1383428980\").unwrap();\n-        let expected_result = 0x52757374;\n-        let result = atoi(argument.as_ptr());\n-        if result != expected_result {\n-            panic!(\"atoi({:?}) != {} but equaled {} instead\", argument,\n-                   expected_result, result)\n-        }\n-    }\n-\n-    #[test]\n-    fn test_errors_do_not_crash() {\n-        use std::path::Path;\n-\n-        if !cfg!(unix) {\n-            return\n-        }\n-\n-        // Open /dev/null as a library to get an error, and make sure\n-        // that only causes an error, and not a crash.\n-        let path = Path::new(\"/dev/null\");\n-        match DynamicLibrary::open(Some(&path)) {\n-            Err(_) => {}\n-            Ok(_) => panic!(\"Successfully opened the empty library.\")\n-        }\n-    }\n-}\n+mod tests;\n \n #[cfg(unix)]\n mod dl {"}, {"sha": "b2302f2f1b5b725dd99bf0332fa1c36bcf324d9d", "filename": "src/librustc_metadata/dynamic_lib/tests.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b8bc00772901fe19c381a636c3c1680d0363d62a/src%2Flibrustc_metadata%2Fdynamic_lib%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bc00772901fe19c381a636c3c1680d0363d62a/src%2Flibrustc_metadata%2Fdynamic_lib%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib%2Ftests.rs?ref=b8bc00772901fe19c381a636c3c1680d0363d62a", "patch": "@@ -0,0 +1,47 @@\n+use super::*;\n+use std::mem;\n+\n+#[test]\n+fn test_loading_atoi() {\n+    if cfg!(windows) {\n+        return\n+    }\n+\n+    // The C library does not need to be loaded since it is already linked in\n+    let lib = match DynamicLibrary::open(None) {\n+        Err(error) => panic!(\"Could not load self as module: {}\", error),\n+        Ok(lib) => lib\n+    };\n+\n+    let atoi: extern fn(*const libc::c_char) -> libc::c_int = unsafe {\n+        match lib.symbol(\"atoi\") {\n+            Err(error) => panic!(\"Could not load function atoi: {}\", error),\n+            Ok(atoi) => mem::transmute::<*mut u8, _>(atoi)\n+        }\n+    };\n+\n+    let argument = CString::new(\"1383428980\").unwrap();\n+    let expected_result = 0x52757374;\n+    let result = atoi(argument.as_ptr());\n+    if result != expected_result {\n+        panic!(\"atoi({:?}) != {} but equaled {} instead\", argument,\n+               expected_result, result)\n+    }\n+}\n+\n+#[test]\n+fn test_errors_do_not_crash() {\n+    use std::path::Path;\n+\n+    if !cfg!(unix) {\n+        return\n+    }\n+\n+    // Open /dev/null as a library to get an error, and make sure\n+    // that only causes an error, and not a crash.\n+    let path = Path::new(\"/dev/null\");\n+    match DynamicLibrary::open(Some(&path)) {\n+        Err(_) => {}\n+        Ok(_) => panic!(\"Successfully opened the empty library.\")\n+    }\n+}"}]}