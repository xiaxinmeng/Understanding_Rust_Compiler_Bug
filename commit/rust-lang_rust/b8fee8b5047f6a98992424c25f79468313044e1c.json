{"sha": "b8fee8b5047f6a98992424c25f79468313044e1c", "node_id": "C_kwDOAAsO6NoAKGI4ZmVlOGI1MDQ3ZjZhOTg5OTI0MjRjMjVmNzk0NjgzMTMwNDRlMWM", "commit": {"author": {"name": "timvisee", "email": "tim@visee.me", "date": "2023-04-17T18:43:16Z"}, "committer": {"name": "timvisee", "email": "tim@visee.me", "date": "2023-04-17T19:19:44Z"}, "message": "Add run-rustfix marker and test file", "tree": {"sha": "ff1df8569aa3e9e1c65b300146ebf1439e40e0db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff1df8569aa3e9e1c65b300146ebf1439e40e0db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8fee8b5047f6a98992424c25f79468313044e1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEenLwpVXnt3qRAcU+uNtyC8OD4XIFAmQ9m9EACgkQuNtyC8OD\n4XL6GhAA34rR4L8+rk0NVJsEai2Gtyv/gBzwzsckbcIiYNZ5PP9rParXBnQ8MOg1\npET+USmwZy96Bz1Pg10RkpzJgq4XER3sjxPDJJO9sGDUXXJiaV7yjMSX8KjQ6hTP\noiWHU9uknTrrX6UVd+bjpY3nnnr0fiB2Y4YjeYCq5dUmW9o13iwA0FWfqaRROJY2\nbExnMr5FgIP0tZ0KvFd3MiM0Wqi41FGIDSbYc7sCLdCJteG7yK51/9pntt/Ypida\nkgNAZSmp8xhJQVtT07kRjAqqLOaoWNshclJ2CSGt58iVA/8EncxHUZxAr+gMA941\nBgqNQiFGG2ehvGltAGZoAZA5xCxKo2f4YICLeaMF4olUV+6nMGILLe6OatHbUmnG\nlZem60mIgMbeyDyB+tBEsmASPr2vOIAxJHopQIWM6SfC7Nj73zUR3AAR/MJ71SUP\nzIyjNUGnHFvFRrGeWG+5YGHs8HdwU0F39pKD9/C4LG/vOjBmPguN+b6qN6frePk9\nh+d5KSMbeqzBOBGxho5+O1pyFGI0deZlm04FwE6lK1Ep5mABzr2K3vrB/WaWpWX1\nQlfjKuC1UribtaWSfUe7gJaSPdrxfzLyCqXACw0PWP4HPYae/Ai3MZ9HUrPj/YC9\nEFwpo3H0xa1b8s/fhtqA9dKMdEvbIdGq/osue/g+hEmmnuaHlWo=\n=nAb5\n-----END PGP SIGNATURE-----", "payload": "tree ff1df8569aa3e9e1c65b300146ebf1439e40e0db\nparent 503fd56a423c8da7958aa3fc611b623270d02fde\nauthor timvisee <tim@visee.me> 1681756996 +0200\ncommitter timvisee <tim@visee.me> 1681759184 +0200\n\nAdd run-rustfix marker and test file\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8fee8b5047f6a98992424c25f79468313044e1c", "html_url": "https://github.com/rust-lang/rust/commit/b8fee8b5047f6a98992424c25f79468313044e1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8fee8b5047f6a98992424c25f79468313044e1c/comments", "author": {"login": "timvisee", "id": 856222, "node_id": "MDQ6VXNlcjg1NjIyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/856222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvisee", "html_url": "https://github.com/timvisee", "followers_url": "https://api.github.com/users/timvisee/followers", "following_url": "https://api.github.com/users/timvisee/following{/other_user}", "gists_url": "https://api.github.com/users/timvisee/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvisee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvisee/subscriptions", "organizations_url": "https://api.github.com/users/timvisee/orgs", "repos_url": "https://api.github.com/users/timvisee/repos", "events_url": "https://api.github.com/users/timvisee/events{/privacy}", "received_events_url": "https://api.github.com/users/timvisee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvisee", "id": 856222, "node_id": "MDQ6VXNlcjg1NjIyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/856222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvisee", "html_url": "https://github.com/timvisee", "followers_url": "https://api.github.com/users/timvisee/followers", "following_url": "https://api.github.com/users/timvisee/following{/other_user}", "gists_url": "https://api.github.com/users/timvisee/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvisee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvisee/subscriptions", "organizations_url": "https://api.github.com/users/timvisee/orgs", "repos_url": "https://api.github.com/users/timvisee/repos", "events_url": "https://api.github.com/users/timvisee/events{/privacy}", "received_events_url": "https://api.github.com/users/timvisee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "503fd56a423c8da7958aa3fc611b623270d02fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/503fd56a423c8da7958aa3fc611b623270d02fde", "html_url": "https://github.com/rust-lang/rust/commit/503fd56a423c8da7958aa3fc611b623270d02fde"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "d87dbe0a0a43c91bb70aba9faba573dfaa92aed3", "filename": "clippy_lints/src/manual_slice_size_calculation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8fee8b5047f6a98992424c25f79468313044e1c/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fee8b5047f6a98992424c25f79468313044e1c/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs?ref=b8fee8b5047f6a98992424c25f79468313044e1c", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_context;\n use clippy_utils::{expr_or_init, in_constant};"}, {"sha": "2b18dd58c6346e075cbd9ca61d6ae0df24e66725", "filename": "tests/ui/manual_slice_size_calculation.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b8fee8b5047f6a98992424c25f79468313044e1c/tests%2Fui%2Fmanual_slice_size_calculation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b8fee8b5047f6a98992424c25f79468313044e1c/tests%2Fui%2Fmanual_slice_size_calculation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.fixed?ref=b8fee8b5047f6a98992424c25f79468313044e1c", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::manual_slice_size_calculation)]\n+\n+use core::mem::{align_of, size_of};\n+\n+fn main() {\n+    let v_i32 = Vec::<i32>::new();\n+    let s_i32 = v_i32.as_slice();\n+\n+    // True positives:\n+    let _ = std::mem::size_of_val(s_i32); // WARNING\n+    let _ = std::mem::size_of_val(s_i32); // WARNING\n+    let _ = std::mem::size_of_val(s_i32) * 5; // WARNING\n+\n+    let len = s_i32.len();\n+    let size = size_of::<i32>();\n+    let _ = std::mem::size_of_val(s_i32); // WARNING\n+    let _ = std::mem::size_of_val(s_i32); // WARNING\n+    let _ = std::mem::size_of_val(s_i32); // WARNING\n+\n+    // True negatives:\n+    let _ = size_of::<i32>() + s_i32.len(); // Ok, not a multiplication\n+    let _ = size_of::<i32>() * s_i32.partition_point(|_| true); // Ok, not len()\n+    let _ = size_of::<i32>() * v_i32.len(); // Ok, not a slice\n+    let _ = align_of::<i32>() * s_i32.len(); // Ok, not size_of()\n+    let _ = size_of::<u32>() * s_i32.len(); // Ok, different types\n+\n+    // False negatives:\n+    let _ = 5 * size_of::<i32>() * s_i32.len(); // Ok (MISSED OPPORTUNITY)\n+    let _ = size_of::<i32>() * 5 * s_i32.len(); // Ok (MISSED OPPORTUNITY)\n+}\n+\n+const fn _const(s_i32: &[i32]) {\n+    // True negative:\n+    let _ = s_i32.len() * size_of::<i32>(); // Ok, can't use size_of_val in const\n+}"}, {"sha": "04adab76df25c95a609071e4234433b914b8b926", "filename": "tests/ui/manual_slice_size_calculation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8fee8b5047f6a98992424c25f79468313044e1c/tests%2Fui%2Fmanual_slice_size_calculation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fee8b5047f6a98992424c25f79468313044e1c/tests%2Fui%2Fmanual_slice_size_calculation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.rs?ref=b8fee8b5047f6a98992424c25f79468313044e1c", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![allow(unused)]\n #![warn(clippy::manual_slice_size_calculation)]\n "}, {"sha": "a6217652b8830719d1c6db8d47e98b57c6ccc301", "filename": "tests/ui/manual_slice_size_calculation.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8fee8b5047f6a98992424c25f79468313044e1c/tests%2Fui%2Fmanual_slice_size_calculation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8fee8b5047f6a98992424c25f79468313044e1c/tests%2Fui%2Fmanual_slice_size_calculation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.stderr?ref=b8fee8b5047f6a98992424c25f79468313044e1c", "patch": "@@ -1,37 +1,37 @@\n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:11:13\n+  --> $DIR/manual_slice_size_calculation.rs:12:13\n    |\n LL |     let _ = s_i32.len() * size_of::<i32>(); // WARNING\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n    |\n    = note: `-D clippy::manual-slice-size-calculation` implied by `-D warnings`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:12:13\n+  --> $DIR/manual_slice_size_calculation.rs:13:13\n    |\n LL |     let _ = size_of::<i32>() * s_i32.len(); // WARNING\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:13:13\n+  --> $DIR/manual_slice_size_calculation.rs:14:13\n    |\n LL |     let _ = size_of::<i32>() * s_i32.len() * 5; // WARNING\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:17:13\n+  --> $DIR/manual_slice_size_calculation.rs:18:13\n    |\n LL |     let _ = len * size_of::<i32>(); // WARNING\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:18:13\n+  --> $DIR/manual_slice_size_calculation.rs:19:13\n    |\n LL |     let _ = s_i32.len() * size; // WARNING\n    |             ^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:19:13\n+  --> $DIR/manual_slice_size_calculation.rs:20:13\n    |\n LL |     let _ = len * size; // WARNING\n    |             ^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`"}]}