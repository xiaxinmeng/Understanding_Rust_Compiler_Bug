{"sha": "8326f3f3177bc1c8bc5e9caab8e26d7294a30d34", "node_id": "C_kwDOAAsO6NoAKDgzMjZmM2YzMTc3YmMxYzhiYzVlOWNhYWI4ZTI2ZDcyOTRhMzBkMzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-15T01:25:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-15T01:25:17Z"}, "message": "Rollup merge of #92743 - bjorn3:less_symbol_intern, r=camelid\n\nUse pre-interned symbols in a couple of places\n\nRe-open of https://github.com/rust-lang/rust/pull/92733 as bors glitched.", "tree": {"sha": "e7342e1b8703685e3f154ce404f042e7738e9ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7342e1b8703685e3f154ce404f042e7738e9ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh4iJ9CRBK7hj4Ov3rIwAABUsIAA91cDG6oqMfZb13lzLn2EwW\nqEZT4RoTKkvo57KhjLassHK+cp3OrpREnxL28koV0NYn8YGCgyCbFGVv8Jyj1s98\nWs8KjnQywhDmq8YSXQSsjrPdZBZptzEVNDwYTEm3+PqVk4uZA4uMQwDO2RNGi8xD\nP7wyh7F3zqBBCZgGbN5mfTAb6x320f9WVhcQW7O8fTZiIkFsJcYM0oaL1QGuSG37\nf5JJpnWwowLthWUxzN4AerNvsYVTisDYN8oRoNVPCbwd67sxCwl6/bRbFZANeQdF\nsKBtL0dkamQsJV7WZlaMz9pkCfzpbVYNi9LiB3GisJunDtSK+7M+1WIRqnBRBak=\n=+3Yc\n-----END PGP SIGNATURE-----\n", "payload": "tree e7342e1b8703685e3f154ce404f042e7738e9ef4\nparent d7e512c5c7b433bb902fe843f62046de6a18bbe1\nparent ec9c949946ef805ec5d70b87a15504c62361153d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642209917 +0100\ncommitter GitHub <noreply@github.com> 1642209917 +0100\n\nRollup merge of #92743 - bjorn3:less_symbol_intern, r=camelid\n\nUse pre-interned symbols in a couple of places\n\nRe-open of https://github.com/rust-lang/rust/pull/92733 as bors glitched.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34", "html_url": "https://github.com/rust-lang/rust/commit/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7e512c5c7b433bb902fe843f62046de6a18bbe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e512c5c7b433bb902fe843f62046de6a18bbe1", "html_url": "https://github.com/rust-lang/rust/commit/d7e512c5c7b433bb902fe843f62046de6a18bbe1"}, {"sha": "ec9c949946ef805ec5d70b87a15504c62361153d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec9c949946ef805ec5d70b87a15504c62361153d", "html_url": "https://github.com/rust-lang/rust/commit/ec9c949946ef805ec5d70b87a15504c62361153d"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "885537a212fe10197adc6f4f14c04815f38e9220", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=8326f3f3177bc1c8bc5e9caab8e26d7294a30d34", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def::Res;\n use rustc_hir::definitions::DefPathData;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::DUMMY_SP;\n \n impl<'hir> LoweringContext<'_, 'hir> {\n@@ -1204,11 +1204,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n \n         let fields = self.arena.alloc_from_iter(\n-            e1.iter().map(|e| (\"start\", e)).chain(e2.iter().map(|e| (\"end\", e))).map(|(s, e)| {\n-                let expr = self.lower_expr(&e);\n-                let ident = Ident::new(Symbol::intern(s), self.lower_span(e.span));\n-                self.expr_field(ident, expr, e.span)\n-            }),\n+            e1.iter().map(|e| (sym::start, e)).chain(e2.iter().map(|e| (sym::end, e))).map(\n+                |(s, e)| {\n+                    let expr = self.lower_expr(&e);\n+                    let ident = Ident::new(s, self.lower_span(e.span));\n+                    self.expr_field(ident, expr, e.span)\n+                },\n+            ),\n         );\n \n         hir::ExprKind::Struct("}, {"sha": "c1cca834f2b7bdf1b3b9122aab18fcd03a4b29b5", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=8326f3f3177bc1c8bc5e9caab8e26d7294a30d34", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::print::Print;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, Const, DefIdTree, InferConst, Ty, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::symbol::kw;\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n use std::borrow::Cow;\n \n struct FindHirNodeVisitor<'a, 'tcx> {\n@@ -1003,9 +1003,9 @@ impl<'tcx> TypeFolder<'tcx> for ResolvedTypeParamEraser<'tcx> {\n             | ty::Opaque(..)\n             | ty::Projection(_)\n             | ty::Never => t.super_fold_with(self),\n-            ty::Array(ty, c) => self\n-                .tcx()\n-                .mk_ty(ty::Array(self.fold_ty(ty), self.replace_infers(c, 0, Symbol::intern(\"N\")))),\n+            ty::Array(ty, c) => {\n+                self.tcx().mk_ty(ty::Array(self.fold_ty(ty), self.replace_infers(c, 0, sym::N)))\n+            }\n             // We don't want to hide type params that haven't been resolved yet.\n             // This would be the type that will be written out with the type param\n             // name in the output."}, {"sha": "f99d5cfad0ab81a01f4ba65216b3d4100ca1e1c8", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8326f3f3177bc1c8bc5e9caab8e26d7294a30d34", "patch": "@@ -208,6 +208,7 @@ symbols! {\n         LinkedList,\n         LintPass,\n         Mutex,\n+        N,\n         None,\n         Ok,\n         Option,\n@@ -327,6 +328,7 @@ symbols! {\n         array,\n         arrays,\n         as_ptr,\n+        as_ref,\n         as_str,\n         asm,\n         asm_const,\n@@ -593,6 +595,7 @@ symbols! {\n         enable,\n         enclosing_scope,\n         encode,\n+        end,\n         env,\n         eq,\n         ermsb_target_feature,"}, {"sha": "de83e45329b396f4d9ae74da3bfd4ef23bc3eee4", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8326f3f3177bc1c8bc5e9caab8e26d7294a30d34/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8326f3f3177bc1c8bc5e9caab8e26d7294a30d34", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{source_map, FileName, MultiSpan, Span, Symbol};\n+use rustc_span::{source_map, FileName, MultiSpan, Span};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n     FulfillmentError, Obligation, ObligationCause, ObligationCauseCode,\n@@ -1524,8 +1524,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // Explicitly ignore the `Pin::as_ref()` method as `Pin` does not\n                             // implement the `AsRef` trait.\n                             let skip = skippable.contains(&did)\n-                                || ((\"Pin::new\" == *pre)\n-                                    && (Symbol::intern(\"as_ref\") == item_name.name));\n+                                || ((\"Pin::new\" == *pre) && (sym::as_ref == item_name.name));\n                             // Make sure the method is defined for the *actual* receiver: we don't\n                             // want to treat `Box<Self>` as a receiver if it only works because of\n                             // an autoderef to `&self`"}]}