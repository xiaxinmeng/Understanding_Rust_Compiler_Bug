{"sha": "89676d6a5960aa51ee1e6975c423e979819a407c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5Njc2ZDZhNTk2MGFhNTFlZTFlNjk3NWM0MjNlOTc5ODE5YTQwN2M=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-04-07T10:51:34Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-04-07T10:55:58Z"}, "message": "libcore: fix overflow/underflow in range_step", "tree": {"sha": "3472109c0ba4aa465416f9dd50caa52366671d7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3472109c0ba4aa465416f9dd50caa52366671d7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89676d6a5960aa51ee1e6975c423e979819a407c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89676d6a5960aa51ee1e6975c423e979819a407c", "html_url": "https://github.com/rust-lang/rust/commit/89676d6a5960aa51ee1e6975c423e979819a407c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89676d6a5960aa51ee1e6975c423e979819a407c/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44d4d6de762f3f9aae1fedcf454c66b79b3ad58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/44d4d6de762f3f9aae1fedcf454c66b79b3ad58d", "html_url": "https://github.com/rust-lang/rust/commit/44d4d6de762f3f9aae1fedcf454c66b79b3ad58d"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "9f3fdb01f48db08a418f3a6267a4799052eac6ac", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/89676d6a5960aa51ee1e6975c423e979819a407c/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89676d6a5960aa51ee1e6975c423e979819a407c/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=89676d6a5960aa51ee1e6975c423e979819a407c", "patch": "@@ -107,11 +107,15 @@ pub fn range_step(start: T, stop: T, step: T, it: &fn(T) -> bool) {\n     } else if step > 0 { // ascending\n         while i < stop {\n             if !it(i) { break }\n+            // avoiding overflow. break if i + step > max_value\n+            if i > max_value - step { break; }\n             i += step;\n         }\n     } else { // descending\n         while i > stop {\n             if !it(i) { break }\n+            // avoiding underflow. break if i + step < min_value\n+            if i < min_value - step { break; }\n             i += step;\n         }\n     }\n@@ -421,10 +425,26 @@ pub fn test_ranges() {\n     for range_step(36,30,-2) |i| {\n         l.push(i);\n     }\n-    assert!(l == ~[0,1,2,\n-                        13,12,11,\n-                        20,22,24,\n-                        36,34,32]);\n+    for range_step(max_value - 2, max_value, 2) |i| {\n+        l.push(i);\n+    }\n+    for range_step(max_value - 3, max_value, 2) |i| {\n+        l.push(i);\n+    }\n+    for range_step(min_value + 2, min_value, -2) |i| {\n+        l.push(i);\n+    }\n+    for range_step(min_value + 3, min_value, -2) |i| {\n+        l.push(i);\n+    }\n+    assert_eq!(l, ~[0,1,2,\n+                    13,12,11,\n+                    20,22,24,\n+                    36,34,32,\n+                    max_value-2,\n+                    max_value-3,max_value-1,\n+                    min_value+2,\n+                    min_value+3,min_value+1]);\n \n     // None of the `fail`s should execute.\n     for range(10,0) |_i| {"}, {"sha": "7901a6f97b155e583305bfc9988f24beb10e058d", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/89676d6a5960aa51ee1e6975c423e979819a407c/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89676d6a5960aa51ee1e6975c423e979819a407c/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=89676d6a5960aa51ee1e6975c423e979819a407c", "patch": "@@ -78,12 +78,15 @@ pub fn range_step(start: T,\n     if step >= 0 {\n         while i < stop {\n             if !it(i) { break }\n+            // avoiding overflow. break if i + step > max_value\n+            if i > max_value - (step as T) { break; }\n             i += step as T;\n         }\n-    }\n-    else {\n+    } else {\n         while i > stop {\n             if !it(i) { break }\n+            // avoiding underflow. break if i + step < min_value\n+            if i < min_value + ((-step) as T) { break; }\n             i -= -step as T;\n         }\n     }\n@@ -371,11 +374,27 @@ pub fn test_ranges() {\n     for range_step(36,30,-2) |i| {\n         l.push(i);\n     }\n+    for range_step(max_value - 2, max_value, 2) |i| {\n+        l.push(i);\n+    }\n+    for range_step(max_value - 3, max_value, 2) |i| {\n+        l.push(i);\n+    }\n+    for range_step(min_value + 2, min_value, -2) |i| {\n+        l.push(i);\n+    }\n+    for range_step(min_value + 3, min_value, -2) |i| {\n+        l.push(i);\n+    }\n \n-    assert!(l == ~[0,1,2,\n-                        13,12,11,\n-                        20,22,24,\n-                        36,34,32]);\n+    assert_eq!(l, ~[0,1,2,\n+                    13,12,11,\n+                    20,22,24,\n+                    36,34,32,\n+                    max_value-2,\n+                    max_value-3,max_value-1,\n+                    min_value+2,\n+                    min_value+3,min_value+1]);\n \n     // None of the `fail`s should execute.\n     for range(0,0) |_i| {"}]}