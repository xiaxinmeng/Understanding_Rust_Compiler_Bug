{"sha": "e1f031e5d465bde09ca9bc210883706abdd5da67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZjAzMWU1ZDQ2NWJkZTA5Y2E5YmMyMTA4ODM3MDZhYmRkNWRhNjc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-19T20:17:41Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-19T20:17:41Z"}, "message": "Rollup merge of #50819 - cjkenn:cjkenn/div-by-zero, r=kennytm\n\nFix potential divide by zero\n\nThis should fix #50761\n\nI had trouble reproducing with the provided code, but looking at the stack trace would indicate that this code is the likely cause. I made a number of assumptions here, because I don't have enough context on how the register size is set:\n\n1. I assumed `rest.unit.size.bytes()` can be 0, and it's ok if it's set to 0 before this function is called\n2. I assumed that if `rest.unit.size.bytes()` is 0, that we want `rest_count` to also be 0.", "tree": {"sha": "6333d66dea8f49259d0f7519fe726e81150e8222", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6333d66dea8f49259d0f7519fe726e81150e8222"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1f031e5d465bde09ca9bc210883706abdd5da67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlsAhmUACgkQ/vbIBR0O\nATyfCA//Xnhu/o/cJ0eQ9kwHamNXCAbQ0LOnLA1xwzzL/WgUJzhnVEgsuhlIG+98\ndrHAsZB/Dz80osyfsTFOtigQdP0j5eAL3+t6kA9inean36NWXUl9EVnLrznFAB3z\nuPLC9nNJw2afKA/v3AX7uNf7i31AbETi5WrUUlRgm1UISLfMeWohBs6E2V6ES/ft\nsKfdcQXcyc7pVYy3jN9rVXGXZU+tWBdKjZwwvRhQWbRdI+DHm8VPP8TIZ3y/cLpQ\nzbLGissZLZPOWwToEYSOUGneWGq9bxBIB7luV5Z+CQ7G6nIPstezC+djZ41dJc1T\nnkm9N6zQsVk6XILa6NRamYEtYwJw5qDcCaFVAgHKNRMC0VXTW+FgRfCIW9FAihSj\npX9l+o4XtmPnLk0a8GZkTlQpv8B3PE4+zgBwgPbXPfFlcw2i0vtC+0oXwDQSMaNX\nvQ9zqQpn5RZyU7EaeZEB0QHBZi5QAV/1AZklT8r96H91RggPwnZfyxudFGwRJXFh\nsm6osoIZbetw8GmcFGuoyQCPWOwDKcMHffQofUD0N4ldhrIwDDMCutCrVWli6BhQ\nEcdHOjmjaZw7As4Bd/49/tL7LnilSqe7tp+BQWBvHhTk/bR8YaqWjMEkq9pNVILA\njtRbTza3Yzu3U9cu6/gVTOzOX22vxSmbCqziCC6Ch36wIltzwqo=\n=G7F+\n-----END PGP SIGNATURE-----", "payload": "tree 6333d66dea8f49259d0f7519fe726e81150e8222\nparent 9f34c7feea4bdb3b1b4d7d4c8be56ed70775946f\nparent 8d9a87c14d9c5abe433444a641282ae1afb0577d\nauthor kennytm <kennytm@gmail.com> 1526761061 +0800\ncommitter kennytm <kennytm@gmail.com> 1526761061 +0800\n\nRollup merge of #50819 - cjkenn:cjkenn/div-by-zero, r=kennytm\n\nFix potential divide by zero\n\nThis should fix #50761\n\nI had trouble reproducing with the provided code, but looking at the stack trace would indicate that this code is the likely cause. I made a number of assumptions here, because I don't have enough context on how the register size is set:\n\n1. I assumed `rest.unit.size.bytes()` can be 0, and it's ok if it's set to 0 before this function is called\n2. I assumed that if `rest.unit.size.bytes()` is 0, that we want `rest_count` to also be 0.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f031e5d465bde09ca9bc210883706abdd5da67", "html_url": "https://github.com/rust-lang/rust/commit/e1f031e5d465bde09ca9bc210883706abdd5da67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1f031e5d465bde09ca9bc210883706abdd5da67/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f34c7feea4bdb3b1b4d7d4c8be56ed70775946f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f34c7feea4bdb3b1b4d7d4c8be56ed70775946f", "html_url": "https://github.com/rust-lang/rust/commit/9f34c7feea4bdb3b1b4d7d4c8be56ed70775946f"}, {"sha": "8d9a87c14d9c5abe433444a641282ae1afb0577d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9a87c14d9c5abe433444a641282ae1afb0577d", "html_url": "https://github.com/rust-lang/rust/commit/8d9a87c14d9c5abe433444a641282ae1afb0577d"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "221012903d9997214f82d8feffc42c3c439a3c02", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1f031e5d465bde09ca9bc210883706abdd5da67/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f031e5d465bde09ca9bc210883706abdd5da67/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=e1f031e5d465bde09ca9bc210883706abdd5da67", "patch": "@@ -127,8 +127,12 @@ impl LlvmType for Reg {\n impl LlvmType for CastTarget {\n     fn llvm_type(&self, cx: &CodegenCx) -> Type {\n         let rest_ll_unit = self.rest.unit.llvm_type(cx);\n-        let rest_count = self.rest.total.bytes() / self.rest.unit.size.bytes();\n-        let rem_bytes = self.rest.total.bytes() % self.rest.unit.size.bytes();\n+        let (rest_count, rem_bytes) = if self.rest.unit.size.bytes() == 0 {\n+            (0, 0)\n+        } else {\n+            (self.rest.total.bytes() / self.rest.unit.size.bytes(),\n+            self.rest.total.bytes() % self.rest.unit.size.bytes())\n+        };\n \n         if self.prefix.iter().all(|x| x.is_none()) {\n             // Simplify to a single unit when there is no prefix and size <= unit size"}, {"sha": "b8a7a089c2313f536ded33d6adb96d4e829a8be1", "filename": "src/test/ui/issue-50761.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e1f031e5d465bde09ca9bc210883706abdd5da67/src%2Ftest%2Fui%2Fissue-50761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f031e5d465bde09ca9bc210883706abdd5da67/src%2Ftest%2Fui%2Fissue-50761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50761.rs?ref=e1f031e5d465bde09ca9bc210883706abdd5da67", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Confirm that we don't accidently divide or mod by zero in llvm_type\n+\n+// compile-pass\n+\n+mod a {\n+    pub trait A {}\n+}\n+\n+mod b {\n+    pub struct Builder {}\n+\n+    pub fn new() -> Builder {\n+        Builder {}\n+    }\n+\n+    impl Builder {\n+        pub fn with_a(&mut self, _a: fn() -> ::a::A) {}\n+    }\n+}\n+\n+pub use self::b::new;\n+\n+fn main() {}"}]}