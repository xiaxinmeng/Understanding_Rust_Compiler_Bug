{"sha": "53599d11f6fec625bef69aeb699e657cfc37c310", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNTk5ZDExZjZmZWM2MjViZWY2OWFlYjY5OWU2NTdjZmMzN2MzMTA=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-04-21T07:27:26Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-04-21T07:27:26Z"}, "message": "Fix incorrectly replacing method calls in \"Convert to named struct\" assist", "tree": {"sha": "6fb9d06390b95d6e54e64df3fb8c7e2682fb4f60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fb9d06390b95d6e54e64df3fb8c7e2682fb4f60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53599d11f6fec625bef69aeb699e657cfc37c310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53599d11f6fec625bef69aeb699e657cfc37c310", "html_url": "https://github.com/rust-lang/rust/commit/53599d11f6fec625bef69aeb699e657cfc37c310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53599d11f6fec625bef69aeb699e657cfc37c310/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d4be829e09dae4af7b4a82b379fdb8700b0929f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4be829e09dae4af7b4a82b379fdb8700b0929f", "html_url": "https://github.com/rust-lang/rust/commit/8d4be829e09dae4af7b4a82b379fdb8700b0929f"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "b68b1d06f7604d2d17c0726d819c9e31a3507dd3", "filename": "crates/ide_assists/src/handlers/convert_tuple_struct_to_named_struct.rs", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/53599d11f6fec625bef69aeb699e657cfc37c310/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53599d11f6fec625bef69aeb699e657cfc37c310/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs?ref=53599d11f6fec625bef69aeb699e657cfc37c310", "patch": "@@ -1,5 +1,5 @@\n use hir::{Adt, ModuleDef};\n-use ide_db::defs::Definition;\n+use ide_db::defs::{Definition, NameRefClass};\n use syntax::{\n     ast::{self, AstNode, GenericParamsOwner, VisibilityOwner},\n     match_ast,\n@@ -80,11 +80,9 @@ fn edit_struct_references(\n     strukt: &ast::Struct,\n     names: &[ast::Name],\n ) {\n-    let strukt_def = ctx.sema.to_def(strukt).unwrap();\n-    let usages = Definition::ModuleDef(ModuleDef::Adt(Adt::Struct(strukt_def)))\n-        .usages(&ctx.sema)\n-        .include_self_kw_refs(true)\n-        .all();\n+    let strukt = ctx.sema.to_def(strukt).unwrap();\n+    let strukt_def = Definition::ModuleDef(ModuleDef::Adt(Adt::Struct(strukt)));\n+    let usages = strukt_def.usages(&ctx.sema).include_self_kw_refs(true).all();\n \n     for (file_id, refs) in usages {\n         edit.edit_file(file_id);\n@@ -109,16 +107,26 @@ fn edit_struct_references(\n                                 .to_string(),\n                             );\n                         },\n-                        // for tuple struct creations like: Foo(42)\n+                        // for tuple struct creations like Foo(42)\n                         ast::CallExpr(call_expr) => {\n-                            let path = call_expr.syntax().descendants().find_map(ast::PathExpr::cast).unwrap();\n+                            let path = call_expr.syntax().descendants().find_map(ast::PathExpr::cast).unwrap().path().unwrap();\n+\n+                            // this also includes method calls like Foo::new(42), we should skip them\n+                            if let Some(Some(name_ref)) = path.segment().map(|s| s.name_ref()) {\n+                                match NameRefClass::classify(&ctx.sema, &name_ref) {\n+                                    Some(NameRefClass::Definition(Definition::SelfType(_))) => {},\n+                                    Some(NameRefClass::Definition(def)) if def == strukt_def => {},\n+                                    _ => continue,\n+                                };\n+                            }\n+\n                             let arg_list =\n                                 call_expr.syntax().descendants().find_map(ast::ArgList::cast).unwrap();\n \n                             edit.replace(\n                                 call_expr.syntax().text_range(),\n                                 ast::make::record_expr(\n-                                    path.path().unwrap(),\n+                                    path,\n                                     ast::make::record_expr_field_list(arg_list.args().zip(names).map(\n                                         |(expr, name)| {\n                                             ast::make::record_expr_field(\n@@ -191,8 +199,12 @@ struct Inner;\n struct A$0(Inner);\n \n impl A {\n-    fn new() -> A {\n-        A(Inner)\n+    fn new(inner: Inner) -> A {\n+        A(inner)\n+    }\n+\n+    fn new_with_default() -> A {\n+        A::new(Inner)\n     }\n \n     fn into_inner(self) -> Inner {\n@@ -204,8 +216,12 @@ struct Inner;\n struct A { field1: Inner }\n \n impl A {\n-    fn new() -> A {\n-        A { field1: Inner }\n+    fn new(inner: Inner) -> A {\n+        A { field1: inner }\n+    }\n+\n+    fn new_with_default() -> A {\n+        A::new(Inner)\n     }\n \n     fn into_inner(self) -> Inner {\n@@ -224,8 +240,12 @@ struct Inner;\n struct A$0(Inner);\n \n impl A {\n-    fn new() -> Self {\n-        Self(Inner)\n+    fn new(inner: Inner) -> Self {\n+        Self(inner)\n+    }\n+\n+    fn new_with_default() -> Self {\n+        Self::new(Inner)\n     }\n \n     fn into_inner(self) -> Inner {\n@@ -237,8 +257,12 @@ struct Inner;\n struct A { field1: Inner }\n \n impl A {\n-    fn new() -> Self {\n-        Self { field1: Inner }\n+    fn new(inner: Inner) -> Self {\n+        Self { field1: inner }\n+    }\n+\n+    fn new_with_default() -> Self {\n+        Self::new(Inner)\n     }\n \n     fn into_inner(self) -> Inner {"}]}