{"sha": "82f5a380a48262e10e2d7c53e679351c5aedbf5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjVhMzgwYTQ4MjYyZTEwZTJkN2M1M2U2NzkzNTFjNWFlZGJmNWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T01:10:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:28Z"}, "message": "librustc: De-`@mut` `llargs` and `lllocals` in the function context", "tree": {"sha": "554b44478ce8496f00e891d3b40edb650961878c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/554b44478ce8496f00e891d3b40edb650961878c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f5a380a48262e10e2d7c53e679351c5aedbf5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f5a380a48262e10e2d7c53e679351c5aedbf5a", "html_url": "https://github.com/rust-lang/rust/commit/82f5a380a48262e10e2d7c53e679351c5aedbf5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f5a380a48262e10e2d7c53e679351c5aedbf5a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f4a40f24109f94b4c1e568bf312105f07b1734", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f4a40f24109f94b4c1e568bf312105f07b1734", "html_url": "https://github.com/rust-lang/rust/commit/a5f4a40f24109f94b4c1e568bf312105f07b1734"}], "stats": {"total": 87, "additions": 56, "deletions": 31}, "files": [{"sha": "75db7518f54b27f40aad1bb4c8d0eb664615dd7b", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82f5a380a48262e10e2d7c53e679351c5aedbf5a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f5a380a48262e10e2d7c53e679351c5aedbf5a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=82f5a380a48262e10e2d7c53e679351c5aedbf5a", "patch": "@@ -1358,8 +1358,6 @@ fn insert_lllocals(bcx: @Block,\n      * the bindings.\n      */\n \n-    let llmap = bcx.fcx.lllocals;\n-\n     for (&ident, &binding_info) in bindings_map.iter() {\n         let llval = match binding_info.trmode {\n             // By value bindings: use the stack slot that we\n@@ -1378,8 +1376,13 @@ fn insert_lllocals(bcx: @Block,\n             }\n         };\n \n-        debug!(\"binding {:?} to {}\", binding_info.id, bcx.val_to_str(llval));\n-        llmap.insert(binding_info.id, llval);\n+        {\n+            debug!(\"binding {:?} to {}\",\n+                   binding_info.id,\n+                   bcx.val_to_str(llval));\n+            let mut llmap = bcx.fcx.lllocals.borrow_mut();\n+            llmap.get().insert(binding_info.id, llval);\n+        }\n \n         if bcx.sess().opts.extra_debuginfo {\n             debuginfo::create_match_binding_metadata(bcx,\n@@ -1442,7 +1445,8 @@ fn compile_guard(bcx: @Block,\n                 }\n                 TrByRef => {}\n             }\n-            bcx.fcx.lllocals.remove(&binding_info.id);\n+            let mut lllocals = bcx.fcx.lllocals.borrow_mut();\n+            lllocals.get().remove(&binding_info.id);\n         }\n         return bcx;\n     }\n@@ -2057,7 +2061,8 @@ pub fn store_arg(mut bcx: @Block,\n         // Optimized path for `x: T` case. This just adopts\n         // `llval` wholesale as the pointer for `x`, avoiding the\n         // general logic which may copy out of `llval`.\n-        bcx.fcx.llargs.insert(pat.id, llval);\n+        let mut llargs = bcx.fcx.llargs.borrow_mut();\n+        llargs.get().insert(pat.id, llval);\n     } else {\n         // General path. Copy out the values that are used in the\n         // pattern.\n@@ -2077,11 +2082,11 @@ fn mk_binding_alloca(mut bcx: @Block,\n     let ident = ast_util::path_to_ident(path);\n     let llval = alloc_ty(bcx, var_ty, bcx.ident(ident));\n     bcx = populate(bcx, var_ty, llval);\n-    let llmap = match binding_mode {\n-        BindLocal => bcx.fcx.lllocals,\n-        BindArgument => bcx.fcx.llargs\n+    let mut llmap = match binding_mode {\n+        BindLocal => bcx.fcx.lllocals.borrow_mut(),\n+        BindArgument => bcx.fcx.llargs.borrow_mut(),\n     };\n-    llmap.insert(p_id, llval);\n+    llmap.get().insert(p_id, llval);\n     add_clean(bcx, llval, var_ty);\n     return bcx;\n }"}, {"sha": "dfd5743201cfb3f5661af151d7835cc6bccecc48", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82f5a380a48262e10e2d7c53e679351c5aedbf5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f5a380a48262e10e2d7c53e679351c5aedbf5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=82f5a380a48262e10e2d7c53e679351c5aedbf5a", "patch": "@@ -1692,8 +1692,8 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n           llself: None,\n           personality: None,\n           caller_expects_out_pointer: uses_outptr,\n-          llargs: @mut HashMap::new(),\n-          lllocals: @mut HashMap::new(),\n+          llargs: RefCell::new(HashMap::new()),\n+          lllocals: RefCell::new(HashMap::new()),\n           llupvars: RefCell::new(HashMap::new()),\n           id: id,\n           param_substs: param_substs,\n@@ -2146,7 +2146,10 @@ pub fn trans_enum_variant_or_tuple_like_struct<A:IdAndTy>(\n                                              fcx.llretptr.unwrap(),\n                                              disr,\n                                              i);\n-        let llarg = fcx.llargs.get_copy(&fn_arg.pat.id);\n+        let llarg = {\n+            let llargs = fcx.llargs.borrow();\n+            llargs.get().get_copy(&fn_arg.pat.id)\n+        };\n         let arg_ty = arg_tys[i];\n         memcpy_ty(bcx, lldestptr, llarg, arg_ty);\n     }"}, {"sha": "bc5c9f8500f7aeb3ec71e037308cb99af80489df", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f5a380a48262e10e2d7c53e679351c5aedbf5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f5a380a48262e10e2d7c53e679351c5aedbf5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=82f5a380a48262e10e2d7c53e679351c5aedbf5a", "patch": "@@ -240,10 +240,10 @@ pub struct FunctionContext {\n     caller_expects_out_pointer: bool,\n \n     // Maps arguments to allocas created for them in llallocas.\n-    llargs: @mut HashMap<ast::NodeId, ValueRef>,\n+    llargs: RefCell<HashMap<ast::NodeId, ValueRef>>,\n     // Maps the def_ids for local variables to the allocas created for\n     // them in llallocas.\n-    lllocals: @mut HashMap<ast::NodeId, ValueRef>,\n+    lllocals: RefCell<HashMap<ast::NodeId, ValueRef>>,\n     // Same as above, but for closure upvars\n     llupvars: RefCell<HashMap<ast::NodeId, ValueRef>>,\n "}, {"sha": "c1b47488f2eea5d090d7cd3fdcd4eca6ae58a0e4", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/82f5a380a48262e10e2d7c53e679351c5aedbf5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f5a380a48262e10e2d7c53e679351c5aedbf5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=82f5a380a48262e10e2d7c53e679351c5aedbf5a", "patch": "@@ -298,11 +298,15 @@ pub fn create_local_var_metadata(bcx: @Block,\n         let var_ident = ast_util::path_to_ident(path_ref);\n         let var_type = node_id_type(bcx, node_id);\n \n-        let llptr = match bcx.fcx.lllocals.find_copy(&node_id) {\n-            Some(v) => v,\n-            None => {\n-                bcx.tcx().sess.span_bug(span,\n-                    format!(\"No entry in lllocals table for {:?}\", node_id));\n+        let llptr = {\n+            let lllocals = bcx.fcx.lllocals.borrow();\n+            match lllocals.get().find_copy(&node_id) {\n+                Some(v) => v,\n+                None => {\n+                    bcx.tcx().sess.span_bug(span,\n+                        format!(\"No entry in lllocals table for {:?}\",\n+                                node_id));\n+                }\n             }\n         };\n \n@@ -397,10 +401,17 @@ pub fn create_match_binding_metadata(bcx: @Block,\n         return;\n     }\n \n-    let llptr = match bcx.fcx.lllocals.find_copy(&node_id) {\n-        Some(v) => v,\n-        None => {\n-            bcx.tcx().sess.span_bug(span, format!(\"No entry in lllocals table for {:?}\", node_id));\n+    let llptr = {\n+        let lllocals = bcx.fcx.lllocals.borrow();\n+        match lllocals.get().find_copy(&node_id) {\n+            Some(v) => v,\n+            None => {\n+                bcx.tcx()\n+                   .sess\n+                   .span_bug(span,\n+                             format!(\"No entry in lllocals table for {:?}\",\n+                                     node_id));\n+            }\n         }\n     };\n \n@@ -506,11 +517,15 @@ pub fn create_argument_metadata(bcx: @Block,\n     let scope_metadata = bcx.fcx.debug_context.get_ref(cx, arg.pat.span).fn_metadata;\n \n     pat_util::pat_bindings(def_map, arg.pat, |_, node_id, span, path_ref| {\n-        let llptr = match bcx.fcx.llargs.find_copy(&node_id) {\n-            Some(v) => v,\n-            None => {\n-                bcx.tcx().sess.span_bug(span,\n-                    format!(\"No entry in llargs table for {:?}\", node_id));\n+        let llptr = {\n+            let llargs = bcx.fcx.llargs.borrow();\n+            match llargs.get().find_copy(&node_id) {\n+                Some(v) => v,\n+                None => {\n+                    bcx.tcx().sess.span_bug(span,\n+                        format!(\"No entry in llargs table for {:?}\",\n+                                node_id));\n+                }\n             }\n         };\n "}, {"sha": "fb68303a4bce9f4607604d4eb0c74d3dfcc3ad7f", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f5a380a48262e10e2d7c53e679351c5aedbf5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f5a380a48262e10e2d7c53e679351c5aedbf5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=82f5a380a48262e10e2d7c53e679351c5aedbf5a", "patch": "@@ -1100,10 +1100,12 @@ pub fn trans_local_var(bcx: @Block, def: ast::Def) -> Datum {\n             }\n         }\n         ast::DefArg(nid, _) => {\n-            take_local(bcx, bcx.fcx.llargs, nid)\n+            let llargs = bcx.fcx.llargs.borrow();\n+            take_local(bcx, llargs.get(), nid)\n         }\n         ast::DefLocal(nid, _) | ast::DefBinding(nid, _) => {\n-            take_local(bcx, bcx.fcx.lllocals, nid)\n+            let lllocals = bcx.fcx.lllocals.borrow();\n+            take_local(bcx, lllocals.get(), nid)\n         }\n         ast::DefSelf(nid, _) => {\n             let self_info: ValSelfData = match bcx.fcx.llself {"}]}