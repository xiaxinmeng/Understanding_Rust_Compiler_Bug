{"sha": "f97524387d0cabc146f6e2944eb6c820256493ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NzUyNDM4N2QwY2FiYzE0NmY2ZTI5NDRlYjZjODIwMjU2NDkzZWY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-11-16T13:00:22Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-11-16T22:25:49Z"}, "message": "Implement more basic traits for the marker types.", "tree": {"sha": "4c86f955e8f03801e4f9b86a4e6790625e56d1cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c86f955e8f03801e4f9b86a4e6790625e56d1cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97524387d0cabc146f6e2944eb6c820256493ef", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97524387d0cabc146f6e2944eb6c820256493ef", "html_url": "https://github.com/rust-lang/rust/commit/f97524387d0cabc146f6e2944eb6c820256493ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97524387d0cabc146f6e2944eb6c820256493ef/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e43f419cb98c9035d30e5cf0e0be7944dbc0371", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e43f419cb98c9035d30e5cf0e0be7944dbc0371", "html_url": "https://github.com/rust-lang/rust/commit/7e43f419cb98c9035d30e5cf0e0be7944dbc0371"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "6489101f7b980d184ac187a88044f218b9138d1b", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f97524387d0cabc146f6e2944eb6c820256493ef/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97524387d0cabc146f6e2944eb6c820256493ef/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=f97524387d0cabc146f6e2944eb6c820256493ef", "patch": "@@ -132,7 +132,7 @@ pub mod marker {\n     /// (for example, `S<&'static int>` is a subtype of `S<&'a int>`\n     /// for some lifetime `'a`, but not the other way around).\n     #[lang=\"covariant_type\"]\n-    #[deriving(PartialEq,Clone)]\n+    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct CovariantType<T>;\n \n     /// A marker type whose type parameter `T` is considered to be\n@@ -175,7 +175,7 @@ pub mod marker {\n     /// function requires arguments of type `T`, it must also accept\n     /// arguments of type `U`, hence such a conversion is safe.\n     #[lang=\"contravariant_type\"]\n-    #[deriving(PartialEq,Clone)]\n+    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct ContravariantType<T>;\n \n     /// A marker type whose type parameter `T` is considered to be\n@@ -200,7 +200,7 @@ pub mod marker {\n     /// never written, but in fact `Cell` uses unsafe code to achieve\n     /// interior mutability.\n     #[lang=\"invariant_type\"]\n-    #[deriving(PartialEq,Clone)]\n+    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct InvariantType<T>;\n \n     /// As `CovariantType`, but for lifetime parameters. Using\n@@ -220,7 +220,7 @@ pub mod marker {\n     /// For more information about variance, refer to this Wikipedia\n     /// article <http://en.wikipedia.org/wiki/Variance_%28computer_science%29>.\n     #[lang=\"covariant_lifetime\"]\n-    #[deriving(PartialEq,Clone)]\n+    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct CovariantLifetime<'a>;\n \n     /// As `ContravariantType`, but for lifetime parameters. Using\n@@ -236,7 +236,7 @@ pub mod marker {\n     /// For more information about variance, refer to this Wikipedia\n     /// article <http://en.wikipedia.org/wiki/Variance_%28computer_science%29>.\n     #[lang=\"contravariant_lifetime\"]\n-    #[deriving(PartialEq,Clone)]\n+    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct ContravariantLifetime<'a>;\n \n     /// As `InvariantType`, but for lifetime parameters. Using\n@@ -247,34 +247,34 @@ pub mod marker {\n     /// and this pointer is itself stored in an inherently mutable\n     /// location (such as a `Cell`).\n     #[lang=\"invariant_lifetime\"]\n-    #[deriving(PartialEq,Clone)]\n+    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct InvariantLifetime<'a>;\n \n     /// A type which is considered \"not sendable\", meaning that it cannot\n     /// be safely sent between tasks, even if it is owned. This is\n     /// typically embedded in other types, such as `Gc`, to ensure that\n     /// their instances remain thread-local.\n     #[lang=\"no_send_bound\"]\n-    #[deriving(PartialEq,Clone)]\n+    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct NoSend;\n \n     /// A type which is considered \"not POD\", meaning that it is not\n     /// implicitly copyable. This is typically embedded in other types to\n     /// ensure that they are never copied, even if they lack a destructor.\n     #[lang=\"no_copy_bound\"]\n-    #[deriving(PartialEq,Clone)]\n+    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct NoCopy;\n \n     /// A type which is considered \"not sync\", meaning that\n     /// its contents are not threadsafe, hence they cannot be\n     /// shared between tasks.\n     #[lang=\"no_sync_bound\"]\n-    #[deriving(PartialEq,Clone)]\n+    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct NoSync;\n \n     /// A type which is considered managed by the GC. This is typically\n     /// embedded in other types.\n     #[lang=\"managed_bound\"]\n-    #[deriving(PartialEq,Clone)]\n+    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct Managed;\n }"}]}