{"sha": "218982bef07c7d8518348f5d2a2eecf57edc0219", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxODk4MmJlZjA3YzdkODUxODM0OGY1ZDJhMmVlY2Y1N2VkYzAyMTk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-27T11:56:57Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-30T21:43:51Z"}, "message": "Place types inside backticks", "tree": {"sha": "38194528bf1c8b2d0e50072f69ef5e3b95215001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38194528bf1c8b2d0e50072f69ef5e3b95215001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/218982bef07c7d8518348f5d2a2eecf57edc0219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/218982bef07c7d8518348f5d2a2eecf57edc0219", "html_url": "https://github.com/rust-lang/rust/commit/218982bef07c7d8518348f5d2a2eecf57edc0219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/218982bef07c7d8518348f5d2a2eecf57edc0219/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5fdff26b58704f5b346ab2c96ea784f959eb3dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5fdff26b58704f5b346ab2c96ea784f959eb3dd", "html_url": "https://github.com/rust-lang/rust/commit/c5fdff26b58704f5b346ab2c96ea784f959eb3dd"}], "stats": {"total": 192, "additions": 95, "deletions": 97}, "files": [{"sha": "d3b0b1169bf3c5cbdf00ce2ecae859cc3fa679a7", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                     cx.span_lint(\n                                         OVERFLOWING_LITERALS,\n                                         e.span,\n-                                        &format!(\"literal out of range for {:?}\", t),\n+                                        &format!(\"literal out of range for `{:?}`\", t),\n                                     );\n                                     return;\n                                 }\n@@ -136,11 +136,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                             let mut err = cx.struct_span_lint(\n                                                 OVERFLOWING_LITERALS,\n                                                 parent_expr.span,\n-                                                \"only u8 can be cast into char\",\n+                                                \"only `u8` can be cast into `char`\",\n                                             );\n                                             err.span_suggestion(\n                                                 parent_expr.span,\n-                                                &\"use a char literal instead\",\n+                                                &\"use a `char` literal instead\",\n                                                 format!(\"'\\\\u{{{:X}}}'\", lit_val),\n                                                 Applicability::MachineApplicable,\n                                             );\n@@ -165,7 +165,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                                         parent_expr.span,\n                                                         &format!(\n                                                             \"range endpoint is out of range \\\n-                                                             for {:?}\",\n+                                                             for `{:?}`\",\n                                                             t,\n                                                         ),\n                                                     );\n@@ -206,7 +206,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                             cx.span_lint(\n                                 OVERFLOWING_LITERALS,\n                                 e.span,\n-                                &format!(\"literal out of range for {:?}\", t),\n+                                &format!(\"literal out of range for `{:?}`\", t),\n                             );\n                         }\n                     }\n@@ -224,7 +224,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                         if is_infinite == Ok(true) {\n                             cx.span_lint(OVERFLOWING_LITERALS,\n                                          e.span,\n-                                         &format!(\"literal out of range for {:?}\", t));\n+                                         &format!(\"literal out of range for `{:?}`\", t));\n                         }\n                     }\n                     _ => (),"}, {"sha": "9634ed56f7b723149d93903a91dc287886a2f2cd", "filename": "src/test/ui/cast_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Fcast_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Fcast_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.rs?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -2,9 +2,9 @@\n \n fn main() {\n     const XYZ: char = 0x1F888 as char;\n-    //~^ ERROR only u8 can be cast into char\n+    //~^ ERROR only `u8` can be cast into `char`\n     const XY: char = 129160 as char;\n-    //~^ ERROR only u8 can be cast into char\n+    //~^ ERROR only `u8` can be cast into `char`\n     const ZYX: char = '\\u{01F888}';\n     println!(\"{}\", XYZ);\n }"}, {"sha": "37ef98bcb5067c8fd45ac3638a634d0b675257a9", "filename": "src/test/ui/cast_char.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Fcast_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Fcast_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.stderr?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -1,20 +1,20 @@\n-error: only u8 can be cast into char\n+error: only `u8` can be cast into `char`\n   --> $DIR/cast_char.rs:4:23\n    |\n LL |     const XYZ: char = 0x1F888 as char;\n-   |                       ^^^^^^^^^^^^^^^ help: use a char literal instead: `'\\u{1F888}'`\n+   |                       ^^^^^^^^^^^^^^^ help: use a `char` literal instead: `'\\u{1F888}'`\n    |\n note: lint level defined here\n   --> $DIR/cast_char.rs:1:9\n    |\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: only u8 can be cast into char\n+error: only `u8` can be cast into `char`\n   --> $DIR/cast_char.rs:6:22\n    |\n LL |     const XY: char = 129160 as char;\n-   |                      ^^^^^^^^^^^^^^ help: use a char literal instead: `'\\u{1F888}'`\n+   |                      ^^^^^^^^^^^^^^ help: use a `char` literal instead: `'\\u{1F888}'`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "85cd73d6f0855e09ba9714472c0d5abf9ae3ae69", "filename": "src/test/ui/enum/enum-discrim-too-small2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.rs?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -5,28 +5,28 @@\n enum Ei8 {\n     Ai8 = 23,\n     Bi8 = -23,\n-    Ci8 = 223, //~ ERROR literal out of range for i8\n+    Ci8 = 223, //~ ERROR literal out of range for `i8`\n }\n \n #[repr(i16)]\n enum Ei16 {\n     Ai16 = 23,\n     Bi16 = -22333,\n-    Ci16 = 55555, //~ ERROR literal out of range for i16\n+    Ci16 = 55555, //~ ERROR literal out of range for `i16`\n }\n \n #[repr(i32)]\n enum Ei32 {\n     Ai32 = 23,\n     Bi32 = -2_000_000_000,\n-    Ci32 = 3_000_000_000, //~ ERROR literal out of range for i32\n+    Ci32 = 3_000_000_000, //~ ERROR literal out of range for `i32`\n }\n \n #[repr(i64)]\n enum Ei64 {\n     Ai64 = 23,\n     Bi64 = -9223372036854775808,\n-    Ci64 = 9223372036854775809, //~ ERROR literal out of range for i64\n+    Ci64 = 9223372036854775809, //~ ERROR literal out of range for `i64`\n }\n \n // u64 currently allows negative numbers, and i64 allows numbers greater than `1<<63`.  This is a"}, {"sha": "f7220044ba42dcf422a53e77f47e8896099dddc7", "filename": "src/test/ui/enum/enum-discrim-too-small2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -1,4 +1,4 @@\n-error: literal out of range for i8\n+error: literal out of range for `i8`\n   --> $DIR/enum-discrim-too-small2.rs:8:11\n    |\n LL |     Ci8 = 223,\n@@ -10,19 +10,19 @@ note: lint level defined here\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: literal out of range for i16\n+error: literal out of range for `i16`\n   --> $DIR/enum-discrim-too-small2.rs:15:12\n    |\n LL |     Ci16 = 55555,\n    |            ^^^^^\n \n-error: literal out of range for i32\n+error: literal out of range for `i32`\n   --> $DIR/enum-discrim-too-small2.rs:22:12\n    |\n LL |     Ci32 = 3_000_000_000,\n    |            ^^^^^^^^^^^^^\n \n-error: literal out of range for i64\n+error: literal out of range for `i64`\n   --> $DIR/enum-discrim-too-small2.rs:29:12\n    |\n LL |     Ci64 = 9223372036854775809,"}, {"sha": "b887f66e94bd6ceff6787c4d30546a3f80eff7c1", "filename": "src/test/ui/lint/deny-overflowing-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.rs?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x: u8 = 256;\n-    //~^ error: literal out of range for u8\n+    //~^ error: literal out of range for `u8`\n }"}, {"sha": "1263a7bb7fd1b364b2c5799386840ddcc80701c1", "filename": "src/test/ui/lint/deny-overflowing-literals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -1,4 +1,4 @@\n-error: literal out of range for u8\n+error: literal out of range for `u8`\n   --> $DIR/deny-overflowing-literals.rs:2:17\n    |\n LL |     let x: u8 = 256;"}, {"sha": "f2aeb24a795356c74661c5053e7ef321ea9e2972", "filename": "src/test/ui/lint/lint-range-endpoint-overflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.rs?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -1,11 +1,11 @@\n #![deny(overflowing_literals)]\n \n fn main() {\n-    let range_a = 0..256; //~ ERROR range endpoint is out of range for u8\n+    let range_a = 0..256; //~ ERROR range endpoint is out of range for `u8`\n     let range_b = 0..=255; // ok\n-    let range_c = 0..=256; //~ ERROR literal out of range for u8\n-    let range_d = 256..5; //~ ERROR literal out of range for u8\n-    let range_e = 0..257; //~ ERROR literal out of range for u8\n+    let range_c = 0..=256; //~ ERROR literal out of range for `u8`\n+    let range_d = 256..5; //~ ERROR literal out of range for `u8`\n+    let range_e = 0..257; //~ ERROR literal out of range for `u8`\n \n     range_a.collect::<Vec<u8>>();\n     range_b.collect::<Vec<u8>>();"}, {"sha": "b2dff2c8d05e4d5e361e58003c60ed6b89c5cea2", "filename": "src/test/ui/lint/lint-range-endpoint-overflow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.stderr?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -1,4 +1,4 @@\n-error: range endpoint is out of range for u8\n+error: range endpoint is out of range for `u8`\n   --> $DIR/lint-range-endpoint-overflow.rs:4:19\n    |\n LL |     let range_a = 0..256;\n@@ -10,19 +10,19 @@ note: lint level defined here\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: literal out of range for u8\n+error: literal out of range for `u8`\n   --> $DIR/lint-range-endpoint-overflow.rs:6:23\n    |\n LL |     let range_c = 0..=256;\n    |                       ^^^\n \n-error: literal out of range for u8\n+error: literal out of range for `u8`\n   --> $DIR/lint-range-endpoint-overflow.rs:7:19\n    |\n LL |     let range_d = 256..5;\n    |                   ^^^\n \n-error: literal out of range for u8\n+error: literal out of range for `u8`\n   --> $DIR/lint-range-endpoint-overflow.rs:8:22\n    |\n LL |     let range_e = 0..257;"}, {"sha": "3f90119cd89543d8d39ba015a3802be2c8c485cf", "filename": "src/test/ui/lint/lint-type-limits2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.rs?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -11,5 +11,5 @@ fn bar() -> i8 {\n \n fn baz() -> bool {\n     128 > bar() //~ ERROR comparison is useless due to type limits\n-                //~| WARN literal out of range for i8\n+                //~| WARN literal out of range for `i8`\n }"}, {"sha": "0b3d292856707cf3097980f1899903b147fc0409", "filename": "src/test/ui/lint/lint-type-limits2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -6,7 +6,7 @@ LL |     128 > bar()\n    |\n    = note: requested on the command line with `-D unused-comparisons`\n \n-warning: literal out of range for i8\n+warning: literal out of range for `i8`\n   --> $DIR/lint-type-limits2.rs:13:5\n    |\n LL |     128 > bar()"}, {"sha": "ceecf9ab30bb8f0b82cdf4d50115dc0069ac7d64", "filename": "src/test/ui/lint/lint-type-limits3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.rs?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -7,7 +7,7 @@ fn main() { }\n fn qux() {\n     let mut i = 1i8;\n     while 200 != i { //~ ERROR comparison is useless due to type limits\n-                     //~| WARN literal out of range for i8\n+                     //~| WARN literal out of range for `i8`\n         i += 1;\n     }\n }"}, {"sha": "70cd9c859ecf30d9d248080267b89ddba6b700d9", "filename": "src/test/ui/lint/lint-type-limits3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -6,7 +6,7 @@ LL |     while 200 != i {\n    |\n    = note: requested on the command line with `-D unused-comparisons`\n \n-warning: literal out of range for i8\n+warning: literal out of range for `i8`\n   --> $DIR/lint-type-limits3.rs:9:11\n    |\n LL |     while 200 != i {"}, {"sha": "9672da6d3586cdac57cc37b40e0f8db8a4f3d49c", "filename": "src/test/ui/lint/lint-type-overflow.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.rs?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -1,5 +1,3 @@\n-//\n-\n #![deny(overflowing_literals)]\n \n fn test(x: i8) {\n@@ -9,39 +7,39 @@ fn test(x: i8) {\n #[allow(unused_variables)]\n fn main() {\n     let x1: u8 = 255; // should be OK\n-    let x1: u8 = 256; //~ error: literal out of range for u8\n+    let x1: u8 = 256; //~ error: literal out of range for `u8`\n \n     let x1 = 255_u8; // should be OK\n-    let x1 = 256_u8; //~ error: literal out of range for u8\n+    let x1 = 256_u8; //~ error: literal out of range for `u8`\n \n     let x2: i8 = -128; // should be OK\n-    let x1: i8 = 128; //~ error: literal out of range for i8\n+    let x1: i8 = 128; //~ error: literal out of range for `i8`\n \n-    let x3: i8 = -129; //~ error: literal out of range for i8\n-    let x3: i8 = -(129); //~ error: literal out of range for i8\n-    let x3: i8 = -{129}; //~ error: literal out of range for i8\n+    let x3: i8 = -129; //~ error: literal out of range for `i8`\n+    let x3: i8 = -(129); //~ error: literal out of range for `i8`\n+    let x3: i8 = -{129}; //~ error: literal out of range for `i8`\n \n-    test(1000); //~ error: literal out of range for i8\n+    test(1000); //~ error: literal out of range for `i8`\n \n-    let x = 128_i8; //~ error: literal out of range for i8\n+    let x = 128_i8; //~ error: literal out of range for `i8`\n     let x = 127_i8;\n     let x = -128_i8;\n     let x = -(128_i8);\n-    let x = -129_i8; //~ error: literal out of range for i8\n+    let x = -129_i8; //~ error: literal out of range for `i8`\n \n     let x: i32 = 2147483647; // should be OK\n     let x = 2147483647_i32; // should be OK\n-    let x: i32 = 2147483648; //~ error: literal out of range for i32\n-    let x = 2147483648_i32; //~ error: literal out of range for i32\n+    let x: i32 = 2147483648; //~ error: literal out of range for `i32`\n+    let x = 2147483648_i32; //~ error: literal out of range for `i32`\n     let x: i32 = -2147483648; // should be OK\n     let x = -2147483648_i32; // should be OK\n-    let x: i32 = -2147483649; //~ error: literal out of range for i32\n-    let x = -2147483649_i32; //~ error: literal out of range for i32\n-    let x = 2147483648; //~ error: literal out of range for i32\n+    let x: i32 = -2147483649; //~ error: literal out of range for `i32`\n+    let x = -2147483649_i32; //~ error: literal out of range for `i32`\n+    let x = 2147483648; //~ error: literal out of range for `i32`\n \n-    let x = 9223372036854775808_i64; //~ error: literal out of range for i64\n+    let x = 9223372036854775808_i64; //~ error: literal out of range for `i64`\n     let x = -9223372036854775808_i64; // should be OK\n-    let x = 18446744073709551615_i64; //~ error: literal out of range for i64\n-    let x: i64 = -9223372036854775809; //~ error: literal out of range for i64\n-    let x = -9223372036854775809_i64; //~ error: literal out of range for i64\n+    let x = 18446744073709551615_i64; //~ error: literal out of range for `i64`\n+    let x: i64 = -9223372036854775809; //~ error: literal out of range for `i64`\n+    let x = -9223372036854775809_i64; //~ error: literal out of range for `i64`\n }"}, {"sha": "6fcd9b58b2dc766665996364f72f749a0693d712", "filename": "src/test/ui/lint/lint-type-overflow.stderr", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -1,113 +1,113 @@\n-error: literal out of range for u8\n-  --> $DIR/lint-type-overflow.rs:12:18\n+error: literal out of range for `u8`\n+  --> $DIR/lint-type-overflow.rs:10:18\n    |\n LL |     let x1: u8 = 256;\n    |                  ^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-type-overflow.rs:3:9\n+  --> $DIR/lint-type-overflow.rs:1:9\n    |\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: literal out of range for u8\n-  --> $DIR/lint-type-overflow.rs:15:14\n+error: literal out of range for `u8`\n+  --> $DIR/lint-type-overflow.rs:13:14\n    |\n LL |     let x1 = 256_u8;\n    |              ^^^^^^\n \n-error: literal out of range for i8\n-  --> $DIR/lint-type-overflow.rs:18:18\n+error: literal out of range for `i8`\n+  --> $DIR/lint-type-overflow.rs:16:18\n    |\n LL |     let x1: i8 = 128;\n    |                  ^^^\n \n-error: literal out of range for i8\n-  --> $DIR/lint-type-overflow.rs:20:19\n+error: literal out of range for `i8`\n+  --> $DIR/lint-type-overflow.rs:18:19\n    |\n LL |     let x3: i8 = -129;\n    |                   ^^^\n \n-error: literal out of range for i8\n-  --> $DIR/lint-type-overflow.rs:21:19\n+error: literal out of range for `i8`\n+  --> $DIR/lint-type-overflow.rs:19:19\n    |\n LL |     let x3: i8 = -(129);\n    |                   ^^^^^\n \n-error: literal out of range for i8\n-  --> $DIR/lint-type-overflow.rs:22:20\n+error: literal out of range for `i8`\n+  --> $DIR/lint-type-overflow.rs:20:20\n    |\n LL |     let x3: i8 = -{129};\n    |                    ^^^\n \n-error: literal out of range for i8\n-  --> $DIR/lint-type-overflow.rs:24:10\n+error: literal out of range for `i8`\n+  --> $DIR/lint-type-overflow.rs:22:10\n    |\n LL |     test(1000);\n    |          ^^^^\n \n-error: literal out of range for i8\n-  --> $DIR/lint-type-overflow.rs:26:13\n+error: literal out of range for `i8`\n+  --> $DIR/lint-type-overflow.rs:24:13\n    |\n LL |     let x = 128_i8;\n    |             ^^^^^^\n \n-error: literal out of range for i8\n-  --> $DIR/lint-type-overflow.rs:30:14\n+error: literal out of range for `i8`\n+  --> $DIR/lint-type-overflow.rs:28:14\n    |\n LL |     let x = -129_i8;\n    |              ^^^^^^\n \n-error: literal out of range for i32\n-  --> $DIR/lint-type-overflow.rs:34:18\n+error: literal out of range for `i32`\n+  --> $DIR/lint-type-overflow.rs:32:18\n    |\n LL |     let x: i32 = 2147483648;\n    |                  ^^^^^^^^^^\n \n-error: literal out of range for i32\n-  --> $DIR/lint-type-overflow.rs:35:13\n+error: literal out of range for `i32`\n+  --> $DIR/lint-type-overflow.rs:33:13\n    |\n LL |     let x = 2147483648_i32;\n    |             ^^^^^^^^^^^^^^\n \n-error: literal out of range for i32\n-  --> $DIR/lint-type-overflow.rs:38:19\n+error: literal out of range for `i32`\n+  --> $DIR/lint-type-overflow.rs:36:19\n    |\n LL |     let x: i32 = -2147483649;\n    |                   ^^^^^^^^^^\n \n-error: literal out of range for i32\n-  --> $DIR/lint-type-overflow.rs:39:14\n+error: literal out of range for `i32`\n+  --> $DIR/lint-type-overflow.rs:37:14\n    |\n LL |     let x = -2147483649_i32;\n    |              ^^^^^^^^^^^^^^\n \n-error: literal out of range for i32\n-  --> $DIR/lint-type-overflow.rs:40:13\n+error: literal out of range for `i32`\n+  --> $DIR/lint-type-overflow.rs:38:13\n    |\n LL |     let x = 2147483648;\n    |             ^^^^^^^^^^\n \n-error: literal out of range for i64\n-  --> $DIR/lint-type-overflow.rs:42:13\n+error: literal out of range for `i64`\n+  --> $DIR/lint-type-overflow.rs:40:13\n    |\n LL |     let x = 9223372036854775808_i64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: literal out of range for i64\n-  --> $DIR/lint-type-overflow.rs:44:13\n+error: literal out of range for `i64`\n+  --> $DIR/lint-type-overflow.rs:42:13\n    |\n LL |     let x = 18446744073709551615_i64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: literal out of range for i64\n-  --> $DIR/lint-type-overflow.rs:45:19\n+error: literal out of range for `i64`\n+  --> $DIR/lint-type-overflow.rs:43:19\n    |\n LL |     let x: i64 = -9223372036854775809;\n    |                   ^^^^^^^^^^^^^^^^^^^\n \n-error: literal out of range for i64\n-  --> $DIR/lint-type-overflow.rs:46:14\n+error: literal out of range for `i64`\n+  --> $DIR/lint-type-overflow.rs:44:14\n    |\n LL |     let x = -9223372036854775809_i64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c76e9e25d5a93207b554e968db811c186d326f38", "filename": "src/test/ui/lint/lint-type-overflow2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -1,4 +1,4 @@\n-warning: literal out of range for i8\n+warning: literal out of range for `i8`\n   --> $DIR/lint-type-overflow2.rs:9:20\n    |\n LL |     let x2: i8 = --128;\n@@ -10,25 +10,25 @@ note: lint level defined here\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for f32\n+warning: literal out of range for `f32`\n   --> $DIR/lint-type-overflow2.rs:11:14\n    |\n LL |     let x = -3.40282357e+38_f32;\n    |              ^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for f32\n+warning: literal out of range for `f32`\n   --> $DIR/lint-type-overflow2.rs:12:14\n    |\n LL |     let x =  3.40282357e+38_f32;\n    |              ^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for f64\n+warning: literal out of range for `f64`\n   --> $DIR/lint-type-overflow2.rs:13:14\n    |\n LL |     let x = -1.7976931348623159e+308_f64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for f64\n+warning: literal out of range for `f64`\n   --> $DIR/lint-type-overflow2.rs:14:14\n    |\n LL |     let x =  1.7976931348623159e+308_f64;"}, {"sha": "dabfb876fbb924b53b262bd487114bb0b3b85f6e", "filename": "src/test/ui/lint/type-overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/218982bef07c7d8518348f5d2a2eecf57edc0219/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr?ref=218982bef07c7d8518348f5d2a2eecf57edc0219", "patch": "@@ -1,4 +1,4 @@\n-warning: literal out of range for i8\n+warning: literal out of range for `i8`\n   --> $DIR/type-overflow.rs:5:17\n    |\n LL |     let error = 255i8;"}]}