{"sha": "cdb50c6f2507319f29104a25765bfb79ad53395c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjUwYzZmMjUwNzMxOWYyOTEwNGEyNTc2NWJmYjc5YWQ1MzM5NWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-25T05:46:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-25T05:46:43Z"}, "message": "Auto merge of #70383 - Centril:rollup-hmfft3y, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #70331 (Increase verbosity when using update syntax with private fields)\n - #70349 (move `hir_id_validation` to `rustc_passes` + simplify `hir::map` code)\n - #70361 (Update backtrace crate to 0.3.46)\n - #70364 (resolve: Remove `rustc_attrs` as a standalone feature gate)\n - #70369 (Fix smaller issues with invalid placeholder type errors)\n - #70373 (normalize some imports & prefer direct ones)\n - #70376 (Add test for #66312)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d9e53b03b1b3c003b95e3475ab759862f2001c60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9e53b03b1b3c003b95e3475ab759862f2001c60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb50c6f2507319f29104a25765bfb79ad53395c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb50c6f2507319f29104a25765bfb79ad53395c", "html_url": "https://github.com/rust-lang/rust/commit/cdb50c6f2507319f29104a25765bfb79ad53395c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb50c6f2507319f29104a25765bfb79ad53395c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02046a5d402c789c006d0da7662f800fe3c45faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/02046a5d402c789c006d0da7662f800fe3c45faf", "html_url": "https://github.com/rust-lang/rust/commit/02046a5d402c789c006d0da7662f800fe3c45faf"}, {"sha": "83fc855d03fff836aeed7ddd533b94916bf47081", "url": "https://api.github.com/repos/rust-lang/rust/commits/83fc855d03fff836aeed7ddd533b94916bf47081", "html_url": "https://github.com/rust-lang/rust/commit/83fc855d03fff836aeed7ddd533b94916bf47081"}], "stats": {"total": 692, "additions": 315, "deletions": 377}, "files": [{"sha": "8bf61989135301a1f74b761f9df58ed80baec9cc", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -121,9 +121,9 @@ checksum = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.45\"\n+version = \"0.3.46\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ad235dabf00f36301792cfe82499880ba54c6486be094d1047b02bacb67c14e8\"\n+checksum = \"b1e692897359247cc6bb902933361652380af0f1b7651ae5c5013407f30e109e\"\n dependencies = [\n  \"backtrace-sys\",\n  \"cfg-if\",\n@@ -135,9 +135,9 @@ dependencies = [\n \n [[package]]\n name = \"backtrace-sys\"\n-version = \"0.1.34\"\n+version = \"0.1.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ca797db0057bae1a7aa2eef3283a874695455cecf08a43bfb8507ee0ebc1ed69\"\n+checksum = \"7de8aba10a69c8e8d7622c5710229485ec32e9d55fdad160ea559c086fdcd118\"\n dependencies = [\n  \"cc\",\n  \"compiler_builtins\","}, {"sha": "aab8aa19ae57c5b6da3713aec85ca048553fcc4e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -49,8 +49,6 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n-use crate::hir::map::DefPathHash;\n-use crate::ich::Fingerprint;\n use crate::mir;\n use crate::mir::interpret::{GlobalId, LitToConstInput};\n use crate::traits;\n@@ -62,7 +60,9 @@ use crate::traits::query::{\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::definitions::DefPathHash;\n use rustc_hir::HirId;\n use rustc_span::symbol::Symbol;\n use std::hash::Hash;"}, {"sha": "725238f1d1a857bbbd1d839445d74e2728df438f", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,5 +1,4 @@\n use crate::arena::Arena;\n-use crate::hir::map::definitions::{self, DefPathHash};\n use crate::hir::map::{Entry, HirOwnerData, Map};\n use crate::hir::{Owner, OwnerNodes, ParentedNode};\n use crate::ich::StableHashingContext;\n@@ -11,6 +10,7 @@ use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n+use rustc_hir::definitions::{self, DefPathHash};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_index::vec::{Idx, IndexVec};"}, {"sha": "6290f5bb9b4189d09b3004e6fac41747a4502737", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 74, "deletions": 138, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -7,9 +7,7 @@ use rustc_ast::ast::{self, Name, NodeId};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n-pub use rustc_hir::definitions;\n-pub use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n-pub use rustc_hir::definitions::{Definitions, DisambiguatedDefPathData};\n+use rustc_hir::definitions::{DefKey, DefPath, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::Nested;\n@@ -23,8 +21,6 @@ use rustc_target::spec::abi::Abi;\n \n pub mod blocks;\n mod collector;\n-mod hir_id_validator;\n-pub use hir_id_validator::check_crate;\n \n /// Represents an entry and its parent `HirId`.\n #[derive(Copy, Clone, Debug)]\n@@ -44,79 +40,42 @@ impl<'hir> Entry<'hir> {\n \n fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {\n     match node {\n-        Node::Item(ref item) => match item.kind {\n-            ItemKind::Fn(ref sig, _, _) => Some(&sig.decl),\n-            _ => None,\n-        },\n-\n-        Node::TraitItem(ref item) => match item.kind {\n-            TraitItemKind::Fn(ref sig, _) => Some(&sig.decl),\n-            _ => None,\n-        },\n-\n-        Node::ImplItem(ref item) => match item.kind {\n-            ImplItemKind::Fn(ref sig, _) => Some(&sig.decl),\n-            _ => None,\n-        },\n-\n-        Node::Expr(ref expr) => match expr.kind {\n-            ExprKind::Closure(_, ref fn_decl, ..) => Some(fn_decl),\n-            _ => None,\n-        },\n-\n+        Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })\n+        | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })\n+        | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),\n+        Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. }) => Some(fn_decl),\n         _ => None,\n     }\n }\n \n fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {\n     match &node {\n-        Node::Item(item) => match &item.kind {\n-            ItemKind::Fn(sig, _, _) => Some(sig),\n-            _ => None,\n-        },\n-\n-        Node::TraitItem(item) => match &item.kind {\n-            TraitItemKind::Fn(sig, _) => Some(sig),\n-            _ => None,\n-        },\n-\n-        Node::ImplItem(item) => match &item.kind {\n-            ImplItemKind::Fn(sig, _) => Some(sig),\n-            _ => None,\n-        },\n-\n+        Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })\n+        | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })\n+        | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),\n         _ => None,\n     }\n }\n \n fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n     match node {\n-        Node::Item(item) => match item.kind {\n-            ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body) => {\n-                Some(body)\n-            }\n-            _ => None,\n-        },\n-\n-        Node::TraitItem(item) => match item.kind {\n-            TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)) => {\n-                Some(body)\n-            }\n-            _ => None,\n-        },\n-\n-        Node::ImplItem(item) => match item.kind {\n-            ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body) => Some(body),\n-            _ => None,\n-        },\n+        Node::Item(Item {\n+            kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),\n+            ..\n+        })\n+        | Node::TraitItem(TraitItem {\n+            kind:\n+                TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),\n+            ..\n+        })\n+        | Node::ImplItem(ImplItem {\n+            kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),\n+            ..\n+        })\n+        | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),\n \n         Node::AnonConst(constant) => Some(constant.body),\n \n-        Node::Expr(expr) => match expr.kind {\n-            ExprKind::Closure(.., body, _, _) => Some(body),\n-            _ => None,\n-        },\n-\n         _ => None,\n     }\n }\n@@ -520,20 +479,21 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn get_generics(&self, id: DefId) -> Option<&'hir Generics<'hir>> {\n-        self.get_if_local(id).and_then(|node| match node {\n-            Node::ImplItem(ref impl_item) => Some(&impl_item.generics),\n-            Node::TraitItem(ref trait_item) => Some(&trait_item.generics),\n-            Node::Item(ref item) => match item.kind {\n-                ItemKind::Fn(_, ref generics, _)\n-                | ItemKind::TyAlias(_, ref generics)\n-                | ItemKind::Enum(_, ref generics)\n-                | ItemKind::Struct(_, ref generics)\n-                | ItemKind::Union(_, ref generics)\n-                | ItemKind::Trait(_, _, ref generics, ..)\n-                | ItemKind::TraitAlias(ref generics, _)\n-                | ItemKind::Impl { ref generics, .. } => Some(generics),\n-                _ => None,\n-            },\n+        self.get_if_local(id).and_then(|node| match &node {\n+            Node::ImplItem(impl_item) => Some(&impl_item.generics),\n+            Node::TraitItem(trait_item) => Some(&trait_item.generics),\n+            Node::Item(Item {\n+                kind:\n+                    ItemKind::Fn(_, generics, _)\n+                    | ItemKind::TyAlias(_, generics)\n+                    | ItemKind::Enum(_, generics)\n+                    | ItemKind::Struct(_, generics)\n+                    | ItemKind::Union(_, generics)\n+                    | ItemKind::Trait(_, _, generics, ..)\n+                    | ItemKind::TraitAlias(generics, _)\n+                    | ItemKind::Impl { generics, .. },\n+                ..\n+            }) => Some(generics),\n             _ => None,\n         })\n     }\n@@ -573,11 +533,12 @@ impl<'hir> Map<'hir> {\n             _ => return false,\n         }\n         match self.find(self.get_parent_node(id)) {\n-            Some(Node::Item(_)) | Some(Node::TraitItem(_)) | Some(Node::ImplItem(_)) => true,\n-            Some(Node::Expr(e)) => match e.kind {\n-                ExprKind::Closure(..) => true,\n-                _ => false,\n-            },\n+            Some(\n+                Node::Item(_)\n+                | Node::TraitItem(_)\n+                | Node::ImplItem(_)\n+                | Node::Expr(Expr { kind: ExprKind::Closure(..), .. }),\n+            ) => true,\n             _ => false,\n         }\n     }\n@@ -644,12 +605,8 @@ impl<'hir> Map<'hir> {\n             if let (Some((_, next_node)), false) = (iter.peek(), ignore_tail) {\n                 match next_node {\n                     Node::Block(Block { expr: None, .. }) => return None,\n-                    Node::Block(Block { expr: Some(expr), .. }) => {\n-                        if hir_id != expr.hir_id {\n-                            // The current node is not the tail expression of its parent.\n-                            return None;\n-                        }\n-                    }\n+                    // The current node is not the tail expression of its parent.\n+                    Node::Block(Block { expr: Some(e), .. }) if hir_id != e.hir_id => return None,\n                     _ => {}\n                 }\n             }\n@@ -659,14 +616,11 @@ impl<'hir> Map<'hir> {\n                 | Node::TraitItem(_)\n                 | Node::Expr(Expr { kind: ExprKind::Closure(..), .. })\n                 | Node::ImplItem(_) => return Some(hir_id),\n-                Node::Expr(ref expr) => {\n-                    match expr.kind {\n-                        // Ignore `return`s on the first iteration\n-                        ExprKind::Loop(..) | ExprKind::Ret(..) => return None,\n-                        _ => {}\n-                    }\n+                // Ignore `return`s on the first iteration\n+                Node::Expr(Expr { kind: ExprKind::Loop(..) | ExprKind::Ret(..), .. })\n+                | Node::Local(_) => {\n+                    return None;\n                 }\n-                Node::Local(_) => return None,\n                 _ => {}\n             }\n         }\n@@ -710,17 +664,12 @@ impl<'hir> Map<'hir> {\n     pub fn get_match_if_cause(&self, hir_id: HirId) -> Option<&'hir Expr<'hir>> {\n         for (_, node) in self.parent_iter(hir_id) {\n             match node {\n-                Node::Item(_) | Node::ForeignItem(_) | Node::TraitItem(_) | Node::ImplItem(_) => {\n-                    break;\n-                }\n-                Node::Expr(expr) => match expr.kind {\n-                    ExprKind::Match(_, _, _) => return Some(expr),\n-                    _ => {}\n-                },\n-                Node::Stmt(stmt) => match stmt.kind {\n-                    StmtKind::Local(_) => break,\n-                    _ => {}\n-                },\n+                Node::Item(_)\n+                | Node::ForeignItem(_)\n+                | Node::TraitItem(_)\n+                | Node::ImplItem(_)\n+                | Node::Stmt(Stmt { kind: StmtKind::Local(_), .. }) => break,\n+                Node::Expr(expr @ Expr { kind: ExprKind::Match(..), .. }) => return Some(expr),\n                 _ => {}\n             }\n         }\n@@ -730,32 +679,22 @@ impl<'hir> Map<'hir> {\n     /// Returns the nearest enclosing scope. A scope is roughly an item or block.\n     pub fn get_enclosing_scope(&self, hir_id: HirId) -> Option<HirId> {\n         for (hir_id, node) in self.parent_iter(hir_id) {\n-            if match node {\n-                Node::Item(i) => match i.kind {\n+            if let Node::Item(Item {\n+                kind:\n                     ItemKind::Fn(..)\n                     | ItemKind::Mod(..)\n                     | ItemKind::Enum(..)\n                     | ItemKind::Struct(..)\n                     | ItemKind::Union(..)\n                     | ItemKind::Trait(..)\n-                    | ItemKind::Impl { .. } => true,\n-                    _ => false,\n-                },\n-                Node::ForeignItem(fi) => match fi.kind {\n-                    ForeignItemKind::Fn(..) => true,\n-                    _ => false,\n-                },\n-                Node::TraitItem(ti) => match ti.kind {\n-                    TraitItemKind::Fn(..) => true,\n-                    _ => false,\n-                },\n-                Node::ImplItem(ii) => match ii.kind {\n-                    ImplItemKind::Fn(..) => true,\n-                    _ => false,\n-                },\n-                Node::Block(_) => true,\n-                _ => false,\n-            } {\n+                    | ItemKind::Impl { .. },\n+                ..\n+            })\n+            | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(..), .. })\n+            | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(..), .. })\n+            | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(..), .. })\n+            | Node::Block(_) = node\n+            {\n                 return Some(hir_id);\n             }\n         }\n@@ -771,11 +710,11 @@ impl<'hir> Map<'hir> {\n                 return CRATE_HIR_ID;\n             }\n             match self.get(scope) {\n-                Node::Item(i) => match i.kind {\n-                    ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: None, .. }) => {}\n-                    _ => break,\n-                },\n-                Node::Block(_) => {}\n+                Node::Item(Item {\n+                    kind: ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: None, .. }),\n+                    ..\n+                })\n+                | Node::Block(_) => {}\n                 _ => break,\n             }\n         }\n@@ -823,14 +762,11 @@ impl<'hir> Map<'hir> {\n \n     pub fn expect_variant_data(&self, id: HirId) -> &'hir VariantData<'hir> {\n         match self.find(id) {\n-            Some(Node::Item(i)) => match i.kind {\n-                ItemKind::Struct(ref struct_def, _) | ItemKind::Union(ref struct_def, _) => {\n-                    struct_def\n-                }\n-                _ => bug!(\"struct ID bound to non-struct {}\", self.node_to_string(id)),\n-            },\n+            Some(\n+                Node::Ctor(vd)\n+                | Node::Item(Item { kind: ItemKind::Struct(vd, _) | ItemKind::Union(vd, _), .. }),\n+            ) => vd,\n             Some(Node::Variant(variant)) => &variant.data,\n-            Some(Node::Ctor(data)) => data,\n             _ => bug!(\"expected struct or variant, found {}\", self.node_to_string(id)),\n         }\n     }"}, {"sha": "a9466e8252de7217db9fc43e62aba4fff6fc8956", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,5 +1,4 @@\n-use crate::hir::map::definitions::{DefPathHash, Definitions};\n-use crate::ich::{self, CachingSourceMapView};\n+use crate::ich;\n use crate::middle::cstore::CrateStore;\n use crate::ty::{fast_reject, TyCtxt};\n \n@@ -9,10 +8,11 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::definitions::{DefPathHash, Definitions};\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{BytePos, SourceFile};\n+use rustc_span::{BytePos, CachingSourceMapView, SourceFile};\n \n use smallvec::SmallVec;\n use std::cmp::Ord;"}, {"sha": "f668cc99754f4e2265c20841b490fbcb75cafd91", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,12 +1,13 @@\n //! This module contains `HashStable` implementations for various HIR data\n //! types in no particular order.\n \n-use crate::hir::map::DefPathHash;\n-use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n+use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_attr as attr;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::definitions::DefPathHash;\n use smallvec::SmallVec;\n use std::mem;\n "}, {"sha": "41cc8cbaebb6ec3abe311be2853ace61b7b7bbec", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,10 +1,11 @@\n //! This module contains `HashStable` implementations for various data types\n //! from rustc::ty in no particular order.\n \n-use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n+use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::middle::region;\n use crate::mir;\n use crate::ty;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use std::cell::RefCell;"}, {"sha": "516e3ed979c7ca48271a6ed41b19f6016fb95db4", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -3,7 +3,6 @@\n pub use self::hcx::{\n     hash_stable_trait_impls, NodeIdHashingMode, StableHashingContext, StableHashingContextProvider,\n };\n-crate use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_span::symbol::{sym, Symbol};\n pub use rustc_span::CachingSourceMapView;\n "}, {"sha": "012390e8f74b8712477d9e4972966306b16cc4af", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -4,14 +4,14 @@\n \n pub use self::NativeLibraryKind::*;\n \n-use crate::hir::map::definitions::{DefKey, DefPath, DefPathHash, DefPathTable};\n use crate::ty::TyCtxt;\n \n use rustc_ast::ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::definitions::{DefKey, DefPath, DefPathHash, DefPathTable};\n use rustc_macros::HashStable;\n use rustc_session::search_paths::PathKind;\n pub use rustc_session::utils::NativeLibraryKind;"}, {"sha": "c46ab89d0049c8b84a6f073b2b0c47c75acc0349", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,6 +1,5 @@\n use super::{AllocId, CheckInAllocMsg, Pointer, RawConst, ScalarMaybeUndef};\n \n-use crate::hir::map::definitions::DefPathData;\n use crate::mir::interpret::ConstValue;\n use crate::ty::layout::{Align, LayoutError, Size};\n use crate::ty::query::TyCtxtAt;\n@@ -11,6 +10,7 @@ use backtrace::Backtrace;\n use rustc_data_structures::sync::Lock;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_hir::definitions::DefPathData;\n use rustc_macros::HashStable;\n use rustc_session::CtfeBacktrace;\n use rustc_span::{def_id::DefId, Pos, Span};"}, {"sha": "0b64cb479d5598ba10d090432e741f0866d85c1a", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,9 +1,10 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n-use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n+use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n use rustc_attr::InlineAttr;\n use rustc_data_structures::base_n;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};"}, {"sha": "ef1532bbf2500cf10713c076bccc0986d1111fc5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -4,9 +4,6 @@ use crate::arena::Arena;\n use crate::dep_graph::DepGraph;\n use crate::dep_graph::{self, DepConstructor};\n use crate::hir::exports::Export;\n-use crate::hir::map as hir_map;\n-use crate::hir::map::definitions::Definitions;\n-use crate::hir::map::{DefPathData, DefPathHash};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintSource};\n@@ -56,6 +53,7 @@ use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::definitions::{DefPathData, DefPathHash, Definitions};\n use rustc_hir::{HirId, Node, TraitCandidate};\n use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n use rustc_index::vec::{Idx, IndexVec};\n@@ -1236,7 +1234,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.features_query(LOCAL_CRATE)\n     }\n \n-    pub fn def_key(self, id: DefId) -> hir_map::DefKey {\n+    pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {\n         if let Some(id) = id.as_local() { self.hir().def_key(id) } else { self.cstore.def_key(id) }\n     }\n \n@@ -1245,7 +1243,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// Note that if `id` is not local to this crate, the result will\n     ///  be a non-local `DefPath`.\n-    pub fn def_path(self, id: DefId) -> hir_map::DefPath {\n+    pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {\n         if let Some(id) = id.as_local() {\n             self.hir().def_path(id)\n         } else {\n@@ -1260,7 +1258,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(self, def_id: DefId) -> hir_map::DefPathHash {\n+    pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {\n         if let Some(def_id) = def_id.as_local() {\n             self.definitions.def_path_hash(def_id)\n         } else {"}, {"sha": "fcfee0fea85aff4007e82c65acb9e40924a90ac4", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -166,7 +166,7 @@ impl<'tcx> InstanceDef<'tcx> {\n     /// Note that this is only a hint. See the documentation for\n     /// `generates_cgu_internal_copy` for more information.\n     pub fn requires_inline(&self, tcx: TyCtxt<'tcx>) -> bool {\n-        use crate::hir::map::DefPathData;\n+        use rustc_hir::definitions::DefPathData;\n         let def_id = match *self {\n             ty::InstanceDef::Item(def_id) => def_id,\n             ty::InstanceDef::DropGlue(_, Some(_)) => return false,"}, {"sha": "43982439d47c89cdeec728cedd2d75934baee9b6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -8,8 +8,6 @@ pub use self::Variance::*;\n \n use crate::arena::Arena;\n use crate::hir::exports::ExportMap;\n-use crate::hir::map as hir_map;\n-use crate::ich::Fingerprint;\n use crate::ich::StableHashingContext;\n use crate::infer::canonical::Canonical;\n use crate::middle::cstore::CrateStoreDyn;\n@@ -28,6 +26,7 @@ use rustc_ast::ast::{self, Ident, Name};\n use rustc_ast::node_id::{NodeId, NodeMap, NodeSet};\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n@@ -124,7 +123,7 @@ mod sty;\n // Data types\n \n pub struct ResolverOutputs {\n-    pub definitions: hir_map::Definitions,\n+    pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n     pub extern_crate_map: NodeMap<CrateNum>,\n     pub trait_map: TraitMap<NodeId>,\n@@ -2986,7 +2985,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             let def_key = self.def_key(id);\n             match def_key.disambiguated_data.data {\n                 // The name of a constructor is that of its parent.\n-                hir_map::DefPathData::Ctor => {\n+                rustc_hir::definitions::DefPathData::Ctor => {\n                     self.item_name(DefId { krate: id.krate, index: def_key.parent.unwrap() })\n                 }\n                 _ => def_key.disambiguated_data.data.get_opt_name().unwrap_or_else(|| {"}, {"sha": "a932f334dde68abba1d8d5902a7f2662b00003b5", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,9 +1,9 @@\n-use crate::hir::map::{DefPathData, DisambiguatedDefPathData};\n use crate::ty::subst::{GenericArg, Subst};\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n \n // `pretty` is a separate module only for organization.\n mod pretty;"}, {"sha": "8d5d6247f5c05334b8998a2900087e053feeeae9", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,18 +1,17 @@\n-use crate::hir::map::{DefPathData, DisambiguatedDefPathData};\n use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use crate::middle::region;\n use crate::mir::interpret::{sign_extend, truncate, AllocId, ConstValue, Pointer, Scalar};\n use crate::ty::layout::{Integer, IntegerExt, Size};\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n-use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Namespace};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_ast::ast;\n use rustc_attr::{SignedInt, UnsignedInt};\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Namespace};\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_span::symbol::{kw, Symbol};\n use rustc_target::spec::abi::Abi;\n "}, {"sha": "155f792bd9d0ad92dde106a3e9f4a152f19ecd30", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,17 +1,17 @@\n use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n-use crate::hir::map::definitions::DefPathHash;\n-use crate::ich::{CachingSourceMapView, Fingerprint};\n use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use crate::mir::{self, interpret};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n use rustc_ast::ast::Ident;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, Once};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::definitions::DefPathHash;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_serialize::{\n     opaque, Decodable, Decoder, Encodable, Encoder, SpecializedDecoder, SpecializedEncoder,\n@@ -20,6 +20,7 @@ use rustc_serialize::{\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::hygiene::{ExpnId, SyntaxContext};\n use rustc_span::source_map::{SourceMap, StableSourceFileId};\n+use rustc_span::CachingSourceMapView;\n use rustc_span::{BytePos, SourceFile, Span, DUMMY_SP};\n use std::mem;\n "}, {"sha": "3aac03bd49a13342f0bc1849bdfae70a6e3e72e2", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -667,7 +667,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         dep_node: &DepNode,\n         dep_node_index: DepNodeIndex,\n     ) {\n-        use crate::ich::Fingerprint;\n+        use rustc_data_structures::fingerprint::Fingerprint;\n \n         assert!(\n             Some(self.dep_graph.fingerprint_of(dep_node_index))"}, {"sha": "0081794051f377ce3d2d8aeba9c119525ff307af", "filename": "src/librustc/ty/query/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,11 +1,11 @@\n-use crate::hir::map::definitions::DefPathData;\n use crate::ty::context::TyCtxt;\n use crate::ty::query::caches::QueryCache;\n use crate::ty::query::plumbing::QueryState;\n use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::definitions::DefPathData;\n use std::fmt::Debug;\n use std::io::Write;\n "}, {"sha": "ed9054fcffd91bc404a90b131f037578fa123eb7", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,11 +1,11 @@\n-use crate::hir::map::DefPathHash;\n use crate::ich::{self, StableHashingContext};\n use crate::traits::specialization_graph;\n use crate::ty::fast_reject;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::definitions::DefPathHash;\n use rustc_hir::HirId;\n \n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "dab367a6639ed84d92d8dc4bf9ee6b1c136303a3", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,6 +1,5 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n-use crate::hir::map::DefPathData;\n use crate::ich::NodeIdHashingMode;\n use crate::mir::interpret::{sign_extend, truncate};\n use crate::ty::layout::{Integer, IntegerExt, Size};\n@@ -17,6 +16,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::definitions::DefPathData;\n use rustc_macros::HashStable;\n use rustc_span::Span;\n use rustc_target::abi::TargetDataLayout;"}, {"sha": "4e507a569dcd12ab812273699fe3f03c5f4eda12", "filename": "src/librustc_codegen_llvm/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -6,8 +6,8 @@ use rustc::ty::{self, Instance};\n use crate::common::CodegenCx;\n use crate::llvm;\n use crate::llvm::debuginfo::DIScope;\n-use rustc::hir::map::DefPathData;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::definitions::DefPathData;\n \n pub fn mangled_name_of_instance<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,"}, {"sha": "9c22c38583c334d5e9e332d270a1374bc3376eb0", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -55,7 +55,6 @@ use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n };\n \n-use rustc::hir::map;\n use rustc::middle::region;\n use rustc::ty::error::TypeError;\n use rustc::ty::{\n@@ -549,7 +548,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         terr: &TypeError<'tcx>,\n     ) {\n         use hir::def_id::CrateNum;\n-        use map::DisambiguatedDefPathData;\n+        use rustc_hir::definitions::DisambiguatedDefPathData;\n         use ty::print::Printer;\n         use ty::subst::GenericArg;\n "}, {"sha": "7cf0b4c44a6aa57c7d07bf78f4aaae99884af950", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -5,7 +5,6 @@ use crate::util;\n use log::{info, log_enabled, warn};\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::hir::map::Definitions;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n use rustc::ty::steal::Steal;\n@@ -20,6 +19,7 @@ use rustc_data_structures::{box_region_allow_access, declare_box_region_type, pa\n use rustc_errors::PResult;\n use rustc_expand::base::ExtCtxt;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_hir::definitions::Definitions;\n use rustc_hir::Crate;\n use rustc_lint::LintStore;\n use rustc_mir as mir;\n@@ -776,7 +776,7 @@ pub fn create_global_ctxt<'tcx>(\n fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n-    rustc::hir::map::check_crate(tcx);\n+    rustc_passes::hir_id_validator::check_crate(tcx);\n \n     let sess = tcx.sess;\n     let mut entry_point = None;"}, {"sha": "a807fa6b8d4661c0b8d4c921551359792ee61f86", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -3,7 +3,6 @@\n use crate::locator::{CrateLocator, CratePaths};\n use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob};\n \n-use rustc::hir::map::Definitions;\n use rustc::middle::cstore::DepKind;\n use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoaderDyn};\n use rustc::ty::TyCtxt;\n@@ -14,6 +13,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_hir::definitions::Definitions;\n use rustc_index::vec::IndexVec;\n use rustc_session::config;\n use rustc_session::output::validate_crate_name;"}, {"sha": "57415c0a6070dddd66b65584a65fd7ab8b23f8d8", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -2,7 +2,6 @@ use decoder::Metadata;\n use table::{Table, TableBuilder};\n \n use rustc::hir::exports::Export;\n-use rustc::hir::map;\n use rustc::middle::cstore::{DepKind, ForeignModule, LinkagePreference, NativeLibrary};\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::lang_items;\n@@ -194,7 +193,7 @@ crate struct CrateRoot<'tcx> {\n     native_libraries: Lazy<[NativeLibrary]>,\n     foreign_modules: Lazy<[ForeignModule]>,\n     source_map: Lazy<[rustc_span::SourceFile]>,\n-    def_path_table: Lazy<map::definitions::DefPathTable>,\n+    def_path_table: Lazy<rustc_hir::definitions::DefPathTable>,\n     impls: Lazy<[TraitImpls]>,\n     interpret_alloc_index: Lazy<[u32]>,\n "}, {"sha": "0d9582c7323cbe0a4c2286c2d1ba9d2c79c0e8c9", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n use rustc::mir::interpret::Allocation;\n use rustc::ty::{\n     self,\n@@ -7,6 +6,7 @@ use rustc::ty::{\n     Ty, TyCtxt,\n };\n use rustc_hir::def_id::CrateNum;\n+use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use std::fmt::Write;\n \n struct AbsolutePathPrinter<'tcx> {"}, {"sha": "a78e45eebbed422d676b65a508dedf72f5a78829", "filename": "src/librustc_passes/hir_id_validator.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_passes%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_passes%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_id_validator.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,5 +1,5 @@\n-use crate::hir::map::Map;\n-use crate::ty::TyCtxt;\n+use rustc::hir::map::Map;\n+use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;", "previous_filename": "src/librustc/hir/map/hir_id_validator.rs"}, {"sha": "ab978edb8c3de4f02015f4a0709490bd3aaa855e", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -21,6 +21,7 @@ mod check_const;\n pub mod dead;\n mod diagnostic_items;\n pub mod entry;\n+pub mod hir_id_validator;\n pub mod hir_stats;\n mod intrinsicck;\n mod lang_items;"}, {"sha": "8734cee366abf0f609d7ad3507be9ce75ead0edf", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1023,12 +1023,19 @@ impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n         span: Span,            // span of the field pattern, e.g., `x: 0`\n         def: &'tcx ty::AdtDef, // definition of the struct or enum\n         field: &'tcx ty::FieldDef,\n+        in_update_syntax: bool,\n     ) {\n         // definition of the field\n         let ident = Ident::new(kw::Invalid, use_ctxt);\n         let current_hir = self.current_item;\n         let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, current_hir).1;\n         if !def.is_enum() && !field.vis.is_accessible_from(def_id, self.tcx) {\n+            let label = if in_update_syntax {\n+                format!(\"field `{}` is private\", field.ident)\n+            } else {\n+                \"private field\".to_string()\n+            };\n+\n             struct_span_err!(\n                 self.tcx.sess,\n                 span,\n@@ -1038,7 +1045,7 @@ impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n                 def.variant_descr(),\n                 self.tcx.def_path_str(def.did)\n             )\n-            .span_label(span, \"private field\")\n+            .span_label(span, label)\n             .emit();\n         }\n     }\n@@ -1106,13 +1113,13 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n                             Some(field) => (field.ident.span, field.span),\n                             None => (base.span, base.span),\n                         };\n-                        self.check_field(use_ctxt, span, adt, variant_field);\n+                        self.check_field(use_ctxt, span, adt, variant_field, true);\n                     }\n                 } else {\n                     for field in fields {\n                         let use_ctxt = field.ident.span;\n                         let index = self.tcx.field_index(field.hir_id, self.tables);\n-                        self.check_field(use_ctxt, field.span, adt, &variant.fields[index]);\n+                        self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);\n                     }\n                 }\n             }\n@@ -1131,7 +1138,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n                 for field in fields {\n                     let use_ctxt = field.ident.span;\n                     let index = self.tcx.field_index(field.hir_id, self.tables);\n-                    self.check_field(use_ctxt, field.span, adt, &variant.fields[index]);\n+                    self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);\n                 }\n             }\n             _ => {}"}, {"sha": "ed304572a06218a1b10705f08627c52d6625d440", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -17,7 +17,6 @@ pub use rustc_hir::def::{Namespace, PerNS};\n use Determinacy::*;\n \n use rustc::hir::exports::ExportMap;\n-use rustc::hir::map::{DefKey, Definitions};\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n@@ -38,6 +37,7 @@ use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX};\n+use rustc_hir::definitions::{DefKey, Definitions};\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};"}, {"sha": "a783cfa4811fd8988cb3852dbbb2cbeca1ae9c65", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -20,7 +20,6 @@ use rustc_feature::is_builtin_attr_name;\n use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id;\n use rustc_session::lint::builtin::UNUSED_MACROS;\n-use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n@@ -397,20 +396,16 @@ impl<'a> Resolver<'a> {\n             Err(Determinacy::Undetermined) => return Err(Indeterminate),\n         };\n \n-        // Report errors and enforce feature gates for the resolved macro.\n-        let features = self.session.features_untracked();\n+        // Report errors for the resolved macro.\n         for segment in &path.segments {\n             if let Some(args) = &segment.args {\n                 self.session.span_err(args.span(), \"generic arguments in macro path\");\n             }\n-            if kind == MacroKind::Attr\n-                && !features.rustc_attrs\n-                && segment.ident.as_str().starts_with(\"rustc\")\n-            {\n-                let msg =\n-                    \"attributes starting with `rustc` are reserved for use by the `rustc` compiler\";\n-                feature_err(&self.session.parse_sess, sym::rustc_attrs, segment.ident.span, msg)\n-                    .emit();\n+            if kind == MacroKind::Attr && segment.ident.as_str().starts_with(\"rustc\") {\n+                self.session.span_err(\n+                    segment.ident.span,\n+                    \"attributes starting with `rustc` are reserved for use by the `rustc` compiler\",\n+                );\n             }\n         }\n "}, {"sha": "a891d60b0687b7482c1533642888eaeafdbd35a7", "filename": "src/librustc_symbol_mangling/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flegacy.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n use rustc::ich::NodeIdHashingMode;\n use rustc::mir::interpret::{ConstValue, Scalar};\n use rustc::ty::print::{PrettyPrinter, Print, Printer};\n@@ -7,6 +6,7 @@ use rustc::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common::record_time;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::CrateNum;\n+use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n \n use log::debug;\n "}, {"sha": "fb2fde8513ac9f4c8c93018479b7c424c507d81e", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n use rustc::ty::print::{Print, Printer};\n use rustc::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n@@ -7,6 +6,7 @@ use rustc_data_structures::base_n;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_target::spec::abi::Abi;\n \n use std::fmt::Write;"}, {"sha": "3bf144e9643f0e528d4d051e4a024c68aa63fbb1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -2883,16 +2883,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let bare_fn_ty =\n             ty::Binder::bind(tcx.mk_fn_sig(input_tys, output_ty, decl.c_variadic, unsafety, abi));\n \n-        if !self.allow_ty_infer() {\n+        if let (false, Some(ident_span)) = (self.allow_ty_infer(), ident_span) {\n             // We always collect the spans for placeholder types when evaluating `fn`s, but we\n             // only want to emit an error complaining about them if infer types (`_`) are not\n-            // allowed. `allow_ty_infer` gates this behavior.\n+            // allowed. `allow_ty_infer` gates this behavior. We check for the presence of\n+            // `ident_span` to not emit an error twice when we have `fn foo(_: fn() -> _)`.\n             crate::collect::placeholder_type_error(\n                 tcx,\n-                ident_span.map(|sp| sp.shrink_to_hi()).unwrap_or(DUMMY_SP),\n+                ident_span.shrink_to_hi(),\n                 &generics.params[..],\n                 visitor.0,\n-                ident_span.is_some(),\n+                true,\n             );\n         }\n "}, {"sha": "42cd7246f086e2ce0caaa564a7b78826bdb72d7e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -162,8 +162,10 @@ crate fn placeholder_type_error(\n         // `struct S<T>(T);` instead of `struct S<_, T>(T);`.\n         sugg.push((arg.span, (*type_name).to_string()));\n     } else {\n+        let last = generics.iter().last().unwrap();\n         sugg.push((\n-            generics.iter().last().unwrap().span.shrink_to_hi(),\n+            // Account for bounds, we want `fn foo<T: E, K>(_: K)` not `fn foo<T, K: E>(_: K)`.\n+            last.bounds_span().unwrap_or(last.span).shrink_to_hi(),\n             format!(\", {}\", type_name),\n         ));\n     }\n@@ -1501,9 +1503,13 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl, &generics, Some(ident.span))\n         }\n \n-        ForeignItem(&hir::ForeignItem { kind: ForeignItemKind::Fn(ref fn_decl, _, _), .. }) => {\n+        ForeignItem(&hir::ForeignItem {\n+            kind: ForeignItemKind::Fn(ref fn_decl, _, _),\n+            ident,\n+            ..\n+        }) => {\n             let abi = tcx.hir().get_foreign_abi(hir_id);\n-            compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi)\n+            compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi, ident)\n         }\n \n         Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor_hir_id().is_some() => {\n@@ -2116,6 +2122,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     def_id: DefId,\n     decl: &'tcx hir::FnDecl<'tcx>,\n     abi: abi::Abi,\n+    ident: Ident,\n ) -> ty::PolyFnSig<'tcx> {\n     let unsafety = if abi == abi::Abi::RustIntrinsic {\n         intrinsic_operation_unsafety(&tcx.item_name(def_id).as_str())\n@@ -2128,7 +2135,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n         abi,\n         decl,\n         &hir::Generics::empty(),\n-        None,\n+        Some(ident.span),\n     );\n \n     // Feature gate SIMD types in FFI, since I am not sure that the"}, {"sha": "0dd2f79d066e44b5c634e761381586600393b58a", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -27,7 +27,7 @@ hashbrown = { version = \"0.6.2\", default-features = false, features = ['rustc-de\n \n [dependencies.backtrace_rs]\n package = \"backtrace\"\n-version = \"0.3.44\"\n+version = \"0.3.46\"\n default-features = false # without the libstd `backtrace` feature, stub out everything\n features = [ \"rustc-dep-of-std\" ] # enable build support for integrating into libstd\n "}, {"sha": "f8cb1640cb4c16d8a7dc770cb610bd22d9298a3c", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -2,19 +2,19 @@\n \n #![feature(plugin_registrar, rustc_private)]\n #![feature(box_syntax)]\n+\n extern crate rustc_driver;\n extern crate rustc_hir;\n-extern crate rustc_span;\n-#[macro_use]\n extern crate rustc_lint;\n+extern crate rustc_span;\n #[macro_use]\n extern crate rustc_session;\n extern crate rustc_ast;\n \n+use rustc_ast::attr;\n use rustc_driver::plugin::Registry;\n use rustc_lint::{LateContext, LateLintPass, LintContext, LintPass};\n use rustc_span::symbol::Symbol;\n-use rustc_ast::attr;\n \n macro_rules! fake_lint_pass {\n     ($struct:ident, $($attr:expr),*) => {\n@@ -50,17 +50,17 @@ declare_lint!(CRATE_NOT_GREEN, Warn, \"crate not marked with #![crate_green]\");\n \n fake_lint_pass! {\n     PassOkay,\n-    Symbol::intern(\"rustc_crate_okay\")\n+    Symbol::intern(\"crate_okay\")\n }\n \n fake_lint_pass! {\n     PassRedBlue,\n-    Symbol::intern(\"rustc_crate_red\"), Symbol::intern(\"rustc_crate_blue\")\n+    Symbol::intern(\"crate_red\"), Symbol::intern(\"crate_blue\")\n }\n \n fake_lint_pass! {\n     PassGreyGreen,\n-    Symbol::intern(\"rustc_crate_grey\"), Symbol::intern(\"rustc_crate_green\")\n+    Symbol::intern(\"crate_grey\"), Symbol::intern(\"crate_green\")\n }\n \n #[plugin_registrar]"}, {"sha": "56a560acbb44a26c16c58444e7322df5e6100add", "filename": "src/test/ui-fulldeps/auxiliary/macro-crate-test.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/02046a5d402c789c006d0da7662f800fe3c45faf/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fmacro-crate-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02046a5d402c789c006d0da7662f800fe3c45faf/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fmacro-crate-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fmacro-crate-test.rs?ref=02046a5d402c789c006d0da7662f800fe3c45faf", "patch": "@@ -1,33 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_ast;\n-extern crate rustc;\n-extern crate rustc_driver;\n-extern crate proc_macro;\n-\n-use proc_macro::{TokenTree, TokenStream};\n-\n-#[proc_macro_attribute]\n-pub fn rustc_duplicate(attr: TokenStream, item: TokenStream) -> TokenStream {\n-    let mut new_name = Some(attr.into_iter().nth(0).unwrap());\n-    let mut encountered_idents = 0;\n-    let input = item.to_string();\n-    let ret = item.into_iter().map(move |token| match token {\n-        TokenTree::Ident(_) if encountered_idents == 1 => {\n-            encountered_idents += 1;\n-            new_name.take().unwrap()\n-        }\n-        TokenTree::Ident(_) => {\n-            encountered_idents += 1;\n-            token\n-        }\n-        _ => token\n-    }).collect::<TokenStream>();\n-    let mut input_again = input.parse::<TokenStream>().unwrap();\n-    input_again.extend(ret);\n-    input_again\n-}"}, {"sha": "c031dbc7155db2c49888f7c8f91340f8ecb9a289", "filename": "src/test/ui-fulldeps/issue-15778-pass.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,23 +1,23 @@\n-// run-pass\n+// check-pass\n // aux-build:lint-for-crate-rpass.rs\n // ignore-stage1\n // compile-flags: -D crate-not-okay\n \n-#![feature(plugin, register_attr, custom_inner_attributes, rustc_attrs)]\n+#![feature(plugin, register_attr, custom_inner_attributes)]\n \n #![register_attr(\n-    rustc_crate_okay,\n-    rustc_crate_blue,\n-    rustc_crate_red,\n-    rustc_crate_grey,\n-    rustc_crate_green,\n+    crate_okay,\n+    crate_blue,\n+    crate_red,\n+    crate_grey,\n+    crate_green,\n )]\n \n #![plugin(lint_for_crate_rpass)] //~ WARNING compiler plugins are deprecated\n-#![rustc_crate_okay]\n-#![rustc_crate_blue]\n-#![rustc_crate_red]\n-#![rustc_crate_grey]\n-#![rustc_crate_green]\n+#![crate_okay]\n+#![crate_blue]\n+#![crate_red]\n+#![crate_grey]\n+#![crate_green]\n \n fn main() {}"}, {"sha": "9224971ecb123210b57620e5c583352d76047e2a", "filename": "src/test/ui/async-await/issue-66312.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fasync-await%2Fissue-66312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fasync-await%2Fissue-66312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-66312.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+\n+trait Test<T> {\n+    fn is_some(self: T); //~ ERROR invalid `self` parameter type\n+}\n+\n+async fn f() {\n+    let x = Some(2);\n+    if x.is_some() {\n+        println!(\"Some\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "80d294a10a018a5eba3de1be3bd561be4fb74ba7", "filename": "src/test/ui/async-await/issue-66312.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fasync-await%2Fissue-66312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fasync-await%2Fissue-66312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-66312.stderr?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -0,0 +1,12 @@\n+error[E0307]: invalid `self` parameter type: T\n+  --> $DIR/issue-66312.rs:4:22\n+   |\n+LL |     fn is_some(self: T);\n+   |                      ^\n+   |\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "c409ea9c6576d78a32c3601ec81a451ad9241148", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -145,8 +145,8 @@ LL | fn foo<X: K<_, _>>(x: X) {}\n    |\n help: use type parameters instead\n    |\n-LL | fn foo<X, T: K<T, T>>(x: X) {}\n-   |         ^^^    ^  ^\n+LL | fn foo<X: K<T, T>, T>(x: X) {}\n+   |             ^  ^ ^^^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/bad-assoc-ty.rs:52:34\n@@ -167,8 +167,8 @@ LL | fn baz<F: Fn() -> _>(_: F) {}\n    |\n help: use type parameters instead\n    |\n-LL | fn baz<F, T: Fn() -> T>(_: F) {}\n-   |         ^^^          ^\n+LL | fn baz<F: Fn() -> T, T>(_: F) {}\n+   |                   ^^^^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/bad-assoc-ty.rs:58:33"}, {"sha": "1517a7a5c731ab0dfc42d2fae861f97c3698894d", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,38 +1,32 @@\n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/feature-gate-rustc-attrs.rs:8:3\n    |\n LL | #[rustc::unknown]\n    |   ^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: expected attribute, found macro `rustc::unknown`\n   --> $DIR/feature-gate-rustc-attrs.rs:8:3\n    |\n LL | #[rustc::unknown]\n    |   ^^^^^^^^^^^^^^ not an attribute\n \n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/feature-gate-rustc-attrs.rs:13:12\n    |\n LL | #[unknown::rustc]\n    |            ^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: expected attribute, found macro `unknown::rustc`\n   --> $DIR/feature-gate-rustc-attrs.rs:13:3\n    |\n LL | #[unknown::rustc]\n    |   ^^^^^^^^^^^^^^ not an attribute\n \n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/feature-gate-rustc-attrs.rs:20:3\n    |\n LL | #[rustc_unknown]\n    |   ^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: cannot find attribute `rustc_unknown` in this scope\n   --> $DIR/feature-gate-rustc-attrs.rs:20:3"}, {"sha": "2aeffc3e5e4575ac809ac5c15ff4417f59c4fd36", "filename": "src/test/ui/functional-struct-update/functional-struct-update-respects-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.stderr?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -2,7 +2,7 @@ error[E0451]: field `secret_uid` of struct `foo::S` is private\n   --> $DIR/functional-struct-update-respects-privacy.rs:28:49\n    |\n LL |     let s_2 = foo::S { b: format!(\"ess two\"), ..s_1 }; // FRU ...\n-   |                                                 ^^^ private field\n+   |                                                 ^^^ field `secret_uid` is private\n \n error: aborting due to previous error\n "}, {"sha": "b8f82b46f094513d0b85ae1163f3b77663b601cc", "filename": "src/test/ui/proc-macro/auxiliary/duplicate.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fduplicate.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -0,0 +1,32 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![deny(unused)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn duplicate(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    let mut new_name = Some(attr.into_iter().nth(0).unwrap());\n+    let mut encountered_idents = 0;\n+    let input = item.to_string();\n+    let ret = item\n+        .into_iter()\n+        .map(move |token| match token {\n+            TokenTree::Ident(_) if encountered_idents == 1 => {\n+                encountered_idents += 1;\n+                new_name.take().unwrap()\n+            }\n+            TokenTree::Ident(_) => {\n+                encountered_idents += 1;\n+                token\n+            }\n+            _ => token,\n+        })\n+        .collect::<TokenStream>();\n+    let mut input_again = input.parse::<TokenStream>().unwrap();\n+    input_again.extend(ret);\n+    input_again\n+}"}, {"sha": "5974fa4c554ca33974d48832bfbe3a991e610de6", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,12 +1,10 @@\n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/expand-to-unstable-2.rs:10:10\n    |\n LL | #[derive(Unstable)]\n    |          ^^^^^^^^\n    |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "ec57dec14ed203b39fd99a40cc6e92d161f68510", "filename": "src/test/ui/proc-macro/macro-crate-multi-decorator.rs", "status": "renamed", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-crate-multi-decorator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-crate-multi-decorator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-crate-multi-decorator.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,36 +1,33 @@\n-// check-pass\n-// aux-build:macro-crate-test.rs\n-// ignore-stage1\n+// The duplicate macro will create a copy of the item with the given identifier.\n \n-#![feature(rustc_attrs)]\n+// check-pass\n+// aux-build:duplicate.rs\n \n #[macro_use]\n-extern crate macro_crate_test;\n-\n-// The duplicate macro will create a copy of the item with the given identifier.\n+extern crate duplicate;\n \n-#[rustc_duplicate(MyCopy)]\n+#[duplicate(MyCopy)]\n struct MyStruct {\n-    number: i32\n+    number: i32,\n }\n \n trait TestTrait {\n-    #[rustc_duplicate(TestType2)]\n+    #[duplicate(TestType2)]\n     type TestType;\n \n-    #[rustc_duplicate(required_fn2)]\n+    #[duplicate(required_fn2)]\n     fn required_fn(&self);\n \n-    #[rustc_duplicate(provided_fn2)]\n-    fn provided_fn(&self) { }\n+    #[duplicate(provided_fn2)]\n+    fn provided_fn(&self) {}\n }\n \n impl TestTrait for MyStruct {\n-    #[rustc_duplicate(TestType2)]\n+    #[duplicate(TestType2)]\n     type TestType = f64;\n \n-    #[rustc_duplicate(required_fn2)]\n-    fn required_fn(&self) { }\n+    #[duplicate(required_fn2)]\n+    fn required_fn(&self) {}\n }\n \n fn main() {", "previous_filename": "src/test/ui-fulldeps/macro-crate-multi-decorator.rs"}, {"sha": "e55b58bef28554fda81ac849b1b2b7e4b574c9de", "filename": "src/test/ui/reserved/reserved-attr-on-macro.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,10 +1,8 @@\n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/reserved-attr-on-macro.rs:1:3\n    |\n LL | #[rustc_attribute_should_be_reserved]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: cannot determine resolution for the macro `foo`\n   --> $DIR/reserved-attr-on-macro.rs:10:5\n@@ -22,4 +20,3 @@ LL | #[rustc_attribute_should_be_reserved]\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "1c307f0e2c19cb9278196a34a763ec8153c166f5", "filename": "src/test/ui/suggestions/attribute-typos.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,10 +1,8 @@\n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/attribute-typos.rs:11:3\n    |\n LL | #[rustc_err]\n    |   ^^^^^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: cannot find attribute `rustc_err` in this scope\n   --> $DIR/attribute-typos.rs:11:3\n@@ -31,4 +29,3 @@ LL | #[deprcated]\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "99a70230892833d8996864bcce78c3fe2db850aa", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -32,7 +32,6 @@ fn test7(x: _) { let _x: usize = x; }\n \n fn test8(_f: fn() -> _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n struct Test9;\n \n@@ -99,7 +98,6 @@ pub fn main() {\n \n     fn fn_test8(_f: fn() -> _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     struct FnTest9;\n "}, {"sha": "db67e0c9b7d98fa6d1f977ce9e1384c077b787d5", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 55, "deletions": 67, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdb50c6f2507319f29104a25765bfb79ad53395c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=cdb50c6f2507319f29104a25765bfb79ad53395c", "patch": "@@ -1,43 +1,43 @@\n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:154:18\n+  --> $DIR/typeck_type_placeholder_item.rs:152:18\n    |\n LL | struct BadStruct<_>(_);\n    |                  ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:157:16\n+  --> $DIR/typeck_type_placeholder_item.rs:155:16\n    |\n LL | trait BadTrait<_> {}\n    |                ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:167:19\n+  --> $DIR/typeck_type_placeholder_item.rs:165:19\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:167:22\n+  --> $DIR/typeck_type_placeholder_item.rs:165:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                      ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:172:19\n+  --> $DIR/typeck_type_placeholder_item.rs:170:19\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                   ^ expected identifier, found reserved identifier\n \n error: associated constant in `impl` without body\n-  --> $DIR/typeck_type_placeholder_item.rs:203:5\n+  --> $DIR/typeck_type_placeholder_item.rs:201:5\n    |\n LL |     const C: _;\n    |     ^^^^^^^^^^-\n    |               |\n    |               help: provide a definition for the constant: `= <expr>;`\n \n error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/typeck_type_placeholder_item.rs:167:22\n+  --> $DIR/typeck_type_placeholder_item.rs:165:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   -  ^ already used\n@@ -131,12 +131,6 @@ help: use type parameters instead\n LL | fn test7<T>(x: T) { let _x: usize = x; }\n    |         ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:33:22\n-   |\n-LL | fn test8(_f: fn() -> _) { }\n-   |                      ^ not allowed in type signatures\n-\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:33:22\n    |\n@@ -149,7 +143,7 @@ LL | fn test8<T>(_f: fn() -> T) { }\n    |         ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:47:26\n+  --> $DIR/typeck_type_placeholder_item.rs:46:26\n    |\n LL | fn test11(x: &usize) -> &_ {\n    |                         -^\n@@ -158,7 +152,7 @@ LL | fn test11(x: &usize) -> &_ {\n    |                         help: replace with the correct return type: `&&usize`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:52:52\n+  --> $DIR/typeck_type_placeholder_item.rs:51:52\n    |\n LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      --------------^\n@@ -167,7 +161,7 @@ LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      help: replace with the correct return type: `*const *const usize`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:66:8\n+  --> $DIR/typeck_type_placeholder_item.rs:65:8\n    |\n LL |     a: _,\n    |        ^ not allowed in type signatures\n@@ -186,13 +180,13 @@ LL |     b: (T, T),\n    |\n \n error: missing type for `static` item\n-  --> $DIR/typeck_type_placeholder_item.rs:72:12\n+  --> $DIR/typeck_type_placeholder_item.rs:71:12\n    |\n LL |     static A = 42;\n    |            ^ help: provide a type for the item: `A: i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:74:15\n+  --> $DIR/typeck_type_placeholder_item.rs:73:15\n    |\n LL |     static B: _ = 42;\n    |               ^\n@@ -201,13 +195,13 @@ LL |     static B: _ = 42;\n    |               help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:76:15\n+  --> $DIR/typeck_type_placeholder_item.rs:75:15\n    |\n LL |     static C: Option<_> = Some(42);\n    |               ^^^^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:79:21\n+  --> $DIR/typeck_type_placeholder_item.rs:78:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n    |                     ^\n@@ -216,7 +210,7 @@ LL |     fn fn_test() -> _ { 5 }\n    |                     help: replace with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:82:23\n+  --> $DIR/typeck_type_placeholder_item.rs:81:23\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      -^--^-\n@@ -226,7 +220,7 @@ LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:85:22\n+  --> $DIR/typeck_type_placeholder_item.rs:84:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n@@ -235,7 +229,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      help: replace `_` with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:88:22\n+  --> $DIR/typeck_type_placeholder_item.rs:87:22\n    |\n LL |     static FN_TEST4: _ = 145;\n    |                      ^\n@@ -244,13 +238,13 @@ LL |     static FN_TEST4: _ = 145;\n    |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:91:22\n+  --> $DIR/typeck_type_placeholder_item.rs:90:22\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n    |                      ^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:94:20\n+  --> $DIR/typeck_type_placeholder_item.rs:93:20\n    |\n LL |     fn fn_test6(_: _) { }\n    |                    ^ not allowed in type signatures\n@@ -261,7 +255,7 @@ LL |     fn fn_test6<T>(_: T) { }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:97:20\n+  --> $DIR/typeck_type_placeholder_item.rs:96:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n    |                    ^ not allowed in type signatures\n@@ -272,13 +266,7 @@ LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:100:29\n-   |\n-LL |     fn fn_test8(_f: fn() -> _) { }\n-   |                             ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:100:29\n+  --> $DIR/typeck_type_placeholder_item.rs:99:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n@@ -289,7 +277,7 @@ LL |     fn fn_test8<T>(_f: fn() -> T) { }\n    |                ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:123:12\n+  --> $DIR/typeck_type_placeholder_item.rs:121:12\n    |\n LL |         a: _,\n    |            ^ not allowed in type signatures\n@@ -308,21 +296,21 @@ LL |         b: (T, T),\n    |\n \n error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:128:18\n+  --> $DIR/typeck_type_placeholder_item.rs:126:18\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                  ^ cannot infer type\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:128:28\n+  --> $DIR/typeck_type_placeholder_item.rs:126:28\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                            ^  ^ not allowed in type signatures\n    |                            |\n    |                            not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:132:30\n+  --> $DIR/typeck_type_placeholder_item.rs:130:30\n    |\n LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             -^--^-\n@@ -332,7 +320,7 @@ LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:135:33\n+  --> $DIR/typeck_type_placeholder_item.rs:133:33\n    |\n LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           ------^-\n@@ -341,7 +329,7 @@ LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:154:21\n+  --> $DIR/typeck_type_placeholder_item.rs:152:21\n    |\n LL | struct BadStruct<_>(_);\n    |                     ^ not allowed in type signatures\n@@ -352,7 +340,7 @@ LL | struct BadStruct<T>(T);\n    |                  ^  ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:159:15\n+  --> $DIR/typeck_type_placeholder_item.rs:157:15\n    |\n LL | impl BadTrait<_> for BadStruct<_> {}\n    |               ^                ^ not allowed in type signatures\n@@ -365,13 +353,13 @@ LL | impl<T> BadTrait<T> for BadStruct<T> {}\n    |     ^^^          ^                ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:162:34\n+  --> $DIR/typeck_type_placeholder_item.rs:160:34\n    |\n LL | fn impl_trait() -> impl BadTrait<_> {\n    |                                  ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:167:25\n+  --> $DIR/typeck_type_placeholder_item.rs:165:25\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                         ^ not allowed in type signatures\n@@ -382,7 +370,7 @@ LL | struct BadStruct1<T, _>(T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:172:25\n+  --> $DIR/typeck_type_placeholder_item.rs:170:25\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                         ^ not allowed in type signatures\n@@ -393,13 +381,13 @@ LL | struct BadStruct2<K, T>(K, T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:176:14\n+  --> $DIR/typeck_type_placeholder_item.rs:174:14\n    |\n LL | type X = Box<_>;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:43:27\n+  --> $DIR/typeck_type_placeholder_item.rs:42:27\n    |\n LL |     fn test10(&self, _x : _) { }\n    |                           ^ not allowed in type signatures\n@@ -410,7 +398,7 @@ LL |     fn test10<T>(&self, _x : T) { }\n    |              ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:140:31\n+  --> $DIR/typeck_type_placeholder_item.rs:138:31\n    |\n LL |     fn method_test1(&self, x: _);\n    |                               ^ not allowed in type signatures\n@@ -421,7 +409,7 @@ LL |     fn method_test1<T>(&self, x: T);\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:142:31\n+  --> $DIR/typeck_type_placeholder_item.rs:140:31\n    |\n LL |     fn method_test2(&self, x: _) -> _;\n    |                               ^     ^ not allowed in type signatures\n@@ -434,7 +422,7 @@ LL |     fn method_test2<T>(&self, x: T) -> T;\n    |                    ^^^           ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:144:31\n+  --> $DIR/typeck_type_placeholder_item.rs:142:31\n    |\n LL |     fn method_test3(&self) -> _;\n    |                               ^ not allowed in type signatures\n@@ -445,7 +433,7 @@ LL |     fn method_test3<T>(&self) -> T;\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:146:26\n+  --> $DIR/typeck_type_placeholder_item.rs:144:26\n    |\n LL |     fn assoc_fn_test1(x: _);\n    |                          ^ not allowed in type signatures\n@@ -456,7 +444,7 @@ LL |     fn assoc_fn_test1<T>(x: T);\n    |                      ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:148:26\n+  --> $DIR/typeck_type_placeholder_item.rs:146:26\n    |\n LL |     fn assoc_fn_test2(x: _) -> _;\n    |                          ^     ^ not allowed in type signatures\n@@ -469,7 +457,7 @@ LL |     fn assoc_fn_test2<T>(x: T) -> T;\n    |                      ^^^    ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:150:28\n+  --> $DIR/typeck_type_placeholder_item.rs:148:28\n    |\n LL |     fn assoc_fn_test3() -> _;\n    |                            ^ not allowed in type signatures\n@@ -480,7 +468,7 @@ LL |     fn assoc_fn_test3<T>() -> T;\n    |                      ^^^      ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:61:37\n+  --> $DIR/typeck_type_placeholder_item.rs:60:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n    |                                     ^ not allowed in type signatures\n@@ -491,7 +479,7 @@ LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n    |                  ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:110:34\n+  --> $DIR/typeck_type_placeholder_item.rs:108:34\n    |\n LL |         fn fn_test10(&self, _x : _) { }\n    |                                  ^ not allowed in type signatures\n@@ -502,7 +490,7 @@ LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:118:41\n+  --> $DIR/typeck_type_placeholder_item.rs:116:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n    |                                         ^ not allowed in type signatures\n@@ -513,25 +501,25 @@ LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:182:21\n+  --> $DIR/typeck_type_placeholder_item.rs:180:21\n    |\n LL | type Y = impl Trait<_>;\n    |                     ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:190:14\n+  --> $DIR/typeck_type_placeholder_item.rs:188:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:192:14\n+  --> $DIR/typeck_type_placeholder_item.rs:190:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:194:14\n+  --> $DIR/typeck_type_placeholder_item.rs:192:14\n    |\n LL |     const D: _ = 42;\n    |              ^\n@@ -540,7 +528,7 @@ LL |     const D: _ = 42;\n    |              help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:40:24\n+  --> $DIR/typeck_type_placeholder_item.rs:39:24\n    |\n LL |     fn test9(&self) -> _ { () }\n    |                        ^\n@@ -549,7 +537,7 @@ LL |     fn test9(&self) -> _ { () }\n    |                        help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:58:24\n+  --> $DIR/typeck_type_placeholder_item.rs:57:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n    |                        ^\n@@ -558,7 +546,7 @@ LL |     fn clone(&self) -> _ { Test9 }\n    |                        help: replace with the correct return type: `Test9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:107:31\n+  --> $DIR/typeck_type_placeholder_item.rs:105:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n    |                               ^\n@@ -567,7 +555,7 @@ LL |         fn fn_test9(&self) -> _ { () }\n    |                               help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:115:28\n+  --> $DIR/typeck_type_placeholder_item.rs:113:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            ^\n@@ -576,33 +564,33 @@ LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            help: replace with the correct return type: `main::FnTest9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:199:14\n+  --> $DIR/typeck_type_placeholder_item.rs:197:14\n    |\n LL |     type A = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:201:14\n+  --> $DIR/typeck_type_placeholder_item.rs:199:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:203:14\n+  --> $DIR/typeck_type_placeholder_item.rs:201:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:206:14\n+  --> $DIR/typeck_type_placeholder_item.rs:204:14\n    |\n LL |     const D: _ = 42;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n    |              help: replace `_` with the correct type: `i32`\n \n-error: aborting due to 66 previous errors\n+error: aborting due to 64 previous errors\n \n Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}