{"sha": "1ac7eb8649a499177a2931221d77677e905100d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYzdlYjg2NDlhNDk5MTc3YTI5MzEyMjFkNzc2NzdlOTA1MTAwZDA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-18T14:55:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-28T09:49:50Z"}, "message": "allow maps to be made private or public\n\nDidn't get around to removing all public access.", "tree": {"sha": "78117354123c65bbce42766799c677b5300f01d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78117354123c65bbce42766799c677b5300f01d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ac7eb8649a499177a2931221d77677e905100d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac7eb8649a499177a2931221d77677e905100d0", "html_url": "https://github.com/rust-lang/rust/commit/1ac7eb8649a499177a2931221d77677e905100d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ac7eb8649a499177a2931221d77677e905100d0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26a7a48fe305a96b22afe8fe1da5ad01ed629cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26a7a48fe305a96b22afe8fe1da5ad01ed629cf", "html_url": "https://github.com/rust-lang/rust/commit/d26a7a48fe305a96b22afe8fe1da5ad01ed629cf"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "c6e5b5da0d614805e9eabbe9c848f475fdd4d917", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1ac7eb8649a499177a2931221d77677e905100d0/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac7eb8649a499177a2931221d77677e905100d0/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=1ac7eb8649a499177a2931221d77677e905100d0", "patch": "@@ -274,11 +274,11 @@ impl<'tcx> QueryDescription for queries::describe_def<'tcx> {\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n-       pub $name:ident: $node:ident($K:ty) -> $V:ty),*) => {\n+       [$($pub:tt)*] $name:ident: $node:ident($K:ty) -> $V:ty),*) => {\n         pub struct Maps<$tcx> {\n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n             query_stack: RefCell<Vec<(Span, Query<$tcx>)>>,\n-            $($(#[$attr])* pub $name: RefCell<DepTrackingMap<queries::$name<$tcx>>>),*\n+            $($(#[$attr])* $($pub)* $name: RefCell<DepTrackingMap<queries::$name<$tcx>>>),*\n         }\n \n         impl<$tcx> Maps<$tcx> {\n@@ -441,52 +441,52 @@ macro_rules! define_maps {\n // the driver creates (using several `rustc_*` crates).\n define_maps! { <'tcx>\n     /// Records the type of every item.\n-    pub type_of: ItemSignature(DefId) -> Ty<'tcx>,\n+    [pub] type_of: ItemSignature(DefId) -> Ty<'tcx>,\n \n     /// Maps from the def-id of an item (trait/struct/enum/fn) to its\n     /// associated generics and predicates.\n-    pub generics_of: ItemSignature(DefId) -> &'tcx ty::Generics,\n-    pub predicates_of: ItemSignature(DefId) -> ty::GenericPredicates<'tcx>,\n+    [] generics_of: ItemSignature(DefId) -> &'tcx ty::Generics,\n+    [] predicates_of: ItemSignature(DefId) -> ty::GenericPredicates<'tcx>,\n \n     /// Maps from the def-id of a trait to the list of\n     /// super-predicates. This is a subset of the full list of\n     /// predicates. We store these in a separate map because we must\n     /// evaluate them even during type conversion, often before the\n     /// full predicates are available (note that supertraits have\n     /// additional acyclicity requirements).\n-    pub super_predicates_of: ItemSignature(DefId) -> ty::GenericPredicates<'tcx>,\n+    [] super_predicates_of: ItemSignature(DefId) -> ty::GenericPredicates<'tcx>,\n \n     /// To avoid cycles within the predicates of a single item we compute\n     /// per-type-parameter predicates for resolving `T::AssocTy`.\n-    pub type_param_predicates: TypeParamPredicates((DefId, DefId))\n+    [] type_param_predicates: TypeParamPredicates((DefId, DefId))\n         -> ty::GenericPredicates<'tcx>,\n \n-    pub trait_def: ItemSignature(DefId) -> &'tcx ty::TraitDef,\n-    pub adt_def: ItemSignature(DefId) -> &'tcx ty::AdtDef,\n-    pub adt_destructor: AdtDestructor(DefId) -> Option<ty::Destructor>,\n-    pub adt_sized_constraint: SizedConstraint(DefId) -> &'tcx [Ty<'tcx>],\n-    pub adt_dtorck_constraint: DtorckConstraint(DefId) -> ty::DtorckConstraint<'tcx>,\n+    [] trait_def: ItemSignature(DefId) -> &'tcx ty::TraitDef,\n+    [] adt_def: ItemSignature(DefId) -> &'tcx ty::AdtDef,\n+    [] adt_destructor: AdtDestructor(DefId) -> Option<ty::Destructor>,\n+    [] adt_sized_constraint: SizedConstraint(DefId) -> &'tcx [Ty<'tcx>],\n+    [] adt_dtorck_constraint: DtorckConstraint(DefId) -> ty::DtorckConstraint<'tcx>,\n \n     /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n-    pub is_foreign_item: IsForeignItem(DefId) -> bool,\n+    [] is_foreign_item: IsForeignItem(DefId) -> bool,\n \n     /// Maps from def-id of a type or region parameter to its\n     /// (inferred) variance.\n-    pub variances_of: ItemSignature(DefId) -> Rc<Vec<ty::Variance>>,\n+    [pub] variances_of: ItemSignature(DefId) -> Rc<Vec<ty::Variance>>,\n \n     /// Maps from an impl/trait def-id to a list of the def-ids of its items\n-    pub associated_item_def_ids: AssociatedItemDefIds(DefId) -> Rc<Vec<DefId>>,\n+    [] associated_item_def_ids: AssociatedItemDefIds(DefId) -> Rc<Vec<DefId>>,\n \n     /// Maps from a trait item to the trait item \"descriptor\"\n-    pub associated_item: AssociatedItems(DefId) -> ty::AssociatedItem,\n+    [] associated_item: AssociatedItems(DefId) -> ty::AssociatedItem,\n \n-    pub impl_trait_ref: ItemSignature(DefId) -> Option<ty::TraitRef<'tcx>>,\n-    pub impl_polarity: ItemSignature(DefId) -> hir::ImplPolarity,\n+    [pub] impl_trait_ref: ItemSignature(DefId) -> Option<ty::TraitRef<'tcx>>,\n+    [] impl_polarity: ItemSignature(DefId) -> hir::ImplPolarity,\n \n     /// Maps a DefId of a type to a list of its inherent impls.\n     /// Contains implementations of methods that are inherent to a type.\n     /// Methods in these implementations don't need to be exported.\n-    pub inherent_impls: InherentImpls(DefId) -> Rc<Vec<DefId>>,\n+    [] inherent_impls: InherentImpls(DefId) -> Rc<Vec<DefId>>,\n \n     /// Maps from the def-id of a function/method or const/static\n     /// to its MIR. Mutation is done at an item granularity to\n@@ -495,59 +495,59 @@ define_maps! { <'tcx>\n     ///\n     /// Note that cross-crate MIR appears to be always borrowed\n     /// (in the `RefCell` sense) to prevent accidental mutation.\n-    pub mir: Mir(DefId) -> &'tcx RefCell<mir::Mir<'tcx>>,\n+    [pub] mir: Mir(DefId) -> &'tcx RefCell<mir::Mir<'tcx>>,\n \n     /// Maps DefId's that have an associated Mir to the result\n     /// of the MIR qualify_consts pass. The actual meaning of\n     /// the value isn't known except to the pass itself.\n-    pub mir_const_qualif: Mir(DefId) -> u8,\n+    [] mir_const_qualif: Mir(DefId) -> u8,\n \n     /// Records the type of each closure. The def ID is the ID of the\n     /// expression defining the closure.\n-    pub closure_kind: ItemSignature(DefId) -> ty::ClosureKind,\n+    [] closure_kind: ItemSignature(DefId) -> ty::ClosureKind,\n \n     /// Records the type of each closure. The def ID is the ID of the\n     /// expression defining the closure.\n-    pub closure_type: ItemSignature(DefId) -> ty::PolyFnSig<'tcx>,\n+    [] closure_type: ItemSignature(DefId) -> ty::PolyFnSig<'tcx>,\n \n     /// Caches CoerceUnsized kinds for impls on custom types.\n-    pub coerce_unsized_info: ItemSignature(DefId)\n+    [] coerce_unsized_info: ItemSignature(DefId)\n         -> ty::adjustment::CoerceUnsizedInfo,\n \n-    pub typeck_item_bodies: typeck_item_bodies_dep_node(CrateNum) -> CompileResult,\n+    [] typeck_item_bodies: typeck_item_bodies_dep_node(CrateNum) -> CompileResult,\n \n-    pub typeck_tables_of: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\n+    [] typeck_tables_of: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\n \n-    pub coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),\n+    [] coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),\n \n-    pub borrowck: BorrowCheck(DefId) -> (),\n+    [] borrowck: BorrowCheck(DefId) -> (),\n \n     /// Gets a complete map from all types to their inherent impls.\n     /// Not meant to be used directly outside of coherence.\n     /// (Defined only for LOCAL_CRATE)\n-    pub crate_inherent_impls: crate_inherent_impls_dep_node(CrateNum) -> CrateInherentImpls,\n+    [] crate_inherent_impls: crate_inherent_impls_dep_node(CrateNum) -> CrateInherentImpls,\n \n     /// Checks all types in the krate for overlap in their inherent impls. Reports errors.\n     /// Not meant to be used directly outside of coherence.\n     /// (Defined only for LOCAL_CRATE)\n-    pub crate_inherent_impls_overlap_check: crate_inherent_impls_dep_node(CrateNum) -> (),\n+    [] crate_inherent_impls_overlap_check: crate_inherent_impls_dep_node(CrateNum) -> (),\n \n     /// Results of evaluating const items or constants embedded in\n     /// other items (such as enum variant explicit discriminants).\n-    pub const_eval: const_eval_dep_node((DefId, &'tcx Substs<'tcx>))\n+    [] const_eval: const_eval_dep_node((DefId, &'tcx Substs<'tcx>))\n         -> const_val::EvalResult<'tcx>,\n \n     /// Performs the privacy check and computes \"access levels\".\n-    pub privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Rc<AccessLevels>,\n+    [] privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Rc<AccessLevels>,\n \n-    pub reachable_set: reachability_dep_node(CrateNum) -> Rc<NodeSet>,\n+    [] reachable_set: reachability_dep_node(CrateNum) -> Rc<NodeSet>,\n \n-    pub mir_shims: mir_shim_dep_node(ty::InstanceDef<'tcx>) -> &'tcx RefCell<mir::Mir<'tcx>>,\n+    [] mir_shims: mir_shim_dep_node(ty::InstanceDef<'tcx>) -> &'tcx RefCell<mir::Mir<'tcx>>,\n \n-    pub def_symbol_name: SymbolName(DefId) -> ty::SymbolName,\n-    pub symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,\n+    [] def_symbol_name: SymbolName(DefId) -> ty::SymbolName,\n+    [] symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,\n \n-    pub describe_def: meta_data_node(DefId) -> Option<Def>\n+    [] describe_def: meta_data_node(DefId) -> Option<Def>\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {\n@@ -582,4 +582,4 @@ fn const_eval_dep_node((def_id, _): (DefId, &Substs)) -> DepNode<DefId> {\n \n fn meta_data_node(def_id: DefId) -> DepNode<DefId> {\n     DepNode::MetaData(def_id)\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ff4bded012e9ef84c68898299e9d646ade8c659d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ac7eb8649a499177a2931221d77677e905100d0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac7eb8649a499177a2931221d77677e905100d0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1ac7eb8649a499177a2931221d77677e905100d0", "patch": "@@ -2146,7 +2146,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 _ => false,\n             }\n         } else {\n-            match self.sess.cstore.describe_def(def_id).expect(\"no def for def-id\") {\n+            match self.describe_def(def_id).expect(\"no def for def-id\") {\n                 Def::AssociatedConst(_) | Def::Method(_) | Def::AssociatedTy(_) => true,\n                 _ => false,\n             }"}]}