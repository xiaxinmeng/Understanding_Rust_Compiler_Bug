{"sha": "26812f733daaf65e514c058c51138511f6f5b60c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ODEyZjczM2RhYWY2NWU1MTRjMDU4YzUxMTM4NTExZjZmNWI2MGM=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-08T19:46:21Z"}, "committer": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-31T17:22:34Z"}, "message": "Prevent `mem_replace_with_default` lint within macros\n\nAlso added test cases for internal and external macros.", "tree": {"sha": "d09811baa85be346a2c9c284c8e5d09605373caa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d09811baa85be346a2c9c284c8e5d09605373caa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26812f733daaf65e514c058c51138511f6f5b60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26812f733daaf65e514c058c51138511f6f5b60c", "html_url": "https://github.com/rust-lang/rust/commit/26812f733daaf65e514c058c51138511f6f5b60c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26812f733daaf65e514c058c51138511f6f5b60c/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a75241c1abc54c1becd7eff108160beef4490f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a75241c1abc54c1becd7eff108160beef4490f8", "html_url": "https://github.com/rust-lang/rust/commit/2a75241c1abc54c1becd7eff108160beef4490f8"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "ab0bdb4d02c4786a57aebe2ea9fabef31c51bea1", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26812f733daaf65e514c058c51138511f6f5b60c/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26812f733daaf65e514c058c51138511f6f5b60c/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=26812f733daaf65e514c058c51138511f6f5b60c", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::{\n-    match_def_path, match_qpath, paths, snippet_with_applicability, span_help_and_lint, span_lint_and_sugg,\n+    in_macro, match_def_path, match_qpath, paths, snippet_with_applicability, span_help_and_lint, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n use rustc::hir::{BorrowKind, Expr, ExprKind, HirVec, Mutability, QPath};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintPass};\n use rustc_errors::Applicability;\n use rustc_session::declare_tool_lint;\n \n@@ -163,9 +163,9 @@ fn check_replace_with_uninit(cx: &LateContext<'_, '_>, expr: &'_ Expr, args: &Hi\n }\n \n fn check_replace_with_default(cx: &LateContext<'_, '_>, expr: &'_ Expr, args: &HirVec<Expr>) {\n-    if let ExprKind::Call(ref repl_func, ref repl_args) = args[1].kind {\n+    if let ExprKind::Call(ref repl_func, _) = args[1].kind {\n         if_chain! {\n-            if repl_args.is_empty();\n+            if !in_macro(expr.span) && !in_external_macro(cx.tcx.sess, expr.span);\n             if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n             if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n             if match_def_path(cx, repl_def_id, &paths::DEFAULT_TRAIT_METHOD);"}, {"sha": "eafc68bd6bcf45d7377a20555f07635f7aee7ecb", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26812f733daaf65e514c058c51138511f6f5b60c/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26812f733daaf65e514c058c51138511f6f5b60c/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=26812f733daaf65e514c058c51138511f6f5b60c", "patch": "@@ -39,3 +39,10 @@ macro_rules! string_add {\n         let z = y + \"...\";\n     };\n }\n+\n+#[macro_export]\n+macro_rules! take_external {\n+    ($s:expr) => {\n+        std::mem::replace($s, Default::default())\n+    };\n+}"}, {"sha": "8606e98335dfe49e172b9c3cdf2481ac6c65188f", "filename": "tests/ui/mem_replace.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26812f733daaf65e514c058c51138511f6f5b60c/tests%2Fui%2Fmem_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/26812f733daaf65e514c058c51138511f6f5b60c/tests%2Fui%2Fmem_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.fixed?ref=26812f733daaf65e514c058c51138511f6f5b60c", "patch": "@@ -8,6 +8,7 @@\n // except according to those terms.\n \n // run-rustfix\n+// aux-build:macro_rules.rs\n #![allow(unused_imports)]\n #![warn(\n     clippy::all,\n@@ -16,8 +17,17 @@\n     clippy::mem_replace_with_default\n )]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n use std::mem;\n \n+macro_rules! take {\n+    ($s:expr) => {\n+        std::mem::replace($s, Default::default())\n+    };\n+}\n+\n fn replace_option_with_none() {\n     let mut an_option = Some(1);\n     let _ = an_option.take();\n@@ -31,6 +41,10 @@ fn replace_with_default() {\n     let s = &mut String::from(\"foo\");\n     let _ = std::mem::take(s);\n     let _ = std::mem::take(s);\n+\n+    // dont lint within macros\n+    take!(s);\n+    take_external!(s);\n }\n \n fn main() {"}, {"sha": "c116107a923c687e2f44f89ce82829aaf2ee1aad", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26812f733daaf65e514c058c51138511f6f5b60c/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26812f733daaf65e514c058c51138511f6f5b60c/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=26812f733daaf65e514c058c51138511f6f5b60c", "patch": "@@ -8,6 +8,7 @@\n // except according to those terms.\n \n // run-rustfix\n+// aux-build:macro_rules.rs\n #![allow(unused_imports)]\n #![warn(\n     clippy::all,\n@@ -16,8 +17,17 @@\n     clippy::mem_replace_with_default\n )]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n use std::mem;\n \n+macro_rules! take {\n+    ($s:expr) => {\n+        std::mem::replace($s, Default::default())\n+    };\n+}\n+\n fn replace_option_with_none() {\n     let mut an_option = Some(1);\n     let _ = mem::replace(&mut an_option, None);\n@@ -31,6 +41,10 @@ fn replace_with_default() {\n     let s = &mut String::from(\"foo\");\n     let _ = std::mem::replace(s, String::default());\n     let _ = std::mem::replace(s, Default::default());\n+\n+    // dont lint within macros\n+    take!(s);\n+    take_external!(s);\n }\n \n fn main() {"}, {"sha": "9c925cefb04cb9d4b45b099369d3acb89bb377a7", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26812f733daaf65e514c058c51138511f6f5b60c/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26812f733daaf65e514c058c51138511f6f5b60c/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=26812f733daaf65e514c058c51138511f6f5b60c", "patch": "@@ -1,33 +1,33 @@\n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:23:13\n+  --> $DIR/mem_replace.rs:33:13\n    |\n LL |     let _ = mem::replace(&mut an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n    |\n    = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n \n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:25:13\n+  --> $DIR/mem_replace.rs:35:13\n    |\n LL |     let _ = mem::replace(an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:30:13\n+  --> $DIR/mem_replace.rs:40:13\n    |\n LL |     let _ = std::mem::replace(&mut s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:32:13\n+  --> $DIR/mem_replace.rs:42:13\n    |\n LL |     let _ = std::mem::replace(s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:33:13\n+  --> $DIR/mem_replace.rs:43:13\n    |\n LL |     let _ = std::mem::replace(s, Default::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`"}]}