{"sha": "ab75d777de8e01d8e8265626654f24a8c971278d", "node_id": "C_kwDOAAsO6NoAKGFiNzVkNzc3ZGU4ZTAxZDhlODI2NTYyNjY1NGYyNGE4Yzk3MTI3OGQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-01T10:33:28Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-01T10:33:28Z"}, "message": "Fill in `def_span` when creating def ids.\n\nThis makes sure that ICEing because of def ids created outside of ast lowering will be able to produce a query backtrace and not cause a double panic because of trying to call the  `def_span` query", "tree": {"sha": "8c1ab7e6d228f9b14a1021bcf7e75e59612031eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1ab7e6d228f9b14a1021bcf7e75e59612031eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab75d777de8e01d8e8265626654f24a8c971278d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab75d777de8e01d8e8265626654f24a8c971278d", "html_url": "https://github.com/rust-lang/rust/commit/ab75d777de8e01d8e8265626654f24a8c971278d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab75d777de8e01d8e8265626654f24a8c971278d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0bdb4b498d44d2f0bdd6ac341d15954cc6d9358", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0bdb4b498d44d2f0bdd6ac341d15954cc6d9358", "html_url": "https://github.com/rust-lang/rust/commit/a0bdb4b498d44d2f0bdd6ac341d15954cc6d9358"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "dfef6ec70fcf772c5f1186200f76709dff5cd5e2", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=ab75d777de8e01d8e8265626654f24a8c971278d", "patch": "@@ -222,7 +222,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             // Wrap the expression in an AnonConst.\n                             let parent_def_id = self.current_hir_id_owner;\n                             let node_id = self.next_node_id();\n-                            self.create_def(parent_def_id.def_id, node_id, DefPathData::AnonConst);\n+                            self.create_def(\n+                                parent_def_id.def_id,\n+                                node_id,\n+                                DefPathData::AnonConst,\n+                                *op_sp,\n+                            );\n                             let anon_const = AnonConst { id: node_id, value: P(expr) };\n                             hir::InlineAsmOperand::SymFn {\n                                 anon_const: self.lower_anon_const(&anon_const),"}, {"sha": "d3d18e86403b465600145d3de0de9ee8e053569e", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=ab75d777de8e01d8e8265626654f24a8c971278d", "patch": "@@ -365,7 +365,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let node_id = self.next_node_id();\n \n                 // Add a definition for the in-band const def.\n-                self.create_def(parent_def_id.def_id, node_id, DefPathData::AnonConst);\n+                self.create_def(parent_def_id.def_id, node_id, DefPathData::AnonConst, f.span);\n \n                 let anon_const = AnonConst { id: node_id, value: arg };\n                 generic_args.push(AngleBracketedArg::Arg(GenericArg::Const(anon_const)));"}, {"sha": "0258f8fd2d9ab12ad7b1cf45b0abad80b954f526", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ab75d777de8e01d8e8265626654f24a8c971278d", "patch": "@@ -487,6 +487,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         parent: LocalDefId,\n         node_id: ast::NodeId,\n         data: DefPathData,\n+        span: Span,\n     ) -> LocalDefId {\n         debug_assert_ne!(node_id, ast::DUMMY_NODE_ID);\n         assert!(\n@@ -497,7 +498,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.tcx.hir().def_key(self.local_def_id(node_id)),\n         );\n \n-        let def_id = self.tcx.create_def(parent, data).def_id();\n+        let def_id = self.tcx.at(span).create_def(parent, data).def_id();\n \n         debug!(\"create_def: def_id_to_node_id[{:?}] <-> {:?}\", def_id, node_id);\n         self.resolver.node_id_to_def_id.insert(node_id, def_id);\n@@ -823,6 +824,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     self.current_hir_id_owner.def_id,\n                     param,\n                     DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n+                    ident.span,\n                 );\n                 debug!(?_def_id);\n \n@@ -1151,15 +1153,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                                 let parent_def_id = self.current_hir_id_owner;\n                                 let node_id = self.next_node_id();\n+                                let span = self.lower_span(ty.span);\n \n                                 // Add a definition for the in-band const def.\n                                 let def_id = self.create_def(\n                                     parent_def_id.def_id,\n                                     node_id,\n                                     DefPathData::AnonConst,\n+                                    span,\n                                 );\n \n-                                let span = self.lower_span(ty.span);\n                                 let path_expr = Expr {\n                                     id: ty.id,\n                                     kind: ExprKind::Path(qself.clone(), path.clone()),\n@@ -1353,12 +1356,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         itctx,\n                     ),\n                     ImplTraitContext::Universal => {\n+                        let span = t.span;\n                         self.create_def(\n                             self.current_hir_id_owner.def_id,\n                             *def_node_id,\n                             DefPathData::ImplTrait,\n+                            span,\n                         );\n-                        let span = t.span;\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n                         let (param, bounds, path) =\n                             self.lower_generic_and_bounds(*def_node_id, span, ident, bounds);\n@@ -1455,6 +1459,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.current_hir_id_owner.def_id,\n             opaque_ty_node_id,\n             DefPathData::ImplTrait,\n+            opaque_ty_span,\n         );\n         debug!(?opaque_ty_def_id);\n \n@@ -1608,6 +1613,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             parent_def_id,\n                             node_id,\n                             DefPathData::LifetimeNs(lifetime.ident.name),\n+                            lifetime.ident.span,\n                         );\n                         remapping.insert(old_def_id, new_def_id);\n \n@@ -1624,6 +1630,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             parent_def_id,\n                             node_id,\n                             DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n+                            lifetime.ident.span,\n                         );\n                         remapping.insert(old_def_id, new_def_id);\n \n@@ -1806,7 +1813,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let fn_def_id = self.local_def_id(fn_node_id);\n \n         let opaque_ty_def_id =\n-            self.create_def(fn_def_id, opaque_ty_node_id, DefPathData::ImplTrait);\n+            self.create_def(fn_def_id, opaque_ty_node_id, DefPathData::ImplTrait, opaque_ty_span);\n \n         // When we create the opaque type for this async fn, it is going to have\n         // to capture all the lifetimes involved in the signature (including in the\n@@ -1866,6 +1873,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 opaque_ty_def_id,\n                 inner_node_id,\n                 DefPathData::LifetimeNs(ident.name),\n+                ident.span,\n             );\n             new_remapping.insert(outer_def_id, inner_def_id);\n "}, {"sha": "d6dea0e9f30fa06649c9de4cfb341cae9ffeaa96", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ab75d777de8e01d8e8265626654f24a8c971278d", "patch": "@@ -1109,6 +1109,7 @@ rustc_queries! {\n         desc { |tcx| \"looking up span for `{}`\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Gets the span for the identifier of the definition."}, {"sha": "c5683a9db94737402b8c5c9242b1eba9236dd842", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ab75d777de8e01d8e8265626654f24a8c971278d", "patch": "@@ -1507,7 +1507,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.def_path(def_id).to_string_no_crate_verbose()\n         )\n     }\n+}\n \n+impl<'tcx> TyCtxtAt<'tcx> {\n     /// Create a new definition within the incr. comp. engine.\n     pub fn create_def(\n         self,\n@@ -1536,9 +1538,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         // - this write will have happened before these queries are called.\n         let def_id = self.definitions.write().create_def(parent, data);\n \n-        TyCtxtFeed { tcx: self, def_id }\n+        let feed = TyCtxtFeed { tcx: self.tcx, def_id };\n+        feed.def_span(self.span);\n+        feed\n     }\n+}\n \n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn iter_local_def_id(self) -> impl Iterator<Item = LocalDefId> + 'tcx {\n         // Create a dependency to the red node to be sure we re-execute this when the amount of\n         // definitions change."}, {"sha": "30d28ff34550375ad50f0db0af318ab8c2fba13f", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab75d777de8e01d8e8265626654f24a8c971278d/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=ab75d777de8e01d8e8265626654f24a8c971278d", "patch": "@@ -532,7 +532,8 @@ impl<K: DepKind> DepGraph<K> {\n             let mut edges = SmallVec::new();\n             K::read_deps(|task_deps| match task_deps {\n                 TaskDepsRef::Allow(deps) => edges.extend(deps.lock().reads.iter().copied()),\n-                TaskDepsRef::Ignore | TaskDepsRef::Forbid => {\n+                TaskDepsRef::Ignore => {} // During HIR lowering, we have no dependencies.\n+                TaskDepsRef::Forbid => {\n                     panic!(\"Cannot summarize when dependencies are not recorded.\")\n                 }\n             });"}]}