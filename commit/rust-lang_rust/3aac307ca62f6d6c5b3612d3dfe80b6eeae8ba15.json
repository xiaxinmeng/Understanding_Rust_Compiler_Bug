{"sha": "3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "node_id": "C_kwDOAAsO6NoAKDNhYWMzMDdjYTYyZjZkNmM1YjM2MTJkM2RmZTgwYjZlZWFlOGJhMTU", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-13T20:56:40Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-04-04T21:01:42Z"}, "message": "Mention implementers of unsatisfied trait\n\nWhen encountering an unsatisfied trait bound, if there are no other\nsuggestions, mention all the types that *do* implement that trait:\n\n```\nerror[E0277]: the trait bound `f32: Foo` is not satisfied\n  --> $DIR/impl_wf.rs:22:6\n   |\nLL | impl Baz<f32> for f32 { }\n   |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n   |\n   = help: the following other types implement trait `Foo`:\n             Option<T>\n             i32\n             str\nnote: required by a bound in `Baz`\n  --> $DIR/impl_wf.rs:18:31\n   |\nLL | trait Baz<U: ?Sized> where U: Foo { }\n   |                               ^^^ required by this bound in `Baz`\n```\n\nMention implementers of traits in `ImplObligation`s.\n\nDo not mention other `impl`s for closures, ranges and `?`.", "tree": {"sha": "2c9610a6faa515517410ea51d6d48e52558b51da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c9610a6faa515517410ea51d6d48e52558b51da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "html_url": "https://github.com/rust-lang/rust/commit/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a9080b25e73d26aae94c3f6a13b31de58e66b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9080b25e73d26aae94c3f6a13b31de58e66b5a", "html_url": "https://github.com/rust-lang/rust/commit/6a9080b25e73d26aae94c3f6a13b31de58e66b5a"}], "stats": {"total": 873, "additions": 690, "deletions": 183}, "files": [{"sha": "32c52a6a8a6d92069238e0725a1ed93b50654a54", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -378,6 +378,12 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Add a help message attached to this diagnostic with a customizable highlighted message.\n+    pub fn highlighted_help(&mut self, msg: Vec<(String, Style)>) -> &mut Self {\n+        self.sub_with_highlights(Level::Help, msg, MultiSpan::new(), None);\n+        self\n+    }\n+\n     /// Prints the span with some help above it.\n     /// This is like [`Diagnostic::help()`], but it gets its own span.\n     pub fn span_help<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self {"}, {"sha": "45a215354d08135b5a881358b85b292aca483f1b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -41,7 +41,7 @@ use rustc_hir::Node;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::cstore::CrateStoreDyn;\n-use rustc_span::symbol::{kw, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n \n@@ -2206,7 +2206,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.impl_trait_ref(def_id).map(|tr| tr.def_id)\n     }\n \n-    /// If the given defid describes a method belonging to an impl, returns the\n+    /// If the given `DefId` describes a method belonging to an impl, returns the\n     /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.\n     pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {\n         self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {\n@@ -2215,6 +2215,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    /// If the given `DefId` belongs to a trait that was automatically derived, returns `true`.\n+    pub fn is_builtin_derive(self, def_id: DefId) -> bool {\n+        self.has_attr(def_id, sym::automatically_derived)\n+    }\n+\n     /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\n     /// with the name of the crate containing the impl.\n     pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {"}, {"sha": "4bf66cd4c9f2ece82f8888559918a94b8c94451b", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -1,10 +1,9 @@\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::UNALIGNED_REFERENCES;\n-use rustc_span::symbol::sym;\n \n use crate::util;\n use crate::MirLint;\n@@ -50,22 +49,6 @@ fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     });\n }\n \n-fn builtin_derive_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n-    debug!(\"builtin_derive_def_id({:?})\", def_id);\n-    if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n-        if tcx.has_attr(impl_def_id, sym::automatically_derived) {\n-            debug!(\"builtin_derive_def_id({:?}) - is {:?}\", def_id, impl_def_id);\n-            Some(impl_def_id)\n-        } else {\n-            debug!(\"builtin_derive_def_id({:?}) - not automatically derived\", def_id);\n-            None\n-        }\n-    } else {\n-        debug!(\"builtin_derive_def_id({:?}) - not a method\", def_id);\n-        None\n-    }\n-}\n-\n impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         // Make sure we know where in the MIR we are.\n@@ -83,7 +66,11 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n         if context.is_borrow() {\n             if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n                 let def_id = self.body.source.instance.def_id();\n-                if let Some(impl_def_id) = builtin_derive_def_id(self.tcx, def_id) {\n+                if let Some(impl_def_id) = self\n+                    .tcx\n+                    .impl_of_method(def_id)\n+                    .filter(|&def_id| self.tcx.is_builtin_derive(def_id))\n+                {\n                     // If a method is defined in the local crate,\n                     // the impl containing that method should also be.\n                     self.tcx.ensure().unsafe_derive_on_repr_packed(impl_def_id.expect_local());"}, {"sha": "f5803aaa0786e9d1769c9f497991f102cadadb7f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -180,6 +180,9 @@ symbols! {\n         Error,\n         File,\n         FileType,\n+        Fn,\n+        FnMut,\n+        FnOnce,\n         FormatSpec,\n         Formatter,\n         From,\n@@ -248,6 +251,7 @@ symbols! {\n         RustcEncodable,\n         Send,\n         SeqCst,\n+        SliceIndex,\n         Some,\n         String,\n         StructuralEq,"}, {"sha": "2da4c86a58e9c8f6ac52bf699dba42055699b92d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 107, "deletions": 19, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -14,6 +14,7 @@ use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    Style,\n };\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -354,7 +355,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         let have_alt_message = message.is_some() || label.is_some();\n                         let is_try_conversion = self.is_try_conversion(span, trait_ref.def_id());\n                         let is_unsize =\n-                            { Some(trait_ref.def_id()) == self.tcx.lang_items().unsize_trait() };\n+                            Some(trait_ref.def_id()) == self.tcx.lang_items().unsize_trait();\n                         let (message, note, append_const_msg) = if is_try_conversion {\n                             (\n                                 Some(format!(\n@@ -363,7 +364,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 )),\n                                 Some(\n                                     \"the question mark operation (`?`) implicitly performs a \\\n-                                        conversion on the error value using the `From` trait\"\n+                                     conversion on the error value using the `From` trait\"\n                                         .to_owned(),\n                                 ),\n                                 Some(None),\n@@ -519,10 +520,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         }\n \n                         self.suggest_floating_point_literal(&obligation, &mut err, &trait_ref);\n-                        self.suggest_dereferences(&obligation, &mut err, trait_predicate);\n-                        self.suggest_fn_call(&obligation, &mut err, trait_predicate);\n-                        self.suggest_remove_reference(&obligation, &mut err, trait_predicate);\n-                        self.suggest_semicolon_removal(\n+                        let mut suggested =\n+                            self.suggest_dereferences(&obligation, &mut err, trait_predicate);\n+                        suggested |= self.suggest_fn_call(&obligation, &mut err, trait_predicate);\n+                        suggested |=\n+                            self.suggest_remove_reference(&obligation, &mut err, trait_predicate);\n+                        suggested |= self.suggest_semicolon_removal(\n                             &obligation,\n                             &mut err,\n                             span,\n@@ -648,10 +651,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 trait_predicate,\n                                 obligation.cause.body_id,\n                             );\n-                        } else if !have_alt_message {\n+                        } else if !suggested {\n                             // Can't show anything else useful, try to find similar impls.\n                             let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n-                            self.report_similar_impl_candidates(impl_candidates, &mut err);\n+                            self.report_similar_impl_candidates(\n+                                impl_candidates,\n+                                trait_ref,\n+                                &mut err,\n+                            );\n                         }\n \n                         // Changing mutability doesn't make a difference to whether we have\n@@ -676,7 +683,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             });\n                             let unit_obligation = obligation.with(predicate.to_predicate(tcx));\n                             if self.predicate_may_hold(&unit_obligation) {\n-                                err.note(\"this trait is implemented for `()`\");\n                                 err.note(\n                                     \"this error might have been caused by changes to \\\n                                     Rust's type-inference algorithm (see issue #48950 \\\n@@ -1301,8 +1307,9 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n     fn report_similar_impl_candidates(\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n+        trait_ref: ty::PolyTraitRef<'tcx>,\n         err: &mut Diagnostic,\n-    );\n+    ) -> bool;\n \n     /// Gets the parent trait chain start\n     fn get_parent_trait_ref(\n@@ -1313,7 +1320,11 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n     /// If the `Self` type of the unsatisfied trait `trait_ref` implements a trait\n     /// with the same path as `trait_ref`, a help message about\n     /// a probable version mismatch is added to `err`\n-    fn note_version_mismatch(&self, err: &mut Diagnostic, trait_ref: &ty::PolyTraitRef<'tcx>);\n+    fn note_version_mismatch(\n+        &self,\n+        err: &mut Diagnostic,\n+        trait_ref: &ty::PolyTraitRef<'tcx>,\n+    ) -> bool;\n \n     /// Creates a `PredicateObligation` with `new_self_ty` replacing the existing type in the\n     /// `trait_ref`.\n@@ -1675,10 +1686,63 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n     fn report_similar_impl_candidates(\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n+        trait_ref: ty::PolyTraitRef<'tcx>,\n         err: &mut Diagnostic,\n-    ) {\n+    ) -> bool {\n+        let def_id = trait_ref.def_id();\n         if impl_candidates.is_empty() {\n-            return;\n+            if self.tcx.trait_is_auto(def_id)\n+                || self.tcx.lang_items().items().contains(&Some(def_id))\n+                || self.tcx.get_diagnostic_name(def_id).is_some()\n+            {\n+                // Mentioning implementers of `Copy`, `Debug` and friends is not useful.\n+                return false;\n+            }\n+            let mut normalized_impl_candidates: Vec<_> = self\n+                .tcx\n+                .all_impls(def_id)\n+                // Ignore automatically derived impls and `!Trait` impls.\n+                .filter(|&def_id| {\n+                    self.tcx.impl_polarity(def_id) != ty::ImplPolarity::Negative\n+                        || self.tcx.is_builtin_derive(def_id)\n+                })\n+                .filter_map(|def_id| self.tcx.impl_trait_ref(def_id))\n+                // Avoid mentioning type parameters.\n+                .filter(|trait_ref| !matches!(trait_ref.self_ty().kind(), ty::Param(_)))\n+                .map(|trait_ref| format!(\"\\n  {}\", trait_ref.self_ty()))\n+                .collect();\n+            normalized_impl_candidates.sort();\n+            normalized_impl_candidates.dedup();\n+            let len = normalized_impl_candidates.len();\n+            if len == 0 {\n+                return false;\n+            }\n+            if len == 1 {\n+                err.highlighted_help(vec![\n+                    (\n+                        format!(\n+                            \"the trait `{}` is implemented for `\",\n+                            trait_ref.print_only_trait_path()\n+                        ),\n+                        Style::NoStyle,\n+                    ),\n+                    (normalized_impl_candidates[0].trim().to_string(), Style::Highlight),\n+                    (\"`\".to_string(), Style::NoStyle),\n+                ]);\n+                return true;\n+            }\n+            let end = if normalized_impl_candidates.len() <= 9 {\n+                normalized_impl_candidates.len()\n+            } else {\n+                8\n+            };\n+            err.help(&format!(\n+                \"the following other types implement trait `{}`:{}{}\",\n+                trait_ref.print_only_trait_path(),\n+                normalized_impl_candidates[..end].join(\"\"),\n+                if len > 9 { format!(\"\\nand {} others\", len - 8) } else { String::new() }\n+            ));\n+            return true;\n         }\n \n         let len = impl_candidates.len();\n@@ -1703,6 +1767,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         //\n         // Prefer more similar candidates first, then sort lexicographically\n         // by their normalized string representation.\n+        let first_candidate = impl_candidates.get(0).map(|candidate| candidate.trait_ref);\n         let mut normalized_impl_candidates_and_similarities = impl_candidates\n             .into_iter()\n             .map(|ImplCandidate { trait_ref, similarity }| {\n@@ -1711,17 +1776,33 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             })\n             .collect::<Vec<_>>();\n         normalized_impl_candidates_and_similarities.sort();\n+        normalized_impl_candidates_and_similarities.dedup();\n \n         let normalized_impl_candidates = normalized_impl_candidates_and_similarities\n             .into_iter()\n             .map(|(_, normalized)| normalized)\n             .collect::<Vec<_>>();\n \n-        err.help(&format!(\n-            \"the following implementations were found:{}{}\",\n-            normalized_impl_candidates[..end].join(\"\"),\n-            if len > 5 { format!(\"\\nand {} others\", len - 4) } else { String::new() }\n-        ));\n+        if normalized_impl_candidates.len() == 1 {\n+            err.highlighted_help(vec![\n+                (\n+                    format!(\n+                        \"the trait `{}` is implemented for `\",\n+                        first_candidate.unwrap().print_only_trait_path()\n+                    ),\n+                    Style::NoStyle,\n+                ),\n+                (first_candidate.unwrap().self_ty().to_string(), Style::Highlight),\n+                (\"`\".to_string(), Style::NoStyle),\n+            ]);\n+        } else {\n+            err.help(&format!(\n+                \"the following implementations were found:{}{}\",\n+                normalized_impl_candidates[..end].join(\"\"),\n+                if len > 9 { format!(\"\\nand {} others\", len - 8) } else { String::new() }\n+            ));\n+        }\n+        true\n     }\n \n     /// Gets the parent trait chain start\n@@ -1752,7 +1833,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n     /// If the `Self` type of the unsatisfied trait `trait_ref` implements a trait\n     /// with the same path as `trait_ref`, a help message about\n     /// a probable version mismatch is added to `err`\n-    fn note_version_mismatch(&self, err: &mut Diagnostic, trait_ref: &ty::PolyTraitRef<'tcx>) {\n+    fn note_version_mismatch(\n+        &self,\n+        err: &mut Diagnostic,\n+        trait_ref: &ty::PolyTraitRef<'tcx>,\n+    ) -> bool {\n         let get_trait_impl = |trait_def_id| {\n             self.tcx.find_map_relevant_impl(trait_def_id, trait_ref.skip_binder().self_ty(), Some)\n         };\n@@ -1763,6 +1848,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             .filter(|trait_def_id| *trait_def_id != trait_ref.def_id())\n             .filter(|trait_def_id| self.tcx.def_path_str(*trait_def_id) == required_trait_path)\n             .collect();\n+        let mut suggested = false;\n         for trait_with_same_path in traits_with_same_path {\n             if let Some(impl_def_id) = get_trait_impl(trait_with_same_path) {\n                 let impl_span = self.tcx.def_span(impl_def_id);\n@@ -1773,8 +1859,10 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     trait_crate\n                 );\n                 err.note(&crate_msg);\n+                suggested = true;\n             }\n         }\n+        suggested\n     }\n \n     fn mk_trait_obligation_with_new_self_ty("}, {"sha": "5bf9be87b57ae2dde9fb82699c9b92896b33d066", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -58,7 +58,7 @@ pub trait InferCtxtExt<'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n-    );\n+    ) -> bool;\n \n     fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<String>;\n \n@@ -67,7 +67,7 @@ pub trait InferCtxtExt<'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n-    );\n+    ) -> bool;\n \n     fn suggest_add_reference_to_arg(\n         &self,\n@@ -82,7 +82,7 @@ pub trait InferCtxtExt<'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n-    );\n+    ) -> bool;\n \n     fn suggest_remove_await(&self, obligation: &PredicateObligation<'tcx>, err: &mut Diagnostic);\n \n@@ -99,7 +99,7 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         span: Span,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n-    );\n+    ) -> bool;\n \n     fn return_type_span(&self, obligation: &PredicateObligation<'tcx>) -> Option<Span>;\n \n@@ -494,14 +494,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n-    ) {\n+    ) -> bool {\n         // It only make sense when suggesting dereferences for arguments\n         let code = if let ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } =\n             obligation.cause.code()\n         {\n             parent_code.clone()\n         } else {\n-            return;\n+            return false;\n         };\n         let param_env = obligation.param_env;\n         let body_id = obligation.cause.body_id;\n@@ -513,7 +513,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             _ => trait_pred,\n         };\n         let Some(real_ty) = real_trait_pred.self_ty().no_bound_vars() else {\n-            return;\n+            return false;\n         };\n \n         if let ty::Ref(region, base_ty, mutbl) = *real_ty.kind() {\n@@ -537,11 +537,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 format!(\"&{}{}\", derefs, &src[1..]),\n                                 Applicability::MachineApplicable,\n                             );\n+                            return true;\n                         }\n                     }\n                 }\n             }\n         }\n+        false\n     }\n \n     /// Given a closure's `DefId`, return the given name of the closure.\n@@ -584,22 +586,22 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n-    ) {\n+    ) -> bool {\n         let Some(self_ty) = trait_pred.self_ty().no_bound_vars() else {\n-            return;\n+            return false;\n         };\n \n         let (def_id, output_ty, callable) = match *self_ty.kind() {\n             ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig().output(), \"closure\"),\n             ty::FnDef(def_id, _) => (def_id, self_ty.fn_sig(self.tcx).output(), \"function\"),\n-            _ => return,\n+            _ => return false,\n         };\n         let msg = format!(\"use parentheses to call the {}\", callable);\n \n         // `mk_trait_obligation_with_new_self_ty` only works for types with no escaping bound\n         // variables, so bail out if we have any.\n         let Some(output_ty) = output_ty.no_bound_vars() else {\n-            return;\n+            return false;\n         };\n \n         let new_obligation =\n@@ -611,7 +613,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 | EvaluationResult::EvaluatedToOkModuloRegions\n                 | EvaluationResult::EvaluatedToAmbig,\n             ) => {}\n-            _ => return,\n+            _ => return false,\n         }\n         let hir = self.tcx.hir();\n         // Get the name of the callable and the arguments to be used in the suggestion.\n@@ -622,7 +624,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             })) => {\n                 err.span_label(*span, \"consider calling this closure\");\n                 let Some(name) = self.get_closure_name(def_id, err, &msg) else {\n-                    return;\n+                    return false;\n                 };\n                 let args = decl.inputs.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n                 let sugg = format!(\"({})\", args);\n@@ -650,7 +652,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let sugg = format!(\"({})\", args);\n                 (format!(\"{}{}\", ident, sugg), sugg)\n             }\n-            _ => return,\n+            _ => return false,\n         };\n         if matches!(obligation.cause.code(), ObligationCauseCode::FunctionArgumentObligation { .. })\n         {\n@@ -667,6 +669,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         } else {\n             err.help(&format!(\"{}: `{}`\", msg, snippet));\n         }\n+        true\n     }\n \n     fn suggest_add_reference_to_arg(\n@@ -808,19 +811,20 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n-    ) {\n+    ) -> bool {\n         let span = obligation.cause.span;\n \n+        let mut suggested = false;\n         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n             let refs_number =\n                 snippet.chars().filter(|c| !c.is_whitespace()).take_while(|c| *c == '&').count();\n             if let Some('\\'') = snippet.chars().filter(|c| !c.is_whitespace()).nth(refs_number) {\n                 // Do not suggest removal of borrow from type arguments.\n-                return;\n+                return false;\n             }\n \n             let Some(mut suggested_ty) = trait_pred.self_ty().no_bound_vars() else {\n-                return;\n+                return false;\n             };\n \n             for refs_remaining in 0..refs_number {\n@@ -856,10 +860,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         String::new(),\n                         Applicability::MachineApplicable,\n                     );\n+                    suggested = true;\n                     break;\n                 }\n             }\n         }\n+        suggested\n     }\n \n     fn suggest_remove_await(&self, obligation: &PredicateObligation<'tcx>, err: &mut Diagnostic) {\n@@ -996,7 +1002,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         span: Span,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n-    ) {\n+    ) -> bool {\n         let hir = self.tcx.hir();\n         let parent_node = hir.get_parent_node(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n@@ -1015,7 +1021,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         {\n             let sp = self.tcx.sess.source_map().end_point(stmt.span);\n             err.span_label(sp, \"consider removing this semicolon\");\n+            return true;\n         }\n+        false\n     }\n \n     fn return_type_span(&self, obligation: &PredicateObligation<'tcx>) -> Option<Span> {"}, {"sha": "8383f926435505fbe60b0a97f9ee84502d3833d6", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -53,6 +53,7 @@\n /// ```\n #[lang = \"fn\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"Fn\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -133,6 +134,7 @@ pub trait Fn<Args>: FnMut<Args> {\n /// ```\n #[lang = \"fn_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"FnMut\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -205,6 +207,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n /// ```\n #[lang = \"fn_once\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"FnOnce\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on("}, {"sha": "68de4e4e1f32a95ee9b52ac06e2deed82ee120c6", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -140,6 +140,7 @@ mod private_slice_index {\n /// Implementations of this trait have to promise that if the argument\n /// to `get_(mut_)unchecked` is a safe reference, then so is the result.\n #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+#[rustc_diagnostic_item = \"SliceIndex\"]\n #[rustc_on_unimplemented(\n     on(T = \"str\", label = \"string indices are ranges of `usize`\",),\n     on("}, {"sha": "4a538d4d0a0d8ec6a438cbc8e6dfeee7ce918957", "filename": "src/test/ui/allocator/not-an-allocator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -1,8 +1,8 @@\n #[global_allocator]\n static A: usize = 0;\n-//~^ the trait bound `usize:\n-//~| the trait bound `usize:\n-//~| the trait bound `usize:\n-//~| the trait bound `usize:\n+//~^ ERROR E0277\n+//~| ERROR E0277\n+//~| ERROR E0277\n+//~| ERROR E0277\n \n fn main() {}"}, {"sha": "62bb0679f813a486c9e69a9e70e2dade47898390", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -6,6 +6,7 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n+   = help: the trait `GlobalAlloc` is implemented for `System`\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n@@ -16,6 +17,7 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n+   = help: the trait `GlobalAlloc` is implemented for `System`\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n@@ -26,6 +28,7 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n+   = help: the trait `GlobalAlloc` is implemented for `System`\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n@@ -36,6 +39,7 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n+   = help: the trait `GlobalAlloc` is implemented for `System`\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "2d8d513409d3a83dcc70f6343a05bc772a66272e", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -15,8 +15,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n LL |     f1(2u32, 4u32);\n    |     ^^ the trait `Foo` is not implemented for `u32`\n    |\n-   = help: the following implementations were found:\n-             <i32 as Foo>\n+   = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n    |\n@@ -29,8 +28,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n LL |     f1(2u32, 4u32);\n    |              ^^^^ the trait `Foo` is not implemented for `u32`\n    |\n-   = help: the following implementations were found:\n-             <i32 as Foo>\n+   = help: the trait `Foo` is implemented for `i32`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:8\n@@ -40,8 +38,7 @@ LL |     f1(2u32, 4i32);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <i32 as Foo>\n+   = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n    |\n@@ -54,8 +51,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n LL |     f1(2u32, 4i32);\n    |              ^^^^ the trait `Foo` is not implemented for `u32`\n    |\n-   = help: the following implementations were found:\n-             <i32 as Foo>\n+   = help: the trait `Foo` is implemented for `i32`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-types-path-2.rs:41:18"}, {"sha": "73b5e1053fb9d674b068209207eeec66eedcb170", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-1.rs:3:33\n    |"}, {"sha": "af2e616896a87f0d1890dfd0d22913359d7f1c3b", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type V = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `Y`\n   --> $DIR/hr-associated-type-bound-param-1.rs:4:36\n    |"}, {"sha": "5809c407a5f7f826a819d5ecb95b62bb10301f67", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n@@ -21,8 +20,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n@@ -38,8 +36,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type W = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |"}, {"sha": "84d5e0494cb693a25047d74df7cc8e125a5c75c0", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-3.rs:4:33\n    |"}, {"sha": "ee1d5d324954a5cabf081ee0006427d0b2c11e25", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-4.rs:4:36\n    |"}, {"sha": "ece3151ba978c31afc8059ee9719b20f8309f7ac", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |\n@@ -21,8 +20,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |"}, {"sha": "e468a1b3ba4842568b2b8443dc07f613af311c7c", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,6 +4,7 @@ error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n LL |     type MpuConfig: MyDisplay = T;\n    |                                 ^ the trait `MyDisplay` is not implemented for `T`\n    |\n+   = help: the trait `MyDisplay` is implemented for `&'a mut T`\n note: required by a bound in `MPU::MpuConfig`\n   --> $DIR/issue-65774-1.rs:10:21\n    |\n@@ -16,6 +17,7 @@ error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n LL |         let closure = |config: &mut <S as MPU>::MpuConfig| writer.my_write(&config);\n    |                                                                            ^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n    |\n+   = help: the trait `MyDisplay` is implemented for `&'a mut T`\n note: required because of the requirements on the impl of `MyDisplay` for `&mut T`\n   --> $DIR/issue-65774-1.rs:5:24\n    |"}, {"sha": "4cef4db4698a711d278ae0d4c061127c1ca4c577", "filename": "src/test/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,6 +4,7 @@ error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n LL |     type MpuConfig: MyDisplay = T;\n    |                                 ^ the trait `MyDisplay` is not implemented for `T`\n    |\n+   = help: the trait `MyDisplay` is implemented for `&'a mut T`\n note: required by a bound in `MPU::MpuConfig`\n   --> $DIR/issue-65774-2.rs:10:21\n    |\n@@ -16,6 +17,7 @@ error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n LL |         writer.my_write(valref)\n    |                         ^^^^^^ the trait `MyDisplay` is not implemented for `T`\n    |\n+   = help: the trait `MyDisplay` is implemented for `&'a mut T`\n    = note: required for the cast to the object type `dyn MyDisplay`\n \n error: aborting due to 2 previous errors"}, {"sha": "985cdce1224dacd79354fda2aa35643771f418b8", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `u32: Signed` is not satisfied\n LL |     is_defaulted::<&'static u32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n    |\n-   = help: the following implementations were found:\n-             <i32 as Signed>\n+   = help: the trait `Signed` is implemented for `i32`\n note: required because of the requirements on the impl of `Defaulted` for `&'static u32`\n   --> $DIR/typeck-default-trait-impl-precedence.rs:10:19\n    |"}, {"sha": "9fcf5d72625c5011432e81a830d57e47e9a589ce", "filename": "src/test/ui/binop/binop-mul-i32-f32.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     x * y\n    |       ^ no implementation for `i32 * f32`\n    |\n    = help: the trait `Mul<f32>` is not implemented for `i32`\n+   = help: the following implementations were found:\n+             <&'a i32 as Mul<i32>>\n+             <&i32 as Mul<&i32>>\n+             <i32 as Mul<&i32>>\n+             <i32 as Mul>\n+           and 49 others\n \n error: aborting due to previous error\n "}, {"sha": "9553fcc5bb20414870153babcb7469b7ea7df415", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -16,6 +16,12 @@ LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^ `for<'r> fn(&'r i32) -> &'r i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n+   = help: the following implementations were found:\n+             <extern \"C\" fn() -> Ret as Debug>\n+             <extern \"C\" fn(A) -> Ret as Debug>\n+             <extern \"C\" fn(A, ...) -> Ret as Debug>\n+             <extern \"C\" fn(A, B) -> Ret as Debug>\n+           and 68 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "e134095e6387934642f5d1ec3dacce23a8f11124", "filename": "src/test/ui/binop/shift-various-bad-types.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     22 >> p.char;\n    |        ^^ no implementation for `{integer} >> char`\n    |\n    = help: the trait `Shr<char>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <&'a i128 as Shr<i128>>\n+             <&'a i128 as Shr<i16>>\n+             <&'a i128 as Shr<i32>>\n+             <&'a i128 as Shr<i64>>\n+           and 568 others\n \n error[E0277]: no implementation for `{integer} >> &str`\n   --> $DIR/shift-various-bad-types.rs:12:8\n@@ -13,6 +19,12 @@ LL |     22 >> p.str;\n    |        ^^ no implementation for `{integer} >> &str`\n    |\n    = help: the trait `Shr<&str>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <&'a i128 as Shr<i128>>\n+             <&'a i128 as Shr<i16>>\n+             <&'a i128 as Shr<i32>>\n+             <&'a i128 as Shr<i64>>\n+           and 568 others\n \n error[E0277]: no implementation for `{integer} >> &Panolpy`\n   --> $DIR/shift-various-bad-types.rs:15:8\n@@ -21,6 +33,12 @@ LL |     22 >> p;\n    |        ^^ no implementation for `{integer} >> &Panolpy`\n    |\n    = help: the trait `Shr<&Panolpy>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <&'a i128 as Shr<i128>>\n+             <&'a i128 as Shr<i16>>\n+             <&'a i128 as Shr<i32>>\n+             <&'a i128 as Shr<i64>>\n+           and 568 others\n \n error[E0308]: mismatched types\n   --> $DIR/shift-various-bad-types.rs:25:18"}, {"sha": "31663e8e84d7229503233f45f2db44b88232920f", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `{integer}: Scalar` is not satisfied\n LL |   b + 3\n    |     ^ the trait `Scalar` is not implemented for `{integer}`\n    |\n-   = help: the following implementations were found:\n-             <f64 as Scalar>\n+   = help: the trait `Scalar` is implemented for `f64`\n note: required because of the requirements on the impl of `Add<{integer}>` for `Bob`\n   --> $DIR/issue-22645.rs:8:19\n    |"}, {"sha": "d4a8354d3fc801b1fd604a80260af2e6fad51b60", "filename": "src/test/ui/chalkify/generic_impls.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `(Option<T>, f32): Foo` is not satisfied\n LL |     gimme::<(Option<T>, f32)>();\n    |             ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `(Option<T>, f32)`\n    |\n-   = help: the following implementations were found:\n-             <(T, u32) as Foo>\n+   = help: the trait `Foo` is implemented for `(T, u32)`\n note: required by a bound in `gimme`\n   --> $DIR/generic_impls.rs:7:13\n    |\n@@ -18,8 +17,7 @@ error[E0277]: the trait bound `(i32, f32): Foo` is not satisfied\n LL |     gimme::<(i32, f32)>();\n    |             ^^^^^^^^^^ the trait `Foo` is not implemented for `(i32, f32)`\n    |\n-   = help: the following implementations were found:\n-             <(T, u32) as Foo>\n+   = help: the trait `Foo` is implemented for `(T, u32)`\n note: required by a bound in `gimme`\n   --> $DIR/generic_impls.rs:7:13\n    |"}, {"sha": "a142459bcb4a5e2c4d20f5c481aee7516ac20560", "filename": "src/test/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -17,8 +17,7 @@ error[E0277]: the trait bound `f32: Foo` is not satisfied\n LL | impl Baz<f32> for f32 { }\n    |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n    |\n-   = help: the following implementations were found:\n-             <i32 as Foo>\n+   = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `Baz`\n   --> $DIR/impl_wf.rs:18:31\n    |"}, {"sha": "1c1df644b06103fd44aa65177391af76dbd77d8e", "filename": "src/test/ui/chalkify/impl_wf_2.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `f32: Foo` is not satisfied\n LL |     type Item = f32;\n    |                 ^^^ the trait `Foo` is not implemented for `f32`\n    |\n-   = help: the following implementations were found:\n-             <i32 as Foo>\n+   = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `Bar::Item`\n   --> $DIR/impl_wf_2.rs:8:16\n    |"}, {"sha": "7f8566082cd262a4afa3510c67e6997cc64f9832", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `{float}: Foo` is not satisfied\n LL |     let s = S {\n    |             ^ the trait `Foo` is not implemented for `{float}`\n    |\n-   = help: the following implementations were found:\n-             <i32 as Foo>\n+   = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `S`\n   --> $DIR/type_wf.rs:6:13\n    |"}, {"sha": "a4b10a4c339f90214e9c239d93f1e288184c660a", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.nofallback.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,6 +4,16 @@ error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n+   = help: the following other types implement trait `std::error::Error`:\n+             !\n+             &'a T\n+             AccessError\n+             AddrParseError\n+             Arc<T>\n+             BorrowError\n+             BorrowMutError\n+             Box<T>\n+           and 42 others\n    = note: required for the cast to the object type `dyn std::error::Error`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n@@ -12,6 +22,16 @@ error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n+   = help: the following other types implement trait `std::error::Error`:\n+             !\n+             &'a T\n+             AccessError\n+             AddrParseError\n+             Arc<T>\n+             BorrowError\n+             BorrowMutError\n+             Box<T>\n+           and 42 others\n    = note: required for the cast to the object type `(dyn std::error::Error + 'static)`\n \n error: aborting due to 2 previous errors"}, {"sha": "da2558229a758881776fa3856083c37a57244b1e", "filename": "src/test/ui/const-generics/associated-type-bound-fail.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n LL |     type Assoc = u16;\n    |                  ^^^ the trait `Bar<N>` is not implemented for `u16`\n    |\n-   = help: the following implementations were found:\n-             <u16 as Bar<3_usize>>\n+   = help: the trait `Bar<3_usize>` is implemented for `u16`\n note: required by a bound in `Foo::Assoc`\n   --> $DIR/associated-type-bound-fail.rs:4:17\n    |"}, {"sha": "9cadc4110e1e64a3bd08ed336df8a331c4b05ea9", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n LL | fn rawr() -> impl Trait {\n    |              ^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n    |\n-   = help: the following implementations were found:\n-             <Uwu<N> as Trait>\n+   = help: the trait `Trait` is implemented for `Uwu<N>`\n \n error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:6:25\n@@ -18,8 +17,7 @@ LL | |     Uwu::<10, 12>\n LL | | }\n    | |_^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n    |\n-   = help: the following implementations were found:\n-             <Uwu<N> as Trait>\n+   = help: the trait `Trait` is implemented for `Uwu<N>`\n \n error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:18:26"}, {"sha": "7f8a1f742d8403876b7ccb78ebfc134bc586b2b2", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -6,8 +6,7 @@ LL |     foo(&10_u32);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <u32 as Trait<2_u8>>\n+   = help: the trait `Trait<2_u8>` is implemented for `u32`\n    = note: required for the cast to the object type `dyn Trait`\n \n error[E0277]: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n@@ -18,8 +17,7 @@ LL |     bar(&true);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <bool as Traitor<2_u8, 3_u8>>\n+   = help: the trait `Traitor<2_u8, 3_u8>` is implemented for `bool`\n    = note: required for the cast to the object type `dyn Traitor<{_: u8}, {_: u8}>`\n \n error: aborting due to 2 previous errors"}, {"sha": "8b405d6753e5620d1537599b0b76935baac52b6e", "filename": "src/test/ui/const-generics/defaults/wfness.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -10,17 +10,15 @@ error[E0277]: the trait bound `(): Trait<2_u8>` is not satisfied\n LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n    |                                               ^^^^^^^^ the trait `Trait<2_u8>` is not implemented for `()`\n    |\n-   = help: the following implementations were found:\n-             <() as Trait<3_u8>>\n+   = help: the trait `Trait<3_u8>` is implemented for `()`\n \n error[E0277]: the trait bound `(): Trait<1_u8>` is not satisfied\n   --> $DIR/wfness.rs:14:13\n    |\n LL | fn foo() -> DependentDefaultWfness {\n    |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<1_u8>` is not implemented for `()`\n    |\n-   = help: the following implementations were found:\n-             <() as Trait<3_u8>>\n+   = help: the trait `Trait<3_u8>` is implemented for `()`\n note: required by a bound in `WhereClause`\n   --> $DIR/wfness.rs:6:47\n    |"}, {"sha": "cb85b6cb93d91ddd7da2776ba0d00cd3a539d606", "filename": "src/test/ui/const-generics/exhaustive-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -9,7 +9,7 @@ LL |     <() as Foo<N>>::test()\n              <() as Foo<100_u8>>\n              <() as Foo<101_u8>>\n              <() as Foo<102_u8>>\n-           and 252 others\n+           and 248 others\n \n error: aborting due to previous error\n "}, {"sha": "aedf44658db6384cf8abf5d39c6278975a91ef30", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-1.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `A<{_: usize}>: Bar<{_: usize}>` is not satisfied\n LL |     let _ = A;\n    |             ^ the trait `Bar<{_: usize}>` is not implemented for `A<{_: usize}>`\n    |\n-   = help: the following implementations were found:\n-             <A<7_usize> as Bar<N>>\n+   = help: the trait `Bar<N>` is implemented for `A<{ 6 + 1 }>`\n note: required by a bound in `A`\n   --> $DIR/unused-substs-1.rs:9:11\n    |"}, {"sha": "52a1669e330027e56e722269184fef8e5f0f8ee9", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n    |                               ^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n    |\n-   = help: the following implementations were found:\n-             <Option<T> as Copy>\n+   = help: the trait `Copy` is implemented for `Option<T>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n    = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information"}, {"sha": "318fec60290ee974aec2ec7e45f755c76706e42e", "filename": "src/test/ui/consts/const-blocks/migrate-fail.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n    |\n-   = help: the following implementations were found:\n-             <Option<T> as Copy>\n+   = help: the trait `Copy` is implemented for `Option<T>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n \n error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n@@ -14,8 +13,7 @@ error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n    |\n-   = help: the following implementations were found:\n-             <Option<T> as Copy>\n+   = help: the trait `Copy` is implemented for `Option<T>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n \n error: aborting due to 2 previous errors"}, {"sha": "5a34361aa83b68193e129314be994fa88966a639", "filename": "src/test/ui/consts/const-blocks/nll-fail.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n    |\n-   = help: the following implementations were found:\n-             <Option<T> as Copy>\n+   = help: the trait `Copy` is implemented for `Option<T>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n \n error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n@@ -14,8 +13,7 @@ error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n    |\n-   = help: the following implementations were found:\n-             <Option<T> as Copy>\n+   = help: the trait `Copy` is implemented for `Option<T>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n \n error: aborting due to 2 previous errors"}, {"sha": "6979ff36176cdfec5a544055609cc3afdb77dc8b", "filename": "src/test/ui/consts/const-blocks/trait-error.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `Foo<String>: Copy` is not satisfied\n LL |     [Foo(String::new()); 4];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Foo<String>`\n    |\n-   = help: the following implementations were found:\n-             <Foo<T> as Copy>\n+   = help: the trait `Copy` is implemented for `Foo<T>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n \n error: aborting due to previous error"}, {"sha": "aee7192b6eda155196ed03ad0fca19b14b484d5c", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -11,6 +11,12 @@ LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                    ^ no implementation for `i8 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i8`\n+   = help: the following implementations were found:\n+             <&'a i8 as Add<i8>>\n+             <&i8 as Add<&i8>>\n+             <i8 as Add<&i8>>\n+             <i8 as Add>\n+           and 48 others\n \n error: aborting due to 2 previous errors\n "}, {"sha": "059447f7cacb336d1fbbd3ddae3b4ab90f429380", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -11,6 +11,12 @@ LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                            ^ no implementation for `i8 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i8`\n+   = help: the following implementations were found:\n+             <&'a i8 as Add<i8>>\n+             <&i8 as Add<&i8>>\n+             <i8 as Add<&i8>>\n+             <i8 as Add>\n+           and 48 others\n \n error[E0604]: only `u8` can be cast as `char`, not `i8`\n   --> $DIR/const-eval-overflow-4b.rs:22:13"}, {"sha": "677fa7d21aef0ec9698e7994bac6d25c1894abbd", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -21,6 +21,12 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |                              ^^ no implementation for `[{integer}; _] == [{integer}; 0]`\n    |\n    = help: the trait `PartialEq<[{integer}; 0]>` is not implemented for `[{integer}; _]`\n+   = help: the following implementations were found:\n+             <&[B] as PartialEq<[A; N]>>\n+             <&[T] as PartialEq<Vec<U, A>>>\n+             <&mut [B] as PartialEq<[A; N]>>\n+             <&mut [T] as PartialEq<Vec<U, A>>>\n+           and 3 others\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ea461241bf4146a4141f199ab50c42261b38d89c", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -9,7 +9,6 @@ LL |     f1.foo(1usize);\n              <Bar as Foo<i32>>\n              <Bar as Foo<i8>>\n              <Bar as Foo<u16>>\n-           and 2 others\n \n error: aborting due to previous error\n "}, {"sha": "58faaf4ea9014c3d741fb995cab126805bebafe8", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -11,7 +11,6 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u16>>\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n-           and 5 others\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n@@ -26,7 +25,6 @@ LL |     Foo::<i32>::bar(&1u8);\n              <u8 as Foo<u16>>\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n-           and 5 others\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:26:21\n@@ -41,7 +39,6 @@ LL |     Foo::<i32>::bar(&true);\n              <bool as Foo<i8>>\n              <bool as Foo<u16>>\n              <bool as Foo<u32>>\n-           and 2 others\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c12b02a76c58a3ffaeed34910b53b91a3c50eda1", "filename": "src/test/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -22,6 +22,12 @@ LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\n    |                                                     ^ no implementation for `{float} - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `{float}`\n+   = help: the following implementations were found:\n+             <&'a f32 as Sub<f32>>\n+             <&'a f64 as Sub<f64>>\n+             <&'a i128 as Sub<i128>>\n+             <&'a i16 as Sub<i16>>\n+           and 48 others\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1b87ebd9f20ce991f8aaa966ad998684f212c102", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,6 +4,7 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n LL | enum E where i32: Foo { V }\n    |              ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n+   = help: the trait `Foo` is implemented for `()`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n@@ -13,6 +14,7 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n LL | struct S where i32: Foo;\n    |                ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n+   = help: the trait `Foo` is implemented for `()`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n@@ -22,6 +24,7 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n LL | trait T where i32: Foo {}\n    |               ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n+   = help: the trait `Foo` is implemented for `()`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n@@ -31,6 +34,7 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n LL | union U where i32: Foo { f: i32 }\n    |               ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n+   = help: the trait `Foo` is implemented for `()`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n@@ -40,6 +44,7 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n LL | impl Foo for () where i32: Foo {\n    |                       ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n+   = help: the trait `Foo` is implemented for `()`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n@@ -49,6 +54,7 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n LL | fn f() where i32: Foo\n    |              ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n+   = help: the trait `Foo` is implemented for `()`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n "}, {"sha": "5204afa4e6bc559ccfa5cd3ed7232c85855b832a", "filename": "src/test/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,6 +4,16 @@ error[E0277]: the trait bound `str: UpperHex` is not satisfied\n LL |     format!(\"{:X}\", \"3\");\n    |                     ^^^ the trait `UpperHex` is not implemented for `str`\n    |\n+   = help: the following other types implement trait `UpperHex`:\n+             &T\n+             &mut T\n+             NonZeroI128\n+             NonZeroI16\n+             NonZeroI32\n+             NonZeroI64\n+             NonZeroI8\n+             NonZeroIsize\n+           and 21 others\n    = note: required because of the requirements on the impl of `UpperHex` for `&str`\n note: required by a bound in `ArgumentV1::<'a>::new_upper_hex`\n   --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL"}, {"sha": "ec8de15dc39573a105a2a9bca95b482ff9d8bec0", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,6 +4,7 @@ error[E0277]: the trait bound `for<'a> <_ as Trait>::Assoc<'a>: Marker` is not s\n LL |     test(Foo);\n    |     ^^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n    |\n+   = help: the trait `for<'a> Marker` is implemented for `()`\n note: required by a bound in `test`\n   --> $DIR/issue-88460.rs:17:27\n    |"}, {"sha": "6592e234d9873c7d54a36accd2e77bd974c7a08d", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -24,6 +24,12 @@ LL |         n + sum_to(n - 1)\n    |           ^ no implementation for `u32 + impl Foo`\n    |\n    = help: the trait `Add<impl Foo>` is not implemented for `u32`\n+   = help: the following implementations were found:\n+             <&'a u32 as Add<u32>>\n+             <&u32 as Add<&u32>>\n+             <u32 as Add<&u32>>\n+             <u32 as Add>\n+           and 48 others\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "70d693b8bee957a4460ccec9d662400822a000ca", "filename": "src/test/ui/impl-trait/issues/issue-62742.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `RawImpl<_>: Raw<_>` is not satisfied\n LL |     WrongImpl::foo(0i32);\n    |     ^^^^^^^^^ the trait `Raw<_>` is not implemented for `RawImpl<_>`\n    |\n-   = help: the following implementations were found:\n-             <RawImpl<T> as Raw<[T]>>\n+   = help: the trait `Raw<[T]>` is implemented for `RawImpl<T>`\n note: required by a bound in `SafeImpl`\n   --> $DIR/issue-62742.rs:26:35\n    |\n@@ -40,8 +39,7 @@ error[E0277]: the trait bound `RawImpl<()>: Raw<()>` is not satisfied\n LL |     WrongImpl::<()>::foo(0i32);\n    |     ^^^^^^^^^^^^^^^ the trait `Raw<()>` is not implemented for `RawImpl<()>`\n    |\n-   = help: the following implementations were found:\n-             <RawImpl<T> as Raw<[T]>>\n+   = help: the trait `Raw<[T]>` is implemented for `RawImpl<T>`\n note: required by a bound in `SafeImpl`\n   --> $DIR/issue-62742.rs:26:35\n    |"}, {"sha": "81a75e39c9177a29145510d863a40a3ef86c64d9", "filename": "src/test/ui/impl-trait/nested-return-type2-tait.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,6 +4,7 @@ error[E0277]: the trait bound `Sendable: Duh` is not satisfied\n LL | fn foo() -> impl Trait<Assoc = Sendable> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Duh` is not implemented for `Sendable`\n    |\n+   = help: the trait `Duh` is implemented for `i32`\n note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait.rs:28:5: 28:10]`\n   --> $DIR/nested-return-type2-tait.rs:14:31\n    |\n@@ -21,6 +22,7 @@ LL | |     || 42\n LL | | }\n    | |_^ the trait `Duh` is not implemented for `Sendable`\n    |\n+   = help: the trait `Duh` is implemented for `i32`\n note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait.rs:28:5: 28:10]`\n   --> $DIR/nested-return-type2-tait.rs:14:31\n    |"}, {"sha": "42e65e692488d6290271b4bce98ea0d59d32dfd9", "filename": "src/test/ui/impl-trait/nested-return-type2-tait2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,6 +4,7 @@ error[E0277]: the trait bound `Sendable: Duh` is not satisfied\n LL |     || 42\n    |     ^^^^^ the trait `Duh` is not implemented for `Sendable`\n    |\n+   = help: the trait `Duh` is implemented for `i32`\n note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait2.rs:27:5: 27:10]`\n   --> $DIR/nested-return-type2-tait2.rs:14:31\n    |"}, {"sha": "4d3691d0e07fae3d213e25213eeded92c56d1fbe", "filename": "src/test/ui/impl-trait/nested-return-type2-tait3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,6 +4,7 @@ error[E0277]: the trait bound `impl Send: Duh` is not satisfied\n LL |     || 42\n    |     ^^^^^ the trait `Duh` is not implemented for `impl Send`\n    |\n+   = help: the trait `Duh` is implemented for `i32`\n note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait3.rs:26:5: 26:10]`\n   --> $DIR/nested-return-type2-tait3.rs:14:31\n    |"}, {"sha": "6cd63db44fa0701dae72eece4d969de48bdfa0a4", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,7 @@ LL |     Bar\n    |     ^^^ no implementation for `Bar == (Bar, i32)`\n    |\n    = help: the trait `PartialEq<(Bar, i32)>` is not implemented for `Bar`\n+   = help: the trait `PartialEq<(Foo, i32)>` is implemented for `Bar`\n \n error: aborting due to previous error\n "}, {"sha": "7f51a48111b78705e6737853371033794f08c2eb", "filename": "src/test/ui/index-help.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Findex-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Findex-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,7 @@ LL |     x[0i32];\n    |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `i32`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i32>` for `Vec<{integer}>`\n \n error: aborting due to previous error"}, {"sha": "dae11a702fb73aa62d3ff5a8aef4960c7ebd8684", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,7 @@ LL |     [0][0u8];\n    |     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `u8`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u8>` for `[{integer}]`\n \n error[E0308]: mismatched types"}, {"sha": "be3398552dc0af68e44e930b13eda6244f4dfa8d", "filename": "src/test/ui/integral-indexing.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fintegral-indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fintegral-indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-indexing.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,7 @@ LL |     v[3u8];\n    |     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `u8`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u8>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `i8`\n@@ -14,6 +15,7 @@ LL |     v[3i8];\n    |     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `i8`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i8>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `u32`\n@@ -23,6 +25,7 @@ LL |     v[3u32];\n    |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `u32`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u32>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `i32`\n@@ -32,6 +35,7 @@ LL |     v[3i32];\n    |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `i32`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i32>` for `Vec<isize>`\n \n error[E0277]: the type `[u8]` cannot be indexed by `u8`\n@@ -41,6 +45,7 @@ LL |     s.as_bytes()[3u8];\n    |     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `u8`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u8>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `i8`\n@@ -50,6 +55,7 @@ LL |     s.as_bytes()[3i8];\n    |     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `i8`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i8>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `u32`\n@@ -59,6 +65,7 @@ LL |     s.as_bytes()[3u32];\n    |     ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `u32`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u32>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `i32`\n@@ -68,6 +75,7 @@ LL |     s.as_bytes()[3i32];\n    |     ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `i32`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i32>` for `[u8]`\n \n error: aborting due to 8 previous errors"}, {"sha": "2b93d4aab27db904ac79fb37f05b1370f7cef5db", "filename": "src/test/ui/issues/issue-11771.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     1 +\n    |       ^ no implementation for `{integer} + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n+           and 48 others\n \n error[E0277]: cannot add `()` to `{integer}`\n   --> $DIR/issue-11771.rs:8:7\n@@ -13,6 +19,12 @@ LL |     1 +\n    |       ^ no implementation for `{integer} + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n+           and 48 others\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f61ff0bda0bbdf53b5c4045419074c9867dabcb7", "filename": "src/test/ui/issues/issue-24352.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     1.0f64 - 1\n    |            ^ no implementation for `f64 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Sub<f64>>\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n+           and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     1.0f64 - 1.0"}, {"sha": "48ae2df691c3d66ef17bafb381ba1e72b6b0ba15", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -19,6 +19,7 @@ LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_rece\n    |                                                                                       ^^^^^^^ value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n    |\n    = help: the trait `FromIterator<()>` is not implemented for `Vec<(u32, _, _)>`\n+   = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "8967f49df02a52219cefa8339d8ef4957b0f8789", "filename": "src/test/ui/issues/issue-45801.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-45801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-45801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45801.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `Params: Plugin<i32>` is not satisfied\n LL |     req.get_ref::<Params>();\n    |         ^^^^^^^ the trait `Plugin<i32>` is not implemented for `Params`\n    |\n-   = help: the following implementations were found:\n-             <Params as Plugin<Foo>>\n+   = help: the trait `Plugin<Foo>` is implemented for `Params`\n \n error: aborting due to previous error\n "}, {"sha": "64bcfcd6016ab8664ec253cb7679139b07f622dd", "filename": "src/test/ui/issues/issue-50582.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -14,6 +14,12 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    |                  ^ no implementation for `{integer} + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n+           and 48 others\n \n error: aborting due to 2 previous errors\n "}, {"sha": "55616d2d322ee91a5b42689a04fe9dda7d107400", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -94,6 +94,12 @@ LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n+   = help: the following implementations were found:\n+             <extern \"C\" fn() -> Ret as Debug>\n+             <extern \"C\" fn(A) -> Ret as Debug>\n+             <extern \"C\" fn(A, ...) -> Ret as Debug>\n+             <extern \"C\" fn(A, B) -> Ret as Debug>\n+           and 68 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 9 previous errors"}, {"sha": "d6e39251632ba70c00a626d13bbe99db5660061d", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,7 @@ LL |     let x2: Vec<f64> = x1.into_iter().collect();\n    |                                       ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n+   = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n@@ -18,6 +19,7 @@ LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n    |                             ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n+   = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "6272c4b7022663bcc6aee0d8e4c528125312d266", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -9,7 +9,7 @@ LL |     assert_copy::<&'static mut isize>();\n              <f32 as Copy>\n              <f64 as Copy>\n              <i128 as Copy>\n-           and 10 others\n+           and 6 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n@@ -27,7 +27,7 @@ LL |     assert_copy::<&'a mut isize>();\n              <f32 as Copy>\n              <f64 as Copy>\n              <i128 as Copy>\n-           and 10 others\n+           and 6 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |"}, {"sha": "0e1851d292cf95b5a1cb8fadcfae7b750bd6eefd", "filename": "src/test/ui/lexer/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -38,6 +38,12 @@ LL |     if x == y {}\n    |          ^^ no implementation for `&str == char`\n    |\n    = help: the trait `PartialEq<char>` is not implemented for `&str`\n+   = help: the following implementations were found:\n+             <&'a str as PartialEq<OsString>>\n+             <&'a str as PartialEq<String>>\n+             <&'b str as PartialEq<Cow<'a, str>>>\n+             <str as PartialEq<Cow<'a, str>>>\n+           and 4 others\n \n error[E0308]: mismatched types\n   --> $DIR/lex-bad-char-literals-6.rs:15:20\n@@ -54,6 +60,12 @@ LL |     if x == z {}\n    |          ^^ no implementation for `&str == char`\n    |\n    = help: the trait `PartialEq<char>` is not implemented for `&str`\n+   = help: the following implementations were found:\n+             <&'a str as PartialEq<OsString>>\n+             <&'a str as PartialEq<String>>\n+             <&'b str as PartialEq<Cow<'a, str>>>\n+             <str as PartialEq<Cow<'a, str>>>\n+           and 4 others\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6e67a7b4545292f0a5924a409ef0f622a8addc61", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     1 + Some(1);\n    |       ^ no implementation for `{integer} + Option<{integer}>`\n    |\n    = help: the trait `Add<Option<{integer}>>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n+           and 48 others\n \n error[E0277]: cannot subtract `Option<{integer}>` from `usize`\n   --> $DIR/binops.rs:3:16\n@@ -13,6 +19,12 @@ LL |     2 as usize - Some(1);\n    |                ^ no implementation for `usize - Option<{integer}>`\n    |\n    = help: the trait `Sub<Option<{integer}>>` is not implemented for `usize`\n+   = help: the following implementations were found:\n+             <&'a usize as Sub<usize>>\n+             <&usize as Sub<&usize>>\n+             <usize as Sub<&usize>>\n+             <usize as Sub>\n+           and 48 others\n \n error[E0277]: cannot multiply `{integer}` by `()`\n   --> $DIR/binops.rs:4:7\n@@ -21,6 +33,12 @@ LL |     3 * ();\n    |       ^ no implementation for `{integer} * ()`\n    |\n    = help: the trait `Mul<()>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <&'a f32 as Mul<f32>>\n+             <&'a f64 as Mul<f64>>\n+             <&'a i128 as Mul<i128>>\n+             <&'a i16 as Mul<i16>>\n+           and 49 others\n \n error[E0277]: cannot divide `{integer}` by `&str`\n   --> $DIR/binops.rs:5:7\n@@ -29,6 +47,12 @@ LL |     4 / \"\";\n    |       ^ no implementation for `{integer} / &str`\n    |\n    = help: the trait `Div<&str>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <&'a f32 as Div<f32>>\n+             <&'a f64 as Div<f64>>\n+             <&'a i128 as Div<i128>>\n+             <&'a i16 as Div<i16>>\n+           and 54 others\n \n error[E0277]: can't compare `{integer}` with `String`\n   --> $DIR/binops.rs:6:7\n@@ -37,6 +61,12 @@ LL |     5 < String::new();\n    |       ^ no implementation for `{integer} < String` and `{integer} > String`\n    |\n    = help: the trait `PartialOrd<String>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <f32 as PartialOrd>\n+             <f64 as PartialOrd>\n+             <i128 as PartialOrd>\n+             <i16 as PartialOrd>\n+           and 6 others\n \n error[E0277]: can't compare `{integer}` with `Result<{integer}, _>`\n   --> $DIR/binops.rs:7:7\n@@ -45,6 +75,12 @@ LL |     6 == Ok(1);\n    |       ^^ no implementation for `{integer} == Result<{integer}, _>`\n    |\n    = help: the trait `PartialEq<Result<{integer}, _>>` is not implemented for `{integer}`\n+   = help: the following implementations were found:\n+             <f32 as PartialEq>\n+             <f64 as PartialEq>\n+             <i128 as PartialEq>\n+             <i16 as PartialEq>\n+           and 6 others\n \n error: aborting due to 6 previous errors\n "}, {"sha": "4c8b492247352ef5d690c79d29e3913696d93b61", "filename": "src/test/ui/never_type/defaulted-never-note.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfie\n LL |     foo(_x);\n    |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n    |\n-   = note: this trait is implemented for `()`\n+   = help: the trait `ImplementedForUnitButNotNever` is implemented for `()`\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information)\n    = help: did you intend to use the type `()` here instead?\n note: required by a bound in `foo`"}, {"sha": "aefc739a0a0b0a41d8233e8cf6adcc4452d4db34", "filename": "src/test/ui/never_type/defaulted-never-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -30,7 +30,7 @@ fn smeg() {\n     foo(_x);\n     //[fallback]~^ ERROR the trait bound\n     //[fallback]~| NOTE the trait `ImplementedForUnitButNotNever` is not implemented\n-    //[fallback]~| NOTE this trait is implemented for `()`\n+    //[fallback]~| HELP trait `ImplementedForUnitButNotNever` is implemented for `()`\n     //[fallback]~| NOTE this error might have been caused\n     //[fallback]~| HELP did you intend\n }"}, {"sha": "dee2b1d704b8663c8bd37f1c3a694c948c7145bb", "filename": "src/test/ui/never_type/diverging-fallback-no-leak.fallback.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,7 +4,9 @@ error[E0277]: the trait bound `!: Test` is not satisfied\n LL |     unconstrained_arg(return);\n    |     ^^^^^^^^^^^^^^^^^ the trait `Test` is not implemented for `!`\n    |\n-   = note: this trait is implemented for `()`\n+   = help: the following other types implement trait `Test`:\n+             ()\n+             i32\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information)\n    = help: did you intend to use the type `()` here instead?\n note: required by a bound in `unconstrained_arg`"}, {"sha": "4a78e73e5f6d593f592de93010ac814907c0231d", "filename": "src/test/ui/never_type/impl_trait_fallback2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback2.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -3,6 +3,8 @@ error[E0277]: the trait bound `(): T` is not satisfied\n    |\n LL | fn should_ret_unit() -> impl T {\n    |                         ^^^^^^ the trait `T` is not implemented for `()`\n+   |\n+   = help: the trait `T` is implemented for `i32`\n \n error: aborting due to previous error\n "}, {"sha": "12a6d7962f46be31cf78fa47b73e2ef72983d6fa", "filename": "src/test/ui/never_type/issue-13352.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     2_usize + (loop {});\n    |             ^ no implementation for `usize + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `usize`\n+   = help: the following implementations were found:\n+             <&'a usize as Add<usize>>\n+             <&usize as Add<&usize>>\n+             <usize as Add<&usize>>\n+             <usize as Add>\n+           and 48 others\n \n error: aborting due to previous error\n "}, {"sha": "e2045591390e1717ef21c0a9c923282048375fa9", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.nofallback.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `E: From<()>` is not satisfied\n LL |     <E as From<_>>::from(never);\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `From<()>` is not implemented for `E`\n    |\n-   = help: the following implementations were found:\n-             <E as From<!>>\n+   = help: the trait `From<!>` is implemented for `E`\n \n error: aborting due to previous error\n "}, {"sha": "d8bba1509d868e37a9c75257f3da2a7a10851a49", "filename": "src/test/ui/numbers-arithmetic/not-suggest-float-literal.stderr", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     x + 100.0\n    |       ^ no implementation for `u8 + {float}`\n    |\n    = help: the trait `Add<{float}>` is not implemented for `u8`\n+   = help: the following implementations were found:\n+             <&'a u8 as Add<u8>>\n+             <&u8 as Add<&u8>>\n+             <u8 as Add<&u8>>\n+             <u8 as Add>\n+           and 48 others\n \n error[E0277]: cannot add `&str` to `f64`\n   --> $DIR/not-suggest-float-literal.rs:6:7\n@@ -13,6 +19,12 @@ LL |     x + \"foo\"\n    |       ^ no implementation for `f64 + &str`\n    |\n    = help: the trait `Add<&str>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Add<f64>>\n+             <&f64 as Add<&f64>>\n+             <f64 as Add<&f64>>\n+             <f64 as Add>\n+           and 48 others\n \n error[E0277]: cannot add `{integer}` to `f64`\n   --> $DIR/not-suggest-float-literal.rs:11:7\n@@ -21,6 +33,12 @@ LL |     x + y\n    |       ^ no implementation for `f64 + {integer}`\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Add<f64>>\n+             <&f64 as Add<&f64>>\n+             <f64 as Add<&f64>>\n+             <f64 as Add>\n+           and 48 others\n \n error[E0277]: cannot subtract `{float}` from `u8`\n   --> $DIR/not-suggest-float-literal.rs:15:7\n@@ -29,6 +47,12 @@ LL |     x - 100.0\n    |       ^ no implementation for `u8 - {float}`\n    |\n    = help: the trait `Sub<{float}>` is not implemented for `u8`\n+   = help: the following implementations were found:\n+             <&'a u8 as Sub<u8>>\n+             <&u8 as Sub<&u8>>\n+             <u8 as Sub<&u8>>\n+             <u8 as Sub>\n+           and 48 others\n \n error[E0277]: cannot subtract `&str` from `f64`\n   --> $DIR/not-suggest-float-literal.rs:19:7\n@@ -37,6 +61,12 @@ LL |     x - \"foo\"\n    |       ^ no implementation for `f64 - &str`\n    |\n    = help: the trait `Sub<&str>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Sub<f64>>\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n+           and 48 others\n \n error[E0277]: cannot subtract `{integer}` from `f64`\n   --> $DIR/not-suggest-float-literal.rs:24:7\n@@ -45,6 +75,12 @@ LL |     x - y\n    |       ^ no implementation for `f64 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Sub<f64>>\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n+           and 48 others\n \n error[E0277]: cannot multiply `u8` by `{float}`\n   --> $DIR/not-suggest-float-literal.rs:28:7\n@@ -53,6 +89,12 @@ LL |     x * 100.0\n    |       ^ no implementation for `u8 * {float}`\n    |\n    = help: the trait `Mul<{float}>` is not implemented for `u8`\n+   = help: the following implementations were found:\n+             <&'a u8 as Mul<u8>>\n+             <&u8 as Mul<&u8>>\n+             <u8 as Mul<&u8>>\n+             <u8 as Mul>\n+           and 49 others\n \n error[E0277]: cannot multiply `f64` by `&str`\n   --> $DIR/not-suggest-float-literal.rs:32:7\n@@ -61,6 +103,12 @@ LL |     x * \"foo\"\n    |       ^ no implementation for `f64 * &str`\n    |\n    = help: the trait `Mul<&str>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Mul<f64>>\n+             <&f64 as Mul<&f64>>\n+             <f64 as Mul<&f64>>\n+             <f64 as Mul>\n+           and 49 others\n \n error[E0277]: cannot multiply `f64` by `{integer}`\n   --> $DIR/not-suggest-float-literal.rs:37:7\n@@ -69,6 +117,12 @@ LL |     x * y\n    |       ^ no implementation for `f64 * {integer}`\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Mul<f64>>\n+             <&f64 as Mul<&f64>>\n+             <f64 as Mul<&f64>>\n+             <f64 as Mul>\n+           and 49 others\n \n error[E0277]: cannot divide `u8` by `{float}`\n   --> $DIR/not-suggest-float-literal.rs:41:7\n@@ -77,6 +131,12 @@ LL |     x / 100.0\n    |       ^ no implementation for `u8 / {float}`\n    |\n    = help: the trait `Div<{float}>` is not implemented for `u8`\n+   = help: the following implementations were found:\n+             <&'a u8 as Div<u8>>\n+             <&u8 as Div<&u8>>\n+             <u8 as Div<&u8>>\n+             <u8 as Div<NonZeroU8>>\n+           and 54 others\n \n error[E0277]: cannot divide `f64` by `&str`\n   --> $DIR/not-suggest-float-literal.rs:45:7\n@@ -85,6 +145,12 @@ LL |     x / \"foo\"\n    |       ^ no implementation for `f64 / &str`\n    |\n    = help: the trait `Div<&str>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Div<f64>>\n+             <&f64 as Div<&f64>>\n+             <f64 as Div<&f64>>\n+             <f64 as Div>\n+           and 54 others\n \n error[E0277]: cannot divide `f64` by `{integer}`\n   --> $DIR/not-suggest-float-literal.rs:50:7\n@@ -93,6 +159,12 @@ LL |     x / y\n    |       ^ no implementation for `f64 / {integer}`\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Div<f64>>\n+             <&f64 as Div<&f64>>\n+             <f64 as Div<&f64>>\n+             <f64 as Div>\n+           and 54 others\n \n error: aborting due to 12 previous errors\n "}, {"sha": "b7591dfca99b3d03bfd1b442695fab01b92356cc", "filename": "src/test/ui/numbers-arithmetic/suggest-float-literal.stderr", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     x + 100\n    |       ^ no implementation for `f32 + {integer}`\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f32`\n+   = help: the following implementations were found:\n+             <&'a f32 as Add<f32>>\n+             <&f32 as Add<&f32>>\n+             <f32 as Add<&f32>>\n+             <f32 as Add>\n+           and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x + 100.0\n@@ -17,6 +23,12 @@ LL |     x + 100\n    |       ^ no implementation for `f64 + {integer}`\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Add<f64>>\n+             <&f64 as Add<&f64>>\n+             <f64 as Add<&f64>>\n+             <f64 as Add>\n+           and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x + 100.0\n@@ -29,6 +41,12 @@ LL |     x - 100\n    |       ^ no implementation for `f32 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f32`\n+   = help: the following implementations were found:\n+             <&'a f32 as Sub<f32>>\n+             <&f32 as Sub<&f32>>\n+             <f32 as Sub<&f32>>\n+             <f32 as Sub>\n+           and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x - 100.0\n@@ -41,6 +59,12 @@ LL |     x - 100\n    |       ^ no implementation for `f64 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Sub<f64>>\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n+           and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x - 100.0\n@@ -53,6 +77,12 @@ LL |     x * 100\n    |       ^ no implementation for `f32 * {integer}`\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f32`\n+   = help: the following implementations were found:\n+             <&'a f32 as Mul<f32>>\n+             <&f32 as Mul<&f32>>\n+             <f32 as Mul<&f32>>\n+             <f32 as Mul>\n+           and 49 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x * 100.0\n@@ -65,6 +95,12 @@ LL |     x * 100\n    |       ^ no implementation for `f64 * {integer}`\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Mul<f64>>\n+             <&f64 as Mul<&f64>>\n+             <f64 as Mul<&f64>>\n+             <f64 as Mul>\n+           and 49 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x * 100.0\n@@ -77,6 +113,12 @@ LL |     x / 100\n    |       ^ no implementation for `f32 / {integer}`\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f32`\n+   = help: the following implementations were found:\n+             <&'a f32 as Div<f32>>\n+             <&f32 as Div<&f32>>\n+             <f32 as Div<&f32>>\n+             <f32 as Div>\n+           and 54 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x / 100.0\n@@ -89,6 +131,12 @@ LL |     x / 100\n    |       ^ no implementation for `f64 / {integer}`\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f64`\n+   = help: the following implementations were found:\n+             <&'a f64 as Div<f64>>\n+             <&f64 as Div<&f64>>\n+             <f64 as Div<&f64>>\n+             <f64 as Div>\n+           and 54 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x / 100.0"}, {"sha": "a0fad0acd0b5ceb10428e9e8982c2aeb30670d39", "filename": "src/test/ui/on-unimplemented/impl-substs.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -7,6 +7,7 @@ LL |     Foo::<usize>::foo((1i32, 1i32, 1i32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Foo<usize>` is not implemented for `(i32, i32, i32)`\n+   = help: the trait `Foo<A>` is implemented for `(A, B, C)`\n \n error: aborting due to previous error\n "}, {"sha": "be29d31d97b8e24d00f391e6eb6b6b38d8a58370", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -7,6 +7,9 @@ LL |     Index::index(&[] as &[i32], 2u32);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = help: the following implementations were found:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:36:18\n@@ -17,6 +20,9 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+   = help: the following implementations were found:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:39:18\n@@ -27,6 +33,9 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+   = help: the following implementations were found:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:33:5\n@@ -35,6 +44,9 @@ LL |     Index::index(&[] as &[i32], 2u32);\n    |     ^^^^^^^^^^^^ trait message\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = help: the following implementations were found:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:36:5\n@@ -43,6 +55,9 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     ^^^^^^^^^^^^ on impl for Foo\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+   = help: the following implementations were found:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:39:5\n@@ -51,6 +66,9 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     ^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+   = help: the following implementations were found:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n \n error: aborting due to 6 previous errors\n "}, {"sha": "769a3d77a5726bcd9e78429a7aa17ac5719c7410", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -7,6 +7,7 @@ LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = help: the trait `Index<usize>` is implemented for `[i32]`\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:22:5\n@@ -15,6 +16,7 @@ LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = help: the trait `Index<usize>` is implemented for `[i32]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6dc27b5d4cc56834981d599010d6091215669710", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,7 @@ LL |     x[1i32];\n    |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `i32`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i32>` for `[i32]`\n \n error[E0277]: the type `[i32]` cannot be indexed by `RangeTo<i32>`\n@@ -14,6 +15,9 @@ LL |     x[..1i32];\n    |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `RangeTo<i32>`\n+   = help: the following implementations were found:\n+             <RangeTo<usize> as SliceIndex<[T]>>\n+             <RangeTo<usize> as SliceIndex<str>>\n    = note: required because of the requirements on the impl of `Index<RangeTo<i32>>` for `[i32]`\n \n error: aborting due to 2 previous errors"}, {"sha": "0bbed8704243fa735da45fb8064a1635e95c2cc9", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -10,6 +10,16 @@ error[E0277]: the trait bound `bool: Step` is not satisfied\n LL |     for i in false..true {}\n    |              ^^^^^^^^^^^ the trait `Step` is not implemented for `bool`\n    |\n+   = help: the following other types implement trait `Step`:\n+             char\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n+             u128\n+           and 5 others\n    = note: required because of the requirements on the impl of `Iterator` for `std::ops::Range<bool>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `std::ops::Range<bool>`\n "}, {"sha": "d87eceb1c9a7b73bc36959397f5d92b649aeab81", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -9,6 +9,10 @@ LL | | }\n    | |_^ `main` can only return types that implement `Termination`\n    |\n    = help: the trait `Termination` is not implemented for `Result<f32, ParseFloatError>`\n+   = help: the following implementations were found:\n+             <Result<!, E> as Termination>\n+             <Result<(), E> as Termination>\n+             <Result<Infallible, E> as Termination>\n note: required by a bound in `assert_test_result`\n   --> $SRC_DIR/test/src/lib.rs:LL:COL\n    |"}, {"sha": "1542832f0129c12c199de52cdbd19c047ba51ea6", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     foo(1 as u32 +\n    |                  ^ no implementation for `u32 + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `u32`\n+   = help: the following implementations were found:\n+             <&'a u32 as Add<u32>>\n+             <&u32 as Add<&u32>>\n+             <u32 as Add<&u32>>\n+             <u32 as Add>\n+           and 48 others\n \n error: aborting due to previous error\n "}, {"sha": "af9f2f7c2e9a694d83839026be304af1e1486457", "filename": "src/test/ui/specialization/default-associated-type-bound-1.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -14,8 +14,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     default type U = str;\n    |                      ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `X::U`\n   --> $DIR/default-associated-type-bound-1.rs:8:13\n    |"}, {"sha": "45450788b9cbd32084b84ba72a025b787a2a339c", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -7,6 +7,7 @@ LL |     let _: u8 = s[4];\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<{integer}>` for `str`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n@@ -20,6 +21,7 @@ LL |     let _ = s.get(4);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n note: required by a bound in `core::str::<impl str>::get`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |\n@@ -37,6 +39,7 @@ LL |     let _ = s.get_unchecked(4);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n note: required by a bound in `core::str::<impl str>::get_unchecked`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |"}, {"sha": "9ae085630279ec9e69b3720db0e298c79f1c0291", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -31,6 +31,7 @@ LL |     s[1usize] = bot();\n    |     ^^^^^^^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `usize`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<usize>` for `str`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n@@ -44,6 +45,7 @@ LL |     s.get_mut(1);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n note: required by a bound in `core::str::<impl str>::get_mut`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |\n@@ -61,6 +63,7 @@ LL |     s.get_unchecked_mut(1);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n note: required by a bound in `core::str::<impl str>::get_unchecked_mut`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |"}, {"sha": "0783f04dc9bd3c5583c1f851548f5996e6d5e5aa", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal-bound-regions.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `for<'b> &'b S: Trait` is not satisfied\n LL |     foo::<S>(s);\n    |     ^^^^^^^^ the trait `for<'b> Trait` is not implemented for `&'b S`\n    |\n-   = help: the following implementations were found:\n-             <&'a mut S as Trait>\n+   = help: the trait `Trait` is implemented for `&'a mut S`\n note: required by a bound in `foo`\n   --> $DIR/imm-ref-trait-object-literal-bound-regions.rs:11:20\n    |"}, {"sha": "5f3f62a7b7570b4107e5c7ce7569ca5d2d036468", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -6,8 +6,7 @@ LL |   foo(&s);\n    |   |\n    |   required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <&'a mut S as Trait>\n+   = help: the trait `Trait` is implemented for `&'a mut S`\n note: required by a bound in `foo`\n   --> $DIR/imm-ref-trait-object-literal.rs:7:11\n    |"}, {"sha": "0de765588e5b77dfe3b757681bda6d7d9932f6e3", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -15,6 +15,8 @@ LL | |     5;\n LL | |\n LL | | }\n    | |_^ the trait `Bar` is not implemented for `()`\n+   |\n+   = help: the trait `Bar` is implemented for `u8`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4bdea05b06b8d722bbe15f6a044ecb2f1d79f4c2", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -12,7 +12,6 @@ LL |     foo(String::new());\n              <String as From<&mut str>>\n              <String as From<&str>>\n              <String as From<Box<str>>>\n-           and 2 others\n    = note: required because of the requirements on the impl of `Into<&str>` for `String`\n note: required by a bound in `foo`\n   --> $DIR/into-str.rs:1:31"}, {"sha": "15559d4ae2c2f68893e928acc390ece02510ab6d", "filename": "src/test/ui/suggestions/issue-84973-negative.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -6,8 +6,7 @@ LL |     bar(a);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <&f32 as Tr>\n+   = help: the trait `Tr` is implemented for `&f32`\n note: required by a bound in `bar`\n   --> $DIR/issue-84973-negative.rs:5:11\n    |"}, {"sha": "bfbbe7fd25702b137c24df2c62af1f7998f793ef", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-1.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     f::<dyn X<Y = str>>();\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `f`\n   --> $DIR/check-trait-object-bounds-1.rs:7:9\n    |"}, {"sha": "3ca36d5d2ff197e0439b37dc92e558b16809939a", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-4.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     f::<dyn X<Y = str>>();\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <String as Clone>\n+   = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `f`\n   --> $DIR/check-trait-object-bounds-4.rs:10:9\n    |"}, {"sha": "8d646a414599c1264922f3b951128d22ff7f5725", "filename": "src/test/ui/traits/bound/same-crate-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.rs?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -50,6 +50,6 @@ fn main() {\n         // impls for the correct trait where the path is not misleading.\n         a::try_foo(other_variant_implements_correct_trait);\n         //~^ ERROR E0277\n-        //~| the following implementations were found:\n+        //~| the trait `main::a::Bar` is implemented for `ImplementsTraitForUsize<usize>`\n     }\n }"}, {"sha": "ef39a70066db622077178a7e123dc96756681397", "filename": "src/test/ui/traits/bound/same-crate-name.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -12,6 +12,7 @@ help: trait impl with same name found\n LL | impl Bar for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^\n    = note: perhaps two different versions of crate `crate_a2` are being used?\n+   = help: the trait `main::a::Bar` is implemented for `ImplementsTraitForUsize<usize>`\n note: required by a bound in `try_foo`\n   --> $DIR/auxiliary/crate_a1.rs:3:24\n    |\n@@ -26,6 +27,7 @@ LL |         a::try_foo(implements_no_traits);\n    |         |\n    |         required by a bound introduced by this call\n    |\n+   = help: the trait `main::a::Bar` is implemented for `ImplementsTraitForUsize<usize>`\n note: required by a bound in `try_foo`\n   --> $DIR/auxiliary/crate_a1.rs:3:24\n    |\n@@ -46,6 +48,7 @@ help: trait impl with same name found\n LL | impl Bar for ImplementsWrongTraitConditionally<isize> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: perhaps two different versions of crate `crate_a2` are being used?\n+   = help: the trait `main::a::Bar` is implemented for `ImplementsTraitForUsize<usize>`\n note: required by a bound in `try_foo`\n   --> $DIR/auxiliary/crate_a1.rs:3:24\n    |\n@@ -60,8 +63,7 @@ LL |         a::try_foo(other_variant_implements_correct_trait);\n    |         |\n    |         required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <ImplementsTraitForUsize<usize> as main::a::Bar>\n+   = help: the trait `main::a::Bar` is implemented for `ImplementsTraitForUsize<usize>`\n note: required by a bound in `try_foo`\n   --> $DIR/auxiliary/crate_a1.rs:3:24\n    |"}, {"sha": "b213ee635df59f6c2be7048ee89dffcaa230ff57", "filename": "src/test/ui/traits/coercion-generic-bad.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `Struct: Trait<isize>` is not satisfied\n LL |     let s: Box<dyn Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<isize>` is not implemented for `Struct`\n    |\n-   = help: the following implementations were found:\n-             <Struct as Trait<&'static str>>\n+   = help: the trait `Trait<&'static str>` is implemented for `Struct`\n    = note: required for the cast to the object type `dyn Trait<isize>`\n \n error: aborting due to previous error"}, {"sha": "3645ad03cb9bbecf170174f50454cc6cb1efb174", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -3,6 +3,8 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n    |\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |\n+   = help: the trait `CompareTo<i32>` is implemented for `i64`\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:30:7\n@@ -20,6 +22,8 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n    |\n LL |     <dyn CompareToInts>::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |\n+   = help: the trait `CompareTo<i32>` is implemented for `i64`\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:38:5"}, {"sha": "f2b3de13beb9e7a4b0995fbbef0e94f4dab4f11e", "filename": "src/test/ui/traits/issue-91594.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fissue-91594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fissue-91594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91594.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `Foo: HasComponent<()>` is not satisfied\n LL | impl HasComponent<<Foo as Component<Foo>>::Interface> for Foo {}\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasComponent<()>` is not implemented for `Foo`\n    |\n-   = help: the following implementations were found:\n-             <Foo as HasComponent<<Foo as Component<Foo>>::Interface>>\n+   = help: the trait `HasComponent<<Foo as Component<Foo>>::Interface>` is implemented for `Foo`\n note: required because of the requirements on the impl of `Component<Foo>` for `Foo`\n   --> $DIR/issue-91594.rs:13:27\n    |"}, {"sha": "37bc5c6badc4151d4853cf1473ac39b0e3fb6591", "filename": "src/test/ui/traits/map-types.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,6 +4,7 @@ error[E0277]: the trait bound `Box<dyn Map<isize, isize>>: Map<usize, isize>` is\n LL |     let y: Box<dyn Map<usize, isize>> = Box::new(x);\n    |                                         ^^^^^^^^^^^ the trait `Map<usize, isize>` is not implemented for `Box<dyn Map<isize, isize>>`\n    |\n+   = help: the trait `Map<usize, isize>` is implemented for `HashMap<K, V>`\n    = note: required for the cast to the object type `dyn Map<usize, isize>`\n \n error: aborting due to previous error"}, {"sha": "cefb2a8792f17f14a9a9915a293b66a8f591b0b0", "filename": "src/test/ui/traits/reservation-impl/no-use.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -6,8 +6,7 @@ LL |     <() as MyTrait>::foo(&());\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <() as MyTrait>\n+   = help: the trait `MyTrait` is implemented for `()`\n \n error: aborting due to previous error\n "}, {"sha": "b77af7ddf474628863341ce536372d48bbed572e", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -8,8 +8,6 @@ LL |     takes_type_parameter(&string);  // Error\n    |     |                    help: consider adding dereference here: `&*string`\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <&str as SomeTrait>\n note: required by a bound in `takes_type_parameter`\n   --> $DIR/issue-62530.rs:4:44\n    |"}, {"sha": "6e12321c2333b40ce4087a602a5455bdf94f8671", "filename": "src/test/ui/traits/suggest-deferences/multiple-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -6,6 +6,7 @@ LL |     foo(&mut baz);\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = help: the trait `Happy` is implemented for `&mut LDM`\n note: required by a bound in `foo`\n   --> $DIR/multiple-1.rs:45:26\n    |"}, {"sha": "f9906713f84274d12d7a34399dcbba43de2853a0", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,8 +5,7 @@ LL |         Err(\"\")?;\n    |                ^ the trait `From<&str>` is not implemented for `TryFromSliceError`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = help: the following implementations were found:\n-             <TryFromSliceError as From<Infallible>>\n+   = help: the trait `From<Infallible>` is implemented for `TryFromSliceError`\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, &str>>` for `Result<u32, TryFromSliceError>`\n \n error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Output == &str`"}, {"sha": "fc2692a9a931372d3ad66711ae638d87dd6d1a7e", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -12,7 +12,7 @@ LL |     Ok(Err(123_i32)?)\n              <u8 as From<bool>>\n              <f32 as From<i16>>\n              <f32 as From<i8>>\n-           and 71 others\n+           and 67 others\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n \n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n@@ -27,6 +27,7 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u64, String>`\n+   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n \n error[E0277]: the `?` operator can only be used on `Result`s in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:17:31\n@@ -39,6 +40,7 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Result<u64, String>`\n+   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n \n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:22:22\n@@ -51,6 +53,7 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `Option<u16>`\n+   = help: the trait `FromResidual` is implemented for `Option<T>`\n \n error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:27:33\n@@ -63,6 +66,7 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Option<u64>`\n+   = help: the trait `FromResidual` is implemented for `Option<T>`\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:32:39\n@@ -75,6 +79,7 @@ LL | | }\n    | |_- this function returns a `ControlFlow`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `ControlFlow<String>`\n+   = help: the trait `FromResidual` is implemented for `ControlFlow<B, C>`\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:37:12\n@@ -88,6 +93,7 @@ LL | | }\n    | |_- this function returns a `ControlFlow`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `ControlFlow<u64>`\n+   = help: the trait `FromResidual` is implemented for `ControlFlow<B, C>`\n \n error[E0277]: the `?` operator in a function that returns `ControlFlow<B, _>` can only be used on other `ControlFlow<B, _>`s (with the same Break type)\n   --> $DIR/bad-interconversion.rs:43:29\n@@ -102,6 +108,7 @@ LL | | }\n    |\n    = help: the trait `FromResidual<ControlFlow<u8, Infallible>>` is not implemented for `ControlFlow<i64>`\n    = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n+   = help: the trait `FromResidual` is implemented for `ControlFlow<B, C>`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "b0e4de8cb4bf59223fe8add972f19d2d8c543b01", "filename": "src/test/ui/try-trait/option-to-result.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -10,6 +10,7 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<(), ()>`\n+   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n \n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/option-to-result.rs:11:6\n@@ -23,6 +24,7 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<Result<Infallible, i32>>` is not implemented for `Option<i32>`\n+   = help: the trait `FromResidual` is implemented for `Option<T>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7b2a9a16f900b258ff5a1e80f9cb4dc203a5f721", "filename": "src/test/ui/try-trait/try-on-option.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -10,6 +10,7 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u32, ()>`\n+   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option.rs:11:6"}, {"sha": "d0c04371bd793faa8926a8a7404c1a8126a3e321", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -13,8 +13,7 @@ error[E0277]: the trait bound `(): Bug` is not satisfied\n LL |     const FUN: fn() -> Self::Item = || ();\n    |                                        ^^ the trait `Bug` is not implemented for `()`\n    |\n-   = help: the following implementations were found:\n-             <&() as Bug>\n+   = help: the trait `Bug` is implemented for `&()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0df2b57d373b6435c796feff2b7817c768578861", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n LL | fn foo() -> impl Foo<FooX> {\n    |             ^^^^^^^^^^^^^^ the trait `Foo<FooX>` is not implemented for `()`\n    |\n-   = help: the following implementations were found:\n-             <() as Foo<()>>\n+   = help: the trait `Foo<()>` is implemented for `()`\n \n error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n   --> $DIR/nested-tait-inference.rs:12:28\n@@ -19,8 +18,7 @@ LL | |     ()\n LL | | }\n    | |_^ the trait `Foo<FooX>` is not implemented for `()`\n    |\n-   = help: the following implementations were found:\n-             <() as Foo<()>>\n+   = help: the trait `Foo<()>` is implemented for `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b93ded6a7d3e1b96bcb5923fabaa5dfc1717fad7", "filename": "src/test/ui/type-alias-impl-trait/self-referential-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     42_i32\n    |     ^^^^^^ no implementation for `i32 == Foo`\n    |\n    = help: the trait `PartialEq<Foo>` is not implemented for `i32`\n+   = help: the following implementations were found:\n+             <i32 as PartialEq>\n+             <f32 as PartialEq>\n+             <f64 as PartialEq>\n+             <i128 as PartialEq>\n+           and 6 others\n \n error: aborting due to previous error\n "}, {"sha": "23ca68901963464f39e45edfae36f176d2d060e7", "filename": "src/test/ui/type-alias-impl-trait/self-referential-4.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     i\n    |     ^ no implementation for `&i32 == Bar<'b, 'static>`\n    |\n    = help: the trait `PartialEq<Bar<'b, 'static>>` is not implemented for `&i32`\n+   = help: the following implementations were found:\n+             <i32 as PartialEq>\n+             <f32 as PartialEq>\n+             <f64 as PartialEq>\n+             <i128 as PartialEq>\n+           and 6 others\n \n error[E0277]: can't compare `&i32` with `Foo<'static, 'b>`\n   --> $DIR/self-referential-4.rs:12:5\n@@ -13,6 +19,12 @@ LL |     i\n    |     ^ no implementation for `&i32 == Foo<'static, 'b>`\n    |\n    = help: the trait `PartialEq<Foo<'static, 'b>>` is not implemented for `&i32`\n+   = help: the following implementations were found:\n+             <i32 as PartialEq>\n+             <f32 as PartialEq>\n+             <f64 as PartialEq>\n+             <i128 as PartialEq>\n+           and 6 others\n \n error[E0277]: can't compare `&i32` with `Moo<'static, 'a>`\n   --> $DIR/self-referential-4.rs:18:5\n@@ -21,6 +33,12 @@ LL |     i\n    |     ^ no implementation for `&i32 == Moo<'static, 'a>`\n    |\n    = help: the trait `PartialEq<Moo<'static, 'a>>` is not implemented for `&i32`\n+   = help: the following implementations were found:\n+             <i32 as PartialEq>\n+             <f32 as PartialEq>\n+             <f64 as PartialEq>\n+             <i128 as PartialEq>\n+           and 6 others\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4384bc9b98a7c17d36be2e5680a276461396f029", "filename": "src/test/ui/type-alias-impl-trait/self-referential.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     i\n    |     ^ no implementation for `&i32 == Bar<'b, 'a>`\n    |\n    = help: the trait `PartialEq<Bar<'b, 'a>>` is not implemented for `&i32`\n+   = help: the following implementations were found:\n+             <i32 as PartialEq>\n+             <f32 as PartialEq>\n+             <f64 as PartialEq>\n+             <i128 as PartialEq>\n+           and 6 others\n \n error[E0277]: can't compare `&i32` with `(i32, &i32)`\n   --> $DIR/self-referential.rs:12:10\n@@ -13,6 +19,12 @@ LL |     (42, i)\n    |          ^ no implementation for `&i32 == (i32, &i32)`\n    |\n    = help: the trait `PartialEq<(i32, &i32)>` is not implemented for `&i32`\n+   = help: the following implementations were found:\n+             <i32 as PartialEq>\n+             <f32 as PartialEq>\n+             <f64 as PartialEq>\n+             <i128 as PartialEq>\n+           and 6 others\n \n error[E0277]: can't compare `&i32` with `(i32, Moo<'b, 'a>::{opaque#0})`\n   --> $DIR/self-referential.rs:18:10\n@@ -21,6 +33,12 @@ LL |     (42, i)\n    |          ^ no implementation for `&i32 == (i32, Moo<'b, 'a>::{opaque#0})`\n    |\n    = help: the trait `PartialEq<(i32, Moo<'b, 'a>::{opaque#0})>` is not implemented for `&i32`\n+   = help: the following implementations were found:\n+             <i32 as PartialEq>\n+             <f32 as PartialEq>\n+             <f64 as PartialEq>\n+             <i128 as PartialEq>\n+           and 6 others\n \n error: aborting due to 3 previous errors\n "}, {"sha": "80ff068ff309adc077e655301aa20d3f9e61b5e8", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -65,6 +65,12 @@ LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    |                                                                  ^^^^^^^ no implementation for `i32 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i32`\n+   = help: the following implementations were found:\n+             <&'a i32 as Add<i32>>\n+             <&i32 as Add<&i32>>\n+             <i32 as Add<&i32>>\n+             <i32 as Add>\n+           and 48 others\n \n error: aborting due to 7 previous errors\n "}, {"sha": "0a5ec56e91512893cd583fb23869a323dc1b0a84", "filename": "src/test/ui/typeck/issue-81293.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -20,6 +20,12 @@ LL |     a = c + b * 5;\n    |           ^ no implementation for `usize + u16`\n    |\n    = help: the trait `Add<u16>` is not implemented for `usize`\n+   = help: the following implementations were found:\n+             <&'a usize as Add<usize>>\n+             <&usize as Add<&usize>>\n+             <usize as Add<&usize>>\n+             <usize as Add>\n+           and 48 others\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c769a0df7c8911efe2be2d7007cf5e33c11d812c", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,12 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n+   = help: the following implementations were found:\n+             <&'a i32 as Add<i32>>\n+             <&i32 as Add<&i32>>\n+             <i32 as Add<&i32>>\n+             <i32 as Add>\n+           and 48 others\n \n error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:6:28"}, {"sha": "5e67b2c44f2be0de83492ccaffd443e097f00b6d", "filename": "src/test/ui/unevaluated_fixed_size_array_len.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -4,8 +4,7 @@ error[E0277]: the trait bound `[(); 0]: Foo` is not satisfied\n LL |     <[(); 0] as Foo>::foo()\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[(); 0]`\n    |\n-   = help: the following implementations were found:\n-             <[(); 1] as Foo>\n+   = help: the trait `Foo` is implemented for `[(); 1]`\n \n error: aborting due to previous error\n "}, {"sha": "037f8b9f3377018989a3dba9cd266259e004d0d9", "filename": "src/test/ui/wf/hir-wf-check-erase-regions.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr?ref=3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "patch": "@@ -5,6 +5,7 @@ LL |     type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&T` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&T`\n+   = help: the trait `Iterator` is implemented for `&mut I`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&T`\n note: required by a bound in `Flatten`\n   --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n@@ -19,6 +20,7 @@ LL |     fn into_iter(self) -> Self::IntoIter {\n    |                           ^^^^^^^^^^^^^^ `&T` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&T`\n+   = help: the trait `Iterator` is implemented for `&mut I`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&T`\n note: required by a bound in `Flatten`\n   --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL"}]}