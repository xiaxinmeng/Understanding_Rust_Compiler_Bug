{"sha": "87e25e4fd03a8da19718e800413d000030e0a10c", "node_id": "C_kwDOAAsO6NoAKDg3ZTI1ZTRmZDAzYThkYTE5NzE4ZTgwMDQxM2QwMDAwMzBlMGExMGM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-12T11:36:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-12T11:36:36Z"}, "message": "Rollup merge of #99171 - GuillaumeGomez:rustdoc-ui-test-regex, r=Dylan-DPC\n\nPut back UI test regex\n\nI just realized I overwrote these two commits in https://github.com/rust-lang/rust/pull/99055 when force pushing to fix the stdout output...\n\nr? `@Dylan-DPC`", "tree": {"sha": "e9fd931884a2a25de8541e399271ec90e875f3c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9fd931884a2a25de8541e399271ec90e875f3c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87e25e4fd03a8da19718e800413d000030e0a10c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJizVzFCRBK7hj4Ov3rIwAAvGoIACAltoNbZWPojndg3hiTaTu6\njouaVAyxcFYyOW5HkKVeQXDqFfMT97OLJGJ3d/oIhXXl+n22S/5/xxmk/WId2aaj\nkOW6f0qs/P/g1gvpIKxSkscfwIqSa6CTgoR+IoiT7i8BFHrBU1aN9Wfb1TKN/Q89\nrxFPshTOjxcVzDNIphwxyFTUmAaxt0wf1dnkbSzfDy0I485bYHMNnXRcDWxcrKZ6\nqDcvQs83evon1rhtrruKYVD9FzhIgrApaI0GUqwXY0SfqP5fpx7MEL6FqjrYkvsF\nP3f8BkZayYSCcePSQ9VKNJEA8fyjg4+0UYs1ZbwVMf7O/L/DUZla30FpqiGMoR4=\n=1AKp\n-----END PGP SIGNATURE-----\n", "payload": "tree e9fd931884a2a25de8541e399271ec90e875f3c6\nparent 01c24213cb9d26dc8465f793515125a6c90d9bc1\nparent 349a3fc6a3c251088b58627d043c0cd1ca524640\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657625796 +0530\ncommitter GitHub <noreply@github.com> 1657625796 +0530\n\nRollup merge of #99171 - GuillaumeGomez:rustdoc-ui-test-regex, r=Dylan-DPC\n\nPut back UI test regex\n\nI just realized I overwrote these two commits in https://github.com/rust-lang/rust/pull/99055 when force pushing to fix the stdout output...\n\nr? `@Dylan-DPC`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87e25e4fd03a8da19718e800413d000030e0a10c", "html_url": "https://github.com/rust-lang/rust/commit/87e25e4fd03a8da19718e800413d000030e0a10c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87e25e4fd03a8da19718e800413d000030e0a10c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01c24213cb9d26dc8465f793515125a6c90d9bc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/01c24213cb9d26dc8465f793515125a6c90d9bc1", "html_url": "https://github.com/rust-lang/rust/commit/01c24213cb9d26dc8465f793515125a6c90d9bc1"}, {"sha": "349a3fc6a3c251088b58627d043c0cd1ca524640", "url": "https://api.github.com/repos/rust-lang/rust/commits/349a3fc6a3c251088b58627d043c0cd1ca524640", "html_url": "https://github.com/rust-lang/rust/commit/349a3fc6a3c251088b58627d043c0cd1ca524640"}], "stats": {"total": 89, "additions": 70, "deletions": 19}, "files": [{"sha": "e166edf8b619cb99d36224b5a00bda7b582b3018", "filename": "src/test/rustdoc-ui/c-help.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e25e4fd03a8da19718e800413d000030e0a10c/src%2Ftest%2Frustdoc-ui%2Fc-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e25e4fd03a8da19718e800413d000030e0a10c/src%2Ftest%2Frustdoc-ui%2Fc-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fc-help.rs?ref=87e25e4fd03a8da19718e800413d000030e0a10c", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n // compile-flags: -Chelp\n+// check-stdout\n+// regex-error-pattern: -C\\s+incremental\n \n pub struct Foo;"}, {"sha": "c7cf841b93707bae0974684fa0b41b75adb0ecbe", "filename": "src/test/rustdoc-ui/z-help.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e25e4fd03a8da19718e800413d000030e0a10c/src%2Ftest%2Frustdoc-ui%2Fz-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e25e4fd03a8da19718e800413d000030e0a10c/src%2Ftest%2Frustdoc-ui%2Fz-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.rs?ref=87e25e4fd03a8da19718e800413d000030e0a10c", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n // compile-flags: -Zhelp\n+// check-stdout\n+// regex-error-pattern: -Z\\s+self-profile\n \n pub struct Foo;"}, {"sha": "17f2b77dab052b65c97de24da48136ddde73dfc4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87e25e4fd03a8da19718e800413d000030e0a10c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e25e4fd03a8da19718e800413d000030e0a10c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=87e25e4fd03a8da19718e800413d000030e0a10c", "patch": "@@ -60,6 +60,8 @@ impl EarlyProps {\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n     pub error_patterns: Vec<String>,\n+    // Regexes that should be expected, in order, on standard out\n+    pub regex_error_patterns: Vec<String>,\n     // Extra flags to pass to the compiler\n     pub compile_flags: Vec<String>,\n     // Extra flags to pass when the compiled code is run (such as --bench)\n@@ -163,6 +165,7 @@ pub struct TestProps {\n \n mod directives {\n     pub const ERROR_PATTERN: &'static str = \"error-pattern\";\n+    pub const REGEX_ERROR_PATTERN: &'static str = \"regex-error-pattern\";\n     pub const COMPILE_FLAGS: &'static str = \"compile-flags\";\n     pub const RUN_FLAGS: &'static str = \"run-flags\";\n     pub const SHOULD_ICE: &'static str = \"should-ice\";\n@@ -200,6 +203,7 @@ impl TestProps {\n     pub fn new() -> Self {\n         TestProps {\n             error_patterns: vec![],\n+            regex_error_patterns: vec![],\n             compile_flags: vec![],\n             run_flags: None,\n             pp_exact: None,\n@@ -285,6 +289,12 @@ impl TestProps {\n                     &mut self.error_patterns,\n                     |r| r,\n                 );\n+                config.push_name_value_directive(\n+                    ln,\n+                    REGEX_ERROR_PATTERN,\n+                    &mut self.regex_error_patterns,\n+                    |r| r,\n+                );\n \n                 if let Some(flags) = config.parse_name_value_directive(ln, COMPILE_FLAGS) {\n                     self.compile_flags.extend(flags.split_whitespace().map(|s| s.to_owned()));"}, {"sha": "5517b5a12c3935f5ac04a5b5cd9492e87ce84680", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/87e25e4fd03a8da19718e800413d000030e0a10c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e25e4fd03a8da19718e800413d000030e0a10c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=87e25e4fd03a8da19718e800413d000030e0a10c", "patch": "@@ -323,12 +323,13 @@ impl<'test> TestCx<'test> {\n         let output_to_check = self.get_output(&proc_res);\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n         if !expected_errors.is_empty() {\n-            if !self.props.error_patterns.is_empty() {\n+            if !self.props.error_patterns.is_empty() || !self.props.regex_error_patterns.is_empty()\n+            {\n                 self.fatal(\"both error pattern and expected errors specified\");\n             }\n             self.check_expected_errors(expected_errors, &proc_res);\n         } else {\n-            self.check_error_patterns(&output_to_check, &proc_res, pm);\n+            self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n         }\n         if self.props.should_ice {\n             match proc_res.status.code() {\n@@ -363,7 +364,7 @@ impl<'test> TestCx<'test> {\n \n         let output_to_check = self.get_output(&proc_res);\n         self.check_correct_failure_status(&proc_res);\n-        self.check_error_patterns(&output_to_check, &proc_res, pm);\n+        self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n     }\n \n     fn get_output(&self, proc_res: &ProcRes) -> String {\n@@ -1222,14 +1223,13 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn check_error_patterns(\n+    fn check_all_error_patterns(\n         &self,\n         output_to_check: &str,\n         proc_res: &ProcRes,\n         pm: Option<PassMode>,\n     ) {\n-        debug!(\"check_error_patterns\");\n-        if self.props.error_patterns.is_empty() {\n+        if self.props.error_patterns.is_empty() && self.props.regex_error_patterns.is_empty() {\n             if pm.is_some() {\n                 // FIXME(#65865)\n                 return;\n@@ -1243,13 +1243,8 @@ impl<'test> TestCx<'test> {\n \n         let mut missing_patterns: Vec<String> = Vec::new();\n \n-        for pattern in &self.props.error_patterns {\n-            if output_to_check.contains(pattern.trim()) {\n-                debug!(\"found error pattern {}\", pattern);\n-            } else {\n-                missing_patterns.push(pattern.to_string());\n-            }\n-        }\n+        self.check_error_patterns(output_to_check, &mut missing_patterns);\n+        self.check_regex_error_patterns(output_to_check, proc_res, &mut missing_patterns);\n \n         if missing_patterns.is_empty() {\n             return;\n@@ -1268,6 +1263,44 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn check_error_patterns(&self, output_to_check: &str, missing_patterns: &mut Vec<String>) {\n+        debug!(\"check_error_patterns\");\n+        for pattern in &self.props.error_patterns {\n+            if output_to_check.contains(pattern.trim()) {\n+                debug!(\"found error pattern {}\", pattern);\n+            } else {\n+                missing_patterns.push(pattern.to_string());\n+            }\n+        }\n+    }\n+\n+    fn check_regex_error_patterns(\n+        &self,\n+        output_to_check: &str,\n+        proc_res: &ProcRes,\n+        missing_patterns: &mut Vec<String>,\n+    ) {\n+        debug!(\"check_regex_error_patterns\");\n+\n+        for pattern in &self.props.regex_error_patterns {\n+            let pattern = pattern.trim();\n+            let re = match Regex::new(pattern) {\n+                Ok(re) => re,\n+                Err(err) => {\n+                    self.fatal_proc_rec(\n+                        &format!(\"invalid regex error pattern '{}': {:?}\", pattern, err),\n+                        proc_res,\n+                    );\n+                }\n+            };\n+            if re.is_match(output_to_check) {\n+                debug!(\"found regex error pattern {}\", pattern);\n+            } else {\n+                missing_patterns.push(pattern.to_string());\n+            }\n+        }\n+    }\n+\n     fn check_no_compiler_crash(&self, proc_res: &ProcRes, should_ice: bool) {\n         match proc_res.status.code() {\n             Some(101) if !should_ice => {\n@@ -1892,7 +1925,9 @@ impl<'test> TestCx<'test> {\n                 // If we are extracting and matching errors in the new\n                 // fashion, then you want JSON mode. Old-skool error\n                 // patterns still match the raw compiler output.\n-                if self.props.error_patterns.is_empty() {\n+                if self.props.error_patterns.is_empty()\n+                    && self.props.regex_error_patterns.is_empty()\n+                {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                     rustc.args(&[\"--json\", \"future-incompat\"]);\n                 }\n@@ -3268,10 +3303,11 @@ impl<'test> TestCx<'test> {\n                 self.fatal_proc_rec(\"test run succeeded!\", &proc_res);\n             }\n \n-            if !self.props.error_patterns.is_empty() {\n+            if !self.props.error_patterns.is_empty() || !self.props.regex_error_patterns.is_empty()\n+            {\n                 // \"// error-pattern\" comments\n                 let output_to_check = self.get_output(&proc_res);\n-                self.check_error_patterns(&output_to_check, &proc_res, pm);\n+                self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n             }\n         }\n \n@@ -3285,15 +3321,16 @@ impl<'test> TestCx<'test> {\n             self.props.error_patterns\n         );\n         if !explicit && self.config.compare_mode.is_none() {\n-            let check_patterns =\n-                should_run == WillExecute::No && !self.props.error_patterns.is_empty();\n+            let check_patterns = should_run == WillExecute::No\n+                && (!self.props.error_patterns.is_empty()\n+                    || !self.props.regex_error_patterns.is_empty());\n \n             let check_annotations = !check_patterns || !expected_errors.is_empty();\n \n             if check_patterns {\n                 // \"// error-pattern\" comments\n                 let output_to_check = self.get_output(&proc_res);\n-                self.check_error_patterns(&output_to_check, &proc_res, pm);\n+                self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n             }\n \n             if check_annotations {"}]}