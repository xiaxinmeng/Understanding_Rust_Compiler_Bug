{"sha": "f653d3ab30d4cab73af560f39b448ece2a49ff6c", "node_id": "C_kwDOAAsO6NoAKGY2NTNkM2FiMzBkNGNhYjczYWY1NjBmMzliNDQ4ZWNlMmE0OWZmNmM", "commit": {"author": {"name": "Nikita Popov", "email": "npopov@redhat.com", "date": "2022-07-19T13:03:39Z"}, "committer": {"name": "Nikita Popov", "email": "npopov@redhat.com", "date": "2022-07-27T14:19:07Z"}, "message": "Add elementtype attributes for llvm.arm.ldrex/strex intrinsics\n\nThese intrinsics (and a few more, but there are the only ones\nexposed by stdarch) require an elementtype attribute in LLVM 15.", "tree": {"sha": "d536cee4eaac98e56f5158380a291ef67cafa0e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d536cee4eaac98e56f5158380a291ef67cafa0e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f653d3ab30d4cab73af560f39b448ece2a49ff6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f653d3ab30d4cab73af560f39b448ece2a49ff6c", "html_url": "https://github.com/rust-lang/rust/commit/f653d3ab30d4cab73af560f39b448ece2a49ff6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f653d3ab30d4cab73af560f39b448ece2a49ff6c/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff693dc7b8119a1761edf0d08156bb670708824a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff693dc7b8119a1761edf0d08156bb670708824a", "html_url": "https://github.com/rust-lang/rust/commit/ff693dc7b8119a1761edf0d08156bb670708824a"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "9eb3574e77b004c4a383451c6c1d17a2df061a05", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f653d3ab30d4cab73af560f39b448ece2a49ff6c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f653d3ab30d4cab73af560f39b448ece2a49ff6c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=f653d3ab30d4cab73af560f39b448ece2a49ff6c", "patch": "@@ -569,6 +569,22 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n                 &[cmse_nonsecure_call],\n             );\n         }\n+\n+        // Some intrinsics require that an elementtype attribute (with the pointee type of a\n+        // pointer argument) is added to the callsite.\n+        let element_type_index = unsafe { llvm::LLVMRustGetElementTypeArgIndex(callsite) };\n+        if element_type_index >= 0 {\n+            let arg_ty = self.args[element_type_index as usize].layout.ty;\n+            let pointee_ty = arg_ty.builtin_deref(true).expect(\"Must be pointer argument\").ty;\n+            let element_type_attr = unsafe {\n+                llvm::LLVMRustCreateElementTypeAttr(bx.llcx, bx.layout_of(pointee_ty).llvm_type(bx))\n+            };\n+            attributes::apply_to_callsite(\n+                callsite,\n+                llvm::AttributePlace::Argument(element_type_index as u32),\n+                &[element_type_attr],\n+            );\n+        }\n     }\n }\n "}, {"sha": "3139f93bfefaee9c0daf0c01734d5442983f8b9d", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f653d3ab30d4cab73af560f39b448ece2a49ff6c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f653d3ab30d4cab73af560f39b448ece2a49ff6c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=f653d3ab30d4cab73af560f39b448ece2a49ff6c", "patch": "@@ -1192,6 +1192,7 @@ extern \"C\" {\n     pub fn LLVMRustCreateDereferenceableOrNullAttr(C: &Context, bytes: u64) -> &Attribute;\n     pub fn LLVMRustCreateByValAttr<'a>(C: &'a Context, ty: &'a Type) -> &'a Attribute;\n     pub fn LLVMRustCreateStructRetAttr<'a>(C: &'a Context, ty: &'a Type) -> &'a Attribute;\n+    pub fn LLVMRustCreateElementTypeAttr<'a>(C: &'a Context, ty: &'a Type) -> &'a Attribute;\n     pub fn LLVMRustCreateUWTableAttr(C: &Context, async_: bool) -> &Attribute;\n     pub fn LLVMRustCreateAllocSizeAttr(C: &Context, size_arg: u32) -> &Attribute;\n     pub fn LLVMRustCreateAllocKindAttr(C: &Context, size_arg: u64) -> &Attribute;\n@@ -2541,4 +2542,6 @@ extern \"C\" {\n \n     #[allow(improper_ctypes)]\n     pub fn LLVMRustGetMangledName(V: &Value, out: &RustString);\n+\n+    pub fn LLVMRustGetElementTypeArgIndex(CallSite: &Value) -> i32;\n }"}, {"sha": "c333738ded4582f6fe35854ddc68ee43238e16b3", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f653d3ab30d4cab73af560f39b448ece2a49ff6c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f653d3ab30d4cab73af560f39b448ece2a49ff6c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=f653d3ab30d4cab73af560f39b448ece2a49ff6c", "patch": "@@ -6,6 +6,7 @@\n #include \"llvm/IR/GlobalVariable.h\"\n #include \"llvm/IR/Instructions.h\"\n #include \"llvm/IR/Intrinsics.h\"\n+#include \"llvm/IR/IntrinsicsARM.h\"\n #include \"llvm/IR/Mangler.h\"\n #include \"llvm/Object/Archive.h\"\n #include \"llvm/Object/COFFImportFile.h\"\n@@ -300,6 +301,14 @@ extern \"C\" LLVMAttributeRef LLVMRustCreateStructRetAttr(LLVMContextRef C, LLVMTy\n   return wrap(Attribute::getWithStructRetType(*unwrap(C), unwrap(Ty)));\n }\n \n+extern \"C\" LLVMAttributeRef LLVMRustCreateElementTypeAttr(LLVMContextRef C, LLVMTypeRef Ty) {\n+#if LLVM_VERSION_GE(15, 0)\n+  return wrap(Attribute::get(*unwrap(C), Attribute::ElementType, unwrap(Ty)));\n+#else\n+  report_fatal_error(\"Should not be needed on LLVM < 15\");\n+#endif\n+}\n+\n extern \"C\" LLVMAttributeRef LLVMRustCreateUWTableAttr(LLVMContextRef C, bool Async) {\n #if LLVM_VERSION_LT(15, 0)\n   return wrap(Attribute::get(*unwrap(C), Attribute::UWTable));\n@@ -1943,3 +1952,16 @@ extern \"C\" LLVMValueRef LLVMGetAggregateElement(LLVMValueRef C, unsigned Idx) {\n     return wrap(unwrap<Constant>(C)->getAggregateElement(Idx));\n }\n #endif\n+\n+extern \"C\" int32_t LLVMRustGetElementTypeArgIndex(LLVMValueRef CallSite) {\n+#if LLVM_VERSION_GE(15, 0)\n+    auto *CB = unwrap<CallBase>(CallSite);\n+    switch (CB->getIntrinsicID()) {\n+        case Intrinsic::arm_ldrex:\n+            return 0;\n+        case Intrinsic::arm_strex:\n+            return 1;\n+    }\n+#endif\n+    return -1;\n+}"}]}