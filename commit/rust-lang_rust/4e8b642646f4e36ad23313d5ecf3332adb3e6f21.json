{"sha": "4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "node_id": "C_kwDOAAsO6NoAKDRlOGI2NDI2NDZmNGUzNmFkMjMzMTNkNWVjZjMzMzJhZGIzZTZmMjE", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-10-28T19:01:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-22T21:41:48Z"}, "message": "Turn on ConstDebugInfo pass.", "tree": {"sha": "fe1cb747db5a0228895d6a5e3ebfa7be60196e4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe1cb747db5a0228895d6a5e3ebfa7be60196e4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "html_url": "https://github.com/rust-lang/rust/commit/4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ad04ad8419577f5dec37a80f3b46506edb84c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad04ad8419577f5dec37a80f3b46506edb84c96", "html_url": "https://github.com/rust-lang/rust/commit/4ad04ad8419577f5dec37a80f3b46506edb84c96"}], "stats": {"total": 144, "additions": 69, "deletions": 75}, "files": [{"sha": "b9bfbefcad9bb54a4140d1402bccbee62fd419e1", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -16,7 +16,7 @@ pub struct ConstDebugInfo;\n \n impl<'tcx> MirPass<'tcx> for ConstDebugInfo {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.opts.unstable_opts.unsound_mir_opts && sess.mir_opt_level() > 0\n+        sess.mir_opt_level() > 0\n     }\n \n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "95a1b8c9d214ee62629600dc0ed2de2d8ce4af26", "filename": "tests/codegen/debuginfo-constant-locals.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fcodegen%2Fdebuginfo-constant-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fcodegen%2Fdebuginfo-constant-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdebuginfo-constant-locals.rs?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: -g -O\n+\n+// Check that simple constant values are preserved in debuginfo across both MIR opts and LLVM opts\n+\n+#![crate_type = \"lib\"]\n+\n+#[no_mangle]\n+pub fn check_it() {\n+    let a = 1;\n+    let b = 42;\n+\n+    foo(a + b);\n+}\n+\n+#[inline(never)]\n+fn foo(x: i32) {\n+    std::process::exit(x);\n+}\n+\n+// CHECK-LABEL: @check_it\n+// CHECK: call void @llvm.dbg.value(metadata i32 1, metadata ![[a_metadata:[0-9]+]], metadata !DIExpression())\n+// CHECK: call void @llvm.dbg.value(metadata i32 42, metadata ![[b_metadata:[0-9]+]], metadata !DIExpression())\n+\n+// CHECK: ![[a_metadata]] = !DILocalVariable(name: \"a\"\n+// CHECK-SAME: line: 9\n+\n+// CHECK: ![[b_metadata]] = !DILocalVariable(name: \"b\"\n+// CHECK-SAME: line: 10"}, {"sha": "f685fe46d70d0e5c5215f0085cc175204dc1d67e", "filename": "tests/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -334,9 +334,9 @@ pub fn change_constructor_variant_c_like() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_variant_c_like() {\n     let _x = Clike::C;"}, {"sha": "a835b8eef8ce73a359deb0c6d6266c90df0d39b9", "filename": "tests/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -91,7 +91,7 @@ pub fn change_mutability_of_slot() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n@@ -176,7 +176,7 @@ pub fn change_mutability_of_binding_in_pattern() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n@@ -193,9 +193,9 @@ pub fn add_initializer() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n@@ -210,9 +210,9 @@ pub fn change_initializer() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_initializer() {\n     let _x = 5u16;"}, {"sha": "7886bf19e0c17cbaf27f4f82030c2cef0d5e3019", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.PreCodegen.after.32bit.mir", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -2,24 +2,17 @@\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n-    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-    let mut _3: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        debug x => const 4_i32;          // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+            debug y => const 3_i32;      // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+                debug z => const 42_u32; // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n     }\n }"}, {"sha": "7886bf19e0c17cbaf27f4f82030c2cef0d5e3019", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.PreCodegen.after.64bit.mir", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -2,24 +2,17 @@\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n-    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-    let mut _3: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        debug x => const 4_i32;          // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+            debug y => const 3_i32;      // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+                debug z => const 42_u32; // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n     }\n }"}, {"sha": "5bea94c7fe839edc07b571b0f344c3e4deda2a6a", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -2,24 +2,17 @@\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n-    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-    let mut _3: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        debug x => const 4_i32;          // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+            debug y => const 3_i32;      // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+                debug z => const 42_u32; // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n     }\n }"}, {"sha": "5bea94c7fe839edc07b571b0f344c3e4deda2a6a", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -2,24 +2,17 @@\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n-    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-    let mut _3: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        debug x => const 4_i32;          // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+            debug y => const 3_i32;      // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+                debug z => const 42_u32; // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n     }\n }"}, {"sha": "3aebfb69e0ae1fd8237457decf91c7bfe38eacb2", "filename": "tests/mir-opt/inline/issue_106141.outer.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -8,7 +8,7 @@\n +         let mut _2: bool;                // in scope 1 at $DIR/issue_106141.rs:14:8: 14:21\n +         let mut _3: &[bool; 1];          // in scope 1 at $DIR/issue_106141.rs:12:18: 12:25\n +         scope 2 {\n-+             debug buffer => _3;          // in scope 2 at $DIR/issue_106141.rs:12:9: 12:15\n++             debug buffer => const _;     // in scope 2 at $DIR/issue_106141.rs:12:9: 12:15\n +             scope 3 {\n +                 debug index => _0;       // in scope 3 at $DIR/issue_106141.rs:13:9: 13:14\n +             }"}, {"sha": "9f955b4717bc37ac9c48ef1d437bd0d553b082dc", "filename": "tests/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -4,31 +4,29 @@ fn num_to_digit(_1: char) -> u32 {\n     debug num => _1;                     // in scope 0 at $DIR/issue_59352.rs:+0:21: +0:24\n     let mut _0: u32;                     // return place in scope 0 at $DIR/issue_59352.rs:+0:35: +0:38\n     let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n-    let mut _3: u32;                     // in scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n     scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:15:12: 15:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        debug radix => _3;               // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        let mut _4: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        let _5: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        debug radix => const 8_u32;      // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        let mut _3: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        let _4: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         scope 2 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-            debug self => _4;            // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n-            let mut _6: isize;           // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+            debug self => _3;            // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+            let mut _5: isize;           // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n     scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:15:42: 15:50\n         debug self => _2;                // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        let mut _7: isize;               // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        let mut _8: !;                   // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        let mut _6: isize;               // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        let mut _7: !;                   // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         scope 4 {\n             debug val => _0;             // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n+        StorageLive(_3);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_4);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        _5 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _4 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n@@ -43,8 +41,8 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb2: {\n-        _7 = discriminant(_2);           // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        switchInt(move _7) -> [0: bb6, 1: bb8, otherwise: bb7]; // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _6 = discriminant(_2);           // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _6) -> [0: bb6, 1: bb8, otherwise: bb7]; // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb3: {\n@@ -57,16 +55,15 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb5: {\n-        _4 = &_5;                        // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        _6 = discriminant((*_4));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _3 = &_4;                        // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _5 = discriminant((*_3));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_3);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageDead(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n-        switchInt(move _6) -> [1: bb1, otherwise: bb3]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n+        switchInt(move _5) -> [1: bb1, otherwise: bb3]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n     }\n \n     bb6: {\n-        _8 = core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _7 = core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/option.rs:LL:COL\n                                          // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }"}, {"sha": "f1f7857a1bd0a3038887c1c688467516f744e4dc", "filename": "tests/mir-opt/lower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e8b642646f4e36ad23313d5ecf3332adb3e6f21/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir?ref=4e8b642646f4e36ad23313d5ecf3332adb3e6f21", "patch": "@@ -2,24 +2,21 @@\n \n fn f_u64() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics_e2e.rs:+0:16: +0:16\n-    let mut _1: u64;                     // in scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n     scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics_e2e.rs:15:5: 15:21\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics_e2e.rs:19:22: 19:23\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n+        debug t => const 0_u64;          // in scope 1 at $DIR/lower_intrinsics_e2e.rs:19:22: 19:23\n+        let _1: ();                      // in scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n         scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics_e2e.rs:20:8: 20:32\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n-        _2 = f_non_zst::<u64>(const 0_u64) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n+        _1 = f_non_zst::<u64>(const 0_u64) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics_e2e.rs:23:9: 23:18\n                                          // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n         return;                          // scope 0 at $DIR/lower_intrinsics_e2e.rs:+2:2: +2:2\n     }\n }"}]}