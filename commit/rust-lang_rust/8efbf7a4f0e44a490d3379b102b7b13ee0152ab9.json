{"sha": "8efbf7a4f0e44a490d3379b102b7b13ee0152ab9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZmJmN2E0ZjBlNDRhNDkwZDMzNzliMTAyYjdiMTNlZTAxNTJhYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-13T17:42:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-13T17:42:13Z"}, "message": "Auto merge of #45890 - arielb1:self-first, r=eddyb\n\ncheck::method - unify receivers before normalizing method signatures\n\nNormalizing method signatures can unify inference variables, which can\ncause receiver unification to fail. Unify the receivers first to avoid\nthat.\n\nFixes #36701.\nFixes #45801.\nFixes #45855.\n\nr? @eddyb\n\nbeta-nominating because #43880 made this ICE happen in more cases (the code in that issue ICEs post-#43880 only, but the unit test here ICEs on all versions).", "tree": {"sha": "84972aa1ec68087f3ce1df744e885427a5549f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84972aa1ec68087f3ce1df744e885427a5549f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8efbf7a4f0e44a490d3379b102b7b13ee0152ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8efbf7a4f0e44a490d3379b102b7b13ee0152ab9", "html_url": "https://github.com/rust-lang/rust/commit/8efbf7a4f0e44a490d3379b102b7b13ee0152ab9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8efbf7a4f0e44a490d3379b102b7b13ee0152ab9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca22a8f81993b0e046dbc41307c99bd9e38a195", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca22a8f81993b0e046dbc41307c99bd9e38a195", "html_url": "https://github.com/rust-lang/rust/commit/aca22a8f81993b0e046dbc41307c99bd9e38a195"}, {"sha": "5901f1c8b52315f705dac1d072f438139338b195", "url": "https://api.github.com/repos/rust-lang/rust/commits/5901f1c8b52315f705dac1d072f438139338b195", "html_url": "https://github.com/rust-lang/rust/commit/5901f1c8b52315f705dac1d072f438139338b195"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "17ed0aaa30b02a889001a9efd4c2f9571f4bf558", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8efbf7a4f0e44a490d3379b102b7b13ee0152ab9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8efbf7a4f0e44a490d3379b102b7b13ee0152ab9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=8efbf7a4f0e44a490d3379b102b7b13ee0152ab9", "patch": "@@ -16,6 +16,7 @@ use hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n use rustc::ty::{self, LvaluePreference, NoPreference, PreferMutLvalue, Ty};\n+use rustc::ty::subst::Subst;\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, OverloadedDeref};\n use rustc::ty::fold::TypeFoldable;\n use rustc::infer::{self, InferOk};\n@@ -84,9 +85,6 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // Adjust the self expression the user provided and obtain the adjusted type.\n         let self_ty = self.adjust_self_ty(unadjusted_self_ty, &pick);\n \n-        // Make sure nobody calls `drop()` explicitly.\n-        self.enforce_illegal_method_limitations(&pick);\n-\n         // Create substitutions for the method's type parameters.\n         let rcvr_substs = self.fresh_receiver_substs(self_ty, &pick);\n         let all_substs = self.instantiate_method_substs(&pick, segment, rcvr_substs);\n@@ -96,6 +94,22 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // Create the final signature for the method, replacing late-bound regions.\n         let (method_sig, method_predicates) = self.instantiate_method_sig(&pick, all_substs);\n \n+        // Unify the (adjusted) self type with what the method expects.\n+        //\n+        // SUBTLE: if we want good error messages, because of \"guessing\" while matching\n+        // traits, no trait system method can be called before this point because they\n+        // could alter our Self-type, except for normalizing the receiver from the\n+        // signature (which is also done during probing).\n+        let method_sig_rcvr =\n+            self.normalize_associated_types_in(self.span, &method_sig.inputs()[0]);\n+        self.unify_receivers(self_ty, method_sig_rcvr);\n+\n+        let (method_sig, method_predicates) =\n+            self.normalize_associated_types_in(self.span, &(method_sig, method_predicates));\n+\n+        // Make sure nobody calls `drop()` explicitly.\n+        self.enforce_illegal_method_limitations(&pick);\n+\n         // If there is a `Self: Sized` bound and `Self` is a trait object, it is possible that\n         // something which derefs to `Self` actually implements the trait and the caller\n         // wanted to make a static dispatch on it but forgot to import the trait.\n@@ -106,9 +120,6 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // appropriate hint suggesting to import the trait.\n         let illegal_sized_bound = self.predicates_require_illegal_sized_bound(&method_predicates);\n \n-        // Unify the (adjusted) self type with what the method expects.\n-        self.unify_receivers(self_ty, method_sig.inputs()[0]);\n-\n         // Add any trait/regions obligations specified on the method's type parameters.\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case.\n@@ -338,6 +349,9 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n     ///////////////////////////////////////////////////////////////////////////\n     //\n \n+    // NOTE: this returns the *unnormalized* predicates and method sig. Because of\n+    // inference guessing, the predicates and method signature can't be normalized\n+    // until we unify the `Self` type.\n     fn instantiate_method_sig(&mut self,\n                               pick: &probe::Pick<'tcx>,\n                               all_substs: &'tcx Substs<'tcx>)\n@@ -352,8 +366,6 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         let def_id = pick.item.def_id;\n         let method_predicates = self.tcx.predicates_of(def_id)\n                                     .instantiate(self.tcx, all_substs);\n-        let method_predicates = self.normalize_associated_types_in(self.span,\n-                                                                   &method_predicates);\n \n         debug!(\"method_predicates after subst = {:?}\", method_predicates);\n \n@@ -369,7 +381,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         debug!(\"late-bound lifetimes from method instantiated, method_sig={:?}\",\n                method_sig);\n \n-        let method_sig = self.instantiate_type_scheme(self.span, all_substs, &method_sig);\n+        let method_sig = method_sig.subst(self.tcx, all_substs);\n         debug!(\"type scheme substituted, method_sig={:?}\", method_sig);\n \n         (method_sig, method_predicates)"}, {"sha": "7823a7d6ba8b50bb802e7dc586826d5345a28a84", "filename": "src/test/compile-fail/issue-45801.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8efbf7a4f0e44a490d3379b102b7b13ee0152ab9/src%2Ftest%2Fcompile-fail%2Fissue-45801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8efbf7a4f0e44a490d3379b102b7b13ee0152ab9/src%2Ftest%2Fcompile-fail%2Fissue-45801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-45801.rs?ref=8efbf7a4f0e44a490d3379b102b7b13ee0152ab9", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Params;\n+\n+pub trait Plugin<E: ?Sized> {\n+    type Error;\n+}\n+\n+pub trait Pluggable {\n+    fn get_ref<P: Plugin<Self>>(&mut self) -> Option<P::Error> {\n+        None\n+    }\n+}\n+\n+struct Foo;\n+impl Plugin<Foo> for Params {\n+    type Error = ();\n+}\n+\n+impl<T: Copy> Pluggable for T {}\n+\n+fn handle(req: &mut i32) {\n+    req.get_ref::<Params>();\n+    //~^ ERROR the trait bound `Params: Plugin<i32>` is not satisfied\n+}\n+\n+fn main() {}"}]}