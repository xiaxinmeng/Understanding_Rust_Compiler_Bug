{"sha": "617c7cd9fa9751375abbf1a43cfe29ffc19ee92b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxN2M3Y2Q5ZmE5NzUxMzc1YWJiZjFhNDNjZmUyOWZmYzE5ZWU5MmI=", "commit": {"author": {"name": "Tymoteusz Jankowski", "email": "tymoteusz.jankowski@gmail.com", "date": "2020-05-13T14:54:16Z"}, "committer": {"name": "Tymoteusz Jankowski", "email": "tymoteusz.jankowski@gmail.com", "date": "2020-05-13T18:24:14Z"}, "message": "Make intra links work inside trait impl block", "tree": {"sha": "462d55d7aaaf7b179e155f499cd9ebbbced042e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/462d55d7aaaf7b179e155f499cd9ebbbced042e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/617c7cd9fa9751375abbf1a43cfe29ffc19ee92b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/617c7cd9fa9751375abbf1a43cfe29ffc19ee92b", "html_url": "https://github.com/rust-lang/rust/commit/617c7cd9fa9751375abbf1a43cfe29ffc19ee92b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/617c7cd9fa9751375abbf1a43cfe29ffc19ee92b/comments", "author": null, "committer": null, "parents": [{"sha": "750db09fa800dceebba57d609d42969172118c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/750db09fa800dceebba57d609d42969172118c92", "html_url": "https://github.com/rust-lang/rust/commit/750db09fa800dceebba57d609d42969172118c92"}], "stats": {"total": 101, "additions": 90, "deletions": 11}, "files": [{"sha": "a3ef350a0487e7ab4060cb0e1499873390e1ab6a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/617c7cd9fa9751375abbf1a43cfe29ffc19ee92b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617c7cd9fa9751375abbf1a43cfe29ffc19ee92b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=617c7cd9fa9751375abbf1a43cfe29ffc19ee92b", "patch": "@@ -12,7 +12,8 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n use rustc_session::lint;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n+use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n \n use std::ops::Range;\n@@ -130,6 +131,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         current_item: &Option<String>,\n         parent_id: Option<hir::HirId>,\n         extra_fragment: &Option<String>,\n+        item_opt: Option<&Item>,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n@@ -230,16 +232,44 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::TyAlias,\n                     did,\n                 ) => {\n-                    let item = cx\n-                        .tcx\n-                        .inherent_impls(did)\n-                        .iter()\n-                        .flat_map(|imp| cx.tcx.associated_items(*imp).in_definition_order())\n-                        .find(|item| item.ident.name == item_name);\n+                    // We need item's parent to know if it's\n+                    // trait impl or struct/enum/etc impl\n+                    let item_parent = item_opt\n+                        .and_then(|item| self.cx.as_local_hir_id(item.def_id))\n+                        .and_then(|item_hir| {\n+                            let parent_hir = self.cx.tcx.hir().get_parent_item(item_hir);\n+                            self.cx.tcx.hir().find(parent_hir)\n+                        });\n+                    let item = match item_parent {\n+                        Some(hir::Node::Item(hir::Item {\n+                            kind: hir::ItemKind::Impl { of_trait: Some(_), self_ty, .. },\n+                            ..\n+                        })) => {\n+                            // trait impl\n+                            cx.tcx\n+                                .associated_item_def_ids(self_ty.hir_id.owner)\n+                                .iter()\n+                                .map(|child| {\n+                                    let associated_item = cx.tcx.associated_item(*child);\n+                                    associated_item\n+                                })\n+                                .find(|child| child.ident.name == item_name)\n+                        }\n+                        _ => {\n+                            // struct/enum/etc. impl\n+                            cx.tcx\n+                                .inherent_impls(did)\n+                                .iter()\n+                                .flat_map(|imp| cx.tcx.associated_items(*imp).in_definition_order())\n+                                .find(|item| item.ident.name == item_name)\n+                        }\n+                    };\n+\n                     if let Some(item) = item {\n                         let out = match item.kind {\n                             ty::AssocKind::Fn if ns == ValueNS => \"method\",\n                             ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n+                            ty::AssocKind::Type if ns == ValueNS => \"associatedtype\",\n                             _ => return self.variant_field(path_str, current_item, module_id),\n                         };\n                         if extra_fragment.is_some() {\n@@ -484,8 +514,14 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n \n                 match kind {\n                     Some(ns @ ValueNS) => {\n-                        match self.resolve(path_str, ns, &current_item, base_node, &extra_fragment)\n-                        {\n+                        match self.resolve(\n+                            path_str,\n+                            ns,\n+                            &current_item,\n+                            base_node,\n+                            &extra_fragment,\n+                            None,\n+                        ) {\n                             Ok(res) => res,\n                             Err(ErrorKind::ResolutionFailure) => {\n                                 resolution_failure(cx, &item, path_str, &dox, link_range);\n@@ -501,8 +537,14 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         }\n                     }\n                     Some(ns @ TypeNS) => {\n-                        match self.resolve(path_str, ns, &current_item, base_node, &extra_fragment)\n-                        {\n+                        match self.resolve(\n+                            path_str,\n+                            ns,\n+                            &current_item,\n+                            base_node,\n+                            &extra_fragment,\n+                            None,\n+                        ) {\n                             Ok(res) => res,\n                             Err(ErrorKind::ResolutionFailure) => {\n                                 resolution_failure(cx, &item, path_str, &dox, link_range);\n@@ -526,6 +568,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 &current_item,\n                                 base_node,\n                                 &extra_fragment,\n+                                None,\n                             ) {\n                                 Err(ErrorKind::AnchorFailure(msg)) => {\n                                     anchor_failure(cx, &item, &ori_link, &dox, link_range, msg);\n@@ -539,6 +582,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 &current_item,\n                                 base_node,\n                                 &extra_fragment,\n+                                Some(&item),\n                             ) {\n                                 Err(ErrorKind::AnchorFailure(msg)) => {\n                                     anchor_failure(cx, &item, &ori_link, &dox, link_range, msg);"}, {"sha": "fab8406d525e5f83ca18ccd341b735ae2ad05d08", "filename": "src/test/rustdoc/intra-link-trait-impl.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/617c7cd9fa9751375abbf1a43cfe29ffc19ee92b/src%2Ftest%2Frustdoc%2Fintra-link-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617c7cd9fa9751375abbf1a43cfe29ffc19ee92b/src%2Ftest%2Frustdoc%2Fintra-link-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-trait-impl.rs?ref=617c7cd9fa9751375abbf1a43cfe29ffc19ee92b", "patch": "@@ -0,0 +1,35 @@\n+#![crate_name = \"foo\"]\n+\n+// ignore-tidy-linelength\n+\n+pub struct MyStruct;\n+\n+impl MyTrait for MyStruct {\n+\n+// @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#associatedtype.AssoType'\n+\n+    /// [`AssoType`]\n+    ///\n+    /// [`AssoType`]: MyStruct::AssoType\n+    type AssoType = u32;\n+\n+// @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#associatedconstant.ASSO_CONST'\n+\n+    /// [`ASSO_CONST`]\n+    ///\n+    /// [`ASSO_CONST`]: MyStruct::ASSO_CONST\n+    const ASSO_CONST: i32 = 10;\n+\n+// @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#method.trait_fn'\n+\n+    /// [`trait_fn`]\n+    ///\n+    /// [`trait_fn`]: MyStruct::trait_fn\n+    fn trait_fn() { }\n+}\n+\n+pub trait MyTrait {\n+    type AssoType;\n+    const ASSO_CONST: i32 = 1;\n+    fn trait_fn();\n+}"}]}