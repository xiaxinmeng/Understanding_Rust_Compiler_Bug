{"sha": "07fb5ee78f4f251637c5c4414982a8c6e32e186d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZmI1ZWU3OGY0ZjI1MTYzN2M1YzQ0MTQ5ODJhOGM2ZTMyZTE4NmQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-06-03T06:35:30Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-07-08T21:55:59Z"}, "message": "Adjust the threshold to look at the ABI, not just the size", "tree": {"sha": "29a0dcf21152e5b172a4026dcbcf3aa860e335ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a0dcf21152e5b172a4026dcbcf3aa860e335ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07fb5ee78f4f251637c5c4414982a8c6e32e186d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07fb5ee78f4f251637c5c4414982a8c6e32e186d", "html_url": "https://github.com/rust-lang/rust/commit/07fb5ee78f4f251637c5c4414982a8c6e32e186d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07fb5ee78f4f251637c5c4414982a8c6e32e186d/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6444f24a29d1b9868e5dba647daf8209499757f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6444f24a29d1b9868e5dba647daf8209499757f6", "html_url": "https://github.com/rust-lang/rust/commit/6444f24a29d1b9868e5dba647daf8209499757f6"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "9a968659e2fe8d6ee439c380511c36e798f4ee09", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/07fb5ee78f4f251637c5c4414982a8c6e32e186d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fb5ee78f4f251637c5c4414982a8c6e32e186d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=07fb5ee78f4f251637c5c4414982a8c6e32e186d", "patch": "@@ -297,28 +297,40 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n \n             sym::raw_eq => {\n+                use abi::Abi::*;\n                 let tp_ty = substs.type_at(0);\n-                let (size, align) = self.size_and_align_of(tp_ty);\n+                let layout = self.layout_of(tp_ty).layout;\n+                let use_integer_compare = match layout.abi {\n+                    Scalar(_) | ScalarPair(_, _) => true,\n+                    Uninhabited | Vector { .. } => false,\n+                    Aggregate { .. } => {\n+                        // For rusty ABIs, small aggregates are actually passed\n+                        // as `RegKind::Integer` (see `FnAbi::adjust_for_abi`),\n+                        // so we re-use that same threshold here.\n+                        layout.size <= self.data_layout().pointer_size * 2\n+                    }\n+                };\n+\n                 let a = args[0].immediate();\n                 let b = args[1].immediate();\n-                if size.bytes() == 0 {\n+                if layout.size.bytes() == 0 {\n                     self.const_bool(true)\n-                } else if size > self.data_layout().pointer_size * 4 {\n+                } else if use_integer_compare {\n+                    let integer_ty = self.type_ix(layout.size.bits());\n+                    let ptr_ty = self.type_ptr_to(integer_ty);\n+                    let a_ptr = self.bitcast(a, ptr_ty);\n+                    let a_val = self.load(a_ptr, layout.align.abi);\n+                    let b_ptr = self.bitcast(b, ptr_ty);\n+                    let b_val = self.load(b_ptr, layout.align.abi);\n+                    self.icmp(IntPredicate::IntEQ, a_val, b_val)\n+                } else {\n                     let i8p_ty = self.type_i8p();\n                     let a_ptr = self.bitcast(a, i8p_ty);\n                     let b_ptr = self.bitcast(b, i8p_ty);\n-                    let n = self.const_usize(size.bytes());\n+                    let n = self.const_usize(layout.size.bytes());\n                     let llfn = self.get_intrinsic(\"memcmp\");\n                     let cmp = self.call(llfn, &[a_ptr, b_ptr, n], None);\n                     self.icmp(IntPredicate::IntEQ, cmp, self.const_i32(0))\n-                } else {\n-                    let integer_ty = self.type_ix(size.bits());\n-                    let ptr_ty = self.type_ptr_to(integer_ty);\n-                    let a_ptr = self.bitcast(a, ptr_ty);\n-                    let a_val = self.load(a_ptr, align);\n-                    let b_ptr = self.bitcast(b, ptr_ty);\n-                    let b_val = self.load(b_ptr, align);\n-                    self.icmp(IntPredicate::IntEQ, a_val, b_val)\n                 }\n             }\n "}, {"sha": "4b60fa4b0bffa40d68a2c692903090ac66338601", "filename": "src/test/codegen/array-equality.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07fb5ee78f4f251637c5c4414982a8c6e32e186d/src%2Ftest%2Fcodegen%2Farray-equality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fb5ee78f4f251637c5c4414982a8c6e32e186d/src%2Ftest%2Fcodegen%2Farray-equality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Farray-equality.rs?ref=07fb5ee78f4f251637c5c4414982a8c6e32e186d", "patch": "@@ -23,6 +23,18 @@ pub fn array_eq_ref(a: &[u16; 6], b: &[u16; 6]) -> bool {\n     a == b\n }\n \n+// CHECK-LABEL: @array_eq_value_still_passed_by_pointer\n+#[no_mangle]\n+pub fn array_eq_value_still_passed_by_pointer(a: [u16; 9], b: [u16; 9]) -> bool {\n+    // CHECK-NEXT: start:\n+    // CHECK-NEXT: bitcast\n+    // CHECK-NEXT: bitcast\n+    // CHECK-NEXT: %[[CMP:.+]] = tail call i32 @{{bcmp|memcmp}}(i8* nonnull dereferenceable(18) %{{.+}}, i8* nonnull dereferenceable(18) %{{.+}}, i64 18)\n+    // CHECK-NEXT: %[[EQ:.+]] = icmp eq i32 %[[CMP]], 0\n+    // CHECK-NEXT: ret i1 %[[EQ]]\n+    a == b\n+}\n+\n // CHECK-LABEL: @array_eq_long\n #[no_mangle]\n pub fn array_eq_long(a: &[u16; 1234], b: &[u16; 1234]) -> bool {"}]}