{"sha": "ba48850409222b2470fdc606329dc74aecbc0faa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNDg4NTA0MDkyMjJiMjQ3MGZkYzYwNjMyOWRjNzRhZWNiYzBmYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-29T10:55:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-29T10:55:27Z"}, "message": "Auto merge of #53245 - michaelwoerister:thinlto-rust-llvm, r=alexcrichton\n\n[experimental]: Build LLVM with ThinLTO enabled (2nd attempt)\n\nThis is https://github.com/rust-lang/rust/pull/51207 revived. This time, I'd like to run actual performance tests to see if it improves compile times.", "tree": {"sha": "87abd95e8c426f44d4f64e4f8c8ced3e05055d68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87abd95e8c426f44d4f64e4f8c8ced3e05055d68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba48850409222b2470fdc606329dc74aecbc0faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba48850409222b2470fdc606329dc74aecbc0faa", "html_url": "https://github.com/rust-lang/rust/commit/ba48850409222b2470fdc606329dc74aecbc0faa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba48850409222b2470fdc606329dc74aecbc0faa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca0de63898b525656ad8447cd81ccb08a05e3d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0de63898b525656ad8447cd81ccb08a05e3d6c", "html_url": "https://github.com/rust-lang/rust/commit/ca0de63898b525656ad8447cd81ccb08a05e3d6c"}, {"sha": "3cf6f0db1ab61ed33c585b156a0d5c41279f0810", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf6f0db1ab61ed33c585b156a0d5c41279f0810", "html_url": "https://github.com/rust-lang/rust/commit/3cf6f0db1ab61ed33c585b156a0d5c41279f0810"}], "stats": {"total": 167, "additions": 144, "deletions": 23}, "files": [{"sha": "35f69cd05b607098028140e8edcb79000ae0c003", "filename": "config.toml.example", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -21,6 +21,12 @@\n # Indicates whether the LLVM build is a Release or Debug build\n #optimize = true\n \n+# Indicates whether LLVM should be built with ThinLTO. Note that this will\n+# only succeed if you use clang, lld, llvm-ar, and llvm-ranlib in your C/C++\n+# toolchain (see the `cc`, `cxx`, `linker`, `ar`, and `ranlib` options below).\n+# More info at: https://clang.llvm.org/docs/ThinLTO.html#clang-bootstrap\n+#thin-lto = false\n+\n # Indicates whether an LLVM Release build should include debug info\n #release-debuginfo = false\n \n@@ -388,6 +394,10 @@\n # Note: an absolute path should be used, otherwise LLVM build will break.\n #ar = \"ar\"\n \n+# Ranlib to be used to assemble static libraries compiled from C/C++ code.\n+# Note: an absolute path should be used, otherwise LLVM build will break.\n+#ranlib = \"ranlib\"\n+\n # Linker to be used to link Rust code. Note that the\n # default value is platform specific, and if not specified it may also depend on\n # what platform is crossing to what platform."}, {"sha": "5c287f25e26bc6321a7411772c8905fc9436df6f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -827,7 +827,7 @@ impl<'a> Builder<'a> {\n         if let Some(ref error_format) = self.config.rustc_error_format {\n             cargo.env(\"RUSTC_ERROR_FORMAT\", error_format);\n         }\n-        if cmd != \"build\" && cmd != \"check\" && want_rustdoc {\n+        if cmd != \"build\" && cmd != \"check\" && cmd != \"rustc\" && want_rustdoc {\n             cargo.env(\"RUSTDOC_LIBDIR\", self.sysroot_libdir(compiler, self.config.build));\n         }\n \n@@ -988,7 +988,7 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        if cmd == \"build\"\n+        if (cmd == \"build\" || cmd == \"rustc\")\n             && mode == Mode::Std\n             && self.config.extended\n             && compiler.is_final_stage(self)"}, {"sha": "20cdfcb3d298134ebbab2d4900c741e70c7b8080", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -50,6 +50,7 @@ impl Step for Std {\n         println!(\"Checking std artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   true);\n \n@@ -98,6 +99,7 @@ impl Step for Rustc {\n         println!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   true);\n \n@@ -149,6 +151,7 @@ impl Step for CodegenBackend {\n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &codegen_backend_stamp(builder, compiler, target, backend),\n                   true);\n     }\n@@ -187,6 +190,7 @@ impl Step for Test {\n         println!(\"Checking test artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libtest_stamp(builder, compiler, target),\n                   true);\n \n@@ -236,6 +240,7 @@ impl Step for Rustdoc {\n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &rustdoc_stamp(builder, compiler, target),\n                   true);\n "}, {"sha": "da0ccf5e1773d164cbffbe015433bd127e007448", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -117,6 +117,7 @@ impl Step for Std {\n                 &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   false);\n \n@@ -396,6 +397,7 @@ impl Step for Test {\n                 &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libtest_stamp(builder, compiler, target),\n                   false);\n \n@@ -529,6 +531,7 @@ impl Step for Rustc {\n                  compiler.stage, &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   false);\n \n@@ -673,18 +676,47 @@ impl Step for CodegenBackend {\n         let out_dir = builder.cargo_out(compiler, Mode::Codegen, target);\n         builder.clear_if_dirty(&out_dir, &librustc_stamp(builder, compiler, target));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"rustc\");\n         cargo.arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n \n         let features = build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n \n+        let mut cargo_tails_args = vec![];\n+\n+        if builder.config.llvm_thin_lto {\n+            cargo_tails_args.push(\"--\".to_string());\n+\n+            let num_jobs = builder.jobs();\n+\n+            if !target.contains(\"msvc\") {\n+                // Here we assume that the linker is clang. If it's not, there'll\n+                // be linker errors.\n+                cargo_tails_args.push(\"-Clink-arg=-fuse-ld=lld\".to_string());\n+                cargo_tails_args.push(\"-Clink-arg=-flto=thin\".to_string());\n+\n+                if builder.config.llvm_optimize {\n+                    cargo_tails_args.push(\"-Clink-arg=-O2\".to_string());\n+                }\n+\n+                // Let's make LLD respect the `-j` option.\n+                let num_jobs_arg = format!(\"-Clink-arg=-Wl,--thinlto-jobs={}\", num_jobs);\n+                cargo_tails_args.push(num_jobs_arg);\n+            } else {\n+                // Here we assume that the linker is lld-link.exe. lld-link.exe\n+                // does not need the extra arguments except for num_jobs\n+                let num_jobs_arg = format!(\"-Clink-arg=/opt:lldltojobs={}\", num_jobs);\n+                cargo_tails_args.push(num_jobs_arg);\n+            }\n+        }\n+\n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         let files = run_cargo(builder,\n                               cargo.arg(\"--features\").arg(features),\n+                              cargo_tails_args,\n                               &tmp_stamp,\n                               false);\n         if builder.config.dry_run {\n@@ -1045,7 +1077,11 @@ fn stderr_isatty() -> bool {\n     }\n }\n \n-pub fn run_cargo(builder: &Builder, cargo: &mut Command, stamp: &Path, is_check: bool)\n+pub fn run_cargo(builder: &Builder,\n+                 cargo: &mut Command,\n+                 tail_args: Vec<String>,\n+                 stamp: &Path,\n+                 is_check: bool)\n     -> Vec<PathBuf>\n {\n     if builder.config.dry_run {\n@@ -1066,7 +1102,7 @@ pub fn run_cargo(builder: &Builder, cargo: &mut Command, stamp: &Path, is_check:\n     // files we need to probe for later.\n     let mut deps = Vec::new();\n     let mut toplevel = Vec::new();\n-    let ok = stream_cargo(builder, cargo, &mut |msg| {\n+    let ok = stream_cargo(builder, cargo, tail_args, &mut |msg| {\n         let filenames = match msg {\n             CargoMessage::CompilerArtifact { filenames, .. } => filenames,\n             _ => return,\n@@ -1191,6 +1227,7 @@ pub fn run_cargo(builder: &Builder, cargo: &mut Command, stamp: &Path, is_check:\n pub fn stream_cargo(\n     builder: &Builder,\n     cargo: &mut Command,\n+    tail_args: Vec<String>,\n     cb: &mut dyn FnMut(CargoMessage),\n ) -> bool {\n     if builder.config.dry_run {\n@@ -1210,6 +1247,10 @@ pub fn stream_cargo(\n         cargo.env(\"RUSTC_COLOR\", \"1\");\n     }\n \n+    for arg in tail_args {\n+        cargo.arg(arg);\n+    }\n+\n     builder.verbose(&format!(\"running: {:?}\", cargo));\n     let mut child = match cargo.spawn() {\n         Ok(child) => child,"}, {"sha": "bf4d39c4947e51202945a14076f32dc89aefc998", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -77,6 +77,7 @@ pub struct Config {\n     pub llvm_enabled: bool,\n     pub llvm_assertions: bool,\n     pub llvm_optimize: bool,\n+    pub llvm_thin_lto: bool,\n     pub llvm_release_debuginfo: bool,\n     pub llvm_version_check: bool,\n     pub llvm_static_stdcpp: bool,\n@@ -163,6 +164,7 @@ pub struct Target {\n     pub cc: Option<PathBuf>,\n     pub cxx: Option<PathBuf>,\n     pub ar: Option<PathBuf>,\n+    pub ranlib: Option<PathBuf>,\n     pub linker: Option<PathBuf>,\n     pub ndk: Option<PathBuf>,\n     pub crt_static: Option<bool>,\n@@ -246,6 +248,7 @@ struct Llvm {\n     ninja: Option<bool>,\n     assertions: Option<bool>,\n     optimize: Option<bool>,\n+    thin_lto: Option<bool>,\n     release_debuginfo: Option<bool>,\n     version_check: Option<bool>,\n     static_libstdcpp: Option<bool>,\n@@ -327,6 +330,7 @@ struct TomlTarget {\n     cc: Option<String>,\n     cxx: Option<String>,\n     ar: Option<String>,\n+    ranlib: Option<String>,\n     linker: Option<String>,\n     android_ndk: Option<String>,\n     crt_static: Option<bool>,\n@@ -503,6 +507,7 @@ impl Config {\n             set(&mut config.llvm_enabled, llvm.enabled);\n             llvm_assertions = llvm.assertions;\n             set(&mut config.llvm_optimize, llvm.optimize);\n+            set(&mut config.llvm_thin_lto, llvm.thin_lto);\n             set(&mut config.llvm_release_debuginfo, llvm.release_debuginfo);\n             set(&mut config.llvm_version_check, llvm.version_check);\n             set(&mut config.llvm_static_stdcpp, llvm.static_libstdcpp);\n@@ -581,6 +586,7 @@ impl Config {\n                 target.cc = cfg.cc.clone().map(PathBuf::from);\n                 target.cxx = cfg.cxx.clone().map(PathBuf::from);\n                 target.ar = cfg.ar.clone().map(PathBuf::from);\n+                target.ranlib = cfg.ranlib.clone().map(PathBuf::from);\n                 target.linker = cfg.linker.clone().map(PathBuf::from);\n                 target.crt_static = cfg.crt_static.clone();\n                 target.musl_root = cfg.musl_root.clone().map(PathBuf::from);"}, {"sha": "c6ff63ad71b80b217ae902aaea4a6100e4a32c0d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -1885,6 +1885,34 @@ impl Step for HashSign {\n     }\n }\n \n+// Maybe add libLLVM.so to the lib-dir. It will only have been built if\n+// LLVM tools are linked dynamically.\n+// Note: This function does no yet support Windows but we also don't support\n+//       linking LLVM tools dynamically on Windows yet.\n+fn maybe_install_llvm_dylib(builder: &Builder,\n+                            target: Interned<String>,\n+                            image: &Path) {\n+    let src_libdir = builder\n+        .llvm_out(target)\n+        .join(\"lib\");\n+\n+    // Usually libLLVM.so is a symlink to something like libLLVM-6.0.so.\n+    // Since tools link to the latter rather than the former, we have to\n+    // follow the symlink to find out what to distribute.\n+    let llvm_dylib_path = src_libdir.join(\"libLLVM.so\");\n+    if llvm_dylib_path.exists() {\n+        let llvm_dylib_path = llvm_dylib_path.canonicalize().unwrap_or_else(|e| {\n+            panic!(\"dist: Error calling canonicalize path `{}`: {}\",\n+                   llvm_dylib_path.display(), e);\n+        });\n+\n+        let dst_libdir = image.join(\"lib\");\n+        t!(fs::create_dir_all(&dst_libdir));\n+\n+        builder.install(&llvm_dylib_path, &dst_libdir, 0o644);\n+    }\n+}\n+\n #[derive(Clone, Debug, Eq, Hash, PartialEq)]\n pub struct LlvmTools {\n     pub stage: u32,\n@@ -1929,18 +1957,18 @@ impl Step for LlvmTools {\n         drop(fs::remove_dir_all(&image));\n \n         // Prepare the image directory\n-        let bindir = builder\n+        let src_bindir = builder\n             .llvm_out(target)\n             .join(\"bin\");\n-        let dst = image.join(\"lib/rustlib\")\n-            .join(target)\n-            .join(\"bin\");\n-        t!(fs::create_dir_all(&dst));\n+        let dst_bindir = image.join(\"bin\");\n+        t!(fs::create_dir_all(&dst_bindir));\n         for tool in LLVM_TOOLS {\n-            let exe = bindir.join(exe(tool, &target));\n-            builder.install(&exe, &dst, 0o755);\n+            let exe = src_bindir.join(exe(tool, &target));\n+            builder.install(&exe, &dst_bindir, 0o755);\n         }\n \n+        maybe_install_llvm_dylib(builder, target, &image);\n+\n         // Prepare the overlay\n         let overlay = tmp.join(\"llvm-tools-overlay\");\n         drop(fs::remove_dir_all(&overlay));\n@@ -2025,7 +2053,6 @@ impl Step for Lldb {\n         let dst = image.join(\"lib\");\n         t!(fs::create_dir_all(&dst));\n         for entry in t!(fs::read_dir(&libdir)) {\n-            // let entry = t!(entry);\n             let entry = entry.unwrap();\n             if let Ok(name) = entry.file_name().into_string() {\n                 if name.starts_with(\"liblldb.\") && !name.ends_with(\".a\") {\n@@ -2060,6 +2087,9 @@ impl Step for Lldb {\n             }\n         }\n \n+        // Copy libLLVM.so to the lib dir as well, if needed.\n+        maybe_install_llvm_dylib(builder, target, &image);\n+\n         // Prepare the overlay\n         let overlay = tmp.join(\"lldb-overlay\");\n         drop(fs::remove_dir_all(&overlay));"}, {"sha": "b6a89e1c18fab7763ee7ee00d81c9d7deba68240", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -281,6 +281,7 @@ pub struct Build {\n     cc: HashMap<Interned<String>, cc::Tool>,\n     cxx: HashMap<Interned<String>, cc::Tool>,\n     ar: HashMap<Interned<String>, PathBuf>,\n+    ranlib: HashMap<Interned<String>, PathBuf>,\n     // Misc\n     crates: HashMap<Interned<String>, Crate>,\n     is_sudo: bool,\n@@ -406,6 +407,7 @@ impl Build {\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n             ar: HashMap::new(),\n+            ranlib: HashMap::new(),\n             crates: HashMap::new(),\n             lldb_version: None,\n             lldb_python_dir: None,\n@@ -772,6 +774,11 @@ impl Build {\n         self.ar.get(&target).map(|p| &**p)\n     }\n \n+    /// Returns the path to the `ranlib` utility for the target specified.\n+    fn ranlib(&self, target: Interned<String>) -> Option<&Path> {\n+        self.ranlib.get(&target).map(|p| &**p)\n+    }\n+\n     /// Returns the path to the C++ compiler for the target specified.\n     fn cxx(&self, target: Interned<String>) -> Result<&Path, String> {\n         match self.cxx.get(&target) {\n@@ -1018,6 +1025,10 @@ impl Build {\n         self.rust_version()\n     }\n \n+    fn llvm_link_tools_dynamically(&self, target: Interned<String>) -> bool {\n+        (target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\"))\n+    }\n+\n     /// Returns the `version` string associated with this compiler for Rust\n     /// itself.\n     ///"}, {"sha": "c28b467df5093138f547c3f52f668424332da755", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -153,6 +153,11 @@ impl Step for Llvm {\n            .define(\"LLVM_TARGET_ARCH\", target.split('-').next().unwrap())\n            .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target);\n \n+        if builder.config.llvm_thin_lto && !emscripten {\n+            cfg.define(\"LLVM_ENABLE_LTO\", \"Thin\")\n+               .define(\"LLVM_ENABLE_LLD\", \"ON\");\n+        }\n+\n         // By default, LLVM will automatically find OCaml and, if it finds it,\n         // install the LLVM bindings in LLVM_OCAML_INSTALL_PATH, which defaults\n         // to /usr/bin/ocaml.\n@@ -166,14 +171,10 @@ impl Step for Llvm {\n \n         // This setting makes the LLVM tools link to the dynamic LLVM library,\n         // which saves both memory during parallel links and overall disk space\n-        // for the tools.  We don't distribute any of those tools, so this is\n-        // just a local concern.  However, it doesn't work well everywhere.\n-        //\n-        // If we are shipping llvm tools then we statically link them LLVM\n-        if (target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\")) &&\n-            !builder.config.llvm_tools_enabled &&\n-            !want_lldb {\n-                cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n+        // for the tools. We don't do this on every platform as it doesn't work\n+        // equally well everywhere.\n+        if builder.llvm_link_tools_dynamically(target) && !emscripten {\n+            cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n         // For distribution we want the LLVM tools to be *statically* linked to libstdc++\n@@ -379,6 +380,14 @@ fn configure_cmake(builder: &Builder,\n         }\n     }\n \n+    if let Some(ranlib) = builder.ranlib(target) {\n+        if ranlib.is_absolute() {\n+            // LLVM build breaks if `CMAKE_RANLIB` is a relative path, for some reason it\n+            // tries to resolve this path in the LLVM build directory.\n+            cfg.define(\"CMAKE_RANLIB\", sanitize_cc(ranlib));\n+        }\n+    }\n+\n     if env::var_os(\"SCCACHE_ERROR_LOG\").is_some() {\n         cfg.env(\"RUST_LOG\", \"sccache=warn\");\n     }"}, {"sha": "04aaa970654730dd3c63a6aedbabddbb37b3d6d0", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -136,7 +136,7 @@ impl Step for ToolBuild {\n         let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, &mut cargo, &mut |msg| {\n+        let is_expected = compile::stream_cargo(builder, &mut cargo, vec![], &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n             match tool {\n                 | \"rls\""}, {"sha": "01f6db03e8ee0dd2560e0568e9e326937f7c953c", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -93,7 +93,10 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-sanitizers \\\n       --enable-profiler \\\n       --enable-compiler-docs \\\n-      --set target.x86_64-unknown-linux-gnu.linker=clang\n+      --set target.x86_64-unknown-linux-gnu.linker=clang \\\n+      --set target.x86_64-unknown-linux-gnu.ar=/rustroot/bin/llvm-ar \\\n+      --set target.x86_64-unknown-linux-gnu.ranlib=/rustroot/bin/llvm-ranlib \\\n+      --set llvm.thin-lto=true\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n ENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=clang\n "}, {"sha": "4595eacb31061e8223243affe4c7bf00f8283729", "filename": "src/ci/docker/dist-x86_64-linux/build-clang.sh", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ba48850409222b2470fdc606329dc74aecbc0faa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-clang.sh?ref=ba48850409222b2470fdc606329dc74aecbc0faa", "patch": "@@ -30,6 +30,12 @@ curl https://releases.llvm.org/$LLVM/cfe-$LLVM.src.tar.xz | \\\n   xz -d | \\\n   tar xf - -C tools/clang --strip-components=1\n \n+mkdir -p tools/lld\n+\n+curl https://releases.llvm.org/$LLVM/lld-$LLVM.src.tar.xz | \\\n+  xz -d | \\\n+  tar xf - -C tools/lld --strip-components=1\n+\n mkdir ../clang-build\n cd ../clang-build\n "}]}