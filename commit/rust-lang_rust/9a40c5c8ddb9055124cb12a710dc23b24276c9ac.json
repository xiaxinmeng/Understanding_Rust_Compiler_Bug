{"sha": "9a40c5c8ddb9055124cb12a710dc23b24276c9ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNDBjNWM4ZGRiOTA1NTEyNGNiMTJhNzEwZGMyM2IyNDI3NmM5YWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-24T20:40:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-24T20:40:51Z"}, "message": "auto merge of #6714 : thomaslee/rust/rustrt-stage, r=brson\n\nAs discussed with @brson on IRC:\r\n\r\nThis lets us use #ifdefs to determine which stage of the build we happen\r\nto be in, which is useful in the event we need to make changes to rustrt\r\nthat are incompatible with the code generated by a stage0 rustc.\r\n\r\nExample of the _RUST_STAGEN flag in action here: https://gist.github.com/thomaslee/5641890\r\n\r\nI'm not sure what tests for this change should look like, so please advise if I need to do some work around that.", "tree": {"sha": "348f93509b447fce84a881c2df9bf7f5a7b81861", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/348f93509b447fce84a881c2df9bf7f5a7b81861"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a40c5c8ddb9055124cb12a710dc23b24276c9ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a40c5c8ddb9055124cb12a710dc23b24276c9ac", "html_url": "https://github.com/rust-lang/rust/commit/9a40c5c8ddb9055124cb12a710dc23b24276c9ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a40c5c8ddb9055124cb12a710dc23b24276c9ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5ab1012f1f5786f550e511ba1302a22c85fcd71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ab1012f1f5786f550e511ba1302a22c85fcd71", "html_url": "https://github.com/rust-lang/rust/commit/b5ab1012f1f5786f550e511ba1302a22c85fcd71"}, {"sha": "e69e80938bd000611ec17c3c23606e060f9b660a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e69e80938bd000611ec17c3c23606e060f9b660a", "html_url": "https://github.com/rust-lang/rust/commit/e69e80938bd000611ec17c3c23606e060f9b660a"}], "stats": {"total": 118, "additions": 64, "deletions": 54}, "files": [{"sha": "4fb0ed01bdf6edb5e3ce0734950f0161812aa591", "filename": "configure", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a40c5c8ddb9055124cb12a710dc23b24276c9ac/configure", "raw_url": "https://github.com/rust-lang/rust/raw/9a40c5c8ddb9055124cb12a710dc23b24276c9ac/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=9a40c5c8ddb9055124cb12a710dc23b24276c9ac", "patch": "@@ -665,12 +665,16 @@ make_dir rt\n for t in $CFG_TARGET_TRIPLES\n do\n   make_dir rt/$t\n-  for i in                                          \\\n-    isaac linenoise sync test \\\n-    arch/i386 arch/x86_64 arch/arm arch/mips  \\\n-    libuv libuv/src/ares libuv/src/eio libuv/src/ev\n+  for s in 0 1 2 3\n   do\n-    make_dir rt/$t/$i\n+    make_dir rt/$t/stage$s\n+    for i in                                          \\\n+      isaac linenoise sync test \\\n+      arch/i386 arch/x86_64 arch/arm arch/mips  \\\n+      libuv libuv/src/ares libuv/src/eio libuv/src/ev\n+    do\n+      make_dir rt/$t/stage$s/$i\n+    done\n   done\n done\n "}, {"sha": "d8d74d0d0e3fae8bb14eed4a7abfd4da6bc8ecf6", "filename": "mk/rt.mk", "status": "modified", "additions": 53, "deletions": 47, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/9a40c5c8ddb9055124cb12a710dc23b24276c9ac/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9a40c5c8ddb9055124cb12a710dc23b24276c9ac/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=9a40c5c8ddb9055124cb12a710dc23b24276c9ac", "patch": "@@ -41,14 +41,19 @@ ifneq ($(strip $(findstring snap,$(MAKECMDGOALS))),)\n \tSNAP_DEFINES=-DRUST_SNAPSHOT\n endif\n \n-\n define DEF_RUNTIME_TARGETS\n \n ######################################################################\n # Runtime (C++) library variables\n ######################################################################\n \n-RUNTIME_CXXS_$(1) := \\\n+# $(1) is the target triple\n+# $(2) is the stage number\n+\n+RUNTIME_CFLAGS_$(1)_$(2) = -D_RUST_STAGE$(2)\n+RUNTIME_CXXFLAGS_$(1)_$(2) = -D_RUST_STAGE$(2)\n+\n+RUNTIME_CXXS_$(1)_$(2) := \\\n               rt/sync/timer.cpp \\\n               rt/sync/lock_and_signal.cpp \\\n               rt/sync/rust_thread.cpp \\\n@@ -83,70 +88,70 @@ RUNTIME_CXXS_$(1) := \\\n               rt/rust_android_dummy.cpp \\\n               rt/rust_test_helpers.cpp\n \n-RUNTIME_CS_$(1) := rt/linenoise/linenoise.c rt/linenoise/utf8.c\n+RUNTIME_CS_$(1)_$(2) := rt/linenoise/linenoise.c rt/linenoise/utf8.c\n \n-RUNTIME_S_$(1) := rt/arch/$$(HOST_$(1))/_context.S \\\n-                  rt/arch/$$(HOST_$(1))/ccall.S \\\n-                  rt/arch/$$(HOST_$(1))/record_sp.S\n+RUNTIME_S_$(1)_$(2) := rt/arch/$$(HOST_$(1))/_context.S \\\n+\t\t\trt/arch/$$(HOST_$(1))/ccall.S \\\n+\t\t\trt/arch/$$(HOST_$(1))/record_sp.S\n \n ifeq ($$(CFG_WINDOWSY_$(1)), 1)\n-  LIBUV_OSTYPE_$(1) := win\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n+  LIBUV_OSTYPE_$(1)_$(2) := win\n+  LIBUV_LIB_$(1)_$(2) := rt/$(1)/stage$(2)/libuv/libuv.a\n else ifeq ($(OSTYPE_$(1)), apple-darwin)\n-  LIBUV_OSTYPE_$(1) := mac\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n+  LIBUV_OSTYPE_$(1)_$(2) := mac\n+  LIBUV_LIB_$(1)_$(2) := rt/$(1)/stage$(2)/libuv/libuv.a\n else ifeq ($(OSTYPE_$(1)), unknown-freebsd)\n-  LIBUV_OSTYPE_$(1) := unix/freebsd\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n+  LIBUV_OSTYPE_$(1)_$(2) := unix/freebsd\n+  LIBUV_LIB_$(1)_$(2) := rt/$(1)/stage$(2)/libuv/libuv.a\n else ifeq ($(OSTYPE_$(1)), linux-androideabi)\n-  LIBUV_OSTYPE_$(1) := unix/android\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n+  LIBUV_OSTYPE_$(1)_$(2) := unix/android\n+  LIBUV_LIB_$(1)_$(2) := rt/$(1)/stage$(2)/libuv/libuv.a\n else\n-  LIBUV_OSTYPE_$(1) := unix/linux\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n+  LIBUV_OSTYPE_$(1)_$(2) := unix/linux\n+  LIBUV_LIB_$(1)_$(2) := rt/$(1)/stage$(2)/libuv/libuv.a\n endif\n \n-RUNTIME_DEF_$(1) := rt/rustrt$(CFG_DEF_SUFFIX_$(1))\n-RUNTIME_INCS_$(1) := -I $$(S)src/rt -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n+RUNTIME_DEF_$(1)_$(2) := rt/rustrt$(CFG_DEF_SUFFIX_$(1))\n+RUNTIME_INCS_$(1)_$(2) := -I $$(S)src/rt -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n                      -I $$(S)src/rt/arch/$$(HOST_$(1)) \\\n                      -I $$(S)src/rt/linenoise \\\n                      -I $$(S)src/libuv/include\n-RUNTIME_OBJS_$(1) := $$(RUNTIME_CXXS_$(1):rt/%.cpp=rt/$(1)/%.o) \\\n-                     $$(RUNTIME_CS_$(1):rt/%.c=rt/$(1)/%.o) \\\n-                     $$(RUNTIME_S_$(1):rt/%.S=rt/$(1)/%.o)\n-ALL_OBJ_FILES += $$(RUNTIME_OBJS_$(1))\n+RUNTIME_OBJS_$(1)_$(2) := $$(RUNTIME_CXXS_$(1)_$(2):rt/%.cpp=rt/$(1)/stage$(2)/%.o) \\\n+                     $$(RUNTIME_CS_$(1)_$(2):rt/%.c=rt/$(1)/stage$(2)/%.o) \\\n+                     $$(RUNTIME_S_$(1)_$(2):rt/%.S=rt/$(1)/stage$(2)/%.o)\n+ALL_OBJ_FILES += $$(RUNTIME_OBJS_$(1)_$(2))\n \n-MORESTACK_OBJ_$(1) := rt/$(1)/arch/$$(HOST_$(1))/morestack.o\n-ALL_OBJ_FILES += $$(MORESTACK_OBJS_$(1))\n+MORESTACK_OBJ_$(1)_$(2) := rt/$(1)/stage$(2)/arch/$$(HOST_$(1))/morestack.o\n+ALL_OBJ_FILES += $$(MORESTACK_OBJS_$(1)_$(2))\n \n-RUNTIME_LIBS_$(1) := $$(LIBUV_LIB_$(1))\n+RUNTIME_LIBS_$(1)_$(2) := $$(LIBUV_LIB_$(1)_$(2))\n \n-rt/$(1)/%.o: rt/%.cpp $$(MKFILE_DEPS)\n+rt/$(1)/stage$(2)/%.o: rt/%.cpp $$(MKFILE_DEPS)\n \t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@, $$(RUNTIME_INCS_$(1)) \\\n-                 $$(SNAP_DEFINES)) $$<\n+\t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@, $$(RUNTIME_INCS_$(1)_$(2)) \\\n+                 $$(SNAP_DEFINES) $$(RUNTIME_CXXFLAGS_$(1)_$(2))) $$<\n \n-rt/$(1)/%.o: rt/%.c $$(MKFILE_DEPS)\n+rt/$(1)/stage$(2)/%.o: rt/%.c $$(MKFILE_DEPS)\n \t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, $$(RUNTIME_INCS_$(1)) \\\n-                 $$(SNAP_DEFINES)) $$<\n+\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, $$(RUNTIME_INCS_$(1)_$(2)) \\\n+                 $$(SNAP_DEFINES) $$(RUNTIME_CFLAGS_$(1)_$(2))) $$<\n \n-rt/$(1)/%.o: rt/%.S  $$(MKFILE_DEPS) \\\n+rt/$(1)/stage$(2)/%.o: rt/%.S  $$(MKFILE_DEPS) \\\n                      $$(LLVM_CONFIG_$$(CFG_BUILD_TRIPLE))\n \t@$$(call E, compile: $$@)\n \t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n \n-rt/$(1)/arch/$$(HOST_$(1))/libmorestack.a: $$(MORESTACK_OBJ_$(1))\n+rt/$(1)/stage$(2)/arch/$$(HOST_$(1))/libmorestack.a: $$(MORESTACK_OBJ_$(1)_$(2))\n \t@$$(call E, link: $$@)\n \t$$(Q)$(AR_$(1)) rcs $$@ $$<\n \n-rt/$(1)/$(CFG_RUNTIME_$(1)): $$(RUNTIME_OBJS_$(1)) $$(MKFILE_DEPS) \\\n-                        $$(RUNTIME_DEF_$(1)) \\\n-                        $$(RUNTIME_LIBS_$(1))\n+rt/$(1)/stage$(2)/$(CFG_RUNTIME_$(1)): $$(RUNTIME_OBJS_$(1)_$(2)) $$(MKFILE_DEPS) \\\n+                        $$(RUNTIME_DEF_$(1)_$(2)) \\\n+                        $$(RUNTIME_LIBS_$(1)_$(2))\n \t@$$(call E, link: $$@)\n-\t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@, $$(RUNTIME_OBJS_$(1)) \\\n-\t  $$(CFG_GCCISH_POST_LIB_FLAGS_$(1)) $$(RUNTIME_LIBS_$(1)) \\\n-\t  $$(CFG_LIBUV_LINK_FLAGS_$(1)),$$(RUNTIME_DEF_$(1)),$$(CFG_RUNTIME_$(1)))\n+\t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@, $$(RUNTIME_OBJS_$(1)_$(2)) \\\n+\t  $$(CFG_GCCISH_POST_LIB_FLAGS_$(1)) $$(RUNTIME_LIBS_$(1)_$(2)) \\\n+\t  $$(CFG_LIBUV_LINK_FLAGS_$(1)),$$(RUNTIME_DEF_$(1)_$(2)),$$(CFG_RUNTIME_$(1)))\n \n # FIXME: For some reason libuv's makefiles can't figure out the\n # correct definition of CC on the mingw I'm using, so we are\n@@ -165,32 +170,32 @@ endif\n \n # XXX: Shouldn't need platform-specific conditions here\n ifdef CFG_WINDOWSY_$(1)\n-$$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n+$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n-\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n+\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/stage$(2)/libuv\" \\\n \t\tOS=mingw \\\n \t\tV=$$(VERBOSE)\n else ifeq ($(OSTYPE_$(1)), linux-androideabi)\n-$$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n+$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n \t\tCFLAGS=\"$$(CFG_GCCISH_CFLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n \t\tLDFLAGS=\"$$(CFG_GCCISH_LINK_FLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n \t\tCC=\"$$(CC_$(1))\" \\\n \t\tCXX=\"$$(CXX_$(1))\" \\\n \t\tAR=\"$$(AR_$(1))\" \\\n \t\tBUILDTYPE=Release \\\n-\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n+\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/stage$(2)/libuv\" \\\n \t\thost=android OS=linux \\\n \t\tV=$$(VERBOSE)\n else\n-$$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n+$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n \t\tCFLAGS=\"$$(CFG_GCCISH_CFLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n \t\tLDFLAGS=\"$$(CFG_GCCISH_LINK_FLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n \t\tCC=\"$$(CC_$(1))\" \\\n \t\tCXX=\"$$(CXX_$(1))\" \\\n \t\tAR=\"$$(AR_$(1))\" \\\n-\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n+\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/stage$(2)/libuv\" \\\n \t\tV=$$(VERBOSE)\n endif\n \n@@ -229,5 +234,6 @@ endif\n endef\n \n # Instantiate template for all stages\n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_RUNTIME_TARGETS,$(target))))\n+$(foreach stage,$(STAGES), \\\n+\t$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+\t $(eval $(call DEF_RUNTIME_TARGETS,$(target),$(stage)))))"}, {"sha": "2aeed841e35340cd84bfeab8d06e90f8eb6897f0", "filename": "mk/target.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a40c5c8ddb9055124cb12a710dc23b24276c9ac/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9a40c5c8ddb9055124cb12a710dc23b24276c9ac/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=9a40c5c8ddb9055124cb12a710dc23b24276c9ac", "patch": "@@ -18,13 +18,13 @@\n define TARGET_STAGE_N\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n-\t\trt/$(2)/arch/$$(HOST_$(2))/libmorestack.a \\\n+\t\trt/$(2)/stage$(1)/arch/$$(HOST_$(2))/libmorestack.a \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2)): \\\n-\t\trt/$(2)/$(CFG_RUNTIME_$(2)) \\\n+\t\trt/$(2)/stage$(1)/$(CFG_RUNTIME_$(2)) \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@"}]}