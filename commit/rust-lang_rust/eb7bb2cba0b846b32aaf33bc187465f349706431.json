{"sha": "eb7bb2cba0b846b32aaf33bc187465f349706431", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViN2JiMmNiYTBiODQ2YjMyYWFmMzNiYzE4NzQ2NWYzNDk3MDY0MzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-19T17:54:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-19T17:54:00Z"}, "message": "Remove dead code", "tree": {"sha": "493e2f346a2b1956a188dc46f26c32fd0e19435c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/493e2f346a2b1956a188dc46f26c32fd0e19435c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb7bb2cba0b846b32aaf33bc187465f349706431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7bb2cba0b846b32aaf33bc187465f349706431", "html_url": "https://github.com/rust-lang/rust/commit/eb7bb2cba0b846b32aaf33bc187465f349706431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb7bb2cba0b846b32aaf33bc187465f349706431/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b7540f388e815b3c4c2fb28b8233c724e0a838", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b7540f388e815b3c4c2fb28b8233c724e0a838", "html_url": "https://github.com/rust-lang/rust/commit/f5b7540f388e815b3c4c2fb28b8233c724e0a838"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "dd8cfe42d2d6cf9b3afab8ddb24b8cbe367b169a", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/eb7bb2cba0b846b32aaf33bc187465f349706431/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7bb2cba0b846b32aaf33bc187465f349706431/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=eb7bb2cba0b846b32aaf33bc187465f349706431", "patch": "@@ -484,9 +484,9 @@ fn highlight_element(\n             match name_kind {\n                 Some(NameClass::ExternCrate(_)) => HighlightTag::Module.into(),\n                 Some(NameClass::Definition(def)) => {\n-                    highlight_def(sema, db, def, None) | HighlightModifier::Definition\n+                    highlight_def(db, def) | HighlightModifier::Definition\n                 }\n-                Some(NameClass::ConstReference(def)) => highlight_def(sema, db, def, None),\n+                Some(NameClass::ConstReference(def)) => highlight_def(db, def),\n                 Some(NameClass::FieldShorthand { field, .. }) => {\n                     let mut h = HighlightTag::Field.into();\n                     if let Definition::Field(field) = field {\n@@ -520,7 +520,7 @@ fn highlight_element(\n                                 }\n                             };\n \n-                            let mut h = highlight_def(sema, db, def, Some(name_ref.clone()));\n+                            let mut h = highlight_def(db, def);\n \n                             if let Some(parent) = name_ref.syntax().parent() {\n                                 if matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD) {\n@@ -736,34 +736,24 @@ fn highlight_method_call(\n     Some(h)\n }\n \n-fn highlight_def(\n-    sema: &Semantics<RootDatabase>,\n-    db: &RootDatabase,\n-    def: Definition,\n-    name_ref: Option<ast::NameRef>,\n-) -> Highlight {\n+fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n     match def {\n         Definition::Macro(_) => HighlightTag::Macro,\n         Definition::Field(_) => HighlightTag::Field,\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Module,\n             hir::ModuleDef::Function(func) => {\n-                return name_ref\n-                    .and_then(|name_ref| highlight_func_by_name_ref(sema, &name_ref))\n-                    .unwrap_or_else(|| {\n-                        let mut h = HighlightTag::Function.into();\n-                        if func.is_unsafe(db) {\n-                            h |= HighlightModifier::Unsafe;\n-                        }\n-\n-                        match func.self_param(db) {\n-                            None => h,\n-                            Some(self_param) => match self_param.access(db) {\n-                                hir::Access::Exclusive => h | HighlightModifier::Mutable,\n-                                hir::Access::Shared | hir::Access::Owned => h,\n-                            },\n-                        }\n-                    });\n+                let mut h = HighlightTag::Function.into();\n+                if func.is_unsafe(db) {\n+                    h |= HighlightModifier::Unsafe;\n+                }\n+                if let Some(self_param) = func.self_param(db) {\n+                    match self_param.access(db) {\n+                        hir::Access::Exclusive => h |= HighlightModifier::Mutable,\n+                        hir::Access::Shared | hir::Access::Owned => (),\n+                    }\n+                }\n+                return h;\n             }\n             hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Struct,\n             hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HighlightTag::Enum,"}]}