{"sha": "46422f722bdcadbf4462dd5a9c65756434b2d97a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NDIyZjcyMmJkY2FkYmY0NDYyZGQ1YTljNjU3NTY0MzRiMmQ5N2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-01T19:13:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-01T19:13:04Z"}, "message": "Parser: first scraches", "tree": {"sha": "6b07f7e0ff1a6113630d8f3d66d38291589be03a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b07f7e0ff1a6113630d8f3d66d38291589be03a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46422f722bdcadbf4462dd5a9c65756434b2d97a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46422f722bdcadbf4462dd5a9c65756434b2d97a", "html_url": "https://github.com/rust-lang/rust/commit/46422f722bdcadbf4462dd5a9c65756434b2d97a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46422f722bdcadbf4462dd5a9c65756434b2d97a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb362626f326a565aca34c1a11c95dcb7152b798", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb362626f326a565aca34c1a11c95dcb7152b798", "html_url": "https://github.com/rust-lang/rust/commit/cb362626f326a565aca34c1a11c95dcb7152b798"}], "stats": {"total": 114, "additions": 97, "deletions": 17}, "files": [{"sha": "c4f6283e61e79b5ee3329aaee210838bf0844954", "filename": "grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46422f722bdcadbf4462dd5a9c65756434b2d97a/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/46422f722bdcadbf4462dd5a9c65756434b2d97a/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=46422f722bdcadbf4462dd5a9c65756434b2d97a", "patch": "@@ -62,5 +62,6 @@ Grammar(\n     ],\n     nodes: [\n         \"FILE\",\n+        \"STRUCT_ITEM\"\n     ]\n )\n\\ No newline at end of file"}, {"sha": "0896506fb1b1eb0185be09e918973c619f48be72", "filename": "src/parser/event_parser/grammar.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar.rs?ref=46422f722bdcadbf4462dd5a9c65756434b2d97a", "patch": "@@ -40,6 +40,12 @@ fn mod_items(p: &mut Parser) {\n fn item(p: &mut Parser) -> Result {\n     outer_attributes(p)?;\n     visibility(p)?;\n+    if p.current_is(STRUCT_KW) {\n+        p.start(STRUCT_ITEM);\n+        p.bump();\n+        p.finish();\n+        return OK;\n+    }\n     ERR\n }\n "}, {"sha": "1228236a963847127f177198b29325d0145fa0d6", "filename": "src/parser/event_parser/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Fparser%2Fevent_parser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Fparser%2Fevent_parser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fmod.rs?ref=46422f722bdcadbf4462dd5a9c65756434b2d97a", "patch": "@@ -4,6 +4,7 @@ use syntax_kinds::*;\n mod grammar;\n mod parser;\n \n+#[derive(Debug)]\n pub(crate) enum Event {\n     Start { kind: SyntaxKind },\n     Finish,"}, {"sha": "2d5418a29a968194cbedf00806d38aa30f9c2293", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=46422f722bdcadbf4462dd5a9c65756434b2d97a", "patch": "@@ -1,5 +1,6 @@\n use {Token, SyntaxKind, TextUnit};\n-use super::Event;\n+use super::{Event};\n+use super::super::is_insignificant;\n use syntax_kinds::{WHITESPACE, COMMENT};\n \n pub struct Parser<'t> {\n@@ -16,9 +17,8 @@ impl<'t> Parser<'t> {\n         let mut non_ws_tokens = Vec::new();\n         let mut len = TextUnit::new(0);\n         for (idx, &token) in raw_tokens.iter().enumerate() {\n-            match token.kind {\n-                WHITESPACE | COMMENT => (),\n-                _ => non_ws_tokens.push((idx, len)),\n+            if !is_insignificant(token.kind) {\n+                non_ws_tokens.push((idx, len))\n             }\n             len += token.len;\n         }\n@@ -50,15 +50,25 @@ impl<'t> Parser<'t> {\n         self.event(Event::Finish);\n     }\n \n-    pub(crate) fn bump(&mut self) -> Option<SyntaxKind> {\n+    pub(crate) fn current(&self) -> Option<SyntaxKind> {\n         if self.is_eof() {\n             return None;\n         }\n         let idx = self.non_ws_tokens[self.pos].0;\n-        self.pos += 1;\n         Some(self.raw_tokens[idx].kind)\n     }\n \n+    pub(crate) fn current_is(&self, kind: SyntaxKind) -> bool {\n+        self.current() == Some(kind)\n+    }\n+\n+    pub(crate) fn bump(&mut self) -> Option<SyntaxKind> {\n+        let kind = self.current()?;\n+        self.pos += 1;\n+        self.event(Event::Token { kind, n_raw_tokens: 1 });\n+        Some(kind)\n+    }\n+\n     fn event(&mut self, event: Event) {\n         self.events.push(event)\n     }"}, {"sha": "a632fbc019efeb6e7e0779fe3d8c2dc7b6c8b008", "filename": "src/parser/mod.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=46422f722bdcadbf4462dd5a9c65756434b2d97a", "patch": "@@ -8,17 +8,50 @@ use self::event_parser::Event;\n \n pub fn parse(text: String, tokens: &[Token]) -> File {\n     let events = event_parser::parse(&text, tokens);\n-    from_events_to_file(text, events)\n+    from_events_to_file(text, tokens, events)\n }\n \n-fn from_events_to_file(text: String, events: Vec<Event>) -> File {\n+fn from_events_to_file(\n+    text: String,\n+    tokens: &[Token],\n+    events: Vec<Event>,\n+) -> File {\n     let mut builder = FileBuilder::new(text);\n+    let mut idx = 0;\n     for event in events {\n         match event {\n             Event::Start { kind } => builder.start_internal(kind),\n-            Event::Finish => builder.finish_internal(),\n-            Event::Token { .. } => unimplemented!(),\n+            Event::Finish => {\n+                while idx < tokens.len() {\n+                    let token = tokens[idx];\n+                    if is_insignificant(token.kind) {\n+                        idx += 1;\n+                        builder.leaf(token.kind, token.len);\n+                    } else {\n+                        break;\n+                    }\n+                }\n+                builder.finish_internal()\n+            },\n+            Event::Token { kind, mut n_raw_tokens } => loop {\n+                let token = tokens[idx];\n+                if !is_insignificant(token.kind) {\n+                    n_raw_tokens -= 1;\n+                }\n+                idx += 1;\n+                builder.leaf(token.kind, token.len);\n+                if n_raw_tokens == 0 {\n+                    break;\n+                }\n+            },\n         }\n     }\n     builder.finish()\n }\n+\n+fn is_insignificant(kind: SyntaxKind) -> bool {\n+    match kind {\n+        WHITESPACE | COMMENT => true,\n+        _ => false,\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "d9b1462a7f15415832119d55bdfd7d9884fd3c77", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=46422f722bdcadbf4462dd5a9c65756434b2d97a", "patch": "@@ -59,8 +59,9 @@ pub const COMMENT: SyntaxKind = SyntaxKind(54);\n pub const DOC_COMMENT: SyntaxKind = SyntaxKind(55);\n pub const SHEBANG: SyntaxKind = SyntaxKind(56);\n pub const FILE: SyntaxKind = SyntaxKind(57);\n+pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(58);\n \n-static INFOS: [SyntaxInfo; 58] = [\n+static INFOS: [SyntaxInfo; 59] = [\n     SyntaxInfo { name: \"USE_KW\" },\n     SyntaxInfo { name: \"FN_KW\" },\n     SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -119,6 +120,7 @@ static INFOS: [SyntaxInfo; 58] = [\n     SyntaxInfo { name: \"DOC_COMMENT\" },\n     SyntaxInfo { name: \"SHEBANG\" },\n     SyntaxInfo { name: \"FILE\" },\n+    SyntaxInfo { name: \"STRUCT_ITEM\" },\n ];\n \n pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {"}, {"sha": "da8b8f82400d242123c2673592731f54a3208f5b", "filename": "src/tree/file_builder.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Ftree%2Ffile_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46422f722bdcadbf4462dd5a9c65756434b2d97a/src%2Ftree%2Ffile_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Ffile_builder.rs?ref=46422f722bdcadbf4462dd5a9c65756434b2d97a", "patch": "@@ -64,8 +64,14 @@ impl FileBuilder {\n     }\n \n     pub fn finish(self) -> File {\n-        assert!(self.in_progress.is_empty());\n-        assert!(self.pos == (self.text.len() as u32).into());\n+        assert!(\n+            self.in_progress.is_empty(),\n+            \"some nodes in FileBuilder are unfinished\"\n+        );\n+        assert!(\n+            self.pos == (self.text.len() as u32).into(),\n+            \"nodes in FileBuilder do not cover the whole file\"\n+        );\n         File {\n             text: self.text,\n             nodes: self.nodes,\n@@ -81,11 +87,17 @@ impl FileBuilder {\n     fn push_child(&mut self, mut child: NodeData) -> NodeIdx {\n         child.parent = Some(self.current_id());\n         let id = self.new_node(child);\n-        if let Some(sibling) = self.current_sibling() {\n-            fill(&mut sibling.next_sibling, id);\n-            return id\n+        {\n+\n+            let (parent, sibling) = *self.in_progress.last().unwrap();\n+            let slot = if let Some(idx) = sibling {\n+                &mut self.nodes[idx].next_sibling\n+            } else {\n+                &mut self.nodes[parent].first_child\n+            };\n+            fill(slot, id);\n         }\n-        fill(&mut self.current_parent().first_child, id);\n+        self.in_progress.last_mut().unwrap().1 = Some(id);\n         id\n     }\n "}, {"sha": "d3a8c1d23d49fd7b70d63b7e5e79424be579dcca", "filename": "tests/data/parser/0001_struct_item.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46422f722bdcadbf4462dd5a9c65756434b2d97a/tests%2Fdata%2Fparser%2F0001_struct_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46422f722bdcadbf4462dd5a9c65756434b2d97a/tests%2Fdata%2Fparser%2F0001_struct_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2F0001_struct_item.rs?ref=46422f722bdcadbf4462dd5a9c65756434b2d97a", "patch": "@@ -0,0 +1,3 @@\n+struct S {\n+\n+}\n\\ No newline at end of file"}, {"sha": "5ef5442823456efd431283326dab28329c931fb8", "filename": "tests/data/parser/0001_struct_item.txt", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46422f722bdcadbf4462dd5a9c65756434b2d97a/tests%2Fdata%2Fparser%2F0001_struct_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/46422f722bdcadbf4462dd5a9c65756434b2d97a/tests%2Fdata%2Fparser%2F0001_struct_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2F0001_struct_item.txt?ref=46422f722bdcadbf4462dd5a9c65756434b2d97a", "patch": "@@ -0,0 +1,12 @@\n+FILE@[0; 13)\n+  STRUCT_ITEM@[0; 7)\n+    STRUCT_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+  ERROR@[7; 9)\n+    IDENT@[7; 8)\n+    WHITESPACE@[8; 9)\n+  ERROR@[9; 12)\n+    L_CURLY@[9; 10)\n+    WHITESPACE@[10; 12)\n+  ERROR@[12; 13)\n+    R_CURLY@[12; 13)"}]}