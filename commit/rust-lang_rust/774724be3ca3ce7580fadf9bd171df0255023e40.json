{"sha": "774724be3ca3ce7580fadf9bd171df0255023e40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NDcyNGJlM2NhM2NlNzU4MGZhZGY5YmQxNzFkZjAyNTUwMjNlNDA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-11T09:21:38Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-11T11:11:58Z"}, "message": "rustc: deny(unused_lifetimes).", "tree": {"sha": "8c493d7dd315bc2a7ae337e5b1d1ab9118b772b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c493d7dd315bc2a7ae337e5b1d1ab9118b772b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774724be3ca3ce7580fadf9bd171df0255023e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774724be3ca3ce7580fadf9bd171df0255023e40", "html_url": "https://github.com/rust-lang/rust/commit/774724be3ca3ce7580fadf9bd171df0255023e40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774724be3ca3ce7580fadf9bd171df0255023e40/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce0ba38921efe3ac36208cb1ced888795cd12759", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0ba38921efe3ac36208cb1ced888795cd12759", "html_url": "https://github.com/rust-lang/rust/commit/ce0ba38921efe3ac36208cb1ced888795cd12759"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "532e61721ca4510d1dee3ef595f4e9741de27a53", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -589,7 +589,7 @@ struct HirItemLike<T> {\n     hash_bodies: bool,\n }\n \n-impl<'a, 'hir, T> HashStable<StableHashingContext<'hir>> for HirItemLike<T>\n+impl<'hir, T> HashStable<StableHashingContext<'hir>> for HirItemLike<T>\n     where T: HashStable<StableHashingContext<'hir>>\n {\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "8454eb75b55c7320726a252eacdeb4f35688a155", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -393,7 +393,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for DelimSpan {\n     }\n }\n \n-pub fn hash_stable_trait_impls<'a, 'gcx, W>(\n+pub fn hash_stable_trait_impls<'a, W>(\n     hcx: &mut StableHashingContext<'a>,\n     hasher: &mut StableHasher<W>,\n     blanket_impls: &[DefId],"}, {"sha": "c2c0ced07e6955bdfd206f2a176c6adc55fd9b4a", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -135,7 +135,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::BoundVar {\n     }\n }\n \n-impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>> for ty::Binder<T>\n+impl<'a, T> HashStable<StableHashingContext<'a>> for ty::Binder<T>\n     where T: HashStable<StableHashingContext<'a>>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -192,7 +192,7 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for region::Scope {\n     }\n }\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n+impl<'a> HashStable<StableHashingContext<'a>>\n for ty::TyVid\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -204,7 +204,7 @@ for ty::TyVid\n     }\n }\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n+impl<'a> HashStable<StableHashingContext<'a>>\n for ty::IntVid\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -216,7 +216,7 @@ for ty::IntVid\n     }\n }\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n+impl<'a> HashStable<StableHashingContext<'a>>\n for ty::FloatVid\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -228,7 +228,7 @@ for ty::FloatVid\n     }\n }\n \n-impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>>\n+impl<'a, T> HashStable<StableHashingContext<'a>>\n for ty::steal::Steal<T>\n     where T: HashStable<StableHashingContext<'a>>\n {"}, {"sha": "b6fe57636e904c836615488504aedc157662c24b", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -858,7 +858,7 @@ impl<'a, 'gcx, 'tcx> GenericKind<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> VerifyBound<'tcx> {\n+impl<'tcx> VerifyBound<'tcx> {\n     pub fn must_hold(&self) -> bool {\n         match self {\n             VerifyBound::IfEq(..) => false,"}, {"sha": "e2f2799d9634dfadfd599ea5e66031379476b2ea", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -30,6 +30,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n #![allow(explicit_outlives_requirements)]\n \n #![feature(arbitrary_self_types)]"}, {"sha": "b51257c520601ac734408b7dde5fd852897cdbb5", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -566,7 +566,7 @@ impl LintPassObject for EarlyLintPassObject {}\n \n impl LintPassObject for LateLintPassObject {}\n \n-pub trait LintContext<'tcx>: Sized {\n+pub trait LintContext: Sized {\n     type PassObject: LintPassObject;\n \n     fn sess(&self) -> &Session;\n@@ -700,7 +700,7 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n     }\n }\n \n-impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> {\n+impl LintContext for LateContext<'_, '_> {\n     type PassObject = LateLintPassObject;\n \n     /// Gets the overall compiler `Session` object.\n@@ -728,7 +728,7 @@ impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a> LintContext<'a> for EarlyContext<'a> {\n+impl LintContext for EarlyContext<'_> {\n     type PassObject = EarlyLintPassObject;\n \n     /// Gets the overall compiler `Session` object."}, {"sha": "b4088201f3bf1fc17084bd699d59d877c2d0587e", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -80,7 +80,7 @@ macro_rules! impl_stable_hash_for {\n     // We want to use the enum name both in the `impl ... for $enum_name` as well as for\n     // importing all the variants. Unfortunately it seems we have to take the name\n     // twice for this purpose\n-    (impl<$($lt:lifetime $(: $lt_bound:lifetime)? ),* $(,)? $($T:ident),* $(,)?>\n+    (impl<$($T:ident),* $(,)?>\n         for enum $enum_name:path\n         [ $enum_path:path ]\n     {\n@@ -91,7 +91,7 @@ macro_rules! impl_stable_hash_for {\n            $( { $($named_field:ident $(-> $named_delegate:tt)?),* } )?\n         ),* $(,)?\n     }) => {\n-        impl<'a, $($lt $(: $lt_bound)?,)* $($T,)*>\n+        impl<$($T,)*>\n             ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>\n             for $enum_name\n             where $($T: ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>),*\n@@ -117,13 +117,13 @@ macro_rules! impl_stable_hash_for {\n     // Structs\n     (struct $struct_name:path { $($field:ident $(-> $delegate:tt)?),* $(,)? }) => {\n         impl_stable_hash_for!(\n-            impl<'tcx> for struct $struct_name { $($field $(-> $delegate)?),* }\n+            impl<> for struct $struct_name { $($field $(-> $delegate)?),* }\n         );\n     };\n-    (impl<$($lt:lifetime $(: $lt_bound:lifetime)? ),* $(,)? $($T:ident),* $(,)?> for struct $struct_name:path {\n+    (impl<$($T:ident),* $(,)?> for struct $struct_name:path {\n         $($field:ident $(-> $delegate:tt)?),* $(,)?\n     }) => {\n-        impl<'a, $($lt $(: $lt_bound)?,)* $($T,)*>\n+        impl<$($T,)*>\n             ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>> for $struct_name\n             where $($T: ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>),*\n         {\n@@ -143,12 +143,12 @@ macro_rules! impl_stable_hash_for {\n     // We cannot use normal parentheses here, the parser won't allow it\n     (tuple_struct $struct_name:path { $($field:ident $(-> $delegate:tt)?),*  $(,)? }) => {\n         impl_stable_hash_for!(\n-            impl<'tcx> for tuple_struct $struct_name { $($field $(-> $delegate)?),* }\n+            impl<> for tuple_struct $struct_name { $($field $(-> $delegate)?),* }\n         );\n     };\n-    (impl<$($lt:lifetime $(: $lt_bound:lifetime)? ),* $(,)? $($T:ident),* $(,)?>\n+    (impl<$($T:ident),* $(,)?>\n      for tuple_struct $struct_name:path { $($field:ident $(-> $delegate:tt)?),*  $(,)? }) => {\n-        impl<'a, $($lt $(: $lt_bound)?,)* $($T,)*>\n+        impl<$($T,)*>\n             ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>> for $struct_name\n             where $($T: ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>),*\n         {\n@@ -170,7 +170,7 @@ macro_rules! impl_stable_hash_for {\n macro_rules! impl_stable_hash_for_spanned {\n     ($T:path) => (\n \n-        impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ::syntax::source_map::Spanned<$T>\n+        impl HashStable<StableHashingContext<'a>> for ::syntax::source_map::Spanned<$T>\n         {\n             #[inline]\n             fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "26002a411d4b6e48b785c770c52a7fdf9957cde9", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -105,7 +105,7 @@ impl From<AllocId> for Pointer {\n     }\n }\n \n-impl<'tcx> Pointer<()> {\n+impl Pointer<()> {\n     #[inline(always)]\n     pub fn new(alloc_id: AllocId, offset: Size) -> Self {\n         Pointer { alloc_id, offset, tag: () }"}, {"sha": "f7b3385668f7b2b79a784562e01e21102d2a39f3", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -146,7 +146,7 @@ impl<Tag> From<Double> for Scalar<Tag> {\n     }\n }\n \n-impl<'tcx> Scalar<()> {\n+impl Scalar<()> {\n     #[inline(always)]\n     fn check_data(data: u128, size: u8) {\n         debug_assert_eq!(truncate(data, Size::from_bytes(size as u64)), data,"}, {"sha": "babce812d4a39157fb2c175f006249bc510236a5", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -967,7 +967,7 @@ pub enum PlaceContext {\n     NonUse(NonUseContext),\n }\n \n-impl<'tcx> PlaceContext {\n+impl PlaceContext {\n     /// Returns `true` if this place context represents a drop.\n     pub fn is_drop(&self) -> bool {\n         match *self {"}, {"sha": "6a03aa64d26d19d175ce252dc5ae517e33aa178a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -785,7 +785,7 @@ macro_rules! options {\n         return op;\n     }\n \n-    impl<'a> dep_tracking::DepTrackingHash for $struct_name {\n+    impl dep_tracking::DepTrackingHash for $struct_name {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n             let mut sub_hashes = BTreeMap::new();\n             $({"}, {"sha": "9ce35d15d3c334a74c274cce694ecfdc58bbed8c", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -270,7 +270,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // the final synthesized generics: we don't want our generated docs page to contain something\n     // like 'T: Copy + Clone', as that's redundant. Therefore, we keep track of a separate\n     // 'user_env', which only holds the predicates that will actually be displayed to the user.\n-    fn evaluate_predicates<'b, 'gcx, 'c>(\n+    fn evaluate_predicates<'b, 'c>(\n         &self,\n         infcx: &InferCtxt<'b, 'tcx, 'c>,\n         trait_did: DefId,"}, {"sha": "fd2d8fd0661a5cf1276e953d98c30fc8b6a76114", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -1191,7 +1191,7 @@ where\n         folder: &mut F,\n     ) -> chalk_engine::ExClause<Self>;\n \n-    fn visit_ex_clause_with<'gcx: 'tcx, V: TypeVisitor<'tcx>>(\n+    fn visit_ex_clause_with<V: TypeVisitor<'tcx>>(\n         ex_clause: &chalk_engine::ExClause<Self>,\n         visitor: &mut V,\n     ) -> bool;"}, {"sha": "594f55e52f8e6b593b125cef0a2750390ec05bc1", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -145,7 +145,7 @@ BraceStructLiftImpl! {\n }\n \n impl_stable_hash_for! {\n-    impl<'tcx, T> for struct Normalize<T> {\n+    impl<T> for struct Normalize<T> {\n         value\n     }\n }"}, {"sha": "c637fc27cc0cabeb0038d1bfcb71828aaef251d3", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -104,7 +104,7 @@ pub enum IntercrateAmbiguityCause {\n impl IntercrateAmbiguityCause {\n     /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n     /// See #23980 for details.\n-    pub fn add_intercrate_ambiguity_hint<'a, 'tcx>(\n+    pub fn add_intercrate_ambiguity_hint(\n         &self,\n         err: &mut errors::DiagnosticBuilder<'_>,\n     ) {\n@@ -2299,7 +2299,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     /// candidates and prefer where-clause candidates.\n     ///\n     /// See the comment for \"SelectionCandidate\" for more details.\n-    fn candidate_should_be_dropped_in_favor_of<'o>(\n+    fn candidate_should_be_dropped_in_favor_of(\n         &mut self,\n         victim: &EvaluatedCandidate<'tcx>,\n         other: &EvaluatedCandidate<'tcx>,\n@@ -2423,7 +2423,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     // These cover the traits that are built-in to the language\n     // itself: `Copy`, `Clone` and `Sized`.\n \n-    fn assemble_builtin_bound_candidates<'o>(\n+    fn assemble_builtin_bound_candidates(\n         &mut self,\n         conditions: BuiltinImplConditions<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,"}, {"sha": "f6108f2a28699479933ed1f2e339bd8e763570c7", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -90,13 +90,13 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableClosureData<'tcx, N> {\n     }\n }\n \n-impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> {\n+impl<N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"VtableBuiltinData(nested={:?})\", self.nested)\n     }\n }\n \n-impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableAutoImplData<N> {\n+impl<N: fmt::Debug> fmt::Debug for traits::VtableAutoImplData<N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,"}, {"sha": "3ac76c384e6053133da22a676060e7bdb7f19801", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -154,7 +154,7 @@ impl<D: Copy + Debug + Ord + Eq + Hash> SimplifiedTypeGen<D> {\n     }\n }\n \n-impl<'a, 'gcx, D> HashStable<StableHashingContext<'a>> for SimplifiedTypeGen<D>\n+impl<'a, D> HashStable<StableHashingContext<'a>> for SimplifiedTypeGen<D>\n     where D: Copy + Debug + Ord + Eq + Hash +\n              HashStable<StableHashingContext<'a>>,\n {"}, {"sha": "cee1359eb366bf0bce958f5ae9a3af00abbcbc9b", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -442,7 +442,7 @@ fn resolve_associated_item<'a, 'tcx>(\n     }\n }\n \n-fn needs_fn_once_adapter_shim<'a, 'tcx>(actual_closure_kind: ty::ClosureKind,\n+fn needs_fn_once_adapter_shim(actual_closure_kind: ty::ClosureKind,\n                                         trait_closure_kind: ty::ClosureKind)\n     -> Result<bool, ()>\n {"}, {"sha": "879d03352e654c3f75a46858e8f8bd9e55fd320d", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -1678,7 +1678,7 @@ impl ty::query::TyCtxtAt<'a, 'tcx, '_> {\n     }\n }\n \n-impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n+impl<'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n     where C: LayoutOf<Ty = Ty<'tcx>> + HasTyCtxt<'tcx>,\n           C::TyLayout: MaybeResult<TyLayout<'tcx>>,\n           C: HasParamEnv<'tcx>"}, {"sha": "aafc510f5b6edc37badbe54cdb25a046bf5c8cf5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -203,7 +203,7 @@ impl AssocItem {\n \n     /// Tests whether the associated item admits a non-trivial implementation\n     /// for !\n-    pub fn relevant_for_never<'tcx>(&self) -> bool {\n+    pub fn relevant_for_never(&self) -> bool {\n         match self.kind {\n             AssocKind::Existential |\n             AssocKind::Const |\n@@ -1614,7 +1614,7 @@ pub struct Placeholder<T> {\n     pub name: T,\n }\n \n-impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>> for Placeholder<T>\n+impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>\n     where T: HashStable<StableHashingContext<'a>>\n {\n     fn hash_stable<W: StableHasherResult>("}, {"sha": "d6bc4e537581be6cec5816cd1cac24dca242f4a5", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -11,6 +11,8 @@ pub use self::pretty::*;\n \n pub mod obsolete;\n \n+// FIXME(eddyb) false positive, the lifetime parameters are used with `P:  Printer<...>`.\n+#[allow(unused_lifetimes)]\n pub trait Print<'gcx, 'tcx, P> {\n     type Output;\n     type Error;"}, {"sha": "286894c82b7e2bfe5bdb8d48521ebd2dac8d7021", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -17,6 +17,8 @@ use crate::ich::StableHashingContext;\n \n // Query configuration and description traits.\n \n+// FIXME(eddyb) false positive, the lifetime parameter is used for `Key`/`Value`.\n+#[allow(unused_lifetimes)]\n pub trait QueryConfig<'tcx> {\n     const NAME: QueryName;\n     const CATEGORY: ProfileCategory;"}, {"sha": "abde4d6de2aed78b561dfa709ced9b6b877a3d8a", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -886,7 +886,7 @@ impl<T> Binder<T> {\n     }\n \n     /// Wraps `value` in a binder, binding higher-ranked vars (if any).\n-    pub fn bind<'tcx>(value: T) -> Binder<T> {\n+    pub fn bind(value: T) -> Binder<T> {\n         Binder(value)\n     }\n \n@@ -988,7 +988,7 @@ pub struct ProjectionTy<'tcx> {\n     pub item_def_id: DefId,\n }\n \n-impl<'a, 'tcx> ProjectionTy<'tcx> {\n+impl<'tcx> ProjectionTy<'tcx> {\n     /// Construct a `ProjectionTy` by searching the trait from `trait_ref` for the\n     /// associated item named `item_name`.\n     pub fn from_ref_and_name("}, {"sha": "dee9a7c3f4a78b648e51533492892ab3223a6fe0", "filename": "src/librustc/util/captures.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Futil%2Fcaptures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774724be3ca3ce7580fadf9bd171df0255023e40/src%2Flibrustc%2Futil%2Fcaptures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcaptures.rs?ref=774724be3ca3ce7580fadf9bd171df0255023e40", "patch": "@@ -3,6 +3,8 @@\n /// Basically a workaround; see [this comment] for details.\n ///\n /// [this comment]: https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\n+// FIXME(eddyb) false positive, the lifetime parameter is \"phantom\" but needed.\n+#[allow(unused_lifetimes)]\n pub trait Captures<'a> { }\n \n impl<'a, T: ?Sized> Captures<'a> for T { }"}]}