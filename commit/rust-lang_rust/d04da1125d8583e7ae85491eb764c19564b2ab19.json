{"sha": "d04da1125d8583e7ae85491eb764c19564b2ab19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNGRhMTEyNWQ4NTgzZTdhZTg1NDkxZWI3NjRjMTk1NjRiMmFiMTk=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-30T00:22:32Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-30T00:22:32Z"}, "message": "Properly handle const prop failures", "tree": {"sha": "9afd51e5327c31b4e977682f745c9b1f547633c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9afd51e5327c31b4e977682f745c9b1f547633c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d04da1125d8583e7ae85491eb764c19564b2ab19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d04da1125d8583e7ae85491eb764c19564b2ab19", "html_url": "https://github.com/rust-lang/rust/commit/d04da1125d8583e7ae85491eb764c19564b2ab19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d04da1125d8583e7ae85491eb764c19564b2ab19/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94bafb69b5a09c7d91959f9be7f5c2d7be1b69d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94bafb69b5a09c7d91959f9be7f5c2d7be1b69d", "html_url": "https://github.com/rust-lang/rust/commit/c94bafb69b5a09c7d91959f9be7f5c2d7be1b69d"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "9bc41da1b467bdd9d0604dcdb16c545049a9b7bb", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d04da1125d8583e7ae85491eb764c19564b2ab19/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04da1125d8583e7ae85491eb764c19564b2ab19/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=d04da1125d8583e7ae85491eb764c19564b2ab19", "patch": "@@ -131,11 +131,14 @@ impl<Tag> Allocation<Tag> {\n             // available to the compiler can change between runs. Normally queries are always\n             // deterministic. However, we can be non-determinstic here because all uses of const\n             // evaluation do one of:\n-            // - cause a fatal compiler error when they see this error as the result of const\n-            //   evaluation\n-            // - panic on evaluation failure\n-            // - always evaluate very small constants that are practically unlikely to result in\n-            //   memory exhaustion\n+            // - error on failure\n+            //   - used for static initalizer evalution\n+            //   - used for const value evaluation\n+            //   - const prop errors on this since otherwise it would generate different code based\n+            //     on available memory\n+            // - panic on failure to allocate very small sizes\n+            //   - actually panicking won't happen since there wouldn't be enough memory to panic\n+            //   - used for caller location evaluation\n             InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)\n         })?;\n         bytes.resize(size.bytes_usize(), 0);"}, {"sha": "2e461015b6201ed52a652fb3b1f825d5e87ed7d1", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d04da1125d8583e7ae85491eb764c19564b2ab19/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04da1125d8583e7ae85491eb764c19564b2ab19/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=d04da1125d8583e7ae85491eb764c19564b2ab19", "patch": "@@ -535,4 +535,10 @@ impl InterpError<'_> {\n             _ => false,\n         }\n     }\n+\n+    /// Did the error originate from volatile conditons such as the memory available to the\n+    /// interpreter?\n+    pub fn is_spurious(&self) -> bool {\n+        matches!(self, InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted))\n+    }\n }"}, {"sha": "0230e05c12e8ad8d07c8dfacf05898f702d5b285", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d04da1125d8583e7ae85491eb764c19564b2ab19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04da1125d8583e7ae85491eb764c19564b2ab19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=d04da1125d8583e7ae85491eb764c19564b2ab19", "patch": "@@ -1,6 +1,6 @@\n use std::convert::TryFrom;\n \n-use crate::mir::interpret::{alloc_range, AllocId, Allocation, Pointer, Scalar, InterpResult};\n+use crate::mir::interpret::{alloc_range, AllocId, Allocation, InterpResult, Pointer, Scalar};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, DefId, SubstsRef, Ty, TyCtxt};\n use rustc_ast::Mutability;"}, {"sha": "3264f16eccd5bf3ff2c8312d26c78edf9df961f7", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d04da1125d8583e7ae85491eb764c19564b2ab19/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04da1125d8583e7ae85491eb764c19564b2ab19/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=d04da1125d8583e7ae85491eb764c19564b2ab19", "patch": "@@ -478,6 +478,19 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Ok(op) => Some(op),\n             Err(error) => {\n                 let tcx = self.ecx.tcx.at(c.span);\n+                if error.kind().is_spurious() {\n+                    // Spurious errors can't be ignored since otherwise the amount of available\n+                    // memory influences the result of optimization and the build. The error\n+                    // doesn't need to be fatal since no code will actually be generated anyways.\n+                    self.ecx\n+                        .tcx\n+                        .tcx\n+                        .sess\n+                        .struct_err(\"memory exhausted during optimization\")\n+                        .help(\"try increasing the amount of memory available to the compiler\")\n+                        .emit();\n+                    return None;\n+                }\n                 let err = ConstEvalErr::new(&self.ecx, error, Some(c.span));\n                 if let Some(lint_root) = self.lint_root(source_info) {\n                     let lint_only = match c.literal {"}]}