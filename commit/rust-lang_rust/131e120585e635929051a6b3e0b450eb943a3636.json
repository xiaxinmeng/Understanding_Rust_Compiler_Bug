{"sha": "131e120585e635929051a6b3e0b450eb943a3636", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMWUxMjA1ODVlNjM1OTI5MDUxYTZiM2UwYjQ1MGViOTQzYTM2MzY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-05-02T22:25:45Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-05-02T22:25:45Z"}, "message": "Extract stamp testing for LLVM\n\nThe extracted function can be used by the rest of bootstrap to detect if we've\nalready built an up-to-date LLVM (and so it's safe for us to either request it\nor pretend it exists).", "tree": {"sha": "9096dda09bd69a0460b9bc20378533bbb6e0e9c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9096dda09bd69a0460b9bc20378533bbb6e0e9c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/131e120585e635929051a6b3e0b450eb943a3636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/131e120585e635929051a6b3e0b450eb943a3636", "html_url": "https://github.com/rust-lang/rust/commit/131e120585e635929051a6b3e0b450eb943a3636", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/131e120585e635929051a6b3e0b450eb943a3636/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "html_url": "https://github.com/rust-lang/rust/commit/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd"}], "stats": {"total": 116, "additions": 71, "deletions": 45}, "files": [{"sha": "bcd79a49eced14cbb8069bbc7de80a56b41ddab3", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 71, "deletions": 45, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/131e120585e635929051a6b3e0b450eb943a3636/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131e120585e635929051a6b3e0b450eb943a3636/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=131e120585e635929051a6b3e0b450eb943a3636", "patch": "@@ -24,6 +24,72 @@ use crate::util::{self, exe};\n use crate::GitRepo;\n use build_helper::up_to_date;\n \n+pub struct Meta {\n+    stamp: HashStamp,\n+    build_llvm_config: PathBuf,\n+    out_dir: PathBuf,\n+    root: String,\n+}\n+\n+// This returns whether we've already previously built LLVM.\n+//\n+// It's used to avoid busting caches during x.py check -- if we've already built\n+// LLVM, it's fine for us to not try to avoid doing so.\n+//\n+// This will return the llvm-config if it can get it (but it will not build it\n+// if not).\n+pub fn prebuilt_llvm_config(\n+    builder: &Builder<'_>,\n+    target: Interned<String>,\n+) -> Result<PathBuf, Meta> {\n+    // If we're using a custom LLVM bail out here, but we can only use a\n+    // custom LLVM for the build triple.\n+    if let Some(config) = builder.config.target_config.get(&target) {\n+        if let Some(ref s) = config.llvm_config {\n+            check_llvm_version(builder, s);\n+            return Ok(s.to_path_buf());\n+        }\n+    }\n+\n+    let root = \"src/llvm-project/llvm\";\n+    let out_dir = builder.llvm_out(target);\n+    let mut llvm_config_ret_dir = builder.llvm_out(builder.config.build);\n+    if !builder.config.build.contains(\"msvc\") || builder.config.ninja {\n+        llvm_config_ret_dir.push(\"build\");\n+    }\n+    llvm_config_ret_dir.push(\"bin\");\n+\n+    let build_llvm_config = llvm_config_ret_dir.join(exe(\"llvm-config\", &*builder.config.build));\n+\n+    let stamp = out_dir.join(\"llvm-finished-building\");\n+    let stamp = HashStamp::new(stamp, builder.in_tree_llvm_info.sha());\n+\n+    if builder.config.llvm_skip_rebuild && stamp.path.exists() {\n+        builder.info(\n+            \"Warning: \\\n+                Using a potentially stale build of LLVM; \\\n+                This may not behave well.\",\n+        );\n+        return Ok(build_llvm_config);\n+    }\n+\n+    if stamp.is_done() {\n+        if stamp.hash.is_none() {\n+            builder.info(\n+                \"Could not determine the LLVM submodule commit hash. \\\n+                     Assuming that an LLVM rebuild is not necessary.\",\n+            );\n+            builder.info(&format!(\n+                \"To force LLVM to rebuild, remove the file `{}`\",\n+                stamp.path.display()\n+            ));\n+        }\n+        return Ok(build_llvm_config);\n+    }\n+\n+    Err(Meta { stamp, build_llvm_config, out_dir, root: root.into() })\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Llvm {\n     pub target: Interned<String>,\n@@ -46,51 +112,11 @@ impl Step for Llvm {\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n         let target = self.target;\n \n-        // If we're using a custom LLVM bail out here, but we can only use a\n-        // custom LLVM for the build triple.\n-        if let Some(config) = builder.config.target_config.get(&target) {\n-            if let Some(ref s) = config.llvm_config {\n-                check_llvm_version(builder, s);\n-                return s.to_path_buf();\n-            }\n-        }\n-\n-        let root = \"src/llvm-project/llvm\";\n-        let out_dir = builder.llvm_out(target);\n-        let mut llvm_config_ret_dir = builder.llvm_out(builder.config.build);\n-        if !builder.config.build.contains(\"msvc\") || builder.config.ninja {\n-            llvm_config_ret_dir.push(\"build\");\n-        }\n-        llvm_config_ret_dir.push(\"bin\");\n-\n-        let build_llvm_config =\n-            llvm_config_ret_dir.join(exe(\"llvm-config\", &*builder.config.build));\n-\n-        let stamp = out_dir.join(\"llvm-finished-building\");\n-        let stamp = HashStamp::new(stamp, builder.in_tree_llvm_info.sha());\n-\n-        if builder.config.llvm_skip_rebuild && stamp.path.exists() {\n-            builder.info(\n-                \"Warning: \\\n-                Using a potentially stale build of LLVM; \\\n-                This may not behave well.\",\n-            );\n-            return build_llvm_config;\n-        }\n-\n-        if stamp.is_done() {\n-            if stamp.hash.is_none() {\n-                builder.info(\n-                    \"Could not determine the LLVM submodule commit hash. \\\n-                     Assuming that an LLVM rebuild is not necessary.\",\n-                );\n-                builder.info(&format!(\n-                    \"To force LLVM to rebuild, remove the file `{}`\",\n-                    stamp.path.display()\n-                ));\n-            }\n-            return build_llvm_config;\n-        }\n+        let Meta { stamp, build_llvm_config, out_dir, root } =\n+            match prebuilt_llvm_config(builder, target) {\n+                Ok(p) => return p,\n+                Err(m) => m,\n+            };\n \n         builder.info(&format!(\"Building LLVM for {}\", target));\n         t!(stamp.remove());"}]}