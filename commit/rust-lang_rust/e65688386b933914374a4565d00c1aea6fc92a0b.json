{"sha": "e65688386b933914374a4565d00c1aea6fc92a0b", "node_id": "C_kwDOAAsO6NoAKGU2NTY4ODM4NmI5MzM5MTQzNzRhNDU2NWQwMGMxYWVhNmZjOTJhMGI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-11T16:12:16Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-15T11:26:07Z"}, "message": "Pull the unstable name collision hint emission out of method probing", "tree": {"sha": "4664ce0a299040d6e289c5b7a7c2097e28f8ee60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4664ce0a299040d6e289c5b7a7c2097e28f8ee60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e65688386b933914374a4565d00c1aea6fc92a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e65688386b933914374a4565d00c1aea6fc92a0b", "html_url": "https://github.com/rust-lang/rust/commit/e65688386b933914374a4565d00c1aea6fc92a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e65688386b933914374a4565d00c1aea6fc92a0b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e694ef5f20992514b895493ccf9df0fd851bc715", "url": "https://api.github.com/repos/rust-lang/rust/commits/e694ef5f20992514b895493ccf9df0fd851bc715", "html_url": "https://github.com/rust-lang/rust/commit/e694ef5f20992514b895493ccf9df0fd851bc715"}], "stats": {"total": 120, "additions": 60, "deletions": 60}, "files": [{"sha": "1d13386c57afbae73e14042ab40b374840ca2354", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e65688386b933914374a4565d00c1aea6fc92a0b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65688386b933914374a4565d00c1aea6fc92a0b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=e65688386b933914374a4565d00c1aea6fc92a0b", "patch": "@@ -101,7 +101,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             call_expr_id,\n             ProbeScope::TraitsInScope,\n         ) {\n-            Ok(..) => true,\n+            Ok(pick) => {\n+                pick.emit_unstable_name_collision_hint(self.tcx, method_name.span, call_expr_id);\n+                true\n+            }\n             Err(NoMatch(..)) => false,\n             Err(Ambiguity(..)) => true,\n             Err(PrivateMatch(..)) => allow_private,\n@@ -245,14 +248,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_expr: &'tcx hir::Expr<'tcx>,\n         scope: ProbeScope,\n     ) -> probe::PickResult<'tcx> {\n-        self.probe_for_name(\n+        let pick = self.probe_for_name(\n             probe::Mode::MethodCall,\n             method_name,\n             IsSuggestion(false),\n             self_ty,\n             call_expr.hir_id,\n             scope,\n-        )\n+        )?;\n+        pick.emit_unstable_name_collision_hint(self.tcx, method_name.span, call_expr.hir_id);\n+        Ok(pick)\n     }\n \n     pub(super) fn obligation_for_method(\n@@ -577,13 +582,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let pick = self.probe_for_name(\n             probe::Mode::Path,\n-            method_name.with_span_pos(span),\n+            method_name,\n             IsSuggestion(false),\n             self_ty,\n             expr_id,\n             ProbeScope::TraitsInScope,\n         )?;\n \n+        pick.emit_unstable_name_collision_hint(self.tcx, span, expr_id);\n+\n         self.lint_fully_qualified_call_from_2018(\n             span,\n             method_name,"}, {"sha": "15481296d9bfd7e450d24a5cf4f0636b9b70b11a", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 49, "deletions": 56, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/e65688386b933914374a4565d00c1aea6fc92a0b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65688386b933914374a4565d00c1aea6fc92a0b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=e65688386b933914374a4565d00c1aea6fc92a0b", "patch": "@@ -83,8 +83,6 @@ struct ProbeContext<'a, 'tcx> {\n     unsatisfied_predicates:\n         Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>, Option<ObligationCause<'tcx>>)>,\n \n-    is_suggestion: IsSuggestion,\n-\n     scope_expr_id: hir::HirId,\n }\n \n@@ -209,6 +207,9 @@ pub struct Pick<'tcx> {\n     /// `*mut T`, convert it to `*const T`.\n     pub autoref_or_ptr_adjustment: Option<AutorefOrPtrAdjustment>,\n     pub self_ty: Ty<'tcx>,\n+\n+    /// Unstable candidates alongside the stable ones.\n+    unstable_candidates: Vec<(Candidate<'tcx>, Symbol)>,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -445,7 +446,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return_type,\n                 orig_values,\n                 steps.steps,\n-                is_suggestion,\n                 scope_expr_id,\n             );\n \n@@ -540,7 +540,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         return_type: Option<Ty<'tcx>>,\n         orig_steps_var_values: OriginalQueryValues<'tcx>,\n         steps: &'tcx [CandidateStep<'tcx>],\n-        is_suggestion: IsSuggestion,\n         scope_expr_id: hir::HirId,\n     ) -> ProbeContext<'a, 'tcx> {\n         ProbeContext {\n@@ -558,7 +557,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             allow_similar_names: false,\n             private_candidate: None,\n             unsatisfied_predicates: Vec::new(),\n-            is_suggestion,\n             scope_expr_id,\n         }\n     }\n@@ -880,7 +878,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         }\n     }\n \n-    pub fn matches_return_type(\n+    fn matches_return_type(\n         &self,\n         method: &ty::AssocItem,\n         self_ty: Option<Ty<'tcx>>,\n@@ -1051,26 +1049,17 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     }\n \n     fn pick_core(&mut self) -> Option<PickResult<'tcx>> {\n-        let mut unstable_candidates = Vec::new();\n-        let pick = self.pick_all_method(Some(&mut unstable_candidates));\n+        let pick = self.pick_all_method(Some(&mut vec![]));\n \n         // In this case unstable picking is done by `pick_method`.\n         if !self.tcx.sess.opts.unstable_opts.pick_stable_methods_before_any_unstable {\n             return pick;\n         }\n \n-        match pick {\n-            // Emit a lint if there are unstable candidates alongside the stable ones.\n-            //\n-            // We suppress warning if we're picking the method only because it is a\n-            // suggestion.\n-            Some(Ok(ref p)) if !self.is_suggestion.0 && !unstable_candidates.is_empty() => {\n-                self.emit_unstable_name_collision_hint(p, &unstable_candidates);\n-                pick\n-            }\n-            Some(_) => pick,\n-            None => self.pick_all_method(None),\n+        if pick.is_none() {\n+            return self.pick_all_method(None);\n         }\n+        pick\n     }\n \n     fn pick_all_method(\n@@ -1215,7 +1204,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         debug!(\"pick_method_with_unstable(self_ty={})\", self.ty_to_string(self_ty));\n \n         let mut possibly_unsatisfied_predicates = Vec::new();\n-        let mut unstable_candidates = Vec::new();\n \n         for (kind, candidates) in\n             &[(\"inherent\", &self.inherent_candidates), (\"extension\", &self.extension_candidates)]\n@@ -1225,26 +1213,17 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self_ty,\n                 candidates.iter(),\n                 &mut possibly_unsatisfied_predicates,\n-                Some(&mut unstable_candidates),\n+                Some(&mut vec![]),\n             );\n-            if let Some(pick) = res {\n-                if !self.is_suggestion.0 && !unstable_candidates.is_empty() {\n-                    if let Ok(p) = &pick {\n-                        // Emit a lint if there are unstable candidates alongside the stable ones.\n-                        //\n-                        // We suppress warning if we're picking the method only because it is a\n-                        // suggestion.\n-                        self.emit_unstable_name_collision_hint(p, &unstable_candidates);\n-                    }\n-                }\n-                return Some(pick);\n+            if res.is_some() {\n+                return res;\n             }\n         }\n \n         debug!(\"searching unstable candidates\");\n         let res = self.consider_candidates(\n             self_ty,\n-            unstable_candidates.iter().map(|(c, _)| c),\n+            self.inherent_candidates.iter().chain(&self.extension_candidates),\n             &mut possibly_unsatisfied_predicates,\n             None,\n         );\n@@ -1299,7 +1278,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             Option<ty::Predicate<'tcx>>,\n             Option<ObligationCause<'tcx>>,\n         )>,\n-        unstable_candidates: Option<&mut Vec<(Candidate<'tcx>, Symbol)>>,\n+        mut unstable_candidates: Option<&mut Vec<(Candidate<'tcx>, Symbol)>>,\n     ) -> Option<PickResult<'tcx>>\n     where\n         ProbesIter: Iterator<Item = &'b Candidate<'tcx>> + Clone,\n@@ -1323,7 +1302,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             }\n         }\n \n-        if let Some(uc) = unstable_candidates {\n+        if let Some(uc) = &mut unstable_candidates {\n             applicable_candidates.retain(|&(p, _)| {\n                 if let stability::EvalResult::Deny { feature, .. } =\n                     self.tcx.eval_stability(p.item.def_id, None, self.span, None)\n@@ -1342,30 +1321,37 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n         applicable_candidates.pop().map(|(probe, status)| {\n             if status == ProbeResult::Match {\n-                Ok(probe.to_unadjusted_pick(self_ty))\n+                Ok(probe\n+                    .to_unadjusted_pick(self_ty, unstable_candidates.cloned().unwrap_or_default()))\n             } else {\n                 Err(MethodError::BadReturnType)\n             }\n         })\n     }\n+}\n \n-    fn emit_unstable_name_collision_hint(\n+impl<'tcx> Pick<'tcx> {\n+    pub fn emit_unstable_name_collision_hint(\n         &self,\n-        stable_pick: &Pick<'_>,\n-        unstable_candidates: &[(Candidate<'tcx>, Symbol)],\n+        tcx: TyCtxt<'tcx>,\n+        span: Span,\n+        scope_expr_id: hir::HirId,\n     ) {\n-        let def_kind = stable_pick.item.kind.as_def_kind();\n-        self.tcx.struct_span_lint_hir(\n+        if self.unstable_candidates.is_empty() {\n+            return;\n+        }\n+        let def_kind = self.item.kind.as_def_kind();\n+        tcx.struct_span_lint_hir(\n             lint::builtin::UNSTABLE_NAME_COLLISIONS,\n-            self.scope_expr_id,\n-            self.span,\n+            scope_expr_id,\n+            span,\n             format!(\n                 \"{} {} with this name may be added to the standard library in the future\",\n                 def_kind.article(),\n-                def_kind.descr(stable_pick.item.def_id),\n+                def_kind.descr(self.item.def_id),\n             ),\n             |lint| {\n-                match (stable_pick.item.kind, stable_pick.item.container) {\n+                match (self.item.kind, self.item.container) {\n                     (ty::AssocKind::Fn, _) => {\n                         // FIXME: This should be a `span_suggestion` instead of `help`\n                         // However `self.span` only\n@@ -1374,31 +1360,31 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         lint.help(&format!(\n                             \"call with fully qualified syntax `{}(...)` to keep using the current \\\n                              method\",\n-                            self.tcx.def_path_str(stable_pick.item.def_id),\n+                            tcx.def_path_str(self.item.def_id),\n                         ));\n                     }\n                     (ty::AssocKind::Const, ty::AssocItemContainer::TraitContainer) => {\n-                        let def_id = stable_pick.item.container_id(self.tcx);\n+                        let def_id = self.item.container_id(tcx);\n                         lint.span_suggestion(\n-                            self.span,\n+                            span,\n                             \"use the fully qualified path to the associated const\",\n                             format!(\n                                 \"<{} as {}>::{}\",\n-                                stable_pick.self_ty,\n-                                self.tcx.def_path_str(def_id),\n-                                stable_pick.item.name\n+                                self.self_ty,\n+                                tcx.def_path_str(def_id),\n+                                self.item.name\n                             ),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n                     _ => {}\n                 }\n-                if self.tcx.sess.is_nightly_build() {\n-                    for (candidate, feature) in unstable_candidates {\n+                if tcx.sess.is_nightly_build() {\n+                    for (candidate, feature) in &self.unstable_candidates {\n                         lint.help(&format!(\n                             \"add `#![feature({})]` to the crate attributes to enable `{}`\",\n                             feature,\n-                            self.tcx.def_path_str(candidate.item.def_id),\n+                            tcx.def_path_str(candidate.item.def_id),\n                         ));\n                     }\n                 }\n@@ -1407,7 +1393,9 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             },\n         );\n     }\n+}\n \n+impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     fn select_trait_candidate(\n         &self,\n         trait_ref: ty::TraitRef<'tcx>,\n@@ -1666,6 +1654,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             autoderefs: 0,\n             autoref_or_ptr_adjustment: None,\n             self_ty,\n+            unstable_candidates: vec![],\n         })\n     }\n \n@@ -1685,7 +1674,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self.return_type,\n                 self.orig_steps_var_values.clone(),\n                 steps,\n-                IsSuggestion(true),\n                 self.scope_expr_id,\n             );\n             pcx.allow_similar_names = true;\n@@ -1893,7 +1881,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n }\n \n impl<'tcx> Candidate<'tcx> {\n-    fn to_unadjusted_pick(&self, self_ty: Ty<'tcx>) -> Pick<'tcx> {\n+    fn to_unadjusted_pick(\n+        &self,\n+        self_ty: Ty<'tcx>,\n+        unstable_candidates: Vec<(Candidate<'tcx>, Symbol)>,\n+    ) -> Pick<'tcx> {\n         Pick {\n             item: self.item,\n             kind: match self.kind {\n@@ -1918,6 +1910,7 @@ impl<'tcx> Candidate<'tcx> {\n             autoderefs: 0,\n             autoref_or_ptr_adjustment: None,\n             self_ty,\n+            unstable_candidates,\n         }\n     }\n }"}]}