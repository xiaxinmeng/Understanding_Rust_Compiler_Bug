{"sha": "98a5b24ef7eb05ae52d63ce9e050d6ac144ba345", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YTViMjRlZjdlYjA1YWU1MmQ2M2NlOWUwNTBkNmFjMTQ0YmEzNDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-14T18:09:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-14T18:10:25Z"}, "message": "test some more things around packed structs", "tree": {"sha": "2339c3f7d0dd04a14037d9ee475711c468252e2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2339c3f7d0dd04a14037d9ee475711c468252e2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a5b24ef7eb05ae52d63ce9e050d6ac144ba345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a5b24ef7eb05ae52d63ce9e050d6ac144ba345", "html_url": "https://github.com/rust-lang/rust/commit/98a5b24ef7eb05ae52d63ce9e050d6ac144ba345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a5b24ef7eb05ae52d63ce9e050d6ac144ba345/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfda0a0a90bc37f683e99bbff75fbf59abe48991", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfda0a0a90bc37f683e99bbff75fbf59abe48991", "html_url": "https://github.com/rust-lang/rust/commit/bfda0a0a90bc37f683e99bbff75fbf59abe48991"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "0820614ab5c810a6535ca30ec36b768ec5b72228", "filename": "tests/run-pass/dst-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98a5b24ef7eb05ae52d63ce9e050d6ac144ba345/tests%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a5b24ef7eb05ae52d63ce9e050d6ac144ba345/tests%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-struct.rs?ref=98a5b24ef7eb05ae52d63ce9e050d6ac144ba345", "patch": "@@ -65,9 +65,9 @@ impl ToBar for Bar {\n \n pub fn main() {\n     // With a vec of ints.\n-    let f1 = Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n+    let f1 : Fat<[isize; 3]> = Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n     foo(&f1);\n-    let f2 = &f1;\n+    let f2 : &Fat<[isize; 3]> = &f1;\n     foo(f2);\n     let f3: &Fat<[isize]> = f2;\n     foo(f3);"}, {"sha": "e10781e656058abb9b5076e3d0fffc0d90c038d4", "filename": "tests/run-pass/packed_struct.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/98a5b24ef7eb05ae52d63ce9e050d6ac144ba345/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a5b24ef7eb05ae52d63ce9e050d6ac144ba345/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=98a5b24ef7eb05ae52d63ce9e050d6ac144ba345", "patch": "@@ -45,6 +45,43 @@ fn test_unsizing() {\n     let _unused = &arr_unaligned; // forcing an allocation, which could also yield \"unaligned write\"-errors\n }\n \n+fn test_drop() {\n+    struct Wrap(u32);\n+    impl Drop for Wrap {\n+        fn drop(&mut self) {\n+            // Do an (aligned) load\n+            let _test = self.0;\n+            // For the fun of it, test alignment\n+            assert_eq!(&self.0 as *const _ as usize % std::mem::align_of::<u32>(), 0);\n+        }\n+    }\n+\n+    #[repr(packed,C)]\n+    struct Packed<T> {\n+        f1: u8, // this should move the second field to something not very aligned\n+        f2: T,\n+    }\n+\n+    let p = Packed { f1: 42, f2: Wrap(23) };\n+    drop(p);\n+}\n+\n+fn test_inner_packed() {\n+    // Even if just the inner struct is packed, accesses to the outer field can get unaligned.\n+    // Make sure that works.\n+    #[repr(packed)]\n+    #[derive(Clone,Copy)]\n+    struct Inner(u32);\n+\n+    #[derive(Clone,Copy)]\n+    struct Outer(u8, Inner);\n+\n+    let o = Outer(0, Inner(42));\n+    let _x = o.1;\n+    let _y = (o.1).0;\n+    let _o2 = o.clone();\n+}\n+\n fn main() {\n     let mut x = S {\n         a: 42,\n@@ -64,4 +101,6 @@ fn main() {\n     test(Test2 { x: 0, other: &Test1 { x: 0, other: &42 }});\n \n     test_unsizing();\n+    test_drop();\n+    test_inner_packed();\n }"}]}