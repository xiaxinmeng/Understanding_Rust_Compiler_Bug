{"sha": "85c102757a744956989e5217484a6f650eed3146", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YzEwMjc1N2E3NDQ5NTY5ODllNTIxNzQ4NGE2ZjY1MGVlZDMxNDY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-07-31T20:25:27Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-07-31T21:12:30Z"}, "message": "rustc_mir: don't build unused unwind cleanup blocks\n\nThe unused blocks are removed by SimplifyCfg, but they can cause a\nsignificant performance slowdown before they are removed.", "tree": {"sha": "9cc163e837f8b8fb9c1202f82edd32f66887ff0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc163e837f8b8fb9c1202f82edd32f66887ff0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c102757a744956989e5217484a6f650eed3146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c102757a744956989e5217484a6f650eed3146", "html_url": "https://github.com/rust-lang/rust/commit/85c102757a744956989e5217484a6f650eed3146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c102757a744956989e5217484a6f650eed3146/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1447daa01ddc6536724eb4f3e10972404da0cd56", "url": "https://api.github.com/repos/rust-lang/rust/commits/1447daa01ddc6536724eb4f3e10972404da0cd56", "html_url": "https://github.com/rust-lang/rust/commit/1447daa01ddc6536724eb4f3e10972404da0cd56"}], "stats": {"total": 334, "additions": 181, "deletions": 153}, "files": [{"sha": "bf39e52bd1b283405f063aec4aff0b107d8a32c4", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 57, "deletions": 32, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/85c102757a744956989e5217484a6f650eed3146/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c102757a744956989e5217484a6f650eed3146/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=85c102757a744956989e5217484a6f650eed3146", "patch": "@@ -200,6 +200,15 @@ pub struct BreakableScope<'tcx> {\n     pub break_destination: Lvalue<'tcx>,\n }\n \n+impl DropKind {\n+    fn may_panic(&self) -> bool {\n+        match *self {\n+            DropKind::Value { .. } => true,\n+            DropKind::Storage => false\n+        }\n+    }\n+}\n+\n impl<'tcx> Scope<'tcx> {\n     /// Invalidate all the cached blocks in the scope.\n     ///\n@@ -337,9 +346,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                      mut block: BasicBlock)\n                      -> BlockAnd<()> {\n         debug!(\"pop_scope({:?}, {:?})\", extent, block);\n-        // We need to have `cached_block`s available for all the drops, so we call diverge_cleanup\n-        // to make sure all the `cached_block`s are filled in.\n-        self.diverge_cleanup();\n+        // If we are emitting a `drop` statement, we need to have the cached\n+        // diverge cleanup pads ready in case that drop panics.\n+        let may_panic =\n+            self.scopes.last().unwrap().drops.iter().any(|s| s.kind.may_panic());\n+        if may_panic {\n+            self.diverge_cleanup();\n+        }\n         let scope = self.scopes.pop().unwrap();\n         assert_eq!(scope.extent, extent.0);\n         unpack!(block = build_scope_drops(&mut self.cfg,\n@@ -370,6 +383,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let len = self.scopes.len();\n         assert!(scope_count < len, \"should not use `exit_scope` to pop ALL scopes\");\n         let tmp = self.get_unit_temp();\n+\n+        // If we are emitting a `drop` statement, we need to have the cached\n+        // diverge cleanup pads ready in case that drop panics.\n+        let may_panic =\n+            self.scopes[(len - scope_count)..].iter().any(|s| s.drops.iter().any(|s| s.kind.may_panic()));\n+        if may_panic {\n+            self.diverge_cleanup();\n+        }\n+\n         {\n         let mut rest = &mut self.scopes[(len - scope_count)..];\n         while let Some((scope, rest_)) = {rest}.split_last_mut() {\n@@ -736,45 +758,48 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n                            mut block: BasicBlock,\n                            arg_count: usize)\n                            -> BlockAnd<()> {\n+    debug!(\"build_scope_drops({:?} -> {:?})\", block, scope);\n     let mut iter = scope.drops.iter().rev().peekable();\n     while let Some(drop_data) = iter.next() {\n         let source_info = scope.source_info(drop_data.span);\n-        if let DropKind::Value { .. } = drop_data.kind {\n-            // Try to find the next block with its cached block\n-            // for us to diverge into in case the drop panics.\n-            let on_diverge = iter.peek().iter().filter_map(|dd| {\n-                match dd.kind {\n-                    DropKind::Value { cached_block } => cached_block,\n-                    DropKind::Storage => None\n-                }\n-            }).next();\n-            // If there\u2019s no `cached_block`s within current scope,\n-            // we must look for one in the enclosing scope.\n-            let on_diverge = on_diverge.or_else(||{\n-                earlier_scopes.iter().rev().flat_map(|s| s.cached_block()).next()\n-            });\n-            let next = cfg.start_new_block();\n-            cfg.terminate(block, source_info, TerminatorKind::Drop {\n-                location: drop_data.location.clone(),\n-                target: next,\n-                unwind: on_diverge\n-            });\n-            block = next;\n-        }\n         match drop_data.kind {\n-            DropKind::Value { .. } |\n-            DropKind::Storage => {\n-                // Only temps and vars need their storage dead.\n-                match drop_data.location {\n-                    Lvalue::Local(index) if index.index() > arg_count => {}\n-                    _ => continue\n-                }\n+            DropKind::Value { .. } => {\n+                // Try to find the next block with its cached block\n+                // for us to diverge into in case the drop panics.\n+                let on_diverge = iter.peek().iter().filter_map(|dd| {\n+                    match dd.kind {\n+                        DropKind::Value { cached_block: None } =>\n+                            span_bug!(drop_data.span, \"cached block not present?\"),\n+                        DropKind::Value { cached_block } => cached_block,\n+                        DropKind::Storage => None\n+                    }\n+                }).next();\n+                // If there\u2019s no `cached_block`s within current scope,\n+                // we must look for one in the enclosing scope.\n+                let on_diverge = on_diverge.or_else(|| {\n+                    earlier_scopes.iter().rev().flat_map(|s| s.cached_block()).next()\n+                });\n+                let next = cfg.start_new_block();\n+                cfg.terminate(block, source_info, TerminatorKind::Drop {\n+                    location: drop_data.location.clone(),\n+                    target: next,\n+                    unwind: on_diverge\n+                });\n+                block = next;\n+            }\n+            DropKind::Storage => {}\n+        }\n \n+        // Drop the storage for both value and storage drops.\n+        // Only temps and vars need their storage dead.\n+        match drop_data.location {\n+            Lvalue::Local(index) if index.index() > arg_count => {\n                 cfg.push(block, Statement {\n                     source_info: source_info,\n                     kind: StatementKind::StorageDead(drop_data.location.clone())\n                 });\n             }\n+            _ => continue\n         }\n     }\n     block.unit()"}, {"sha": "6afc344ced84779819fc7a82bf5c15e6963d8feb", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=85c102757a744956989e5217484a6f650eed3146", "patch": "@@ -47,39 +47,39 @@ fn main() {\n //         StorageDead(_3);\n //         StorageLive(_4);\n //         _4 = std::option::Option<std::boxed::Box<u32>>::None;\n+//         StorageLive(_5);\n //         StorageLive(_6);\n-//         StorageLive(_7);\n-//         _7 = _4;\n-//         replace(_6 <- _7) -> [return: bb6, unwind: bb7];\n+//         _6 = _4;\n+//         replace(_5 <- _6) -> [return: bb1, unwind: bb7];\n //     }\n //     bb1: {\n-//         resume;\n+//         drop(_6) -> [return: bb8, unwind: bb5];\n //     }\n //     bb2: {\n-//         drop(_4) -> bb1;\n+//         resume;\n //     }\n //     bb3: {\n-//         goto -> bb2;\n+//         drop(_4) -> bb2;\n //     }\n //     bb4: {\n-//         drop(_6) -> bb3;\n+//         goto -> bb3;\n //     }\n //     bb5: {\n-//         goto -> bb4;\n+//         drop(_5) -> bb4;\n //     }\n //     bb6: {\n-//         drop(_7) -> [return: bb8, unwind: bb4];\n+//         goto -> bb5;\n //     }\n //     bb7: {\n-//         drop(_7) -> bb5;\n+//         drop(_6) -> bb6;\n //     }\n //     bb8: {\n-//         StorageDead(_7);\n+//         StorageDead(_6);\n //         _0 = ();\n-//         drop(_6) -> [return: bb9, unwind: bb2];\n+//         drop(_5) -> [return: bb9, unwind: bb3];\n //     }\n //     bb9: {\n-//         StorageDead(_6);\n+//         StorageDead(_5);\n //         drop(_4) -> bb10;\n //     }\n //     bb10: {"}, {"sha": "bfb1b3b65289034f5e3c435512ce1e60bf188987", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=85c102757a744956989e5217484a6f650eed3146", "patch": "@@ -32,41 +32,41 @@ fn foo(i: i32) {\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n //     let _1: D;\n-//     let _3: i32;\n-//     let _4: &'6_2rce i32;\n+//     let _2: i32;\n+//     let _3: &'6_2rce i32;\n //     let _7: &'6_4rce i32;\n-//     let mut _5: ();\n-//     let mut _6: i32;\n-//\n+//     let mut _4: ();\n+//     let mut _5: i32;\n+//     let mut _6: ();\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_2);\n+//         _2 = const 0i32;\n //         StorageLive(_3);\n-//         _3 = const 0i32;\n-//         StorageLive(_4);\n-//         _4 = &'6_2rce _3;\n-//         StorageLive(_6);\n-//         _6 = (*_4);\n-//         _5 = const foo(_6) -> [return: bb2, unwind: bb3];\n+//         _3 = &'6_2rce _2;\n+//         StorageLive(_5);\n+//         _5 = (*_3);\n+//         _4 = const foo(_5) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         StorageDead(_6);\n+//         StorageDead(_5);\n //         StorageLive(_7);\n-//         _7 = &'6_4rce _3;\n+//         _7 = &'6_4rce _2;\n //         _0 = ();\n //         StorageDead(_7);\n //         EndRegion('6_4rce);\n-//         StorageDead(_4);\n-//         EndRegion('6_2rce);\n //         StorageDead(_3);\n+//         EndRegion('6_2rce);\n+//         StorageDead(_2);\n //         drop(_1) -> bb4;\n //     }\n+//     bb2: {\n+//         resume;\n+//     }\n //     bb3: {\n //         EndRegion('6_2rce);\n-//         drop(_1) -> bb1;\n+//         drop(_1) -> bb2;\n //     }\n //     bb4: {\n //         StorageDead(_1);"}, {"sha": "773a348a939770cb61dcbb2b26bdd7b8a2c6f6f3", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=85c102757a744956989e5217484a6f650eed3146", "patch": "@@ -31,32 +31,31 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     let mut _0: ();\n //     let _1: D;\n //     let mut _2: ();\n-//     let mut _3: ();\n-//     let mut _4: [closure@NodeId(18) d: &'19mce D];\n-//     let mut _5: &'19mce D;\n-//\n+//     let mut _3: [closure@NodeId(18) d:&'19mce D];\n+//     let mut _4: &'19mce D;\n+//     let mut _5: ();\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_3);\n //         StorageLive(_4);\n-//         StorageLive(_5);\n-//         _5 = &'19mce _1;\n-//         _4 = [closure@NodeId(18)] { d: _5 };\n-//         StorageDead(_5);\n-//         _3 = const foo(_4) -> [return: bb2, unwind: bb3];\n+//         _4 = &'19mce _1;\n+//         _3 = [closure@NodeId(18)] { d: _4 };\n+//         StorageDead(_4);\n+//         _2 = const foo(_3) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         StorageDead(_4);\n+//         StorageDead(_3);\n //         EndRegion('19mce);\n //         _0 = ();\n //         drop(_1) -> bb4;\n //     }\n+//     bb2: {\n+//         resume;\n+//     }\n //     bb3: {\n //         EndRegion('19mce);\n-//         drop(_1) -> bb1;\n+//         drop(_1) -> bb2;\n //     }\n //     bb4: {\n //         StorageDead(_1);"}, {"sha": "112c93843e042e4691267ffba357eb661aaf4d8c", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=85c102757a744956989e5217484a6f650eed3146", "patch": "@@ -27,35 +27,35 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n \n // END RUST SOURCE\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n //     let mut _0: ();\n //     let _1: D;\n //     let mut _2: ();\n-//     let mut _3: ();\n-//     let mut _4: [closure@NodeId(22) d:&'23mce D];\n-//     let mut _5: &'23mce D;\n-//\n+//     let mut _3: [closure@NodeId(22) d:&'23mce D];\n+//     let mut _4: &'23mce D;\n+//     let mut _5: ();\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_3);\n //         StorageLive(_4);\n-//         StorageLive(_5);\n-//         _5 = &'23mce _1;\n-//         _4 = [closure@NodeId(22)] { d: _5 };\n-//         StorageDead(_5);\n-//         _3 = const foo(_4) -> [return: bb2, unwind: bb3];\n+//         _4 = &'23mce _1;\n+//         _3 = [closure@NodeId(22)] { d: _4 };\n+//         StorageDead(_4);\n+//         _2 = const foo(_3) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         StorageDead(_4);\n+//         StorageDead(_3);\n //         EndRegion('23mce);\n //         _0 = ();\n //         drop(_1) -> bb4;\n //     }\n+//     bb2: {\n+//         resume;\n+//     }\n //     bb3: {\n //         EndRegion('23mce);\n-//         drop(_1) -> bb1;\n+//         drop(_1) -> bb2;\n //     }\n //     bb4: {\n //         StorageDead(_1);"}, {"sha": "913986ae816a65024890c6230095cf2e0390632b", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=85c102757a744956989e5217484a6f650eed3146", "patch": "@@ -31,18 +31,18 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     let mut _0: ();\n //     let _1: D;\n //     let mut _2: ();\n-//     let mut _3: ();\n-//     let mut _4: [closure@NodeId(22) d:D];\n-//     let mut _5: D;\n+//     let mut _3: [closure@NodeId(22) d:D];\n+//     let mut _4: D;\n+//     let mut _5: ();\n //\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_3);\n //         StorageLive(_4);\n-//         StorageLive(_5);\n-//         _5 = _1;\n-//         _4 = [closure@NodeId(22)] { d: _5 };\n-//         drop(_5) -> [return: bb4, unwind: bb3];\n+//         _4 = _1;\n+//         _3 = [closure@NodeId(22)] { d: _4 };\n+//         drop(_4) -> [return: bb4, unwind: bb3];\n //     }\n //     bb1: {\n //         resume;\n@@ -51,17 +51,17 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         drop(_1) -> bb1;\n //     }\n //     bb3: {\n-//         drop(_4) -> bb2;\n+//         drop(_3) -> bb2;\n //     }\n //     bb4: {\n-//         StorageDead(_5);\n-//         _3 = const foo(_4) -> [return: bb5, unwind: bb3];\n+//         StorageDead(_4);\n+//         _2 = const foo(_3) -> [return: bb5, unwind: bb3];\n //     }\n //     bb5: {\n-//         drop(_4) -> [return: bb6, unwind: bb2];\n+//         drop(_3) -> [return: bb6, unwind: bb2];\n //     }\n //     bb6: {\n-//         StorageDead(_4);\n+//         StorageDead(_3);\n //         _0 = ();\n //         drop(_1) -> bb7;\n //     }\n@@ -76,16 +76,16 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // fn main::{{closure}}(_1: [closure@NodeId(22) d:D]) -> i32 {\n //     let mut _0: i32;\n //     let _2: &'14_0rce D;\n-//     let mut _3: ();\n-//     let mut _4: i32;\n+//     let mut _3: i32;\n+//     let mut _4: ();\n //\n //     bb0: {\n //         StorageLive(_2);\n //         _2 = &'14_0rce (_1.0: D);\n-//         StorageLive(_4);\n-//         _4 = ((*_2).0: i32);\n-//         _0 = _4;\n-//         StorageDead(_4);\n+//         StorageLive(_3);\n+//         _3 = ((*_2).0: i32);\n+//         _0 = _3;\n+//         StorageDead(_3);\n //         StorageDead(_2);\n //         EndRegion('14_0rce);\n //         drop(_1) -> bb1;"}, {"sha": "dc8f8ea11f51c5d2a263d1702bc32607b87317a2", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=85c102757a744956989e5217484a6f650eed3146", "patch": "@@ -29,44 +29,43 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // END RUST SOURCE\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n // fn main() -> () {\n-//     let mut _0: ();\n-//     let _1: D;\n-//     let _3: &'6_1rce D;\n-//     let mut _2: ();\n-//     let mut _4: ();\n-//     let mut _5: [closure@NodeId(22) r:&'6_1rce D];\n-//     let mut _6: &'6_1rce D;\n-//\n-//     bb0: {\n-//         StorageLive(_1);\n-//         _1 = D::{{constructor}}(const 0i32,);\n-//         StorageLive(_3);\n-//         _3 = &'6_1rce _1;\n-//         StorageLive(_5);\n-//         StorageLive(_6);\n-//         _6 = _3;\n-//         _5 = [closure@NodeId(22)] { r: _6 };\n-//         StorageDead(_6);\n-//         _4 = const foo(_5) -> [return: bb2, unwind: bb3];\n-//     }\n-//     bb1: {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         StorageDead(_5);\n-//         _0 = ();\n-//         StorageDead(_3);\n-//         EndRegion('6_1rce);\n-//         drop(_1) -> bb4;\n-//     }\n-//     bb3: {\n-//         EndRegion('6_1rce);\n-//         drop(_1) -> bb1;\n-//     }\n-//     bb4: {\n-//         StorageDead(_1);\n-//         return;\n-//     }\n+//    let mut _0: ();\n+//    let _1: D;\n+//    let _2: &'6_1rce D;\n+//    let mut _3: ();\n+//    let mut _4: [closure@NodeId(22) r:&'6_1rce D];\n+//    let mut _5: &'6_1rce D;\n+//    let mut _6: ();\n+//    bb0: {\n+//        StorageLive(_1);\n+//        _1 = D::{{constructor}}(const 0i32,);\n+//        StorageLive(_2);\n+//        _2 = &'6_1rce _1;\n+//        StorageLive(_4);\n+//        StorageLive(_5);\n+//        _5 = _2;\n+//        _4 = [closure@NodeId(22)] { r: _5 };\n+//        StorageDead(_5);\n+//        _3 = const foo(_4) -> [return: bb1, unwind: bb3];\n+//    }\n+//    bb1: {\n+//        StorageDead(_4);\n+//        _0 = ();\n+//        StorageDead(_2);\n+//        EndRegion('6_1rce);\n+//        drop(_1) -> bb4;\n+//    }\n+//    bb2: {\n+//        resume;\n+//    }\n+//    bb3: {\n+//        EndRegion('6_1rce);\n+//        drop(_1) -> bb2;\n+//    }\n+//    bb4: {\n+//        StorageDead(_1);\n+//        return;\n+//    }\n // }\n // END rustc.node4.SimplifyCfg-qualify-consts.after.mir\n "}, {"sha": "1daa18256dceec73615a4a01263c89dc168e7bac", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c102757a744956989e5217484a6f650eed3146/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=85c102757a744956989e5217484a6f650eed3146", "patch": "@@ -34,18 +34,23 @@ impl S {\n \n // END RUST SOURCE\n // START rustc.node4.ElaborateDrops.after.mir\n+//    let mut _0: ();\n+//    let _1: ();\n //    let mut _2: S;\n-//    let mut _3: ();\n+//    let mut _3: S;\n //    let mut _4: S;\n-//    let mut _5: S;\n+//    let mut _5: ();\n //    let mut _6: bool;\n //\n //    bb0: {\n // END rustc.node4.ElaborateDrops.after.mir\n // START rustc.node13.ElaborateDrops.after.mir\n-//    let mut _2: ();\n-//    let mut _4: ();\n-//    let mut _5: S;\n+//    let mut _0: ();\n+//    let _1: S;\n+//    let mut _2: S;\n+//    let mut _3: ();\n+//    let mut _4: S;\n+//    let mut _5: ();\n //    let mut _6: S;\n //    let mut _7: bool;\n //"}]}