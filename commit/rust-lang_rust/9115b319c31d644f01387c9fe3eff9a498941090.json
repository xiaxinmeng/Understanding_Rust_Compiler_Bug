{"sha": "9115b319c31d644f01387c9fe3eff9a498941090", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMTViMzE5YzMxZDY0NGYwMTM4N2M5ZmUzZWZmOWE0OTg5NDEwOTA=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2014-12-16T00:09:35Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2014-12-18T02:28:34Z"}, "message": "Fix formatting issues", "tree": {"sha": "dcf1cfc5bd290fb9d3539f2754146996691ab73c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcf1cfc5bd290fb9d3539f2754146996691ab73c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9115b319c31d644f01387c9fe3eff9a498941090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9115b319c31d644f01387c9fe3eff9a498941090", "html_url": "https://github.com/rust-lang/rust/commit/9115b319c31d644f01387c9fe3eff9a498941090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9115b319c31d644f01387c9fe3eff9a498941090/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb3e871734957d83aab0cc55d45be7d75d6a7b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb3e871734957d83aab0cc55d45be7d75d6a7b15", "html_url": "https://github.com/rust-lang/rust/commit/fb3e871734957d83aab0cc55d45be7d75d6a7b15"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "2cfcce2a961a9e87f597928b93bdad0fd1e51c8d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9115b319c31d644f01387c9fe3eff9a498941090/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9115b319c31d644f01387c9fe3eff9a498941090/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=9115b319c31d644f01387c9fe3eff9a498941090", "patch": "@@ -1381,7 +1381,8 @@ fn build_cfg(tcx: &ty::ctxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>)\n                 _ => tcx.sess.bug(\"unexpected expr variant in has_nested_returns\")\n             }\n         }\n-        Some(ast_map::NodeVariant(..)) | Some(ast_map::NodeStructCtor(..)) => return (ast::DUMMY_NODE_ID, None),\n+        Some(ast_map::NodeVariant(..)) |\n+        Some(ast_map::NodeStructCtor(..)) => return (ast::DUMMY_NODE_ID, None),\n \n         // glue, shims, etc\n         None if id == ast::DUMMY_NODE_ID => return (ast::DUMMY_NODE_ID, None),"}, {"sha": "550cf93b314e9a93155bb99f660c99958567aada", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9115b319c31d644f01387c9fe3eff9a498941090/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9115b319c31d644f01387c9fe3eff9a498941090/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=9115b319c31d644f01387c9fe3eff9a498941090", "patch": "@@ -112,7 +112,7 @@ pub fn trans_block<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     if dest != expr::Ignore {\n         let block_ty = node_id_type(bcx, b.id);\n-        \n+\n         if b.expr.is_none() || type_is_zero_size(bcx.ccx(), block_ty) {\n             dest = expr::Ignore;\n         } else if b.expr.is_some() {"}, {"sha": "6cefda59737661fbdc41071065001265413f0df1", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9115b319c31d644f01387c9fe3eff9a498941090/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9115b319c31d644f01387c9fe3eff9a498941090/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=9115b319c31d644f01387c9fe3eff9a498941090", "patch": "@@ -944,7 +944,7 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 // it won't actually be used anyway.\n                 if let &Some(ref x) = ex {\n                     bcx = trans_into(bcx, &**x, Ignore);\n-                } \n+                }\n                 bcx\n             }\n         }"}]}