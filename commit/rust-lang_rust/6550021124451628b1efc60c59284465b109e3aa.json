{"sha": "6550021124451628b1efc60c59284465b109e3aa", "node_id": "C_kwDOAAsO6NoAKDY1NTAwMjExMjQ0NTE2MjhiMWVmYzYwYzU5Mjg0NDY1YjEwOWUzYWE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-25T00:39:40Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-09-26T02:07:44Z"}, "message": "Remove box syntax from most places in src/test outside of the issues dir", "tree": {"sha": "1b576863a1690a23001792194352e1dea45af78f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b576863a1690a23001792194352e1dea45af78f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6550021124451628b1efc60c59284465b109e3aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6550021124451628b1efc60c59284465b109e3aa", "html_url": "https://github.com/rust-lang/rust/commit/6550021124451628b1efc60c59284465b109e3aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6550021124451628b1efc60c59284465b109e3aa/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a", "url": "https://api.github.com/repos/rust-lang/rust/commits/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a", "html_url": "https://github.com/rust-lang/rust/commit/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a"}], "stats": {"total": 2192, "additions": 999, "deletions": 1193}, "files": [{"sha": "fe945266b13ca8a64caf164bfe80a7237d6ff618", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -63,7 +63,6 @@\n // lldbr-check:(f64) *unique_val_interior_ref_2 = 26.5\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -79,7 +78,7 @@ fn main() {\n     let stack_val_interior_ref_2: &f64 = &stack_val.y;\n     let ref_to_unnamed: &SomeStruct = &SomeStruct { x: 11, y: 24.5 };\n \n-    let unique_val: Box<_> = box SomeStruct { x: 13, y: 26.5 };\n+    let unique_val: Box<_> = Box::new(SomeStruct { x: 13, y: 26.5 });\n     let unique_val_ref: &SomeStruct = &*unique_val;\n     let unique_val_interior_ref_1: &isize = &unique_val.x;\n     let unique_val_interior_ref_2: &f64 = &unique_val.y;"}, {"sha": "cc28e49c4474550132137ebea5d620b0adb8865c", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -37,7 +37,6 @@\n \n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -46,7 +45,7 @@ fn main() {\n     let stack_val_ref: &(i16, f32) = &stack_val;\n     let ref_to_unnamed: &(i16, f32) = &(-15, -20f32);\n \n-    let unique_val: Box<(i16, f32)> = box (-17, -22f32);\n+    let unique_val: Box<(i16, f32)> = Box::new((-17, -22f32));\n     let unique_val_ref: &(i16, f32) = &*unique_val;\n \n     zzz(); // #break"}, {"sha": "b39f24e029e31fc8942979c2d99a9471a9e636b9", "filename": "src/test/debuginfo/borrowed-unique-basic.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -116,51 +116,50 @@\n // lldbr-check:(f64) *f64_ref = 3.5\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n fn main() {\n-    let bool_box: Box<bool> = box true;\n+    let bool_box: Box<bool> = Box::new(true);\n     let bool_ref: &bool = &*bool_box;\n \n-    let int_box: Box<isize> = box -1;\n+    let int_box: Box<isize> = Box::new(-1);\n     let int_ref: &isize = &*int_box;\n \n-    let char_box: Box<char> = box 'a';\n+    let char_box: Box<char> = Box::new('a');\n     let char_ref: &char = &*char_box;\n \n-    let i8_box: Box<i8> = box 68;\n+    let i8_box: Box<i8> = Box::new(68);\n     let i8_ref: &i8 = &*i8_box;\n \n-    let i16_box: Box<i16> = box -16;\n+    let i16_box: Box<i16> = Box::new(-16);\n     let i16_ref: &i16 = &*i16_box;\n \n-    let i32_box: Box<i32> = box -32;\n+    let i32_box: Box<i32> = Box::new(-32);\n     let i32_ref: &i32 = &*i32_box;\n \n-    let i64_box: Box<i64> = box -64;\n+    let i64_box: Box<i64> = Box::new(-64);\n     let i64_ref: &i64 = &*i64_box;\n \n-    let uint_box: Box<usize> = box 1;\n+    let uint_box: Box<usize> = Box::new(1);\n     let uint_ref: &usize = &*uint_box;\n \n-    let u8_box: Box<u8> = box 100;\n+    let u8_box: Box<u8> = Box::new(100);\n     let u8_ref: &u8 = &*u8_box;\n \n-    let u16_box: Box<u16> = box 16;\n+    let u16_box: Box<u16> = Box::new(16);\n     let u16_ref: &u16 = &*u16_box;\n \n-    let u32_box: Box<u32> = box 32;\n+    let u32_box: Box<u32> = Box::new(32);\n     let u32_ref: &u32 = &*u32_box;\n \n-    let u64_box: Box<u64> = box 64;\n+    let u64_box: Box<u64> = Box::new(64);\n     let u64_ref: &u64 = &*u64_box;\n \n-    let f32_box: Box<f32> = box 2.5;\n+    let f32_box: Box<f32> = Box::new(2.5);\n     let f32_ref: &f32 = &*f32_box;\n \n-    let f64_box: Box<f64> = box 3.5;\n+    let f64_box: Box<f64> = Box::new(3.5);\n     let f64_ref: &f64 = &*f64_box;\n \n     zzz(); // #break"}, {"sha": "3713c8c135d2e6721ac2019306a6a4c730a80567", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -24,13 +24,12 @@\n // lldbr-check:((i32, f64)) *b = { 0 = 2 1 = 3.5 }\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n fn main() {\n-    let a = box 1;\n-    let b = box (2, 3.5f64);\n+    let a = Box::new(1);\n+    let b = Box::new((2, 3.5f64));\n \n     zzz(); // #break\n }"}, {"sha": "64bc124756d6dd23e54bc67a417fc3f6168f98db", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -28,7 +28,6 @@\n // lldbr-check:(boxed_struct::StructWithDestructor) *boxed_with_dtor = { x = 77 y = 777 z = 7777 w = 77777 }\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -52,9 +51,19 @@ impl Drop for StructWithDestructor {\n \n fn main() {\n \n-    let boxed_with_padding: Box<_> = box StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 };\n-\n-    let boxed_with_dtor: Box<_> = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n+    let boxed_with_padding: Box<_> = Box::new(StructWithSomePadding {\n+        x: 99,\n+        y: 999,\n+        z: 9999,\n+        w: 99999,\n+    });\n+\n+    let boxed_with_dtor: Box<_> = Box::new(StructWithDestructor {\n+        x: 77,\n+        y: 777,\n+        z: 7777,\n+        w: 77777,\n+    });\n     zzz(); // #break\n }\n "}, {"sha": "91d7ddc5416d8dcba6420a36afdfb0067c7bdd0e", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -39,7 +39,6 @@\n // lldbr-check:(i32) *y = 110\n // lldb-command:continue\n \n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n "}, {"sha": "9cd3874a5dfb74aba31c0628d3720a44ddfcade0", "filename": "src/test/debuginfo/destructured-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -358,7 +358,6 @@\n \n #![allow(unused_variables)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -480,7 +479,7 @@ fn main() {\n     managed_box(&(34, 35));\n     borrowed_pointer(&(36, 37));\n     contained_borrowed_pointer((&38, 39));\n-    unique_pointer(box (40, 41, 42));\n+    unique_pointer(Box::new((40, 41, 42)));\n     ref_binding((43, 44, 45));\n     ref_binding_in_tuple((46, (47, 48)));\n     ref_binding_in_struct(Struct { a: 49, b: 50 });"}, {"sha": "15cb88ef25d5b437dfca0a9ed1f92be30e9c5834", "filename": "src/test/debuginfo/destructured-for-loop-variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -173,7 +173,6 @@\n \n #![allow(unused_variables)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -214,7 +213,7 @@ fn main() {\n             y: -300001.5,\n             z: true\n          },\n-         box 854237.5);\n+         Box::new(854237.5));\n \n     for &(v1,\n           &Struct { x: x1, y: ref y1, z: z1 },"}, {"sha": "3a2a889777ea0f87ce1935583d18c3069b73b9c8", "filename": "src/test/debuginfo/destructured-local.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -285,7 +285,6 @@\n \n #![allow(unused_variables)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -345,7 +344,7 @@ fn main() {\n     let (&cc, _) = (&38, 39);\n \n     // unique pointer\n-    let box dd = box (40, 41, 42);\n+    let box dd = Box::new((40, 41, 42));\n \n     // ref binding\n     let ref ee = (43, 44, 45);"}, {"sha": "97609ef5d9341e249869301215f3cea39613c32c", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -123,7 +123,6 @@\n // lldbr-check:(f32) arg2 = -10.5\n // lldb-command:continue\n \n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -155,7 +154,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, 2_u16);\n     let _ = stack.self_by_val(-3, -4_i16);\n \n-    let owned: Box<_> = box Struct { x: 1234.5f64 };\n+    let owned: Box<_> = Box::new(Struct { x: 1234.5f64 });\n     let _ = owned.self_by_ref(-5, -6_i32);\n     let _ = owned.self_by_val(-7, -8_i64);\n     let _ = owned.self_owned(-9, -10.5_f32);"}, {"sha": "aaa9bd9d6f97ad3084d35fff8b923451ad903c76", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -107,7 +107,6 @@\n // lldb-check:[...]$14 = -10\n // lldb-command:continue\n \n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -140,7 +139,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned: Box<_> = box Enum::Variant1{ x: 1799, y: 1799 };\n+    let owned: Box<_> = Box::new(Enum::Variant1{ x: 1799, y: 1799 });\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "bf047449164b000fa850599447dd8c3fe0a22f89", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -123,8 +123,6 @@\n // lldbr-check:(isize) arg2 = -10\n // lldb-command:continue\n \n-\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -156,7 +154,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned: Box<_> = box Struct { x: 1234.5f64 };\n+    let owned: Box<_> = Box::new(Struct { x: 1234.5f64 });\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "deed4f9cc0ad989920044fc134099ebc9ae89658", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -121,8 +121,6 @@\n // lldbr-check:(isize) arg2 = -10\n // lldb-command:continue\n \n-\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -154,7 +152,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned: Box<_> = box Struct { x: 200 };\n+    let owned: Box<_> = Box::new(Struct { x: 200 });\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "7ebebfa72b92bbbd20d3ab25b5b12ea9bf3ef1cd", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -121,8 +121,6 @@\n // lldbr-check:(isize) arg2 = -10\n // lldb-command:continue\n \n-\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -160,7 +158,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned: Box<_> = box Struct { x: 200 };\n+    let owned: Box<_> = Box::new(Struct { x: 200 });\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "a5a87b2ad6f26b738dbb87fbd54f2269a4fce05a", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -121,8 +121,6 @@\n // lldbr-check:(isize) arg2 = -10\n // lldb-command:continue\n \n-\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -152,7 +150,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned: Box<_> = box TupleStruct(200, -200.5);\n+    let owned: Box<_> = Box::new(TupleStruct(200, -200.5));\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "eb14af8c588ded436c0dbe349c00bf6cbb3b8de7", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -52,20 +52,20 @@\n // gdb-command:print long_cycle4.value\n // gdb-check:$18 = 29.5\n \n-// gdbr-command:print long_cycle_w_anonymous_types.value\n+// gdbr-command:print long_cycle_w_anon_types.value\n // gdb-check:$19 = 30\n \n-// gdbr-command:print long_cycle_w_anonymous_types.next.val.value\n+// gdbr-command:print long_cycle_w_anon_types.next.val.value\n // gdb-check:$20 = 31\n \n // gdb-command:continue\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n use self::Opt::{Empty, Val};\n+use std::boxed::Box as B;\n \n enum Opt<T> {\n     Empty,\n@@ -120,75 +120,75 @@ struct LongCycleWithAnonymousTypes {\n fn main() {\n     let stack_unique: UniqueNode<u16> = UniqueNode {\n         next: Val {\n-            val: box UniqueNode {\n+            val: Box::new(UniqueNode {\n                 next: Empty,\n                 value: 1,\n-            }\n+            })\n         },\n         value: 0,\n     };\n \n-    let unique_unique: Box<UniqueNode<u32>> = box UniqueNode {\n+    let unique_unique: Box<UniqueNode<u32>> = Box::new(UniqueNode {\n         next: Val {\n-            val: box UniqueNode {\n+            val: Box::new(UniqueNode {\n                 next: Empty,\n                 value: 3,\n-            }\n+            })\n         },\n         value: 2,\n-    };\n+    });\n \n     let vec_unique: [UniqueNode<f32>; 1] = [UniqueNode {\n         next: Val {\n-            val: box UniqueNode {\n+            val: Box::new(UniqueNode {\n                 next: Empty,\n                 value: 7.5,\n-            }\n+            })\n         },\n         value: 6.5,\n     }];\n \n     let borrowed_unique: &UniqueNode<f64> = &UniqueNode {\n         next: Val {\n-            val: box UniqueNode {\n+            val: Box::new(UniqueNode {\n                 next: Empty,\n                 value: 9.5,\n-            }\n+            })\n         },\n         value: 8.5,\n     };\n \n     // LONG CYCLE\n     let long_cycle1: LongCycle1<u16> = LongCycle1 {\n-        next: box LongCycle2 {\n-            next: box LongCycle3 {\n-                next: box LongCycle4 {\n+        next: Box::new(LongCycle2 {\n+            next: Box::new(LongCycle3 {\n+                next: Box::new(LongCycle4 {\n                     next: None,\n                     value: 23,\n-                },\n+                }),\n                 value: 22,\n-            },\n+            }),\n             value: 21\n-        },\n+        }),\n         value: 20\n     };\n \n     let long_cycle2: LongCycle2<u32> = LongCycle2 {\n-        next: box LongCycle3 {\n-            next: box LongCycle4 {\n+        next: Box::new(LongCycle3 {\n+            next: Box::new(LongCycle4 {\n                 next: None,\n                 value: 26,\n-            },\n+            }),\n             value: 25,\n-        },\n+        }),\n         value: 24\n     };\n \n     let long_cycle3: LongCycle3<u64> = LongCycle3 {\n-        next: box LongCycle4 {\n+        next: Box::new(LongCycle4 {\n             next: None,\n             value: 28,\n-        },\n+        }),\n         value: 27,\n     };\n \n@@ -199,15 +199,15 @@ fn main() {\n \n     // It's important that LongCycleWithAnonymousTypes is encountered only at the end of the\n     // `box` chain.\n-    let long_cycle_w_anonymous_types = box box box box box LongCycleWithAnonymousTypes {\n+    let long_cycle_w_anon_types = B::new(B::new(B::new(B::new(B::new(LongCycleWithAnonymousTypes {\n         next: Val {\n-            val: box box box box box LongCycleWithAnonymousTypes {\n+            val: Box::new(Box::new(Box::new(Box::new(Box::new(LongCycleWithAnonymousTypes {\n                 next: Empty,\n                 value: 31,\n-            }\n+            })))))\n         },\n         value: 30\n-    };\n+    })))));\n \n     zzz(); // #break\n }"}, {"sha": "b8b5add0996aad7c3aee0c83b2ad931dc70fbbfa", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -121,7 +121,6 @@\n // lldbr-check:(isize) arg2 = -10\n // lldb-command:continue\n \n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -154,7 +153,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned: Box<_> = box Struct { x: 200 };\n+    let owned: Box<_> = Box::new(Struct { x: 200 });\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "efce449e312edb4b47920d0710ede5b2072a1a15", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -121,7 +121,6 @@\n // lldbr-check:(f32) arg2 = -10.5\n // lldb-command:continue\n \n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -155,7 +154,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, 2_u16);\n     let _ = stack.self_by_val(-3, -4_i16);\n \n-    let owned: Box<_> = box Struct { x: 879 };\n+    let owned: Box<_> = Box::new(Struct { x: 879 });\n     let _ = owned.self_by_ref(-5, -6_i32);\n     let _ = owned.self_by_val(-7, -8_i64);\n     let _ = owned.self_owned(-9, -10.5_f32);"}, {"sha": "e12daaf114e142c882d43cabce7cc46258c181b8", "filename": "src/test/debuginfo/trait-pointers.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -5,7 +5,6 @@\n // lldb-command:run\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -24,5 +23,5 @@ impl Trait for Struct {}\n fn main() {\n     let stack_struct = Struct { a:0, b: 1.0 };\n     let reference: &Trait = &stack_struct as &Trait;\n-    let unique: Box<Trait> = box Struct { a:2, b: 3.0 } as Box<Trait>;\n+    let unique: Box<Trait> = Box::new(Struct { a:2, b: 3.0 }) as Box<Trait>;\n }"}, {"sha": "2c10360fc924e94e3fe7cd8c6d48c0077d1eac1d", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -262,7 +262,6 @@\n // cdb-check:struct ForeignType2 * foreign2 = [...]\n // cdb-check:struct ForeignType1 * foreign1 = [...]\n \n-#![feature(box_syntax)]\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n@@ -373,8 +372,8 @@ fn main() {\n     let tuple2 = ((Struct1, mod1::mod2::Struct3), mod1::Variant1, 'x');\n \n     // Box\n-    let box1 = (box 1f32, 0i32);\n-    let box2 = (box mod1::mod2::Variant2(1f32), 0i32);\n+    let box1 = (Box::new(1f32), 0i32);\n+    let box2 = (Box::new(mod1::mod2::Variant2(1f32)), 0i32);\n \n     // References\n     let ref1 = (&Struct1, 0i32);\n@@ -404,14 +403,14 @@ fn main() {\n     let slice2 = &*vec2;\n \n     // Trait Objects\n-    let box_trait = (box 0_isize) as Box<dyn Trait1>;\n+    let box_trait = Box::new(0_isize) as Box<dyn Trait1>;\n     let ref_trait = &0_isize as &dyn Trait1;\n     let mut mut_int1 = 0_isize;\n     let mut_ref_trait = (&mut mut_int1) as &mut dyn Trait1;\n-    let no_principal_trait = (box 0_isize) as Box<(dyn Send + Sync)>;\n+    let no_principal_trait = Box::new(0_isize) as Box<(dyn Send + Sync)>;\n     let has_associated_type_trait = &0_isize as &(dyn Trait3<u32, AssocType = isize> + Send);\n \n-    let generic_box_trait = (box 0_isize) as Box<dyn Trait2<i32, mod1::Struct2>>;\n+    let generic_box_trait = Box::new(0_isize) as Box<dyn Trait2<i32, mod1::Struct2>>;\n     let generic_ref_trait = (&0_isize) as &dyn Trait2<Struct1, Struct1>;\n \n     let mut generic_mut_ref_trait_impl = 0_isize;"}, {"sha": "d7dfaeefe2b7775114db63aea3fb32dc085628fa", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -32,7 +32,6 @@\n // lldbr-check:(unique_enum::Univariant) *univariant = { TheOnlyCase = { = 123234 } }\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -59,15 +58,15 @@ fn main() {\n     // 0b01111100011111000111110001111100 = 2088533116\n     // 0b0111110001111100 = 31868\n     // 0b01111100 = 124\n-    let the_a: Box<_> = box ABC::TheA { x: 0, y: 8970181431921507452 };\n+    let the_a: Box<_> = Box::new(ABC::TheA { x: 0, y: 8970181431921507452 });\n \n     // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n     // 0b00010001000100010001000100010001 = 286331153\n     // 0b0001000100010001 = 4369\n     // 0b00010001 = 17\n-    let the_b: Box<_> = box ABC::TheB (0, 286331153, 286331153);\n+    let the_b: Box<_> = Box::new(ABC::TheB (0, 286331153, 286331153));\n \n-    let univariant: Box<_> = box Univariant::TheOnlyCase(123234);\n+    let univariant: Box<_> = Box::new(Univariant::TheOnlyCase(123234));\n \n     zzz(); // #break\n }"}, {"sha": "d811915c38767ac202705fe3428f3173d14d202e", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -133,7 +133,6 @@\n // cdb-check:closure_local    : 8 [Type: [...]]\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -154,7 +153,7 @@ fn main() {\n     };\n \n     let struct_ref = &a_struct;\n-    let owned: Box<_> = box 6;\n+    let owned: Box<_> = Box::new(6);\n \n     let mut closure = || {\n         let closure_local = 8;"}, {"sha": "39930e04e4c5f5d88f94dcd572b9a571aa6438b6", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -34,7 +34,6 @@\n // lldbr-check:(isize) *owned = 5\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -53,7 +52,7 @@ fn main() {\n         c: 4\n     };\n \n-    let owned: Box<_> = box 5;\n+    let owned: Box<_> = Box::new(5);\n \n     let closure = move || {\n         zzz(); // #break"}, {"sha": "d68409a9d5205fa8a0371055211de7fbdec91772", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -115,7 +115,6 @@\n // cdb-command: dx owned\n // cdb-check:owned            : 0x[...] : 6 [Type: [...] *]\n \n-#![feature(box_syntax)]\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n@@ -137,7 +136,7 @@ fn main() {\n     };\n \n     let struct_ref = &a_struct;\n-    let owned: Box<_> = box 6;\n+    let owned: Box<_> = Box::new(6);\n \n     {\n         let mut first_closure = || {"}, {"sha": "8051c58898e499241a41ead3775deea95e4b85e4", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,4 +1,4 @@\n-#![feature(box_syntax, plugin, rustc_private)]\n+#![feature(plugin, rustc_private)]\n #![crate_type = \"dylib\"]\n \n extern crate rustc_ast_pretty;\n@@ -21,7 +21,7 @@ use rustc_span::source_map;\n #[no_mangle]\n fn __rustc_plugin_registrar(reg: &mut Registry) {\n     reg.lint_store.register_lints(&[&MISSING_ALLOWED_ATTR]);\n-    reg.lint_store.register_late_pass(|| box MissingAllowedAttrPass);\n+    reg.lint_store.register_late_pass(|| Box::new(MissingAllowedAttrPass));\n }\n \n declare_lint! {"}, {"sha": "fc57c14ec32b15e5be62f08720917d25cb502e03", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,6 @@\n // force-host\n \n #![feature(rustc_private)]\n-#![feature(box_syntax)]\n \n extern crate rustc_driver;\n extern crate rustc_hir;\n@@ -73,7 +72,7 @@ fn __rustc_plugin_registrar(reg: &mut Registry) {\n         &CRATE_NOT_GREY,\n         &CRATE_NOT_GREEN,\n     ]);\n-    reg.lint_store.register_late_pass(|| box PassOkay);\n-    reg.lint_store.register_late_pass(|| box PassRedBlue);\n-    reg.lint_store.register_late_pass(|| box PassGreyGreen);\n+    reg.lint_store.register_late_pass(|| Box::new(PassOkay));\n+    reg.lint_store.register_late_pass(|| Box::new(PassRedBlue));\n+    reg.lint_store.register_late_pass(|| Box::new(PassGreyGreen));\n }"}, {"sha": "78c6c7ed887a903a49215fa90101086854e4879d", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,6 @@\n // force-host\n \n #![feature(rustc_private)]\n-#![feature(box_syntax)]\n \n extern crate rustc_driver;\n extern crate rustc_hir;\n@@ -41,5 +40,5 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n #[no_mangle]\n fn __rustc_plugin_registrar(reg: &mut Registry) {\n     reg.lint_store.register_lints(&[&CRATE_NOT_OKAY]);\n-    reg.lint_store.register_late_pass(|| box Pass);\n+    reg.lint_store.register_late_pass(|| Box::new(Pass));\n }"}, {"sha": "253855fd2edd48edc3b14d7f5021f59f1fd3de6a", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,6 @@\n // force-host\n \n-#![feature(box_syntax, rustc_private)]\n+#![feature(rustc_private)]\n \n // Load rustc as a plugin to get macros.\n extern crate rustc_driver;\n@@ -36,7 +36,7 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n #[no_mangle]\n fn __rustc_plugin_registrar(reg: &mut Registry) {\n     reg.lint_store.register_lints(&[&TEST_LINT, &PLEASE_LINT]);\n-    reg.lint_store.register_late_pass(|| box Pass);\n+    reg.lint_store.register_late_pass(|| Box::new(Pass));\n     reg.lint_store.register_group(\n         true,\n         \"lint_me\","}, {"sha": "42368ec36a028d03103b816740fa031e990740bb", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,6 @@\n // force-host\n \n-#![feature(box_syntax, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate rustc_ast;\n \n@@ -31,5 +31,5 @@ impl EarlyLintPass for Pass {\n #[no_mangle]\n fn __rustc_plugin_registrar(reg: &mut Registry) {\n     reg.lint_store.register_lints(&[&TEST_LINT]);\n-    reg.lint_store.register_early_pass(|| box Pass);\n+    reg.lint_store.register_early_pass(|| Box::new(Pass));\n }"}, {"sha": "81feddf571323341dd4c9d224f7d20a865eaa7b4", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,4 +1,4 @@\n-#![feature(box_syntax, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate rustc_ast;\n \n@@ -46,7 +46,7 @@ impl EarlyLintPass for Pass {\n #[no_mangle]\n fn __rustc_plugin_registrar(reg: &mut Registry) {\n     reg.lint_store.register_lints(&[&TEST_RUSTC_TOOL_LINT, &TEST_LINT, &TEST_GROUP]);\n-    reg.lint_store.register_early_pass(|| box Pass);\n+    reg.lint_store.register_early_pass(|| Box::new(Pass));\n     reg.lint_store.register_group(\n         true,\n         \"clippy::group\","}, {"sha": "e83dfe80463d882b715b525ea7f8f0ec97b15802", "filename": "src/test/ui-fulldeps/auxiliary/outlive-expansion-phase.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Foutlive-expansion-phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Foutlive-expansion-phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Foutlive-expansion-phase.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,6 @@\n // force-host\n \n-#![feature(box_syntax, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate rustc_middle;\n extern crate rustc_driver;\n@@ -20,5 +20,5 @@ impl Drop for Foo {\n #[no_mangle]\n fn __rustc_plugin_registrar(_: &mut Registry) {\n     thread_local!(static FOO: RefCell<Option<Box<Any+Send>>> = RefCell::new(None));\n-    FOO.with(|s| *s.borrow_mut() = Some(box Foo { foo: 10 } as Box<Any+Send>));\n+    FOO.with(|s| *s.borrow_mut() = Some(Box::new(Foo { foo: 10 }) as Box<Any+Send>));\n }"}, {"sha": "fab2031d952356a5b136cc8039b25e823c4c076a", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![allow(unused_imports)]\n-#![feature(box_syntax)]\n #![feature(rustc_private)]\n \n extern crate rustc_macros;"}, {"sha": "eb503dcf3b63bb2083a5bbd1f7f80a640f8c12f6", "filename": "src/test/ui/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falignment-gep-tup-like-1.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,8 +3,6 @@\n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n \n-#![feature(box_syntax)]\n-\n struct pair<A,B> {\n     a: A, b: B\n }\n@@ -25,10 +23,10 @@ impl<A:Clone> Invokable<A> for Invoker<A> {\n }\n \n fn f<A:Clone + 'static>(a: A, b: u16) -> Box<dyn Invokable<A>+'static> {\n-    box Invoker {\n+    Box::new(Invoker {\n         a: a,\n         b: b,\n-    } as Box<dyn Invokable<A>+'static>\n+    }) as Box<dyn Invokable<A>+'static>\n }\n \n pub fn main() {"}, {"sha": "c58ddbc4239460029f7128105d107bf31274cec0", "filename": "src/test/ui/array-slice-vec/vec-dst.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-dst.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,11 +1,9 @@\n // run-pass\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    // Tests for indexing into box/& [T; n]\n+    // Tests for indexing into Box<[T; n]>/& [T; n]\n     let x: [isize; 3] = [1, 2, 3];\n-    let mut x: Box<[isize; 3]> = box x;\n+    let mut x: Box<[isize; 3]> = x.into();\n     assert_eq!(x[0], 1);\n     assert_eq!(x[1], 2);\n     assert_eq!(x[2], 3);"}, {"sha": "e2055f551acc4b3d660b4078ce31dd4544b7482c", "filename": "src/test/ui/array-slice-vec/vector-no-ann-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-no-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-no-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-no-ann-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,6 +2,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n-pub fn main() { let _quux: Box<Vec<usize>> = box Vec::new(); }\n+pub fn main() {\n+    let _quux: Box<Vec<usize>> = Box::new(Vec::new());\n+}"}, {"sha": "05498ba63e9948305f8a699be193bcc41131e43b", "filename": "src/test/ui/associated-types/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn pairwise_sub(mut t: Box<dyn DoubleEndedIterator<Item=isize>>) -> isize {\n     let mut result = 0;"}, {"sha": "0fadc5c98277e92574c946aa17a2a504d9eea8cc", "filename": "src/test/ui/autoderef-full-lval.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,23 +1,23 @@\n-#![feature(box_syntax)]\n-\n struct Clam {\n     x: Box<isize>,\n     y: Box<isize>,\n }\n \n+\n+\n struct Fish {\n     a: Box<isize>,\n }\n \n fn main() {\n-    let a: Clam = Clam{x: box 1, y: box 2};\n-    let b: Clam = Clam{x: box 10, y: box 20};\n+    let a: Clam = Clam{ x: Box::new(1), y: Box::new(2) };\n+    let b: Clam = Clam{ x: Box::new(10), y: Box::new(20) };\n     let z: isize = a.x + b.y;\n     //~^ ERROR cannot add `Box<isize>` to `Box<isize>`\n     println!(\"{}\", z);\n     assert_eq!(z, 21);\n-    let forty: Fish = Fish{a: box 40};\n-    let two: Fish = Fish{a: box 2};\n+    let forty: Fish = Fish{ a: Box::new(40) };\n+    let two: Fish = Fish{ a: Box::new(2) };\n     let answer: isize = forty.a + two.a;\n     //~^ ERROR cannot add `Box<isize>` to `Box<isize>`\n     println!(\"{}\", answer);"}, {"sha": "af747cc76e9a062700280cb4a75107a767277966", "filename": "src/test/ui/autoref-autoderef/autoderef-method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(non_camel_case_types)]\n-#![feature(box_syntax)]\n \n trait double {\n     fn double(self: Box<Self>) -> usize;\n@@ -11,6 +10,6 @@ impl double for usize {\n }\n \n pub fn main() {\n-    let x: Box<_> = box (box 3usize as Box<dyn double>);\n+    let x: Box<_> = Box::new(Box::new(3usize) as Box<dyn double>);\n     assert_eq!(x.double(), 6);\n }"}, {"sha": "88a5140dc752bb8d3fc1cad5ec08d487aba206b3", "filename": "src/test/ui/autoref-autoderef/autoderef-method-priority.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-priority.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(non_camel_case_types)]\n-#![feature(box_syntax)]\n \n trait double {\n     fn double(self) -> usize;\n@@ -15,6 +14,6 @@ impl double for Box<usize> {\n }\n \n pub fn main() {\n-    let x: Box<_> = box 3;\n+    let x: Box<_> = Box::new(3);\n     assert_eq!(x.double(), 6);\n }"}, {"sha": "3657e61d42534a99253362e9bfa559045e057dda", "filename": "src/test/ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-twice-but-not-thrice.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(non_camel_case_types)]\n-#![feature(box_syntax)]\n \n trait double {\n     fn double(self: Box<Self>) -> usize;\n@@ -11,6 +10,6 @@ impl double for Box<usize> {\n }\n \n pub fn main() {\n-    let x: Box<Box<Box<Box<Box<_>>>>> = box box box box box 3;\n+    let x: Box<Box<Box<Box<Box<_>>>>> = Box::new(Box::new(Box::new(Box::new(Box::new(3)))));\n     assert_eq!(x.double(), 6);\n }"}, {"sha": "ed86b31b8bbed626443bbc947368c3296ddb8a18", "filename": "src/test/ui/autoref-autoderef/autoderef-method-twice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method-twice.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(non_camel_case_types)]\n-#![feature(box_syntax)]\n \n trait double {\n     fn double(self: Box<Self>) -> usize;\n@@ -11,6 +10,6 @@ impl double for usize {\n }\n \n pub fn main() {\n-    let x: Box<Box<_>> = box box 3;\n+    let x: Box<Box<_>> = Box::new(Box::new(3));\n     assert_eq!(x.double(), 6);\n }"}, {"sha": "5b7965e9553fef2a74bf002d10576cf3c9438541", "filename": "src/test/ui/autoref-autoderef/autoderef-method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoderef-method.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(non_camel_case_types)]\n-#![feature(box_syntax)]\n \n trait double {\n     fn double(self: Box<Self>) -> usize;\n@@ -11,6 +10,6 @@ impl double for usize {\n }\n \n pub fn main() {\n-    let x: Box<_> = box 3;\n+    let x: Box<_> = Box::new(3);\n     assert_eq!(x.double(), 6);\n }"}, {"sha": "3bdc248ff0f7f1dea34472e624358c7931a95db7", "filename": "src/test/ui/autoref-autoderef/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoref-autoderef%2Fautoref-intermediate-types-issue-3585.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n trait Foo {\n     fn foo(&self) -> String;\n@@ -18,6 +17,6 @@ impl Foo for usize {\n }\n \n pub fn main() {\n-    let x: Box<_> = box 3;\n+    let x: Box<_> = Box::new(3);\n     assert_eq!(x.foo(), \"box 3\".to_string());\n }"}, {"sha": "c5f38d815593a50f5463a7f6e154ffb0171d4172", "filename": "src/test/ui/binding/expr-match-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fexpr-match-generic-unique1.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn test_generic<T: Clone, F>(expected: Box<T>, eq: F) where F: FnOnce(Box<T>, Box<T>) -> bool {\n     let actual: Box<T> = match true {\n@@ -13,7 +12,7 @@ fn test_box() {\n     fn compare_box(b1: Box<bool>, b2: Box<bool>) -> bool {\n         return *b1 == *b2;\n     }\n-    test_generic::<bool, _>(box true, compare_box);\n+    test_generic::<bool, _>(Box::new(true), compare_box);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "8977ca68efa67aaff4c3a358da986e0f07016aae", "filename": "src/test/ui/binding/expr-match-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fexpr-match-generic-unique2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {\n     let actual: T = match true {\n@@ -11,7 +10,7 @@ fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {\n \n fn test_vec() {\n     fn compare_box(v1: Box<isize>, v2: Box<isize>) -> bool { return v1 == v2; }\n-    test_generic::<Box<isize>, _>(box 1, compare_box);\n+    test_generic::<Box<isize>, _>(Box::new(1), compare_box);\n }\n \n pub fn main() { test_vec(); }"}, {"sha": "eec9e1f8b4ae1c574fe30a39c5a8c3662af92484", "filename": "src/test/ui/binding/expr-match-unique.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fexpr-match-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,9 +1,8 @@\n // run-pass\n-#![feature(box_syntax)]\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res: Box<_> = match true { true => { box 100 }, _ => panic!() };\n+    let res: Box<_> = match true { true => { Box::new(100) }, _ => panic!() };\n     assert_eq!(*res, 100);\n }\n "}, {"sha": "eb94ee48f9249ccafd531762b3a91b4bb3018044", "filename": "src/test/ui/binding/func-arg-incomplete-pattern.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Ffunc-arg-incomplete-pattern.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,8 +3,6 @@\n // Test that we do not leak when the arg pattern must drop part of the\n // argument (in this case, the `y` field).\n \n-#![feature(box_syntax)]\n-\n struct Foo {\n     x: Box<usize>,\n     y: Box<usize>,\n@@ -16,9 +14,9 @@ fn foo(Foo {x, ..}: Foo) -> *const usize {\n }\n \n pub fn main() {\n-    let obj: Box<_> = box 1;\n+    let obj: Box<_> = Box::new(1);\n     let objptr: *const usize = &*obj;\n-    let f = Foo {x: obj, y: box 2};\n+    let f = Foo { x: obj, y: Box::new(2) };\n     let xptr = foo(f);\n     assert_eq!(objptr, xptr);\n }"}, {"sha": "2d75c12140bf3befa326985ea4536a8fe2206a35", "filename": "src/test/ui/binding/func-arg-ref-pattern.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Ffunc-arg-ref-pattern.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -5,7 +5,6 @@\n // pattern.\n \n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n fn getaddr(box ref x: Box<usize>) -> *const usize {\n     let addr: *const usize = &*x;\n@@ -17,11 +16,11 @@ fn checkval(box ref x: Box<usize>) -> usize {\n }\n \n pub fn main() {\n-    let obj: Box<_> = box 1;\n+    let obj: Box<_> = Box::new(1);\n     let objptr: *const usize = &*obj;\n     let xptr = getaddr(obj);\n     assert_eq!(objptr, xptr);\n \n-    let obj = box 22;\n+    let obj = Box::new(22);\n     assert_eq!(checkval(obj), 22);\n }"}, {"sha": "b85f4a96a6d50d8c774fea6d8655eb51cfc20df4", "filename": "src/test/ui/binding/let-assignability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Flet-assignability.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,7 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn f() {\n-    let a: Box<_> = box 1;\n+    let a: Box<_> = Box::new(1);\n     let b: &isize = &*a;\n     println!(\"{}\", b);\n }"}, {"sha": "74ffe2ecdb3a5eea1ac94afaac0a0e4a13eaa1d4", "filename": "src/test/ui/binding/match-implicit-copy-unique.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fmatch-implicit-copy-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,16 +1,15 @@\n // run-pass\n #![allow(non_shorthand_field_patterns)]\n-#![feature(box_syntax)]\n \n struct Pair { a: Box<isize>, b: Box<isize> }\n \n pub fn main() {\n-    let mut x: Box<_> = box Pair {a: box 10, b: box 20};\n+    let mut x: Box<_> = Box::new(Pair { a: Box::new(10), b: Box::new(20) });\n     let x_internal = &mut *x;\n     match *x_internal {\n       Pair {a: ref mut a, b: ref mut _b} => {\n         assert_eq!(**a, 10);\n-        *a = box 30;\n+        *a = Box::new(30);\n         assert_eq!(**a, 30);\n       }\n     }"}, {"sha": "507478983f68163ab662754b1a4fda0d12fa410d", "filename": "src/test/ui/binding/match-unique-bind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fmatch-unique-bind.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,9 +1,8 @@\n // run-pass\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n pub fn main() {\n-    match box 100 {\n+    match Box::new(100) {\n       box x => {\n         println!(\"{}\", x);\n         assert_eq!(x, 100);"}, {"sha": "0d750da79e71c042fbb6451d1b399c8d1e9e714d", "filename": "src/test/ui/binding/match-value-binding-in-guard-3291.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fmatch-value-binding-in-guard-3291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fbinding%2Fmatch-value-binding-in-guard-3291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fmatch-value-binding-in-guard-3291.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n fn foo(x: Option<Box<isize>>, b: bool) -> isize {\n     match x {\n       None => { 1 }\n@@ -12,8 +10,8 @@ fn foo(x: Option<Box<isize>>, b: bool) -> isize {\n }\n \n pub fn main() {\n-    foo(Some(box 22), true);\n-    foo(Some(box 22), false);\n+    foo(Some(Box::new(22)), true);\n+    foo(Some(Box::new(22)), false);\n     foo(None, true);\n     foo(None, false);\n }"}, {"sha": "c628fa49ede4370f64b16257473557180225ada8", "filename": "src/test/ui/borrowck/borrow-tuple-fields.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,13 @@\n-#![feature(box_syntax)]\n+struct Foo(Box<isize>, isize);\n+\n+struct Bar(isize, isize);\n \n \n \n-struct Foo(Box<isize>, isize);\n \n-struct Bar(isize, isize);\n \n fn main() {\n-    let x: (Box<_>, _) = (box 1, 2);\n+    let x: (Box<_>, _) = (Box::new(1), 2);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n \n@@ -23,7 +23,7 @@ fn main() {\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n     a.use_ref();\n \n-    let x = Foo(box 1, 2);\n+    let x = Foo(Box::new(1), 2);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n     r.use_ref();"}, {"sha": "b0bb9a0351b4900722ef88a6b881ca66d3090431", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-free.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n // Test that we detect nested calls that could free pointers evaluated\n // for earlier arguments.\n \n-#![feature(box_syntax)]\n+\n \n fn rewrite(v: &mut Box<usize>) -> usize {\n-    *v = box 22;\n+    *v = Box::new(22);\n     **v\n }\n \n@@ -13,7 +13,7 @@ fn add(v: &usize, w: usize) -> usize {\n }\n \n fn implicit() {\n-    let mut a: Box<_> = box 1;\n+    let mut a: Box<_> = Box::new(1);\n \n     // Note the danger here:\n     //\n@@ -26,7 +26,7 @@ fn implicit() {\n }\n \n fn explicit() {\n-    let mut a: Box<_> = box 1;\n+    let mut a: Box<_> = Box::new(1);\n     add(\n         &*a,\n         rewrite(&mut a)); //~ ERROR cannot borrow"}, {"sha": "b2afb6391c1ad53655859f0a710142c0c7289ba0", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-move.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n // Test that we detect nested calls that could free pointers evaluated\n // for earlier arguments.\n \n-#![feature(box_syntax)]\n+\n \n fn rewrite(v: &mut Box<usize>) -> usize {\n-    *v = box 22;\n+    *v = Box::new(22);\n     **v\n }\n \n@@ -13,7 +13,7 @@ fn add(v: &usize, w: Box<usize>) -> usize {\n }\n \n fn implicit() {\n-    let mut a: Box<_> = box 1;\n+    let mut a: Box<_> = Box::new(1);\n \n     // Note the danger here:\n     //\n@@ -26,7 +26,7 @@ fn implicit() {\n }\n \n fn explicit() {\n-    let mut a: Box<_> = box 1;\n+    let mut a: Box<_> = Box::new(1);\n     add(\n         &*a,\n         a); //~ ERROR cannot move"}, {"sha": "24efadc3055117f368fa020dc760ca7416d052e0", "filename": "src/test/ui/borrowck/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn borrow<F>(x: &isize, f: F) where F: FnOnce(&isize) {\n     f(x)\n@@ -14,5 +13,5 @@ fn test1(x: &Box<isize>) {\n }\n \n pub fn main() {\n-    test1(&box 22);\n+    test1(&Box::new(22));\n }"}, {"sha": "6b5544a8a396ba5d9aca5ef46313d04e3b0e5c12", "filename": "src/test/ui/borrowck/borrowck-borrow-immut-deref-of-box-as-mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,14 +1,14 @@\n-#![feature(box_syntax)]\n-\n struct A;\n \n impl A {\n     fn foo(&mut self) {\n     }\n }\n \n+\n+\n pub fn main() {\n-    let a: Box<_> = box A;\n+    let a: Box<_> = Box::new(A);\n     a.foo();\n     //~^ ERROR cannot borrow `*a` as mutable, as `a` is not declared as mutable [E0596]\n }"}, {"sha": "76dc01202f6c9266f8b3acd9085fc0e80d7c1410", "filename": "src/test/ui/borrowck/borrowck-borrow-immut-deref-of-box-as-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow `*a` as mutable, as `a` is not declared as mutable\n   --> $DIR/borrowck-borrow-immut-deref-of-box-as-mut.rs:12:5\n    |\n-LL |     let a: Box<_> = box A;\n+LL |     let a: Box<_> = Box::new(A);\n    |         - help: consider changing this to be mutable: `mut a`\n LL |     a.foo();\n    |     ^ cannot borrow as mutable"}, {"sha": "1d05845fc6b20d626b5dee1dc515d103cfeffeea", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,15 +1,15 @@\n-//buggy.rs\n+use std::collections::HashMap;\n+\n+\n \n-#![feature(box_syntax)]\n \n-use std::collections::HashMap;\n \n fn main() {\n     let tmp: Box<_>;\n     let mut buggy_map: HashMap<usize, &usize> = HashMap::new();\n     buggy_map.insert(42, &*Box::new(1)); //~ ERROR temporary value dropped while borrowed\n \n     // but it is ok if we use a temporary\n-    tmp = box 2;\n+    tmp = Box::new(2);\n     buggy_map.insert(43, &*tmp);\n }"}, {"sha": "e880f876f91a94a74444433184a987b176ed7ce9", "filename": "src/test/ui/borrowck/borrowck-box-sensitivity.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-sensitivity.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,8 +3,6 @@\n \n // run-pass\n \n-#![feature(box_syntax)]\n-\n struct A {\n     x: Box<isize>,\n     y: isize,\n@@ -26,97 +24,97 @@ struct D {\n }\n \n fn copy_after_move() {\n-    let a: Box<_> = box A { x: box 0, y: 1 };\n+    let a: Box<_> = Box::new(A { x: Box::new(0), y: 1 });\n     let _x = a.x;\n     let _y = a.y;\n }\n \n fn move_after_move() {\n-    let a: Box<_> = box B { x: box 0, y: box 1 };\n+    let a: Box<_> = Box::new(B { x: Box::new(0), y: Box::new(1) });\n     let _x = a.x;\n     let _y = a.y;\n }\n \n fn borrow_after_move() {\n-    let a: Box<_> = box A { x: box 0, y: 1 };\n+    let a: Box<_> = Box::new(A { x: Box::new(0), y: 1 });\n     let _x = a.x;\n     let _y = &a.y;\n }\n \n fn move_after_borrow() {\n-    let a: Box<_> = box B { x: box 0, y: box 1 };\n+    let a: Box<_> = Box::new(B { x: Box::new(0), y: Box::new(1) });\n     let _x = &a.x;\n     let _y = a.y;\n     use_imm(_x);\n }\n fn copy_after_mut_borrow() {\n-    let mut a: Box<_> = box A { x: box 0, y: 1 };\n+    let mut a: Box<_> = Box::new(A { x: Box::new(0), y: 1 });\n     let _x = &mut a.x;\n     let _y = a.y;\n     use_mut(_x);\n }\n fn move_after_mut_borrow() {\n-    let mut a: Box<_> = box B { x: box 0, y: box 1 };\n+    let mut a: Box<_> = Box::new(B { x: Box::new(0), y: Box::new(1) });\n     let _x = &mut a.x;\n     let _y = a.y;\n     use_mut(_x);\n }\n fn borrow_after_mut_borrow() {\n-    let mut a: Box<_> = box A { x: box 0, y: 1 };\n+    let mut a: Box<_> = Box::new(A { x: Box::new(0), y: 1 });\n     let _x = &mut a.x;\n     let _y = &a.y;\n     use_mut(_x);\n }\n fn mut_borrow_after_borrow() {\n-    let mut a: Box<_> = box A { x: box 0, y: 1 };\n+    let mut a: Box<_> = Box::new(A { x: Box::new(0), y: 1 });\n     let _x = &a.x;\n     let _y = &mut a.y;\n     use_imm(_x);\n }\n fn copy_after_move_nested() {\n-    let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let a: Box<_> = Box::new(C { x: Box::new(A { x: Box::new(0), y: 1 }), y: 2 });\n     let _x = a.x.x;\n     let _y = a.y;\n }\n \n fn move_after_move_nested() {\n-    let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let a: Box<_> = Box::new(D { x: Box::new(A { x: Box::new(0), y: 1 }), y: Box::new(2) });\n     let _x = a.x.x;\n     let _y = a.y;\n }\n \n fn borrow_after_move_nested() {\n-    let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let a: Box<_> = Box::new(C { x: Box::new(A { x: Box::new(0), y: 1 }), y: 2 });\n     let _x = a.x.x;\n     let _y = &a.y;\n }\n \n fn move_after_borrow_nested() {\n-    let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let a: Box<_> = Box::new(D { x: Box::new(A { x: Box::new(0), y: 1 }), y: Box::new(2) });\n     let _x = &a.x.x;\n     let _y = a.y;\n     use_imm(_x);\n }\n fn copy_after_mut_borrow_nested() {\n-    let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let mut a: Box<_> = Box::new(C { x: Box::new(A { x: Box::new(0), y: 1 }), y: 2 });\n     let _x = &mut a.x.x;\n     let _y = a.y;\n     use_mut(_x);\n }\n fn move_after_mut_borrow_nested() {\n-    let mut a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let mut a: Box<_> = Box::new(D { x: Box::new(A { x: Box::new(0), y: 1 }), y: Box::new(2) });\n     let _x = &mut a.x.x;\n     let _y = a.y;\n     use_mut(_x);\n }\n fn borrow_after_mut_borrow_nested() {\n-    let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let mut a: Box<_> = Box::new(C { x: Box::new(A { x: Box::new(0), y: 1 }), y: 2 });\n     let _x = &mut a.x.x;\n     let _y = &a.y;\n     use_mut(_x);\n }\n fn mut_borrow_after_borrow_nested() {\n-    let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let mut a: Box<_> = Box::new(C { x: Box::new(A { x: Box::new(0), y: 1 }), y: 2 });\n     let _x = &a.x.x;\n     let _y = &mut a.y;\n     use_imm(_x);"}, {"sha": "a8225f2faf16613bd034167a8577ae94e97c55ee", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // Tests that two closures cannot simultaneously have mutable\n // and immutable access to the variable. Issue #6801.\n \n-#![feature(box_syntax)]\n-\n fn get(x: &isize) -> isize {\n     *x\n }\n@@ -11,6 +9,8 @@ fn set(x: &mut isize) {\n     *x = 4;\n }\n \n+\n+\n fn a() {\n     let mut x = 3;\n     let c1 = || x = 4;\n@@ -52,7 +52,7 @@ fn e() {\n }\n \n fn f() {\n-    let mut x: Box<_> = box 3;\n+    let mut x: Box<_> = Box::new(3);\n     let c1 = || get(&*x);\n     *x = 5;\n     //~^ ERROR cannot assign to `*x` because it is borrowed\n@@ -64,7 +64,7 @@ fn g() {\n         f: Box<isize>\n     }\n \n-    let mut x: Box<_> = box Foo { f: box 3 };\n+    let mut x: Box<_> = Box::new(Foo { f: Box::new(3) });\n     let c1 = || get(&*x.f);\n     *x.f = 5;\n     //~^ ERROR cannot assign to `*x.f` because it is borrowed\n@@ -76,7 +76,7 @@ fn h() {\n         f: Box<isize>\n     }\n \n-    let mut x: Box<_> = box Foo { f: box 3 };\n+    let mut x: Box<_> = Box::new(Foo { f: Box::new(3) });\n     let c1 = || get(&*x.f);\n     let c2 = || *x.f = 5;\n     //~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable"}, {"sha": "63a75cdff42de16773afffefc5495ffc6a50d609", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,7 +2,7 @@\n // access to the variable, whether that mutable access be used\n // for direct assignment or for taking mutable ref. Issue #6801.\n \n-#![feature(box_syntax)]\n+\n \n \n \n@@ -48,7 +48,7 @@ fn g() {\n         f: Box<isize>\n     }\n \n-    let mut x: Box<_> = box Foo { f: box 3 };\n+    let mut x: Box<_> = Box::new(Foo { f: Box::new(3) });\n     let c1 = to_fn_mut(|| set(&mut *x.f));\n     let c2 = to_fn_mut(|| set(&mut *x.f));\n     //~^ ERROR cannot borrow `x` as mutable more than once"}, {"sha": "cdff8f9e890c61680df148c817f7d9e0743acd30", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,7 +2,7 @@\n // access to the variable, whether that mutable access be used\n // for direct assignment or for taking mutable ref. Issue #6801.\n \n-#![feature(box_syntax)]\n+\n \n fn to_fn_mut<F: FnMut()>(f: F) -> F { f }\n \n@@ -44,7 +44,7 @@ fn g() {\n         f: Box<isize>\n     }\n \n-    let mut x: Box<_> = box Foo { f: box 3 };\n+    let mut x: Box<_> = Box::new(Foo { f: Box::new(3) });\n     let c1 = to_fn_mut(|| set(&mut *x.f));\n     let c2 = to_fn_mut(|| set(&mut *x.f));\n     //~^ ERROR cannot borrow `x` as mutable more than once"}, {"sha": "be5f1f873df52bfaa6926036a26e9f67e6e8418f", "filename": "src/test/ui/borrowck/borrowck-closures-use-after-free.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,8 +2,6 @@\n // cannot also be supplied a borrowed version of that\n // variable's contents. Issue #11192.\n \n-#![feature(box_syntax)]\n-\n struct Foo {\n   x: isize\n }\n@@ -14,10 +12,12 @@ impl Drop for Foo {\n   }\n }\n \n+\n+\n fn main() {\n-  let mut ptr: Box<_> = box Foo { x: 0 };\n+  let mut ptr: Box<_> = Box::new(Foo { x: 0 });\n   let mut test = |foo: &Foo| {\n-    ptr = box Foo { x: ptr.x + 1 };\n+    ptr = Box::new(Foo { x: ptr.x + 1 });\n   };\n   test(&*ptr); //~ ERROR cannot borrow `*ptr`\n }"}, {"sha": "30900a3b6d96eadc5989ea4ae6d5e737cf7f3461", "filename": "src/test/ui/borrowck/borrowck-closures-use-after-free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*ptr` as immutable because it is also borrowed as m\n    |\n LL |   let mut test = |foo: &Foo| {\n    |                  ----------- mutable borrow occurs here\n-LL |     ptr = box Foo { x: ptr.x + 1 };\n+LL |     ptr = Box::new(Foo { x: ptr.x + 1 });\n    |     --- first borrow occurs due to use of `ptr` in closure\n LL |   };\n LL |   test(&*ptr);"}, {"sha": "dd6708582c1b4b709015ab89d1a2a5db1b89e83f", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity-rpass.rs", "status": "modified", "additions": 52, "deletions": 54, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,224 +3,222 @@\n #![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n struct A { a: isize, b: Box<isize> }\n struct B { a: Box<isize>, b: Box<isize> }\n \n fn move_after_copy() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     drop(x.a);\n     drop(x.b);\n }\n \n fn move_after_fu_copy() {\n-    let x = A { a: 1, b: box 2 };\n-    let _y = A { b: box 3, .. x };\n+    let x = A { a: 1, b: Box::new(2) };\n+    let _y = A { b: Box::new(3), .. x };\n     drop(x.b);\n }\n \n fn fu_move_after_copy() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     drop(x.a);\n     let _y = A { a: 3, .. x };\n }\n \n fn fu_move_after_fu_copy() {\n-    let x = A { a: 1, b: box 2 };\n-    let _y = A { b: box 3, .. x };\n+    let x = A { a: 1, b: Box::new(2) };\n+    let _y = A { b: Box::new(3), .. x };\n     let _z = A { a: 4, .. x };\n }\n \n fn copy_after_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n     drop(x.a);\n }\n \n fn copy_after_fu_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let y = A { a: 3, .. x };\n     drop(x.a);\n }\n \n fn fu_copy_after_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n-    let _y = A { b: box 3, .. x };\n+    let _y = A { b: Box::new(3), .. x };\n }\n \n fn fu_copy_after_fu_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n-    let _z = A { b: box 3, .. x };\n+    let _z = A { b: Box::new(3), .. x };\n }\n \n fn borrow_after_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n     let p = &x.a;\n     drop(*p);\n }\n \n fn borrow_after_fu_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n     let p = &x.a;\n     drop(*p);\n }\n \n fn move_after_borrow() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let p = &x.a;\n     drop(x.b);\n     drop(*p);\n }\n \n fn fu_move_after_borrow() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let p = &x.a;\n     let _y = A { a: 3, .. x };\n     drop(*p);\n }\n \n fn mut_borrow_after_mut_borrow() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let p = &mut x.a;\n     let q = &mut x.b;\n     drop(*p);\n     drop(**q);\n }\n \n fn move_after_move() {\n-    let x = B { a: box 1, b: box 2 };\n+    let x = B { a: Box::new(1), b: Box::new(2) };\n     drop(x.a);\n     drop(x.b);\n }\n \n fn move_after_fu_move() {\n-    let x = B { a: box 1, b: box 2 };\n-    let y = B { a: box 3, .. x };\n+    let x = B { a: Box::new(1), b: Box::new(2) };\n+    let y = B { a: Box::new(3), .. x };\n     drop(x.a);\n }\n \n fn fu_move_after_move() {\n-    let x = B { a: box 1, b: box 2 };\n+    let x = B { a: Box::new(1), b: Box::new(2) };\n     drop(x.a);\n-    let z = B { a: box 3, .. x };\n+    let z = B { a: Box::new(3), .. x };\n     drop(z.b);\n }\n \n fn fu_move_after_fu_move() {\n-    let x = B { a: box 1, b: box 2 };\n-    let _y = B { b: box 3, .. x };\n-    let _z = B { a: box 4, .. x };\n+    let x = B { a: Box::new(1), b: Box::new(2) };\n+    let _y = B { b: Box::new(3), .. x };\n+    let _z = B { a: Box::new(4), .. x };\n }\n \n fn copy_after_assign_after_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n-    x = A { a: 3, b: box 4 };\n+    x = A { a: 3, b: Box::new(4) };\n     drop(*x.b);\n }\n \n fn copy_after_assign_after_fu_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n-    x = A { a: 3, b: box 4 };\n+    x = A { a: 3, b: Box::new(4) };\n     drop(*x.b);\n }\n \n fn copy_after_field_assign_after_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n-    x.b = box 3;\n+    x.b = Box::new(3);\n     drop(*x.b);\n }\n \n fn copy_after_field_assign_after_fu_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n-    x.b = box 3;\n+    x.b = Box::new(3);\n     drop(*x.b);\n }\n \n fn borrow_after_assign_after_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n-    x = A { a: 3, b: box 4 };\n+    x = A { a: 3, b: Box::new(4) };\n     let p = &x.b;\n     drop(**p);\n }\n \n fn borrow_after_assign_after_fu_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n-    x = A { a: 3, b: box 4 };\n+    x = A { a: 3, b: Box::new(4) };\n     let p = &x.b;\n     drop(**p);\n }\n \n fn borrow_after_field_assign_after_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n-    x.b = box 3;\n+    x.b = Box::new(3);\n     let p = &x.b;\n     drop(**p);\n }\n \n fn borrow_after_field_assign_after_fu_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n-    x.b = box 3;\n+    x.b = Box::new(3);\n     let p = &x.b;\n     drop(**p);\n }\n \n fn move_after_assign_after_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let _y = x.b;\n-    x = A { a: 3, b: box 4 };\n+    x = A { a: 3, b: Box::new(4) };\n     drop(x.b);\n }\n \n fn move_after_assign_after_fu_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n-    x = A { a: 3, b: box 4 };\n+    x = A { a: 3, b: Box::new(4) };\n     drop(x.b);\n }\n \n fn move_after_field_assign_after_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n-    x.b = box 3;\n+    x.b = Box::new(3);\n     drop(x.b);\n }\n \n fn move_after_field_assign_after_fu_move() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n-    x.b = box 3;\n+    x.b = Box::new(3);\n     drop(x.b);\n }\n \n fn copy_after_assign_after_uninit() {\n     let mut x: A;\n-    x = A { a: 1, b: box 2 };\n+    x = A { a: 1, b: Box::new(2) };\n     drop(x.a);\n }\n \n fn borrow_after_assign_after_uninit() {\n     let mut x: A;\n-    x = A { a: 1, b: box 2 };\n+    x = A { a: 1, b: Box::new(2) };\n     let p = &x.a;\n     drop(*p);\n }\n \n fn move_after_assign_after_uninit() {\n     let mut x: A;\n-    x = A { a: 1, b: box 2 };\n+    x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n }\n "}, {"sha": "50edfb6ba2db16bff9620e6f5fcba6006798d6e1", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,75 +1,75 @@\n-#![feature(box_syntax)]\n-\n struct A { a: isize, b: Box<isize> }\n \n+\n+\n fn deref_after_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n     drop(*x.b); //~ ERROR use of moved value: `x.b`\n }\n \n fn deref_after_fu_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let y = A { a: 3, .. x };\n     drop(*x.b); //~ ERROR use of moved value: `x.b`\n }\n \n fn borrow_after_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n     let p = &x.b; //~ ERROR borrow of moved value: `x.b`\n     drop(**p);\n }\n \n fn borrow_after_fu_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n     let p = &x.b; //~ ERROR borrow of moved value: `x.b`\n     drop(**p);\n }\n \n fn move_after_borrow() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let p = &x.b;\n     drop(x.b); //~ ERROR cannot move out of `x.b` because it is borrowed\n     drop(**p);\n }\n \n fn fu_move_after_borrow() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let p = &x.b;\n     let _y = A { a: 3, .. x }; //~ ERROR cannot move out of `x.b` because it is borrowed\n     drop(**p);\n }\n \n fn mut_borrow_after_mut_borrow() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let p = &mut x.a;\n     let q = &mut x.a; //~ ERROR cannot borrow `x.a` as mutable more than once at a time\n     drop(*p);\n     drop(*q);\n }\n \n fn move_after_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n     drop(x.b);  //~ ERROR use of moved value: `x.b`\n }\n \n fn move_after_fu_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n     drop(x.b);  //~ ERROR use of moved value: `x.b`\n }\n \n fn fu_move_after_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     drop(x.b);\n     let _z = A { a: 3, .. x };  //~ ERROR use of moved value: `x.b`\n }\n \n fn fu_move_after_fu_move() {\n-    let x = A { a: 1, b: box 2 };\n+    let x = A { a: 1, b: Box::new(2) };\n     let _y = A { a: 3, .. x };\n     let _z = A { a: 4, .. x };  //~ ERROR use of moved value: `x.b`\n }\n@@ -91,7 +91,7 @@ fn borrow_after_field_assign_after_uninit() {\n \n fn move_after_field_assign_after_uninit() {\n     let mut x: A;\n-    x.b = box 1; //~ ERROR assign to part of possibly-uninitialized variable: `x`\n+    x.b = Box::new(1); //~ ERROR assign to part of possibly-uninitialized variable: `x`\n     drop(x.b);\n }\n "}, {"sha": "bb4d2f06016b9ecc5e3126fe662a79617d9892b3", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -123,7 +123,7 @@ LL |     x.a = 1;\n error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-field-sensitivity.rs:94:5\n    |\n-LL |     x.b = box 1;\n+LL |     x.b = Box::new(1);\n    |     ^^^ use of possibly-uninitialized `x`\n \n error: aborting due to 14 previous errors"}, {"sha": "389b8a43c0551391d9c8a8c74cee0e5d5b64317c", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,6 @@\n // Issue #16205.\n \n-#![feature(box_syntax)]\n+\n \n struct Foo {\n     a: [Box<isize>; 3],\n@@ -13,12 +13,12 @@ fn main() {\n     }\n \n     let f = Foo {\n-        a: [box 3, box 4, box 5],\n+        a: [Box::new(3), Box::new(4), Box::new(5)],\n     };\n     for &a in &f.a {  //~ ERROR cannot move out\n     }\n \n-    let x: Option<Box<_>> = Some(box 1);\n+    let x: Option<Box<_>> = Some(Box::new(1));\n     for &a in x.iter() {    //~ ERROR cannot move out\n     }\n }"}, {"sha": "003533a51844d4ad87b3d4920e6b28e70eeed294", "filename": "src/test/ui/borrowck/borrowck-issue-14498.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -4,22 +4,22 @@\n // Also includes tests of the errors reported when the Box in question\n // is immutable (#14270).\n \n-#![feature(box_syntax)]\n+\n \n struct A { a: isize }\n struct B<'a> { a: Box<&'a mut isize> }\n \n fn indirect_write_to_imm_box() {\n     let mut x: isize = 1;\n-    let y: Box<_> = box &mut x;\n+    let y: Box<_> = Box::new(&mut x);\n     let p = &y;\n     ***p = 2; //~ ERROR cannot assign to `***p`\n     drop(p);\n }\n \n fn borrow_in_var_from_var() {\n     let mut x: isize = 1;\n-    let mut y: Box<_> = box &mut x;\n+    let mut y: Box<_> = Box::new(&mut x);\n     let p = &y;\n     let q = &***p;\n     **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n@@ -29,7 +29,7 @@ fn borrow_in_var_from_var() {\n \n fn borrow_in_var_from_var_via_imm_box() {\n     let mut x: isize = 1;\n-    let y: Box<_> = box &mut x;\n+    let y: Box<_> = Box::new(&mut x);\n     let p = &y;\n     let q = &***p;\n     **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n@@ -39,7 +39,7 @@ fn borrow_in_var_from_var_via_imm_box() {\n \n fn borrow_in_var_from_field() {\n     let mut x = A { a: 1 };\n-    let mut y: Box<_> = box &mut x.a;\n+    let mut y: Box<_> = Box::new(&mut x.a);\n     let p = &y;\n     let q = &***p;\n     **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n@@ -49,7 +49,7 @@ fn borrow_in_var_from_field() {\n \n fn borrow_in_var_from_field_via_imm_box() {\n     let mut x = A { a: 1 };\n-    let y: Box<_> = box &mut x.a;\n+    let y: Box<_> = Box::new(&mut x.a);\n     let p = &y;\n     let q = &***p;\n     **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n@@ -59,7 +59,7 @@ fn borrow_in_var_from_field_via_imm_box() {\n \n fn borrow_in_field_from_var() {\n     let mut x: isize = 1;\n-    let mut y = B { a: box &mut x };\n+    let mut y = B { a: Box::new(&mut x) };\n     let p = &y.a;\n     let q = &***p;\n     **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n@@ -69,7 +69,7 @@ fn borrow_in_field_from_var() {\n \n fn borrow_in_field_from_var_via_imm_box() {\n     let mut x: isize = 1;\n-    let y = B { a: box &mut x };\n+    let y = B { a: Box::new(&mut x) };\n     let p = &y.a;\n     let q = &***p;\n     **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n@@ -79,7 +79,7 @@ fn borrow_in_field_from_var_via_imm_box() {\n \n fn borrow_in_field_from_field() {\n     let mut x = A { a: 1 };\n-    let mut y = B { a: box &mut x.a };\n+    let mut y = B { a: Box::new(&mut x.a) };\n     let p = &y.a;\n     let q = &***p;\n     **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n@@ -89,7 +89,7 @@ fn borrow_in_field_from_field() {\n \n fn borrow_in_field_from_field_via_imm_box() {\n     let mut x = A { a: 1 };\n-    let y = B { a: box &mut x.a };\n+    let y = B { a: Box::new(&mut x.a) };\n     let p = &y.a;\n     let q = &***p;\n     **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed"}, {"sha": "0fb2267b982ea6fb9505d1b47e2fc1270a932d60", "filename": "src/test/ui/borrowck/borrowck-issue-2657-1.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,9 +1,9 @@\n-#![feature(box_syntax)]\n-\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }\n \n \n fn main() {\n-    let x: Option<Box<_>> = Some(box 1);\n+    let x: Option<Box<_>> = Some(Box::new(1));\n     match x {\n       Some(ref _y) => {\n         let _a = x; //~ ERROR cannot move\n@@ -12,6 +12,3 @@ fn main() {\n       _ => {}\n     }\n }\n-\n-trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n-impl<T> Fake for T { }"}, {"sha": "7dbac02154a6e29bddf4ad389f38a403b7bf25b8", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n-#![feature(box_syntax)]\n-\n fn main() {\n-    let x: Option<Box<_>> = Some(box 1);\n+\n+    let x: Option<Box<_>> = Some(Box::new(1));\n+\n     match x {\n       Some(ref y) => {\n         let _b = *y; //~ ERROR cannot move out"}, {"sha": "19a0dd0c6b17b7e3426c48f03ab6762c26a3da9b", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -4,7 +4,7 @@\n // either genuine or would require more advanced changes.  The latter\n // cases are noted.\n \n-#![feature(box_syntax)]\n+\n \n fn borrow(_v: &isize) {}\n fn borrow_mut(_v: &mut isize) {}\n@@ -13,15 +13,15 @@ fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<isize>) {\n-    *v = box (**v + 1);\n+    *v = Box::new(**v + 1);\n }\n \n fn pre_freeze_cond() {\n     // In this instance, the freeze is conditional and starts before\n     // the mut borrow.\n \n-    let u = box 0;\n-    let mut v: Box<_> = box 3;\n+    let u = Box::new(0);\n+    let mut v: Box<_> = Box::new(3);\n     let mut _w = &u;\n     if cond() {\n         _w = &v;\n@@ -34,8 +34,8 @@ fn pre_freeze_else() {\n     // In this instance, the freeze and mut borrow are on separate sides\n     // of the if.\n \n-    let u = box 0;\n-    let mut v: Box<_> = box 3;\n+    let u = Box::new(0);\n+    let mut v: Box<_> = Box::new(3);\n     let mut _w = &u;\n     if cond() {\n         _w = &v;"}, {"sha": "548ffbd515e98836fe2bf8b2c22b92674078a14d", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,18 +1,18 @@\n-#![feature(box_syntax)]\n-\n fn borrow(_v: &isize) {}\n fn borrow_mut(_v: &mut isize) {}\n fn cond() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n+\n fn inc(v: &mut Box<isize>) {\n-    *v = box (**v + 1);\n+    *v = Box::new(**v + 1);\n }\n \n+\n fn loop_overarching_alias_mut() {\n     // In this instance, the borrow ends on the line before the loop\n \n-    let mut v: Box<_> = box 3;\n+    let mut v: Box<_> = Box::new(3);\n     let mut x = &mut v;\n     **x += 1;\n     loop {\n@@ -23,18 +23,18 @@ fn loop_overarching_alias_mut() {\n fn block_overarching_alias_mut() {\n     // In this instance, the borrow encompasses the entire closure call.\n \n-    let mut v: Box<_> = box 3;\n+    let mut v: Box<_> = Box::new(3);\n     let mut x = &mut v;\n     for _ in 0..3 {\n         borrow(&*v); //~ ERROR cannot borrow\n     }\n-    *x = box 5;\n+    *x = Box::new(5);\n }\n fn loop_aliased_mut() {\n     // In this instance, the borrow ends right after each assignment to _x\n \n-    let mut v: Box<_> = box 3;\n-    let mut w: Box<_> = box 4;\n+    let mut v: Box<_> = Box::new(3);\n+    let mut w: Box<_> = Box::new(4);\n     let mut _x = &w;\n     loop {\n         borrow_mut(&mut *v); // OK\n@@ -45,8 +45,8 @@ fn loop_aliased_mut() {\n fn while_aliased_mut() {\n     // In this instance, the borrow ends right after each assignment to _x\n \n-    let mut v: Box<_> = box 3;\n-    let mut w: Box<_> = box 4;\n+    let mut v: Box<_> = Box::new(3);\n+    let mut w: Box<_> = Box::new(4);\n     let mut _x = &w;\n     while cond() {\n         borrow_mut(&mut *v); // OK\n@@ -58,8 +58,8 @@ fn while_aliased_mut() {\n fn loop_aliased_mut_break() {\n     // In this instance, the borrow ends right after each assignment to _x\n \n-    let mut v: Box<_> = box 3;\n-    let mut w: Box<_> = box 4;\n+    let mut v: Box<_> = Box::new(3);\n+    let mut w: Box<_> = Box::new(4);\n     let mut _x = &w;\n     loop {\n         borrow_mut(&mut *v);\n@@ -72,8 +72,8 @@ fn loop_aliased_mut_break() {\n fn while_aliased_mut_break() {\n     // In this instance, the borrow ends right after each assignment to _x\n \n-    let mut v: Box<_> = box 3;\n-    let mut w: Box<_> = box 4;\n+    let mut v: Box<_> = Box::new(3);\n+    let mut w: Box<_> = Box::new(4);\n     let mut _x = &w;\n     while cond() {\n         borrow_mut(&mut *v);\n@@ -84,8 +84,8 @@ fn while_aliased_mut_break() {\n }\n \n fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n-    let mut v: Box<_> = box 3;\n-    let mut w: Box<_> = box 4;\n+    let mut v: Box<_> = Box::new(3);\n+    let mut w: Box<_> = Box::new(4);\n     let mut x = &mut w;\n     while cond {\n         **x += 1;"}, {"sha": "df7c86b85623e76f5d02c0c0b73575ad459b0057", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -7,7 +7,7 @@ LL |     for _ in 0..3 {\n LL |         borrow(&*v);\n    |                ^^^ immutable borrow occurs here\n LL |     }\n-LL |     *x = box 5;\n+LL |     *x = Box::new(5);\n    |     -- mutable borrow later used here\n \n error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable"}, {"sha": "564c57044a37e015cddeec14d365cfa7b5700f44", "filename": "src/test/ui/borrowck/borrowck-lend-flow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -4,7 +4,7 @@\n // either genuine or would require more advanced changes.  The latter\n // cases are noted.\n \n-#![feature(box_syntax)]\n+\n \n fn borrow(_v: &isize) {}\n fn borrow_mut(_v: &mut isize) {}\n@@ -13,13 +13,13 @@ fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<isize>) {\n-    *v = box (**v + 1);\n+    *v = Box::new(**v + 1);\n }\n \n fn pre_freeze() {\n     // In this instance, the freeze starts before the mut borrow.\n \n-    let mut v: Box<_> = box 3;\n+    let mut v: Box<_> = Box::new(3);\n     let _w = &v;\n     borrow_mut(&mut *v); //~ ERROR cannot borrow\n     _w.use_ref();\n@@ -28,7 +28,7 @@ fn pre_freeze() {\n fn post_freeze() {\n     // In this instance, the const alias starts after the borrow.\n \n-    let mut v: Box<_> = box 3;\n+    let mut v: Box<_> = Box::new(3);\n     borrow_mut(&mut *v);\n     let _w = &v;\n }"}, {"sha": "e536d404099273ede42310aef0bc6c0b3992cbad", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n use std::thread;\n \n \n@@ -8,8 +6,10 @@ fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n     f(v);\n }\n \n+\n+\n fn box_imm() {\n-    let v: Box<_> = box 3;\n+    let v: Box<_> = Box::new(3);\n     let w = &v;\n     thread::spawn(move|| {\n     //~^ ERROR cannot move out of `v` because it is borrowed\n@@ -19,7 +19,7 @@ fn box_imm() {\n }\n \n fn box_imm_explicit() {\n-    let v: Box<_> = box 3;\n+    let v: Box<_> = Box::new(3);\n     let w = &v;\n     thread::spawn(move|| {\n     //~^ ERROR cannot move"}, {"sha": "f3f443721b5ec69e749ef444233998bb1d36b398", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,12 +1,12 @@\n-#![feature(box_syntax)]\n+fn take(_v: Box<isize>) {\n+}\n+\n \n \n \n-fn take(_v: Box<isize>) {\n-}\n \n fn box_imm() {\n-    let v = box 3;\n+    let v = Box::new(3);\n     let w = &v;\n     take(v); //~ ERROR cannot move out of `v` because it is borrowed\n     w.use_ref();"}, {"sha": "33d6af303102af3d267926cb3fe4d9b6596eac86", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,14 +1,14 @@\n-#![feature(box_syntax)]\n-\n fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n     f(v);\n }\n \n+\n+\n fn box_imm() {\n-    let mut v: Box<_> = box 3;\n+    let mut v: Box<_> = Box::new(3);\n     borrow(&*v,\n            |w| { //~ ERROR cannot borrow `v` as mutable\n-            v = box 4;\n+            v = Box::new(4);\n             assert_eq!(*v, 3);\n             assert_eq!(*w, 4);\n         })"}, {"sha": "fa5308c2903906179b4f1be41b1b5abe0fc441f1", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-mut-uniq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -7,7 +7,7 @@ LL |     borrow(&*v,\n    |     immutable borrow later used by call\n LL |            |w| {\n    |            ^^^ mutable borrow occurs here\n-LL |             v = box 4;\n+LL |             v = Box::new(4);\n    |             - second borrow occurs due to use of `v` in closure\n \n error: aborting due to previous error"}, {"sha": "b8f1650fcdc599bf5d4524f552c5d57cfbc4d245", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,5 @@\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n+\n \n use std::ops::Add;\n \n@@ -12,12 +12,12 @@ impl Add for Foo {\n     fn add(self, f: Foo) -> Foo {\n         let Foo(box i) = self;\n         let Foo(box j) = f;\n-        Foo(box (i + j))\n+        Foo(Box::new(i + j))\n     }\n }\n \n fn main() {\n-    let x = Foo(box 3);\n+    let x = Foo(Box::new(3));\n     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n     //~^ ERROR borrow of moved value: `x`\n }"}, {"sha": "cd288065b74f7df96b14e5c6bb09e037bdb7f3b0", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/borrowck-loan-in-overloaded-op.rs:21:20\n    |\n-LL |     let x = Foo(box 3);\n+LL |     let x = Foo(Box::new(3));\n    |         - move occurs because `x` has type `Foo`, which does not implement the `Copy` trait\n LL |     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n    |               -    ^ value borrowed here after move"}, {"sha": "4e969f6ed83d30935dd74dfd89801a0b5ed8f17b", "filename": "src/test/ui/borrowck/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-macro-interaction-issue-6304.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -6,9 +6,7 @@\n // Check that we do not ICE when compiling this\n // macro, which reuses the expression `$id`\n \n-\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n struct Foo {\n   a: isize\n@@ -23,7 +21,7 @@ impl Foo {\n     macro_rules! declare {\n       ($id:expr, $rest:expr) => ({\n         self.check_id($id);\n-        box Bar::Bar2($id, $rest)\n+        Box::new(Bar::Bar2($id, $rest))\n       })\n     }\n     match s {"}, {"sha": "e7a48ebf6ca9b0cd001dc50f2e84740e24e43b27", "filename": "src/test/ui/borrowck/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture-ok.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,7 @@\n // run-pass\n-#![feature(box_syntax)]\n \n pub fn main() {\n-    let bar: Box<_> = box 3;\n+    let bar: Box<_> = Box::new(3);\n     let h = || -> isize { *bar };\n     assert_eq!(h(), 3);\n }"}, {"sha": "f26edef17f34963fd7fed5f2638d4ad323dfd407", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n-#![feature(box_syntax,unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n pub fn main() {\n-    let bar: Box<_> = box 3;\n+    let bar: Box<_> = Box::new(3);\n     let _g = to_fn_mut(|| {\n         let _h = to_fn_once(move || -> isize { *bar }); //~ ERROR cannot move out of\n     });"}, {"sha": "257ec3fbb7fa237266afbbf31f219c92eea359e4", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of `bar`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-move-by-capture.rs:9:29\n    |\n-LL |       let bar: Box<_> = box 3;\n+LL |       let bar: Box<_> = Box::new(3);\n    |           --- captured outer variable\n LL |       let _g = to_fn_mut(|| {\n    |  ________________________-"}, {"sha": "ef38cbb63a5e3455cb31328eaa43ba5eb3ee5af2", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,14 +1,14 @@\n-#![feature(box_syntax)]\n-\n enum Foo {\n     Foo1(Box<u32>, Box<u32>),\n     Foo2(Box<u32>),\n     Foo3,\n }\n \n+\n+\n fn blah() {\n-    let f = &Foo::Foo1(box 1, box 2);\n-    match *f {             //~ ERROR cannot move out of\n+    let f = &Foo::Foo1(Box::new(1), Box::new(2));\n+    match *f { //~ ERROR cannot move out of\n         Foo::Foo1(num1,\n                   num2) => (),\n         Foo::Foo2(num) => (),\n@@ -42,8 +42,8 @@ struct A {\n fn free<T>(_: T) {}\n \n fn blah2() {\n-    let a = &A { a: box 1 };\n-    match a.a {           //~ ERROR cannot move out of\n+    let a = &A { a: Box::new(1) };\n+    match a.a { //~ ERROR cannot move out of\n         n => {\n             free(n)\n         }"}, {"sha": "71405f7a7329d1c080b24e64e27bcaa4ddc4dd2d", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,10 +3,10 @@\n \n \n \n-#![feature(box_syntax)]\n+\n \n fn main() {\n-    let a: Box<Box<_>> = box box 2;\n+    let a: Box<Box<_>> = Box::new(Box::new(2));\n     let b = &a;\n \n     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed"}, {"sha": "72e7b5a716273a4afaab55700ac192c357955d52", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,11 +1,11 @@\n-#![feature(box_syntax)]\n-\n fn call_f<F:FnOnce() -> isize>(f: F) -> isize {\n     f()\n }\n \n+\n+\n fn main() {\n-    let t: Box<_> = box 3;\n+    let t: Box<_> = Box::new(3);\n \n     call_f(move|| { *t + 1 });\n     call_f(move|| { *t + 1 }); //~ ERROR use of moved value"}, {"sha": "edd597fe30bd291371523b69e5c8e9a0e534fe1e", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of moved value: `t`\n   --> $DIR/borrowck-move-moved-value-into-closure.rs:11:12\n    |\n-LL |     let t: Box<_> = box 3;\n+LL |     let t: Box<_> = Box::new(3);\n    |         - move occurs because `t` has type `Box<isize>`, which does not implement the `Copy` trait\n LL | \n LL |     call_f(move|| { *t + 1 });"}, {"sha": "38abd19322215207241335a1a8431f8277d89606", "filename": "src/test/ui/borrowck/borrowck-move-subcomponent.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n // Tests that the borrow checker checks all components of a path when moving\n // out.\n \n-#![feature(box_syntax)]\n+\n \n struct S {\n   x : Box<isize>\n@@ -10,7 +10,7 @@ struct S {\n fn f<T>(_: T) {}\n \n fn main() {\n-  let a : S = S { x : box 1 };\n+  let a : S = S { x : Box::new(1) };\n   let pb = &a;\n   let S { x: ax } = a;  //~ ERROR cannot move out\n   f(pb);"}, {"sha": "57b3819ac5113641589134e7e750477e2a14a615", "filename": "src/test/ui/borrowck/borrowck-multiple-captures.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,13 @@\n-#![feature(box_syntax)]\n-\n use std::thread;\n \n+\n fn borrow<T>(_: &T) { }\n \n+\n fn different_vars_after_borrows() {\n-    let x1: Box<_> = box 1;\n+    let x1: Box<_> = Box::new(1);\n     let p1 = &x1;\n-    let x2: Box<_> = box 2;\n+    let x2: Box<_> = Box::new(2);\n     let p2 = &x2;\n     thread::spawn(move|| {\n         //~^ ERROR cannot move out of `x1` because it is borrowed\n@@ -20,9 +20,9 @@ fn different_vars_after_borrows() {\n }\n \n fn different_vars_after_moves() {\n-    let x1: Box<_> = box 1;\n+    let x1: Box<_> = Box::new(1);\n     drop(x1);\n-    let x2: Box<_> = box 2;\n+    let x2: Box<_> = Box::new(2);\n     drop(x2);\n     thread::spawn(move|| {\n         //~^ ERROR use of moved value: `x1`\n@@ -33,7 +33,7 @@ fn different_vars_after_moves() {\n }\n \n fn same_var_after_borrow() {\n-    let x: Box<_> = box 1;\n+    let x: Box<_> = Box::new(1);\n     let p = &x;\n     thread::spawn(move|| {\n         //~^ ERROR cannot move out of `x` because it is borrowed\n@@ -44,7 +44,7 @@ fn same_var_after_borrow() {\n }\n \n fn same_var_after_move() {\n-    let x: Box<_> = box 1;\n+    let x: Box<_> = Box::new(1);\n     drop(x);\n     thread::spawn(move|| {\n         //~^ ERROR use of moved value: `x`"}, {"sha": "86d2955e2364f4a3a832c0defb288bcf90bc677b", "filename": "src/test/ui/borrowck/borrowck-multiple-captures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -30,7 +30,7 @@ LL |     borrow(&*p2);\n error[E0382]: use of moved value: `x1`\n   --> $DIR/borrowck-multiple-captures.rs:27:19\n    |\n-LL |     let x1: Box<_> = box 1;\n+LL |     let x1: Box<_> = Box::new(1);\n    |         -- move occurs because `x1` has type `Box<i32>`, which does not implement the `Copy` trait\n LL |     drop(x1);\n    |          -- value moved here\n@@ -44,7 +44,7 @@ LL |         drop(x1);\n error[E0382]: use of moved value: `x2`\n   --> $DIR/borrowck-multiple-captures.rs:27:19\n    |\n-LL |     let x2: Box<_> = box 2;\n+LL |     let x2: Box<_> = Box::new(2);\n    |         -- move occurs because `x2` has type `Box<i32>`, which does not implement the `Copy` trait\n LL |     drop(x2);\n    |          -- value moved here\n@@ -91,7 +91,7 @@ LL |         drop(x);\n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:49:19\n    |\n-LL |     let x: Box<_> = box 1;\n+LL |     let x: Box<_> = Box::new(1);\n    |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n LL |     drop(x);\n    |          - value moved here"}, {"sha": "255b4995b640db8368ef046cf3700b1ee5c1f19f", "filename": "src/test/ui/borrowck/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-uniq.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n use std::mem::swap;\n \n@@ -20,7 +19,7 @@ fn iter_ints<F>(x: &Ints, mut f: F) -> bool where F: FnMut(&isize) -> bool {\n }\n \n pub fn main() {\n-    let mut ints: Box<_> = box Ints {sum: box 0, values: Vec::new()};\n+    let mut ints: Box<_> = Box::new(Ints {sum: Box::new(0), values: Vec::new()});\n     add_int(&mut *ints, 22);\n     add_int(&mut *ints, 44);\n "}, {"sha": "f035049d82d8db4fb2bbfb664aaf9b47d689b38d", "filename": "src/test/ui/borrowck/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n struct Node_ {\n     a: Box<Cycle>\n }\n@@ -8,8 +6,10 @@ enum Cycle {\n     Node(Node_),\n     Empty,\n }\n+\n fn main() {\n-    let mut x: Box<_> = box Cycle::Node(Node_ {a: box Cycle::Empty});\n+    let mut x: Box<_> = Box::new(Cycle::Node(Node_ {a: Box::new(Cycle::Empty)}));\n+\n     // Create a cycle!\n     match *x {\n       Cycle::Node(ref mut y) => {"}, {"sha": "344d75cc58f02f9801b3364d3458759cc4aff436", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-from-vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n use std::ops::Index;\n \n struct MyVec<T> {\n@@ -14,8 +12,10 @@ impl<T> Index<usize> for MyVec<T> {\n     }\n }\n \n+\n+\n fn main() {\n-    let v = MyVec::<Box<_>> { data: vec![box 1, box 2, box 3] };\n+    let v = MyVec::<Box<_>> { data: vec![Box::new(1), Box::new(2), Box::new(3)] };\n     let good = &v[0]; // Shouldn't fail here\n     let bad = v[0];\n     //~^ ERROR cannot move out of index of `MyVec<Box<i32>>`"}, {"sha": "25d3e0b548646bd49815f5d05335457da4bad299", "filename": "src/test/ui/borrowck/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,53 +1,53 @@\n-#![feature(box_syntax)]\n+fn borrow(_v: &isize) {}\n+\n \n \n \n-fn borrow(_v: &isize) {}\n \n fn local() {\n-    let mut v: Box<_> = box 3;\n+    let mut v: Box<_> = Box::new(3);\n     borrow(&*v);\n }\n \n fn local_rec() {\n     struct F { f: Box<isize> }\n-    let mut v = F {f: box 3};\n+    let mut v = F {f: Box::new(3)};\n     borrow(&*v.f);\n }\n \n fn local_recs() {\n     struct F { f: G }\n     struct G { g: H }\n     struct H { h: Box<isize> }\n-    let mut v = F {f: G {g: H {h: box 3}}};\n+    let mut v = F {f: G {g: H {h: Box::new(3)}}};\n     borrow(&*v.f.g.h);\n }\n \n fn aliased_imm() {\n-    let mut v: Box<_> = box 3;\n+    let mut v: Box<_> = Box::new(3);\n     let w = &v;\n     borrow(&*v);\n     w.use_ref();\n }\n \n fn aliased_mut() {\n-    let mut v: Box<_> = box 3;\n+    let mut v: Box<_> = Box::new(3);\n     let w = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`\n     w.use_mut();\n }\n \n fn aliased_other() {\n-    let mut v: Box<_> = box 3;\n-    let mut w: Box<_> = box 4;\n+    let mut v: Box<_> = Box::new(3);\n+    let mut w: Box<_> = Box::new(4);\n     let x = &mut w;\n     borrow(&*v);\n     x.use_mut();\n }\n \n fn aliased_other_reassign() {\n-    let mut v: Box<_> = box 3;\n-    let mut w: Box<_> = box 4;\n+    let mut v: Box<_> = Box::new(3);\n+    let mut w: Box<_> = Box::new(4);\n     let mut x = &mut w;\n     x = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`"}, {"sha": "1cf763f66fd2022f0de9355dbb350cd85b384af9", "filename": "src/test/ui/borrowck/borrowck-use-mut-borrow-rpass.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,41 +1,39 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n struct A { a: isize, b: Box<isize> }\n \n fn field_copy_after_field_borrow() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let p = &mut x.b;\n     drop(x.a);\n     **p = 3;\n }\n \n fn fu_field_copy_after_field_borrow() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let p = &mut x.b;\n-    let y = A { b: box 3, .. x };\n+    let y = A { b: Box::new(3), .. x };\n     drop(y);\n     **p = 4;\n }\n \n fn field_deref_after_field_borrow() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let p = &mut x.a;\n     drop(*x.b);\n     *p = 3;\n }\n \n fn field_move_after_field_borrow() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let p = &mut x.a;\n     drop(x.b);\n     *p = 3;\n }\n \n fn fu_field_move_after_field_borrow() {\n-    let mut x = A { a: 1, b: box 2 };\n+    let mut x = A { a: 1, b: Box::new(2) };\n     let p = &mut x.a;\n     let y = A { a: 3, .. x };\n     drop(y);"}, {"sha": "94f88395ff9e2b92c8205a164c5ef23fc136f85f", "filename": "src/test/ui/borrowck/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n-#![feature(box_syntax)]\n-\n #[derive(Copy, Clone)]\n struct A { a: isize, b: isize }\n \n struct B { a: isize, b: Box<isize> }\n \n+\n+\n fn var_copy_after_var_borrow() {\n     let mut x: isize = 1;\n     let p = &mut x;\n@@ -50,21 +50,21 @@ fn fu_field_copy_after_field_borrow() {\n }\n \n fn var_deref_after_var_borrow() {\n-    let mut x: Box<isize> = box 1;\n+    let mut x: Box<isize> = Box::new(1);\n     let p = &mut x;\n     drop(*x); //~ ERROR cannot use `*x` because it was mutably borrowed\n     **p = 2;\n }\n \n fn field_deref_after_var_borrow() {\n-    let mut x = B { a: 1, b: box 2 };\n+    let mut x = B { a: 1, b: Box::new(2) };\n     let p = &mut x;\n     drop(*x.b); //~ ERROR cannot use `*x.b` because it was mutably borrowed\n     p.a = 3;\n }\n \n fn field_deref_after_field_borrow() {\n-    let mut x = B { a: 1, b: box 2 };\n+    let mut x = B { a: 1, b: Box::new(2) };\n     let p = &mut x.b;\n     drop(*x.b); //~ ERROR cannot use `*x.b` because it was mutably borrowed\n     **p = 3;"}, {"sha": "8a9296c597828adb834b6cb0bebe93f6cfbb464f", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,12 +1,12 @@\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n+\n \n fn a() {\n-    let mut vec = [box 1, box 2, box 3];\n+    let mut vec = [Box::new(1), Box::new(2), Box::new(3)];\n     match vec {\n         [box ref _a, _, _] => {\n         //~^ NOTE borrow of `vec[_]` occurs here\n-            vec[0] = box 4; //~ ERROR cannot assign\n+            vec[0] = Box::new(4); //~ ERROR cannot assign\n             //~^ NOTE assignment to borrowed `vec[_]` occurs here\n             _a.use_ref();\n             //~^ NOTE borrow later used here\n@@ -15,12 +15,12 @@ fn a() {\n }\n \n fn b() {\n-    let mut vec = vec![box 1, box 2, box 3];\n+    let mut vec = vec![Box::new(1), Box::new(2), Box::new(3)];\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         &mut [ref _b @ ..] => {\n         //~^ borrow of `vec[_]` occurs here\n-            vec[0] = box 4; //~ ERROR cannot assign\n+            vec[0] = Box::new(4); //~ ERROR cannot assign\n             //~^ NOTE assignment to borrowed `vec[_]` occurs here\n             _b.use_ref();\n             //~^ NOTE borrow later used here\n@@ -29,7 +29,7 @@ fn b() {\n }\n \n fn c() {\n-    let mut vec = vec![box 1, box 2, box 3];\n+    let mut vec = vec![Box::new(1), Box::new(2), Box::new(3)];\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         //~^ ERROR cannot move out\n@@ -50,7 +50,7 @@ fn c() {\n }\n \n fn d() {\n-    let mut vec = vec![box 1, box 2, box 3];\n+    let mut vec = vec![Box::new(1), Box::new(2), Box::new(3)];\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         //~^ ERROR cannot move out\n@@ -69,7 +69,7 @@ fn d() {\n }\n \n fn e() {\n-    let mut vec = vec![box 1, box 2, box 3];\n+    let mut vec = vec![Box::new(1), Box::new(2), Box::new(3)];\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         //~^ ERROR cannot move out"}, {"sha": "41c9b3be28164d2dbbce6736e7b073b42a113882", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `vec[_]` because it is borrowed\n LL |         [box ref _a, _, _] => {\n    |              ------ borrow of `vec[_]` occurs here\n LL |\n-LL |             vec[0] = box 4;\n+LL |             vec[0] = Box::new(4);\n    |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n LL |\n LL |             _a.use_ref();\n@@ -16,7 +16,7 @@ error[E0506]: cannot assign to `vec[_]` because it is borrowed\n LL |         &mut [ref _b @ ..] => {\n    |               ----------- borrow of `vec[_]` occurs here\n LL |\n-LL |             vec[0] = box 4;\n+LL |             vec[0] = Box::new(4);\n    |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n LL |\n LL |             _b.use_ref();"}, {"sha": "85e0a840a1961102b60de1617da6073a0850ea5c", "filename": "src/test/ui/borrowck/fsu-moves-and-copies.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ffsu-moves-and-copies.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -5,7 +5,7 @@\n // Issue 4691: Ensure that functional-struct-updates operates\n // correctly and moves rather than copy when appropriate.\n \n-#![feature(box_syntax, core)]\n+#![feature(core)]\n \n struct ncint { v: isize }\n fn ncint(v: isize) -> ncint { ncint { v: v } }\n@@ -17,7 +17,7 @@ impl NoFoo {\n \n struct MoveFoo { copied: isize, moved: Box<isize>, }\n impl MoveFoo {\n-    fn new(x:isize,y:isize) -> MoveFoo { MoveFoo { copied: x, moved: box y } }\n+    fn new(x:isize,y:isize) -> MoveFoo { MoveFoo { copied: x, moved: Box::new(y) } }\n }\n \n struct DropNoFoo { inner: NoFoo }\n@@ -53,8 +53,8 @@ fn test0() {\n \n     // Case 2: Owned\n     let f = DropMoveFoo::new(5, 6);\n-    let b = DropMoveFoo { inner: MoveFoo { moved: box 7, ..f.inner }};\n-    let c = DropMoveFoo { inner: MoveFoo { moved: box 8, ..f.inner }};\n+    let b = DropMoveFoo { inner: MoveFoo { moved: Box::new(7), ..f.inner }};\n+    let c = DropMoveFoo { inner: MoveFoo { moved: Box::new(8), ..f.inner }};\n     assert_eq!(f.inner.copied,    5);\n     assert_eq!(*f.inner.moved,    6);\n \n@@ -69,7 +69,7 @@ fn test1() {\n     // copying move-by-default fields from `f`, so it moves:\n     let f = MoveFoo::new(11, 12);\n \n-    let b = MoveFoo {moved: box 13, ..f};\n+    let b = MoveFoo {moved: Box::new(13), ..f};\n     let c = MoveFoo {copied: 14, ..f};\n     assert_eq!(b.copied,    11);\n     assert_eq!(*b.moved,    13);"}, {"sha": "4f560b065f1b55fb7053c9126dd88b89158f0ae0", "filename": "src/test/ui/borrowck/issue-17263.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fborrowck%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-17263.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,14 +1,12 @@\n // check-pass\n \n-#![feature(box_syntax)]\n-\n struct Foo { a: isize, b: isize }\n \n fn main() {\n-    let mut x: Box<_> = box Foo { a: 1, b: 2 };\n+    let mut x: Box<_> = Box::new(Foo { a: 1, b: 2 });\n     let (a, b) = (&mut x.a, &mut x.b);\n \n-    let mut foo: Box<_> = box Foo { a: 1, b: 2 };\n+    let mut foo: Box<_> = Box::new(Foo { a: 1, b: 2 });\n     let (c, d) = (&mut foo.a, &foo.b);\n \n     // We explicitly use the references created above to illustrate that the"}, {"sha": "a0a561ab2d21ed9293205383120f151b1b845cfc", "filename": "src/test/ui/cancel-clean-via-immediate-rvalue-ref.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcancel-clean-via-immediate-rvalue-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcancel-clean-via-immediate-rvalue-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcancel-clean-via-immediate-rvalue-ref.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,12 +1,10 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n fn foo(x: &mut Box<u8>) {\n-    *x = box 5;\n+    *x = Box::new(5);\n }\n \n pub fn main() {\n-    foo(&mut box 4);\n+    foo(&mut Box::new(4));\n }"}, {"sha": "345d6efd2d90ada0f1893a39d027d9033d32d9fb", "filename": "src/test/ui/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n trait Noisy {\n   fn speak(&self);\n }\n@@ -48,7 +46,9 @@ fn cat(in_x : usize, in_y : isize, in_name: String) -> Cat {\n     }\n }\n \n+\n+\n fn main() {\n-  let nyan: Box<dyn Noisy> = box cat(0, 2, \"nyan\".to_string()) as Box<dyn Noisy>;\n+  let nyan: Box<dyn Noisy> = Box::new(cat(0, 2, \"nyan\".to_string())) as Box<dyn Noisy>;\n   nyan.eat(); //~ ERROR no method named `eat` found\n }"}, {"sha": "38c717089c46bf1712a8dbea4ee2ef4b0fae9344", "filename": "src/test/ui/cleanup-arm-conditional.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcleanup-arm-conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcleanup-arm-conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcleanup-arm-conditional.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -7,15 +7,15 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax, os)]\n+#![feature(os)]\n \n use std::os;\n \n struct Test { x: isize }\n \n impl Test {\n     fn get_x(&self) -> Option<Box<isize>> {\n-        Some(box self.x)\n+        Some(Box::new(self.x))\n     }\n }\n "}, {"sha": "b80f95b79f91d2966ca82abebd03046008f9816a", "filename": "src/test/ui/cleanup-rvalue-scopes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -7,7 +7,6 @@\n // lifetime rules.\n \n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n use std::ops::Drop;\n \n@@ -106,8 +105,8 @@ pub fn main() {\n     end_of_block!(AddFlags { bits: ref _x }, AddFlags(1));\n     end_of_block!(&AddFlags { bits }, &AddFlags(1));\n     end_of_block!((_, ref _y), (AddFlags(1), 22));\n-    end_of_block!(box ref _x, box AddFlags(1));\n-    end_of_block!(box _x, box AddFlags(1));\n+    end_of_block!(box ref _x, std::boxed::Box::new(AddFlags(1)));\n+    end_of_block!(box _x, std::boxed::Box::new(AddFlags(1)));\n     end_of_block!(_, { { check_flags(0); &AddFlags(1) } });\n     end_of_block!(_, &((Box { f: AddFlags(1) }).f));\n     end_of_block!(_, &(([AddFlags(1)])[0]));"}, {"sha": "eadbe44a8e9dee767d2dd0c67def8eac1038aed8", "filename": "src/test/ui/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -21,8 +21,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(box_syntax)]\n-\n use std::thread;\n \n enum Conzabble {\n@@ -40,7 +38,7 @@ fn get_bar(x: usize) -> Vec<usize> { vec![x * 2] }\n pub fn fails() {\n     let x = 2;\n     let mut y: Vec<Box<_>> = Vec::new();\n-    y.push(box Conzabble::Bickwick(do_it(&get_bar(x))));\n+    y.push(Box::new(Conzabble::Bickwick(do_it(&get_bar(x)))));\n }\n \n pub fn main() {"}, {"sha": "9fc661b14777ea6eb4708a37d7d1b05e6ccacf29", "filename": "src/test/ui/clone-with-exterior.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclone-with-exterior.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,8 +3,6 @@\n #![allow(unused_must_use)]\n // ignore-emscripten no threads support\n \n-#![feature(box_syntax)]\n-\n use std::thread;\n \n struct Pair {\n@@ -13,7 +11,7 @@ struct Pair {\n }\n \n pub fn main() {\n-    let z: Box<_> = box Pair { a : 10, b : 12};\n+    let z: Box<_> = Box::new(Pair { a : 10, b : 12});\n \n     thread::spawn(move|| {\n         assert_eq!(z.a, 10);"}, {"sha": "429b21e8b8b99b73da84f9840146249a1d702e28", "filename": "src/test/ui/close-over-big-then-small-data.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclose-over-big-then-small-data.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -5,8 +5,6 @@\n // storing closure data (as we used to do), the u64 would\n // overwrite the u16.\n \n-#![feature(box_syntax)]\n-\n struct Pair<A,B> {\n     a: A, b: B\n }\n@@ -27,10 +25,10 @@ impl<A:Clone> Invokable<A> for Invoker<A> {\n }\n \n fn f<A:Clone + 'static>(a: A, b: u16) -> Box<dyn Invokable<A>+'static> {\n-    box Invoker {\n+    Box::new(Invoker {\n         a: a,\n         b: b,\n-    } as Box<dyn Invokable<A>+'static>\n+    }) as Box<dyn Invokable<A>+'static>\n }\n \n pub fn main() {"}, {"sha": "5ff7b1242db702666dbcf91cf3c6b1adf17f241a", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n // edition:2021\n \n+\n+\n // Tests that two closures cannot simultaneously have mutable\n // and immutable access to the variable. Issue #6801.\n \n-#![feature(box_syntax)]\n-\n #[derive(Debug)]\n struct Point {\n     x: i32,"}, {"sha": "eeb8fe82346c2245dd103e96c0d5aaaacd3fedcc", "filename": "src/test/ui/coercion/coerce-expect-unsized.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unused_braces)]\n-#![feature(box_syntax)]\n \n use std::cell::RefCell;\n use std::fmt::Debug;"}, {"sha": "55e05cfb203b9c806abf38c654178f7c2b2e9a3e", "filename": "src/test/ui/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-method-reexport-grrrrrrr.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n // This is a regression test that the metadata for the\n // name_pool::methods impl in the other crate is reachable from this\n // crate.\n@@ -14,7 +12,7 @@ extern crate crate_method_reexport_grrrrrrr2;\n pub fn main() {\n     use crate_method_reexport_grrrrrrr2::rust::add;\n     use crate_method_reexport_grrrrrrr2::rust::cx;\n-    let x: Box<_> = box ();\n+    let x: Box<_> = Box::new(());\n     x.cx();\n     let y = ();\n     y.add(\"hi\".to_string());"}, {"sha": "23d76ef3656e1454427e594e27608876b24c80d8", "filename": "src/test/ui/cross-crate/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fcci_nested_lib.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n use std::cell::RefCell;\n \n pub struct Entry<A,B> {\n@@ -37,7 +35,7 @@ pub fn new_int_alist<B:'static>() -> alist<isize, B> {\n     fn eq_int(a: isize, b: isize) -> bool { a == b }\n     return alist {\n         eq_fn: eq_int,\n-        data: box RefCell::new(Vec::new()),\n+        data: Box::new(RefCell::new(Vec::new())),\n     };\n }\n \n@@ -47,6 +45,6 @@ pub fn new_int_alist_2<B:'static>() -> alist<isize, B> {\n     fn eq_int(a: isize, b: isize) -> bool { a == b }\n     return alist {\n         eq_fn: eq_int,\n-        data: box RefCell::new(Vec::new()),\n+        data: Box::new(RefCell::new(Vec::new())),\n     };\n }"}, {"sha": "fee6b5d03a9e562ae74825fa1e62c2b41b57d003", "filename": "src/test/ui/cross-crate/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcross-crate%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fcross-crate%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fcci_borrow.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,11 @@\n // run-pass\n // aux-build:cci_borrow_lib.rs\n \n-#![feature(box_syntax)]\n-\n extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;\n \n pub fn main() {\n-    let p: Box<_> = box 22;\n+    let p: Box<_> = Box::new(22);\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22);"}, {"sha": "0d4e08ad95476995f98ae0433d3bdbd8df6875c1", "filename": "src/test/ui/deref.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,9 +1,7 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let x: Box<isize> = box 10;\n+    let x: Box<isize> = Box::new(10);\n     let _y: isize = *x;\n }"}, {"sha": "b71e1149613886771665ac017219370b8cec8cbb", "filename": "src/test/ui/deriving/deriving-default-box.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-box.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n-\n use std::default::Default;\n \n #[derive(Default)]"}, {"sha": "50b64aeebf0efadb3904a9b10e10b250d580c7c3", "filename": "src/test/ui/destructure-trait-ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,11 +2,11 @@\n // reference work properly.\n \n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n trait T { fn foo(&self) {} }\n impl T for isize {}\n \n+\n fn main() {\n     // For an expression of the form:\n     //\n@@ -25,7 +25,7 @@ fn main() {\n     // n == m\n     let &x = &1isize as &dyn T;      //~ ERROR type `&dyn T` cannot be dereferenced\n     let &&x = &(&1isize as &dyn T);  //~ ERROR type `&dyn T` cannot be dereferenced\n-    let box x = box 1isize as Box<dyn T>;\n+    let box x = Box::new(1isize) as Box<dyn T>;\n     //~^ ERROR type `Box<dyn T>` cannot be dereferenced\n \n     // n > m\n@@ -37,7 +37,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected trait object `dyn T`\n     //~| found reference `&_`\n-    let box box x = box 1isize as Box<dyn T>;\n+    let box box x = Box::new(1isize) as Box<dyn T>;\n     //~^ ERROR mismatched types\n     //~| expected trait object `dyn T`\n     //~| found struct `Box<_>`"}, {"sha": "302917ca02e00ef79f122e47e3d0b86d599820b3", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -13,7 +13,7 @@ LL |     let &&x = &(&1isize as &dyn T);\n error[E0033]: type `Box<dyn T>` cannot be dereferenced\n   --> $DIR/destructure-trait-ref.rs:28:9\n    |\n-LL |     let box x = box 1isize as Box<dyn T>;\n+LL |     let box x = Box::new(1isize) as Box<dyn T>;\n    |         ^^^^^ type `Box<dyn T>` cannot be dereferenced\n \n error[E0308]: mismatched types\n@@ -43,8 +43,8 @@ LL |     let &&&x = &(&1isize as &dyn T);\n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:40:13\n    |\n-LL |     let box box x = box 1isize as Box<dyn T>;\n-   |             ^^^^^   ------------------------ this expression has type `Box<dyn T>`\n+LL |     let box box x = Box::new(1isize) as Box<dyn T>;\n+   |             ^^^^^   ------------------------------ this expression has type `Box<dyn T>`\n    |             |\n    |             expected trait object `dyn T`, found struct `Box`\n    |"}, {"sha": "ef3a90a53a6a0241b85c0afdeab2dfbfabf44fa7", "filename": "src/test/ui/drop/drop-on-empty-block-exit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdrop%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdrop%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop-on-empty-block-exit.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,11 +2,9 @@\n // pretty-expanded FIXME #23616\n #![allow(non_camel_case_types)]\n \n-#![feature(box_syntax)]\n-\n enum t { foo(Box<isize>), }\n \n pub fn main() {\n-    let tt = t::foo(box 10);\n+    let tt = t::foo(Box::new(10));\n     match tt { t::foo(_z) => { } }\n }"}, {"sha": "377027a4fc5f2895cd611b9658d24082cca9493e", "filename": "src/test/ui/drop/drop-struct-as-object.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdrop%2Fdrop-struct-as-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdrop%2Fdrop-struct-as-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop-struct-as-object.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -5,8 +5,6 @@\n // Test that destructor on a struct runs successfully after the struct\n // is boxed and converted to an object.\n \n-#![feature(box_syntax)]\n-\n static mut value: usize = 0;\n \n struct Cat {\n@@ -29,7 +27,7 @@ impl Drop for Cat {\n \n pub fn main() {\n     {\n-        let x = box Cat {name: 22};\n+        let x = Box::new(Cat {name: 22});\n         let nyan: Box<dyn Dummy> = x as Box<dyn Dummy>;\n     }\n     unsafe {"}, {"sha": "4ab8f733ad75a419981c8a3318a7a4040bdef065", "filename": "src/test/ui/drop/drop-trait-enum.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdrop%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdrop%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop-trait-enum.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -4,8 +4,6 @@\n #![allow(unused_variables)]\n // ignore-emscripten no threads support\n \n-#![feature(box_syntax)]\n-\n use std::thread;\n use std::sync::mpsc::{channel, Sender};\n \n@@ -57,7 +55,7 @@ pub fn main() {\n \n     let (sender, receiver) = channel();\n     {\n-        let v = Foo::NestedVariant(box 42, SendOnDrop { sender: sender.clone() }, sender);\n+        let v = Foo::NestedVariant(Box::new(42), SendOnDrop { sender: sender.clone() }, sender);\n     }\n     assert_eq!(receiver.recv().unwrap(), Message::DestructorRan);\n     assert_eq!(receiver.recv().unwrap(), Message::Dropped);\n@@ -74,10 +72,10 @@ pub fn main() {\n     let (sender, receiver) = channel();\n     let t = {\n         thread::spawn(move|| {\n-            let mut v = Foo::NestedVariant(box 42, SendOnDrop {\n+            let mut v = Foo::NestedVariant(Box::new(42), SendOnDrop {\n                 sender: sender.clone()\n             }, sender.clone());\n-            v = Foo::NestedVariant(box 42,\n+            v = Foo::NestedVariant(Box::new(42),\n                                    SendOnDrop { sender: sender.clone() },\n                                    sender.clone());\n             v = Foo::SimpleVariant(sender.clone());"}, {"sha": "c1e45215ad8c4b78a66ed6cce9af9482ebabe587", "filename": "src/test/ui/dynamically-sized-types/dst-trait-tuple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-trait-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-trait-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-trait-tuple.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,7 +2,6 @@\n #![allow(type_alias_bounds)]\n \n #![allow(unused_features)]\n-#![feature(box_syntax)]\n #![feature(unsized_tuple_coercion)]\n \n type Fat<T: ?Sized> = (isize, &'static str, T);"}, {"sha": "604ac511290100700875ac32840cd93803d88eb7", "filename": "src/test/ui/dynamically-sized-types/dst-tuple.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-tuple.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(type_alias_bounds)]\n \n-#![feature(box_syntax)]\n #![feature(unsized_tuple_coercion)]\n \n type Fat<T: ?Sized> = (isize, &'static str, T);\n@@ -109,7 +108,7 @@ pub fn main() {\n     assert_eq!((*f2)[1], 2);\n \n     // Nested Box.\n-    let f1 : Box<Fat<[isize; 3]>> = box (5, \"some str\", [1, 2, 3]);\n+    let f1 : Box<Fat<[isize; 3]>> = Box::new((5, \"some str\", [1, 2, 3]));\n     foo(&*f1);\n     let f2 : Box<Fat<[isize]>> = f1;\n     foo(&*f2);"}, {"sha": "14603a2c71fc4e6e47d9d93ac5cf9b4de6952411", "filename": "src/test/ui/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-block-generic-unique1.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unused_braces)]\n-#![feature(box_syntax)]\n \n fn test_generic<T, F>(expected: Box<T>, eq: F) where T: Clone, F: FnOnce(Box<T>, Box<T>) -> bool {\n     let actual: Box<T> = { expected.clone() };\n@@ -13,7 +12,7 @@ fn test_box() {\n         println!(\"{}\", *b2);\n         return *b1 == *b2;\n     }\n-    test_generic::<bool, _>(box true, compare_box);\n+    test_generic::<bool, _>(Box::new(true), compare_box);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "7879c144b10923aa9bbf9c1d474afdf76784ee50", "filename": "src/test/ui/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-block-generic-unique2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unused_braces)]\n-#![feature(box_syntax)]\n \n fn test_generic<T, F>(expected: T, eq: F) where T: Clone, F: FnOnce(T, T) -> bool {\n     let actual: T = { expected.clone() };\n@@ -9,7 +8,7 @@ fn test_generic<T, F>(expected: T, eq: F) where T: Clone, F: FnOnce(T, T) -> boo\n \n fn test_vec() {\n     fn compare_vec(v1: Box<isize>, v2: Box<isize>) -> bool { return v1 == v2; }\n-    test_generic::<Box<isize>, _>(box 1, compare_vec);\n+    test_generic::<Box<isize>, _>(Box::new(1), compare_vec);\n }\n \n pub fn main() { test_vec(); }"}, {"sha": "5fa11ad1283b9d7fcb1060e19c3f743c04590249", "filename": "src/test/ui/expr-block-unique.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-block-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n #![allow(unused_braces)]\n-#![feature(box_syntax)]\n \n-pub fn main() { let x: Box<_> = { box 100 }; assert_eq!(*x, 100); }\n+pub fn main() { let x: Box<_> = { Box::new(100) }; assert_eq!(*x, 100); }"}, {"sha": "86232683549b602463f200038968229346827a86", "filename": "src/test/ui/expr-if-unique.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-if-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,8 @@\n // run-pass\n \n-#![feature(box_syntax)]\n-\n // Tests for if as expressions returning boxed types\n fn test_box() {\n-    let rs: Box<_> = if true { box 100 } else { box 101 };\n+    let rs: Box<_> = if true { Box::new(100) } else { Box::new(101) };\n     assert_eq!(*rs, 100);\n }\n "}, {"sha": "636ac7107e62a6eeafdd08735546a2b159051df3", "filename": "src/test/ui/fn/fn-trait-formatting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,17 +1,17 @@\n-#![feature(box_syntax)]\n-\n fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n \n+\n+\n fn main() {\n-    let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n+    let _: () = Box::new(|_: isize| {}) as Box<dyn FnOnce(isize)>;\n     //~^ ERROR mismatched types\n     //~| expected unit type `()`\n     //~| found struct `Box<dyn FnOnce(isize)>`\n-    let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n+    let _: () = Box::new(|_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n     //~| expected unit type `()`\n     //~| found struct `Box<dyn Fn(isize, isize)>`\n-    let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n+    let _: () = Box::new(|| -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n     //~^ ERROR mismatched types\n     //~| expected unit type `()`\n     //~| found struct `Box<dyn FnMut() -> isize>`"}, {"sha": "ea88e401bed8737e755b53c36a7abc6fdb9ba499", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:6:17\n    |\n-LL |     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n+LL |     let _: () = Box::new(|_: isize| {}) as Box<dyn FnOnce(isize)>;\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n    |            |\n    |            expected due to this\n    |\n@@ -12,8 +12,8 @@ LL |     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n    |\n-LL |     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n+LL |     let _: () = Box::new(|_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n    |            |\n    |            expected due to this\n    |\n@@ -23,8 +23,8 @@ LL |     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17\n    |\n-LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n+LL |     let _: () = Box::new(|| -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n    |            |\n    |            expected due to this\n    |\n@@ -41,7 +41,7 @@ LL |     needs_fn(1);\n    |\n    = help: the trait `Fn<(isize,)>` is not implemented for `{integer}`\n note: required by a bound in `needs_fn`\n-  --> $DIR/fn-trait-formatting.rs:3:31\n+  --> $DIR/fn-trait-formatting.rs:1:31\n    |\n LL | fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n    |                               ^^^^^^^^^^^^^^^^^^ required by this bound in `needs_fn`"}, {"sha": "afc77355ab00a4b072060829a525f189c7ecc5c7", "filename": "src/test/ui/for-loop-while/cleanup-rvalue-during-if-and-while.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ffor-loop-while%2Fcleanup-rvalue-during-if-and-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ffor-loop-while%2Fcleanup-rvalue-during-if-and-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fcleanup-rvalue-during-if-and-while.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,8 +2,6 @@\n // This test verifies that temporaries created for `while`'s and `if`\n // conditions are dropped after the condition is evaluated.\n \n-#![feature(box_syntax)]\n-\n struct Temporary;\n \n static mut DROPPED: isize = 0;\n@@ -18,7 +16,7 @@ impl Temporary {\n     fn do_stuff(&self) -> bool {true}\n }\n \n-fn borrow() -> Box<Temporary> { box Temporary }\n+fn borrow() -> Box<Temporary> { Box::new(Temporary) }\n \n \n pub fn main() {"}, {"sha": "fc138398634d5182977f167e7b1c96bdc19e39a4", "filename": "src/test/ui/generics/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-alias-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,9 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn id<T:Send>(t: T) -> T { return t; }\n \n pub fn main() {\n-    let expected: Box<_> = box 100;\n+    let expected: Box<_> = Box::new(100);\n     let actual = id::<Box<isize>>(expected.clone());\n     println!(\"{}\", *actual);\n     assert_eq!(*expected, *actual);"}, {"sha": "10d87f9f43d0dbffc4e4418e97b828d2dce14f9a", "filename": "src/test/ui/generics/generic-exterior-unique.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-exterior-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-exterior-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-exterior-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,9 +1,8 @@\n // run-pass\n-#![feature(box_syntax)]\n \n struct Recbox<T> {x: Box<T>}\n \n-fn reclift<T>(t: T) -> Recbox<T> { return Recbox {x: box t}; }\n+fn reclift<T>(t: T) -> Recbox<T> { return Recbox { x: Box::new(t) }; }\n \n pub fn main() {\n     let foo: isize = 17;"}, {"sha": "7e246bce9a10c86b75f8d273966c53e91bad52f0", "filename": "src/test/ui/generics/generic-fn-unique.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-fn-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn f<T>(x: Box<T>) -> Box<T> { return x; }\n \n-pub fn main() { let x = f(box 3); println!(\"{}\", *x); }\n+pub fn main() {\n+    let x = f(Box::new(3));\n+    println!(\"{}\", *x);\n+}"}, {"sha": "851424a11b5c141c31014ad91499928511091fc4", "filename": "src/test/ui/generics/generic-object.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-object.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n trait Foo<T> {\n     fn get(&self) -> T;\n@@ -16,7 +15,7 @@ impl Foo<isize> for S {\n }\n \n pub fn main() {\n-    let x = box S { x: 1 };\n+    let x = Box::new(S { x: 1 });\n     let y = x as Box<dyn Foo<isize>>;\n     assert_eq!(y.get(), 1);\n }"}, {"sha": "74f5b701d98a54153ff5e1b95c2ed308b0c5490a", "filename": "src/test/ui/generics/generic-recursive-tag.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-recursive-tag.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,12 @@\n // run-pass\n #![allow(non_camel_case_types)]\n-#![feature(box_syntax)]\n \n enum list<T> { cons(Box<T>, Box<list<T>>), nil, }\n \n pub fn main() {\n     let _a: list<isize> =\n-        list::cons::<isize>(box 10,\n-        box list::cons::<isize>(box 12,\n-        box list::cons::<isize>(box 13,\n-        box list::nil::<isize>)));\n+        list::cons::<isize>(Box::new(10),\n+        Box::new(list::cons::<isize>(Box::new(12),\n+        Box::new(list::cons::<isize>(Box::new(13),\n+        Box::new(list::nil::<isize>))))));\n }"}, {"sha": "67f2ccdde34a1c4bd3c4b0bbde8ed0bb0d002ca7", "filename": "src/test/ui/generics/generic-tag.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -5,11 +5,10 @@\n // pretty-expanded FIXME #23616\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n \n enum option<T> { some(Box<T>), none, }\n \n pub fn main() {\n-    let mut a: option<isize> = option::some::<isize>(box 10);\n+    let mut a: option<isize> = option::some::<isize>(Box::new(10));\n     a = option::none::<isize>;\n }"}, {"sha": "2f34712ecfbf375edf11b4b62ea495028997584b", "filename": "src/test/ui/generics/generic-unique.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,9 @@\n // run-pass\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n struct Triple<T> { x: T, y: T, z: T }\n \n-fn box_it<T>(x: Triple<T>) -> Box<Triple<T>> { return box x; }\n+fn box_it<T>(x: Triple<T>) -> Box<Triple<T>> { return Box::new(x); }\n \n pub fn main() {\n     let x: Box<Triple<isize>> = box_it::<isize>(Triple{x: 1, y: 2, z: 3});"}, {"sha": "ca26252832bcd5b7a7b48209bdee54b40697650a", "filename": "src/test/ui/infinite/infinite-autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: reached the recursion limit while auto-dereferencing\n \n-#![feature(box_syntax)]\n+\n \n use std::ops::Deref;\n \n@@ -17,7 +17,7 @@ impl Deref for Foo {\n pub fn main() {\n     let mut x;\n     loop {\n-        x = box x;\n+        x = Box::new(x);\n         x.foo;\n         x.bar();\n     }"}, {"sha": "1f26ba30000b43f4619a7f61d7fc6f1b73a8af0d", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,10 @@\n error[E0308]: mismatched types\n   --> $DIR/infinite-autoderef.rs:20:13\n    |\n-LL |         x = box x;\n-   |             ^^^^^ cyclic type of infinite size\n-   |\n-help: try using a conversion method\n-   |\n-LL |         x = (box x).to_string();\n-   |             +     +++++++++++++\n+LL |         x = Box::new(x);\n+   |             ^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n+   |             |\n+   |             cyclic type of infinite size\n \n error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:25:5"}, {"sha": "7f416262dcb8cb253b4cef2641170fcdc020f495", "filename": "src/test/ui/init-res-into-things.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finit-res-into-things.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n use std::cell::Cell;\n \n@@ -58,17 +57,17 @@ fn test_tup() {\n fn test_unique() {\n     let i = &Cell::new(0);\n     {\n-        let _a: Box<_> = box r(i);\n+        let _a: Box<_> = Box::new(r(i));\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_unique_rec() {\n     let i = &Cell::new(0);\n     {\n-        let _a: Box<_> = box BoxR {\n+        let _a: Box<_> = Box::new(BoxR {\n             x: r(i)\n-        };\n+        });\n     }\n     assert_eq!(i.get(), 1);\n }"}, {"sha": "c6e48e8b5afbabe46dac3c4666ff3195f0cc419f", "filename": "src/test/ui/intrinsics/intrinsic-atomics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-atomics.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n #![feature(intrinsics)]\n \n mod rusti {\n@@ -34,7 +33,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let mut x: Box<_> = box 1;\n+        let mut x: Box<_> = Box::new(1);\n \n         assert_eq!(rusti::atomic_load(&*x), 1);\n         *x = 5;"}, {"sha": "8b0771985dc3fe53cc50dadb2911156ff65cc307", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,15 +1,15 @@\n-#![feature(box_syntax)]\n-\n trait Foo {\n }\n \n+\n+\n impl<T:Copy> Foo for T {\n }\n \n fn take_param<T:Foo>(foo: &T) { }\n \n fn main() {\n-    let x: Box<_> = box 3;\n+    let x: Box<_> = Box::new(3);\n     take_param(&x);\n     //~^ ERROR the trait bound `Box<{integer}>: Foo` is not satisfied\n }"}, {"sha": "5622d65cb175bb1001a27fc9f5c75afd7492170e", "filename": "src/test/ui/kindck/kindck-impl-type-params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n // Issue #14061: tests the interaction between generic implementation\n // parameter bounds and trait objects.\n \n-#![feature(box_syntax)]\n+\n \n use std::marker;\n \n@@ -34,15 +34,15 @@ fn foo<'a>() {\n }\n \n fn foo2<'a>() {\n-    let t: Box<S<String>> = box S(marker::PhantomData);\n+    let t: Box<S<String>> = Box::new(S(marker::PhantomData));\n     let a = t as Box<dyn Gettable<String>>;\n     //~^ ERROR : Copy` is not satisfied\n }\n \n fn foo3<'a>() {\n     struct Foo; // does not impl Copy\n \n-    let t: Box<S<Foo>> = box S(marker::PhantomData);\n+    let t: Box<S<Foo>> = Box::new(S(marker::PhantomData));\n     let a: Box<dyn Gettable<Foo>> = t;\n     //~^ ERROR : Copy` is not satisfied\n }"}, {"sha": "87d47556bdd2561ad9033507c8b5e2c88b90a7a9", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,7 +3,7 @@\n // revisions: curr object_safe_for_dispatch\n \n #![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n-#![feature(box_syntax)]\n+\n \n use std::any::Any;\n \n@@ -17,13 +17,13 @@ impl<T:Copy> Foo for T {\n fn take_param<T:Foo>(foo: &T) { }\n \n fn a() {\n-    let x: Box<_> = box 3;\n+    let x: Box<_> = Box::new(3);\n     take_param(&x); //[curr]~ ERROR E0277\n     //[object_safe_for_dispatch]~^ ERROR E0277\n }\n \n fn b() {\n-    let x: Box<_> = box 3;\n+    let x: Box<_> = Box::new(3);\n     let y = &x;\n     let z = &x as &dyn Foo;\n     //[curr]~^ ERROR E0038"}, {"sha": "1055fe7995ba629e5686933fd5c51f2128f26d1c", "filename": "src/test/ui/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flast-use-is-capture.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,13 +3,11 @@\n #![allow(dead_code)]\n // Make sure #1399 stays fixed\n \n-#![feature(box_syntax)]\n-\n struct A { a: Box<isize> }\n \n pub fn main() {\n     fn invoke<F>(f: F) where F: FnOnce() { f(); }\n-    let k: Box<_> = box 22;\n+    let k: Box<_> = 22.into();\n     let _u = A {a: k.clone()};\n     invoke(|| println!(\"{}\", k.clone()) )\n }"}, {"sha": "322f726156d0c6e91e23f938c41c1ec6e91c4f21", "filename": "src/test/ui/leak-unique-as-tydesc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fleak-unique-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fleak-unique-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fleak-unique-as-tydesc.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,9 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n fn leaky<T>(_t: T) { }\n \n-pub fn main() { let x = box 10; leaky::<Box<isize>>(x); }\n+pub fn main() {\n+    let x = Box::new(10);\n+    leaky::<Box<isize>>(x);\n+}"}, {"sha": "af47d5c072005b814f25907957830f45cdfe1f33", "filename": "src/test/ui/lint/lint-owned-heap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Flint%2Flint-owned-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Flint%2Flint-owned-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-owned-heap-memory.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,12 +1,12 @@\n #![allow(dead_code)]\n #![forbid(box_pointers)]\n-#![feature(box_syntax)]\n+\n \n struct Foo {\n     x: Box<isize> //~ ERROR type uses owned\n }\n \n fn main() {\n-    let _x : Foo = Foo {x : box 10};\n+    let _x: Foo = Foo { x : Box::new(10) };\n     //~^ ERROR type uses owned\n }"}, {"sha": "5ba3969707571acd7dda91698d0a938af5539ce2", "filename": "src/test/ui/lint/lint-owned-heap-memory.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Flint%2Flint-owned-heap-memory.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Flint%2Flint-owned-heap-memory.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-owned-heap-memory.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -13,8 +13,8 @@ LL | #![forbid(box_pointers)]\n error: type uses owned (Box type) pointers: Box<isize>\n   --> $DIR/lint-owned-heap-memory.rs:10:29\n    |\n-LL |     let _x : Foo = Foo {x : box 10};\n-   |                             ^^^^^^\n+LL |     let _x: Foo = Foo { x : Box::new(10) };\n+   |                             ^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4822a9b2c7ff825ec90ea435514fc9f1d25c2cd2", "filename": "src/test/ui/lint/unused/issue-47390-unused-variable-in-struct-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-47390-unused-variable-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-47390-unused-variable-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-47390-unused-variable-in-struct-pattern.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n-#![feature(box_syntax)]\n #![feature(box_patterns)]\n+\n #![warn(unused)] // UI tests pass `-A unused` (#43896)\n \n struct SoulHistory {\n@@ -67,7 +67,7 @@ fn main() {\n     };\n \n     // Boxed struct\n-    match box bag {\n+    match Box::new(bag) {\n         box Large::Suit { case } => {} //~ WARNING unused variable: `case`\n     };\n "}, {"sha": "cb83d4103dcedd375bd7d3ab2e38f7775d67a9b5", "filename": "src/test/ui/list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flist.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,8 +3,8 @@\n #![allow(non_camel_case_types)]\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n enum list { cons(isize, Box<list>), nil, }\n \n-pub fn main() { list::cons(10, box list::cons(11, box list::cons(12, box list::nil))); }\n+pub fn main() {\n+    list::cons(10, Box::new(list::cons(11, Box::new(list::cons(12, Box::new(list::nil))))));\n+}"}, {"sha": "1bc2ea6b9fef6914ef9fb827a028adf0bbceaf8d", "filename": "src/test/ui/liveness/liveness-move-call-arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n-#![feature(box_syntax)]\n-\n fn take(_x: Box<isize>) {}\n \n+\n fn main() {\n \n-    let x: Box<isize> = box 25;\n+    let x: Box<isize> = Box::new(25);\n+\n     loop {\n         take(x); //~ ERROR use of moved value: `x`\n     }"}, {"sha": "7c0e916eddcaa12e55d76996032d737c662b0c80", "filename": "src/test/ui/liveness/liveness-move-call-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,9 +1,9 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/liveness-move-call-arg.rs:9:14\n    |\n-LL |     let x: Box<isize> = box 25;\n+LL |     let x: Box<isize> = Box::new(25);\n    |         - move occurs because `x` has type `Box<isize>`, which does not implement the `Copy` trait\n-LL |     loop {\n+...\n LL |         take(x);\n    |              ^ value moved here, in previous iteration of loop\n "}, {"sha": "064be14d6d28cd13cf7177f7e3d48bc88802aa80", "filename": "src/test/ui/liveness/liveness-move-in-loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,8 @@\n-#![feature(box_syntax)]\n-\n fn main() {\n-    let y: Box<isize> = box 42;\n+\n+    let y: Box<isize> = 42.into();\n     let mut x: Box<isize>;\n+\n     loop {\n         println!(\"{}\", y);\n         loop {"}, {"sha": "832d4f8fa030f9fae223c2db1c27565e8e40d861", "filename": "src/test/ui/liveness/liveness-move-in-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of moved value: `y`\n   --> $DIR/liveness-move-in-loop.rs:11:25\n    |\n-LL |     let y: Box<isize> = box 42;\n+LL |     let y: Box<isize> = 42.into();\n    |         - move occurs because `y` has type `Box<isize>`, which does not implement the `Copy` trait\n ...\n LL |                     x = y;"}, {"sha": "7c0cd282c97e007303ad0002563b2563de0f6444", "filename": "src/test/ui/liveness/liveness-move-in-while.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,8 @@\n-#![feature(box_syntax)]\n-\n fn main() {\n-    let y: Box<isize> = box 42;\n+\n+    let y: Box<isize> = 42.into();\n     let mut x: Box<isize>;\n+\n     loop {\n         println!(\"{}\", y); //~ ERROR borrow of moved value: `y`\n         while true { while true { while true { x = y; x.clone(); } } }"}, {"sha": "6a8f239bd09a8a073862e455e3e15d7631167d78", "filename": "src/test/ui/liveness/liveness-move-in-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -21,7 +21,7 @@ LL |         while true { while true { while true { x = y; x.clone(); } } }\n error[E0382]: borrow of moved value: `y`\n   --> $DIR/liveness-move-in-while.rs:7:24\n    |\n-LL |     let y: Box<isize> = box 42;\n+LL |     let y: Box<isize> = 42.into();\n    |         - move occurs because `y` has type `Box<isize>`, which does not implement the `Copy` trait\n ...\n LL |         println!(\"{}\", y);"}, {"sha": "46102ca1eb11ebe3d58282e0a63cb881080d1956", "filename": "src/test/ui/liveness/liveness-use-after-move.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,8 @@\n-#![feature(box_syntax)]\n-\n fn main() {\n-    let x: Box<_> = box 5;\n+\n+    let x: Box<_> = 5.into();\n     let y = x;\n+\n     println!(\"{}\", *x); //~ ERROR borrow of moved value: `x`\n     y.clone();\n }"}, {"sha": "292ce013dcc7622aaaa2cce9a285009cbe79b702", "filename": "src/test/ui/liveness/liveness-use-after-move.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,11 @@\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/liveness-use-after-move.rs:6:20\n    |\n-LL |     let x: Box<_> = box 5;\n+LL |     let x: Box<_> = 5.into();\n    |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n LL |     let y = x;\n    |             - value moved here\n+LL | \n LL |     println!(\"{}\", *x);\n    |                    ^^ value borrowed here after move\n "}, {"sha": "dc33b961800ea8bf75bc8ecef9780493ab95a9da", "filename": "src/test/ui/map-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmap-types.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n-#![feature(box_syntax)]\n-\n use std::collections::HashMap;\n \n+\n+\n trait Map<K, V>\n {\n     fn get(&self, k: K) -> V { panic!() }\n@@ -12,7 +12,7 @@ impl<K, V> Map<K, V> for HashMap<K, V> {}\n // Test that trait types printed in error msgs include the type arguments.\n \n fn main() {\n-    let x: Box<HashMap<isize, isize>> = box HashMap::new();\n+    let x: Box<HashMap<isize, isize>> = HashMap::new().into();\n     let x: Box<dyn Map<isize, isize>> = x;\n     let y: Box<dyn Map<usize, isize>> = Box::new(x);\n     //~^ ERROR `Box<dyn Map<isize, isize>>: Map<usize, isize>` is not satisfied"}, {"sha": "f89019fe5859f91d3ec691309de635bfcd7fa1cf", "filename": "src/test/ui/methods/auxiliary/method_self_arg1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fauxiliary%2Fmethod_self_arg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fauxiliary%2Fmethod_self_arg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fauxiliary%2Fmethod_self_arg1.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,5 @@\n #![crate_type = \"lib\"]\n \n-#![feature(box_syntax)]\n-\n static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }\n@@ -19,8 +17,8 @@ impl Foo {\n         Foo::baz(self);\n         Foo::baz(*x);\n \n-        Foo::qux(box self);\n-        Foo::qux(box *x);\n+        Foo::qux(Box::new(self));\n+        Foo::qux(Box::new(*x));\n     }\n \n     pub fn bar(&self) {"}, {"sha": "96725456291ea0916608aeb7e008ef6d1ce4600a", "filename": "src/test/ui/methods/auxiliary/method_self_arg2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fauxiliary%2Fmethod_self_arg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fauxiliary%2Fmethod_self_arg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fauxiliary%2Fmethod_self_arg2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,5 @@\n #![crate_type = \"lib\"]\n \n-#![feature(box_syntax)]\n-\n static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }\n@@ -15,11 +13,11 @@ impl Foo {\n         // Test internal call.\n         Bar::foo1(&self);\n         Bar::foo2(self);\n-        Bar::foo3(box self);\n+        Bar::foo3(Box::new(self));\n \n         Bar::bar1(&self);\n         Bar::bar2(self);\n-        Bar::bar3(box self);\n+        Bar::bar3(Box::new(self));\n     }\n }\n "}, {"sha": "79b70a17ca1870d1cebd4a903c5681a85c650e48", "filename": "src/test/ui/methods/method-self-arg-aux1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-aux1.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // Test method calls with self as an argument (cross-crate)\n \n-#![feature(box_syntax)]\n-\n // aux-build:method_self_arg1.rs\n extern crate method_self_arg1;\n use method_self_arg1::Foo;\n@@ -12,7 +10,7 @@ fn main() {\n     // Test external call.\n     Foo::bar(&x);\n     Foo::baz(x);\n-    Foo::qux(box x);\n+    Foo::qux(Box::new(x));\n \n     x.foo(&x);\n "}, {"sha": "16487b54f174f550262dbadbdf1137310e61e9d8", "filename": "src/test/ui/methods/method-self-arg-aux2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-aux2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // Test method calls with self as an argument (cross-crate)\n \n-#![feature(box_syntax)]\n-\n // aux-build:method_self_arg2.rs\n extern crate method_self_arg2;\n use method_self_arg2::{Foo, Bar};\n@@ -12,11 +10,11 @@ fn main() {\n     // Test external call.\n     Bar::foo1(&x);\n     Bar::foo2(x);\n-    Bar::foo3(box x);\n+    Bar::foo3(Box::new(x));\n \n     Bar::bar1(&x);\n     Bar::bar2(x);\n-    Bar::bar3(box x);\n+    Bar::bar3(Box::new(x));\n \n     x.run_trait();\n "}, {"sha": "ffa7a552b25a3678e056b091f3e6be176de4dc49", "filename": "src/test/ui/methods/method-self-arg-trait.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-trait.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // Test method calls with self as an argument\n \n-#![feature(box_syntax)]\n-\n static mut COUNT: u64 = 1;\n \n #[derive(Copy, Clone)]\n@@ -44,11 +42,11 @@ impl Foo {\n         // Test internal call.\n         Bar::foo1(&self);\n         Bar::foo2(self);\n-        Bar::foo3(box self);\n+        Bar::foo3(Box::new(self));\n \n         Bar::bar1(&self);\n         Bar::bar2(self);\n-        Bar::bar3(box self);\n+        Bar::bar3(Box::new(self));\n     }\n }\n \n@@ -57,11 +55,11 @@ fn main() {\n     // Test external call.\n     Bar::foo1(&x);\n     Bar::foo2(x);\n-    Bar::foo3(box x);\n+    Bar::foo3(Box::new(x));\n \n     Bar::bar1(&x);\n     Bar::bar2(x);\n-    Bar::bar3(box x);\n+    Bar::bar3(Box::new(x));\n \n     x.baz();\n "}, {"sha": "f738fa19c852a0df39d3adb87cd81b061f3d75ab", "filename": "src/test/ui/methods/method-self-arg.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // Test method calls with self as an argument\n \n-#![feature(box_syntax)]\n-\n static mut COUNT: usize = 1;\n \n #[derive(Copy, Clone)]\n@@ -18,8 +16,8 @@ impl Foo {\n         Foo::baz(self);\n         Foo::baz(*x);\n \n-        Foo::qux(box self);\n-        Foo::qux(box *x);\n+        Foo::qux(Box::new(self));\n+        Foo::qux(Box::new(*x));\n     }\n \n     fn bar(&self) {\n@@ -40,7 +38,7 @@ fn main() {\n     // Test external call.\n     Foo::bar(&x);\n     Foo::baz(x);\n-    Foo::qux(box x);\n+    Foo::qux(Box::new(x));\n \n     x.foo(&x);\n "}, {"sha": "fc5766da9714b807881ef5a1836eba390dc7bbc6", "filename": "src/test/ui/methods/method-two-trait-defer-resolution-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-two-trait-defer-resolution-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-two-trait-defer-resolution-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-two-trait-defer-resolution-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -10,8 +10,6 @@\n // codegen the call as `Foo::foo(&x)` and let the specific impl get\n // chosen later.\n \n-#![feature(box_syntax)]\n-\n trait Foo {\n     fn foo(&self) -> isize;\n }\n@@ -37,7 +35,7 @@ fn call_foo_copy() -> isize {\n fn call_foo_other() -> isize {\n     let mut x: Vec<_> = Vec::new();\n     let y = x.foo();\n-    let z: Box<i32> = box 0;\n+    let z: Box<i32> = Box::new(0);\n     x.push(z);\n     y\n }"}, {"sha": "f98d075d18bba9204103aff0e7a5e1b66a083d8d", "filename": "src/test/ui/moves/move-1-unique.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-1-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(unused_mut)]\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n #[derive(Clone)]\n struct Triple {\n@@ -13,12 +12,12 @@ struct Triple {\n fn test(x: bool, foo: Box<Triple>) -> isize {\n     let bar = foo;\n     let mut y: Box<Triple>;\n-    if x { y = bar; } else { y = box Triple{x: 4, y: 5, z: 6}; }\n+    if x { y = bar; } else { y = Box::new(Triple{x: 4, y: 5, z: 6}); }\n     return y.y;\n }\n \n pub fn main() {\n-    let x: Box<_> = box Triple{x: 1, y: 2, z: 3};\n+    let x: Box<_> = Box::new(Triple{x: 1, y: 2, z: 3});\n     assert_eq!(test(true, x.clone()), 2);\n     assert_eq!(test(true, x.clone()), 2);\n     assert_eq!(test(true, x.clone()), 2);"}, {"sha": "8fda3c1c86c6039d2b768f37a6f747e82840aa72", "filename": "src/test/ui/moves/move-2-unique.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-2-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,11 +1,10 @@\n // run-pass\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n struct X { x: isize, y: isize, z: isize }\n \n pub fn main() {\n-    let x: Box<_> = box X{x: 1, y: 2, z: 3};\n+    let x: Box<_> = Box::new(X {x: 1, y: 2, z: 3});\n     let y = x;\n     assert_eq!(y.y, 2);\n }"}, {"sha": "5e010087465d9e1902eab6cd2d0133ceeccd104c", "filename": "src/test/ui/moves/move-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n struct X { x: isize, y: isize, z: isize }\n \n-pub fn main() { let x: Box<_> = box X {x: 1, y: 2, z: 3}; let y = x; assert_eq!(y.y, 2); }\n+pub fn main() { let x: Box<_> = Box::new(X {x: 1, y: 2, z: 3}); let y = x; assert_eq!(y.y, 2); }"}, {"sha": "8e5df2c3ff9fd6e93a155707545df7e77608f091", "filename": "src/test/ui/moves/move-3-unique.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-3-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(unused_mut)]\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n #[derive(Clone)]\n struct Triple {\n@@ -13,12 +12,12 @@ struct Triple {\n fn test(x: bool, foo: Box<Triple>) -> isize {\n     let bar = foo;\n     let mut y: Box<Triple>;\n-    if x { y = bar; } else { y = box Triple {x: 4, y: 5, z: 6}; }\n+    if x { y = bar; } else { y = Box::new(Triple {x: 4, y: 5, z: 6}); }\n     return y.y;\n }\n \n pub fn main() {\n-    let x: Box<_> = box Triple{x: 1, y: 2, z: 3};\n+    let x: Box<_> = Box::new(Triple{x: 1, y: 2, z: 3});\n     for _ in 0_usize..10000_usize {\n         assert_eq!(test(true, x.clone()), 2);\n     }"}, {"sha": "24aec7ea62c8b59635d85078ee3d18653309efbb", "filename": "src/test/ui/moves/move-4-unique.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-4-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n struct Triple {a: isize, b: isize, c: isize}\n \n@@ -13,7 +12,7 @@ fn test(foo: Box<Triple>) -> Box<Triple> {\n }\n \n pub fn main() {\n-    let x = box Triple{a: 1, b: 2, c: 3};\n+    let x = Box::new(Triple{a: 1, b: 2, c: 3});\n     let y = test(x);\n     assert_eq!(y.c, 3);\n }"}, {"sha": "63aa031a66e60137c09412eb85d38af3a37372a8", "filename": "src/test/ui/moves/move-4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-4.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n struct Triple { a: isize, b: isize, c: isize }\n \n@@ -13,7 +12,7 @@ fn test(foo: Box<Triple>) -> Box<Triple> {\n }\n \n pub fn main() {\n-    let x = box Triple{a: 1, b: 2, c: 3};\n+    let x = Box::new(Triple{ a: 1, b: 2, c: 3 });\n     let y = test(x);\n     assert_eq!(y.c, 3);\n }"}, {"sha": "9622c83750d3ed1b12deea187869ade8eaddfb7b", "filename": "src/test/ui/moves/move-arg-2-unique.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-arg-2-unique.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,12 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn test(foo: Box<Vec<isize>> ) { assert_eq!((*foo)[0], 10); }\n \n pub fn main() {\n-    let x = box vec![10];\n+    let x = Box::new(vec![10]);\n     // Test forgetting a local by move-in\n     test(x);\n \n     // Test forgetting a temporary by move-in.\n-    test(box vec![10]);\n+    test(Box::new(vec![10]));\n }"}, {"sha": "77ee06e192e73c17fc00915b211a850e9830a257", "filename": "src/test/ui/moves/move-arg-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-arg-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,12 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn test(foo: Box<Vec<isize>>) { assert_eq!((*foo)[0], 10); }\n \n pub fn main() {\n-    let x = box vec![10];\n+    let x = Box::new(vec![10]);\n     // Test forgetting a local by move-in\n     test(x);\n \n     // Test forgetting a temporary by move-in.\n-    test(box vec![10]);\n+    test(Box::new(vec![10]));\n }"}, {"sha": "b96ef8e19eb51a4fcf3d12413779267ab03fb587", "filename": "src/test/ui/moves/move-guard-same-consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -8,10 +8,10 @@\n // that assumption did not hold, at least not in the long run (namely,\n // overlapping patterns were turned into warnings rather than errors).\n \n-#![feature(box_syntax)]\n+\n \n fn main() {\n-    let x: Box<_> = box 1;\n+    let x: Box<_> = Box::new(1);\n \n     let v = (1, 2);\n "}, {"sha": "2048fefefa31b69855cdbc0df73befa07709c375", "filename": "src/test/ui/moves/move-guard-same-consts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/move-guard-same-consts.rs:20:24\n    |\n-LL |     let x: Box<_> = box 1;\n+LL |     let x: Box<_> = Box::new(1);\n    |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n ...\n LL |         (1, 2) if take(x) => (),"}, {"sha": "36e39fea6af3b7ef308efb23dc829c89ce2edaca", "filename": "src/test/ui/moves/move-in-guard-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let x: Box<_> = box 1;\n+\n+\n+    let x: Box<_> = Box::new(1);\n \n     let v = (1, 2);\n "}, {"sha": "5e9aa66b90daebd6e4fc9d343e640ef009aa194f", "filename": "src/test/ui/moves/move-in-guard-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/move-in-guard-1.rs:10:24\n    |\n-LL |     let x: Box<_> = box 1;\n+LL |     let x: Box<_> = Box::new(1);\n    |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n ...\n LL |         (1, _) if take(x) => (),"}, {"sha": "085b7ec6e0ccc14d5110c46bd13f014c3e275dc7", "filename": "src/test/ui/moves/move-in-guard-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,5 @@\n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let x: Box<_> = box 1;\n+    let x: Box<_> = Box::new(1);\n \n     let v = (1, 2);\n "}, {"sha": "ea350926b1519f77a1264274880d4dda57509274", "filename": "src/test/ui/moves/move-in-guard-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/move-in-guard-2.rs:10:24\n+  --> $DIR/move-in-guard-2.rs:8:24\n    |\n-LL |     let x: Box<_> = box 1;\n+LL |     let x: Box<_> = Box::new(1);\n    |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n ...\n LL |         (_, 2) if take(x) => (),"}, {"sha": "66912fa4d099809b8c9901f7906f6c5552b6822e", "filename": "src/test/ui/moves/move-out-of-tuple-field.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-tuple-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-tuple-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-tuple-field.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,13 @@\n-#![feature(box_syntax)]\n-\n struct Foo(Box<isize>);\n \n+\n+\n fn main() {\n-    let x: (Box<_>,) = (box 1,);\n+    let x: (Box<_>,) = (Box::new(1),);\n     let y = x.0;\n     let z = x.0; //~ ERROR use of moved value: `x.0`\n \n-    let x = Foo(box 1);\n+    let x = Foo(Box::new(1));\n     let y = x.0;\n     let z = x.0; //~ ERROR use of moved value: `x.0`\n }"}, {"sha": "eca33167f454ae6ea9ee7777c1c45a6815a86a0f", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,5 @@\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n+\n \n struct S {\n     x: Box<E>\n@@ -16,7 +16,7 @@ fn f<G>(s: &S, g: G) where G: FnOnce(&S) {\n }\n \n fn main() {\n-    let s = S { x: box E::Bar(box 42) };\n+    let s = S { x: Box::new(E::Bar(Box::new(42))) };\n     loop {\n         f(&s, |hellothere| {\n             match hellothere.x { //~ ERROR cannot move out"}, {"sha": "76b7aab542de8313d351541b229dbe5b127311c5", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n-#![feature(box_syntax, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n \n fn test(_x: Box<usize>) {}\n \n fn main() {\n-    let i = box 3;\n+    let i = Box::new(3);\n     let _f = to_fn(|| test(i)); //~ ERROR cannot move out\n }"}, {"sha": "ce930eee2e919a8d336317f87d15aa2b7fc86c53", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of `i`, a captured variable in an `Fn` closure\n   --> $DIR/moves-based-on-type-move-out-of-closure-env-issue-1965.rs:9:28\n    |\n-LL |     let i = box 3;\n+LL |     let i = Box::new(3);\n    |         - captured outer variable\n LL |     let _f = to_fn(|| test(i));\n    |                    --------^-"}, {"sha": "2e67d8f8a69131676f12d6c84b356d0111a613af", "filename": "src/test/ui/moves/moves-based-on-type-tuple.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n-#![feature(box_syntax)]\n-\n fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> {\n-    box (x, x)\n+\n+\n+    Box::new((x, x))\n     //~^ use of moved value: `x` [E0382]\n }\n \n fn main() {\n-    dup(box 3);\n+    dup(Box::new(3));\n }"}, {"sha": "eef8ce61fa9d8aef6b354c247696b3daa9c471fe", "filename": "src/test/ui/moves/moves-based-on-type-tuple.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,12 +1,13 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/moves-based-on-type-tuple.rs:4:13\n+  --> $DIR/moves-based-on-type-tuple.rs:4:18\n    |\n LL | fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> {\n    |        - move occurs because `x` has type `Box<isize>`, which does not implement the `Copy` trait\n-LL |     box (x, x)\n-   |          -  ^ value used here after move\n-   |          |\n-   |          value moved here\n+...\n+LL |     Box::new((x, x))\n+   |               -  ^ value used here after move\n+   |               |\n+   |               value moved here\n \n error: aborting due to previous error\n "}, {"sha": "72957c49fc8ae9f7e0e1fb858acc20fb9ff27f74", "filename": "src/test/ui/moves/moves-sru-moved-field.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-sru-moved-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-sru-moved-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-sru-moved-field.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n-#![feature(box_syntax)]\n-\n type Noncopyable = Box<isize>;\n \n+\n+\n struct Foo {\n     copied: isize,\n     moved: Box<isize>,\n@@ -10,8 +10,8 @@ struct Foo {\n \n fn test0(f: Foo, g: Noncopyable, h: Noncopyable) {\n     // just copy implicitly copyable fields from `f`, no moves:\n-    let _b = Foo {moved: box 1, noncopyable: g, ..f};\n-    let _c = Foo {moved: box 2, noncopyable: h, ..f};\n+    let _b = Foo {moved: Box::new(1), noncopyable: g, ..f};\n+    let _c = Foo {moved: Box::new(2), noncopyable: h, ..f};\n }\n \n fn test1(f: Foo, g: Noncopyable, h: Noncopyable) {"}, {"sha": "1e682fc4b66c41ec3c8602627e5746a715192a93", "filename": "src/test/ui/mut-function-arguments.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut-function-arguments.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,21 +1,19 @@\n // run-pass\n \n-#![feature(box_syntax)]\n-\n fn f(mut y: Box<isize>) {\n     *y = 5;\n     assert_eq!(*y, 5);\n }\n \n fn g() {\n     let frob = |mut q: Box<isize>| { *q = 2; assert_eq!(*q, 2); };\n-    let w = box 37;\n+    let w = Box::new(37);\n     frob(w);\n \n }\n \n pub fn main() {\n-    let z = box 17;\n+    let z = Box::new(17);\n     f(z);\n     g();\n }"}, {"sha": "080faab73261925d810a1b1ede3cd465c07538ad", "filename": "src/test/ui/mut/mut-cross-borrowing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,8 @@\n-#![feature(box_syntax)]\n-\n fn f(_: &mut isize) {}\n \n fn main() {\n-    let mut x: Box<_> = box 3;\n+\n+    let mut x: Box<_> = Box::new(3);\n+\n     f(x)    //~ ERROR mismatched types\n }"}, {"sha": "c56e1dd46254ff59ee64d0bf94fbb67f0e8134e1", "filename": "src/test/ui/new-box-syntax.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fnew-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fnew-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnew-box-syntax.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -5,7 +5,6 @@\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n #![allow(dead_code, unused_variables)]\n-#![feature(box_syntax)]\n \n // Tests that the new `box` syntax works with unique pointers.\n \n@@ -17,12 +16,12 @@ struct Structure {\n }\n \n pub fn main() {\n-    let y: Box<isize> = box 2;\n-    let b: Box<isize> = box (1 + 2);\n-    let c = box (3 + 4);\n+    let y: Box<isize> = Box::new(2);\n+    let b: Box<isize> = Box::new(1 + 2);\n+    let c = Box::new(3 + 4);\n \n-    let s: Box<Structure> = box Structure {\n+    let s: Box<Structure> = Box::new(Structure {\n         x: 3,\n         y: 4,\n-    };\n+    });\n }"}, {"sha": "96a3b197f461cf59a76fc9869e89cecd4a275e6d", "filename": "src/test/ui/new-box.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fnew-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fnew-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnew-box.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(box_syntax)]\n-\n fn f(x: Box<isize>) {\n     let y: &isize = &*x;\n     println!(\"{}\", *x);\n@@ -27,6 +25,6 @@ fn g(x: Box<dyn Trait>) {\n }\n \n fn main() {\n-    f(box 1234);\n-    g(box Struct as Box<dyn Trait>);\n+    f(Box::new(1234));\n+    g(Box::new(Struct) as Box<dyn Trait>);\n }"}, {"sha": "f6bbb2d14b003afb80e9f1d0225663f9bbe1be9a", "filename": "src/test/ui/nll/issue-52663-trait-object.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,16 +1,16 @@\n-#![feature(box_syntax)]\n-\n trait Foo { fn get(&self); }\n \n impl<A> Foo for A {\n     fn get(&self) { }\n }\n \n+\n+\n fn main() {\n     let _ = {\n         let tmp0 = 3;\n         let tmp1 = &tmp0;\n-        box tmp1 as Box<dyn Foo + '_>\n+        Box::new(tmp1) as Box<dyn Foo + '_>\n     };\n     //~^^^ ERROR `tmp0` does not live long enough\n }"}, {"sha": "5cedea6e66520a5e022ce895232324b31bb79272", "filename": "src/test/ui/nll/issue-52663-trait-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,8 +3,8 @@ error[E0597]: `tmp0` does not live long enough\n    |\n LL |         let tmp1 = &tmp0;\n    |                    ^^^^^ borrowed value does not live long enough\n-LL |         box tmp1 as Box<dyn Foo + '_>\n-   |         ----------------------------- borrow later used here\n+LL |         Box::new(tmp1) as Box<dyn Foo + '_>\n+   |         ----------------------------------- borrow later captured here by trait object\n LL |     };\n    |     - `tmp0` dropped here while still borrowed\n "}, {"sha": "f9edba6743499dddcfe13e4ea0e8b5095cf3a2bf", "filename": "src/test/ui/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnullable-pointer-iotareduction.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(box_syntax)]\n-\n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,\n // which \"says that a destructor applied to an object built from a constructor\n // behaves as expected\".  -- https://coq.inria.fr/doc/language/core/conversion.html#iota-reduction\n@@ -64,7 +62,7 @@ macro_rules! check_type {\n \n pub fn main() {\n     check_type!(&17, &isize);\n-    check_type!(box 18, Box<isize>);\n+    check_type!(Box::new(18), Box<isize>);\n     check_type!(\"foo\".to_string(), String);\n     check_type!(vec![20, 22], Vec<isize>);\n     check_type!(main, fn(), |pthing| {"}, {"sha": "fce1341fc74154c7105cdd86407232660fef973b", "filename": "src/test/ui/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,9 +3,6 @@\n // closed over do not contain managed values, and thus the boxes do\n // not have headers.\n \n-#![feature(box_syntax)]\n-\n-\n trait FooTrait {\n     fn foo(&self) -> usize;\n }\n@@ -22,9 +19,9 @@ impl FooTrait for BarStruct {\n \n pub fn main() {\n     let foos: Vec<Box<dyn FooTrait>> = vec![\n-        box BarStruct{ x: 0 } as Box<dyn FooTrait>,\n-        box BarStruct{ x: 1 } as Box<dyn FooTrait>,\n-        box BarStruct{ x: 2 } as Box<dyn FooTrait>\n+        Box::new(BarStruct{ x: 0 }) as Box<dyn FooTrait>,\n+        Box::new(BarStruct{ x: 1 }) as Box<dyn FooTrait>,\n+        Box::new(BarStruct{ x: 2 }) as Box<dyn FooTrait>,\n     ];\n \n     for i in 0..foos.len() {"}, {"sha": "15677a5185c2f1a2776c3f84b6be7b9d496189de", "filename": "src/test/ui/objects-owned-object-owned-method.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fobjects-owned-object-owned-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fobjects-owned-object-owned-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobjects-owned-object-owned-method.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,8 +3,6 @@\n // closed over contain managed values. This implies that the boxes\n // will have headers that must be skipped over.\n \n-#![feature(box_syntax)]\n-\n trait FooTrait {\n     fn foo(self: Box<Self>) -> usize;\n }\n@@ -20,6 +18,6 @@ impl FooTrait for BarStruct {\n }\n \n pub fn main() {\n-    let foo = box BarStruct{ x: 22 } as Box<dyn FooTrait>;\n+    let foo = Box::new(BarStruct{ x: 22 }) as Box<dyn FooTrait>;\n     assert_eq!(22, foo.foo());\n }"}, {"sha": "f36682a3dd82132b577ccfece5b28e9e7147c694", "filename": "src/test/ui/occurs-check-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foccurs-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foccurs-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n-#![feature(box_syntax)]\n-\n fn main() {\n+\n     let f;\n     let g;\n+\n     g = f;\n-    f = box g;\n+    f = Box::new(g);\n     //~^  ERROR mismatched types\n     //~| cyclic type of infinite size\n }"}, {"sha": "dcbfc81b4d51928f25c43cf3f06c4dd1434002fc", "filename": "src/test/ui/occurs-check-2.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foccurs-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foccurs-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check-2.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,10 @@\n error[E0308]: mismatched types\n   --> $DIR/occurs-check-2.rs:7:9\n    |\n-LL |     f = box g;\n-   |         ^^^^^ cyclic type of infinite size\n-   |\n-help: try using a conversion method\n-   |\n-LL |     f = (box g).to_string();\n-   |         +     +++++++++++++\n+LL |     f = Box::new(g);\n+   |         ^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n+   |         |\n+   |         cyclic type of infinite size\n \n error: aborting due to previous error\n "}, {"sha": "aec52d839766ad3e42ec040a30a6cf4e0572bae7", "filename": "src/test/ui/occurs-check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,8 @@\n-#![feature(box_syntax)]\n-\n fn main() {\n+\n     let f;\n-    f = box f;\n+\n+    f = Box::new(f);\n     //~^ ERROR mismatched types\n     //~| cyclic type of infinite size\n }"}, {"sha": "3e1ef2e719ad570a6d2f497a8293873cbc7f050a", "filename": "src/test/ui/occurs-check.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foccurs-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foccurs-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,10 @@\n error[E0308]: mismatched types\n   --> $DIR/occurs-check.rs:5:9\n    |\n-LL |     f = box f;\n-   |         ^^^^^ cyclic type of infinite size\n-   |\n-help: try using a conversion method\n-   |\n-LL |     f = (box f).to_string();\n-   |         +     +++++++++++++\n+LL |     f = Box::new(f);\n+   |         ^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n+   |         |\n+   |         cyclic type of infinite size\n \n error: aborting due to previous error\n "}, {"sha": "7c20a2b2f94e8d3fc223c5bb2ef15fa841da5f9a", "filename": "src/test/ui/output-slot-variants.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foutput-slot-variants.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -7,22 +7,21 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n \n struct A { a: isize, b: isize }\n struct Abox { a: Box<isize>, b: Box<isize> }\n \n fn ret_int_i() -> isize { 10 }\n \n-fn ret_ext_i() -> Box<isize> { box 10 }\n+fn ret_ext_i() -> Box<isize> { Box::new(10) }\n \n fn ret_int_rec() -> A { A {a: 10, b: 10} }\n \n-fn ret_ext_rec() -> Box<A> { box A {a: 10, b: 10} }\n+fn ret_ext_rec() -> Box<A> { Box::new(A {a: 10, b: 10}) }\n \n-fn ret_ext_mem() -> Abox { Abox {a: box 10, b: box 10} }\n+fn ret_ext_mem() -> Abox { Abox {a: Box::new(10), b: Box::new(10) } }\n \n-fn ret_ext_ext_mem() -> Box<Abox> { box Abox{a: box 10, b: box 10} }\n+fn ret_ext_ext_mem() -> Box<Abox> { Box::new(Abox{a: Box::new(10), b: Box::new(10) }) }\n \n pub fn main() {\n     let mut int_i: isize;"}, {"sha": "cae3ec906211e86b60cf0b4a3d1cafb1f2ff4ccb", "filename": "src/test/ui/overloaded/overloaded-autoderef.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-autoderef.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,8 +2,6 @@\n #![allow(unused_variables)]\n #![allow(stable_features)]\n \n-#![feature(box_syntax, core)]\n-\n use std::cell::RefCell;\n use std::rc::Rc;\n \n@@ -14,7 +12,7 @@ struct Point {\n }\n \n pub fn main() {\n-    let box_5: Box<_> = box 5_usize;\n+    let box_5: Box<_> = Box::new(5_usize);\n     let point = Rc::new(Point {x: 2, y: 4});\n     assert_eq!(point.x, 2);\n     assert_eq!(point.y, 4);"}, {"sha": "41f9efa8c1619348d4203c63645756b696b79617", "filename": "src/test/ui/overloaded/overloaded-index-autoderef.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-index-autoderef.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,8 +3,6 @@\n \n // Test overloaded indexing combined with autoderef.\n \n-#![feature(box_syntax, core)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n@@ -47,10 +45,10 @@ impl Int for isize {\n }\n \n fn main() {\n-    let mut f: Box<_> = box Foo {\n+    let mut f: Box<_> = Box::new(Foo {\n         x: 1,\n         y: 2,\n-    };\n+    });\n \n     assert_eq!(f[1], 2);\n "}, {"sha": "7636025c25b8324c5c7345c760590fef141aff2f", "filename": "src/test/ui/panics/args-panic.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpanics%2Fargs-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpanics%2Fargs-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fargs-panic.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,12 +2,10 @@\n // error-pattern:meep\n // ignore-emscripten no processes\n \n-#![feature(box_syntax)]\n-\n fn f(_a: isize, _b: isize, _c: Box<isize>) {\n     panic!(\"moop\");\n }\n \n fn main() {\n-    f(1, panic!(\"meep\"), box 42);\n+    f(1, panic!(\"meep\"), Box::new(42));\n }"}, {"sha": "c7df5365474e950970670ed9230f716ec5dba435", "filename": "src/test/ui/panics/panic-macro-any.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,9 +2,8 @@\n // error-pattern:panicked at 'Box<dyn Any>'\n // ignore-emscripten no processes\n \n-#![feature(box_syntax)]\n #![allow(non_fmt_panics)]\n \n fn main() {\n-    panic!(box 413 as Box<dyn std::any::Any + Send>);\n+    panic!(Box::new(413) as Box<dyn std::any::Any + Send>);\n }"}, {"sha": "61819cabdf178514905a96e47a0525a298835d83", "filename": "src/test/ui/parser/trailing-plus-in-bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fparser%2Ftrailing-plus-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fparser%2Ftrailing-plus-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-plus-in-bounds.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,9 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![feature(box_syntax)]\n #![allow(bare_trait_objects)]\n \n use std::fmt::Debug;\n \n fn main() {\n-    let x: Box<Debug+> = box 3 as Box<Debug+>; // Trailing `+` is OK\n+    let x: Box<Debug+> = Box::new(3) as Box<Debug+>; // Trailing `+` is OK\n }"}, {"sha": "3cb92a54029dc03cdea9190fd3762f139f767f25", "filename": "src/test/ui/pattern/usefulness/issue-12116.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,9 +1,9 @@\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n #![deny(unreachable_patterns)]\n \n+\n enum IntList {\n     Cons(isize, Box<IntList>),\n     Nil\n@@ -12,9 +12,9 @@ enum IntList {\n fn tail(source_list: &IntList) -> IntList {\n     match source_list {\n         &IntList::Cons(val, box ref next_list) => tail(next_list),\n-        &IntList::Cons(val, box IntList::Nil)  => IntList::Cons(val, box IntList::Nil),\n-//~^ ERROR unreachable pattern\n-        _                          => panic!()\n+        &IntList::Cons(val, box IntList::Nil)  => IntList::Cons(val, Box::new(IntList::Nil)),\n+        //~^ ERROR unreachable pattern\n+        _ => panic!(),\n     }\n }\n "}, {"sha": "7f15c4703a31c2238ef4a9da649bc6411b75ff09", "filename": "src/test/ui/pattern/usefulness/issue-12116.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,11 +1,11 @@\n error: unreachable pattern\n   --> $DIR/issue-12116.rs:15:9\n    |\n-LL |         &IntList::Cons(val, box IntList::Nil)  => IntList::Cons(val, box IntList::Nil),\n+LL |         &IntList::Cons(val, box IntList::Nil)  => IntList::Cons(val, Box::new(IntList::Nil)),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-12116.rs:5:9\n+  --> $DIR/issue-12116.rs:4:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "6215a23980d6d32a75f5f362b738bb039a3a51de", "filename": "src/test/ui/pattern/usefulness/issue-3601.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n struct HTMLImageData {\n     image: Option<String>\n@@ -23,8 +22,9 @@ struct NodeData {\n \n fn main() {\n     let mut id = HTMLImageData { image: None };\n-    let ed = ElementData { kind: box ElementKind::HTMLImageElement(id) };\n-    let n = NodeData {kind : box NodeKind::Element(ed)};\n+    let ed = ElementData { kind: Box::new(ElementKind::HTMLImageElement(id)) };\n+    let n = NodeData { kind: Box::new(NodeKind::Element(ed)) };\n+\n     // n.b. span could be better\n     match n.kind {\n         box NodeKind::Element(ed) => match ed.kind { //~ ERROR non-exhaustive patterns"}, {"sha": "2f2ece75ebeeb0c7cead9f59b4e96559cbc7a045", "filename": "src/test/ui/pure-sum.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpure-sum.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -5,8 +5,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n fn sums_to(v: Vec<isize> , sum: isize) -> bool {\n     let mut i = 0;\n     let mut sum0 = 0;\n@@ -19,7 +17,7 @@ fn sums_to(v: Vec<isize> , sum: isize) -> bool {\n \n fn sums_to_using_uniq(v: Vec<isize> , sum: isize) -> bool {\n     let mut i = 0;\n-    let mut sum0: Box<_> = box 0;\n+    let mut sum0: Box<_> = 0.into();\n     while i < v.len() {\n         *sum0 += v[i];\n         i += 1;\n@@ -41,7 +39,7 @@ struct F<T> { f: T }\n \n fn sums_to_using_uniq_rec(v: Vec<isize> , sum: isize) -> bool {\n     let mut i = 0;\n-    let mut sum0 = F::<Box<_>> {f: box 0};\n+    let mut sum0 = F::<Box<_>> {f: 0.into() };\n     while i < v.len() {\n         *sum0.f += v[i];\n         i += 1;"}, {"sha": "7f32b8b91a6f0c6a7f20295ffe65f99c6fd6c9ab", "filename": "src/test/ui/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frcvr-borrowed-to-region.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![allow(non_camel_case_types)]\n-#![feature(box_syntax)]\n \n trait get {\n     fn get(self) -> isize;\n@@ -17,7 +16,7 @@ impl<'a> get for &'a isize {\n }\n \n pub fn main() {\n-    let x: Box<_> = box 6;\n+    let x: Box<_> = 6.into();\n     let y = x.get();\n     println!(\"y={}\", y);\n     assert_eq!(y, 6);"}, {"sha": "6049321337c75379051186e3889edf3f87d16b4d", "filename": "src/test/ui/reachable/expr_again.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Freachable%2Fexpr_again.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Freachable%2Fexpr_again.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,5 @@\n-#![feature(box_syntax)]\n #![allow(unused_variables)]\n+\n #![deny(unreachable_code)]\n \n fn main() {"}, {"sha": "3277bf0d52b201babb349bb9e39c6548ae8478e3", "filename": "src/test/ui/reachable/unreachable-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Freachable%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Freachable%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-arm.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,5 @@\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n+\n #![allow(dead_code)]\n #![deny(unreachable_patterns)]\n "}, {"sha": "d8f2abb0c3c217039f9aed0cae44081f6ae9cfd8", "filename": "src/test/ui/regions/issue-12470.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fissue-12470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fissue-12470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-12470.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n-#![feature(box_syntax)]\n-\n trait X {\n     fn get_i(&self) -> isize;\n }\n \n \n+\n+\n struct B {\n     i: isize\n }\n@@ -24,7 +24,7 @@ fn make_a<'a>(p: &'a dyn X) -> A<'a> {\n }\n \n fn make_make_a<'a>() -> A<'a> {\n-    let b: Box<B> = box B {i:1};\n+    let b: Box<B> = Box::new(B { i: 1 });\n     let bb: &B = &*b;\n     make_a(bb)  //~ ERROR cannot return value referencing local data `*b`\n }"}, {"sha": "152abe109bca49913e799d2d38324c561d047ac1", "filename": "src/test/ui/regions/regions-borrow-at.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-borrow-at.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn foo(x: &usize) -> usize {\n     *x\n }\n \n pub fn main() {\n-    let p: Box<_> = box 22;\n+    let p: Box<_> = Box::new(22);\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22);"}, {"sha": "adc6b1939da7f7e297a3c9f570668b5f8527644b", "filename": "src/test/ui/regions/regions-borrow-uniq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-borrow-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-borrow-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-borrow-uniq.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn foo(x: &usize) -> usize {\n     *x\n }\n \n pub fn main() {\n-    let p: Box<_> = box 3;\n+    let p: Box<_> = Box::new(3);\n     let r = foo(&*p);\n     assert_eq!(r, 3);\n }"}, {"sha": "428477e24899a8437733de8f6b04924a8e41e4ae", "filename": "src/test/ui/regions/regions-close-associated-type-into-object.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,7 @@\n-#![feature(box_syntax)]\n-\n trait X {}\n \n+\n+\n trait Iter {\n     type Item: X;\n \n@@ -18,7 +18,7 @@ fn bad1<T: Iter>(v: T) -> Box<dyn X + 'static>\n fn bad2<T: Iter>(v: T) -> Box<dyn X + 'static>\n     where Box<T::Item> : X\n {\n-    let item: Box<_> = box v.into_item();\n+    let item: Box<_> = Box::new(v.into_item());\n     Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n }\n \n@@ -31,7 +31,7 @@ fn bad3<'a, T: Iter>(v: T) -> Box<dyn X + 'a>\n fn bad4<'a, T: Iter>(v: T) -> Box<dyn X + 'a>\n     where Box<T::Item> : X\n {\n-    let item: Box<_> = box v.into_item();\n+    let item: Box<_> = Box::new(v.into_item());\n     Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n }\n "}, {"sha": "2dc33d5671ff0597d14d9aa7fce9ff2a87a63ae2", "filename": "src/test/ui/regions/regions-close-object-into-object-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,15 +1,15 @@\n-#![feature(box_syntax)]\n #![allow(warnings)]\n \n trait A<T> { }\n+\n struct B<'a, T:'a>(&'a (A<T>+'a));\n \n trait X { }\n \n impl<'a, T> X for B<'a, T> {}\n \n fn f<'a, T:'static, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-    box B(&*v) as Box<X> //~ ERROR cannot return value referencing local data `*v`\n+    Box::new(B(&*v)) as Box<X> //~ ERROR cannot return value referencing local data `*v`\n }\n \n fn main() {}"}, {"sha": "5bfaeb295c352d1b771b202ae8ef44e302988cef", "filename": "src/test/ui/regions/regions-close-object-into-object-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-1.rs:12:5\n    |\n-LL |     box B(&*v) as Box<X>\n-   |     ^^^^^^---^^^^^^^^^^^\n-   |     |     |\n-   |     |     `*v` is borrowed here\n+LL |     Box::new(B(&*v)) as Box<X>\n+   |     ^^^^^^^^^^^---^^^^^^^^^^^^\n+   |     |          |\n+   |     |          `*v` is borrowed here\n    |     returns a value referencing data owned by the current function\n \n error: aborting due to previous error"}, {"sha": "410fab962f7208155c26a8f01becedd2c594c261", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,20 +1,20 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-close-object-into-object-2.rs:10:5\n+  --> $DIR/regions-close-object-into-object-2.rs:9:5\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |      -- lifetime `'a` defined here\n-LL |     box B(&*v) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n \n error[E0515]: cannot return value referencing local data `*v`\n-  --> $DIR/regions-close-object-into-object-2.rs:10:5\n+  --> $DIR/regions-close-object-into-object-2.rs:9:5\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |     ^^^^^^---^^^^^^^^^^^^^^^\n-   |     |     |\n-   |     |     `*v` is borrowed here\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^^^^---^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          `*v` is borrowed here\n    |     returns a value referencing data owned by the current function\n \n error: aborting due to 2 previous errors"}, {"sha": "9c41174e24d8db96cc84b0c58fc2a99948fe3f86", "filename": "src/test/ui/regions/regions-close-object-into-object-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,12 @@\n-#![feature(box_syntax)]\n-\n trait A<T> { }\n+\n struct B<'a, T:'a>(&'a (dyn A<T> + 'a));\n \n trait X { }\n impl<'a, T> X for B<'a, T> {}\n \n fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n-    box B(&*v) as Box<dyn X> //~ ERROR E0759\n+    Box::new(B(&*v)) as Box<dyn X> //~ ERROR E0759\n }\n \n fn main() { }"}, {"sha": "9a7df8c0188b193f6027a3a71a911dd88b450195", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/regions-close-object-into-object-2.rs:10:11\n+  --> $DIR/regions-close-object-into-object-2.rs:9:16\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |                         ------------------ this data with lifetime `'a`...\n-LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^ ...is captured here, requiring it to live as long as `'static`\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |                ^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |"}, {"sha": "78d93b0ece5b656612590cc769beafbf8694d8f2", "filename": "src/test/ui/regions/regions-close-object-into-object-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,14 +1,14 @@\n-#![feature(box_syntax)]\n #![allow(warnings)]\n \n trait A<T> { }\n+\n struct B<'a, T:'a>(&'a (A<T>+'a));\n \n trait X { }\n impl<'a, T> X for B<'a, T> {}\n \n fn h<'a, T, U:'static>(v: Box<A<U>+'static>) -> Box<X+'static> {\n-    box B(&*v) as Box<X> //~ ERROR cannot return value referencing local data `*v`\n+    Box::new(B(&*v)) as Box<X> //~ ERROR cannot return value referencing local data `*v`\n }\n \n fn main() {}"}, {"sha": "9f92c40e1e18d1d7f11e3cb07b363bee55198842", "filename": "src/test/ui/regions/regions-close-object-into-object-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-3.rs:11:5\n    |\n-LL |     box B(&*v) as Box<X>\n-   |     ^^^^^^---^^^^^^^^^^^\n-   |     |     |\n-   |     |     `*v` is borrowed here\n+LL |     Box::new(B(&*v)) as Box<X>\n+   |     ^^^^^^^^^^^---^^^^^^^^^^^^\n+   |     |          |\n+   |     |          `*v` is borrowed here\n    |     returns a value referencing data owned by the current function\n \n error: aborting due to previous error"}, {"sha": "e2cd864ea020e63cd5540d134b0dce51ca759fd9", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,39 +1,55 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+  --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |     ^^^^^^^^^^\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `U: 'static`...\n+\n+error[E0310]: the parameter type `U` may not live long enough\n+  --> $DIR/regions-close-object-into-object-4.rs:9:5\n+   |\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `U: 'static`...\n+\n+error[E0310]: the parameter type `U` may not live long enough\n+  --> $DIR/regions-close-object-into-object-4.rs:9:5\n+   |\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `U: 'static`...\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+  --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |      -- lifetime `'a` defined here\n-LL |     box B(&*v) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n \n error[E0515]: cannot return value referencing local data `*v`\n-  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+  --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |     ^^^^^^---^^^^^^^^^^^^^^^\n-   |     |     |\n-   |     |     `*v` is borrowed here\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^^^^---^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          `*v` is borrowed here\n    |     returns a value referencing data owned by the current function\n \n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:10:9\n+  --> $DIR/regions-close-object-into-object-4.rs:9:14\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |         ^^^^^^\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |              ^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `U: 'static`...\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0310, E0515.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "2a06a2b7c0513630af945507700c46592af52a26", "filename": "src/test/ui/regions/regions-close-object-into-object-4.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,13 +1,12 @@\n-#![feature(box_syntax)]\n-\n trait A<T> { }\n+\n struct B<'a, T:'a>(&'a (dyn A<T> + 'a));\n \n trait X { }\n impl<'a, T> X for B<'a, T> {}\n \n fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-    box B(&*v) as Box<dyn X> //~ ERROR E0759\n+    Box::new(B(&*v)) as Box<dyn X> //~ ERROR E0759\n }\n \n fn main() {}"}, {"sha": "a7a9b16b0801379c4dcb0bb40675ca230bb9b9ca", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/regions-close-object-into-object-4.rs:10:11\n+  --> $DIR/regions-close-object-into-object-4.rs:9:16\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |                   ---------------- this data with lifetime `'a`...\n-LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^ ...is captured here, requiring it to live as long as `'static`\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |                ^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |"}, {"sha": "7486e73e66ab31122bda6f9b0af5301668a2cc94", "filename": "src/test/ui/regions/regions-close-object-into-object-5.nll.stderr", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,29 +1,45 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n-LL |     box B(&*v) as Box<X>\n-   |     ^^^^^^^^^^\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+   |\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+   |\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'static`...\n \n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n-LL |     box B(&*v) as Box<X>\n-   |     ^^^^^^---^^^^^^^^^^^\n-   |     |     |\n-   |     |     `*v` is borrowed here\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^^^^---^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          `*v` is borrowed here\n    |     returns a value referencing data owned by the current function\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:9\n+  --> $DIR/regions-close-object-into-object-5.rs:17:14\n    |\n-LL |     box B(&*v) as Box<X>\n-   |         ^^^^^^\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |              ^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'static`...\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0310, E0515.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "5471c375b4990ddf903a171fb21679825955e69e", "filename": "src/test/ui/regions/regions-close-object-into-object-5.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,6 @@\n-#![feature(box_syntax)]\n #![allow(warnings)]\n \n+\n trait A<T>\n {\n     fn get(&self) -> T { panic!() }\n@@ -14,13 +14,14 @@ impl<'a, T> X for B<'a, T> {}\n \n fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n     // oh dear!\n-    box B(&*v) as Box<X>\n+    Box::new(B(&*v)) as Box<dyn X>\n     //~^ ERROR the parameter type `T` may not live long enough\n     //~| ERROR the parameter type `T` may not live long enough\n     //~| ERROR the parameter type `T` may not live long enough\n     //~| ERROR the parameter type `T` may not live long enough\n     //~| ERROR the parameter type `T` may not live long enough\n     //~| ERROR the parameter type `T` may not live long enough\n+    //~| ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "83f8d20b9e1deaae136e32c6a2bdafef7b92c06b", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -4,26 +4,41 @@ error[E0310]: the parameter type `T` may not live long enough\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n-LL |     box B(&*v) as Box<X>\n-   |     ^^^^^^^^^^ ...so that the type `B<'_, T>` will meet its required lifetime bounds\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/regions-close-object-into-object-5.rs:9:17\n+   |\n+LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n+   |                 ^^\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+   |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `B<'_, T>` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:9\n+  --> $DIR/regions-close-object-into-object-5.rs:17:14\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n-LL |     box B(&*v) as Box<X>\n-   |         ^ ...so that the type `T` will meet its required lifetime bounds\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |              ^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:9\n+  --> $DIR/regions-close-object-into-object-5.rs:17:14\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n-LL |     box B(&*v) as Box<X>\n-   |         ^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |              ^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n   --> $DIR/regions-close-object-into-object-5.rs:9:17\n@@ -32,32 +47,32 @@ LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n    |                 ^^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:11\n+  --> $DIR/regions-close-object-into-object-5.rs:17:16\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n-LL |     box B(&*v) as Box<X>\n-   |           ^^^ ...so that the reference type `&dyn A<T>` does not outlive the data it points at\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |                ^^^ ...so that the reference type `&dyn A<T>` does not outlive the data it points at\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:11\n+  --> $DIR/regions-close-object-into-object-5.rs:17:16\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n-LL |     box B(&*v) as Box<X>\n-   |           ^^^ ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |                ^^^ ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:11\n+  --> $DIR/regions-close-object-into-object-5.rs:17:16\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n-LL |     box B(&*v) as Box<X>\n-   |           ^^^ ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |                ^^^ ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0310`."}, {"sha": "b576ae87011377d25a1a6f8c53a1554ef63fdc81", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,16 +1,16 @@\n error[E0310]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:12:5\n    |\n-LL |     box v as Box<dyn SomeTrait + 'static>\n-   |     ^^^^^\n+LL |     Box::new(v) as Box<dyn SomeTrait + 'static>\n+   |     ^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `A: 'static`...\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n    |\n-LL |     box v as Box<dyn SomeTrait + 'b>\n-   |     ^^^^^\n+LL |     Box::new(v) as Box<dyn SomeTrait + 'b>\n+   |     ^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `A: 'b`...\n "}, {"sha": "52d18c5d7a6fa1f113d5fedc7b27197265fbe488", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,24 +1,24 @@\n-#![feature(box_syntax)]\n-\n // Test for what happens when a type parameter `A` is closed over into\n // an object. This should yield errors unless `A` (and the object)\n // both have suitable bounds.\n \n+\n trait SomeTrait {\n     fn get(&self) -> isize;\n }\n \n+\n fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n-    box v as Box<dyn SomeTrait + 'static>\n+    Box::new(v) as Box<dyn SomeTrait + 'static>\n     //~^ ERROR the parameter type `A` may not live long enough\n }\n \n fn make_object2<'a, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'a> {\n-    box v as Box<dyn SomeTrait + 'a>\n+    Box::new(v) as Box<dyn SomeTrait + 'a>\n }\n \n fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n-    box v as Box<dyn SomeTrait + 'b>\n+    Box::new(v) as Box<dyn SomeTrait + 'b>\n     //~^ ERROR the parameter type `A` may not live long enough\n }\n "}, {"sha": "063c3b19a19cccc5bb96ea39e08196eb838a6295", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,16 +3,16 @@ error[E0310]: the parameter type `A` may not live long enough\n    |\n LL | fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n    |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n-LL |     box v as Box<dyn SomeTrait + 'static>\n-   |     ^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+LL |     Box::new(v) as Box<dyn SomeTrait + 'static>\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n    |\n LL | fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n    |                         -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n-LL |     box v as Box<dyn SomeTrait + 'b>\n-   |     ^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+LL |     Box::new(v) as Box<dyn SomeTrait + 'b>\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c2bd3bbf823d2b6f206a88cb492f7ab77762dc2b", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -6,8 +6,8 @@ LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait +\n    |                    |\n    |                    lifetime `'a` defined here\n LL |     // A outlives 'a AND 'b...but not 'c.\n-LL |     box v as Box<dyn SomeTrait + 'a>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'c`\n+LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'c`\n    |\n    = help: consider adding the following bound: `'a: 'c`\n "}, {"sha": "fc7696e7e03201e3e9b8fdcaaef36dc1ffc9f056", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,23 +1,23 @@\n-#![feature(box_syntax)]\n-\n // Various tests where we over type parameters with multiple lifetime\n // bounds.\n \n+\n trait SomeTrait { fn get(&self) -> isize; }\n \n+\n fn make_object_good1<'a,'b,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'a> {\n     // A outlives 'a AND 'b...\n-    box v as Box<dyn SomeTrait + 'a> // ...hence this type is safe.\n+    Box::new(v) as Box<dyn SomeTrait + 'a> // ...hence this type is safe.\n }\n \n fn make_object_good2<'a,'b,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'b> {\n     // A outlives 'a AND 'b...\n-    box v as Box<dyn SomeTrait + 'b> // ...hence this type is safe.\n+    Box::new(v) as Box<dyn SomeTrait + 'b> // ...hence this type is safe.\n }\n \n fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {\n     // A outlives 'a AND 'b...but not 'c.\n-    box v as Box<dyn SomeTrait + 'a> //~ ERROR cannot infer an appropriate lifetime\n+    Box::new(v) as Box<dyn SomeTrait + 'a> //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() {"}, {"sha": "0cb0b24f108b0c07392e2028ffb792d3c60a8b30", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n    |\n-LL |     box v as Box<dyn SomeTrait + 'a>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 18:20...\n   --> $DIR/regions-close-over-type-parameter-multiple.rs:18:20\n@@ -12,8 +12,8 @@ LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait +\n note: ...so that the declared lifetime parameter bounds are satisfied\n   --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n    |\n-LL |     box v as Box<dyn SomeTrait + 'a>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: but, the lifetime must be valid for the lifetime `'c` as defined on the function body at 18:26...\n   --> $DIR/regions-close-over-type-parameter-multiple.rs:18:26\n    |\n@@ -22,8 +22,8 @@ LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait +\n note: ...so that the types are compatible\n   --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n    |\n-LL |     box v as Box<dyn SomeTrait + 'a>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `Box<(dyn SomeTrait + 'c)>`\n               found `Box<dyn SomeTrait>`\n "}, {"sha": "48aad9481bbead1072a0786f2519670856924fbe", "filename": "src/test/ui/regions/regions-close-over-type-parameter-successfully.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-successfully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-successfully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-successfully.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,8 +2,6 @@\n // A test where we (successfully) close over a reference into\n // an object.\n \n-#![feature(box_syntax)]\n-\n trait SomeTrait { fn get(&self) -> isize; }\n \n impl<'a> SomeTrait for &'a isize {\n@@ -13,7 +11,7 @@ impl<'a> SomeTrait for &'a isize {\n }\n \n fn make_object<'a,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait+'a> {\n-    box v as Box<dyn SomeTrait+'a>\n+    Box::new(v) as Box<dyn SomeTrait+'a>\n }\n \n fn main() {"}, {"sha": "a6cb56e3156d445209b39d98425bd27ac0faadb9", "filename": "src/test/ui/regions/regions-dependent-addr-of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-dependent-addr-of.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,7 +3,6 @@\n // Issue #3148.\n \n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n struct A {\n     value: B\n@@ -81,7 +80,7 @@ pub fn main() {\n                          v2: [23, 24, 25],\n                          v3: vec![26, 27, 28],\n                          v4: C { f: 29 },\n-                         v5: box C { f: 30 },\n+                         v5: Box::new(C { f: 30 }),\n                          v6: Some(C { f: 31 })}};\n \n     let p = get_v1(&a);"}, {"sha": "a28bd14ba88f6ca949e79912591923f6adf0789c", "filename": "src/test/ui/regions/regions-early-bound-trait-param.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-trait-param.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,8 +2,6 @@\n // Tests that you can use an early-bound lifetime parameter as\n // on of the generic parameters in a trait.\n \n-#![feature(box_syntax)]\n-\n trait Trait<'a> {\n     fn long(&'a self) -> isize;\n     fn short<'b>(&'b self) -> isize;\n@@ -72,7 +70,7 @@ impl<'s> Trait<'s> for (isize,isize) {\n \n impl<'t> MakerTrait for Box<dyn Trait<'t>+'static> {\n     fn mk() -> Box<dyn Trait<'t>+'static> {\n-        let tup: Box<(isize, isize)> = box (4,5);\n+        let tup: Box<(isize, isize)> = Box::new((4,5));\n         tup as Box<dyn Trait>\n     }\n }"}, {"sha": "65f4c1b6a64877265ed987f2a8a67607a9a5e0fe", "filename": "src/test/ui/regions/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-into-other-fn.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,8 @@\n // run-pass\n-#![feature(box_syntax)]\n-\n fn foo(x: &usize) -> &usize { x }\n fn bar(x: &usize) -> usize { *x }\n \n pub fn main() {\n-    let p: Box<_> = box 3;\n+    let p: Box<_> = Box::new(3);\n     assert_eq!(bar(foo(&*p)), 3);\n }"}, {"sha": "dca26742dacc598cbb3e03472dbdc61e5d60733b", "filename": "src/test/ui/regions/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,9 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn borrow<T>(x: &T) -> &T {x}\n \n pub fn main() {\n-    let x: Box<_> = box 3;\n+    let x: Box<_> = Box::new(3);\n     loop {\n         let y = borrow(&*x);\n         assert_eq!(*x, *y);"}, {"sha": "b4a050bf1ede08af06e7666a382a95d6ec9bf54d", "filename": "src/test/ui/regions/regions-infer-borrow-scope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n struct Point {x: isize, y: isize}\n \n@@ -9,7 +8,7 @@ fn x_coord(p: &Point) -> &isize {\n }\n \n pub fn main() {\n-    let p: Box<_> = box Point {x: 3, y: 4};\n+    let p: Box<_> = Box::new(Point {x: 3, y: 4});\n     let xc = x_coord(&*p);\n     assert_eq!(*xc, 3);\n }"}, {"sha": "3852a14d9f98e8a113f98225cca04ca4f7628ac4", "filename": "src/test/ui/regions/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-nonfree-late-bound.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -15,19 +15,17 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n     fn explicit() {\n         fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<dyn for<'a> FnMut(&'a isize)>) {}\n-        test(Some(box |_f: Box<dyn for<'a> FnMut(&'a isize)>| {}));\n+        test(Some(Box::new(|_f: Box<dyn for<'a> FnMut(&'a isize)>| {})));\n     }\n \n     // The code below is shorthand for the code above (and more likely\n     // to represent what one encounters in practice).\n     fn implicit() {\n         fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<dyn        FnMut(&   isize)>) {}\n-        test(Some(box |_f: Box<dyn        FnMut(&   isize)>| {}));\n+        test(Some(Box::new(|_f: Box<dyn        FnMut(&   isize)>| {})));\n     }\n \n     explicit();"}, {"sha": "3df529c9f0dae8909d60e14eda1579abdab6edb4", "filename": "src/test/ui/regions/regions-ref-in-fn-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,11 +1,11 @@\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n+\n \n fn arg_item(box ref x: Box<isize>) -> &'static isize {\n     x //~ ERROR cannot return value referencing function parameter\n }\n \n-fn with<R, F>(f: F) -> R where F: FnOnce(Box<isize>) -> R { f(box 3) }\n+fn with<R, F>(f: F) -> R where F: FnOnce(Box<isize>) -> R { f(Box::new(3)) }\n \n fn arg_closure() -> &'static isize {\n     with(|box ref x| x) //~ ERROR cannot return value referencing function parameter"}, {"sha": "b1bdb813ac6aad8215a2262c4dafc1ec681b6fae", "filename": "src/test/ui/regions/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -9,8 +9,6 @@\n // changes were caught. However, those uses in the compiler could\n // easily get changed or refactored away in the future.\n \n-#![feature(box_syntax)]\n-\n struct Ctxt<'tcx> {\n     x: &'tcx Vec<isize>\n }"}, {"sha": "94ffb85c9c9c5d214a2f3b7df49da18e2be0fde5", "filename": "src/test/ui/regions/regions-trait-variance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-trait-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fregions%2Fregions-trait-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-variance.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n // Issue #12470.\n \n trait X {\n@@ -31,9 +29,11 @@ fn make_a(p: &dyn X) -> A {\n }\n \n fn make_make_a<'a>() -> A<'a> {\n-    let b: Box<B> = box B {\n+\n+    let b: Box<B> = Box::new(B {\n         i: 1,\n-    };\n+    });\n+\n     let bb: &B = &*b;\n     make_a(bb) //~ ERROR cannot return value referencing local data `*b`\n }"}, {"sha": "0d1cded36b62d7b5e4dc058bb8e88cb072d03b3d", "filename": "src/test/ui/rfcs/rfc-2005-default-binding-mode/box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Fbox.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,11 +1,11 @@\n // run-pass\n #![allow(unreachable_patterns)]\n-#![feature(box_syntax, box_patterns)]\n+#![feature(box_patterns)]\n \n struct Foo{}\n \n pub fn main() {\n-    let b = box Foo{};\n+    let b = Box::new(Foo{});\n     let box f = &b;\n     let _: &Foo = f;\n "}, {"sha": "8f6bed3b0cd6e01ba7b5f0e8c1b0ed2050a3f546", "filename": "src/test/ui/self/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fexplicit-self-generic.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n #[derive(Copy, Clone)]\n struct LM { resize_at: usize, size: usize }\n@@ -24,6 +23,6 @@ impl<K,V> HashMap<K,V> {\n }\n \n pub fn main() {\n-    let mut m: Box<_> = box linear_map::<(),()>();\n+    let mut m: Box<_> = Box::new(linear_map::<(),()>());\n     assert_eq!(m.len(), 0);\n }"}, {"sha": "250ea12e57c81f2345d773a42621aa733d9b5dfc", "filename": "src/test/ui/self/explicit-self-objects-uniq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fexplicit-self-objects-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fexplicit-self-objects-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fexplicit-self-objects-uniq.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n trait Foo {\n     fn f(self: Box<Self>);\n@@ -16,7 +15,7 @@ impl Foo for S {\n }\n \n pub fn main() {\n-    let x = box S { x: 3 };\n+    let x = Box::new(S { x: 3 });\n     let y = x as Box<dyn Foo>;\n     y.f();\n }"}, {"sha": "873c3621a3bce35dfa4563db8b91894296c6a077", "filename": "src/test/ui/self/explicit-self.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fexplicit-self.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,8 +3,6 @@\n #![allow(non_camel_case_types)]\n #![allow(non_upper_case_globals)]\n \n-#![feature(box_syntax)]\n-\n static tau: f64 = 2.0*3.14159265358979323;\n \n struct Point {x: f64, y: f64}\n@@ -64,7 +62,7 @@ trait Nus { fn f(&self); }\n impl Nus for thing { fn f(&self) {} }\n \n pub fn main() {\n-    let y: Box<_> = box thing(A {a: 10});\n+    let y: Box<_> = Box::new(thing(A {a: 10}));\n     assert_eq!(y.clone().bar(), 10);\n     assert_eq!(y.quux(), 10);\n "}, {"sha": "7eed3f056a25f10fb5d320478daea6bb62474711", "filename": "src/test/ui/self/self-impl-2.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fself-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fself-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-impl-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -5,8 +5,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n struct Foo;\n \n // Test uses on inherent impl.\n@@ -57,14 +55,14 @@ impl Bar<isize> for Box<Baz<isize>> {\n         let _: Self::SuperQux = true;\n         let _: <Self as SuperBar>::SuperQux = true;\n \n-        box Baz { f: 42 }\n+        Box::new(Baz { f: 42 })\n     }\n }\n \n fn main() {\n-    let _: Foo = Foo::foo(Foo, &Foo, box Foo);\n-    let _: Box<Baz<isize>> = Bar::bar(box Baz { f: 42 },\n-                                      &box Baz { f: 42 },\n-                                      box box Baz { f: 42 },\n+    let _: Foo = Foo::foo(Foo, &Foo, Box::new(Foo));\n+    let _: Box<Baz<isize>> = Bar::bar(Box::new(Baz { f: 42 }),\n+                                      &Box::new(Baz { f: 42 }),\n+                                      Box::new(Box::new(Baz { f: 42 })),\n                                       true);\n }"}, {"sha": "45e122c8d77a0eca273f9a1ec2030e10e9da342b", "filename": "src/test/ui/self/self-in-mut-slot-default-method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fself-in-mut-slot-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fself-in-mut-slot-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-in-mut-slot-default-method.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n struct X {\n     a: isize\n@@ -30,7 +29,7 @@ pub fn main() {\n     let new_x = x.change();\n     assert_eq!(new_x.a, 55);\n \n-    let x: Box<_> = box new_x;\n+    let x: Box<_> = Box::new(new_x);\n     let new_x = x.change_again();\n     assert_eq!(new_x.a, 45);\n }"}, {"sha": "9595ebf9601fb89e335b9233e0cb215f3236742d", "filename": "src/test/ui/self/self-re-assign.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fself-re-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fself-re-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-re-assign.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,13 +2,12 @@\n // Ensure assigning an owned or managed variable to itself works. In particular,\n // that we do not glue_drop before we glue_take (#3290).\n \n-#![feature(box_syntax)]\n #![allow(dead_code)]\n \n use std::rc::Rc;\n \n pub fn main() {\n-   let mut x: Box<_> = box 3;\n+   let mut x: Box<_> = Box::new(3);\n    x = x;\n    assert_eq!(*x, 3);\n "}, {"sha": "d83af14d354fbe8d7dd79d30bb9ab5018efcd8d0", "filename": "src/test/ui/self/ufcs-explicit-self.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fufcs-explicit-self.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n #![allow(dead_code)]\n \n #[derive(Copy, Clone)]\n@@ -37,13 +36,13 @@ impl<T> Bar<T> {\n }\n \n fn main() {\n-    let foo: Box<_> = box Foo {\n+    let foo: Box<_> = Box::new(Foo {\n         f: 1,\n-    };\n+    });\n     println!(\"{} {} {}\", foo.foo(2), foo.bar(2), foo.baz(2));\n-    let bar: Box<_> = box Bar {\n+    let bar: Box<_> = Box::new(Bar {\n         f: 1,\n-    };\n+    });\n     println!(\"{} {} {}\", bar.foo(2), bar.bar(2), bar.baz(2));\n     let bar: Box<Bar<isize>> = bar;\n     println!(\"{} {} {}\", bar.foo(2), bar.bar(2), bar.baz(2));"}, {"sha": "71e57d8c1fa1b50471bb621acf9b07b5ae3a0b25", "filename": "src/test/ui/self/uniq-self-in-mut-slot.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Funiq-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fself%2Funiq-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Funiq-self-in-mut-slot.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n struct X {\n     a: isize\n@@ -17,7 +16,7 @@ impl Changer for X {\n }\n \n pub fn main() {\n-    let x: Box<_> = box X { a: 32 };\n+    let x: Box<_> = Box::new(X { a: 32 });\n     let new_x = x.change();\n     assert_eq!(new_x.a, 55);\n }"}, {"sha": "66fd68a9f236216f3a0e0f001a6d50afbf5b7fdb", "filename": "src/test/ui/shadowed/shadowed-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,9 +1,9 @@\n // Test that shadowed lifetimes generate an error.\n \n-#![feature(box_syntax)]\n \n struct Foo<T>(T);\n \n+\n impl<T> Foo<T> {\n     fn shadow_in_method<T>(&self) {}\n     //~^ ERROR the name `T` is already used"}, {"sha": "7920ae0b26ccaf6587a26c22ff5c286cf42cd2d4", "filename": "src/test/ui/span/coerce-suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,8 @@\n-#![feature(box_syntax)]\n-\n fn test(_x: &mut String) {}\n+\n fn test2(_x: &mut i32) {}\n \n+\n fn main() {\n     let x: usize = String::new();\n     //~^ ERROR E0308\n@@ -14,7 +14,7 @@ fn main() {\n     test2(&y);\n     //~^ ERROR E0308\n     let f;\n-    f = box f;\n+    f = Box::new(f);\n     //~^ ERROR E0308\n \n     let s = &mut String::new();"}, {"sha": "74caae8645c1d01e70d24307132e147ed9d459a9", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -37,13 +37,10 @@ LL |     test2(&y);\n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:17:9\n    |\n-LL |     f = box f;\n-   |         ^^^^^ cyclic type of infinite size\n-   |\n-help: try using a conversion method\n-   |\n-LL |     f = (box f).to_string();\n-   |         +     +++++++++++++\n+LL |     f = Box::new(f);\n+   |         ^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n+   |         |\n+   |         cyclic type of infinite size\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:21:9"}, {"sha": "d9c08fbdd0f15e2521ad5967f3b3a9abbd9c77b1", "filename": "src/test/ui/span/issue-11925.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fspan%2Fissue-11925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fspan%2Fissue-11925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,10 @@\n-#![feature(box_syntax, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     let r = {\n-        let x: Box<_> = box 42;\n+        let x: Box<_> = Box::new(42);\n         let f = to_fn_once(move|| &x); //~ ERROR cannot return reference to local data `x`\n         f()\n     };"}, {"sha": "16b4cc2586273f98f1fc0c8a67ecf4996b7cc052", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,16 +1,16 @@\n-#![feature(box_syntax)]\n-\n fn id<T>(x: T) -> T { x }\n \n trait Foo { }\n \n impl<'a> Foo for &'a isize { }\n \n fn main() {\n+\n     let blah;\n+\n     {\n         let ss: &isize = &id(1);\n         //~^ ERROR temporary value dropped while borrowed\n-        blah = box ss as Box<dyn Foo>;\n+        blah = Box::new(ss) as Box<dyn Foo>;\n     }\n }"}, {"sha": "aca3972cb6c55dc5a127d3c73dc4f2f52d10ef76", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,20 +1,20 @@\n-#![feature(box_syntax)]\n-\n // Test for what happens when a type parameter `A` is closed over into\n // an object. This should yield errors unless `A` (and the object)\n // both have suitable bounds.\n \n trait Foo { fn get(&self); }\n \n impl<A> Foo for A {\n-    fn get(&self) { }\n+    fn get(&self) {\n+    }\n }\n \n fn repeater3<'a,A:'a>(v: A) -> Box<dyn Foo + 'a> {\n-    box v as Box<dyn Foo+'a>\n+    Box::new(v) as Box<dyn Foo+'a>\n }\n \n fn main() {\n+\n     // Error results because the type of is inferred to be\n     // ~Repeat<&'blk isize> where blk is the lifetime of the block below.\n "}, {"sha": "d70706e5764f636bd48ab1e9ea68cf9269f9276d", "filename": "src/test/ui/static/static-region-bound.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,12 +1,12 @@\n-#![feature(box_syntax)]\n-\n fn id<T>(x: T) -> T { x }\n \n fn f<T:'static>(_: T) {}\n \n fn main() {\n-    let x: Box<_> = box 3;\n+\n+    let x: Box<_> = Box::new(3);\n     f(x);\n+\n     let x = &id(3); //~ ERROR temporary value dropped while borrowed\n     f(x);\n }"}, {"sha": "f870096fdd44a798411b1a8f6aee5898848f1a12", "filename": "src/test/ui/structs-enums/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-cast-to-trait-cross-crate-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // aux-build:cci_class_cast.rs\n \n-#![feature(box_syntax)]\n-\n extern crate cci_class_cast;\n \n use std::string::ToString;\n@@ -15,6 +13,6 @@ fn print_out(thing: Box<dyn ToString>, expected: String) {\n }\n \n pub fn main() {\n-  let nyan: Box<dyn ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<dyn ToString>;\n+  let nyan: Box<dyn ToString> = Box::new(cat(0, 2, \"nyan\".to_string())) as Box<dyn ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "3d6da1cc280243d2208be1338bcf636345fb0689", "filename": "src/test/ui/structs-enums/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-separate-impl.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,8 +2,6 @@\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n-#![feature(box_syntax)]\n-\n use std::fmt;\n \n struct cat {\n@@ -60,6 +58,6 @@ fn print_out(thing: Box<dyn ToString>, expected: String) {\n }\n \n pub fn main() {\n-  let nyan: Box<dyn ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<dyn ToString>;\n+  let nyan: Box<dyn ToString> = Box::new(cat(0, 2, \"nyan\".to_string())) as Box<dyn ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "53892a4e0aeb46418848d9ef82f24e4d4a124fbe", "filename": "src/test/ui/structs-enums/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-nullable-simplifycfg-misopt.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n /*!\n  * This is a regression test for a bug in LLVM, fixed in upstream r179587,\n@@ -9,7 +8,7 @@\n \n enum List<X> { Nil, Cons(X, Box<List<X>>) }\n pub fn main() {\n-    match List::Cons(10, box List::Nil) {\n+    match List::Cons(10, Box::new(List::Nil)) {\n         List::Cons(10, _) => {}\n         List::Nil => {}\n         _ => panic!()"}, {"sha": "1e598b9e709718cd3164434bded57c604e5d1e55", "filename": "src/test/ui/threads-sendsync/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsendfn-spawn-with-fn-arg.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // ignore-emscripten no threads support\n \n-#![feature(box_syntax)]\n-\n use std::thread;\n \n pub fn main() { test05(); }\n@@ -12,7 +10,7 @@ fn test05_start<F:FnOnce(isize)>(f: F) {\n }\n \n fn test05() {\n-    let three: Box<_> = box 3;\n+    let three: Box<_> = Box::new(3);\n     let fn_to_send = move|n:isize| {\n         println!(\"{}\", *three + n); // will copy x into the closure\n         assert_eq!(*three, 3);"}, {"sha": "a63903778026a42029a723fe7259e7118b9b7657", "filename": "src/test/ui/threads-sendsync/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-spawn-move-and-copy.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,15 +2,13 @@\n #![allow(unused_must_use)]\n // ignore-emscripten no threads support\n \n-#![feature(box_syntax)]\n-\n use std::thread;\n use std::sync::mpsc::channel;\n \n pub fn main() {\n     let (tx, rx) = channel::<usize>();\n \n-    let x: Box<isize> = box 1;\n+    let x: Box<isize> = Box::new(1);\n     let x_in_parent = &(*x) as *const isize as usize;\n \n     let t = thread::spawn(move || {"}, {"sha": "a1492c0b98237bcbc50c02d7052517cf780d5eec", "filename": "src/test/ui/traits/bound/in-arc.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fin-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fin-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fin-arc.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -5,8 +5,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(box_syntax)]\n-\n use std::sync::Arc;\n use std::sync::mpsc::channel;\n use std::thread;\n@@ -67,10 +65,11 @@ pub fn main() {\n         swim_speed: 998,\n         name: \"alec_guinness\".to_string(),\n     };\n-    let arc = Arc::new(vec![box catte  as Box<dyn Pet+Sync+Send>,\n-                            box dogge1 as Box<dyn Pet+Sync+Send>,\n-                            box fishe  as Box<dyn Pet+Sync+Send>,\n-                            box dogge2 as Box<dyn Pet+Sync+Send>]);\n+    let arc = Arc::new(vec![\n+        Box::new(catte)  as Box<dyn Pet+Sync+Send>,\n+        Box::new(dogge1) as Box<dyn Pet+Sync+Send>,\n+        Box::new(fishe)  as Box<dyn Pet+Sync+Send>,\n+        Box::new(dogge2) as Box<dyn Pet+Sync+Send>]);\n     let (tx1, rx1) = channel();\n     let arc1 = arc.clone();\n     let t1 = thread::spawn(move|| { check_legs(arc1); tx1.send(()); });"}, {"sha": "e62742bac5c74a42be062055b33cffd58253b0bf", "filename": "src/test/ui/traits/coercion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcoercion.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,7 +2,6 @@\n #![allow(dead_code)]\n #![allow(unused_mut)]\n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n \n use std::io::{self, Write};\n "}, {"sha": "dd882dce6663573b2525580c161a17f20255bd0d", "filename": "src/test/ui/traits/conditional-dispatch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fconditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fconditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fconditional-dispatch.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,7 +3,6 @@\n // blanket impl for T:Copy coexists with an impl for Box<T>, because\n // Box does not impl Copy.\n \n-#![feature(box_syntax)]\n \n trait Get {\n     fn get(&self) -> Self;\n@@ -20,7 +19,7 @@ impl<T:MyCopy> Get for T {\n }\n \n impl Get for Box<i32> {\n-    fn get(&self) -> Box<i32> { box get_it(&**self) }\n+    fn get(&self) -> Box<i32> { Box::new(get_it(&**self)) }\n }\n \n fn get_it<T:Get>(t: &T) -> T {"}, {"sha": "07d92f8f8a0164e9674c9e1bd334ff19949c8428", "filename": "src/test/ui/traits/issue-6128.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-6128.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(box_syntax)]\n-\n use std::collections::HashMap;\n \n trait Graph<Node, Edge> {\n@@ -19,6 +17,6 @@ impl<E> Graph<isize, E> for HashMap<isize, isize> {\n }\n \n pub fn main() {\n-    let g : Box<HashMap<isize,isize>> = box HashMap::new();\n+    let g : Box<HashMap<isize,isize>> = Box::new(HashMap::new());\n     let _g2 : Box<dyn Graph<isize,isize>> = g as Box<dyn Graph<isize,isize>>;\n }"}, {"sha": "8adb06ba3d04e0da04775b2e84c544f46077b678", "filename": "src/test/ui/traits/kindck-owned-contains-1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fkindck-owned-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fkindck-owned-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fkindck-owned-contains-1.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,8 +2,6 @@\n #![allow(non_snake_case)]\n #![allow(non_camel_case_types)]\n \n-#![feature(box_syntax)]\n-\n trait repeat<A> { fn get(&self) -> A; }\n \n impl<A:Clone + 'static> repeat<A> for Box<A> {\n@@ -13,11 +11,11 @@ impl<A:Clone + 'static> repeat<A> for Box<A> {\n }\n \n fn repeater<A:Clone + 'static>(v: Box<A>) -> Box<dyn repeat<A>+'static> {\n-    box v as Box<dyn repeat<A>+'static> // No\n+    Box::new(v) as Box<dyn repeat<A>+'static> // No\n }\n \n pub fn main() {\n     let x = 3;\n-    let y = repeater(box x);\n+    let y = repeater(Box::new(x));\n     assert_eq!(x, y.get());\n }"}, {"sha": "86a2094eee098578e4562e83dd2a1de2aeac7196", "filename": "src/test/ui/traits/object-one-type-two-traits.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fobject-one-type-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fobject-one-type-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject-one-type-two-traits.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -4,8 +4,6 @@\n // Testing creating two vtables with the same self type, but different\n // traits.\n \n-#![feature(box_syntax)]\n-\n use std::any::Any;\n \n trait Wrap {\n@@ -27,7 +25,7 @@ fn is<T:Any>(x: &dyn Any) -> bool {\n }\n \n fn main() {\n-    let x = box 22isize as Box<dyn Wrap>;\n+    let x = Box::new(22isize) as Box<dyn Wrap>;\n     println!(\"x={}\", x.get());\n     let y = x.wrap();\n }"}, {"sha": "e5a96af3810de4121ee202554f81721b9b0dd5ca", "filename": "src/test/ui/traits/object/generics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fgenerics.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // test for #8664\n \n-#![feature(box_syntax)]\n-\n use std::marker;\n \n pub trait Trait2<A> {\n@@ -38,6 +36,6 @@ impl<V> Trait<u8,V> for () {\n }\n \n pub fn main() {\n-    let a = box () as Box<dyn Trait<u8, u8>>;\n+    let a = Box::new(()) as Box<dyn Trait<u8, u8>>;\n     assert_eq!(a.method(Type::Constant((1, 2))), 0);\n }"}, {"sha": "342928e882a556e0e9a8958041284e945a14ee6a", "filename": "src/test/ui/traits/test-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,6 +1,6 @@\n-#![feature(box_syntax)]\n-\n #[allow(non_camel_case_types)]\n+\n+\n trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n@@ -10,7 +10,8 @@ fn main() {\n     //~^ ERROR this associated function takes 0 generic arguments but 1\n     10.blah::<i32, i32>();\n     //~^ ERROR this associated function takes 1 generic argument but 2\n-    (box 10 as Box<dyn bar>).dup();\n+    (Box::new(10) as Box<dyn bar>).dup();\n     //~^ ERROR E0038\n     //~| ERROR E0038\n+    //~| ERROR E0038\n }"}, {"sha": "77ea4e4e974ebf06c36175f8cd48d50821840f0c", "filename": "src/test/ui/traits/test-2.stderr", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -27,10 +27,27 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |                                       ^^^^ -\n \n error[E0038]: the trait `bar` cannot be made into an object\n-  --> $DIR/test-2.rs:13:16\n+  --> $DIR/test-2.rs:13:22\n    |\n-LL |     (box 10 as Box<dyn bar>).dup();\n-   |                ^^^^^^^^^^^^ `bar` cannot be made into an object\n+LL |     (Box::new(10) as Box<dyn bar>).dup();\n+   |                      ^^^^^^^^^^^^ `bar` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/test-2.rs:4:30\n+   |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |       ---                    ^^^^     ^^^^ ...because method `blah` has generic type parameters\n+   |       |                      |\n+   |       |                      ...because method `dup` references the `Self` type in its return type\n+   |       this trait cannot be made into an object...\n+   = help: consider moving `dup` to another trait\n+   = help: consider moving `blah` to another trait\n+\n+error[E0038]: the trait `bar` cannot be made into an object\n+  --> $DIR/test-2.rs:13:5\n+   |\n+LL |     (Box::new(10) as Box<dyn bar>).dup();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/test-2.rs:4:30\n@@ -46,8 +63,8 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/test-2.rs:13:6\n    |\n-LL |     (box 10 as Box<dyn bar>).dup();\n-   |      ^^^^^^ `bar` cannot be made into an object\n+LL |     (Box::new(10) as Box<dyn bar>).dup();\n+   |      ^^^^^^^^^^^^ `bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/test-2.rs:4:30\n@@ -62,7 +79,7 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn bar>>` for `Box<{integer}>`\n    = note: required by cast to type `Box<dyn bar>`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0038, E0107.\n For more information about an error, try `rustc --explain E0038`."}, {"sha": "6d88002540c1ac43c355241244183a1ec04834fa", "filename": "src/test/ui/traits/trait-upcasting/issue-11515-upcast-fn_mut-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fissue-11515-upcast-fn_mut-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fissue-11515-upcast-fn_mut-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fissue-11515-upcast-fn_mut-fn.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(box_syntax, trait_upcasting)]\n+#![feature(trait_upcasting)]\n #![allow(incomplete_features)]\n \n struct Test {\n@@ -8,6 +8,6 @@ struct Test {\n \n fn main() {\n     let closure: Box<dyn Fn() + 'static> = Box::new(|| ());\n-    let mut test = box Test { func: closure };\n+    let mut test = Box::new(Test { func: closure });\n     (test.func)();\n }"}, {"sha": "3d87a089fca3a35299198ae32fc2a12b14654f9f", "filename": "src/test/ui/type-param-constraints.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-param-constraints.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -4,8 +4,6 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n fn p_foo<T>(_pinned: T) { }\n fn s_foo<T>(_shared: T) { }\n fn u_foo<T:Send>(_unique: T) { }\n@@ -27,13 +25,13 @@ fn r(i:isize) -> r {\n pub fn main() {\n     p_foo(r(10));\n \n-    p_foo::<Box<_>>(box r(10));\n-    p_foo::<Box<_>>(box 10);\n+    p_foo::<Box<_>>(Box::new(r(10)));\n+    p_foo::<Box<_>>(Box::new(10));\n     p_foo(10);\n \n-    s_foo::<Box<_>>(box 10);\n+    s_foo::<Box<_>>(Box::new(10));\n     s_foo(10);\n \n-    u_foo::<Box<_>>(box 10);\n+    u_foo::<Box<_>>(Box::new(10));\n     u_foo(10);\n }"}, {"sha": "f982ad6a0ddc33da33d46d035fe368c166165021", "filename": "src/test/ui/typeclasses-eq-example-static.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeclasses-eq-example-static.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,7 +3,6 @@\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n // Example from lkuper's intern talk, August 2012 -- now with static\n // methods!\n@@ -59,11 +58,11 @@ pub fn main() {\n     assert!(Equal::isEq(&leaf(cyan), &leaf(cyan)));\n     assert!(!Equal::isEq(&leaf(cyan), &leaf(yellow)));\n \n-    assert!(Equal::isEq(&branch(box leaf(magenta), box leaf(cyan)),\n-                &branch(box leaf(magenta), box leaf(cyan))));\n+    assert!(Equal::isEq(&branch(Box::new(leaf(magenta)), Box::new(leaf(cyan))),\n+                &branch(Box::new(leaf(magenta)), Box::new(leaf(cyan)))));\n \n-    assert!(!Equal::isEq(&branch(box leaf(magenta), box leaf(cyan)),\n-                 &branch(box leaf(magenta), box leaf(magenta))));\n+    assert!(!Equal::isEq(&branch(Box::new(leaf(magenta)), Box::new(leaf(cyan))),\n+                 &branch(Box::new(leaf(magenta)), Box::new(leaf(magenta)))));\n \n     println!(\"Assertions all succeeded!\");\n }"}, {"sha": "4400301e61ed7c3797ea306c08a837b22b50b3d0", "filename": "src/test/ui/typeclasses-eq-example.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeclasses-eq-example.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -3,7 +3,6 @@\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n // Example from lkuper's intern talk, August 2012.\n use Color::{cyan, magenta, yellow, black};\n@@ -55,11 +54,11 @@ pub fn main() {\n     assert!(leaf(cyan).isEq(&leaf(cyan)));\n     assert!(!leaf(cyan).isEq(&leaf(yellow)));\n \n-    assert!(branch(box leaf(magenta), box leaf(cyan))\n-        .isEq(&branch(box leaf(magenta), box leaf(cyan))));\n+    assert!(branch(Box::new(leaf(magenta)), Box::new(leaf(cyan)))\n+        .isEq(&branch(Box::new(leaf(magenta)), Box::new(leaf(cyan)))));\n \n-    assert!(!branch(box leaf(magenta), box leaf(cyan))\n-        .isEq(&branch(box leaf(magenta), box leaf(magenta))));\n+    assert!(!branch(Box::new(leaf(magenta)), Box::new(leaf(cyan)))\n+        .isEq(&branch(Box::new(leaf(magenta)), Box::new(leaf(magenta)))));\n \n     println!(\"Assertions all succeeded!\");\n }"}, {"sha": "cb1fac0bae6ae1798f231ba382ce76eb254d58f6", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,9 +1,9 @@\n-#![feature(box_syntax)]\n-\n struct Foo {\n     f: isize,\n }\n \n+\n+\n impl Foo {\n     fn foo(self: isize, x: isize) -> isize {\n         //~^ ERROR invalid `self` parameter type\n@@ -48,12 +48,12 @@ impl<'a, T> SomeTrait for &'a Bar<T> {\n }\n \n fn main() {\n-    let foo = box Foo {\n+    let foo = Box::new(Foo {\n         f: 1,\n-    };\n+    });\n     println!(\"{}\", foo.foo(2));\n-    let bar = box Bar {\n+    let bar = Box::new(Bar {\n         f: 1,\n-    };\n+    });\n     println!(\"{} {}\", bar.foo(2), bar.bar(2));\n }"}, {"sha": "3f550fd04259f583b43de4d6068b623c61c223fa", "filename": "src/test/ui/unboxed-closures/unboxed-closures-boxed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-boxed.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,9 @@\n // run-pass\n-#![feature(box_syntax)]\n \n use std::ops::FnMut;\n \n  fn make_adder(x: i32) -> Box<dyn FnMut(i32)->i32+'static> {\n-    (box move |y: i32| -> i32 { x + y }) as\n+    Box::new(move |y: i32| -> i32 { x + y }) as\n         Box<dyn FnMut(i32)->i32+'static>\n }\n "}, {"sha": "f1573b6adf0ce0952577be747a15ef8ebdfaa3b5", "filename": "src/test/ui/uninhabited/uninhabited-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,8 @@\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n+\n #![deny(unreachable_patterns)]\n \n mod foo {"}, {"sha": "2c40dfc7a4b257bad296477b99662c271447e1bd", "filename": "src/test/ui/unique-object-noncopyable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n trait Foo {\n     fn f(&self);\n }\n@@ -18,8 +16,10 @@ impl Foo for Bar {\n     }\n }\n \n+\n+\n fn main() {\n-    let x = box Bar { x: 10 };\n+    let x = Box::new(Bar { x: 10 });\n     let y: Box<dyn Foo> = x as Box<dyn Foo>;\n     let _z = y.clone(); //~ ERROR the method\n }"}, {"sha": "b742973ce327d856d309a56819a3e5ec1ab28e15", "filename": "src/test/ui/unique/unique-assign-copy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-assign-copy.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,7 @@\n // run-pass\n-#![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i: Box<_> = box 1;\n+    let mut i: Box<_> = Box::new(1);\n     // Should be a copy\n     let mut j;\n     j = i.clone();"}, {"sha": "e7685b589ca8ee770e6bd7a9e075e513a7bdf44c", "filename": "src/test/ui/unique/unique-assign-drop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-assign-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-assign-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-assign-drop.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,11 +1,9 @@\n // run-pass\n #![allow(unused_assignments)]\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let i: Box<_> = box 1;\n-    let mut j: Box<_> = box 2;\n+    let i: Box<_> = Box::new(1);\n+    let mut j: Box<_> = Box::new(2);\n     // Should drop the previous value of j\n     j = i;\n     assert_eq!(*j, 1);"}, {"sha": "d4932d8333ab7d3c4a9365208e8777182ca73124", "filename": "src/test/ui/unique/unique-assign-generic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-assign-generic.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn f<T>(t: T) -> T {\n     let t1 = t;\n     t1\n }\n \n pub fn main() {\n-    let t = f::<Box<_>>(box 100);\n-    assert_eq!(t, box 100);\n+    let t = f::<Box<_>>(Box::new(100));\n+    assert_eq!(t, Box::new(100));\n }"}, {"sha": "d598744f145b2a08bbc9b4d4d527dd7b82b62fa7", "filename": "src/test/ui/unique/unique-assign.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-assign.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,9 +1,8 @@\n // run-pass\n #![allow(unused_mut)]\n-#![feature(box_syntax)]\n \n pub fn main() {\n     let mut i: Box<_>;\n-    i = box 1;\n+    i = Box::new(1);\n     assert_eq!(*i, 1);\n }"}, {"sha": "64147e11f1c0c90a82336791eeaf38822c18767d", "filename": "src/test/ui/unique/unique-autoderef-field.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-autoderef-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-autoderef-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-autoderef-field.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,11 +1,10 @@\n // run-pass\n-#![feature(box_syntax)]\n \n struct J { j: isize }\n \n pub fn main() {\n-    let i: Box<_> = box J {\n+    let i: Box<_> = Box::new(J {\n         j: 100\n-    };\n+    });\n     assert_eq!(i.j, 100);\n }"}, {"sha": "ea6598a7f6b351518f14366724a0c48f016f6b2e", "filename": "src/test/ui/unique/unique-autoderef-index.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-autoderef-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-autoderef-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-autoderef-index.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n-#![feature(box_syntax)]\n \n pub fn main() {\n-    let i: Box<_> = box vec![100];\n+    let i: Box<_> = Box::new(vec![100]);\n     assert_eq!((*i)[0], 100);\n }"}, {"sha": "ee05dd5a31d5b5b268f2b014dff5b264e942aa49", "filename": "src/test/ui/unique/unique-cmp.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-cmp.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n #![allow(unused_allocation)]\n-#![feature(box_syntax)]\n \n pub fn main() {\n-    let i: Box<_> = box 100;\n-    assert_eq!(i, box 100);\n-    assert!(i < box 101);\n-    assert!(i <= box 100);\n-    assert!(i > box 99);\n-    assert!(i >= box 99);\n+    let i: Box<_> = Box::new(100);\n+    assert_eq!(i, Box::new(100));\n+    assert!(i < Box::new(101));\n+    assert!(i <= Box::new(100));\n+    assert!(i > Box::new(99));\n+    assert!(i >= Box::new(99));\n }"}, {"sha": "6c31ae99b8eefa492ad0db8482c88c3c2daad373", "filename": "src/test/ui/unique/unique-containing-tag.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-containing-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-containing-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-containing-tag.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -4,12 +4,10 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n     enum t { t1(isize), t2(isize), }\n \n-    let _x: Box<_> = box t::t1(10);\n+    let _x: Box<_> = Box::new(t::t1(10));\n \n     /*alt *x {\n       t1(a) {\n@@ -19,9 +17,9 @@ pub fn main() {\n     }*/\n \n     /*alt x {\n-      box t1(a) {\n+      Box::new(t1(a) {\n         assert_eq!(a, 10);\n-      }\n+      })\n       _ { panic!(); }\n     }*/\n }"}, {"sha": "c566e79620a95f0f6beb4e9a590d5d39de5ac827", "filename": "src/test/ui/unique/unique-create.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-create.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-create.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-create.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -2,10 +2,8 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let _: Box<_> = box 100;\n+    let _: Box<_> = Box::new(100);\n }\n \n fn vec() {"}, {"sha": "5b9576fcc7a5b65c57badca295471b7c89eeea7d", "filename": "src/test/ui/unique/unique-decl-init-copy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-decl-init-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-decl-init-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-decl-init-copy.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,7 @@\n // run-pass\n-#![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i: Box<_> = box 1;\n+    let mut i: Box<_> = Box::new(1);\n     // Should be a copy\n     let mut j = i.clone();\n     *i = 2;"}, {"sha": "1d70860c7cec0b213ca04cd74dc0671a25595f78", "filename": "src/test/ui/unique/unique-decl-init.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-decl-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-decl-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-decl-init.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,7 @@\n // run-pass\n-#![feature(box_syntax)]\n \n pub fn main() {\n-    let i: Box<_> = box 1;\n+    let i: Box<_> = Box::new(1);\n     let j = i;\n     assert_eq!(*j, 1);\n }"}, {"sha": "21187510ff0c5942719eddceda66a1cd0fab20d2", "filename": "src/test/ui/unique/unique-decl-move.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-decl-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-decl-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-decl-move.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,7 @@\n // run-pass\n-#![feature(box_syntax)]\n \n pub fn main() {\n-    let i: Box<_> = box 100;\n+    let i: Box<_> = Box::new(100);\n     let j = i;\n     assert_eq!(*j, 100);\n }"}, {"sha": "33a1e9932b5d1beb07eef6cdbcd2fcfc56f67e00", "filename": "src/test/ui/unique/unique-deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-deref.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n-#![feature(box_syntax)]\n \n pub fn main() {\n-    let i: Box<_> = box 100;\n+    let i: Box<_> = Box::new(100);\n     assert_eq!(*i, 100);\n }"}, {"sha": "7207ac962953ebc53ac3764c4348dc76dcc11917", "filename": "src/test/ui/unique/unique-destructure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-destructure.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,10 +1,9 @@\n // run-pass\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n struct Foo { a: isize, b: isize }\n \n pub fn main() {\n-    let box Foo{a, b} = box Foo{a: 100, b: 200};\n+    let box Foo{ a, b } = Box::new(Foo { a: 100, b: 200 });\n     assert_eq!(a + b, 300);\n }"}, {"sha": "2324f1e1a652f5c66100c462c578c2347a4a0d9a", "filename": "src/test/ui/unique/unique-drop-complex.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-drop-complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550021124451628b1efc60c59284465b109e3aa/src%2Ftest%2Fui%2Funique%2Funique-drop-complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-drop-complex.rs?ref=6550021124451628b1efc60c59284465b109e3aa", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let _x: Box<_> = box vec![0,0,0,0,0];\n+    let _x: Box<_> = Box::new(vec![0,0,0,0,0]);\n }"}]}