{"sha": "81383bd8691c0915e66abaca845e508b6edc4851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMzgzYmQ4NjkxYzA5MTVlNjZhYmFjYTg0NWU1MDhiNmVkYzQ4NTE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-11-25T16:02:20Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-11T07:50:27Z"}, "message": "Added DestructionScope variant to CodeExtent, representing the area\nimmediately surrounding a node that is a terminating_scope\n(e.g. statements, looping forms) during which the destructors run (the\ndestructors for temporaries from the execution of that node, that is).\n\nIntroduced DestructionScopeData newtype wrapper around ast::NodeId, to\npreserve invariant that FreeRegion and ScopeChain::BlockScope carry\ndestruction scopes (rather than arbitrary CodeExtents).\n\nInsert DestructionScope and block Remainder into enclosing CodeExtents\nhierarchy.\n\nAdd more doc for DestructionScope, complete with ASCII art.\n\nSwitch to constructing DestructionScope rather than Misc in a number\nof places, mostly related to `ty::ReFree` creation, and use\ndestruction-scopes of node-ids at various calls to\nliberate_late_bound_regions.\n\nmiddle::resolve_lifetime: Map BlockScope to DestructionScope in `fn resolve_free_lifetime`.\n\nAdd the InnermostDeclaringBlock and InnermostEnclosingExpr enums that\nare my attempt to clarify the region::Context structure, and that\nlater commmts build upon.\n\nImprove the debug output for `CodeExtent` attached to `ty::Region::ReScope`.\n\nLoosened an assertion in `rustc_trans::trans::cleanup` to account for\n`DestructionScope`.  (Perhaps this should just be switched entirely\nover to `DestructionScope`, rather than allowing for either `Misc` or\n`DestructionScope`.)\n\n----\n\nEven though the DestructionScope is new, this particular commit should\nnot actually change the semantics of any current code.", "tree": {"sha": "8bda86fc350ae7caf6c3564c0a9aedf7c5db1219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bda86fc350ae7caf6c3564c0a9aedf7c5db1219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81383bd8691c0915e66abaca845e508b6edc4851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81383bd8691c0915e66abaca845e508b6edc4851", "html_url": "https://github.com/rust-lang/rust/commit/81383bd8691c0915e66abaca845e508b6edc4851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81383bd8691c0915e66abaca845e508b6edc4851/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "html_url": "https://github.com/rust-lang/rust/commit/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82"}], "stats": {"total": 326, "additions": 253, "deletions": 73}, "files": [{"sha": "9962f49dfcfd362ad5f5b9fc75c7c8604732ab7f", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -349,7 +349,7 @@ fn parse_region_<F>(st: &mut PState, conv: &mut F) -> ty::Region where\n       }\n       'f' => {\n         assert_eq!(next(st), '[');\n-        let scope = parse_scope(st);\n+        let scope = parse_destruction_scope_data(st);\n         assert_eq!(next(st), '|');\n         let br = parse_bound_region_(st, conv);\n         assert_eq!(next(st), ']');\n@@ -377,6 +377,10 @@ fn parse_scope(st: &mut PState) -> region::CodeExtent {\n             let node_id = parse_uint(st) as ast::NodeId;\n             region::CodeExtent::Misc(node_id)\n         }\n+        'D' => {\n+            let node_id = parse_uint(st) as ast::NodeId;\n+            region::CodeExtent::DestructionScope(node_id)\n+        }\n         'B' => {\n             let node_id = parse_uint(st) as ast::NodeId;\n             let first_stmt_index = parse_uint(st);\n@@ -389,6 +393,11 @@ fn parse_scope(st: &mut PState) -> region::CodeExtent {\n     }\n }\n \n+fn parse_destruction_scope_data(st: &mut PState) -> region::DestructionScopeData {\n+    let node_id = parse_uint(st) as ast::NodeId;\n+    region::DestructionScopeData::new(node_id)\n+}\n+\n fn parse_opt<'a, 'tcx, T, F>(st: &mut PState<'a, 'tcx>, f: F) -> Option<T> where\n     F: FnOnce(&mut PState<'a, 'tcx>) -> T,\n {"}, {"sha": "640b9649286c1c524b9cda3dacb9aed88fd4df7f", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -251,7 +251,7 @@ pub fn enc_region(w: &mut SeekableMemWriter, cx: &ctxt, r: ty::Region) {\n         }\n         ty::ReFree(ref fr) => {\n             mywrite!(w, \"f[\");\n-            enc_scope(w, cx, fr.scope);\n+            enc_destruction_scope_data(w, fr.scope);\n             mywrite!(w, \"|\");\n             enc_bound_region(w, cx, fr.bound_region);\n             mywrite!(w, \"]\");\n@@ -279,9 +279,15 @@ fn enc_scope(w: &mut SeekableMemWriter, _cx: &ctxt, scope: region::CodeExtent) {\n         region::CodeExtent::Misc(node_id) => mywrite!(w, \"M{}\", node_id),\n         region::CodeExtent::Remainder(region::BlockRemainder {\n             block: b, first_statement_index: i }) => mywrite!(w, \"B{}{}\", b, i),\n+        region::CodeExtent::DestructionScope(node_id) => mywrite!(w, \"D{}\", node_id),\n     }\n }\n \n+fn enc_destruction_scope_data(w: &mut SeekableMemWriter,\n+                              d: region::DestructionScopeData) {\n+    mywrite!(w, \"{}\", d.node_id);\n+}\n+\n fn enc_bound_region(w: &mut SeekableMemWriter, cx: &ctxt, br: ty::BoundRegion) {\n     match br {\n         ty::BrAnon(idx) => {"}, {"sha": "8e3bf0fa28d235fa7584fa919d3c83945c5d76db", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -499,6 +499,12 @@ impl tr for region::CodeExtent {\n     }\n }\n \n+impl tr for region::DestructionScopeData {\n+    fn tr(&self, dcx: &DecodeContext) -> region::DestructionScopeData {\n+        region::DestructionScopeData { node_id: dcx.tr_id(self.node_id) }\n+    }\n+}\n+\n impl tr for ty::BoundRegion {\n     fn tr(&self, dcx: &DecodeContext) -> ty::BoundRegion {\n         match *self {"}, {"sha": "6cacf46b2feb65018f99c59e47ceec553eb16ecb", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -304,7 +304,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                         return None\n                     }\n                     assert!(fr1.scope == fr2.scope);\n-                    (fr1.scope.node_id(), fr1, fr2)\n+                    (fr1.scope.node_id, fr1, fr2)\n                 },\n                 _ => return None\n             };"}, {"sha": "6b6887ba8e2d3ddabf0084aa58067c501069b322", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -760,11 +760,12 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             // A \"free\" region can be interpreted as \"some region\n             // at least as big as the block fr.scope_id\".  So, we can\n             // reasonably compare free regions and scopes:\n-            match self.tcx.region_maps.nearest_common_ancestor(fr.scope, s_id) {\n+            let fr_scope = fr.scope.to_code_extent();\n+            match self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id) {\n               // if the free region's scope `fr.scope_id` is bigger than\n               // the scope region `s_id`, then the LUB is the free\n               // region itself:\n-              Some(r_id) if r_id == fr.scope => f,\n+              Some(r_id) if r_id == fr_scope => f,\n \n               // otherwise, we don't know what the free region is,\n               // so we must conservatively say the LUB is static:\n@@ -865,8 +866,9 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                 // than the scope `s_id`, then we can say that the GLB\n                 // is the scope `s_id`.  Otherwise, as we do not know\n                 // big the free region is precisely, the GLB is undefined.\n-                match self.tcx.region_maps.nearest_common_ancestor(fr.scope, s_id) {\n-                    Some(r_id) if r_id == fr.scope => Ok(s),\n+                let fr_scope = fr.scope.to_code_extent();\n+                match self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id) {\n+                    Some(r_id) if r_id == fr_scope => Ok(s),\n                     _ => Err(ty::terr_regions_no_overlap(b, a))\n                 }\n             }\n@@ -915,7 +917,8 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                 Ok(ty::ReFree(*b))\n             } else {\n                 this.intersect_scopes(ty::ReFree(*a), ty::ReFree(*b),\n-                                      a.scope, b.scope)\n+                                      a.scope.to_code_extent(),\n+                                      b.scope.to_code_extent())\n             }\n         }\n     }"}, {"sha": "d4fe09793131f29d8117f8e35942c1762e1874cf", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -112,7 +112,7 @@ use self::VarKind::*;\n use middle::def::*;\n use middle::mem_categorization::Typer;\n use middle::pat_util;\n-use middle::region::CodeExtent;\n+use middle::region;\n use middle::ty;\n use middle::ty::ClosureTyper;\n use lint;\n@@ -1514,7 +1514,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         let fn_ret =\n             ty::liberate_late_bound_regions(\n                 self.ir.tcx,\n-                CodeExtent::from_node_id(body.id),\n+                region::DestructionScopeData::new(body.id),\n                 &self.fn_ret(id));\n \n         match fn_ret {"}, {"sha": "fed2f7d92458a009ecd7136e7535c716a7f45871", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -760,7 +760,10 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n         // Region of environment pointer\n         let env_region = ty::ReFree(ty::FreeRegion {\n-            scope: region::CodeExtent::from_node_id(fn_body_id),\n+            // The environment of a closure is guaranteed to\n+            // outlive any bindings introduced in the body of the\n+            // closure itself.\n+            scope: region::DestructionScopeData::new(fn_body_id),\n             bound_region: ty::BrEnv\n         });\n "}, {"sha": "2f0462ab8c338177692ca3314e247c5c3e467e71", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 123, "deletions": 16, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -27,11 +27,66 @@ use syntax::{ast, visit};\n use syntax::ast::{Block, Item, FnDecl, NodeId, Arm, Pat, Stmt, Expr, Local};\n use syntax::ast_util::{stmt_id};\n use syntax::ast_map;\n+use syntax::ptr::P;\n use syntax::visit::{Visitor, FnKind};\n \n /// CodeExtent represents a statically-describable extent that can be\n /// used to bound the lifetime/region for values.\n ///\n+/// `Misc(node_id)`: Any AST node that has any extent at all has the\n+/// `Misc(node_id)` extent. Other variants represent special cases not\n+/// immediately derivable from the abstract syntax tree structure.\n+///\n+/// `DestructionScope(node_id)` represents the extent of destructors\n+/// implicitly-attached to `node_id` that run immediately after the\n+/// expression for `node_id` itself. Not every AST node carries a\n+/// `DestructionScope`, but those that are `terminating_scopes` do;\n+/// see discussion with `RegionMaps`.\n+///\n+/// `Remainder(BlockRemainder { block, statement_index })` represents\n+/// the extent of user code running immediately after the initializer\n+/// expression for the indexed statement, until the end of the block.\n+///\n+/// So: the following code can be broken down into the extents beneath:\n+/// ```\n+/// let a = f().g( 'b: { let x = d(); let y = d(); x.h(y)  }   ) ;\n+/// ```\n+///\n+///                                                              +-+ (D12.)\n+///                                                        +-+       (D11.)\n+///                                              +---------+         (R10.)\n+///                                              +-+                  (D9.)\n+///                                   +----------+                    (M8.)\n+///                                 +----------------------+          (R7.)\n+///                                 +-+                               (D6.)\n+///                      +----------+                                 (M5.)\n+///                    +-----------------------------------+          (M4.)\n+///         +--------------------------------------------------+      (M3.)\n+///         +--+                                                      (M2.)\n+/// +-----------------------------------------------------------+     (M1.)\n+///\n+///  (M1.): Misc extent of the whole `let a = ...;` statement.\n+///  (M2.): Misc extent of the `f()` expression.\n+///  (M3.): Misc extent of the `f().g(..)` expression.\n+///  (M4.): Misc extent of the block labelled `'b:`.\n+///  (M5.): Misc extent of the `let x = d();` statement\n+///  (D6.): DestructionScope for temporaries created during M5.\n+///  (R7.): Remainder extent for block `'b:`, stmt 0 (let x = ...).\n+///  (M8.): Misc Extent of the `let y = d();` statement.\n+///  (D9.): DestructionScope for temporaries created during M8.\n+/// (R10.): Remainder extent for block `'b:`, stmt 1 (let y = ...).\n+/// (D11.): DestructionScope for temporaries and bindings from block `'b:`.\n+/// (D12.): DestructionScope for temporaries created during M1 (e.g. f()).\n+///\n+/// Note that while the above picture shows the destruction scopes\n+/// as following their corresponding misc extents, in the internal\n+/// data structures of the compiler the destruction scopes are\n+/// represented as enclosing parents. This is sound because we use the\n+/// enclosing parent relationship just to ensure that referenced\n+/// values live long enough; phrased another way, the starting point\n+/// of each range is not really the important thing in the above\n+/// picture, but rather the ending point.\n+///\n /// FIXME (pnkfelix): This currently derives `PartialOrd` and `Ord` to\n /// placate the same deriving in `ty::FreeRegion`, but we may want to\n /// actually attach a more meaningful ordering to scopes than the one\n@@ -40,7 +95,24 @@ use syntax::visit::{Visitor, FnKind};\n            RustcDecodable, Debug, Copy)]\n pub enum CodeExtent {\n     Misc(ast::NodeId),\n-    Remainder(BlockRemainder),\n+    DestructionScope(ast::NodeId), // extent of destructors for temporaries of node-id\n+    Remainder(BlockRemainder)\n+}\n+\n+/// extent of destructors for temporaries of node-id\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n+           RustcDecodable, Debug, Copy)]\n+pub struct DestructionScopeData {\n+    pub node_id: ast::NodeId\n+}\n+\n+impl DestructionScopeData {\n+    pub fn new(node_id: ast::NodeId) -> DestructionScopeData {\n+        DestructionScopeData { node_id: node_id }\n+    }\n+    pub fn to_code_extent(&self) -> CodeExtent {\n+        CodeExtent::DestructionScope(self.node_id)\n+    }\n }\n \n /// Represents a subscope of `block` for a binding that is introduced\n@@ -82,6 +154,7 @@ impl CodeExtent {\n         match *self {\n             CodeExtent::Misc(node_id) => node_id,\n             CodeExtent::Remainder(br) => br.block,\n+            CodeExtent::DestructionScope(node_id) => node_id,\n         }\n     }\n \n@@ -95,6 +168,8 @@ impl CodeExtent {\n             CodeExtent::Remainder(br) =>\n                 CodeExtent::Remainder(BlockRemainder {\n                     block: f_id(br.block), first_statement_index: br.first_statement_index }),\n+            CodeExtent::DestructionScope(node_id) =>\n+                CodeExtent::DestructionScope(f_id(node_id)),\n         }\n     }\n \n@@ -105,7 +180,8 @@ impl CodeExtent {\n         match ast_map.find(self.node_id()) {\n             Some(ast_map::NodeBlock(ref blk)) => {\n                 match *self {\n-                    CodeExtent::Misc(_) => Some(blk.span),\n+                    CodeExtent::Misc(_) |\n+                    CodeExtent::DestructionScope(_) => Some(blk.span),\n \n                     CodeExtent::Remainder(r) => {\n                         assert_eq!(r.block, blk.id);\n@@ -455,7 +531,7 @@ impl RegionMaps {\n                 }\n \n                 (ty::ReScope(sub_scope), ty::ReFree(ref fr)) => {\n-                    self.is_subscope_of(sub_scope, fr.scope)\n+                    self.is_subscope_of(sub_scope, fr.scope.to_code_extent())\n                 }\n \n                 (ty::ReFree(sub_fr), ty::ReFree(super_fr)) => {\n@@ -567,7 +643,18 @@ fn resolve_block(visitor: &mut RegionResolutionVisitor, blk: &ast::Block) {\n     let prev_cx = visitor.cx;\n \n     let blk_scope = CodeExtent::Misc(blk.id);\n-    record_superlifetime(visitor, blk_scope, blk.span);\n+    // If block was previously marked as a terminating scope during\n+    // the recursive visit of its parent node in the AST, then we need\n+    // to account for the destruction scope representing the extent of\n+    // the destructors that run immediately after the the block itself\n+    // completes.\n+    if visitor.region_maps.terminating_scopes.borrow().contains(&blk_scope) {\n+        let dtor_scope = CodeExtent::DestructionScope(blk.id);\n+        record_superlifetime(visitor, dtor_scope, blk.span);\n+        visitor.region_maps.record_encl_scope(blk_scope, dtor_scope);\n+    } else {\n+        record_superlifetime(visitor, blk_scope, blk.span);\n+    }\n \n     // We treat the tail expression in the block (if any) somewhat\n     // differently from the statements. The issue has to do with\n@@ -675,7 +762,9 @@ fn resolve_stmt(visitor: &mut RegionResolutionVisitor, stmt: &ast::Stmt) {\n     // statement plus its destructors, and thus the extent for which\n     // regions referenced by the destructors need to survive.\n     visitor.region_maps.mark_as_terminating_scope(stmt_scope);\n-    record_superlifetime(visitor, stmt_scope, stmt.span);\n+    let dtor_scope = CodeExtent::DestructionScope(stmt_id);\n+    visitor.region_maps.record_encl_scope(stmt_scope, dtor_scope);\n+    record_superlifetime(visitor, dtor_scope, stmt.span);\n \n     let prev_parent = visitor.cx.parent;\n     visitor.cx.parent = InnermostEnclosingExpr::Some(stmt_id);\n@@ -687,15 +776,30 @@ fn resolve_expr(visitor: &mut RegionResolutionVisitor, expr: &ast::Expr) {\n     debug!(\"resolve_expr(expr.id={:?})\", expr.id);\n \n     let expr_scope = CodeExtent::Misc(expr.id);\n-    record_superlifetime(visitor, expr_scope, expr.span);\n+    // If expr was previously marked as a terminating scope during the\n+    // recursive visit of its parent node in the AST, then we need to\n+    // account for the destruction scope representing the extent of\n+    // the destructors that run immediately after the the expression\n+    // itself completes.\n+    if visitor.region_maps.terminating_scopes.borrow().contains(&expr_scope) {\n+        let dtor_scope = CodeExtent::DestructionScope(expr.id);\n+        record_superlifetime(visitor, dtor_scope, expr.span);\n+        visitor.region_maps.record_encl_scope(expr_scope, dtor_scope);\n+    } else {\n+        record_superlifetime(visitor, expr_scope, expr.span);\n+    }\n \n     let prev_cx = visitor.cx;\n     visitor.cx.parent = InnermostEnclosingExpr::Some(expr.id);\n \n     {\n         let region_maps = &mut visitor.region_maps;\n-        let terminating = |id| {\n-            let scope = CodeExtent::from_node_id(id);\n+        let terminating = |e: &P<ast::Expr>| {\n+            let scope = CodeExtent::from_node_id(e.id);\n+            region_maps.mark_as_terminating_scope(scope)\n+        };\n+        let terminating_block = |b: &P<ast::Block>| {\n+            let scope = CodeExtent::from_node_id(b.id);\n             region_maps.mark_as_terminating_scope(scope)\n         };\n         match expr.node {\n@@ -707,26 +811,26 @@ fn resolve_expr(visitor: &mut RegionResolutionVisitor, expr: &ast::Expr) {\n             ast::ExprBinary(codemap::Spanned { node: ast::BiOr, .. }, _, ref r) => {\n                 // For shortcircuiting operators, mark the RHS as a terminating\n                 // scope since it only executes conditionally.\n-                terminating(r.id);\n+                terminating(r);\n             }\n \n             ast::ExprIf(_, ref then, Some(ref otherwise)) => {\n-                terminating(then.id);\n-                terminating(otherwise.id);\n+                terminating_block(then);\n+                terminating(otherwise);\n             }\n \n             ast::ExprIf(ref expr, ref then, None) => {\n-                terminating(expr.id);\n-                terminating(then.id);\n+                terminating(expr);\n+                terminating_block(then);\n             }\n \n             ast::ExprLoop(ref body, _) => {\n-                terminating(body.id);\n+                terminating_block(body);\n             }\n \n             ast::ExprWhile(ref expr, ref body, _) => {\n-                terminating(expr.id);\n-                terminating(body.id);\n+                terminating(expr);\n+                terminating_block(body);\n             }\n \n             ast::ExprMatch(..) => {\n@@ -1021,6 +1125,9 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n \n     let body_scope = CodeExtent::from_node_id(body.id);\n     visitor.region_maps.mark_as_terminating_scope(body_scope);\n+    let dtor_scope = CodeExtent::DestructionScope(body.id);\n+    visitor.region_maps.record_encl_scope(body_scope, dtor_scope);\n+    record_superlifetime(visitor, dtor_scope, body.span);\n \n     let outer_cx = visitor.cx;\n "}, {"sha": "e91d7d8c52cde8fcbe52af0d0ce6b4797dde80c3", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -41,7 +41,7 @@ pub enum DefRegion {\n                         /* lifetime decl */ ast::NodeId),\n     DefLateBoundRegion(ty::DebruijnIndex,\n                        /* lifetime decl */ ast::NodeId),\n-    DefFreeRegion(/* block scope */ region::CodeExtent,\n+    DefFreeRegion(/* block scope */ region::DestructionScopeData,\n                   /* lifetime decl */ ast::NodeId),\n }\n \n@@ -81,7 +81,7 @@ enum ScopeChain<'a> {\n     LateScope(&'a Vec<ast::LifetimeDef>, Scope<'a>),\n     /// lifetimes introduced by items within a code block are scoped\n     /// to that block.\n-    BlockScope(region::CodeExtent, Scope<'a>),\n+    BlockScope(region::DestructionScopeData, Scope<'a>),\n     RootScope\n }\n \n@@ -191,7 +191,8 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n     }\n \n     fn visit_block(&mut self, b: &ast::Block) {\n-        self.with(BlockScope(region::CodeExtent::from_node_id(b.id), self.scope),\n+        self.with(BlockScope(region::DestructionScopeData::new(b.id),\n+                             self.scope),\n                   |_, this| visit::walk_block(this, b));\n     }\n \n@@ -393,16 +394,23 @@ impl<'a> LifetimeContext<'a> {\n     }\n \n     fn resolve_free_lifetime_ref(&mut self,\n-                                 scope_data: region::CodeExtent,\n+                                 scope_data: region::DestructionScopeData,\n                                  lifetime_ref: &ast::Lifetime,\n                                  scope: Scope) {\n+        debug!(\"resolve_free_lifetime_ref \\\n+                scope_data: {:?} lifetime_ref: {:?} scope: {:?}\",\n+               scope_data, lifetime_ref, scope);\n+\n         // Walk up the scope chain, tracking the outermost free scope,\n         // until we encounter a scope that contains the named lifetime\n         // or we run out of scopes.\n         let mut scope_data = scope_data;\n         let mut scope = scope;\n         let mut search_result = None;\n         loop {\n+            debug!(\"resolve_free_lifetime_ref \\\n+                    scope_data: {:?} scope: {:?} search_result: {:?}\",\n+                   scope_data, scope, search_result);\n             match *scope {\n                 BlockScope(blk_scope_data, s) => {\n                     scope_data = blk_scope_data;"}, {"sha": "bedcd74cfd7706448ba0d5d53fa50789793704c6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -1174,7 +1174,9 @@ pub enum Region {\n     /// region parameters.\n     ReFree(FreeRegion),\n \n-    /// A concrete region naming some expression within the current function.\n+    /// A concrete region naming some statically determined extent\n+    /// (e.g. an expression or sequence of statements) within the\n+    /// current function.\n     ReScope(region::CodeExtent),\n \n     /// Static data that has an \"infinite\" lifetime. Top in the region lattice.\n@@ -1296,7 +1298,7 @@ impl Region {\n /// A \"free\" region `fr` can be interpreted as \"some region\n /// at least as big as the scope `fr.scope`\".\n pub struct FreeRegion {\n-    pub scope: region::CodeExtent,\n+    pub scope: region::DestructionScopeData,\n     pub bound_region: BoundRegion\n }\n \n@@ -4192,12 +4194,16 @@ pub fn ty_region(tcx: &ctxt,\n     }\n }\n \n-pub fn free_region_from_def(free_id: ast::NodeId, def: &RegionParameterDef)\n+pub fn free_region_from_def(outlives_extent: region::DestructionScopeData,\n+                            def: &RegionParameterDef)\n     -> ty::Region\n {\n-    ty::ReFree(ty::FreeRegion { scope: region::CodeExtent::from_node_id(free_id),\n-                                bound_region: ty::BrNamed(def.def_id,\n-                                                          def.name) })\n+    let ret =\n+        ty::ReFree(ty::FreeRegion { scope: outlives_extent,\n+                                    bound_region: ty::BrNamed(def.def_id,\n+                                                              def.name) });\n+    debug!(\"free_region_from_def returns {:?}\", ret);\n+    ret\n }\n \n // Returns the type of a pattern as a monotype. Like @expr_ty, this function\n@@ -6252,21 +6258,23 @@ pub fn construct_free_substs<'a,'tcx>(\n     let mut types = VecPerParamSpace::empty();\n     push_types_from_defs(tcx, &mut types, generics.types.as_slice());\n \n+    let free_id_outlive = region::DestructionScopeData::new(free_id);\n+\n     // map bound 'a => free 'a\n     let mut regions = VecPerParamSpace::empty();\n-    push_region_params(&mut regions, free_id, generics.regions.as_slice());\n+    push_region_params(&mut regions, free_id_outlive, generics.regions.as_slice());\n \n     return Substs {\n         types: types,\n         regions: subst::NonerasedRegions(regions)\n     };\n \n     fn push_region_params(regions: &mut VecPerParamSpace<ty::Region>,\n-                          free_id: ast::NodeId,\n+                          all_outlive_extent: region::DestructionScopeData,\n                           region_params: &[RegionParameterDef])\n     {\n         for r in region_params {\n-            regions.push(r.space, ty::free_region_from_def(free_id, r));\n+            regions.push(r.space, ty::free_region_from_def(all_outlive_extent, r));\n         }\n     }\n \n@@ -6295,14 +6303,14 @@ pub fn construct_parameter_environment<'a,'tcx>(\n     //\n \n     let free_substs = construct_free_substs(tcx, generics, free_id);\n-    let free_id_scope = region::CodeExtent::from_node_id(free_id);\n+    let free_id_outlive = region::DestructionScopeData::new(free_id);\n \n     //\n     // Compute the bounds on Self and the type parameters.\n     //\n \n     let bounds = generics.to_bounds(tcx, &free_substs);\n-    let bounds = liberate_late_bound_regions(tcx, free_id_scope, &ty::Binder(bounds));\n+    let bounds = liberate_late_bound_regions(tcx, free_id_outlive, &ty::Binder(bounds));\n     let predicates = bounds.predicates.into_vec();\n \n     //\n@@ -6335,7 +6343,7 @@ pub fn construct_parameter_environment<'a,'tcx>(\n     let unnormalized_env = ty::ParameterEnvironment {\n         tcx: tcx,\n         free_substs: free_substs,\n-        implicit_region_bound: ty::ReScope(free_id_scope),\n+        implicit_region_bound: ty::ReScope(free_id_outlive.to_code_extent()),\n         caller_bounds: predicates,\n         selection_cache: traits::SelectionCache::new(),\n     };\n@@ -6603,14 +6611,14 @@ impl<'tcx> AutoDerefRef<'tcx> {\n /// `scope_id`.\n pub fn liberate_late_bound_regions<'tcx, T>(\n     tcx: &ty::ctxt<'tcx>,\n-    scope: region::CodeExtent,\n+    all_outlive_scope: region::DestructionScopeData,\n     value: &Binder<T>)\n     -> T\n     where T : TypeFoldable<'tcx> + Repr<'tcx>\n {\n     replace_late_bound_regions(\n         tcx, value,\n-        |br| ty::ReFree(ty::FreeRegion{scope: scope, bound_region: br})).0\n+        |br| ty::ReFree(ty::FreeRegion{scope: all_outlive_scope, bound_region: br})).0\n }\n \n pub fn count_late_bound_regions<'tcx, T>("}, {"sha": "397d27db3b96171dfdb08a033460f341f1688ad5", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -113,6 +113,10 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n         };\n         let scope_decorated_tag = match scope {\n             region::CodeExtent::Misc(_) => tag,\n+            region::CodeExtent::DestructionScope(_) => {\n+                new_string = format!(\"destruction scope surrounding {}\", tag);\n+                new_string.as_slice()\n+            }\n             region::CodeExtent::Remainder(r) => {\n                 new_string = format!(\"block suffix following statement {}\",\n                                      r.first_statement_index);\n@@ -135,7 +139,7 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n           }\n         };\n \n-        match cx.map.find(fr.scope.node_id()) {\n+        match cx.map.find(fr.scope.node_id) {\n           Some(ast_map::NodeBlock(ref blk)) => {\n               let (msg, opt_span) = explain_span(cx, \"block\", blk.span);\n               (format!(\"{} {}\", prefix, msg), opt_span)\n@@ -921,7 +925,7 @@ impl<'tcx> UserString<'tcx> for ty::Region {\n impl<'tcx> Repr<'tcx> for ty::FreeRegion {\n     fn repr(&self, tcx: &ctxt) -> String {\n         format!(\"ReFree({}, {})\",\n-                self.scope.node_id(),\n+                self.scope.repr(tcx),\n                 self.bound_region.repr(tcx))\n     }\n }\n@@ -931,12 +935,23 @@ impl<'tcx> Repr<'tcx> for region::CodeExtent {\n         match *self {\n             region::CodeExtent::Misc(node_id) =>\n                 format!(\"Misc({})\", node_id),\n+            region::CodeExtent::DestructionScope(node_id) =>\n+                format!(\"DestructionScope({})\", node_id),\n             region::CodeExtent::Remainder(rem) =>\n                 format!(\"Remainder({}, {})\", rem.block, rem.first_statement_index),\n         }\n     }\n }\n \n+impl<'tcx> Repr<'tcx> for region::DestructionScopeData {\n+    fn repr(&self, _tcx: &ctxt) -> String {\n+        match *self {\n+            region::DestructionScopeData{ node_id } =>\n+                format!(\"DestructionScopeData {{ node_id: {} }}\", node_id),\n+        }\n+    }\n+}\n+\n impl<'tcx> Repr<'tcx> for ast::DefId {\n     fn repr(&self, tcx: &ctxt) -> String {\n         // Unfortunately, there seems to be no way to attempt to print"}, {"sha": "4e308c5809f45ba96657628d891ba0b2fe36ea52", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -286,7 +286,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                 let loan_scope = match loan_region {\n                     ty::ReScope(scope) => scope,\n \n-                    ty::ReFree(ref fr) => fr.scope,\n+                    ty::ReFree(ref fr) => fr.scope.to_code_extent(),\n \n                     ty::ReStatic => {\n                         // If we get here, an error must have been"}, {"sha": "7105a6cc488821e0e30460cdcc7c83329a69a0e6", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -15,7 +15,7 @@ use diagnostic::Emitter;\n use driver;\n use rustc_resolve as resolve;\n use rustc_typeck::middle::lang_items;\n-use rustc_typeck::middle::region::{self, CodeExtent};\n+use rustc_typeck::middle::region::{self, CodeExtent, DestructionScopeData};\n use rustc_typeck::middle::resolve_lifetime;\n use rustc_typeck::middle::stability;\n use rustc_typeck::middle::subst;\n@@ -325,7 +325,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n     }\n \n     pub fn re_free(&self, nid: ast::NodeId, id: u32) -> ty::Region {\n-        ty::ReFree(ty::FreeRegion { scope: CodeExtent::from_node_id(nid),\n+        ty::ReFree(ty::FreeRegion { scope: DestructionScopeData::new(nid),\n                                     bound_region: ty::BrAnon(id)})\n     }\n "}, {"sha": "f7e37b6f6331e26546b382ea7cf8a3ad8e4552f7", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -130,12 +130,17 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n         // this new AST scope had better be its immediate child.\n         let top_scope = self.top_ast_scope();\n         if top_scope.is_some() {\n-            assert_eq!(self.ccx\n-                           .tcx()\n-                           .region_maps\n-                           .opt_encl_scope(region::CodeExtent::from_node_id(debug_loc.id))\n-                           .map(|s|s.node_id()),\n-                       top_scope);\n+            assert!((self.ccx\n+                     .tcx()\n+                     .region_maps\n+                     .opt_encl_scope(region::CodeExtent::from_node_id(debug_loc.id))\n+                     .map(|s|s.node_id()) == top_scope)\n+                    ||\n+                    (self.ccx\n+                     .tcx()\n+                     .region_maps\n+                     .opt_encl_scope(region::CodeExtent::DestructionScope(debug_loc.id))\n+                     .map(|s|s.node_id()) == top_scope));\n         }\n \n         self.push_scope(CleanupScope::new(AstScopeKind(debug_loc.id),"}, {"sha": "0b7c5b04aaa44d5802f117f8312ed294b6018ad9", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -13,7 +13,7 @@\n use super::{check_fn, Expectation, FnCtxt};\n \n use astconv;\n-use middle::region::CodeExtent;\n+use middle::region;\n use middle::subst;\n use middle::ty::{self, ToPolyTraitRef, Ty};\n use rscope::RegionScope;\n@@ -78,7 +78,9 @@ fn check_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     fcx.write_ty(expr.id, closure_type);\n \n     let fn_sig =\n-        ty::liberate_late_bound_regions(fcx.tcx(), CodeExtent::from_node_id(body.id), &fn_ty.sig);\n+        ty::liberate_late_bound_regions(fcx.tcx(),\n+                                        region::DestructionScopeData::new(body.id),\n+                                        &fn_ty.sig);\n \n     check_fn(fcx.ccx,\n              ast::Unsafety::Normal,"}, {"sha": "a081aabe55981ac6466f58658c616ba0b39cfdb0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -90,7 +90,7 @@ use middle::infer;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::McResult;\n use middle::pat_util::{self, pat_id_map};\n-use middle::region::CodeExtent;\n+use middle::region::{self, CodeExtent};\n use middle::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace, TypeSpace};\n use middle::traits;\n use middle::ty::{FnSig, VariantInfo, TypeScheme};\n@@ -495,7 +495,9 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             let fn_sig =\n                 fn_ty.sig.subst(ccx.tcx, &inh.param_env.free_substs);\n             let fn_sig =\n-                liberate_late_bound_regions(ccx.tcx, CodeExtent::from_node_id(body.id), &fn_sig);\n+                liberate_late_bound_regions(ccx.tcx,\n+                                            region::DestructionScopeData::new(body.id),\n+                                            &fn_sig);\n             let fn_sig =\n                 inh.normalize_associated_types_in(&inh.param_env, body.span, body.id, &fn_sig);\n \n@@ -1686,7 +1688,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let mut bounds_checker = wf::BoundsChecker::new(self,\n                                                         ast_t.span,\n-                                                        CodeExtent::from_node_id(self.body_id),\n+                                                        self.body_id,\n                                                         None);\n         bounds_checker.check_ty(t);\n "}, {"sha": "5122f9e2d38e572d0544463cdc7f739e93feb4dd", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -145,7 +145,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             let variants = lookup_fields(fcx);\n             let mut bounds_checker = BoundsChecker::new(fcx,\n                                                         item.span,\n-                                                        region::CodeExtent::from_node_id(item.id),\n+                                                        item.id,\n                                                         Some(&mut this.cache));\n             for variant in &variants {\n                 for field in &variant.fields {\n@@ -180,7 +180,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n         self.with_fcx(item, |this, fcx| {\n             let mut bounds_checker = BoundsChecker::new(fcx,\n                                                         item.span,\n-                                                        region::CodeExtent::from_node_id(item.id),\n+                                                        item.id,\n                                                         Some(&mut this.cache));\n \n             let type_scheme = ty::lookup_item_type(fcx.tcx(), local_def(item.id));\n@@ -196,11 +196,9 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                   item: &ast::Item)\n     {\n         self.with_fcx(item, |this, fcx| {\n-            let item_scope = region::CodeExtent::from_node_id(item.id);\n-\n             let mut bounds_checker = BoundsChecker::new(fcx,\n                                                         item.span,\n-                                                        item_scope,\n+                                                        item.id,\n                                                         Some(&mut this.cache));\n \n             // Find the impl self type as seen from the \"inside\" --\n@@ -383,15 +381,20 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n pub struct BoundsChecker<'cx,'tcx:'cx> {\n     fcx: &'cx FnCtxt<'cx,'tcx>,\n     span: Span,\n-    scope: region::CodeExtent,\n+\n+    // This field is often attached to item impls; it is not clear\n+    // that `CodeExtent` is well-defined for such nodes, so pnkfelix\n+    // has left it as a NodeId rather than porting to CodeExtent.\n+    scope: ast::NodeId,\n+\n     binding_count: uint,\n     cache: Option<&'cx mut HashSet<Ty<'tcx>>>,\n }\n \n impl<'cx,'tcx> BoundsChecker<'cx,'tcx> {\n     pub fn new(fcx: &'cx FnCtxt<'cx,'tcx>,\n                span: Span,\n-               scope: region::CodeExtent,\n+               scope: ast::NodeId,\n                cache: Option<&'cx mut HashSet<Ty<'tcx>>>)\n                -> BoundsChecker<'cx,'tcx> {\n         BoundsChecker { fcx: fcx, span: span, scope: scope,\n@@ -446,9 +449,12 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n         where T : TypeFoldable<'tcx> + Repr<'tcx>\n     {\n         self.binding_count += 1;\n-        let value = liberate_late_bound_regions(self.fcx.tcx(), self.scope, binder);\n-        debug!(\"BoundsChecker::fold_binder: late-bound regions replaced: {}\",\n-               value.repr(self.tcx()));\n+        let value = liberate_late_bound_regions(\n+            self.fcx.tcx(),\n+            region::DestructionScopeData::new(self.scope),\n+            binder);\n+        debug!(\"BoundsChecker::fold_binder: late-bound regions replaced: {} at scope: {:?}\",\n+               value.repr(self.tcx()), self.scope);\n         let value = value.fold_with(self);\n         self.binding_count -= 1;\n         ty::Binder(value)"}, {"sha": "55fa47760bbf0a471b7a64d39958d14510ee29cd", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81383bd8691c0915e66abaca845e508b6edc4851/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=81383bd8691c0915e66abaca845e508b6edc4851", "patch": "@@ -1564,7 +1564,7 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n             _ => typ,\n         };\n \n-        let body_scope = region::CodeExtent::from_node_id(body_id);\n+        let body_scope = region::DestructionScopeData::new(body_id);\n \n         // \"Required type\" comes from the trait definition. It may\n         // contain late-bound regions from the method, but not the\n@@ -1608,7 +1608,7 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n \n     fn liberate_early_bound_regions<'tcx,T>(\n         tcx: &ty::ctxt<'tcx>,\n-        scope: region::CodeExtent,\n+        scope: region::DestructionScopeData,\n         value: &T)\n         -> T\n         where T : TypeFoldable<'tcx> + Repr<'tcx>"}]}