{"sha": "1c091e4f630b6e8da44f491180b2196cf7a4fc01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMDkxZTRmNjMwYjZlOGRhNDRmNDkxMTgwYjIxOTZjZjdhNGZjMDE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-10T15:23:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-10T15:23:23Z"}, "message": "Rollup merge of #88732 - durin42:llvm-14-attrs-2, r=nikic\n\nRustWrapper: avoid deleted unclear attribute methods\n\nThese were deleted in https://reviews.llvm.org/D108614, and in C++ I\ndefinitely see the argument for their removal. I didn't try and\npropagate the changes up into higher layers of rustc in this change\nbecause my initial goal was to get rustc working against LLVM HEAD\npromptly, but I'm happy to follow up with some refactoring to make the\nAPI on the Rust side match the LLVM API more directly (though the way\nthe enum works in Rust makes the API less scary IMO).\n\nr? ``@nagisa`` cc ``@nikic``", "tree": {"sha": "5c44cd7e7551e186c53785141888bcc706325f6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c44cd7e7551e186c53785141888bcc706325f6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c091e4f630b6e8da44f491180b2196cf7a4fc01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhO3hrCRBK7hj4Ov3rIwAAfTMIAALS8wtNxgZA4cR9hkqnsNwr\nnVlSS6rYRJhJx+D1UK7WPrPe7Tr+7IZSObsfOeeGQ8+rc9sY6pQlTwRLrCryhn3z\np37+5d0v+Y/IBHUzNPCG7XF3m4wNWp6ukm19du+0eGyOaL0FyE7+Az5pEpMWtCHk\nbCwdoW5elhGuNWcuMKin2N33LnBSzX1ED9JzlScGLfNs5/TUXCWG4em9B2ccvA89\nXfb6WixAVMl5bJ/alxMoCsa3GL0Zp7E4vukuu5hqtoiyxtyb400Hbr2M99AVC1m/\nJpCg5MMA2nfVmIuxd4r2DAx/ysri/okexx+MNTpxPd9Pem/opHYgjAOiK6JEzMs=\n=8nhd\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c44cd7e7551e186c53785141888bcc706325f6e\nparent e0e3d85ec367d2d6c6b28ec764c4ab002458c46d\nparent 4d045406d1ee4c011e476fbeae81976c8012e886\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631287403 -0700\ncommitter GitHub <noreply@github.com> 1631287403 -0700\n\nRollup merge of #88732 - durin42:llvm-14-attrs-2, r=nikic\n\nRustWrapper: avoid deleted unclear attribute methods\n\nThese were deleted in https://reviews.llvm.org/D108614, and in C++ I\ndefinitely see the argument for their removal. I didn't try and\npropagate the changes up into higher layers of rustc in this change\nbecause my initial goal was to get rustc working against LLVM HEAD\npromptly, but I'm happy to follow up with some refactoring to make the\nAPI on the Rust side match the LLVM API more directly (though the way\nthe enum works in Rust makes the API less scary IMO).\n\nr? ``@nagisa`` cc ``@nikic``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c091e4f630b6e8da44f491180b2196cf7a4fc01", "html_url": "https://github.com/rust-lang/rust/commit/1c091e4f630b6e8da44f491180b2196cf7a4fc01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c091e4f630b6e8da44f491180b2196cf7a4fc01/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e3d85ec367d2d6c6b28ec764c4ab002458c46d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e3d85ec367d2d6c6b28ec764c4ab002458c46d", "html_url": "https://github.com/rust-lang/rust/commit/e0e3d85ec367d2d6c6b28ec764c4ab002458c46d"}, {"sha": "4d045406d1ee4c011e476fbeae81976c8012e886", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d045406d1ee4c011e476fbeae81976c8012e886", "html_url": "https://github.com/rust-lang/rust/commit/4d045406d1ee4c011e476fbeae81976c8012e886"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "9850f395a0f650a05d9bbb3e06ddb24b248e17d1", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1c091e4f630b6e8da44f491180b2196cf7a4fc01/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1c091e4f630b6e8da44f491180b2196cf7a4fc01/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=1c091e4f630b6e8da44f491180b2196cf7a4fc01", "patch": "@@ -203,56 +203,57 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n   report_fatal_error(\"bad AttributeKind\");\n }\n \n+template<typename T> static inline void AddAttribute(T *t, unsigned Index, Attribute Attr) {\n+#if LLVM_VERSION_LT(14, 0)\n+  t->addAttribute(Index, Attr);\n+#else\n+  t->addAttributeAtIndex(Index, Attr);\n+#endif\n+}\n+\n extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n   Attribute Attr = Attribute::get(Call->getContext(), fromRust(RustAttr));\n-  Call->addAttribute(Index, Attr);\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddCallSiteAttrString(LLVMValueRef Instr, unsigned Index,\n                                               const char *Name) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n   Attribute Attr = Attribute::get(Call->getContext(), Name);\n-  Call->addAttribute(Index, Attr);\n+  AddAttribute(Call, Index, Attr);\n }\n \n-\n extern \"C\" void LLVMRustAddAlignmentCallSiteAttr(LLVMValueRef Instr,\n                                                  unsigned Index,\n                                                  uint32_t Bytes) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n-  AttrBuilder B;\n-  B.addAlignmentAttr(Bytes);\n-  Call->setAttributes(Call->getAttributes().addAttributes(\n-      Call->getContext(), Index, B));\n+  Attribute Attr = Attribute::getWithAlignment(Call->getContext(), Align(Bytes));\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddDereferenceableCallSiteAttr(LLVMValueRef Instr,\n                                                        unsigned Index,\n                                                        uint64_t Bytes) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n-  AttrBuilder B;\n-  B.addDereferenceableAttr(Bytes);\n-  Call->setAttributes(Call->getAttributes().addAttributes(\n-      Call->getContext(), Index, B));\n+  Attribute Attr = Attribute::getWithDereferenceableBytes(Call->getContext(), Bytes);\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddDereferenceableOrNullCallSiteAttr(LLVMValueRef Instr,\n                                                              unsigned Index,\n                                                              uint64_t Bytes) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n-  AttrBuilder B;\n-  B.addDereferenceableOrNullAttr(Bytes);\n-  Call->setAttributes(Call->getAttributes().addAttributes(\n-      Call->getContext(), Index, B));\n+  Attribute Attr = Attribute::getWithDereferenceableOrNullBytes(Call->getContext(), Bytes);\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddByValCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n                                              LLVMTypeRef Ty) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n   Attribute Attr = Attribute::getWithByValType(Call->getContext(), unwrap(Ty));\n-  Call->addAttribute(Index, Attr);\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddStructRetCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n@@ -263,44 +264,44 @@ extern \"C\" void LLVMRustAddStructRetCallSiteAttr(LLVMValueRef Instr, unsigned In\n #else\n   Attribute Attr = Attribute::get(Call->getContext(), Attribute::StructRet);\n #endif\n-  Call->addAttribute(Index, Attr);\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n   Attribute Attr = Attribute::get(A->getContext(), fromRust(RustAttr));\n-  A->addAttribute(Index, Attr);\n+  AddAttribute(A, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddAlignmentAttr(LLVMValueRef Fn,\n                                          unsigned Index,\n                                          uint32_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n-  A->addAttribute(Index, Attribute::getWithAlignment(\n+  AddAttribute(A, Index, Attribute::getWithAlignment(\n       A->getContext(), llvm::Align(Bytes)));\n }\n \n extern \"C\" void LLVMRustAddDereferenceableAttr(LLVMValueRef Fn, unsigned Index,\n                                                uint64_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n-  A->addAttribute(Index, Attribute::getWithDereferenceableBytes(A->getContext(),\n+  AddAttribute(A, Index, Attribute::getWithDereferenceableBytes(A->getContext(),\n                                                                 Bytes));\n }\n \n extern \"C\" void LLVMRustAddDereferenceableOrNullAttr(LLVMValueRef Fn,\n                                                      unsigned Index,\n                                                      uint64_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n-  A->addAttribute(Index, Attribute::getWithDereferenceableOrNullBytes(\n+  AddAttribute(A, Index, Attribute::getWithDereferenceableOrNullBytes(\n       A->getContext(), Bytes));\n }\n \n extern \"C\" void LLVMRustAddByValAttr(LLVMValueRef Fn, unsigned Index,\n                                      LLVMTypeRef Ty) {\n   Function *F = unwrap<Function>(Fn);\n   Attribute Attr = Attribute::getWithByValType(F->getContext(), unwrap(Ty));\n-  F->addAttribute(Index, Attr);\n+  AddAttribute(F, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddStructRetAttr(LLVMValueRef Fn, unsigned Index,\n@@ -311,15 +312,15 @@ extern \"C\" void LLVMRustAddStructRetAttr(LLVMValueRef Fn, unsigned Index,\n #else\n   Attribute Attr = Attribute::get(F->getContext(), Attribute::StructRet);\n #endif\n-  F->addAttribute(Index, Attr);\n+  AddAttribute(F, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n                                                    unsigned Index,\n                                                    const char *Name,\n                                                    const char *Value) {\n   Function *F = unwrap<Function>(Fn);\n-  F->addAttribute(Index, Attribute::get(\n+  AddAttribute(F, Index, Attribute::get(\n       F->getContext(), StringRef(Name), StringRef(Value)));\n }\n \n@@ -330,7 +331,12 @@ extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n   Attribute Attr = Attribute::get(F->getContext(), fromRust(RustAttr));\n   AttrBuilder B(Attr);\n   auto PAL = F->getAttributes();\n-  auto PALNew = PAL.removeAttributes(F->getContext(), Index, B);\n+  AttributeList PALNew;\n+#if LLVM_VERSION_LT(14, 0)\n+  PALNew = PAL.removeAttributes(F->getContext(), Index, B);\n+#else\n+  PALNew = PAL.removeAttributesAtIndex(F->getContext(), Index, B);\n+#endif\n   F->setAttributes(PALNew);\n }\n "}]}