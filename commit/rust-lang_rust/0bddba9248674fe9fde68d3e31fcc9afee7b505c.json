{"sha": "0bddba9248674fe9fde68d3e31fcc9afee7b505c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZGRiYTkyNDg2NzRmZTlmZGU2OGQzZTMxZmNjOWFmZWU3YjUwNWM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-27T07:15:00Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-02-17T15:10:40Z"}, "message": "Add a span field to Visibility::Restricted\n\nThis span covers the whole visibility expression: e.g. `pub (in path)`.", "tree": {"sha": "f4f331479bbc1cfe706d9b167dfbfcf560fb95a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f331479bbc1cfe706d9b167dfbfcf560fb95a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bddba9248674fe9fde68d3e31fcc9afee7b505c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bddba9248674fe9fde68d3e31fcc9afee7b505c", "html_url": "https://github.com/rust-lang/rust/commit/0bddba9248674fe9fde68d3e31fcc9afee7b505c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bddba9248674fe9fde68d3e31fcc9afee7b505c/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a70c65892eea8cdf9d6a5f72ea003897eb61c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a70c65892eea8cdf9d6a5f72ea003897eb61c6", "html_url": "https://github.com/rust-lang/rust/commit/01a70c65892eea8cdf9d6a5f72ea003897eb61c6"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "e8969e7e3cb12ff8f47b5ea094c4eae1338636dd", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0bddba9248674fe9fde68d3e31fcc9afee7b505c", "patch": "@@ -3365,7 +3365,7 @@ impl<'a> LoweringContext<'a> {\n         match *v {\n             Visibility::Public => hir::Public,\n             Visibility::Crate(..) => hir::Visibility::Crate,\n-            Visibility::Restricted { ref path, id } => {\n+            Visibility::Restricted { ref path, id, .. } => {\n                 hir::Visibility::Restricted {\n                     path: P(self.lower_path(id, path, ParamMode::Explicit, true)),\n                     id: if let Some(owner) = explicit_owner {"}, {"sha": "37016ee9cf93b0bd3d9d46e13218a9938d7f9752", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0bddba9248674fe9fde68d3e31fcc9afee7b505c", "patch": "@@ -3802,7 +3802,7 @@ impl<'a> Resolver<'a> {\n             ast::Visibility::Inherited => {\n                 ty::Visibility::Restricted(self.current_module.normal_ancestor_id)\n             }\n-            ast::Visibility::Restricted { ref path, id } => {\n+            ast::Visibility::Restricted { ref path, id, .. } => {\n                 let def = self.smart_resolve_path(id, None, path,\n                                                   PathSource::Visibility).base_def();\n                 if def == Def::Err {"}, {"sha": "54b6e166e390f5ce2baf8407003a1582a00b8f87", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0bddba9248674fe9fde68d3e31fcc9afee7b505c", "patch": "@@ -1941,7 +1941,7 @@ pub enum CrateSugar {\n pub enum Visibility {\n     Public,\n     Crate(Span, CrateSugar),\n-    Restricted { path: P<Path>, id: NodeId },\n+    Restricted { path: P<Path>, id: NodeId, span: Span },\n     Inherited,\n }\n "}, {"sha": "9e51379a9ee5f6f53d601bb42a73cda977090351", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0bddba9248674fe9fde68d3e31fcc9afee7b505c", "patch": "@@ -1368,9 +1368,10 @@ pub fn noop_fold_stmt_kind<T: Folder>(node: StmtKind, folder: &mut T) -> SmallVe\n \n pub fn noop_fold_vis<T: Folder>(vis: Visibility, folder: &mut T) -> Visibility {\n     match vis {\n-        Visibility::Restricted { path, id } => Visibility::Restricted {\n+        Visibility::Restricted { path, id, span } => Visibility::Restricted {\n             path: path.map(|path| folder.fold_path(path)),\n-            id: folder.new_id(id)\n+            id: folder.new_id(id),\n+            span: folder.new_span(span),\n         },\n         _ => vis,\n     }"}, {"sha": "230c0bff9176425ccdd1c6f64d808714e91e9475", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0bddba9248674fe9fde68d3e31fcc9afee7b505c", "patch": "@@ -5710,8 +5710,12 @@ impl<'a> Parser<'a> {\n                 self.bump(); // `(`\n                 self.bump(); // `in`\n                 let path = self.parse_path(PathStyle::Mod)?.default_to_global(); // `path`\n-                let vis = Visibility::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n+                let vis = Visibility::Restricted {\n+                    path: P(path),\n+                    id: ast::DUMMY_NODE_ID,\n+                    span: self.prev_span,\n+                };\n                 return Ok(vis)\n             } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren)) &&\n                       self.look_ahead(1, |t| t.is_keyword(keywords::Super) ||\n@@ -5720,8 +5724,12 @@ impl<'a> Parser<'a> {\n                 // `pub(self)` or `pub(super)`\n                 self.bump(); // `(`\n                 let path = self.parse_path(PathStyle::Mod)?.default_to_global(); // `super`/`self`\n-                let vis = Visibility::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n+                let vis = Visibility::Restricted {\n+                    path: P(path),\n+                    id: ast::DUMMY_NODE_ID,\n+                    span: self.prev_span,\n+                };\n                 return Ok(vis)\n             } else if !can_take_tuple {  // Provide this diagnostic if this is not a tuple struct\n                 // `pub(something) fn ...` or `struct X { pub(something) y: Z }`"}, {"sha": "14679a9ebd141f01acdf8c6e24c651c3d303afd0", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bddba9248674fe9fde68d3e31fcc9afee7b505c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0bddba9248674fe9fde68d3e31fcc9afee7b505c", "patch": "@@ -811,7 +811,7 @@ pub fn walk_arm<'a, V: Visitor<'a>>(visitor: &mut V, arm: &'a Arm) {\n }\n \n pub fn walk_vis<'a, V: Visitor<'a>>(visitor: &mut V, vis: &'a Visibility) {\n-    if let Visibility::Restricted { ref path, id } = *vis {\n+    if let Visibility::Restricted { ref path, id, .. } = *vis {\n         visitor.visit_path(path, id);\n     }\n }"}]}