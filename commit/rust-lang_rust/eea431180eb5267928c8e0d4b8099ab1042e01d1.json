{"sha": "eea431180eb5267928c8e0d4b8099ab1042e01d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYTQzMTE4MGViNTI2NzkyOGM4ZTBkNGI4MDk5YWIxMDQyZTAxZDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-06T08:21:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-06T08:21:35Z"}, "message": "Regenerate", "tree": {"sha": "4797a973b944a831f5567953aa6c991f658d454b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4797a973b944a831f5567953aa6c991f658d454b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eea431180eb5267928c8e0d4b8099ab1042e01d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eea431180eb5267928c8e0d4b8099ab1042e01d1", "html_url": "https://github.com/rust-lang/rust/commit/eea431180eb5267928c8e0d4b8099ab1042e01d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eea431180eb5267928c8e0d4b8099ab1042e01d1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d308ff910b18719fabaeb9df7bc5fc0afbd0a194", "url": "https://api.github.com/repos/rust-lang/rust/commits/d308ff910b18719fabaeb9df7bc5fc0afbd0a194", "html_url": "https://github.com/rust-lang/rust/commit/d308ff910b18719fabaeb9df7bc5fc0afbd0a194"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "483e11931915943b3cfa827b863cee9ce6cb6d0e", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eea431180eb5267928c8e0d4b8099ab1042e01d1/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea431180eb5267928c8e0d4b8099ab1042e01d1/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=eea431180eb5267928c8e0d4b8099ab1042e01d1", "patch": "@@ -1,3 +1,5 @@\n+mod generated;\n+\n use std::sync::Arc;\n \n use hir::Semantics;"}, {"sha": "7d35fa2846d7988b539520255f417911c9845dc2", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/eea431180eb5267928c8e0d4b8099ab1042e01d1/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea431180eb5267928c8e0d4b8099ab1042e01d1/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=eea431180eb5267928c8e0d4b8099ab1042e01d1", "patch": "@@ -1,10 +1,10 @@\n //! Generated file, do not edit by hand, see `xtask/src/codegen`\n \n-use super::check;\n+use super::check_doc_test;\n \n #[test]\n fn doctest_add_custom_impl() {\n-    check(\n+    check_doc_test(\n         \"add_custom_impl\",\n         r#####\"\n #[derive(Deb<|>ug, Display)]\n@@ -23,7 +23,7 @@ impl Debug for S {\n \n #[test]\n fn doctest_add_derive() {\n-    check(\n+    check_doc_test(\n         \"add_derive\",\n         r#####\"\n struct Point {\n@@ -43,7 +43,7 @@ struct Point {\n \n #[test]\n fn doctest_add_explicit_type() {\n-    check(\n+    check_doc_test(\n         \"add_explicit_type\",\n         r#####\"\n fn main() {\n@@ -60,7 +60,7 @@ fn main() {\n \n #[test]\n fn doctest_add_function() {\n-    check(\n+    check_doc_test(\n         \"add_function\",\n         r#####\"\n struct Baz;\n@@ -87,7 +87,7 @@ fn bar(arg: &str, baz: Baz) {\n \n #[test]\n fn doctest_add_hash() {\n-    check(\n+    check_doc_test(\n         \"add_hash\",\n         r#####\"\n fn main() {\n@@ -104,7 +104,7 @@ fn main() {\n \n #[test]\n fn doctest_add_impl() {\n-    check(\n+    check_doc_test(\n         \"add_impl\",\n         r#####\"\n struct Ctx<T: Clone> {\n@@ -125,7 +125,7 @@ impl<T: Clone> Ctx<T> {\n \n #[test]\n fn doctest_add_impl_default_members() {\n-    check(\n+    check_doc_test(\n         \"add_impl_default_members\",\n         r#####\"\n trait Trait {\n@@ -159,7 +159,7 @@ impl Trait for () {\n \n #[test]\n fn doctest_add_impl_missing_members() {\n-    check(\n+    check_doc_test(\n         \"add_impl_missing_members\",\n         r#####\"\n trait Trait<T> {\n@@ -191,7 +191,7 @@ impl Trait<u32> for () {\n \n #[test]\n fn doctest_add_new() {\n-    check(\n+    check_doc_test(\n         \"add_new\",\n         r#####\"\n struct Ctx<T: Clone> {\n@@ -213,7 +213,7 @@ impl<T: Clone> Ctx<T> {\n \n #[test]\n fn doctest_apply_demorgan() {\n-    check(\n+    check_doc_test(\n         \"apply_demorgan\",\n         r#####\"\n fn main() {\n@@ -230,7 +230,7 @@ fn main() {\n \n #[test]\n fn doctest_auto_import() {\n-    check(\n+    check_doc_test(\n         \"auto_import\",\n         r#####\"\n fn main() {\n@@ -251,7 +251,7 @@ pub mod std { pub mod collections { pub struct HashMap { } } }\n \n #[test]\n fn doctest_change_visibility() {\n-    check(\n+    check_doc_test(\n         \"change_visibility\",\n         r#####\"\n <|>fn frobnicate() {}\n@@ -264,7 +264,7 @@ pub(crate) fn frobnicate() {}\n \n #[test]\n fn doctest_convert_to_guarded_return() {\n-    check(\n+    check_doc_test(\n         \"convert_to_guarded_return\",\n         r#####\"\n fn main() {\n@@ -288,7 +288,7 @@ fn main() {\n \n #[test]\n fn doctest_fill_match_arms() {\n-    check(\n+    check_doc_test(\n         \"fill_match_arms\",\n         r#####\"\n enum Action { Move { distance: u32 }, Stop }\n@@ -314,7 +314,7 @@ fn handle(action: Action) {\n \n #[test]\n fn doctest_flip_binexpr() {\n-    check(\n+    check_doc_test(\n         \"flip_binexpr\",\n         r#####\"\n fn main() {\n@@ -331,7 +331,7 @@ fn main() {\n \n #[test]\n fn doctest_flip_comma() {\n-    check(\n+    check_doc_test(\n         \"flip_comma\",\n         r#####\"\n fn main() {\n@@ -348,7 +348,7 @@ fn main() {\n \n #[test]\n fn doctest_flip_trait_bound() {\n-    check(\n+    check_doc_test(\n         \"flip_trait_bound\",\n         r#####\"\n fn foo<T: Clone +<|> Copy>() { }\n@@ -361,7 +361,7 @@ fn foo<T: Copy + Clone>() { }\n \n #[test]\n fn doctest_inline_local_variable() {\n-    check(\n+    check_doc_test(\n         \"inline_local_variable\",\n         r#####\"\n fn main() {\n@@ -379,7 +379,7 @@ fn main() {\n \n #[test]\n fn doctest_introduce_variable() {\n-    check(\n+    check_doc_test(\n         \"introduce_variable\",\n         r#####\"\n fn main() {\n@@ -397,7 +397,7 @@ fn main() {\n \n #[test]\n fn doctest_invert_if() {\n-    check(\n+    check_doc_test(\n         \"invert_if\",\n         r#####\"\n fn main() {\n@@ -414,7 +414,7 @@ fn main() {\n \n #[test]\n fn doctest_make_raw_string() {\n-    check(\n+    check_doc_test(\n         \"make_raw_string\",\n         r#####\"\n fn main() {\n@@ -431,7 +431,7 @@ fn main() {\n \n #[test]\n fn doctest_make_usual_string() {\n-    check(\n+    check_doc_test(\n         \"make_usual_string\",\n         r#####\"\n fn main() {\n@@ -448,7 +448,7 @@ fn main() {\n \n #[test]\n fn doctest_merge_imports() {\n-    check(\n+    check_doc_test(\n         \"merge_imports\",\n         r#####\"\n use std::<|>fmt::Formatter;\n@@ -462,7 +462,7 @@ use std::{fmt::Formatter, io};\n \n #[test]\n fn doctest_merge_match_arms() {\n-    check(\n+    check_doc_test(\n         \"merge_match_arms\",\n         r#####\"\n enum Action { Move { distance: u32 }, Stop }\n@@ -488,7 +488,7 @@ fn handle(action: Action) {\n \n #[test]\n fn doctest_move_arm_cond_to_match_guard() {\n-    check(\n+    check_doc_test(\n         \"move_arm_cond_to_match_guard\",\n         r#####\"\n enum Action { Move { distance: u32 }, Stop }\n@@ -515,7 +515,7 @@ fn handle(action: Action) {\n \n #[test]\n fn doctest_move_bounds_to_where_clause() {\n-    check(\n+    check_doc_test(\n         \"move_bounds_to_where_clause\",\n         r#####\"\n fn apply<T, U, <|>F: FnOnce(T) -> U>(f: F, x: T) -> U {\n@@ -532,7 +532,7 @@ fn apply<T, U, F>(f: F, x: T) -> U where F: FnOnce(T) -> U {\n \n #[test]\n fn doctest_move_guard_to_arm_body() {\n-    check(\n+    check_doc_test(\n         \"move_guard_to_arm_body\",\n         r#####\"\n enum Action { Move { distance: u32 }, Stop }\n@@ -559,7 +559,7 @@ fn handle(action: Action) {\n \n #[test]\n fn doctest_remove_dbg() {\n-    check(\n+    check_doc_test(\n         \"remove_dbg\",\n         r#####\"\n fn main() {\n@@ -576,7 +576,7 @@ fn main() {\n \n #[test]\n fn doctest_remove_hash() {\n-    check(\n+    check_doc_test(\n         \"remove_hash\",\n         r#####\"\n fn main() {\n@@ -593,7 +593,7 @@ fn main() {\n \n #[test]\n fn doctest_remove_mut() {\n-    check(\n+    check_doc_test(\n         \"remove_mut\",\n         r#####\"\n impl Walrus {\n@@ -610,7 +610,7 @@ impl Walrus {\n \n #[test]\n fn doctest_reorder_fields() {\n-    check(\n+    check_doc_test(\n         \"reorder_fields\",\n         r#####\"\n struct Foo {foo: i32, bar: i32};\n@@ -625,7 +625,7 @@ const test: Foo = Foo {foo: 1, bar: 0}\n \n #[test]\n fn doctest_replace_if_let_with_match() {\n-    check(\n+    check_doc_test(\n         \"replace_if_let_with_match\",\n         r#####\"\n enum Action { Move { distance: u32 }, Stop }\n@@ -653,7 +653,7 @@ fn handle(action: Action) {\n \n #[test]\n fn doctest_replace_let_with_if_let() {\n-    check(\n+    check_doc_test(\n         \"replace_let_with_if_let\",\n         r#####\"\n enum Option<T> { Some(T), None }\n@@ -679,7 +679,7 @@ fn compute() -> Option<i32> { None }\n \n #[test]\n fn doctest_replace_qualified_name_with_use() {\n-    check(\n+    check_doc_test(\n         \"replace_qualified_name_with_use\",\n         r#####\"\n fn process(map: std::collections::<|>HashMap<String, String>) {}\n@@ -694,7 +694,7 @@ fn process(map: HashMap<String, String>) {}\n \n #[test]\n fn doctest_replace_unwrap_with_match() {\n-    check(\n+    check_doc_test(\n         \"replace_unwrap_with_match\",\n         r#####\"\n enum Result<T, E> { Ok(T), Err(E) }\n@@ -718,7 +718,7 @@ fn main() {\n \n #[test]\n fn doctest_split_import() {\n-    check(\n+    check_doc_test(\n         \"split_import\",\n         r#####\"\n use std::<|>collections::HashMap;\n@@ -731,7 +731,7 @@ use std::{collections::HashMap};\n \n #[test]\n fn doctest_unwrap_block() {\n-    check(\n+    check_doc_test(\n         \"unwrap_block\",\n         r#####\"\n fn foo() {"}, {"sha": "b4907f4b2b08b2237f587a79d962ef994a59387c", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eea431180eb5267928c8e0d4b8099ab1042e01d1/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea431180eb5267928c8e0d4b8099ab1042e01d1/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=eea431180eb5267928c8e0d4b8099ab1042e01d1", "patch": "@@ -27,7 +27,7 @@ const AST_NODES: &str = \"crates/ra_syntax/src/ast/generated/nodes.rs\";\n const AST_TOKENS: &str = \"crates/ra_syntax/src/ast/generated/tokens.rs\";\n \n const ASSISTS_DIR: &str = \"crates/ra_assists/src/handlers\";\n-const ASSISTS_TESTS: &str = \"crates/ra_assists/src/doc_tests/generated.rs\";\n+const ASSISTS_TESTS: &str = \"crates/ra_assists/src/tests/generated.rs\";\n const ASSISTS_DOCS: &str = \"docs/user/assists.md\";\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]"}, {"sha": "4bd6b5f0ca8cb9feab62f278f33d7b694e693877", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eea431180eb5267928c8e0d4b8099ab1042e01d1/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea431180eb5267928c8e0d4b8099ab1042e01d1/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=eea431180eb5267928c8e0d4b8099ab1042e01d1", "patch": "@@ -101,14 +101,14 @@ fn collect_assists() -> Result<Vec<Assist>> {\n }\n \n fn generate_tests(assists: &[Assist], mode: Mode) -> Result<()> {\n-    let mut buf = String::from(\"use super::check;\\n\");\n+    let mut buf = String::from(\"use super::check_doc_test;\\n\");\n \n     for assist in assists.iter() {\n         let test = format!(\n             r######\"\n #[test]\n fn doctest_{}() {{\n-    check(\n+    check_doc_test(\n         \"{}\",\n r#####\"\n {}\"#####, r#####\""}, {"sha": "a3c2e37d1d01fa83c41ffd9c2dfe401cb32389df", "filename": "xtask/tests/tidy-tests/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eea431180eb5267928c8e0d4b8099ab1042e01d1/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea431180eb5267928c8e0d4b8099ab1042e01d1/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fmain.rs?ref=eea431180eb5267928c8e0d4b8099ab1042e01d1", "patch": "@@ -24,7 +24,7 @@ fn check_todo(path: &Path, text: &str) {\n         // This file itself is whitelisted since this test itself contains matches.\n         \"tests/cli.rs\",\n         // Some of our assists generate `todo!()` so those files are whitelisted.\n-        \"doc_tests/generated.rs\",\n+        \"tests/generated.rs\",\n         \"handlers/add_missing_impl_members.rs\",\n         \"handlers/add_function.rs\",\n         // To support generating `todo!()` in assists, we have `expr_todo()` in ast::make."}]}