{"sha": "22d6204db8c5919e8ef5801dd1049603999f9cfa", "node_id": "C_kwDOAAsO6NoAKDIyZDYyMDRkYjhjNTkxOWU4ZWY1ODAxZGQxMDQ5NjAzOTk5ZjljZmE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-02-09T13:21:25Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-02-15T20:17:46Z"}, "message": "use mir::Visitor when collecting alloc_ids in pretty printing", "tree": {"sha": "0dc68230f4f4d30026fdb65677bd72318b2fe36c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dc68230f4f4d30026fdb65677bd72318b2fe36c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d6204db8c5919e8ef5801dd1049603999f9cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d6204db8c5919e8ef5801dd1049603999f9cfa", "html_url": "https://github.com/rust-lang/rust/commit/22d6204db8c5919e8ef5801dd1049603999f9cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d6204db8c5919e8ef5801dd1049603999f9cfa/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8092b90cb2f8d5a70a0e0a61bd439143133e1dc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8092b90cb2f8d5a70a0e0a61bd439143133e1dc7", "html_url": "https://github.com/rust-lang/rust/commit/8092b90cb2f8d5a70a0e0a61bd439143133e1dc7"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "c263eb6f321cf017a6b8cf42ed647f24dd2d2248", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/22d6204db8c5919e8ef5801dd1049603999f9cfa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d6204db8c5919e8ef5801dd1049603999f9cfa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=22d6204db8c5919e8ef5801dd1049603999f9cfa", "patch": "@@ -17,9 +17,8 @@ use rustc_middle::mir::interpret::{\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::MirSource;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::abi::Size;\n-use std::ops::ControlFlow;\n \n const INDENT: &str = \"    \";\n /// Alignment for lining up comments following MIR statements\n@@ -669,6 +668,7 @@ pub fn write_allocations<'tcx>(\n     fn alloc_ids_from_alloc(alloc: &Allocation) -> impl DoubleEndedIterator<Item = AllocId> + '_ {\n         alloc.relocations().values().map(|id| *id)\n     }\n+\n     fn alloc_ids_from_const(val: ConstValue<'_>) -> impl Iterator<Item = AllocId> + '_ {\n         match val {\n             ConstValue::Scalar(interpret::Scalar::Ptr(ptr, _size)) => {\n@@ -682,17 +682,29 @@ pub fn write_allocations<'tcx>(\n             }\n         }\n     }\n+\n     struct CollectAllocIds(BTreeSet<AllocId>);\n-    impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n-        fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::ConstKind::Value(val) = c.val() {\n+\n+    impl<'tcx> Visitor<'tcx> for CollectAllocIds {\n+        fn visit_const(&mut self, c: &&'tcx ty::Const<'tcx>, _loc: Location) {\n+            if let ty::ConstKind::Value(val) = c.val {\n                 self.0.extend(alloc_ids_from_const(val));\n             }\n-            c.super_visit_with(self)\n+        }\n+\n+        fn visit_constant(&mut self, c: &Constant<'tcx>, loc: Location) {\n+            match c.literal {\n+                ConstantKind::Ty(c) => self.visit_const(&c, loc),\n+                ConstantKind::Val(val, _) => {\n+                    self.0.extend(alloc_ids_from_const(val));\n+                }\n+            }\n         }\n     }\n+\n     let mut visitor = CollectAllocIds(Default::default());\n-    body.visit_with(&mut visitor);\n+    visitor.visit_body(body);\n+\n     // `seen` contains all seen allocations, including the ones we have *not* printed yet.\n     // The protocol is to first `insert` into `seen`, and only if that returns `true`\n     // then push to `todo`."}]}