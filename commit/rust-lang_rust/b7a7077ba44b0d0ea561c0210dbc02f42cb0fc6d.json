{"sha": "b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d", "node_id": "C_kwDOAAsO6NoAKGI3YTcwNzdiYTQ0YjBkMGVhNTYxYzAyMTBkYmMwMmY0MmNiMGZjNmQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-11T10:25:03Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-11T10:29:08Z"}, "message": "Give proper error message when tcx wasn't passed to decoder", "tree": {"sha": "3d2e6b3edf0478acec85515f51eb00e59268ab74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d2e6b3edf0478acec85515f51eb00e59268ab74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d", "html_url": "https://github.com/rust-lang/rust/commit/b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "html_url": "https://github.com/rust-lang/rust/commit/35a0961bbc8fba75bb863c7835b39d431ad9fc5d"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "771fb0911343715276c3eba48b9c32e65e379253", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d", "patch": "@@ -311,8 +311,11 @@ impl<T: ParameterizedOverTcx> LazyArray<T> {\n impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n     #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n-        debug_assert!(self.tcx.is_some(), \"missing TyCtxt in DecodeContext\");\n-        self.tcx.unwrap()\n+        let Some(tcx) = self.tcx else {\n+            bug!(\"No TyCtxt found for decoding. \\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n+        };\n+        tcx\n     }\n \n     #[inline]\n@@ -454,7 +457,12 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ast::AttrId {\n impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n     fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {\n         let cdata = decoder.cdata();\n-        let sess = decoder.sess.unwrap();\n+\n+        let Some(sess) = decoder.sess else {\n+            bug!(\"Cannot decode SyntaxContext without Session.\\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n+        };\n+\n         let cname = cdata.root.name;\n         rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {\n             debug!(\"SpecializedDecoder<SyntaxContext>: decoding {}\", id);\n@@ -471,7 +479,11 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {\n     fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {\n         let local_cdata = decoder.cdata();\n-        let sess = decoder.sess.unwrap();\n+\n+        let Some(sess) = decoder.sess else {\n+            bug!(\"Cannot decode ExpnId without Session. \\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n+        };\n \n         let cnum = CrateNum::decode(decoder);\n         let index = u32::decode(decoder);\n@@ -520,7 +532,8 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {\n         let hi = lo + len;\n \n         let Some(sess) = decoder.sess else {\n-            bug!(\"Cannot decode Span without Session.\")\n+            bug!(\"Cannot decode Span without Session. \\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\")\n         };\n \n         // Index of the file in the corresponding crate's list of encoded files."}]}