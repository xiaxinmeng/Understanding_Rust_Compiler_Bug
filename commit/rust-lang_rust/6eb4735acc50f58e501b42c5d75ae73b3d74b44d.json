{"sha": "6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYjQ3MzVhY2M1MGY1OGU1MDFiNDJjNWQ3NWFlNzNiM2Q3NGI0NGQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-22T17:28:43Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-05-03T16:49:43Z"}, "message": "Unify rustc and rustdoc parsing of `cfg()`\n\nThis extracts a new `parse_cfg` function that's used between both.\n\n- Treat `#[doc(cfg(x), cfg(y))]` the same as `#[doc(cfg(x)]\n  #[doc(cfg(y))]`. Previously it would be completely ignored.\n- Treat `#[doc(inline, cfg(x))]` the same as `#[doc(inline)]\n  #[doc(cfg(x))]`. Previously, the cfg would be ignored.\n- Pass the cfg predicate through to rustc_expand to be validated\n\nCo-authored-by: Vadim Petrochenkov <vadim.petrochenkov@gmail.com>", "tree": {"sha": "6e56d363316d940fe4f73a77023a89386e1f5a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e56d363316d940fe4f73a77023a89386e1f5a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "html_url": "https://github.com/rust-lang/rust/commit/6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c963945aa35a76703bf62e024af2d85b2796e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/78c963945aa35a76703bf62e024af2d85b2796e2", "html_url": "https://github.com/rust-lang/rust/commit/78c963945aa35a76703bf62e024af2d85b2796e2"}], "stats": {"total": 146, "additions": 82, "deletions": 64}, "files": [{"sha": "f9140609c0f3c86f048d0b542c4feddb75adba82", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "patch": "@@ -464,31 +464,9 @@ impl<'a> StripUnconfigured<'a> {\n                     return true;\n                 }\n             };\n-            let error = |span, msg, suggestion: &str| {\n-                let mut err = self.sess.parse_sess.span_diagnostic.struct_span_err(span, msg);\n-                if !suggestion.is_empty() {\n-                    err.span_suggestion(\n-                        span,\n-                        \"expected syntax is\",\n-                        suggestion.into(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                err.emit();\n-                true\n-            };\n-            let span = meta_item.span;\n-            match meta_item.meta_item_list() {\n-                None => error(span, \"`cfg` is not followed by parentheses\", \"cfg(/* predicate */)\"),\n-                Some([]) => error(span, \"`cfg` predicate is not specified\", \"\"),\n-                Some([_, .., l]) => error(l.span(), \"multiple `cfg` predicates are specified\", \"\"),\n-                Some([single]) => match single.meta_item() {\n-                    Some(meta_item) => {\n-                        attr::cfg_matches(meta_item, &self.sess.parse_sess, self.features)\n-                    }\n-                    None => error(single.span(), \"`cfg` predicate key cannot be a literal\", \"\"),\n-                },\n-            }\n+            parse_cfg(&meta_item, &self.sess).map_or(true, |meta_item| {\n+                attr::cfg_matches(&meta_item, &self.sess.parse_sess, self.features)\n+            })\n         })\n     }\n \n@@ -532,6 +510,32 @@ impl<'a> StripUnconfigured<'a> {\n     }\n }\n \n+pub fn parse_cfg<'a>(meta_item: &'a MetaItem, sess: &Session) -> Option<&'a MetaItem> {\n+    let error = |span, msg, suggestion: &str| {\n+        let mut err = sess.parse_sess.span_diagnostic.struct_span_err(span, msg);\n+        if !suggestion.is_empty() {\n+            err.span_suggestion(\n+                span,\n+                \"expected syntax is\",\n+                suggestion.into(),\n+                Applicability::HasPlaceholders,\n+            );\n+        }\n+        err.emit();\n+        None\n+    };\n+    let span = meta_item.span;\n+    match meta_item.meta_item_list() {\n+        None => error(span, \"`cfg` is not followed by parentheses\", \"cfg(/* predicate */)\"),\n+        Some([]) => error(span, \"`cfg` predicate is not specified\", \"\"),\n+        Some([_, .., l]) => error(l.span(), \"multiple `cfg` predicates are specified\", \"\"),\n+        Some([single]) => match single.meta_item() {\n+            Some(meta_item) => Some(meta_item),\n+            None => error(single.span(), \"`cfg` predicate key cannot be a literal\", \"\"),\n+        },\n+    }\n+}\n+\n fn is_cfg(sess: &Session, attr: &Attribute) -> bool {\n     sess.check_name(attr, sym::cfg)\n }"}, {"sha": "4c3b86b2e2b43877a0fdf144f959b3ac8bc3e51c", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "patch": "@@ -307,10 +307,10 @@ fn merge_attrs(\n             } else {\n                 Attributes::from_ast(&both, None)\n             },\n-            both.cfg(cx.sess().diagnostic()),\n+            both.cfg(cx.sess()),\n         )\n     } else {\n-        (old_attrs.clean(cx), old_attrs.cfg(cx.sess().diagnostic()))\n+        (old_attrs.clean(cx), old_attrs.cfg(cx.sess()))\n     }\n }\n "}, {"sha": "a7bc3c20a3d7469ba8b6a0bd598ff5bb3c979a6a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "patch": "@@ -2006,7 +2006,7 @@ fn clean_extern_crate(\n         def_id: crate_def_id,\n         visibility: krate.vis.clean(cx),\n         kind: box ExternCrateItem { src: orig_name },\n-        cfg: attrs.cfg(cx.sess().diagnostic()),\n+        cfg: attrs.cfg(cx.sess()),\n     }]\n }\n "}, {"sha": "a2a03dfd15b7c02764807e9c7b5d5daf475929d4", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "patch": "@@ -320,7 +320,7 @@ impl Item {\n             kind,\n             box ast_attrs.clean(cx),\n             cx,\n-            ast_attrs.cfg(cx.sess().diagnostic()),\n+            ast_attrs.cfg(cx.sess()),\n         )\n     }\n \n@@ -332,7 +332,7 @@ impl Item {\n         cx: &mut DocContext<'_>,\n         cfg: Option<Arc<Cfg>>,\n     ) -> Item {\n-        debug!(\"name={:?}, def_id={:?}\", name, def_id);\n+        trace!(\"name={:?}, def_id={:?}\", name, def_id);\n \n         Item {\n             def_id,\n@@ -681,7 +681,7 @@ crate trait AttributesExt {\n \n     fn other_attrs(&self) -> Vec<ast::Attribute>;\n \n-    fn cfg(&self, diagnostic: &::rustc_errors::Handler) -> Option<Arc<Cfg>>;\n+    fn cfg(&self, sess: &Session) -> Option<Arc<Cfg>>;\n }\n \n impl AttributesExt for [ast::Attribute] {\n@@ -706,17 +706,28 @@ impl AttributesExt for [ast::Attribute] {\n         self.iter().filter(|attr| attr.doc_str().is_none()).cloned().collect()\n     }\n \n-    fn cfg(&self, diagnostic: &::rustc_errors::Handler) -> Option<Arc<Cfg>> {\n+    fn cfg(&self, sess: &Session) -> Option<Arc<Cfg>> {\n         let mut cfg = Cfg::True;\n \n         for attr in self.iter() {\n+            // #[doc]\n             if attr.doc_str().is_none() && attr.has_name(sym::doc) {\n-                if let Some(mi) = attr.meta() {\n-                    if let Some(cfg_mi) = Attributes::extract_cfg(&mi) {\n-                        // Extracted #[doc(cfg(...))]\n-                        match Cfg::parse(cfg_mi) {\n-                            Ok(new_cfg) => cfg &= new_cfg,\n-                            Err(e) => diagnostic.span_err(e.span, e.msg),\n+                // #[doc(...)]\n+                if let Some(list) = attr.meta().as_ref().and_then(|mi| mi.meta_item_list()) {\n+                    for item in list {\n+                        // #[doc(include)]\n+                        if !item.has_name(sym::cfg) {\n+                            continue;\n+                        }\n+                        // #[doc(cfg(...))]\n+                        if let Some(cfg_mi) = item\n+                            .meta_item()\n+                            .and_then(|item| rustc_expand::config::parse_cfg(&item, sess))\n+                        {\n+                            match Cfg::parse(&cfg_mi) {\n+                                Ok(new_cfg) => cfg &= new_cfg,\n+                                Err(e) => sess.span_err(e.span, e.msg),\n+                            }\n                         }\n                     }\n                 }\n@@ -883,29 +894,6 @@ impl Attributes {\n         self.other_attrs.lists(name)\n     }\n \n-    /// Extracts the content from an attribute `#[doc(cfg(content))]`.\n-    crate fn extract_cfg(mi: &ast::MetaItem) -> Option<&ast::MetaItem> {\n-        use rustc_ast::NestedMetaItem::MetaItem;\n-\n-        if let ast::MetaItemKind::List(ref nmis) = mi.kind {\n-            if nmis.len() == 1 {\n-                if let MetaItem(ref cfg_mi) = nmis[0] {\n-                    if cfg_mi.has_name(sym::cfg) {\n-                        if let ast::MetaItemKind::List(ref cfg_nmis) = cfg_mi.kind {\n-                            if cfg_nmis.len() == 1 {\n-                                if let MetaItem(ref content_mi) = cfg_nmis[0] {\n-                                    return Some(content_mi);\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        None\n-    }\n-\n     /// Reads a `MetaItem` from within an attribute, looks for whether it is a\n     /// `#[doc(include=\"file\")]`, and returns the filename and contents of the file as loaded from\n     /// its expansion."}, {"sha": "69a47c5b67a7a8b87856c5465bec4227b9f97926", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "patch": "@@ -1095,7 +1095,7 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n         let ast_attrs = self.tcx.hir().attrs(hir_id);\n         let mut attrs = Attributes::from_ast(ast_attrs, None);\n \n-        if let Some(ref cfg) = ast_attrs.cfg(self.sess.diagnostic()) {\n+        if let Some(ref cfg) = ast_attrs.cfg(self.sess) {\n             if !cfg.matches(&self.sess.parse_sess, Some(&self.sess.features_untracked())) {\n                 return;\n             }"}, {"sha": "268974169ea853837d8c10f772f01588ddf3d01a", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "patch": "@@ -154,7 +154,7 @@ impl<'tcx> Context<'tcx> {\n         &self.cache\n     }\n \n-    fn sess(&self) -> &'tcx Session {\n+    pub(super) fn sess(&self) -> &'tcx Session {\n         &self.shared.tcx.sess\n     }\n "}, {"sha": "d33a31ef1ee259da889e7107edf116dafcf04951", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "patch": "@@ -292,7 +292,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     let import_item = clean::Item {\n                         def_id: import_def_id,\n                         attrs: import_attrs,\n-                        cfg: ast_attrs.cfg(cx.tcx().sess.diagnostic()),\n+                        cfg: ast_attrs.cfg(cx.sess()),\n                         ..myitem.clone()\n                     };\n "}, {"sha": "d237b8605c068a0614fda35c931d35c36452fc78", "filename": "src/test/rustdoc-ui/invalid-cfg.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Ftest%2Frustdoc-ui%2Finvalid-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Ftest%2Frustdoc-ui%2Finvalid-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-cfg.rs?ref=6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "patch": "@@ -0,0 +1,4 @@\n+#![feature(doc_cfg)]\n+#[doc(cfg = \"x\")] //~ ERROR not followed by parentheses\n+#[doc(cfg(x, y))] //~ ERROR multiple `cfg` predicates\n+struct S {}"}, {"sha": "dae238b052b8a75331cf770f635a7a0c2f302f79", "filename": "src/test/rustdoc-ui/invalid-cfg.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Ftest%2Frustdoc-ui%2Finvalid-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Ftest%2Frustdoc-ui%2Finvalid-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-cfg.stderr?ref=6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "patch": "@@ -0,0 +1,14 @@\n+error: `cfg` is not followed by parentheses\n+  --> $DIR/invalid-cfg.rs:2:7\n+   |\n+LL | #[doc(cfg = \"x\")]\n+   |       ^^^^^^^^^ help: expected syntax is: `cfg(/* predicate */)`\n+\n+error: multiple `cfg` predicates are specified\n+  --> $DIR/invalid-cfg.rs:3:14\n+   |\n+LL | #[doc(cfg(x, y))]\n+   |              ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1fc80b3e76c53a7d775bf2f06192a9bef0028185", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb4735acc50f58e501b42c5d75ae73b3d74b44d/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=6eb4735acc50f58e501b42c5d75ae73b3d74b44d", "patch": "@@ -91,3 +91,11 @@ pub unsafe fn uses_target_feature() {\n pub fn uses_cfg_target_feature() {\n     uses_target_feature();\n }\n+\n+// multiple attributes should be allowed\n+// @has doc_cfg/fn.multiple_attrs.html \\\n+//  '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n+//  'This is supported on x and y and z only.'\n+#[doc(inline, cfg(x))]\n+#[doc(cfg(y), cfg(z))]\n+pub fn multiple_attrs() {}"}]}