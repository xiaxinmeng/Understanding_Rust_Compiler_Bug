{"sha": "c5c6ef702978d880decf14d9e7ed319e5b005537", "node_id": "C_kwDOAAsO6NoAKGM1YzZlZjcwMjk3OGQ4ODBkZWNmMTRkOWU3ZWQzMTllNWIwMDU1Mzc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-19T08:03:23Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-19T08:15:46Z"}, "message": "stop folding `UnevaluatedConst`", "tree": {"sha": "f6302a18a70d135023bb5aad85d9b686159a765f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6302a18a70d135023bb5aad85d9b686159a765f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5c6ef702978d880decf14d9e7ed319e5b005537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c6ef702978d880decf14d9e7ed319e5b005537", "html_url": "https://github.com/rust-lang/rust/commit/c5c6ef702978d880decf14d9e7ed319e5b005537", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5c6ef702978d880decf14d9e7ed319e5b005537/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "116d35d401b52add75bcef8edd698f72855ed3c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/116d35d401b52add75bcef8edd698f72855ed3c3", "html_url": "https://github.com/rust-lang/rust/commit/116d35d401b52add75bcef8edd698f72855ed3c3"}], "stats": {"total": 100, "additions": 9, "deletions": 91}, "files": [{"sha": "b2a865c9663d68b85f7e6e8017a7bf32740ccf22", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=c5c6ef702978d880decf14d9e7ed319e5b005537", "patch": "@@ -14,7 +14,7 @@ use super::ScalarInt;\n \n /// An unevaluated (potentially generic) constant used in the type-system.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n-#[derive(Hash, HashStable)]\n+#[derive(Hash, HashStable, TypeFoldable, TypeVisitable)]\n pub struct UnevaluatedConst<'tcx> {\n     pub def: ty::WithOptConstParam<DefId>,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "7201737be657bc100c9287f5df65e1025fdecbf5", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=c5c6ef702978d880decf14d9e7ed319e5b005537", "patch": "@@ -34,12 +34,6 @@ impl FlagComputation {\n         result.flags\n     }\n \n-    pub fn for_unevaluated_const(uv: ty::UnevaluatedConst<'_>) -> TypeFlags {\n-        let mut result = FlagComputation::new();\n-        result.add_unevaluated_const(uv);\n-        result.flags\n-    }\n-\n     fn add_flags(&mut self, flags: TypeFlags) {\n         self.flags = self.flags | flags;\n     }\n@@ -289,7 +283,10 @@ impl FlagComputation {\n     fn add_const(&mut self, c: ty::Const<'_>) {\n         self.add_ty(c.ty());\n         match c.kind() {\n-            ty::ConstKind::Unevaluated(unevaluated) => self.add_unevaluated_const(unevaluated),\n+            ty::ConstKind::Unevaluated(uv) => {\n+                self.add_substs(uv.substs);\n+                self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n+            }\n             ty::ConstKind::Infer(infer) => {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n                 match infer {\n@@ -313,11 +310,6 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_unevaluated_const(&mut self, ct: ty::UnevaluatedConst<'_>) {\n-        self.add_substs(ct.substs);\n-        self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n-    }\n-\n     fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {\n         self.add_substs(projection.substs);\n         match projection.term.unpack() {"}, {"sha": "54f1499eb3d1815f758ef3101e62280044c63c67", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=c5c6ef702978d880decf14d9e7ed319e5b005537", "patch": "@@ -126,13 +126,6 @@ pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n         c.super_fold_with(self)\n     }\n \n-    fn fold_ty_unevaluated(\n-        &mut self,\n-        uv: ty::UnevaluatedConst<'tcx>,\n-    ) -> ty::UnevaluatedConst<'tcx> {\n-        uv.super_fold_with(self)\n-    }\n-\n     fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n         p.super_fold_with(self)\n     }\n@@ -169,13 +162,6 @@ pub trait FallibleTypeFolder<'tcx>: Sized {\n         c.try_super_fold_with(self)\n     }\n \n-    fn try_fold_ty_unevaluated(\n-        &mut self,\n-        c: ty::UnevaluatedConst<'tcx>,\n-    ) -> Result<ty::UnevaluatedConst<'tcx>, Self::Error> {\n-        c.try_super_fold_with(self)\n-    }\n-\n     fn try_fold_predicate(\n         &mut self,\n         p: ty::Predicate<'tcx>,\n@@ -215,13 +201,6 @@ where\n         Ok(self.fold_const(c))\n     }\n \n-    fn try_fold_ty_unevaluated(\n-        &mut self,\n-        c: ty::UnevaluatedConst<'tcx>,\n-    ) -> Result<ty::UnevaluatedConst<'tcx>, !> {\n-        Ok(self.fold_ty_unevaluated(c))\n-    }\n-\n     fn try_fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> Result<ty::Predicate<'tcx>, !> {\n         Ok(self.fold_predicate(p))\n     }"}, {"sha": "2cad333e3f52a515bc7edbf62a1cf5a74cea773a", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=c5c6ef702978d880decf14d9e7ed319e5b005537", "patch": "@@ -832,27 +832,6 @@ impl<'tcx> TypeVisitable<'tcx> for InferConst<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::UnevaluatedConst<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        folder.try_fold_ty_unevaluated(self)\n-    }\n-}\n-\n-impl<'tcx> TypeVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_ty_unevaluated(*self)\n-    }\n-}\n-\n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::UnevaluatedConst<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        Ok(ty::UnevaluatedConst { def: self.def, substs: self.substs.try_fold_with(folder)? })\n-    }\n-}\n-\n impl<'tcx> TypeSuperVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.substs.visit_with(visitor)"}, {"sha": "c09f71f9a6d0926e204b30b5511ba6c2ceeca6df", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=c5c6ef702978d880decf14d9e7ed319e5b005537", "patch": "@@ -197,13 +197,6 @@ pub trait TypeVisitor<'tcx>: Sized {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_ty_unevaluated(\n-        &mut self,\n-        uv: ty::UnevaluatedConst<'tcx>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        uv.super_visit_with(self)\n-    }\n-\n     fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         p.super_visit_with(self)\n     }\n@@ -592,21 +585,6 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         }\n     }\n \n-    #[inline]\n-    #[instrument(level = \"trace\", ret)]\n-    fn visit_ty_unevaluated(\n-        &mut self,\n-        uv: ty::UnevaluatedConst<'tcx>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        let flags = FlagComputation::for_unevaluated_const(uv);\n-        trace!(r.flags=?flags);\n-        if flags.intersects(self.flags) {\n-            ControlFlow::Break(FoundFlags)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n     #[inline]\n     #[instrument(level = \"trace\", ret)]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "0bb25a74dc8b043846126445fc170919b1a3e2c6", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c6ef702978d880decf14d9e7ed319e5b005537/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=c5c6ef702978d880decf14d9e7ed319e5b005537", "patch": "@@ -837,24 +837,14 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n             }\n         }\n \n-        fn visit_ty_unevaluated(\n-            &mut self,\n-            uv: ty::UnevaluatedConst<'tcx>,\n-        ) -> ControlFlow<Self::BreakTy> {\n+        fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             // Constants can only influence object safety if they reference `Self`.\n             // This is only possible for unevaluated constants, so we walk these here.\n             //\n-            // If `AbstractConst::new` returned an error we already failed compilation\n+            // If `AbstractConst::from_const` returned an error we already failed compilation\n             // so we don't have to emit an additional error here.\n-            //\n-            // We currently recurse into abstract consts here but do not recurse in\n-            // `is_const_evaluatable`. This means that the object safety check is more\n-            // liberal than the const eval check.\n-            //\n-            // This shouldn't really matter though as we can't really use any\n-            // constants which are not considered const evaluatable.\n             use rustc_middle::ty::abstract_const::Node;\n-            if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv) {\n+            if let Ok(Some(ct)) = AbstractConst::from_const(self.tcx, ct) {\n                 walk_abstract_const(self.tcx, ct, |node| match node.root(self.tcx) {\n                     Node::Leaf(leaf) => self.visit_const(leaf),\n                     Node::Cast(_, _, ty) => self.visit_ty(ty),\n@@ -863,7 +853,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n                     }\n                 })\n             } else {\n-                ControlFlow::CONTINUE\n+                ct.super_visit_with(self)\n             }\n         }\n     }"}]}