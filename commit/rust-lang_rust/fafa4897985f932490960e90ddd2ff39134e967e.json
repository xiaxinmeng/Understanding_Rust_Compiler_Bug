{"sha": "fafa4897985f932490960e90ddd2ff39134e967e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZmE0ODk3OTg1ZjkzMjQ5MDk2MGU5MGRkZDJmZjM5MTM0ZTk2N2U=", "commit": {"author": {"name": "Nicholas Matsakis", "email": "nmatsakis@psyche.localdomain", "date": "2019-12-11T15:32:11Z"}, "committer": {"name": "Nicholas Matsakis", "email": "nmatsakis@psyche.localdomain", "date": "2019-12-11T15:33:36Z"}, "message": "clarify that `Box<T>` should only be used when defined *in Rust*", "tree": {"sha": "334b408183215682fe7a2b70ae5b09cc58e6b05a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/334b408183215682fe7a2b70ae5b09cc58e6b05a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fafa4897985f932490960e90ddd2ff39134e967e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fafa4897985f932490960e90ddd2ff39134e967e", "html_url": "https://github.com/rust-lang/rust/commit/fafa4897985f932490960e90ddd2ff39134e967e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fafa4897985f932490960e90ddd2ff39134e967e/comments", "author": null, "committer": null, "parents": [{"sha": "cb1cc1181e884d0f53c444af0b6a21189af83bea", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb1cc1181e884d0f53c444af0b6a21189af83bea", "html_url": "https://github.com/rust-lang/rust/commit/cb1cc1181e884d0f53c444af0b6a21189af83bea"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "c25495bec41ee8cf016a41a8b290e947638eb154", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fafa4897985f932490960e90ddd2ff39134e967e/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafa4897985f932490960e90ddd2ff39134e967e/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=fafa4897985f932490960e90ddd2ff39134e967e", "patch": "@@ -63,13 +63,14 @@\n //! T` obtained from `Box::<T>::into_raw` may be deallocated using the\n //! [`Global`] allocator with `Layout::for_value(&*value)`.\n //!\n-//! So long as `T: Sized`, a `Box<T>` is guaranteed to be represented as a\n-//! single pointer and is also ABI-compatible with C pointers (i.e. the C type\n-//! `T*`). This means that you can have Rust code which passes ownership of a\n-//! `Box<T>` to C code by using `Box<T>` as the type on the Rust side, and\n-//! `T*` as the corresponding type on the C side. As an example, consider this\n-//! C header which declares functions that create and destroy some kind of\n-//! `Foo` value:\n+//! So long as `T: Sized`, a `Box<T>` is guaranteed to be represented\n+//! as a single pointer and is also ABI-compatible with C pointers\n+//! (i.e. the C type `T*`). This means that if you have extern \"C\"\n+//! Rust functions that will be called from C, you can define those\n+//! Rust functions using `Box<T>` types, and use `T*` as corresponding\n+//! type on the C side. As an example, consider this C header which\n+//! declares functions that create and destroy some kind of `Foo`\n+//! value:\n //!\n //! ```c\n //! /* C header */\n@@ -108,6 +109,14 @@\n //! is to only use `Box<T>` for pointers that originated from the global\n //! allocator.\n //!\n+//! **Important.** At least at present, you should avoid using\n+//! `Box<T>` types for functions that are defined in C but invoked\n+//! from Rust. In those cases, you should directly mirror the C types\n+//! as closely as possible. Using types like `Box<T>` where the C\n+//! definition is just using `T*` can lead to undefined behavior, as\n+//! described in [rust-lang/unsafe-code-guidelines#198][ucg#198].\n+//!\n+//! [ucg#198]: https://github.com/rust-lang/unsafe-code-guidelines/issues/198\n //! [dereferencing]: ../../std/ops/trait.Deref.html\n //! [`Box`]: struct.Box.html\n //! [`Global`]: ../alloc/struct.Global.html"}]}