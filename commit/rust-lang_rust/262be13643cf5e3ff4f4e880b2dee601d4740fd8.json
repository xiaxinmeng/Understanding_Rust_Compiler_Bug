{"sha": "262be13643cf5e3ff4f4e880b2dee601d4740fd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MmJlMTM2NDNjZjVlM2ZmNGY0ZTg4MGIyZGVlNjAxZDQ3NDBmZDg=", "commit": {"author": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-03-29T00:34:39Z"}, "committer": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-03-29T00:40:55Z"}, "message": "Use f{32,64}::to_bits for is_zero test in vec::SpecFromElem\n\nvec::SpecFromElem provides an optimization to use calloc to fill a Vec\nwhen the element given to fill the Vec is represented by 0.\n\nFor floats, the test for that currently used is `x == 0. &&\nx.is_sign_positive()`. When compiled in a standalone function, rustc\ngenerates the following assembly:\n\n```\n  xorps xmm1, xmm1\n  ucomisd xmm0, xmm1\n  setnp al\n  sete cl\n  and cl, al\n  movq rax, xmm0\n  test rax, rax\n  setns al\n  and al, cl\n  ret\n```\n\nA simpler test telling us whether the value is represented by 0, is\n`x.to_bits() == 0`, which rustc compiles to:\n\n```\n  movq rax, xmm0\n  test rax, rax\n  sete al\n  ret\n```\n\nNot that the test is hot in any way, but it also makes it clearer what\nthe intent in the rust code is.", "tree": {"sha": "ae9647002f9f52e91109e32117022d6f1afe3918", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae9647002f9f52e91109e32117022d6f1afe3918"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/262be13643cf5e3ff4f4e880b2dee601d4740fd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/262be13643cf5e3ff4f4e880b2dee601d4740fd8", "html_url": "https://github.com/rust-lang/rust/commit/262be13643cf5e3ff4f4e880b2dee601d4740fd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/262be13643cf5e3ff4f4e880b2dee601d4740fd8/comments", "author": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5277c1457d397f22ba18a1d40c1318729becbb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5277c1457d397f22ba18a1d40c1318729becbb4", "html_url": "https://github.com/rust-lang/rust/commit/e5277c1457d397f22ba18a1d40c1318729becbb4"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "3c2f91d08e35b64a535a44aeb423c8aa8440e820", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/262be13643cf5e3ff4f4e880b2dee601d4740fd8/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262be13643cf5e3ff4f4e880b2dee601d4740fd8/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=262be13643cf5e3ff4f4e880b2dee601d4740fd8", "patch": "@@ -1574,8 +1574,8 @@ impl_spec_from_elem!(u64, |x| x == 0);\n impl_spec_from_elem!(u128, |x| x == 0);\n impl_spec_from_elem!(usize, |x| x == 0);\n \n-impl_spec_from_elem!(f32, |x: f32| x == 0. && x.is_sign_positive());\n-impl_spec_from_elem!(f64, |x: f64| x == 0. && x.is_sign_positive());\n+impl_spec_from_elem!(f32, |x: f32| x.to_bits() == 0);\n+impl_spec_from_elem!(f64, |x: f64| x.to_bits() == 0);\n \n ////////////////////////////////////////////////////////////////////////////////\n // Common trait implementations for Vec"}]}