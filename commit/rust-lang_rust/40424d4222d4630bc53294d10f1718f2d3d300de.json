{"sha": "40424d4222d4630bc53294d10f1718f2d3d300de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNDI0ZDQyMjJkNDYzMGJjNTMyOTRkMTBmMTcxOGYyZDNkMzAwZGU=", "commit": {"author": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2019-06-03T14:21:08Z"}, "committer": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2019-06-04T22:05:07Z"}, "message": "Fix clippy::identity_conversion", "tree": {"sha": "4e27c7f2ce4a886e9a512b4986509b0927ae9ea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e27c7f2ce4a886e9a512b4986509b0927ae9ea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40424d4222d4630bc53294d10f1718f2d3d300de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40424d4222d4630bc53294d10f1718f2d3d300de", "html_url": "https://github.com/rust-lang/rust/commit/40424d4222d4630bc53294d10f1718f2d3d300de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40424d4222d4630bc53294d10f1718f2d3d300de/comments", "author": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed3d93b875f25da6f81b8a107a8c200311240627", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3d93b875f25da6f81b8a107a8c200311240627", "html_url": "https://github.com/rust-lang/rust/commit/ed3d93b875f25da6f81b8a107a8c200311240627"}], "stats": {"total": 108, "additions": 49, "deletions": 59}, "files": [{"sha": "a445dcb4d4cbe0d3a2f64d49ddd343c8587534e9", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -34,10 +34,10 @@ impl salsa::Database for BatchDatabase {\n }\n \n fn vfs_file_to_id(f: ra_vfs::VfsFile) -> FileId {\n-    FileId(f.0.into())\n+    FileId(f.0)\n }\n fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n-    SourceRootId(r.0.into())\n+    SourceRootId(r.0)\n }\n \n impl BatchDatabase {"}, {"sha": "38ff1d6f63aac28ef222db4d8880dbe450702a97", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -36,7 +36,7 @@ impl AdtDef {\n \n impl Struct {\n     pub(crate) fn variant_data(&self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        db.struct_data((*self).into()).variant_data.clone()\n+        db.struct_data(*self).variant_data.clone()\n     }\n }\n "}, {"sha": "a0d3b33fe67a87fc6f17df3c7a984a23824c831e", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -202,7 +202,6 @@ impl ModuleImplBlocks {\n         };\n \n         let (file_id, module_source) = m.module.definition_source(db);\n-        let file_id: HirFileId = file_id.into();\n         let node = match &module_source {\n             ModuleSource::SourceFile(node) => node.syntax(),\n             ModuleSource::Module(node) => {"}, {"sha": "d822f7d93c9c48d8ef194ebd225158b4e4777680", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -468,7 +468,7 @@ impl CrateDefMap {\n                     );\n \n                     return ResolvePathResult::with(\n-                        Either::Left(PerNs::types((*s).into())),\n+                        Either::Left(PerNs::types(*s)),\n                         ReachedFixedPoint::Yes,\n                         Some(i),\n                     );"}, {"sha": "3bfef799dac2136617b2ab97c24aa560301da776", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -556,7 +556,7 @@ where\n \n     fn define_def(&mut self, def: &raw::DefData) {\n         let module = Module { krate: self.def_collector.def_map.krate, module_id: self.module_id };\n-        let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id.into());\n+        let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id);\n \n         macro_rules! def {\n             ($kind:ident, $ast_id:ident) => {"}, {"sha": "a0afe282c15e1e0461a1c4c8c922c4845f504161", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -69,7 +69,7 @@ impl RawItems {\n     ) -> (Arc<RawItems>, Arc<ImportSourceMap>) {\n         let mut collector = RawItemsCollector {\n             raw_items: RawItems::default(),\n-            source_ast_id_map: db.ast_id_map(file_id.into()),\n+            source_ast_id_map: db.ast_id_map(file_id),\n             source_map: ImportSourceMap::default(),\n         };\n         if let Some(node) = db.parse_or_expand(file_id) {"}, {"sha": "6a579962294ab67cd9242723da72970f9f1a7338", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -48,8 +48,8 @@ pub fn module_from_declaration(\n pub fn module_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Module> {\n     let file = db.parse(position.file_id).tree;\n     match find_node_at_offset::<ast::Module>(file.syntax(), position.offset) {\n-        Some(m) if !m.has_semi() => module_from_inline(db, position.file_id.into(), m),\n-        _ => module_from_file_id(db, position.file_id.into()),\n+        Some(m) if !m.has_semi() => module_from_inline(db, position.file_id, m),\n+        _ => module_from_file_id(db, position.file_id),\n     }\n }\n \n@@ -72,9 +72,9 @@ pub fn module_from_child_node(\n     child: &SyntaxNode,\n ) -> Option<Module> {\n     if let Some(m) = child.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi()) {\n-        module_from_inline(db, file_id.into(), m)\n+        module_from_inline(db, file_id, m)\n     } else {\n-        module_from_file_id(db, file_id.into())\n+        module_from_file_id(db, file_id)\n     }\n }\n \n@@ -99,14 +99,12 @@ pub fn struct_from_module(\n     struct_def: &ast::StructDef,\n ) -> Struct {\n     let (file_id, _) = module.definition_source(db);\n-    let file_id = file_id.into();\n     let ctx = LocationCtx::new(db, module, file_id);\n     Struct { id: ctx.to_def(struct_def) }\n }\n \n pub fn enum_from_module(db: &impl HirDatabase, module: Module, enum_def: &ast::EnumDef) -> Enum {\n     let (file_id, _) = module.definition_source(db);\n-    let file_id = file_id.into();\n     let ctx = LocationCtx::new(db, module, file_id);\n     Enum { id: ctx.to_def(enum_def) }\n }\n@@ -117,7 +115,6 @@ pub fn trait_from_module(\n     trait_def: &ast::TraitDef,\n ) -> Trait {\n     let (file_id, _) = module.definition_source(db);\n-    let file_id = file_id.into();\n     let ctx = LocationCtx::new(db, module, file_id);\n     Trait { id: ctx.to_def(trait_def) }\n }"}, {"sha": "5edc59f18a51de215d154da6ed9295f686c0ce01", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -539,7 +539,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n             })?;\n \n-            resolved = Resolution::Def(item.into());\n+            resolved = Resolution::Def(item);\n         }\n \n         match resolved {\n@@ -762,7 +762,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     _ => &Ty::Unknown,\n                 };\n                 let subty = self.infer_pat(*pat, expectation, default_bm);\n-                Ty::apply_one(TypeCtor::Ref(*mutability), subty.into())\n+                Ty::apply_one(TypeCtor::Ref(*mutability), subty)\n             }\n             Pat::TupleStruct { path: ref p, args: ref subpats } => {\n                 self.infer_tuple_struct_pat(p.as_ref(), subpats, expected, default_bm)\n@@ -790,7 +790,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                 let bound_ty = match mode {\n                     BindingMode::Ref(mutability) => {\n-                        Ty::apply_one(TypeCtor::Ref(mutability), inner_ty.clone().into())\n+                        Ty::apply_one(TypeCtor::Ref(mutability), inner_ty.clone())\n                     }\n                     BindingMode::Move => inner_ty.clone(),\n                 };"}, {"sha": "bd08e183db924ca9951d7d1e4f26f162dbcf68d4", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -21,8 +21,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let function = match calling_node {\n         FnCallNode::CallExpr(expr) => {\n             //FIXME: apply subst\n-            let (callable_def, _subst) =\n-                analyzer.type_of(db, expr.expr()?.into())?.as_callable()?;\n+            let (callable_def, _subst) = analyzer.type_of(db, expr.expr()?)?.as_callable()?;\n             match callable_def {\n                 hir::CallableDef::Function(it) => it,\n                 //FIXME: handle other callables"}, {"sha": "3e35d835239ad385278c1da74f4d6d5299175437", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -110,7 +110,7 @@ pub(crate) fn on_dot_typed(db: &RootDatabase, position: FilePosition) -> Option<\n     let mut edit = TextEditBuilder::default();\n     edit.replace(\n         TextRange::from_to(position.offset - current_indent_len, position.offset),\n-        target_indent.into(),\n+        target_indent,\n     );\n \n     let res = SourceChange::source_file_edit_from(\"reindent dot\", position.file_id, edit.finish())"}, {"sha": "082ac8609c436948a0a789a0ecdaa1cb448c4e04", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -64,7 +64,7 @@ impl CargoTargetSpec {\n             None => return Ok(None),\n         };\n         let file_id = world.analysis().crate_root(crate_id)?;\n-        let path = world.vfs.read().file2path(ra_vfs::VfsFile(file_id.0.into()));\n+        let path = world.vfs.read().file2path(ra_vfs::VfsFile(file_id.0));\n         let res = world.workspaces.iter().find_map(|ws| match ws {\n             project_model::ProjectWorkspace::Cargo { cargo, .. } => {\n                 let tgt = cargo.target_by_root(&path)?;"}, {"sha": "090fb9b1b00990caa06edbe4678278a0413179c1", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -384,7 +384,7 @@ fn on_notification(\n             if let Some(file_id) =\n                 state.vfs.write().add_file_overlay(&path, params.text_document.text)\n             {\n-                subs.add_sub(FileId(file_id.0.into()));\n+                subs.add_sub(FileId(file_id.0));\n             }\n             return Ok(());\n         }\n@@ -406,7 +406,7 @@ fn on_notification(\n             let uri = params.text_document.uri;\n             let path = uri.to_file_path().map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n             if let Some(file_id) = state.vfs.write().remove_file_overlay(path.as_path()) {\n-                subs.remove_sub(FileId(file_id.0.into()));\n+                subs.remove_sub(FileId(file_id.0));\n             }\n             let params = req::PublishDiagnosticsParams { uri, diagnostics: Vec::new() };\n             let not = RawNotification::new::<req::PublishDiagnostics>(&params);"}, {"sha": "cd8df4fdba9d652b3d7846b0406bf01288261c15", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -60,14 +60,14 @@ impl WorldState {\n         for r in vfs_roots {\n             let vfs_root_path = vfs.root2path(r);\n             let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n-            change.add_root(SourceRootId(r.0.into()), is_local);\n+            change.add_root(SourceRootId(r.0), is_local);\n         }\n \n         // Create crate graph from all the workspaces\n         let mut crate_graph = CrateGraph::default();\n         let mut load = |path: &std::path::Path| {\n             let vfs_file = vfs.load(path);\n-            vfs_file.map(|f| FileId(f.0.into()))\n+            vfs_file.map(|f| FileId(f.0))\n         };\n         for ws in workspaces.iter() {\n             crate_graph.extend(ws.to_crate_graph(&mut load));\n@@ -105,29 +105,24 @@ impl WorldState {\n                     if is_local {\n                         self.roots_to_scan -= 1;\n                         for (file, path, text) in files {\n-                            change.add_file(\n-                                SourceRootId(root.0.into()),\n-                                FileId(file.0.into()),\n-                                path,\n-                                text,\n-                            );\n+                            change.add_file(SourceRootId(root.0), FileId(file.0), path, text);\n                         }\n                     } else {\n                         let files = files\n                             .into_iter()\n-                            .map(|(vfsfile, path, text)| (FileId(vfsfile.0.into()), path, text))\n+                            .map(|(vfsfile, path, text)| (FileId(vfsfile.0), path, text))\n                             .collect();\n-                        libs.push((SourceRootId(root.0.into()), files));\n+                        libs.push((SourceRootId(root.0), files));\n                     }\n                 }\n                 VfsChange::AddFile { root, file, path, text } => {\n-                    change.add_file(SourceRootId(root.0.into()), FileId(file.0.into()), path, text);\n+                    change.add_file(SourceRootId(root.0), FileId(file.0), path, text);\n                 }\n                 VfsChange::RemoveFile { root, file, path } => {\n-                    change.remove_file(SourceRootId(root.0.into()), FileId(file.0.into()), path)\n+                    change.remove_file(SourceRootId(root.0), FileId(file.0), path)\n                 }\n                 VfsChange::ChangeFile { file, text } => {\n-                    change.change_file(FileId(file.0.into()), text);\n+                    change.change_file(FileId(file.0), text);\n                 }\n             }\n         }\n@@ -178,18 +173,18 @@ impl WorldSnapshot {\n                 message: \"Rust file outside current workspace is not supported yet.\".to_string(),\n             })\n         })?;\n-        Ok(FileId(file.0.into()))\n+        Ok(FileId(file.0))\n     }\n \n     pub fn file_id_to_uri(&self, id: FileId) -> Result<Url> {\n-        let path = self.vfs.read().file2path(VfsFile(id.0.into()));\n+        let path = self.vfs.read().file2path(VfsFile(id.0));\n         let url = Url::from_file_path(&path)\n             .map_err(|_| format_err!(\"can't convert path to url: {}\", path.display()))?;\n         Ok(url)\n     }\n \n     pub fn path_to_uri(&self, root: SourceRootId, path: &RelativePathBuf) -> Result<Url> {\n-        let base = self.vfs.read().root2path(VfsRoot(root.0.into()));\n+        let base = self.vfs.read().root2path(VfsRoot(root.0));\n         let path = path.to_path(base);\n         let url = Url::from_file_path(&path)\n             .map_err(|_| format_err!(\"can't convert path to url: {}\", path.display()))?;\n@@ -212,7 +207,7 @@ impl WorldSnapshot {\n     }\n \n     pub fn workspace_root_for(&self, file_id: FileId) -> Option<&Path> {\n-        let path = self.vfs.read().file2path(VfsFile(file_id.0.into()));\n+        let path = self.vfs.read().file2path(VfsFile(file_id.0));\n         self.workspaces.iter().find_map(|ws| ws.workspace_root_for(&path))\n     }\n }"}, {"sha": "7cfb47f7a6204622a60cc72a7fdf4c805361425d", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -206,48 +206,48 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Result<Bindings,\n                         \"path\" => {\n                             let path =\n                                 input.eat_path().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(path.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(path));\n                         }\n                         \"expr\" => {\n                             let expr =\n                                 input.eat_expr().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(expr.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(expr));\n                         }\n                         \"ty\" => {\n                             let ty = input.eat_ty().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(ty.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(ty));\n                         }\n                         \"pat\" => {\n                             let pat = input.eat_pat().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(pat.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(pat));\n                         }\n                         \"stmt\" => {\n                             let pat = input.eat_stmt().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(pat.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(pat));\n                         }\n                         \"block\" => {\n                             let block =\n                                 input.eat_block().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(block.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(block));\n                         }\n                         \"meta\" => {\n                             let meta =\n                                 input.eat_meta().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(meta.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(meta));\n                         }\n                         \"tt\" => {\n                             let token = input.eat().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(token.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(token));\n                         }\n                         \"item\" => {\n                             let item =\n                                 input.eat_item().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(item.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(item));\n                         }\n                         \"lifetime\" => {\n                             let lifetime =\n                                 input.eat_lifetime().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(lifetime.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(lifetime));\n                         }\n                         \"literal\" => {\n                             let literal =\n@@ -262,7 +262,7 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Result<Bindings,\n                             // `vis` is optional\n                             if let Some(vis) = input.try_eat_vis() {\n                                 let vis = vis.clone();\n-                                res.inner.insert(text.clone(), Binding::Simple(vis.into()));\n+                                res.inner.insert(text.clone(), Binding::Simple(vis));\n                             } else {\n                                 res.push_optional(&text);\n                             }\n@@ -452,7 +452,7 @@ fn expand_tt(\n \n                 let idx = ctx.nesting.pop().unwrap();\n                 ctx.nesting.push(idx + 1);\n-                token_trees.push(reduce_single_token(t).into());\n+                token_trees.push(reduce_single_token(t));\n \n                 if let Some(ref sep) = repeat.separator {\n                     match sep {"}, {"sha": "9d3d2ad5bc5494d3c11b213e6fe13d326eb5defb", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -155,9 +155,10 @@ fn convert_doc_comment<'a>(token: &ra_syntax::SyntaxToken<'a>) -> Option<Vec<tt:\n     if let ast::CommentPlacement::Inner = doc {\n         token_trees.push(mk_punct('!'));\n     }\n-    token_trees.push(tt::TokenTree::from(tt::Subtree::from(\n-        tt::Subtree { delimiter: tt::Delimiter::Bracket, token_trees: meta_tkns }.into(),\n-    )));\n+    token_trees.push(tt::TokenTree::from(tt::Subtree {\n+        delimiter: tt::Delimiter::Bracket,\n+        token_trees: meta_tkns,\n+    }));\n \n     return Some(token_trees);\n "}, {"sha": "5a165778881491fad19c40c6f5ffdfc3a7dc35d9", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40424d4222d4630bc53294d10f1718f2d3d300de/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=40424d4222d4630bc53294d10f1718f2d3d300de", "patch": "@@ -137,7 +137,7 @@ impl CargoWorkspace {\n         for meta_pkg in meta.packages {\n             let is_member = ws_members.contains(&meta_pkg.id);\n             let pkg = packages.alloc(PackageData {\n-                name: meta_pkg.name.into(),\n+                name: meta_pkg.name,\n                 manifest: meta_pkg.manifest_path.clone(),\n                 targets: Vec::new(),\n                 is_member,\n@@ -149,7 +149,7 @@ impl CargoWorkspace {\n             for meta_tgt in meta_pkg.targets {\n                 let tgt = targets.alloc(TargetData {\n                     pkg,\n-                    name: meta_tgt.name.into(),\n+                    name: meta_tgt.name,\n                     root: meta_tgt.src_path.clone(),\n                     kind: TargetKind::new(meta_tgt.kind.as_slice()),\n                 });\n@@ -160,8 +160,7 @@ impl CargoWorkspace {\n         for node in resolve.nodes {\n             let source = pkg_by_id[&node.id];\n             for dep_node in node.deps {\n-                let dep =\n-                    PackageDependency { name: dep_node.name.into(), pkg: pkg_by_id[&dep_node.pkg] };\n+                let dep = PackageDependency { name: dep_node.name, pkg: pkg_by_id[&dep_node.pkg] };\n                 packages[source].dependencies.push(dep);\n             }\n         }"}]}