{"sha": "fedd3ef71182e0502c74ec9fa1e3b11a66832141", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZGQzZWY3MTE4MmUwNTAyYzc0ZWM5ZmExZTNiMTFhNjY4MzIxNDE=", "commit": {"author": {"name": "Bruno Kirschner", "email": "bruno@p3ki.com", "date": "2018-06-20T09:07:41Z"}, "committer": {"name": "Bruno Kirschner", "email": "bruno@p3ki.com", "date": "2018-06-20T09:58:15Z"}, "message": "Allows neg_cmp_op_on_partial_ord for external macros (fixes #2856).\n\nThe macro always negates the result of the given comparison in its\ninternal check which automatically triggered the lint. As its an\nexternal macro there was no chance to do anything about it which lead\nto a white listing of all external macros to prevent further issues.", "tree": {"sha": "45d3b64a9999d11503dd301555f3319cbe3e2098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45d3b64a9999d11503dd301555f3319cbe3e2098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fedd3ef71182e0502c74ec9fa1e3b11a66832141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fedd3ef71182e0502c74ec9fa1e3b11a66832141", "html_url": "https://github.com/rust-lang/rust/commit/fedd3ef71182e0502c74ec9fa1e3b11a66832141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fedd3ef71182e0502c74ec9fa1e3b11a66832141/comments", "author": {"login": "0ndorio", "id": 1611081, "node_id": "MDQ6VXNlcjE2MTEwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1611081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0ndorio", "html_url": "https://github.com/0ndorio", "followers_url": "https://api.github.com/users/0ndorio/followers", "following_url": "https://api.github.com/users/0ndorio/following{/other_user}", "gists_url": "https://api.github.com/users/0ndorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/0ndorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0ndorio/subscriptions", "organizations_url": "https://api.github.com/users/0ndorio/orgs", "repos_url": "https://api.github.com/users/0ndorio/repos", "events_url": "https://api.github.com/users/0ndorio/events{/privacy}", "received_events_url": "https://api.github.com/users/0ndorio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "0ndorio", "id": 1611081, "node_id": "MDQ6VXNlcjE2MTEwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1611081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0ndorio", "html_url": "https://github.com/0ndorio", "followers_url": "https://api.github.com/users/0ndorio/followers", "following_url": "https://api.github.com/users/0ndorio/following{/other_user}", "gists_url": "https://api.github.com/users/0ndorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/0ndorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0ndorio/subscriptions", "organizations_url": "https://api.github.com/users/0ndorio/orgs", "repos_url": "https://api.github.com/users/0ndorio/repos", "events_url": "https://api.github.com/users/0ndorio/events{/privacy}", "received_events_url": "https://api.github.com/users/0ndorio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4d31ab86cba04c10dfda41bd27cee337cdd000f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d31ab86cba04c10dfda41bd27cee337cdd000f", "html_url": "https://github.com/rust-lang/rust/commit/e4d31ab86cba04c10dfda41bd27cee337cdd000f"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "013bab69d798ba0657ea347639e7d6a6dc6c2a97", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fedd3ef71182e0502c74ec9fa1e3b11a66832141/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd3ef71182e0502c74ec9fa1e3b11a66832141/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=fedd3ef71182e0502c74ec9fa1e3b11a66832141", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::*;\n use rustc::lint::*;\n \n-use crate::utils::{self, paths};\n+use crate::utils::{self, paths, span_lint, in_external_macro};\n \n /// **What it does:**\n /// Checks for the usage of negated comparision operators on types which only implement\n@@ -53,6 +53,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n \n+            if !in_external_macro(cx, expr.span);\n             if let Expr_::ExprUnary(UnOp::UnNot, ref inner) = expr.node;\n             if let Expr_::ExprBinary(ref op, ref left, _) = inner.node;\n             if let BinOp_::BiLe | BinOp_::BiGe | BinOp_::BiLt | BinOp_::BiGt = op.node;\n@@ -78,7 +79,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n                 };\n \n                 if implements_partial_ord && !implements_ord {\n-                    cx.span_lint(\n+                    span_lint(\n+                        cx,\n                         NEG_CMP_OP_ON_PARTIAL_ORD,\n                         expr.span,\n                         \"The use of negated comparision operators on partially orded \\"}, {"sha": "483972bb41b3ba982128898f497b5db55725b3bc", "filename": "tests/ui/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fedd3ef71182e0502c74ec9fa1e3b11a66832141/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd3ef71182e0502c74ec9fa1e3b11a66832141/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs?ref=fedd3ef71182e0502c74ec9fa1e3b11a66832141", "patch": "@@ -1,6 +1,6 @@\n-/// This test case utilizes `f64` an easy example for `PartialOrd` only types\n-/// but the lint itself actually validates any expression where the left\n-/// operand implements `PartialOrd` but not `Ord`.\n+//! This test case utilizes `f64` an easy example for `PartialOrd` only types\n+//! but the lint itself actually validates any expression where the left\n+//! operand implements `PartialOrd` but not `Ord`.\n \n use std::cmp::Ordering;\n \n@@ -54,5 +54,14 @@ fn main() {\n     let _ = a_value <= another_value;\n     let _ = a_value > another_value;\n     let _ = a_value >= another_value;\n-}\n \n+    // --- regression tests ---\n+\n+    // Issue 2856: False positive on assert!()\n+    //\n+    // The macro always negates the result of the given comparision in its\n+    // internal check which automatically triggered the lint. As it's an\n+    // external macro there was no chance to do anything about it which lead\n+    // to a whitelisting of all external macros.\n+    assert!(a_value < another_value);\n+}"}]}