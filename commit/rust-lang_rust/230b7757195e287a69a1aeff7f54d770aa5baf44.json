{"sha": "230b7757195e287a69a1aeff7f54d770aa5baf44", "node_id": "C_kwDOAAsO6NoAKDIzMGI3NzU3MTk1ZTI4N2E2OWExYWVmZjdmNTRkNzcwYWE1YmFmNDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-21T16:42:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-21T16:42:07Z"}, "message": "Rollup merge of #99528 - matthiaskrgr:2022_07_perf, r=estebank\n\ncouple of clippy::perf fixes", "tree": {"sha": "0e7372bd65377765b494ee5e37a72ef6f5ed78ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e7372bd65377765b494ee5e37a72ef6f5ed78ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/230b7757195e287a69a1aeff7f54d770aa5baf44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi2YHfCRBK7hj4Ov3rIwAA24oIABRv4UMTn80A+uMvkzVRYYOM\nN4d5yvMHF9xxeVhg+EYzcTuFO9CXJ+B8JgNKnrhX4ifgQ+5NuRG3wobuhPhrP4hj\nSM7m5rSr+47Lm14GvUSSFJFh+BqhD2HWpqpIAUGYqInLAbPF9yq2romIdw800W1j\nTgLSpRb12rAicHd59Z/ykxt6rUm7hTREtKtyS/ksZduTgy52OGFX7mUd1yfTKnlb\nBScNtPMDyYagqC1rW9EEKvhBY0thkIYKzb+NDcQyNRIyRuF01w/XZVSzkWYp7vu9\nfQisBpHjli2HAQHf3Zq7FO3JXqSebhTO4SLKmeHZWO3Zf4UIwHg5qUEH+Q/VspE=\n=sb1p\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e7372bd65377765b494ee5e37a72ef6f5ed78ab\nparent da18bd18cadf5b2f062f8aff5d9020a4f5237245\nparent 611bbcb044518b028d08f5d8b4e961c733733942\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658421727 +0200\ncommitter GitHub <noreply@github.com> 1658421727 +0200\n\nRollup merge of #99528 - matthiaskrgr:2022_07_perf, r=estebank\n\ncouple of clippy::perf fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/230b7757195e287a69a1aeff7f54d770aa5baf44", "html_url": "https://github.com/rust-lang/rust/commit/230b7757195e287a69a1aeff7f54d770aa5baf44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/230b7757195e287a69a1aeff7f54d770aa5baf44/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da18bd18cadf5b2f062f8aff5d9020a4f5237245", "url": "https://api.github.com/repos/rust-lang/rust/commits/da18bd18cadf5b2f062f8aff5d9020a4f5237245", "html_url": "https://github.com/rust-lang/rust/commit/da18bd18cadf5b2f062f8aff5d9020a4f5237245"}, {"sha": "611bbcb044518b028d08f5d8b4e961c733733942", "url": "https://api.github.com/repos/rust-lang/rust/commits/611bbcb044518b028d08f5d8b4e961c733733942", "html_url": "https://github.com/rust-lang/rust/commit/611bbcb044518b028d08f5d8b4e961c733733942"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "2ac5c1960cd56acd6913ad5c95857304c29c6f8d", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=230b7757195e287a69a1aeff7f54d770aa5baf44", "patch": "@@ -299,7 +299,7 @@ impl DiagnosticMessage {\n     /// - If `self` is non-translatable then return `self`'s message.\n     pub fn with_subdiagnostic_message(&self, sub: SubdiagnosticMessage) -> Self {\n         let attr = match sub {\n-            SubdiagnosticMessage::Str(s) => return DiagnosticMessage::Str(s.clone()),\n+            SubdiagnosticMessage::Str(s) => return DiagnosticMessage::Str(s),\n             SubdiagnosticMessage::FluentIdentifier(id) => {\n                 return DiagnosticMessage::FluentIdentifier(id, None);\n             }"}, {"sha": "6c9561925fe8c5eb7586a517bc8051c7db0b613f", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=230b7757195e287a69a1aeff7f54d770aa5baf44", "patch": "@@ -212,7 +212,7 @@ impl DiagnosticDeriveBuilder {\n                 }\n                 NestedMeta::Meta(meta @ Meta::NameValue(_))\n                     if !is_help_note_or_warn\n-                        && meta.path().segments.last().unwrap().ident.to_string() == \"code\" =>\n+                        && meta.path().segments.last().unwrap().ident == \"code\" =>\n                 {\n                     // don't error for valid follow-up attributes\n                 }"}, {"sha": "562d5e9f4d25e58138661ffdb79a810c33aaf478", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=230b7757195e287a69a1aeff7f54d770aa5baf44", "patch": "@@ -194,8 +194,8 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n                 let snake_name = Ident::new(\n                     // FIXME: should probably trim prefix, not replace all occurrences\n                     &name\n-                        .replace(&format!(\"{}-\", res.ident).replace(\"_\", \"-\"), \"\")\n-                        .replace(\"-\", \"_\"),\n+                        .replace(&format!(\"{}-\", res.ident).replace('_', \"-\"), \"\")\n+                        .replace('-', \"_\"),\n                     span,\n                 );\n                 constants.extend(quote! {\n@@ -207,7 +207,7 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n                 });\n \n                 for Attribute { id: Identifier { name: attr_name }, .. } in attributes {\n-                    let snake_name = Ident::new(&attr_name.replace(\"-\", \"_\"), span);\n+                    let snake_name = Ident::new(&attr_name.replace('-', \"_\"), span);\n                     if !previous_attrs.insert(snake_name.clone()) {\n                         continue;\n                     }"}, {"sha": "c7653bdbe84a2f9cf841a11bee7ad84ce465997d", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=230b7757195e287a69a1aeff7f54d770aa5baf44", "patch": "@@ -88,19 +88,17 @@ impl<'tcx> ValTree<'tcx> {\n                     let leafs = self\n                         .unwrap_branch()\n                         .into_iter()\n-                        .map(|v| v.unwrap_leaf().try_to_u8().unwrap())\n-                        .collect::<Vec<_>>();\n+                        .map(|v| v.unwrap_leaf().try_to_u8().unwrap());\n \n-                    return Some(tcx.arena.alloc_from_iter(leafs.into_iter()));\n+                    return Some(tcx.arena.alloc_from_iter(leafs));\n                 }\n                 ty::Slice(slice_ty) if *slice_ty == tcx.types.u8 => {\n                     let leafs = self\n                         .unwrap_branch()\n                         .into_iter()\n-                        .map(|v| v.unwrap_leaf().try_to_u8().unwrap())\n-                        .collect::<Vec<_>>();\n+                        .map(|v| v.unwrap_leaf().try_to_u8().unwrap());\n \n-                    return Some(tcx.arena.alloc_from_iter(leafs.into_iter()));\n+                    return Some(tcx.arena.alloc_from_iter(leafs));\n                 }\n                 _ => {}\n             },"}, {"sha": "390d6f5a856af29ce1f2f35374f8035a807a1677", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=230b7757195e287a69a1aeff7f54d770aa5baf44", "patch": "@@ -1754,7 +1754,6 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 || self.in_assoc_ty\n                 || self.tcx.resolutions(()).has_pub_restricted\n             {\n-                let descr = descr.to_string();\n                 let vis_span =\n                     self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id));\n                 if kind == \"trait\" {"}, {"sha": "d74e26fc84498cf6c3bf997ccd68b558ad64a5ca", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=230b7757195e287a69a1aeff7f54d770aa5baf44", "patch": "@@ -2608,7 +2608,7 @@ fn show_candidates(\n                 \"item\"\n             };\n             let plural_descr =\n-                if descr.ends_with(\"s\") { format!(\"{}es\", descr) } else { format!(\"{}s\", descr) };\n+                if descr.ends_with('s') { format!(\"{}es\", descr) } else { format!(\"{}s\", descr) };\n \n             let mut msg = format!(\"{}these {} exist but are inaccessible\", prefix, plural_descr);\n             let mut has_colon = false;"}, {"sha": "21b1b0b4ebf61638a54535e5abbce85bbad090b8", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=230b7757195e287a69a1aeff7f54d770aa5baf44", "patch": "@@ -535,7 +535,7 @@ mod parse {\n     ) -> bool {\n         match v {\n             Some(s) => {\n-                for s in s.split(\",\") {\n+                for s in s.split(',') {\n                     let Some(pass_name) = s.strip_prefix(&['+', '-'][..]) else { return false };\n                     slot.push((pass_name.to_string(), &s[..1] == \"+\"));\n                 }"}, {"sha": "5636c74452ccf6626fad06f16dadb7a1cb10b16b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=230b7757195e287a69a1aeff7f54d770aa5baf44", "patch": "@@ -607,10 +607,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 \"{}, {}={}>\",\n                                 &constraint[..constraint.len() - 1],\n                                 item.name,\n-                                term.to_string()\n+                                term\n                             );\n                         } else {\n-                            constraint.push_str(&format!(\"<{}={}>\", item.name, term.to_string()));\n+                            constraint.push_str(&format!(\"<{}={}>\", item.name, term));\n                         }\n                     }\n "}, {"sha": "8e4cd2392e03bf5edc9470e256c3960af4295db1", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=230b7757195e287a69a1aeff7f54d770aa5baf44", "patch": "@@ -1803,7 +1803,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .source_map()\n                 .span_to_snippet(range_end.expr.span)\n                 .map(|s| format!(\" from `{s}`\"))\n-                .unwrap_or(String::new());\n+                .unwrap_or_default();\n             err.span_suggestion(\n                 range_start.span.shrink_to_hi(),\n                 &format!(\"to set the remaining fields{instead}, separate the last named field with a comma\"),\n@@ -2362,7 +2362,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 false\n             };\n         let expr_snippet =\n-            self.tcx.sess.source_map().span_to_snippet(expr.span).unwrap_or(String::new());\n+            self.tcx.sess.source_map().span_to_snippet(expr.span).unwrap_or_default();\n         let is_wrapped = expr_snippet.starts_with('(') && expr_snippet.ends_with(')');\n         let after_open = expr.span.lo() + rustc_span::BytePos(1);\n         let before_close = expr.span.hi() - rustc_span::BytePos(1);"}, {"sha": "ded0888c33e15db96d8139245f4fed5553d395ac", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230b7757195e287a69a1aeff7f54d770aa5baf44/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=230b7757195e287a69a1aeff7f54d770aa5baf44", "patch": "@@ -72,9 +72,8 @@ impl<'tcx> ExprUseDelegate<'tcx> {\n     }\n \n     fn mark_consumed(&mut self, consumer: HirId, target: TrackedValue) {\n-        if !self.places.consumed.contains_key(&consumer) {\n-            self.places.consumed.insert(consumer, <_>::default());\n-        }\n+        self.places.consumed.entry(consumer).or_insert_with(|| <_>::default());\n+\n         debug!(?consumer, ?target, \"mark_consumed\");\n         self.places.consumed.get_mut(&consumer).map(|places| places.insert(target));\n     }"}]}