{"sha": "45e56eccbed3161dd9de547c6c2dcf618114a484", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZTU2ZWNjYmVkMzE2MWRkOWRlNTQ3YzZjMmRjZjYxODExNGE0ODQ=", "commit": {"author": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2014-06-08T17:22:49Z"}, "committer": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2014-06-08T17:39:42Z"}, "message": "Fix spelling errors in comments.", "tree": {"sha": "4eb63b08a1f5beebc194419162b0f5c5dce1c0e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb63b08a1f5beebc194419162b0f5c5dce1c0e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45e56eccbed3161dd9de547c6c2dcf618114a484", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45e56eccbed3161dd9de547c6c2dcf618114a484", "html_url": "https://github.com/rust-lang/rust/commit/45e56eccbed3161dd9de547c6c2dcf618114a484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45e56eccbed3161dd9de547c6c2dcf618114a484/comments", "author": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ba0cf4289d6da632aab4cf242ad74dea94fe37", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ba0cf4289d6da632aab4cf242ad74dea94fe37", "html_url": "https://github.com/rust-lang/rust/commit/17ba0cf4289d6da632aab4cf242ad74dea94fe37"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "37546f64d5f7b9690033cba19054f146bd18b322", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -1532,7 +1532,7 @@ impl<T> FromVec<T> for ~[T] {\n \n         // In a post-DST world, we can attempt to reuse the Vec allocation by calling\n         // shrink_to_fit() on it. That may involve a reallocation+memcpy, but that's no\n-        // diffrent than what we're doing manually here.\n+        // different than what we're doing manually here.\n \n         let vp = v.as_mut_ptr();\n "}, {"sha": "54e7d077bb141cb63fc1ef92cbdecee60fe209b6", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -31,7 +31,7 @@\n //!\n //! ## Stability Note\n //!\n-//! These are all experimental. The inferface may change entirely, without\n+//! These are all experimental. The interface may change entirely, without\n //! warning.\n \n #![allow(non_camel_case_types)]"}, {"sha": "87177b4ac90dc50430b94cbc20d8d38897e3df1f", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -478,7 +478,7 @@ impl TwoWaySearcher {\n }\n \n /// The internal state of an iterator that searches for matches of a substring\n-/// within a larger string using a dynamically chosed search algorithm\n+/// within a larger string using a dynamically chosen search algorithm\n #[deriving(Clone)]\n enum Searcher {\n     Naive(NaiveSearcher),\n@@ -1120,7 +1120,7 @@ pub trait StrSlice<'a> {\n     ///\n     /// That is, each returned value `(start, end)` satisfies\n     /// `self.slice(start, end) == sep`. For matches of `sep` within\n-    /// `self` that overlap, only the indicies corresponding to the\n+    /// `self` that overlap, only the indices corresponding to the\n     /// first match are returned.\n     ///\n     /// # Example"}, {"sha": "9907faae52bc4bd0c1b193e5211e4b639d3865b7", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -992,7 +992,7 @@ enum ParserState {\n     ParseObject(bool),\n     // Parse ',' or ']' after an element in an object.\n     ParseObjectComma,\n-    // Initialial state.\n+    // Initial state.\n     ParseStart,\n     // Expecting the stream to end.\n     ParseBeforeFinish,\n@@ -1152,7 +1152,7 @@ pub struct Parser<T> {\n     // We maintain a stack representing where we are in the logical structure\n     // of the JSON stream.\n     stack: Stack,\n-    // A state machine is kept to make it possible to interupt and resume parsing.\n+    // A state machine is kept to make it possible to interrupt and resume parsing.\n     state: ParserState,\n }\n \n@@ -1449,7 +1449,7 @@ impl<T: Iterator<char>> Parser<T> {\n     // information to return a JsonEvent.\n     // Manages an internal state so that parsing can be interrupted and resumed.\n     // Also keeps track of the position in the logical structure of the json\n-    // stream int the form of a stack that can be queried by the user usng the\n+    // stream int the form of a stack that can be queried by the user using the\n     // stack() method.\n     fn parse(&mut self) -> JsonEvent {\n         loop {"}, {"sha": "7b655693395005ccbdb515a1f5a3155ff5a203db", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -910,7 +910,7 @@ impl<'a> Reader for &'a mut Reader {\n \n /// Returns a slice of `v` between `start` and `end`.\n ///\n-/// Similar to `slice()` except this function only bounds the sclie on the\n+/// Similar to `slice()` except this function only bounds the slice on the\n /// capacity of `v`, not the length.\n ///\n /// # Failure"}, {"sha": "3cb2fe1c8f1b3bc35a446b05ceafe465f628a2ef", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -873,7 +873,7 @@ mod tests {\n     pub fn sleeper() -> Process {\n         // There's a `timeout` command on windows, but it doesn't like having\n         // its output piped, so instead just ping ourselves a few times with\n-        // gaps inbetweeen so we're sure this process is alive for awhile\n+        // gaps in between so we're sure this process is alive for awhile\n         Command::new(\"ping\").arg(\"127.0.0.1\").arg(\"-n\").arg(\"1000\").spawn().unwrap()\n     }\n "}, {"sha": "84b91814c877902571a87c6bccee98dc93dba925", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -102,7 +102,7 @@ local_data_key!(local_stdout: Box<Writer:Send>)\n pub fn stdin() -> BufferedReader<StdReader> {\n     // The default buffer capacity is 64k, but apparently windows doesn't like\n     // 64k reads on stdin. See #13304 for details, but the idea is that on\n-    // windows we use a slighly smaller buffer that's been seen to be\n+    // windows we use a slightly smaller buffer that's been seen to be\n     // acceptable.\n     if cfg!(windows) {\n         BufferedReader::with_capacity(8 * 1024, stdin_raw())"}, {"sha": "1529cf8f92d6b50af9683b741d9929d83ab5c103", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -218,7 +218,7 @@ mod test {\n     iotest!(fn test_io_timer_oneshot_then_sleep() {\n         let mut timer = Timer::new().unwrap();\n         let rx = timer.oneshot(100000000000);\n-        timer.sleep(1); // this should inalidate rx\n+        timer.sleep(1); // this should invalidate rx\n \n         assert_eq!(rx.recv_opt(), Err(()));\n     })\n@@ -352,7 +352,7 @@ mod test {\n         let mut timer1 = Timer::new().unwrap();\n         timer1.oneshot(1);\n         let mut timer2 = Timer::new().unwrap();\n-        // while sleeping, the prevous timer should fire and not have its\n+        // while sleeping, the previous timer should fire and not have its\n         // callback do something terrible.\n         timer2.sleep(2);\n     })\n@@ -361,7 +361,7 @@ mod test {\n         let mut timer1 = Timer::new().unwrap();\n         timer1.periodic(1);\n         let mut timer2 = Timer::new().unwrap();\n-        // while sleeping, the prevous timer should fire and not have its\n+        // while sleeping, the previous timer should fire and not have its\n         // callback do something terrible.\n         timer2.sleep(2);\n     })"}, {"sha": "48962ca59d890235b768d8df95fea332b3b64660", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -636,7 +636,7 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+PartialEq+PartialOrd+Div<T,T>+\n                     if accum_positive && accum <= last_accum { return NumStrConv::inf(); }\n                     if !accum_positive && accum >= last_accum { return NumStrConv::neg_inf(); }\n \n-                    // Detect overflow by reversing the shift-and-add proccess\n+                    // Detect overflow by reversing the shift-and-add process\n                     if accum_positive &&\n                         (last_accum != ((accum - cast(digit as int).unwrap())/radix_gen.clone())) {\n                         return NumStrConv::inf();"}, {"sha": "dd692d3fc016bdcf7544477c140e3630cb6ed0ce", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -320,7 +320,7 @@ pub fn env_as_bytes() -> Vec<(Vec<u8>,Vec<u8>)> {\n /// let key = \"HOME\";\n /// match std::os::getenv(key) {\n ///     Some(val) => println!(\"{}: {}\", key, val),\n-///     None => println!(\"{} is not defined in the environnement.\", key)\n+///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n pub fn getenv(n: &str) -> Option<String> {"}, {"sha": "9bb137edb82811a912391f590e1abad2f5e91562", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -186,7 +186,7 @@ impl GenericPathUnsafe for Path {\n         ret\n     }\n \n-    /// See `GenericPathUnsafe::set_filename_unchecekd`.\n+    /// See `GenericPathUnsafe::set_filename_unchecked`.\n     ///\n     /// # Failure\n     ///"}, {"sha": "5a077e511c0d482ea4336a02e538ee381cf21827", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e56eccbed3161dd9de547c6c2dcf618114a484/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=45e56eccbed3161dd9de547c6c2dcf618114a484", "patch": "@@ -243,7 +243,7 @@ mod imp {\n                 // EINVAL means |stack_size| is either too small or not a\n                 // multiple of the system page size.  Because it's definitely\n                 // >= PTHREAD_STACK_MIN, it must be an alignment issue.\n-                // Round up to the neareast page and try again.\n+                // Round up to the nearest page and try again.\n                 let page_size = os::page_size();\n                 let stack_size = (stack_size + page_size - 1) & (-(page_size - 1) - 1);\n                 assert_eq!(pthread_attr_setstacksize(&mut attr, stack_size as libc::size_t), 0);"}]}