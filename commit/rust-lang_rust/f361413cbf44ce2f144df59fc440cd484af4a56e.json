{"sha": "f361413cbf44ce2f144df59fc440cd484af4a56e", "node_id": "C_kwDOAAsO6NoAKGYzNjE0MTNjYmY0NGNlMmYxNDRkZjU5ZmM0NDBjZDQ4NGFmNGE1NmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-31T13:53:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-31T13:53:40Z"}, "message": "Auto merge of #106399 - estebank:type-err-span-label, r=nagisa\n\nModify primary span label for E0308\n\nLooking at the reactions to https://hachyderm.io/`@ekuber/109622160673605438,` a lot of people seem to have trouble understanding the current output, where the primary span label on type errors talks about the specific types that diverged, but these can be deeply nested type parameters. Because of that we could see \"expected i32, found u32\" in the label while the note said \"expected Vec<i32>, found Vec<u32>\". This understandably confuses people. I believe that once people learn to read these errors it starts to make more sense, but this PR changes the output to be more in line with what people might expect, without sacrificing terseness.\n\nFix #68220.", "tree": {"sha": "cecf91d94ee20df2d6bec7c88796b90fa34f9887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cecf91d94ee20df2d6bec7c88796b90fa34f9887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f361413cbf44ce2f144df59fc440cd484af4a56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f361413cbf44ce2f144df59fc440cd484af4a56e", "html_url": "https://github.com/rust-lang/rust/commit/f361413cbf44ce2f144df59fc440cd484af4a56e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f361413cbf44ce2f144df59fc440cd484af4a56e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64ef7d07d0411315be85a646586cb85eeb9c136", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64ef7d07d0411315be85a646586cb85eeb9c136", "html_url": "https://github.com/rust-lang/rust/commit/a64ef7d07d0411315be85a646586cb85eeb9c136"}, {"sha": "449dfc64f0792f2320ef68bc08f238281199f53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/449dfc64f0792f2320ef68bc08f238281199f53d", "html_url": "https://github.com/rust-lang/rust/commit/449dfc64f0792f2320ef68bc08f238281199f53d"}], "stats": {"total": 2163, "additions": 1110, "deletions": 1053}, "files": [{"sha": "f7ebacaa8546f4155dbf4e11be18a39499f6f2f8", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -442,6 +442,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     match ocx.eq(&misc_cause, param_env, opaque_ty, hidden_ty) {\n         Ok(()) => {}\n         Err(ty_err) => {\n+            let ty_err = ty_err.to_string(tcx);\n             tcx.sess.delay_span_bug(\n                 span,\n                 &format!(\"could not unify `{hidden_ty}` with revealed type:\\n{ty_err}\"),"}, {"sha": "54890489f8b8f7c08132d62469a04ccd46b4b3e5", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -259,7 +259,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mode = no_match_data.mode;\n         let tcx = self.tcx;\n         let rcvr_ty = self.resolve_vars_if_possible(rcvr_ty);\n-        let ty_str = with_forced_trimmed_paths!(self.ty_to_string(rcvr_ty));\n+        let (ty_str, ty_file) = tcx.short_ty_string(rcvr_ty);\n+        let short_ty_str = with_forced_trimmed_paths!(rcvr_ty.to_string());\n         let is_method = mode == Mode::MethodCall;\n         let unsatisfied_predicates = &no_match_data.unsatisfied_predicates;\n         let similar_candidate = no_match_data.similar_candidate;\n@@ -276,11 +277,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n-        if self.suggest_wrapping_range_with_parens(tcx, rcvr_ty, source, span, item_name, &ty_str)\n-            || self.suggest_constraining_numerical_ty(\n-                tcx, rcvr_ty, source, span, item_kind, item_name, &ty_str,\n-            )\n-        {\n+        // We could pass the file for long types into these two, but it isn't strictly necessary\n+        // given how targetted they are.\n+        if self.suggest_wrapping_range_with_parens(\n+            tcx,\n+            rcvr_ty,\n+            source,\n+            span,\n+            item_name,\n+            &short_ty_str,\n+        ) || self.suggest_constraining_numerical_ty(\n+            tcx,\n+            rcvr_ty,\n+            source,\n+            span,\n+            item_kind,\n+            item_name,\n+            &short_ty_str,\n+        ) {\n             return None;\n         }\n         span = item_name.span;\n@@ -319,6 +333,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcvr_ty.prefix_string(self.tcx),\n             ty_str_reported,\n         );\n+        let ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n+            short_ty_str\n+        } else {\n+            ty_str\n+        };\n+        if let Some(file) = ty_file {\n+            err.note(&format!(\"the full type name has been written to '{}'\", file.display(),));\n+        }\n         if rcvr_ty.references_error() {\n             err.downgrade_to_delayed_bug();\n         }\n@@ -826,7 +848,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let primary_message = primary_message.unwrap_or_else(|| {\n                     format!(\n                         \"the {item_kind} `{item_name}` exists for {actual_prefix} `{ty_str}`, \\\n-                    but its trait bounds were not satisfied\"\n+                         but its trait bounds were not satisfied\"\n                     )\n                 });\n                 err.set_primary_message(&primary_message);"}, {"sha": "554a70265d43ce04b4fd84d806b0583750cecb45", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -67,6 +67,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Node;\n use rustc_middle::dep_graph::DepContext;\n+use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::relate::{self, RelateResult, TypeRelation};\n use rustc_middle::ty::{\n     self, error::TypeError, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n@@ -1612,16 +1613,31 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 {\n                     format!(\"expected this to be `{}`\", expected)\n                 } else {\n-                    terr.to_string()\n+                    terr.to_string(self.tcx).to_string()\n                 };\n                 label_or_note(sp, &terr);\n                 label_or_note(span, &msg);\n             } else {\n-                label_or_note(span, &terr.to_string());\n+                label_or_note(span, &terr.to_string(self.tcx));\n                 label_or_note(sp, &msg);\n             }\n         } else {\n-            label_or_note(span, &terr.to_string());\n+            if let Some(values) = values\n+                && let Some((e, f)) = values.ty()\n+                && let TypeError::ArgumentSorts(..) | TypeError::Sorts(_) = terr\n+            {\n+                let e = self.tcx.erase_regions(e);\n+                let f = self.tcx.erase_regions(f);\n+                let expected = with_forced_trimmed_paths!(e.sort_string(self.tcx));\n+                let found = with_forced_trimmed_paths!(f.sort_string(self.tcx));\n+                if expected == found {\n+                    label_or_note(span, &terr.to_string(self.tcx));\n+                } else {\n+                    label_or_note(span, &format!(\"expected {expected}, found {found}\"));\n+                }\n+            } else {\n+                label_or_note(span, &terr.to_string(self.tcx));\n+            }\n         }\n \n         if let Some((expected, found, exp_p, found_p)) = expected_found {\n@@ -1849,6 +1865,18 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         self.check_and_note_conflicting_crates(diag, terr);\n \n         self.note_and_explain_type_err(diag, terr, cause, span, cause.body_id.to_def_id());\n+        if let Some(exp_found) = exp_found\n+            && let exp_found = TypeError::Sorts(exp_found)\n+            && exp_found != terr\n+        {\n+            self.note_and_explain_type_err(\n+                diag,\n+                exp_found,\n+                cause,\n+                span,\n+                cause.body_id.to_def_id(),\n+            );\n+        }\n \n         if let Some(ValuePairs::PolyTraitRefs(exp_found)) = values\n             && let ty::Closure(def_id, _) = exp_found.expected.skip_binder().self_ty().kind()"}, {"sha": "39b3c98f0a5ccadd22b3e0ad79ad8c6c0472eccb", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -137,25 +137,25 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             diag.help(\n                                 \"given a type parameter `T` and a method `foo`:\n ```\n-trait Trait<T> { fn foo(&tcx) -> T; }\n+trait Trait<T> { fn foo(&self) -> T; }\n ```\n the only ways to implement method `foo` are:\n - constrain `T` with an explicit type:\n ```\n impl Trait<String> for X {\n-    fn foo(&tcx) -> String { String::new() }\n+    fn foo(&self) -> String { String::new() }\n }\n ```\n - add a trait bound to `T` and call a method on that trait that returns `Self`:\n ```\n impl<T: std::default::Default> Trait<T> for X {\n-    fn foo(&tcx) -> T { <T as std::default::Default>::default() }\n+    fn foo(&self) -> T { <T as std::default::Default>::default() }\n }\n ```\n - change `foo` to return an argument of type `T`:\n ```\n impl<T> Trait<T> for X {\n-    fn foo(&tcx, x: T) -> T { x }\n+    fn foo(&self, x: T) -> T { x }\n }\n ```\",\n                             );\n@@ -218,6 +218,13 @@ impl<T> Trait<T> for X {\n                             );\n                         }\n                     }\n+                    (ty::FnPtr(_), ty::FnDef(def, _))\n+                    if let hir::def::DefKind::Fn = tcx.def_kind(def) => {\n+                        diag.note(\n+                            \"when the arguments and return types match, functions can be coerced \\\n+                             to function pointers\",\n+                        );\n+                    }\n                     _ => {}\n                 }\n                 debug!(\n@@ -389,14 +396,14 @@ impl<T> Trait<T> for X {\n ```\n trait Trait {\n type T;\n-fn foo(&tcx) -> Self::T;\n+fn foo(&self) -> Self::T;\n }\n ```\n the only way of implementing method `foo` is to constrain `T` with an explicit associated type:\n ```\n impl Trait for X {\n type T = String;\n-fn foo(&tcx) -> Self::T { String::new() }\n+fn foo(&self) -> Self::T { String::new() }\n }\n ```\",\n             );"}, {"sha": "73859aca4247892103acfb39d0d8d14f5af1673a", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -404,7 +404,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         (msg, sug)\n                     }\n                 };\n-                diag.span_suggestion(span, msg, sug, Applicability::MaybeIncorrect);\n+                diag.span_suggestion_verbose(span, msg, sug, Applicability::MaybeIncorrect);\n             }\n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n                 let expected_sig ="}, {"sha": "bd78705cdb59b59c875c765dd30c319f70d27d0d", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 88, "deletions": 138, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -8,9 +8,7 @@ use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n use std::collections::hash_map::DefaultHasher;\n-use std::fmt;\n-use std::hash::Hash;\n-use std::hash::Hasher;\n+use std::hash::{Hash, Hasher};\n use std::path::PathBuf;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable, TypeVisitable, Lift)]\n@@ -30,7 +28,7 @@ impl<T> ExpectedFound<T> {\n }\n \n // Data structures used in type unification\n-#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift, PartialEq, Eq)]\n #[rustc_pass_by_value]\n pub enum TypeError<'tcx> {\n     Mismatch,\n@@ -87,20 +85,16 @@ impl TypeError<'_> {\n /// in parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\n /// afterwards to present additional details, particularly when it comes to lifetime-related\n /// errors.\n-impl<'tcx> fmt::Display for TypeError<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl<'tcx> TypeError<'tcx> {\n+    pub fn to_string(self, tcx: TyCtxt<'tcx>) -> Cow<'static, str> {\n         use self::TypeError::*;\n-        fn report_maybe_different(\n-            f: &mut fmt::Formatter<'_>,\n-            expected: &str,\n-            found: &str,\n-        ) -> fmt::Result {\n+        fn report_maybe_different(expected: &str, found: &str) -> String {\n             // A naive approach to making sure that we're not reporting silly errors such as:\n             // (expected closure, found closure).\n             if expected == found {\n-                write!(f, \"expected {}, found a different {}\", expected, found)\n+                format!(\"expected {}, found a different {}\", expected, found)\n             } else {\n-                write!(f, \"expected {}, found {}\", expected, found)\n+                format!(\"expected {}, found {}\", expected, found)\n             }\n         }\n \n@@ -109,64 +103,63 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             _ => String::new(),\n         };\n \n-        match *self {\n-            CyclicTy(_) => write!(f, \"cyclic type of infinite size\"),\n-            CyclicConst(_) => write!(f, \"encountered a self-referencing constant\"),\n-            Mismatch => write!(f, \"types differ\"),\n+        match self {\n+            CyclicTy(_) => \"cyclic type of infinite size\".into(),\n+            CyclicConst(_) => \"encountered a self-referencing constant\".into(),\n+            Mismatch => \"types differ\".into(),\n             ConstnessMismatch(values) => {\n-                write!(f, \"expected {} bound, found {} bound\", values.expected, values.found)\n+                format!(\"expected {} bound, found {} bound\", values.expected, values.found).into()\n             }\n             PolarityMismatch(values) => {\n-                write!(f, \"expected {} polarity, found {} polarity\", values.expected, values.found)\n+                format!(\"expected {} polarity, found {} polarity\", values.expected, values.found)\n+                    .into()\n             }\n             UnsafetyMismatch(values) => {\n-                write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n+                format!(\"expected {} fn, found {} fn\", values.expected, values.found).into()\n             }\n             AbiMismatch(values) => {\n-                write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n+                format!(\"expected {} fn, found {} fn\", values.expected, values.found).into()\n             }\n-            ArgumentMutability(_) | Mutability => write!(f, \"types differ in mutability\"),\n-            TupleSize(values) => write!(\n-                f,\n+            ArgumentMutability(_) | Mutability => \"types differ in mutability\".into(),\n+            TupleSize(values) => format!(\n                 \"expected a tuple with {} element{}, found one with {} element{}\",\n                 values.expected,\n                 pluralize!(values.expected),\n                 values.found,\n                 pluralize!(values.found)\n-            ),\n-            FixedArraySize(values) => write!(\n-                f,\n+            )\n+            .into(),\n+            FixedArraySize(values) => format!(\n                 \"expected an array with a fixed size of {} element{}, found one with {} element{}\",\n                 values.expected,\n                 pluralize!(values.expected),\n                 values.found,\n                 pluralize!(values.found)\n-            ),\n-            ArgCount => write!(f, \"incorrect number of function parameters\"),\n-            FieldMisMatch(adt, field) => write!(f, \"field type mismatch: {}.{}\", adt, field),\n-            RegionsDoesNotOutlive(..) => write!(f, \"lifetime mismatch\"),\n+            )\n+            .into(),\n+            ArgCount => \"incorrect number of function parameters\".into(),\n+            FieldMisMatch(adt, field) => format!(\"field type mismatch: {}.{}\", adt, field).into(),\n+            RegionsDoesNotOutlive(..) => \"lifetime mismatch\".into(),\n             // Actually naming the region here is a bit confusing because context is lacking\n             RegionsInsufficientlyPolymorphic(..) => {\n-                write!(f, \"one type is more general than the other\")\n+                \"one type is more general than the other\".into()\n             }\n-            RegionsOverlyPolymorphic(br, _) => write!(\n-                f,\n+            RegionsOverlyPolymorphic(br, _) => format!(\n                 \"expected concrete lifetime, found bound lifetime parameter{}\",\n                 br_string(br)\n-            ),\n-            RegionsPlaceholderMismatch => write!(f, \"one type is more general than the other\"),\n-            ArgumentSorts(values, _) | Sorts(values) => ty::tls::with(|tcx| {\n-                let (mut expected, mut found) = with_forced_trimmed_paths!((\n-                    values.expected.sort_string(tcx),\n-                    values.found.sort_string(tcx),\n-                ));\n+            )\n+            .into(),\n+            RegionsPlaceholderMismatch => \"one type is more general than the other\".into(),\n+            ArgumentSorts(values, _) | Sorts(values) => {\n+                let mut expected = values.expected.sort_string(tcx);\n+                let mut found = values.found.sort_string(tcx);\n                 if expected == found {\n                     expected = values.expected.sort_string(tcx);\n                     found = values.found.sort_string(tcx);\n                 }\n-                report_maybe_different(f, &expected, &found)\n-            }),\n-            Traits(values) => ty::tls::with(|tcx| {\n+                report_maybe_different(&expected, &found).into()\n+            }\n+            Traits(values) => {\n                 let (mut expected, mut found) = with_forced_trimmed_paths!((\n                     tcx.def_path_str(values.expected),\n                     tcx.def_path_str(values.found),\n@@ -175,12 +168,9 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                     expected = tcx.def_path_str(values.expected);\n                     found = tcx.def_path_str(values.found);\n                 }\n-                report_maybe_different(\n-                    f,\n-                    &format!(\"trait `{expected}`\"),\n-                    &format!(\"trait `{found}`\"),\n-                )\n-            }),\n+                report_maybe_different(&format!(\"trait `{expected}`\"), &format!(\"trait `{found}`\"))\n+                    .into()\n+            }\n             IntMismatch(ref values) => {\n                 let expected = match values.expected {\n                     ty::IntVarValue::IntType(ty) => ty.name_str(),\n@@ -190,43 +180,38 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                     ty::IntVarValue::IntType(ty) => ty.name_str(),\n                     ty::IntVarValue::UintType(ty) => ty.name_str(),\n                 };\n-                write!(f, \"expected `{}`, found `{}`\", expected, found)\n-            }\n-            FloatMismatch(ref values) => {\n-                write!(\n-                    f,\n-                    \"expected `{}`, found `{}`\",\n-                    values.expected.name_str(),\n-                    values.found.name_str()\n-                )\n+                format!(\"expected `{}`, found `{}`\", expected, found).into()\n             }\n-            VariadicMismatch(ref values) => write!(\n-                f,\n+            FloatMismatch(ref values) => format!(\n+                \"expected `{}`, found `{}`\",\n+                values.expected.name_str(),\n+                values.found.name_str()\n+            )\n+            .into(),\n+            VariadicMismatch(ref values) => format!(\n                 \"expected {} fn, found {} function\",\n                 if values.expected { \"variadic\" } else { \"non-variadic\" },\n                 if values.found { \"variadic\" } else { \"non-variadic\" }\n-            ),\n-            ProjectionMismatched(ref values) => ty::tls::with(|tcx| {\n-                write!(\n-                    f,\n-                    \"expected {}, found {}\",\n-                    tcx.def_path_str(values.expected),\n-                    tcx.def_path_str(values.found)\n-                )\n-            }),\n+            )\n+            .into(),\n+            ProjectionMismatched(ref values) => format!(\n+                \"expected `{}`, found `{}`\",\n+                tcx.def_path_str(values.expected),\n+                tcx.def_path_str(values.found)\n+            )\n+            .into(),\n             ExistentialMismatch(ref values) => report_maybe_different(\n-                f,\n                 &format!(\"trait `{}`\", values.expected),\n                 &format!(\"trait `{}`\", values.found),\n-            ),\n+            )\n+            .into(),\n             ConstMismatch(ref values) => {\n-                write!(f, \"expected `{}`, found `{}`\", values.expected, values.found)\n+                format!(\"expected `{}`, found `{}`\", values.expected, values.found).into()\n+            }\n+            IntrinsicCast => \"cannot coerce intrinsics to function pointers\".into(),\n+            TargetFeatureCast(_) => {\n+                \"cannot coerce functions with `#[target_feature]` to safe function pointers\".into()\n             }\n-            IntrinsicCast => write!(f, \"cannot coerce intrinsics to function pointers\"),\n-            TargetFeatureCast(_) => write!(\n-                f,\n-                \"cannot coerce functions with `#[target_feature]` to safe function pointers\"\n-            ),\n         }\n     }\n }\n@@ -259,75 +244,23 @@ impl<'tcx> TypeError<'tcx> {\n }\n \n impl<'tcx> Ty<'tcx> {\n-    pub fn sort_string(self, tcx: TyCtxt<'_>) -> Cow<'static, str> {\n+    pub fn sort_string(self, tcx: TyCtxt<'tcx>) -> Cow<'static, str> {\n         match *self.kind() {\n-            ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => {\n-                format!(\"`{}`\", self).into()\n-            }\n-            ty::Tuple(ref tys) if tys.is_empty() => format!(\"`{}`\", self).into(),\n-\n-            ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.def_path_str(def.did())).into(),\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n-            ty::Array(t, n) => {\n-                if t.is_simple_ty() {\n-                    return format!(\"array `{}`\", self).into();\n-                }\n-\n-                let n = tcx.lift(n).unwrap();\n-                if let ty::ConstKind::Value(v) = n.kind() {\n-                    if let Some(n) = v.try_to_machine_usize(tcx) {\n-                        return format!(\"array of {} element{}\", n, pluralize!(n)).into();\n-                    }\n-                }\n-                \"array\".into()\n-            }\n-            ty::Slice(ty) if ty.is_simple_ty() => format!(\"slice `{}`\", self).into(),\n-            ty::Slice(_) => \"slice\".into(),\n-            ty::RawPtr(tymut) => {\n-                let tymut_string = match tymut.mutbl {\n-                    hir::Mutability::Mut => tymut.to_string(),\n-                    hir::Mutability::Not => format!(\"const {}\", tymut.ty),\n-                };\n-\n-                if tymut_string != \"_\" && (tymut.ty.is_simple_text() || tymut_string.len() < \"const raw pointer\".len()) {\n-                    format!(\"`*{}`\", tymut_string).into()\n-                } else {\n-                    // Unknown type name, it's long or has type arguments\n-                    \"raw pointer\".into()\n-                }\n-            },\n-            ty::Ref(_, ty, mutbl) => {\n-                let tymut = ty::TypeAndMut { ty, mutbl };\n-                let tymut_string = tymut.to_string();\n-\n-                if tymut_string != \"_\"\n-                    && (ty.is_simple_text() || tymut_string.len() < \"mutable reference\".len())\n-                {\n-                    format!(\"`&{}`\", tymut_string).into()\n-                } else {\n-                    // Unknown type name, it's long or has type arguments\n-                    match mutbl {\n-                        hir::Mutability::Mut => \"mutable reference\",\n-                        _ => \"reference\",\n-                    }\n-                    .into()\n-                }\n-            }\n             ty::FnDef(def_id, ..) => match tcx.def_kind(def_id) {\n                 DefKind::Ctor(CtorOf::Struct, _) => \"struct constructor\".into(),\n                 DefKind::Ctor(CtorOf::Variant, _) => \"enum constructor\".into(),\n                 _ => \"fn item\".into(),\n             },\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) if let Some(principal) = inner.principal() => {\n-                format!(\"trait object `dyn {}`\", tcx.def_path_str(principal.def_id())).into()\n+                format!(\"`dyn {}`\", tcx.def_path_str(principal.def_id())).into()\n             }\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n             ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n             ty::GeneratorWitness(..) |\n             ty::GeneratorWitnessMIR(..) => \"generator witness\".into(),\n-            ty::Tuple(..) => \"tuple\".into(),\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n             ty::Infer(ty::IntVar(_)) => \"integer\".into(),\n             ty::Infer(ty::FloatVar(_)) => \"floating-point number\".into(),\n@@ -337,9 +270,14 @@ impl<'tcx> Ty<'tcx> {\n             ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n             ty::Alias(ty::Projection, _) => \"associated type\".into(),\n-            ty::Param(p) => format!(\"type parameter `{}`\", p).into(),\n+            ty::Param(p) => format!(\"type parameter `{p}`\").into(),\n             ty::Alias(ty::Opaque, ..) => \"opaque type\".into(),\n             ty::Error(_) => \"type error\".into(),\n+            _ => {\n+                let width = tcx.sess.diagnostic_width();\n+                let length_limit = std::cmp::max(width / 4, 15);\n+                format!(\"`{}`\", tcx.ty_string_with_limit(self, length_limit)).into()\n+            }\n         }\n     }\n \n@@ -386,16 +324,14 @@ impl<'tcx> Ty<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n-        let width = self.sess.diagnostic_width();\n-        let length_limit = width.saturating_sub(30);\n+    pub fn ty_string_with_limit(self, ty: Ty<'tcx>, length_limit: usize) -> String {\n         let mut type_limit = 50;\n         let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n             .pretty_print_type(ty)\n             .expect(\"could not write to `String`\")\n             .into_buffer();\n-        if regular.len() <= width {\n-            return (regular, None);\n+        if regular.len() <= length_limit {\n+            return regular;\n         }\n         let mut short;\n         loop {\n@@ -415,6 +351,20 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n             type_limit -= 1;\n         }\n+        short\n+    }\n+\n+    pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n+        let width = self.sess.diagnostic_width();\n+        let length_limit = width.saturating_sub(30);\n+        let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n+            .pretty_print_type(ty)\n+            .expect(\"could not write to `String`\")\n+            .into_buffer();\n+        if regular.len() <= width {\n+            return (regular, None);\n+        }\n+        let short = self.ty_string_with_limit(ty, length_limit);\n         if regular == short {\n             return (regular, None);\n         }"}, {"sha": "6a20f62b6f9b82c3374f560f881389e937e0cef9", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1084,9 +1084,11 @@ pub trait PrettyPrinter<'tcx>:\n             write!(self, \"Sized\")?;\n         }\n \n-        for re in lifetimes {\n-            write!(self, \" + \")?;\n-            self = self.print_region(re)?;\n+        if !FORCE_TRIMMED_PATH.with(|flag| flag.get()) {\n+            for re in lifetimes {\n+                write!(self, \" + \")?;\n+                self = self.print_region(re)?;\n+            }\n         }\n \n         Ok(self)\n@@ -2070,6 +2072,10 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n             return true;\n         }\n \n+        if FORCE_TRIMMED_PATH.with(|flag| flag.get()) {\n+            return false;\n+        }\n+\n         let identify_regions = self.tcx.sess.opts.unstable_opts.identify_regions;\n \n         match *region {\n@@ -2346,6 +2352,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n         } else {\n             let tcx = self.tcx;\n \n+            let trim_path = FORCE_TRIMMED_PATH.with(|flag| flag.get());\n             // Closure used in `RegionFolder` to create names for anonymous late-bound\n             // regions. We use two `DebruijnIndex`es (one for the currently folded\n             // late-bound region and the other for the binder level) to determine\n@@ -2400,8 +2407,10 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                     }\n                 };\n \n-                start_or_continue(&mut self, \"for<\", \", \");\n-                do_continue(&mut self, name);\n+                if !trim_path {\n+                    start_or_continue(&mut self, \"for<\", \", \");\n+                    do_continue(&mut self, name);\n+                }\n                 tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind }))\n             };\n             let mut folder = RegionFolder {\n@@ -2412,7 +2421,9 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             };\n             let new_value = value.clone().skip_binder().fold_with(&mut folder);\n             let region_map = folder.region_map;\n-            start_or_continue(&mut self, \"\", \"> \");\n+            if !trim_path {\n+                start_or_continue(&mut self, \"\", \"> \");\n+            }\n             (new_value, region_map)\n         };\n "}, {"sha": "df6ce2777cfa4805e82adbd0d12e4f22f0e97c87", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1866,10 +1866,14 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         with_forced_trimmed_paths! {\n             if Some(pred.projection_ty.def_id) == self.tcx.lang_items().fn_once_output() {\n+                let fn_kind = self_ty.prefix_string(self.tcx);\n+                let item = match self_ty.kind() {\n+                    ty::FnDef(def, _) => self.tcx.item_name(*def).to_string(),\n+                    _ => self_ty.to_string(),\n+                };\n                 Some(format!(\n-                    \"expected `{self_ty}` to be a {fn_kind} that returns `{expected_ty}`, but it \\\n+                    \"expected `{item}` to be a {fn_kind} that returns `{expected_ty}`, but it \\\n                      returns `{normalized_ty}`\",\n-                    fn_kind = self_ty.prefix_string(self.tcx)\n                 ))\n             } else if Some(trait_def_id) == self.tcx.lang_items().future_trait() {\n                 Some(format!("}, {"sha": "ad7d479896fd04eddacaaa4e3f58fce3a50eaff7", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2454,7 +2454,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .at(&cause, obligation.param_env)\n             .define_opaque_types(false)\n             .eq(placeholder_obligation_trait_ref, impl_trait_ref)\n-            .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{e}`\"))?;\n+            .map_err(|e| {\n+                debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e.to_string(self.tcx()))\n+            })?;\n         nested_obligations.extend(obligations);\n \n         if !self.is_intercrate()"}, {"sha": "39418d359288bafbbcd4a5bb0712b81c683dc312", "filename": "src/tools/clippy/tests/ui/track-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/track-diagnostics.rs:LL:CC\n    |\n LL | const S: A = B;\n-   |              ^ expected struct `A`, found struct `B`\n+   |              ^ expected `A`, found `B`\n -Ztrack-diagnostics: created at compiler/rustc_infer/src/infer/error_reporting/mod.rs:LL:CC\n \n error: aborting due to previous error"}, {"sha": "a2a2a41c7a5a130d75f5fa6396213211d9092864", "filename": "tests/run-make-fulldeps/type-mismatch-same-crate-name/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -11,7 +11,7 @@ all:\n \t\ttr -d '\\r\\n' | $(CGREP) -e \\\n \t\"mismatched types.*\\\n \tcrateB::try_foo\\(foo2\\);.*\\\n-\texpected struct \\`crateA::foo::Foo\\`, found struct \\`Foo\\`.*\\\n+\texpected \\`crateA::foo::Foo\\`, found \\`Foo\\`.*\\\n \tdifferent versions of crate \\`crateA\\`.*\\\n \tmismatched types.*\\\n \tcrateB::try_bar\\(bar2\\);.*\\"}, {"sha": "39418d359288bafbbcd4a5bb0712b81c683dc312", "filename": "tests/rustdoc-ui/track-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Frustdoc-ui%2Ftrack-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Frustdoc-ui%2Ftrack-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Ftrack-diagnostics.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/track-diagnostics.rs:LL:CC\n    |\n LL | const S: A = B;\n-   |              ^ expected struct `A`, found struct `B`\n+   |              ^ expected `A`, found `B`\n -Ztrack-diagnostics: created at compiler/rustc_infer/src/infer/error_reporting/mod.rs:LL:CC\n \n error: aborting due to previous error"}, {"sha": "de92841d7f18e835699495ea9f5e8744ea74cebb", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -10,7 +10,7 @@ LL | || ) -> ()\n LL | |  {\n LL | |      loop {}\n LL | |  }\n-   | |__^ expected `&Layout`, found struct `Layout`\n+   | |__^ expected `&Layout`, found `Layout`\n    |\n note: function defined here\n   --> $DIR/alloc-error-handler-bad-signature-1.rs:10:4"}, {"sha": "7a495380f2ba17376e5bf75bdf2e1f387b8035cf", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,12 +9,12 @@ LL | || ) {\n    | ||_- arguments to this function are incorrect\n LL | |      loop {}\n LL | |  }\n-   | |__^ expected struct `Layout`, found struct `core::alloc::Layout`\n+   | |__^ expected `Layout`, found `core::alloc::Layout`\n    |\n-   = note: struct `core::alloc::Layout` and struct `Layout` have similar names, but are actually distinct types\n-note: struct `core::alloc::Layout` is defined in crate `core`\n+   = note: `core::alloc::Layout` and `Layout` have similar names, but are actually distinct types\n+note: `core::alloc::Layout` is defined in crate `core`\n   --> $SRC_DIR/core/src/alloc/layout.rs:LL:COL\n-note: struct `Layout` is defined in the current crate\n+note: `Layout` is defined in the current crate\n   --> $DIR/alloc-error-handler-bad-signature-2.rs:7:1\n    |\n LL | struct Layout;"}, {"sha": "6076b7ccb8ff6f3ef7e8cf15a7d6c7b4c017059e", "filename": "tests/ui/argument-suggestions/formal-and-expected-differ.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/formal-and-expected-differ.rs:22:29\n    |\n LL |     let _: U<_, u32> = U(1, S(3u32));\n-   |                        -    ^^^^^^^ expected `f32`, found `u32`\n+   |                        -    ^^^^^^^ expected `S<f32>`, found `S<u32>`\n    |                        |\n    |                        arguments to this struct are incorrect\n    |\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n   --> $DIR/formal-and-expected-differ.rs:22:24\n    |\n LL |     let _: U<_, u32> = U(1, S(3u32));\n-   |            ---------   ^^^^^^^^^^^^^ expected `u32`, found `f32`\n+   |            ---------   ^^^^^^^^^^^^^ expected `U<_, u32>`, found `U<i32, f32>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "d26f33d098be09448c03019c15a274675836c194", "filename": "tests/ui/argument-suggestions/invalid_arguments.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -100,7 +100,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:24:18\n    |\n LL |   three_arg_diff(X{}, 1.0, \"\");\n-   |   -------------- ^^^ expected `i32`, found struct `X`\n+   |   -------------- ^^^ expected `i32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -114,7 +114,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:25:21\n    |\n LL |   three_arg_diff(1, X {}, \"\");\n-   |   --------------    ^^^^ expected `f32`, found struct `X`\n+   |   --------------    ^^^^ expected `f32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -128,7 +128,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:26:26\n    |\n LL |   three_arg_diff(1, 1.0, X {});\n-   |   --------------         ^^^^ expected `&str`, found struct `X`\n+   |   --------------         ^^^^ expected `&str`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -142,9 +142,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:28:3\n    |\n LL |   three_arg_diff(X {}, X {}, \"\");\n-   |   ^^^^^^^^^^^^^^ ----  ---- expected `f32`, found struct `X`\n+   |   ^^^^^^^^^^^^^^ ----  ---- expected `f32`, found `X`\n    |                  |\n-   |                  expected `i32`, found struct `X`\n+   |                  expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -156,9 +156,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:29:3\n    |\n LL |   three_arg_diff(X {}, 1.0, X {});\n-   |   ^^^^^^^^^^^^^^ ----       ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^ ----       ---- expected `&str`, found `X`\n    |                  |\n-   |                  expected `i32`, found struct `X`\n+   |                  expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -170,9 +170,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:30:3\n    |\n LL |   three_arg_diff(1, X {}, X {});\n-   |   ^^^^^^^^^^^^^^    ----  ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^    ----  ---- expected `&str`, found `X`\n    |                     |\n-   |                     expected `f32`, found struct `X`\n+   |                     expected `f32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -184,10 +184,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:32:3\n    |\n LL |   three_arg_diff(X {}, X {}, X {});\n-   |   ^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found `X`\n    |                  |     |\n-   |                  |     expected `f32`, found struct `X`\n-   |                  expected `i32`, found struct `X`\n+   |                  |     expected `f32`, found `X`\n+   |                  expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -199,7 +199,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:34:20\n    |\n LL |   three_arg_repeat(X {}, 1, \"\");\n-   |   ---------------- ^^^^ expected `i32`, found struct `X`\n+   |   ---------------- ^^^^ expected `i32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -213,7 +213,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:35:23\n    |\n LL |   three_arg_repeat(1, X {}, \"\");\n-   |   ----------------    ^^^^ expected `i32`, found struct `X`\n+   |   ----------------    ^^^^ expected `i32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -227,7 +227,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:36:26\n    |\n LL |   three_arg_repeat(1, 1, X {});\n-   |   ----------------       ^^^^ expected `&str`, found struct `X`\n+   |   ----------------       ^^^^ expected `&str`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -241,9 +241,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:38:3\n    |\n LL |   three_arg_repeat(X {}, X {}, \"\");\n-   |   ^^^^^^^^^^^^^^^^ ----  ---- expected `i32`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^ ----  ---- expected `i32`, found `X`\n    |                    |\n-   |                    expected `i32`, found struct `X`\n+   |                    expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n@@ -255,9 +255,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:39:3\n    |\n LL |   three_arg_repeat(X {}, 1, X {});\n-   |   ^^^^^^^^^^^^^^^^ ----     ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^ ----     ---- expected `&str`, found `X`\n    |                    |\n-   |                    expected `i32`, found struct `X`\n+   |                    expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n@@ -269,9 +269,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:40:3\n    |\n LL |   three_arg_repeat(1, X {}, X{});\n-   |   ^^^^^^^^^^^^^^^^    ----  --- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^    ----  --- expected `&str`, found `X`\n    |                       |\n-   |                       expected `i32`, found struct `X`\n+   |                       expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n@@ -283,10 +283,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:42:3\n    |\n LL |   three_arg_repeat(X {}, X {}, X {});\n-   |   ^^^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found `X`\n    |                    |     |\n-   |                    |     expected `i32`, found struct `X`\n-   |                    expected `i32`, found struct `X`\n+   |                    |     expected `i32`, found `X`\n+   |                    expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4"}, {"sha": "e4304988f9bee1990a9f5537d7c5ffcea2ce9524", "filename": "tests/ui/argument-suggestions/issue-100478.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Fissue-100478.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Fissue-100478.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-100478.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -41,7 +41,7 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/issue-100478.rs:36:5\n    |\n LL |     four_shuffle(T3::default(), T2::default(), T1::default(), T3::default());\n-   |     ^^^^^^^^^^^^ -------------                 -------------  ------------- expected struct `T4`, found struct `T3`\n+   |     ^^^^^^^^^^^^ -------------                 -------------  ------------- expected `T4`, found `T3`\n    |                  |                             |\n    |                  |                             expected `T3`, found `T1`\n    |                  expected `T1`, found `T3`"}, {"sha": "7582082ac72ac7bb546b2ea6b33fba25ccaba2d5", "filename": "tests/ui/argument-suggestions/issue-101097.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -128,7 +128,7 @@ LL |     f(C, C, A, B, A, A);\n    |     ^ -  -  -     -  - expected `C`, found `A`\n    |       |  |  |     |\n    |       |  |  |     expected `C`, found `A`\n-   |       |  |  expected struct `B`, found struct `A`\n+   |       |  |  expected `B`, found `A`\n    |       |  expected `A`, found `C`\n    |       expected `A`, found `C`\n    |"}, {"sha": "c2e6e001b17917ad6acaae9bb7b32664aa52a4b5", "filename": "tests/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0061]: this function takes 4 arguments but 7 arguments were supplied\n LL |     foo(&&A, B, C, D, E, F, G);\n    |     ^^^      -  -     -  - argument of type `F` unexpected\n    |              |  |     |\n-   |              |  |     expected `&E`, found struct `E`\n+   |              |  |     expected `&E`, found `E`\n    |              |  argument of type `C` unexpected\n    |              argument of type `B` unexpected\n    |"}, {"sha": "8cf48060a63528185329be15170080392ef02588", "filename": "tests/ui/argument-suggestions/mixed_cases.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -41,7 +41,7 @@ error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n LL |   three_args(1, X {});\n    |   ^^^^^^^^^^---------\n    |             |   |\n-   |             |   expected `f32`, found struct `X`\n+   |             |   expected `f32`, found `X`\n    |             an argument of type `&str` is missing\n    |\n note: function defined here\n@@ -78,7 +78,7 @@ error[E0308]: arguments to this function are incorrect\n LL |   three_args(\"\", X {}, 1);\n    |   ^^^^^^^^^^ --  ----  - expected `&str`, found `{integer}`\n    |              |   |\n-   |              |   expected `f32`, found struct `X`\n+   |              |   expected `f32`, found `X`\n    |              expected `i32`, found `&'static str`\n    |\n note: function defined here"}, {"sha": "38cf23ddc3895914a3f2dc037b85d18babae02fe", "filename": "tests/ui/argument-suggestions/two-mismatch-notes.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,14 +4,15 @@ error[E0308]: arguments to this function are incorrect\n LL |     foo(f, w);\n    |     ^^^\n    |\n-note: expected `i32`, found `u32`\n+note: expected fn pointer, found fn item\n   --> $DIR/two-mismatch-notes.rs:10:9\n    |\n LL |     foo(f, w);\n    |         ^\n    = note: expected fn pointer `fn(i32)`\n                  found fn item `fn(u32) {f}`\n-note: expected `i32`, found `isize`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n+note: expected `Wrapper<i32>`, found `Wrapper<isize>`\n   --> $DIR/two-mismatch-notes.rs:10:12\n    |\n LL |     foo(f, w);"}, {"sha": "d8b5b10d59148abd6706741db7ad9360911a0aad", "filename": "tests/ui/array-slice-vec/array-not-vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,12 +1,12 @@\n fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n-    //~| expected `i32`, found array\n+    //~| expected `i32`, found `[{integer}; 3]`\n \n     let x: &[i32] = &[1, 2, 3];\n     let _y: &i32 = x;\n     //~^ ERROR mismatched types\n     //~| expected reference `&i32`\n     //~| found reference `&[i32]`\n-    //~| expected `i32`, found slice\n+    //~| expected `&i32`, found `&[i32]`\n }"}, {"sha": "f20d99524dccd36d74a29d24ba6e2d7629a3aa21", "filename": "tests/ui/array-slice-vec/array-not-vector.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,15 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:2:19\n    |\n LL |     let _x: i32 = [1, 2, 3];\n-   |             ---   ^^^^^^^^^ expected `i32`, found array `[{integer}; 3]`\n+   |             ---   ^^^^^^^^^ expected `i32`, found `[{integer}; 3]`\n    |             |\n    |             expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:7:20\n    |\n LL |     let _y: &i32 = x;\n-   |             ----   ^ expected `i32`, found slice `[i32]`\n+   |             ----   ^ expected `&i32`, found `&[i32]`\n    |             |\n    |             expected due to this\n    |"}, {"sha": "47008e1d99946f68c440bcb39cd46ca1b73af2bf", "filename": "tests/ui/array-slice-vec/slice-to-vec-comparison.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Farray-slice-vec%2Fslice-to-vec-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Farray-slice-vec%2Fslice-to-vec-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Fslice-to-vec-comparison.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/slice-to-vec-comparison.rs:4:9\n    |\n LL |     a > b;\n-   |         ^ expected array of 0 elements, found struct `Vec`\n+   |         ^ expected `&[_; 0]`, found `&Vec<u8>`\n    |\n    = note: expected reference `&[_; 0]`\n               found reference `&Vec<u8>`"}, {"sha": "d45868151b16643d546d43785551e78a65bb5c09", "filename": "tests/ui/associated-consts/associated-const-generic-obligations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0326]: implemented const `FROM` has an incompatible type for trait\n   --> $DIR/associated-const-generic-obligations.rs:14:17\n    |\n LL |     const FROM: &'static str = \"foo\";\n-   |                 ^^^^^^^^^^^^ expected associated type, found `&str`\n+   |                 ^^^^^^^^^^^^ expected associated type, found `&'static str`\n    |\n note: type in trait\n   --> $DIR/associated-const-generic-obligations.rs:10:17"}, {"sha": "b64a4dab2065d1dc4746c5cd735758f204290fd0", "filename": "tests/ui/associated-type-bounds/elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/elision.rs:5:79\n    |\n LL | fn f(x: &mut dyn Iterator<Item: Iterator<Item = &'_ ()>>) -> Option<&'_ ()> { x.next() }\n-   |                           -----------------------------      --------------   ^^^^^^^^ expected `&()`, found type parameter `impl Iterator<Item = &'_ ()>`\n+   |                           -----------------------------      --------------   ^^^^^^^^ expected `Option<&()>`, found `Option<impl Iterator<Item = &'_ ()>>`\n    |                           |                                  |\n    |                           |                                  expected `Option<&'static ()>` because of return type\n    |                           this type parameter"}, {"sha": "1668b613b25b1629efc4ee5a1ea8cb3862a73f3c", "filename": "tests/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -95,7 +95,7 @@ LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`\n+   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Copy>>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -114,7 +114,7 @@ LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`\n+   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Sized>>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "15cc9646b2c8e17ce2b90e8cf780862e3647f89c", "filename": "tests/ui/associated-type-bounds/issue-71443-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn hello<F: for<'a> Iterator<Item: 'a>>() {\n    |                                           - help: try adding a return type: `-> Incorrect`\n LL |     Incorrect\n-   |     ^^^^^^^^^ expected `()`, found struct `Incorrect`\n+   |     ^^^^^^^^^ expected `()`, found `Incorrect`\n \n error: aborting due to previous error\n "}, {"sha": "5fe53a27eb8540f076931b3de0638221db129fea", "filename": "tests/ui/associated-types/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:27:23\n    |\n LL | fn b() { dent(ModelT, Blue); }\n-   |          ----         ^^^^ expected struct `Black`, found struct `Blue`\n+   |          ----         ^^^^ expected `Black`, found `Blue`\n    |          |\n    |          arguments to this function are incorrect\n    |\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n    |\n LL | fn c() { dent(ModelU, Black); }\n-   |          ----         ^^^^^ expected struct `Blue`, found struct `Black`\n+   |          ----         ^^^^^ expected `Blue`, found `Black`\n    |          |\n    |          arguments to this function are incorrect\n    |\n@@ -30,7 +30,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n    |\n LL | fn f() { ModelT.chip_paint(Blue); }\n-   |                 ---------- ^^^^ expected struct `Black`, found struct `Blue`\n+   |                 ---------- ^^^^ expected `Black`, found `Blue`\n    |                 |\n    |                 arguments to this method are incorrect\n    |\n@@ -44,7 +44,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n    |\n LL | fn g() { ModelU.chip_paint(Black); }\n-   |                 ---------- ^^^^^ expected struct `Blue`, found struct `Black`\n+   |                 ---------- ^^^^^ expected `Blue`, found `Black`\n    |                 |\n    |                 arguments to this method are incorrect\n    |"}, {"sha": "380d0e95c13f3e4437e09cb601c7236c7a43e2c9", "filename": "tests/ui/associated-types/associated-types-eq-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -23,7 +23,7 @@ fn foo2<I: Foo>(x: I) {\n     let _: Bar = x.boo();\n     //~^ ERROR mismatched types\n     //~| found associated type `<I as Foo>::A`\n-    //~| expected struct `Bar`, found associated type\n+    //~| expected `Bar`, found\n     //~| expected struct `Bar`\n }\n "}, {"sha": "15ce4fc91cb306921e35e32800598f203c4e08c4", "filename": "tests/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-types-eq-3.rs:23:18\n    |\n LL |     let _: Bar = x.boo();\n-   |            ---   ^^^^^^^ expected struct `Bar`, found associated type\n+   |            ---   ^^^^^^^ expected `Bar`, found associated type\n    |            |\n    |            expected due to this\n    |"}, {"sha": "99db0c1bf3bc94ae388f30b49d4026796a0fd153", "filename": "tests/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,8 +1,8 @@\n-error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n+error[E0271]: type mismatch resolving `<UintStruct as TheTrait<&isize>>::A == &isize`\n   --> $DIR/associated-types-eq-hr.rs:87:11\n    |\n LL |     foo::<UintStruct>();\n-   |           ^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n+   |           ^^^^^^^^^^ type mismatch resolving `<UintStruct as TheTrait<&isize>>::A == &isize`\n    |\n note: expected this to be `&isize`\n   --> $DIR/associated-types-eq-hr.rs:26:14\n@@ -20,11 +20,11 @@ LL | where\n LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n-error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+error[E0271]: type mismatch resolving `<IntStruct as TheTrait<&isize>>::A == &usize`\n   --> $DIR/associated-types-eq-hr.rs:91:11\n    |\n LL |     bar::<IntStruct>();\n-   |           ^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+   |           ^^^^^^^^^ type mismatch resolving `<IntStruct as TheTrait<&isize>>::A == &usize`\n    |\n note: expected this to be `&usize`\n   --> $DIR/associated-types-eq-hr.rs:14:14"}, {"sha": "ab1a9511ec6c7e041488a8c94fa362278b6341d6", "filename": "tests/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -14,7 +14,7 @@ error[E0599]: no function or associated item named `default` found for trait obj\n   --> $DIR/issue-43924.rs:14:39\n    |\n LL |     assert_eq!(<() as Foo<u32>>::Out::default().to_string(), \"false\");\n-   |                                       ^^^^^^^ function or associated item not found in `(dyn ToString + 'static)`\n+   |                                       ^^^^^^^ function or associated item not found in `dyn ToString`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "384561f8ccd7e0496ef3c867ff4e015f8955a958", "filename": "tests/ui/associated-types/issue-87261.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fissue-87261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fissue-87261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-87261.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -77,10 +77,10 @@ where\n \n fn main() {\n     accepts_trait(returns_opaque());\n-    //~^ ERROR type mismatch resolving `<impl Trait + 'static as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_derived());\n-    //~^ ERROR type mismatch resolving `<impl DerivedTrait + 'static as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_foo());\n     //~^ ERROR type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n@@ -89,7 +89,7 @@ fn main() {\n     //~^ ERROR type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_foo());\n     //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`"}, {"sha": "f5c6d82471a8bd0967576990b76fa335e7479927", "filename": "tests/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -132,7 +132,7 @@ note: required by a bound in `accepts_generic_trait`\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n \n-error[E0271]: type mismatch resolving `<impl Trait + 'static as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:79:19\n    |\n LL | fn returns_opaque() -> impl Trait + 'static {\n@@ -155,7 +155,7 @@ help: consider constraining the associated type `<impl Trait + 'static as Trait>\n LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n    |                                  +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl DerivedTrait + 'static as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:82:19\n    |\n LL | fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n@@ -222,7 +222,7 @@ note: required by a bound in `accepts_trait`\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:91:27\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {"}, {"sha": "a6dbb0716143a1bfbdf183719bef0d4260d263ba", "filename": "tests/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:49:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n+   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected `Result<u8, MyErr>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:58:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n+   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected `Result<u8, MyErr>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |"}, {"sha": "3c01fca2f4d8d5f97dfb6ec97aa867db4dd53b76", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n    |\n LL |     async fn foo(&self) -> i32 {\n-   |                            ^^^ expected struct `Pin`, found opaque type\n+   |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found opaque type\n    |\n note: type in trait\n   --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22"}, {"sha": "b8d83d0f28a3194d1e647c6b74ee8f2556a493a3", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |         Ok(())\n    |         ^^^^^^- help: consider using a semicolon here: `;`\n    |         |\n-   |         expected `()`, found enum `Result`\n+   |         expected `()`, found `Result<(), _>`\n    |\n    = note: expected unit type `()`\n                    found enum `Result<(), _>`"}, {"sha": "3cde5cca3c3cdddda0dbd6b2b1f88accb40eae5e", "filename": "tests/ui/async-await/issue-61076.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -89,7 +89,7 @@ async fn match_() {\n     match tuple() { //~ HELP consider `await`ing on the `Future`\n         //~^ NOTE this expression has type `impl Future<Output = Tuple>`\n         Tuple(_) => {} //~ ERROR mismatched types\n-        //~^ NOTE expected opaque type, found struct `Tuple`\n+        //~^ NOTE expected opaque type, found `Tuple`\n         //~| NOTE expected opaque type `impl Future<Output = Tuple>`\n     }\n }"}, {"sha": "5a7316edd01f55ba5bca0df7e5c1a524a68db570", "filename": "tests/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -62,7 +62,7 @@ LL |     match tuple() {\n    |           ------- this expression has type `impl Future<Output = Tuple>`\n LL |\n LL |         Tuple(_) => {}\n-   |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n+   |         ^^^^^^^^ expected opaque type, found `Tuple`\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-61076.rs:56:21"}, {"sha": "169cc7f9b21ea8265878c7cd06ab7ca3bbf65feb", "filename": "tests/ui/async-await/issue-98634.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fissue-98634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fissue-98634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -43,8 +43,8 @@ impl Runtime {\n fn main() {\n     Runtime.block_on(async {\n         StructAsync { callback }.await;\n-        //~^ ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n-        //~| ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n-        //~| ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+        //~^ ERROR expected `callback` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n+        //~| ERROR expected `callback` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n+        //~| ERROR expected `callback` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n     });\n }"}, {"sha": "08ea5bdc574fa8551ef2837986f14d9545b98f0d", "filename": "tests/ui/async-await/issue-98634.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,8 +1,8 @@\n-error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n   --> $DIR/issue-98634.rs:45:23\n    |\n LL |         StructAsync { callback }.await;\n-   |                       ^^^^^^^^ expected struct `Pin`, found opaque type\n+   |                       ^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-98634.rs:24:21\n@@ -17,11 +17,11 @@ note: required by a bound in `StructAsync`\n LL | pub struct StructAsync<F: Fn() -> Pin<Box<dyn Future<Output = ()>>>> {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StructAsync`\n \n-error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n   --> $DIR/issue-98634.rs:45:9\n    |\n LL |         StructAsync { callback }.await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Pin`, found opaque type\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-98634.rs:24:21\n@@ -36,11 +36,11 @@ note: required by a bound in `StructAsync`\n LL | pub struct StructAsync<F: Fn() -> Pin<Box<dyn Future<Output = ()>>>> {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StructAsync`\n \n-error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n   --> $DIR/issue-98634.rs:45:33\n    |\n LL |         StructAsync { callback }.await;\n-   |                                 ^^^^^^ expected struct `Pin`, found opaque type\n+   |                                 ^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-98634.rs:24:21"}, {"sha": "eef711910a1a08fbef8b3ba8455f37754111d814", "filename": "tests/ui/async-await/issues/issue-102206.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     std::mem::size_of_val(foo());\n    |     --------------------- ^^^^^\n    |     |                     |\n-   |     |                     expected reference, found opaque type\n+   |     |                     expected `&_`, found opaque type\n    |     |                     help: consider borrowing here: `&foo()`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "592ef7faf81379f4b54c619bf74621548504a66b", "filename": "tests/ui/async-await/proper-span-for-type-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/proper-span-for-type-error.rs:8:5\n    |\n LL |     a().await\n-   |     ^^^^^^^^^ expected enum `Result`, found `()`\n+   |     ^^^^^^^^^ expected `Result<(), i32>`, found `()`\n    |\n    = note:   expected enum `Result<(), i32>`\n            found unit type `()`"}, {"sha": "2db0666f1ae6847ed4c8c292b160b7ae9198a103", "filename": "tests/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -127,7 +127,7 @@ LL |     match dummy_result() {\n    |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n ...\n LL |         Ok(_) => {}\n-   |         ^^^^^ expected opaque type, found enum `Result`\n+   |         ^^^^^ expected opaque type, found `Result<_, _>`\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/suggest-missing-await.rs:57:28\n@@ -148,7 +148,7 @@ LL |     match dummy_result() {\n    |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n ...\n LL |         Err(_) => {}\n-   |         ^^^^^^ expected opaque type, found enum `Result`\n+   |         ^^^^^^ expected opaque type, found `Result<_, _>`\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/suggest-missing-await.rs:57:28"}, {"sha": "8e98bfcd90fbc50a3a7ca0700ff72c3a6bb7dbf3", "filename": "tests/ui/autoref-autoderef/issue-38940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-38940.rs:49:22\n    |\n LL |     let x: &Bottom = &t;\n-   |            -------   ^^ expected struct `Bottom`, found struct `Top`\n+   |            -------   ^^ expected `&Bottom`, found `&Top`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "63e6d76843d18b0f98a635157b151f59e3309763", "filename": "tests/ui/blind/blind-item-block-middle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblind%2Fblind-item-block-middle.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ LL | mod foo { pub struct bar; }\n LL |     let bar = 5;\n    |         ^^^   - this expression has type `{integer}`\n    |         |\n-   |         expected integer, found struct `bar`\n+   |         expected integer, found `bar`\n    |         `bar` is interpreted as a unit struct, not a new binding\n    |         help: introduce a new binding instead: `other_bar`\n "}, {"sha": "d30ab1293431b59b60a1cab72af36bfde5a059a2", "filename": "tests/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:3:15\n    |\n LL | pub fn f() -> String {\n-   |        -      ^^^^^^ expected struct `String`, found `()`\n+   |        -      ^^^^^^ expected `String`, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:8:15\n    |\n LL | pub fn g() -> String {\n-   |        -      ^^^^^^ expected struct `String`, found `()`\n+   |        -      ^^^^^^ expected `String`, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();"}, {"sha": "c119b69da2294e1b259dd993581be77d23c69402", "filename": "tests/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,15 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:3:13\n    |\n LL | fn foo() -> String {\n-   |    ---      ^^^^^^ expected struct `String`, found `()`\n+   |    ---      ^^^^^^ expected `String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n    |\n LL | fn bar() -> String {\n-   |    ---      ^^^^^^ expected struct `String`, found `()`\n+   |    ---      ^^^^^^ expected `String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"foobar\".to_string()"}, {"sha": "8f93e5a356fa670cec4ec756f619e1930535490a", "filename": "tests/ui/block-result/issue-13624.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-13624.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,7 +6,7 @@ mod a {\n   pub fn get_enum_struct_variant() -> () {\n     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n     //~^ ERROR mismatched types\n-    //~| expected `()`, found enum `Enum`\n+    //~| expected `()`, found `Enum`\n   }\n }\n \n@@ -19,7 +19,7 @@ mod b {\n       match enum_struct_variant {\n         a::Enum::EnumStructVariant { x, y, z } => {\n         //~^ ERROR mismatched types\n-        //~| expected `()`, found enum `Enum`\n+        //~| expected `()`, found `Enum`\n         }\n       }\n     }"}, {"sha": "d41bd057f8246c0428a197d9901cd27f521ddbd8", "filename": "tests/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL |   pub fn get_enum_struct_variant() -> () {\n    |                                       -- expected `()` because of return type\n LL |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `Enum`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Enum`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:20:9\n    |\n LL |       match enum_struct_variant {\n    |             ------------------- this expression has type `()`\n LL |         a::Enum::EnumStructVariant { x, y, z } => {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `Enum`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Enum`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "677b40aaa9dadae3099cf32b6c1d7c100cb1b884", "filename": "tests/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -20,7 +20,7 @@ LL | fn main() {\n    |           - expected `()` because of default return type\n LL |   let b = Bob + 3.5;\n LL |   b + 3\n-   |   ^^^^^ expected `()`, found struct `Bob`\n+   |   ^^^^^ expected `()`, found `Bob`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "de7fd39a20caa1952b37828d1580c1d4129e490a", "filename": "tests/ui/block-result/issue-5500.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-5500.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -3,5 +3,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected unit type `()`\n     //~| found reference `&_`\n-    //~| expected `()`, found reference\n+    //~| expected `()`, found `&_`\n }"}, {"sha": "8cd4bd65871a3601421098c8e6b6a4d84f69104f", "filename": "tests/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn main() {\n    |           - expected `()` because of default return type\n LL |     &panic!()\n-   |     ^^^^^^^^^ expected `()`, found reference\n+   |     ^^^^^^^^^ expected `()`, found `&_`\n    |\n    = note: expected unit type `()`\n               found reference `&_`"}, {"sha": "c03f35884b8a4099af99a4c650135c5c6f3bb84e", "filename": "tests/ui/box/issue-82446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fbox%2Fissue-82446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fbox%2Fissue-82446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Fissue-82446.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-82446.rs:11:9\n    |\n LL |         val\n-   |         ^^^ expected struct `Box`, found reference\n+   |         ^^^ expected `Box<dyn MyTrait>`, found `&Box<dyn MyTrait>`\n    |\n    = note: expected struct `Box<(dyn MyTrait + 'static)>`\n            found reference `&Box<(dyn MyTrait + 'static)>`"}, {"sha": "c7899338197d8e56f8ff7c165bd5fbcbe33d1108", "filename": "tests/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -46,6 +46,7 @@ LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |\n    = note: expected fn pointer `unsafe extern \"C\" fn(_, _)`\n                  found fn item `unsafe extern \"C\" fn(_, _, ...) {foo}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:26:54\n@@ -57,6 +58,7 @@ LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |\n    = note: expected fn pointer `extern \"C\" fn(_, _, ...)`\n                  found fn item `extern \"C\" fn(_, _) {bar}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error[E0617]: can't pass `f32` to variadic function\n   --> $DIR/variadic-ffi-1.rs:28:19"}, {"sha": "5d65c87b0fd612d136a3ebbf28f1027b1f3a8f70", "filename": "tests/ui/closures/issue-78720.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fclosures%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fclosures%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-78720.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-78720.rs:7:39\n    |\n LL |     fn map2<F>(self, f: F) -> Map2<F> {}\n-   |                                       ^^ expected struct `Map2`, found `()`\n+   |                                       ^^ expected `Map2<F>`, found `()`\n    |\n    = note: expected struct `Map2<F>`\n            found unit type `()`"}, {"sha": "90eb75f2bdfd181bff427bee458f8087b869698e", "filename": "tests/ui/coercion/coerce-block-tail-26978.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-block-tail-26978.rs:9:9\n    |\n LL |     f(&{x});\n-   |         ^ expected `i32`, found struct `Box`\n+   |         ^ expected `i32`, found `Box<i32>`\n    |\n    = note: expected type `i32`\n             found struct `Box<i32>`"}, {"sha": "7e14f42eaafce851c4f2e07fc19353f9ebd21e2b", "filename": "tests/ui/coercion/coerce-block-tail-57749.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-block-tail-57749.rs:33:14\n    |\n LL |     reset(&{ Homura });\n-   |              ^^^^^^ expected `u32`, found struct `Homura`\n+   |              ^^^^^^ expected `u32`, found `Homura`\n    |\n help: consider dereferencing the type\n    |"}, {"sha": "d556d013bb5838f3c9aa1671cfcf6be84bb73f09", "filename": "tests/ui/coercion/coerce-block-tail-83783.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-block-tail-83783.rs:7:32\n    |\n LL |     _consume_reference::<i32>(&async { Box::new(7_i32) }.await);\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `Box`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `Box<i32>`\n    |\n    = note: expected type `i32`\n             found struct `Box<i32>`"}, {"sha": "3cfebb8a54372d9a70f54f2a1373fb2739f19308", "filename": "tests/ui/coercion/coerce-block-tail-83850.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-block-tail-83850.rs:5:7\n    |\n LL |     f(&Box::new([1, 2]));\n-   |     - ^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found struct `Box`\n+   |     - ^^^^^^^^^^^^^^^^^ expected `&[i32]`, found `&Box<[{integer}; 2]>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "7044fc3cefc4c281cf2219ce636b46f0be828c5a", "filename": "tests/ui/coercion/coerce-block-tail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-block-tail.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-block-tail.rs:4:23\n    |\n LL |     let _: &i32 = & { Box::new(1i32) };\n-   |                       ^^^^^^^^^^^^^^ expected `i32`, found struct `Box`\n+   |                       ^^^^^^^^^^^^^^ expected `i32`, found `Box<i32>`\n    |\n    = note: expected type `i32`\n             found struct `Box<i32>`"}, {"sha": "f94422a9269856b29dd7e1bb670d5e259ae92cff", "filename": "tests/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:9:27\n    |\n LL |     let _ = type_ascribe!(box { [1, 2, 3] }, Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:10:27\n    |\n LL |     let _ = type_ascribe!(box if true { [1, 2, 3] } else { [1, 3, 4] }, Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:11:27\n    |\n LL |     let _ = type_ascribe!(box match true { true => [1, 2, 3], false => [1, 3, 4] }, Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:13:27\n    |\n LL |     let _ = type_ascribe!(box { |x| (x as u8) }, Box<dyn Fn(i32) -> _>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n+   |                           ^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Fn(i32) -> u8>`, found `Box<[closure@coerce-expect-unsized-ascribed.rs:13:33]>`\n    |\n    = note: expected struct `Box<dyn Fn(i32) -> u8>`\n               found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:33: 13:36]>`\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:27\n    |\n LL |     let _ = type_ascribe!(box if true { false } else { true }, Box<dyn Debug>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `bool`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Debug>`, found `Box<bool>`\n    |\n    = note: expected struct `Box<dyn Debug>`\n               found struct `Box<bool>`\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:15:27\n    |\n LL |     let _ = type_ascribe!(box match true { true => 'a', false => 'b' }, Box<dyn Debug>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `char`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Debug>`, found `Box<char>`\n    |\n    = note: expected struct `Box<dyn Debug>`\n               found struct `Box<char>`\n@@ -56,7 +56,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:17:27\n    |\n LL |     let _ = type_ascribe!(&{ [1, 2, 3] }, &[i32]);\n-   |                           ^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^ expected `&[i32]`, found `&[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n@@ -65,7 +65,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:18:27\n    |\n LL |     let _ = type_ascribe!(&if true { [1, 2, 3] } else { [1, 3, 4] }, &[i32]);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&[i32]`, found `&[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n@@ -74,7 +74,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:19:27\n    |\n LL |     let _ = type_ascribe!(&match true { true => [1, 2, 3], false => [1, 3, 4] }, &[i32]);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&[i32]`, found `&[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n@@ -83,7 +83,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:21:27\n    |\n LL |     let _ = type_ascribe!(&{ |x| (x as u8) }, &dyn Fn(i32) -> _);\n-   |                           ^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n+   |                           ^^^^^^^^^^^^^^^^^^ expected `&dyn Fn(i32) -> u8`, found `&[closure@coerce-expect-unsized-ascribed.rs:21:30]`\n    |\n    = note: expected reference `&dyn Fn(i32) -> u8`\n               found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:30: 21:33]`\n@@ -92,7 +92,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:27\n    |\n LL |     let _ = type_ascribe!(&if true { false } else { true }, &dyn Debug);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `bool`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&dyn Debug`, found `&bool`\n    |\n    = note: expected reference `&dyn Debug`\n               found reference `&bool`\n@@ -101,7 +101,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:23:27\n    |\n LL |     let _ = type_ascribe!(&match true { true => 'a', false => 'b' }, &dyn Debug);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `char`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&dyn Debug`, found `&char`\n    |\n    = note: expected reference `&dyn Debug`\n               found reference `&char`\n@@ -110,7 +110,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:25:27\n    |\n LL |     let _ = type_ascribe!(Box::new([1, 2, 3]), Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n@@ -119,7 +119,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:26:27\n    |\n LL |     let _ = type_ascribe!(Box::new(|x| (x as u8)), Box<dyn Fn(i32) -> _>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Fn(i32) -> u8>`, found `Box<[closure@coerce-expect-unsized-ascribed.rs:26:36]>`\n    |\n    = note: expected struct `Box<dyn Fn(i32) -> u8>`\n               found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:36: 26:39]>`"}, {"sha": "3c737358adc77ed1be8d99ae488f0271ddeb0872", "filename": "tests/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -82,7 +82,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:50:21\n    |\n LL |     let x: [!; 2] = [return, 22];\n-   |            ------   ^^^^^^^^^^^^ expected `!`, found integer\n+   |            ------   ^^^^^^^^^^^^ expected `[!; 2]`, found `[{integer}; 2]`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "288e945f1f8d5eb0625bfaf5357849ff89ed4085", "filename": "tests/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:8:13\n    |\n LL | fn foo() -> Result<u8, u64> {\n-   |    ---      ^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n+   |    ---      ^^^^^^^^^^^^^^^ expected `Result<u8, u64>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Ok(1);"}, {"sha": "b99235dd37f89ae0bcb2c019820fd1e60f119ff8", "filename": "tests/ui/coercion/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoercion-slice.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n-    //~| expected `&[i32]`, found array `[{integer}; 1]`\n+    //~| expected `&[i32]`, found `[{integer}; 1]`\n }"}, {"sha": "c7b856a57ebc9516f01c40fa6a8982cb8ac02508", "filename": "tests/ui/coercion/coercion-slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoercion-slice.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let _: &[i32] = [0];\n    |            ------   ^^^\n    |            |        |\n-   |            |        expected `&[i32]`, found array `[{integer}; 1]`\n+   |            |        expected `&[i32]`, found `[{integer}; 1]`\n    |            |        help: consider borrowing here: `&[0]`\n    |            expected due to this\n "}, {"sha": "f632a53f264e027bbb5018662e3281fe1c7b1979", "filename": "tests/ui/compare-method/bad-self-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcompare-method%2Fbad-self-type.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0053]: method `poll` has an incompatible type for trait\n LL |     fn poll(self, _: &mut Context<'_>) -> Poll<()> {\n    |             ^^^^\n    |             |\n-   |             expected struct `Pin`, found struct `MyFuture`\n+   |             expected `Pin<&mut MyFuture>`, found `MyFuture`\n    |             help: change the self-receiver type to match the trait: `self: Pin<&mut MyFuture>`\n    |\n    = note: expected signature `fn(Pin<&mut MyFuture>, &mut Context<'_>) -> Poll<_>`\n@@ -16,7 +16,7 @@ error[E0053]: method `foo` has an incompatible type for trait\n LL |     fn foo(self: Box<Self>) {}\n    |            ------^^^^^^^^^\n    |            |     |\n-   |            |     expected struct `MyFuture`, found struct `Box`\n+   |            |     expected `MyFuture`, found `Box<MyFuture>`\n    |            help: change the self-receiver type to match the trait: `self`\n    |\n note: type in trait\n@@ -31,7 +31,7 @@ error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/bad-self-type.rs:24:18\n    |\n LL |     fn bar(self) {}\n-   |                  ^ expected enum `Option`, found `()`\n+   |                  ^ expected `Option<()>`, found `()`\n    |\n note: type in trait\n   --> $DIR/bad-self-type.rs:18:21"}, {"sha": "34debb6831734568330e7b6d8ccfaa32ae753e3f", "filename": "tests/ui/confuse-field-and-method/issue-33784.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `closure` found for reference `&Obj<[closure@issue-33784.rs:25:43]>` in the current scope\n+error[E0599]: no method named `closure` found for reference `&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:45]>` in the current scope\n   --> $DIR/issue-33784.rs:27:7\n    |\n LL |     p.closure();\n@@ -9,7 +9,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (p.closure)();\n    |     +         +\n \n-error[E0599]: no method named `fn_ptr` found for reference `&&Obj<[closure@issue-33784.rs:25:43]>` in the current scope\n+error[E0599]: no method named `fn_ptr` found for reference `&&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:45]>` in the current scope\n   --> $DIR/issue-33784.rs:29:7\n    |\n LL |     q.fn_ptr();"}, {"sha": "9c4f0bc950b2dba0add854d123d752e82752ee5a", "filename": "tests/ui/const-generics/defaults/mismatch.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatch.rs:7:26\n    |\n LL |     let e: Example<13> = ();\n-   |            -----------   ^^ expected struct `Example`, found `()`\n+   |            -----------   ^^ expected `Example`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatch.rs:10:32\n    |\n LL |     let e: Example2<u32, 13> = ();\n-   |            -----------------   ^^ expected struct `Example2`, found `()`\n+   |            -----------------   ^^ expected `Example2`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatch.rs:13:32\n    |\n LL |     let e: Example3<13, u32> = ();\n-   |            -----------------   ^^ expected struct `Example3`, found `()`\n+   |            -----------------   ^^ expected `Example3`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatch.rs:16:26\n    |\n LL |     let e: Example3<7> = ();\n-   |            -----------   ^^ expected struct `Example3`, found `()`\n+   |            -----------   ^^ expected `Example3<7>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatch.rs:19:26\n    |\n LL |     let e: Example4<7> = ();\n-   |            -----------   ^^ expected struct `Example4`, found `()`\n+   |            -----------   ^^ expected `Example4<7>`, found `()`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "511ae58a1dcdd1408893b006b887bd5342208f89", "filename": "tests/ui/const-generics/generic_const_exprs/issue-79518-default_trait_method_normalization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-79518-default_trait_method_normalization.rs:16:32\n    |\n LL |         Self::AssocInstance == [(); std::mem::size_of::<Self::Assoc>()];\n-   |         -------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found array `[(); std::mem::size_of::<Self::Assoc>()]`\n+   |         -------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `[(); std::mem::size_of::<Self::Assoc>()]`\n    |         |\n    |         expected because this is `<Self as Foo>::Assoc`\n    |"}, {"sha": "8879aec35e5994bf12f8b0363ab5a4f9bc30fc7f", "filename": "tests/ui/const-generics/issues/issue-67945-1.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ LL | struct Bug<S> {\n    |            - this type parameter\n ...\n LL |         let x: S = MaybeUninit::uninit();\n-   |                -   ^^^^^^^^^^^^^^^^^^^^^ expected type parameter `S`, found union `MaybeUninit`\n+   |                -   ^^^^^^^^^^^^^^^^^^^^^ expected type parameter `S`, found `MaybeUninit<_>`\n    |                |\n    |                expected due to this\n    |"}, {"sha": "b28ae8f7e7101480651342078ed330458f4da7dc", "filename": "tests/ui/const-generics/type_mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/type_mismatch.rs:5:26\n    |\n LL | fn bar<const N: u8>() -> [u8; N] {}\n-   |    ---                   ^^^^^^^ expected array `[u8; N]`, found `()`\n+   |    ---                   ^^^^^^^ expected `[u8; N]`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "5f45550a6279633d319357f64a90f69bbd81ee13", "filename": "tests/ui/const-generics/type_not_in_scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/type_not_in_scope.rs:7:33\n    |\n LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n-   |    ----                         ^^^^^^^ expected array `[u8; N]`, found `()`\n+   |    ----                         ^^^^^^^ expected `[u8; N]`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "13cd5d17d4127ab89fd31917ef437b12f374c041", "filename": "tests/ui/const-generics/types-mismatch-const-args.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:16:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A<'_, u16, 2, 3>`, found `A<'_, u32, 2, 3>`\n    |            |\n    |            expected due to this\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:18:41\n    |\n LL |     let _: A<'a, u16, {4u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A<'_, u16, 4, 3>`, found `A<'_, u32, 2, 3>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "cae3adfa128d08c338fb3fe54017b49c119a7df7", "filename": "tests/ui/const-generics/types-mismatch-const-args.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:16:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A<'_, u16, 2, 3>`, found `A<'_, u32, 2, 3>`\n    |            |\n    |            expected due to this\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:18:41\n    |\n LL |     let _: A<'a, u16, {4u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A<'_, u16, 4, 3>`, found `A<'_, u32, 2, 3>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "1667c77d124c5f3e3675cd32c46b8237a27f2577", "filename": "tests/ui/consts/const-eval/const-eval-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -8,7 +8,7 @@ const CONSTANT: S = S(0);\n enum E {\n     V = CONSTANT,\n     //~^ ERROR mismatched types\n-    //~| expected `isize`, found struct `S`\n+    //~| expected `isize`, found `S`\n }\n \n fn main() {}"}, {"sha": "fe33ad4905a5cc261d4a5e3d613c8e2dd2a227d5", "filename": "tests/ui/consts/const-eval/const-eval-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-eval-span.rs:9:9\n    |\n LL |     V = CONSTANT,\n-   |         ^^^^^^^^ expected `isize`, found struct `S`\n+   |         ^^^^^^^^ expected `isize`, found `S`\n \n error: aborting due to previous error\n "}, {"sha": "18f4f59d3785ceb4b3a25b34a551871a94831e51", "filename": "tests/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@\n \n const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n-//~| expected tuple, found `usize`\n+//~| expected `(usize,)`, found `usize`\n const ARR: [i32; TUP.0] = [];\n //~^ constant\n "}, {"sha": "65f0520f8a46ee19f747d3fd20d08246a0912173", "filename": "tests/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-tup-index-span.rs:3:23\n    |\n LL | const TUP: (usize,) = 5usize << 64;\n-   |                       ^^^^^^^^^^^^ expected tuple, found `usize`\n+   |                       ^^^^^^^^^^^^ expected `(usize,)`, found `usize`\n    |\n    = note: expected tuple `(usize,)`\n                found type `usize`"}, {"sha": "b6a1725076bc63cf3a8599fa1ce182d1629e065e", "filename": "tests/ui/consts/nested_erroneous_ctfe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconsts%2Fnested_erroneous_ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fconsts%2Fnested_erroneous_ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fnested_erroneous_ctfe.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/nested_erroneous_ctfe.rs:2:16\n    |\n LL |     [9; || [9; []]];\n-   |                ^^ expected `usize`, found array of 0 elements\n+   |                ^^ expected `usize`, found `[_; 0]`\n    |\n    = note: expected type `usize`\n              found array `[_; 0]`"}, {"sha": "4f5af106613f634d7fb6f2d3b1c734d8efb64945", "filename": "tests/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/cross-borrow-trait.rs:10:26\n    |\n LL |     let _y: &dyn Trait = x;\n-   |             ----------   ^ expected `&dyn Trait`, found struct `Box`\n+   |             ----------   ^ expected `&dyn Trait`, found `Box<dyn Trait>`\n    |             |\n    |             expected due to this\n    |"}, {"sha": "b5b79ed3771c32f3b6c965631e36b83c63a7ac5e", "filename": "tests/ui/deref-patterns/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fderef-patterns%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fderef-patterns%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef-patterns%2Fgate.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match String::new() {\n    |           ------------- this expression has type `String`\n LL |         \"\" | _ => {}\n-   |         ^^ expected struct `String`, found `&str`\n+   |         ^^ expected `String`, found `&str`\n \n error: aborting due to previous error\n "}, {"sha": "38d201888272708725f605e61ca94a3d5dced661", "filename": "tests/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdestructure-trait-ref.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     let &&x = &1isize as &dyn T;\n    |          ^^   ----------------- this expression has type `&dyn T`\n    |          |\n-   |          expected trait object `dyn T`, found reference\n+   |          expected `dyn T`, found `&_`\n    |\n    = note: expected trait object `dyn T`\n                  found reference `&_`\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n LL |     let &&&x = &(&1isize as &dyn T);\n    |           ^^   -------------------- this expression has type `&&dyn T`\n    |           |\n-   |           expected trait object `dyn T`, found reference\n+   |           expected `dyn T`, found `&_`\n    |\n    = note: expected trait object `dyn T`\n                  found reference `&_`\n@@ -54,7 +54,7 @@ error[E0308]: mismatched types\n LL |     let box box x = Box::new(1isize) as Box<dyn T>;\n    |             ^^^^^   ------------------------------ this expression has type `Box<dyn T>`\n    |             |\n-   |             expected trait object `dyn T`, found struct `Box`\n+   |             expected `dyn T`, found `Box<_>`\n    |\n    = note: expected trait object `dyn T`\n                     found struct `Box<_>`"}, {"sha": "b285ee1f30482125dc8b0e461592338e76e64fb8", "filename": "tests/ui/destructuring-assignment/default-match-bindings-forbidden.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     (x, y) = &(1, 2);\n    |     ^^^^^^   ------- this expression has type `&({integer}, {integer})`\n    |     |\n-   |     expected reference, found tuple\n+   |     expected `&({integer}, {integer})`, found `(_, _)`\n    |\n    = note: expected reference `&({integer}, {integer})`\n                   found tuple `(_, _)`"}, {"sha": "20b018b9f77212b7cfecb47be39ac3666929dc82", "filename": "tests/ui/diagnostic-width/long-E0308.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -16,7 +16,7 @@ LL |  |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok...\n LL |  |             Ok(\"\")\n LL |  |         ))))))))))))))))))))))))))))))\n LL |  |     ))))))))))))))))))))))))))))));\n-   |  |__________________________________^ expected struct `Atype`, found enum `Result`\n+   |  |__________________________________^ expected `Atype<Btype<..., ...>, ...>`, found `Result<Result<..., ...>, ...>`\n    |\n    = note: expected struct `Atype<Btype<..., ...>, ...>`\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n@@ -32,7 +32,7 @@ LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n LL | |             Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n LL | |         ))))))))))))))))))))))))))))))\n LL | |     ))))))))))))))))))))))));\n-   | |____________________________^ expected enum `Option`, found enum `Result`\n+   | |____________________________^ expected `Option<Result<..., ...>>`, found `Result<Result<..., ...>, ...>`\n    |\n    = note: expected enum `Option<Result<..., ...>>`\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n@@ -50,7 +50,7 @@ LL | |           Atype<\n ...  |\n LL | |       i32\n LL | |     > = ();\n-   | |     -   ^^ expected struct `Atype`, found `()`\n+   | |     -   ^^ expected `Atype<Btype<..., ...>, ...>`, found `()`\n    | |_____|\n    |       expected due to this\n    |\n@@ -69,7 +69,7 @@ LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n LL | |             Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n LL | |         ))))))))))))))))))))))))))))))\n LL | |     ))))))))))))))))))))))));\n-   | |____________________________^ expected `()`, found enum `Result`\n+   | |____________________________^ expected `()`, found `Result<Result<..., ...>, ...>`\n    |\n    = note: expected unit type `()`\n                    found enum `Result<Result<..., ...>, ...>`"}, {"sha": "a7ec192592e0d4d0deba2e4977737b38fbb8c433", "filename": "tests/ui/did_you_mean/brackets-to-braces-single-element.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdid_you_mean%2Fbrackets-to-braces-single-element.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdid_you_mean%2Fbrackets-to-braces-single-element.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fbrackets-to-braces-single-element.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/brackets-to-braces-single-element.rs:1:24\n    |\n LL | const A: [&str; 1] = { \"hello\" };\n-   |                        ^^^^^^^ expected array `[&'static str; 1]`, found `&str`\n+   |                        ^^^^^^^ expected `[&str; 1]`, found `&str`\n    |\n help: to create an array, use square brackets instead of curly braces\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/brackets-to-braces-single-element.rs:4:19\n    |\n LL | const B: &[u32] = &{ 1 };\n-   |                   ^^^^^^ expected slice `[u32]`, found integer\n+   |                   ^^^^^^ expected `&[u32]`, found `&{integer}`\n    |\n    = note: expected reference `&'static [u32]`\n               found reference `&{integer}`\n@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n   --> $DIR/brackets-to-braces-single-element.rs:7:27\n    |\n LL | const C: &&[u32; 1] = &&{ 1 };\n-   |                           ^ expected array `[u32; 1]`, found integer\n+   |                           ^ expected `[u32; 1]`, found integer\n    |\n help: to create an array, use square brackets instead of curly braces\n    |"}, {"sha": "5e48871bb01bb840db6eacba8f7320b214e81646", "filename": "tests/ui/did_you_mean/compatible-variants-in-pat.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match f {\n    |           - this expression has type `Foo`\n LL |         Bar { x } => {\n-   |         ^^^^^^^^^ expected enum `Foo`, found struct `Bar`\n+   |         ^^^^^^^^^ expected `Foo`, found `Bar`\n    |\n help: try wrapping the pattern in `Foo::Bar`\n    |\n@@ -22,7 +22,7 @@ LL |     match s {\n LL |         S => {\n    |         ^\n    |         |\n-   |         expected enum `Option`, found struct `S`\n+   |         expected `Option<S>`, found `S`\n    |         `S` is interpreted as a unit struct, not a new binding\n    |\n    = note: expected enum `Option<S>`\n@@ -47,7 +47,7 @@ LL |     match s {\n LL |         S => {\n    |         ^\n    |         |\n-   |         expected enum `Result`, found struct `S`\n+   |         expected `Result<S, S>`, found `S`\n    |         `S` is interpreted as a unit struct, not a new binding\n    |\n    = note: expected enum `Result<S, S>`"}, {"sha": "7b88d93ead112bd21905a8c4de5660626d663f56", "filename": "tests/ui/did_you_mean/compatible-variants.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ LL | /     while false {\n LL | |\n LL | |         f();\n LL | |     }\n-   | |_____^ expected enum `Option`, found `()`\n+   | |_____^ expected `Option<()>`, found `()`\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n LL | fn b() -> Result<(), ()> {\n    |           -------------- expected `Result<(), ()>` because of return type\n LL |     f()\n-   |     ^^^ expected enum `Result`, found `()`\n+   |     ^^^ expected `Result<(), ()>`, found `()`\n    |\n    = note:   expected enum `Result<(), ()>`\n            found unit type `()`\n@@ -45,7 +45,7 @@ LL | /     for _ in [1, 2] {\n LL | |\n LL | |         f();\n LL | |     }\n-   | |_____^ expected enum `Option`, found `()`\n+   | |_____^ expected `Option<()>`, found `()`\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n@@ -62,7 +62,7 @@ error[E0308]: `?` operator has incompatible types\n   --> $DIR/compatible-variants.rs:35:5\n    |\n LL |     c()?\n-   |     ^^^^ expected enum `Option`, found `()`\n+   |     ^^^^ expected `Option<()>`, found `()`\n    |\n    = note: `?` operator cannot convert from `()` to `Option<()>`\n    = note:   expected enum `Option<()>`\n@@ -85,7 +85,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:42:25\n    |\n LL |     let _: Option<()> = while false {};\n-   |            ----------   ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |            ----------   ^^^^^^^^^^^^^^ expected `Option<()>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -100,7 +100,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:46:9\n    |\n LL |         while false {}\n-   |         ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |         ^^^^^^^^^^^^^^ expected `Option<()>`, found `()`\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n@@ -117,7 +117,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:50:31\n    |\n LL |     let _: Result<i32, i32> = 1;\n-   |            ----------------   ^ expected enum `Result`, found integer\n+   |            ----------------   ^ expected `Result<i32, i32>`, found integer\n    |            |\n    |            expected due to this\n    |\n@@ -134,7 +134,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:53:26\n    |\n LL |     let _: Option<i32> = 1;\n-   |            -----------   ^ expected enum `Option`, found integer\n+   |            -----------   ^ expected `Option<i32>`, found integer\n    |            |\n    |            expected due to this\n    |\n@@ -149,7 +149,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:56:28\n    |\n LL |     let _: Hey<i32, i32> = 1;\n-   |            -------------   ^ expected enum `Hey`, found integer\n+   |            -------------   ^ expected `Hey<i32, i32>`, found integer\n    |            |\n    |            expected due to this\n    |\n@@ -166,7 +166,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:59:29\n    |\n LL |     let _: Hey<i32, bool> = false;\n-   |            --------------   ^^^^^ expected enum `Hey`, found `bool`\n+   |            --------------   ^^^^^ expected `Hey<i32, bool>`, found `bool`\n    |            |\n    |            expected due to this\n    |\n@@ -181,7 +181,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:63:19\n    |\n LL |     let _ = Foo { bar };\n-   |                   ^^^ expected enum `Option`, found `i32`\n+   |                   ^^^ expected `Option<i32>`, found `i32`\n    |\n    = note: expected enum `Option<i32>`\n               found type `i32`\n@@ -194,7 +194,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:80:16\n    |\n LL |     let a: A = B::Fst;\n-   |            -   ^^^^^^ expected enum `A`, found enum `B`\n+   |            -   ^^^^^^ expected `A`, found `B`\n    |            |\n    |            expected due to this\n    |\n@@ -207,7 +207,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:86:17\n    |\n LL |     let a: A2 = B::Fst;\n-   |            --   ^^^^^^ expected struct `A2`, found enum `B`\n+   |            --   ^^^^^^ expected `A2`, found `B`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "3819a5a187f97a8d0f4f725bfa5855d3d220a246", "filename": "tests/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:11:43\n    |\n LL |     this_function_expects_a_double_option(n);\n-   |     ------------------------------------- ^ expected enum `DoubleOption`, found `usize`\n+   |     ------------------------------------- ^ expected `DoubleOption<_>`, found `usize`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:27:33\n    |\n LL |     let _c = Context { wrapper: Payload{} };\n-   |                                 ^^^^^^^^^ expected struct `Wrapper`, found struct `Payload`\n+   |                                 ^^^^^^^^^ expected `Wrapper`, found `Payload`\n    |\n help: try wrapping the expression in `Wrapper`\n    |"}, {"sha": "32fb628c4707be78aeac0a2d4ad0bf714dd3dc3c", "filename": "tests/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/recursion_limit_deref.rs:51:22\n    |\n LL |     let x: &Bottom = &t;\n-   |            -------   ^^ expected struct `Bottom`, found struct `Top`\n+   |            -------   ^^ expected `&Bottom`, found `&Top`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "7d8293018d27b7e80f557f092a128dbbd82c6256", "filename": "tests/ui/disambiguate-identical-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdisambiguate-identical-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdisambiguate-identical-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdisambiguate-identical-names.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/disambiguate-identical-names.rs:13:10\n    |\n LL |     test(&v);\n-   |     ---- ^^ expected struct `Vec`, found struct `HashMap`\n+   |     ---- ^^ expected `&Vec<Vec<u32>>`, found `&HashMap<u8, u8>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "f5b5a4cccad2c0196705264176826c331c0d06a0", "filename": "tests/ui/diverging-fn-tail-35849.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdiverging-fn-tail-35849.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdiverging-fn-tail-35849.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging-fn-tail-35849.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ LL | fn assert_sizeof() -> ! {\n    |                       - expected `!` because of return type\n LL |     unsafe {\n LL |         ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found array `[u8; 8]`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found `[u8; 8]`\n    |\n    = note: expected type `!`\n              found array `[u8; 8]`"}, {"sha": "d199864d99c2d280be5ec568500b714f1f2d65cd", "filename": "tests/ui/dst/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-assign-3.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -32,7 +32,7 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected trait object `dyn ToBar`, found struct `Bar1`\n+    //~| expected `dyn ToBar`, found `Bar1`\n     //~| expected trait object `dyn ToBar`\n     //~| found struct `Bar1`\n     //~| ERROR the size for values of type"}, {"sha": "6dd3434fd21bef830e3bbf721f34ff32d73f7eff", "filename": "tests/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign-3.rs:33:12\n    |\n LL |     f5.2 = Bar1 {f: 36};\n-   |     ----   ^^^^^^^^^^^^ expected trait object `dyn ToBar`, found struct `Bar1`\n+   |     ----   ^^^^^^^^^^^^ expected `dyn ToBar`, found `Bar1`\n    |     |\n    |     expected due to the type of this binding\n    |"}, {"sha": "c55fb2c3e570993ac7ccc71290e175704712cdf5", "filename": "tests/ui/dst/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-assign.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected trait object `dyn ToBar`, found struct `Bar1`\n+    //~| expected `dyn ToBar`, found `Bar1`\n     //~| expected trait object `dyn ToBar`\n     //~| found struct `Bar1`\n     //~| ERROR the size for values of type"}, {"sha": "d8d1057876f4f967b78e60bc8adc32d52f33a530", "filename": "tests/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign.rs:35:14\n    |\n LL |     f5.ptr = Bar1 {f: 36};\n-   |     ------   ^^^^^^^^^^^^ expected trait object `dyn ToBar`, found struct `Bar1`\n+   |     ------   ^^^^^^^^^^^^ expected `dyn ToBar`, found `Bar1`\n    |     |\n    |     expected due to the type of this binding\n    |"}, {"sha": "ff77bd4cef88f3d714767f134dff59bdbe27c7a1", "filename": "tests/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:16:29\n    |\n LL |     let f3: &Fat<[usize]> = f2;\n-   |             -------------   ^^ expected slice `[usize]`, found array `[isize; 3]`\n+   |             -------------   ^^ expected `&Fat<[usize]>`, found `&Fat<[isize; 3]>`\n    |             |\n    |             expected due to this\n    |\n@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:28:27\n    |\n LL |     let f3: &([usize],) = f2;\n-   |             -----------   ^^ expected slice `[usize]`, found array `[isize; 3]`\n+   |             -----------   ^^ expected `&([usize],)`, found `&([isize; 3],)`\n    |             |\n    |             expected due to this\n    |"}, {"sha": "9f297915e58c9b17596ca9fc11aff97432c12520", "filename": "tests/ui/dst/dst-bad-coerce4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-coerce4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-coerce4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-coerce4.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -11,15 +11,15 @@ pub fn main() {\n     let f1: &Fat<[isize]> = &Fat { ptr: [1, 2, 3] };\n     let f2: &Fat<[isize; 3]> = f1;\n     //~^ ERROR mismatched types\n-    //~| expected array `[isize; 3]`, found slice `[isize]`\n+    //~| expected `&Fat<[isize; 3]>`, found `&Fat<[isize]>`\n     //~| expected reference `&Fat<[isize; 3]>`\n     //~| found reference `&Fat<[isize]>`\n \n     // Tuple with a vec of isizes.\n     let f1: &([isize],) = &([1, 2, 3],);\n     let f2: &([isize; 3],) = f1;\n     //~^ ERROR mismatched types\n-    //~| expected array `[isize; 3]`, found slice `[isize]`\n+    //~| expected `&([isize; 3],)`, found `&([isize],)`\n     //~| expected reference `&([isize; 3],)`\n     //~| found reference `&([isize],)`\n }"}, {"sha": "46e7dba817c846809647d2a3a6644a1bdb7ecf78", "filename": "tests/ui/dst/dst-bad-coerce4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-coerce4.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:12:32\n    |\n LL |     let f2: &Fat<[isize; 3]> = f1;\n-   |             ----------------   ^^ expected array `[isize; 3]`, found slice `[isize]`\n+   |             ----------------   ^^ expected `&Fat<[isize; 3]>`, found `&Fat<[isize]>`\n    |             |\n    |             expected due to this\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:20:30\n    |\n LL |     let f2: &([isize; 3],) = f1;\n-   |             --------------   ^^ expected array `[isize; 3]`, found slice `[isize]`\n+   |             --------------   ^^ expected `&([isize; 3],)`, found `&([isize],)`\n    |             |\n    |             expected due to this\n    |"}, {"sha": "66e1b9a092c364ffbe292a14a598aa0c45448123", "filename": "tests/ui/dyn-star/no-implicit-dyn-star.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/no-implicit-dyn-star.rs:6:48\n    |\n LL |     dyn_star_foreign::require_dyn_star_display(1usize);\n-   |     ------------------------------------------ ^^^^^^ expected trait object `dyn Display`, found `usize`\n+   |     ------------------------------------------ ^^^^^^ expected `dyn Display`, found `usize`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "4604ebeaa8b987f8b01cd1a75b9a1d5349dadab9", "filename": "tests/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -100,7 +100,7 @@ help: a unit struct with a similar name exists\n LL |     let xe1 = XEmpty2();\n    |               ~~~~~~~\n \n-error[E0599]: no variant or associated item named `Empty3` found for enum `XE` in the current scope\n+error[E0599]: no variant or associated item named `Empty3` found for enum `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:25:19\n    |\n LL |     let xe3 = XE::Empty3;\n@@ -109,7 +109,7 @@ LL |     let xe3 = XE::Empty3;\n    |                   variant or associated item not found in `XE`\n    |                   help: there is a variant with a similar name: `XEmpty3`\n \n-error[E0599]: no variant or associated item named `Empty3` found for enum `XE` in the current scope\n+error[E0599]: no variant or associated item named `Empty3` found for enum `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:26:19\n    |\n LL |     let xe3 = XE::Empty3();"}, {"sha": "75c3ab13caccc681b9658feedeca20dac9e58032", "filename": "tests/ui/empty/issue-37026.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fempty%2Fissue-37026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fempty%2Fissue-37026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty%2Fissue-37026.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL |     let empty_struct::XEmpty2 = ();\n    |         ^^^^^^^^^^^^^^^^^^^^^   -- this expression has type `()`\n    |         |\n-   |         expected `()`, found struct `XEmpty2`\n+   |         expected `()`, found `XEmpty2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-37026.rs:7:9\n    |\n LL |     let empty_struct::XEmpty6(..) = ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^   -- this expression has type `()`\n    |         |\n-   |         expected `()`, found struct `XEmpty6`\n+   |         expected `()`, found `XEmpty6`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "678502ba328894cdd7033a02a02ae830105b60e8", "filename": "tests/ui/error-codes/E0071.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ferror-codes%2FE0071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ferror-codes%2FE0071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0071.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -3,5 +3,5 @@ type FooAlias = Foo;\n \n fn main() {\n     let u = FooAlias { value: 0 };\n-    //~^ ERROR expected struct, variant or union type, found enum `Foo` [E0071]\n+    //~^ ERROR expected struct, variant or union type, found `Foo` [E0071]\n }"}, {"sha": "7bd4ddaf26be24dc44e7aae664e0855be0c6b733", "filename": "tests/ui/error-codes/E0071.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ferror-codes%2FE0071.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ferror-codes%2FE0071.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0071.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,4 +1,4 @@\n-error[E0071]: expected struct, variant or union type, found enum `Foo`\n+error[E0071]: expected struct, variant or union type, found `Foo`\n   --> $DIR/E0071.rs:5:13\n    |\n LL |     let u = FooAlias { value: 0 };"}, {"sha": "3e6dc5cefadf2e4275ece0df6e215d06c11e26e6", "filename": "tests/ui/extern/extern-types-distinct-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern%2Fextern-types-distinct-types.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,7 +9,7 @@ LL |     type B;\n LL | fn foo(r: &A) -> &B {\n    |                  -- expected `&B` because of return type\n LL |     r\n-   |     ^ expected extern type `B`, found extern type `A`\n+   |     ^ expected `&B`, found `&A`\n    |\n    = note: expected reference `&B`\n               found reference `&A`"}, {"sha": "d2ad372dfbc5fac424c45ab65f4eb0aec2516e22", "filename": "tests/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -95,7 +95,7 @@ LL | fn unsized_local() where Dst<dyn A>: Sized {\n    |                          ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<(dyn A + 'static)>`, the trait `Sized` is not implemented for `(dyn A + 'static)`\n-note: required because it appears within the type `Dst<(dyn A + 'static)>`\n+note: required because it appears within the type `Dst<dyn A>`\n   --> $DIR/feature-gate-trivial_bounds.rs:48:8\n    |\n LL | struct Dst<X: ?Sized> {"}, {"sha": "d716bbe51affc9ec3953c4fa819afbb90c5ac113", "filename": "tests/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -302,7 +302,7 @@ error[E0308]: mismatched types\n LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n    |                                ^^^\n    |                                |\n-   |                                expected `usize`, found floating-point number\n+   |                                expected `&usize`, found `&{float}`\n    |                                arguments to this function are incorrect\n    |\n    = note: expected reference `&usize`\n@@ -317,7 +317,7 @@ error[E0308]: mismatched types\n LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n    |                                   ^^^\n    |                                   |\n-   |                                   expected `usize`, found floating-point number\n+   |                                   expected `&usize`, found `&{float}`\n    |                                   arguments to this function are incorrect\n    |\n    = note: expected reference `&usize`"}, {"sha": "c094a34b207d9219b10f0570dc7f107af4400bba", "filename": "tests/ui/fn/fn-item-type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-item-type.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -34,8 +34,7 @@ fn main() {\n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n     //~| found fn item `fn(_) -> _ {bar::<Vec<u8>>}`\n-    //~| expected struct `String`, found struct `Vec`\n-    //~| different fn items have unique types, even if their signatures are the same\n+    //~| expected `String`, found `Vec<u8>`\n \n     // Make sure we distinguish between trait methods correctly.\n     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);"}, {"sha": "da90b8b81c8551b2dc0d225beb5dea0e1dd76930", "filename": "tests/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-item-type.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:34:23\n    |\n LL |     eq(bar::<String>, bar::<Vec<u8>>);\n-   |     --                ^^^^^^^^^^^^^^ expected struct `String`, found struct `Vec`\n+   |     --                ^^^^^^^^^^^^^^ expected `String`, found `Vec<u8>`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -53,7 +53,7 @@ LL | fn eq<T>(x: T, y: T) {}\n    = help: consider casting both fn items to fn pointers using `as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:41:26\n+  --> $DIR/fn-item-type.rs:40:26\n    |\n LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n    |     --                   ^^^^^^^^^^^^^^^^^ expected `u8`, found `u16`\n@@ -71,7 +71,7 @@ LL | fn eq<T>(x: T, y: T) {}\n    = help: consider casting both fn items to fn pointers using `as fn()`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:46:19\n+  --> $DIR/fn-item-type.rs:45:19\n    |\n LL |     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n    |     --            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found fn pointer"}, {"sha": "a674babcb324be2dffe063bb60eaceb57a95882a", "filename": "tests/ui/fn/fn-pointer-mismatch.stderr", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/fn-pointer-mismatch.rs:11:43\n    |\n LL |     let g = if n % 2 == 0 { &foo } else { &bar };\n-   |                             ----          ^^^^ expected fn item, found a different fn item\n+   |                             ----          ^^^^ expected `&fn(u32) -> u32 {foo}`, found `&fn(u32) -> u32 {bar}`\n    |                             |\n    |                             expected because of this\n    |\n@@ -43,41 +43,48 @@ error[E0308]: mismatched types\n   --> $DIR/fn-pointer-mismatch.rs:36:29\n    |\n LL |     let c: fn(u32) -> u32 = &foo;\n-   |            --------------   ^^^^\n-   |            |                |\n-   |            |                expected fn pointer, found reference\n-   |            |                help: consider removing the reference: `foo`\n+   |            --------------   ^^^^ expected fn pointer, found `&fn(u32) -> u32 {foo}`\n+   |            |\n    |            expected due to this\n    |\n    = note: expected fn pointer `fn(u32) -> u32`\n                found reference `&fn(u32) -> u32 {foo}`\n+help: consider removing the reference\n+   |\n+LL |     let c: fn(u32) -> u32 = foo;\n+   |                             ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/fn-pointer-mismatch.rs:42:30\n    |\n LL |     let d: &fn(u32) -> u32 = foo;\n-   |            ---------------   ^^^\n-   |            |                 |\n-   |            |                 expected `&fn(u32) -> u32`, found fn item\n-   |            |                 help: consider using a reference: `&foo`\n+   |            ---------------   ^^^ expected `&fn(u32) -> u32`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&fn(u32) -> u32`\n                 found fn item `fn(u32) -> u32 {foo}`\n+help: consider using a reference\n+   |\n+LL |     let d: &fn(u32) -> u32 = &foo;\n+   |                              ~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/fn-pointer-mismatch.rs:48:30\n    |\n LL |     let e: &fn(u32) -> u32 = &foo;\n-   |            ---------------   ^^^^\n-   |            |                 |\n-   |            |                 expected fn pointer, found fn item\n-   |            |                 help: consider casting to a fn pointer: `&(foo as fn(u32) -> u32)`\n+   |            ---------------   ^^^^ expected `&fn(u32) -> u32`, found `&fn(u32) -> u32 {foo}`\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&fn(u32) -> u32`\n               found reference `&fn(u32) -> u32 {foo}`\n    = note: fn items are distinct from fn pointers\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n+help: consider casting to a fn pointer\n+   |\n+LL |     let e: &fn(u32) -> u32 = &(foo as fn(u32) -> u32);\n+   |                              ~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "45d543bda5323ffe0176335e593bb022760b7fbf", "filename": "tests/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:6:17\n    |\n LL |     let _: () = Box::new(|_: isize| {}) as Box<dyn FnOnce(isize)>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Box<dyn FnOnce(isize)>`\n    |            |\n    |            expected due to this\n    |\n@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n    |\n LL |     let _: () = Box::new(|_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Box<dyn Fn(isize, isize)>`\n    |            |\n    |            expected due to this\n    |\n@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17\n    |\n LL |     let _: () = Box::new(|| -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Box<dyn FnMut() -> isize>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "12ff113c913471fc6b7fd77fb34c2e8dd9295059", "filename": "tests/ui/fn/signature-error-reporting-under-verbose.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,7 +9,8 @@ fn needs_ptr(_: fn(i32, u32)) {}\n fn main() {\n     needs_ptr(foo);\n     //~^ ERROR mismatched types\n-    //~| NOTE expected `u32`, found `i32`\n+    //~| NOTE expected fn pointer, found fn item\n     //~| NOTE expected fn pointer `fn(i32, u32)`\n     //~| NOTE arguments to this function are incorrect\n+    //~| NOTE when the arguments and return types match, functions can be coerced to function pointers\n }"}, {"sha": "f4498db7259e37f07c277f923e7cc56130fb4d57", "filename": "tests/ui/fn/signature-error-reporting-under-verbose.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,12 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/signature-error-reporting-under-verbose.rs:10:15\n    |\n LL |     needs_ptr(foo);\n-   |     --------- ^^^ expected `u32`, found `i32`\n+   |     --------- ^^^ expected fn pointer, found fn item\n    |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected fn pointer `fn(i32, u32)`\n                  found fn item `fn(i32, i32) {foo}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n note: function defined here\n   --> $DIR/signature-error-reporting-under-verbose.rs:5:4\n    |"}, {"sha": "bbca22ad2e69d3c63ae3e4cb7becbdf9d3d700cf", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     x = 5;\n     //~^ ERROR mismatched types\n     //~| NOTE expected enum `Option<usize>`\n-    //~| NOTE expected enum `Option`, found integer\n+    //~| NOTE expected `Option<usize>`, found integer\n }"}, {"sha": "258a8d163936acf71be741df36875e61eb92ba69", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,7 +6,7 @@ LL |     let x:\n LL |         Option<usize>;\n    |         ------------- expected due to this type\n LL |     x = 5;\n-   |         ^ expected enum `Option`, found integer\n+   |         ^ expected `Option<usize>`, found integer\n    |\n    = note: expected enum `Option<usize>`\n               found type `{integer}`"}, {"sha": "f26d3be66303df6d7d75ab40daec9574c54da28b", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -11,7 +11,7 @@ mod y {\n fn bar(x: x::Foo) -> y::Foo {\n     return x;\n     //~^ ERROR mismatched types\n-    //~| expected enum `y::Foo`, found enum `x::Foo`\n+    //~| expected `y::Foo`, found `x::Foo`\n }\n \n fn main() {"}, {"sha": "c7c0846595d5a60b4e1ef265d75ef332ad21cc12", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL | fn bar(x: x::Foo) -> y::Foo {\n    |                      ------ expected `y::Foo` because of return type\n LL |     return x;\n-   |            ^ expected enum `y::Foo`, found enum `x::Foo`\n+   |            ^ expected `y::Foo`, found `x::Foo`\n    |\n-   = note: enum `x::Foo` and enum `y::Foo` have similar names, but are actually distinct types\n-note: enum `x::Foo` is defined in module `crate::x` of the current crate\n+   = note: `x::Foo` and `y::Foo` have similar names, but are actually distinct types\n+note: `x::Foo` is defined in module `crate::x` of the current crate\n   --> $DIR/fully-qualified-type-name2.rs:4:5\n    |\n LL |     pub enum Foo { }\n    |     ^^^^^^^^^^^^\n-note: enum `y::Foo` is defined in module `crate::y` of the current crate\n+note: `y::Foo` is defined in module `crate::y` of the current crate\n   --> $DIR/fully-qualified-type-name2.rs:8:5\n    |\n LL |     pub enum Foo { }"}, {"sha": "41f07bab80966cdf73fe20e7aaef4eba08a8093b", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ fn bar(x: usize) -> Option<usize> {\n     //~^ ERROR mismatched types\n     //~| expected enum `Option<usize>`\n     //~| found type `usize`\n-    //~| expected enum `Option`, found `usize`\n+    //~| expected `Option<usize>`, found `usize`\n }\n \n fn main() {"}, {"sha": "6b312202bfed4f379753efcc7186705000bee685", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn bar(x: usize) -> Option<usize> {\n    |                     ------------- expected `Option<usize>` because of return type\n LL |     return x;\n-   |            ^ expected enum `Option`, found `usize`\n+   |            ^ expected `Option<usize>`, found `usize`\n    |\n    = note: expected enum `Option<usize>`\n               found type `usize`"}, {"sha": "870f1805b58942d5dd793cd4f36f182f1b359c75", "filename": "tests/ui/function-pointer/unsized-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunction-pointer%2Funsized-ret.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -23,7 +23,7 @@ LL |     foo::<for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a), _>(None, (&()\n    |     required by a bound introduced by this call\n    |\n    = help: within `for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a)`, the trait `for<'a> Sized` is not implemented for `(dyn std::fmt::Display + 'a)`\n-   = note: required because it appears within the type `for<'a> fn(&'a ()) -> (dyn Display + 'a)`\n+   = note: required because it appears within the type `fn(&()) -> dyn Display`\n note: required by a bound in `foo`\n   --> $DIR/unsized-ret.rs:5:11\n    |"}, {"sha": "da081eb435584455f42eaba2abf7e3d8d0e726c5", "filename": "tests/ui/functions-closures/fn-help-with-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find value `oops` in this scope\n LL |     let arc = std::sync::Arc::new(oops);\n    |                                   ^^^^ not found in this scope\n \n-error[E0599]: no method named `bar` found for struct `Arc<[closure@fn-help-with-err.rs:18:36]>` in the current scope\n+error[E0599]: no method named `bar` found for struct `Arc<[closure@$DIR/fn-help-with-err.rs:18:36: 18:38]>` in the current scope\n   --> $DIR/fn-help-with-err.rs:19:10\n    |\n LL |     arc2.bar();"}, {"sha": "ef6d896f8afa3148c03a2eb7a3218e14b1a2e9b7", "filename": "tests/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-signature-deduction.rs:14:9\n    |\n LL |         5\n-   |         ^ expected enum `Result`, found integer\n+   |         ^ expected `Result<{integer}, _>`, found integer\n    |\n    = note: expected enum `Result<{integer}, _>`\n               found type `{integer}`\n@@ -22,7 +22,7 @@ error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-\n   --> $DIR/type-mismatch-signature-deduction.rs:5:13\n    |\n LL | fn foo() -> impl Generator<Return = i32> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `i32`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<{integer}, _>`, found `i32`\n    |\n    = note: expected enum `Result<{integer}, _>`\n               found type `i32`"}, {"sha": "3c3ae24dd473094ed225b55e3e67baee7f7fb2ae", "filename": "tests/ui/generic-associated-types/collections-project-default.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,10 +5,11 @@ LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n    |                                     ------------------------------------ expected `<C as Collection<i32>>::Sibling<f32>` because of return type\n ...\n LL |     res\n-   |     ^^^ expected Collection::Sibling, found CollectionFamily::Member\n+   |     ^^^ expected `Collection::Sibling`, found `CollectionFamily::Member`\n    |\n    = note: expected associated type `<C as Collection<i32>>::Sibling<f32>`\n               found associated type `<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>`\n+   = note: an associated type was expected, but a different one was found\n \n error: aborting due to previous error\n "}, {"sha": "3b65b32f45d907fa4ea7e1bb91e1d3c3f2f71dad", "filename": "tests/ui/generic-associated-types/constraint-assoc-type-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/constraint-assoc-type-suggestion.rs:10:23\n    |\n LL |     let b: Vec<i32> = a;\n-   |            --------   ^ expected struct `Vec`, found associated type\n+   |            --------   ^ expected `Vec<i32>`, found associated type\n    |            |\n    |            expected due to this\n    |"}, {"sha": "04184fce921f2a66932abc312e7be4f57defa926", "filename": "tests/ui/generic-associated-types/issue-79422.extended.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -14,11 +14,11 @@ help: add missing lifetime argument\n LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n    |                                            ++++\n \n-error[E0271]: type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == (dyn RefCont<'_, u8> + 'static)`\n+error[E0271]: type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == dyn RefCont<'_, u8>`\n   --> $DIR/issue-79422.rs:44:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == (dyn RefCont<'_, u8> + 'static)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == dyn RefCont<'_, u8>`\n    |\n note: expected this to be `(dyn RefCont<'_, u8> + 'static)`\n   --> $DIR/issue-79422.rs:28:25"}, {"sha": "d60856b8904bb6ec0008bea56318c85186948cd8", "filename": "tests/ui/generics/generic-type-params-name-repr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -12,40 +12,40 @@ fn main() {\n     // Ensure that the printed type doesn't include the default type params...\n     let _: Foo<isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found `()`\n+    //~| expected `Foo<isize>`, found `()`\n     //~| expected struct `Foo<isize>`\n     //~| found unit type `()`\n \n     // ...even when they're present, but the same types as the defaults.\n     let _: Foo<isize, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found `()`\n+    //~| expected `Foo<isize>`, found `()`\n     //~| expected struct `Foo<isize>`\n     //~| found unit type `()`\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `HashMap`, found `()`\n+    //~| expected `HashMap<String, isize>`, found `()`\n     //~| expected struct `HashMap<String, isize>`\n     //~| found unit type `()`\n     let _: HashMap<String, isize, Hash<String>> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `HashMap`, found `()`\n+    //~| expected `HashMap<String, isize>`, found `()`\n     //~| expected struct `HashMap<String, isize>`\n     //~| found unit type `()`\n \n     // But not when there's a different type in between.\n     let _: Foo<A, isize, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found `()`\n+    //~| expected `Foo<A, isize>`, found `()`\n     //~| expected struct `Foo<A, isize>`\n     //~| found unit type `()`\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found `()`\n+    //~| expected `Foo`, found `()`\n     //~| expected struct `Foo`\n     //~| found unit type `()`\n }"}, {"sha": "946f14cc1c6384eb2bddedd502abba9a9dd1d044", "filename": "tests/ui/generics/generic-type-params-name-repr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:13:25\n    |\n LL |     let _: Foo<isize> = ();\n-   |            ----------   ^^ expected struct `Foo`, found `()`\n+   |            ----------   ^^ expected `Foo<isize>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:20:31\n    |\n LL |     let _: Foo<isize, B, C> = ();\n-   |            ----------------   ^^ expected struct `Foo`, found `()`\n+   |            ----------------   ^^ expected `Foo<isize>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:27:37\n    |\n LL |     let _: HashMap<String, isize> = ();\n-   |            ----------------------   ^^ expected struct `HashMap`, found `()`\n+   |            ----------------------   ^^ expected `HashMap<String, isize>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:32:51\n    |\n LL |     let _: HashMap<String, isize, Hash<String>> = ();\n-   |            ------------------------------------   ^^ expected struct `HashMap`, found `()`\n+   |            ------------------------------------   ^^ expected `HashMap<String, isize>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:39:31\n    |\n LL |     let _: Foo<A, isize, C> = ();\n-   |            ----------------   ^^ expected struct `Foo`, found `()`\n+   |            ----------------   ^^ expected `Foo<A, isize>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:46:27\n    |\n LL |     let _: Foo<A, B, C> = ();\n-   |            ------------   ^^ expected struct `Foo`, found `()`\n+   |            ------------   ^^ expected `Foo`, found `()`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "6ce56ba4b7ce5b76d5d82917181b363a34a44029", "filename": "tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99.., _] => {},\n-   |             ^^ expected struct `Range`, found integer\n+   |             ^^ expected `Range<{integer}>`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "6f56ecd4c1c9ca5e9b1f519993f5aa08c30e89d9", "filename": "tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99..] => {},\n-   |             ^^ expected struct `Range`, found integer\n+   |             ^^ expected `Range<{integer}>`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "b9b272c4c7cb62fd4523a822a0efbad301060875", "filename": "tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n-   |            ^ expected struct `Range`, found integer\n+   |            ^ expected `Range<{integer}>`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n@@ -17,7 +17,7 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [..9, 99..100, _] => {},\n    |               ^^  --- this is of type `{integer}`\n    |               |\n-   |               expected struct `Range`, found integer\n+   |               expected `Range<{integer}>`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n@@ -28,7 +28,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n-   |               --  ^^^ expected struct `Range`, found integer\n+   |               --  ^^^ expected `Range<{integer}>`, found integer\n    |               |\n    |               this is of type `{integer}`\n    |"}, {"sha": "43e7f03b8b4ef73195439935ce82107d8f98f557", "filename": "tests/ui/half-open-range-patterns/pat-tuple-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match (0, 1) {\n    |           ------ this expression has type `({integer}, {integer})`\n LL |         (PAT ..) => {}\n-   |          ^^^ expected tuple, found `u8`\n+   |          ^^^ expected `({integer}, {integer})`, found `u8`\n    |\n    = note: expected tuple `({integer}, {integer})`\n                found type `u8`"}, {"sha": "3662cbfb9ba1e982cf74d7a2252bc2ca816c28c7", "filename": "tests/ui/higher-rank-trait-bounds/hang-on-deeply-nested-dyn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -11,9 +11,9 @@ LL | |     ),\n LL | | ) {\n    | |_- expected `&dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn Fn(u32) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a))` because of return type\n LL |       f\n-   |       ^ expected reference, found `u32`\n+   |       ^ expected `&dyn Fn(&dyn Fn(&dyn Fn(&...)))`, found `&dyn Fn(u32)`\n    |\n-   = note: expected reference `&dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a ...) + 'a)) + 'a)) + 'a))`\n+   = note: expected reference `&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&...)))))))))))`\n            the full type name has been written to '$TEST_BUILD_DIR/higher-rank-trait-bounds/hang-on-deeply-nested-dyn/hang-on-deeply-nested-dyn.long-type-hash.txt'\n               found reference `&dyn Fn(u32)`\n "}, {"sha": "4a6399c8f62468da8df6562ddcabec733ae10557", "filename": "tests/ui/higher-rank-trait-bounds/issue-30786.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,3 +1,5 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+\n // rust-lang/rust#30786: the use of `for<'b> &'b mut A: Stream<Item=T`\n // should act as assertion that item does not borrow from its stream;\n // but an earlier buggy rustc allowed `.map(|x: &_| x)` which does"}, {"sha": "6ec34d11a7e9ea8e78ff4c73b6d326bcc07f1407", "filename": "tests/ui/higher-rank-trait-bounds/issue-30786.stderr", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@issue-30786.rs:117:27]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:118:22\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@issue-30786.rs:119:27]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:120:22\n    |\n LL | pub struct Map<S, F> {\n    | --------------------\n@@ -8,19 +8,19 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@issue-30786.rs:117:27]>` due to unsatisfied trait bounds\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@issue-30786.rs:119:27]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:34]>: Stream`\n-      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:34]>: Stream`\n-      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:34]>: Stream`\n-  --> $DIR/issue-30786.rs:96:50\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:119:27: 119:34]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:119:27: 119:34]>: Stream`\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:119:27: 119:34]>: Stream`\n+  --> $DIR/issue-30786.rs:98:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@issue-30786.rs:129:30]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:130:24\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, fn(&u64) -> &u64 {identity::<u64>}>, [closure@issue-30786.rs:131:30]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:132:24\n    |\n LL | pub struct Filter<S, F> {\n    | -----------------------\n@@ -31,11 +31,12 @@ LL | pub struct Filter<S, F> {\n LL |     let count = filter.countx();\n    |                        ^^^^^^ method cannot be called due to unsatisfied trait bounds\n    |\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/higher-rank-trait-bounds/issue-30786/issue-30786.long-type-hash.txt'\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n-      `&'a mut Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n-  --> $DIR/issue-30786.rs:96:50\n+      `&'a mut &Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:131:30: 131:37]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:131:30: 131:37]>: Stream`\n+      `&'a mut Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:131:30: 131:37]>: Stream`\n+  --> $DIR/issue-30786.rs:98:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here"}, {"sha": "86198c3f7fd7945c374da3307fc622547c120a39", "filename": "tests/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `for<'r> <L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+error[E0271]: type mismatch resolving `<L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&u8,)>>::O == <_ as Ty<'r>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:39:9\n    |\n LL |       let v = Unit2.m(\n@@ -10,7 +10,7 @@ LL | |             f: |x| {\n ...  |\n LL | |             },\n LL | |         },\n-   | |_________^ type mismatch resolving `for<'r> <L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+   | |_________^ type mismatch resolving `<L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&u8,)>>::O == <_ as Ty<'r>>::V`\n    |\n note: expected this to be `<_ as Ty<'_>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:21:14\n@@ -42,7 +42,7 @@ LL | |             f: |x| {\n ...  |\n LL | |             },\n LL | |         },\n-   | |_________^ expected struct `Unit3`, found struct `Unit4`\n+   | |_________^ expected `Unit3`, found `Unit4`\n    |\n note: required for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]>` to implement `for<'r> T0<'r, (&'r u8,)>`\n   --> $DIR/issue-62203-hrtb-ice.rs:17:16"}, {"sha": "dc1e40ea560ac1f965b9274e6c985a791cb5adc3", "filename": "tests/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:7:35\n    |\n LL | fn fuz() -> (usize, Trait) { (42, Struct) }\n-   |                                   ^^^^^^ expected trait object `dyn Trait`, found struct `Struct`\n+   |                                   ^^^^^^ expected `dyn Trait`, found `Struct`\n    |\n    = note: expected trait object `(dyn Trait + 'static)`\n                     found struct `Struct`\n@@ -16,14 +16,14 @@ LL | fn fuz() -> (usize, Trait) { (42, Struct) }\n    |             doesn't have a size known at compile-time\n    |\n    = help: within `(usize, (dyn Trait + 'static))`, the trait `Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n+   = note: required because it appears within the type `(usize, dyn Trait)`\n    = note: the return type of a function must have a statically known size\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:10:39\n    |\n LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n-   |                                       ^^^^^^ expected trait object `dyn Trait`, found struct `Struct`\n+   |                                       ^^^^^^ expected `dyn Trait`, found `Struct`\n    |\n    = note: expected trait object `(dyn Trait + 'static)`\n                     found struct `Struct`\n@@ -37,7 +37,7 @@ LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n    |             doesn't have a size known at compile-time\n    |\n    = help: within `(usize, (dyn Trait + 'static))`, the trait `Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n+   = note: required because it appears within the type `(usize, dyn Trait)`\n    = note: the return type of a function must have a statically known size\n \n error[E0746]: return type cannot have an unboxed trait object\n@@ -110,7 +110,7 @@ LL | |         Struct\n    | |         ------ expected because of this\n LL | |     } else {\n LL | |         42\n-   | |         ^^ expected struct `Struct`, found integer\n+   | |         ^^ expected `Struct`, found integer\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n \n@@ -144,7 +144,7 @@ LL | fn bam() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         return Struct;\n-   |                ^^^^^^ expected struct `Box`, found struct `Struct`\n+   |                ^^^^^^ expected `Box<dyn Trait>`, found `Struct`\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n               found struct `Struct`\n@@ -161,7 +161,7 @@ LL | fn bam() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |     42\n-   |     ^^ expected struct `Box`, found integer\n+   |     ^^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n@@ -178,7 +178,7 @@ LL | fn baq() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         return 0;\n-   |                ^ expected struct `Box`, found integer\n+   |                ^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n@@ -195,7 +195,7 @@ LL | fn baq() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |     42\n-   |     ^^ expected struct `Box`, found integer\n+   |     ^^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n@@ -212,7 +212,7 @@ LL | fn baz() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         Struct\n-   |         ^^^^^^ expected struct `Box`, found struct `Struct`\n+   |         ^^^^^^ expected `Box<dyn Trait>`, found `Struct`\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n               found struct `Struct`\n@@ -229,7 +229,7 @@ LL | fn baz() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |         42\n-   |         ^^ expected struct `Box`, found integer\n+   |         ^^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n@@ -246,7 +246,7 @@ LL | fn baw() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         0\n-   |         ^ expected struct `Box`, found integer\n+   |         ^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n@@ -263,7 +263,7 @@ LL | fn baw() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |         42\n-   |         ^^ expected struct `Box`, found integer\n+   |         ^^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`"}, {"sha": "52f25d2458c9190bc469f5efb1f99136970c8ae1", "filename": "tests/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -54,6 +54,7 @@ LL |     x = (x.1,\n    |\n    = note: expected opaque type `impl Foo` (`u32`)\n               found opaque type `impl Foo` (`i32`)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:41:10\n@@ -69,6 +70,7 @@ LL |          x.0);\n    |\n    = note: expected opaque type `impl Foo` (`i32`)\n               found opaque type `impl Foo` (`u32`)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n \n error: aborting due to 4 previous errors; 1 warning emitted\n "}, {"sha": "3eba419c0a3fd31f1796beff51de198f132b91d9", "filename": "tests/ui/impl-trait/in-trait/deep-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0053]: method `bar` has an incompatible return type for trait\n LL |     fn bar() -> i32 { 0 }\n    |                 ^^^\n    |                 |\n-   |                 expected struct `Wrapper`, found `i32`\n+   |                 expected `Wrapper<_>`, found `i32`\n    |                 return type in trait\n    |\n    = note: expected struct `Wrapper<_>`"}, {"sha": "cc3bdf0e5717ecac48e61893ad1156c6b0f06880", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         42\n    |         ^^- help: try using a conversion method: `.to_string()`\n    |         |\n-   |         expected struct `String`, found integer\n+   |         expected `String`, found integer\n \n error: aborting due to previous error\n "}, {"sha": "4742eb37d3e4d55538167770d9093016c8357b0d", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n   --> $DIR/default-body-type-err.rs:7:22\n    |\n LL |     fn lol(&self) -> impl Deref<Target = String> {\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `String`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `String`\n LL |\n LL |         &1i32\n    |         ----- return type was inferred to be `&i32` here"}, {"sha": "6cf0c33ad919015f3852f0b4c0856f9cccc60ea3", "filename": "tests/ui/impl-trait/issue-102605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-102605.rs:13:20\n    |\n LL |     convert_result(foo())\n-   |     -------------- ^^^^^ expected enum `Result`, found opaque type\n+   |     -------------- ^^^^^ expected `Result<(), _>`, found opaque type\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "3b4e130fdebde3e88c8da6f700867fb30abe5e94", "filename": "tests/ui/impl-trait/issue-99914.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-99914.rs:9:27\n    |\n LL |     t.and_then(|t| -> _ { bar(t) });\n-   |                           ^^^^^^ expected enum `Result`, found opaque type\n+   |                           ^^^^^^ expected `Result<_, Error>`, found opaque type\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-99914.rs:13:23"}, {"sha": "724f3c5d6747ca06890b38ab5f9c1dc84a0637bb", "filename": "tests/ui/impl-trait/issues/issue-74282.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -10,7 +10,7 @@ LL |       Anonymous(|| {\n    | |     arguments to this struct are incorrect\n LL | |         3\n LL | |     })\n-   | |_____^ expected closure, found a different closure\n+   | |_____^ expected opaque type, found closure\n    |\n    = note: expected opaque type `Closure`\n                   found closure `[closure@$DIR/issue-74282.rs:8:15: 8:17]`\n@@ -33,7 +33,7 @@ LL | |         3\n LL | |     })\n    | |      ^- help: consider using a semicolon here: `;`\n    | |______|\n-   |        expected `()`, found struct `Anonymous`\n+   |        expected `()`, found `Anonymous`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3c2c01dc227b9d45f49081d716e68b0d3db338f8", "filename": "tests/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -145,7 +145,7 @@ note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n LL |     pub trait Bar {\n    |     ^^^^^^^^^^^^^\n \n-error[E0599]: no method named `method2` found for struct `Foo` in the current scope\n+error[E0599]: no method named `method2` found for struct `no_method_suggested_traits::Foo` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:50:37\n    |\n LL |     no_method_suggested_traits::Foo.method2();\n@@ -158,7 +158,7 @@ note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n LL |     pub trait Bar {\n    |     ^^^^^^^^^^^^^\n \n-error[E0599]: no method named `method2` found for struct `Rc<&mut Box<&Foo>>` in the current scope\n+error[E0599]: no method named `method2` found for struct `Rc<&mut Box<&no_method_suggested_traits::Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:52:71\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n@@ -171,7 +171,7 @@ note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n LL |     pub trait Bar {\n    |     ^^^^^^^^^^^^^\n \n-error[E0599]: no method named `method2` found for enum `Bar` in the current scope\n+error[E0599]: no method named `method2` found for enum `no_method_suggested_traits::Bar` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:54:40\n    |\n LL |     no_method_suggested_traits::Bar::X.method2();\n@@ -184,7 +184,7 @@ note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n LL |     pub trait Bar {\n    |     ^^^^^^^^^^^^^\n \n-error[E0599]: no method named `method2` found for struct `Rc<&mut Box<&Bar>>` in the current scope\n+error[E0599]: no method named `method2` found for struct `Rc<&mut Box<&no_method_suggested_traits::Bar>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:56:74\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n@@ -255,25 +255,25 @@ error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&usize>>`\n LL |     std::rc::Rc::new(&mut Box::new(&1_usize)).method3();\n    |                                               ^^^^^^^ method not found in `Rc<&mut Box<&usize>>`\n \n-error[E0599]: no method named `method3` found for struct `Foo` in the current scope\n+error[E0599]: no method named `method3` found for struct `no_method_suggested_traits::Foo` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:71:37\n    |\n LL |     no_method_suggested_traits::Foo.method3();\n    |                                     ^^^^^^^ method not found in `Foo`\n \n-error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&Foo>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&no_method_suggested_traits::Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:72:71\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n    |                                                                       ^^^^^^^ method not found in `Rc<&mut Box<&Foo>>`\n \n-error[E0599]: no method named `method3` found for enum `Bar` in the current scope\n+error[E0599]: no method named `method3` found for enum `no_method_suggested_traits::Bar` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:74:40\n    |\n LL |     no_method_suggested_traits::Bar::X.method3();\n    |                                        ^^^^^^^ method not found in `Bar`\n \n-error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&Bar>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&no_method_suggested_traits::Bar>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:75:74\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();"}, {"sha": "e5147bcea16625227f7bf63f46260847ae1a614b", "filename": "tests/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ LL | fn can() -> impl NotObjectSafe {\n    |             ------------------ expected `A` because of return type\n ...\n LL |     B\n-   |     ^ expected struct `A`, found struct `B`\n+   |     ^ expected `A`, found `B`\n \n error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:43:5\n@@ -14,7 +14,7 @@ LL | fn cat() -> impl ObjectSafe {\n    |             --------------- expected `A` because of return type\n ...\n LL |     B\n-   |     ^ expected struct `A`, found struct `B`\n+   |     ^ expected `A`, found `B`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7aff41954445f69f15e98946468a9c3f2d73ed4", "filename": "tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -15,7 +15,7 @@ LL |     type Foo = impl PartialEq<(Foo, i32)>;\n LL |         fn eq(&self, _other: &(Foo, i32)) -> bool {\n    |                              ^^^^^^^^^^^\n    |                              |\n-   |                              expected struct `Bar`, found opaque type\n+   |                              expected `a::Bar`, found opaque type\n    |                              help: change the parameter type to match the trait: `&(a::Bar, i32)`\n    |\n    = note: expected signature `fn(&a::Bar, &(a::Bar, i32)) -> _`\n@@ -38,7 +38,7 @@ LL |     type Foo = impl PartialEq<(Foo, i32)>;\n LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n    |                              ^^^^^^^^^^^\n    |                              |\n-   |                              expected opaque type, found struct `Bar`\n+   |                              expected opaque type, found `b::Bar`\n    |                              help: change the parameter type to match the trait: `&(b::Foo, i32)`\n    |\n    = note: expected signature `fn(&b::Bar, &(b::Foo, i32)) -> _`"}, {"sha": "a56e542d8345ab29e03a42e04ef9a6ba002c51fd", "filename": "tests/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(x: impl Debug) -> String {\n    |           |\n    |           this type parameter\n LL |     x\n-   |     ^ expected struct `String`, found type parameter `impl Debug`\n+   |     ^ expected `String`, found type parameter `impl Debug`\n    |\n    = note:      expected struct `String`\n            found type parameter `impl Debug`"}, {"sha": "4f2880e2f5d4914e5d4ade4c9b1bfa6a8ca57fa8", "filename": "tests/ui/include-macros/mismatched-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finclude-macros%2Fmismatched-types.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:2:20\n    |\n LL |     let b: &[u8] = include_str!(\"file.txt\");\n-   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n+   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&[u8]`, found `&str`\n    |            |\n    |            expected due to this\n    |\n@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:3:19\n    |\n LL |     let s: &str = include_bytes!(\"file.txt\");\n-   |            ----   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found array `[u8; 0]`\n+   |            ----   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `&[u8; 0]`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "1626032ae997de1452cb1764d8cf8c2153d1242e", "filename": "tests/ui/inference/deref-suggestion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Finference%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Finference%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fderef-suggestion.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo(s);\n    |     --- ^- help: try using a conversion method: `.to_string()`\n    |     |   |\n-   |     |   expected struct `String`, found `&String`\n+   |     |   expected `String`, found `&String`\n    |     arguments to this function are incorrect\n    |\n note: function defined here\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n    |\n LL |     foo(&\"aaa\".to_owned());\n-   |     --- ^^^^^^^^^^^^^^^^^ expected struct `String`, found `&String`\n+   |     --- ^^^^^^^^^^^^^^^^^ expected `String`, found `&String`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -54,7 +54,7 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:32:9\n    |\n LL |     foo(&mut \"aaa\".to_owned());\n-   |     --- ^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&mut String`\n+   |     --- ^^^^^^^^^^^^^^^^^^^^^ expected `String`, found `&mut String`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "991d1450aff994c2204799b0938fb464ab0eee0b", "filename": "tests/ui/intrinsics/const-eval-select-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -30,7 +30,7 @@ fn baz(n: bool) -> i32 {\n \n const fn return_ty_mismatch() {\n     const_eval_select((1,), foo, bar);\n-    //~^ ERROR expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it returns `bool`\n+    //~^ ERROR expected `bar` to be a fn item that returns `i32`, but it returns `bool`\n }\n \n const fn args_ty_mismatch() {"}, {"sha": "d4507a27aeaa1286e7cd6ce2e810ee45984d962a", "filename": "tests/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -60,7 +60,7 @@ LL |     const_eval_select((), 42, 0xDEADBEEF);\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n \n-error[E0271]: expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it returns `bool`\n+error[E0271]: expected `bar` to be a fn item that returns `i32`, but it returns `bool`\n   --> $DIR/const-eval-select-bad.rs:32:34\n    |\n LL |     const_eval_select((1,), foo, bar);"}, {"sha": "be30eef2af48fb2bb7f091240ecbe58861ca5003", "filename": "tests/ui/issues/issue-100605.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-100605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-100605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-100605.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-100605.rs:4:18\n    |\n LL |     takes_option(&None);\n-   |     ------------ ^^^^^ expected enum `Option`, found `&Option<_>`\n+   |     ------------ ^^^^^ expected `Option<&String>`, found `&Option<_>`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n LL |     takes_option(&res);\n    |     ------------ ^^^^\n    |     |            |\n-   |     |            expected enum `Option`, found `&Option<String>`\n+   |     |            expected `Option<&String>`, found `&Option<String>`\n    |     |            help: you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`: `res.as_ref()`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "c0766480a41f42448c520f75b4c8d772339e0965", "filename": "tests/ui/issues/issue-102964.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-102964.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-102964.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-102964.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-102964.rs:5:41\n    |\n LL | fn bar_function<T>(function: Foo<T>) -> RcFoo<T> {\n-   |    ------------                         ^^^^^^^^ expected struct `Rc`, found `()`\n+   |    ------------                         ^^^^^^^^ expected `Rc<&dyn Fn(&T)>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |"}, {"sha": "fcb45affe2c18cc78ccfed3b3482ac18ced196af", "filename": "tests/ui/issues/issue-10764.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-10764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-10764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-10764.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -8,6 +8,7 @@ LL | fn main() { f(bar) }\n    |\n    = note: expected fn pointer `fn()`\n                  found fn item `extern \"C\" fn() {bar}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n note: function defined here\n   --> $DIR/issue-10764.rs:1:4\n    |"}, {"sha": "ef28c81d85737f12eaedacf32c148d497a7f3443", "filename": "tests/ui/issues/issue-11374.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-11374.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     c.read_to(v);\n    |       ------- ^\n    |       |       |\n-   |       |       expected `&mut [u8]`, found struct `Vec`\n+   |       |       expected `&mut [u8]`, found `Vec<_>`\n    |       |       help: consider mutably borrowing here: `&mut v`\n    |       arguments to this method are incorrect\n    |"}, {"sha": "9afd209773b73f435cca6ebd5a96978cea3923c7", "filename": "tests/ui/issues/issue-11844.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-11844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-11844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-11844.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match a {\n    |           - this expression has type `Option<Box<{integer}>>`\n LL |         Ok(a) =>\n-   |         ^^^^^ expected enum `Option`, found enum `Result`\n+   |         ^^^^^ expected `Option<Box<{integer}>>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<Box<{integer}>>`\n               found enum `Result<_, _>`"}, {"sha": "139c34c8880a69ecf8c44ba45c430b5a0479b258", "filename": "tests/ui/issues/issue-13446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-13446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-13446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-13446.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13446.rs:3:26\n    |\n LL | static VEC: [u32; 256] = vec![];\n-   |                          ^^^^^^ expected array `[u32; 256]`, found struct `Vec`\n+   |                          ^^^^^^ expected `[u32; 256]`, found `Vec<_>`\n    |\n    = note: expected array `[u32; 256]`\n              found struct `Vec<_>`"}, {"sha": "52d4d75d29da2623d823f25707b40f6413660825", "filename": "tests/ui/issues/issue-13466.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-13466.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,12 +9,12 @@ pub fn main() {\n         //~^ ERROR mismatched types\n         //~| expected enum `Option<{integer}>`\n         //~| found enum `Result<_, _>`\n-        //~| expected enum `Option`, found enum `Result`\n+        //~| expected `Option<{integer}>`, found `Result<_, _>`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n         //~| expected enum `Option<{integer}>`\n         //~| found enum `Result<_, _>`\n-        //~| expected enum `Option`, found enum `Result`\n+        //~| expected `Option<{integer}>`, found `Result<_, _>`\n     };\n }"}, {"sha": "fd928e45863db026ef3097ad30056b3615badbec", "filename": "tests/ui/issues/issue-13466.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-13466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-13466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-13466.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let _x: usize = match Some(1) {\n    |                           ------- this expression has type `Option<{integer}>`\n LL |         Ok(u) => u,\n-   |         ^^^^^ expected enum `Option`, found enum `Result`\n+   |         ^^^^^ expected `Option<{integer}>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<{integer}>`\n               found enum `Result<_, _>`\n@@ -16,7 +16,7 @@ LL |     let _x: usize = match Some(1) {\n    |                           ------- this expression has type `Option<{integer}>`\n ...\n LL |         Err(e) => panic!(e)\n-   |         ^^^^^^ expected enum `Option`, found enum `Result`\n+   |         ^^^^^^ expected `Option<{integer}>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<{integer}>`\n               found enum `Result<_, _>`"}, {"sha": "2ff1c1f8876cd0fa758eb1b9987171d647256556", "filename": "tests/ui/issues/issue-14541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-14541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-14541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-14541.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ struct Vec3 { y: f32, z: f32 }\n fn make(v: Vec2) {\n     let Vec3 { y: _, z: _ } = v;\n     //~^ ERROR mismatched types\n-    //~| expected struct `Vec2`, found struct `Vec3`\n+    //~| expected `Vec2`, found `Vec3`\n }\n \n fn main() { }"}, {"sha": "b80c68ce47311332716c77865b9600105e02c996", "filename": "tests/ui/issues/issue-14541.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-14541.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-14541.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-14541.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let Vec3 { y: _, z: _ } = v;\n    |         ^^^^^^^^^^^^^^^^^^^   - this expression has type `Vec2`\n    |         |\n-   |         expected struct `Vec2`, found struct `Vec3`\n+   |         expected `Vec2`, found `Vec3`\n \n error: aborting due to previous error\n "}, {"sha": "ceb37a20e3f30d01edc56b025c9d9bd563e9804f", "filename": "tests/ui/issues/issue-15783.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-15783.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,6 +9,6 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected enum `Option<&[&str]>`\n     //~| found enum `Option<&[&str; 1]>`\n-    //~| expected slice `[&str]`, found array `[&str; 1]`\n+    //~| expected `Option<&[&str]>`, found `Option<&[&str; 1]>`\n     assert_eq!(msg, 3);\n }"}, {"sha": "598ec7e6053bea1918059368271490da2a8fa801", "filename": "tests/ui/issues/issue-15783.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-15783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-15783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-15783.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-15783.rs:8:19\n    |\n LL |     let msg = foo(x);\n-   |               --- ^ expected slice `[&str]`, found array `[&str; 1]`\n+   |               --- ^ expected `Option<&[&str]>`, found `Option<&[&str; 1]>`\n    |               |\n    |               arguments to this function are incorrect\n    |"}, {"sha": "ec0d74596aa8d4938f0e6a9ac96c681360efb429", "filename": "tests/ui/issues/issue-15896.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-15896.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-15896.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-15896.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ LL |     let u = match e {\n    |                   - this expression has type `E`\n LL |         E::B(\n LL |           Tau{t: x},\n-   |           ^^^^^^^^^ expected enum `R`, found struct `Tau`\n+   |           ^^^^^^^^^ expected `R`, found `Tau`\n \n error: aborting due to previous error\n "}, {"sha": "0f08485e515dd058c96cc83923dbfaa8bd7162f4", "filename": "tests/ui/issues/issue-16338.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-16338.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-16338.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16338.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let Slice { data: data, len: len } = \"foo\";\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ----- this expression has type `&str`\n    |         |\n-   |         expected `str`, found struct `Slice`\n+   |         expected `str`, found `Slice<_>`\n    |\n    = note: expected type `str`\n             found struct `Slice<_>`"}, {"sha": "19ae7da107ca2651a11ee8e8266e57dfcba20cf0", "filename": "tests/ui/issues/issue-16401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16401.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,7 +9,7 @@ fn main() {\n         //~^ ERROR mismatched types\n         //~| expected unit type `()`\n         //~| found struct `Slice<_>`\n-        //~| expected `()`, found struct `Slice`\n+        //~| expected `()`, found `Slice<_>`\n         _ => unreachable!()\n     }\n }"}, {"sha": "02f9f3ea8fdf7e40ee847af8cdad1c1aa346c390", "filename": "tests/ui/issues/issue-16401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-16401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-16401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16401.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match () {\n    |           -- this expression has type `()`\n LL |         Slice { data: data, len: len } => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Slice`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Slice<_>`\n    |\n    = note: expected unit type `()`\n                  found struct `Slice<_>`"}, {"sha": "1fc974b609c119170b3e21cb1451ab8c50361073", "filename": "tests/ui/issues/issue-18819.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-18819.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0061]: this function takes 2 arguments but 1 argument was supplied\n LL |     print_x(X);\n    |     ^^^^^^^--- an argument of type `&str` is missing\n    |\n-note: expected reference, found struct `X`\n+note: expected `&dyn Foo<Item = bool>`, found `X`\n   --> $DIR/issue-18819.rs:16:13\n    |\n LL |     print_x(X);"}, {"sha": "13a12acb3605b5e13b148a923a68892cd938412d", "filename": "tests/ui/issues/issue-19521.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-19521.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-19521.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-19521.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `homura` found for reference `&'static str` in the\n   --> $DIR/issue-19521.rs:2:8\n    |\n LL |     \"\".homura()();\n-   |        ^^^^^^ method not found in `&'static str`\n+   |        ^^^^^^ method not found in `&str`\n \n error: aborting due to previous error\n "}, {"sha": "b1c15672051d2fc47305553ee9ce8908bc5a14d8", "filename": "tests/ui/issues/issue-20225.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-20225.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,7 +6,7 @@ LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |                                           ^^^^\n    |                                           |\n-   |                                           expected `&T`, found type parameter `T`\n+   |                                           expected `&'a T`, found type parameter `T`\n    |                                           help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected signature `extern \"rust-call\" fn(&Foo, (&'a T,))`\n@@ -20,7 +20,7 @@ LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |                                                   ^^^^\n    |                                                   |\n-   |                                                   expected `&T`, found type parameter `T`\n+   |                                                   expected `&'a T`, found type parameter `T`\n    |                                                   help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected signature `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n@@ -35,7 +35,7 @@ LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n    |                                               ^^^^\n    |                                               |\n-   |                                               expected `&T`, found type parameter `T`\n+   |                                               expected `&'a T`, found type parameter `T`\n    |                                               help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected signature `extern \"rust-call\" fn(Foo, (&'a T,))`"}, {"sha": "4473d00fd5da2833daf8e4024434ccf71aa48c51", "filename": "tests/ui/issues/issue-21332.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-21332.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-21332.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21332.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ impl Iterator for S {\n     type Item = i32;\n     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n     //~^ ERROR method `next` has an incompatible type for trait\n-    //~| expected enum `Option`, found enum `Result`\n+    //~| expected `Option<i32>`, found `Result<i32, i32>`\n }\n \n fn main() {}"}, {"sha": "82549288064a1caead0c7ac73226c75041aecc39", "filename": "tests/ui/issues/issue-21332.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21332.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0053]: method `next` has an incompatible type for trait\n LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n    |                           ^^^^^^^^^^^^^^^^\n    |                           |\n-   |                           expected enum `Option`, found enum `Result`\n+   |                           expected `Option<i32>`, found `Result<i32, i32>`\n    |                           help: change the output type to match the trait: `Option<i32>`\n    |\n    = note: expected signature `fn(&mut S) -> Option<i32>`"}, {"sha": "954fd4928126fafc979363959c7d053966728100", "filename": "tests/ui/issues/issue-24322.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-24322.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-24322.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-24322.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-24322.rs:8:29\n    |\n LL |     let x: &fn(&B) -> u32 = &B::func;\n-   |            --------------   ^^^^^^^^ expected fn pointer, found fn item\n+   |            --------------   ^^^^^^^^ expected `&fn(&B) -> u32`, found `&fn(&B) -> u32 {B::func}`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "fb4cfb7b29e8b5c5a22c21608558808d61253d10", "filename": "tests/ui/issues/issue-24819.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-24819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-24819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-24819.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let mut v = Vec::new();\n     foo(&mut v);\n     //~^ ERROR mismatched types\n-    //~| expected struct `HashSet`, found struct `Vec`\n+    //~| expected `&mut HashSet<u32>`, found `&mut Vec<_>`\n }\n \n fn foo(h: &mut HashSet<u32>) {"}, {"sha": "8b4f1dbce431d654b5fd971e9e6be0f515c3f590", "filename": "tests/ui/issues/issue-24819.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-24819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-24819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-24819.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-24819.rs:5:9\n    |\n LL |     foo(&mut v);\n-   |     --- ^^^^^^ expected struct `HashSet`, found struct `Vec`\n+   |     --- ^^^^^^ expected `&mut HashSet<u32>`, found `&mut Vec<_>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "adf8e779e0a043a58a9ace980b98b076be84bf50", "filename": "tests/ui/issues/issue-27008.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-27008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-27008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-27008.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -3,5 +3,5 @@ struct S;\n fn main() {\n     let b = [0; S];\n     //~^ ERROR mismatched types\n-    //~| expected `usize`, found struct `S`\n+    //~| expected `usize`, found `S`\n }"}, {"sha": "9d18045aa794c2989177fa56a3b31c581a7d8c6c", "filename": "tests/ui/issues/issue-27008.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-27008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-27008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-27008.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-27008.rs:4:17\n    |\n LL |     let b = [0; S];\n-   |                 ^ expected `usize`, found struct `S`\n+   |                 ^ expected `usize`, found `S`\n \n error: aborting due to previous error\n "}, {"sha": "a00a1dbb8843d2a282b4fa9044c2ac518575c4fa", "filename": "tests/ui/issues/issue-30123.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-30123.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-30123.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-30123.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no function or associated item named `new_undirected` found for struct `Graph<i32, i32>` in the current scope\n+error[E0599]: no function or associated item named `new_undirected` found for struct `issue_30123_aux::Graph<i32, i32>` in the current scope\n   --> $DIR/issue-30123.rs:7:33\n    |\n LL |     let ug = Graph::<i32, i32>::new_undirected();"}, {"sha": "b4f5b1296670f2454253c4cea49834ba0f82c778", "filename": "tests/ui/issues/issue-32122-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-32122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-32122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-32122-1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-32122-1.rs:16:24\n    |\n LL |     let _: *const u8 = &a;\n-   |            ---------   ^^ expected `u8`, found struct `Foo`\n+   |            ---------   ^^ expected `*const u8`, found `&Foo`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "02c335c1547fb4415cceecfe05e693203eaa29dd", "filename": "tests/ui/issues/issue-32122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-32122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-32122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-32122-2.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-32122-2.rs:27:24\n    |\n LL |     let _: *const u8 = &a;\n-   |            ---------   ^^ expected `u8`, found struct `Emm`\n+   |            ---------   ^^ expected `*const u8`, found `&Emm`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "a831cf585f4e0f2c4ef253c0d5a40e5d12209fe3", "filename": "tests/ui/issues/issue-33504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-33504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-33504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-33504.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ LL | struct Test;\n LL |         let Test = 1;\n    |             ^^^^   - this expression has type `{integer}`\n    |             |\n-   |             expected integer, found struct `Test`\n+   |             expected integer, found `Test`\n    |             `Test` is interpreted as a unit struct, not a new binding\n    |             help: introduce a new binding instead: `other_test`\n "}, {"sha": "e7f4a4fa004ce904bac381ea547b4b86d0f5bb94", "filename": "tests/ui/issues/issue-33941.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-33941.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0271]: expected `Iter<'_, _, _>` to be an iterator that yields `&_`, but\n   --> $DIR/issue-33941.rs:6:36\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |                                    ^^^^^^ expected reference, found tuple\n+   |                                    ^^^^^^ expected `&_`, found `(&_, &_)`\n    |\n    = note: expected reference `&_`\n                   found tuple `(&_, &_)`\n@@ -20,7 +20,7 @@ error[E0271]: expected `Iter<'_, _, _>` to be an iterator that yields `&_`, but\n   --> $DIR/issue-33941.rs:6:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(&_, &_)`, found `&_`\n    |\n    = note:  expected tuple `(&_, &_)`\n            found reference `&_`\n@@ -31,7 +31,7 @@ error[E0271]: expected `Iter<'_, _, _>` to be an iterator that yields `&_`, but\n   --> $DIR/issue-33941.rs:6:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(&_, &_)`, found `&_`\n    |\n    = note:  expected tuple `(&_, &_)`\n            found reference `&_`"}, {"sha": "4a2c15511fe266192e95ca5bcf96f07a0a7698d2", "filename": "tests/ui/issues/issue-35241.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-35241.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo(u32);\n    | ---------- `Foo` defines a struct constructor here, which should be called\n LL |\n LL | fn test() -> Foo { Foo }\n-   |              ---   ^^^ expected struct `Foo`, found struct constructor\n+   |              ---   ^^^ expected `Foo`, found struct constructor\n    |              |\n    |              expected `Foo` because of return type\n    |"}, {"sha": "a0e52798122972fb88b749edb50fc267440ab539", "filename": "tests/ui/issues/issue-3680.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3680.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,6 +4,6 @@ fn main() {\n         //~^ ERROR mismatched types\n         //~| expected enum `Option<_>`\n         //~| found enum `Result<_, _>`\n-        //~| expected enum `Option`, found enum `Result`\n+        //~| expected `Option<_>`, found `Result<_, _>`\n     }\n }"}, {"sha": "0b0ae419e2bf9bbab0d9e3b7b421a54f371000e6", "filename": "tests/ui/issues/issue-3680.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-3680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-3680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3680.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match None {\n    |           ---- this expression has type `Option<_>`\n LL |         Err(_) => ()\n-   |         ^^^^^^ expected enum `Option`, found enum `Result`\n+   |         ^^^^^^ expected `Option<_>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<_>`\n               found enum `Result<_, _>`"}, {"sha": "40d3ae30a87c680811cdaad65b9969e1f56090d4", "filename": "tests/ui/issues/issue-39970.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-39970.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-39970.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-39970.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -17,5 +17,5 @@ impl Visit for () where\n \n fn main() {\n     <() as Visit>::visit();\n-    //~^ ERROR type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n+    //~^ ERROR type mismatch resolving `<() as Array<'a>>::Element == ()`\n }"}, {"sha": "8344b88c3beab7e8e6863166be7d99286c12ddf9", "filename": "tests/ui/issues/issue-39970.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-39970.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,8 +1,8 @@\n-error[E0271]: type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n+error[E0271]: type mismatch resolving `<() as Array<'a>>::Element == ()`\n   --> $DIR/issue-39970.rs:19:5\n    |\n LL |     <() as Visit>::visit();\n-   |     ^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n+   |     ^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<() as Array<'a>>::Element == ()`\n    |\n note: expected this to be `()`\n   --> $DIR/issue-39970.rs:10:20"}, {"sha": "afc39adec467ac548a85ae6434e67e783931f066", "filename": "tests/ui/issues/issue-40749.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-40749.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-40749.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-40749.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-40749.rs:2:9\n    |\n LL |     [0; ..10];\n-   |         ^^^^ expected `usize`, found struct `RangeTo`\n+   |         ^^^^ expected `usize`, found `RangeTo<{integer}>`\n    |\n    = note: expected type `usize`\n             found struct `RangeTo<{integer}>`"}, {"sha": "9b141e2bf99afd9f27bb5be71462731c7d35745c", "filename": "tests/ui/issues/issue-43420-no-over-suggest.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-43420-no-over-suggest.rs:8:9\n    |\n LL |     foo(&a);\n-   |     --- ^^ expected slice `[u16]`, found struct `Vec`\n+   |     --- ^^ expected `&[u16]`, found `&Vec<u8>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "469304e2cf70fd87173c33fb930122e0b9dfba1c", "filename": "tests/ui/issues/issue-4517.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4517.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let foo: [u8; 4] = [1; 4];\n     bar(foo);\n     //~^ ERROR mismatched types\n-    //~| expected `usize`, found array `[u8; 4]`\n+    //~| expected `usize`, found `[u8; 4]`\n }"}, {"sha": "78ee336f19a43a4d14a3c39901cc6a9598658fe4", "filename": "tests/ui/issues/issue-4517.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-4517.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-4517.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4517.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-4517.rs:5:9\n    |\n LL |     bar(foo);\n-   |     --- ^^^ expected `usize`, found array `[u8; 4]`\n+   |     --- ^^^ expected `usize`, found `[u8; 4]`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "a4c88fd880a9d2ec28cb9d1b942d2fb04c2abb92", "filename": "tests/ui/issues/issue-48364.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-48364.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-48364.rs:2:21\n    |\n LL |     b\"\".starts_with(stringify!(foo))\n-   |         ----------- ^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n+   |         ----------- ^^^^^^^^^^^^^^^ expected `&[u8]`, found `&str`\n    |         |\n    |         arguments to this method are incorrect\n    |"}, {"sha": "c8df46dc2674032f45affc625888cc48dc70a618", "filename": "tests/ui/issues/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4968.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `{integer}`\n     //~| found tuple `(isize, isize)`\n-    //~| expected integer, found tuple\n+    //~| expected integer, found `(isize, isize)`\n }"}, {"sha": "1ce0333846f44e77e7e8797f7ebb8660e04b3e27", "filename": "tests/ui/issues/issue-4968.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-4968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-4968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4968.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ LL | fn main() {\n LL |     match 42 { A => () }\n    |           --   ^\n    |           |    |\n-   |           |    expected integer, found tuple\n+   |           |    expected integer, found `(isize, isize)`\n    |           |    `A` is interpreted as a constant, not a new binding\n    |           |    help: introduce a new binding instead: `other_a`\n    |           this expression has type `{integer}`"}, {"sha": "53ebdec8164934e8c0a3c6bee2ed4ae005b2692b", "filename": "tests/ui/issues/issue-5100.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-5100.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     match (true, false) {\n         A::B => (),\n //~^ ERROR mismatched types\n-//~| expected tuple, found enum `A`\n+//~| expected `(bool, bool)`, found `A`\n //~| expected tuple `(bool, bool)`\n //~| found enum `A`\n         _ => ()\n@@ -39,7 +39,7 @@ fn main() {\n     match (true, false) {\n         &(true, false) => ()\n //~^ ERROR mismatched types\n-//~| expected tuple, found reference\n+//~| expected `(bool, bool)`, found `&_`\n //~| expected tuple `(bool, bool)`\n //~| found reference `&_`\n     }"}, {"sha": "b1680aacd16563f3d443980af9a7a4f115481168", "filename": "tests/ui/issues/issue-5100.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-5100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-5100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-5100.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ LL | enum A { B, C }\n LL |     match (true, false) {\n    |           ------------- this expression has type `(bool, bool)`\n LL |         A::B => (),\n-   |         ^^^^ expected tuple, found enum `A`\n+   |         ^^^^ expected `(bool, bool)`, found `A`\n    |\n    = note: expected tuple `(bool, bool)`\n                found enum `A`\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL |     match (true, false) {\n    |           ------------- this expression has type `(bool, bool)`\n LL |         box (true, false) => ()\n-   |         ^^^^^^^^^^^^^^^^^ expected tuple, found struct `Box`\n+   |         ^^^^^^^^^^^^^^^^^ expected `(bool, bool)`, found `Box<_>`\n    |\n    = note: expected tuple `(bool, bool)`\n              found struct `Box<_>`\n@@ -51,7 +51,7 @@ error[E0308]: mismatched types\n LL |     match (true, false) {\n    |           ------------- this expression has type `(bool, bool)`\n LL |         &(true, false) => ()\n-   |         ^^^^^^^^^^^^^^ expected tuple, found reference\n+   |         ^^^^^^^^^^^^^^ expected `(bool, bool)`, found `&_`\n    |\n    = note:  expected tuple `(bool, bool)`\n            found reference `&_`"}, {"sha": "7180a3d2426d109bca8556dcb9272fdd68ba132b", "filename": "tests/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: `?` operator has incompatible types\n   --> $DIR/issue-51632-try-desugar-incompatible-types.rs:8:5\n    |\n LL |     missing_discourses()?\n-   |     ^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `isize`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected `Result<isize, ()>`, found `isize`\n    |\n    = note: `?` operator cannot convert from `isize` to `Result<isize, ()>`\n    = note: expected enum `Result<isize, ()>`"}, {"sha": "66800d9e929612c75137b4a6c3473fe3ac5b56df", "filename": "tests/ui/issues/issue-53348.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-53348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-53348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-53348.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     for i in v {\n         a = *i.to_string();\n         //~^ ERROR mismatched types\n-        //~| NOTE expected struct `String`, found `str`\n+        //~| NOTE expected `String`, found `str`\n         v2.push(a);\n     }\n }"}, {"sha": "e4cdb7e889bcab07ae01e27c0266e46b7d003263", "filename": "tests/ui/issues/issue-53348.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-53348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-53348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-53348.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ LL |     let mut a = String::new();\n    |                 ------------- expected due to this value\n LL |     for i in v {\n LL |         a = *i.to_string();\n-   |             ^^^^^^^^^^^^^^ expected struct `String`, found `str`\n+   |             ^^^^^^^^^^^^^^ expected `String`, found `str`\n \n error: aborting due to previous error\n "}, {"sha": "14ee962b722e8cbe1b0381840416cdf895c315de", "filename": "tests/ui/issues/issue-5358-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-5358-1.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     match S(Either::Left(5)) {\n         Either::Right(_) => {}\n         //~^ ERROR mismatched types\n-        //~| expected struct `S`, found enum `Either`\n+        //~| expected `S`, found `Either<_, _>`\n         //~| expected struct `S`\n         //~| found enum `Either<_, _>`\n         _ => {}"}, {"sha": "059462a363e8e9230eb4bb0b6944014131a44f52", "filename": "tests/ui/issues/issue-5358-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-5358-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-5358-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-5358-1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match S(Either::Left(5)) {\n    |           ------------------ this expression has type `S`\n LL |         Either::Right(_) => {}\n-   |         ^^^^^^^^^^^^^^^^ expected struct `S`, found enum `Either`\n+   |         ^^^^^^^^^^^^^^^^ expected `S`, found `Either<_, _>`\n    |\n    = note: expected struct `S`\n                 found enum `Either<_, _>`"}, {"sha": "c394e620b82fe2cf8d39b5e1f45b6c6bce0267fd", "filename": "tests/ui/issues/issue-56943.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-56943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-56943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-56943.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-56943.rs:6:29\n    |\n LL |     let _: issue_56943::S = issue_56943::S2;\n-   |            --------------   ^^^^^^^^^^^^^^^ expected struct `S`, found struct `S2`\n+   |            --------------   ^^^^^^^^^^^^^^^ expected `S`, found `S2`\n    |            |\n    |            expected due to this\n "}, {"sha": "37beb587d2767e5e5052ef0e1ea1a9ecd1ba87bf", "filename": "tests/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: the function or associated item `make_g` exists for fn pointer `for<'a> fn(&'a ())`, but its trait bounds were not satisfied\n+error[E0599]: the function or associated item `make_g` exists for fn pointer `fn(&())`, but its trait bounds were not satisfied\n   --> $DIR/issue-57362-2.rs:22:25\n    |\n LL |     let x = <fn (&())>::make_g();\n-   |                         ^^^^^^ function or associated item cannot be called on `for<'a> fn(&'a ())` due to unsatisfied trait bounds\n+   |                         ^^^^^^ function or associated item cannot be called on `fn(&())` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `for<'a> fn(&'a ()): X`"}, {"sha": "76f03bab6d157130574a2d95b44c1da8608579db", "filename": "tests/ui/issues/issue-57741-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-57741-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-57741-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-57741-1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let y = match x {\n    |                   - this expression has type `Box<u32>`\n LL |         S::A { a } | S::B { b: a } => a,\n-   |         ^^^^^^^^^^ expected struct `Box`, found enum `S`\n+   |         ^^^^^^^^^^ expected `Box<u32>`, found `S`\n    |\n    = note: expected struct `Box<u32>`\n                 found enum `S`\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     let y = match x {\n    |                   - this expression has type `Box<u32>`\n LL |         S::A { a } | S::B { b: a } => a,\n-   |                      ^^^^^^^^^^^^^ expected struct `Box`, found enum `S`\n+   |                      ^^^^^^^^^^^^^ expected `Box<u32>`, found `S`\n    |\n    = note: expected struct `Box<u32>`\n                 found enum `S`"}, {"sha": "38014ecce75744f90506ec2774b822c7a1d8406c", "filename": "tests/ui/issues/issue-57741.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-57741.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-57741.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-57741.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ LL |     let y = match x {\n    |                   this expression has type `Box<T>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         T::A(a) | T::B(a) => a,\n-   |         ^^^^^^^ expected struct `Box`, found enum `T`\n+   |         ^^^^^^^ expected `Box<T>`, found `T`\n    |\n    = note: expected struct `Box<T>`\n                 found enum `T`\n@@ -21,7 +21,7 @@ LL |     let y = match x {\n    |                   this expression has type `Box<T>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         T::A(a) | T::B(a) => a,\n-   |                   ^^^^^^^ expected struct `Box`, found enum `T`\n+   |                   ^^^^^^^ expected `Box<T>`, found `T`\n    |\n    = note: expected struct `Box<T>`\n                 found enum `T`\n@@ -35,7 +35,7 @@ LL |     let y = match x {\n    |                   this expression has type `Box<S>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         S::A { a } | S::B { b: a } => a,\n-   |         ^^^^^^^^^^ expected struct `Box`, found enum `S`\n+   |         ^^^^^^^^^^ expected `Box<S>`, found `S`\n    |\n    = note: expected struct `Box<S>`\n                 found enum `S`\n@@ -49,7 +49,7 @@ LL |     let y = match x {\n    |                   this expression has type `Box<S>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         S::A { a } | S::B { b: a } => a,\n-   |                      ^^^^^^^^^^^^^ expected struct `Box`, found enum `S`\n+   |                      ^^^^^^^^^^^^^ expected `Box<S>`, found `S`\n    |\n    = note: expected struct `Box<S>`\n                 found enum `S`"}, {"sha": "d45beefa420cbb2a460d5e6c1324e774eaf2e27c", "filename": "tests/ui/issues/issue-59488.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-59488.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-59488.rs:14:11\n    |\n LL |     foo > 12;\n-   |           ^^ expected fn item, found integer\n+   |           ^^ expected fn item, found `i32`\n    |\n    = note: expected fn item `fn() -> i32 {foo}`\n                  found type `i32`\n@@ -37,7 +37,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-59488.rs:18:11\n    |\n LL |     bar > 13;\n-   |           ^^ expected fn item, found integer\n+   |           ^^ expected fn item, found `i64`\n    |\n    = note: expected fn item `fn(i64) -> i64 {bar}`\n                  found type `i64`"}, {"sha": "eff3e6e78495e919242f9daaf69161d427de7c5b", "filename": "tests/ui/issues/issue-61106.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-61106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-61106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-61106.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo(x.clone());\n    |     --- ^^^^^^^^^\n    |     |   |\n-   |     |   expected `&str`, found struct `String`\n+   |     |   expected `&str`, found `String`\n    |     |   help: consider borrowing here: `&x`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "66ccfdff23664a4bf276a85a776a83e52defaa8d", "filename": "tests/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-6458-4.rs:1:20\n    |\n LL | fn foo(b: bool) -> Result<bool,String> {\n-   |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n+   |    ---             ^^^^^^^^^^^^^^^^^^^ expected `Result<bool, String>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Err(\"bar\".to_string());"}, {"sha": "6fde44eaf0ced447976e1fb73652f30187fe296b", "filename": "tests/ui/issues/issue-67039-unsound-pin-partialeq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<Rc<Apple> as Deref>::Target == Rc<Apple>\n   --> $DIR/issue-67039-unsound-pin-partialeq.rs:25:29\n    |\n LL |     let _ = Pin::new(Apple) == Rc::pin(Apple);\n-   |                             ^^ expected struct `Apple`, found struct `Rc`\n+   |                             ^^ expected `Apple`, found `Rc<Apple>`\n    |\n    = note: expected struct `Apple`\n               found struct `Rc<Apple>`"}, {"sha": "570677298ffa98d41b6d7af932beecfcbb49029f", "filename": "tests/ui/issues/issue-69306.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-69306.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-69306.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-69306.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL | impl<T> S0<T> {\n    |      - this type parameter\n LL |     const C: S0<u8> = Self(0);\n-   |                       ^^^^^^^ expected `u8`, found type parameter `T`\n+   |                       ^^^^^^^ expected `S0<u8>`, found `S0<T>`\n    |\n    = note: expected struct `S0<u8>`\n               found struct `S0<T>`\n@@ -89,7 +89,7 @@ error[E0308]: mismatched types\n LL | impl<T> S1<T, u8> {\n    |      - this type parameter\n LL |     const C: S1<u8, u8> = Self(0, 1);\n-   |                           ^^^^^^^^^^ expected `u8`, found type parameter `T`\n+   |                           ^^^^^^^^^^ expected `S1<u8, u8>`, found `S1<T, u8>`\n    |\n    = note: expected struct `S1<u8, _>`\n               found struct `S1<T, _>`\n@@ -126,7 +126,7 @@ LL |     fn map<U>(x: U) -> S2<U> {\n    |            |\n    |            expected type parameter\n LL |         Self(x)\n-   |         ^^^^^^^ expected type parameter `U`, found type parameter `T`\n+   |         ^^^^^^^ expected `S2<U>`, found `S2<T>`\n    |\n    = note: expected struct `S2<U>`\n               found struct `S2<T>`"}, {"sha": "a209f8a4249f1dc899a1cba70f6185208978ec44", "filename": "tests/ui/issues/issue-7061.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-7061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-7061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7061.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-7061.rs:4:46\n    |\n LL |     fn foo(&'a mut self) -> Box<BarStruct> { self }\n-   |                             --------------   ^^^^ expected struct `Box`, found `&mut BarStruct`\n+   |                             --------------   ^^^^ expected `Box<BarStruct>`, found `&mut BarStruct`\n    |                             |\n    |                             expected `Box<BarStruct>` because of return type\n    |"}, {"sha": "c3c96c7d3f61d89311e64f719f3d21f72a3166c0", "filename": "tests/ui/issues/issue-7092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-7092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-7092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7092.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ fn foo(x: Whatever) {\n     match x {\n         Some(field) =>\n //~^ ERROR mismatched types\n-//~| expected enum `Whatever`, found enum `Option`\n+//~| expected `Whatever`, found `Option<_>`\n //~| expected enum `Whatever`\n //~| found enum `Option<_>`\n             field.access(),"}, {"sha": "e35379fd1cfef6d17ae8a2a18abdcf3ef6390f00", "filename": "tests/ui/issues/issue-7092.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-7092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-7092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7092.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this expression has type `Whatever`\n LL |         Some(field) =>\n-   |         ^^^^^^^^^^^ expected enum `Whatever`, found enum `Option`\n+   |         ^^^^^^^^^^^ expected `Whatever`, found `Option<_>`\n    |\n    = note: expected enum `Whatever`\n               found enum `Option<_>`"}, {"sha": "164641ff7751228c771a94049b253359322e4918", "filename": "tests/ui/issues/issue-71676-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-71676-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-71676-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-71676-1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-71676-1.rs:43:24\n    |\n LL |     let _: *const u8 = &a;\n-   |            ---------   ^^ expected `u8`, found struct `Emm`\n+   |            ---------   ^^ expected `*const u8`, found `&Emm`\n    |            |\n    |            expected due to this\n    |\n@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-71676-1.rs:49:24\n    |\n LL |     let _: *const u8 = &mut a;\n-   |            ---------   ^^^^^^ expected `u8`, found struct `Emm`\n+   |            ---------   ^^^^^^ expected `*const u8`, found `&mut Emm`\n    |            |\n    |            expected due to this\n    |\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-71676-1.rs:52:22\n    |\n LL |     let _: *mut u8 = &mut a;\n-   |            -------   ^^^^^^ expected `u8`, found struct `Emm`\n+   |            -------   ^^^^^^ expected `*mut u8`, found `&mut Emm`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "5cd64e48ab88bd2d910cd10df46a5e5f61dc42f5", "filename": "tests/ui/issues/issue-74236/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-74236%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-74236%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-74236%2Fmain.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let () = dep::Renamed;\n    |         ^^   ------------ this expression has type `Renamed`\n    |         |\n-   |         expected struct `Renamed`, found `()`\n+   |         expected `Renamed`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "32d9105b25997a58cd8949b76e5c0add3d463f80", "filename": "tests/ui/issues/issue-76191.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-76191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-76191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-76191.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,7 +9,7 @@ LL |     match n {\n LL |         RANGE => {}\n    |         ^^^^^\n    |         |\n-   |         expected `i32`, found struct `RangeInclusive`\n+   |         expected `i32`, found `RangeInclusive<i32>`\n    |         `RANGE` is interpreted as a constant, not a new binding\n    |\n    = note: expected type `i32`\n@@ -31,7 +31,7 @@ LL |     match n {\n LL |         RANGE2 => {}\n    |         ^^^^^^\n    |         |\n-   |         expected `i32`, found struct `RangeInclusive`\n+   |         expected `i32`, found `RangeInclusive<i32>`\n    |         `RANGE2` is interpreted as a constant, not a new binding\n    |\n    = note: expected type `i32`"}, {"sha": "e9fd10c6613d4d1637c2708bea6810eae9eca7ab", "filename": "tests/ui/issues/issue-7867.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7867.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     match (true, false) {\n         A::B => (),\n         //~^ ERROR mismatched types\n-        //~| expected tuple, found enum `A`\n+        //~| expected `(bool, bool)`, found `A`\n         //~| expected tuple `(bool, bool)`\n         //~| found enum `A`\n         _ => ()"}, {"sha": "4fb1af344cda61d8a869c313395211550f8d5385", "filename": "tests/ui/issues/issue-7867.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-7867.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fissues%2Fissue-7867.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7867.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ LL | enum A { B, C }\n LL |     match (true, false) {\n    |           ------------- this expression has type `(bool, bool)`\n LL |         A::B => (),\n-   |         ^^^^ expected tuple, found enum `A`\n+   |         ^^^^ expected `(bool, bool)`, found `A`\n    |\n    = note: expected tuple `(bool, bool)`\n                found enum `A`"}, {"sha": "84040e8050e965b87af60e8aa13fe80238183528", "filename": "tests/ui/json/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -24,7 +24,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":622,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":622,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -52,7 +52,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":682,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":682,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -80,7 +80,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":746,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":2,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":2,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":746,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":2,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":2,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -108,7 +108,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "b0f450e9ecc1407fc5175a2c06ec63ae8ce9ae07", "filename": "tests/ui/json/json-bom-plus-crlf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -24,7 +24,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":607,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":607,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -52,7 +52,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":667,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":667,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -80,7 +80,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":731,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":2,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":2,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":731,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":2,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":2,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -108,7 +108,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":786,\"byte_end\":794,\"line_start\":24,\"line_end\":25,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":777,\"byte_end\":783,\"line_start\":24,\"line_end\":24,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:24:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":786,\"byte_end\":794,\"line_start\":24,\"line_end\":25,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":777,\"byte_end\":783,\"line_start\":24,\"line_end\":24,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:24:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "19ef4f6fc68d4a62b53852b06de55b9b1caac7b6", "filename": "tests/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -20,7 +20,7 @@ LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |\n    = help: the trait `Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required for `Unique<(dyn Dummy + 'a)>` to implement `Send`\n-   = note: required because it appears within the type `Box<(dyn Dummy + 'a)>`\n+   = note: required because it appears within the type `Box<dyn Dummy>`\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object1.rs:5:18\n    |"}, {"sha": "6a015aced6f4e90a57e3a3e9d3b31b2b13908949", "filename": "tests/ui/let-else/issue-94176.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flet-else%2Fissue-94176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flet-else%2Fissue-94176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Fissue-94176.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-94176.rs:5:32\n    |\n LL | pub fn test(a: Option<u32>) -> Option<u32> {\n-   |        ----                    ^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |        ----                    ^^^^^^^^^^^ expected `Option<u32>`, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n    |"}, {"sha": "143b838bac50000e5536c7c7600365ab0777272e", "filename": "tests/ui/let-else/let-else-deref-coercion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL |         let Bar::Present(z) = self else {\n    |             ^^^^^^^^^^^^^^^   ---- this expression has type `&mut Foo`\n    |             |\n-   |             expected struct `Foo`, found enum `Bar`\n+   |             expected `Foo`, found `Bar`\n \n error[E0308]: mismatched types\n   --> $DIR/let-else-deref-coercion.rs:68:13\n    |\n LL |         let Bar(z) = x;\n    |             ^^^^^^   - this expression has type `&mut irrefutable::Foo`\n    |             |\n-   |             expected struct `Foo`, found struct `Bar`\n+   |             expected `Foo`, found `Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "661d905cd0783551ebd4de7306f6ebfc383d3c68", "filename": "tests/ui/let-else/let-else-non-diverging.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-non-diverging.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ LL |       let Some(x) = Some(1) else {\n    |  ________________________________^\n LL | |         Some(2)\n LL | |     };\n-   | |_____^ expected `!`, found enum `Option`\n+   | |_____^ expected `!`, found `Option<{integer}>`\n    |\n    = note: expected type `!`\n               found enum `Option<{integer}>`\n@@ -32,7 +32,7 @@ error[E0308]: `else` clause of `let...else` does not diverge\n   --> $DIR/let-else-non-diverging.rs:10:32\n    |\n LL |     let Some(x) = Some(1) else { Some(2) };\n-   |                                ^^^^^^^^^^^ expected `!`, found enum `Option`\n+   |                                ^^^^^^^^^^^ expected `!`, found `Option<{integer}>`\n    |\n    = note: expected type `!`\n               found enum `Option<{integer}>`\n@@ -43,7 +43,7 @@ error[E0308]: `else` clause of `let...else` does not diverge\n   --> $DIR/let-else-non-diverging.rs:15:32\n    |\n LL |     let Some(x) = Some(1) else { foo::<Uninhabited>() };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found enum `Uninhabited`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found `Uninhabited`\n    |\n    = note: expected type `!`\n               found enum `Uninhabited`"}, {"sha": "ada1805e7256f385172cb748716fbbbbf28241d8", "filename": "tests/ui/let-else/let-else-ref-bindings.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:16:38\n    |\n LL |     let Some(ref a): Option<&[u8]> = some else { return };\n-   |                                      ^^^^ expected `&[u8]`, found struct `Vec`\n+   |                                      ^^^^ expected `Option<&[u8]>`, found `Option<Vec<u8>>`\n    |\n    = note: expected enum `Option<&[u8]>`\n               found enum `Option<Vec<u8>>`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:20:38\n    |\n LL |     let Some(ref a): Option<&[u8]> = &some else { return };\n-   |                                      ^^^^^ expected enum `Option`, found `&Option<Vec<u8>>`\n+   |                                      ^^^^^ expected `Option<&[u8]>`, found `&Option<Vec<u8>>`\n    |\n    = note:   expected enum `Option<&[u8]>`\n            found reference `&Option<Vec<u8>>`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:24:34\n    |\n LL |     let Some(a): Option<&[u8]> = some else { return };\n-   |                  -------------   ^^^^ expected `&[u8]`, found struct `Vec`\n+   |                  -------------   ^^^^ expected `Option<&[u8]>`, found `Option<Vec<u8>>`\n    |                  |\n    |                  expected due to this\n    |\n@@ -31,7 +31,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:27:34\n    |\n LL |     let Some(a): Option<&[u8]> = &some else { return };\n-   |                  -------------   ^^^^^ expected enum `Option`, found `&Option<Vec<u8>>`\n+   |                  -------------   ^^^^^ expected `Option<&[u8]>`, found `&Option<Vec<u8>>`\n    |                  |\n    |                  expected due to this\n    |\n@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:44:46\n    |\n LL |     let Some(ref mut a): Option<&mut [u8]> = some else { return };\n-   |                                              ^^^^ expected `&mut [u8]`, found struct `Vec`\n+   |                                              ^^^^ expected `Option<&mut [u8]>`, found `Option<Vec<u8>>`\n    |\n    = note: expected enum `Option<&mut [u8]>`\n               found enum `Option<Vec<u8>>`\n@@ -51,7 +51,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:48:46\n    |\n LL |     let Some(ref mut a): Option<&mut [u8]> = &mut some else { return };\n-   |                                              ^^^^^^^^^ expected enum `Option`, found mutable reference\n+   |                                              ^^^^^^^^^ expected `Option<&mut [u8]>`, found `&mut Option<Vec<u8>>`\n    |\n    = note:           expected enum `Option<&mut [u8]>`\n            found mutable reference `&mut Option<Vec<u8>>`\n@@ -60,7 +60,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:52:38\n    |\n LL |     let Some(a): Option<&mut [u8]> = some else { return };\n-   |                  -----------------   ^^^^ expected `&mut [u8]`, found struct `Vec`\n+   |                  -----------------   ^^^^ expected `Option<&mut [u8]>`, found `Option<Vec<u8>>`\n    |                  |\n    |                  expected due to this\n    |\n@@ -71,7 +71,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:55:38\n    |\n LL |     let Some(a): Option<&mut [u8]> = &mut some else { return };\n-   |                  -----------------   ^^^^^^^^^ expected enum `Option`, found mutable reference\n+   |                  -----------------   ^^^^^^^^^ expected `Option<&mut [u8]>`, found `&mut Option<Vec<u8>>`\n    |                  |\n    |                  expected due to this\n    |"}, {"sha": "535073d6ebb0f1ba20a44ec6c8716bfa05b366b2", "filename": "tests/ui/lifetimes/issue-17728.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flifetimes%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flifetimes%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-17728.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,7 +9,7 @@ LL | |         \"n\" | \"north\" => RoomDirection::North,\n LL | |         \"down\" => RoomDirection::Down,\n    | |                   ------------------- this and all prior arms are found to be of type `RoomDirection`\n LL | |         _ => None\n-   | |              ^^^^ expected enum `RoomDirection`, found enum `Option`\n+   | |              ^^^^ expected `RoomDirection`, found `Option<_>`\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |"}, {"sha": "4dfacb938011569007e91b6fe2832fe04eeeb62b", "filename": "tests/ui/lifetimes/issue-26638.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flifetimes%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flifetimes%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-26638.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-26638.rs:1:69\n    |\n LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n-   |                                                              ----   ^^^^^^^^^^^ expected `&str`, found enum `Option`\n+   |                                                              ----   ^^^^^^^^^^^ expected `&str`, found `Option<&str>`\n    |                                                              |\n    |                                                              expected `&'static str` because of return type\n    |\n@@ -60,7 +60,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-26638.rs:5:47\n    |\n LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n-   |                                        ----   ^^^^^^ expected `str`, found `u8`\n+   |                                        ----   ^^^^^^ expected `&str`, found `&u8`\n    |                                        |\n    |                                        expected `&'static str` because of return type\n    |"}, {"sha": "294476107ef7881a3648aaad69abe8f9b3e29cd9", "filename": "tests/ui/lint/must_not_suspend/tuple-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftuple-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftuple-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftuple-mismatch.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/tuple-mismatch.rs:6:20\n    |\n LL |         yield ((), ());\n-   |                    ^^ expected tuple, found `()`\n+   |                    ^^ expected `((), ())`, found `()`\n    |\n    = note:  expected tuple `((), ())`\n            found unit type `()`"}, {"sha": "5525dbb9005d3dc40bb27cd6a403314a4b8635c6", "filename": "tests/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-break-value.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -167,7 +167,7 @@ error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:80:15\n    |\n LL |         break (break, break);\n-   |               ^^^^^^^^^^^^^^ expected `()`, found tuple\n+   |               ^^^^^^^^^^^^^^ expected `()`, found `(!, !)`\n    |\n    = note: expected unit type `()`\n                   found tuple `(!, !)`"}, {"sha": "195192fbd82409f6290c7358eb66eb2187bf5e20", "filename": "tests/ui/match/issue-12552.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fissue-12552.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |   match t {\n    |         - this expression has type `Result<_, {integer}>`\n LL |     Some(k) => match k {\n-   |     ^^^^^^^ expected enum `Result`, found enum `Option`\n+   |     ^^^^^^^ expected `Result<_, {integer}>`, found `Option<_>`\n    |\n    = note: expected enum `Result<_, {integer}>`\n               found enum `Option<_>`\n@@ -20,7 +20,7 @@ LL |   match t {\n    |         - this expression has type `Result<_, {integer}>`\n ...\n LL |     None => ()\n-   |     ^^^^ expected enum `Result`, found enum `Option`\n+   |     ^^^^ expected `Result<_, {integer}>`, found `Option<_>`\n    |\n    = note: expected enum `Result<_, {integer}>`\n               found enum `Option<_>`"}, {"sha": "12f37274b6b21b489ec93b65723cfb797b156338", "filename": "tests/ui/match/issue-91058.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fissue-91058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fissue-91058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fissue-91058.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match array {\n    |           ----- this expression has type `[S; 1]`\n LL |         [()] => {}\n-   |          ^^ expected struct `S`, found `()`\n+   |          ^^ expected `S`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "4da7b436ba8a82b575b939c97890d96f8db724e0", "filename": "tests/ui/match/match-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fmatch-struct.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     match (S { a: 1 }) {\n         E::C(_) => (),\n         //~^ ERROR mismatched types\n-        //~| expected struct `S`, found enum `E`\n+        //~| expected `S`, found `E`\n         _ => ()\n     }\n }"}, {"sha": "fdc6fd77077e0fca4f0e1230dcc98cd980c287f3", "filename": "tests/ui/match/match-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fmatch-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fmatch-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fmatch-struct.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match (S { a: 1 }) {\n    |           ------------ this expression has type `S`\n LL |         E::C(_) => (),\n-   |         ^^^^^^^ expected struct `S`, found enum `E`\n+   |         ^^^^^^^ expected `S`, found `E`\n \n error: aborting due to previous error\n "}, {"sha": "aac873c760e75ff3cd993dcd2c354004c5925f8e", "filename": "tests/ui/match/match-tag-nullary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -5,7 +5,7 @@ LL | enum B { B }\n    |          - unit variant defined here\n LL |\n LL | fn main() { let x: A = A::A; match x { B::B => { } } }\n-   |                                    -   ^^^^ expected enum `A`, found enum `B`\n+   |                                    -   ^^^^ expected `A`, found `B`\n    |                                    |\n    |                                    this expression has type `A`\n "}, {"sha": "25e8152d8cf50da760bfc7c1c89aeb5e135d34cc", "filename": "tests/ui/match/match-tag-unary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fmatch-tag-unary.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/match-tag-unary.rs:4:43\n    |\n LL | fn main() { let x: A = A::A(0); match x { B::B(y) => { } } }\n-   |                                       -   ^^^^^^^ expected enum `A`, found enum `B`\n+   |                                       -   ^^^^^^^ expected `A`, found `B`\n    |                                       |\n    |                                       this expression has type `A`\n "}, {"sha": "32e269b7ad89f2d28bba1f9b835d03261a26de55", "filename": "tests/ui/methods/issues/issue-61525.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-61525.rs:14:33\n    |\n LL |         1.query::<dyn ToString>(\"\")\n-   |           --------------------- ^^ expected trait object `dyn ToString`, found `&str`\n+   |           --------------------- ^^ expected `dyn ToString`, found `&str`\n    |           |\n    |           arguments to this method are incorrect\n    |"}, {"sha": "0466bb0a0c997dab3eca1b2e1218ae520b39fe13", "filename": "tests/ui/methods/issues/issue-90315.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:28:8\n    |\n LL |     if 1..(end + 1).is_empty() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<{integer}>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`\n@@ -77,7 +77,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:34:8\n    |\n LL |     if 1..(end + 1).is_sorted() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<{integer}>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`\n@@ -97,7 +97,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:40:21\n    |\n LL |     let _res: i32 = 3..6.take(2).sum();\n-   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `Range`\n+   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found `Range<{integer}>`\n    |               |\n    |               expected due to this\n    |\n@@ -119,7 +119,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:45:21\n    |\n LL |     let _sum: i32 = 3..6.sum();\n-   |               ---   ^^^^^^^^^^ expected `i32`, found struct `Range`\n+   |               ---   ^^^^^^^^^^ expected `i32`, found `Range<{integer}>`\n    |               |\n    |               expected due to this\n    |\n@@ -158,7 +158,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:62:8\n    |\n LL |     if 1..end.error_method() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<{integer}>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`"}, {"sha": "5912b4ec2c3cb1855b4d6ca55897c35e65a821c1", "filename": "tests/ui/methods/method-self-arg-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,9 +9,9 @@ impl Foo {\n fn main() {\n     let x = Foo;\n     Foo::bar(x); //~  ERROR mismatched types\n-                 //~| expected `&Foo`, found struct `Foo`\n+                 //~| expected `&Foo`, found `Foo`\n     Foo::bar(&42); //~  ERROR mismatched types\n-                      //~| expected struct `Foo`, found integer\n+                      //~| expected `&Foo`, found `&{integer}`\n                       //~| expected reference `&Foo`\n                       //~| found reference `&{integer}`\n }"}, {"sha": "32ab8dced21980d523cdbbc9a0e084579c629c96", "filename": "tests/ui/methods/method-self-arg-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     Foo::bar(x);\n    |     -------- ^\n    |     |        |\n-   |     |        expected `&Foo`, found struct `Foo`\n+   |     |        expected `&Foo`, found `Foo`\n    |     |        help: consider borrowing here: `&x`\n    |     arguments to this function are incorrect\n    |\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n   --> $DIR/method-self-arg-1.rs:13:14\n    |\n LL |     Foo::bar(&42);\n-   |     -------- ^^^ expected struct `Foo`, found integer\n+   |     -------- ^^^ expected `&Foo`, found `&{integer}`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "6d2fb1ce9cf6287f379a057531aa4a8c5ddc3791", "filename": "tests/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn a() -> Foo {\n    |           --- expected `Foo` because of return type\n LL |     Some(Foo { bar: 1 })\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `Option`\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `Foo`, found `Option<Foo>`\n    |\n    = note: expected struct `Foo`\n                 found enum `Option<Foo>`\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL | fn a2() -> Foo {\n    |            --- expected `Foo` because of return type\n LL |     Ok(Foo { bar: 1})\n-   |     ^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `Result`\n+   |     ^^^^^^^^^^^^^^^^^ expected `Foo`, found `Result<Foo, _>`\n    |\n    = note: expected struct `Foo`\n                 found enum `Result<Foo, _>`\n@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n LL | fn b() -> Option<Foo> {\n    |           ----------- expected `Option<Foo>` because of return type\n LL |     Foo { bar: 1 }\n-   |     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `Foo`\n+   |     ^^^^^^^^^^^^^^ expected `Option<Foo>`, found `Foo`\n    |\n    = note: expected enum `Option<Foo>`\n             found struct `Foo`\n@@ -41,7 +41,7 @@ error[E0308]: mismatched types\n LL | fn c() -> Result<Foo, Bar> {\n    |           ---------------- expected `Result<Foo, Bar>` because of return type\n LL |     Foo { bar: 1 }\n-   |     ^^^^^^^^^^^^^^ expected enum `Result`, found struct `Foo`\n+   |     ^^^^^^^^^^^^^^ expected `Result<Foo, Bar>`, found `Foo`\n    |\n    = note: expected enum `Result<Foo, Bar>`\n             found struct `Foo`\n@@ -57,7 +57,7 @@ LL | fn d() -> X<X<String, String>, String> {\n    |           ---------------------------- expected `X<X<String, String>, String>` because of return type\n ...\n LL |     x\n-   |     ^ expected struct `String`, found integer\n+   |     ^ expected `X<X<String, String>, String>`, found `X<X<String, {integer}>, {integer}>`\n    |\n    = note: expected struct `X<X<_, String>, String>`\n               found struct `X<X<_, {integer}>, {integer}>`\n@@ -69,7 +69,7 @@ LL | fn e() -> X<X<String, String>, String> {\n    |           ---------------------------- expected `X<X<String, String>, String>` because of return type\n ...\n LL |     x\n-   |     ^ expected struct `String`, found integer\n+   |     ^ expected `X<X<String, String>, String>`, found `X<X<String, {integer}>, String>`\n    |\n    = note: expected struct `X<X<_, String>, _>`\n               found struct `X<X<_, {integer}>, _>`\n@@ -80,7 +80,7 @@ error[E0308]: mismatched types\n LL | fn f() -> String {\n    |           ------ expected `String` because of return type\n LL |     1+2\n-   |     ^^^ expected struct `String`, found integer\n+   |     ^^^ expected `String`, found integer\n    |\n help: try using a conversion method\n    |\n@@ -93,7 +93,7 @@ error[E0308]: mismatched types\n LL | fn g() -> String {\n    |           ------ expected `String` because of return type\n LL |     -2\n-   |     ^^ expected struct `String`, found integer\n+   |     ^^ expected `String`, found integer\n    |\n help: try using a conversion method\n    |"}, {"sha": "54abb50d6e8c79c98d65b3df50b7858a71d49bf1", "filename": "tests/ui/mismatched_types/do-not-suggest-boxed-trait-objects-instead-of-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fdo-not-suggest-boxed-trait-objects-instead-of-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fdo-not-suggest-boxed-trait-objects-instead-of-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fdo-not-suggest-boxed-trait-objects-instead-of-impl-trait.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,7 +6,7 @@ LL | |         S\n    | |         - expected because of this\n LL | |     } else {\n LL | |         Y\n-   | |         ^ expected struct `S`, found struct `Y`\n+   | |         ^ expected `S`, found `Y`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n \n@@ -17,7 +17,7 @@ LL | /     match true {\n LL | |         true => S,\n    | |                 - this is found to be of type `S`\n LL | |         false => Y,\n-   | |                  ^ expected struct `S`, found struct `Y`\n+   | |                  ^ expected `S`, found `Y`\n LL | |     }\n    | |_____- `match` arms have incompatible types\n "}, {"sha": "96ab3a029914eaee9184802fab7b8d9e5974f6f2", "filename": "tests/ui/mismatched_types/issue-106182.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fissue-106182.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fissue-106182.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-106182.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this expression has type `&_S`\n LL |         _S(& (mut _y), _v) => {\n-   |            ^^^^^^^^^^ expected `u32`, found reference\n+   |            ^^^^^^^^^^ expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`"}, {"sha": "318285598a0b53e33c8cd1b2d0e8bb1746f5f0db", "filename": "tests/ui/mismatched_types/issue-38371-unfixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n LL | fn bgh(&&bar: u32) {}\n    |        ^^^^^  --- expected due to this\n    |        |\n-   |        expected `u32`, found reference\n+   |        expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`"}, {"sha": "19335c446c3e70c75952f40ec252110b0fed738a", "filename": "tests/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo(&_a: Foo) {}\n    |        ^^^  --- expected due to this\n    |        |\n-   |        expected struct `Foo`, found reference\n+   |        expected `Foo`, found `&_`\n    |\n    = note: expected struct `Foo`\n            found reference `&_`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n LL | fn agh(&&_a: &u32) {}\n    |         ^^^  ---- expected due to this\n    |         |\n-   |         expected `u32`, found reference\n+   |         expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`"}, {"sha": "57db71f889cf709f5a35ba800824c52f638826e9", "filename": "tests/ui/mismatched_types/non_zero_assigned_something.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/non_zero_assigned_something.rs:2:35\n    |\n LL |     let _: std::num::NonZeroU64 = 1;\n-   |            --------------------   ^ expected struct `NonZeroU64`, found integer\n+   |            --------------------   ^ expected `NonZeroU64`, found integer\n    |            |\n    |            expected due to this\n    |\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n   --> $DIR/non_zero_assigned_something.rs:6:43\n    |\n LL |     let _: Option<std::num::NonZeroU64> = 1;\n-   |            ----------------------------   ^ expected enum `Option`, found integer\n+   |            ----------------------------   ^ expected `Option<NonZeroU64>`, found integer\n    |            |\n    |            expected due to this\n    |"}, {"sha": "e3a0646550cb20c7f4e1a8006203fa56e0451cc6", "filename": "tests/ui/mismatched_types/normalize-fn-sig.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,12 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/normalize-fn-sig.rs:14:22\n    |\n LL |     needs_i32_ref_fn(foo::<()>);\n-   |     ---------------- ^^^^^^^^^ expected `&i32`, found `i32`\n+   |     ---------------- ^^^^^^^^^ expected fn pointer, found fn item\n    |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected fn pointer `fn(&'static i32, i32)`\n                  found fn item `fn(i32, &'static i32) {foo::<()>}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n note: function defined here\n   --> $DIR/normalize-fn-sig.rs:11:4\n    |"}, {"sha": "62824004db5bfb71400a45c6ef20d8587efb2d1d", "filename": "tests/ui/mismatched_types/ref-pat-suggestions.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn _f0(&_a: u32) {}\n    |        ^^^  --- expected due to this\n    |        |\n-   |        expected `u32`, found reference\n+   |        expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -41,7 +41,7 @@ error[E0308]: mismatched types\n LL | fn _f2(&&_a: &u32) {}\n    |         ^^^  ---- expected due to this\n    |         |\n-   |         expected `u32`, found reference\n+   |         expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n LL | fn _f3(&mut &_a: &mut u32) {}\n    |             ^^^  -------- expected due to this\n    |             |\n-   |             expected `u32`, found reference\n+   |             expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -106,7 +106,7 @@ LL |     let _: fn(u32) = |&_a| ();\n    |                       ^--\n    |                       ||\n    |                       |expected due to this\n-   |                       expected `u32`, found reference\n+   |                       expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -145,7 +145,7 @@ LL |     let _: fn(&u32) = |&&_a| ();\n    |                         ^--\n    |                         ||\n    |                         |expected due to this\n-   |                         expected `u32`, found reference\n+   |                         expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -162,7 +162,7 @@ LL |     let _: fn(&mut u32) = |&mut &_a| ();\n    |                                 ^--\n    |                                 ||\n    |                                 |expected due to this\n-   |                                 expected `u32`, found reference\n+   |                                 expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -212,7 +212,7 @@ error[E0308]: mismatched types\n LL |     let _ = |&_a: u32| ();\n    |              ^^^  --- expected due to this\n    |              |\n-   |              expected `u32`, found reference\n+   |              expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -249,7 +249,7 @@ error[E0308]: mismatched types\n LL |     let _ = |&&_a: &u32| ();\n    |               ^^^  ---- expected due to this\n    |               |\n-   |               expected `u32`, found reference\n+   |               expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -265,7 +265,7 @@ error[E0308]: mismatched types\n LL |     let _ = |&mut &_a: &mut u32| ();\n    |                   ^^^  -------- expected due to this\n    |                   |\n-   |                   expected `u32`, found reference\n+   |                   expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`"}, {"sha": "4bbeaaab9375504d7049cefa8517a83ee2fabc2a", "filename": "tests/ui/mismatched_types/show_module.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fshow_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fshow_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fshow_module.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL | fn foo() -> Foo {\n    |             --- expected `baz::Foo` because of return type\n LL |     meh::Foo\n-   |     ^^^^^^^^ expected struct `baz::Foo`, found struct `meh::Foo`\n+   |     ^^^^^^^^ expected `baz::Foo`, found `meh::Foo`\n    |\n-   = note: struct `meh::Foo` and struct `baz::Foo` have similar names, but are actually distinct types\n-note: struct `meh::Foo` is defined in module `crate::meh` of the current crate\n+   = note: `meh::Foo` and `baz::Foo` have similar names, but are actually distinct types\n+note: `meh::Foo` is defined in module `crate::meh` of the current crate\n   --> $DIR/show_module.rs:8:5\n    |\n LL |     pub struct Foo;\n    |     ^^^^^^^^^^^^^^\n-note: struct `baz::Foo` is defined in module `crate::blah::baz` of the current crate\n+note: `baz::Foo` is defined in module `crate::blah::baz` of the current crate\n   --> $DIR/show_module.rs:3:9\n    |\n LL |         pub struct Foo;"}, {"sha": "3e44fb759296a32552353f4e53d7cd328544dc51", "filename": "tests/ui/mismatched_types/similar_paths.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,12 +4,12 @@ error[E0308]: mismatched types\n LL | pub fn foo() -> Option<u8> {\n    |                 ---------- expected `Option<u8>` because of return type\n LL |     Some(42_u8)\n-   |     ^^^^^^^^^^^ expected enum `Option`, found enum `std::option::Option`\n+   |     ^^^^^^^^^^^ expected `Option<u8>`, found `std::option::Option<u8>`\n    |\n-   = note: enum `std::option::Option` and enum `Option` have similar names, but are actually distinct types\n-note: enum `std::option::Option` is defined in crate `core`\n+   = note: `std::option::Option<u8>` and `Option<u8>` have similar names, but are actually distinct types\n+note: `std::option::Option<u8>` is defined in crate `core`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-note: enum `Option` is defined in the current crate\n+note: `Option<u8>` is defined in the current crate\n   --> $DIR/similar_paths.rs:1:1\n    |\n LL | enum Option<T> {"}, {"sha": "80e78a4e4fa3cf315060a2b0084b79820920c5ed", "filename": "tests/ui/mismatched_types/similar_paths_primitive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/similar_paths_primitive.rs:8:9\n    |\n LL |     foo(true);\n-   |     --- ^^^^ expected struct `bool`, found `bool`\n+   |     --- ^^^^ expected `bool`, found a different `bool`\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note: bool and struct `bool` have similar names, but are actually distinct types\n+   = note: bool and `bool` have similar names, but are actually distinct types\n    = note: bool is a primitive defined by the language\n-note: struct `bool` is defined in the current crate\n+note: `bool` is defined in the current crate\n   --> $DIR/similar_paths_primitive.rs:3:1\n    |\n LL | struct bool;"}, {"sha": "40182a75a989a5ad1e35a603c798613b50b8291c", "filename": "tests/ui/mismatched_types/suggest-boxed-trait-objects-instead-of-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,7 +6,7 @@ LL | |         S\n    | |         - expected because of this\n LL | |     } else {\n LL | |         Y\n-   | |         ^ expected struct `S`, found struct `Y`\n+   | |         ^ expected `S`, found `Y`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n    |\n@@ -28,7 +28,7 @@ LL | /     match true {\n LL | |         true => S,\n    | |                 - this is found to be of type `S`\n LL | |         false => Y,\n-   | |                  ^ expected struct `S`, found struct `Y`\n+   | |                  ^ expected `S`, found `Y`\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |"}, {"sha": "c5d0eef10265b798cba2f2a271b146b80126dcfc", "filename": "tests/ui/mismatched_types/suggest-removing-tuple-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-removing-tuple-struct-field.rs:11:13\n    |\n LL |     some_fn(value.0);\n-   |     ------- ^^^^^^^ expected struct `MyWrapper`, found `u32`\n+   |     ------- ^^^^^^^ expected `MyWrapper`, found `u32`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-removing-tuple-struct-field.rs:12:13\n    |\n LL |     some_fn(my_wrapper!(123).0);\n-   |     ------- ^^^^^^^^^^^^^^^^^^ expected struct `MyWrapper`, found `u32`\n+   |     ------- ^^^^^^^^^^^^^^^^^^ expected `MyWrapper`, found `u32`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "e20a0aa0e2aee91cd0beb4c3129a3633db5b2555", "filename": "tests/ui/mismatched_types/wrap-suggestion-privacy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/wrap-suggestion-privacy.rs:12:19\n    |\n LL |     needs_wrapper(0);\n-   |     ------------- ^ expected struct `Wrapper`, found integer\n+   |     ------------- ^ expected `Wrapper<i32>`, found integer\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n   --> $DIR/wrap-suggestion-privacy.rs:17:20\n    |\n LL |     needs_wrapping(0);\n-   |     -------------- ^ expected struct `Wrapping`, found integer\n+   |     -------------- ^ expected `Wrapping<i32>`, found integer\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n   --> $DIR/wrap-suggestion-privacy.rs:22:17\n    |\n LL |     needs_ready(Some(0));\n-   |     ----------- ^^^^^^^ expected struct `Ready`, found enum `Option`\n+   |     ----------- ^^^^^^^ expected `Ready<i32>`, found `Option<{integer}>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "8401827e51f82051e403696686e0abc23a1820ec", "filename": "tests/ui/mut/mut-cross-borrowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut%2Fmut-cross-borrowing.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     f(x)\n    |     - ^\n    |     | |\n-   |     | expected `&mut isize`, found struct `Box`\n+   |     | expected `&mut isize`, found `Box<{integer}>`\n    |     | help: consider mutably borrowing here: `&mut x`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "ded13e2707f5f1c222e418315cd8e927a97c664b", "filename": "tests/ui/never_type/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:8:5\n    |\n LL |     &panic!()\n-   |     ^^^^^^^^^ expected `()`, found reference\n+   |     ^^^^^^^^^ expected `()`, found `&_`\n    |\n    = note: expected unit type `()`\n               found reference `&_`\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |           ----- expected `isize` because of return type\n LL |     (return 1, return 2)\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `(!, !)`\n    |\n    = note: expected type `isize`\n              found tuple `(!, !)`"}, {"sha": "5ac4359c5016f436da0b891ea0eef57b021edff5", "filename": "tests/ui/never_type/issue-10176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnever_type%2Fissue-10176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnever_type%2Fissue-10176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-10176.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -3,7 +3,7 @@ fn f() -> isize {\n //~^ ERROR mismatched types\n //~| expected type `isize`\n //~| found tuple `(!, !)`\n-//~| expected `isize`, found tuple\n+//~| expected `isize`, found `(!, !)`\n }\n \n fn main() {}"}, {"sha": "3f381b9aea9b297041752e725be6b25e196ee9c7", "filename": "tests/ui/never_type/issue-10176.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnever_type%2Fissue-10176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnever_type%2Fissue-10176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-10176.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |           ----- expected `isize` because of return type\n LL |     (return 1, return 2)\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `(!, !)`\n    |\n    = note: expected type `isize`\n              found tuple `(!, !)`"}, {"sha": "99dfce869034323b3549a951d8f345b2f0f04179", "filename": "tests/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-52443.rs:2:10\n    |\n LL |     [(); & { loop { continue } } ];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found reference\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `&_`\n    |\n    = note:   expected type `usize`\n            found reference `&_`"}, {"sha": "c3d80a425e0573a1dbb8eed2f65e2bf87c9ffc27", "filename": "tests/ui/never_type/issue-96335.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnever_type%2Fissue-96335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnever_type%2Fissue-96335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-96335.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL |     0.....{loop{}1};\n    |     ----^^^^^^^^^^^\n    |     |   |\n-   |     |   expected integer, found struct `RangeTo`\n+   |     |   expected integer, found `RangeTo<{integer}>`\n    |     arguments to this function are incorrect\n    |\n    = note: expected type `{integer}`"}, {"sha": "d1e94bc702cae7e0225f6f22570492321d62fe12", "filename": "tests/ui/nll/issue-57642-higher-ranked-subtype.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: the function or associated item `make_g` exists for fn pointer `for<'a> fn(&'a ())`, but its trait bounds were not satisfied\n+error[E0599]: the function or associated item `make_g` exists for fn pointer `fn(&())`, but its trait bounds were not satisfied\n   --> $DIR/issue-57642-higher-ranked-subtype.rs:31:25\n    |\n LL |     let x = <fn (&())>::make_g();\n-   |                         ^^^^^^ function or associated item cannot be called on `for<'a> fn(&'a ())` due to unsatisfied trait bounds\n+   |                         ^^^^^^ function or associated item cannot be called on `fn(&())` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `for<'a> fn(&'a ()): X`\n@@ -17,7 +17,7 @@ error[E0599]: no function or associated item named `make_f` found for fn pointer\n   --> $DIR/issue-57642-higher-ranked-subtype.rs:35:25\n    |\n LL |     let x = <fn (&())>::make_f();\n-   |                         ^^^^^^ function or associated item not found in `for<'a> fn(&'a ())`\n+   |                         ^^^^^^ function or associated item not found in `fn(&())`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Y` defines an item `make_f`, perhaps you need to implement it"}, {"sha": "d473ad6c9c93ef197ef8208d5859ace77539da19", "filename": "tests/ui/noexporttypeexe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnoexporttypeexe.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `isize`\n     //~| found enum `Option<isize>`\n-    //~| expected `isize`, found enum `Option`\n+    //~| expected `isize`, found `Option<isize>`\n }"}, {"sha": "26bafd31d011b72d5434af700496a317c8f6dd1f", "filename": "tests/ui/noexporttypeexe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnoexporttypeexe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fnoexporttypeexe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnoexporttypeexe.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/noexporttypeexe.rs:10:18\n    |\n LL |   let x: isize = noexporttypelib::foo();\n-   |          -----   ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n+   |          -----   ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `Option<isize>`\n    |          |\n    |          expected due to this\n    |"}, {"sha": "2c8df3b616fb8ac5c43b02aa07d16ba38d65703a", "filename": "tests/ui/object-pointer-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fobject-pointer-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fobject-pointer-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-pointer-types.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -20,7 +20,7 @@ error[E0599]: no method named `managed` found for struct `Box<(dyn Foo + 'static\n   --> $DIR/object-pointer-types.rs:23:7\n    |\n LL |     x.managed();\n-   |       ^^^^^^^ method not found in `Box<(dyn Foo + 'static)>`\n+   |       ^^^^^^^ method not found in `Box<dyn Foo>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "795c46acb5d31e40ea5b02bd853018dbd1e13786", "filename": "tests/ui/or-patterns/already-bound-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2For-patterns%2Falready-bound-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2For-patterns%2Falready-bound-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2Falready-bound-name.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -88,7 +88,7 @@ error[E0308]: mismatched types\n LL |     let (B(A(a, _) | B(a)) | A(a, A(a, _) | B(a))) = B(B(1));\n    |              -                 ^                     ------- this expression has type `E<E<{integer}>>`\n    |              |                 |\n-   |              |                 expected integer, found enum `E`\n+   |              |                 expected integer, found `E<{integer}>`\n    |              first introduced with type `{integer}` here\n    |\n    = note: expected type `{integer}`"}, {"sha": "5a63e621f4a3ac8dea6ff2d5d313b685d12647ad", "filename": "tests/ui/or-patterns/nested-undelimited-precedence.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2For-patterns%2Fnested-undelimited-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2For-patterns%2Fnested-undelimited-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2Fnested-undelimited-precedence.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n LL |     let &A(_) | B(_): F = A(3);\n    |         ^^^^^         - expected due to this\n    |         |\n-   |         expected enum `F`, found reference\n+   |         expected `F`, found `&_`\n    |\n    = note:   expected enum `F`\n            found reference `&_`\n@@ -53,7 +53,7 @@ error[E0308]: mismatched types\n LL |     let &&A(_) | B(_): F = A(3);\n    |         ^^^^^^         - expected due to this\n    |         |\n-   |         expected enum `F`, found reference\n+   |         expected `F`, found `&_`\n    |\n    = note:   expected enum `F`\n            found reference `&_`\n@@ -64,7 +64,7 @@ error[E0308]: mismatched types\n LL |     let &mut A(_) | B(_): F = A(3);\n    |         ^^^^^^^^^         - expected due to this\n    |         |\n-   |         expected enum `F`, found `&mut _`\n+   |         expected `F`, found `&mut _`\n    |\n    = note:           expected enum `F`\n            found mutable reference `&mut _`\n@@ -75,7 +75,7 @@ error[E0308]: mismatched types\n LL |     let &&mut A(_) | B(_): F = A(3);\n    |         ^^^^^^^^^^         - expected due to this\n    |         |\n-   |         expected enum `F`, found reference\n+   |         expected `F`, found `&_`\n    |\n    = note:   expected enum `F`\n            found reference `&_`"}, {"sha": "d045f4821ff35050998dadd3cfd38e3976f5da83", "filename": "tests/ui/parser/issues/issue-87812-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fparser%2Fissues%2Fissue-87812-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fparser%2Fissues%2Fissue-87812-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-87812-path.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-87812-path.rs:3:24\n    |\n LL |         let _: usize = $f;\n-   |                -----   ^^ expected `usize`, found struct `Baz`\n+   |                -----   ^^ expected `usize`, found `Baz`\n    |                |\n    |                expected due to this\n ..."}, {"sha": "5b69ca5cd6dfa0b6ab4fc111d8b108a7ff13e446", "filename": "tests/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -314,7 +314,7 @@ error[E0308]: mismatched types\n LL |     if let X.. .0 = 0 {}\n    |            -   ^^   - this expression has type `u8`\n    |            |   |\n-   |            |   expected integer, found floating-point number\n+   |            |   expected `u8`, found floating-point number\n    |            this is of type `u8`\n    |\n    = note: expected type `u8`\n@@ -351,7 +351,7 @@ error[E0308]: mismatched types\n LL |     if let X..=.0 = 0 {}\n    |            -   ^^   - this expression has type `u8`\n    |            |   |\n-   |            |   expected integer, found floating-point number\n+   |            |   expected `u8`, found floating-point number\n    |            this is of type `u8`\n    |\n    = note: expected type `u8`\n@@ -388,7 +388,7 @@ error[E0308]: mismatched types\n LL |     if let X... .0 = 0 {}\n    |            -    ^^   - this expression has type `u8`\n    |            |    |\n-   |            |    expected integer, found floating-point number\n+   |            |    expected `u8`, found floating-point number\n    |            this is of type `u8`\n    |\n    = note: expected type `u8`"}, {"sha": "d1725c60dbbea127989a3afe02dc5ad49f090fd6", "filename": "tests/ui/parser/unclosed-delimiter-in-dep.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/unclosed-delimiter-in-dep.rs:4:20\n    |\n LL |     let _: usize = unclosed_delim_mod::new();\n-   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found enum `Result`\n+   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `Result<Value, ()>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "67c6d6f01a17f692659565edd21d4e023b1e86f4", "filename": "tests/ui/pattern/for-loop-bad-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -25,7 +25,7 @@ error[E0308]: mismatched types\n LL |     for Some(Qux(_)) | None in [Some(\"\"), None] {\n    |              ^^^^^^            ---------------- this is an iterator with items of type `Option<&str>`\n    |              |\n-   |              expected `str`, found struct `Qux`\n+   |              expected `str`, found `Qux`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "daab3a862c2e135544c43befff99dfa8d55517c0", "filename": "tests/ui/pattern/issue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let P() = U {};\n    |         ^^^   ---- this expression has type `U`\n    |         |\n-   |         expected struct `U`, found struct `P`\n+   |         expected `U`, found `P<_>`\n    |\n    = note: expected struct `U`\n               found struct `P<_>`"}, {"sha": "029075293106795609d060efa49c28992584f85f", "filename": "tests/ui/pattern/pat-struct-field-expr-has-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpat-struct-field-expr-has-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpat-struct-field-expr-has-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpat-struct-field-expr-has-type.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match (S { f: 42 }) {\n    |           ------------- this expression has type `S`\n LL |         S { f: Ok(_) } => {}\n-   |                ^^^^^ expected `u8`, found enum `Result`\n+   |                ^^^^^ expected `u8`, found `Result<_, _>`\n    |\n    = note: expected type `u8`\n               found enum `Result<_, _>`"}, {"sha": "4f482c52a98f81b2703d5918f9fae657c25464d9", "filename": "tests/ui/pattern/pat-type-err-formal-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpat-type-err-formal-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpat-type-err-formal-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpat-type-err-formal-param.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo(Tuple(_): String) {}\n    |        ^^^^^^^^  ------ expected due to this\n    |        |\n-   |        expected struct `String`, found struct `Tuple`\n+   |        expected `String`, found `Tuple`\n \n error: aborting due to previous error\n "}, {"sha": "b68b69a78a2f7388316c09963e51208ea7610547", "filename": "tests/ui/pattern/pat-type-err-let-stmt.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/pat-type-err-let-stmt.rs:6:29\n    |\n LL |     let Ok(0): Option<u8> = 42u8;\n-   |                ----------   ^^^^ expected enum `Option`, found `u8`\n+   |                ----------   ^^^^ expected `Option<u8>`, found `u8`\n    |                |\n    |                expected due to this\n    |\n@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL |     let Ok(0): Option<u8> = 42u8;\n    |         ^^^^^  ---------- expected due to this\n    |         |\n-   |         expected enum `Option`, found enum `Result`\n+   |         expected `Option<u8>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<u8>`\n               found enum `Result<_, _>`\n@@ -30,7 +30,7 @@ error[E0308]: mismatched types\n LL |     let Ok(0): Option<u8>;\n    |         ^^^^^  ---------- expected due to this\n    |         |\n-   |         expected enum `Option`, found enum `Result`\n+   |         expected `Option<u8>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<u8>`\n               found enum `Result<_, _>`\n@@ -41,7 +41,7 @@ error[E0308]: mismatched types\n LL |     let Ok(0) = 42u8;\n    |         ^^^^^   ---- this expression has type `u8`\n    |         |\n-   |         expected `u8`, found enum `Result`\n+   |         expected `u8`, found `Result<_, _>`\n    |\n    = note: expected type `u8`\n               found enum `Result<_, _>`"}, {"sha": "bed949439237a1f03edbc4cc324fe9a8ba9dbbfe", "filename": "tests/ui/pattern/pattern-error-continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-error-continue.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     match 'c' {\n         S { .. } => (),\n         //~^ ERROR mismatched types\n-        //~| expected `char`, found struct `S`\n+        //~| expected `char`, found `S`\n \n         _ => ()\n     }"}, {"sha": "e1349fb02ea768eebc398170ce0532d0d85fccf0", "filename": "tests/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL |     match 'c' {\n    |           --- this expression has type `char`\n LL |         S { .. } => (),\n-   |         ^^^^^^^^ expected `char`, found struct `S`\n+   |         ^^^^^^^^ expected `char`, found `S`\n \n error[E0308]: mismatched types\n   --> $DIR/pattern-error-continue.rs:28:7"}, {"sha": "62283dfe9b64f4281769544bb9efba24bab7ffad", "filename": "tests/ui/pattern/pattern-ident-path-generics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match Some(\"foo\") {\n    |           ----------- this expression has type `Option<&str>`\n LL |         None::<isize> => {}\n-   |         ^^^^^^^^^^^^^ expected `&str`, found `isize`\n+   |         ^^^^^^^^^^^^^ expected `Option<&str>`, found `Option<isize>`\n    |\n    = note: expected enum `Option<&str>`\n               found enum `Option<isize>`"}, {"sha": "4eb00254861d5d2045f08f8791b24ab6099118ae", "filename": "tests/ui/pattern/pattern-tyvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-tyvar.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match t {\n    |           - this expression has type `Bar`\n LL |       Bar::T1(_, Some::<isize>(x)) => {\n-   |                  ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n+   |                  ^^^^^^^^^^^^^^^^ expected `Option<Vec<isize>>`, found `Option<isize>`\n    |\n    = note: expected enum `Option<Vec<isize>>`\n               found enum `Option<isize>`"}, {"sha": "a8d0d623604060ed19cb517ca95d00f472ec6b54", "filename": "tests/ui/point-to-type-err-cause-on-impl-trait-return-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return-2.rs:9:41\n    |\n LL |             let value: &bool = unsafe { &42 };\n-   |                                         ^^^ expected `bool`, found integer\n+   |                                         ^^^ expected `&bool`, found `&{integer}`\n    |\n    = note: expected reference `&bool`\n               found reference `&{integer}`"}, {"sha": "e69cc3b8cf598c5ec063ec02af3e937779c4357b", "filename": "tests/ui/proc-macro/break-token-spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fproc-macro%2Fbreak-token-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fproc-macro%2Fbreak-token-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fbreak-token-spans.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/break-token-spans.rs:14:32\n    |\n LL |     let a: Option<Option<u8>>= true;\n-   |            ------------------  ^^^^ expected enum `Option`, found `bool`\n+   |            ------------------  ^^^^ expected `Option<Option<u8>>`, found `bool`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "e437bb90b1dfa1843534038d476971e9094012ff", "filename": "tests/ui/proc-macro/issue-37788.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fproc-macro%2Fissue-37788.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fproc-macro%2Fissue-37788.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fissue-37788.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ LL |     // Test that constructing the `visible_parent_map` (in `cstore_impl.rs`\n LL |     std::cell::Cell::new(0)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n    |     |\n-   |     expected `()`, found struct `Cell`\n+   |     expected `()`, found `Cell<{integer}>`\n    |\n    = note: expected unit type `()`\n                  found struct `Cell<{integer}>`"}, {"sha": "0b4dbcba682876f3b60a8e4e2186bb8eb1f396ee", "filename": "tests/ui/proc-macro/resolved-located-at.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fproc-macro%2Fresolved-located-at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fproc-macro%2Fresolved-located-at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fresolved-located-at.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n LL | fn main() {\n    |           - expected `()` because of default return type\n LL |     resolve_located_at!(a b)\n-   |                           ^ expected `()`, found struct `S`\n+   |                           ^ expected `()`, found `S`\n    |\n    = note: this error originates in the macro `resolve_located_at` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d112983848deeba4cbb3328a7c4a7ee9c1bf5752", "filename": "tests/ui/range/issue-54505-no-literals.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505-no-literals.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::Range { start: 0, end: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `Range`\n+   |     |          expected `&_`, found `Range<{integer}>`\n    |     |          help: consider borrowing here: `&std::ops::Range { start: 0, end: 1 }`\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `Range`\n+   |     |          expected `&_`, found `Range<{integer}>`\n    |     |          help: consider borrowing here: `&::std::ops::Range { start: 0, end: 1 }`\n    |     arguments to this function are incorrect\n    |\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::RangeFrom { start: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFrom`\n+   |     |          expected `&_`, found `RangeFrom<{integer}>`\n    |     |          help: consider borrowing here: `&std::ops::RangeFrom { start: 1 }`\n    |     arguments to this function are incorrect\n    |\n@@ -58,7 +58,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::RangeFrom { start: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFrom`\n+   |     |          expected `&_`, found `RangeFrom<{integer}>`\n    |     |          help: consider borrowing here: `&::std::ops::RangeFrom { start: 1 }`\n    |     arguments to this function are incorrect\n    |\n@@ -76,7 +76,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::RangeFull {});\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFull`\n+   |     |          expected `&_`, found `RangeFull`\n    |     |          help: consider borrowing here: `&std::ops::RangeFull {}`\n    |     arguments to this function are incorrect\n    |\n@@ -94,7 +94,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::RangeFull {});\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFull`\n+   |     |          expected `&_`, found `RangeFull`\n    |     |          help: consider borrowing here: `&::std::ops::RangeFull {}`\n    |     arguments to this function are incorrect\n    |\n@@ -112,7 +112,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::RangeInclusive::new(0, 1));\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&std::ops::RangeInclusive::new(0, 1)`\n    |     arguments to this function are incorrect\n    |\n@@ -130,7 +130,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::RangeInclusive::new(0, 1));\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&::std::ops::RangeInclusive::new(0, 1)`\n    |     arguments to this function are incorrect\n    |\n@@ -148,7 +148,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::RangeTo { end: 5 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeTo`\n+   |     |          expected `&_`, found `RangeTo<{integer}>`\n    |     |          help: consider borrowing here: `&std::ops::RangeTo { end: 5 }`\n    |     arguments to this function are incorrect\n    |\n@@ -166,7 +166,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::RangeTo { end: 5 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeTo`\n+   |     |          expected `&_`, found `RangeTo<{integer}>`\n    |     |          help: consider borrowing here: `&::std::ops::RangeTo { end: 5 }`\n    |     arguments to this function are incorrect\n    |\n@@ -184,7 +184,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::RangeToInclusive { end: 5 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&std::ops::RangeToInclusive { end: 5 }`\n    |     arguments to this function are incorrect\n    |\n@@ -202,7 +202,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::RangeToInclusive { end: 5 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&::std::ops::RangeToInclusive { end: 5 }`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "a6a9f89da749362fd4c2ca79dc748f4ca1d14a6c", "filename": "tests/ui/range/issue-54505-no-std.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL |     take_range(0..1);\n    |     ---------- ^^^^\n    |     |          |\n-   |     |          expected reference, found struct `Range`\n+   |     |          expected `&_`, found `Range<{integer}>`\n    |     |          help: consider borrowing here: `&(0..1)`\n    |     arguments to this function are incorrect\n    |\n@@ -34,7 +34,7 @@ error[E0308]: mismatched types\n LL |     take_range(1..);\n    |     ---------- ^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFrom`\n+   |     |          expected `&_`, found `RangeFrom<{integer}>`\n    |     |          help: consider borrowing here: `&(1..)`\n    |     arguments to this function are incorrect\n    |\n@@ -52,7 +52,7 @@ error[E0308]: mismatched types\n LL |     take_range(..);\n    |     ---------- ^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFull`\n+   |     |          expected `&_`, found `RangeFull`\n    |     |          help: consider borrowing here: `&(..)`\n    |     arguments to this function are incorrect\n    |\n@@ -70,7 +70,7 @@ error[E0308]: mismatched types\n LL |     take_range(0..=1);\n    |     ---------- ^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&(0..=1)`\n    |     arguments to this function are incorrect\n    |\n@@ -88,7 +88,7 @@ error[E0308]: mismatched types\n LL |     take_range(..5);\n    |     ---------- ^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeTo`\n+   |     |          expected `&_`, found `RangeTo<{integer}>`\n    |     |          help: consider borrowing here: `&(..5)`\n    |     arguments to this function are incorrect\n    |\n@@ -106,7 +106,7 @@ error[E0308]: mismatched types\n LL |     take_range(..=42);\n    |     ---------- ^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&(..=42)`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "eda047b507a33776fe083e8520e3d984f2917091", "filename": "tests/ui/range/issue-54505.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frange%2Fissue-54505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frange%2Fissue-54505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     take_range(0..1);\n    |     ---------- ^^^^\n    |     |          |\n-   |     |          expected reference, found struct `Range`\n+   |     |          expected `&_`, found `Range<{integer}>`\n    |     |          help: consider borrowing here: `&(0..1)`\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     take_range(1..);\n    |     ---------- ^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFrom`\n+   |     |          expected `&_`, found `RangeFrom<{integer}>`\n    |     |          help: consider borrowing here: `&(1..)`\n    |     arguments to this function are incorrect\n    |\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL |     take_range(..);\n    |     ---------- ^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFull`\n+   |     |          expected `&_`, found `RangeFull`\n    |     |          help: consider borrowing here: `&(..)`\n    |     arguments to this function are incorrect\n    |\n@@ -58,7 +58,7 @@ error[E0308]: mismatched types\n LL |     take_range(0..=1);\n    |     ---------- ^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&(0..=1)`\n    |     arguments to this function are incorrect\n    |\n@@ -76,7 +76,7 @@ error[E0308]: mismatched types\n LL |     take_range(..5);\n    |     ---------- ^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeTo`\n+   |     |          expected `&_`, found `RangeTo<{integer}>`\n    |     |          help: consider borrowing here: `&(..5)`\n    |     arguments to this function are incorrect\n    |\n@@ -94,7 +94,7 @@ error[E0308]: mismatched types\n LL |     take_range(..=42);\n    |     ---------- ^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&(..=42)`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "77595b3678ebc55062a7769eb3bc7be11507291d", "filename": "tests/ui/range/issue-73553-misinterp-range-literal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     demo(tell(1)..tell(10));\n    |     ---- ^^^^^^^^^^^^^^^^^\n    |     |    |\n-   |     |    expected `&Range<usize>`, found struct `Range`\n+   |     |    expected `&Range<usize>`, found `Range<usize>`\n    |     |    help: consider borrowing here: `&(tell(1)..tell(10))`\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     demo(1..10);\n    |     ---- ^^^^^\n    |     |    |\n-   |     |    expected `&Range<usize>`, found struct `Range`\n+   |     |    expected `&Range<usize>`, found `Range<{integer}>`\n    |     |    help: consider borrowing here: `&(1..10)`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "af64b6867bb0c8e376a00985c23a189b6125ac9b", "filename": "tests/ui/regions/issue-102374.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fregions%2Fissue-102374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fregions%2Fissue-102374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fissue-102374.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -7,7 +7,7 @@ LL |     f\n    |     ^ expected `i32`, found fn pointer\n    |\n    = note:    expected type `i32`\n-           found fn pointer `for<'z1, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x, 'y, 'z, 'z0> fn(Cell<...>)`\n+           found fn pointer `fn(Cell<...>)`\n            the full type name has been written to '$TEST_BUILD_DIR/regions/issue-102374/issue-102374.long-type-hash.txt'\n \n error: aborting due to previous error"}, {"sha": "bb5bc6f66a5f24db06667a1eabb8b863ae9cf911", "filename": "tests/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,6 +6,7 @@ LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |\n    = note: expected fn pointer `for<'a, 'b, 'c, 'd> fn(&'a mut &'b isize, &'c mut &'d isize)`\n                  found fn item `for<'a, 'b> fn(&'a mut &isize, &'b mut &isize) {a::<'_, '_>}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error: aborting due to previous error\n "}, {"sha": "dbe9e9b1a2e56eb9de47d959f086d4a7a1645aba", "filename": "tests/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,6 +6,7 @@ LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n    |\n    = note: expected fn pointer `for<'a, 'b, 'c, 'd, 'e, 'f> fn(&'a mut &'b isize, &'c mut &'d isize, &'e mut &'f isize)`\n                  found fn item `for<'a, 'b, 'c> fn(&'a mut &isize, &'b mut &isize, &'c mut &isize) {a::<'_, '_, '_>}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error: aborting due to previous error\n "}, {"sha": "766a3d0337c06019f71da037a035b743a784f9bb", "filename": "tests/ui/regions/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -8,6 +8,7 @@ LL |     want_G(baz);\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'static S`\n                  found fn item `for<'a> fn(&'a S) -> &'a S {baz}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n note: function defined here\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:20:4\n    |"}, {"sha": "df0fd069edcad5a8bf02ba74d13b4fe6f97ba889", "filename": "tests/ui/regions/regions-lifetime-bounds-on-fns.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -6,6 +6,7 @@ LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |\n    = note: expected fn pointer `for<'a, 'b, 'c, 'd> fn(&'a mut &'b isize, &'c mut &'d isize)`\n                  found fn item `for<'a, 'b> fn(&'a mut &isize, &'b mut &isize) {a::<'_, '_>}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error: aborting due to previous error\n "}, {"sha": "9f9034a30c736378396c010ffd5a1afc80da6291", "filename": "tests/ui/reify-intrinsic.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freify-intrinsic.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -8,6 +8,7 @@ LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::tr\n    |\n    = note: expected fn pointer `unsafe extern \"rust-intrinsic\" fn(isize) -> usize`\n                  found fn item `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error[E0606]: casting `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}` as `unsafe extern \"rust-intrinsic\" fn(isize) -> usize` is invalid\n   --> $DIR/reify-intrinsic.rs:11:13"}, {"sha": "18610bc5bb086c6e808369de1aa2fc48022a67f4", "filename": "tests/ui/repeat-expr/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frepeat-expr%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frepeat-expr%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepeat-expr%2Frepeat_count.rs?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -30,5 +30,5 @@ fn main() {\n     }\n     let g = [0; G { g: () }];\n     //~^ ERROR mismatched types\n-    //~| expected `usize`, found struct `G`\n+    //~| expected `usize`, found `G`\n }"}, {"sha": "8a1ed8f3b9c7c9d720190a23ae084b0939619df6", "filename": "tests/ui/repeat-expr/repeat_count.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frepeat-expr%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frepeat-expr%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepeat-expr%2Frepeat_count.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -34,7 +34,7 @@ error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:31:17\n    |\n LL |     let g = [0; G { g: () }];\n-   |                 ^^^^^^^^^^^ expected `usize`, found struct `G`\n+   |                 ^^^^^^^^^^^ expected `usize`, found `G`\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:19:17"}, {"sha": "fffd3027afdb35a7c1c933fc8e7f6ea3a59464ca", "filename": "tests/ui/resolve/name-clash-nullary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fresolve%2Fname-clash-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fresolve%2Fname-clash-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fname-clash-nullary.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |   let None: isize = 42;\n    |       ^^^^  ----- expected due to this\n    |       |\n-   |       expected `isize`, found enum `Option`\n+   |       expected `isize`, found `Option<_>`\n    |\n    = note: expected type `isize`\n               found enum `Option<_>`"}, {"sha": "3c051429fd0e979b99ddfa3238776c8980ecb8de", "filename": "tests/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -267,7 +267,7 @@ LL |             Fn(u8),\n    |             -- `Fn` defines an enum variant constructor here, which should be called\n ...\n LL |         let _: Z = Z::Fn;\n-   |                -   ^^^^^ expected enum `Z`, found enum constructor\n+   |                -   ^^^^^ expected `Z`, found enum constructor\n    |                |\n    |                expected due to this\n    |\n@@ -308,7 +308,7 @@ LL |         Fn(u8),\n    |         -- `Fn` defines an enum variant constructor here, which should be called\n ...\n LL |     let _: E = m::E::Fn;\n-   |            -   ^^^^^^^^ expected enum `E`, found enum constructor\n+   |            -   ^^^^^^^^ expected `E`, found enum constructor\n    |            |\n    |            expected due to this\n    |\n@@ -349,7 +349,7 @@ LL |         Fn(u8),\n    |         -- `Fn` defines an enum variant constructor here, which should be called\n ...\n LL |     let _: E = E::Fn;\n-   |            -   ^^^^^ expected enum `E`, found enum constructor\n+   |            -   ^^^^^ expected `E`, found enum constructor\n    |            |\n    |            expected due to this\n    |"}, {"sha": "023db303dd0f18c3ece397a84a99bf27ae64f694", "filename": "tests/ui/resolve/resolve-inconsistent-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -87,7 +87,7 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this expression has type `(E, E)`\n LL |         (A, B) | (ref B, c) | (c, A) => ()\n-   |             -     ^^^^^ expected enum `E`, found `&E`\n+   |             -     ^^^^^ expected `E`, found `&E`\n    |             |\n    |             first introduced with type `E` here\n    |"}, {"sha": "60d538eba882abcc143e5441e06a0b21b2e13dbc", "filename": "tests/ui/return/return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Freturn%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Freturn%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn%2Freturn-type.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/return-type.rs:10:5\n    |\n LL |     foo(4 as usize)\n-   |     ^^^^^^^^^^^^^^^ expected `()`, found struct `S`\n+   |     ^^^^^^^^^^^^^^^ expected `()`, found `S<usize>`\n    |\n    = note: expected unit type `()`\n                  found struct `S<usize>`"}, {"sha": "ccb208fc6c4aeabe9673c8abd35c2da48b98a67b", "filename": "tests/ui/return/tail-expr-as-potential-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL | /     if x {\n LL | |         Err(42)\n-   | |         ^^^^^^^ expected `()`, found enum `Result`\n+   | |         ^^^^^^^ expected `()`, found `Result<_, {integer}>`\n LL | |                 //| HELP you might have meant to return this value\n LL | |     }\n    | |_____- expected this to be `()`\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n    |\n LL | /     if x {\n LL | |         Err(42)\n-   | |         ^^^^^^^ expected `()`, found enum `Result`\n+   | |         ^^^^^^^ expected `()`, found `Result<_, {integer}>`\n LL | |                 //| HELP you might have meant to return this value\n LL | |     }\n    | |_____- expected this to be `()`"}, {"sha": "fc06de90a00310907baed4fad471e5d234e0b1d4", "filename": "tests/ui/rfc-2005-default-binding-mode/const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f361413cbf44ce2f144df59fc440cd484af4a56e/tests%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr?ref=f361413cbf44ce2f144df59fc440cd484af4a56e", "patch": "@@ -9,7 +9,7 @@ LL |     match &f {\n LL |         FOO => {},\n    |         ^^^\n    |         |\n-   |         expected `&Foo`, found struct `Foo`\n+   |         expected `&Foo`, found `Foo`\n    |         `FOO` is interpreted as a constant, not a new binding\n    |         help: introduce a new binding instead: `other_foo`\n "}]}