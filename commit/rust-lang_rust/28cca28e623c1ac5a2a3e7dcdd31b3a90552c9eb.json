{"sha": "28cca28e623c1ac5a2a3e7dcdd31b3a90552c9eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Y2NhMjhlNjIzYzFhYzVhMmEzZTdkY2RkMzFiM2E5MDU1MmM5ZWI=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-01-03T09:44:54Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-01-03T09:51:37Z"}, "message": "Improve `make_hash` function\n\nThe `make_hash` function is used to prevent hashes of non-empty\nbuckets to collide with `EMPTY_HASH = 0u64`. Ideally this function\nalso preserve the uniform distribution of hashes and is cheap to\ncompute.\n\nThe new implementation reduces the input hash size by one bit, simply\nby setting the most significant bit. This obviously prevent output\nhashes to collide with `EMPTY_HASH` and guarantees that the uniform\ndistribution is preserved. Moreover, the new function is simpler (no\ncomparisons, just an OR) and (under the same assumptions as the old\nfunction, i.e. only the least significant bit will contribute to the\nbucket index) no additional collisions are caused.", "tree": {"sha": "3ae0cb583ce95c74070b9ab81d168599e4d009a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ae0cb583ce95c74070b9ab81d168599e4d009a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28cca28e623c1ac5a2a3e7dcdd31b3a90552c9eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28cca28e623c1ac5a2a3e7dcdd31b3a90552c9eb", "html_url": "https://github.com/rust-lang/rust/commit/28cca28e623c1ac5a2a3e7dcdd31b3a90552c9eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28cca28e623c1ac5a2a3e7dcdd31b3a90552c9eb/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2ba13939aa9672d886beb06efde7aeda2d5f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2ba13939aa9672d886beb06efde7aeda2d5f7f", "html_url": "https://github.com/rust-lang/rust/commit/fc2ba13939aa9672d886beb06efde7aeda2d5f7f"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "85298665021830b3ef5b25e2ea0dc1ff19413d6a", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28cca28e623c1ac5a2a3e7dcdd31b3a90552c9eb/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cca28e623c1ac5a2a3e7dcdd31b3a90552c9eb/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=28cca28e623c1ac5a2a3e7dcdd31b3a90552c9eb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -139,13 +139,11 @@ impl SafeHash {\n /// This function wraps up `hash_keyed` to be the only way outside this\n /// module to generate a SafeHash.\n pub fn make_hash<Sized? T: Hash<S>, S, H: Hasher<S>>(hasher: &H, t: &T) -> SafeHash {\n-    match hasher.hash(t) {\n-        // This constant is exceedingly likely to hash to the same\n-        // bucket, but it won't be counted as empty! Just so we can maintain\n-        // our precious uniform distribution of initial indexes.\n-        EMPTY_BUCKET => SafeHash { hash: 0x8000_0000_0000_0000 },\n-        h            => SafeHash { hash: h },\n-    }\n+    // We need to avoid 0u64 in order to prevent collisions with\n+    // EMPTY_HASH. We can maintain our precious uniform distribution\n+    // of initial indexes by unconditionally setting the MSB,\n+    // effectively reducing 64-bits hashes to 63 bits.\n+    SafeHash { hash: 0x8000_0000_0000_0000 | hasher.hash(t) }\n }\n \n // `replace` casts a `*u64` to a `*SafeHash`. Since we statically"}]}