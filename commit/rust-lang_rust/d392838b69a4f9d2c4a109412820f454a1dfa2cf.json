{"sha": "d392838b69a4f9d2c4a109412820f454a1dfa2cf", "node_id": "C_kwDOAAsO6NoAKGQzOTI4MzhiNjlhNGY5ZDJjNGExMDk0MTI4MjBmNDU0YTFkZmEyY2Y", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-08T15:18:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-08T15:18:34Z"}, "message": "Rollup merge of #98933 - oli-obk:opaque_type_late_bound_lifetimes, r=lcnr\n\nOpaque types' generic params do not imply anything about their hidden type's lifetimes\n\nfixes #97104\n\ncc ```@aliemjay```", "tree": {"sha": "5e7d88f006650886e25130f43be4a6b9424447de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7d88f006650886e25130f43be4a6b9424447de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d392838b69a4f9d2c4a109412820f454a1dfa2cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGgfKCRBK7hj4Ov3rIwAAyhsIADgZ1K7PZvHJVRf99DITKq41\nr4fdrMGNwWjo0TxLXJhdCbI48jg6722hOEOF46wMWN/QmW8i0t3+ZrOkjzVle1Do\n12T9eCLMoOHJHyYvbdxpneFtR6EmtlOYIGd1AJqY2wJVzropOqmE93DAJhOkenLx\nKhvolr3tFFPt+ASmWtl1vcLBvTO4SSyOSsDZckOKBP8bH/4P2iVc+5zRwm/z2oEB\nupQj5FOczAVs5luQOZA8hqR3wUpfydL/hBDWYOVLWLjoriOCrtAWogxSYx8T/mkB\n0eMV5Ds5wVs4WtwyvsNpBw9JrMI6jt76PXnMkvW+y9F5aYkxSHA8VbCPJPdqBYQ=\n=WsTB\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e7d88f006650886e25130f43be4a6b9424447de\nparent ccb5595df2ed412eda6444edc7eaf06f709fa79d\nparent 64d11fc8e336344a8b8a55a55131ded4be26cebd\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662650314 +0530\ncommitter GitHub <noreply@github.com> 1662650314 +0530\n\nRollup merge of #98933 - oli-obk:opaque_type_late_bound_lifetimes, r=lcnr\n\nOpaque types' generic params do not imply anything about their hidden type's lifetimes\n\nfixes #97104\n\ncc ```@aliemjay```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d392838b69a4f9d2c4a109412820f454a1dfa2cf", "html_url": "https://github.com/rust-lang/rust/commit/d392838b69a4f9d2c4a109412820f454a1dfa2cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d392838b69a4f9d2c4a109412820f454a1dfa2cf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccb5595df2ed412eda6444edc7eaf06f709fa79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb5595df2ed412eda6444edc7eaf06f709fa79d", "html_url": "https://github.com/rust-lang/rust/commit/ccb5595df2ed412eda6444edc7eaf06f709fa79d"}, {"sha": "64d11fc8e336344a8b8a55a55131ded4be26cebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d11fc8e336344a8b8a55a55131ded4be26cebd", "html_url": "https://github.com/rust-lang/rust/commit/64d11fc8e336344a8b8a55a55131ded4be26cebd"}], "stats": {"total": 136, "additions": 127, "deletions": 9}, "files": [{"sha": "5f8cb578202103e26f38aca5f58639f022af4913", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d392838b69a4f9d2c4a109412820f454a1dfa2cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d392838b69a4f9d2c4a109412820f454a1dfa2cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=d392838b69a4f9d2c4a109412820f454a1dfa2cf", "patch": "@@ -666,7 +666,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // ignore the inputs to a projection, as they may not appear\n         // in the normalized form\n         if self.just_constrained {\n-            if let ty::Projection(..) = t.kind() {\n+            if let ty::Projection(..) | ty::Opaque(..) = t.kind() {\n                 return ControlFlow::CONTINUE;\n             }\n         }"}, {"sha": "d66cf6d099ad538a3e570326131b2418b2032858", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d392838b69a4f9d2c4a109412820f454a1dfa2cf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d392838b69a4f9d2c4a109412820f454a1dfa2cf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=d392838b69a4f9d2c4a109412820f454a1dfa2cf", "patch": "@@ -2940,8 +2940,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // though we can easily give a hint that ought to be\n                 // relevant.\n                 err.note(\n-                    \"lifetimes appearing in an associated type are not considered constrained\",\n+                    \"lifetimes appearing in an associated or opaque type are not considered constrained\",\n                 );\n+                err.note(\"consider introducing a named lifetime parameter\");\n             }\n \n             err.emit();"}, {"sha": "499bbd6b6fad2e1a6cdcf821cbe26c39a2254487", "filename": "src/test/ui/associated-types/issue-62200.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.rs?ref=d392838b69a4f9d2c4a109412820f454a1dfa2cf", "patch": "@@ -10,6 +10,7 @@ impl T<'_> for S {\n \n fn foo(x: impl Fn(<S as T<'_>>::A) -> <S as T<'_>>::A) {}\n //~^ ERROR binding for associated type `Output` references an anonymous lifetime\n-//~^^ NOTE lifetimes appearing in an associated type are not considered constrained\n+//~| NOTE lifetimes appearing in an associated or opaque type are not considered constrained\n+//~| NOTE consider introducing a named lifetime parameter\n \n fn main() {}"}, {"sha": "04f0728f58ea86bb68a6d0df3130080757797c79", "filename": "src/test/ui/associated-types/issue-62200.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.stderr?ref=d392838b69a4f9d2c4a109412820f454a1dfa2cf", "patch": "@@ -4,7 +4,8 @@ error[E0582]: binding for associated type `Output` references an anonymous lifet\n LL | fn foo(x: impl Fn(<S as T<'_>>::A) -> <S as T<'_>>::A) {}\n    |                                       ^^^^^^^^^^^^^^^\n    |\n-   = note: lifetimes appearing in an associated type are not considered constrained\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n \n error: aborting due to previous error\n "}, {"sha": "9998ee0e8d0c69c801528a509eb6371d10af4f86", "filename": "src/test/ui/issues/issue-47511.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr?ref=d392838b69a4f9d2c4a109412820f454a1dfa2cf", "patch": "@@ -4,7 +4,8 @@ error[E0581]: return type references an anonymous lifetime, which is not constra\n LL | fn f(_: X) -> X {\n    |               ^\n    |\n-   = note: lifetimes appearing in an associated type are not considered constrained\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n \n error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n   --> $DIR/issue-47511.rs:12:23"}, {"sha": "03fb64b7b94d7ea02224ae7cc4b5060e847a1133", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs?ref=d392838b69a4f9d2c4a109412820f454a1dfa2cf", "patch": "@@ -1,17 +1,33 @@\n-// check-pass\n-\n #![feature(type_alias_impl_trait)]\n \n-mod foo {\n+mod lifetime_params {\n     type Ty<'a> = impl Sized;\n     fn defining(s: &str) -> Ty<'_> { s }\n     fn execute(ty: Ty<'_>) -> &str { todo!() }\n+    //~^ ERROR return type references an anonymous lifetime, which is not constrained by the fn input types\n+\n+    type BadFnSig = fn(Ty<'_>) -> &str;\n+    //~^ ERROR return type references an anonymous lifetime, which is not constrained by the fn input types\n+    type BadTraitRef = dyn Fn(Ty<'_>) -> &str;\n+    //~^ ERROR binding for associated type `Output` references an anonymous lifetime\n }\n \n-mod bar {\n+mod lifetime_params_2 {\n     type Ty<'a> = impl FnOnce() -> &'a str;\n     fn defining(s: &str) -> Ty<'_> { move || s }\n     fn execute(ty: Ty<'_>) -> &str { ty() }\n+    //~^ ERROR return type references an anonymous lifetime, which is not constrained by the fn input types\n+}\n+\n+// regression test for https://github.com/rust-lang/rust/issues/97104\n+mod type_params {\n+    type Ty<T> = impl Sized;\n+    fn define<T>(s: T) -> Ty<T> { s }\n+\n+    type BadFnSig = fn(Ty<&str>) -> &str;\n+    //~^ ERROR return type references an anonymous lifetime, which is not constrained by the fn input types\n+    type BadTraitRef = dyn Fn(Ty<&str>) -> &str;\n+    //~^ ERROR binding for associated type `Output` references an anonymous lifetime\n }\n \n fn main() {}"}, {"sha": "93953fd06d1fd70687432f25f19f175edcafcfb3", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.stderr?ref=d392838b69a4f9d2c4a109412820f454a1dfa2cf", "patch": "@@ -0,0 +1,58 @@\n+error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n+  --> $DIR/constrain_inputs.rs:6:31\n+   |\n+LL |     fn execute(ty: Ty<'_>) -> &str { todo!() }\n+   |                               ^^^^\n+   |\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n+\n+error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n+  --> $DIR/constrain_inputs.rs:9:35\n+   |\n+LL |     type BadFnSig = fn(Ty<'_>) -> &str;\n+   |                                   ^^^^\n+   |\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n+\n+error[E0582]: binding for associated type `Output` references an anonymous lifetime, which does not appear in the trait input types\n+  --> $DIR/constrain_inputs.rs:11:42\n+   |\n+LL |     type BadTraitRef = dyn Fn(Ty<'_>) -> &str;\n+   |                                          ^^^^\n+   |\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n+\n+error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n+  --> $DIR/constrain_inputs.rs:18:31\n+   |\n+LL |     fn execute(ty: Ty<'_>) -> &str { ty() }\n+   |                               ^^^^\n+   |\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n+\n+error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n+  --> $DIR/constrain_inputs.rs:27:37\n+   |\n+LL |     type BadFnSig = fn(Ty<&str>) -> &str;\n+   |                                     ^^^^\n+   |\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n+\n+error[E0582]: binding for associated type `Output` references an anonymous lifetime, which does not appear in the trait input types\n+  --> $DIR/constrain_inputs.rs:29:44\n+   |\n+LL |     type BadTraitRef = dyn Fn(Ty<&str>) -> &str;\n+   |                                            ^^^^\n+   |\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0581, E0582.\n+For more information about an error, try `rustc --explain E0581`."}, {"sha": "3bae0f1730994d50d4d69450ab309422938165eb", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs_unsound.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.rs?ref=d392838b69a4f9d2c4a109412820f454a1dfa2cf", "patch": "@@ -0,0 +1,31 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Static: 'static {}\n+impl Static for () {}\n+\n+type Gal<T> = impl Static;\n+fn _defining<T>() -> Gal<T> {}\n+\n+trait Callable<Arg> { type Output; }\n+\n+/// We can infer `<C as Callable<Arg>>::Output: 'static`,\n+/// because we know `C: 'static` and `Arg: 'static`,\n+fn box_str<C, Arg>(s: C::Output) -> Box<dyn AsRef<str> + 'static>\n+where\n+    Arg: Static,\n+    C: ?Sized + Callable<Arg> + 'static,\n+    C::Output: AsRef<str>,\n+{\n+    Box::new(s)\n+}\n+\n+fn extend_lifetime(s: &str) -> Box<dyn AsRef<str> + 'static> {\n+    type MalformedTy = dyn for<'a> Callable<Gal<&'a ()>, Output = &'a str>;\n+    //~^ ERROR binding for associated type `Output` references lifetime `'a`\n+    box_str::<MalformedTy, _>(s)\n+}\n+\n+fn main() {\n+    let extended = extend_lifetime(&String::from(\"hello\"));\n+    println!(\"{}\", extended.as_ref().as_ref());\n+}"}, {"sha": "d5fc46cb1f596d01c889402106e20d229205c6e9", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs_unsound.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d392838b69a4f9d2c4a109412820f454a1dfa2cf/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.stderr?ref=d392838b69a4f9d2c4a109412820f454a1dfa2cf", "patch": "@@ -0,0 +1,9 @@\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/constrain_inputs_unsound.rs:23:58\n+   |\n+LL |     type MalformedTy = dyn for<'a> Callable<Gal<&'a ()>, Output = &'a str>;\n+   |                                                          ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0582`."}]}