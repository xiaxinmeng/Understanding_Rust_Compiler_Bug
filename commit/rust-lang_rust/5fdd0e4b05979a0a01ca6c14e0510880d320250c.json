{"sha": "5fdd0e4b05979a0a01ca6c14e0510880d320250c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZGQwZTRiMDU5NzlhMGEwMWNhNmMxNGUwNTEwODgwZDMyMDI1MGM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-05-19T20:29:41Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-05-28T19:42:21Z"}, "message": "Add AST node for pattern macros", "tree": {"sha": "39cf0ef1e32d62913e2df001f2ff06db5cf3b2dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39cf0ef1e32d62913e2df001f2ff06db5cf3b2dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fdd0e4b05979a0a01ca6c14e0510880d320250c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdd0e4b05979a0a01ca6c14e0510880d320250c", "html_url": "https://github.com/rust-lang/rust/commit/5fdd0e4b05979a0a01ca6c14e0510880d320250c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fdd0e4b05979a0a01ca6c14e0510880d320250c/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28a4ee5eeb6a7450f5c16b902504992e990c7042", "url": "https://api.github.com/repos/rust-lang/rust/commits/28a4ee5eeb6a7450f5c16b902504992e990c7042", "html_url": "https://github.com/rust-lang/rust/commit/28a4ee5eeb6a7450f5c16b902504992e990c7042"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "3f7bfefe27e578d911dde59fb45f9e2617403ceb", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -142,6 +142,10 @@ impl<'a> CFGBuilder<'a> {\n                     self.pats_all(post.iter().map(|p| *p), vec_exit);\n                 self.add_node(pat.id, [post_exit])\n             }\n+\n+            ast::PatMac(_) => {\n+                self.tcx.sess.span_bug(pat.span, \"unexpanded macro\");\n+            }\n         }\n     }\n "}, {"sha": "bbea1349c14749f167aec8d6ab423e33ecb9ad9c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -392,6 +392,7 @@ fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n           None => Some(vec(before.len() + after.len()))\n         }\n       }\n+      PatMac(_) => cx.tcx.sess.bug(\"unexpanded macro\"),\n     }\n }\n \n@@ -849,6 +850,10 @@ fn specialize(cx: &MatchCheckCtxt,\n                     _ => None\n                 }\n             }\n+            PatMac(_) => {\n+                cx.tcx.sess.span_err(pat_span, \"unexpanded macro\");\n+                None\n+            }\n         }\n     }\n }\n@@ -947,6 +952,7 @@ fn find_refutable(cx: &MatchCheckCtxt, pat: &Pat, spans: &mut Vec<Span>) {\n       }\n       PatEnum(_,_) => {}\n       PatVec(..) => { this_pattern!() }\n+      PatMac(_) => cx.tcx.sess.bug(\"unexpanded macro\"),\n     }\n }\n "}, {"sha": "10357ef3d567754a45417897f65f1cbb02e092a5", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -1088,6 +1088,10 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n           ast::PatLit(_) | ast::PatRange(_, _) => {\n               /*always ok*/\n           }\n+\n+          ast::PatMac(_) => {\n+              self.tcx().sess.span_bug(pat.span, \"unexpanded macro\");\n+          }\n         }\n \n         Ok(())"}, {"sha": "8df57e7adfbe82b723d7fcd3b9db796bb1a4bf24", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -2282,6 +2282,9 @@ fn bind_irrefutable_pat<'a>(\n             bcx.sess().span_bug(pat.span,\n                                 \"vector patterns are never irrefutable!\");\n         }\n+        ast::PatMac(..) => {\n+            bcx.sess().span_bug(pat.span, \"unexpanded macro\");\n+        }\n         ast::PatWild | ast::PatWildMulti | ast::PatLit(_) | ast::PatRange(_, _) => ()\n     }\n     return bcx;"}, {"sha": "744200c80e8a45a1d9bd926f735337ea9bf1893a", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -2664,6 +2664,11 @@ fn populate_scope_map(cx: &CrateContext,\n                     walk_pattern(cx, sub_pat, scope_stack, scope_map);\n                 }\n             }\n+\n+            ast::PatMac(_) => {\n+                cx.sess().span_bug(pat.span, \"debuginfo::populate_scope_map() - \\\n+                                              Found unexpanded macro.\");\n+            }\n         }\n     }\n "}, {"sha": "e223f4001dfd6dff6834f86fd01dfcb5de18846c", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -722,6 +722,8 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n         }\n         fcx.write_ty(pat.id, expected);\n       }\n+\n+      ast::PatMac(_) => tcx.sess.bug(\"unexpanded macro\"),\n     }\n }\n "}, {"sha": "48e390b35fb103dc81934d7d805c093a14de754a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -1731,7 +1731,12 @@ fn name_from_pat(p: &ast::Pat) -> String {\n         PatRange(..) => fail!(\"tried to get argument name from PatRange, \\\n                               which is not allowed in function arguments\"),\n         PatVec(..) => fail!(\"tried to get argument name from pat_vec, \\\n-                             which is not allowed in function arguments\")\n+                             which is not allowed in function arguments\"),\n+        PatMac(..) => {\n+            warn!(\"can't document the name of a function argument \\\n+                   produced by a pattern macro\");\n+            \"(argument produced by macro)\".to_string()\n+        }\n     }\n }\n "}, {"sha": "edeff1229bd91ee1ad954d2751f62b8ee6bf588b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -353,7 +353,8 @@ pub enum Pat_ {\n     PatRange(@Expr, @Expr),\n     // [a, b, ..i, y, z] is represented as\n     // PatVec(~[a, b], Some(i), ~[y, z])\n-    PatVec(Vec<@Pat> , Option<@Pat>, Vec<@Pat> )\n+    PatVec(Vec<@Pat> , Option<@Pat>, Vec<@Pat> ),\n+    PatMac(Mac),\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash, Show)]"}, {"sha": "5b61cd45483ac2d2eac0a35654c6ad6299a31d4e", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -665,6 +665,7 @@ pub fn walk_pat(pat: &Pat, it: |&Pat| -> bool) -> bool {\n                 slice.iter().advance(|&p| walk_pat(p, |p| it(p))) &&\n                 after.iter().advance(|&p| walk_pat(p, |p| it(p)))\n         }\n+        PatMac(_) => fail!(\"attempted to analyze unexpanded pattern\"),\n         PatWild | PatWildMulti | PatLit(_) | PatRange(_, _) | PatIdent(_, _, _) |\n         PatEnum(_, _) => {\n             true"}, {"sha": "b66d1f7eae58258cd448c12aa399be6e35ce3c8d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -770,6 +770,7 @@ pub fn noop_fold_pat<T: Folder>(p: @Pat, folder: &mut T) -> @Pat {\n                     slice.map(|x| folder.fold_pat(x)),\n                     after.iter().map(|x| folder.fold_pat(*x)).collect())\n         }\n+        PatMac(ref mac) => PatMac(folder.fold_mac(mac)),\n     };\n \n     @Pat {"}, {"sha": "3127085ffedca2684a070b01cd97abe6eb3e7050", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -1757,6 +1757,7 @@ impl<'a> State<'a> {\n                                    |s, &p| s.print_pat(p)));\n                 try!(word(&mut self.s, \"]\"));\n             }\n+            ast::PatMac(ref m) => try!(self.print_mac(m)),\n         }\n         self.ann.post(self, NodePat(pat))\n     }"}, {"sha": "eb7aeb0e327a0e116386ecfb18c32c69de2df2b1", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdd0e4b05979a0a01ca6c14e0510880d320250c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5fdd0e4b05979a0a01ca6c14e0510880d320250c", "patch": "@@ -457,6 +457,7 @@ pub fn walk_pat<E: Clone, V: Visitor<E>>(visitor: &mut V, pattern: &Pat, env: E)\n                 visitor.visit_pat(*postpattern, env.clone())\n             }\n         }\n+        PatMac(ref macro) => visitor.visit_mac(macro, env),\n     }\n }\n "}]}