{"sha": "6b30d508f7c624140b34ccd677bd66e5830bac6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMzBkNTA4ZjdjNjI0MTQwYjM0Y2NkNjc3YmQ2NmU1ODMwYmFjNmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-21T15:52:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-21T15:52:02Z"}, "message": "Fix some FIXME's and add some new FIXME's", "tree": {"sha": "5d09b1ae3326774a3da1a6833c47ad0a64aac427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d09b1ae3326774a3da1a6833c47ad0a64aac427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b30d508f7c624140b34ccd677bd66e5830bac6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b30d508f7c624140b34ccd677bd66e5830bac6c", "html_url": "https://github.com/rust-lang/rust/commit/6b30d508f7c624140b34ccd677bd66e5830bac6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b30d508f7c624140b34ccd677bd66e5830bac6c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9db3e781760a5fafd125259a21b63bcf734af07", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9db3e781760a5fafd125259a21b63bcf734af07", "html_url": "https://github.com/rust-lang/rust/commit/e9db3e781760a5fafd125259a21b63bcf734af07"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "49bbc1da606a4c58dc64594d134b1b2a00e4a01b", "filename": "src/archive.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b30d508f7c624140b34ccd677bd66e5830bac6c/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b30d508f7c624140b34ccd677bd66e5830bac6c/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=6b30d508f7c624140b34ccd677bd66e5830bac6c", "patch": "@@ -184,15 +184,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                     let (ref src_archive_path, ref mut src_archive) =\n                         self.src_archives[archive_index];\n                     let entry = src_archive.jump_to_entry(entry_index).unwrap();\n-                    let orig_header = entry.header();\n-\n-                    // FIXME implement clone for `ar::Archive`.\n-                    let mut header =\n-                        ar::Header::new(orig_header.identifier().to_vec(), orig_header.size());\n-                    header.set_mtime(orig_header.mtime());\n-                    header.set_uid(orig_header.uid());\n-                    header.set_gid(orig_header.gid());\n-                    header.set_mode(orig_header.mode());\n+                    let header = entry.header().clone();\n \n                     match builder {\n                         BuilderKind::Bsd(ref mut builder) => {"}, {"sha": "4a865fdb7314227a94b40f0c62316b32746af81f", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b30d508f7c624140b34ccd677bd66e5830bac6c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b30d508f7c624140b34ccd677bd66e5830bac6c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6b30d508f7c624140b34ccd677bd66e5830bac6c", "patch": "@@ -432,7 +432,6 @@ fn trans_stmt<'tcx>(\n                         UnOp::Not => {\n                             match layout.ty.kind {\n                                 ty::Bool => {\n-                                    let val = fx.bcx.ins().uextend(types::I32, val); // WORKAROUND for CraneStation/cranelift#466\n                                     let res = fx.bcx.ins().icmp_imm(IntCC::Equal, val, 0);\n                                     CValue::by_val(fx.bcx.ins().bint(types::I8, res), layout)\n                                 }"}, {"sha": "363abb8cd772bb5c6a3741215abdaf233574b77c", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b30d508f7c624140b34ccd677bd66e5830bac6c/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b30d508f7c624140b34ccd677bd66e5830bac6c/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=6b30d508f7c624140b34ccd677bd66e5830bac6c", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> DebugContext<'tcx> {\n \n         // FIXME: how to get version when building out of tree?\n         // Normally this would use option_env!(\"CFG_VERSION\").\n-        let producer = format!(\"cranelift fn (rustc version {})\", \"unknown version\");\n+        let producer = format!(\"cg_clif (rustc {})\", \"unknown version\");\n         let comp_dir = tcx.sess.working_dir.0.to_string_lossy().into_owned();\n         let name = match tcx.sess.local_crate_source_file {\n             Some(ref path) => path.to_string_lossy().into_owned(),"}, {"sha": "2df8948054fcc60a0039affd296d03913c10f19e", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b30d508f7c624140b34ccd677bd66e5830bac6c/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b30d508f7c624140b34ccd677bd66e5830bac6c/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=6b30d508f7c624140b34ccd677bd66e5830bac6c", "patch": "@@ -761,13 +761,15 @@ pub fn codegen_intrinsic_call<'tcx>(\n \n         volatile_load, (c ptr) {\n             // Cranelift treats loads as volatile by default\n+            // FIXME ignore during stack2reg optimization\n             let inner_layout =\n                 fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n             let val = CValue::by_ref(Pointer::new(ptr.load_scalar(fx)), inner_layout);\n             ret.write_cvalue(fx, val);\n         };\n         volatile_store, (v ptr, c val) {\n             // Cranelift treats stores as volatile by default\n+            // FIXME ignore during stack2reg optimization\n             let dest = CPlace::for_ptr(Pointer::new(ptr), val.layout());\n             dest.write_cvalue(fx, val);\n         };"}]}