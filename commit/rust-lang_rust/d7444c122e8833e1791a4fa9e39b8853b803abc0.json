{"sha": "d7444c122e8833e1791a4fa9e39b8853b803abc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NDQ0YzEyMmU4ODMzZTE3OTFhNGZhOWUzOWI4ODUzYjgwM2FiYzA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-14T00:52:59Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-27T13:16:04Z"}, "message": "rustc_metadata: remove Encodable requirements from LazyMeta impls.", "tree": {"sha": "be44a392dfa9a324836ff65602f1859ac2ddaef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be44a392dfa9a324836ff65602f1859ac2ddaef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7444c122e8833e1791a4fa9e39b8853b803abc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7444c122e8833e1791a4fa9e39b8853b803abc0", "html_url": "https://github.com/rust-lang/rust/commit/d7444c122e8833e1791a4fa9e39b8853b803abc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7444c122e8833e1791a4fa9e39b8853b803abc0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee42979eeb4b13bfb71116f330c735bc48fb38bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee42979eeb4b13bfb71116f330c735bc48fb38bc", "html_url": "https://github.com/rust-lang/rust/commit/ee42979eeb4b13bfb71116f330c735bc48fb38bc"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "e6ccbf5c38bf3839cd1a07273b787929164d3885", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7444c122e8833e1791a4fa9e39b8853b803abc0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7444c122e8833e1791a4fa9e39b8853b803abc0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=d7444c122e8833e1791a4fa9e39b8853b803abc0", "patch": "@@ -32,7 +32,7 @@ use std::mem;\n use std::num::NonZeroUsize;\n use std::u32;\n \n-use rustc_serialize::{Decodable, Decoder, Encodable, SpecializedDecoder, opaque};\n+use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::source_map::{self, respan, Spanned};\n@@ -217,15 +217,15 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'tcx>) {\n     }\n }\n \n-impl<'a, 'tcx, T: Encodable + Decodable> Lazy<T> {\n+impl<'a, 'tcx, T: Decodable> Lazy<T> {\n     fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {\n         let mut dcx = metadata.decoder(self.position.get());\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         T::decode(&mut dcx).unwrap()\n     }\n }\n \n-impl<'a: 'x, 'tcx: 'x, 'x, T: Encodable + Decodable> Lazy<[T]> {\n+impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable> Lazy<[T]> {\n     fn decode<M: Metadata<'a, 'tcx>>(\n         self,\n         metadata: M,\n@@ -324,13 +324,13 @@ impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, T: Encodable> SpecializedDecoder<Lazy<T>> for DecodeContext<'a, 'tcx> {\n+impl<'a, 'tcx, T> SpecializedDecoder<Lazy<T>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Lazy<T>, Self::Error> {\n         self.read_lazy_with_meta(())\n     }\n }\n \n-impl<'a, 'tcx, T: Encodable> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a, 'tcx> {\n+impl<'a, 'tcx, T> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Lazy<[T]>, Self::Error> {\n         let len = self.read_usize()?;\n         if len == 0 {"}, {"sha": "9410b190646839b6c556bd3be374141fb38e8c3b", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7444c122e8833e1791a4fa9e39b8853b803abc0/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7444c122e8833e1791a4fa9e39b8853b803abc0/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=d7444c122e8833e1791a4fa9e39b8853b803abc0", "patch": "@@ -122,13 +122,13 @@ impl<'tcx> Encoder for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx, T: Encodable> SpecializedEncoder<Lazy<T>> for EncodeContext<'tcx> {\n+impl<'tcx, T> SpecializedEncoder<Lazy<T>> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self, lazy: &Lazy<T>) -> Result<(), Self::Error> {\n         self.emit_lazy_distance(*lazy)\n     }\n }\n \n-impl<'tcx, T: Encodable> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n+impl<'tcx, T> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self, lazy: &Lazy<[T]>) -> Result<(), Self::Error> {\n         self.emit_usize(lazy.meta)?;\n         if lazy.meta == 0 {"}, {"sha": "a17809b24c0ff3b0a1cea62d8fc2bbd740b85dae", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7444c122e8833e1791a4fa9e39b8853b803abc0/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7444c122e8833e1791a4fa9e39b8853b803abc0/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=d7444c122e8833e1791a4fa9e39b8853b803abc0", "patch": "@@ -15,7 +15,6 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc_index::vec::IndexVec;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n-use rustc_serialize::Encodable;\n use syntax::{ast, attr};\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n@@ -59,7 +58,7 @@ trait LazyMeta {\n     fn min_size(meta: Self::Meta) -> usize;\n }\n \n-impl<T: Encodable> LazyMeta for T {\n+impl<T> LazyMeta for T {\n     type Meta = ();\n \n     fn min_size(_: ()) -> usize {\n@@ -68,7 +67,7 @@ impl<T: Encodable> LazyMeta for T {\n     }\n }\n \n-impl<T: Encodable> LazyMeta for [T] {\n+impl<T> LazyMeta for [T] {\n     type Meta = usize;\n \n     fn min_size(len: usize) -> usize {\n@@ -124,13 +123,13 @@ impl<T: ?Sized + LazyMeta> Lazy<T> {\n     }\n }\n \n-impl<T: Encodable> Lazy<T> {\n+impl<T> Lazy<T> {\n     fn from_position(position: NonZeroUsize) -> Lazy<T> {\n         Lazy::from_position_and_meta(position, ())\n     }\n }\n \n-impl<T: Encodable> Lazy<[T]> {\n+impl<T> Lazy<[T]> {\n     fn empty() -> Lazy<[T]> {\n         Lazy::from_position_and_meta(NonZeroUsize::new(1).unwrap(), 0)\n     }"}]}