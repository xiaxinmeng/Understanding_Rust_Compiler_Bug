{"sha": "3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZmM4NTE0OWU5NjIwYjAyOWZkNWM4NWIwMmFiY2JmN2FiMWE2NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-28T01:00:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-28T01:00:25Z"}, "message": "Auto merge of #83587 - petrochenkov:asneeded, r=nagisa\n\nlinker: Use `--as-needed` by default when linker supports it\n\nDo it in a centralized way in `link.rs` instead of individual target specs.\nMajority of relevant target specs were already passing it.", "tree": {"sha": "104af6a058ce1780a48628d0b0c4c665657072e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/104af6a058ce1780a48628d0b0c4c665657072e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "html_url": "https://github.com/rust-lang/rust/commit/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cd7d86ce27f22260a89ff0d47638cc1de827c9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd7d86ce27f22260a89ff0d47638cc1de827c9d", "html_url": "https://github.com/rust-lang/rust/commit/8cd7d86ce27f22260a89ff0d47638cc1de827c9d"}, {"sha": "6615ee89be2290c96aa7d4ab24dc94e23a8c7080", "url": "https://api.github.com/repos/rust-lang/rust/commits/6615ee89be2290c96aa7d4ab24dc94e23a8c7080", "html_url": "https://github.com/rust-lang/rust/commit/6615ee89be2290c96aa7d4ab24dc94e23a8c7080"}], "stats": {"total": 124, "additions": 30, "deletions": 94}, "files": [{"sha": "e7938fe8af968b2966746e029f2d599c145e9314", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -1651,6 +1651,12 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.add_eh_frame_header();\n     }\n \n+    // NO-OPT-OUT, OBJECT-FILES-NO\n+    // Avoid linking to dynamic libraries unless they satisfy some undefined symbols\n+    // at the point at which they are specified on the command line.\n+    // Must be passed before any dynamic libraries.\n+    cmd.add_as_needed();\n+\n     // NO-OPT-OUT, OBJECT-FILES-NO\n     if crt_objects_fallback {\n         cmd.no_crt_objects();"}, {"sha": "592675d916a2e5c953112a7169ed3549195c4d6e", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -130,6 +130,7 @@ pub trait Linker {\n     fn group_end(&mut self);\n     fn linker_plugin_lto(&mut self);\n     fn add_eh_frame_header(&mut self) {}\n+    fn add_as_needed(&mut self) {}\n     fn finalize(&mut self);\n }\n \n@@ -641,6 +642,12 @@ impl<'a> Linker for GccLinker<'a> {\n     fn add_eh_frame_header(&mut self) {\n         self.linker_arg(\"--eh-frame-hdr\");\n     }\n+\n+    fn add_as_needed(&mut self) {\n+        if self.sess.target.linker_is_gnu {\n+            self.linker_arg(\"--as-needed\");\n+        }\n+    }\n }\n \n pub struct MsvcLinker<'a> {"}, {"sha": "df4389b8165a8f22e9b4b4be25ebe9b07b9b5fdd", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -21,22 +21,9 @@ pub fn target(target_cpu: String) -> Target {\n             has_rpath: false,\n             position_independent_executables: false,\n             eh_frame_header: false,\n-            pre_link_args: vec![(\n-                LinkerFlavor::Gcc,\n-                vec![\n-                    format!(\"-mmcu={}\", target_cpu),\n-                    // We want to be able to strip as much executable code as possible\n-                    // from the linker command line, and this flag indicates to the\n-                    // linker that it can avoid linking in dynamic libraries that don't\n-                    // actually satisfy any symbols up to that point (as with many other\n-                    // resolutions the linker does). This option only applies to all\n-                    // following libraries so we're sure to pass it as one of the first\n-                    // arguments.\n-                    \"-Wl,--as-needed\".to_string(),\n-                ],\n-            )]\n-            .into_iter()\n-            .collect(),\n+            pre_link_args: vec![(LinkerFlavor::Gcc, vec![format!(\"-mmcu={}\", target_cpu)])]\n+                .into_iter()\n+                .collect(),\n             late_link_args: vec![(LinkerFlavor::Gcc, vec![\"-lgcc\".to_owned()])]\n                 .into_iter()\n                 .collect(),"}, {"sha": "41d372cc6db406cd20b3197785f3ca03721e3d5b", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -5,11 +5,6 @@ pub fn opts() -> TargetOptions {\n     args.insert(\n         LinkerFlavor::Gcc,\n         vec![\n-            // GNU-style linkers will use this to omit linking to libraries\n-            // which don't actually fulfill any relocations, but only for\n-            // libraries which follow this flag.  Thus, use it before\n-            // specifying libraries to link to.\n-            \"-Wl,--as-needed\".to_string(),\n             // Always enable NX protection when it is available\n             \"-Wl,-z,noexecstack\".to_string(),\n         ],"}, {"sha": "86db2bf8eed0b0be90246b2bf2c4345b50df6ed6", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -5,11 +5,6 @@ pub fn opts() -> TargetOptions {\n     args.insert(\n         LinkerFlavor::Gcc,\n         vec![\n-            // GNU-style linkers will use this to omit linking to libraries\n-            // which don't actually fulfill any relocations, but only for\n-            // libraries which follow this flag.  Thus, use it before\n-            // specifying libraries to link to.\n-            \"-Wl,--as-needed\".to_string(),\n             // Always enable NX protection when it is available\n             \"-Wl,-z,noexecstack\".to_string(),\n         ],"}, {"sha": "e020264ad7af25f6b7f830f376465cffceaf1ebc", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "e596eca86b0d757e289feac1747296876100ca0e", "filename": "compiler/rustc_target/src/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "aa2ff7bb3993f7fcc5c46a5037f8f365d4665383", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -5,14 +5,6 @@ pub fn opts() -> TargetOptions {\n     args.insert(\n         LinkerFlavor::Gcc,\n         vec![\n-            // We want to be able to strip as much executable code as possible\n-            // from the linker command line, and this flag indicates to the\n-            // linker that it can avoid linking in dynamic libraries that don't\n-            // actually satisfy any symbols up to that point (as with many other\n-            // resolutions the linker does). This option only applies to all\n-            // following libraries so we're sure to pass it as one of the first\n-            // arguments.\n-            \"-Wl,--as-needed\".to_string(),\n             // Always enable NX protection when it is available\n             \"-Wl,-z,noexecstack\".to_string(),\n         ],"}, {"sha": "e71c80e556e8a0aebd19e2061e0243cc1e04e620", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -4,10 +4,7 @@ use crate::spec::{\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\"-Wl,--as-needed\".to_string(), \"-Wl,-z,noexecstack\".to_string()],\n-    );\n+    pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-Wl,-z,noexecstack\".to_string()]);\n \n     TargetOptions {\n         env: \"gnu\".to_string(),"}, {"sha": "680cd60788bdea8d158e960e757b2c73c677f2eb", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -1,18 +1,6 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n+use crate::spec::{RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            // GNU-style linkers will use this to omit linking to libraries\n-            // which don't actually fulfill any relocations, but only for\n-            // libraries which follow this flag.  Thus, use it before\n-            // specifying libraries to link to.\n-            \"-Wl,--as-needed\".to_string(),\n-        ],\n-    );\n-\n     TargetOptions {\n         os: \"netbsd\".to_string(),\n         dynamic_linking: true,\n@@ -21,7 +9,6 @@ pub fn opts() -> TargetOptions {\n         linker_is_gnu: true,\n         no_default_libraries: false,\n         has_rpath: true,\n-        pre_link_args: args,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n         use_ctors_section: true,"}, {"sha": "0aeefba3647d1bb72ca56680bda0161d1b151b7f", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -5,11 +5,6 @@ pub fn opts() -> TargetOptions {\n     args.insert(\n         LinkerFlavor::Gcc,\n         vec![\n-            // GNU-style linkers will use this to omit linking to libraries\n-            // which don't actually fulfill any relocations, but only for\n-            // libraries which follow this flag.  Thus, use it before\n-            // specifying libraries to link to.\n-            \"-Wl,--as-needed\".to_string(),\n             // Always enable NX protection when it is available\n             \"-Wl,-z,noexecstack\".to_string(),\n         ],"}, {"sha": "3ebc5469e0a8b3d897e800f280066ad58659d300", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "4cc5224fae30d1328cbfa6ce8f2bcc488582cc15", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "2f0a6ca44a008ae8752de8e8a66a8558b6a57c66", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -3,8 +3,8 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"--secure-plt\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"--secure-plt\".to_string());\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "215f1a36227d79571181aa2739c3ef987d0f03f6", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -3,8 +3,8 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mspe\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"--secure-plt\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mspe\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"--secure-plt\".to_string());\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "20c91708faadf9c35e507cec4c35d899d15ee66f", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -5,14 +5,6 @@ pub fn opts() -> TargetOptions {\n     args.insert(\n         LinkerFlavor::Gcc,\n         vec![\n-            // We want to be able to strip as much executable code as possible\n-            // from the linker command line, and this flag indicates to the\n-            // linker that it can avoid linking in dynamic libraries that don't\n-            // actually satisfy any symbols up to that point (as with many other\n-            // resolutions the linker does). This option only applies to all\n-            // following libraries so we're sure to pass it as one of the first\n-            // arguments.\n-            \"-Wl,--as-needed\".to_string(),\n             // Always enable NX protection when it is available\n             \"-Wl,-z,noexecstack\".to_string(),\n         ],"}, {"sha": "b4286dfd88f1105abd6f62b07282284604d3385f", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"v9\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "8396d0463d931adee5800080e2660644b92d03b9", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -1,21 +1,6 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            // We want to be able to strip as much executable code as possible\n-            // from the linker command line, and this flag indicates to the\n-            // linker that it can avoid linking in dynamic libraries that don't\n-            // actually satisfy any symbols up to that point (as with many other\n-            // resolutions the linker does). This option only applies to all\n-            // following libraries so we're sure to pass it as one of the first\n-            // arguments.\n-            \"-Wl,--as-needed\".to_string(),\n-        ],\n-    );\n-\n     TargetOptions {\n         os: \"vxworks\".to_string(),\n         env: \"gnu\".to_string(),\n@@ -27,7 +12,6 @@ pub fn opts() -> TargetOptions {\n         os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: args,\n         position_independent_executables: false,\n         has_elf_tls: true,\n         crt_static_default: true,"}, {"sha": "aacbdbdeefbef7d22b283d596ee5b26cd878a0bd", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -4,7 +4,6 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n     const PRE_LINK_ARGS: &[&str] = &[\n-        \"--as-needed\",\n         \"-z\",\n         \"noexecstack\",\n         \"-e\","}, {"sha": "54e7ceee82e8aa02edc1f41e59f41c5ef808d557", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "f9fa9d9384304580c29abd3984c5d1ce44707a1d", "filename": "compiler/rustc_target/src/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfc85149e9620b029fd5c85b02abcbf7ab1a64e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=3bfc85149e9620b029fd5c85b02abcbf7ab1a64e", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n     base.disable_redzone = true;\n "}]}