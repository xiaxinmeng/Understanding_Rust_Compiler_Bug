{"sha": "d05e4d2c9bc096932dae8502a72fe831b9872ae3", "node_id": "C_kwDOAAsO6NoAKGQwNWU0ZDJjOWJjMDk2OTMyZGFlODUwMmE3MmZlODMxYjk4NzJhZTM", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-28T18:41:04Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-28T18:41:04Z"}, "message": "Avoid uneccessary clone of Annotatable", "tree": {"sha": "24b189572f220ffb1b3c3a2301388aad5e1ecb1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b189572f220ffb1b3c3a2301388aad5e1ecb1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d05e4d2c9bc096932dae8502a72fe831b9872ae3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmGjzUAACgkQB8rDzKfg\nZD8svQ/+JwKupzhL/wG99sxXdgQfJwiE+zzvvk0CEHdOpHOP5i4wkpdLml5WNUVz\nTQJEdyBb6zz8KmRIDo565Ye47OEahOxtHyFBY0Bc77ev4LCUtiM6/6PVWahvjw0Y\n0dFOKj71x5ISvEgFWUqi/BjKINUg9ZA6sXzgpk0f0HMQ1pAA2t/KlyiU/a3amlzi\n2Z0NlWFKPTaIfst9QtMnaAqBbt50XjO1wIVDT7WIJkhD40upq2ud2YNoexWxYOkG\nUhMKIe7Jo0yWhaBTfKXAhjx1rAOX02/q6fXcZCy+2bQl6KLR1IUkAB6GaADqo8K4\nndggMFaFOvIT6H/2kSFf7Dt1p+5aQwDo7/DeoRA1IgYBQEAeR9/n5ZnLutigTrDV\nvz7Dzz6Pp4FsaUrOzQ/AVWY6OKf6EZoytJ4bLtuCfd1UxoIevEMIR9xwYMPk4gFZ\nSACEVsgGU6CbosqfI7GfQMiNloDiUUVYYtEztfzN0p7xm+W55L13tW0nH1rxZmqk\ng3FQOzLkJpcwpq/8EHVSYWrJ3kWUWi44+5MkMKT08czIQ18RFjj4E1tK+6MakGAB\nr/HTAPyVQ3PxomhUnGKq4bXKx5ZTOK5fT2PXHlZyg57gDnxyrK5+3mFwfYC6gSQ3\nfpNmJfcylc0kJf/q31tDlMiKvBNmCH3uEuhWRTqqpRroAvzAq14=\n=RBoE\n-----END PGP SIGNATURE-----", "payload": "tree 24b189572f220ffb1b3c3a2301388aad5e1ecb1a\nparent e6d2de9483a27f846f003fc745713339a9122473\nauthor Alan Egerton <eggyal@gmail.com> 1638124864 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1638124864 +0000\n\nAvoid uneccessary clone of Annotatable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d05e4d2c9bc096932dae8502a72fe831b9872ae3", "html_url": "https://github.com/rust-lang/rust/commit/d05e4d2c9bc096932dae8502a72fe831b9872ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d05e4d2c9bc096932dae8502a72fe831b9872ae3/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d2de9483a27f846f003fc745713339a9122473", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d2de9483a27f846f003fc745713339a9122473", "html_url": "https://github.com/rust-lang/rust/commit/e6d2de9483a27f846f003fc745713339a9122473"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "8cc761dfd513aa73da18d9136d4c6ff64233e495", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d05e4d2c9bc096932dae8502a72fe831b9872ae3/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e4d2c9bc096932dae8502a72fe831b9872ae3/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=d05e4d2c9bc096932dae8502a72fe831b9872ae3", "patch": "@@ -11,7 +11,7 @@ use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_expand::config::StripUnconfigured;\n use rustc_expand::configure;\n use rustc_feature::Features;\n-use rustc_parse::parser::ForceCollect;\n+use rustc_parse::parser::{ForceCollect, Parser};\n use rustc_session::utils::FlattenNonterminals;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n@@ -138,8 +138,34 @@ impl CfgEval<'_, '_> {\n         // the location of `#[cfg]` and `#[cfg_attr]` in the token stream. The tokenization\n         // process is lossless, so this process is invisible to proc-macros.\n \n-        // FIXME - get rid of this clone\n-        let nt = annotatable.clone().into_nonterminal();\n+        let parse_annotatable_with: fn(&mut Parser<'_>) -> _ = match annotatable {\n+            Annotatable::Item(_) => {\n+                |parser| Annotatable::Item(parser.parse_item(ForceCollect::Yes).unwrap().unwrap())\n+            }\n+            Annotatable::TraitItem(_) => |parser| {\n+                Annotatable::TraitItem(\n+                    parser.parse_trait_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n+                )\n+            },\n+            Annotatable::ImplItem(_) => |parser| {\n+                Annotatable::ImplItem(\n+                    parser.parse_impl_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n+                )\n+            },\n+            Annotatable::ForeignItem(_) => |parser| {\n+                Annotatable::ForeignItem(\n+                    parser.parse_foreign_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n+                )\n+            },\n+            Annotatable::Stmt(_) => |parser| {\n+                Annotatable::Stmt(P(parser.parse_stmt(ForceCollect::Yes).unwrap().unwrap()))\n+            },\n+            Annotatable::Expr(_) => {\n+                |parser| Annotatable::Expr(parser.parse_expr_force_collect().unwrap())\n+            }\n+            _ => unreachable!(),\n+        };\n+        let nt = annotatable.into_nonterminal();\n \n         let mut orig_tokens = rustc_parse::nt_to_tokenstream(\n             &nt,\n@@ -173,25 +199,7 @@ impl CfgEval<'_, '_> {\n         let mut parser =\n             rustc_parse::stream_to_parser(&self.cfg.sess.parse_sess, orig_tokens, None);\n         parser.capture_cfg = true;\n-        annotatable = match annotatable {\n-            Annotatable::Item(_) => {\n-                Annotatable::Item(parser.parse_item(ForceCollect::Yes).unwrap().unwrap())\n-            }\n-            Annotatable::TraitItem(_) => Annotatable::TraitItem(\n-                parser.parse_trait_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n-            ),\n-            Annotatable::ImplItem(_) => Annotatable::ImplItem(\n-                parser.parse_impl_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n-            ),\n-            Annotatable::ForeignItem(_) => Annotatable::ForeignItem(\n-                parser.parse_foreign_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n-            ),\n-            Annotatable::Stmt(_) => {\n-                Annotatable::Stmt(P(parser.parse_stmt(ForceCollect::Yes).unwrap().unwrap()))\n-            }\n-            Annotatable::Expr(_) => Annotatable::Expr(parser.parse_expr_force_collect().unwrap()),\n-            _ => unreachable!(),\n-        };\n+        annotatable = parse_annotatable_with(&mut parser);\n \n         // Now that we have our re-parsed `AttrAnnotatedTokenStream`, recursively configuring\n         // our attribute target will correctly the tokens as well."}]}