{"sha": "9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOTBhNWMwM2IzZWJjYWVlOThkZTUzZGRmMTNmMzIwNGZmOWM1Zjk=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-01T10:37:53Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:41:49Z"}, "message": "Store info about file \"substr\".\n\nThat is when a string that is part of a file needs to be parsed for a\nreason, record that the string is a substr of the file rather than\nusing \"<anon>\" or \"-\" as the file name.  This will eventually allow\npointing to the right location, for now it just uses a more\nmeaningful string for the filename.", "tree": {"sha": "00cc509567fc86595e1c8d00f80957efa20fe325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00cc509567fc86595e1c8d00f80957efa20fe325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9", "html_url": "https://github.com/rust-lang/rust/commit/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d71285c933586f92497a5b5fb85368fd130f4e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d71285c933586f92497a5b5fb85368fd130f4e6", "html_url": "https://github.com/rust-lang/rust/commit/4d71285c933586f92497a5b5fb85368fd130f4e6"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "2bfa33f74f887612462ee18c3bb56d578dc8508e", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9", "patch": "@@ -10,8 +10,12 @@ type file_pos = {ch: uint, byte: uint};\n  * with single-word things, rather than passing records all over the\n  * compiler.\n  */\n+\n+type file_substr_ = {lo: uint, hi: uint, col: uint, line: uint};\n+type file_substr = option<file_substr_>;\n+\n type filemap =\n-    @{name: filename, src: @str,\n+    @{name: filename, substr: file_substr, src: @str,\n       start_pos: file_pos, mutable lines: [file_pos]};\n \n type codemap = @{mutable files: [filemap]};\n@@ -22,14 +26,30 @@ fn new_codemap() -> codemap {\n     @{mutable files: [new_filemap(\"-\", @\"\", 0u, 0u)]}\n }\n \n-fn new_filemap(filename: filename, src: @str,\n-               start_pos_ch: uint, start_pos_byte: uint)\n+fn new_filemap_w_substr(filename: filename, substr: file_substr,\n+                        src: @str,\n+                        start_pos_ch: uint, start_pos_byte: uint)\n    -> filemap {\n-    ret @{name: filename, src: src,\n+    ret @{name: filename, substr: substr, src: src,\n           start_pos: {ch: start_pos_ch, byte: start_pos_byte},\n           mutable lines: [{ch: start_pos_ch, byte: start_pos_byte}]};\n }\n \n+fn new_filemap(filename: filename, src: @str,\n+               start_pos_ch: uint, start_pos_byte: uint)\n+    -> filemap {\n+    ret new_filemap_w_substr(filename, none, src, \n+                             start_pos_ch, start_pos_byte);\n+}\n+\n+fn get_substr_info(cm: codemap, lo: uint, hi: uint)\n+    -> (filename, file_substr_)\n+{\n+    let pos = lookup_char_pos(cm, lo);\n+    let name = #fmt(\"<%s:%u:%u>\", pos.file.name, pos.line, pos.col);\n+    ret (name, {lo: lo, hi: hi, col: pos.col, line: pos.line});\n+}\n+\n fn empty_filemap(cm: codemap) -> filemap {cm.files[0]}\n \n fn next_line(file: filemap, chpos: uint, byte_pos: uint) {"}, {"sha": "d43011663b7482a92c4321e4d31d16f41e1d5b0e", "filename": "src/comp/syntax/ext/qquote.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs?ref=9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9", "patch": "@@ -48,8 +48,10 @@ fn expand_ast(ecx: ext_ctxt, _sp: span, _arg: ast::mac_arg, body: ast::mac_body)\n {\n     let body = get_mac_body(ecx,_sp,body);\n     let str = @codemap::span_to_snippet(body.span, ecx.session().parse_sess.cm);\n+    let (fname, ss) = codemap::get_substr_info(ecx.session().parse_sess.cm, \n+                                               body.span.lo, body.span.hi);\n     let {node: e, _} = parse_from_source_str(parser::parse_expr, \n-                                             \"<anon>\", str, \n+                                             fname, some(ss), str, \n                                              ecx.session().opts.cfg, \n                                              ecx.session().parse_sess);\n     ret expand_qquote(ecx, e.span, some(*str), e);"}, {"sha": "94fa51cc8143aa2c329230d110735734502131fc", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9", "patch": "@@ -113,10 +113,11 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n }\n \n fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n-                              name: str, source: @str) -> parser {\n+                              name: str, ss: codemap::file_substr,\n+                              source: @str) -> parser {\n     let ftype = SOURCE_FILE;\n-    let filemap = codemap::new_filemap(name, source,\n-                                       sess.chpos, sess.byte_pos);\n+    let filemap = codemap::new_filemap_w_substr\n+        (name, ss, source, sess.chpos, sess.byte_pos);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);\n     let rdr = lexer::new_reader(sess.cm, sess.span_diagnostic,\n@@ -2536,19 +2537,20 @@ fn parse_crate_from_source_file(input: str, cfg: ast::crate_cfg,\n \n fn parse_expr_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n                               sess: parse_sess) -> @ast::expr {\n-    let p = new_parser_from_source_str(sess, cfg, name, source);\n+    let p = new_parser_from_source_str(sess, cfg, name, none, source);\n     let r = parse_expr(p);\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;\n     ret r;\n }\n \n-fn parse_from_source_str<T>(f: fn (p: parser) -> T, \n-                            name: str, source: @str, cfg: ast::crate_cfg,\n-                            sess: parse_sess) \n+fn parse_from_source_str<T>(f: fn (p: parser) -> T,\n+                            name: str, ss: codemap::file_substr,\n+                            source: @str, cfg: ast::crate_cfg,\n+                            sess: parse_sess)\n     -> {node: T, fm: codemap::filemap}\n {\n-    let p = new_parser_from_source_str(sess, cfg, name, source);\n+    let p = new_parser_from_source_str(sess, cfg, name, ss, source);\n     let r = f(p);\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;\n@@ -2557,7 +2559,7 @@ fn parse_from_source_str<T>(f: fn (p: parser) -> T,\n \n fn parse_crate_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n                                sess: parse_sess) -> @ast::crate {\n-    let p = new_parser_from_source_str(sess, cfg, name, source);\n+    let p = new_parser_from_source_str(sess, cfg, name, none, source);\n     let r = parse_crate_mod(p, cfg);\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;"}, {"sha": "c66e0bdc8332349d4c71d4a232731030f9cbcb38", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=9090a5c03b3ebcaee98de53ddf13f3204ff9c5f9", "patch": "@@ -94,7 +94,7 @@ mod test {\n             mutable byte_pos: 0u\n         };\n         let parser = parser::new_parser_from_source_str(\n-            parse_sess, [], \"-\", @source);\n+            parse_sess, [], \"-\", none, @source);\n \n         parser::parse_outer_attributes(parser)\n     }"}]}