{"sha": "57504aafe8ade9964df8600249672dbab45dc47f", "node_id": "C_kwDOAAsO6NoAKDU3NTA0YWFmZThhZGU5OTY0ZGY4NjAwMjQ5NjcyZGJhYjQ1ZGM0N2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-11T21:45:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-11T21:45:50Z"}, "message": "Rollup merge of #89710 - sireliah:e0482, r=GuillaumeGomez\n\nAdd long explanation for error E0482\n\nThis is longer explanation for error E0482 in the #61137.\n\nPlease take a look and leave some feedback!", "tree": {"sha": "ed531048827ae1b3ffb338e5f99daddc1e2f9125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed531048827ae1b3ffb338e5f99daddc1e2f9125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57504aafe8ade9964df8600249672dbab45dc47f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZLCOCRBK7hj4Ov3rIwAAsogIALG/xAn54RpPDE97jVDZLarh\ncpa6rvODgcZxWMTXBs84KyRXSREM0jugVj+4KWf/hqiXCIRreEgGTWIHReSvULcB\nTFDMfurjhHeancX1Z6zQjcgoSmwl5GLhFNkayoDLLO19PyKnveua91+01qnsHU4R\nDXJ/rMG1oZeBXP166dPfRvWPJirQoQxQPF8p9Mb0O9wK5huc3NtAcz5Z8b4eAoH7\nF+J6giBxfF9/PHeDaPl6vvqWkhgSKvFrgjQLf6+czmJcgfFb4otddesUqzQni7ku\njkhtMGx1yKIPBQD8vZEv2EaSr3sa7DHFAdTHUXcG2/yok4BQyQErFAoisXNH4L8=\n=YFND\n-----END PGP SIGNATURE-----\n", "payload": "tree ed531048827ae1b3ffb338e5f99daddc1e2f9125\nparent fde2412b23e98b58788de52492bea9d53ddf6afd\nparent 0fde6f672f91333f79c867ed9daee7350e4ec382\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1633988750 +0200\ncommitter GitHub <noreply@github.com> 1633988750 +0200\n\nRollup merge of #89710 - sireliah:e0482, r=GuillaumeGomez\n\nAdd long explanation for error E0482\n\nThis is longer explanation for error E0482 in the #61137.\n\nPlease take a look and leave some feedback!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57504aafe8ade9964df8600249672dbab45dc47f", "html_url": "https://github.com/rust-lang/rust/commit/57504aafe8ade9964df8600249672dbab45dc47f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57504aafe8ade9964df8600249672dbab45dc47f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fde2412b23e98b58788de52492bea9d53ddf6afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fde2412b23e98b58788de52492bea9d53ddf6afd", "html_url": "https://github.com/rust-lang/rust/commit/fde2412b23e98b58788de52492bea9d53ddf6afd"}, {"sha": "0fde6f672f91333f79c867ed9daee7350e4ec382", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fde6f672f91333f79c867ed9daee7350e4ec382", "html_url": "https://github.com/rust-lang/rust/commit/0fde6f672f91333f79c867ed9daee7350e4ec382"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "1b4b58314b3561806eca5011676a423fda50637b", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57504aafe8ade9964df8600249672dbab45dc47f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57504aafe8ade9964df8600249672dbab45dc47f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=57504aafe8ade9964df8600249672dbab45dc47f", "patch": "@@ -242,6 +242,7 @@ E0468: include_str!(\"./error_codes/E0468.md\"),\n E0469: include_str!(\"./error_codes/E0469.md\"),\n E0477: include_str!(\"./error_codes/E0477.md\"),\n E0478: include_str!(\"./error_codes/E0478.md\"),\n+E0482: include_str!(\"./error_codes/E0482.md\"),\n E0491: include_str!(\"./error_codes/E0491.md\"),\n E0492: include_str!(\"./error_codes/E0492.md\"),\n E0493: include_str!(\"./error_codes/E0493.md\"),\n@@ -599,7 +600,6 @@ E0785: include_str!(\"./error_codes/E0785.md\"),\n //  E0479, // the type `..` (provided as the value of a type parameter) is...\n //  E0480, // lifetime of method receiver does not outlive the method call\n //  E0481, // lifetime of function argument does not outlive the function call\n-    E0482, // lifetime of return value does not outlive the function call\n //  E0483, // lifetime of operand does not outlive the operation\n //  E0484, // reference is not valid at the time of borrow\n //  E0485, // automatically reference is not valid at the time of borrow"}, {"sha": "58ebf43cc98ced9ff3652ea13f49b10f067400c1", "filename": "compiler/rustc_error_codes/src/error_codes/E0482.md", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/57504aafe8ade9964df8600249672dbab45dc47f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md", "raw_url": "https://github.com/rust-lang/rust/raw/57504aafe8ade9964df8600249672dbab45dc47f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md?ref=57504aafe8ade9964df8600249672dbab45dc47f", "patch": "@@ -0,0 +1,73 @@\n+A lifetime of a returned value does not outlive the function call.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0482\n+fn prefix<'a>(\n+    words: impl Iterator<Item = &'a str>\n+) -> impl Iterator<Item = String> { // error!\n+    words.map(|v| format!(\"foo-{}\", v))\n+}\n+```\n+\n+To fix this error, make the lifetime of the returned value explicit:\n+\n+```\n+fn prefix<'a>(\n+    words: impl Iterator<Item = &'a str> + 'a\n+) -> impl Iterator<Item = String> + 'a { // ok!\n+    words.map(|v| format!(\"foo-{}\", v))\n+}\n+```\n+\n+The [`impl Trait`] feature in this example uses an implicit `'static` lifetime\n+restriction in the returned type. However the type implementing the `Iterator`\n+passed to the function lives just as long as `'a`, which is not long enough.\n+\n+The solution involves adding lifetime bound to both function argument and\n+the return value to make sure that the values inside the iterator\n+are not dropped when the function goes out of the scope.\n+\n+An alternative solution would be to guarantee that the `Item` references\n+in the iterator are alive for the whole lifetime of the program.\n+\n+```\n+fn prefix(\n+    words: impl Iterator<Item = &'static str>\n+) -> impl Iterator<Item = String> {  // ok!\n+    words.map(|v| format!(\"foo-{}\", v))\n+}\n+```\n+\n+A similar lifetime problem might arise when returning closures:\n+\n+```compile_fail,E0482\n+fn foo(\n+    x: &mut Vec<i32>\n+) -> impl FnMut(&mut Vec<i32>) -> &[i32] { // error!\n+    |y| {\n+        y.append(x);\n+        y\n+    }\n+}\n+```\n+\n+Analogically, a solution here is to use explicit return lifetime\n+and move the ownership of the variable to the closure.\n+\n+```\n+fn foo<'a>(\n+    x: &'a mut Vec<i32>\n+) -> impl FnMut(&mut Vec<i32>) -> &[i32] + 'a { // ok!\n+    move |y| {\n+        y.append(x);\n+        y\n+    }\n+}\n+```\n+\n+To better understand the lifetime treatment in the [`impl Trait`],\n+please see the [RFC 1951].\n+\n+[`impl Trait`]: https://doc.rust-lang.org/reference/types/impl-trait.html\n+[RFC 1951]: https://rust-lang.github.io/rfcs/1951-expand-impl-trait.html"}, {"sha": "ce169867b7b1d851d5f38977bf4a41a79c405b21", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57504aafe8ade9964df8600249672dbab45dc47f/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57504aafe8ade9964df8600249672dbab45dc47f/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=57504aafe8ade9964df8600249672dbab45dc47f", "patch": "@@ -11,7 +11,7 @@ use regex::Regex;\n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n     \"E0227\", \"E0279\", \"E0280\", \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0464\", \"E0465\", \"E0476\",\n-    \"E0482\", \"E0514\", \"E0519\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n+    \"E0514\", \"E0519\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n ];\n \n // Some error codes don't have any tests apparently..."}]}