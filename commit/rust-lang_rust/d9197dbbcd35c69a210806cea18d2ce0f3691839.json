{"sha": "d9197dbbcd35c69a210806cea18d2ce0f3691839", "node_id": "C_kwDOAAsO6NoAKGQ5MTk3ZGJiY2QzNWM2OWEyMTA4MDZjZWExOGQyY2UwZjM2OTE4Mzk", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-08-28T23:58:12Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-07T14:03:45Z"}, "message": "UPDATE - migrate write.rs to new diagnostics infra", "tree": {"sha": "ba20ce1f96be14911225766d51cac46430d014f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba20ce1f96be14911225766d51cac46430d014f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9197dbbcd35c69a210806cea18d2ce0f3691839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9197dbbcd35c69a210806cea18d2ce0f3691839", "html_url": "https://github.com/rust-lang/rust/commit/d9197dbbcd35c69a210806cea18d2ce0f3691839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9197dbbcd35c69a210806cea18d2ce0f3691839/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "086e70f13e9259d7949fbfeec6fa824c6327f42d", "url": "https://api.github.com/repos/rust-lang/rust/commits/086e70f13e9259d7949fbfeec6fa824c6327f42d", "html_url": "https://github.com/rust-lang/rust/commit/086e70f13e9259d7949fbfeec6fa824c6327f42d"}], "stats": {"total": 97, "additions": 75, "deletions": 22}, "files": [{"sha": "125b231b274866d58f96ddd01c028df6af9e6981", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d9197dbbcd35c69a210806cea18d2ce0f3691839/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9197dbbcd35c69a210806cea18d2ce0f3691839/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=d9197dbbcd35c69a210806cea18d2ce0f3691839", "patch": "@@ -2,11 +2,11 @@ use super::link::{self, ensure_removed};\n use super::lto::{self, SerializedModule};\n use super::symbol_export::symbol_name_for_instance_in_crate;\n \n+use crate::errors;\n+use crate::traits::*;\n use crate::{\n     CachedModuleCodegen, CodegenResults, CompiledModule, CrateInfo, ModuleCodegen, ModuleKind,\n };\n-\n-use crate::traits::*;\n use jobserver::{Acquired, Client};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::memmap::Mmap;\n@@ -530,7 +530,7 @@ fn produce_final_output_artifacts(\n     // Produce final compile outputs.\n     let copy_gracefully = |from: &Path, to: &Path| {\n         if let Err(e) = fs::copy(from, to) {\n-            sess.err(&format!(\"could not copy {:?} to {:?}: {}\", from, to, e));\n+            sess.emit_err(errors::CopyPath::new(from, to, e));\n         }\n     };\n \n@@ -546,7 +546,7 @@ fn produce_final_output_artifacts(\n                 ensure_removed(sess.diagnostic(), &path);\n             }\n         } else {\n-            let ext = crate_output\n+            let extension = crate_output\n                 .temp_path(output_type, None)\n                 .extension()\n                 .unwrap()\n@@ -557,19 +557,11 @@ fn produce_final_output_artifacts(\n             if crate_output.outputs.contains_key(&output_type) {\n                 // 2) Multiple codegen units, with `--emit foo=some_name`.  We have\n                 //    no good solution for this case, so warn the user.\n-                sess.warn(&format!(\n-                    \"ignoring emit path because multiple .{} files \\\n-                                    were produced\",\n-                    ext\n-                ));\n+                sess.emit_warning(errors::IgnoringEmitPath { extension });\n             } else if crate_output.single_output_file.is_some() {\n                 // 3) Multiple codegen units, with `-o some_name`.  We have\n                 //    no good solution for this case, so warn the user.\n-                sess.warn(&format!(\n-                    \"ignoring -o because multiple .{} files \\\n-                                    were produced\",\n-                    ext\n-                ));\n+                sess.emit_warning(errors::IgnoringOutput { extension });\n             } else {\n                 // 4) Multiple codegen units, but no explicit name.  We\n                 //    just leave the `foo.0.x` files in place.\n@@ -880,14 +872,19 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n         );\n         match link_or_copy(&source_file, &output_path) {\n             Ok(_) => Some(output_path),\n-            Err(err) => {\n-                let diag_handler = cgcx.create_diag_handler();\n-                diag_handler.err(&format!(\n-                    \"unable to copy {} to {}: {}\",\n-                    source_file.display(),\n-                    output_path.display(),\n-                    err\n-                ));\n+            Err(_) => {\n+                // FIXME:\n+                // Should we add Translations support in Handler, or should we pass a session here ?\n+                //\n+                // As Luis Cardoso mentioned here https://github.com/rust-lang/rust/pull/100753#discussion_r952975345,\n+                // Translations support in Handler is tricky because SessionDiagnostic is not a trait,\n+                // and we can't implement it in Handler because rustc_errors cannot depend on rustc_session.\n+                //\n+                // As for passing a session here, my understanding is that all these errors should be reported via\n+                // the Shared Handler, which leads us to probably having to support Translations in another way.\n+\n+                // let diag_handler = cgcx.create_diag_handler();\n+                // diag_handler.emit_err(errors::CopyPathBuf { source_file, output_path, error });\n                 None\n             }\n         }"}, {"sha": "2ae5e659d2dacb3e446e60d5f43eb60ca1b21f2c", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d9197dbbcd35c69a210806cea18d2ce0f3691839/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9197dbbcd35c69a210806cea18d2ce0f3691839/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=d9197dbbcd35c69a210806cea18d2ce0f3691839", "patch": "@@ -1,7 +1,10 @@\n //! Errors emitted by codegen_ssa\n \n+use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_macros::SessionDiagnostic;\n+use std::borrow::Cow;\n use std::io::Error;\n+use std::path::{Path, PathBuf};\n \n #[derive(SessionDiagnostic)]\n #[diag(codegen_ssa::missing_native_static_library)]\n@@ -56,3 +59,48 @@ pub struct L4BenderExportingSymbolsUnimplemented;\n pub struct NoNatvisDirectory {\n     pub error: Error,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::copy_path_buf)]\n+pub struct CopyPathBuf {\n+    pub source_file: PathBuf,\n+    pub output_path: PathBuf,\n+    pub error: Error,\n+}\n+\n+// Reports Paths using `Debug` implementation rather than Path's `Display` implementation.\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::copy_path)]\n+pub struct CopyPath<'a> {\n+    from: DebugArgPath<'a>,\n+    to: DebugArgPath<'a>,\n+    error: Error,\n+}\n+\n+impl<'a> CopyPath<'a> {\n+    pub fn new(from: &'a Path, to: &'a Path, error: Error) -> CopyPath<'a> {\n+        CopyPath { from: DebugArgPath { path: from }, to: DebugArgPath { path: to }, error }\n+    }\n+}\n+\n+struct DebugArgPath<'a> {\n+    pub path: &'a Path,\n+}\n+\n+impl IntoDiagnosticArg for DebugArgPath<'_> {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(format!(\"{:?}\", self.path)))\n+    }\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::ignoring_emit_path)]\n+pub struct IgnoringEmitPath {\n+    pub extension: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::ignoring_output)]\n+pub struct IgnoringOutput {\n+    pub extension: String,\n+}"}, {"sha": "0d021edc4f76ce648fa91f61d4a9ee61f9336ee3", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9197dbbcd35c69a210806cea18d2ce0f3691839/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d9197dbbcd35c69a210806cea18d2ce0f3691839/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=d9197dbbcd35c69a210806cea18d2ce0f3691839", "patch": "@@ -19,3 +19,11 @@ codegen_ssa_linker_unsupported_modifier = `as-needed` modifier not supported for\n codegen_ssa_L4Bender_exporting_symbols_unimplemented = exporting symbols not implemented yet for L4Bender\n \n codegen_ssa_no_natvis_directory = error enumerating natvis directory: {$error}\n+\n+codegen_ssa_copy_path = could not copy {$from} to {$to}: {$error}\n+\n+codegen_ssa_copy_path_buf = unable to copy {$source_file} to {$output_path}: {$error}\n+\n+codegen_ssa_ignoring_emit_path = ignoring emit path because multiple .{$extension} files were produced\n+\n+codegen_ssa_ignoring_output = ignoring -o because multiple .{$extension} files were produced"}]}