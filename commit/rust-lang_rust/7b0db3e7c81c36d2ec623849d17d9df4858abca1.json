{"sha": "7b0db3e7c81c36d2ec623849d17d9df4858abca1", "node_id": "C_kwDOAAsO6NoAKDdiMGRiM2U3YzgxYzM2ZDJlYzYyMzg0OWQxN2Q5ZGY0ODU4YWJjYTE", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2022-04-23T22:17:33Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2022-04-24T07:34:50Z"}, "message": "Improve span for `consider adding an explicit lifetime bound` suggestions under NLL\n\nBecause NLL borrowck is run after typeck, `in_progress_typeck_results`\nwas always `None` which was preventing the retrieval of the span to which\nthe suggestion is suppose to add the lifetime bound.\n\nWe now manually pass the `LocalDefId` owner to `construct_generic_bound_failure`\nso that under NLL, we give the owner id of the current body.", "tree": {"sha": "6b4452c04270e18addefc4f26c2b02c24ae27803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4452c04270e18addefc4f26c2b02c24ae27803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b0db3e7c81c36d2ec623849d17d9df4858abca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0db3e7c81c36d2ec623849d17d9df4858abca1", "html_url": "https://github.com/rust-lang/rust/commit/7b0db3e7c81c36d2ec623849d17d9df4858abca1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b0db3e7c81c36d2ec623849d17d9df4858abca1/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b4563bf93f4b103ed22507ed825008b89e4f5d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b4563bf93f4b103ed22507ed825008b89e4f5d9", "html_url": "https://github.com/rust-lang/rust/commit/6b4563bf93f4b103ed22507ed825008b89e4f5d9"}], "stats": {"total": 129, "additions": 69, "deletions": 60}, "files": [{"sha": "be715505d81218102f6d80281343776e6105f4c7", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -171,6 +171,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             None,\n                             type_test.generic_kind,\n                             lower_bound_region,\n+                            self.body.source.def_id().as_local(),\n                         ));\n                     } else {\n                         // FIXME. We should handle this case better. It"}, {"sha": "f9273cc50b70a2b6a44b6c1630afb6e618170035", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -61,7 +61,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Item, ItemKind, Node};\n use rustc_middle::dep_graph::DepContext;\n@@ -2285,7 +2285,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n     ) {\n-        self.construct_generic_bound_failure(span, origin, bound_kind, sub).emit();\n+        let owner =\n+            self.in_progress_typeck_results.map(|typeck_results| typeck_results.borrow().hir_owner);\n+        self.construct_generic_bound_failure(span, origin, bound_kind, sub, owner).emit();\n     }\n \n     pub fn construct_generic_bound_failure(\n@@ -2294,31 +2296,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         origin: Option<SubregionOrigin<'tcx>>,\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n+        owner: Option<LocalDefId>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let hir = self.tcx.hir();\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n-        let generics = self\n-            .in_progress_typeck_results\n-            .map(|typeck_results| typeck_results.borrow().hir_owner)\n-            .map(|owner| {\n-                let hir_id = hir.local_def_id_to_hir_id(owner);\n-                let parent_id = hir.get_parent_item(hir_id);\n-                (\n-                    // Parent item could be a `mod`, so we check the HIR before calling:\n-                    if let Some(Node::Item(Item {\n-                        kind: ItemKind::Trait(..) | ItemKind::Impl { .. },\n-                        ..\n-                    })) = hir.find_by_def_id(parent_id)\n-                    {\n-                        Some(self.tcx.generics_of(parent_id))\n-                    } else {\n-                        None\n-                    },\n-                    self.tcx.generics_of(owner.to_def_id()),\n-                    hir.span(hir_id),\n-                )\n-            });\n+        let generics = owner.map(|owner| {\n+            let hir_id = hir.local_def_id_to_hir_id(owner);\n+            let parent_id = hir.get_parent_item(hir_id);\n+            (\n+                // Parent item could be a `mod`, so we check the HIR before calling:\n+                if let Some(Node::Item(Item {\n+                    kind: ItemKind::Trait(..) | ItemKind::Impl { .. },\n+                    ..\n+                })) = hir.find_by_def_id(parent_id)\n+                {\n+                    Some(self.tcx.generics_of(parent_id))\n+                } else {\n+                    None\n+                },\n+                self.tcx.generics_of(owner.to_def_id()),\n+                hir.span(hir_id),\n+            )\n+        });\n \n         let span = match generics {\n             // This is to get around the trait identity obligation, that has a `DUMMY_SP` as signal\n@@ -2606,11 +2606,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     None,\n                 );\n                 if let Some(infer::RelateParamBound(_, t, _)) = origin {\n-                    let return_impl_trait = self\n-                        .in_progress_typeck_results\n-                        .map(|typeck_results| typeck_results.borrow().hir_owner)\n-                        .and_then(|owner| self.tcx.return_type_impl_trait(owner))\n-                        .is_some();\n+                    let return_impl_trait =\n+                        owner.and_then(|owner| self.tcx.return_type_impl_trait(owner)).is_some();\n                     let t = self.resolve_vars_if_possible(t);\n                     match t.kind() {\n                         // We've got:"}, {"sha": "5a382ded70b9997f349dcc7f932572d8922dc57e", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -36,6 +36,9 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/propagate-from-trait-match.rs:32:36\n    |\n+LL |   fn supply<'a, T>(value: T)\n+   |                 - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |       establish_relationships(value, |value| {\n    |  ____________________________________^\n LL | |\n@@ -45,8 +48,6 @@ LL | |         // This function call requires that\n LL | |         require(value);\n LL | |     });\n    | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to previous error\n "}, {"sha": "d303b8c84c1c020e295598205914a946b5cb6e5b", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -1,18 +1,20 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:11:5\n    |\n+LL | fn no_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n    |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:26:5\n    |\n+LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a\n+   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n    |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "faa90e3e5646ed71ecc5095a9b33aa72c3082ec5", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/projection-implied-bounds.rs:30:18\n    |\n+LL | fn generic2<T: Iterator>(value: T) {\n+   |             -- help: consider adding an explicit lifetime bound...: `T: 'static +`\n LL |     twice(value, |value_ref, item| invoke2(value_ref, item));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n \n error: aborting due to previous error\n "}, {"sha": "cec1c277e7f298c295bd4b25cc2d3bf428e9fcef", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -31,10 +31,11 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:29\n    |\n+LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n+   |                                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39\n@@ -81,10 +82,11 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n+LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n+   |                                   - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:39"}, {"sha": "ad2571e44f5f133cbf31e651fafc88e699e4ca5b", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-none.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -1,10 +1,11 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-where-clause-none.rs:16:5\n    |\n+LL | fn foo<'a, T>() -> &'a ()\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     bar::<T::Output>()\n    |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to previous error\n "}, {"sha": "1f232f35043f6b1899e5d2b0c73e899d45efe769", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -52,10 +52,10 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n    |\n+LL | fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n+   |                     - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to previous error\n "}, {"sha": "7b1f8192cb6212e5a87a29f5748ea275a31b9335", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -29,18 +29,20 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23\n    |\n+LL | fn no_region<'a, T>(x: Box<T>) -> Box<dyn Debug + 'a>\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     with_signature(x, |y| y)\n    |                       ^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:41:5\n    |\n+LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>\n+   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n    |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eaa536ec3a4245bbf2b75c1d2662a8e29aaa86f4", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -37,6 +37,8 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n    |\n+LL |   fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n+   |                    - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n LL | |\n@@ -46,8 +48,6 @@ LL | |         // See `correct_region`, which explains the point of this\n LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n@@ -121,15 +121,16 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n    |\n+LL |   fn wrong_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n+   |                           - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n LL | |\n LL | |         // See `correct_region`\n LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26"}, {"sha": "3cfc23ffcfd664eee40513275192b8bc6c81c730", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -1,10 +1,10 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn-body.rs:19:5\n    |\n+LL | fn region_static<'a, T>(cell: Cell<&'a usize>, t: T) {\n+   |                      - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     outlives(cell, t)\n    |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to previous error\n "}, {"sha": "981d3d03b82b752809d590676c3047ccf185cc4b", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -1,18 +1,20 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:11:5\n    |\n+LL | fn no_region<'a, T>(x: Box<T>) -> Box<Debug + 'a>\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n    |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:26:5\n    |\n+LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>\n+   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n    |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a0b955112d2b41907f214236161f5fa7bf587252", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0db3e7c81c36d2ec623849d17d9df4858abca1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=7b0db3e7c81c36d2ec623849d17d9df4858abca1", "patch": "@@ -19,10 +19,10 @@ LL | type WrongGeneric<T> = impl 'static;\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n+LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     t\n    |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n \n error: aborting due to 3 previous errors\n "}]}