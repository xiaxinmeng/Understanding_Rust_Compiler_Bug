{"sha": "a064534b9e9754e18429a05db79fcba0d70292b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNjQ1MzRiOWU5NzU0ZTE4NDI5YTA1ZGI3OWZjYmEwZDcwMjkyYjk=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-02T13:37:03Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-02T13:41:05Z"}, "message": "Refactor needless_collect", "tree": {"sha": "dc8ead3b5ef48ce60b4d7dc9930153a3951a8d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc8ead3b5ef48ce60b4d7dc9930153a3951a8d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a064534b9e9754e18429a05db79fcba0d70292b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a064534b9e9754e18429a05db79fcba0d70292b9", "html_url": "https://github.com/rust-lang/rust/commit/a064534b9e9754e18429a05db79fcba0d70292b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a064534b9e9754e18429a05db79fcba0d70292b9/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1931db20b1733039078a5420aa74417c511e9a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1931db20b1733039078a5420aa74417c511e9a4f", "html_url": "https://github.com/rust-lang/rust/commit/1931db20b1733039078a5420aa74417c511e9a4f"}], "stats": {"total": 80, "additions": 21, "deletions": 59}, "files": [{"sha": "5378b01897071b25a19bd087b018f680f6431f8f", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 21, "deletions": 59, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a064534b9e9754e18429a05db79fcba0d70292b9/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a064534b9e9754e18429a05db79fcba0d70292b9/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=a064534b9e9754e18429a05db79fcba0d70292b9", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n     if_chain! {\n         if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n-        if let ExprKind::MethodCall(ref chain_method, _, _, _) = args[0].kind;\n+        if let ExprKind::MethodCall(ref chain_method, method0_span, _, _) = args[0].kind;\n         if chain_method.ident.name == sym!(collect) && is_trait_method(cx, &args[0], sym::Iterator);\n         if let Some(ref generic_args) = chain_method.args;\n         if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n@@ -31,55 +31,28 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n             || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n             || match_type(cx, ty, &paths::BTREEMAP)\n             || is_type_diagnostic_item(cx, ty, sym::hashmap_type);\n-        then {\n-            if method.ident.name == sym!(len) {\n-                let span = shorten_needless_collect_span(expr);\n-                span_lint_and_sugg(\n-                    cx,\n-                    NEEDLESS_COLLECT,\n-                    span,\n-                    NEEDLESS_COLLECT_MSG,\n-                    \"replace with\",\n-                    \"count()\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            if method.ident.name == sym!(is_empty) {\n-                let span = shorten_needless_collect_span(expr);\n-                span_lint_and_sugg(\n-                    cx,\n-                    NEEDLESS_COLLECT,\n-                    span,\n-                    NEEDLESS_COLLECT_MSG,\n-                    \"replace with\",\n-                    \"next().is_none()\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            if method.ident.name == sym!(contains) {\n+        if let Some(sugg) = match &*method.ident.name.as_str() {\n+            \"len\" => Some(\"count()\".to_string()),\n+            \"is_empty\" => Some(\"next().is_none()\".to_string()),\n+            \"contains\" => {\n                 let contains_arg = snippet(cx, args[1].span, \"??\");\n-                let span = shorten_needless_collect_span(expr);\n-                span_lint_and_then(\n-                    cx,\n-                    NEEDLESS_COLLECT,\n-                    span,\n-                    NEEDLESS_COLLECT_MSG,\n-                    |diag| {\n-                        let (arg, pred) = contains_arg\n-                                .strip_prefix('&')\n-                                .map_or((\"&x\", &*contains_arg), |s| (\"x\", s));\n-                        diag.span_suggestion(\n-                            span,\n-                            \"replace with\",\n-                            format!(\n-                                \"any(|{}| x == {})\",\n-                                arg, pred\n-                            ),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n-                );\n+                let (arg, pred) = contains_arg\n+                    .strip_prefix('&')\n+                    .map_or((\"&x\", &*contains_arg), |s| (\"x\", s));\n+                Some(format!(\"any(|{}| x == {})\", arg, pred))\n             }\n+            _ => None,\n+        };\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                NEEDLESS_COLLECT,\n+                method0_span.with_hi(expr.span.hi()),\n+                NEEDLESS_COLLECT_MSG,\n+                \"replace with\",\n+                sugg,\n+                Applicability::MachineApplicable,\n+            );\n         }\n     }\n }\n@@ -269,14 +242,3 @@ fn detect_iter_and_into_iters<'tcx>(block: &'tcx Block<'tcx>, identifier: Ident)\n     visitor.visit_block(block);\n     if visitor.seen_other { None } else { Some(visitor.uses) }\n }\n-\n-fn shorten_needless_collect_span(expr: &Expr<'_>) -> Span {\n-    if_chain! {\n-        if let ExprKind::MethodCall(.., args, _) = &expr.kind;\n-        if let ExprKind::MethodCall(_, span, ..) = &args[0].kind;\n-        then {\n-            return expr.span.with_lo(span.lo());\n-        }\n-    }\n-    unreachable!();\n-}"}]}