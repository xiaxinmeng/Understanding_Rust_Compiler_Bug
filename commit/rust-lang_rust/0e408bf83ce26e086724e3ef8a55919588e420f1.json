{"sha": "0e408bf83ce26e086724e3ef8a55919588e420f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNDA4YmY4M2NlMjZlMDg2NzI0ZTNlZjhhNTU5MTk1ODhlNDIwZjE=", "commit": {"author": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-02-19T12:13:26Z"}, "committer": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-02-23T04:40:11Z"}, "message": "add config inline_attribute_width\n\nIf the line width is width within config width, attribute is inline.\nI don't want to change default rustfmt behavior, so config default value is 0.\n\n- fix description\n- fix test comment\n- remove unnecessary clone\n- remove unnecessary test file\n- fix test for \u03b2 version\n- attributes => attribute", "tree": {"sha": "a24cb49102c29f2553a336c3b18d4d10dc08e736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a24cb49102c29f2553a336c3b18d4d10dc08e736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e408bf83ce26e086724e3ef8a55919588e420f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e408bf83ce26e086724e3ef8a55919588e420f1", "html_url": "https://github.com/rust-lang/rust/commit/0e408bf83ce26e086724e3ef8a55919588e420f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e408bf83ce26e086724e3ef8a55919588e420f1/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "html_url": "https://github.com/rust-lang/rust/commit/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f"}], "stats": {"total": 116, "additions": 114, "deletions": 2}, "files": [{"sha": "4f78a105cdb6e8c99cdd79a93ff27a9583a5343a", "filename": "src/config/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e408bf83ce26e086724e3ef8a55919588e420f1/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e408bf83ce26e086724e3ef8a55919588e420f1/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=0e408bf83ce26e086724e3ef8a55919588e420f1", "patch": "@@ -105,6 +105,9 @@ create_config! {\n         \"Minimum number of blank lines which must be put between items\";\n     edition: Edition, Edition::Edition2015, true, \"The edition of the parser (RFC 2052)\";\n     version: Version, Version::One, false, \"Version of formatting rules\";\n+    inline_attribute_width: usize, 0, false,\n+        \"Write an item and its attribute on the same line \\\n+        if their combined width is below a threshold\";\n \n     // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n     merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";"}, {"sha": "0fa6dec2265da1ed6bd96b60fd4d3554d6082d02", "filename": "src/imports.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e408bf83ce26e086724e3ef8a55919588e420f1/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e408bf83ce26e086724e3ef8a55919588e420f1/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=0e408bf83ce26e086724e3ef8a55919588e420f1", "patch": "@@ -7,7 +7,7 @@ use syntax::source_map::{self, BytePos, Span, DUMMY_SP};\n \n use crate::comment::combine_strs_with_missing_comments;\n use crate::config::lists::*;\n-use crate::config::{Edition, IndentStyle};\n+use crate::config::{Edition, IndentStyle, Version};\n use crate::lists::{\n     definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n };\n@@ -249,7 +249,23 @@ impl UseTree {\n             let lo = attrs.last().as_ref()?.span().hi();\n             let hi = self.span.lo();\n             let span = mk_sp(lo, hi);\n-            combine_strs_with_missing_comments(context, &attr_str, &use_str, span, shape, false)\n+\n+            let allow_extend = if context.config.version() == Version::Two {\n+                let line_len = attr_str.len() + 1 + use_str.len();\n+                !attrs.first().unwrap().is_sugared_doc\n+                    && context.config.inline_attribute_width() >= line_len\n+            } else {\n+                false\n+            };\n+\n+            combine_strs_with_missing_comments(\n+                context,\n+                &attr_str,\n+                &use_str,\n+                span,\n+                shape,\n+                allow_extend,\n+            )\n         } else {\n             Some(use_str)\n         }"}, {"sha": "760d84dc3c37fc26bd450438afd6fbfa098b242b", "filename": "tests/source/issue-3343.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0e408bf83ce26e086724e3ef8a55919588e420f1/tests%2Fsource%2Fissue-3343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e408bf83ce26e086724e3ef8a55919588e420f1/tests%2Fsource%2Fissue-3343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3343.rs?ref=0e408bf83ce26e086724e3ef8a55919588e420f1", "patch": "@@ -0,0 +1,48 @@\n+// rustfmt-inline_attribute_width: 50\n+\n+#[cfg(feature = \"alloc\")]\n+use core::slice;\n+\n+#[cfg(feature = \"alloc\")]\n+use total_len_is::_50__;\n+\n+#[cfg(feature = \"alloc\")]\n+use total_len_is::_51___;\n+\n+#[cfg(feature = \"alloc\")]\n+extern crate len_is_50_;\n+\n+#[cfg(feature = \"alloc\")]\n+extern crate len_is_51__;\n+\n+/// this is a comment to test is_sugared_doc property\n+use core::convert;\n+\n+#[fooooo]\n+#[barrrrr]\n+use total_len_is_::_51______;\n+\n+#[cfg(not(all(\n+    feature = \"std\",\n+    any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        target_os = \"netbsd\",\n+        target_os = \"dragonfly\",\n+        target_os = \"haiku\",\n+        target_os = \"emscripten\",\n+        target_os = \"solaris\",\n+        target_os = \"cloudabi\",\n+        target_os = \"macos\",\n+        target_os = \"ios\",\n+        target_os = \"freebsd\",\n+        target_os = \"openbsd\",\n+        target_os = \"bitrig\",\n+        target_os = \"redox\",\n+        target_os = \"fuchsia\",\n+        windows,\n+        all(target_arch = \"wasm32\", feature = \"stdweb\"),\n+        all(target_arch = \"wasm32\", feature = \"wasm-bindgen\"),\n+    )\n+)))]\n+use core::slice;"}, {"sha": "4a1496ef364fdb97b44d5626a9aba537d1df39f5", "filename": "tests/target/issue-3343.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0e408bf83ce26e086724e3ef8a55919588e420f1/tests%2Ftarget%2Fissue-3343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e408bf83ce26e086724e3ef8a55919588e420f1/tests%2Ftarget%2Fissue-3343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3343.rs?ref=0e408bf83ce26e086724e3ef8a55919588e420f1", "patch": "@@ -0,0 +1,45 @@\n+// rustfmt-inline_attribute_width: 50\n+\n+#[cfg(feature = \"alloc\")] use core::slice;\n+\n+#[cfg(feature = \"alloc\")] use total_len_is::_50__;\n+\n+#[cfg(feature = \"alloc\")]\n+use total_len_is::_51___;\n+\n+#[cfg(feature = \"alloc\")] extern crate len_is_50_;\n+\n+#[cfg(feature = \"alloc\")]\n+extern crate len_is_51__;\n+\n+/// this is a comment to test is_sugared_doc property\n+use core::convert;\n+\n+#[fooooo]\n+#[barrrrr]\n+use total_len_is_::_51______;\n+\n+#[cfg(not(all(\n+    feature = \"std\",\n+    any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        target_os = \"netbsd\",\n+        target_os = \"dragonfly\",\n+        target_os = \"haiku\",\n+        target_os = \"emscripten\",\n+        target_os = \"solaris\",\n+        target_os = \"cloudabi\",\n+        target_os = \"macos\",\n+        target_os = \"ios\",\n+        target_os = \"freebsd\",\n+        target_os = \"openbsd\",\n+        target_os = \"bitrig\",\n+        target_os = \"redox\",\n+        target_os = \"fuchsia\",\n+        windows,\n+        all(target_arch = \"wasm32\", feature = \"stdweb\"),\n+        all(target_arch = \"wasm32\", feature = \"wasm-bindgen\"),\n+    )\n+)))]\n+use core::slice;"}]}