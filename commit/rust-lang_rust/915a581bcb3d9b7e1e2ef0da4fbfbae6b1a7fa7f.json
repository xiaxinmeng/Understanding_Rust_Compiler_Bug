{"sha": "915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "node_id": "C_kwDOAAsO6NoAKDkxNWE1ODFiY2IzZDliN2UxZTJlZjBkYTRmYmZiYWU2YjFhN2ZhN2Y", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-10-17T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-10-18T19:56:57Z"}, "message": "Do not promote values with const drop that need to be dropped\n\nChanges from #88558 allowed using `~const Drop` in constants by\nintroducing a new `NeedsNonConstDrop` qualif.\n\nThe new qualif was also used for promotion purposes, and allowed\npromotion to happen for values that needs to be dropped but which\ndo have a const drop impl.\n\nSince for promoted the drop implementation is never executed,\nthis lead to observable change in behaviour. For example:\n\n```rust\n\nstruct Panic();\n\nimpl const Drop for Panic {\n    fn drop(&mut self) {\n        panic!();\n    }\n}\n\nfn main() {\n    let _ = &Panic();\n}\n```\n\nRestore the use of `NeedsDrop` qualif during promotion to avoid the issue.", "tree": {"sha": "68eada5eecef18c90f66a77762037c80958d178e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68eada5eecef18c90f66a77762037c80958d178e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "html_url": "https://github.com/rust-lang/rust/commit/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "171cbc01efe103f255f83afa2a70768e1d373edb", "url": "https://api.github.com/repos/rust-lang/rust/commits/171cbc01efe103f255f83afa2a70768e1d373edb", "html_url": "https://github.com/rust-lang/rust/commit/171cbc01efe103f255f83afa2a70768e1d373edb"}], "stats": {"total": 102, "additions": 97, "deletions": 5}, "files": [{"sha": "03e60deea2783c9def30a57f04f538ec2f9b4155", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "patch": "@@ -22,7 +22,7 @@ use std::mem;\n use std::ops::Deref;\n \n use super::ops::{self, NonConstOp, Status};\n-use super::qualifs::{self, CustomEq, HasMutInterior, NeedsNonConstDrop};\n+use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop, NeedsNonConstDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, is_lang_special_const_fn, ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n@@ -39,6 +39,7 @@ type QualifResults<'mir, 'tcx, Q> =\n #[derive(Default)]\n pub struct Qualifs<'mir, 'tcx> {\n     has_mut_interior: Option<QualifResults<'mir, 'tcx, HasMutInterior>>,\n+    needs_drop: Option<QualifResults<'mir, 'tcx, NeedsDrop>>,\n     needs_non_const_drop: Option<QualifResults<'mir, 'tcx, NeedsNonConstDrop>>,\n     indirectly_mutable: Option<IndirectlyMutableResults<'mir, 'tcx>>,\n }\n@@ -70,6 +71,33 @@ impl Qualifs<'mir, 'tcx> {\n         indirectly_mutable.get().contains(local)\n     }\n \n+    /// Returns `true` if `local` is `NeedsDrop` at the given `Location`.\n+    ///\n+    /// Only updates the cursor if absolutely necessary\n+    pub fn needs_drop(\n+        &mut self,\n+        ccx: &'mir ConstCx<'mir, 'tcx>,\n+        local: Local,\n+        location: Location,\n+    ) -> bool {\n+        let ty = ccx.body.local_decls[local].ty;\n+        if !NeedsDrop::in_any_value_of_ty(ccx, ty) {\n+            return false;\n+        }\n+\n+        let needs_drop = self.needs_drop.get_or_insert_with(|| {\n+            let ConstCx { tcx, body, .. } = *ccx;\n+\n+            FlowSensitiveAnalysis::new(NeedsDrop, ccx)\n+                .into_engine(tcx, &body)\n+                .iterate_to_fixpoint()\n+                .into_results_cursor(&body)\n+        });\n+\n+        needs_drop.seek_before_primary_effect(location);\n+        needs_drop.get().contains(local) || self.indirectly_mutable(ccx, local, location)\n+    }\n+\n     /// Returns `true` if `local` is `NeedsNonConstDrop` at the given `Location`.\n     ///\n     /// Only updates the cursor if absolutely necessary\n@@ -172,6 +200,7 @@ impl Qualifs<'mir, 'tcx> {\n         };\n \n         ConstQualifs {\n+            needs_drop: self.needs_drop(ccx, RETURN_PLACE, return_loc),\n             needs_non_const_drop: self.needs_non_const_drop(ccx, RETURN_PLACE, return_loc),\n             has_mut_interior: self.has_mut_interior(ccx, RETURN_PLACE, return_loc),\n             custom_eq,"}, {"sha": "dd2980d40ade7aec66ecd253784f37c679bc1405", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "patch": "@@ -21,6 +21,7 @@ pub fn in_any_value_of_ty(\n ) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n+        needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n         needs_non_const_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n         custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n         error_occured,\n@@ -98,9 +99,31 @@ impl Qualif for HasMutInterior {\n }\n \n /// Constant containing an ADT that implements `Drop`.\n-/// This must be ruled out (a) because we cannot run `Drop` during compile-time\n-/// as that might not be a `const fn`, and (b) because implicit promotion would\n-/// remove side-effects that occur as part of dropping that value.\n+/// This must be ruled out because implicit promotion would remove side-effects\n+/// that occur as part of dropping that value. N.B., the implicit promotion has\n+/// to reject const Drop implementations because even if side-effects are ruled\n+/// out through other means, the execution of the drop could diverge.\n+pub struct NeedsDrop;\n+\n+impl Qualif for NeedsDrop {\n+    const ANALYSIS_NAME: &'static str = \"flow_needs_drop\";\n+    const IS_CLEARED_ON_MOVE: bool = true;\n+\n+    fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n+        qualifs.needs_drop\n+    }\n+\n+    fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n+        ty.needs_drop(cx.tcx, cx.param_env)\n+    }\n+\n+    fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {\n+        adt.has_dtor(cx.tcx)\n+    }\n+}\n+\n+/// Constant containing an ADT that implements non-const `Drop`.\n+/// This must be ruled out because we cannot run `Drop` during compile-time.\n pub struct NeedsNonConstDrop;\n \n impl Qualif for NeedsNonConstDrop {"}, {"sha": "ebcc8213c604b889187c00e17d13d5f1e6b3c658", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "patch": "@@ -230,7 +230,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                         // We cannot promote things that need dropping, since the promoted value\n                         // would not get dropped.\n-                        if self.qualif_local::<qualifs::NeedsNonConstDrop>(place.local) {\n+                        if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n                             return Err(Unpromotable);\n                         }\n "}, {"sha": "cb3f3850958ec90d85d9e4d1e0db2667fca32a93", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "patch": "@@ -224,6 +224,7 @@ pub struct BorrowCheckResult<'tcx> {\n #[derive(Clone, Copy, Debug, Default, TyEncodable, TyDecodable, HashStable)]\n pub struct ConstQualifs {\n     pub has_mut_interior: bool,\n+    pub needs_drop: bool,\n     pub needs_non_const_drop: bool,\n     pub custom_eq: bool,\n     pub error_occured: Option<ErrorReported>,"}, {"sha": "c896c011ab66acdc48b4d3add24f1e9ce16d934c", "filename": "src/test/ui/consts/promoted-const-drop.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.rs?ref=915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_trait_impl)]\n+#![feature(const_mut_refs)]\n+\n+struct A();\n+\n+impl const Drop for A {\n+    fn drop(&mut self) {}\n+}\n+\n+const C: A = A();\n+\n+fn main() {\n+    let _: &'static A = &A(); //~ ERROR temporary value dropped while borrowed\n+    let _: &'static [A] = &[C]; //~ ERROR temporary value dropped while borrowed\n+}"}, {"sha": "184ba0ea3b3777788a433315a7b8bbdc4fba297a", "filename": "src/test/ui/consts/promoted-const-drop.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr?ref=915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "patch": "@@ -0,0 +1,24 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted-const-drop.rs:13:26\n+   |\n+LL |     let _: &'static A = &A();\n+   |            ----------    ^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |     let _: &'static [A] = &[C];\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted-const-drop.rs:14:28\n+   |\n+LL |     let _: &'static [A] = &[C];\n+   |            ------------    ^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}]}