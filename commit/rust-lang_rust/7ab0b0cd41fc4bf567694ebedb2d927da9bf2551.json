{"sha": "7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYjBiMGNkNDFmYzRiZjU2NzY5NGViZWRiMmQ5MjdkYTliZjI1NTE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2013-10-17T18:24:41Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2013-10-18T05:02:56Z"}, "message": "Handle inline asm outputs as write-only in liveness, borrowck and trans.", "tree": {"sha": "b0bfa1320b69df8771527fcb4d944d9275b38e8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0bfa1320b69df8771527fcb4d944d9275b38e8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "html_url": "https://github.com/rust-lang/rust/commit/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "737413d72a714e55ff53e591e8190b490c194a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/737413d72a714e55ff53e591e8190b490c194a53", "html_url": "https://github.com/rust-lang/rust/commit/737413d72a714e55ff53e591e8190b490c194a53"}], "stats": {"total": 243, "additions": 193, "deletions": 50}, "files": [{"sha": "47c29436856945e1ad58e55cedb91658ca9f56dc", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -839,6 +839,11 @@ fn check_loans_in_expr<'a>(this: &mut CheckLoanCtxt<'a>,\n                         expr.span,\n                         []);\n       }\n+      ast::ExprInlineAsm(ref ia) => {\n+          for &(_, out) in ia.outputs.iter() {\n+              this.check_assignment(out);\n+          }\n+      }\n       _ => { }\n     }\n }"}, {"sha": "224c8bf6a6b55cf9c4b188b5bfe4327d14a53d01", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -309,6 +309,23 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n           visit::walk_expr(this, ex, ());\n       }\n \n+      ast::ExprInlineAsm(ref ia) => {\n+          for &(_, out) in ia.outputs.iter() {\n+              let out_cmt = this.bccx.cat_expr(out);\n+              match opt_loan_path(out_cmt) {\n+                  Some(out_lp) => {\n+                      gather_moves::gather_assignment(this.bccx, this.move_data,\n+                                                      ex.id, ex.span,\n+                                                      out_lp, out.id);\n+                  }\n+                  None => {\n+                      // See the comment for ExprAssign.\n+                  }\n+              }\n+          }\n+          visit::walk_expr(this, ex, ());\n+      }\n+\n       _ => {\n           visit::walk_expr(this, ex, ());\n       }"}, {"sha": "824dbb5b561064a71dab162d7a5a36b09e32164c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -1227,12 +1227,15 @@ impl Liveness {\n             self.propagate_through_expr(e, succ)\n           }\n \n-          ExprInlineAsm(ref ia) =>{\n+          ExprInlineAsm(ref ia) => {\n             let succ = do ia.inputs.rev_iter().fold(succ) |succ, &(_, expr)| {\n                 self.propagate_through_expr(expr, succ)\n             };\n             do ia.outputs.rev_iter().fold(succ) |succ, &(_, expr)| {\n-                self.propagate_through_expr(expr, succ)\n+                // see comment on lvalues in\n+                // propagate_through_lvalue_components()\n+                let succ = self.write_lvalue(expr, succ, ACC_WRITE);\n+                self.propagate_through_lvalue_components(expr, succ)\n             }\n           }\n \n@@ -1478,12 +1481,7 @@ fn check_expr(this: &mut Liveness, expr: @Expr) {\n \n         // Output operands must be lvalues\n         for &(_, out) in ia.outputs.iter() {\n-          match out.node {\n-            ExprAddrOf(_, inner) => {\n-              this.check_lvalue(inner);\n-            }\n-            _ => {}\n-          }\n+          this.check_lvalue(out);\n           this.visit_expr(out, ());\n         }\n "}, {"sha": "cfeefc8642c7a8a596cfd7b5aaea58a200dd4ad5", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "patch": "@@ -18,6 +18,8 @@ use lib;\n use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::common::*;\n+use middle::trans::expr::*;\n+use middle::trans::type_of::*;\n use middle::ty;\n \n use middle::trans::type_::Type;\n@@ -30,34 +32,15 @@ pub fn trans_inline_asm(bcx: @mut Block, ia: &ast::inline_asm) -> @mut Block {\n     let mut bcx = bcx;\n     let mut constraints = ~[];\n     let mut cleanups = ~[];\n-    let mut aoutputs = ~[];\n+    let mut output_types = ~[];\n \n     // Prepare the output operands\n     let outputs = do ia.outputs.map |&(c, out)| {\n         constraints.push(c);\n \n-        aoutputs.push(unpack_result!(bcx, {\n-            callee::trans_arg_expr(bcx,\n-                                   expr_ty(bcx, out),\n-                                   ty::ByCopy,\n-                                   out,\n-                                   &mut cleanups,\n-                                   callee::DontAutorefArg)\n-        }));\n-\n-        let e = match out.node {\n-            ast::ExprAddrOf(_, e) => e,\n-            _ => fail2!(\"Expression must be addr of\")\n-        };\n-\n-        unpack_result!(bcx, {\n-            callee::trans_arg_expr(bcx,\n-                                   expr_ty(bcx, e),\n-                                   ty::ByCopy,\n-                                   e,\n-                                   &mut cleanups,\n-                                   callee::DontAutorefArg)\n-        })\n+        let out_datum = unpack_datum!(bcx, trans_to_datum(bcx, out));\n+        output_types.push(type_of(bcx.ccx(), out_datum.ty));\n+        out_datum.val\n \n     };\n \n@@ -92,7 +75,7 @@ pub fn trans_inline_asm(bcx: @mut Block, ia: &ast::inline_asm) -> @mut Block {\n         clobbers = format!(\"{},{}\", ia.clobbers, clobbers);\n     } else {\n         clobbers.push_str(ia.clobbers);\n-    };\n+    }\n \n     // Add the clobbers to our constraints list\n     if clobbers.len() != 0 && constraints.len() != 0 {\n@@ -107,12 +90,12 @@ pub fn trans_inline_asm(bcx: @mut Block, ia: &ast::inline_asm) -> @mut Block {\n     let numOutputs = outputs.len();\n \n     // Depending on how many outputs we have, the return type is different\n-    let output = if numOutputs == 0 {\n+    let output_type = if numOutputs == 0 {\n         Type::void()\n     } else if numOutputs == 1 {\n-        val_ty(outputs[0])\n+        output_types[0]\n     } else {\n-        Type::struct_(outputs.map(|o| val_ty(*o)), false)\n+        Type::struct_(output_types, false)\n     };\n \n     let dialect = match ia.dialect {\n@@ -122,19 +105,17 @@ pub fn trans_inline_asm(bcx: @mut Block, ia: &ast::inline_asm) -> @mut Block {\n \n     let r = do ia.asm.with_c_str |a| {\n         do constraints.with_c_str |c| {\n-            InlineAsmCall(bcx, a, c, inputs, output, ia.volatile, ia.alignstack, dialect)\n+            InlineAsmCall(bcx, a, c, inputs, output_type, ia.volatile, ia.alignstack, dialect)\n         }\n     };\n \n     // Again, based on how many outputs we have\n     if numOutputs == 1 {\n-        let op = PointerCast(bcx, aoutputs[0], val_ty(outputs[0]).ptr_to());\n-        Store(bcx, r, op);\n+        Store(bcx, r, outputs[0]);\n     } else {\n-        for (i, o) in aoutputs.iter().enumerate() {\n+        for (i, o) in outputs.iter().enumerate() {\n             let v = ExtractValue(bcx, r, i);\n-            let op = PointerCast(bcx, *o, val_ty(outputs[i]).ptr_to());\n-            Store(bcx, v, op);\n+            Store(bcx, v, *o);\n         }\n     }\n "}, {"sha": "f4b1c7f1f06df811bd62b7adea98030387d20525", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "patch": "@@ -75,16 +75,18 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                     }\n \n                     let (constraint, _str_style) = p.parse_str();\n+\n+                    if constraint.starts_with(\"+\") {\n+                        cx.span_unimpl(*p.last_span,\n+                                       \"'+' (read+write) output operand constraint modifier\");\n+                    } else if !constraint.starts_with(\"=\") {\n+                        cx.span_err(*p.last_span, \"output operand constraint lacks '='\");\n+                    }\n+\n                     p.expect(&token::LPAREN);\n                     let out = p.parse_expr();\n                     p.expect(&token::RPAREN);\n \n-                    let out = @ast::Expr {\n-                        id: ast::DUMMY_NODE_ID,\n-                        span: out.span,\n-                        node: ast::ExprAddrOf(ast::MutMutable, out)\n-                    };\n-\n                     outputs.push((constraint, out));\n                 }\n             }\n@@ -98,6 +100,13 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                     }\n \n                     let (constraint, _str_style) = p.parse_str();\n+\n+                    if constraint.starts_with(\"=\") {\n+                        cx.span_err(*p.last_span, \"input operand constraint contains '='\");\n+                    } else if constraint.starts_with(\"+\") {\n+                        cx.span_err(*p.last_span, \"input operand constraint contains '+'\");\n+                    }\n+\n                     p.expect(&token::LPAREN);\n                     let input = p.parse_expr();\n                     p.expect(&token::RPAREN);"}, {"sha": "442536b1e29a46f1157bd3bb71d13dd2edb92d2a", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(x: int) { info2!(\"{}\", x); }\n+\n+#[cfg(target_arch = \"x86\")]\n+#[cfg(target_arch = \"x86_64\")]\n+pub fn main() {\n+    let x: int;\n+    let y: int;\n+    unsafe {\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5u)); //~ ERROR input operand constraint contains '='\n+        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5u)); //~ ERROR input operand constraint contains '+'\n+    }\n+    foo(x);\n+    foo(y);\n+}\n+\n+#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\n+pub fn main() {}"}, {"sha": "6709e803d88ed9a27985b082a332a2ee4e50f893", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(x: int) { info2!(\"{}\", x); }\n+\n+#[cfg(target_arch = \"x86\")]\n+#[cfg(target_arch = \"x86_64\")]\n+pub fn main() {\n+    let x: int;\n+    x = 1; //~ NOTE prior assignment occurs here\n+    foo(x);\n+    unsafe {\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5u)); //~ ERROR re-assignment of immutable variable `x`\n+    }\n+    foo(x);\n+}\n+\n+#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\n+pub fn main() {}"}, {"sha": "9ddb0d529d457fb941844e831172df4f10a3641a", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(x: int) { info2!(\"{}\", x); }\n+\n+#[cfg(target_arch = \"x86\")]\n+#[cfg(target_arch = \"x86_64\")]\n+pub fn main() {\n+    let x: int;\n+    unsafe {\n+        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5u)); //~ ERROR output operand constraint lacks '='\n+    }\n+    foo(x);\n+}\n+\n+#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\n+pub fn main() {}"}, {"sha": "9a3701511e36ef23717e6f7b65fedcd8ae77c79c", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(x: int) { info2!(\"{}\", x); }\n+\n+#[cfg(target_arch = \"x86\")]\n+#[cfg(target_arch = \"x86_64\")]\n+pub fn main() {\n+    let x: int;\n+    unsafe {\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x)); //~ ERROR use of possibly uninitialized value: `x`\n+    }\n+    foo(x);\n+}\n+\n+#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\n+pub fn main() {}"}, {"sha": "2e1fc65d2baefce02b4fd968f1ce2fac836152b8", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0b0cd41fc4bf567694ebedb2d927da9bf2551/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=7ab0b0cd41fc4bf567694ebedb2d927da9bf2551", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[cfg(target_arch = \"x86\")]\n+#[cfg(target_arch = \"x86_64\")]\n+pub fn main() {\n+    let x: int;\n+    unsafe {\n+        // Treat the output as initialization.\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5u));\n+    }\n+    assert_eq!(x, 5);\n+\n+    let mut x = x + 1;\n+    assert_eq!(x, 6);\n+\n+    unsafe {\n+        // Assignment to mutable.\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x + 7));\n+    }\n+    assert_eq!(x, 13);\n+}\n+\n+#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\n+pub fn main() {}"}]}