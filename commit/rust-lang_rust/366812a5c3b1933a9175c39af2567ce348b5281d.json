{"sha": "366812a5c3b1933a9175c39af2567ce348b5281d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NjgxMmE1YzNiMTkzM2E5MTc1YzM5YWYyNTY3Y2UzNDhiNTI4MWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-31T03:42:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-31T03:52:45Z"}, "message": "librustc: Change `self` as a type to `Self` everywhere. r=brson", "tree": {"sha": "19d1b67d1f4df41a709f6e3f4f661bf1da24ed63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d1b67d1f4df41a709f6e3f4f661bf1da24ed63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/366812a5c3b1933a9175c39af2567ce348b5281d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/366812a5c3b1933a9175c39af2567ce348b5281d", "html_url": "https://github.com/rust-lang/rust/commit/366812a5c3b1933a9175c39af2567ce348b5281d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/366812a5c3b1933a9175c39af2567ce348b5281d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63b2b9c4a89a13fb6855086d183272bd5e360a65", "url": "https://api.github.com/repos/rust-lang/rust/commits/63b2b9c4a89a13fb6855086d183272bd5e360a65", "html_url": "https://github.com/rust-lang/rust/commit/63b2b9c4a89a13fb6855086d183272bd5e360a65"}], "stats": {"total": 177, "additions": 87, "deletions": 90}, "files": [{"sha": "6ccf13a8d4d98f399970ddfd2ec2b7323d61d3e6", "filename": "doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -1993,10 +1993,10 @@ trait, `self` is a type, and in an impl, `self` is a value. The\n following trait describes types that support an equality operation:\n \n ~~~~\n-// In a trait, `self` refers both to the self argument\n-// and to the type implementing the trait\n+// In a trait, `self` refers to the self argument.\n+// `Self` refers to the type implementing the trait.\n trait Eq {\n-    fn equals(&self, other: &self) -> bool;\n+    fn equals(&self, other: &Self) -> bool;\n }\n \n // In an impl, `self` refers just to the value of the receiver\n@@ -2015,7 +2015,7 @@ the method name with the trait name.\n The compiler will use type inference to decide which implementation to call.\n \n ~~~~\n-trait Shape { static fn new(area: float) -> self; }\n+trait Shape { static fn new(area: float) -> Self; }\n # use float::consts::pi;\n # use float::sqrt;\n struct Circle { radius: float }"}, {"sha": "7b66c7c934b2b81d655b4c7c53ffad55060eb8f8", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -12,7 +12,7 @@\n Clonable types are copied with the clone method\n */\n pub trait Clone {\n-    fn clone(&self) -> self;\n+    fn clone(&self) -> Self;\n }\n \n impl (): Clone {"}, {"sha": "038ea2ba6759be29810f91215d01608383513d9a", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -37,8 +37,8 @@ and `Eq` to overload the `==` and `!=` operators.\n */\n #[lang=\"eq\"]\n pub trait Eq {\n-    pure fn eq(&self, other: &self) -> bool;\n-    pure fn ne(&self, other: &self) -> bool;\n+    pure fn eq(&self, other: &Self) -> bool;\n+    pure fn ne(&self, other: &Self) -> bool;\n }\n \n /**\n@@ -53,10 +53,10 @@ pub trait Eq {\n */\n #[lang=\"ord\"]\n pub trait Ord {\n-    pure fn lt(&self, other: &self) -> bool;\n-    pure fn le(&self, other: &self) -> bool;\n-    pure fn ge(&self, other: &self) -> bool;\n-    pure fn gt(&self, other: &self) -> bool;\n+    pure fn lt(&self, other: &Self) -> bool;\n+    pure fn le(&self, other: &Self) -> bool;\n+    pure fn ge(&self, other: &Self) -> bool;\n+    pure fn gt(&self, other: &Self) -> bool;\n }\n \n #[inline(always)]"}, {"sha": "c8be690a38c8c81c5ed3803c821a0e50f97fc78c", "filename": "src/libcore/container.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -68,23 +68,23 @@ pub trait Set<T>: Mutable {\n \n     /// Return true if the set has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n-    pure fn is_disjoint(&self, other: &self) -> bool;\n+    pure fn is_disjoint(&self, other: &Self) -> bool;\n \n     /// Return true if the set is a subset of another\n-    pure fn is_subset(&self, other: &self) -> bool;\n+    pure fn is_subset(&self, other: &Self) -> bool;\n \n     /// Return true if the set is a superset of another\n-    pure fn is_superset(&self, other: &self) -> bool;\n+    pure fn is_superset(&self, other: &Self) -> bool;\n \n     /// Visit the values representing the difference\n-    pure fn difference(&self, other: &self, f: fn(&T) -> bool);\n+    pure fn difference(&self, other: &Self, f: fn(&T) -> bool);\n \n     /// Visit the values representing the symmetric difference\n-    pure fn symmetric_difference(&self, other: &self, f: fn(&T) -> bool);\n+    pure fn symmetric_difference(&self, other: &Self, f: fn(&T) -> bool);\n \n     /// Visit the values representing the intersection\n-    pure fn intersection(&self, other: &self, f: fn(&T) -> bool);\n+    pure fn intersection(&self, other: &Self, f: fn(&T) -> bool);\n \n     /// Visit the values representing the union\n-    pure fn union(&self, other: &self, f: fn(&T) -> bool);\n+    pure fn union(&self, other: &Self, f: fn(&T) -> bool);\n }"}, {"sha": "c3fda7eb8bdd57b0cb0ec41aa8f69642ed8a433e", "filename": "src/libcore/from_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Ffrom_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Ffrom_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffrom_str.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -17,6 +17,6 @@\n use option::Option;\n \n pub trait FromStr {\n-    static pure fn from_str(s: &str) -> Option<self>;\n+    static pure fn from_str(s: &str) -> Option<Self>;\n }\n "}, {"sha": "69f7bd3f4789c6aef9480ea58b24e27127d12a11", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -85,7 +85,7 @@ pub trait Buildable<A> {\n      *             onto the sequence being constructed.\n      */\n      static pure fn build_sized(size: uint,\n-                                builder: fn(push: pure fn(A))) -> self;\n+                                builder: fn(push: pure fn(A))) -> Self;\n }\n \n #[inline(always)]"}, {"sha": "5680e3116bfb661e0c4c9c3a43e55a35bcbdbbcd", "filename": "src/libcore/num.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -12,26 +12,26 @@\n \n pub trait Num {\n     // FIXME: Trait composition. (#2616)\n-    pure fn add(&self, other: &self) -> self;\n-    pure fn sub(&self, other: &self) -> self;\n-    pure fn mul(&self, other: &self) -> self;\n-    pure fn div(&self, other: &self) -> self;\n-    pure fn modulo(&self, other: &self) -> self;\n-    pure fn neg(&self) -> self;\n+    pure fn add(&self, other: &Self) -> Self;\n+    pure fn sub(&self, other: &Self) -> Self;\n+    pure fn mul(&self, other: &Self) -> Self;\n+    pure fn div(&self, other: &Self) -> Self;\n+    pure fn modulo(&self, other: &Self) -> Self;\n+    pure fn neg(&self) -> Self;\n \n     pure fn to_int(&self) -> int;\n-    static pure fn from_int(n: int) -> self;\n+    static pure fn from_int(n: int) -> Self;\n }\n \n pub trait IntConvertible {\n     pure fn to_int(&self) -> int;\n-    static pure fn from_int(n: int) -> self;\n+    static pure fn from_int(n: int) -> Self;\n }\n \n pub trait Zero {\n-    static pure fn zero() -> self;\n+    static pure fn zero() -> Self;\n }\n \n pub trait One {\n-    static pure fn one() -> self;\n+    static pure fn one() -> Self;\n }"}, {"sha": "2f9b2967775c3b5aade7a91ad900b1957a0a00d7", "filename": "src/libcore/path.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -48,28 +48,27 @@ pub pure fn PosixPath(s: &str) -> PosixPath {\n }\n \n pub trait GenericPath {\n-\n-    static pure fn from_str(&str) -> self;\n+    static pure fn from_str(&str) -> Self;\n \n     pure fn dirname() -> ~str;\n     pure fn filename() -> Option<~str>;\n     pure fn filestem() -> Option<~str>;\n     pure fn filetype() -> Option<~str>;\n \n-    pure fn with_dirname((&str)) -> self;\n-    pure fn with_filename((&str)) -> self;\n-    pure fn with_filestem((&str)) -> self;\n-    pure fn with_filetype((&str)) -> self;\n+    pure fn with_dirname((&str)) -> Self;\n+    pure fn with_filename((&str)) -> Self;\n+    pure fn with_filestem((&str)) -> Self;\n+    pure fn with_filetype((&str)) -> Self;\n \n-    pure fn dir_path() -> self;\n-    pure fn file_path() -> self;\n+    pure fn dir_path() -> Self;\n+    pure fn file_path() -> Self;\n \n-    pure fn push((&str)) -> self;\n-    pure fn push_rel((&self)) -> self;\n-    pure fn push_many((&[~str])) -> self;\n-    pure fn pop() -> self;\n+    pure fn push((&str)) -> Self;\n+    pure fn push_rel((&Self)) -> Self;\n+    pure fn push_many((&[~str])) -> Self;\n+    pure fn pop() -> Self;\n \n-    pure fn normalize() -> self;\n+    pure fn normalize() -> Self;\n }\n \n #[cfg(windows)]"}, {"sha": "fb82c07da04cc63e5a523a3f33b38daa923b7a5b", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -187,7 +187,7 @@ pub pure fn ref_eq<T>(thing: &a/T, other: &b/T) -> bool {\n pub trait Ptr<T> {\n     pure fn is_null() -> bool;\n     pure fn is_not_null() -> bool;\n-    pure fn offset(count: uint) -> self;\n+    pure fn offset(count: uint) -> Self;\n }\n \n #[cfg(stage0)]"}, {"sha": "d3759dca517de98fe167cd02033489e0f90b7a52", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -2119,9 +2119,9 @@ pub mod raw {\n }\n \n pub trait Trimmable {\n-    pure fn trim() -> self;\n-    pure fn trim_left() -> self;\n-    pure fn trim_right() -> self;\n+    pure fn trim() -> Self;\n+    pure fn trim_left() -> Self;\n+    pure fn trim_right() -> Self;\n }\n \n /// Extension methods for strings"}, {"sha": "ff7e5363d7c94095bb5de9960853a80b377395d4", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -77,7 +77,7 @@ enum extended_decode_ctxt {\n }\n \n trait tr {\n-    fn tr(xcx: extended_decode_ctxt) -> self;\n+    fn tr(xcx: extended_decode_ctxt) -> Self;\n }\n \n trait tr_intern {"}, {"sha": "a17db8652ce455e921a8ee3dc3603c897bd69c49", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -3581,8 +3581,6 @@ pub impl Resolver {\n                 // Create a new rib for the self type.\n                 let self_type_rib = @Rib(NormalRibKind);\n                 (*self.type_ribs).push(self_type_rib);\n-                self_type_rib.bindings.insert(self.self_ident,\n-                                              dl_def(def_self_ty(item.id)));\n                 self_type_rib.bindings.insert(self.type_self_ident,\n                                               dl_def(def_self_ty(item.id)));\n "}, {"sha": "5ea7937845d6c01d82478bc88c3822c765ae8a66", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -50,9 +50,9 @@ use middle::typeck::infer::to_str::InferStr;\n use std::list;\n \n pub trait LatticeValue {\n-    static fn sub(cf: &CombineFields, a: &self, b: &self) -> ures;\n-    static fn lub(cf: &CombineFields, a: &self, b: &self) -> cres<self>;\n-    static fn glb(cf: &CombineFields, a: &self, b: &self) -> cres<self>;\n+    static fn sub(cf: &CombineFields, a: &Self, b: &Self) -> ures;\n+    static fn lub(cf: &CombineFields, a: &Self, b: &Self) -> cres<Self>;\n+    static fn glb(cf: &CombineFields, a: &Self, b: &Self) -> cres<Self>;\n }\n \n pub type LatticeOp<T> = &fn(cf: &CombineFields, a: &T, b: &T) -> cres<T>;"}, {"sha": "30329f299455f4d990b65c5cd80c68b65b1af38c", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -39,7 +39,7 @@ pub struct Node<V, T> {\n \n pub trait UnifyVid<T> {\n     static fn appropriate_vals_and_bindings(infcx: &v/InferCtxt)\n-        -> &v/ValsAndBindings<self, T>;\n+        -> &v/ValsAndBindings<Self, T>;\n }\n \n pub impl InferCtxt {\n@@ -136,7 +136,7 @@ pub impl InferCtxt {\n // doesn't have a subtyping relationship we need to worry about.\n \n pub trait SimplyUnifiable {\n-    static fn to_type_err(expected_found<self>) -> ty::type_err;\n+    static fn to_type_err(expected_found<Self>) -> ty::type_err;\n }\n \n pub fn mk_err<T: SimplyUnifiable>(+a_is_expected: bool,"}, {"sha": "0bd7538d9472fd66ab457ef5f65922d9dd9dfaf3", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -18,8 +18,8 @@ use core::float;\n const fuzzy_epsilon: float = 1.0e-6;\n \n pub trait FuzzyEq {\n-    pure fn fuzzy_eq(&self, other: &self) -> bool;\n-    pure fn fuzzy_eq_eps(&self, other: &self, epsilon: &self) -> bool;\n+    pure fn fuzzy_eq(&self, other: &Self) -> bool;\n+    pure fn fuzzy_eq_eps(&self, other: &Self, epsilon: &Self) -> bool;\n }\n \n impl float: FuzzyEq {"}, {"sha": "f032d19271dd3bf8a7da77de53856f2298e95d6c", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -467,11 +467,11 @@ pub mod flatteners {\n     }\n \n     pub trait FromReader {\n-        static fn from_reader(r: Reader) -> self;\n+        static fn from_reader(r: Reader) -> Self;\n     }\n \n     pub trait FromWriter {\n-        static fn from_writer(w: Writer) -> self;\n+        static fn from_writer(w: Writer) -> Self;\n     }\n \n     impl json::Decoder: FromReader {"}, {"sha": "91e1f05daae54b651273ebb65334ccd615b64335", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -111,7 +111,7 @@ pub trait Encodable<S: Encoder> {\n }\n \n pub trait Decodable<D: Decoder> {\n-    static fn decode(&self, d: &D) -> self;\n+    static fn decode(&self, d: &D) -> Self;\n }\n \n pub impl<S: Encoder> uint: Encodable<S> {"}, {"sha": "980d4a236e093326542e67d320dffcc002a1b21f", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -34,7 +34,7 @@ use core::vec;\n use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {\n-    static pure fn from_uint(n: uint) -> self;\n+    static pure fn from_uint(n: uint) -> Self;\n     pure fn to_uint(&self) -> uint;\n }\n "}, {"sha": "798f05b84851b60ed358387a318713dddd217264", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -14,7 +14,7 @@\n #[crate_type = \"lib\"];\n \n pub trait read {\n-    static fn readMaybe(s: ~str) -> Option<self>;\n+    static fn readMaybe(s: ~str) -> Option<Self>;\n }\n \n impl int: read {"}, {"sha": "78e3dcca39db08c98dfce75a55d28a8fe6c06811", "filename": "src/test/auxiliary/static_fn_inline_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -11,7 +11,7 @@\n \n pub mod num {\n     pub trait Num2 {\n-        static pure fn from_int2(n: int) -> self;\n+        static pure fn from_int2(n: int) -> Self;\n     }\n }\n "}, {"sha": "d28d6ce187a95fab9bd49de35b3724135087e311", "filename": "src/test/auxiliary/static_fn_trait_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -1,6 +1,6 @@\n pub mod num {\n     pub trait Num2 {\n-        static pure fn from_int2(n: int) -> self;\n+        static pure fn from_int2(n: int) -> Self;\n     }\n }\n "}, {"sha": "950f4b6bbe72c1bd21944cc9d4c5d27e59574e83", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -10,7 +10,7 @@\n \n use cmp::Eq;\n \n-pub trait MyNum : Add<self,self> Sub<self,self> Mul<self,self> Eq {\n+pub trait MyNum : Add<Self,Self> Sub<Self,Self> Mul<Self,Self> Eq {\n }\n \n pub struct MyInt {"}, {"sha": "8b068f47c8f79f835c4d7b8b0df094bac8a807a9", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -12,7 +12,7 @@\n // issue 2258\n \n trait to_opt {\n-    fn to_option() -> Option<self>;\n+    fn to_option() -> Option<Self>;\n }\n \n impl uint: to_opt {"}, {"sha": "bff6344bc5539321a3d1bca13cfaf13164524199", "filename": "src/test/compile-fail/missing-derivable-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait MyEq {\n-    pure fn eq(&self, other: &self) -> bool;\n+    pure fn eq(&self, other: &Self) -> bool;\n }\n \n struct A {"}, {"sha": "e3bdb97e744d8cc35f78b5dafea602a34f3b21cf", "filename": "src/test/compile-fail/selftype-astparam.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait add {\n-    fn plus(++x: self) -> self;\n+    fn plus(++x: Self) -> Self;\n }\n \n impl int: add {"}, {"sha": "f704f4086621c4cdfe77387cc2db18d54e84e983", "filename": "src/test/compile-fail/selftype-traittype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait add {\n-    fn plus(x: self) -> self;\n+    fn plus(x: Self) -> Self;\n }\n \n fn do_add(x: add, y: add) -> add {"}, {"sha": "8ff4188d4b6e0b41de38895dabefb65a87ccb2dc", "filename": "src/test/compile-fail/trait-impl-different-num-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait foo {\n-    fn bar(x: uint) -> self;\n+    fn bar(x: uint) -> Self;\n }\n impl int: foo {\n     fn bar() -> int {"}, {"sha": "cabcbff11545439b7d4df2578a17dc7e8c18e13f", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait bar { fn dup() -> self; fn blah<X>(); }\n+trait bar { fn dup() -> Self; fn blah<X>(); }\n impl int: bar { fn dup() -> int { self } fn blah<X>() {} }\n impl uint: bar { fn dup() -> uint { self } fn blah<X>() {} }\n "}, {"sha": "6eba8771fce59fc5ace50db5bc3523432950e660", "filename": "src/test/run-pass/static-method-in-trait-with-tps-intracrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -13,7 +13,7 @@ trait Deserializer {\n }\n \n trait Deserializable<D: Deserializer> {\n-    static fn deserialize(d: &D) -> self;\n+    static fn deserialize(d: &D) -> Self;\n }\n \n impl<D: Deserializer> int: Deserializable<D> {\n@@ -32,4 +32,4 @@ fn main() {\n     let d = FromThinAir { dummy: () };\n     let i: int = Deserializable::deserialize(&d);\n     assert i == 22;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9ee65547cbae31355785539d08986103e103dfb8", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -14,7 +14,7 @@\n // A trait for objects that can be used to do an if-then-else\n // (No actual need for this to be static, but it is a simple test.)\n trait bool_like {\n-    static fn select<A>(b: self, +x1: A, +x2: A) -> A;\n+    static fn select<A>(b: Self, +x1: A, +x2: A) -> A;\n }\n \n fn andand<T: bool_like Copy>(x1: T, x2: T) -> T {\n@@ -36,7 +36,7 @@ impl int: bool_like {\n // A trait for sequences that can be constructed imperatively.\n trait buildable<A> {\n      static pure fn build_sized(size: uint,\n-                                builder: fn(push: pure fn(+v: A))) -> self;\n+                                builder: fn(push: pure fn(+v: A))) -> Self;\n }\n \n "}, {"sha": "6e5160da76315c52e96bff145626f9416641e4cd", "filename": "src/test/run-pass/static-methods-in-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -10,7 +10,7 @@\n \n mod a {\n \tpub trait Foo {\n-\t\tstatic pub fn foo() -> self;\n+\t\tstatic pub fn foo() -> Self;\n \t}\n \n \timpl int : Foo {"}, {"sha": "7851aa481d3c60e79c43c9160bdfedd4f1e12ff7", "filename": "src/test/run-pass/static-methods-in-traits2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -1,5 +1,5 @@\n pub trait Number: NumConv {\n-    static pure fn from<T:Number>(n: T) -> self;\n+    static pure fn from<T:Number>(n: T) -> Self;\n }\n \n pub impl float: Number {\n@@ -16,4 +16,4 @@ pub impl float: NumConv {\n \n fn main() {\n     let _: float = Number::from(0.0f);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2d82832652f48a78f4e73d7b3c780d22f2194e27", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -15,8 +15,8 @@\n use Num::from_int;\n \n trait Num {\n-    static fn from_int(i: int) -> self;\n-    fn gt(&self, other: &self) -> bool;\n+    static fn from_int(i: int) -> Self;\n+    fn gt(&self, other: &Self) -> bool;\n }\n \n pub trait NumExt: Num { }"}, {"sha": "e4f98bb7962929694fc51fdf69a1570c3bc2be6e", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -10,7 +10,7 @@\n \n use cmp::Eq;\n \n-trait MyNum : Add<self,self> Sub<self,self> Mul<self,self> Eq { }\n+trait MyNum : Add<Self,Self> Sub<Self,Self> Mul<Self,Self> Eq { }\n \n struct MyInt { val: int }\n "}, {"sha": "636cd5cd3970b0409d78175e9d5897d82e54b8df", "filename": "src/test/run-pass/trait-inheritance-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -2,7 +2,7 @@ trait Foo<T> {\n     fn f(&self, x: &T);\n }\n \n-trait Bar : Foo<self> {\n+trait Bar : Foo<Self> {\n     fn g(&self);\n }\n "}, {"sha": "4a874f02a6a507769ec71aeccc131afeb075f73c", "filename": "src/test/run-pass/trait-inheritance-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait MyNum {\n-    static fn from_int(int) -> self;\n+    static fn from_int(int) -> Self;\n }\n \n pub trait NumExt: MyNum { }"}, {"sha": "b767f34b4b11bd504538380082825e5ccd682d0f", "filename": "src/test/run-pass/trait-inheritance-static2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -11,7 +11,7 @@\n trait MyEq { }\n \n trait MyNum {\n-    static fn from_int(int) -> self;\n+    static fn from_int(int) -> Self;\n }\n \n pub trait NumExt: MyEq MyNum { }"}, {"sha": "686c5cba633458e44e2b4c3e7bafa91b32758b3a", "filename": "src/test/run-pass/trait-inheritance-subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -12,7 +12,7 @@ pub trait Add<RHS,Result> {\n     pure fn add(rhs: &RHS) -> Result;\n }\n \n-trait MyNum : Add<self,self> { }\n+trait MyNum : Add<Self,Self> { }\n \n struct MyInt { val: int }\n "}, {"sha": "54a7e811a1ca25b207f7b3cf0216e3846d67e1f8", "filename": "src/test/run-pass/trait-inheritance-subst2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -16,7 +16,7 @@ trait Add<RHS,Result>: Panda<RHS> {\n     fn add(rhs: &RHS) -> Result;\n }\n \n-trait MyNum : Add<self,self> { }\n+trait MyNum : Add<Self,Self> { }\n \n struct MyInt { val: int }\n "}, {"sha": "3da714f0a7bd43a6fc29f4d8d2ad1630708fc6fb", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -12,7 +12,7 @@\n // methods!\n \n trait Equal {\n-    static fn isEq(a: self, b: self) -> bool;\n+    static fn isEq(a: Self, b: Self) -> bool;\n }\n \n enum Color { cyan, magenta, yellow, black }\n@@ -62,4 +62,4 @@ fn main() {\n                  branch(@leaf(magenta), @leaf(magenta)));\n \n     log(error, \"Assertions all succeeded!\");\n-}\n\\ No newline at end of file\n+}"}, {"sha": "75a574b1dda954675863dbbc47ce2a91e7eb5080", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366812a5c3b1933a9175c39af2567ce348b5281d/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=366812a5c3b1933a9175c39af2567ce348b5281d", "patch": "@@ -11,7 +11,7 @@\n // Example from lkuper's intern talk, August 2012.\n \n trait Equal {\n-    fn isEq(a: self) -> bool;\n+    fn isEq(a: Self) -> bool;\n }\n \n enum Color { cyan, magenta, yellow, black }\n@@ -61,4 +61,4 @@ fn main() {\n         .isEq(branch(@leaf(magenta), @leaf(magenta)));\n \n     log(error, \"Assertions all succeeded!\");\n-}\n\\ No newline at end of file\n+}"}]}