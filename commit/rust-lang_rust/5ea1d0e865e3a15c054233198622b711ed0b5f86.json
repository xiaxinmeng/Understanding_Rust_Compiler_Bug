{"sha": "5ea1d0e865e3a15c054233198622b711ed0b5f86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYTFkMGU4NjVlM2ExNWMwNTQyMzMxOTg2MjJiNzExZWQwYjVmODY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-01-14T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-01-14T12:13:13Z"}, "message": "Don't ICE when computing a layout of a generator tainted by errors", "tree": {"sha": "d9c4f5a777b7ba50a9aa3568ae98f896fafdb489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9c4f5a777b7ba50a9aa3568ae98f896fafdb489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ea1d0e865e3a15c054233198622b711ed0b5f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea1d0e865e3a15c054233198622b711ed0b5f86", "html_url": "https://github.com/rust-lang/rust/commit/5ea1d0e865e3a15c054233198622b711ed0b5f86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ea1d0e865e3a15c054233198622b711ed0b5f86/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4f022e1099c712fdcc8555fd10caccb1a631877", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f022e1099c712fdcc8555fd10caccb1a631877", "html_url": "https://github.com/rust-lang/rust/commit/a4f022e1099c712fdcc8555fd10caccb1a631877"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "b9ae796325023eec4dd6aed9ae7b0f4a6460a219", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ea1d0e865e3a15c054233198622b711ed0b5f86/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea1d0e865e3a15c054233198622b711ed0b5f86/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=5ea1d0e865e3a15c054233198622b711ed0b5f86", "patch": "@@ -1832,8 +1832,9 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n     fn source_info(&self, cx: &CodegenCx<'ll, 'tcx>) -> Option<SourceInfo<'ll>> {\n         match self {\n             VariantInfo::Generator { def_id, variant_index, .. } => {\n-                let span =\n-                    cx.tcx.generator_layout(*def_id).variant_source_info[*variant_index].span;\n+                let span = cx.tcx.generator_layout(*def_id).unwrap().variant_source_info\n+                    [*variant_index]\n+                    .span;\n                 if !span.is_dummy() {\n                     let loc = cx.lookup_debug_loc(span.lo());\n                     return Some(SourceInfo {"}, {"sha": "195e840866aec802a1b1edbcabea2fb3ddb31381", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ea1d0e865e3a15c054233198622b711ed0b5f86/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea1d0e865e3a15c054233198622b711ed0b5f86/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=5ea1d0e865e3a15c054233198622b711ed0b5f86", "patch": "@@ -1466,10 +1466,12 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     ) -> Result<&'tcx Layout, LayoutError<'tcx>> {\n         use SavedLocalEligibility::*;\n         let tcx = self.tcx;\n-\n         let subst_field = |ty: Ty<'tcx>| ty.subst(tcx, substs);\n \n-        let info = tcx.generator_layout(def_id);\n+        let info = match tcx.generator_layout(def_id) {\n+            None => return Err(LayoutError::Unknown(ty)),\n+            Some(info) => info,\n+        };\n         let (ineligible_locals, assignments) = self.generator_saved_local_eligibility(&info);\n \n         // Build a prefix layout, including \"promoting\" all ineligible"}, {"sha": "1399fc76e02d693f3310d511334260013f929cbd", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ea1d0e865e3a15c054233198622b711ed0b5f86/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea1d0e865e3a15c054233198622b711ed0b5f86/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5ea1d0e865e3a15c054233198622b711ed0b5f86", "patch": "@@ -3068,8 +3068,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.trait_def(trait_def_id).has_auto_impl\n     }\n \n-    pub fn generator_layout(self, def_id: DefId) -> &'tcx GeneratorLayout<'tcx> {\n-        self.optimized_mir(def_id).generator_layout.as_ref().unwrap()\n+    /// Returns layout of a generator. Layout might be unavailable if the\n+    /// generator is tainted by errors.\n+    pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {\n+        self.optimized_mir(def_id).generator_layout.as_ref()\n     }\n \n     /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements."}, {"sha": "d43c5135d90d59e56dc681790468a0ce52198106", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ea1d0e865e3a15c054233198622b711ed0b5f86/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea1d0e865e3a15c054233198622b711ed0b5f86/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=5ea1d0e865e3a15c054233198622b711ed0b5f86", "patch": "@@ -605,7 +605,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     #[inline]\n     pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> Range<VariantIdx> {\n         // FIXME requires optimized MIR\n-        let num_variants = tcx.generator_layout(def_id).variant_fields.len();\n+        let num_variants = tcx.generator_layout(def_id).unwrap().variant_fields.len();\n         VariantIdx::new(0)..VariantIdx::new(num_variants)\n     }\n \n@@ -666,7 +666,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         def_id: DefId,\n         tcx: TyCtxt<'tcx>,\n     ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {\n-        let layout = tcx.generator_layout(def_id);\n+        let layout = tcx.generator_layout(def_id).unwrap();\n         layout.variant_fields.iter().map(move |variant| {\n             variant.iter().map(move |field| layout.field_tys[*field].subst(tcx, self.substs))\n         })"}, {"sha": "059867277ad436d75c3753991be44e9ba7ecb71c", "filename": "src/test/ui/generator/layout-error.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5ea1d0e865e3a15c054233198622b711ed0b5f86/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea1d0e865e3a15c054233198622b711ed0b5f86/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs?ref=5ea1d0e865e3a15c054233198622b711ed0b5f86", "patch": "@@ -0,0 +1,28 @@\n+// Verifies that computing a layout of a generator tainted by type errors\n+// doesn't ICE. Regression test for #80998.\n+//\n+// edition:2018\n+\n+#![feature(type_alias_impl_trait)]\n+use std::future::Future;\n+\n+pub struct Task<F: Future>(F);\n+impl<F: Future> Task<F> {\n+    fn new() -> Self {\n+        todo!()\n+    }\n+    fn spawn(&self, _: impl FnOnce() -> F) {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    async fn cb() {\n+        let a = Foo; //~ ERROR cannot find value `Foo` in this scope\n+    }\n+\n+    type F = impl Future;\n+    // Check that statics are inhabited computes they layout.\n+    static POOL: Task<F> = Task::new();\n+    Task::spawn(&POOL, || cb());\n+}"}, {"sha": "b1a258f4f2ca7d10214377632981648d158528e1", "filename": "src/test/ui/generator/layout-error.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ea1d0e865e3a15c054233198622b711ed0b5f86/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ea1d0e865e3a15c054233198622b711ed0b5f86/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr?ref=5ea1d0e865e3a15c054233198622b711ed0b5f86", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `Foo` in this scope\n+  --> $DIR/layout-error.rs:21:17\n+   |\n+LL |         let a = Foo;\n+   |                 ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}