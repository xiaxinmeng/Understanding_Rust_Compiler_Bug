{"sha": "48d1be4f46225350bb59f87a46bf2f6cba041013", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZDFiZTRmNDYyMjUzNTBiYjU5Zjg3YTQ2YmYyZjZjYmEwNDEwMTM=", "commit": {"author": {"name": "Peter Todd", "email": "pete@petertodd.org", "date": "2019-05-06T21:06:59Z"}, "committer": {"name": "Peter Todd", "email": "pete@petertodd.org", "date": "2019-05-06T21:26:35Z"}, "message": "Test interaction of unions with non-zero/niche-filling optimization\n\nNotably this nails down part of the behavior that MaybeUninit assumes,\ne.g. that a Option<MaybeUninit<&u8>> does not take advantage of non-zero\noptimization, and thus is a safe construct.", "tree": {"sha": "a99e320ea4cdeb10b09048489955400bec8f64bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a99e320ea4cdeb10b09048489955400bec8f64bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48d1be4f46225350bb59f87a46bf2f6cba041013", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEFcyURjhyM68BBPYTJIFAPaXwkfsFAlzQpt4ACgkQJIFAPaXw\nkfuTKAf9HvDdOt6/uk0RpWMVU+bS7IjvK9hWNItbpC4+PyLS6NAtSfWoZWQE46G7\nM2xeymx8JdPZkAPWTHFeSu0pjvuOgxNPwGOZGm+bTORiEELzS3gjv4YgG+UBhGQW\nLsRj41qEeab5wCNrbyEsTO4KVpx2B/liJGhR8jEu7GtY75GuYTSBs/hgVdScbGfu\nlHJSTHS1U0lpnRnM+CIDSYv5tKRlKM9A4lDWJc4Al/tDLDJH41jVrCdYWY0wBtFm\nmuf8ywtfYqZ3Vw6aR2913lcGGt2oWqdIitAdQE50+x5OeCTbU+VSZ6UbE9ChSOf9\nUXYsFrwah1Epp6683dwHUhdSB7tB/Q==\n=uVNO\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPpK6xJ2SQgoECjFHd/DQBTex4j/Gdb3UDFnpHaIT4aTCP/wEDkRH40mL7gK\nN1UlvoDwwTsI8QRc0Kbz8AgJEsrVsbEryACD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQahqIm2/FuvDoEMNT\n/Nv+fgjxBFzQpvTwCOlITs9azZ74AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQyo6H+efAF748wMIvxhOSwAjx\nBFzQpvTwCNb1y/g5uVbDAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5j\nYXRhbGxheHkuY29t8BDS+A2e7dpBMPpZ/yNfKY37CPAQGszjhP/VeODsltKQndUK\nAQjxBFzQpvTwCF78+onsI2vWAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----", "payload": "tree a99e320ea4cdeb10b09048489955400bec8f64bb\nparent c3b8ab5199af4a3c11d14b0cbdb17a641e8eee71\nauthor Peter Todd <pete@petertodd.org> 1557176819 -0400\ncommitter Peter Todd <pete@petertodd.org> 1557177995 -0400\n\nTest interaction of unions with non-zero/niche-filling optimization\n\nNotably this nails down part of the behavior that MaybeUninit assumes,\ne.g. that a Option<MaybeUninit<&u8>> does not take advantage of non-zero\noptimization, and thus is a safe construct.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48d1be4f46225350bb59f87a46bf2f6cba041013", "html_url": "https://github.com/rust-lang/rust/commit/48d1be4f46225350bb59f87a46bf2f6cba041013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48d1be4f46225350bb59f87a46bf2f6cba041013/comments", "author": {"login": "petertodd", "id": 7042, "node_id": "MDQ6VXNlcjcwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petertodd", "html_url": "https://github.com/petertodd", "followers_url": "https://api.github.com/users/petertodd/followers", "following_url": "https://api.github.com/users/petertodd/following{/other_user}", "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions", "organizations_url": "https://api.github.com/users/petertodd/orgs", "repos_url": "https://api.github.com/users/petertodd/repos", "events_url": "https://api.github.com/users/petertodd/events{/privacy}", "received_events_url": "https://api.github.com/users/petertodd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petertodd", "id": 7042, "node_id": "MDQ6VXNlcjcwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petertodd", "html_url": "https://github.com/petertodd", "followers_url": "https://api.github.com/users/petertodd/followers", "following_url": "https://api.github.com/users/petertodd/following{/other_user}", "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions", "organizations_url": "https://api.github.com/users/petertodd/orgs", "repos_url": "https://api.github.com/users/petertodd/repos", "events_url": "https://api.github.com/users/petertodd/events{/privacy}", "received_events_url": "https://api.github.com/users/petertodd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3b8ab5199af4a3c11d14b0cbdb17a641e8eee71", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b8ab5199af4a3c11d14b0cbdb17a641e8eee71", "html_url": "https://github.com/rust-lang/rust/commit/c3b8ab5199af4a3c11d14b0cbdb17a641e8eee71"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "614aa9ec0ce17f08ddc336a9e99ded9819f33d10", "filename": "src/test/run-pass/union/union-nonzero.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/48d1be4f46225350bb59f87a46bf2f6cba041013/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d1be4f46225350bb59f87a46bf2f6cba041013/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs?ref=48d1be4f46225350bb59f87a46bf2f6cba041013", "patch": "@@ -0,0 +1,30 @@\n+// run-pass\n+#![allow(dead_code)]\n+\n+use std::mem::{size_of, transmute};\n+\n+union U1<A: Copy> {\n+    a: A,\n+}\n+\n+union U2<A: Copy, B: Copy> {\n+    a: A,\n+    b: B,\n+}\n+\n+fn main() {\n+    // Unions do not participate in niche-filling/non-zero optimization...\n+    assert!(size_of::<Option<U2<&u8, u8>>>() > size_of::<U2<&u8, u8>>());\n+    assert!(size_of::<Option<U2<&u8, ()>>>() > size_of::<U2<&u8, ()>>());\n+\n+    // ...even when theoretically possible:\n+    assert!(size_of::<Option<U1<&u8>>>() > size_of::<U1<&u8>>());\n+    assert!(size_of::<Option<U2<&u8, &u8>>>() > size_of::<U2<&u8, &u8>>());\n+\n+    // The unused bits of the () variant can have any value.\n+    let zeroed: U2<&u8, ()> = unsafe { transmute(std::ptr::null::<u8>()) };\n+\n+    if let None = Some(zeroed) {\n+        panic!()\n+    }\n+}"}, {"sha": "0127261b2b7d0a6111f68b71c1af2690c5c7819b", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/48d1be4f46225350bb59f87a46bf2f6cba041013/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d1be4f46225350bb59f87a46bf2f6cba041013/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=48d1be4f46225350bb59f87a46bf2f6cba041013", "patch": "@@ -57,6 +57,15 @@ pub enum Enum4<A, B, C, D> {\n     Four(D)\n }\n \n+pub union Union1<A: Copy> {\n+    a: A,\n+}\n+\n+pub union Union2<A: Copy, B: Copy> {\n+    a: A,\n+    b: B,\n+}\n+\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     let _x: MyOption<NonZeroU32> = Default::default();\n@@ -69,5 +78,13 @@ fn start(_: isize, _: *const *const u8) -> isize {\n     let _e: Enum4<(), char, (), ()> = Enum4::One(());\n     let _f: Enum4<(), (), bool, ()> = Enum4::One(());\n     let _g: Enum4<(), (), (), MyOption<u8>> = Enum4::One(());\n+\n+    // Unions do not currently participate in niche filling.\n+    let _h: MyOption<Union2<NonZeroU32, u32>> = Default::default();\n+\n+    // ...even when theoretically possible.\n+    let _i: MyOption<Union1<NonZeroU32>> = Default::default();\n+    let _j: MyOption<Union2<NonZeroU32, NonZeroU32>> = Default::default();\n+\n     0\n }"}, {"sha": "301edc0d086b11fee1b251fd47b5ab7ebba36190", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/48d1be4f46225350bb59f87a46bf2f6cba041013/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/48d1be4f46225350bb59f87a46bf2f6cba041013/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=48d1be4f46225350bb59f87a46bf2f6cba041013", "patch": "@@ -14,6 +14,21 @@ print-type-size         field `.post`: 2 bytes\n print-type-size         field `.pre`: 1 bytes\n print-type-size     variant `None`: 0 bytes\n print-type-size     end padding: 1 bytes\n+print-type-size type: `MyOption<Union1<std::num::NonZeroU32>>`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 4 bytes\n+print-type-size     variant `Some`: 4 bytes\n+print-type-size         field `.0`: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n+print-type-size type: `MyOption<Union2<std::num::NonZeroU32, std::num::NonZeroU32>>`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 4 bytes\n+print-type-size     variant `Some`: 4 bytes\n+print-type-size         field `.0`: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n+print-type-size type: `MyOption<Union2<std::num::NonZeroU32, u32>>`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 4 bytes\n+print-type-size     variant `Some`: 4 bytes\n+print-type-size         field `.0`: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size type: `NestedNonZero`: 8 bytes, alignment: 4 bytes\n print-type-size     field `.val`: 4 bytes\n print-type-size     field `.post`: 2 bytes\n@@ -36,6 +51,17 @@ print-type-size type: `MyOption<std::num::NonZeroU32>`: 4 bytes, alignment: 4 by\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes\n print-type-size     variant `None`: 0 bytes\n+print-type-size type: `Union1<std::num::NonZeroU32>`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Union1`: 4 bytes\n+print-type-size         field `.a`: 4 bytes\n+print-type-size type: `Union2<std::num::NonZeroU32, std::num::NonZeroU32>`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Union2`: 4 bytes\n+print-type-size         field `.a`: 4 bytes\n+print-type-size         field `.b`: 4 bytes, offset: 0 bytes, alignment: 4 bytes\n+print-type-size type: `Union2<std::num::NonZeroU32, u32>`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Union2`: 4 bytes\n+print-type-size         field `.a`: 4 bytes\n+print-type-size         field `.b`: 4 bytes, offset: 0 bytes, alignment: 4 bytes\n print-type-size type: `std::num::NonZeroU32`: 4 bytes, alignment: 4 bytes\n print-type-size     field `.0`: 4 bytes\n print-type-size type: `Enum4<(), (), (), MyOption<u8>>`: 2 bytes, alignment: 1 bytes"}]}