{"sha": "cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjRhZDRmMmFiZjQyZmY2MDNkNWY5ZTg5ZjEzNTJjYjc5YTQ1MWM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T12:06:01Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-18T13:25:54Z"}, "message": "Remove unwrap_none/expect_none from compiler/.", "tree": {"sha": "19cfc48983d2549969452202de101fd8e3846233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19cfc48983d2549969452202de101fd8e3846233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "html_url": "https://github.com/rust-lang/rust/commit/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "895a8e71b1a9fc42631f81b071bc855f7fb3e9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/895a8e71b1a9fc42631f81b071bc855f7fb3e9a4", "html_url": "https://github.com/rust-lang/rust/commit/895a8e71b1a9fc42631f81b071bc855f7fb3e9a4"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "dd04d3e548f8ccaf9858e06a2b7d4a3170b62f6a", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "patch": "@@ -1,6 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(assert_matches)]\n #![feature(bool_to_option)]\n-#![feature(option_expect_none)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n #![feature(try_blocks)]"}, {"sha": "31374429940cafaf14beae40478d35f7a96bf49e", "filename": "compiler/rustc_middle/src/ich/impls_syntax.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "patch": "@@ -45,7 +45,11 @@ impl<'ctx> rustc_ast::HashStableContext for StableHashingContext<'ctx> {\n             item.hash_stable(self, hasher);\n             style.hash_stable(self, hasher);\n             span.hash_stable(self, hasher);\n-            tokens.as_ref().expect_none(\"Tokens should have been removed during lowering!\");\n+            assert_matches!(\n+                tokens.as_ref(),\n+                None,\n+                \"Tokens should have been removed during lowering!\"\n+            );\n         } else {\n             unreachable!();\n         }"}, {"sha": "2d807591bfdd2a361778777ac6bb5672d505fbc4", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "patch": "@@ -24,6 +24,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n+#![feature(assert_matches)]\n #![feature(assoc_char_funcs)]\n #![feature(backtrace)]\n #![feature(bool_to_option)]\n@@ -38,7 +39,6 @@\n #![feature(extern_types)]\n #![feature(nll)]\n #![feature(once_cell)]\n-#![feature(option_expect_none)]\n #![feature(or_patterns)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]"}, {"sha": "766d6a06f7e59815c987d642729e853ba0b7ef9e", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "patch": "@@ -339,7 +339,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         for dest in bytes {\n             *dest = src.next().expect(\"iterator was shorter than it said it would be\");\n         }\n-        src.next().expect_none(\"iterator was longer than it said it would be\");\n+        assert_matches!(src.next(), None, \"iterator was longer than it said it would be\");\n         Ok(())\n     }\n "}, {"sha": "fe5ebf0b6fe972c5cf70114aba0b5e7ef55a4c4d", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "patch": "@@ -854,7 +854,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Some(ptr) => ptr,\n             None => {\n                 // zero-sized access\n-                src.next().expect_none(\"iterator said it was empty but returned an element\");\n+                assert_matches!(\n+                    src.next(),\n+                    None,\n+                    \"iterator said it was empty but returned an element\"\n+                );\n                 return Ok(());\n             }\n         };\n@@ -880,7 +884,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Some(ptr) => ptr,\n             None => {\n                 // zero-sized access\n-                src.next().expect_none(\"iterator said it was empty but returned an element\");\n+                assert_matches!(\n+                    src.next(),\n+                    None,\n+                    \"iterator said it was empty but returned an element\"\n+                );\n                 return Ok(());\n             }\n         };\n@@ -894,7 +902,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             let offset_ptr = ptr.offset(Size::from_bytes(idx) * 2, &tcx)?; // `Size` multiplication\n             allocation.write_scalar(&tcx, offset_ptr, val.into(), Size::from_bytes(2))?;\n         }\n-        src.next().expect_none(\"iterator was longer than it said it would be\");\n+        assert_matches!(src.next(), None, \"iterator was longer than it said it would be\");\n         Ok(())\n     }\n "}, {"sha": "f73d5dc0c116d8b1f0e06203d9152f360b267e01", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "patch": "@@ -7,6 +7,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n #![feature(array_windows)]\n+#![feature(assert_matches)]\n #![feature(bindings_after_at)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n@@ -18,13 +19,13 @@ Rust MIR: a lowered representation of Rust.\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n #![feature(never_type)]\n+#![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n #![feature(try_blocks)]\n #![feature(associated_type_defaults)]\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n-#![feature(option_expect_none)]\n #![feature(option_get_or_insert_default)]\n #![feature(or_patterns)]\n #![feature(once_cell)]"}, {"sha": "aabfee53acb29d160b9f4561463d9fd9ec4d9112", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "patch": "@@ -285,10 +285,8 @@ impl DebugCounters {\n                 ),\n             };\n             counters\n-                .insert(id, DebugCounter::new(counter_kind.clone(), some_block_label))\n-                .expect_none(\n-                    \"attempt to add the same counter_kind to DebugCounters more than once\",\n-                );\n+                .try_insert(id, DebugCounter::new(counter_kind.clone(), some_block_label))\n+                .expect(\"attempt to add the same counter_kind to DebugCounters more than once\");\n         }\n     }\n \n@@ -479,9 +477,9 @@ impl GraphvizData {\n         counter_kind: &CoverageKind,\n     ) {\n         if let Some(edge_to_counter) = self.some_edge_to_counter.as_mut() {\n-            edge_to_counter.insert((from_bcb, to_bb), counter_kind.clone()).expect_none(\n-                \"invalid attempt to insert more than one edge counter for the same edge\",\n-            );\n+            edge_to_counter\n+                .try_insert((from_bcb, to_bb), counter_kind.clone())\n+                .expect(\"invalid attempt to insert more than one edge counter for the same edge\");\n         }\n     }\n "}, {"sha": "e102512e1f37f4593784997bd16d22cc627d2ba8", "filename": "compiler/rustc_mir/src/transform/deduplicate_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs?ref=cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "patch": "@@ -86,7 +86,7 @@ fn find_duplicates<'a, 'tcx>(body: &'a Body<'tcx>) -> FxHashMap<BasicBlock, Basi\n                 // The basic block was already in the hashmap, which means we have a duplicate\n                 let value = *occupied.get();\n                 debug!(\"Inserting {:?} -> {:?}\", bb, value);\n-                duplicates.insert(bb, value).expect_none(\"key was already inserted\");\n+                duplicates.try_insert(bb, value).expect(\"key was already inserted\");\n             }\n             Entry::Vacant(vacant) => {\n                 vacant.insert(bb);"}, {"sha": "eb5b7c4a74a1da1e06a9002ae327a79a6e1815ea", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "patch": "@@ -118,7 +118,8 @@ impl ExpnId {\n         HygieneData::with(|data| {\n             let old_expn_data = &mut data.expn_data[self.0 as usize];\n             assert!(old_expn_data.is_none(), \"expansion data is reset for an expansion ID\");\n-            expn_data.orig_id.replace(self.as_u32()).expect_none(\"orig_id should be None\");\n+            assert_eq!(expn_data.orig_id, None);\n+            expn_data.orig_id = Some(self.as_u32());\n             *old_expn_data = Some(expn_data);\n         });\n         update_disambiguator(self)\n@@ -202,7 +203,8 @@ impl HygieneData {\n     fn fresh_expn(&mut self, mut expn_data: Option<ExpnData>) -> ExpnId {\n         let raw_id = self.expn_data.len() as u32;\n         if let Some(data) = expn_data.as_mut() {\n-            data.orig_id.replace(raw_id).expect_none(\"orig_id should be None\");\n+            assert_eq!(data.orig_id, None);\n+            data.orig_id = Some(raw_id);\n         }\n         self.expn_data.push(expn_data);\n         ExpnId(raw_id)\n@@ -1410,9 +1412,11 @@ fn update_disambiguator(expn_id: ExpnId) {\n             let new_hash: Fingerprint = hasher.finish();\n \n             HygieneData::with(|data| {\n-                data.expn_data_disambiguators\n-                    .get(&new_hash)\n-                    .expect_none(\"Hash collision after disambiguator update!\");\n+                assert_eq!(\n+                    data.expn_data_disambiguators.get(&new_hash),\n+                    None,\n+                    \"Hash collision after disambiguator update!\",\n+                );\n             });\n         };\n     }"}, {"sha": "d2790335b5abc6f42186bc43b6ee21f3650a9929", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=cfb4ad4f2abf42ff603d5f9e89f1352cb79a451c", "patch": "@@ -21,7 +21,6 @@\n #![feature(negative_impls)]\n #![feature(nll)]\n #![feature(min_specialization)]\n-#![feature(option_expect_none)]\n \n #[macro_use]\n extern crate rustc_macros;\n@@ -1996,7 +1995,8 @@ impl<CTX: HashStableContext> HashStable<CTX> for ExpnId {\n                 if cache.len() < new_len {\n                     cache.resize(new_len, None);\n                 }\n-                cache[index].replace(sub_hash).expect_none(\"Cache slot was filled\");\n+                let prev = cache[index].replace(sub_hash);\n+                assert_eq!(prev, None, \"Cache slot was filled\");\n             });\n             sub_hash.hash_stable(ctx, hasher);\n         }"}]}