{"sha": "3193d52a21576b8c93f00132c784cce1159f733e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOTNkNTJhMjE1NzZiOGM5M2YwMDEzMmM3ODRjY2UxMTU5ZjczM2U=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-06T16:24:22Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-11T12:59:01Z"}, "message": "Remove host parameter from step configurations\n\nrustc is a natively cross-compiling compiler, and generally none of our steps\nshould care whether they are using a compiler built of triple A or B, just the\n--target directive being passed to the running compiler. e.g., when building for\nsome target C, you don't generally want to build two stds: one with a host A\ncompiler and the other with a host B compiler. Just one std is sufficient.", "tree": {"sha": "b90e38a74f38a0db082c12b77f1295a0aa201484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b90e38a74f38a0db082c12b77f1295a0aa201484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3193d52a21576b8c93f00132c784cce1159f733e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3193d52a21576b8c93f00132c784cce1159f733e", "html_url": "https://github.com/rust-lang/rust/commit/3193d52a21576b8c93f00132c784cce1159f733e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3193d52a21576b8c93f00132c784cce1159f733e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25b2f4861222d6507598149f576e7d25dc308c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/25b2f4861222d6507598149f576e7d25dc308c8c", "html_url": "https://github.com/rust-lang/rust/commit/25b2f4861222d6507598149f576e7d25dc308c8c"}], "stats": {"total": 84, "additions": 36, "deletions": 48}, "files": [{"sha": "31d4f1f28a86d68ab860b6e2952100af5889cf64", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3193d52a21576b8c93f00132c784cce1159f733e", "patch": "@@ -87,11 +87,16 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n \n pub struct RunConfig<'a> {\n     pub builder: &'a Builder<'a>,\n-    pub host: TargetSelection,\n     pub target: TargetSelection,\n     pub path: PathBuf,\n }\n \n+impl RunConfig<'_> {\n+    pub fn build_triple(&self) -> TargetSelection {\n+        self.builder.build.build\n+    }\n+}\n+\n struct StepDescription {\n     default: bool,\n     only_hosts: bool,\n@@ -165,7 +170,6 @@ impl StepDescription {\n                 pathset, self.name, builder.config.exclude\n             );\n         }\n-        let hosts = &builder.hosts;\n \n         // Determine the targets participating in this rule.\n         let targets = if self.only_hosts {\n@@ -178,16 +182,9 @@ impl StepDescription {\n             &builder.targets\n         };\n \n-        for host in hosts {\n-            for target in targets {\n-                let run = RunConfig {\n-                    builder,\n-                    path: pathset.path(builder),\n-                    host: *host,\n-                    target: *target,\n-                };\n-                (self.make_run)(run);\n-            }\n+        for target in targets {\n+            let run = RunConfig { builder, path: pathset.path(builder), target: *target };\n+            (self.make_run)(run);\n         }\n     }\n "}, {"sha": "144c4dc4c9514b21b30a076cb3fd428af71cf380", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=3193d52a21576b8c93f00132c784cce1159f733e", "patch": "@@ -384,12 +384,9 @@ mod dist {\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: b },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: c },\n             ]\n         );\n         assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n@@ -399,10 +396,8 @@ mod dist {\n                 compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 2 }, target: a },\n-                compile::Rustc { compiler: Compiler { host: b, stage: 2 }, target: a },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 2 }, target: b },\n-                compile::Rustc { compiler: Compiler { host: b, stage: 2 }, target: b },\n             ]\n         );\n     }\n@@ -425,12 +420,9 @@ mod dist {\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: b },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: c },\n             ]\n         );\n         assert_eq!(\n@@ -439,15 +431,13 @@ mod dist {\n                 compile::Assemble { target_compiler: Compiler { host: a, stage: 0 } },\n                 compile::Assemble { target_compiler: Compiler { host: a, stage: 1 } },\n                 compile::Assemble { target_compiler: Compiler { host: a, stage: 2 } },\n-                compile::Assemble { target_compiler: Compiler { host: b, stage: 2 } },\n             ]\n         );\n         assert_eq!(\n             first(builder.cache.all::<compile::Rustc>()),\n             &[\n                 compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: a },\n-                compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n             ]\n         );\n     }"}, {"sha": "e0dddda83b98feefb9972f748f8cd314b59c5c29", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3193d52a21576b8c93f00132c784cce1159f733e", "patch": "@@ -45,7 +45,7 @@ impl Step for Std {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Std {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,\n         });\n     }\n@@ -385,7 +385,7 @@ impl Step for StartupObjects {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(StartupObjects {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,\n         });\n     }\n@@ -454,7 +454,7 @@ impl Step for Rustc {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Rustc {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,\n         });\n     }"}, {"sha": "28a0b411b1d29a094cfb60b47515e44deef8ade1", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3193d52a21576b8c93f00132c784cce1159f733e", "patch": "@@ -605,7 +605,9 @@ impl Step for DebuggerScripts {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(DebuggerScripts {\n-            sysroot: run.builder.sysroot(run.builder.compiler(run.builder.top_stage, run.host)),\n+            sysroot: run\n+                .builder\n+                .sysroot(run.builder.compiler(run.builder.top_stage, run.build_triple())),\n             host: run.target,\n         });\n     }"}, {"sha": "045dda2d4cb4cbbc5da6631bda9dc4616e9c670f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3193d52a21576b8c93f00132c784cce1159f733e", "patch": "@@ -584,7 +584,7 @@ impl Step for RustdocTheme {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.target);\n \n         run.builder.ensure(RustdocTheme { compiler });\n     }\n@@ -651,7 +651,6 @@ impl Step for RustdocJSStd {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocJSNotStd {\n-    pub host: TargetSelection,\n     pub target: TargetSelection,\n     pub compiler: Compiler,\n }\n@@ -666,8 +665,8 @@ impl Step for RustdocJSNotStd {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n-        run.builder.ensure(RustdocJSNotStd { host: run.host, target: run.target, compiler });\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n+        run.builder.ensure(RustdocJSNotStd { target: run.target, compiler });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -688,7 +687,6 @@ impl Step for RustdocJSNotStd {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocUi {\n-    pub host: TargetSelection,\n     pub target: TargetSelection,\n     pub compiler: Compiler,\n }\n@@ -703,8 +701,8 @@ impl Step for RustdocUi {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n-        run.builder.ensure(RustdocUi { host: run.host, target: run.target, compiler });\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n+        run.builder.ensure(RustdocUi { target: run.target, compiler });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -873,7 +871,7 @@ macro_rules! test_definitions {\n             }\n \n             fn make_run(run: RunConfig<'_>) {\n-                let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n+                let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n \n                 run.builder.ensure($name { compiler, target: run.target });\n             }\n@@ -1422,7 +1420,7 @@ macro_rules! test_book {\n \n                 fn make_run(run: RunConfig<'_>) {\n                     run.builder.ensure($name {\n-                        compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+                        compiler: run.builder.compiler(run.builder.top_stage, run.target),\n                     });\n                 }\n \n@@ -1469,7 +1467,7 @@ impl Step for ErrorIndex {\n         // error_index_generator depends on librustdoc. Use the compiler that\n         // is normally used to build rustdoc for other tests (like compiletest\n         // tests in src/test/rustdoc) so that it shares the same artifacts.\n-        let compiler = run.builder.compiler_for(run.builder.top_stage, run.host, run.host);\n+        let compiler = run.builder.compiler_for(run.builder.top_stage, run.target, run.target);\n         run.builder.ensure(ErrorIndex { compiler });\n     }\n \n@@ -1573,7 +1571,7 @@ impl Step for CrateLibrustc {\n \n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n-        let compiler = builder.compiler(builder.top_stage, run.host);\n+        let compiler = builder.compiler(builder.top_stage, run.build_triple());\n \n         for krate in builder.in_tree_crates(\"rustc-main\") {\n             if krate.path.ends_with(&run.path) {\n@@ -1620,7 +1618,7 @@ impl Step for CrateNotDefault {\n \n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n-        let compiler = builder.compiler(builder.top_stage, run.host);\n+        let compiler = builder.compiler(builder.top_stage, run.build_triple());\n \n         let test_kind = builder.kind.into();\n \n@@ -1668,7 +1666,7 @@ impl Step for Crate {\n \n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n-        let compiler = builder.compiler(builder.top_stage, run.host);\n+        let compiler = builder.compiler(builder.top_stage, run.build_triple());\n \n         let make = |mode: Mode, krate: &CargoCrate| {\n             let test_kind = builder.kind.into();\n@@ -1808,7 +1806,7 @@ impl Step for CrateRustdoc {\n \n         let test_kind = builder.kind.into();\n \n-        builder.ensure(CrateRustdoc { host: run.host, test_kind });\n+        builder.ensure(CrateRustdoc { host: run.target, test_kind });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -2054,7 +2052,6 @@ impl Step for Bootstrap {\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct TierCheck {\n     pub compiler: Compiler,\n-    target: TargetSelection,\n }\n \n impl Step for TierCheck {\n@@ -2067,18 +2064,19 @@ impl Step for TierCheck {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let compiler = run.builder.compiler_for(run.builder.top_stage, run.host, run.host);\n-        run.builder.ensure(TierCheck { compiler, target: run.host });\n+        let compiler =\n+            run.builder.compiler_for(run.builder.top_stage, run.builder.build.build, run.target);\n+        run.builder.ensure(TierCheck { compiler });\n     }\n \n     /// Tests the Platform Support page in the rustc book.\n     fn run(self, builder: &Builder<'_>) {\n-        builder.ensure(compile::Std { compiler: self.compiler, target: self.target });\n+        builder.ensure(compile::Std { compiler: self.compiler, target: self.compiler.host });\n         let mut cargo = tool::prepare_tool_cargo(\n             builder,\n             self.compiler,\n-            Mode::ToolRustc,\n-            self.target,\n+            Mode::ToolStd,\n+            self.compiler.host,\n             \"run\",\n             \"src/tools/tier-check\",\n             SourceType::InTree,"}, {"sha": "a607f0fe258d4cf257606ed5c17128abc2ef3a68", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3193d52a21576b8c93f00132c784cce1159f733e/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=3193d52a21576b8c93f00132c784cce1159f733e", "patch": "@@ -469,8 +469,9 @@ impl Step for Rustdoc {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder\n-            .ensure(Rustdoc { compiler: run.builder.compiler(run.builder.top_stage, run.host) });\n+        run.builder.ensure(Rustdoc {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n+        });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> PathBuf {"}]}