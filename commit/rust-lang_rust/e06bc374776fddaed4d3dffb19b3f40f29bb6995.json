{"sha": "e06bc374776fddaed4d3dffb19b3f40f29bb6995", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNmJjMzc0Nzc2ZmRkYWVkNGQzZGZmYjE5YjNmNDBmMjliYjY5OTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-28T12:08:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-28T12:08:08Z"}, "message": "lint on unnecessary and plain wrong transmutes", "tree": {"sha": "fa48029b3189fe280ca20b3eb92ebc9464e304e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa48029b3189fe280ca20b3eb92ebc9464e304e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e06bc374776fddaed4d3dffb19b3f40f29bb6995", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXcmioAAoJEFbW7qD8Z6xGiiUQALFTpn8BH5jZnLRu088OFNKx\nP97kP3oVY9ooN41B8/iq3GfcjISvQU4cPx3foxUkV2yiKnXzPDOKCe6tl7jIde7G\nNG4Kft/iTKEZsB/P1DdTviihD/p9IgS17yVugpwKm/42vSaJzJWIJnI3LmVEcDpp\nh9mSp6vWIqFMuJXqXlxjqnRCmXWvP7NdN6lBzk0o94dhjbc+qA3yvN54hCJWaE2D\nSWGhpnzo8ghAbHmsEK+PV0shPHa85kTXS9y6EE2wYKpI7oFuYD7lF3hvIJAQhsDH\nBiQaWfRgbwZTBtRsJFUANfyELlYNSPFGpiUHGjcM59SHi/4emEaQNsAN3t3sSVGY\nLF/zgvjmhum2Do+/lgssj32PaRHpIKEwMT5EdmYTtvixy3Gn1eh0NW3gXoWBP+4M\nedcNtOlCHUJfh5KxBco/pe0/O8oPJt36CXm8HSMVZ0xmYBTJ7rs+enNitBFpzN03\ndDS8WQzcWu/GTxfOS56XcjqU6Echm5BrNcF9FxCacy7p8hT2TO33QD2ZozRK3K+M\nz+DmjX+jALv3glgEDikHsDdq+oDAR+5Y/6BpuOFSjzbogVDuo25NKa3pYt7ACLI0\nGJvB3ic/Mbx2cl45V1Ee4x/L9q4atyZppj5Nq7mzXL8KUhBjAvodzNRbjJzuXEpI\no8m3yYUpBzhrm3Nsuhaz\n=lhIF\n-----END PGP SIGNATURE-----", "payload": "tree fa48029b3189fe280ca20b3eb92ebc9464e304e9\nparent 5aea20da7f83b2da146b1f88ef32de0f3b66e0c4\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467115688 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467115688 +0200\n\nlint on unnecessary and plain wrong transmutes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e06bc374776fddaed4d3dffb19b3f40f29bb6995", "html_url": "https://github.com/rust-lang/rust/commit/e06bc374776fddaed4d3dffb19b3f40f29bb6995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e06bc374776fddaed4d3dffb19b3f40f29bb6995/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aea20da7f83b2da146b1f88ef32de0f3b66e0c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aea20da7f83b2da146b1f88ef32de0f3b66e0c4", "html_url": "https://github.com/rust-lang/rust/commit/5aea20da7f83b2da146b1f88ef32de0f3b66e0c4"}], "stats": {"total": 121, "additions": 102, "deletions": 19}, "files": [{"sha": "a71b410a5f606d70ac580c90f4fbc64b75234219", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e06bc374776fddaed4d3dffb19b3f40f29bb6995/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e06bc374776fddaed4d3dffb19b3f40f29bb6995/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e06bc374776fddaed4d3dffb19b3f40f29bb6995", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.78 - TBA\n+* New lints: [`wrong_transmute`]\n+\n ## 0.0.77 \u2014 2016-06-21\n * Rustup to *rustc 1.11.0-nightly (5522e678b 2016-06-20)*\n * New lints: [`stutter`] and [`iter_nth`]\n@@ -276,6 +279,7 @@ All notable changes to this project will be documented in this file.\n [`while_let_on_iterator`]: https://github.com/Manishearth/rust-clippy/wiki#while_let_on_iterator\n [`wrong_pub_self_convention`]: https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention\n [`wrong_self_convention`]: https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention\n+[`wrong_transmute`]: https://github.com/Manishearth/rust-clippy/wiki#wrong_transmute\n [`zero_divided_by_zero`]: https://github.com/Manishearth/rust-clippy/wiki#zero_divided_by_zero\n [`zero_width_space`]: https://github.com/Manishearth/rust-clippy/wiki#zero_width_space\n <!-- end autogenerated links to wiki -->"}, {"sha": "d5e80238695012741eefbcaeefd4961250c5bd35", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e06bc374776fddaed4d3dffb19b3f40f29bb6995/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e06bc374776fddaed4d3dffb19b3f40f29bb6995/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e06bc374776fddaed4d3dffb19b3f40f29bb6995", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 155 lints included in this crate:\n+There are 156 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -168,12 +168,13 @@ name\n [used_underscore_binding](https://github.com/Manishearth/rust-clippy/wiki#used_underscore_binding)                   | allow   | using a binding which is prefixed with an underscore\n [useless_format](https://github.com/Manishearth/rust-clippy/wiki#useless_format)                                     | warn    | useless use of `format!`\n [useless_let_if_seq](https://github.com/Manishearth/rust-clippy/wiki#useless_let_if_seq)                             | warn    | Checks for unidiomatic `let mut` declaration followed by initialization in `if`\n-[useless_transmute](https://github.com/Manishearth/rust-clippy/wiki#useless_transmute)                               | warn    | transmutes that have the same to and from types\n+[useless_transmute](https://github.com/Manishearth/rust-clippy/wiki#useless_transmute)                               | warn    | transmutes that have the same to and from types or could be a cast/coercion\n [useless_vec](https://github.com/Manishearth/rust-clippy/wiki#useless_vec)                                           | warn    | useless `vec!`\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                                     | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n [while_let_on_iterator](https://github.com/Manishearth/rust-clippy/wiki#while_let_on_iterator)                       | warn    | using a while-let loop instead of a for loop on an iterator\n [wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention)               | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n [wrong_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention)                       | warn    | defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n+[wrong_transmute](https://github.com/Manishearth/rust-clippy/wiki#wrong_transmute)                                   | warn    | transmutes that are confusing at best, undefined behaviour at worst and always useless\n [zero_divided_by_zero](https://github.com/Manishearth/rust-clippy/wiki#zero_divided_by_zero)                         | warn    | usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\n [zero_width_space](https://github.com/Manishearth/rust-clippy/wiki#zero_width_space)                                 | deny    | using a zero-width space in a string literal, which is confusing\n "}, {"sha": "3fd94661f67e26341c40d9379a20ee73b067c018", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e06bc374776fddaed4d3dffb19b3f40f29bb6995/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06bc374776fddaed4d3dffb19b3f40f29bb6995/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e06bc374776fddaed4d3dffb19b3f40f29bb6995", "patch": "@@ -403,6 +403,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::CROSSPOINTER_TRANSMUTE,\n         transmute::TRANSMUTE_PTR_TO_REF,\n         transmute::USELESS_TRANSMUTE,\n+        transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BOX_VEC,\n         types::CHAR_LIT_AS_U8,"}, {"sha": "61c5a7b2339d3db4d3beec93bc70d1f989d52ca7", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e06bc374776fddaed4d3dffb19b3f40f29bb6995/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06bc374776fddaed4d3dffb19b3f40f29bb6995/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=e06bc374776fddaed4d3dffb19b3f40f29bb6995", "patch": "@@ -1,19 +1,33 @@\n use rustc::lint::*;\n use rustc::ty::TypeVariants::{TyRawPtr, TyRef};\n+use rustc::ty;\n use rustc::hir::*;\n use utils::{match_def_path, paths, snippet_opt, span_lint, span_lint_and_then};\n \n-/// **What it does:** This lint checks for transmutes to the original type of the object.\n+/// **What it does:** This lint checks for transmutes that can't ever be correct on any architecture\n ///\n-/// **Why is this bad?** Readability. The code tricks people into thinking that the original value was of some other type.\n+/// **Why is this bad?** It's basically guaranteed to be undefined behaviour\n+///\n+/// **Known problems:** When accessing C, users might want to store pointer sized objects in `extradata` arguments to save an allocation.\n+///\n+/// **Example:** `let ptr: *const T = core::intrinsics::transmute('x')`.\n+declare_lint! {\n+    pub WRONG_TRANSMUTE,\n+    Warn,\n+    \"transmutes that are confusing at best, undefined behaviour at worst and always useless\"\n+}\n+\n+/// **What it does:** This lint checks for transmutes to the original type of the object and transmutes that could be a cast.\n+///\n+/// **Why is this bad?** Readability. The code tricks people into thinking that something complex is going on\n ///\n /// **Known problems:** None.\n ///\n /// **Example:** `core::intrinsics::transmute(t)` where the result type is the same as `t`'s.\n declare_lint! {\n     pub USELESS_TRANSMUTE,\n     Warn,\n-    \"transmutes that have the same to and from types\"\n+    \"transmutes that have the same to and from types or could be a cast/coercion\"\n }\n \n /// **What it does:*** This lint checks for transmutes between a type `T` and `*T`.\n@@ -51,7 +65,7 @@ pub struct Transmute;\n \n impl LintPass for Transmute {\n     fn get_lints(&self) -> LintArray {\n-        lint_array![CROSSPOINTER_TRANSMUTE, TRANSMUTE_PTR_TO_REF, USELESS_TRANSMUTE]\n+        lint_array![CROSSPOINTER_TRANSMUTE, TRANSMUTE_PTR_TO_REF, USELESS_TRANSMUTE, WRONG_TRANSMUTE]\n     }\n }\n \n@@ -89,6 +103,27 @@ impl LateLintPass for Transmute {\n                                 }\n                             },\n                         ),\n+                        (&ty::TyInt(_), &TyRawPtr(_)) |\n+                        (&ty::TyUint(_), &TyRawPtr(_)) => span_lint_and_then(\n+                            cx,\n+                            USELESS_TRANSMUTE,\n+                            e.span,\n+                            \"transmute from an integer to a pointer\",\n+                            |db| {\n+                                if let Some(arg) = snippet_opt(cx, args[0].span) {\n+                                    db.span_suggestion(e.span, \"try\", format!(\"{} as {}\", arg, to_ty));\n+                                }\n+                            },\n+                        ),\n+                        (&ty::TyFloat(_), &TyRef(..)) |\n+                        (&ty::TyFloat(_), &TyRawPtr(_)) |\n+                        (&ty::TyChar, &TyRef(..)) |\n+                        (&ty::TyChar, &TyRawPtr(_)) => span_lint(\n+                            cx,\n+                            WRONG_TRANSMUTE,\n+                            e.span,\n+                            &format!(\"transmute from a `{}` to a pointer\", from_ty),\n+                        ),\n                         (&TyRawPtr(from_ptr), _) if from_ptr.ty == to_ty => span_lint(\n                             cx,\n                             CROSSPOINTER_TRANSMUTE,"}, {"sha": "f2762b1767a9a806233e4415dd91e1d23f6a4bf8", "filename": "tests/compile-fail/transmute.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e06bc374776fddaed4d3dffb19b3f40f29bb6995/tests%2Fcompile-fail%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06bc374776fddaed4d3dffb19b3f40f29bb6995/tests%2Fcompile-fail%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute.rs?ref=e06bc374776fddaed4d3dffb19b3f40f29bb6995", "patch": "@@ -6,8 +6,8 @@ extern crate core;\n use std::mem::transmute as my_transmute;\n use std::vec::Vec as MyVec;\n \n-fn my_int() -> usize {\n-    42\n+fn my_int() -> Usize {\n+    Usize(42)\n }\n \n fn my_vec() -> MyVec<i32> {\n@@ -100,27 +100,34 @@ fn useless() {\n         let _: Vec<u32> = std::intrinsics::transmute(my_vec());\n         let _: Vec<u32> = std::mem::transmute(my_vec());\n         let _: Vec<u32> = my_transmute(my_vec());\n+\n+        let _: *const usize = std::mem::transmute(5_isize);\n+        //~^ ERROR transmute from an integer to a pointer\n+        //~| HELP try\n+        //~| SUGGESTION 5_isize as *const usize\n     }\n }\n \n+struct Usize(usize);\n+\n #[deny(crosspointer_transmute)]\n fn crosspointer() {\n-    let mut int: usize = 0;\n-    let int_const_ptr: *const usize = &int as *const usize;\n-    let int_mut_ptr: *mut usize = &mut int as *mut usize;\n+    let mut int: Usize = Usize(0);\n+    let int_const_ptr: *const Usize = &int as *const Usize;\n+    let int_mut_ptr: *mut Usize = &mut int as *mut Usize;\n \n     unsafe {\n-        let _: usize = core::intrinsics::transmute(int_const_ptr);\n-        //~^ ERROR transmute from a type (`*const usize`) to the type that it points to (`usize`)\n+        let _: Usize = core::intrinsics::transmute(int_const_ptr);\n+        //~^ ERROR transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n \n-        let _: usize = core::intrinsics::transmute(int_mut_ptr);\n-        //~^ ERROR transmute from a type (`*mut usize`) to the type that it points to (`usize`)\n+        let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n+        //~^ ERROR transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n \n-        let _: *const usize = core::intrinsics::transmute(my_int());\n-        //~^ ERROR transmute from a type (`usize`) to a pointer to that type (`*const usize`)\n+        let _: *const Usize = core::intrinsics::transmute(my_int());\n+        //~^ ERROR transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n \n-        let _: *mut usize = core::intrinsics::transmute(my_int());\n-        //~^ ERROR transmute from a type (`usize`) to a pointer to that type (`*mut usize`)\n+        let _: *mut Usize = core::intrinsics::transmute(my_int());\n+        //~^ ERROR transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n     }\n }\n "}, {"sha": "1368ab5015d8f7e07bbd2dc76ce160698b5355f8", "filename": "tests/compile-fail/transmute_32bit.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e06bc374776fddaed4d3dffb19b3f40f29bb6995/tests%2Fcompile-fail%2Ftransmute_32bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06bc374776fddaed4d3dffb19b3f40f29bb6995/tests%2Fcompile-fail%2Ftransmute_32bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_32bit.rs?ref=e06bc374776fddaed4d3dffb19b3f40f29bb6995", "patch": "@@ -0,0 +1,20 @@\n+//ignore-x86_64\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(wrong_transmute)]\n+fn main() {\n+    unsafe {\n+        let _: *const usize = std::mem::transmute(6.0f32);\n+        //~^ ERROR transmute from a `f32` to a pointer\n+\n+        let _: *mut usize = std::mem::transmute(6.0f32);\n+        //~^ ERROR transmute from a `f32` to a pointer\n+\n+        let _: *const usize = std::mem::transmute('x');\n+        //~^ ERROR transmute from a `char` to a pointer\n+\n+        let _: *mut usize = std::mem::transmute('x');\n+        //~^ ERROR transmute from a `char` to a pointer\n+    }\n+}"}, {"sha": "8bc6a2367b91cc908d8fb51c820a2a194778603e", "filename": "tests/compile-fail/transmute_64bit.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e06bc374776fddaed4d3dffb19b3f40f29bb6995/tests%2Fcompile-fail%2Ftransmute_64bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06bc374776fddaed4d3dffb19b3f40f29bb6995/tests%2Fcompile-fail%2Ftransmute_64bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_64bit.rs?ref=e06bc374776fddaed4d3dffb19b3f40f29bb6995", "patch": "@@ -0,0 +1,15 @@\n+//ignore-x86\n+//no-ignore-x86_64\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(wrong_transmute)]\n+fn main() {\n+    unsafe {\n+        let _: *const usize = std::mem::transmute(6.0f64);\n+        //~^ ERROR transmute from a `f64` to a pointer\n+\n+        let _: *mut usize = std::mem::transmute(6.0f64);\n+        //~^ ERROR transmute from a `f64` to a pointer\n+    }\n+}"}]}