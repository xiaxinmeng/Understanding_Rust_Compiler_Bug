{"sha": "a6d926d80db4a52398dea0cf29e6c501eab50170", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZDkyNmQ4MGRiNGE1MjM5OGRlYTBjZjI5ZTZjNTAxZWFiNTAxNzA=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2021-01-05T15:46:50Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-03T10:22:44Z"}, "message": "Fix tests", "tree": {"sha": "78b945cf6fc47e5dd60f9891380dd45927505f2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b945cf6fc47e5dd60f9891380dd45927505f2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6d926d80db4a52398dea0cf29e6c501eab50170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d926d80db4a52398dea0cf29e6c501eab50170", "html_url": "https://github.com/rust-lang/rust/commit/a6d926d80db4a52398dea0cf29e6c501eab50170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6d926d80db4a52398dea0cf29e6c501eab50170/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "url": "https://api.github.com/repos/rust-lang/rust/commits/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "html_url": "https://github.com/rust-lang/rust/commit/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "5f21046b05e475e9e3934faa2a671d927ee99383", "filename": "compiler/rustc_codegen_ssa/src/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -24,7 +24,7 @@ pub fn get_rpath_flags(config: &mut RPathConfig<'_>) -> Vec<String> {\n \n     debug!(\"preparing the RPATH!\");\n \n-    let libs = config.used_crates.clone();\n+    let libs = config.used_crates;\n     let libs = libs.iter().filter_map(|&(_, ref l)| l.option()).collect::<Vec<_>>();\n     let rpaths = get_rpaths(config, &libs);\n     let mut flags = rpaths_to_flags(&rpaths);"}, {"sha": "dad557128f8b79adc9f596c99d2534c57ebce0b2", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -46,6 +46,14 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n             {\n                 // Check that we're dealing with a trait method\n                 if let Some(trait_id) = cx.tcx.trait_of_item(did) {\n+                    // Check we're dealing with one of the traits we care about\n+                    if ![sym::Clone, sym::Deref, sym::Borrow]\n+                        .iter()\n+                        .any(|s| cx.tcx.is_diagnostic_item(*s, trait_id))\n+                    {\n+                        return;\n+                    }\n+\n                     let substs = cx.typeck_results().node_substs(expr.hir_id);\n                     // We can't resolve on types that recursively require monomorphization,\n                     // so check that we don't need to perfom substitution\n@@ -54,7 +62,6 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                         // Resolve the trait method instance\n                         if let Ok(Some(i)) = ty::Instance::resolve(cx.tcx, param_env, did, substs) {\n                             // Check that it implements the noop diagnostic\n-                            tracing::debug!(\"Resolves to: {:?}\", i.def_id());\n                             if [\n                                 sym::noop_method_borrow,\n                                 sym::noop_method_clone,"}, {"sha": "f19cc99844926a0d0ce821c8698c2d503695fa26", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -12,7 +12,6 @@ use rustc_target::spec::abi;\n \n use std::borrow::Cow;\n use std::fmt;\n-use std::ops::Deref;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]\n pub struct ExpectedFound<T> {\n@@ -548,7 +547,6 @@ impl<T> Trait<T> for X {\n             TargetFeatureCast(def_id) => {\n                 let attrs = self.get_attrs(*def_id);\n                 let target_spans = attrs\n-                    .deref()\n                     .iter()\n                     .filter(|attr| attr.has_name(sym::target_feature))\n                     .map(|attr| attr.span);"}, {"sha": "e423e449746fc54f23754814fcbd1ee2bae86cc0", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -165,7 +165,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 self.consume_operand(location, value);\n \n                 // Invalidate all borrows of local places\n-                let borrow_set = self.borrow_set.clone();\n+                let borrow_set = self.borrow_set;\n                 let resume = self.location_table.start_index(resume.start_location());\n                 for (i, data) in borrow_set.iter_enumerated() {\n                     if borrow_of_local_data(data.borrowed_place) {\n@@ -177,7 +177,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             }\n             TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {\n                 // Invalidate all borrows of local places\n-                let borrow_set = self.borrow_set.clone();\n+                let borrow_set = self.borrow_set;\n                 let start = self.location_table.start_index(location);\n                 for (i, data) in borrow_set.iter_enumerated() {\n                     if borrow_of_local_data(data.borrowed_place) {\n@@ -369,15 +369,15 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n         );\n         let tcx = self.tcx;\n         let body = self.body;\n-        let borrow_set = self.borrow_set.clone();\n+        let borrow_set = self.borrow_set;\n         let indices = self.borrow_set.indices();\n         each_borrow_involving_path(\n             self,\n             tcx,\n             body,\n             location,\n             (sd, place),\n-            &borrow_set.clone(),\n+            borrow_set,\n             indices,\n             |this, borrow_index, borrow| {\n                 match (rw, borrow.kind) {"}, {"sha": "4db7debee7e8f64c8aca6769d0f8a3968ebfbe32", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             PatKind::Constant { value } => Test {\n                 span: match_pair.pattern.span,\n-                kind: TestKind::Eq { value, ty: match_pair.pattern.ty.clone() },\n+                kind: TestKind::Eq { value, ty: match_pair.pattern.ty },\n             },\n \n             PatKind::Range(range) => {"}, {"sha": "61f9a080a5217ae0937d3603ca01c2c4a6f7e561", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -129,6 +129,7 @@ symbols! {\n         BTreeMap,\n         BTreeSet,\n         BinaryHeap,\n+        Borrow,\n         C,\n         CString,\n         Center,\n@@ -141,6 +142,7 @@ symbols! {\n         Decodable,\n         Decoder,\n         Default,\n+        Deref,\n         Encodable,\n         Encoder,\n         Eq,"}, {"sha": "a3faf4cb7d4c19d1f2eb457087368fbcbfd56618", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -819,7 +819,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 sig.decl\n                     .inputs\n                     .iter()\n-                    .map(|arg| match arg.clone().kind {\n+                    .map(|arg| match arg.kind {\n                         hir::TyKind::Tup(ref tys) => ArgKind::Tuple(\n                             Some(arg.span),\n                             vec![(\"_\".to_owned(), \"_\".to_owned()); tys.len()],"}, {"sha": "b7275bac19048f701feeae31fb0f31654a51bf7a", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -165,7 +165,7 @@ crate fn evaluate_goal<'tcx>(\n                         // let's just ignore that\n                         let sol = Canonical {\n                             max_universe: ty::UniverseIndex::from_usize(0),\n-                            variables: obligation.variables.clone(),\n+                            variables: obligation.variables,\n                             value: QueryResponse {\n                                 var_values: CanonicalVarValues { var_values: IndexVec::new() }\n                                     .make_identity(tcx),"}, {"sha": "6ef63bcbbbf2171bc750a3a34cf1d51694e6b0e9", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -465,7 +465,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expected_arg_tys = self.expected_inputs_for_expected_output(\n             call_expr.span,\n             expected,\n-            fn_sig.output().clone(),\n+            fn_sig.output(),\n             fn_sig.inputs(),\n         );\n "}, {"sha": "48740e533da8ea196155929cc884a9698e7aa2a2", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -711,7 +711,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         });\n \n         let ret_ty = ret_coercion.borrow().expected_ty();\n-        let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty.clone());\n+        let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty);\n         ret_coercion.borrow_mut().coerce(\n             self,\n             &self.cause(return_expr.span, ObligationCauseCode::ReturnValue(return_expr.hir_id)),"}, {"sha": "a0cdf681f67e177fbbdd554a721fcedf77db9a3e", "filename": "library/core/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/library%2Fcore%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/library%2Fcore%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fborrow.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -153,6 +153,7 @@\n /// [`HashMap<K, V>`]: ../../std/collections/struct.HashMap.html\n /// [`String`]: ../../std/string/struct.String.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"Borrow\"]\n pub trait Borrow<Borrowed: ?Sized> {\n     /// Immutably borrows from an owned value.\n     ///"}, {"sha": "957769cdc5a6283b4502ec5ea4d2cad6c0875226", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -104,6 +104,7 @@\n /// [impls]: #implementors\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"clone\"]\n+#[rustc_diagnostic_item = \"Clone\"]\n pub trait Clone: Sized {\n     /// Returns a copy of the value.\n     ///"}, {"sha": "10e3ce67448c8d717dc28484ca6d5867516f7ffb", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -60,6 +60,7 @@\n #[doc(alias = \"*\")]\n #[doc(alias = \"&*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"Deref\"]\n pub trait Deref {\n     /// The resulting type after dereferencing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "8a26624a05dc9cb458e9eb38e83fe4951f3ed116", "filename": "src/test/ui/issues/issue-11820.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/src%2Ftest%2Fui%2Fissues%2Fissue-11820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/src%2Ftest%2Fui%2Fissues%2Fissue-11820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11820.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -1,12 +1,14 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(noop_method_call)]\n+\n struct NoClone;\n \n fn main() {\n-  let rnc = &NoClone;\n-  let rsnc = &Some(NoClone);\n+    let rnc = &NoClone;\n+    let rsnc = &Some(NoClone);\n \n-  let _: &NoClone = rnc.clone();\n-  let _: &Option<NoClone> = rsnc.clone();\n+    let _: &NoClone = rnc.clone();\n+    let _: &Option<NoClone> = rsnc.clone();\n }"}, {"sha": "987410fa84b2075e13ec16d4a586097deda04b8b", "filename": "src/test/ui/underscore-imports/cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -14,5 +14,6 @@ mod y {\n \n pub fn main() {\n     use x::*;\n+    #[allow(noop_method_call)]\n     (&0).deref();\n }"}, {"sha": "510d91d0d462487ee91e4cbfc18739f919b0448d", "filename": "src/test/ui/underscore-imports/hygiene-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/src%2Ftest%2Fui%2Funderscore-imports%2Fhygiene-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/src%2Ftest%2Fui%2Funderscore-imports%2Fhygiene-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fhygiene-2.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -29,5 +29,6 @@ m!(y);\n \n fn main() {\n     use crate::y::*;\n+    #[allow(noop_method_call)]\n     (&()).deref();\n }"}, {"sha": "55e86e848558dc6e7b33ad15b007dd42198c2cc2", "filename": "src/test/ui/underscore-imports/macro-expanded.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6d926d80db4a52398dea0cf29e6c501eab50170/src%2Ftest%2Fui%2Funderscore-imports%2Fmacro-expanded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d926d80db4a52398dea0cf29e6c501eab50170/src%2Ftest%2Fui%2Funderscore-imports%2Fmacro-expanded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fmacro-expanded.rs?ref=a6d926d80db4a52398dea0cf29e6c501eab50170", "patch": "@@ -3,6 +3,7 @@\n // check-pass\n \n #![feature(decl_macro, rustc_attrs)]\n+#![allow(noop_method_call)]\n \n mod x {\n     pub use std::ops::Not as _;"}]}