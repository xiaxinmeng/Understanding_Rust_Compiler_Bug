{"sha": "d41e002111dd61efa08d996cfc1085fc00472288", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MWUwMDIxMTFkZDYxZWZhMDhkOTk2Y2ZjMTA4NWZjMDA0NzIyODg=", "commit": {"author": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-07-16T15:32:38Z"}, "committer": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-07-22T10:46:54Z"}, "message": "Add test checking various assignments are accepted in Polonius", "tree": {"sha": "4402b3a222a037eb58c6dc4abd01ee70c486c83d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4402b3a222a037eb58c6dc4abd01ee70c486c83d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d41e002111dd61efa08d996cfc1085fc00472288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d41e002111dd61efa08d996cfc1085fc00472288", "html_url": "https://github.com/rust-lang/rust/commit/d41e002111dd61efa08d996cfc1085fc00472288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d41e002111dd61efa08d996cfc1085fc00472288/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f3e36f51a7055da3b55253edad7df594b0711d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3e36f51a7055da3b55253edad7df594b0711d7", "html_url": "https://github.com/rust-lang/rust/commit/2f3e36f51a7055da3b55253edad7df594b0711d7"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "8301f603cb4d3643febed5bd81a40c53dd9cdfc5", "filename": "src/test/ui/nll/polonius/assignment-kills-loans.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d41e002111dd61efa08d996cfc1085fc00472288/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41e002111dd61efa08d996cfc1085fc00472288/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs?ref=d41e002111dd61efa08d996cfc1085fc00472288", "patch": "@@ -0,0 +1,88 @@\n+#![allow(dead_code)]\n+\n+// This tests the various kinds of assignments there are. Polonius used to generate `killed`\n+// facts only on simple assigments, but not projections, incorrectly causing errors to be emitted\n+// for code accepted by NLL. They are all variations from example code in the NLL RFC.\n+\n+// check-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct List<T> {\n+    value: T,\n+    next: Option<Box<List<T>>>,\n+}\n+\n+// Assignment to a local: the `list` assignment should clear the existing\n+// borrows of `list.value` and `list.next`\n+fn assignment_to_local<T>(mut list: &mut List<T>) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.value);\n+        if let Some(n) = list.next.as_mut() {\n+            list = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Assignment to a deref projection: the `*list` assignment should clear the existing\n+// borrows of `list.value` and `list.next`\n+fn assignment_to_deref_projection<T>(mut list: Box<&mut List<T>>) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.value);\n+        if let Some(n) = list.next.as_mut() {\n+            *list = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Assignment to a field projection: the `list.0` assignment should clear the existing\n+// borrows of `list.0.value` and `list.0.next`\n+fn assignment_to_field_projection<T>(mut list: (&mut List<T>,)) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.0.value);\n+        if let Some(n) = list.0.next.as_mut() {\n+            list.0 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Assignment to a deref field projection: the `*list.0` assignment should clear the existing\n+// borrows of `list.0.value` and `list.0.next`\n+fn assignment_to_deref_field_projection<T>(mut list: (Box<&mut List<T>>,)) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.0.value);\n+        if let Some(n) = list.0.next.as_mut() {\n+            *list.0 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Similar to `assignment_to_deref_field_projection` but through a longer projection chain\n+fn assignment_through_projection_chain<T>(\n+    mut list: (((((Box<&mut List<T>>,),),),),),\n+) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut ((((list.0).0).0).0).0.value);\n+        if let Some(n) = ((((list.0).0).0).0).0.next.as_mut() {\n+            *((((list.0).0).0).0).0 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}]}