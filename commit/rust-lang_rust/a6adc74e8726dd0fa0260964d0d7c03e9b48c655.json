{"sha": "a6adc74e8726dd0fa0260964d0d7c03e9b48c655", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YWRjNzRlODcyNmRkMGZhMDI2MDk2NGQwZDdjMDNlOWI0OGM2NTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-04T15:49:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-04T16:30:39Z"}, "message": "adopt `longer` and `shorter` rather than `fr` and `outlived_fr`", "tree": {"sha": "45a944b78e46d773a9303e2510b3aa16dfa51a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45a944b78e46d773a9303e2510b3aa16dfa51a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6adc74e8726dd0fa0260964d0d7c03e9b48c655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6adc74e8726dd0fa0260964d0d7c03e9b48c655", "html_url": "https://github.com/rust-lang/rust/commit/a6adc74e8726dd0fa0260964d0d7c03e9b48c655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6adc74e8726dd0fa0260964d0d7c03e9b48c655/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab2bc9f073e15dd711c47102f42174740ce8f9b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab2bc9f073e15dd711c47102f42174740ce8f9b2", "html_url": "https://github.com/rust-lang/rust/commit/ab2bc9f073e15dd711c47102f42174740ce8f9b2"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "d1faaf75a53233fd5940f6044ce7973996daf28d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a6adc74e8726dd0fa0260964d0d7c03e9b48c655/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6adc74e8726dd0fa0260964d0d7c03e9b48c655/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=a6adc74e8726dd0fa0260964d0d7c03e9b48c655", "patch": "@@ -322,37 +322,39 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn check_free_region(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        fr: RegionVid,\n-        fr_definition: &RegionDefinition<'tcx>,\n+        longer_fr: RegionVid,\n+        longer_definition: &RegionDefinition<'tcx>,\n     ) {\n         let inferred_values = self.inferred_values.as_ref().unwrap();\n-        let fr_name = fr_definition.name.unwrap();\n-        let fr_value = inferred_values.iter(fr.index());\n+        let longer_name = longer_definition.name.unwrap();\n+        let longer_value = inferred_values.iter(longer_fr.index());\n+\n+        // Find every region `shorter` such that `longer: shorter`\n+        // (because `longer` includes `end(shorter)`).\n+        for shorter_fr in longer_value.take_while(|&i| i < self.num_universal_regions) {\n+            let shorter_fr = RegionVid::new(shorter_fr);\n \n-        // Find every region `o` such that `fr: o`\n-        // (because `fr` includes `end(o)`).\n-        for outlived_fr in fr_value.take_while(|&i| i < self.num_universal_regions) {\n             // `fr` includes `end(fr)`, that's not especially\n             // interesting.\n-            if fr.index() == outlived_fr {\n+            if longer_fr == shorter_fr {\n                 continue;\n             }\n \n-            let outlived_fr_definition = &self.definitions[RegionVid::new(outlived_fr)];\n-            let outlived_fr_name = outlived_fr_definition.name.unwrap();\n+            let shorter_definition = &self.definitions[shorter_fr];\n+            let shorter_name = shorter_definition.name.unwrap();\n \n             // Check that `o <= fr`. If not, report an error.\n             if !self.free_region_map\n-                .sub_free_regions(outlived_fr_name, fr_name)\n+                .sub_free_regions(shorter_name, longer_name)\n             {\n                 // FIXME: worst error msg ever\n-                let blame_span = self.blame_span(fr, RegionVid::new(outlived_fr));\n+                let blame_span = self.blame_span(longer_fr, shorter_fr);\n                 infcx.tcx.sess.span_err(\n                     blame_span,\n                     &format!(\n                         \"free region `{}` does not outlive `{}`\",\n-                        fr_name,\n-                        outlived_fr_name\n+                        longer_name,\n+                        shorter_name\n                     ),\n                 );\n             }"}]}