{"sha": "c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YjhkZjVkZjI1YWE4ODU5ZDc1MWVjMGE3YWYzZTdhMGQ2ZDY5OWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-11-25T21:05:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-20T21:29:03Z"}, "message": "Remove unnecessary dummy span checks\n\nThe emitter already verifies wether a given span note or span label\ncan be emitted to the output. If it can't, because it is a dummy\nspan, it will be either elided for labels or emitted as an unspanned\nnote/help when applicable.", "tree": {"sha": "81860bc16cb034f952f647caa022d6060afdf31f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81860bc16cb034f952f647caa022d6060afdf31f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "html_url": "https://github.com/rust-lang/rust/commit/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0c585281740aba4c91cbfd385f5e1fbe313d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0c585281740aba4c91cbfd385f5e1fbe313d11", "html_url": "https://github.com/rust-lang/rust/commit/0c0c585281740aba4c91cbfd385f5e1fbe313d11"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "25d09a33c154fad930b780a341540568bbb3ea97", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "patch": "@@ -959,7 +959,7 @@ impl EmitterWriter {\n             Style::MainHeaderMsg\n         };\n \n-        if msp.primary_spans().is_empty() && msp.span_labels().is_empty() && is_secondary\n+        if !msp.has_primary_spans() && !msp.has_span_labels() && is_secondary\n            && !self.short_message {\n             // This is a secondary message with no span info\n             for _ in 0..max_line_num_len {"}, {"sha": "4c9347afa611d442d27a1f49e69e847bce421c64", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "patch": "@@ -5013,11 +5013,7 @@ impl<'a> Resolver<'a> {\n                 ))\n             }\n \n-            if b.span.is_dummy() {\n-                err.note(&note_msg);\n-            } else {\n-                err.span_note(b.span, &note_msg);\n-            }\n+            err.span_note(b.span, &note_msg);\n             for (i, help_msg) in help_msgs.iter().enumerate() {\n                 let or = if i == 0 { \"\" } else { \"or \" };\n                 err.help(&format!(\"{}{}\", or, help_msg));\n@@ -5132,10 +5128,10 @@ impl<'a> Resolver<'a> {\n                           container));\n \n         err.span_label(span, format!(\"`{}` re{} here\", name, new_participle));\n-        if !old_binding.span.is_dummy() {\n-            err.span_label(self.session.source_map().def_span(old_binding.span),\n-                           format!(\"previous {} of the {} `{}` here\", old_noun, old_kind, name));\n-        }\n+        err.span_label(\n+            self.session.source_map().def_span(old_binding.span),\n+            format!(\"previous {} of the {} `{}` here\", old_noun, old_kind, name),\n+        );\n \n         // See https://github.com/rust-lang/rust/issues/32354\n         if old_binding.is_import() || new_binding.is_import() {"}, {"sha": "240b86d142ab7e6ef60935fa3a63d7255903b085", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "patch": "@@ -668,6 +668,11 @@ impl MultiSpan {\n         &self.primary_spans\n     }\n \n+    /// Returns wether any of the primary spans is displayable.\n+    pub fn has_primary_spans(&self) -> bool {\n+        self.primary_spans.iter().any(|sp| *sp != DUMMY_SP)\n+    }\n+\n     /// Returns `true` if this contains only a dummy primary span with any hygienic context.\n     pub fn is_dummy(&self) -> bool {\n         let mut is_dummy = true;\n@@ -726,6 +731,11 @@ impl MultiSpan {\n \n         span_labels\n     }\n+\n+    /// Returns wether any of the span labels is displayable.\n+    pub fn has_span_labels(&self) -> bool {\n+        self.span_labels.iter().any(|(sp, _)| *sp != DUMMY_SP)\n+    }\n }\n \n impl From<Span> for MultiSpan {"}, {"sha": "8f8eb38e938737bb0faa23514ff476a77f4ff57c", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "patch": "@@ -9,8 +9,8 @@ note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n    |\n LL |     intrinsics::size_of::<T>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires computing layout of `Foo`...\n-note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n+   = note: ...which requires computing layout of `Foo`...\n+   = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n   --> $DIR/const-size_of-cycle.rs:6:17\n    |"}, {"sha": "b936fed85f48efbf8753a567c214f94943fd06b9", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "patch": "@@ -9,7 +9,7 @@ note: ...which requires processing `cycle1`...\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n+   = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{impl-Trait}}`...\n   --> $DIR/auto-trait-leak.rs:23:16\n    |\n@@ -20,7 +20,7 @@ note: ...which requires processing `cycle2`...\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n+   = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n    = note: ...which again requires processing `cycle1::{{impl-Trait}}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/auto-trait-leak.rs:3:1\n@@ -45,7 +45,7 @@ note: ...which requires processing `cycle1`...\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n+   = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{impl-Trait}}`...\n   --> $DIR/auto-trait-leak.rs:23:16\n    |"}, {"sha": "ff197eeeb0fe92429eba624a897ac1db2afe53b0", "filename": "src/test/ui/issues/issue-26548.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Ftest%2Fui%2Fissues%2Fissue-26548.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Ftest%2Fui%2Fissues%2Fissue-26548.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26548.stderr?ref=c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "patch": "@@ -1,6 +1,6 @@\n error[E0391]: cycle detected when computing layout of `std::option::Option<S>`\n    |\n-note: ...which requires computing layout of `S`...\n+   = note: ...which requires computing layout of `S`...\n    = note: ...which again requires computing layout of `std::option::Option<S>`, completing the cycle\n note: cycle used when processing `main`\n   --> $DIR/issue-26548.rs:9:1"}, {"sha": "3f377fd27e7db29296083134fea603ff9e06c222", "filename": "src/test/ui/issues/issue-44415.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr?ref=c4b8df5df25aa8859d751ec0a7af3e7a0d6d699a", "patch": "@@ -9,8 +9,8 @@ note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires computing layout of `Foo`...\n-note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n+   = note: ...which requires computing layout of `Foo`...\n+   = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n   --> $DIR/issue-44415.rs:6:17\n    |"}]}