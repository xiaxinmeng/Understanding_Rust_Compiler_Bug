{"sha": "2a35b3e3224a28d0c4e95214676e625e15869f59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMzViM2UzMjI0YTI4ZDBjNGU5NTIxNDY3NmU2MjVlMTU4NjlmNTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T16:32:37Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T16:32:37Z"}, "message": "call user defined drop impls", "tree": {"sha": "d1a3f2e5c4d3512f95a7236ecba95d3b8d1537a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1a3f2e5c4d3512f95a7236ecba95d3b8d1537a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a35b3e3224a28d0c4e95214676e625e15869f59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYG2alAAoJEFbW7qD8Z6xGI3MQAKU1oiqGr0W+UTlY2rrl40M7\nsHhQ+sozHdYrej+4xARLUmDxsoE91ObbxeanN4XERqNsk6gw09Htrrr5VAj8hG7O\nmcJyzNyYXQly8eoAgNcnwyuLjXj9VIdxdu6oD33Di2zzxqhM0k1MmufpJFxSXAbj\nwUID78D8wV29ij01NRSfi3TSf/D4ODFBHhWZgHJDBo3dxAOdbemuUFMmIYcWewzs\nMKni6k0Wf0Bnd1bLGnB95SKdFxOokQrW7uO8CKhAklQ85vtiC8jEEJtm6uqvfdf6\n9lR4yAGDogi5XsonH9+rSArIqhJEiPysk4EOGVwWvk8bZTsCYWiAVIk6+DjpnWJj\n/p+LaBYRQIRtB/rDFKNGMYCUtBZTrBBkAlCUKlNqYsHSYWPTKudzNfTktutbp+cF\nqXA+NSlHVAVFbUoVX6Ypk58JcP9VHl2WxjdHq2cesjyw0sJ0YczY+L29IX+g7Bm9\nNWOhntUe5wsI5F6G1XeyLt3wrlGq7PRPwq3ZaYqpwFqjFoKMP15ySFocz4zVWBfy\njkxDWbjbsMtT7Ar7/v3aCST1ni2axZs7kq8JasnhpWrAON+ox8x9n1EzKJlsj+++\nmn+REKMkbgmplte4kNjMJ6hECZs5VaLKbxMQW7X+Knd+E2BaN3uo66Wrce0LB7Rk\npo5Q6Zonpg2+l7g7fOfr\n=jBq4\n-----END PGP SIGNATURE-----", "payload": "tree d1a3f2e5c4d3512f95a7236ecba95d3b8d1537a3\nparent 1e0d5b817dc21242178c10793b6d4803cb153411\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478190757 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478190757 +0100\n\ncall user defined drop impls"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a35b3e3224a28d0c4e95214676e625e15869f59", "html_url": "https://github.com/rust-lang/rust/commit/2a35b3e3224a28d0c4e95214676e625e15869f59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a35b3e3224a28d0c4e95214676e625e15869f59/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0d5b817dc21242178c10793b6d4803cb153411", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0d5b817dc21242178c10793b6d4803cb153411", "html_url": "https://github.com/rust-lang/rust/commit/1e0d5b817dc21242178c10793b6d4803cb153411"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "c94ea97b056b01aa6b4f9f805079588a7a331afb", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2a35b3e3224a28d0c4e95214676e625e15869f59/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a35b3e3224a28d0c4e95214676e625e15869f59/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=2a35b3e3224a28d0c4e95214676e625e15869f59", "patch": "@@ -107,8 +107,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let lval = self.eval_lvalue(location)?;\n \n                 let ty = self.lvalue_ty(location);\n-                self.drop(lval, ty)?;\n+\n+                // we can't generate the drop stack frames on the fly,\n+                // because that would change our call stack\n+                // and very much confuse the further processing of the drop glue\n+                let mut drops = Vec::new();\n+                self.drop(lval, ty, &mut drops)?;\n                 self.goto_block(target);\n+                self.eval_drop_impls(drops)?;\n             }\n \n             Assert { ref cond, expected, ref msg, target, .. } => {\n@@ -140,6 +146,30 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n+    fn eval_drop_impls(&mut self, drops: Vec<(DefId, Pointer, &'tcx Substs<'tcx>)>) -> EvalResult<'tcx, ()> {\n+        let span = self.frame().span;\n+        for (drop_def_id, adt_ptr, substs) in drops {\n+            // FIXME: supply a real span\n+            let mir = self.load_mir(drop_def_id)?;\n+            trace!(\"substs for drop glue: {:?}\", substs);\n+            self.push_stack_frame(\n+                drop_def_id,\n+                span,\n+                mir,\n+                substs,\n+                Lvalue::from_ptr(Pointer::zst_ptr()),\n+                StackPopCleanup::None,\n+            )?;\n+            let mut arg_locals = self.frame().mir.args_iter();\n+            let first = arg_locals.next().expect(\"drop impl has self arg\");\n+            assert!(arg_locals.next().is_none(), \"drop impl should have only one arg\");\n+            let dest = self.eval_lvalue(&mir::Lvalue::Local(first))?;\n+            let ty = self.frame().mir.local_decls[first].ty;\n+            self.write_value(Value::ByVal(PrimVal::from_ptr(adt_ptr)), dest, ty)?;\n+        }\n+        Ok(())\n+    }\n+\n     fn eval_fn_call(\n         &mut self,\n         def_id: DefId,\n@@ -478,29 +508,36 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.tcx.type_needs_drop_given_env(ty, &self.tcx.empty_parameter_environment())\n     }\n \n-    fn drop(&mut self, lval: Lvalue<'tcx>, ty: Ty<'tcx>) -> EvalResult<'tcx, ()> {\n+    /// push DefIds of drop impls and their argument on the given vector\n+    fn drop(\n+        &mut self,\n+        lval: Lvalue<'tcx>,\n+        ty: Ty<'tcx>,\n+        drop: &mut Vec<(DefId, Pointer, &'tcx Substs<'tcx>)>,\n+    ) -> EvalResult<'tcx, ()> {\n         if !self.type_needs_drop(ty) {\n             debug!(\"no need to drop {:?}\", ty);\n             return Ok(());\n         }\n         trace!(\"-need to drop {:?} at {:?}\", ty, lval);\n \n-        // TODO(solson): Call user-defined Drop::drop impls.\n-\n         // special case `Box` to deallocate the inner allocation\n-        // FIXME: if user defined Drop impls work, then this can go away, since the stdlib calls\n-        // heap::deallocate\n         if let ty::TyBox(contents_ty) = ty.sty {\n             let val = self.read_lvalue(lval)?;\n             let contents_ptr = val.read_ptr(&self.memory)?;\n-            self.drop(Lvalue::from_ptr(contents_ptr), contents_ty)?;\n+            self.drop(Lvalue::from_ptr(contents_ptr), contents_ty, drop)?;\n             trace!(\"-deallocating box\");\n             return self.memory.deallocate(contents_ptr);\n         }\n+\n         match ty.sty {\n             ty::TyAdt(adt_def, substs) => {\n                 // FIXME: some structs are represented as ByValPair\n                 let adt_ptr = self.force_allocation(lval)?.to_ptr();\n+                // run drop impl before the fields' drop impls\n+                if let Some(drop_def_id) = adt_def.destructor() {\n+                    drop.push((drop_def_id, adt_ptr, substs));\n+                }\n                 let layout = self.type_layout(ty);\n                 let fields = match *layout {\n                     Layout::Univariant { ref variant, .. } => {\n@@ -527,15 +564,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 };\n                 for (field_ty, offset) in fields {\n                     let field_ty = self.monomorphize_field_ty(field_ty, substs);\n-                    self.drop(Lvalue::from_ptr(adt_ptr.offset(offset.bytes() as isize)), field_ty)?;\n+                    self.drop(Lvalue::from_ptr(adt_ptr.offset(offset.bytes() as isize)), field_ty, drop)?;\n                 }\n             },\n             ty::TyTuple(fields) => {\n                 // FIXME: some tuples are represented as ByValPair\n                 let ptr = self.force_allocation(lval)?.to_ptr();\n                 for (i, field_ty) in fields.iter().enumerate() {\n                     let offset = self.get_field_offset(ty, i)?.bytes() as isize;\n-                    self.drop(Lvalue::from_ptr(ptr.offset(offset)), field_ty)?;\n+                    self.drop(Lvalue::from_ptr(ptr.offset(offset)), field_ty, drop)?;\n                 }\n             },\n             // other types do not need to process drop"}, {"sha": "c96818932d777e11effd0397b189aac8112dc499", "filename": "tests/run-pass/rc.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a35b3e3224a28d0c4e95214676e625e15869f59/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a35b3e3224a28d0c4e95214676e625e15869f59/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=2a35b3e3224a28d0c4e95214676e625e15869f59", "patch": "@@ -1,5 +1,3 @@\n-//error-pattern: no mir for `std::result::unwrap_failed::__STATIC_FMTSTR`\n-\n use std::cell::RefCell;\n use std::rc::Rc;\n ", "previous_filename": "tests/compile-fail/rc.rs"}]}