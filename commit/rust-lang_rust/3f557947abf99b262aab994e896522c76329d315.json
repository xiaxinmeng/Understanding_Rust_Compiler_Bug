{"sha": "3f557947abf99b262aab994e896522c76329d315", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNTU3OTQ3YWJmOTliMjYyYWFiOTk0ZTg5NjUyMmM3NjMyOWQzMTU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-21T08:48:23Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-21T08:48:23Z"}, "message": "NonNull ended up landing in 1.25", "tree": {"sha": "21654be6bfe7337f4b6976005a026d3dc75f4959", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21654be6bfe7337f4b6976005a026d3dc75f4959"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f557947abf99b262aab994e896522c76329d315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f557947abf99b262aab994e896522c76329d315", "html_url": "https://github.com/rust-lang/rust/commit/3f557947abf99b262aab994e896522c76329d315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f557947abf99b262aab994e896522c76329d315/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b85aefbc601b1fe89b4989c623305eb1def8e0e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85aefbc601b1fe89b4989c623305eb1def8e0e7", "html_url": "https://github.com/rust-lang/rust/commit/b85aefbc601b1fe89b4989c623305eb1def8e0e7"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "607e4a1a9fa106b93bd70866dda208751ea7c6d2", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3f557947abf99b262aab994e896522c76329d315/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f557947abf99b262aab994e896522c76329d315/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=3f557947abf99b262aab994e896522c76329d315", "patch": "@@ -2461,7 +2461,7 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n }\n \n /// Previous name of `NonNull`.\n-#[rustc_deprecated(since = \"1.24\", reason = \"renamed to `NonNull`\")]\n+#[rustc_deprecated(since = \"1.25.0\", reason = \"renamed to `NonNull`\")]\n #[unstable(feature = \"shared\", issue = \"27730\")]\n pub type Shared<T> = NonNull<T>;\n \n@@ -2482,12 +2482,12 @@ pub type Shared<T> = NonNull<T>;\n /// Usually this won't be necessary; covariance is correct for most safe abstractions,\n /// such as Box, Rc, Arc, Vec, and LinkedList. This is the case because they\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n pub struct NonNull<T: ?Sized> {\n     pointer: NonZero<*const T>,\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> fmt::Debug for NonNull<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n@@ -2496,20 +2496,20 @@ impl<T: ?Sized> fmt::Debug for NonNull<T> {\n \n /// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> !Send for NonNull<T> { }\n \n /// `NonNull` pointers are not `Sync` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> !Sync for NonNull<T> { }\n \n impl<T: Sized> NonNull<T> {\n     /// Creates a new `NonNull` that is dangling, but well-aligned.\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn dangling() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n@@ -2524,19 +2524,19 @@ impl<T: ?Sized> NonNull<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         NonNull { pointer: NonZero::new_unchecked(ptr) }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         NonZero::new(ptr as *const T).map(|nz| NonNull { pointer: nz })\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn as_ptr(self) -> *mut T {\n         self.pointer.get() as *mut T\n     }\n@@ -2546,7 +2546,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub unsafe fn as_ref(&self) -> &T {\n         &*self.as_ptr()\n     }\n@@ -2556,47 +2556,47 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n         &mut *self.as_ptr()\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Clone for NonNull<T> {\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Copy for NonNull<T> { }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> { }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> fmt::Pointer for NonNull<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     fn from(unique: Unique<T>) -> Self {\n         NonNull { pointer: unique.pointer }\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero::from(reference) }\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero::from(reference) }"}, {"sha": "112e110609310081a080748ca5e4ea23286de3f3", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f557947abf99b262aab994e896522c76329d315/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f557947abf99b262aab994e896522c76329d315/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=3f557947abf99b262aab994e896522c76329d315", "patch": "@@ -198,7 +198,7 @@ impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *mut T {}\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: UnwindSafe + ?Sized> UnwindSafe for Unique<T> {}\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for NonNull<T> {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: ?Sized> UnwindSafe for Mutex<T> {}"}]}