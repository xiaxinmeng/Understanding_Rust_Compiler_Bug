{"sha": "b417f01ed82332cd81954ac6d9f5bad615db2bfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MTdmMDFlZDgyMzMyY2Q4MTk1NGFjNmQ5ZjViYWQ2MTVkYjJiZmM=", "commit": {"author": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-20T12:36:26Z"}, "committer": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-20T12:36:26Z"}, "message": "Also test that the CastExpr's right arm is numeric.", "tree": {"sha": "896eebcbe554bb1d9d2bc71aa1fc9b7de27ec9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896eebcbe554bb1d9d2bc71aa1fc9b7de27ec9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b417f01ed82332cd81954ac6d9f5bad615db2bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b417f01ed82332cd81954ac6d9f5bad615db2bfc", "html_url": "https://github.com/rust-lang/rust/commit/b417f01ed82332cd81954ac6d9f5bad615db2bfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b417f01ed82332cd81954ac6d9f5bad615db2bfc/comments", "author": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93d9249f769f27e2864d5b2d53dfc94a933412a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/93d9249f769f27e2864d5b2d53dfc94a933412a4", "html_url": "https://github.com/rust-lang/rust/commit/93d9249f769f27e2864d5b2d53dfc94a933412a4"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "3f7012f6ca8c31bd3d846b590c11fb04ac58d680", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b417f01ed82332cd81954ac6d9f5bad615db2bfc/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b417f01ed82332cd81954ac6d9f5bad615db2bfc/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=b417f01ed82332cd81954ac6d9f5bad615db2bfc", "patch": "@@ -156,7 +156,7 @@ impl LintPass for CastPass {\n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n         if let ExprCast(ref ex, _) = expr.node {\n             let (cast_from, cast_to) = (cx.tcx.expr_ty(&*ex), cx.tcx.expr_ty(expr));\n-            if cast_from.is_numeric() && !in_external_macro(cx, expr.span) {\n+            if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx, expr.span) {\n                 match (cast_from.is_integral(), cast_to.is_integral()) {\n                     (true, false)  => {\n                         match (&cast_from.sty, &cast_to.sty) {"}]}