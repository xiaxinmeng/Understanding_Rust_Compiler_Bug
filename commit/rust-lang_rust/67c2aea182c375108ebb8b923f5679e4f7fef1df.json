{"sha": "67c2aea182c375108ebb8b923f5679e4f7fef1df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YzJhZWExODJjMzc1MTA4ZWJiOGI5MjNmNTY3OWU0ZjdmZWYxZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T10:30:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T10:52:17Z"}, "message": "Rebuild ra_lsp_server and nest helper function.\n\nCompletion now works again, so there's no need not to nest", "tree": {"sha": "00ecd85453675103fe415a7b28c565a2a9e94853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00ecd85453675103fe415a7b28c565a2a9e94853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67c2aea182c375108ebb8b923f5679e4f7fef1df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67c2aea182c375108ebb8b923f5679e4f7fef1df", "html_url": "https://github.com/rust-lang/rust/commit/67c2aea182c375108ebb8b923f5679e4f7fef1df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67c2aea182c375108ebb8b923f5679e4f7fef1df/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d316ba9a136833c64ba066feb62cf553dd4b3a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/d316ba9a136833c64ba066feb62cf553dd4b3a58", "html_url": "https://github.com/rust-lang/rust/commit/d316ba9a136833c64ba066feb62cf553dd4b3a58"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "3b6454a1d83edcc50b87e75da071b967e297c444", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/67c2aea182c375108ebb8b923f5679e4f7fef1df/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c2aea182c375108ebb8b923f5679e4f7fef1df/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=67c2aea182c375108ebb8b923f5679e4f7fef1df", "patch": "@@ -212,43 +212,43 @@ impl Module {\n }\n \n fn analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> DynMap {\n-    _analyze_container(db, src).unwrap_or_default()\n-}\n+    return child_by_source(db, src).unwrap_or_default();\n \n-fn _analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<DynMap> {\n-    for container in src.value.ancestors().skip(1) {\n-        let res = match_ast! {\n-            match container {\n-                ast::TraitDef(it) => {\n-                    let def = Trait::from_source(db, src.with_value(it))?;\n-                    def.id.child_by_source(db)\n-                },\n-                ast::ImplBlock(it) => {\n-                    let def = ImplBlock::from_source(db, src.with_value(it))?;\n-                    def.id.child_by_source(db)\n-                },\n-                ast::FnDef(it) => {\n-                    let def = Function::from_source(db, src.with_value(it))?;\n-                    DefWithBodyId::from(def.id)\n-                        .child_by_source(db)\n-                },\n-                ast::StaticDef(it) => {\n-                    let def = Static::from_source(db, src.with_value(it))?;\n-                    DefWithBodyId::from(def.id)\n-                        .child_by_source(db)\n-                },\n-                ast::ConstDef(it) => {\n-                    let def = Const::from_source(db, src.with_value(it))?;\n-                    DefWithBodyId::from(def.id)\n-                        .child_by_source(db)\n-                },\n-                _ => { continue },\n-            }\n-        };\n-        return Some(res);\n-    }\n+    fn child_by_source(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<DynMap> {\n+        for container in src.value.ancestors().skip(1) {\n+            let res = match_ast! {\n+                match container {\n+                    ast::TraitDef(it) => {\n+                        let def = Trait::from_source(db, src.with_value(it))?;\n+                        def.id.child_by_source(db)\n+                    },\n+                    ast::ImplBlock(it) => {\n+                        let def = ImplBlock::from_source(db, src.with_value(it))?;\n+                        def.id.child_by_source(db)\n+                    },\n+                    ast::FnDef(it) => {\n+                        let def = Function::from_source(db, src.with_value(it))?;\n+                        DefWithBodyId::from(def.id)\n+                            .child_by_source(db)\n+                    },\n+                    ast::StaticDef(it) => {\n+                        let def = Static::from_source(db, src.with_value(it))?;\n+                        DefWithBodyId::from(def.id)\n+                            .child_by_source(db)\n+                    },\n+                    ast::ConstDef(it) => {\n+                        let def = Const::from_source(db, src.with_value(it))?;\n+                        DefWithBodyId::from(def.id)\n+                            .child_by_source(db)\n+                    },\n+                    _ => { continue },\n+                }\n+            };\n+            return Some(res);\n+        }\n \n-    let module_source = ModuleSource::from_child_node(db, src);\n-    let c = Module::from_definition(db, src.with_value(module_source))?;\n-    Some(c.id.child_by_source(db))\n+        let module_source = ModuleSource::from_child_node(db, src);\n+        let c = Module::from_definition(db, src.with_value(module_source))?;\n+        Some(c.id.child_by_source(db))\n+    }\n }"}]}