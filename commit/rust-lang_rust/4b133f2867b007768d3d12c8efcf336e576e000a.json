{"sha": "4b133f2867b007768d3d12c8efcf336e576e000a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMTMzZjI4NjdiMDA3NzY4ZDNkMTJjOGVmY2YzMzZlNTc2ZTAwMGE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-25T22:01:16Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-25T22:01:16Z"}, "message": "Apply review comments", "tree": {"sha": "3181f333889b303671705084f84cc874c94dd4ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3181f333889b303671705084f84cc874c94dd4ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b133f2867b007768d3d12c8efcf336e576e000a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b133f2867b007768d3d12c8efcf336e576e000a", "html_url": "https://github.com/rust-lang/rust/commit/4b133f2867b007768d3d12c8efcf336e576e000a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b133f2867b007768d3d12c8efcf336e576e000a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3999b30d9b759183131e098d15bcaa5c4305e21e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3999b30d9b759183131e098d15bcaa5c4305e21e", "html_url": "https://github.com/rust-lang/rust/commit/3999b30d9b759183131e098d15bcaa5c4305e21e"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "eafc2c618216b71ef3a1d811ababa5724d99c337", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4b133f2867b007768d3d12c8efcf336e576e000a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b133f2867b007768d3d12c8efcf336e576e000a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4b133f2867b007768d3d12c8efcf336e576e000a", "patch": "@@ -2138,7 +2138,7 @@ fn lint_iter_nth<'a, 'tcx>(\n         ITER_NTH,\n         expr.span,\n         &format!(\"called `.iter{0}().nth()` on a {1}\", mut_str, caller_type),\n-        &format!(\"Calling `.get{}()` is both faster and more readable\", mut_str),\n+        &format!(\"calling `.get{}()` is both faster and more readable\", mut_str),\n     );\n }\n \n@@ -2247,7 +2247,7 @@ fn lint_iter_skip_next(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>) {\n             ITER_SKIP_NEXT,\n             expr.span,\n             \"called `skip(x).next()` on an iterator\",\n-            \"This is more succinctly expressed by calling `nth(x)`.\",\n+            \"this is more succinctly expressed by calling `nth(x)`\",\n         );\n     }\n }\n@@ -2309,8 +2309,8 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n             expr.span,\n             &format!(\"used `unwrap()` on `{}` value\", kind,),\n             &format!(\n-                \"If you don't want to handle the `{}` case gracefully, consider \\\n-                using `expect()` to provide a better panic message.\",\n+                \"if you don't want to handle the `{}` case gracefully, consider \\\n+                using `expect()` to provide a better panic message\",\n                 none_value,\n             ),\n         );\n@@ -2335,7 +2335,7 @@ fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hi\n             lint,\n             expr.span,\n             &format!(\"used `expect()` on `{}` value\", kind,),\n-            &format!(\"If this value is an `{}`, it will panic.\", none_value,),\n+            &format!(\"if this value is an `{}`, it will panic\", none_value,),\n         );\n     }\n }\n@@ -2355,7 +2355,7 @@ fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, ok_args: &[hir\n                 OK_EXPECT,\n                 expr.span,\n                 \"called `ok().expect()` on a `Result` value\",\n-                \"You can call `expect()` directly on the `Result`\",\n+                \"you can call `expect()` directly on the `Result`\",\n             );\n         }\n     }\n@@ -2608,7 +2608,7 @@ fn lint_filter_map<'a, 'tcx>(\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(p).map(q)` on an `Iterator`\";\n-        let hint = \"This is more succinctly expressed by calling `.filter_map(..)` instead.\";\n+        let hint = \"this is more succinctly expressed by calling `.filter_map(..)` instead\";\n         span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n@@ -2648,7 +2648,7 @@ fn lint_find_map<'a, 'tcx>(\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n         let msg = \"called `find(p).map(q)` on an `Iterator`\";\n-        let hint = \"This is more succinctly expressed by calling `.find_map(..)` instead.\";\n+        let hint = \"this is more succinctly expressed by calling `.find_map(..)` instead\";\n         span_help_and_lint(cx, FIND_MAP, expr.span, msg, hint);\n     }\n }\n@@ -2663,7 +2663,7 @@ fn lint_filter_map_map<'a, 'tcx>(\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter_map(p).map(q)` on an `Iterator`\";\n-        let hint = \"This is more succinctly expressed by only calling `.filter_map(..)` instead.\";\n+        let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";\n         span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n@@ -2678,8 +2678,8 @@ fn lint_filter_flat_map<'a, 'tcx>(\n     // lint if caller of `.filter().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(p).flat_map(q)` on an `Iterator`\";\n-        let hint = \"This is more succinctly expressed by calling `.flat_map(..)` \\\n-            and filtering by returning an empty Iterator.\";\n+        let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n+            and filtering by returning `iter::empty()`\";\n         span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n@@ -2694,8 +2694,8 @@ fn lint_filter_map_flat_map<'a, 'tcx>(\n     // lint if caller of `.filter_map().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`\";\n-        let hint = \"This is more succinctly expressed by calling `.flat_map(..)` \\\n-            and filtering by returning an empty Iterator.\";\n+        let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n+            and filtering by returning `iter::empty()`\";\n         span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }"}, {"sha": "adf9f4f192191d652593cdf04dad5eac2de4ca51", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=4b133f2867b007768d3d12c8efcf336e576e000a", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-expect-used` implied by `-D warnings`\n-   = help: If this value is an `None`, it will panic.\n+   = help: if this value is an `None`, it will panic\n \n error: used `expect()` on `a Result` value\n   --> $DIR/expect.rs:10:13\n@@ -14,7 +14,7 @@ LL |     let _ = res.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::result-expect-used` implied by `-D warnings`\n-   = help: If this value is an `Err`, it will panic.\n+   = help: if this value is an `Err`, it will panic\n \n error: aborting due to 2 previous errors\n "}, {"sha": "84a957a374c6b7c1352e8c06f36831ef514de86d", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=4b133f2867b007768d3d12c8efcf336e576e000a", "patch": "@@ -5,7 +5,7 @@ LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x *\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::filter-map` implied by `-D warnings`\n-   = help: This is more succinctly expressed by calling `.filter_map(..)` instead.\n+   = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n \n error: called `filter(p).flat_map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:7:21\n@@ -17,7 +17,7 @@ LL | |         .filter(|&x| x == 0)\n LL | |         .flat_map(|x| x.checked_mul(2))\n    | |_______________________________________^\n    |\n-   = help: This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n+   = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n error: called `filter_map(p).flat_map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:13:21\n@@ -29,7 +29,7 @@ LL | |         .filter_map(|x| x.checked_mul(2))\n LL | |         .flat_map(|x| x.checked_mul(2))\n    | |_______________________________________^\n    |\n-   = help: This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n+   = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n error: called `filter_map(p).map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:19:21\n@@ -41,7 +41,7 @@ LL | |         .filter_map(|x| x.checked_mul(2))\n LL | |         .map(|x| x.checked_mul(2))\n    | |__________________________________^\n    |\n-   = help: This is more succinctly expressed by only calling `.filter_map(..)` instead.\n+   = help: this is more succinctly expressed by only calling `.filter_map(..)` instead\n \n error: aborting due to 4 previous errors\n "}, {"sha": "92f40fe6f1fb23b8a6e2b6681019c573ef5c2e2a", "filename": "tests/ui/find_map.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Ffind_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Ffind_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffind_map.stderr?ref=4b133f2867b007768d3d12c8efcf336e576e000a", "patch": "@@ -5,7 +5,7 @@ LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::find-map` implied by `-D warnings`\n-   = help: This is more succinctly expressed by calling `.find_map(..)` instead.\n+   = help: this is more succinctly expressed by calling `.find_map(..)` instead\n \n error: called `find(p).map(q)` on an `Iterator`\n   --> $DIR/find_map.rs:22:29\n@@ -20,7 +20,7 @@ LL | |             _ => unreachable!(),\n LL | |         });\n    | |__________^\n    |\n-   = help: This is more succinctly expressed by calling `.find_map(..)` instead.\n+   = help: this is more succinctly expressed by calling `.find_map(..)` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d00b2fb672bb6ea9abb6160bcb09e331b32c8074", "filename": "tests/ui/iter_nth.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Fiter_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Fiter_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.stderr?ref=4b133f2867b007768d3d12c8efcf336e576e000a", "patch": "@@ -5,55 +5,55 @@ LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n-   = help: Calling `.get()` is both faster and more readable\n+   = help: calling `.get()` is both faster and more readable\n \n error: called `.iter().nth()` on a slice\n   --> $DIR/iter_nth.rs:34:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Calling `.get()` is both faster and more readable\n+   = help: calling `.get()` is both faster and more readable\n \n error: called `.iter().nth()` on a slice\n   --> $DIR/iter_nth.rs:35:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Calling `.get()` is both faster and more readable\n+   = help: calling `.get()` is both faster and more readable\n \n error: called `.iter().nth()` on a VecDeque\n   --> $DIR/iter_nth.rs:36:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Calling `.get()` is both faster and more readable\n+   = help: calling `.get()` is both faster and more readable\n \n error: called `.iter_mut().nth()` on a Vec\n   --> $DIR/iter_nth.rs:41:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Calling `.get_mut()` is both faster and more readable\n+   = help: calling `.get_mut()` is both faster and more readable\n \n error: called `.iter_mut().nth()` on a slice\n   --> $DIR/iter_nth.rs:44:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Calling `.get_mut()` is both faster and more readable\n+   = help: calling `.get_mut()` is both faster and more readable\n \n error: called `.iter_mut().nth()` on a VecDeque\n   --> $DIR/iter_nth.rs:47:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Calling `.get_mut()` is both faster and more readable\n+   = help: calling `.get_mut()` is both faster and more readable\n \n error: aborting due to 7 previous errors\n "}, {"sha": "5709f3355298bb396337aa7a259dc6040c3d5da4", "filename": "tests/ui/iter_skip_next.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Fiter_skip_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Fiter_skip_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.stderr?ref=4b133f2867b007768d3d12c8efcf336e576e000a", "patch": "@@ -5,31 +5,31 @@ LL |     let _ = some_vec.iter().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n-   = help: This is more succinctly expressed by calling `nth(x)`.\n+   = help: this is more succinctly expressed by calling `nth(x)`\n \n error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:14:13\n    |\n LL |     let _ = some_vec.iter().cycle().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: This is more succinctly expressed by calling `nth(x)`.\n+   = help: this is more succinctly expressed by calling `nth(x)`\n \n error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:15:13\n    |\n LL |     let _ = (1..10).skip(10).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: This is more succinctly expressed by calling `nth(x)`.\n+   = help: this is more succinctly expressed by calling `nth(x)`\n \n error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:16:14\n    |\n LL |     let _ = &some_vec[..].iter().skip(3).next();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: This is more succinctly expressed by calling `nth(x)`.\n+   = help: this is more succinctly expressed by calling `nth(x)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b02b28e7f68c8a5e8bb1def1e2dd8a2c9722a8e3", "filename": "tests/ui/ok_expect.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Fok_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Fok_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.stderr?ref=4b133f2867b007768d3d12c8efcf336e576e000a", "patch": "@@ -5,39 +5,39 @@ LL |     res.ok().expect(\"disaster!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::ok-expect` implied by `-D warnings`\n-   = help: You can call `expect()` directly on the `Result`\n+   = help: you can call `expect()` directly on the `Result`\n \n error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:20:5\n    |\n LL |     res3.ok().expect(\"whoof\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: You can call `expect()` directly on the `Result`\n+   = help: you can call `expect()` directly on the `Result`\n \n error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:22:5\n    |\n LL |     res4.ok().expect(\"argh\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: You can call `expect()` directly on the `Result`\n+   = help: you can call `expect()` directly on the `Result`\n \n error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:24:5\n    |\n LL |     res5.ok().expect(\"oops\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: You can call `expect()` directly on the `Result`\n+   = help: you can call `expect()` directly on the `Result`\n \n error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:26:5\n    |\n LL |     res6.ok().expect(\"meh\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: You can call `expect()` directly on the `Result`\n+   = help: you can call `expect()` directly on the `Result`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b90ce68fa97ac76c064465d579c2b85e315cb9af", "filename": "tests/ui/unwrap.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Funwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b133f2867b007768d3d12c8efcf336e576e000a/tests%2Fui%2Funwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.stderr?ref=4b133f2867b007768d3d12c8efcf336e576e000a", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n-   = help: If you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message.\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: used `unwrap()` on `a Result` value\n   --> $DIR/unwrap.rs:10:13\n@@ -14,7 +14,7 @@ LL |     let _ = res.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::result-unwrap-used` implied by `-D warnings`\n-   = help: If you don't want to handle the `Err` case gracefully, consider using `expect()` to provide a better panic message.\n+   = help: if you don't want to handle the `Err` case gracefully, consider using `expect()` to provide a better panic message\n \n error: aborting due to 2 previous errors\n "}]}