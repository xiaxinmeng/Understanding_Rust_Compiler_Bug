{"sha": "b6602d2dd1835cf81bd0ec2989df097ea5721b28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NjAyZDJkZDE4MzVjZjgxYmQwZWMyOTg5ZGYwOTdlYTU3MjFiMjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T18:41:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-03T18:41:48Z"}, "message": "Rollup merge of #66878 - Mark-Simulacrum:sess-decouple, r=Centril\n\nMove Sessions into (new) librustc_session\n\nThis PR moves `ParseSess` and `Session` from their current locations into a new crate, `librustc_session`.\n\nThere are several intents behind this change. librustc is a very large crate, and we want to split it up over time -- this movement removes the sizeable session module from it. It also helps allow for future movement of things not coupled to TyCtxt but coupled to Session out of the crate.\n\nThis movement allows allows for a future follow-up PR which unifies Session and ParseSess, allowing for a single source of truth for APIs interested in global options throughout the compiler; the ParseSess is already created directly as a member of Session in the current compiler (i.e., we do not first construct a ParseSess and then move it into Session later in the compilation).\n\nThis PR intentionally avoids changing numerous imports throughout the tree to new locations of the moved types; this is needless noise and can be done as needed.\n\nIn the process of moving the sessions back, the lint system received an update as well -- notably, early buffered lints are no longer ad-hoc declared as enum pairs and later associated with proper lint declarations. They are still separately handled (buffered), it is a little unclear whether this is truly necessary, but regardless is left for future PRs.\n\nMany of the types moved back are sort of ad-hoc placed into the same crate (librustc_session) instead of creating other crates; it's unclear whether this is actually a good thing, but it seemed better than creating numerous tiny crates which served no purpose on their own.", "tree": {"sha": "4b69e6b9be86b39b993b776e56e716c75d208c15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b69e6b9be86b39b993b776e56e716c75d208c15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6602d2dd1835cf81bd0ec2989df097ea5721b28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5qxsCRBK7hj4Ov3rIwAAdHIIAByoxTliLjP7Ghi8/TfBT4NR\nVWSFE087SN2Fg43OtIlFr8ZkHNWr8l7jWrEPxUkMQmwz7l9YPdftZeP5lXVABS2i\n57CIihBwi43c3J8qE58OdyPgHaNVr2L7a3uwHiMWENYZS6WmuUmFHgpQo2PbD8p1\n/NQrmSSGE9gJEyfdYB2rybXE2vgircdj3EtppOelbTkHrXXGI5DqmS1RjLltEokG\njESAGvcHgpY2SAMAA7smHFa0CzvjrvdARtshtl3agERu/bB90qKNhQ0RgS9sKlz/\nh7Kq3H8hOOq9mp7kW+lpPperKv8ACZ4xTGgJ5c4YAJx4y/SOiU12tP8N2Q3bzHE=\n=rUJC\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b69e6b9be86b39b993b776e56e716c75d208c15\nparent 1b83dcf2eed11bfe9a902d769e9474f39a902326\nparent 68fb218f22bca72eb0f898090ab544d93081a81d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575398508 +0100\ncommitter GitHub <noreply@github.com> 1575398508 +0100\n\nRollup merge of #66878 - Mark-Simulacrum:sess-decouple, r=Centril\n\nMove Sessions into (new) librustc_session\n\nThis PR moves `ParseSess` and `Session` from their current locations into a new crate, `librustc_session`.\n\nThere are several intents behind this change. librustc is a very large crate, and we want to split it up over time -- this movement removes the sizeable session module from it. It also helps allow for future movement of things not coupled to TyCtxt but coupled to Session out of the crate.\n\nThis movement allows allows for a future follow-up PR which unifies Session and ParseSess, allowing for a single source of truth for APIs interested in global options throughout the compiler; the ParseSess is already created directly as a member of Session in the current compiler (i.e., we do not first construct a ParseSess and then move it into Session later in the compilation).\n\nThis PR intentionally avoids changing numerous imports throughout the tree to new locations of the moved types; this is needless noise and can be done as needed.\n\nIn the process of moving the sessions back, the lint system received an update as well -- notably, early buffered lints are no longer ad-hoc declared as enum pairs and later associated with proper lint declarations. They are still separately handled (buffered), it is a little unclear whether this is truly necessary, but regardless is left for future PRs.\n\nMany of the types moved back are sort of ad-hoc placed into the same crate (librustc_session) instead of creating other crates; it's unclear whether this is actually a good thing, but it seemed better than creating numerous tiny crates which served no purpose on their own.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6602d2dd1835cf81bd0ec2989df097ea5721b28", "html_url": "https://github.com/rust-lang/rust/commit/b6602d2dd1835cf81bd0ec2989df097ea5721b28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6602d2dd1835cf81bd0ec2989df097ea5721b28/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b83dcf2eed11bfe9a902d769e9474f39a902326", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b83dcf2eed11bfe9a902d769e9474f39a902326", "html_url": "https://github.com/rust-lang/rust/commit/1b83dcf2eed11bfe9a902d769e9474f39a902326"}, {"sha": "68fb218f22bca72eb0f898090ab544d93081a81d", "url": "https://api.github.com/repos/rust-lang/rust/commits/68fb218f22bca72eb0f898090ab544d93081a81d", "html_url": "https://github.com/rust-lang/rust/commit/68fb218f22bca72eb0f898090ab544d93081a81d"}], "stats": {"total": 1027, "additions": 545, "deletions": 482}, "files": [{"sha": "5e83513af5b377171d1e9cb282c03720b4478cf6", "filename": "Cargo.lock", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -3205,6 +3205,7 @@ dependencies = [\n  \"rustc_fs_util\",\n  \"rustc_index\",\n  \"rustc_macros\",\n+ \"rustc_session\",\n  \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n@@ -3518,6 +3519,7 @@ dependencies = [\n  \"rustc_fs_util\",\n  \"rustc_incremental\",\n  \"rustc_index\",\n+ \"rustc_session\",\n  \"rustc_target\",\n  \"serialize\",\n  \"syntax\",\n@@ -3634,6 +3636,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_fs_util\",\n+ \"rustc_session\",\n  \"serialize\",\n  \"syntax\",\n  \"syntax_pos\",\n@@ -3697,6 +3700,7 @@ dependencies = [\n  \"rustc_error_codes\",\n  \"rustc_feature\",\n  \"rustc_index\",\n+ \"rustc_session\",\n  \"rustc_target\",\n  \"syntax\",\n  \"syntax_pos\",\n@@ -3884,6 +3888,22 @@ dependencies = [\n  \"syntax_pos\",\n ]\n \n+[[package]]\n+name = \"rustc_session\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"log\",\n+ \"num_cpus\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_feature\",\n+ \"rustc_fs_util\",\n+ \"rustc_index\",\n+ \"rustc_target\",\n+ \"serialize\",\n+ \"syntax_pos\",\n+]\n+\n [[package]]\n name = \"rustc_target\"\n version = \"0.0.0\"\n@@ -4463,6 +4483,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n+ \"rustc_session\",\n  \"scoped-tls\",\n  \"serialize\",\n  \"smallvec 1.0.0\","}, {"sha": "f8ad6f8f30edb00eb26bf2b94b64e1e37925c636", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -39,3 +39,4 @@ rustc_fs_util = { path = \"../librustc_fs_util\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.4\"\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "a1321d50f28bb99bab97983b352781e41b0a916a", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -5,7 +5,6 @@ mod prev;\n mod query;\n mod safe;\n mod serialized;\n-pub mod cgu_reuse_tracker;\n \n pub use self::dep_node::{DepNode, DepKind, DepConstructor, WorkProductId, RecoverKey, label_strs};\n pub use self::graph::{DepGraph, WorkProduct, DepNodeIndex, DepNodeColor, TaskDeps, hash_result};"}, {"sha": "e708c5ab6e77d0da21e6e75270a1c4dda3d19bec", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -64,7 +64,6 @@\n #![recursion_limit=\"512\"]\n \n #[macro_use] extern crate bitflags;\n-extern crate getopts;\n #[macro_use] extern crate scoped_tls;\n #[cfg(windows)]\n extern crate libc;\n@@ -74,10 +73,6 @@ extern crate libc;\n #[macro_use] extern crate syntax;\n #[macro_use] extern crate smallvec;\n \n-// Use the test crate here so we depend on getopts through it. This allow tools to link to both\n-// librustc_driver and libtest.\n-extern crate test as _;\n-\n #[cfg(test)]\n mod tests;\n \n@@ -113,7 +108,7 @@ pub mod middle {\n }\n \n pub mod mir;\n-pub mod session;\n+pub use rustc_session as session;\n pub mod traits;\n pub mod ty;\n "}, {"sha": "1aba73ec73d00fb7873b07294ba3ab46d6e15106", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -12,6 +12,8 @@ use syntax::ast;\n use syntax::edition::Edition;\n use syntax::source_map::Span;\n use syntax::symbol::Symbol;\n+use syntax::early_buffered_lints::{ILL_FORMED_ATTRIBUTE_INPUT, META_VARIABLE_MISUSE};\n+use rustc_session::declare_lint;\n \n declare_lint! {\n     pub EXCEEDING_BITSHIFTS,\n@@ -404,31 +406,6 @@ declare_lint! {\n     };\n }\n \n-/// Some lints that are buffered from `libsyntax`. See `syntax::early_buffered_lints`.\n-pub mod parser {\n-    declare_lint! {\n-        pub ILL_FORMED_ATTRIBUTE_INPUT,\n-        Deny,\n-        \"ill-formed attribute inputs that were previously accepted and used in practice\",\n-        @future_incompatible = super::FutureIncompatibleInfo {\n-            reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n-            edition: None,\n-        };\n-    }\n-\n-    declare_lint! {\n-        pub META_VARIABLE_MISUSE,\n-        Allow,\n-        \"possible meta-variable misuse at macro definition\"\n-    }\n-\n-    declare_lint! {\n-        pub INCOMPLETE_INCLUDE,\n-        Deny,\n-        \"trailing content in included file\"\n-    }\n-}\n-\n declare_lint! {\n     pub DEPRECATED_IN_FUTURE,\n     Allow,\n@@ -520,8 +497,8 @@ declare_lint_pass! {\n         PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n         MACRO_USE_EXTERN_CRATE,\n         MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n-        parser::ILL_FORMED_ATTRIBUTE_INPUT,\n-        parser::META_VARIABLE_MISUSE,\n+        ILL_FORMED_ATTRIBUTE_INPUT,\n+        META_VARIABLE_MISUSE,\n         DEPRECATED_IN_FUTURE,\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,"}, {"sha": "10c0c63995ca276c7f3e9f2ae15ec185e3d24d65", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -9,6 +9,7 @@ use errors::Applicability;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::{Ident, Item, ItemKind};\n use syntax::symbol::{sym, Symbol};\n+use rustc_session::declare_tool_lint;\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,"}, {"sha": "f29d1a3789aea493275d1e91a7ecde847b705fb7", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -8,7 +8,7 @@ use crate::lint::{self, Lint, LintId, Level, LintSource};\n use crate::session::Session;\n use crate::util::nodemap::FxHashMap;\n use errors::{Applicability, DiagnosticBuilder};\n-use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate;\n@@ -93,7 +93,7 @@ impl LintLevelSets {\n \n         // If `level` is none then we actually assume the default level for this\n         // lint.\n-        let mut level = level.unwrap_or_else(|| lint.default_level(sess));\n+        let mut level = level.unwrap_or_else(|| lint.default_level(sess.edition()));\n \n         // If we're about to issue a warning, check at the last minute for any\n         // directives against the warnings \"lint\". If, for example, there's an\n@@ -566,19 +566,3 @@ impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {\n         })\n     }\n }\n-\n-impl<HCX> HashStable<HCX> for LintId {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        self.lint_name_raw().hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<HCX> ToStableHashKey<HCX> for LintId {\n-    type KeyType = &'static str;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self, _: &HCX) -> &'static str {\n-        self.lint_name_raw()\n-    }\n-}"}, {"sha": "a8d886866795eef22f1760bc105d0d53fdaa0eb5", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 230, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -27,170 +27,22 @@ use crate::hir::def_id::{CrateNum, LOCAL_CRATE};\n use crate::hir::intravisit;\n use crate::hir;\n use crate::lint::builtin::BuiltinLintDiagnostics;\n-use crate::lint::builtin::parser::{ILL_FORMED_ATTRIBUTE_INPUT, META_VARIABLE_MISUSE};\n-use crate::lint::builtin::parser::INCOMPLETE_INCLUDE;\n use crate::session::{Session, DiagnosticMessageId};\n use crate::ty::TyCtxt;\n use crate::ty::query::Providers;\n use crate::util::nodemap::NodeMap;\n use errors::{DiagnosticBuilder, DiagnosticId};\n-use std::{hash, ptr};\n use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnKind, DesugaringKind};\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n-use syntax::edition::Edition;\n-use syntax::symbol::{Symbol, sym};\n+use syntax::symbol::Symbol;\n use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n \n pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         check_crate, check_ast_crate, late_lint_mod, CheckLintNameResult,\n                         BufferedEarlyLint,};\n \n-/// Specification of a single lint.\n-#[derive(Copy, Clone, Debug)]\n-pub struct Lint {\n-    /// A string identifier for the lint.\n-    ///\n-    /// This identifies the lint in attributes and in command-line arguments.\n-    /// In those contexts it is always lowercase, but this field is compared\n-    /// in a way which is case-insensitive for ASCII characters. This allows\n-    /// `declare_lint!()` invocations to follow the convention of upper-case\n-    /// statics without repeating the name.\n-    ///\n-    /// The name is written with underscores, e.g., \"unused_imports\".\n-    /// On the command line, underscores become dashes.\n-    pub name: &'static str,\n-\n-    /// Default level for the lint.\n-    pub default_level: Level,\n-\n-    /// Description of the lint or the issue it detects.\n-    ///\n-    /// e.g., \"imports that are never used\"\n-    pub desc: &'static str,\n-\n-    /// Starting at the given edition, default to the given lint level. If this is `None`, then use\n-    /// `default_level`.\n-    pub edition_lint_opts: Option<(Edition, Level)>,\n-\n-    /// `true` if this lint is reported even inside expansions of external macros.\n-    pub report_in_external_macro: bool,\n-\n-    pub future_incompatible: Option<FutureIncompatibleInfo>,\n-\n-    pub is_plugin: bool,\n-}\n-\n-/// Extra information for a future incompatibility lint.\n-#[derive(Copy, Clone, Debug)]\n-pub struct FutureIncompatibleInfo {\n-    /// e.g., a URL for an issue/PR/RFC or error code\n-    pub reference: &'static str,\n-    /// If this is an edition fixing lint, the edition in which\n-    /// this lint becomes obsolete\n-    pub edition: Option<Edition>,\n-}\n-\n-impl Lint {\n-    pub const fn default_fields_for_macro() -> Self {\n-        Lint {\n-            name: \"\",\n-            default_level: Level::Forbid,\n-            desc: \"\",\n-            edition_lint_opts: None,\n-            is_plugin: false,\n-            report_in_external_macro: false,\n-            future_incompatible: None,\n-        }\n-    }\n-\n-    /// Returns the `rust::lint::Lint` for a `syntax::early_buffered_lints::BufferedEarlyLintId`.\n-    pub fn from_parser_lint_id(lint_id: BufferedEarlyLintId) -> &'static Self {\n-        match lint_id {\n-            BufferedEarlyLintId::IllFormedAttributeInput => ILL_FORMED_ATTRIBUTE_INPUT,\n-            BufferedEarlyLintId::MetaVariableMisuse => META_VARIABLE_MISUSE,\n-            BufferedEarlyLintId::IncompleteInclude => INCOMPLETE_INCLUDE,\n-        }\n-    }\n-\n-    /// Gets the lint's name, with ASCII letters converted to lowercase.\n-    pub fn name_lower(&self) -> String {\n-        self.name.to_ascii_lowercase()\n-    }\n-\n-    pub fn default_level(&self, session: &Session) -> Level {\n-        self.edition_lint_opts\n-            .filter(|(e, _)| *e <= session.edition())\n-            .map(|(_, l)| l)\n-            .unwrap_or(self.default_level)\n-    }\n-}\n-\n-/// Declares a static item of type `&'static Lint`.\n-#[macro_export]\n-macro_rules! declare_lint {\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n-        declare_lint!(\n-            $vis $NAME, $Level, $desc,\n-        );\n-    );\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n-     $(@future_incompatible = $fi:expr;)? $($v:ident),*) => (\n-        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n-            name: stringify!($NAME),\n-            default_level: $crate::lint::$Level,\n-            desc: $desc,\n-            edition_lint_opts: None,\n-            is_plugin: false,\n-            $($v: true,)*\n-            $(future_incompatible: Some($fi),)*\n-            ..$crate::lint::Lint::default_fields_for_macro()\n-        };\n-    );\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n-     $lint_edition: expr => $edition_level: ident\n-    ) => (\n-        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n-            name: stringify!($NAME),\n-            default_level: $crate::lint::$Level,\n-            desc: $desc,\n-            edition_lint_opts: Some(($lint_edition, $crate::lint::Level::$edition_level)),\n-            report_in_external_macro: false,\n-            is_plugin: false,\n-        };\n-    );\n-}\n-\n-#[macro_export]\n-macro_rules! declare_tool_lint {\n-    (\n-        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level: ident, $desc: expr\n-    ) => (\n-        declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, false}\n-    );\n-    (\n-        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n-        report_in_external_macro: $rep:expr\n-    ) => (\n-         declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, $rep}\n-    );\n-    (\n-        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n-        $external:expr\n-    ) => (\n-        $(#[$attr])*\n-        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n-            name: &concat!(stringify!($tool), \"::\", stringify!($NAME)),\n-            default_level: $crate::lint::$Level,\n-            desc: $desc,\n-            edition_lint_opts: None,\n-            report_in_external_macro: $external,\n-            future_incompatible: None,\n-            is_plugin: true,\n-        };\n-    );\n-}\n+pub use rustc_session::lint::{Lint, LintId, Level, FutureIncompatibleInfo};\n \n /// Declares a static `LintArray` and return it as an expression.\n #[macro_export]\n@@ -502,86 +354,6 @@ pub type EarlyLintPassObject = Box<dyn EarlyLintPass + sync::Send + sync::Sync +\n pub type LateLintPassObject = Box<dyn for<'a, 'tcx> LateLintPass<'a, 'tcx> + sync::Send\n                                                                            + sync::Sync + 'static>;\n \n-/// Identifies a lint known to the compiler.\n-#[derive(Clone, Copy, Debug)]\n-pub struct LintId {\n-    // Identity is based on pointer equality of this field.\n-    lint: &'static Lint,\n-}\n-\n-impl PartialEq for LintId {\n-    fn eq(&self, other: &LintId) -> bool {\n-        ptr::eq(self.lint, other.lint)\n-    }\n-}\n-\n-impl Eq for LintId { }\n-\n-impl hash::Hash for LintId {\n-    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n-        let ptr = self.lint as *const Lint;\n-        ptr.hash(state);\n-    }\n-}\n-\n-impl LintId {\n-    /// Gets the `LintId` for a `Lint`.\n-    pub fn of(lint: &'static Lint) -> LintId {\n-        LintId {\n-            lint,\n-        }\n-    }\n-\n-    pub fn lint_name_raw(&self) -> &'static str {\n-        self.lint.name\n-    }\n-\n-    /// Gets the name of the lint.\n-    pub fn to_string(&self) -> String {\n-        self.lint.name_lower()\n-    }\n-}\n-\n-/// Setting for how to handle a lint.\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, HashStable)]\n-pub enum Level {\n-    Allow, Warn, Deny, Forbid,\n-}\n-\n-impl Level {\n-    /// Converts a level to a lower-case string.\n-    pub fn as_str(self) -> &'static str {\n-        match self {\n-            Allow => \"allow\",\n-            Warn => \"warn\",\n-            Deny => \"deny\",\n-            Forbid => \"forbid\",\n-        }\n-    }\n-\n-    /// Converts a lower-case string to a level.\n-    pub fn from_str(x: &str) -> Option<Level> {\n-        match x {\n-            \"allow\" => Some(Allow),\n-            \"warn\" => Some(Warn),\n-            \"deny\" => Some(Deny),\n-            \"forbid\" => Some(Forbid),\n-            _ => None,\n-        }\n-    }\n-\n-    /// Converts a symbol to a level.\n-    pub fn from_symbol(x: Symbol) -> Option<Level> {\n-        match x {\n-            sym::allow => Some(Allow),\n-            sym::warn => Some(Warn),\n-            sym::deny => Some(Deny),\n-            sym::forbid => Some(Forbid),\n-            _ => None,\n-        }\n-    }\n-}\n-\n /// How a lint level was set.\n #[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n pub enum LintSource {"}, {"sha": "324b01316fa4a63216b153ef005240e9e332cc24", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -20,6 +20,7 @@ use rustc_target::spec::Target;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_macros::HashStable;\n \n+pub use rustc_session::utils::NativeLibraryKind;\n pub use self::NativeLibraryKind::*;\n \n // lonely orphan structs and enums looking for a better home\n@@ -94,21 +95,6 @@ pub enum LinkagePreference {\n     RequireStatic,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, HashStable)]\n-pub enum NativeLibraryKind {\n-    /// native static library (.a archive)\n-    NativeStatic,\n-    /// native static library, which doesn't get bundled into .rlibs\n-    NativeStaticNobundle,\n-    /// macOS-specific\n-    NativeFramework,\n-    /// Windows dynamic library without import library.\n-    NativeRawDylib,\n-    /// default way to specify a dynamic library\n-    NativeUnknown,\n-}\n-\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct NativeLibrary {\n     pub kind: NativeLibraryKind,"}, {"sha": "7515d30e469945fa9005812ef86fadddefd6fa71", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -88,15 +88,7 @@ pub fn print_time_passes_entry(do_it: bool, what: &str, dur: Duration) {\n              what);\n }\n \n-// Hack up our own formatting for the duration to make it easier for scripts\n-// to parse (always use the same number of decimal places and the same unit).\n-pub fn duration_to_secs_str(dur: Duration) -> String {\n-    const NANOS_PER_SEC: f64 = 1_000_000_000.0;\n-    let secs = dur.as_secs() as f64 +\n-               dur.subsec_nanos() as f64 / NANOS_PER_SEC;\n-\n-    format!(\"{:.3}\", secs)\n-}\n+pub use rustc_session::utils::duration_to_secs_str;\n \n pub fn to_readable_str(mut val: usize) -> String {\n     let mut groups = vec![];"}, {"sha": "858dd59b26148f57159d59e90ca865b623872122", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -10,7 +10,7 @@ use rustc_codegen_ssa::back::lto::{SerializedModule, LtoModuleCodegen, ThinShare\n use rustc_codegen_ssa::traits::*;\n use errors::{FatalError, Handler};\n use rustc::dep_graph::WorkProduct;\n-use rustc::dep_graph::cgu_reuse_tracker::CguReuse;\n+use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::session::config::{self, Lto};"}, {"sha": "2ff5872370fd10ccbe467b1859b38a672abc89b7", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -43,6 +43,7 @@ extern crate smallvec;\n extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n+extern crate rustc_session;\n \n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, FatLTOInput};"}, {"sha": "53d3c51b5f8c096c17e943c98a429176ff349582", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -32,3 +32,4 @@ rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "283295cadfcc54bd6edc1fe0d0b95af48590d12b", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -10,7 +10,7 @@ use crate::traits::*;\n use rustc_incremental::{copy_cgu_workproducts_to_incr_comp_cache_dir,\n                         in_incr_comp_dir, in_incr_comp_dir_sess};\n use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n-use rustc::dep_graph::cgu_reuse_tracker::CguReuseTracker;\n+use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::session::config::{self, OutputFilenames, OutputType, Passes, Lto,\n                              Sanitizer, SwitchWithOptPath};\n@@ -1752,7 +1752,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n             }\n         };\n \n-        sess.cgu_reuse_tracker.check_expected_reuse(sess);\n+        sess.cgu_reuse_tracker.check_expected_reuse(sess.diagnostic());\n \n         sess.abort_if_errors();\n "}, {"sha": "04e9159ff9116760e2c8623d081b4ae57b21b869", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -25,8 +25,8 @@ use crate::mir::operand::OperandValue;\n use crate::mir::place::PlaceRef;\n use crate::traits::*;\n \n-use rustc::dep_graph::cgu_reuse_tracker::CguReuse;\n use rustc::hir;\n+use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::lang_items::StartFnLangItem;"}, {"sha": "a811c88839d704e5eac6bbbcc2d4f1ed42f867c6", "filename": "src/librustc_data_structures/jobserver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_data_structures%2Fjobserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_data_structures%2Fjobserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fjobserver.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -1,4 +1,4 @@\n-use jobserver_crate::Client;\n+pub use jobserver_crate::Client;\n use lazy_static::lazy_static;\n \n lazy_static! {"}, {"sha": "05945504db237eb81fce0b3e8e0da55a337b7aad", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -828,7 +828,7 @@ Available lint options:\n \n     fn sort_lints(sess: &Session, mut lints: Vec<&'static Lint>) -> Vec<&'static Lint> {\n         // The sort doesn't case-fold but it's doubtful we care.\n-        lints.sort_by_cached_key(|x: &&Lint| (x.default_level(sess), x.name));\n+        lints.sort_by_cached_key(|x: &&Lint| (x.default_level(sess.edition()), x.name));\n         lints\n     }\n "}, {"sha": "8dac7263f4d2c1c2a8f7cb7d690d5773886915b5", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -19,3 +19,4 @@ rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "c2e3fa8f28d2f6449aa4e2b9acebe35ec3356b1b", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -22,7 +22,7 @@\n //! was re-used.\n \n use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::dep_graph::cgu_reuse_tracker::*;\n+use rustc_session::cgu_reuse_tracker::*;\n use rustc::mir::mono::CodegenUnitNameBuilder;\n use rustc::ty::TyCtxt;\n use std::collections::BTreeSet;"}, {"sha": "235184382c5cc18873e5c09f72e86b5cff6bdcc2", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -439,8 +439,7 @@ fn configure_and_expand_inner<'a>(\n     sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n         info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n         for BufferedEarlyLint{id, span, msg, lint_id} in buffered_lints.drain(..) {\n-            let lint = lint::Lint::from_parser_lint_id(lint_id);\n-            resolver.lint_buffer().buffer_lint(lint, id, span, &msg);\n+            resolver.lint_buffer().buffer_lint(lint_id, id, span, &msg);\n         }\n     });\n "}, {"sha": "e834b87896ddf8fcb010634d2198e48e1a94a2cb", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -18,3 +18,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "e60c025c3ef8b2f5671865f3672c53001e95b415", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -21,6 +21,8 @@\n \n #[macro_use]\n extern crate rustc;\n+#[macro_use]\n+extern crate rustc_session;\n \n mod array_into_iter;\n mod nonstandard_style;"}, {"sha": "8601add3f6f9654d68b4591a640ff54794b7e963", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -4,7 +4,7 @@ use errors::{PResult, Applicability};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n use syntax::ast::{self, Attribute, AttrKind, Ident, MacArgs, MetaItem, MetaItemKind};\n use syntax::attr::mk_name_value_item_str;\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::early_buffered_lints::ILL_FORMED_ATTRIBUTE_INPUT;\n use syntax::sess::ParseSess;\n use syntax_pos::{Symbol, sym};\n \n@@ -93,7 +93,7 @@ pub fn check_builtin_attribute(\n             }\n             if should_warn(name) {\n                 sess.buffer_lint(\n-                    BufferedEarlyLintId::IllFormedAttributeInput,\n+                    &ILL_FORMED_ATTRIBUTE_INPUT,\n                     meta.span,\n                     ast::CRATE_NODE_ID,\n                     &msg,"}, {"sha": "dbbb4b92dea3559d6a020b447afef450790365bf", "filename": "src/librustc_session/Cargo.toml", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -0,0 +1,21 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_session\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_session\"\n+path = \"lib.rs\"\n+\n+[dependencies]\n+log = \"0.4\"\n+rustc_errors = { path = \"../librustc_errors\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n+rustc_target = { path = \"../librustc_target\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_index = { path = \"../librustc_index\" }\n+rustc_fs_util = { path = \"../librustc_fs_util\" }\n+num_cpus = \"1.0\""}, {"sha": "193cf01dc74a9e9b36d52f65c5638916cebc5cae", "filename": "src/librustc_session/cgu_reuse_tracker.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -2,10 +2,10 @@\n //! compilation. This is used for incremental compilation tests and debug\n //! output.\n \n-use crate::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use std::sync::{Arc, Mutex};\n use syntax_pos::Span;\n+use log::debug;\n \n #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]\n pub enum CguReuse {\n@@ -94,7 +94,7 @@ impl CguReuseTracker {\n         }\n     }\n \n-    pub fn check_expected_reuse(&self, sess: &Session) {\n+    pub fn check_expected_reuse(&self, diag: &rustc_errors::Handler) {\n         if let Some(ref data) = self.data {\n             let data = data.lock().unwrap();\n \n@@ -120,14 +120,14 @@ impl CguReuseTracker {\n                                           actual_reuse,\n                                           at_least,\n                                           expected_reuse);\n-                        sess.span_err(error_span.0, &msg);\n+                        diag.span_err(error_span.0, &msg);\n                     }\n                 } else {\n                     let msg = format!(\"CGU-reuse for `{}` (mangled: `{}`) was \\\n                                        not recorded\",\n                                        cgu_user_name,\n                                        cgu_name);\n-                    sess.span_fatal(error_span.0, &msg);\n+                    diag.span_fatal(error_span.0, &msg).raise();\n                 }\n             }\n         }", "previous_filename": "src/librustc/dep_graph/cgu_reuse_tracker.rs"}, {"sha": "5baf0c5948f28a5481a25ee1111f52494d9c7349", "filename": "src/librustc_session/code_stats.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fcode_stats.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "previous_filename": "src/librustc/session/code_stats.rs"}, {"sha": "58113bb8cd6cb430a202d7d9c0a3559b4fa8ad1e", "filename": "src/librustc_session/config.rs", "status": "renamed", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -2,24 +2,24 @@\n //! command-line options.\n \n use crate::lint;\n-use crate::middle::cstore;\n-use crate::session::{early_error, early_warn, Session};\n-use crate::session::search_paths::SearchPath;\n+use crate::utils::NativeLibraryKind;\n+use crate::{early_error, early_warn, Session};\n+use crate::search_paths::SearchPath;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_feature::UnstableFeatures;\n+use rustc_data_structures::impl_stable_hash_via_hash;\n \n use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n \n-use syntax;\n-use syntax::ast;\n-use syntax::source_map::{FileName, FilePathMapping};\n-use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n-use syntax::symbol::{sym, Symbol};\n+use syntax_pos::source_map::{FileName, FilePathMapping};\n+use syntax_pos::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n+use syntax_pos::symbol::{sym, Symbol};\n+use rustc_feature::UnstableFeatures;\n+use crate::parse::CrateConfig;\n \n-use errors::emitter::HumanReadableErrorType;\n-use errors::{ColorConfig, FatalError, Handler};\n+use rustc_errors::emitter::HumanReadableErrorType;\n+use rustc_errors::{ColorConfig, FatalError, Handler};\n \n use getopts;\n \n@@ -348,7 +348,7 @@ macro_rules! hash_option {\n     ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [TRACKED]) => ({\n         if $sub_hashes.insert(stringify!($opt_name),\n                               $opt_expr as &dyn dep_tracking::DepTrackingHash).is_some() {\n-            bug!(\"duplicate key in CLI DepTrackingHash: {}\", stringify!($opt_name))\n+            panic!(\"duplicate key in CLI DepTrackingHash: {}\", stringify!($opt_name))\n         }\n     });\n }\n@@ -415,7 +415,7 @@ top_level_options!(\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],\n-        libs: Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> [TRACKED],\n+        libs: Vec<(String, Option<String>, Option<NativeLibraryKind>)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [UNTRACKED],\n \n         target_triple: TargetTriple [TRACKED],\n@@ -701,7 +701,7 @@ pub enum EntryFnType {\n \n impl_stable_hash_via_hash!(EntryFnType);\n \n-#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug, HashStable)]\n+#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]\n pub enum CrateType {\n     Executable,\n     Dylib,\n@@ -711,6 +711,8 @@ pub enum CrateType {\n     ProcMacro,\n }\n \n+impl_stable_hash_via_hash!(CrateType);\n+\n #[derive(Clone, Hash)]\n pub enum Passes {\n     Some(Vec<String>),\n@@ -781,7 +783,7 @@ macro_rules! options {\n                                                                value, $outputname,\n                                                                key, type_desc))\n                         }\n-                        (None, None) => bug!()\n+                        (None, None) => panic!()\n                     }\n                 }\n                 found = true;\n@@ -1535,7 +1537,7 @@ pub const fn default_lib_output() -> CrateType {\n     CrateType::Rlib\n }\n \n-pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n+pub fn default_configuration(sess: &Session) -> CrateConfig {\n     let end = &sess.target.target.target_endian;\n     let arch = &sess.target.target.arch;\n     let wordsz = &sess.target.target.target_pointer_width;\n@@ -1607,13 +1609,13 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n /// Converts the crate `cfg!` configuration from `String` to `Symbol`.\n /// `rustc_interface::interface::Config` accepts this in the compiler configuration,\n /// but the symbol interner is not yet set up then, so we must convert it later.\n-pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> ast::CrateConfig {\n+pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> CrateConfig {\n     cfg.into_iter()\n        .map(|(a, b)| (Symbol::intern(&a), b.map(|b| Symbol::intern(&b))))\n        .collect()\n }\n \n-pub fn build_configuration(sess: &Session, mut user_cfg: ast::CrateConfig) -> ast::CrateConfig {\n+pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateConfig {\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items.\n     let default_cfg = default_configuration(sess);\n@@ -2379,7 +2381,7 @@ fn select_debuginfo(\n fn parse_libs(\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n-) -> Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> {\n+) -> Vec<(String, Option<String>, Option<NativeLibraryKind>)> {\n     matches\n         .opt_strs(\"l\")\n         .into_iter()\n@@ -2390,10 +2392,12 @@ fn parse_libs(\n             let kind = parts.next().unwrap();\n             let (name, kind) = match (parts.next(), kind) {\n                 (None, name) => (name, None),\n-                (Some(name), \"dylib\") => (name, Some(cstore::NativeUnknown)),\n-                (Some(name), \"framework\") => (name, Some(cstore::NativeFramework)),\n-                (Some(name), \"static\") => (name, Some(cstore::NativeStatic)),\n-                (Some(name), \"static-nobundle\") => (name, Some(cstore::NativeStaticNobundle)),\n+                (Some(name), \"dylib\") => (name, Some(NativeLibraryKind::NativeUnknown)),\n+                (Some(name), \"framework\") => (name, Some(NativeLibraryKind::NativeFramework)),\n+                (Some(name), \"static\") => (name, Some(NativeLibraryKind::NativeStatic)),\n+                (Some(name), \"static-nobundle\") => {\n+                    (name, Some(NativeLibraryKind::NativeStaticNobundle))\n+                }\n                 (_, s) => {\n                     early_error(\n                         error_format,\n@@ -2405,7 +2409,8 @@ fn parse_libs(\n                     );\n                 }\n             };\n-            if kind == Some(cstore::NativeStaticNobundle) && !nightly_options::is_nightly_build() {\n+            if kind == Some(NativeLibraryKind::NativeStaticNobundle) &&\n+                !nightly_options::is_nightly_build() {\n                 early_error(\n                     error_format,\n                     &format!(\n@@ -2716,7 +2721,7 @@ pub mod nightly_options {\n     use getopts;\n     use rustc_feature::UnstableFeatures;\n     use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n-    use crate::session::early_error;\n+    use crate::early_error;\n \n     pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {\n         is_nightly_build()\n@@ -2855,17 +2860,17 @@ impl PpMode {\n /// how the hash should be calculated when adding a new command-line argument.\n mod dep_tracking {\n     use crate::lint;\n-    use crate::middle::cstore;\n+    use crate::utils::NativeLibraryKind;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n                 Passes, Sanitizer, LtoCli, LinkerPluginLto, SwitchWithOptPath,\n                 SymbolManglingVersion};\n-    use rustc_feature::UnstableFeatures;\n     use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n-    use syntax::edition::Edition;\n+    use syntax_pos::edition::Edition;\n+    use rustc_feature::UnstableFeatures;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);\n@@ -2913,7 +2918,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n-    impl_dep_tracking_hash_via_hash!(Option<cstore::NativeLibraryKind>);\n+    impl_dep_tracking_hash_via_hash!(Option<NativeLibraryKind>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n     impl_dep_tracking_hash_via_hash!(MergeFunctions);\n     impl_dep_tracking_hash_via_hash!(PanicStrategy);\n@@ -2924,7 +2929,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(DebugInfo);\n     impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n     impl_dep_tracking_hash_via_hash!(OutputTypes);\n-    impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n+    impl_dep_tracking_hash_via_hash!(NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n@@ -2940,7 +2945,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!((\n         String,\n         Option<String>,\n-        Option<cstore::NativeLibraryKind>\n+        Option<NativeLibraryKind>\n     ));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n     impl_dep_tracking_hash_for_sortable_vec_of!(Sanitizer);", "previous_filename": "src/librustc/session/config.rs"}, {"sha": "a0bdc6a3254a151b07aaa27e48b7bd182497fd2c", "filename": "src/librustc_session/filesearch.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Ffilesearch.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -7,8 +7,9 @@ use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n-use crate::session::search_paths::{SearchPath, PathKind};\n+use crate::search_paths::{SearchPath, PathKind};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n+use log::debug;\n \n #[derive(Copy, Clone)]\n pub enum FileMatch {\n@@ -124,7 +125,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n                 // gcc chokes on verbatim paths which fs::canonicalize generates\n                 // so we try to avoid those kinds of paths.\n                 Ok(canon) => Some(fix_windows_verbatim_for_gcc(&canon)),\n-                Err(e) => bug!(\"failed to get realpath: {}\", e),\n+                Err(e) => panic!(\"failed to get realpath: {}\", e),\n             }\n         })\n     }\n@@ -133,7 +134,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n         Ok(exe) => {\n             match canonicalize(Some(exe)) {\n                 Some(mut p) => { p.pop(); p.pop(); p },\n-                None => bug!(\"can't determine value for sysroot\")\n+                None => panic!(\"can't determine value for sysroot\")\n             }\n         }\n         Err(ref e) => panic!(format!(\"failed to get current_exe: {}\", e))", "previous_filename": "src/librustc/session/filesearch.rs"}, {"sha": "9d7c23100a0fe518fe579172af24276cdee6ae69", "filename": "src/librustc_session/lib.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -0,0 +1,21 @@\n+#![feature(test)]\n+\n+// Use the test crate here so we depend on getopts through it. This allow tools to link to both\n+// librustc_session and libtest.\n+extern crate test as _;\n+extern crate getopts;\n+\n+pub mod cgu_reuse_tracker;\n+pub mod utils;\n+#[macro_use]\n+pub mod lint;\n+pub mod node_id;\n+pub mod parse;\n+\n+mod code_stats;\n+pub mod config;\n+pub mod filesearch;\n+pub mod search_paths;\n+\n+mod session;\n+pub use session::*;"}, {"sha": "faa6a7a4644e06e26cd60332ef2f749cc99c4cc1", "filename": "src/librustc_session/lint.rs", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -0,0 +1,254 @@\n+use syntax_pos::{MultiSpan, Symbol, sym};\n+use syntax_pos::edition::Edition;\n+use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n+pub use self::Level::*;\n+use crate::node_id::NodeId;\n+\n+/// Setting for how to handle a lint.\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+pub enum Level {\n+    Allow, Warn, Deny, Forbid,\n+}\n+\n+rustc_data_structures::impl_stable_hash_via_hash!(Level);\n+\n+impl Level {\n+    /// Converts a level to a lower-case string.\n+    pub fn as_str(self) -> &'static str {\n+        match self {\n+            Level::Allow => \"allow\",\n+            Level::Warn => \"warn\",\n+            Level::Deny => \"deny\",\n+            Level::Forbid => \"forbid\",\n+        }\n+    }\n+\n+    /// Converts a lower-case string to a level.\n+    pub fn from_str(x: &str) -> Option<Level> {\n+        match x {\n+            \"allow\" => Some(Level::Allow),\n+            \"warn\" => Some(Level::Warn),\n+            \"deny\" => Some(Level::Deny),\n+            \"forbid\" => Some(Level::Forbid),\n+            _ => None,\n+        }\n+    }\n+\n+    /// Converts a symbol to a level.\n+    pub fn from_symbol(x: Symbol) -> Option<Level> {\n+        match x {\n+            sym::allow => Some(Level::Allow),\n+            sym::warn => Some(Level::Warn),\n+            sym::deny => Some(Level::Deny),\n+            sym::forbid => Some(Level::Forbid),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+/// Specification of a single lint.\n+#[derive(Copy, Clone, Debug)]\n+pub struct Lint {\n+    /// A string identifier for the lint.\n+    ///\n+    /// This identifies the lint in attributes and in command-line arguments.\n+    /// In those contexts it is always lowercase, but this field is compared\n+    /// in a way which is case-insensitive for ASCII characters. This allows\n+    /// `declare_lint!()` invocations to follow the convention of upper-case\n+    /// statics without repeating the name.\n+    ///\n+    /// The name is written with underscores, e.g., \"unused_imports\".\n+    /// On the command line, underscores become dashes.\n+    pub name: &'static str,\n+\n+    /// Default level for the lint.\n+    pub default_level: Level,\n+\n+    /// Description of the lint or the issue it detects.\n+    ///\n+    /// e.g., \"imports that are never used\"\n+    pub desc: &'static str,\n+\n+    /// Starting at the given edition, default to the given lint level. If this is `None`, then use\n+    /// `default_level`.\n+    pub edition_lint_opts: Option<(Edition, Level)>,\n+\n+    /// `true` if this lint is reported even inside expansions of external macros.\n+    pub report_in_external_macro: bool,\n+\n+    pub future_incompatible: Option<FutureIncompatibleInfo>,\n+\n+    pub is_plugin: bool,\n+}\n+\n+/// Extra information for a future incompatibility lint.\n+#[derive(Copy, Clone, Debug)]\n+pub struct FutureIncompatibleInfo {\n+    /// e.g., a URL for an issue/PR/RFC or error code\n+    pub reference: &'static str,\n+    /// If this is an edition fixing lint, the edition in which\n+    /// this lint becomes obsolete\n+    pub edition: Option<Edition>,\n+}\n+\n+impl Lint {\n+    pub const fn default_fields_for_macro() -> Self {\n+        Lint {\n+            name: \"\",\n+            default_level: Level::Forbid,\n+            desc: \"\",\n+            edition_lint_opts: None,\n+            is_plugin: false,\n+            report_in_external_macro: false,\n+            future_incompatible: None,\n+        }\n+    }\n+\n+    /// Gets the lint's name, with ASCII letters converted to lowercase.\n+    pub fn name_lower(&self) -> String {\n+        self.name.to_ascii_lowercase()\n+    }\n+\n+    pub fn default_level(&self, edition: Edition) -> Level {\n+        self.edition_lint_opts\n+            .filter(|(e, _)| *e <= edition)\n+            .map(|(_, l)| l)\n+            .unwrap_or(self.default_level)\n+    }\n+}\n+\n+/// Identifies a lint known to the compiler.\n+#[derive(Clone, Copy, Debug)]\n+pub struct LintId {\n+    // Identity is based on pointer equality of this field.\n+    pub lint: &'static Lint,\n+}\n+\n+impl PartialEq for LintId {\n+    fn eq(&self, other: &LintId) -> bool {\n+        std::ptr::eq(self.lint, other.lint)\n+    }\n+}\n+\n+impl Eq for LintId { }\n+\n+impl std::hash::Hash for LintId {\n+    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n+        let ptr = self.lint as *const Lint;\n+        ptr.hash(state);\n+    }\n+}\n+\n+impl LintId {\n+    /// Gets the `LintId` for a `Lint`.\n+    pub fn of(lint: &'static Lint) -> LintId {\n+        LintId {\n+            lint,\n+        }\n+    }\n+\n+    pub fn lint_name_raw(&self) -> &'static str {\n+        self.lint.name\n+    }\n+\n+    /// Gets the name of the lint.\n+    pub fn to_string(&self) -> String {\n+        self.lint.name_lower()\n+    }\n+}\n+\n+impl<HCX> HashStable<HCX> for LintId {\n+    #[inline]\n+    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n+        self.lint_name_raw().hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<HCX> ToStableHashKey<HCX> for LintId {\n+    type KeyType = &'static str;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &HCX) -> &'static str {\n+        self.lint_name_raw()\n+    }\n+}\n+\n+/// Stores buffered lint info which can later be passed to `librustc`.\n+pub struct BufferedEarlyLint {\n+    /// The span of code that we are linting on.\n+   pub span: MultiSpan,\n+\n+   /// The lint message.\n+   pub msg: String,\n+\n+   /// The `NodeId` of the AST node that generated the lint.\n+   pub id: NodeId,\n+\n+   /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n+   pub lint_id: &'static Lint,\n+}\n+\n+/// Declares a static item of type `&'static Lint`.\n+#[macro_export]\n+macro_rules! declare_lint {\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n+        $crate::declare_lint!(\n+            $vis $NAME, $Level, $desc,\n+        );\n+    );\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n+     $(@future_incompatible = $fi:expr;)? $($v:ident),*) => (\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: stringify!($NAME),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            edition_lint_opts: None,\n+            is_plugin: false,\n+            $($v: true,)*\n+            $(future_incompatible: Some($fi),)*\n+            ..$crate::lint::Lint::default_fields_for_macro()\n+        };\n+    );\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n+     $lint_edition: expr => $edition_level: ident\n+    ) => (\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: stringify!($NAME),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            edition_lint_opts: Some(($lint_edition, $crate::lint::Level::$edition_level)),\n+            report_in_external_macro: false,\n+            is_plugin: false,\n+        };\n+    );\n+}\n+\n+#[macro_export]\n+macro_rules! declare_tool_lint {\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level: ident, $desc: expr\n+    ) => (\n+        $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, false}\n+    );\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n+        report_in_external_macro: $rep:expr\n+    ) => (\n+         $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, $rep}\n+    );\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n+        $external:expr\n+    ) => (\n+        $(#[$attr])*\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: &concat!(stringify!($tool), \"::\", stringify!($NAME)),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            edition_lint_opts: None,\n+            report_in_external_macro: $external,\n+            future_incompatible: None,\n+            is_plugin: true,\n+        };\n+    );\n+}"}, {"sha": "7b14db20b95b1b9059686561cb561d3a41063032", "filename": "src/librustc_session/node_id.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fnode_id.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -0,0 +1,39 @@\n+use std::fmt;\n+use rustc_index::vec::Idx;\n+use rustc_serialize::{Encoder, Decoder};\n+use syntax_pos::ExpnId;\n+\n+rustc_index::newtype_index! {\n+    pub struct NodeId {\n+        ENCODABLE = custom\n+        DEBUG_FORMAT = \"NodeId({})\"\n+    }\n+}\n+\n+impl NodeId {\n+    pub fn placeholder_from_expn_id(expn_id: ExpnId) -> Self {\n+        NodeId::from_u32(expn_id.as_u32())\n+    }\n+\n+    pub fn placeholder_to_expn_id(self) -> ExpnId {\n+        ExpnId::from_u32(self.as_u32())\n+    }\n+}\n+\n+impl fmt::Display for NodeId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(&self.as_u32(), f)\n+    }\n+}\n+\n+impl rustc_serialize::UseSpecializedEncodable for NodeId {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_u32(self.as_u32())\n+    }\n+}\n+\n+impl rustc_serialize::UseSpecializedDecodable for NodeId {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n+        d.read_u32().map(NodeId::from_u32)\n+    }\n+}"}, {"sha": "09442f29b7a8a704c9d33cda0d1f055096728486", "filename": "src/librustc_session/parse.rs", "status": "renamed", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -1,10 +1,10 @@\n //! Contains `ParseSess` which holds state living beyond what one `Parser` might.\n //! It also serves as an input to the parser itself.\n \n-use crate::ast::{CrateConfig, NodeId};\n-use crate::early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n+use crate::node_id::NodeId;\n+use crate::lint::BufferedEarlyLint;\n \n-use errors::{Applicability, emitter::SilentEmitter, Handler, ColorConfig, DiagnosticBuilder};\n+use rustc_errors::{Applicability, emitter::SilentEmitter, Handler, ColorConfig, DiagnosticBuilder};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock, Once};\n use rustc_feature::UnstableFeatures;\n@@ -16,6 +16,10 @@ use syntax_pos::source_map::{SourceMap, FilePathMapping};\n use std::path::PathBuf;\n use std::str;\n \n+/// The set of keys (and, optionally, values) that define the compilation\n+/// environment of the crate, used to drive conditional compilation.\n+pub type CrateConfig = FxHashSet<(Symbol, Option<Symbol>)>;\n+\n /// Collected spans during parsing for places where a certain feature was\n /// used and should be feature gated accordingly in `check_crate`.\n #[derive(Default)]\n@@ -137,7 +141,7 @@ impl ParseSess {\n \n     pub fn buffer_lint(\n         &self,\n-        lint_id: BufferedEarlyLintId,\n+        lint_id: &'static crate::lint::Lint,\n         span: impl Into<MultiSpan>,\n         id: NodeId,\n         msg: &str,", "previous_filename": "src/libsyntax/sess.rs"}, {"sha": "b9f2ae7618b91d93a0987e965d824def732a57e3", "filename": "src/librustc_session/search_paths.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsearch_paths.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -1,6 +1,6 @@\n use std::path::{Path, PathBuf};\n-use crate::session::{early_error, config};\n-use crate::session::filesearch::make_target_lib_path;\n+use crate::{early_error, config};\n+use crate::filesearch::make_target_lib_path;\n \n #[derive(Clone, Debug)]\n pub struct SearchPath {\n@@ -9,7 +9,7 @@ pub struct SearchPath {\n     pub files: Vec<PathBuf>,\n }\n \n-#[derive(PartialEq, Clone, Copy, Debug, HashStable)]\n+#[derive(PartialEq, Clone, Copy, Debug, Hash, Eq)]\n pub enum PathKind {\n     Native,\n     Crate,\n@@ -19,6 +19,8 @@ pub enum PathKind {\n     All,\n }\n \n+rustc_data_structures::impl_stable_hash_via_hash!(PathKind);\n+\n impl PathKind {\n     pub fn matches(&self, kind: PathKind) -> bool {\n         match (self, kind) {", "previous_filename": "src/librustc/session/search_paths.rs"}, {"sha": "9369c1771a35ed10c6c90caa5e5db0e3c7043ed8", "filename": "src/librustc_session/session.rs", "status": "renamed", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -1,36 +1,38 @@\n-pub use self::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n-use self::code_stats::CodeStats;\n+pub use crate::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n+use crate::code_stats::CodeStats;\n \n-use crate::dep_graph::cgu_reuse_tracker::CguReuseTracker;\n+use crate::cgu_reuse_tracker::CguReuseTracker;\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use crate::lint;\n-use crate::session::config::{OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n-use crate::session::search_paths::{PathKind, SearchPath};\n-use crate::util::nodemap::{FxHashMap, FxHashSet};\n-use crate::util::common::{duration_to_secs_str, ErrorReported};\n+use crate::filesearch;\n+use crate::config::{self, OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n+use crate::search_paths::{PathKind, SearchPath};\n+use crate::utils::duration_to_secs_str;\n+use rustc_errors::ErrorReported;\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{\n     self, Lrc, Lock, OneThread, Once, AtomicU64, AtomicUsize, Ordering,\n     Ordering::SeqCst,\n };\n-\n-use errors::{DiagnosticBuilder, DiagnosticId, Applicability};\n-use errors::emitter::{Emitter, EmitterWriter};\n-use errors::emitter::HumanReadableErrorType;\n-use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n-use syntax::edition::Edition;\n-use errors::json::JsonEmitter;\n-use syntax::source_map;\n-use syntax::sess::ParseSess;\n+use rustc_data_structures::impl_stable_hash_via_hash;\n+\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, Applicability};\n+use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::emitter::HumanReadableErrorType;\n+use rustc_errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n+use syntax_pos::edition::Edition;\n+use rustc_errors::json::JsonEmitter;\n+use syntax_pos::source_map;\n+use crate::parse::ParseSess;\n use syntax_pos::{MultiSpan, Span};\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n use rustc_data_structures::flock;\n-use rustc_data_structures::jobserver;\n+use rustc_data_structures::jobserver::{self, Client};\n use rustc_data_structures::profiling::{SelfProfiler, SelfProfilerRef};\n-use ::jobserver::Client;\n \n use std;\n use std::cell::{self, RefCell};\n@@ -42,11 +44,6 @@ use std::path::PathBuf;\n use std::time::Duration;\n use std::sync::Arc;\n \n-mod code_stats;\n-pub mod config;\n-pub mod filesearch;\n-pub mod search_paths;\n-\n pub struct OptimizationFuel {\n     /// If `-zfuel=crate=n` is specified, initially set to `n`, otherwise `0`.\n     remaining: u64,\n@@ -335,7 +332,7 @@ impl Session {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n \n-    pub fn diagnostic(&self) -> &errors::Handler {\n+    pub fn diagnostic(&self) -> &rustc_errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n \n@@ -680,7 +677,7 @@ impl Session {\n \n         if let IncrCompSession::NotInitialized = *incr_comp_session {\n         } else {\n-            bug!(\n+            panic!(\n                 \"Trying to initialize IncrCompSession `{:?}`\",\n                 *incr_comp_session\n             )\n@@ -698,7 +695,7 @@ impl Session {\n \n         if let IncrCompSession::Active { .. } = *incr_comp_session {\n         } else {\n-            bug!(\n+            panic!(\n                 \"trying to finalize `IncrCompSession` `{:?}`\",\n                 *incr_comp_session\n             );\n@@ -719,7 +716,7 @@ impl Session {\n                 ..\n             } => session_directory.clone(),\n             IncrCompSession::InvalidBecauseOfErrors { .. } => return,\n-            _ => bug!(\n+            _ => panic!(\n                 \"trying to invalidate `IncrCompSession` `{:?}`\",\n                 *incr_comp_session\n             ),\n@@ -736,7 +733,7 @@ impl Session {\n         cell::Ref::map(\n             incr_comp_session,\n             |incr_comp_session| match *incr_comp_session {\n-                IncrCompSession::NotInitialized => bug!(\n+                IncrCompSession::NotInitialized => panic!(\n                     \"trying to get session directory from `IncrCompSession`: {:?}\",\n                     *incr_comp_session,\n                 ),\n@@ -916,7 +913,7 @@ impl Session {\n pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n-    registry: errors::registry::Registry,\n+    registry: rustc_errors::registry::Registry,\n ) -> Session {\n     let file_path_mapping = sopts.file_path_mapping();\n \n@@ -932,7 +929,7 @@ pub fn build_session(\n \n fn default_emitter(\n     sopts: &config::Options,\n-    registry: errors::registry::Registry,\n+    registry: rustc_errors::registry::Registry,\n     source_map: &Lrc<source_map::SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n@@ -1001,7 +998,7 @@ pub enum DiagnosticOutput {\n pub fn build_session_with_source_map(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n-    registry: errors::registry::Registry,\n+    registry: rustc_errors::registry::Registry,\n     source_map: Lrc<source_map::SourceMap>,\n     diagnostics_output: DiagnosticOutput,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n@@ -1032,9 +1029,9 @@ pub fn build_session_with_source_map(\n     };\n     let emitter = default_emitter(&sopts, registry, &source_map, write_dest);\n \n-    let diagnostic_handler = errors::Handler::with_emitter_and_flags(\n+    let diagnostic_handler = rustc_errors::Handler::with_emitter_and_flags(\n         emitter,\n-        errors::HandlerFlags {\n+        rustc_errors::HandlerFlags {\n             can_emit_warnings,\n             treat_err_as_bug,\n             report_delayed_bugs,\n@@ -1056,7 +1053,7 @@ pub fn build_session_with_source_map(\n fn build_session_(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n-    span_diagnostic: errors::Handler,\n+    span_diagnostic: rustc_errors::Handler,\n     source_map: Lrc<source_map::SourceMap>,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n ) -> Session {\n@@ -1281,9 +1278,9 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n             Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n-    let handler = errors::Handler::with_emitter(true, None, emitter);\n+    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n     handler.struct_fatal(msg).emit();\n-    errors::FatalError.raise();\n+    rustc_errors::FatalError.raise();\n }\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n@@ -1295,7 +1292,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n             Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n-    let handler = errors::Handler::with_emitter(true, None, emitter);\n+    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n     handler.struct_warn(msg).emit();\n }\n ", "previous_filename": "src/librustc/session/mod.rs"}, {"sha": "ad593398a52bae2638f4b6f7566256edc95e3f74", "filename": "src/librustc_session/utils.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibrustc_session%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Futils.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -0,0 +1,25 @@\n+// Hack up our own formatting for the duration to make it easier for scripts\n+// to parse (always use the same number of decimal places and the same unit).\n+pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n+    const NANOS_PER_SEC: f64 = 1_000_000_000.0;\n+    let secs = dur.as_secs() as f64 +\n+               dur.subsec_nanos() as f64 / NANOS_PER_SEC;\n+\n+    format!(\"{:.3}\", secs)\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+pub enum NativeLibraryKind {\n+    /// native static library (.a archive)\n+    NativeStatic,\n+    /// native static library, which doesn't get bundled into .rlibs\n+    NativeStaticNobundle,\n+    /// macOS-specific\n+    NativeFramework,\n+    /// Windows dynamic library without import library.\n+    NativeRawDylib,\n+    /// default way to specify a dynamic library\n+    NativeUnknown,\n+}\n+\n+rustc_data_structures::impl_stable_hash_via_hash!(NativeLibraryKind);"}, {"sha": "8a00bcbfe17c78016278ae061a747d1a441fc85a", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -24,3 +24,4 @@ rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "75ddf10514d97e3a8700f314e2ae8456574372d4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -30,9 +30,8 @@ use crate::token::{self, DelimToken};\n use crate::tokenstream::{TokenStream, TokenTree, DelimSpan};\n \n use syntax_pos::symbol::{kw, sym, Symbol};\n-use syntax_pos::{Span, DUMMY_SP, ExpnId};\n+use syntax_pos::{Span, DUMMY_SP};\n \n-use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::thin_vec::ThinVec;\n@@ -268,46 +267,7 @@ impl ParenthesizedArgs {\n     }\n }\n \n-// hack to ensure that we don't try to access the private parts of `NodeId` in this module\n-mod node_id_inner {\n-    use rustc_index::vec::Idx;\n-    rustc_index::newtype_index! {\n-        pub struct NodeId {\n-            ENCODABLE = custom\n-            DEBUG_FORMAT = \"NodeId({})\"\n-        }\n-    }\n-}\n-\n-pub use node_id_inner::NodeId;\n-\n-impl NodeId {\n-    pub fn placeholder_from_expn_id(expn_id: ExpnId) -> Self {\n-        NodeId::from_u32(expn_id.as_u32())\n-    }\n-\n-    pub fn placeholder_to_expn_id(self) -> ExpnId {\n-        ExpnId::from_u32(self.as_u32())\n-    }\n-}\n-\n-impl fmt::Display for NodeId {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&self.as_u32(), f)\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedEncodable for NodeId {\n-    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u32(self.as_u32())\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedDecodable for NodeId {\n-    fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n-        d.read_u32().map(NodeId::from_u32)\n-    }\n-}\n+pub use rustc_session::node_id::NodeId;\n \n /// `NodeId` used to represent the root of the crate.\n pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n@@ -470,9 +430,7 @@ pub struct WhereEqPredicate {\n     pub rhs_ty: P<Ty>,\n }\n \n-/// The set of `MetaItem`s that define the compilation environment of the crate,\n-/// used to drive conditional compilation.\n-pub type CrateConfig = FxHashSet<(Name, Option<Symbol>)>;\n+pub use rustc_session::parse::CrateConfig;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {"}, {"sha": "2c32894a23b06a16a4c6c1673de3198be7d36306", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -3,28 +3,28 @@\n //! Since we cannot have a dependency on `librustc`, we implement some types here that are somewhat\n //! redundant. Later, these types can be converted to types for use by the rest of the compiler.\n \n-use crate::ast::NodeId;\n-use syntax_pos::MultiSpan;\n+use rustc_session::lint::FutureIncompatibleInfo;\n+use rustc_session::declare_lint;\n+pub use rustc_session::lint::BufferedEarlyLint;\n \n-/// Since we cannot import `LintId`s from `rustc::lint`, we define some Ids here which can later be\n-/// passed to `rustc::lint::Lint::from_parser_lint_id` to get a `rustc::lint::Lint`.\n-pub enum BufferedEarlyLintId {\n-    IllFormedAttributeInput,\n-    MetaVariableMisuse,\n-    IncompleteInclude,\n+declare_lint! {\n+    pub ILL_FORMED_ATTRIBUTE_INPUT,\n+    Deny,\n+    \"ill-formed attribute inputs that were previously accepted and used in practice\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n+        edition: None,\n+    };\n }\n \n-/// Stores buffered lint info which can later be passed to `librustc`.\n-pub struct BufferedEarlyLint {\n-    /// The span of code that we are linting on.\n-   pub span: MultiSpan,\n-\n-   /// The lint message.\n-   pub msg: String,\n-\n-   /// The `NodeId` of the AST node that generated the lint.\n-   pub id: NodeId,\n+declare_lint! {\n+    pub META_VARIABLE_MISUSE,\n+    Allow,\n+    \"possible meta-variable misuse at macro definition\"\n+}\n \n-   /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n-   pub lint_id: BufferedEarlyLintId,\n+declare_lint! {\n+    pub INCOMPLETE_INCLUDE,\n+    Deny,\n+    \"trailing content in included file\"\n }"}, {"sha": "a94742634cf17919e7f3378f391284896ef0f17f", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -102,7 +102,7 @@ pub mod ptr;\n pub mod show_span;\n pub use syntax_pos::edition;\n pub use syntax_pos::symbol;\n-pub mod sess;\n+pub use rustc_session::parse as sess;\n pub mod token;\n pub mod tokenstream;\n pub mod visit;"}, {"sha": "a4449ca5b1d22dfab1052f83f612259d56601a62", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -924,7 +924,6 @@ impl<'a> ExtCtxt<'a> {\n     }\n     pub fn source_map(&self) -> &'a SourceMap { self.parse_sess.source_map() }\n     pub fn parse_sess(&self) -> &'a ParseSess { self.parse_sess }\n-    pub fn cfg(&self) -> &ast::CrateConfig { &self.parse_sess.config }\n     pub fn call_site(&self) -> Span {\n         self.current_expansion.id.expn_data().call_site\n     }"}, {"sha": "dfc8d699dbe8d0c00c64aad0d4c7c3f6e5e92e03", "filename": "src/libsyntax_expand/mbe/macro_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -107,7 +107,7 @@\n use crate::mbe::{KleeneToken, TokenTree};\n \n use syntax::ast::NodeId;\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::early_buffered_lints::META_VARIABLE_MISUSE;\n use syntax::token::{DelimToken, Token, TokenKind};\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym};\n@@ -623,5 +623,5 @@ fn ops_is_prefix(\n }\n \n fn buffer_lint(sess: &ParseSess, span: MultiSpan, node_id: NodeId, message: &str) {\n-    sess.buffer_lint(BufferedEarlyLintId::MetaVariableMisuse, span, node_id, message);\n+    sess.buffer_lint(&META_VARIABLE_MISUSE, span, node_id, message);\n }"}, {"sha": "4aab68d7c0e8d8c2115fc7663591adc973c5e93a", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -5,7 +5,7 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::early_buffered_lints::INCOMPLETE_INCLUDE;\n use syntax_expand::panictry;\n use syntax_expand::base::{self, *};\n \n@@ -101,7 +101,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n             let r = panictry!(self.p.parse_expr());\n             if self.p.token != token::Eof {\n                 self.p.sess.buffer_lint(\n-                    BufferedEarlyLintId::IncompleteInclude,\n+                    &INCOMPLETE_INCLUDE,\n                     self.p.token.span,\n                     ast::CRATE_NODE_ID,\n                     \"include macro expected single expression in source\","}, {"sha": "e9ef58f29a8f57837539bacb0a13b54854dc8d0e", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -1,8 +1,8 @@\n #![feature(box_syntax, plugin, plugin_registrar, rustc_private)]\n #![crate_type = \"dylib\"]\n \n-#[macro_use]\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n extern crate syntax;\n "}, {"sha": "118ba1711191b3f086b9fe5dc73efb62c9d92ba4", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -2,8 +2,8 @@\n \n #![feature(plugin_registrar, rustc_private)]\n #![feature(box_syntax)]\n-\n #[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n extern crate syntax;\n "}, {"sha": "49ca43d471ba932b24a50b7673c190a9397c7aa9", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -4,6 +4,7 @@\n #![feature(box_syntax)]\n \n #[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n extern crate syntax;\n "}, {"sha": "839c65a6107556af69d37f45bec30c96ba7da701", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -4,8 +4,8 @@\n #![feature(box_syntax, rustc_private)]\n \n // Load rustc as a plugin to get macros.\n-#[macro_use]\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n \n use rustc::hir;"}, {"sha": "bb96dba21fc2ee6c92594c5601f5be1ec4da8515", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -6,8 +6,8 @@\n extern crate syntax;\n \n // Load rustc as a plugin to get macros\n-#[macro_use]\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n \n use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass, LintArray};"}, {"sha": "170490981379794306608a1f633e6b62db4a6511", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -4,8 +4,8 @@\n extern crate syntax;\n \n // Load rustc as a plugin to get macros\n-#[macro_use]\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n \n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass, LintId};"}, {"sha": "7ce2a1dd9a62dfe780d8d69d15c0b5733fe8459e", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -4,9 +4,11 @@\n #![deny(rustc::lint_pass_impl_without_macro)]\n \n extern crate rustc;\n+extern crate rustc_session;\n \n use rustc::lint::{LintArray, LintPass};\n-use rustc::{declare_lint, declare_lint_pass, impl_lint_pass};\n+use rustc::{declare_lint_pass, impl_lint_pass};\n+use rustc_session::declare_lint;\n \n declare_lint! {\n     pub TEST_LINT,"}, {"sha": "ad8670c6c83c8b92bbec2074738abbad9e608608", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6602d2dd1835cf81bd0ec2989df097ea5721b28/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=b6602d2dd1835cf81bd0ec2989df097ea5721b28", "patch": "@@ -1,5 +1,5 @@\n error: implementing `LintPass` by hand\n-  --> $DIR/lint_pass_impl_without_macro.rs:19:6\n+  --> $DIR/lint_pass_impl_without_macro.rs:21:6\n    |\n LL | impl LintPass for Foo {\n    |      ^^^^^^^^\n@@ -12,7 +12,7 @@ LL | #![deny(rustc::lint_pass_impl_without_macro)]\n    = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n error: implementing `LintPass` by hand\n-  --> $DIR/lint_pass_impl_without_macro.rs:29:14\n+  --> $DIR/lint_pass_impl_without_macro.rs:31:14\n    |\n LL |         impl LintPass for Custom {\n    |              ^^^^^^^^"}]}