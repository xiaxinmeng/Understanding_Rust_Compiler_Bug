{"sha": "4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmM2YyMDIwZWRiY2U4ZDliY2I2MThkMTFmOGY3ZmM1ZWI4ZGZmNzY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-30T16:09:52Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-01T09:47:41Z"}, "message": "add the `log` crate + `env_logger` to be able to choose the log granularity at runtime", "tree": {"sha": "8794a7d2cde9c05da35f7fec30f49f5874ef42bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8794a7d2cde9c05da35f7fec30f49f5874ef42bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXTq9KAAoJEFbW7qD8Z6xGM9IP/R41TdKEcaYYYS1oGez/vP6d\nEAlba7tWrgGh0qrcKjFaRTtBDp/YaQxy0FFgKFwpZMAS6kER8viWRJH+IvCeOcE9\nSp66K3cXITl/hwLj6GDqIhgBK+xv7QBOF0REGiIN53SsViPpevPbEO8BRW8V+zke\nUxjDtAEAviZ6ssSikQoEfDGqbzVJ5/pXpkWgXqz5/nDtFWmq9bkqqmoCvbgV1HGf\nBnQfkAkHr7n4ChEPFPr77XkkDhqSwQIZPDutXvLBPFburhk8poFuoSdKDPOTGb0W\nMi0IZne84OxMp0O9AeGwyIJo+mgtj0B/Xrd4ewPyrxRroYpTz1EOF6olw6kFnkX+\nUtVebUDQkglWJKDqaKRtuvg3AhG0mwNvXBYibQZG68sWr/9jVtMJ4LYSUrB2pgAw\nQnxE+T2arZUmDpgTMFIv2uvOc7BKw/DQgijxkMm5E3EWYUuFW4E3OdWT0bXfIWzR\nbauItAD0dBkyHS+RN7iU94xUh615EIsms1jLl7oMZyMVkpDi9i2NeG+tDhlbtOl1\nsAODXDQShI99ogGoHaJA3XThZMyw1T/4typVhWg2bKue09vLeGSEbGaQzhOBAu/W\nq+mi6ex77Lp8tbt1/FcKaCebE6j1Omy80jBTMwg0oBHfnNVNznIPZCRzmLB/ySKO\n5yyKSaDFaoOWnA+h2Bd+\n=WkPF\n-----END PGP SIGNATURE-----", "payload": "tree 8794a7d2cde9c05da35f7fec30f49f5874ef42bb\nparent b3a175f730aff58ae41254254bbcd55d81ed9d47\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464624592 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464774461 +0200\n\nadd the `log` crate + `env_logger` to be able to choose the log granularity at runtime\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76", "html_url": "https://github.com/rust-lang/rust/commit/4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3a175f730aff58ae41254254bbcd55d81ed9d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a175f730aff58ae41254254bbcd55d81ed9d47", "html_url": "https://github.com/rust-lang/rust/commit/b3a175f730aff58ae41254254bbcd55d81ed9d47"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "13025cc668be8f4398858e0c46c1e85f09d3ec57", "filename": "src/bin/miri.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76", "patch": "@@ -5,6 +5,9 @@ extern crate getopts;\n extern crate miri;\n extern crate rustc;\n extern crate rustc_driver;\n+extern crate env_logger;\n+extern crate log_settings;\n+extern crate log;\n \n use miri::interpreter;\n use rustc::session::Session;\n@@ -31,6 +34,27 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n \n #[miri_run]\n fn main() {\n+    init_logger();\n     let args: Vec<String> = std::env::args().collect();\n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls);\n }\n+\n+#[miri_run]\n+fn init_logger() {\n+    let format = |record: &log::LogRecord| {\n+        // prepend spaces to indent the final string\n+        let indentation = log_settings::settings().indentation;\n+        let spaces = \"                                  \";\n+        let indentation = &spaces[..std::cmp::min(indentation, spaces.len())];\n+        format!(\"{} -{} {}\", record.level(), indentation, record.args())\n+    };\n+\n+    let mut builder = env_logger::LogBuilder::new();\n+    builder.format(format).filter(None, log::LogLevelFilter::Info);\n+\n+    if std::env::var(\"RUST_LOG\").is_ok() {\n+        builder.parse(&std::env::var(\"RUST_LOG\").unwrap());\n+    }\n+\n+    builder.init().unwrap();\n+}"}, {"sha": "0f9cc899193d6d3f944680db764c6ca0c94180ee", "filename": "src/interpreter.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76", "patch": "@@ -20,8 +20,6 @@ use error::{EvalError, EvalResult};\n use memory::{Memory, Pointer};\n use primval::{self, PrimVal};\n \n-const TRACE_EXECUTION: bool = true;\n-\n struct GlobalEvalContext<'a, 'tcx: 'a> {\n     /// The results of the type checker, from rustc.\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -168,32 +166,24 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         r\n     }\n \n-    fn log<F>(&self, extra_indent: usize, f: F) where F: FnOnce() {\n-        let indent = self.stack.len() + extra_indent;\n-        if !TRACE_EXECUTION { return; }\n-        for _ in 0..indent { print!(\"    \"); }\n-        f();\n-        println!(\"\");\n-    }\n-\n     fn run(&mut self) -> EvalResult<()> {\n         'outer: while !self.stack.is_empty() {\n             let mut current_block = self.frame().next_block;\n \n             loop {\n-                self.log(0, || print!(\"// {:?}\", current_block));\n+                trace!(\"// {:?}\", current_block);\n                 let current_mir = self.mir().clone(); // Cloning a reference.\n                 let block_data = current_mir.basic_block_data(current_block);\n \n                 for stmt in &block_data.statements {\n-                    self.log(0, || print!(\"{:?}\", stmt));\n+                    trace!(\"{:?}\", stmt);\n                     let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n                     let result = self.eval_assignment(lvalue, rvalue);\n                     self.maybe_report(stmt.span, result)?;\n                 }\n \n                 let terminator = block_data.terminator();\n-                self.log(0, || print!(\"{:?}\", terminator.kind));\n+                trace!(\"{:?}\", terminator.kind);\n \n                 let result = self.eval_terminator(terminator);\n                 match self.maybe_report(terminator.span, result)? {\n@@ -245,6 +235,8 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         let num_args = mir.arg_decls.len();\n         let num_vars = mir.var_decls.len();\n \n+        ::log_settings::settings().indentation += 1;\n+\n         self.stack.push(Frame {\n             mir: mir.clone(),\n             next_block: mir::START_BLOCK,\n@@ -256,6 +248,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n     }\n \n     fn pop_stack_frame(&mut self) {\n+        ::log_settings::settings().indentation -= 1;\n         let _frame = self.stack.pop().expect(\"tried to pop a stack frame, but there were none\");\n         // TODO(solson): Deallocate local variables.\n         self.substs_stack.pop();\n@@ -419,10 +412,10 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n \n     fn drop(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<()> {\n         if !self.type_needs_drop(ty) {\n-            self.log(1, || print!(\"no need to drop {:?}\", ty));\n+            debug!(\"no need to drop {:?}\", ty);\n             return Ok(());\n         }\n-        self.log(1, || print!(\"need to drop {:?}\", ty));\n+        trace!(\"-need to drop {:?}\", ty);\n \n         // TODO(solson): Call user-defined Drop::drop impls.\n \n@@ -431,7 +424,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                 match self.memory.read_ptr(ptr) {\n                     Ok(contents_ptr) => {\n                         self.drop(contents_ptr, contents_ty)?;\n-                        self.log(1, || print!(\"deallocating box\"));\n+                        trace!(\"-deallocating box\");\n                         self.memory.deallocate(contents_ptr)?;\n                     }\n                     Err(EvalError::ReadBytesAsPointer) => {\n@@ -1421,32 +1414,29 @@ pub fn interpret_start_points<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir_map: &MirMap<'tcx>,\n ) {\n+    let initial_indentation = ::log_settings::settings().indentation;\n     for (&id, mir) in &mir_map.map {\n         for attr in tcx.map.attrs(id) {\n             use syntax::attr::AttrMetaMethods;\n             if attr.check_name(\"miri_run\") {\n                 let item = tcx.map.expect_item(id);\n \n-                if TRACE_EXECUTION {\n-                    println!(\"Interpreting: {}\", item.name);\n-                }\n+                ::log_settings::settings().indentation = initial_indentation;\n+\n+                debug!(\"Interpreting: {}\", item.name);\n \n                 let mut gecx = GlobalEvalContext::new(tcx, mir_map);\n                 let mut fecx = FnEvalContext::new(&mut gecx);\n                 match fecx.call_nested(mir) {\n-                    Ok(Some(return_ptr)) => if TRACE_EXECUTION {\n+                    Ok(Some(return_ptr)) => if log_enabled!(::log::LogLevel::Debug) {\n                         fecx.memory.dump(return_ptr.alloc_id);\n                     },\n-                    Ok(None) => println!(\"(diverging function returned)\"),\n+                    Ok(None) => warn!(\"diverging function returned\"),\n                     Err(_e) => {\n                         // TODO(solson): Detect whether the error was already reported or not.\n                         // tcx.sess.err(&e.to_string());\n                     }\n                 }\n-\n-                if TRACE_EXECUTION {\n-                    println!(\"\");\n-                }\n             }\n         }\n     }"}, {"sha": "80d89c164ac5f97e6b32b93217fee732fef5aa54", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4f3f2020edbce8d9bcb618d11f8f7fc5eb8dff76", "patch": "@@ -12,6 +12,8 @@\n #[macro_use] extern crate rustc;\n extern crate rustc_mir;\n extern crate syntax;\n+#[macro_use] extern crate log;\n+extern crate log_settings;\n \n // From crates.io.\n extern crate byteorder;"}]}