{"sha": "d3babe5eaa073b93c25529831ac8afb37f47c412", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYmFiZTVlYWEwNzNiOTNjMjU1Mjk4MzFhYzhhZmIzN2Y0N2M0MTI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2017-11-03T19:18:11Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2017-11-03T19:36:19Z"}, "message": "Added page to unstable book.", "tree": {"sha": "b7cfaf018e12adbc5a254175dd43f286f14e088c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7cfaf018e12adbc5a254175dd43f286f14e088c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3babe5eaa073b93c25529831ac8afb37f47c412", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ/MUzAAoJEAF2C0+fU/FUUnkP/0eqQ7h/RE4fzUvS9NoHl9uz\nxteKKajVneohAyK8jwnN/DHaEEJ1E7gOnq22uHI7Hvcv+lIbrtriZXAuV4zNRM0z\nfLGLZZML4+s/HbUXs/hmKCa4DtLpCKDkqN8L+/aO11ISqSCvEMDuZB5tQbqMkmH8\n8VHZbVonZxo3c+OvUcY4JEL+OkphvrY+cPYtddh9yR8tQFR/GurbCJki+J6Fdqs1\n4EcBB3A5V5YUo+GjZQTm71FHaW1+eIBmxhaUR/Dd0rCNXhb63DXWHvKd5FGlK9nA\noFpyExIFc2uEtA58xu1P85rX1QUnUZpYiMTd3E2tlO41IKaWoGUkqSCj7vT1GC+K\n/4Zmrl48IrbRKFK43PhSZliXYSmKMR1b8b7zqIvYwfMIjM3+/W6A1dpC04KtEI1R\nfpy4cTt9q11g8W2VBfHciYCou/giHwRrp3i4PEbc8EwCJJapl9Zr/yiwyOiyXlca\nwB7G3i2NM1juRQvzVDLV1bzdUYo99iF0DSbdFAmsFrKzONl1cOA+pV6agxNm3hRD\ns8nU2e7qa2gRimiA0kg5L5wpgNPtCxOf3/Mf1y+dcNzbaOdn6EyGP4fTp3ON+Z7p\nG9qIrrpZfW+kGbAlHlyVGnSjQdPDUDS8fsqbIXRdSDP7+BTWOycGMA3A1fLA1Ned\nO0K9EHM7LMOmRkzDwAyz\n=TZ69\n-----END PGP SIGNATURE-----", "payload": "tree b7cfaf018e12adbc5a254175dd43f286f14e088c\nparent 059eccb07f35cd3dd1119d116c593b247752d682\nauthor David Wood <david@davidtw.co> 1509736691 +0000\ncommitter David Wood <david@davidtw.co> 1509737779 +0000\n\nAdded page to unstable book.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3babe5eaa073b93c25529831ac8afb37f47c412", "html_url": "https://github.com/rust-lang/rust/commit/d3babe5eaa073b93c25529831ac8afb37f47c412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3babe5eaa073b93c25529831ac8afb37f47c412/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "059eccb07f35cd3dd1119d116c593b247752d682", "url": "https://api.github.com/repos/rust-lang/rust/commits/059eccb07f35cd3dd1119d116c593b247752d682", "html_url": "https://github.com/rust-lang/rust/commit/059eccb07f35cd3dd1119d116c593b247752d682"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "f9840e1b83f2be4b84d2a7cb7883db89f2e81fce", "filename": "src/doc/unstable-book/src/language-features/non-exhaustive.md", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d3babe5eaa073b93c25529831ac8afb37f47c412/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-exhaustive.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3babe5eaa073b93c25529831ac8afb37f47c412/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-exhaustive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-exhaustive.md?ref=d3babe5eaa073b93c25529831ac8afb37f47c412", "patch": "@@ -0,0 +1,75 @@\n+# `non_exhaustive`\n+\n+The tracking issue for this feature is: [#44109]\n+\n+[#44109]: https://github.com/rust-lang/rust/issues/44109\n+\n+------------------------\n+\n+The `non_exhaustive` gate allows you to use the `#[non_exhaustive]` attribute\n+on structs and enums. When applied within a crate, users of the crate will need\n+to use the `_` pattern when matching enums and use the `..` pattern when\n+matching structs. Structs marked as `non_exhaustive` will not be able to be\n+created normally outside of the defining crate. This is demonstrated below:\n+\n+```rust,ignore (pseudo-Rust)\n+use std::error::Error as StdError;\n+\n+#[non_exhaustive]\n+pub enum Error {\n+    Message(String),\n+    Other,\n+}\n+impl StdError for Error {\n+    fn description(&self) -> &str {\n+        // This will not error, despite being marked as non_exhaustive, as this\n+        // enum is defined within the current crate, it can be matched\n+        // exhaustively.\n+        match *self {\n+            Message(ref s) => s,\n+            Other => \"other or unknown error\",\n+        }\n+    }\n+}\n+```\n+\n+```rust,ignore (pseudo-Rust)\n+use mycrate::Error;\n+\n+// This will not error as the non_exhaustive Error enum has been matched with\n+// a wildcard.\n+match error {\n+    Message(ref s) => ...,\n+    Other => ...,\n+    _ => ...,\n+}\n+```\n+\n+```rust,ignore (pseudo-Rust)\n+#[non_exhaustive]\n+pub struct Config {\n+    pub window_width: u16,\n+    pub window_height: u16,\n+}\n+\n+// We can create structs as normal within the defining crate when marked as\n+// non_exhaustive.\n+let config = Config { window_width: 640, window_height: 480 };\n+\n+// We can match structs exhaustively when within the defining crate.\n+if let Ok(Config { window_width, window_height }) = load_config() {\n+    // ...\n+}\n+```\n+\n+```rust,ignore (pseudo-Rust)\n+use mycrate::Config;\n+\n+// We cannot create a struct like normal if it has been marked as\n+// non_exhaustive.\n+let config = Config { window_width: 640, window_height: 480 };\n+// By adding the `..` we can match the config as below outside of the crate\n+// when marked non_exhaustive.\n+let &Config { window_width, window_height, .. } = config;\n+```\n+"}]}