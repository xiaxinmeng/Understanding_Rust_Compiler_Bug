{"sha": "3746689e9ddea455d10a41d9fc3af33b22a3707d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NDY2ODllOWRkZWE0NTVkMTBhNDFkOWZjM2FmMzNiMjJhMzcwN2Q=", "commit": {"author": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-18T17:40:12Z"}, "committer": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-18T17:40:12Z"}, "message": "Implement Find All References for local variables", "tree": {"sha": "04c4e94e40f5496d961ca2f3dc649da1dd84604e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04c4e94e40f5496d961ca2f3dc649da1dd84604e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3746689e9ddea455d10a41d9fc3af33b22a3707d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3746689e9ddea455d10a41d9fc3af33b22a3707d", "html_url": "https://github.com/rust-lang/rust/commit/3746689e9ddea455d10a41d9fc3af33b22a3707d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3746689e9ddea455d10a41d9fc3af33b22a3707d/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a704035f4b36a0db737f59a7c939d17656b516f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a704035f4b36a0db737f59a7c939d17656b516f", "html_url": "https://github.com/rust-lang/rust/commit/2a704035f4b36a0db737f59a7c939d17656b516f"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "a67b1717a7eac8d58efaca8eef8527c3b0c49a57", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=3746689e9ddea455d10a41d9fc3af33b22a3707d", "patch": "@@ -257,6 +257,38 @@ impl AnalysisImpl {\n         vec![]\n     }\n \n+    pub fn find_all_refs(&self, file_id: FileId, offset: TextUnit, _token: &JobToken) -> Vec<(FileId, TextRange)> {\n+        let root = self.root(file_id);\n+        let file = root.syntax(file_id);\n+        let syntax = file.syntax();\n+\n+        let mut ret = vec![];\n+\n+        // Find the symbol we are looking for\n+        if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n+\n+            // We are only handing local references for now\n+            if let Some(resolved) = resolve_local_name(&file, offset, name_ref) {\n+\n+                ret.push((file_id, resolved.1));\n+\n+                if let Some(fn_def) = find_node_at_offset::<ast::FnDef>(syntax, offset) {\n+\n+                    let refs : Vec<_> = fn_def.syntax().descendants()\n+                        .filter_map(ast::NameRef::cast)\n+                        .filter(|n: &ast::NameRef| resolve_local_name(&file, n.syntax().range().start(), *n) == Some(resolved.clone()))\n+                        .collect();\n+\n+                    for r in refs {\n+                        ret.push((file_id, r.syntax().range()));\n+                    }\n+                }\n+            }\n+        }\n+\n+        ret\n+    }\n+\n     pub fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n         let root = self.root(file_id);\n         let module_tree = root.module_tree();"}, {"sha": "46cc0722b2cf03278a1bb32877b22d05aeec56e8", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=3746689e9ddea455d10a41d9fc3af33b22a3707d", "patch": "@@ -217,6 +217,9 @@ impl Analysis {\n         self.imp\n             .approximately_resolve_symbol(file_id, offset, token)\n     }\n+    pub fn find_all_refs(&self, file_id: FileId, offset: TextUnit, token: &JobToken) -> Vec<(FileId, TextRange)> {\n+        self.imp.find_all_refs(file_id, offset, token)\n+    }\n     pub fn parent_module(&self, file_id: FileId) -> Vec<(FileId, FileSymbol)> {\n         self.imp.parent_module(file_id)\n     }"}, {"sha": "0c2c69ea0da66566d667c58c2b07007d0d196e56", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=3746689e9ddea455d10a41d9fc3af33b22a3707d", "patch": "@@ -10,6 +10,8 @@ use std::sync::Arc;\n use ra_analysis::{\n     Analysis, AnalysisHost, CrateGraph, CrateId, FileId, FileResolver, FnDescriptor, JobHandle,\n };\n+use ra_syntax::TextRange;\n+\n use relative_path::{RelativePath, RelativePathBuf};\n use rustc_hash::FxHashMap;\n use test_utils::{assert_eq_dbg, extract_offset};\n@@ -225,3 +227,43 @@ fn bar() {\n     assert_eq!(desc.ret_type, None);\n     assert_eq!(param, Some(1));\n }\n+\n+fn get_all_refs(text: &str) -> Vec<(FileId, TextRange)> {\n+    let (offset, code) = extract_offset(text);\n+    let code = code.as_str();\n+\n+    let (_handle, token) = JobHandle::new();\n+    let snap = analysis(&[(\"/lib.rs\", code)]);\n+\n+    snap.find_all_refs(FileId(1), offset, &token)\n+}\n+\n+#[test]\n+fn test_find_all_refs_for_local() {\n+    let code = r#\"\n+    fn main() {\n+        let mut i = 1;\n+        let j = 1;\n+        i = i<|> + j;\n+\n+        {\n+            i = 0;\n+        }\n+\n+        i = 5;\n+    }\"#;\n+\n+    let refs = get_all_refs(code);\n+    assert_eq!(refs.len(), 5);\n+}\n+\n+#[test]\n+fn test_find_all_refs_for_param_inside() {\n+    let code = r#\"\n+    fn foo(i : u32) -> u32 {\n+        i<|>\n+    }\"#;\n+\n+    let refs = get_all_refs(code);\n+    assert_eq!(refs.len(), 2);\n+}\n\\ No newline at end of file"}, {"sha": "f10bdf65717b31b2c3f009ab2e18befdeafa70ef", "filename": "crates/ra_editor/src/scope/fn_scope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=3746689e9ddea455d10a41d9fc3af33b22a3707d", "patch": "@@ -270,7 +270,6 @@ pub fn resolve_local_name<'a>(\n         .filter(|entry| shadowed.insert(entry.name()))\n         .filter(|entry| entry.name() == name_ref.text())\n         .nth(0);\n-    eprintln!(\"ret = {:?}\", ret);\n     ret\n }\n "}, {"sha": "84c43bbec2c129421bbfa07892e0583660dcf232", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=3746689e9ddea455d10a41d9fc3af33b22a3707d", "patch": "@@ -27,7 +27,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         definition_provider: Some(true),\n         type_definition_provider: None,\n         implementation_provider: None,\n-        references_provider: None,\n+        references_provider: Some(true),\n         document_highlight_provider: None,\n         document_symbol_provider: Some(true),\n         workspace_symbol_provider: Some(true),"}, {"sha": "9b8d40eaa0728741b7247cb97257bcedea2d8c4a", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=3746689e9ddea455d10a41d9fc3af33b22a3707d", "patch": "@@ -460,6 +460,22 @@ pub fn handle_signature_help(\n     }\n }\n \n+pub fn handle_references(\n+    world: ServerWorld,\n+    params: req::ReferenceParams,\n+    token: JobToken,\n+) -> Result<Option<Vec<Location>>> {\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id);\n+    let offset = params.position.conv_with(&line_index);\n+\n+    let refs = world.analysis().find_all_refs(file_id, offset, &token);\n+\n+    Ok(Some(refs.into_iter()\n+        .filter_map(|r| to_location(r.0, r.1, &world, &line_index).ok())\n+        .collect()))\n+}\n+\n pub fn handle_code_action(\n     world: ServerWorld,\n     params: req::CodeActionParams,"}, {"sha": "7efec8a7ae993c4fec6b1bef9f64216b5429e592", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=3746689e9ddea455d10a41d9fc3af33b22a3707d", "patch": "@@ -248,6 +248,7 @@ fn on_request(\n         .on::<req::CodeActionRequest>(handlers::handle_code_action)?\n         .on::<req::FoldingRangeRequest>(handlers::handle_folding_range)?\n         .on::<req::SignatureHelpRequest>(handlers::handle_signature_help)?\n+        .on::<req::References>(handlers::handle_references)?\n         .finish();\n     match req {\n         Ok((id, handle)) => {"}, {"sha": "6cd04d84cdaf25f66ea518c826b291b2b3af1c6d", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3746689e9ddea455d10a41d9fc3af33b22a3707d/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=3746689e9ddea455d10a41d9fc3af33b22a3707d", "patch": "@@ -7,7 +7,7 @@ pub use languageserver_types::{\n     CompletionResponse, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n     DocumentSymbolResponse, ExecuteCommandParams, Hover, InitializeResult,\n     PublishDiagnosticsParams, SignatureHelp, TextDocumentEdit, TextDocumentPositionParams,\n-    TextEdit, WorkspaceSymbolParams,\n+    TextEdit, WorkspaceSymbolParams, ReferenceParams,\n };\n \n pub enum SyntaxTree {}"}]}