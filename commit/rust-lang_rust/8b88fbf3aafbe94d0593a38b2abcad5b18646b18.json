{"sha": "8b88fbf3aafbe94d0593a38b2abcad5b18646b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiODhmYmYzYWFmYmU5NGQwNTkzYTM4YjJhYmNhZDViMTg2NDZiMTg=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-02T20:39:42Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-02T20:39:42Z"}, "message": "Minor clarification/typo-correcting edits to manual sections up to and including Ref.Mem chapter.", "tree": {"sha": "b217eaea18e6fcb7e429f2e68c2bd32fea2733e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b217eaea18e6fcb7e429f2e68c2bd32fea2733e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b88fbf3aafbe94d0593a38b2abcad5b18646b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b88fbf3aafbe94d0593a38b2abcad5b18646b18", "html_url": "https://github.com/rust-lang/rust/commit/8b88fbf3aafbe94d0593a38b2abcad5b18646b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b88fbf3aafbe94d0593a38b2abcad5b18646b18/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1578715d121cfb0adf783e1368ed22d837fb2a56", "url": "https://api.github.com/repos/rust-lang/rust/commits/1578715d121cfb0adf783e1368ed22d837fb2a56", "html_url": "https://github.com/rust-lang/rust/commit/1578715d121cfb0adf783e1368ed22d837fb2a56"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "4461fe03381478669d0d4cb5485fc5aadc212263", "filename": "doc/rust.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b88fbf3aafbe94d0593a38b2abcad5b18646b18/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/8b88fbf3aafbe94d0593a38b2abcad5b18646b18/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=8b88fbf3aafbe94d0593a38b2abcad5b18646b18", "patch": "@@ -248,9 +248,9 @@ functions. Aliases are not ``general values'', in the sense that they cannot\n be independently manipulated. They are more like C++ references, except that\n like boxes, aliases are safe: they always point to live values.\n \n-In addition, each slot (stack-local allocation or alias) has a static\n+In addition, every slot (stack-local allocation or alias) has a static\n initialization state that is calculated by the typestate system. This permits\n-late initialization of slotsx in functions with complex control-flow, while\n+late initialization of slots in functions with complex control-flow, while\n still guaranteeing that every use of a slot occurs after it has been\n initialized.\n \n@@ -339,7 +339,7 @@ Rust has a lightweight object system based on structural object types: there\n is no ``class hierarchy'' nor any concept of inheritance. Method overriding\n and object restriction are performed explicitly on object values, which are\n little more than order-insensitive records of methods sharing a common private\n-value. Objects can be mutable or immutable, and immutable objects can have\n+value. Objects can be state or non-state, and only non-state objects can have\n destructors.\n \n @sp 1\n@@ -1129,15 +1129,15 @@ entry to each function as the task executes. A stack allocation is reclaimed\n when control leaves the frame containing it.\n \n The @dfn{heap} is a general term that describes two separate sets of boxes:\n-@emph{task-local} state boxes and the @emph{shared} immutable boxes.\n+@emph{task-local} state boxes and the @emph{shared} non-state boxes.\n \n State boxes are @dfn{task-local}, owned by the task. Like any other state\n value, they cannot pass over channels. State boxes do not outlive the task\n that owns them. When unreferenced, they are collected using a general\n (cycle-aware) garbage-collector local to each task. Garbage collection within\n a local heap does not interrupt execution of other tasks.\n \n-Immutable boxes are @dfn{shared}, and can be multiply-referenced by many\n+Non-state boxes are @dfn{shared}, and can be multiply-referenced by many\n different tasks. Like any other immutable type, they can pass over channels,\n and live as long as the last task referencing them within a given domain. When\n unreferenced, they are destroyed immediately (due to reference-counting) and\n@@ -1161,7 +1161,7 @@ that can access the allocation.\n \n @dfn{Sharing} of an allocation means that the same allocation may be\n concurrently read by multiple tasks. The only shared allocations are those\n-that are immutable.\n+that are non-state.\n \n When a stack frame is exited, its local allocations are all released, and its\n references to boxes (both shared and owned) are dropped.\n@@ -1182,7 +1182,7 @@ A @dfn{local} slot (or @emph{stack-local} allocation) holds a value directly,\n allocated within the stack's memory. The value is a part of the stack frame.\n \n An @dfn{alias} references a value outside the frame. An alias may refer to a\n-value allocated in another frame @emph{or} a boxed valaue in the heap. The\n+value allocated in another frame @emph{or} a boxed value in the heap. The\n alias-formation rules ensure that the referent of an alias will outlive the\n alias.\n \n@@ -1297,7 +1297,7 @@ cost is transferred to the receiving domain.\n @section Ref.Task\n @c * Ref.Task::                    Semantic model of tasks.\n \n-A executing Rust program consists of a tree of tasks. A Rust @dfn{task}\n+An executing Rust program consists of a tree of tasks. A Rust @dfn{task}\n consists of an entry function, a stack, a set of outgoing communication\n channels and incoming communication ports, and ownership of some portion of\n the heap of a single operating-system process."}]}