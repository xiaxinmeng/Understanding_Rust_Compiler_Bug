{"sha": "f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZmU1YzNiYTE0ZDc4OGQxOWJmOTBjY2IzZGNkOWRkNjM2ZjYwOTQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-21T15:00:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-21T15:00:43Z"}, "message": "Rollup merge of #86473 - fee1-dead:rustdoc-const-unstable, r=jyn514\n\nRustdoc: Account for const-unstable functions\n\nFixes #86464", "tree": {"sha": "b57815ad631600ac8ea7958a5bd1ba115ad955b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b57815ad631600ac8ea7958a5bd1ba115ad955b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0KmcCRBK7hj4Ov3rIwAARrwIADxfLyfY1WGQ+5pCH4ZdmqNQ\n+dYCgQaPej3huuq2IqM9GBT/hrz39lPzJ34a3m1XznZDr82MeYTxVVeQeBc1VgpJ\nhp0MaWol18v6p304si+CJwam24Bz+SU3a6T8TOsPGyRMALCmuzQfzCNj1fHPIvXn\nu5W3ru19zH9yS2zeHJbo7H0AbvuvjtCKE8ARby/YP8dBpSZBCFPw1TE8P2HgC1YN\njSunFOKOX0Zi3B+uPQ4ZbQDZLfT1s7mSDAyRejuCgP8UG0J6q/ZD4Ce+zeTlLuej\ncaxUGnVppAF6E4F5/V0JVtNuk+T7xwvzzXm6loZJS3w9QnJ+SQRiaw2Ban1ykME=\n=IZJQ\n-----END PGP SIGNATURE-----\n", "payload": "tree b57815ad631600ac8ea7958a5bd1ba115ad955b4\nparent 9c664b23214743645e71f8132057b7aec483ef4d\nparent b57077bbf02c463308359330444cf219d3f04d17\nauthor Yuki Okushi <jtitor@2k36.org> 1624287643 +0900\ncommitter GitHub <noreply@github.com> 1624287643 +0900\n\nRollup merge of #86473 - fee1-dead:rustdoc-const-unstable, r=jyn514\n\nRustdoc: Account for const-unstable functions\n\nFixes #86464\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094", "html_url": "https://github.com/rust-lang/rust/commit/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c664b23214743645e71f8132057b7aec483ef4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c664b23214743645e71f8132057b7aec483ef4d", "html_url": "https://github.com/rust-lang/rust/commit/9c664b23214743645e71f8132057b7aec483ef4d"}, {"sha": "b57077bbf02c463308359330444cf219d3f04d17", "url": "https://api.github.com/repos/rust-lang/rust/commits/b57077bbf02c463308359330444cf219d3f04d17", "html_url": "https://github.com/rust-lang/rust/commit/b57077bbf02c463308359330444cf219d3f04d17"}], "stats": {"total": 163, "additions": 112, "deletions": 51}, "files": [{"sha": "58c609cf252cf0c0c48953b85682c6ec1ea9feaf", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094", "patch": "@@ -9,6 +9,7 @@ use std::cell::Cell;\n use std::fmt;\n use std::iter;\n \n+use rustc_attr::{ConstStability, StabilityLevel};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n@@ -1253,15 +1254,6 @@ impl PrintWithSpace for hir::Unsafety {\n     }\n }\n \n-impl PrintWithSpace for hir::Constness {\n-    fn print_with_space(&self) -> &str {\n-        match self {\n-            hir::Constness::Const => \"const \",\n-            hir::Constness::NotConst => \"\",\n-        }\n-    }\n-}\n-\n impl PrintWithSpace for hir::IsAsync {\n     fn print_with_space(&self) -> &str {\n         match self {\n@@ -1280,6 +1272,22 @@ impl PrintWithSpace for hir::Mutability {\n     }\n }\n \n+crate fn print_constness_with_space(\n+    c: &hir::Constness,\n+    s: Option<&ConstStability>,\n+) -> &'static str {\n+    match (c, s) {\n+        // const stable or when feature(staged_api) is not set\n+        (\n+            hir::Constness::Const,\n+            Some(ConstStability { level: StabilityLevel::Stable { .. }, .. }),\n+        )\n+        | (hir::Constness::Const, None) => \"const \",\n+        // const unstable or not const\n+        _ => \"\",\n+    }\n+}\n+\n impl clean::Import {\n     crate fn print<'a, 'tcx: 'a>(\n         &'a self,"}, {"sha": "03b607c2d2cb7d0de904835384511ac366db84e7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094", "patch": "@@ -42,7 +42,7 @@ use std::str;\n use std::string::ToString;\n \n use rustc_ast_pretty::pprust;\n-use rustc_attr::{Deprecation, StabilityLevel};\n+use rustc_attr::{ConstStability, Deprecation, StabilityLevel};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n@@ -61,8 +61,8 @@ use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n-    href, print_abi_with_space, print_default_space, print_generic_bounds, print_where_clause,\n-    Buffer, PrintWithSpace,\n+    href, print_abi_with_space, print_constness_with_space, print_default_space,\n+    print_generic_bounds, print_where_clause, Buffer, PrintWithSpace,\n };\n use crate::html::markdown::{Markdown, MarkdownHtml, MarkdownSummaryLine};\n \n@@ -826,21 +826,45 @@ fn assoc_type(\n fn render_stability_since_raw(\n     w: &mut Buffer,\n     ver: Option<&str>,\n-    const_ver: Option<&str>,\n+    const_stability: Option<&ConstStability>,\n     containing_ver: Option<&str>,\n     containing_const_ver: Option<&str>,\n ) {\n     let ver = ver.filter(|inner| !inner.is_empty());\n-    let const_ver = const_ver.filter(|inner| !inner.is_empty());\n \n-    match (ver, const_ver) {\n-        (Some(v), Some(cv)) if const_ver != containing_const_ver => {\n+    match (ver, const_stability) {\n+        // stable and const stable\n+        (Some(v), Some(ConstStability { level: StabilityLevel::Stable { since }, .. }))\n+            if Some(since.as_str()).as_deref() != containing_const_ver =>\n+        {\n             write!(\n                 w,\n                 \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}, const since {1}\\\">{0} (const: {1})</span>\",\n-                v, cv\n+                v, since\n             );\n         }\n+        // stable and const unstable\n+        (\n+            Some(v),\n+            Some(ConstStability { level: StabilityLevel::Unstable { issue, .. }, feature, .. }),\n+        ) => {\n+            write!(\n+                w,\n+                \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}, const unstable\\\">{0} (const: \",\n+                v\n+            );\n+            if let Some(n) = issue {\n+                write!(\n+                    w,\n+                    \"<a href=\\\"https://github.com/rust-lang/rust/issues/{}\\\" title=\\\"Tracking issue for {}\\\">unstable</a>\",\n+                    n, feature\n+                );\n+            } else {\n+                write!(w, \"unstable\");\n+            }\n+            write!(w, \")</span>\");\n+        }\n+        // stable\n         (Some(v), _) if ver != containing_ver => {\n             write!(\n                 w,\n@@ -888,11 +912,13 @@ fn render_assoc_item(\n             }\n         };\n         let vis = meth.visibility.print_with_space(meth.def_id, cx).to_string();\n-        let constness = header.constness.print_with_space();\n+        let constness =\n+            print_constness_with_space(&header.constness, meth.const_stability(cx.tcx()));\n         let asyncness = header.asyncness.print_with_space();\n         let unsafety = header.unsafety.print_with_space();\n         let defaultness = print_default_space(meth.is_default());\n         let abi = print_abi_with_space(header.abi).to_string();\n+\n         // NOTE: `{:#}` does not print HTML formatting, `{}` does. So `g.print` can't be reused between the length calculation and `write!`.\n         let generics_len = format!(\"{:#}\", g.print(cx)).len();\n         let mut header_len = \"fn \".len()\n@@ -917,15 +943,15 @@ fn render_assoc_item(\n         w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n         write!(\n             w,\n-            \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n+            \"{indent}{vis}{constness}{asyncness}{unsafety}{defaultness}{abi}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n              {generics}{decl}{notable_traits}{where_clause}\",\n-            indent_str,\n-            vis,\n-            constness,\n-            asyncness,\n-            unsafety,\n-            defaultness,\n-            abi,\n+            indent = indent_str,\n+            vis = vis,\n+            constness = constness,\n+            asyncness = asyncness,\n+            unsafety = unsafety,\n+            defaultness = defaultness,\n+            abi = abi,\n             href = href,\n             name = name,\n             generics = g.print(cx),\n@@ -1583,7 +1609,7 @@ fn render_rightside(\n     render_stability_since_raw(\n         w,\n         item.stable_since(tcx).as_deref(),\n-        item.const_stable_since(tcx).as_deref(),\n+        item.const_stability(tcx),\n         containing_item.stable_since(tcx).as_deref(),\n         containing_item.const_stable_since(tcx).as_deref(),\n     );"}, {"sha": "0174bfec32d7ea01abf6bf97b7cd602e83580016", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094", "patch": "@@ -22,7 +22,9 @@ use crate::clean::{self, GetDefId};\n use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n-use crate::html::format::{print_abi_with_space, print_where_clause, Buffer, PrintWithSpace};\n+use crate::html::format::{\n+    print_abi_with_space, print_constness_with_space, print_where_clause, Buffer, PrintWithSpace,\n+};\n use crate::html::highlight;\n use crate::html::layout::Page;\n use crate::html::markdown::MarkdownSummaryLine;\n@@ -94,7 +96,7 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n     render_stability_since_raw(\n         buf,\n         item.stable_since(cx.tcx()).as_deref(),\n-        item.const_stable_since(cx.tcx()).as_deref(),\n+        item.const_stability(cx.tcx()),\n         None,\n         None,\n     );\n@@ -430,29 +432,36 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) ->\n }\n \n fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::Function) {\n-    let header_len = format!(\n-        \"{}{}{}{}{:#}fn {}{:#}\",\n-        it.visibility.print_with_space(it.def_id, cx),\n-        f.header.constness.print_with_space(),\n-        f.header.asyncness.print_with_space(),\n-        f.header.unsafety.print_with_space(),\n-        print_abi_with_space(f.header.abi),\n-        it.name.as_ref().unwrap(),\n-        f.generics.print(cx),\n-    )\n-    .len();\n+    let vis = it.visibility.print_with_space(it.def_id, cx).to_string();\n+    let constness = print_constness_with_space(&f.header.constness, it.const_stability(cx.tcx()));\n+    let asyncness = f.header.asyncness.print_with_space();\n+    let unsafety = f.header.unsafety.print_with_space();\n+    let abi = print_abi_with_space(f.header.abi).to_string();\n+    let name = it.name.as_ref().unwrap();\n+\n+    let generics_len = format!(\"{:#}\", f.generics.print(cx)).len();\n+    let header_len = \"fn \".len()\n+        + vis.len()\n+        + constness.len()\n+        + asyncness.len()\n+        + unsafety.len()\n+        + abi.len()\n+        + name.as_str().len()\n+        + generics_len;\n+\n     w.write_str(\"<pre class=\\\"rust fn\\\">\");\n     render_attributes_in_pre(w, it, \"\");\n+    w.reserve(header_len);\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n          {name}{generics}{decl}{notable_traits}{where_clause}</pre>\",\n-        vis = it.visibility.print_with_space(it.def_id, cx),\n-        constness = f.header.constness.print_with_space(),\n-        asyncness = f.header.asyncness.print_with_space(),\n-        unsafety = f.header.unsafety.print_with_space(),\n-        abi = print_abi_with_space(f.header.abi),\n-        name = it.name.as_ref().unwrap(),\n+        vis = vis,\n+        constness = constness,\n+        asyncness = asyncness,\n+        unsafety = unsafety,\n+        abi = abi,\n+        name = name,\n         generics = f.generics.print(cx),\n         where_clause = print_where_clause(&f.generics, cx, 0, true),\n         decl = f.decl.full_print(header_len, 0, f.header.asyncness, cx),\n@@ -1291,7 +1300,7 @@ fn render_stability_since(\n     render_stability_since_raw(\n         w,\n         item.stable_since(tcx).as_deref(),\n-        item.const_stable_since(tcx).as_deref(),\n+        item.const_stability(tcx),\n         containing_item.stable_since(tcx).as_deref(),\n         containing_item.const_stable_since(tcx).as_deref(),\n     )"}, {"sha": "8c995b9426bbbec12dbae23ef631fc420387d4e4", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=f3fe5c3ba14d788d19bf90ccb3dcd9dd636f6094", "patch": "@@ -7,12 +7,20 @@\n #![feature(foo, foo2)]\n #![feature(staged_api)]\n \n-// @has 'foo/fn.foo.html' '//pre' 'pub unsafe fn foo() -> u32'\n+// @has 'foo/fn.foo.html' '//pre' 'pub fn foo() -> u32'\n+// @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n-pub const unsafe fn foo() -> u32 { 42 }\n+pub const fn foo() -> u32 { 42 }\n+\n+// @has 'foo/fn.foo_unsafe.html' '//pre' 'pub unsafe fn foo_unsafe() -> u32'\n+// @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n+pub const unsafe fn foo_unsafe() -> u32 { 42 }\n \n // @has 'foo/fn.foo2.html' '//pre' 'pub const fn foo2() -> u32'\n+// @!has - '//span[@class=\"since\"]'\n #[unstable(feature = \"humans\", issue = \"none\")]\n pub const fn foo2() -> u32 { 42 }\n \n@@ -22,7 +30,9 @@ pub const fn foo2() -> u32 { 42 }\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn bar2() -> u32 { 42 }\n \n+\n // @has 'foo/fn.foo2_gated.html' '//pre' 'pub const unsafe fn foo2_gated() -> u32'\n+// @!has - '//span[@class=\"since\"]'\n #[unstable(feature = \"foo2\", issue = \"none\")]\n pub const unsafe fn foo2_gated() -> u32 { 42 }\n \n@@ -33,15 +43,23 @@ pub const unsafe fn foo2_gated() -> u32 { 42 }\n pub const unsafe fn bar2_gated() -> u32 { 42 }\n \n // @has 'foo/fn.bar_not_gated.html' '//pre' 'pub const unsafe fn bar_not_gated() -> u32'\n+// @!has - '//span[@class=\"since\"]'\n pub const unsafe fn bar_not_gated() -> u32 { 42 }\n \n pub struct Foo;\n \n impl Foo {\n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/code' 'pub unsafe fn gated() -> u32'\n+    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/code' 'pub fn gated() -> u32'\n+    // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n+    pub const fn gated() -> u32 { 42 }\n+\n+    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated_unsafe\"]/code' 'pub unsafe fn gated_unsafe() -> u32'\n+    // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n-    pub const unsafe fn gated() -> u32 { 42 }\n+    pub const unsafe fn gated_unsafe() -> u32 { 42 }\n \n     // @has 'foo/struct.Foo.html' '//div[@id=\"method.stable_impl\"]/code' 'pub const fn stable_impl() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.2.0)'"}]}