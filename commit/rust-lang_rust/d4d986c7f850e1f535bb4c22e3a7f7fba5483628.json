{"sha": "d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZDk4NmM3Zjg1MGUxZjUzNWJiNGMyMmUzYTdmN2ZiYTU0ODM2Mjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T13:46:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T13:51:01Z"}, "message": "Item is a Stmt", "tree": {"sha": "08477af01b6c828249c88db126b2f86e0e6899bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08477af01b6c828249c88db126b2f86e0e6899bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "html_url": "https://github.com/rust-lang/rust/commit/d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616", "html_url": "https://github.com/rust-lang/rust/commit/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "4b73c41dacb333e76c9a27bfba75f07d38a49807", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "patch": "@@ -74,6 +74,7 @@ impl TailReturnCollector {\n             let expr = match &stmt {\n                 ast::Stmt::ExprStmt(stmt) => stmt.expr(),\n                 ast::Stmt::LetStmt(stmt) => stmt.initializer(),\n+                ast::Stmt::Item(_) => continue,\n             };\n             if let Some(expr) = &expr {\n                 self.handle_exprs(expr, collect_break);\n@@ -94,6 +95,7 @@ impl TailReturnCollector {\n                         let expr_stmt = match &expr_stmt {\n                             ast::Stmt::ExprStmt(stmt) => stmt.expr(),\n                             ast::Stmt::LetStmt(stmt) => stmt.initializer(),\n+                            ast::Stmt::Item(_) => None,\n                         };\n                         if let Some(expr) = &expr_stmt {\n                             self.handle_exprs(expr, collect_break);"}, {"sha": "5816bf5664feed00b0752b07ff8dd048445eec7e", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "patch": "@@ -10,7 +10,7 @@ use hir_expand::{\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n-        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, ModuleItemOwner, NameOwner,\n+        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, NameOwner,\n         SlicePatComponents,\n     },\n     AstNode, AstPtr,\n@@ -601,14 +601,20 @@ impl ExprCollector<'_> {\n         self.collect_block_items(&block);\n         let statements = block\n             .statements()\n-            .map(|s| match s {\n-                ast::Stmt::LetStmt(stmt) => {\n-                    let pat = self.collect_pat_opt(stmt.pat());\n-                    let type_ref = stmt.ty().map(|it| TypeRef::from_ast(&self.ctx(), it));\n-                    let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n-                    Statement::Let { pat, type_ref, initializer }\n-                }\n-                ast::Stmt::ExprStmt(stmt) => Statement::Expr(self.collect_expr_opt(stmt.expr())),\n+            .filter_map(|s| {\n+                let stmt = match s {\n+                    ast::Stmt::LetStmt(stmt) => {\n+                        let pat = self.collect_pat_opt(stmt.pat());\n+                        let type_ref = stmt.ty().map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                        let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n+                        Statement::Let { pat, type_ref, initializer }\n+                    }\n+                    ast::Stmt::ExprStmt(stmt) => {\n+                        Statement::Expr(self.collect_expr_opt(stmt.expr()))\n+                    }\n+                    ast::Stmt::Item(_) => return None,\n+                };\n+                Some(stmt)\n             })\n             .collect();\n         let tail = block.expr().map(|e| self.collect_expr(e));\n@@ -620,7 +626,11 @@ impl ExprCollector<'_> {\n         let container = ContainerId::DefWithBodyId(self.def);\n \n         let items = block\n-            .items()\n+            .statements()\n+            .filter_map(|stmt| match stmt {\n+                ast::Stmt::Item(it) => Some(it),\n+                ast::Stmt::LetStmt(_) | ast::Stmt::ExprStmt(_) => None,\n+            })\n             .filter_map(|item| {\n                 let (def, name): (ModuleDefId, Option<ast::Name>) = match item {\n                     ast::Item::Fn(def) => {"}, {"sha": "4a6f41ee71fa1b43ee61df97e1aedd8120711371", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "patch": "@@ -17,21 +17,25 @@ impl AstNode for Stmt {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             LET_STMT | EXPR_STMT => true,\n-            _ => false,\n+            _ => Item::can_cast(kind),\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             LET_STMT => Stmt::LetStmt(LetStmt { syntax }),\n             EXPR_STMT => Stmt::ExprStmt(ExprStmt { syntax }),\n-            _ => return None,\n+            _ => {\n+                let item = Item::cast(syntax)?;\n+                Stmt::Item(item)\n+            }\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n             Stmt::LetStmt(it) => &it.syntax,\n             Stmt::ExprStmt(it) => &it.syntax,\n+            Stmt::Item(it) => it.syntax(),\n         }\n     }\n }"}, {"sha": "763fd20f40a748fd491b68ccd1ed7c767d6bcf6b", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "patch": "@@ -348,7 +348,6 @@ pub struct BlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for BlockExpr {}\n-impl ast::ModuleItemOwner for BlockExpr {}\n impl BlockExpr {\n     pub fn label(&self) -> Option<Label> { support::child(&self.syntax) }\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n@@ -1395,8 +1394,8 @@ impl ast::AttrsOwner for GenericParam {}\n pub enum Stmt {\n     LetStmt(LetStmt),\n     ExprStmt(ExprStmt),\n+    Item(Item),\n }\n-impl ast::AttrsOwner for Stmt {}\n impl AstNode for SourceFile {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == SOURCE_FILE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3380,6 +3379,9 @@ impl From<LetStmt> for Stmt {\n impl From<ExprStmt> for Stmt {\n     fn from(node: ExprStmt) -> Stmt { Stmt::ExprStmt(node) }\n }\n+impl From<Item> for Stmt {\n+    fn from(node: Item) -> Stmt { Stmt::Item(node) }\n+}\n impl std::fmt::Display for Item {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "d9f358513353a63a43bb571be2a273ef86f387f6", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "patch": "@@ -694,6 +694,9 @@ fn extract_struct_trait(node: &mut AstNodeSrc, trait_name: &str, methods: &[&str\n \n fn extract_enum_traits(ast: &mut AstSrc) {\n     for enm in &mut ast.enums {\n+        if enm.name == \"Stmt\" {\n+            continue;\n+        }\n         let nodes = &ast.nodes;\n         let mut variant_traits = enm\n             .variants"}, {"sha": "17de36d7a21eba6dcd809a4f642000588e907491", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/d4d986c7f850e1f535bb4c22e3a7f7fba5483628/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "patch": "@@ -197,6 +197,7 @@ Attr =\n Stmt =\n   LetStmt\n | ExprStmt\n+| Item\n \n LetStmt =\n   Attr* 'let' Pat (':' Type)?\n@@ -316,7 +317,6 @@ Label =\n BlockExpr =\n   Attr* Label\n   '{'\n-    Item*\n     statements:Stmt*\n     Expr?\n   '}'"}]}