{"sha": "1df64450ecf9d2c458b5789ef823203fcdbd60a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZjY0NDUwZWNmOWQyYzQ1OGI1Nzg5ZWY4MjMyMDNmY2RiZDYwYTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-09T02:15:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-09T02:15:50Z"}, "message": "Auto merge of #36321 - uweigand:enum-abi, r=eddyb\n\nFollow target ABI sign-/zero-extension rules for enum types\n\nWhile attempting to port Rust to s390x, I ran into an ABI violation\n(that caused rust_eh_personality to be miscompiled, breaking unwinding).\nThe problem is that this function returns an enum type, which is\nsupposed to be sign-extended according to the s390x ABI.  However,\ncommon code would ignore target sign-/zero-extension rules for any\ntypes that do not satisfy is_integral(), which includes enums.\n\nFor the general case of Rust enum types, which map to structure types\nwith a discriminant, that seems correct.  However, in the special case\nof simple enums that map directly to C enum types (i.e. LLVM integers),\nthis is incorrect; we must follow the target extension rules for those.\n\nSigned-off-by: Ulrich Weigand <ulrich.weigand@de.ibm.com>", "tree": {"sha": "c7e948a1fe232729fa58901f5c0fca28d5b6659e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7e948a1fe232729fa58901f5c0fca28d5b6659e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1df64450ecf9d2c458b5789ef823203fcdbd60a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1df64450ecf9d2c458b5789ef823203fcdbd60a9", "html_url": "https://github.com/rust-lang/rust/commit/1df64450ecf9d2c458b5789ef823203fcdbd60a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1df64450ecf9d2c458b5789ef823203fcdbd60a9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "378195665cc365720c784752877d5b1242c38ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/378195665cc365720c784752877d5b1242c38ed8", "html_url": "https://github.com/rust-lang/rust/commit/378195665cc365720c784752877d5b1242c38ed8"}, {"sha": "ce3cecf116a2d691c53f37c1d257a416ecfd381b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3cecf116a2d691c53f37c1d257a416ecfd381b", "html_url": "https://github.com/rust-lang/rust/commit/ce3cecf116a2d691c53f37c1d257a416ecfd381b"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "42289ec094f320cf43dce8a6cd386e01e25a3177", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1df64450ecf9d2c458b5789ef823203fcdbd60a9/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df64450ecf9d2c458b5789ef823203fcdbd60a9/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=1df64450ecf9d2c458b5789ef823203fcdbd60a9", "patch": "@@ -35,6 +35,7 @@ use std::cmp;\n \n pub use syntax::abi::Abi;\n pub use rustc::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n+use rustc::ty::layout::Layout;\n \n #[derive(Clone, Copy, PartialEq, Debug)]\n enum ArgKind {\n@@ -317,6 +318,11 @@ impl FnType {\n                 if ty.is_integral() {\n                     arg.signedness = Some(ty.is_signed());\n                 }\n+                // Rust enum types that map onto C enums also need to follow\n+                // the target ABI zero-/sign-extension rules.\n+                if let Layout::CEnum { signed, .. } = *ccx.layout_of(ty) {\n+                    arg.signedness = Some(signed);\n+                }\n                 if llsize_of_real(ccx, arg.ty) == 0 {\n                     // For some forsaken reason, x86_64-pc-windows-gnu\n                     // doesn't ignore zero-sized struct arguments."}]}