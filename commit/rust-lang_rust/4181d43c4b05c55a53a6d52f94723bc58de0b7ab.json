{"sha": "4181d43c4b05c55a53a6d52f94723bc58de0b7ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxODFkNDNjNGIwNWM1NWE1M2E2ZDUyZjk0NzIzYmM1OGRlMGI3YWI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-03-11T04:33:04Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-03-11T04:33:04Z"}, "message": "Remove inline silliness from debug builders\n\nTurns out it's basically a wash, codegen wise.", "tree": {"sha": "2862c48f41a72878b5db3e0be0e0a56235ba7f5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2862c48f41a72878b5db3e0be0e0a56235ba7f5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4181d43c4b05c55a53a6d52f94723bc58de0b7ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4181d43c4b05c55a53a6d52f94723bc58de0b7ab", "html_url": "https://github.com/rust-lang/rust/commit/4181d43c4b05c55a53a6d52f94723bc58de0b7ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4181d43c4b05c55a53a6d52f94723bc58de0b7ab/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3181213f912f7ce678f902bb01eb681204c41fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3181213f912f7ce678f902bb01eb681204c41fc4", "html_url": "https://github.com/rust-lang/rust/commit/3181213f912f7ce678f902bb01eb681204c41fc4"}], "stats": {"total": 71, "additions": 11, "deletions": 60}, "files": [{"sha": "75afd4722675a6dbe79412cd68f9f678a63f3d6a", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 11, "deletions": 60, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4181d43c4b05c55a53a6d52f94723bc58de0b7ab/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4181d43c4b05c55a53a6d52f94723bc58de0b7ab/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=4181d43c4b05c55a53a6d52f94723bc58de0b7ab", "patch": "@@ -73,14 +73,7 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str)\n impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// Adds a new field to the generated struct output.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    #[inline]\n     pub fn field(mut self, name: &str, value: &fmt::Debug) -> DebugStruct<'a, 'b> {\n-        self.field_inner(name, value);\n-        self\n-    }\n-\n-    #[inline(never)]\n-    fn field_inner(&mut self, name: &str, value: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n                 \",\"\n@@ -97,19 +90,13 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n         });\n \n         self.has_fields = true;\n+        self\n     }\n \n     /// Consumes the `DebugStruct`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    #[inline]\n     pub fn finish(mut self) -> fmt::Result {\n-        self.finish_inner();\n-        self.result\n-    }\n-\n-    #[inline(never)]\n-    fn finish_inner(&mut self) {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n                 if self.is_pretty() {\n@@ -119,6 +106,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n                 }\n             });\n         }\n+        self.result\n     }\n \n     fn is_pretty(&self) -> bool {\n@@ -148,14 +136,7 @@ pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> D\n impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// Adds a new field to the generated tuple struct output.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    #[inline]\n     pub fn field(mut self, value: &fmt::Debug) -> DebugTuple<'a, 'b> {\n-        self.field_inner(value);\n-        self\n-    }\n-\n-    #[inline(never)]\n-    fn field_inner(&mut self, value: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             let (prefix, space) = if self.has_fields {\n                 (\",\", \" \")\n@@ -172,19 +153,13 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n         });\n \n         self.has_fields = true;\n+        self\n     }\n \n     /// Consumes the `DebugTuple`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    #[inline]\n     pub fn finish(mut self) -> fmt::Result {\n-        self.finish_inner();\n-        self.result\n-    }\n-\n-    #[inline(never)]\n-    fn finish_inner(&mut self) {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n                 if self.is_pretty() {\n@@ -194,6 +169,7 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n                 }\n             });\n         }\n+        self.result\n     }\n \n     fn is_pretty(&self) -> bool {\n@@ -223,14 +199,7 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> Deb\n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    #[inline]\n     pub fn entry(mut self, entry: &fmt::Debug) -> DebugSet<'a, 'b> {\n-        self.entry_inner(entry);\n-        self\n-    }\n-\n-    #[inline(never)]\n-    fn entry_inner(&mut self, entry: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n                 \",\"\n@@ -247,27 +216,21 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n         });\n \n         self.has_fields = true;\n+        self\n     }\n \n     /// Consumes the `DebugSet`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    #[inline]\n     pub fn finish(mut self) -> fmt::Result {\n-        self.finish_inner();\n-        self.result\n-    }\n-\n-    #[inline(never)]\n-    fn finish_inner(&mut self) {\n-        self.result = self.result.and_then(|_| {\n+        self.result.and_then(|_| {\n             let end = match (self.has_fields, self.is_pretty()) {\n                 (false, _) => \"}\",\n                 (true, false) => \" }\",\n                 (true, true) => \"\\n}\",\n             };\n             self.fmt.write_str(end)\n-        });\n+        })\n     }\n \n     fn is_pretty(&self) -> bool {\n@@ -297,14 +260,7 @@ pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> Deb\n impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Adds a new entry to the map output.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    #[inline]\n     pub fn entry(mut self, key: &fmt::Debug, value: &fmt::Debug) -> DebugMap<'a, 'b> {\n-        self.entry_inner(key, value);\n-        self\n-    }\n-\n-    #[inline(never)]\n-    fn entry_inner(&mut self, key: &fmt::Debug, value: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n                 \",\"\n@@ -321,27 +277,22 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n         });\n \n         self.has_fields = true;\n+\n+        self\n     }\n \n     /// Consumes the `DebugMap`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    #[inline]\n     pub fn finish(mut self) -> fmt::Result {\n-        self.finish_inner();\n-        self.result\n-    }\n-\n-    #[inline(never)]\n-    fn finish_inner(&mut self) {\n-        self.result = self.result.and_then(|_| {\n+        self.result.and_then(|_| {\n             let end = match (self.has_fields, self.is_pretty()) {\n                 (false, _) => \"}\",\n                 (true, false) => \" }\",\n                 (true, true) => \"\\n}\",\n             };\n             self.fmt.write_str(end)\n-        });\n+        })\n     }\n \n     fn is_pretty(&self) -> bool {"}]}