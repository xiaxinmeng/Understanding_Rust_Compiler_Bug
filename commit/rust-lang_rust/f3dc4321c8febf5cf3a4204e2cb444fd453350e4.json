{"sha": "f3dc4321c8febf5cf3a4204e2cb444fd453350e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZGM0MzIxYzhmZWJmNWNmM2E0MjA0ZTJjYjQ0NGZkNDUzMzUwZTQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-02T15:44:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-02T15:44:00Z"}, "message": "Account for generics in extract_struct_from_enum_variant", "tree": {"sha": "cb0571fffe755362db71e9deabc54262d725e9a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0571fffe755362db71e9deabc54262d725e9a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3dc4321c8febf5cf3a4204e2cb444fd453350e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3dc4321c8febf5cf3a4204e2cb444fd453350e4", "html_url": "https://github.com/rust-lang/rust/commit/f3dc4321c8febf5cf3a4204e2cb444fd453350e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3dc4321c8febf5cf3a4204e2cb444fd453350e4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbdfeeeff91b5e42d8687df09dda1d29f99b34f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdfeeeff91b5e42d8687df09dda1d29f99b34f8", "html_url": "https://github.com/rust-lang/rust/commit/dbdfeeeff91b5e42d8687df09dda1d29f99b34f8"}], "stats": {"total": 68, "additions": 48, "deletions": 20}, "files": [{"sha": "730fc28bfcb7a1166fd8e43c9f368e80bd07b3f9", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 46, "deletions": 17, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f3dc4321c8febf5cf3a4204e2cb444fd453350e4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3dc4321c8febf5cf3a4204e2cb444fd453350e4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=f3dc4321c8febf5cf3a4204e2cb444fd453350e4", "patch": "@@ -11,10 +11,11 @@ use ide_db::{\n     search::FileReference,\n     RootDatabase,\n };\n+use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n     algo::find_node_at_offset,\n-    ast::{self, make, AstNode, NameOwner, VisibilityOwner},\n+    ast::{self, make, AstNode, GenericParamsOwner, NameOwner, TypeBoundsOwner, VisibilityOwner},\n     ted, SyntaxNode, T,\n };\n \n@@ -100,12 +101,12 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 });\n             }\n \n-            let def = create_struct_def(variant_name.clone(), &field_list, enum_ast.visibility());\n+            let def = create_struct_def(variant_name.clone(), &field_list, &enum_ast);\n             let start_offset = &variant.parent_enum().syntax().clone();\n             ted::insert_raw(ted::Position::before(start_offset), def.syntax());\n             ted::insert_raw(ted::Position::before(start_offset), &make::tokens::blank_line());\n \n-            update_variant(&variant);\n+            update_variant(&variant, enum_ast.generic_param_list());\n         },\n     )\n }\n@@ -149,7 +150,7 @@ fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &Va\n fn create_struct_def(\n     variant_name: ast::Name,\n     field_list: &Either<ast::RecordFieldList, ast::TupleFieldList>,\n-    visibility: Option<ast::Visibility>,\n+    enum_: &ast::Enum,\n ) -> ast::Struct {\n     let pub_vis = make::visibility_pub();\n \n@@ -184,12 +185,30 @@ fn create_struct_def(\n         }\n     };\n \n-    make::struct_(visibility, variant_name, None, field_list).clone_for_update()\n+    // FIXME: This uses all the generic params of the enum, but the variant might not use all of them.\n+    make::struct_(enum_.visibility(), variant_name, enum_.generic_param_list(), field_list)\n+        .clone_for_update()\n }\n \n-fn update_variant(variant: &ast::Variant) -> Option<()> {\n+fn update_variant(variant: &ast::Variant, generic: Option<ast::GenericParamList>) -> Option<()> {\n     let name = variant.name()?;\n-    let tuple_field = make::tuple_field(None, make::ty(&name.text()));\n+    let ty = match generic {\n+        // FIXME: This uses all the generic params of the enum, but the variant might not use all of them.\n+        Some(gpl) => {\n+            let gpl = gpl.clone_for_update();\n+            gpl.generic_params().for_each(|gp| {\n+                match gp {\n+                    ast::GenericParam::LifetimeParam(it) => it.type_bound_list(),\n+                    ast::GenericParam::TypeParam(it) => it.type_bound_list(),\n+                    ast::GenericParam::ConstParam(_) => return,\n+                }\n+                .map(|it| it.remove());\n+            });\n+            make::ty(&format!(\"{}<{}>\", name.text(), gpl.generic_params().join(\", \")))\n+        }\n+        None => make::ty(&name.text()),\n+    };\n+    let tuple_field = make::tuple_field(None, ty);\n     let replacement = make::variant(\n         name,\n         Some(ast::FieldList::TupleFieldList(make::tuple_field_list(iter::once(tuple_field)))),\n@@ -208,10 +227,9 @@ fn apply_references(\n     if let Some((scope, path)) = import {\n         insert_use(&scope, mod_path_to_ast(&path), insert_use_cfg);\n     }\n-    ted::insert_raw(\n-        ted::Position::before(segment.syntax()),\n-        make::path_from_text(&format!(\"{}\", segment)).clone_for_update().syntax(),\n-    );\n+    // deep clone to prevent cycle\n+    let path = make::path_from_segments(iter::once(segment.clone_subtree()), false);\n+    ted::insert_raw(ted::Position::before(segment.syntax()), path.clone_for_update().syntax());\n     ted::insert_raw(ted::Position::before(segment.syntax()), make::token(T!['(']));\n     ted::insert_raw(ted::Position::after(&node), make::token(T![')']));\n }\n@@ -278,6 +296,12 @@ mod tests {\n \n     use super::*;\n \n+    fn check_not_applicable(ra_fixture: &str) {\n+        let fixture =\n+            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n+        check_assist_not_applicable(extract_struct_from_enum_variant, &fixture)\n+    }\n+\n     #[test]\n     fn test_extract_struct_several_fields_tuple() {\n         check_assist(\n@@ -311,6 +335,17 @@ enum A { One(One) }\"#,\n         );\n     }\n \n+    #[test]\n+    fn test_extract_struct_keeps_generics() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r\"enum En<T> { Var { a: T$0 } }\",\n+            r#\"struct Var<T>{ pub a: T }\n+\n+enum En<T> { Var(Var<T>) }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_extract_struct_keep_comments_and_attrs_one_field_named() {\n         check_assist(\n@@ -610,12 +645,6 @@ fn foo() {\n         );\n     }\n \n-    fn check_not_applicable(ra_fixture: &str) {\n-        let fixture =\n-            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n-        check_assist_not_applicable(extract_struct_from_enum_variant, &fixture)\n-    }\n-\n     #[test]\n     fn test_extract_enum_not_applicable_for_element_with_no_fields() {\n         check_not_applicable(\"enum A { $0One }\");"}, {"sha": "4c3c9661d44d2ac3d3a31b89fbbdca11ee1f9913", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3dc4321c8febf5cf3a4204e2cb444fd453350e4/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3dc4321c8febf5cf3a4204e2cb444fd453350e4/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=f3dc4321c8febf5cf3a4204e2cb444fd453350e4", "patch": "@@ -580,12 +580,11 @@ pub fn fn_(\n pub fn struct_(\n     visibility: Option<ast::Visibility>,\n     strukt_name: ast::Name,\n-    type_params: Option<ast::GenericParamList>,\n+    generic_param_list: Option<ast::GenericParamList>,\n     field_list: ast::FieldList,\n ) -> ast::Struct {\n     let semicolon = if matches!(field_list, ast::FieldList::TupleFieldList(_)) { \";\" } else { \"\" };\n-    let type_params =\n-        if let Some(type_params) = type_params { format!(\"<{}>\", type_params) } else { \"\".into() };\n+    let type_params = generic_param_list.map_or_else(String::new, |it| it.to_string());\n     let visibility = match visibility {\n         None => String::new(),\n         Some(it) => format!(\"{} \", it),"}]}