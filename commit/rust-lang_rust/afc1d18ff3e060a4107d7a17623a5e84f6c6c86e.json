{"sha": "afc1d18ff3e060a4107d7a17623a5e84f6c6c86e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYzFkMThmZjNlMDYwYTQxMDdkN2ExNzYyM2E1ZTg0ZjZjNmM4NmU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-12T15:18:29Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-12T15:18:42Z"}, "message": "Fix post-rebase issues", "tree": {"sha": "aa1bcef403b35f867b232d46b1332b927913a4c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa1bcef403b35f867b232d46b1332b927913a4c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afc1d18ff3e060a4107d7a17623a5e84f6c6c86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afc1d18ff3e060a4107d7a17623a5e84f6c6c86e", "html_url": "https://github.com/rust-lang/rust/commit/afc1d18ff3e060a4107d7a17623a5e84f6c6c86e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afc1d18ff3e060a4107d7a17623a5e84f6c6c86e/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acf5f43639c489022b5ff3273fc6324dbf2ef017", "url": "https://api.github.com/repos/rust-lang/rust/commits/acf5f43639c489022b5ff3273fc6324dbf2ef017", "html_url": "https://github.com/rust-lang/rust/commit/acf5f43639c489022b5ff3273fc6324dbf2ef017"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "950ec7d051de95a2ffcc4230fc9c0e402a7efb47", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/afc1d18ff3e060a4107d7a17623a5e84f6c6c86e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc1d18ff3e060a4107d7a17623a5e84f6c6c86e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=afc1d18ff3e060a4107d7a17623a5e84f6c6c86e", "patch": "@@ -4,8 +4,8 @@ use crate::{\n };\n use hir::{\n     db::{DefDatabase, HirDatabase},\n-    AssocContainerId, AssocItem, Crate, Function, ModPath, Module, ModuleDef, PathResolution,\n-    SourceAnalyzer, Trait, Type,\n+    AsAssocItem, AssocItem, AssocItemContainer, Crate, Function, ModPath, Module, ModuleDef,\n+    PathResolution, SourceAnalyzer, Trait, Type,\n };\n use ra_ide_db::{imports_locator::ImportsLocator, RootDatabase};\n use ra_prof::profile;\n@@ -157,13 +157,12 @@ impl AutoImportAssets {\n                                 &trait_candidates,\n                                 None,\n                                 |_, assoc| {\n-                                    if let AssocContainerId::TraitId(trait_id) = assoc.container(db)\n+                                    if let AssocItemContainer::Trait(appropriate_trait) =\n+                                        assoc.container(db)\n                                     {\n                                         applicable_traits.push(\n-                                            self.module_with_name_to_import.find_use_path(\n-                                                db,\n-                                                ModuleDef::Trait(trait_id.into()),\n-                                            ),\n+                                            self.module_with_name_to_import\n+                                                .find_use_path(db, appropriate_trait.into()),\n                                         );\n                                     };\n                                     None::<()>\n@@ -187,15 +186,15 @@ impl AutoImportAssets {\n                                 current_crate,\n                                 &trait_candidates,\n                                 None,\n-                                |_, funciton| {\n-                                    if let AssocContainerId::TraitId(trait_id) =\n-                                        funciton.container(db)\n+                                |_, function| {\n+                                    if let AssocItemContainer::Trait(appropriate_trait) = function\n+                                        .as_assoc_item(db)\n+                                        .expect(\"Function is an assoc item\")\n+                                        .container(db)\n                                     {\n                                         applicable_traits.push(\n-                                            self.module_with_name_to_import.find_use_path(\n-                                                db,\n-                                                ModuleDef::Trait(trait_id.into()),\n-                                            ),\n+                                            self.module_with_name_to_import\n+                                                .find_use_path(db, appropriate_trait.into()),\n                                         );\n                                     };\n                                     None::<()>"}, {"sha": "cf3b0451166f8c803bcb086fa3790a779126a899", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/afc1d18ff3e060a4107d7a17623a5e84f6c6c86e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc1d18ff3e060a4107d7a17623a5e84f6c6c86e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=afc1d18ff3e060a4107d7a17623a5e84f6c6c86e", "patch": "@@ -123,7 +123,7 @@ impl_froms!(\n );\n \n pub use hir_def::{\n-    attr::Attrs, item_scope::ItemInNs, visibility::Visibility, AssocContainerId, AssocItemId,\n+    attr::Attrs, item_scope::ItemInNs, visibility::Visibility, AssocItemId, AssocItemLoc,\n };\n use rustc_hash::FxHashSet;\n \n@@ -548,10 +548,6 @@ impl Function {\n         let mut validator = ExprValidator::new(self.id, infer, sink);\n         validator.validate_body(db);\n     }\n-\n-    pub fn container(self, db: &impl DefDatabase) -> AssocContainerId {\n-        self.id.lookup(db).container\n-    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -701,11 +697,16 @@ impl AssocItem {\n         }\n     }\n \n-    pub fn container(self, db: &impl DefDatabase) -> AssocContainerId {\n-        match self {\n-            AssocItem::Function(f) => f.container(db),\n-            AssocItem::Const(c) => c.id.lookup(db).container,\n-            AssocItem::TypeAlias(t) => t.id.lookup(db).container,\n+    pub fn container(self, db: &impl DefDatabase) -> AssocItemContainer {\n+        let container = match self {\n+            AssocItem::Function(it) => it.id.lookup(db).container,\n+            AssocItem::Const(it) => it.id.lookup(db).container,\n+            AssocItem::TypeAlias(it) => it.id.lookup(db).container,\n+        };\n+        match container {\n+            AssocContainerId::TraitId(id) => AssocItemContainer::Trait(id.into()),\n+            AssocContainerId::ImplId(id) => AssocItemContainer::ImplBlock(id.into()),\n+            AssocContainerId::ContainerId(_) => panic!(\"invalid AssocItem\"),\n         }\n     }\n }\n@@ -818,7 +819,7 @@ impl TypeParam {\n     }\n }\n \n-// FIXME: rename to `ImplBlock`\n+// FIXME: rename from `ImplBlock` to `Impl`\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImplBlock {\n     pub(crate) id: ImplId,"}]}