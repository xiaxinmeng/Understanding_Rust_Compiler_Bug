{"sha": "5562663a6cb010a3c155c873b2325c29033713f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NjI2NjNhNmNiMDEwYTNjMTU1Yzg3M2IyMzI1YzI5MDMzNzEzZjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-01T10:07:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-04T13:51:12Z"}, "message": "make `resolve_regions_and_report_errors` take an `OutlivesEnv`\n\nThis revealed some shortcomings, one of which is fixed. Fixes #45937.", "tree": {"sha": "f8b047c9a52c477593607728886f2d4e4a34eb7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8b047c9a52c477593607728886f2d4e4a34eb7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5562663a6cb010a3c155c873b2325c29033713f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5562663a6cb010a3c155c873b2325c29033713f7", "html_url": "https://github.com/rust-lang/rust/commit/5562663a6cb010a3c155c873b2325c29033713f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5562663a6cb010a3c155c873b2325c29033713f7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abd7d8813995337ff28c123db37011ceffcb3b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/abd7d8813995337ff28c123db37011ceffcb3b26", "html_url": "https://github.com/rust-lang/rust/commit/abd7d8813995337ff28c123db37011ceffcb3b26"}], "stats": {"total": 161, "additions": 108, "deletions": 53}, "files": [{"sha": "96a980a15457e1715f8278960f8cdf90950015ed", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=5562663a6cb010a3c155c873b2325c29033713f7", "patch": "@@ -44,7 +44,7 @@ use self::higher_ranked::HrMatchResult;\n use self::region_constraints::{RegionConstraintCollector, RegionSnapshot};\n use self::region_constraints::{GenericKind, VerifyBound, RegionConstraintData, VarOrigins};\n use self::lexical_region_resolve::LexicalRegionResolutions;\n-use self::outlives::free_region_map::FreeRegionMap;\n+use self::outlives::env::OutlivesEnvironment;\n use self::type_variable::TypeVariableOrigin;\n use self::unify_key::ToType;\n \n@@ -66,8 +66,6 @@ mod sub;\n pub mod type_variable;\n pub mod unify_key;\n \n-pub use self::outlives::env::OutlivesEnvironment;\n-\n #[must_use]\n pub struct InferOk<'tcx, T> {\n     pub value: T,\n@@ -1158,15 +1156,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn resolve_regions_and_report_errors(&self,\n                                              region_context: DefId,\n                                              region_map: &region::ScopeTree,\n-                                             free_regions: &FreeRegionMap<'tcx>) {\n+                                             outlives_env: &OutlivesEnvironment<'tcx>) {\n         assert!(self.is_tainted_by_errors() || self.region_obligations.borrow().is_empty(),\n                 \"region_obligations not empty: {:#?}\",\n                 self.region_obligations.borrow());\n \n         let region_rels = &RegionRelations::new(self.tcx,\n                                                 region_context,\n                                                 region_map,\n-                                                free_regions);\n+                                                outlives_env.free_region_map());\n         let (var_origins, data) = self.region_constraints.borrow_mut()\n                                                          .take()\n                                                          .expect(\"regions already resolved\")"}, {"sha": "9f00fc78cc0a4cc331f2aa3c55b39bd3471c4690", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=5562663a6cb010a3c155c873b2325c29033713f7", "patch": "@@ -44,14 +44,15 @@ pub struct OutlivesEnvironment<'tcx> {\n \n impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n     pub fn new(param_env: ty::ParamEnv<'tcx>) -> Self {\n-        let mut free_region_map = FreeRegionMap::new();\n-        free_region_map.relate_free_regions_from_predicates(&param_env.caller_bounds);\n-\n-        OutlivesEnvironment {\n+        let mut env = OutlivesEnvironment {\n             param_env,\n-            free_region_map,\n+            free_region_map: FreeRegionMap::new(),\n             region_bound_pairs: vec![],\n-        }\n+        };\n+\n+        env.init_free_regions_from_predicates();\n+\n+        env\n     }\n \n     /// Borrows current value of the `free_region_map`.\n@@ -183,4 +184,27 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n             }\n         }\n     }\n+\n+    fn init_free_regions_from_predicates(&mut self) {\n+        debug!(\"init_free_regions_from_predicates()\");\n+        for predicate in self.param_env.caller_bounds {\n+            debug!(\"init_free_regions_from_predicates: predicate={:?}\", predicate);\n+            match *predicate {\n+                ty::Predicate::Projection(..) |\n+                ty::Predicate::Trait(..) |\n+                ty::Predicate::Equate(..) |\n+                ty::Predicate::Subtype(..) |\n+                ty::Predicate::WellFormed(..) |\n+                ty::Predicate::ObjectSafe(..) |\n+                ty::Predicate::ClosureKind(..) |\n+                ty::Predicate::TypeOutlives(..) |\n+                ty::Predicate::ConstEvaluatable(..) => {\n+                    // No region bounds here\n+                }\n+                ty::Predicate::RegionOutlives(ty::Binder(ty::OutlivesPredicate(r_a, r_b))) => {\n+                    self.free_region_map.relate_regions(r_b, r_a);\n+                }\n+            }\n+        }\n+    }\n }"}, {"sha": "36e0d6dba5e877c556f92cfe394374d7565e4c60", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=5562663a6cb010a3c155c873b2325c29033713f7", "patch": "@@ -29,31 +29,8 @@ impl<'tcx> FreeRegionMap<'tcx> {\n         self.relation.is_empty()\n     }\n \n-    pub fn relate_free_regions_from_predicates(&mut self,\n-                                               predicates: &[ty::Predicate<'tcx>]) {\n-        debug!(\"relate_free_regions_from_predicates(predicates={:?})\", predicates);\n-        for predicate in predicates {\n-            match *predicate {\n-                ty::Predicate::Projection(..) |\n-                ty::Predicate::Trait(..) |\n-                ty::Predicate::Equate(..) |\n-                ty::Predicate::Subtype(..) |\n-                ty::Predicate::WellFormed(..) |\n-                ty::Predicate::ObjectSafe(..) |\n-                ty::Predicate::ClosureKind(..) |\n-                ty::Predicate::TypeOutlives(..) |\n-                ty::Predicate::ConstEvaluatable(..) => {\n-                    // No region bounds here\n-                }\n-                ty::Predicate::RegionOutlives(ty::Binder(ty::OutlivesPredicate(r_a, r_b))) => {\n-                    self.relate_regions(r_b, r_a);\n-                }\n-            }\n-        }\n-    }\n-\n-    /// Record that `'sup:'sub`. Or, put another way, `'sub <= 'sup`.\n-    /// (with the exception that `'static: 'x` is not notable)\n+    // Record that `'sup:'sub`. Or, put another way, `'sub <= 'sup`.\n+    // (with the exception that `'static: 'x` is not notable)\n     pub fn relate_regions(&mut self, sub: Region<'tcx>, sup: Region<'tcx>) {\n         debug!(\"relate_regions(sub={:?}, sup={:?})\", sub, sup);\n         if is_free_or_static(sub) && is_free(sup) {"}, {"sha": "d6f8a5f9cc6a152a58a203e698cc0c47cb0c609c", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=5562663a6cb010a3c155c873b2325c29033713f7", "patch": "@@ -17,7 +17,7 @@ pub use self::ObligationCauseCode::*;\n \n use hir;\n use hir::def_id::DefId;\n-use infer::outlives::free_region_map::FreeRegionMap;\n+use infer::outlives::env::OutlivesEnvironment;\n use middle::const_val::ConstEvalErr;\n use middle::region;\n use ty::subst::Substs;\n@@ -554,9 +554,13 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             predicates);\n \n         let region_scope_tree = region::ScopeTree::default();\n-        let free_regions = FreeRegionMap::new();\n \n-        infcx.resolve_regions_and_report_errors(region_context, &region_scope_tree, &free_regions);\n+        // We can use the `elaborated_env` here; the region code only\n+        // cares about declarations like `'a: 'b`.\n+        let outlives_env = OutlivesEnvironment::new(elaborated_env);\n+\n+        infcx.resolve_regions_and_report_errors(region_context, &region_scope_tree, &outlives_env);\n+\n         let predicates = match infcx.fully_resolve(&predicates) {\n             Ok(predicates) => predicates,\n             Err(fixup_err) => {"}, {"sha": "0818b929ee7ad0f07f3100ba3bf2cb468fcece83", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=5562663a6cb010a3c155c873b2325c29033713f7", "patch": "@@ -17,14 +17,14 @@ use driver;\n use rustc_lint;\n use rustc_resolve::MakeGlobMap;\n use rustc_trans;\n-use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::region;\n use rustc::middle::resolve_lifetime;\n use rustc::ty::subst::{Kind, Subst};\n use rustc::traits::{ObligationCause, Reveal};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::maps::OnDiskCache;\n use rustc::infer::{self, InferOk, InferResult};\n+use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc_metadata::cstore::CStore;\n use rustc::hir::map as hir_map;\n@@ -162,14 +162,15 @@ fn test_env<F>(source_string: &str,\n                              |tcx| {\n         tcx.infer_ctxt().enter(|infcx| {\n             let mut region_scope_tree = region::ScopeTree::default();\n+            let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n             body(Env {\n                 infcx: &infcx,\n                 region_scope_tree: &mut region_scope_tree,\n-                param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n+                param_env: param_env,\n             });\n-            let free_regions = FreeRegionMap::new();\n+            let outlives_env = OutlivesEnvironment::new(param_env);\n             let def_id = tcx.hir.local_def_id(ast::CRATE_NODE_ID);\n-            infcx.resolve_regions_and_report_errors(def_id, &region_scope_tree, &free_regions);\n+            infcx.resolve_regions_and_report_errors(def_id, &region_scope_tree, &outlives_env);\n             assert_eq!(tcx.sess.err_count(), expected_err_count);\n         });\n     });"}, {"sha": "55700c452e57bced37f5f58402d696fdec52c3b5", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=5562663a6cb010a3c155c873b2325c29033713f7", "patch": "@@ -12,11 +12,11 @@ use check::regionck::RegionCtxt;\n \n use hir::def_id::DefId;\n use rustc::infer::{self, InferOk};\n-use rustc::infer::outlives::free_region_map::FreeRegionMap;\n+use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::middle::region;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::traits::{self, ObligationCause};\n+use rustc::traits::{self, Reveal, ObligationCause};\n use util::common::ErrorReported;\n use util::nodemap::FxHashSet;\n \n@@ -115,8 +115,18 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n         }\n \n         let region_scope_tree = region::ScopeTree::default();\n-        let free_regions = FreeRegionMap::new();\n-        infcx.resolve_regions_and_report_errors(drop_impl_did, &region_scope_tree, &free_regions);\n+\n+        // NB. It seems a bit... suspicious to use an empty param-env\n+        // here. The correct thing, I imagine, would be\n+        // `OutlivesEnvironment::new(impl_param_env)`, which would\n+        // allow region solving to take any `a: 'b` relations on the\n+        // impl into account. But I could not create a test case where\n+        // it did the wrong thing, so I chose to preserve existing\n+        // behavior, since it ought to be simply more\n+        // conservative. -nmatsakis\n+        let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty(Reveal::UserFacing));\n+\n+        infcx.resolve_regions_and_report_errors(drop_impl_did, &region_scope_tree, &outlives_env);\n         Ok(())\n     })\n }"}, {"sha": "7ef6027772be2deeb5658a60f84f40096f37ff06", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=5562663a6cb010a3c155c873b2325c29033713f7", "patch": "@@ -90,7 +90,8 @@ use middle::region;\n use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};\n-use rustc::infer::{self, OutlivesEnvironment};\n+use rustc::infer;\n+use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::ty::adjustment;\n use rustc::ty::outlives::Component;\n \n@@ -553,7 +554,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     fn resolve_regions_and_report_errors(&self) {\n         self.fcx.resolve_regions_and_report_errors(self.subject_def_id,\n                                                    &self.region_scope_tree,\n-                                                   self.outlives_environment.free_region_map());\n+                                                   &self.outlives_environment);\n     }\n \n     fn constrain_bindings_in_pat(&mut self, pat: &hir::Pat) {"}, {"sha": "d63980eaa506b8d79912cab5b68add9df5fc5319", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5562663a6cb010a3c155c873b2325c29033713f7/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=5562663a6cb010a3c155c873b2325c29033713f7", "patch": "@@ -11,7 +11,7 @@\n //! Check properties that are required by built-in traits and set\n //! up data structures required by type-checking/translation.\n \n-use rustc::infer::outlives::free_region_map::FreeRegionMap;\n+use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::middle::region;\n use rustc::middle::lang_items::UnsizeTraitLangItem;\n \n@@ -391,9 +391,12 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Finally, resolve all regions.\n         let region_scope_tree = region::ScopeTree::default();\n-        let mut free_regions = FreeRegionMap::new();\n-        free_regions.relate_free_regions_from_predicates(&param_env.caller_bounds);\n-        infcx.resolve_regions_and_report_errors(impl_did, &region_scope_tree, &free_regions);\n+        let outlives_env = OutlivesEnvironment::new(param_env);\n+        infcx.resolve_regions_and_report_errors(\n+            impl_did,\n+            &region_scope_tree,\n+            &outlives_env,\n+        );\n \n         CoerceUnsizedInfo {\n             custom_kind: kind"}, {"sha": "68642598ed2df765ed776145d546e125309b7964", "filename": "src/test/compile-fail/regions-normalize-in-where-clause-list.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5562663a6cb010a3c155c873b2325c29033713f7/src%2Ftest%2Fcompile-fail%2Fregions-normalize-in-where-clause-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5562663a6cb010a3c155c873b2325c29033713f7/src%2Ftest%2Fcompile-fail%2Fregions-normalize-in-where-clause-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-normalize-in-where-clause-list.rs?ref=5562663a6cb010a3c155c873b2325c29033713f7", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to normalize in the list of where-clauses,\n+// even if `'a: 'b` is required.\n+\n+trait Project<'a, 'b> {\n+    type Item;\n+}\n+\n+impl<'a, 'b> Project<'a, 'b> for ()\n+    where 'a: 'b\n+{\n+    type Item = ();\n+}\n+\n+// No error here, we have 'a: 'b. We used to report an error here\n+// though, see https://github.com/rust-lang/rust/issues/45937.\n+fn foo<'a: 'b, 'b>()\n+    where <() as Project<'a, 'b>>::Item : Eq\n+{\n+}\n+\n+// Here we get an error: we need `'a: 'b`.\n+fn bar<'a, 'b>() //~ ERROR cannot infer\n+    where <() as Project<'a, 'b>>::Item : Eq\n+{\n+}\n+\n+fn main() { }"}]}