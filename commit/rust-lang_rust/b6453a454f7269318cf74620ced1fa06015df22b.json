{"sha": "b6453a454f7269318cf74620ced1fa06015df22b", "node_id": "C_kwDOAAsO6NoAKGI2NDUzYTQ1NGY3MjY5MzE4Y2Y3NDYyMGNlZDFmYTA2MDE1ZGYyMmI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-28T02:56:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-28T02:56:00Z"}, "message": "Trim more paths in obligation types", "tree": {"sha": "27eea8aaedb580d96fb68c37fd0debac5fa75eee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27eea8aaedb580d96fb68c37fd0debac5fa75eee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6453a454f7269318cf74620ced1fa06015df22b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6453a454f7269318cf74620ced1fa06015df22b", "html_url": "https://github.com/rust-lang/rust/commit/b6453a454f7269318cf74620ced1fa06015df22b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6453a454f7269318cf74620ced1fa06015df22b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92c1937a90e5b6f20fa6e87016d6869da363972e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c1937a90e5b6f20fa6e87016d6869da363972e", "html_url": "https://github.com/rust-lang/rust/commit/92c1937a90e5b6f20fa6e87016d6869da363972e"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "d3274cc829e34c6531fe45e2c1bb8b5b2146303e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6453a454f7269318cf74620ced1fa06015df22b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6453a454f7269318cf74620ced1fa06015df22b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b6453a454f7269318cf74620ced1fa06015df22b", "patch": "@@ -2683,7 +2683,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // Don't print the tuple of capture types\n                 'print: {\n                     if !is_upvar_tys_infer_tuple {\n-                        let msg = format!(\"required because it appears within the type `{}`\", ty);\n+                        let msg = with_forced_trimmed_paths!(format!(\n+                            \"required because it appears within the type `{ty}`\",\n+                        ));\n                         match ty.kind() {\n                             ty::Adt(def, _) => match self.tcx.opt_item_ident(def.did()) {\n                                 Some(ident) => err.span_note(ident.span, &msg),\n@@ -2724,7 +2726,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 let mut msg =\n                                     \"required because it captures the following types: \".to_owned();\n                                 for ty in bound_tys.skip_binder() {\n-                                    write!(msg, \"`{}`, \", ty).unwrap();\n+                                    with_forced_trimmed_paths!(write!(msg, \"`{}`, \", ty).unwrap());\n                                 }\n                                 err.note(msg.trim_end_matches(\", \"))\n                             }\n@@ -2735,7 +2737,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 let kind = tcx.generator_kind(def_id).unwrap().descr();\n                                 err.span_note(\n                                     sp,\n-                                    &format!(\"required because it's used within this {}\", kind),\n+                                    with_forced_trimmed_paths!(&format!(\n+                                        \"required because it's used within this {kind}\",\n+                                    )),\n                                 )\n                             }\n                             ty::Closure(def_id, _) => err.span_note(\n@@ -2959,7 +2963,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     let expr_ty = with_forced_trimmed_paths!(self.ty_to_string(expr_ty));\n                     err.span_label(\n                         expr_span,\n-                        format!(\"return type was inferred to be `{expr_ty}` here\"),\n+                        with_forced_trimmed_paths!(format!(\n+                            \"return type was inferred to be `{expr_ty}` here\",\n+                        )),\n                     );\n                 }\n             }"}, {"sha": "6f430687e6d6efd057001cb8686e328839dca7ba", "filename": "src/test/ui/function-pointer/unsized-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6453a454f7269318cf74620ced1fa06015df22b/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6453a454f7269318cf74620ced1fa06015df22b/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr?ref=b6453a454f7269318cf74620ced1fa06015df22b", "patch": "@@ -23,7 +23,7 @@ LL |     foo::<for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a), _>(None, (&()\n    |     required by a bound introduced by this call\n    |\n    = help: within `for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a)`, the trait `for<'a> Sized` is not implemented for `(dyn std::fmt::Display + 'a)`\n-   = note: required because it appears within the type `for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a)`\n+   = note: required because it appears within the type `for<'a> fn(&'a ()) -> (dyn Display + 'a)`\n note: required by a bound in `foo`\n   --> $DIR/unsized-ret.rs:5:11\n    |"}, {"sha": "ebf35be581c60a1c3478ee964f57a1badb32dad1", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6453a454f7269318cf74620ced1fa06015df22b/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6453a454f7269318cf74620ced1fa06015df22b/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=b6453a454f7269318cf74620ced1fa06015df22b", "patch": "@@ -35,7 +35,7 @@ note: required because it's used within this generator\n    |\n LL |     || {\n    |     ^^\n-note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:41:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {"}, {"sha": "04379f07ba0f78ff1a81c7d0654c059c7aa1819c", "filename": "src/test/ui/issues/issue-21763.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6453a454f7269318cf74620ced1fa06015df22b/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6453a454f7269318cf74620ced1fa06015df22b/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr?ref=b6453a454f7269318cf74620ced1fa06015df22b", "patch": "@@ -7,7 +7,7 @@ LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    = help: within `(Rc<()>, Rc<()>)`, the trait `Send` is not implemented for `Rc<()>`\n    = note: required because it appears within the type `(Rc<()>, Rc<()>)`\n    = note: required for `hashbrown::raw::RawTable<(Rc<()>, Rc<()>)>` to implement `Send`\n-   = note: required because it appears within the type `hashbrown::map::HashMap<Rc<()>, Rc<()>, RandomState>`\n+   = note: required because it appears within the type `HashMap<Rc<()>, Rc<()>, RandomState>`\n    = note: required because it appears within the type `HashMap<Rc<()>, Rc<()>>`\n note: required by a bound in `foo`\n   --> $DIR/issue-21763.rs:6:11"}, {"sha": "30cc76b2e1aad1b450a40881f244c38211bb230b", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6453a454f7269318cf74620ced1fa06015df22b/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6453a454f7269318cf74620ced1fa06015df22b/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=b6453a454f7269318cf74620ced1fa06015df22b", "patch": "@@ -50,7 +50,7 @@ LL |     is_send((8, TestType));\n    |     required by a bound introduced by this call\n    |\n    = help: within `({integer}, dummy1c::TestType)`, the trait `Send` is not implemented for `dummy1c::TestType`\n-   = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n+   = note: required because it appears within the type `({integer}, TestType)`\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n    |\n@@ -67,7 +67,7 @@ LL |     is_send(Box::new(TestType));\n    |\n    = note: the trait bound `Unique<dummy2::TestType>: Send` is not satisfied\n    = note: required for `Unique<dummy2::TestType>` to implement `Send`\n-   = note: required because it appears within the type `Box<dummy2::TestType>`\n+   = note: required because it appears within the type `Box<TestType>`\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n    |\n@@ -87,13 +87,13 @@ LL |     is_send(Box::new(Outer2(TestType)));\n    |     required by a bound introduced by this call\n    |\n    = help: within `Outer2<dummy3::TestType>`, the trait `Send` is not implemented for `dummy3::TestType`\n-note: required because it appears within the type `Outer2<dummy3::TestType>`\n+note: required because it appears within the type `Outer2<TestType>`\n   --> $DIR/negated-auto-traits-error.rs:12:8\n    |\n LL | struct Outer2<T>(T);\n    |        ^^^^^^\n    = note: required for `Unique<Outer2<dummy3::TestType>>` to implement `Send`\n-   = note: required because it appears within the type `Box<Outer2<dummy3::TestType>>`\n+   = note: required because it appears within the type `Box<Outer2<TestType>>`\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n    |"}]}