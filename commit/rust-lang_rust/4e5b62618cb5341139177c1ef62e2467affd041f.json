{"sha": "4e5b62618cb5341139177c1ef62e2467affd041f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNWI2MjYxOGNiNTM0MTEzOTE3N2MxZWY2MmUyNDY3YWZmZDA0MWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-21T21:45:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-21T21:45:28Z"}, "message": "auto merge of #17419 : anchovieshat/rust/remove_no_opt, r=cmr\n\nCloses #13649", "tree": {"sha": "5646ecee01824d42a5951cd8fc22198bb89e2a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5646ecee01824d42a5951cd8fc22198bb89e2a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e5b62618cb5341139177c1ef62e2467affd041f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5b62618cb5341139177c1ef62e2467affd041f", "html_url": "https://github.com/rust-lang/rust/commit/4e5b62618cb5341139177c1ef62e2467affd041f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e5b62618cb5341139177c1ef62e2467affd041f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72841b128df8b6a4eb88b1048548e2eec5244449", "url": "https://api.github.com/repos/rust-lang/rust/commits/72841b128df8b6a4eb88b1048548e2eec5244449", "html_url": "https://github.com/rust-lang/rust/commit/72841b128df8b6a4eb88b1048548e2eec5244449"}, {"sha": "b2b0737fbe1b4be62cb3656dabf69c0eb7c5a89e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b0737fbe1b4be62cb3656dabf69c0eb7c5a89e", "html_url": "https://github.com/rust-lang/rust/commit/b2b0737fbe1b4be62cb3656dabf69c0eb7c5a89e"}], "stats": {"total": 45, "additions": 1, "deletions": 44}, "files": [{"sha": "6068926fc9bdedc1f5ffe0fd8afc533ff58678ab", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e5b62618cb5341139177c1ef62e2467affd041f/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5b62618cb5341139177c1ef62e2467affd041f/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=4e5b62618cb5341139177c1ef62e2467affd041f", "patch": "@@ -176,7 +176,6 @@ debugging_opts!(\n         SHOW_SPAN,\n         COUNT_TYPE_SIZES,\n         META_STATS,\n-        NO_OPT,\n         GC,\n         PRINT_LINK_ARGS,\n         PRINT_LLVM_PASSES,\n@@ -211,7 +210,6 @@ pub fn debugging_opts_map() -> Vec<(&'static str, &'static str, u64)> {\n      (\"count-type-sizes\", \"count the sizes of aggregate types\",\n       COUNT_TYPE_SIZES),\n      (\"meta-stats\", \"gather metadata statistics\", META_STATS),\n-     (\"no-opt\", \"do not optimize, even if -O is passed\", NO_OPT),\n      (\"print-link-args\", \"Print the arguments passed to the linker\",\n       PRINT_LINK_ARGS),\n      (\"gc\", \"Garbage collect shared data (experimental)\", GC),\n@@ -714,9 +712,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let target = matches.opt_str(\"target\").unwrap_or(\n         driver::host_triple().to_string());\n     let opt_level = {\n-        if (debugging_opts & NO_OPT) != 0 {\n-            No\n-        } else if matches.opt_present(\"O\") {\n+        if matches.opt_present(\"O\") {\n             if matches.opt_present(\"opt-level\") {\n                 early_error(\"-O and --opt-level both provided\");\n             }"}, {"sha": "2113e5d0f4732eec699d0a6f25f651dcfd8a0937", "filename": "src/test/run-pass/capture_nil.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/72841b128df8b6a4eb88b1048548e2eec5244449/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72841b128df8b6a4eb88b1048548e2eec5244449/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=72841b128df8b6a4eb88b1048548e2eec5244449", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags:-Z no-opt\n-\n-// This test has to be setup just so to trigger\n-// the condition which was causing us a crash.\n-// The situation is that we are capturing a\n-// () value by ref.  We generally feel free,\n-// however, to substitute NULL pointers and\n-// undefined values for values of () type, and\n-// so this caused a segfault when we copied into\n-// the closure.\n-//\n-// The fix is just to not emit any actual loads\n-// or stores for copies of () type (which is of\n-// course preferable, as the value itself is\n-// irrelevant).\n-\n-use std::task;\n-\n-fn foo(x: ()) -> Receiver<()> {\n-    let (tx, rx) = channel::<()>();\n-    task::spawn(proc() {\n-        tx.send(x);\n-    });\n-    rx\n-}\n-\n-pub fn main() {\n-    foo(()).recv()\n-}"}]}