{"sha": "e56433432057712086ca623c4a1ef40089004839", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NjQzMzQzMjA1NzcxMjA4NmNhNjIzYzRhMWVmNDAwODkwMDQ4Mzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-30T14:24:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-30T14:43:14Z"}, "message": "remove forward pointer to Path", "tree": {"sha": "ff07a196ffcd7c6f298f6d0ef7563f05c2264d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff07a196ffcd7c6f298f6d0ef7563f05c2264d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e56433432057712086ca623c4a1ef40089004839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e56433432057712086ca623c4a1ef40089004839", "html_url": "https://github.com/rust-lang/rust/commit/e56433432057712086ca623c4a1ef40089004839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e56433432057712086ca623c4a1ef40089004839/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "html_url": "https://github.com/rust-lang/rust/commit/f8ddef875af08f6c67fe69f7803f3926bc6f66bb"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "31857ad56e94bd0ed4d0fb43e7cd8ac2f2d9c69e", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -6,13 +6,13 @@ pub(crate) mod validation;\n \n use std::{ops::Index, sync::Arc};\n \n+use hir_def::path::GenericArgs;\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{ast, AstPtr};\n use rustc_hash::FxHashMap;\n \n use crate::{\n     db::HirDatabase,\n-    path::GenericArgs,\n     ty::primitive::{UncertainFloatTy, UncertainIntTy},\n     type_ref::{Mutability, TypeRef},\n     DefWithBody, Either, HasSource, Name, Path, Resolver, Source,"}, {"sha": "6436c3a248551496336d2a7aafcfadb468bc60d9", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -1,6 +1,9 @@\n //! FIXME: write short doc here\n \n-use hir_def::name::{self, AsName, Name};\n+use hir_def::{\n+    name::{self, AsName, Name},\n+    path::GenericArgs,\n+};\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n@@ -13,7 +16,6 @@ use test_utils::tested_by;\n \n use crate::{\n     db::HirDatabase,\n-    path::GenericArgs,\n     ty::primitive::{FloatTy, IntTy, UncertainFloatTy, UncertainIntTy},\n     type_ref::TypeRef,\n     AstId, DefWithBody, Either, HirFileId, MacroCallLoc, MacroFileKind, Mutability, Path, Resolver,"}, {"sha": "c685edda193f45c915b919ddc56e8d187c17c0f3", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -2,14 +2,14 @@\n \n use std::sync::Arc;\n \n+use hir_def::path::known;\n use ra_syntax::ast;\n use rustc_hash::FxHashSet;\n \n use crate::{\n     db::HirDatabase,\n     diagnostics::{DiagnosticSink, MissingFields, MissingOkInTailExpr},\n     expr::AstPtr,\n-    path::known,\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n     Adt, Function, Name, Path,\n };"}, {"sha": "45f9713a0a860252736a34efcfc6c957eecdab9f", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -5,12 +5,14 @@\n \n use std::sync::Arc;\n \n-use hir_def::name::{self, AsName};\n+use hir_def::{\n+    name::{self, AsName},\n+    path::Path,\n+};\n use ra_syntax::ast::{self, DefaultTypeParamOwner, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    path::Path,\n     type_ref::{TypeBound, TypeRef},\n     Adt, Const, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct, Trait,\n     TypeAlias, Union,"}, {"sha": "e723a1f404a2d5832c29c677faea63c561aeab84", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -32,7 +32,6 @@ pub mod debug;\n pub mod db;\n #[macro_use]\n pub mod mock;\n-mod path;\n pub mod source_binder;\n \n mod ids;\n@@ -71,7 +70,6 @@ pub use crate::{\n     ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n     impl_block::ImplBlock,\n     nameres::{ImportId, Namespace, PerNs},\n-    path::{Path, PathKind},\n     resolve::ScopeDef,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     ty::{\n@@ -88,4 +86,7 @@ pub use self::code_model::{\n     ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n-pub use hir_def::name::Name;\n+pub use hir_def::{\n+    name::Name,\n+    path::{Path, PathKind},\n+};"}, {"sha": "7f0ff4bfc77334bef10da4977dea57d11086c660", "filename": "crates/ra_hir/src/path.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -1 +0,0 @@\n-pub use hir_def::path::*;"}, {"sha": "2a783b61e3bb3914eeacb903ffcbd71311b30ad9", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -3,6 +3,7 @@ use std::sync::Arc;\n \n use hir_def::{\n     name::{self, Name},\n+    path::{Path, PathKind},\n     CrateModuleId,\n };\n use rustc_hash::FxHashSet;\n@@ -17,7 +18,6 @@ use crate::{\n     generics::GenericParams,\n     impl_block::ImplBlock,\n     nameres::{CrateDefMap, PerNs},\n-    path::{Path, PathKind},\n     Adt, BuiltinType, Const, Enum, EnumVariant, Function, MacroDef, ModuleDef, Static, Struct,\n     Trait, TypeAlias,\n };"}, {"sha": "544433a0ab20733e20a544cbe88e291044a2c7a5", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -7,7 +7,7 @@\n //! purely for \"IDE needs\".\n use std::sync::Arc;\n \n-use hir_def::name::AsName;\n+use hir_def::{name::AsName, path::known};\n use ra_db::FileId;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -25,7 +25,6 @@ use crate::{\n         BodySourceMap,\n     },\n     ids::LocationCtx,\n-    path::known,\n     resolve::{ScopeDef, TypeNs, ValueNs},\n     ty::method_resolution::implements_trait,\n     Const, DefWithBody, Either, Enum, FromSource, Function, HasBody, HirFileId, MacroDef, Module,"}, {"sha": "05c6b5aad338c81a0166172a7fbd2cbda9e61509", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -21,7 +21,7 @@ use std::sync::Arc;\n use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n use rustc_hash::FxHashMap;\n \n-use hir_def::name;\n+use hir_def::{name, path::known};\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n use test_utils::tested_by;\n@@ -38,7 +38,6 @@ use crate::{\n     db::HirDatabase,\n     diagnostics::DiagnosticSink,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n-    path::known,\n     resolve::{Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n     type_ref::{Mutability, TypeRef},"}, {"sha": "bc6437b4482258f594e3a4aadd3fd1fe5766b8f2", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -3,15 +3,17 @@\n use std::iter::{repeat, repeat_with};\n use std::sync::Arc;\n \n-use hir_def::name;\n+use hir_def::{\n+    name,\n+    path::{GenericArg, GenericArgs},\n+};\n \n use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};\n use crate::{\n     db::HirDatabase,\n     expr::{self, Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     generics::{GenericParams, HasGenericParams},\n     nameres::Namespace,\n-    path::{GenericArg, GenericArgs},\n     ty::{\n         autoderef, method_resolution, op, primitive, CallableDef, InferTy, Mutability, Obligation,\n         ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,"}, {"sha": "77aa35ce13308b22b53700b766fbc25011cffcaf", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -1,5 +1,7 @@\n //! Path expression resolution.\n \n+use hir_def::path::PathSegment;\n+\n use super::{ExprOrPatId, InferenceContext, TraitRef};\n use crate::{\n     db::HirDatabase,\n@@ -131,7 +133,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn resolve_trait_assoc_item(\n         &mut self,\n         trait_ref: TraitRef,\n-        segment: &crate::path::PathSegment,\n+        segment: &PathSegment,\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Option<Substs>)> {\n         let trait_ = trait_ref.trait_;\n@@ -170,7 +172,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn resolve_ty_assoc_item(\n         &mut self,\n         ty: Ty,\n-        segment: &crate::path::PathSegment,\n+        segment: &PathSegment,\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Option<Substs>)> {\n         if let Ty::Unknown = ty {"}, {"sha": "b131b306c280f55e6b77a655fdf5ad98e7a2793a", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56433432057712086ca623c4a1ef40089004839/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=e56433432057712086ca623c4a1ef40089004839", "patch": "@@ -8,6 +8,8 @@\n use std::iter;\n use std::sync::Arc;\n \n+use hir_def::path::{GenericArg, PathSegment};\n+\n use super::{\n     FnSig, GenericPredicate, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n     TypeWalk,\n@@ -18,7 +20,6 @@ use crate::{\n     generics::HasGenericParams,\n     generics::{GenericDef, WherePredicate},\n     nameres::Namespace,\n-    path::{GenericArg, PathSegment},\n     resolve::{Resolver, TypeNs},\n     ty::Adt,\n     type_ref::{TypeBound, TypeRef},"}]}