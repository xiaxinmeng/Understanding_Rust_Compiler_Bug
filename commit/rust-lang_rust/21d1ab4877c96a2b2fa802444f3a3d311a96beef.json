{"sha": "21d1ab4877c96a2b2fa802444f3a3d311a96beef", "node_id": "C_kwDOAAsO6NoAKDIxZDFhYjQ4NzdjOTZhMmIyZmE4MDI0NDRmM2EzZDMxMWE5NmJlZWY", "commit": {"author": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-21T17:53:01Z"}, "committer": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-27T17:33:57Z"}, "message": "safe transmute: add `rustc_on_unimplemented` to `BikeshedIntrinsicFrom`\n\nref: https://github.com/rust-lang/rust/pull/92268#discussion_r925266583", "tree": {"sha": "c6f440679d262894689c2f524d280e7eaac2d7a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6f440679d262894689c2f524d280e7eaac2d7a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21d1ab4877c96a2b2fa802444f3a3d311a96beef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21d1ab4877c96a2b2fa802444f3a3d311a96beef", "html_url": "https://github.com/rust-lang/rust/commit/21d1ab4877c96a2b2fa802444f3a3d311a96beef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21d1ab4877c96a2b2fa802444f3a3d311a96beef/comments", "author": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "402644f72f61a28b3690a565be82d2178cd44800", "url": "https://api.github.com/repos/rust-lang/rust/commits/402644f72f61a28b3690a565be82d2178cd44800", "html_url": "https://github.com/rust-lang/rust/commit/402644f72f61a28b3690a565be82d2178cd44800"}], "stats": {"total": 850, "additions": 486, "deletions": 364}, "files": [{"sha": "820a7582b113b49c29a1da78b0df1b09b4a31e70", "filename": "library/core/src/mem/transmutability.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -5,6 +5,10 @@\n /// notwithstanding whatever safety checks you have asked the compiler to [`Assume`] are satisfied.\n #[unstable(feature = \"transmutability\", issue = \"none\")]\n #[cfg_attr(not(bootstrap), lang = \"transmute_trait\")]\n+#[rustc_on_unimplemented(\n+    message = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\",\n+    label = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\"\n+)]\n pub unsafe trait BikeshedIntrinsicFrom<\n     Src,\n     Context,"}, {"sha": "8e69527c1862c2e4a4130d5608914579a0cabc8a", "filename": "src/test/ui/transmutability/arrays/should_require_well_defined_layout.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -18,20 +18,20 @@ fn should_reject_repr_rust()\n {\n     fn unit() {\n         type repr_rust = [String; 0];\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn singleton() {\n         type repr_rust = [String; 1];\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn duplex() {\n         type repr_rust = [String; 2];\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n }\n "}, {"sha": "eae0c947d4253fc339ee2350ee96b87799f08e27", "filename": "src/test/ui/transmutability/arrays/should_require_well_defined_layout.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<[String; 0], assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `[String; 0]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:21:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<[String; 0], assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `[String; 0]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<[String; 0], assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -13,12 +14,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `[String; 0]: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `[String; 0]` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:22:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `[String; 0]`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 0]` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `[String; 0]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -28,12 +30,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<[String; 1], assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `[String; 1]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:27:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<[String; 1], assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `[String; 1]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<[String; 1], assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -43,12 +46,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `[String; 1]: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `[String; 1]` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:28:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `[String; 1]`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 1]` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `[String; 1]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -58,12 +62,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<[String; 2], assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `[String; 2]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:33:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<[String; 2], assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `[String; 2]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<[String; 2], assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -73,12 +78,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `[String; 2]: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `[String; 2]` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:34:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `[String; 2]`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 2]` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `[String; 2]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |"}, {"sha": "18e02b0d2b90851566ae395cca6a4e4cea5c1b84", "filename": "src/test/ui/transmutability/enums/repr/primitive_reprs_should_have_correct_length.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -38,17 +38,17 @@ fn n8() {\n     fn i_should_have_correct_length() {\n         type Current = V0i8;\n \n-        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR cannot be safely transmuted\n         assert::is_transmutable::<Current, Analog, Context>();\n-        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn u_should_have_correct_length() {\n         type Current = V0u8;\n \n-        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR cannot be safely transmuted\n         assert::is_transmutable::<Current, Analog, Context>();\n-        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR cannot be safely transmuted\n     }\n }\n \n@@ -62,17 +62,17 @@ fn n16() {\n     fn i_should_have_correct_length() {\n         type Current = V0i16;\n \n-        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR cannot be safely transmuted\n         assert::is_transmutable::<Current, Analog, Context>();\n-        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn u_should_have_correct_length() {\n         type Current = V0u16;\n \n-        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR cannot be safely transmuted\n         assert::is_transmutable::<Current, Analog, Context>();\n-        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR cannot be safely transmuted\n     }\n }\n \n@@ -86,17 +86,17 @@ fn n32() {\n     fn i_should_have_correct_length() {\n         type Current = V0i32;\n \n-        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR cannot be safely transmuted\n         assert::is_transmutable::<Current, Analog, Context>();\n-        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn u_should_have_correct_length() {\n         type Current = V0u32;\n \n-        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR cannot be safely transmuted\n         assert::is_transmutable::<Current, Analog, Context>();\n-        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR cannot be safely transmuted\n     }\n }\n \n@@ -110,17 +110,17 @@ fn n64() {\n     fn i_should_have_correct_length() {\n         type Current = V0i64;\n \n-        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR cannot be safely transmuted\n         assert::is_transmutable::<Current, Analog, Context>();\n-        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn u_should_have_correct_length() {\n         type Current = V0u64;\n \n-        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR cannot be safely transmuted\n         assert::is_transmutable::<Current, Analog, Context>();\n-        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR cannot be safely transmuted\n     }\n }\n \n@@ -134,16 +134,16 @@ fn nsize() {\n     fn i_should_have_correct_length() {\n         type Current = V0isize;\n \n-        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR cannot be safely transmuted\n         assert::is_transmutable::<Current, Analog, Context>();\n-        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn u_should_have_correct_length() {\n         type Current = V0usize;\n \n-        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Smaller, Current, Context>(); //~ ERROR cannot be safely transmuted\n         assert::is_transmutable::<Current, Analog, Context>();\n-        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR not satisfied\n+        assert::is_transmutable::<Current, Larger, Context>(); //~ ERROR cannot be safely transmuted\n     }\n }"}, {"sha": "fa2e3b89b079a1f4cab04fa42b6ec38700b7d6b8", "filename": "src/test/ui/transmutability/enums/repr/primitive_reprs_should_have_correct_length.stderr", "status": "modified", "additions": 60, "deletions": 40, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `V0i8: BikeshedIntrinsicFrom<Zst, n8::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `Zst` cannot be safely transmuted into `V0i8` in the defining scope of `n8::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:41:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ the trait `BikeshedIntrinsicFrom<Zst, n8::Context, true, true, true, true>` is not implemented for `V0i8`\n+   |                                            ^^^^^^^ `Zst` cannot be safely transmuted into `V0i8` in the defining scope of `n8::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<Zst, n8::Context, true, true, true, true>` is not implemented for `V0i8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -13,12 +14,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u16: BikeshedIntrinsicFrom<V0i8, n8::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `V0i8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:43:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ the trait `BikeshedIntrinsicFrom<V0i8, n8::Context, true, true, true, true>` is not implemented for `u16`\n+   |                                            ^^^^^^ `V0i8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<V0i8, n8::Context, true, true, true, true>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -28,12 +30,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `V0u8: BikeshedIntrinsicFrom<Zst, n8::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `Zst` cannot be safely transmuted into `V0u8` in the defining scope of `n8::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:49:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ the trait `BikeshedIntrinsicFrom<Zst, n8::Context, true, true, true, true>` is not implemented for `V0u8`\n+   |                                            ^^^^^^^ `Zst` cannot be safely transmuted into `V0u8` in the defining scope of `n8::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<Zst, n8::Context, true, true, true, true>` is not implemented for `V0u8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -43,12 +46,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u16: BikeshedIntrinsicFrom<V0u8, n8::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `V0u8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:51:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ the trait `BikeshedIntrinsicFrom<V0u8, n8::Context, true, true, true, true>` is not implemented for `u16`\n+   |                                            ^^^^^^ `V0u8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<V0u8, n8::Context, true, true, true, true>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -58,12 +62,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `V0i16: BikeshedIntrinsicFrom<u8, n16::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `V0i16` in the defining scope of `n16::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:65:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ the trait `BikeshedIntrinsicFrom<u8, n16::Context, true, true, true, true>` is not implemented for `V0i16`\n+   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0i16` in the defining scope of `n16::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, n16::Context, true, true, true, true>` is not implemented for `V0i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -73,12 +78,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u32: BikeshedIntrinsicFrom<V0i16, n16::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `V0i16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:67:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ the trait `BikeshedIntrinsicFrom<V0i16, n16::Context, true, true, true, true>` is not implemented for `u32`\n+   |                                            ^^^^^^ `V0i16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<V0i16, n16::Context, true, true, true, true>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -88,12 +94,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `V0u16: BikeshedIntrinsicFrom<u8, n16::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `V0u16` in the defining scope of `n16::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:73:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ the trait `BikeshedIntrinsicFrom<u8, n16::Context, true, true, true, true>` is not implemented for `V0u16`\n+   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0u16` in the defining scope of `n16::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, n16::Context, true, true, true, true>` is not implemented for `V0u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -103,12 +110,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u32: BikeshedIntrinsicFrom<V0u16, n16::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `V0u16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:75:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ the trait `BikeshedIntrinsicFrom<V0u16, n16::Context, true, true, true, true>` is not implemented for `u32`\n+   |                                            ^^^^^^ `V0u16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<V0u16, n16::Context, true, true, true, true>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -118,12 +126,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `V0i32: BikeshedIntrinsicFrom<u16, n32::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u16` cannot be safely transmuted into `V0i32` in the defining scope of `n32::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:89:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ the trait `BikeshedIntrinsicFrom<u16, n32::Context, true, true, true, true>` is not implemented for `V0i32`\n+   |                                            ^^^^^^^ `u16` cannot be safely transmuted into `V0i32` in the defining scope of `n32::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, n32::Context, true, true, true, true>` is not implemented for `V0i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -133,12 +142,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u64: BikeshedIntrinsicFrom<V0i32, n32::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `V0i32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:91:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ the trait `BikeshedIntrinsicFrom<V0i32, n32::Context, true, true, true, true>` is not implemented for `u64`\n+   |                                            ^^^^^^ `V0i32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<V0i32, n32::Context, true, true, true, true>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -148,12 +158,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `V0u32: BikeshedIntrinsicFrom<u16, n32::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u16` cannot be safely transmuted into `V0u32` in the defining scope of `n32::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:97:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ the trait `BikeshedIntrinsicFrom<u16, n32::Context, true, true, true, true>` is not implemented for `V0u32`\n+   |                                            ^^^^^^^ `u16` cannot be safely transmuted into `V0u32` in the defining scope of `n32::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, n32::Context, true, true, true, true>` is not implemented for `V0u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -163,12 +174,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u64: BikeshedIntrinsicFrom<V0u32, n32::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `V0u32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:99:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ the trait `BikeshedIntrinsicFrom<V0u32, n32::Context, true, true, true, true>` is not implemented for `u64`\n+   |                                            ^^^^^^ `V0u32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<V0u32, n32::Context, true, true, true, true>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -178,12 +190,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `V0i64: BikeshedIntrinsicFrom<u32, n64::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u32` cannot be safely transmuted into `V0i64` in the defining scope of `n64::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:113:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ the trait `BikeshedIntrinsicFrom<u32, n64::Context, true, true, true, true>` is not implemented for `V0i64`\n+   |                                            ^^^^^^^ `u32` cannot be safely transmuted into `V0i64` in the defining scope of `n64::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, n64::Context, true, true, true, true>` is not implemented for `V0i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -193,12 +206,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<V0i64, n64::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `V0i64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:115:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ the trait `BikeshedIntrinsicFrom<V0i64, n64::Context, true, true, true, true>` is not implemented for `u128`\n+   |                                            ^^^^^^ `V0i64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<V0i64, n64::Context, true, true, true, true>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -208,12 +222,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `V0u64: BikeshedIntrinsicFrom<u32, n64::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u32` cannot be safely transmuted into `V0u64` in the defining scope of `n64::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:121:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ the trait `BikeshedIntrinsicFrom<u32, n64::Context, true, true, true, true>` is not implemented for `V0u64`\n+   |                                            ^^^^^^^ `u32` cannot be safely transmuted into `V0u64` in the defining scope of `n64::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, n64::Context, true, true, true, true>` is not implemented for `V0u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -223,12 +238,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<V0u64, n64::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `V0u64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:123:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ the trait `BikeshedIntrinsicFrom<V0u64, n64::Context, true, true, true, true>` is not implemented for `u128`\n+   |                                            ^^^^^^ `V0u64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<V0u64, n64::Context, true, true, true, true>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -238,12 +254,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `V0isize: BikeshedIntrinsicFrom<u8, nsize::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `V0isize` in the defining scope of `nsize::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:137:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ the trait `BikeshedIntrinsicFrom<u8, nsize::Context, true, true, true, true>` is not implemented for `V0isize`\n+   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0isize` in the defining scope of `nsize::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, nsize::Context, true, true, true, true>` is not implemented for `V0isize`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -253,12 +270,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `[usize; 2]: BikeshedIntrinsicFrom<V0isize, nsize::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `V0isize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:139:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ the trait `BikeshedIntrinsicFrom<V0isize, nsize::Context, true, true, true, true>` is not implemented for `[usize; 2]`\n+   |                                            ^^^^^^ `V0isize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<V0isize, nsize::Context, true, true, true, true>` is not implemented for `[usize; 2]`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -268,12 +286,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `V0usize: BikeshedIntrinsicFrom<u8, nsize::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `V0usize` in the defining scope of `nsize::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:145:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ the trait `BikeshedIntrinsicFrom<u8, nsize::Context, true, true, true, true>` is not implemented for `V0usize`\n+   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0usize` in the defining scope of `nsize::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, nsize::Context, true, true, true, true>` is not implemented for `V0usize`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -283,12 +302,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `[usize; 2]: BikeshedIntrinsicFrom<V0usize, nsize::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `V0usize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:147:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ the trait `BikeshedIntrinsicFrom<V0usize, nsize::Context, true, true, true, true>` is not implemented for `[usize; 2]`\n+   |                                            ^^^^^^ `V0usize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<V0usize, nsize::Context, true, true, true, true>` is not implemented for `[usize; 2]`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |"}, {"sha": "978a12648f03a9c11e585d74a9eff3c5a1057733", "filename": "src/test/ui/transmutability/enums/repr/should_require_well_defined_layout.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -18,20 +18,20 @@ mod assert {\n fn should_reject_repr_rust() {\n     fn void() {\n         enum repr_rust {}\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn singleton() {\n         enum repr_rust { V }\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn duplex() {\n         enum repr_rust { A, B }\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n }\n "}, {"sha": "3273e87c89ff4f3c97663eb060ee3f210bd7ba29", "filename": "src/test/ui/transmutability/enums/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<void::repr_rust, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `void::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:21:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<void::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `void::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<void::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -13,12 +14,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `void::repr_rust: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `void::repr_rust` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:22:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `void::repr_rust`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `void::repr_rust` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `void::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -28,12 +30,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<singleton::repr_rust, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `singleton::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:27:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<singleton::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `singleton::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<singleton::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -43,12 +46,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `singleton::repr_rust: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `singleton::repr_rust` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:28:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `singleton::repr_rust`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `singleton::repr_rust` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `singleton::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -58,12 +62,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<duplex::repr_rust, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `duplex::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:33:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<duplex::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `duplex::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<duplex::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -73,12 +78,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `duplex::repr_rust: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `duplex::repr_rust` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:34:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `duplex::repr_rust`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `duplex::repr_rust` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `duplex::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |"}, {"sha": "466b6c8a15b52ede797b96fb26b09cf48cc93ba5", "filename": "src/test/ui/transmutability/enums/should_pad_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -36,5 +36,5 @@ fn should_pad_variants() {\n     struct Context;\n     // If the implementation (incorrectly) fails to pad `Lopsided::Smol` with\n     // an uninitialized byte, this transmutation might be (wrongly) accepted:\n-    assert::is_transmutable::<Src, Dst, Context>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<Src, Dst, Context>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "429f7211d17a86cfaa87434afd180be295246cb9", "filename": "src/test/ui/transmutability/enums/should_pad_variants.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `Dst: BikeshedIntrinsicFrom<Src, should_pad_variants::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n   --> $DIR/should_pad_variants.rs:39:36\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n-   |                                    ^^^ the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, true, true, true, true>` is not implemented for `Dst`\n+   |                                    ^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, true, true, true, true>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14\n    |"}, {"sha": "67a3c4e94ba8fb17e971908237c777044b62ccee", "filename": "src/test/ui/transmutability/enums/should_respect_endianness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -29,5 +29,5 @@ mod assert {\n \n fn should_respect_endianness() {\n     assert::is_transmutable::<Src, Expected>();\n-    assert::is_transmutable::<Src, Unexpected>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<Src, Unexpected>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "78023cb378acacced03668822eba2a023e26158f", "filename": "src/test/ui/transmutability/enums/should_respect_endianness.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `Unexpected: BikeshedIntrinsicFrom<Src, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n   --> $DIR/should_respect_endianness.rs:32:36\n    |\n LL |     assert::is_transmutable::<Src, Unexpected>();\n-   |                                    ^^^^^^^^^^ the trait `BikeshedIntrinsicFrom<Src, assert::Context, true, true, true, true>` is not implemented for `Unexpected`\n+   |                                    ^^^^^^^^^^ `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<Src, assert::Context, true, true, true, true>` is not implemented for `Unexpected`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_respect_endianness.rs:15:14\n    |"}, {"sha": "4f79bc2533708ef41774b6e60a8619d607c10016", "filename": "src/test/ui/transmutability/primitives/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -19,7 +19,7 @@ mod assert {\n }\n \n fn contrast_with_u8() {\n-    assert::is_transmutable::<u8, bool>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<u8, bool>(); //~ ERROR cannot be safely transmuted\n     assert::is_maybe_transmutable::<u8, bool>();\n     assert::is_transmutable::<bool, u8>();\n }"}, {"sha": "dc740251c871e1e3d30de7afa57fa2e82454635c", "filename": "src/test/ui/transmutability/primitives/bool.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `bool: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, true>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n   --> $DIR/bool.rs:22:35\n    |\n LL |     assert::is_transmutable::<u8, bool>();\n-   |                                   ^^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, true>` is not implemented for `bool`\n+   |                                   ^^^^ `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, true>` is not implemented for `bool`\n note: required by a bound in `is_transmutable`\n   --> $DIR/bool.rs:12:14\n    |"}, {"sha": "a5f79065d8aad514be41b8c6e29eb23871f7367d", "filename": "src/test/ui/transmutability/primitives/numbers.rs", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -59,70 +59,70 @@ fn should_be_bitransmutable() {\n }\n \n fn should_reject_extension() {\n-    assert::is_transmutable::<   i8,   i16>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   i8,   u16>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   i8,   i32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   i8,   f32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   i8,   u32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   i8,   u64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   i8,   i64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   i8,   f64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   i8,  u128>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   i8,  i128>(); //~ ERROR not satisfied\n-\n-    assert::is_transmutable::<   u8,   i16>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   u8,   u16>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   u8,   i32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   u8,   f32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   u8,   u32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   u8,   u64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   u8,   i64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   u8,   f64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   u8,  u128>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<   u8,  i128>(); //~ ERROR not satisfied\n-\n-    assert::is_transmutable::<  i16,   i32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i16,   f32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i16,   u32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i16,   u64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i16,   i64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i16,   f64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i16,  u128>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i16,  i128>(); //~ ERROR not satisfied\n-\n-    assert::is_transmutable::<  u16,   i32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u16,   f32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u16,   u32>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u16,   u64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u16,   i64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u16,   f64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u16,  u128>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u16,  i128>(); //~ ERROR not satisfied\n-\n-    assert::is_transmutable::<  i32,   u64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i32,   i64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i32,   f64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i32,  u128>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i32,  i128>(); //~ ERROR not satisfied\n-\n-    assert::is_transmutable::<  f32,   u64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  f32,   i64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  f32,   f64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  f32,  u128>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  f32,  i128>(); //~ ERROR not satisfied\n-\n-    assert::is_transmutable::<  u32,   u64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u32,   i64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u32,   f64>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u32,  u128>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u32,  i128>(); //~ ERROR not satisfied\n-\n-    assert::is_transmutable::<  u64,  u128>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  u64,  i128>(); //~ ERROR not satisfied\n-\n-    assert::is_transmutable::<  i64,  u128>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  i64,  i128>(); //~ ERROR not satisfied\n-\n-    assert::is_transmutable::<  f64,  u128>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<  f64,  i128>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<   i8,   i16>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   i8,   u16>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   i8,   i32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   i8,   f32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   i8,   u32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   i8,   u64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   i8,   i64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   i8,   f64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   i8,  u128>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   i8,  i128>(); //~ ERROR cannot be safely transmuted\n+\n+    assert::is_transmutable::<   u8,   i16>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   u8,   u16>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   u8,   i32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   u8,   f32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   u8,   u32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   u8,   u64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   u8,   i64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   u8,   f64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   u8,  u128>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<   u8,  i128>(); //~ ERROR cannot be safely transmuted\n+\n+    assert::is_transmutable::<  i16,   i32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i16,   f32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i16,   u32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i16,   u64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i16,   i64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i16,   f64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i16,  u128>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i16,  i128>(); //~ ERROR cannot be safely transmuted\n+\n+    assert::is_transmutable::<  u16,   i32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u16,   f32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u16,   u32>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u16,   u64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u16,   i64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u16,   f64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u16,  u128>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u16,  i128>(); //~ ERROR cannot be safely transmuted\n+\n+    assert::is_transmutable::<  i32,   u64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i32,   i64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i32,   f64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i32,  u128>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i32,  i128>(); //~ ERROR cannot be safely transmuted\n+\n+    assert::is_transmutable::<  f32,   u64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  f32,   i64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  f32,   f64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  f32,  u128>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  f32,  i128>(); //~ ERROR cannot be safely transmuted\n+\n+    assert::is_transmutable::<  u32,   u64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u32,   i64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u32,   f64>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u32,  u128>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u32,  i128>(); //~ ERROR cannot be safely transmuted\n+\n+    assert::is_transmutable::<  u64,  u128>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  u64,  i128>(); //~ ERROR cannot be safely transmuted\n+\n+    assert::is_transmutable::<  i64,  u128>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  i64,  i128>(); //~ ERROR cannot be safely transmuted\n+\n+    assert::is_transmutable::<  f64,  u128>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<  f64,  i128>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "9b802a444e86a1f01c8adcf4cafc1efffdf32ef3", "filename": "src/test/ui/transmutability/primitives/numbers.stderr", "status": "modified", "additions": 171, "deletions": 114, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `i16: BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:62:40\n    |\n LL |     assert::is_transmutable::<   i8,   i16>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i16`\n+   |                                        ^^^ `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -13,12 +14,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u16: BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:63:40\n    |\n LL |     assert::is_transmutable::<   i8,   u16>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u16`\n+   |                                        ^^^ `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -28,12 +30,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i32: BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:64:40\n    |\n LL |     assert::is_transmutable::<   i8,   i32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i32`\n+   |                                        ^^^ `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -43,12 +46,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f32: BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:65:40\n    |\n LL |     assert::is_transmutable::<   i8,   f32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `f32`\n+   |                                        ^^^ `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -58,12 +62,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u32: BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:66:40\n    |\n LL |     assert::is_transmutable::<   i8,   u32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u32`\n+   |                                        ^^^ `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -73,12 +78,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u64: BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:67:40\n    |\n LL |     assert::is_transmutable::<   i8,   u64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   |                                        ^^^ `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -88,12 +94,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i64: BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:68:40\n    |\n LL |     assert::is_transmutable::<   i8,   i64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   |                                        ^^^ `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -103,12 +110,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f64: BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:69:40\n    |\n LL |     assert::is_transmutable::<   i8,   f64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   |                                        ^^^ `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -118,12 +126,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:70:39\n    |\n LL |     assert::is_transmutable::<   i8,  u128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   |                                       ^^^^ `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -133,12 +142,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i128: BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:71:39\n    |\n LL |     assert::is_transmutable::<   i8,  i128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   |                                       ^^^^ `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -148,12 +158,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i16: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:73:40\n    |\n LL |     assert::is_transmutable::<   u8,   i16>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i16`\n+   |                                        ^^^ `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -163,12 +174,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u16: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:74:40\n    |\n LL |     assert::is_transmutable::<   u8,   u16>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u16`\n+   |                                        ^^^ `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -178,12 +190,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i32: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:75:40\n    |\n LL |     assert::is_transmutable::<   u8,   i32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i32`\n+   |                                        ^^^ `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -193,12 +206,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f32: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:76:40\n    |\n LL |     assert::is_transmutable::<   u8,   f32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `f32`\n+   |                                        ^^^ `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -208,12 +222,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u32: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:77:40\n    |\n LL |     assert::is_transmutable::<   u8,   u32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u32`\n+   |                                        ^^^ `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -223,12 +238,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u64: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:78:40\n    |\n LL |     assert::is_transmutable::<   u8,   u64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   |                                        ^^^ `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -238,12 +254,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i64: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:79:40\n    |\n LL |     assert::is_transmutable::<   u8,   i64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   |                                        ^^^ `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -253,12 +270,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f64: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:80:40\n    |\n LL |     assert::is_transmutable::<   u8,   f64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   |                                        ^^^ `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -268,12 +286,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:81:39\n    |\n LL |     assert::is_transmutable::<   u8,  u128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   |                                       ^^^^ `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -283,12 +302,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i128: BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:82:39\n    |\n LL |     assert::is_transmutable::<   u8,  i128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   |                                       ^^^^ `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -298,12 +318,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i32: BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:84:40\n    |\n LL |     assert::is_transmutable::<  i16,   i32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `i32`\n+   |                                        ^^^ `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -313,12 +334,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f32: BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:85:40\n    |\n LL |     assert::is_transmutable::<  i16,   f32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `f32`\n+   |                                        ^^^ `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -328,12 +350,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u32: BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:86:40\n    |\n LL |     assert::is_transmutable::<  i16,   u32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `u32`\n+   |                                        ^^^ `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -343,12 +366,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u64: BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:87:40\n    |\n LL |     assert::is_transmutable::<  i16,   u64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   |                                        ^^^ `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -358,12 +382,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i64: BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:88:40\n    |\n LL |     assert::is_transmutable::<  i16,   i64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   |                                        ^^^ `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -373,12 +398,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f64: BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:89:40\n    |\n LL |     assert::is_transmutable::<  i16,   f64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   |                                        ^^^ `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -388,12 +414,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:90:39\n    |\n LL |     assert::is_transmutable::<  i16,  u128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   |                                       ^^^^ `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -403,12 +430,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i128: BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:91:39\n    |\n LL |     assert::is_transmutable::<  i16,  i128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   |                                       ^^^^ `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -418,12 +446,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i32: BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:93:40\n    |\n LL |     assert::is_transmutable::<  u16,   i32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `i32`\n+   |                                        ^^^ `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -433,12 +462,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f32: BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:94:40\n    |\n LL |     assert::is_transmutable::<  u16,   f32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `f32`\n+   |                                        ^^^ `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -448,12 +478,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u32: BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:95:40\n    |\n LL |     assert::is_transmutable::<  u16,   u32>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `u32`\n+   |                                        ^^^ `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -463,12 +494,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u64: BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:96:40\n    |\n LL |     assert::is_transmutable::<  u16,   u64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   |                                        ^^^ `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -478,12 +510,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i64: BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:97:40\n    |\n LL |     assert::is_transmutable::<  u16,   i64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   |                                        ^^^ `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -493,12 +526,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f64: BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:98:40\n    |\n LL |     assert::is_transmutable::<  u16,   f64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   |                                        ^^^ `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -508,12 +542,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:99:39\n    |\n LL |     assert::is_transmutable::<  u16,  u128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   |                                       ^^^^ `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -523,12 +558,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i128: BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:100:39\n    |\n LL |     assert::is_transmutable::<  u16,  i128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   |                                       ^^^^ `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -538,12 +574,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u64: BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:102:40\n    |\n LL |     assert::is_transmutable::<  i32,   u64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   |                                        ^^^ `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -553,12 +590,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i64: BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:103:40\n    |\n LL |     assert::is_transmutable::<  i32,   i64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   |                                        ^^^ `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -568,12 +606,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f64: BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:104:40\n    |\n LL |     assert::is_transmutable::<  i32,   f64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   |                                        ^^^ `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -583,12 +622,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:105:39\n    |\n LL |     assert::is_transmutable::<  i32,  u128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   |                                       ^^^^ `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -598,12 +638,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i128: BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:106:39\n    |\n LL |     assert::is_transmutable::<  i32,  i128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   |                                       ^^^^ `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -613,12 +654,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u64: BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:108:40\n    |\n LL |     assert::is_transmutable::<  f32,   u64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   |                                        ^^^ `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -628,12 +670,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i64: BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:109:40\n    |\n LL |     assert::is_transmutable::<  f32,   i64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   |                                        ^^^ `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -643,12 +686,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f64: BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:110:40\n    |\n LL |     assert::is_transmutable::<  f32,   f64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   |                                        ^^^ `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -658,12 +702,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:111:39\n    |\n LL |     assert::is_transmutable::<  f32,  u128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   |                                       ^^^^ `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -673,12 +718,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i128: BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:112:39\n    |\n LL |     assert::is_transmutable::<  f32,  i128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   |                                       ^^^^ `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -688,12 +734,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u64: BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:114:40\n    |\n LL |     assert::is_transmutable::<  u32,   u64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   |                                        ^^^ `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -703,12 +750,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i64: BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:115:40\n    |\n LL |     assert::is_transmutable::<  u32,   i64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   |                                        ^^^ `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -718,12 +766,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `f64: BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:116:40\n    |\n LL |     assert::is_transmutable::<  u32,   f64>();\n-   |                                        ^^^ the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   |                                        ^^^ `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -733,12 +782,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:117:39\n    |\n LL |     assert::is_transmutable::<  u32,  u128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   |                                       ^^^^ `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -748,12 +798,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i128: BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:118:39\n    |\n LL |     assert::is_transmutable::<  u32,  i128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   |                                       ^^^^ `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -763,12 +814,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<u64, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:120:39\n    |\n LL |     assert::is_transmutable::<  u64,  u128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<u64, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   |                                       ^^^^ `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, false, false, false, false>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -778,12 +830,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i128: BikeshedIntrinsicFrom<u64, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:121:39\n    |\n LL |     assert::is_transmutable::<  u64,  i128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<u64, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   |                                       ^^^^ `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, false, false, false, false>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -793,12 +846,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<i64, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:123:39\n    |\n LL |     assert::is_transmutable::<  i64,  u128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<i64, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   |                                       ^^^^ `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, false, false, false, false>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -808,12 +862,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i128: BikeshedIntrinsicFrom<i64, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:124:39\n    |\n LL |     assert::is_transmutable::<  i64,  i128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<i64, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   |                                       ^^^^ `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, false, false, false, false>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -823,12 +878,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `u128: BikeshedIntrinsicFrom<f64, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:126:39\n    |\n LL |     assert::is_transmutable::<  f64,  u128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<f64, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   |                                       ^^^^ `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, false, false, false, false>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n@@ -838,12 +894,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `i128: BikeshedIntrinsicFrom<f64, assert::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:127:39\n    |\n LL |     assert::is_transmutable::<  f64,  i128>();\n-   |                                       ^^^^ the trait `BikeshedIntrinsicFrom<f64, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   |                                       ^^^^ `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, false, false, false, false>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |"}, {"sha": "86d4740300dff7ff3df4eb93161fe1e5d1b8c4c1", "filename": "src/test/ui/transmutability/primitives/unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -20,5 +20,5 @@ fn should_have_correct_size() {\n     struct Context;\n     assert::is_transmutable::<(), Zst, Context>();\n     assert::is_transmutable::<Zst, (), Context>();\n-    assert::is_transmutable::<(), u8, Context>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<(), u8, Context>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "cf27c0d17b3378600faccc12d45e03bb93100693", "filename": "src/test/ui/transmutability/primitives/unit.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `u8: BikeshedIntrinsicFrom<(), should_have_correct_size::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n   --> $DIR/unit.rs:23:35\n    |\n LL |     assert::is_transmutable::<(), u8, Context>();\n-   |                                   ^^ the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, true, true, true, true>` is not implemented for `u8`\n+   |                                   ^^ `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, true, true, true, true>` is not implemented for `u8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/unit.rs:12:14\n    |"}, {"sha": "c6fd4c43e95c00440e4e33fc4d306754eecce5ba", "filename": "src/test/ui/transmutability/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Freferences.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -16,5 +16,5 @@ mod assert {\n \n fn not_yet_implemented() {\n     #[repr(C)] struct Unit;\n-    assert::is_maybe_transmutable::<&'static Unit, &'static Unit>(); //~ ERROR not satisfied\n+    assert::is_maybe_transmutable::<&'static Unit, &'static Unit>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "17ffcf64177e3fa13e7311aeb08058a5d47a2c2d", "filename": "src/test/ui/transmutability/references.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `&'static Unit: BikeshedIntrinsicFrom<&'static Unit, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n   --> $DIR/references.rs:19:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                                    ^^^^^^^^^^^^^ the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, true, true, true, true>` is not implemented for `&'static Unit`\n+   |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, true, true, true, true>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:13:14\n    |"}, {"sha": "556be989dbc252a141b9d3ee918ca2573a05be31", "filename": "src/test/ui/transmutability/structs/repr/should_require_well_defined_layout.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -18,39 +18,39 @@ fn should_reject_repr_rust()\n {\n     fn unit() {\n         struct repr_rust;\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn tuple() {\n         struct repr_rust();\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn braces() {\n         struct repr_rust{}\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn aligned() {\n         #[repr(align(1))] struct repr_rust{}\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn packed() {\n         #[repr(packed)] struct repr_rust{}\n-        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n     }\n \n     fn nested() {\n         struct repr_rust;\n         #[repr(C)] struct repr_c(repr_rust);\n-        assert::is_maybe_transmutable::<repr_c, ()>(); //~ ERROR not satisfied\n-        assert::is_maybe_transmutable::<u128, repr_c>(); //~ ERROR not satisfied\n+        assert::is_maybe_transmutable::<repr_c, ()>(); //~ ERROR cannot be safely transmuted\n+        assert::is_maybe_transmutable::<u128, repr_c>(); //~ ERROR cannot be safely transmuted\n     }\n }\n "}, {"sha": "07355f7c2ad265e79c8b083dea8a9650592369b1", "filename": "src/test/ui/transmutability/structs/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<should_reject_repr_rust::unit::repr_rust, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `should_reject_repr_rust::unit::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:21:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::unit::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `should_reject_repr_rust::unit::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::unit::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -13,12 +14,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `should_reject_repr_rust::unit::repr_rust: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::unit::repr_rust` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:22:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::unit::repr_rust`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::unit::repr_rust` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::unit::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -28,12 +30,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<should_reject_repr_rust::tuple::repr_rust, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `should_reject_repr_rust::tuple::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:27:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::tuple::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `should_reject_repr_rust::tuple::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::tuple::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -43,12 +46,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `should_reject_repr_rust::tuple::repr_rust: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::tuple::repr_rust` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:28:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::tuple::repr_rust`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::tuple::repr_rust` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::tuple::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -58,12 +62,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<should_reject_repr_rust::braces::repr_rust, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `should_reject_repr_rust::braces::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:33:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::braces::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `should_reject_repr_rust::braces::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::braces::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -73,12 +78,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `should_reject_repr_rust::braces::repr_rust: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::braces::repr_rust` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:34:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::braces::repr_rust`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::braces::repr_rust` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::braces::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -88,12 +94,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<aligned::repr_rust, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `aligned::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:39:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<aligned::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `aligned::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<aligned::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -103,12 +110,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `aligned::repr_rust: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `aligned::repr_rust` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:40:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `aligned::repr_rust`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `aligned::repr_rust` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `aligned::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -118,12 +126,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<packed::repr_rust, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `packed::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:45:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ the trait `BikeshedIntrinsicFrom<packed::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                    ^^ `packed::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<packed::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -133,12 +142,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `packed::repr_rust: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `packed::repr_rust` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:46:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `packed::repr_rust`\n+   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `packed::repr_rust` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `packed::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -148,12 +158,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<nested::repr_c, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `nested::repr_c` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:52:49\n    |\n LL |         assert::is_maybe_transmutable::<repr_c, ()>();\n-   |                                                 ^^ the trait `BikeshedIntrinsicFrom<nested::repr_c, assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                 ^^ `nested::repr_c` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<nested::repr_c, assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -163,12 +174,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `nested::repr_c: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `nested::repr_c` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:53:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_c>();\n-   |                                               ^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `nested::repr_c`\n+   |                                               ^^^^^^ `u128` cannot be safely transmuted into `nested::repr_c` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `nested::repr_c`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |"}, {"sha": "cec8e389f444e1437f78fa404ad857b8e164a28a", "filename": "src/test/ui/transmutability/unions/repr/should_require_well_defined_layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -20,8 +20,8 @@ fn should_reject_repr_rust()\n         a: u8\n     }\n \n-    assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR not satisfied\n-    assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR not satisfied\n+    assert::is_maybe_transmutable::<repr_rust, ()>(); //~ ERROR cannot be safely transmuted\n+    assert::is_maybe_transmutable::<u128, repr_rust>(); //~ ERROR cannot be safely transmuted\n }\n \n fn should_accept_repr_C()"}, {"sha": "2ed01b159ab0bef5a70edf9bbd5677afc62cfd45", "filename": "src/test/ui/transmutability/unions/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `(): BikeshedIntrinsicFrom<should_reject_repr_rust::repr_rust, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `should_reject_repr_rust::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:23:48\n    |\n LL |     assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                ^^ the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   |                                                ^^ `should_reject_repr_rust::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -13,12 +14,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `should_reject_repr_rust::repr_rust: BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::repr_rust` in the defining scope of `assert::Context`.\n   --> $DIR/should_require_well_defined_layout.rs:24:43\n    |\n LL |     assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                           ^^^^^^^^^ the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::repr_rust`\n+   |                                           ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::repr_rust` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |"}, {"sha": "c4757900f9c3e884e9309cda637e8392f1b10b0d", "filename": "src/test/ui/transmutability/unions/should_pad_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -36,5 +36,5 @@ fn should_pad_variants() {\n     struct Context;\n     // If the implementation (incorrectly) fails to pad `Lopsided::smol` with\n     // an uninitialized byte, this transmutation might be (wrongly) accepted:\n-    assert::is_transmutable::<Src, Dst, Context>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<Src, Dst, Context>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "429f7211d17a86cfaa87434afd180be295246cb9", "filename": "src/test/ui/transmutability/unions/should_pad_variants.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `Dst: BikeshedIntrinsicFrom<Src, should_pad_variants::Context, true, true, true, true>` is not satisfied\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n   --> $DIR/should_pad_variants.rs:39:36\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n-   |                                    ^^^ the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, true, true, true, true>` is not implemented for `Dst`\n+   |                                    ^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, true, true, true, true>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14\n    |"}, {"sha": "e8138d0e046c55d2172188cf8b296749ad1419ff", "filename": "src/test/ui/transmutability/unions/should_reject_contraction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -32,5 +32,5 @@ fn test() {\n         c: Ox01,\n     }\n \n-    assert::is_transmutable::<Superset, Subset>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<Superset, Subset>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "99f58900817282f5ec0e7bf9c9227ae0a2c558ce", "filename": "src/test/ui/transmutability/unions/should_reject_contraction.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `Subset: BikeshedIntrinsicFrom<Superset, assert::Context, false, false, false, true>` is not satisfied\n+error[E0277]: `Superset` cannot be safely transmuted into `Subset` in the defining scope of `assert::Context`.\n   --> $DIR/should_reject_contraction.rs:35:41\n    |\n LL |     assert::is_transmutable::<Superset, Subset>();\n-   |                                         ^^^^^^ the trait `BikeshedIntrinsicFrom<Superset, assert::Context, false, false, false, true>` is not implemented for `Subset`\n+   |                                         ^^^^^^ `Superset` cannot be safely transmuted into `Subset` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<Superset, assert::Context, false, false, false, true>` is not implemented for `Subset`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_contraction.rs:13:14\n    |"}, {"sha": "16160e29a5469ff863fee6c88705116908ce2cb6", "filename": "src/test/ui/transmutability/unions/should_reject_disjoint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -31,6 +31,6 @@ fn test() {\n         c: Ox01,\n     }\n \n-    assert::is_maybe_transmutable::<A, B>(); //~ ERROR not satisfied\n-    assert::is_maybe_transmutable::<B, A>(); //~ ERROR not satisfied\n+    assert::is_maybe_transmutable::<A, B>(); //~ ERROR cannot be safely transmuted\n+    assert::is_maybe_transmutable::<B, A>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "5714e2bf320c5a44a8654016ec3d9f2c69beb044", "filename": "src/test/ui/transmutability/unions/should_reject_disjoint.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `B: BikeshedIntrinsicFrom<A, assert::Context, false, false, true, true>` is not satisfied\n+error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n   --> $DIR/should_reject_disjoint.rs:34:40\n    |\n LL |     assert::is_maybe_transmutable::<A, B>();\n-   |                                        ^ the trait `BikeshedIntrinsicFrom<A, assert::Context, false, false, true, true>` is not implemented for `B`\n+   |                                        ^ `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, false, false, true, true>` is not implemented for `B`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_reject_disjoint.rs:13:14\n    |\n@@ -13,12 +14,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, true, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: the trait bound `A: BikeshedIntrinsicFrom<B, assert::Context, false, false, true, true>` is not satisfied\n+error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n   --> $DIR/should_reject_disjoint.rs:35:40\n    |\n LL |     assert::is_maybe_transmutable::<B, A>();\n-   |                                        ^ the trait `BikeshedIntrinsicFrom<B, assert::Context, false, false, true, true>` is not implemented for `A`\n+   |                                        ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, false, false, true, true>` is not implemented for `A`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_reject_disjoint.rs:13:14\n    |"}, {"sha": "58e399fb962259a166981e4e3adefb517eea0840", "filename": "src/test/ui/transmutability/unions/should_reject_intersecting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -33,6 +33,6 @@ fn test() {\n         b: OxFF,\n     }\n \n-    assert::is_transmutable::<A, B>(); //~ ERROR not satisfied\n-    assert::is_transmutable::<B, A>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<A, B>(); //~ ERROR cannot be safely transmuted\n+    assert::is_transmutable::<B, A>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "92689a5f828b475fee72a52c888da56f9b2a5373", "filename": "src/test/ui/transmutability/unions/should_reject_intersecting.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `B: BikeshedIntrinsicFrom<A, assert::Context, false, false, false, true>` is not satisfied\n+error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n   --> $DIR/should_reject_intersecting.rs:36:34\n    |\n LL |     assert::is_transmutable::<A, B>();\n-   |                                  ^ the trait `BikeshedIntrinsicFrom<A, assert::Context, false, false, false, true>` is not implemented for `B`\n+   |                                  ^ `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, false, false, false, true>` is not implemented for `B`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_intersecting.rs:14:14\n    |\n@@ -13,12 +14,13 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: the trait bound `A: BikeshedIntrinsicFrom<B, assert::Context, false, false, false, true>` is not satisfied\n+error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n   --> $DIR/should_reject_intersecting.rs:37:34\n    |\n LL |     assert::is_transmutable::<B, A>();\n-   |                                  ^ the trait `BikeshedIntrinsicFrom<B, assert::Context, false, false, false, true>` is not implemented for `A`\n+   |                                  ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, false, false, false, true>` is not implemented for `A`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_intersecting.rs:14:14\n    |"}, {"sha": "fcf3f3a52780578a7fc5e986a351def78032d504", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_private_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -33,5 +33,5 @@ mod dst {\n \n fn test() {\n     struct Context;\n-    assert::is_transmutable::<src::Src, dst::Dst, Context>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<src::Src, dst::Dst, Context>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "85124019e7f0358dd9f38c82bf2b30165c92ba7c", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_private_field.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `Dst: BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n   --> $DIR/should_reject_if_dst_has_private_field.rs:36:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n+   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_private_field.rs:13:14\n    |"}, {"sha": "566b56467124f87624ce3a581d6d33f80c71cf19", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_private_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -34,5 +34,5 @@ mod dst {\n \n fn test() {\n     struct Context;\n-    assert::is_transmutable::<src::Src, dst::Dst, Context>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<src::Src, dst::Dst, Context>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "0be564d93e2d8cb98d52b21ead007319f1c23e88", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_private_variant.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `Dst: BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n   --> $DIR/should_reject_if_dst_has_private_variant.rs:37:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n+   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_private_variant.rs:13:14\n    |"}, {"sha": "35fff5966c85b07bcbe9990e69532264291a7895", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_tricky_unreachable_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_tricky_unreachable_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_tricky_unreachable_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_tricky_unreachable_field.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n //! NOTE: This test documents a known-bug in the implementation of the\n //! transmutability trait. Once fixed, the above \"check-pass\" header should be\n-//! removed, and an \"ERROR not satisfied\" annotation should be added at the end\n+//! removed, and an \"ERROR cannot be safely transmuted\" annotation should be added at the end\n //! of the line starting with `assert::is_transmutable`.\n //!\n //! Unless visibility is assumed, a transmutation should be rejected if the"}, {"sha": "42799d803b0289958692e1f6c763b2ad3f4bc582", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -35,5 +35,5 @@ mod dst {\n \n fn test() {\n     struct Context;\n-    assert::is_transmutable::<src::Src, dst::Dst, Context>(); //~ ERROR not satisfied\n+    assert::is_transmutable::<src::Src, dst::Dst, Context>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "95c68d452010b9cb902bfcc6f3fe8b08af1dc742", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_field.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `Dst: BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n   --> $DIR/should_reject_if_dst_has_unreachable_field.rs:38:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n+   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_unreachable_field.rs:15:14\n    |"}, {"sha": "e13b32b30d9643134ed25951e542451c509f4baa", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.rs?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -38,5 +38,5 @@ fn test() {\n     struct Context;\n     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n     //~^ ERROR `Dst` is private\n-    //~| ERROR not satisfied\n+    //~| ERROR cannot be safely transmuted\n }"}, {"sha": "3391839e39e023e86a6c3830ef46082d33ec606c", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_ty.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d1ab4877c96a2b2fa802444f3a3d311a96beef/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr?ref=21d1ab4877c96a2b2fa802444f3a3d311a96beef", "patch": "@@ -10,12 +10,13 @@ note: the struct `Dst` is defined here\n LL |     #[repr(C)] pub(self) struct Dst {\n    |                ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `Dst: BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not satisfied\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n   --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:39:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n+   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n    |\n+   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:15:14\n    |"}]}