{"sha": "8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "node_id": "C_kwDOAAsO6NoAKDhhMTMxNTdjMTZmMjc5ZGZhNDZkMGVmOTJjZWIzOWJjYmJjZmU3Mjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-12T05:52:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-12T05:52:38Z"}, "message": "Rollup merge of #106702 - estebank:trait-bounds, r=compiler-errors\n\nConserve cause of `ImplDerivedObligation` in E0599\n\nCC #86377.", "tree": {"sha": "43614549ba4666633eb562f502ca9f21db3c9a3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43614549ba4666633eb562f502ca9f21db3c9a3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjv6AmCRBK7hj4Ov3rIwAAWwAIAF+1FfrkvEVI2AukUd/N4Q+g\n2qqiGTBjjctp8HJoDbywox8q09mI7Osqx0s9MQhjrTp91M1mzEcM4JHNkSwhAGjN\nhcY8SxoIA5TC//X64FhRzg05QRGDX6jGaZ8H84zaFuIwHrx91OhYGnzqoKnk5GbA\nH7M2gahaI+ECbJUsjx9VD7WsF9K4RjP9Gq3SLR+x2dDrRAUOCbrx8kclBFu7QIxM\nNWHEGbOp64Kdda8a3iQQlz2aMvvLsZ3x5yO5+mWGyg22QJ+0Ax3zsCIyC31ooXBs\nMtr2exoen0obMKcEs4gjx8/p4iIQ1c2P2dkbMqAckVJuDIK1hCaqZSULU56a9pg=\n=Fe3Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 43614549ba4666633eb562f502ca9f21db3c9a3c\nparent d42d952afc58e2325524d3b025281838449f74a4\nparent 317adda649763de4c15692da327c216f05106a94\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673502758 +0100\ncommitter GitHub <noreply@github.com> 1673502758 +0100\n\nRollup merge of #106702 - estebank:trait-bounds, r=compiler-errors\n\nConserve cause of `ImplDerivedObligation` in E0599\n\nCC #86377.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "html_url": "https://github.com/rust-lang/rust/commit/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d42d952afc58e2325524d3b025281838449f74a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d42d952afc58e2325524d3b025281838449f74a4", "html_url": "https://github.com/rust-lang/rust/commit/d42d952afc58e2325524d3b025281838449f74a4"}, {"sha": "317adda649763de4c15692da327c216f05106a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/317adda649763de4c15692da327c216f05106a94", "html_url": "https://github.com/rust-lang/rust/commit/317adda649763de4c15692da327c216f05106a94"}], "stats": {"total": 248, "additions": 165, "deletions": 83}, "files": [{"sha": "63067deb7b07b79eacf7925f5a3f671fe7ffcb1f", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -1556,7 +1556,23 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n                     // Convert the bounds into obligations.\n                     let impl_obligations = traits::predicates_for_generics(\n-                        |_, _| cause.clone(),\n+                        |_idx, span| {\n+                            let misc = traits::ObligationCause::misc(span, self.body_id);\n+                            let parent_trait_pred = ty::Binder::dummy(ty::TraitPredicate {\n+                                trait_ref: ty::TraitRef::from_method(self.tcx, impl_def_id, substs),\n+                                constness: ty::BoundConstness::NotConst,\n+                                polarity: ty::ImplPolarity::Positive,\n+                            });\n+                            misc.derived_cause(parent_trait_pred, |derived| {\n+                                traits::ImplDerivedObligation(Box::new(\n+                                    traits::ImplDerivedObligationCause {\n+                                        derived,\n+                                        impl_def_id,\n+                                        span,\n+                                    },\n+                                ))\n+                            })\n+                        },\n                         self.param_env,\n                         impl_bounds,\n                     );"}, {"sha": "8166eb8299041136a089eb92866cf4fea044dd0b", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -101,6 +101,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.autoderef(span, ty).any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn report_method_error(\n         &self,\n         span: Span,\n@@ -586,22 +587,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Find all the requirements that come from a local `impl` block.\n             let mut skip_list: FxHashSet<_> = Default::default();\n-            let mut spanned_predicates: FxHashMap<MultiSpan, _> = Default::default();\n-            for (data, p, parent_p, impl_def_id, cause) in unsatisfied_predicates\n+            let mut spanned_predicates = FxHashMap::default();\n+            for (p, parent_p, impl_def_id, cause) in unsatisfied_predicates\n                 .iter()\n                 .filter_map(|(p, parent, c)| c.as_ref().map(|c| (p, parent, c)))\n                 .filter_map(|(p, parent, c)| match c.code() {\n-                    ObligationCauseCode::ImplDerivedObligation(data) => {\n-                        Some((&data.derived, p, parent, data.impl_def_id, data))\n+                    ObligationCauseCode::ImplDerivedObligation(data)\n+                        if matches!(p.kind().skip_binder(), ty::PredicateKind::Clause(_)) =>\n+                    {\n+                        Some((p, parent, data.impl_def_id, data))\n                     }\n                     _ => None,\n                 })\n             {\n-                let parent_trait_ref = data.parent_trait_pred;\n-                let path = parent_trait_ref.print_modifiers_and_trait_path();\n-                let tr_self_ty = parent_trait_ref.skip_binder().self_ty();\n-                let unsatisfied_msg = \"unsatisfied trait bound introduced here\";\n-                let derive_msg = \"unsatisfied trait bound introduced in this `derive` macro\";\n                 match self.tcx.hir().get_if_local(impl_def_id) {\n                     // Unmet obligation comes from a `derive` macro, point at it once to\n                     // avoid multiple span labels pointing at the same place.\n@@ -617,10 +615,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ) =>\n                     {\n                         let span = self_ty.span.ctxt().outer_expn_data().call_site;\n-                        let mut spans: MultiSpan = span.into();\n-                        spans.push_span_label(span, derive_msg);\n-                        let entry = spanned_predicates.entry(spans);\n-                        entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n+                        let entry = spanned_predicates.entry(span);\n+                        let entry = entry.or_insert_with(|| {\n+                            (FxHashSet::default(), FxHashSet::default(), Vec::new())\n+                        });\n+                        entry.0.insert(span);\n+                        entry.1.insert((\n+                            span,\n+                            \"unsatisfied trait bound introduced in this `derive` macro\",\n+                        ));\n+                        entry.2.push(p);\n+                        skip_list.insert(p);\n                     }\n \n                     // Unmet obligation coming from an `impl`.\n@@ -647,8 +652,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 };\n                                 err.span_suggestion_verbose(\n                                     sp,\n-                                    \"consider relaxing the type parameter's implicit \\\n-                                     `Sized` bound\",\n+                                    \"consider relaxing the type parameter's implicit `Sized` bound\",\n                                     sugg,\n                                     Applicability::MachineApplicable,\n                                 );\n@@ -659,25 +663,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let _ = format_pred(*pred);\n                         }\n                         skip_list.insert(p);\n-                        let mut spans = if cause.span != *item_span {\n-                            let mut spans: MultiSpan = cause.span.into();\n-                            spans.push_span_label(cause.span, unsatisfied_msg);\n-                            spans\n+                        let entry = spanned_predicates.entry(self_ty.span);\n+                        let entry = entry.or_insert_with(|| {\n+                            (FxHashSet::default(), FxHashSet::default(), Vec::new())\n+                        });\n+                        entry.2.push(p);\n+                        if cause.span != *item_span {\n+                            entry.0.insert(cause.span);\n+                            entry.1.insert((cause.span, \"unsatisfied trait bound introduced here\"));\n                         } else {\n-                            let mut spans = Vec::with_capacity(2);\n                             if let Some(trait_ref) = of_trait {\n-                                spans.push(trait_ref.path.span);\n+                                entry.0.insert(trait_ref.path.span);\n                             }\n-                            spans.push(self_ty.span);\n-                            spans.into()\n+                            entry.0.insert(self_ty.span);\n                         };\n                         if let Some(trait_ref) = of_trait {\n-                            spans.push_span_label(trait_ref.path.span, \"\");\n+                            entry.1.insert((trait_ref.path.span, \"\"));\n                         }\n-                        spans.push_span_label(self_ty.span, \"\");\n-\n-                        let entry = spanned_predicates.entry(spans);\n-                        entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n+                        entry.1.insert((self_ty.span, \"\"));\n                     }\n                     Some(Node::Item(hir::Item {\n                         kind: hir::ItemKind::Trait(rustc_ast::ast::IsAuto::Yes, ..),\n@@ -694,11 +697,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             let mut spanned_predicates: Vec<_> = spanned_predicates.into_iter().collect();\n-            spanned_predicates.sort_by_key(|(span, (_, _, _))| span.primary_span());\n-            for (span, (_path, _self_ty, preds)) in spanned_predicates {\n-                let mut preds: Vec<_> = preds\n-                    .into_iter()\n-                    .filter_map(|pred| format_pred(*pred))\n+            spanned_predicates.sort_by_key(|(span, _)| *span);\n+            for (_, (primary_spans, span_labels, predicates)) in spanned_predicates {\n+                let mut preds: Vec<_> = predicates\n+                    .iter()\n+                    .filter_map(|pred| format_pred(**pred))\n                     .map(|(p, _)| format!(\"`{}`\", p))\n                     .collect();\n                 preds.sort();\n@@ -708,6 +711,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     format!(\"the following trait bounds were not satisfied:\\n{}\", preds.join(\"\\n\"),)\n                 };\n+                let mut span: MultiSpan = primary_spans.into_iter().collect::<Vec<_>>().into();\n+                for (sp, label) in span_labels {\n+                    span.push_span_label(sp, label);\n+                }\n                 err.span_note(span, &msg);\n                 unsatisfied_bounds = true;\n             }"}, {"sha": "eb4ff8305dac898011449358b8d822de6e9eac27", "filename": "tests/ui/const-generics/generic_const_exprs/issue-69654.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -15,8 +15,14 @@ LL | struct Foo<const N: usize> {}\n LL |     Foo::foo();\n    |          ^^^ function or associated item cannot be called on `Foo<_>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `[u8; _]: Bar<[(); _]>`\n+note: trait bound `[u8; _]: Bar<[(); _]>` was not satisfied\n+  --> $DIR/issue-69654.rs:11:14\n+   |\n+LL | impl<const N: usize> Foo<N>\n+   |                      ------\n+LL | where\n+LL |     [u8; N]: Bar<[(); N]>,\n+   |              ^^^^^^^^^^^^ unsatisfied trait bound introduced here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6aa8ee13b790f57cd8dd8ba2dff2ba475ea28335", "filename": "tests/ui/const-generics/generic_const_exprs/issue-80742.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -23,8 +23,17 @@ LL |     let dst = Inline::<dyn Debug>::new(0);\n    |\n    = note: doesn't satisfy `dyn Debug: Sized`\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `dyn Debug: Sized`\n+note: trait bound `dyn Debug: Sized` was not satisfied\n+  --> $DIR/issue-80742.rs:20:6\n+   |\n+LL | impl<T> Inline<T>\n+   |      ^  ---------\n+   |      |\n+   |      unsatisfied trait bound introduced here\n+help: consider relaxing the type parameter's implicit `Sized` bound\n+   |\n+LL | impl<T: ?Sized> Inline<T>\n+   |       ++++++++\n \n error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL"}, {"sha": "91b334b412bc968800442c48883eb3e7d03aa914", "filename": "tests/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -18,9 +18,6 @@ note: trait bound `NotClone: Clone` was not satisfied\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n-   = note: the following trait bounds were not satisfied:\n-           `NotClone: Clone`\n-           which is required by `Bar<NotClone>: Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `Clone`"}, {"sha": "cee30ac50a6a2ed1335a379ae6aaefe29c362d39", "filename": "tests/ui/derives/issue-91492.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fderives%2Fissue-91492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fderives%2Fissue-91492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91492.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -42,8 +42,13 @@ LL | struct Object<T, A>(T, A);\n LL |     foo.use_clone();\n    |         ^^^^^^^^^ method cannot be called on `Object<NoDerives, SomeDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Clone`\n+note: trait bound `NoDerives: Clone` was not satisfied\n+  --> $DIR/issue-91492.rs:18:9\n+   |\n+LL | impl<T: Clone, A: Default> Object<T, A> {\n+   |         ^^^^^              ------------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]"}, {"sha": "bf0bb3fbdf8f7f26a6a920f8f5be9cfe30b59a06", "filename": "tests/ui/derives/issue-91550.stderr", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91550.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -30,8 +30,13 @@ LL | struct Object<T>(T);\n LL |     foo.use_eq();\n    |         ^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Eq`\n+note: trait bound `NoDerives: Eq` was not satisfied\n+  --> $DIR/issue-91550.rs:15:9\n+   |\n+LL | impl<T: Eq> Object<T> {\n+   |         ^^  ---------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Eq, PartialEq)]`\n    |\n LL | #[derive(Eq, PartialEq)]\n@@ -49,8 +54,13 @@ LL | struct Object<T>(T);\n LL |     foo.use_ord();\n    |         ^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Ord`\n+note: trait bound `NoDerives: Ord` was not satisfied\n+  --> $DIR/issue-91550.rs:18:9\n+   |\n+LL | impl<T: Ord> Object<T> {\n+   |         ^^^  ---------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n@@ -71,9 +81,16 @@ LL | struct Object<T>(T);\n LL |     foo.use_ord_and_partial_ord();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Ord`\n-           `NoDerives: PartialOrd`\n+note: the following trait bounds were not satisfied:\n+      `NoDerives: Ord`\n+      `NoDerives: PartialOrd`\n+  --> $DIR/issue-91550.rs:21:9\n+   |\n+LL | impl<T: Ord + PartialOrd> Object<T> {\n+   |         ^^^   ^^^^^^^^^^  ---------\n+   |         |     |\n+   |         |     unsatisfied trait bound introduced here\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]"}, {"sha": "83655341d6a243756412fcf1a2369eaf324f5e94", "filename": "tests/ui/generic-associated-types/method-unsatified-assoc-type-predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -11,7 +11,7 @@ trait M {\n \n impl<T: X<Y<i32> = i32>> M for T {}\n //~^ NOTE trait bound `<S as X>::Y<i32> = i32` was not satisfied\n-//~| NOTE unsatisfied trait bound introduced here\n+//~| NOTE\n //~| NOTE\n //~| NOTE\n "}, {"sha": "d872291c87054e2aaf11c7e6d8ea97624d3a6ef4", "filename": "tests/ui/impl-trait/issues/issue-62742.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -23,8 +23,13 @@ LL | pub struct RawImpl<T>(PhantomData<T>);\n LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n    | ----------------------------------------- function or associated item `foo` not found for this struct\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `RawImpl<()>: Raw<()>`\n+note: trait bound `RawImpl<()>: Raw<()>` was not satisfied\n+  --> $DIR/issue-62742.rs:28:20\n+   |\n+LL | impl<T: ?Sized, A: Raw<T>> SafeImpl<T, A> {\n+   |                    ^^^^^^  --------------\n+   |                    |\n+   |                    unsatisfied trait bound introduced here\n note: the trait `Raw` must be implemented\n   --> $DIR/issue-62742.rs:12:1\n    |"}, {"sha": "f3db56d1d53911e101716a8b8a844e02d28a7854", "filename": "tests/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -88,9 +88,16 @@ LL | struct Struct<T> {\n LL |     s.method();\n    |       ^^^^^^ method cannot be called on `Struct<f64>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `f64: Eq`\n-           `f64: Ord`\n+note: the following trait bounds were not satisfied:\n+      `f64: Eq`\n+      `f64: Ord`\n+  --> $DIR/method-not-found-generic-arg-elision.rs:74:36\n+   |\n+LL | impl<T: Clone + Copy + PartialEq + Eq + PartialOrd + Ord> Struct<T> {\n+   |                                    ^^                ^^^  ---------\n+   |                                    |                 |\n+   |                                    |                 unsatisfied trait bound introduced here\n+   |                                    unsatisfied trait bound introduced here\n \n error: aborting due to 9 previous errors\n "}, {"sha": "968e285af7ff80349eab4f4f15975f9447285714", "filename": "tests/ui/missing-trait-bounds/missing-trait-bounds-for-method-call.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -7,20 +7,16 @@ LL | struct Foo<T> {\n LL |         self.foo();\n    |              ^^^ method cannot be called on `&Foo<T>` due to unsatisfied trait bounds\n    |\n-note: trait bound `T: Default` was not satisfied\n+note: the following trait bounds were not satisfied:\n+      `T: Bar`\n+      `T: Default`\n   --> $DIR/missing-trait-bounds-for-method-call.rs:10:9\n    |\n LL | impl<T: Default + Bar> Bar for Foo<T> {}\n-   |         ^^^^^^^        ---     ------\n-   |         |\n+   |         ^^^^^^^   ^^^  ---     ------\n+   |         |         |\n+   |         |         unsatisfied trait bound introduced here\n    |         unsatisfied trait bound introduced here\n-note: trait bound `T: Bar` was not satisfied\n-  --> $DIR/missing-trait-bounds-for-method-call.rs:10:19\n-   |\n-LL | impl<T: Default + Bar> Bar for Foo<T> {}\n-   |                   ^^^  ---     ------\n-   |                   |\n-   |                   unsatisfied trait bound introduced here\n help: consider restricting the type parameters to satisfy the trait bounds\n    |\n LL | struct Foo<T> where T: Bar, T: Default {"}, {"sha": "924b26a8c75fd224f7f9f13750aafea8b575ddf7", "filename": "tests/ui/suggestions/derive-trait-for-method-call.stderr", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -16,10 +16,18 @@ LL | struct Foo<X, Y> (X, Y);\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Enum, CloneEnum>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `Enum: Clone`\n-           `Enum: Default`\n-           `CloneEnum: Default`\n+note: the following trait bounds were not satisfied:\n+      `CloneEnum: Default`\n+      `Enum: Clone`\n+      `Enum: Default`\n+  --> $DIR/derive-trait-for-method-call.rs:20:9\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |         ^^^^^   ^^^^^^^                ^^^^^^^  ---------\n+   |         |       |                      |\n+   |         |       |                      unsatisfied trait bound introduced here\n+   |         |       unsatisfied trait bound introduced here\n+   |         unsatisfied trait bound introduced here\n note: the trait `Default` must be implemented\n   --> $SRC_DIR/core/src/default.rs:LL:COL\n help: consider annotating `Enum` with `#[derive(Clone)]`\n@@ -45,10 +53,18 @@ LL | struct Foo<X, Y> (X, Y);\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Struct, CloneStruct>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `Struct: Clone`\n-           `Struct: Default`\n-           `CloneStruct: Default`\n+note: the following trait bounds were not satisfied:\n+      `CloneStruct: Default`\n+      `Struct: Clone`\n+      `Struct: Default`\n+  --> $DIR/derive-trait-for-method-call.rs:20:9\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |         ^^^^^   ^^^^^^^                ^^^^^^^  ---------\n+   |         |       |                      |\n+   |         |       |                      unsatisfied trait bound introduced here\n+   |         |       unsatisfied trait bound introduced here\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `CloneStruct` with `#[derive(Default)]`\n    |\n LL | #[derive(Default)]\n@@ -73,9 +89,16 @@ LL |     let y = x.test();\n    |\n    = note: doesn't satisfy `Vec<Enum>: Clone`\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `Vec<Enum>: Clone`\n-           `Instant: Default`\n+note: the following trait bounds were not satisfied:\n+      `Instant: Default`\n+      `Vec<Enum>: Clone`\n+  --> $DIR/derive-trait-for-method-call.rs:20:9\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |         ^^^^^                          ^^^^^^^  ---------\n+   |         |                              |\n+   |         |                              unsatisfied trait bound introduced here\n+   |         unsatisfied trait bound introduced here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b80e8b988adb174004542d3d5880d1ca5a959164", "filename": "tests/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -32,9 +32,6 @@ note: trait bound `CloneNoCopy: Copy` was not satisfied\n    |\n LL | #[derive(Clone, Copy)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n-   = note: the following trait bounds were not satisfied:\n-           `CloneNoCopy: Copy`\n-           which is required by `U5<CloneNoCopy>: Clone`\n help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n LL | #[derive(Clone, Copy)]"}, {"sha": "b80e8b988adb174004542d3d5880d1ca5a959164", "filename": "tests/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13157c16f279dfa46d0ef92ceb39bcbbcfe729/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=8a13157c16f279dfa46d0ef92ceb39bcbbcfe729", "patch": "@@ -32,9 +32,6 @@ note: trait bound `CloneNoCopy: Copy` was not satisfied\n    |\n LL | #[derive(Clone, Copy)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n-   = note: the following trait bounds were not satisfied:\n-           `CloneNoCopy: Copy`\n-           which is required by `U5<CloneNoCopy>: Clone`\n help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n LL | #[derive(Clone, Copy)]"}]}