{"sha": "abab9efbdb82b76f418115462311f8852600c9a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYWI5ZWZiZGI4MmI3NmY0MTgxMTU0NjIzMTFmODg1MjYwMGM5YTI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-03T20:13:51Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-21T18:37:38Z"}, "message": "Schedule storage-dead of temporaries sooner\n\nThis ensures that we will correctly generate a storage-dead if the\ninitializing expression diverges.", "tree": {"sha": "1e8d1b264bba136bcaf77149b6a92fd9b0cc357d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8d1b264bba136bcaf77149b6a92fd9b0cc357d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abab9efbdb82b76f418115462311f8852600c9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abab9efbdb82b76f418115462311f8852600c9a2", "html_url": "https://github.com/rust-lang/rust/commit/abab9efbdb82b76f418115462311f8852600c9a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abab9efbdb82b76f418115462311f8852600c9a2/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5643f1a490d6aa5f90fc45fd92ac34d6e8a05d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5643f1a490d6aa5f90fc45fd92ac34d6e8a05d8", "html_url": "https://github.com/rust-lang/rust/commit/b5643f1a490d6aa5f90fc45fd92ac34d6e8a05d8"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "ac70bf30e457ba34c33824cf0a4636416bec591e", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/abab9efbdb82b76f418115462311f8852600c9a2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab9efbdb82b76f418115462311f8852600c9a2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=abab9efbdb82b76f418115462311f8852600c9a2", "patch": "@@ -1,6 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::build::scope::{CachedBlock, DropKind};\n use crate::hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n@@ -63,6 +64,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             this.local_decls.push(local_decl)\n         };\n+        let temp_place = &Place::Base(PlaceBase::Local(temp));\n+\n         if !expr_ty.is_never() {\n             this.cfg.push(\n                 block,\n@@ -71,25 +74,38 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     kind: StatementKind::StorageLive(temp),\n                 },\n             );\n+\n+            // In constants, temp_lifetime is None for temporaries that live for the\n+            // 'static lifetime. Thus we do not drop these temporaries and simply leak them.\n+            // This is equivalent to what `let x = &foo();` does in functions. The temporary\n+            // is lifted to their surrounding scope. In a function that means the temporary lives\n+            // until just before the function returns. In constants that means it outlives the\n+            // constant's initialization value computation. Anything outliving a constant\n+            // must have the `'static` lifetime and live forever.\n+            // Anything with a shorter lifetime (e.g the `&foo()` in `bar(&foo())` or anything\n+            // within a block will keep the regular drops just like runtime code.\n+            if let Some(temp_lifetime) = temp_lifetime {\n+                this.schedule_drop(\n+                    expr_span,\n+                    temp_lifetime,\n+                    temp_place,\n+                    expr_ty,\n+                    DropKind::Storage,\n+                );\n+            }\n         }\n \n-        unpack!(block = this.into(&Place::Base(PlaceBase::Local(temp)), block, expr));\n+        unpack!(block = this.into(temp_place, block, expr));\n \n-        // In constants, temp_lifetime is None for temporaries that live for the\n-        // 'static lifetime. Thus we do not drop these temporaries and simply leak them.\n-        // This is equivalent to what `let x = &foo();` does in functions. The temporary\n-        // is lifted to their surrounding scope. In a function that means the temporary lives\n-        // until just before the function returns. In constants that means it outlives the\n-        // constant's initialization value computation. Anything outliving a constant\n-        // must have the `'static` lifetime and live forever.\n-        // Anything with a shorter lifetime (e.g the `&foo()` in `bar(&foo())` or anything\n-        // within a block will keep the regular drops just like runtime code.\n         if let Some(temp_lifetime) = temp_lifetime {\n-            this.schedule_drop_storage_and_value(\n+            this.schedule_drop(\n                 expr_span,\n                 temp_lifetime,\n-                &Place::Base(PlaceBase::Local(temp)),\n+                temp_place,\n                 expr_ty,\n+                DropKind::Value {\n+                    cached_block: CachedBlock::default(),\n+                },\n             );\n         }\n "}, {"sha": "bf22f00b5055241febebe48805840a533a8cb617", "filename": "src/test/mir-opt/issue-49232.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abab9efbdb82b76f418115462311f8852600c9a2/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab9efbdb82b76f418115462311f8852600c9a2/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232.rs?ref=abab9efbdb82b76f418115462311f8852600c9a2", "patch": "@@ -86,7 +86,6 @@ fn main() {\n //         unreachable;\n //     }\n //     bb17: {\n-//         StorageDead(_4);\n //         goto -> bb18;\n //     }\n //     bb18: {"}, {"sha": "6979924c8cd9083b4986665d81abb6c2df17e97a", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abab9efbdb82b76f418115462311f8852600c9a2/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab9efbdb82b76f418115462311f8852600c9a2/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=abab9efbdb82b76f418115462311f8852600c9a2", "patch": "@@ -109,8 +109,8 @@ fn main() {\n //      goto -> bb13;\n //  }\n //  bb13: {\n-//      StorageDead(_1);\n //      StorageDead(_2);\n+//      StorageDead(_1);\n //      _0 = ();\n //      return;\n //  }\n@@ -186,8 +186,8 @@ fn main() {\n //      goto -> bb13;\n //  }\n //  bb13: {\n-//      StorageDead(_1);\n //      StorageDead(_2);\n+//      StorageDead(_1);\n //      _0 = ();\n //      return;\n //  }\n@@ -289,8 +289,8 @@ fn main() {\n //      goto -> bb17;\n //  }\n //  bb17: {\n-//      StorageDead(_1);\n //      StorageDead(_2);\n+//      StorageDead(_1);\n //      _0 = ();\n //      return;\n //  }"}, {"sha": "2ed34ecfad2c6317f8f4b9a07db528b963ff26e9", "filename": "src/test/mir-opt/storage_live_dead_in_statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abab9efbdb82b76f418115462311f8852600c9a2/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab9efbdb82b76f418115462311f8852600c9a2/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs?ref=abab9efbdb82b76f418115462311f8852600c9a2", "patch": "@@ -182,8 +182,8 @@ fn main() {\n //        _2 = Foo { tup: const \"hi\", data: move _3 };\n //        _1 = &_2;\n //        _0 = &(*_1);\n-//        StorageDead(_1);\n //        StorageDead(_5);\n+//        StorageDead(_1);\n //        return;\n //    }\n //}"}]}