{"sha": "35d02e2c6a081dfbe2f24b0b9608920f90f42c8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZDAyZTJjNmEwODFkZmJlMmYyNGIwYjk2MDg5MjBmOTBmNDJjOGE=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-06-01T14:51:56Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-07-08T20:34:35Z"}, "message": "BTree: lazily locate leaves in rangeless iterators", "tree": {"sha": "f78f8e007fa5a2d6ce2ab22d1458824adef90707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f78f8e007fa5a2d6ce2ab22d1458824adef90707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35d02e2c6a081dfbe2f24b0b9608920f90f42c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35d02e2c6a081dfbe2f24b0b9608920f90f42c8a", "html_url": "https://github.com/rust-lang/rust/commit/35d02e2c6a081dfbe2f24b0b9608920f90f42c8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35d02e2c6a081dfbe2f24b0b9608920f90f42c8a/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "html_url": "https://github.com/rust-lang/rust/commit/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd"}], "stats": {"total": 239, "additions": 171, "deletions": 68}, "files": [{"sha": "ac6aae563e6ce2b219cce3e0f899cbcc96ae1ba1", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/35d02e2c6a081dfbe2f24b0b9608920f90f42c8a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d02e2c6a081dfbe2f24b0b9608920f90f42c8a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=35d02e2c6a081dfbe2f24b0b9608920f90f42c8a", "patch": "@@ -9,7 +9,7 @@ use core::ops::{Index, RangeBounds};\n use core::ptr;\n \n use super::borrow::DormantMutRef;\n-use super::navigate::LeafRange;\n+use super::navigate::{LazyLeafRange, LeafRange};\n use super::node::{self, marker, ForceResult::*, Handle, NodeRef, Root};\n use super::search::SearchResult::*;\n \n@@ -278,7 +278,7 @@ where\n /// [`iter`]: BTreeMap::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n-    range: Range<'a, K, V>,\n+    range: LazyLeafRange<marker::Immut<'a>, K, V>,\n     length: usize,\n }\n \n@@ -296,10 +296,20 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Iter<'_, K, V> {\n ///\n /// [`iter_mut`]: BTreeMap::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Debug)]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n-    range: RangeMut<'a, K, V>,\n+    range: LazyLeafRange<marker::ValMut<'a>, K, V>,\n     length: usize,\n+\n+    // Be invariant in `K` and `V`\n+    _marker: PhantomData<&'a mut (K, V)>,\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IterMut<'_, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let range = Iter { range: self.range.reborrow(), length: self.length };\n+        f.debug_list().entries(range).finish()\n+    }\n }\n \n /// An owning iterator over the entries of a `BTreeMap`.\n@@ -310,16 +320,15 @@ pub struct IterMut<'a, K: 'a, V: 'a> {\n /// [`into_iter`]: IntoIterator::into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n-    range: LeafRange<marker::Dying, K, V>,\n+    range: LazyLeafRange<marker::Dying, K, V>,\n     length: usize,\n }\n \n impl<K, V> IntoIter<K, V> {\n     /// Returns an iterator of references over the remaining items.\n     #[inline]\n     pub(super) fn iter(&self) -> Iter<'_, K, V> {\n-        let range = Range { inner: self.range.reborrow() };\n-        Iter { range: range, length: self.length }\n+        Iter { range: self.range.reborrow(), length: self.length }\n     }\n }\n \n@@ -1298,7 +1307,7 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.range.inner.next_unchecked() })\n+            Some(unsafe { self.range.next_unchecked() })\n         }\n     }\n \n@@ -1329,7 +1338,7 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.range.inner.next_back_unchecked() })\n+            Some(unsafe { self.range.next_back_unchecked() })\n         }\n     }\n }\n@@ -1367,7 +1376,7 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.range.inner.next_unchecked() })\n+            Some(unsafe { self.range.next_unchecked() })\n         }\n     }\n \n@@ -1395,7 +1404,7 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for IterMut<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.range.inner.next_back_unchecked() })\n+            Some(unsafe { self.range.next_back_unchecked() })\n         }\n     }\n }\n@@ -1414,7 +1423,7 @@ impl<'a, K, V> IterMut<'a, K, V> {\n     /// Returns an iterator of references over the remaining items.\n     #[inline]\n     pub(super) fn iter(&self) -> Iter<'_, K, V> {\n-        Iter { range: self.range.iter(), length: self.length }\n+        Iter { range: self.range.reborrow(), length: self.length }\n     }\n }\n \n@@ -1430,7 +1439,7 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n \n             IntoIter { range: full_range, length: me.length }\n         } else {\n-            IntoIter { range: LeafRange::none(), length: 0 }\n+            IntoIter { range: LazyLeafRange::none(), length: 0 }\n         }\n     }\n }\n@@ -1888,14 +1897,6 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n     }\n }\n \n-impl<'a, K, V> RangeMut<'a, K, V> {\n-    /// Returns an iterator of references over the remaining items.\n-    #[inline]\n-    pub(super) fn iter(&self) -> Range<'_, K, V> {\n-        Range { inner: self.inner.reborrow() }\n-    }\n-}\n-\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> {\n@@ -2038,9 +2039,9 @@ impl<K, V> BTreeMap<K, V> {\n         if let Some(root) = &self.root {\n             let full_range = root.reborrow().full_range();\n \n-            Iter { range: Range { inner: full_range }, length: self.length }\n+            Iter { range: full_range, length: self.length }\n         } else {\n-            Iter { range: Range { inner: LeafRange::none() }, length: 0 }\n+            Iter { range: LazyLeafRange::none(), length: 0 }\n         }\n     }\n \n@@ -2070,15 +2071,9 @@ impl<K, V> BTreeMap<K, V> {\n         if let Some(root) = &mut self.root {\n             let full_range = root.borrow_valmut().full_range();\n \n-            IterMut {\n-                range: RangeMut { inner: full_range, _marker: PhantomData },\n-                length: self.length,\n-            }\n+            IterMut { range: full_range, length: self.length, _marker: PhantomData }\n         } else {\n-            IterMut {\n-                range: RangeMut { inner: LeafRange::none(), _marker: PhantomData },\n-                length: 0,\n-            }\n+            IterMut { range: LazyLeafRange::none(), length: 0, _marker: PhantomData }\n         }\n     }\n "}, {"sha": "71edaab6ec2635963b964993cdb7d2ec28cf7c91", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 145, "deletions": 37, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/35d02e2c6a081dfbe2f24b0b9608920f90f42c8a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d02e2c6a081dfbe2f24b0b9608920f90f42c8a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=35d02e2c6a081dfbe2f24b0b9608920f90f42c8a", "patch": "@@ -1,4 +1,5 @@\n use core::borrow::Borrow;\n+use core::hint;\n use core::ops::RangeBounds;\n use core::ptr;\n \n@@ -37,61 +38,151 @@ impl<BorrowType, K, V> LeafRange<BorrowType, K, V> {\n impl<'a, K, V> LeafRange<marker::Immut<'a>, K, V> {\n     #[inline]\n     pub fn next_checked(&mut self) -> Option<(&'a K, &'a V)> {\n-        if self.is_empty() { None } else { Some(unsafe { self.next_unchecked() }) }\n+        self.perform_next_checked(|kv| kv.into_kv())\n     }\n \n     #[inline]\n     pub fn next_back_checked(&mut self) -> Option<(&'a K, &'a V)> {\n-        if self.is_empty() { None } else { Some(unsafe { self.next_back_unchecked() }) }\n+        self.perform_next_back_checked(|kv| kv.into_kv())\n     }\n+}\n \n+impl<'a, K, V> LeafRange<marker::ValMut<'a>, K, V> {\n     #[inline]\n-    pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n-        unsafe { self.front.as_mut().unwrap().next_unchecked() }\n+    pub fn next_checked(&mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.perform_next_checked(|kv| unsafe { ptr::read(kv) }.into_kv_valmut())\n     }\n \n     #[inline]\n-    pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n-        unsafe { self.back.as_mut().unwrap().next_back_unchecked() }\n+    pub fn next_back_checked(&mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.perform_next_back_checked(|kv| unsafe { ptr::read(kv) }.into_kv_valmut())\n     }\n }\n \n-impl<'a, K, V> LeafRange<marker::ValMut<'a>, K, V> {\n+impl<BorrowType: marker::BorrowType, K, V> LeafRange<BorrowType, K, V> {\n+    /// If possible, extract some result from the following KV and move to the edge beyond it.\n+    fn perform_next_checked<F, R>(&mut self, f: F) -> Option<R>\n+    where\n+        F: Fn(&Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV>) -> R,\n+    {\n+        if self.is_empty() {\n+            None\n+        } else {\n+            super::mem::replace(self.front.as_mut().unwrap(), |front| {\n+                let kv = front.next_kv().ok().unwrap();\n+                let result = f(&kv);\n+                (kv.next_leaf_edge(), Some(result))\n+            })\n+        }\n+    }\n+\n+    /// If possible, extract some result from the preceding KV and move to the edge beyond it.\n+    fn perform_next_back_checked<F, R>(&mut self, f: F) -> Option<R>\n+    where\n+        F: Fn(&Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV>) -> R,\n+    {\n+        if self.is_empty() {\n+            None\n+        } else {\n+            super::mem::replace(self.back.as_mut().unwrap(), |back| {\n+                let kv = back.next_back_kv().ok().unwrap();\n+                let result = f(&kv);\n+                (kv.next_back_leaf_edge(), Some(result))\n+            })\n+        }\n+    }\n+}\n+\n+enum LazyLeafHandle<BorrowType, K, V> {\n+    Root(NodeRef<BorrowType, K, V, marker::LeafOrInternal>), // not yet descended\n+    Edge(Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>),\n+}\n+\n+impl<'a, K: 'a, V: 'a> Clone for LazyLeafHandle<marker::Immut<'a>, K, V> {\n+    fn clone(&self) -> Self {\n+        match self {\n+            LazyLeafHandle::Root(root) => LazyLeafHandle::Root(*root),\n+            LazyLeafHandle::Edge(edge) => LazyLeafHandle::Edge(*edge),\n+        }\n+    }\n+}\n+\n+impl<BorrowType, K, V> LazyLeafHandle<BorrowType, K, V> {\n+    fn reborrow(&self) -> LazyLeafHandle<marker::Immut<'_>, K, V> {\n+        match self {\n+            LazyLeafHandle::Root(root) => LazyLeafHandle::Root(root.reborrow()),\n+            LazyLeafHandle::Edge(edge) => LazyLeafHandle::Edge(edge.reborrow()),\n+        }\n+    }\n+}\n+\n+// `front` and `back` are always both `None` or both `Some`.\n+pub struct LazyLeafRange<BorrowType, K, V> {\n+    front: Option<LazyLeafHandle<BorrowType, K, V>>,\n+    back: Option<LazyLeafHandle<BorrowType, K, V>>,\n+}\n+\n+impl<'a, K: 'a, V: 'a> Clone for LazyLeafRange<marker::Immut<'a>, K, V> {\n+    fn clone(&self) -> Self {\n+        LazyLeafRange { front: self.front.clone(), back: self.back.clone() }\n+    }\n+}\n+\n+impl<BorrowType, K, V> LazyLeafRange<BorrowType, K, V> {\n+    pub fn none() -> Self {\n+        LazyLeafRange { front: None, back: None }\n+    }\n+\n+    /// Temporarily takes out another, immutable equivalent of the same range.\n+    pub fn reborrow(&self) -> LazyLeafRange<marker::Immut<'_>, K, V> {\n+        LazyLeafRange {\n+            front: self.front.as_ref().map(|f| f.reborrow()),\n+            back: self.back.as_ref().map(|b| b.reborrow()),\n+        }\n+    }\n+}\n+\n+impl<'a, K, V> LazyLeafRange<marker::Immut<'a>, K, V> {\n     #[inline]\n-    pub fn next_checked(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.is_empty() { None } else { Some(unsafe { self.next_unchecked() }) }\n+    pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n+        unsafe { self.init_front().unwrap().next_unchecked() }\n     }\n \n     #[inline]\n-    pub fn next_back_checked(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.is_empty() { None } else { Some(unsafe { self.next_back_unchecked() }) }\n+    pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n+        unsafe { self.init_back().unwrap().next_back_unchecked() }\n     }\n+}\n \n+impl<'a, K, V> LazyLeafRange<marker::ValMut<'a>, K, V> {\n     #[inline]\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        unsafe { self.front.as_mut().unwrap().next_unchecked() }\n+        unsafe { self.init_front().unwrap().next_unchecked() }\n     }\n \n     #[inline]\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        unsafe { self.back.as_mut().unwrap().next_back_unchecked() }\n+        unsafe { self.init_back().unwrap().next_back_unchecked() }\n     }\n }\n \n-impl<K, V> LeafRange<marker::Dying, K, V> {\n+impl<K, V> LazyLeafRange<marker::Dying, K, V> {\n     #[inline]\n     pub fn take_front(\n         &mut self,\n     ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge>> {\n-        self.front.take()\n+        match self.front.take()? {\n+            LazyLeafHandle::Root(root) => Some(root.first_leaf_edge()),\n+            LazyLeafHandle::Edge(edge) => Some(edge),\n+        }\n     }\n \n     #[inline]\n     pub unsafe fn deallocating_next_unchecked(\n         &mut self,\n     ) -> Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV> {\n         debug_assert!(self.front.is_some());\n-        let front = self.front.as_mut().unwrap();\n+        let front = self.init_front().unwrap();\n         unsafe { front.deallocating_next_unchecked() }\n     }\n \n@@ -100,11 +191,41 @@ impl<K, V> LeafRange<marker::Dying, K, V> {\n         &mut self,\n     ) -> Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV> {\n         debug_assert!(self.back.is_some());\n-        let back = self.back.as_mut().unwrap();\n+        let back = self.init_back().unwrap();\n         unsafe { back.deallocating_next_back_unchecked() }\n     }\n }\n \n+impl<BorrowType: marker::BorrowType, K, V> LazyLeafRange<BorrowType, K, V> {\n+    fn init_front(\n+        &mut self,\n+    ) -> Option<&mut Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>> {\n+        if let Some(LazyLeafHandle::Root(root)) = &self.front {\n+            self.front = Some(LazyLeafHandle::Edge(unsafe { ptr::read(root) }.first_leaf_edge()));\n+        }\n+        match &mut self.front {\n+            None => None,\n+            Some(LazyLeafHandle::Edge(edge)) => Some(edge),\n+            // SAFETY: the code above would have replaced it.\n+            Some(LazyLeafHandle::Root(_)) => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n+    fn init_back(\n+        &mut self,\n+    ) -> Option<&mut Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>> {\n+        if let Some(LazyLeafHandle::Root(root)) = &self.back {\n+            self.back = Some(LazyLeafHandle::Edge(unsafe { ptr::read(root) }.last_leaf_edge()));\n+        }\n+        match &mut self.back {\n+            None => None,\n+            Some(LazyLeafHandle::Edge(edge)) => Some(edge),\n+            // SAFETY: the code above would have replaced it.\n+            Some(LazyLeafHandle::Root(_)) => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+}\n+\n impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n     /// Finds the distinct leaf edges delimiting a specified range in a tree.\n     ///\n@@ -156,26 +277,13 @@ impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Lea\n     }\n }\n \n-/// Equivalent to `(root1.first_leaf_edge(), root2.last_leaf_edge())` but more efficient.\n fn full_range<BorrowType: marker::BorrowType, K, V>(\n     root1: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n     root2: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n-) -> LeafRange<BorrowType, K, V> {\n-    let mut min_node = root1;\n-    let mut max_node = root2;\n-    loop {\n-        let front = min_node.first_edge();\n-        let back = max_node.last_edge();\n-        match (front.force(), back.force()) {\n-            (Leaf(f), Leaf(b)) => {\n-                return LeafRange { front: Some(f), back: Some(b) };\n-            }\n-            (Internal(min_int), Internal(max_int)) => {\n-                min_node = min_int.descend();\n-                max_node = max_int.descend();\n-            }\n-            _ => unreachable!(\"BTreeMap has different depths\"),\n-        };\n+) -> LazyLeafRange<BorrowType, K, V> {\n+    LazyLeafRange {\n+        front: Some(LazyLeafHandle::Root(root1)),\n+        back: Some(LazyLeafHandle::Root(root2)),\n     }\n }\n \n@@ -195,7 +303,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n     }\n \n     /// Finds the pair of leaf edges delimiting an entire tree.\n-    pub fn full_range(self) -> LeafRange<marker::Immut<'a>, K, V> {\n+    pub fn full_range(self) -> LazyLeafRange<marker::Immut<'a>, K, V> {\n         full_range(self, self)\n     }\n }\n@@ -222,7 +330,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::ValMut<'a>, K, V, marker::LeafOrInternal>\n     /// Splits a unique reference into a pair of leaf edges delimiting the full range of the tree.\n     /// The results are non-unique references allowing mutation (of values only), so must be used\n     /// with care.\n-    pub fn full_range(self) -> LeafRange<marker::ValMut<'a>, K, V> {\n+    pub fn full_range(self) -> LazyLeafRange<marker::ValMut<'a>, K, V> {\n         // We duplicate the root NodeRef here -- we will never visit the same KV\n         // twice, and never end up with overlapping value references.\n         let self2 = unsafe { ptr::read(&self) };\n@@ -234,7 +342,7 @@ impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {\n     /// Splits a unique reference into a pair of leaf edges delimiting the full range of the tree.\n     /// The results are non-unique references allowing massively destructive mutation, so must be\n     /// used with the utmost care.\n-    pub fn full_range(self) -> LeafRange<marker::Dying, K, V> {\n+    pub fn full_range(self) -> LazyLeafRange<marker::Dying, K, V> {\n         // We duplicate the root NodeRef here -- we will never access it in a way\n         // that overlaps references obtained from the root.\n         let self2 = unsafe { ptr::read(&self) };"}]}