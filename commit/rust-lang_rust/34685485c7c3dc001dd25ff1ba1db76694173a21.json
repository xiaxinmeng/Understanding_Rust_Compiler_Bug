{"sha": "34685485c7c3dc001dd25ff1ba1db76694173a21", "node_id": "C_kwDOAAsO6NoAKDM0Njg1NDg1YzdjM2RjMDAxZGQyNWZmMWJhMWRiNzY2OTQxNzNhMjE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-20T15:03:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-27T13:45:23Z"}, "message": "Improve code", "tree": {"sha": "0dd905245df0d9547618ff82f3789dcd1e76de69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dd905245df0d9547618ff82f3789dcd1e76de69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34685485c7c3dc001dd25ff1ba1db76694173a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34685485c7c3dc001dd25ff1ba1db76694173a21", "html_url": "https://github.com/rust-lang/rust/commit/34685485c7c3dc001dd25ff1ba1db76694173a21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34685485c7c3dc001dd25ff1ba1db76694173a21/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b80a6ddf887dcbb2a8932741c6d711b7c475d9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b80a6ddf887dcbb2a8932741c6d711b7c475d9c", "html_url": "https://github.com/rust-lang/rust/commit/9b80a6ddf887dcbb2a8932741c6d711b7c475d9c"}], "stats": {"total": 183, "additions": 90, "deletions": 93}, "files": [{"sha": "c95ca6727b52fe55ab812afb9fbe852435297810", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 90, "deletions": 93, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/34685485c7c3dc001dd25ff1ba1db76694173a21/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34685485c7c3dc001dd25ff1ba1db76694173a21/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=34685485c7c3dc001dd25ff1ba1db76694173a21", "patch": "@@ -7,7 +7,6 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LocalDefIdSet};\n use rustc_hir::intravisit::{walk_item, Visitor};\n use rustc_hir::{Node, CRATE_HIR_ID};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_span::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n@@ -74,7 +73,6 @@ pub(crate) struct RustdocVisitor<'a, 'tcx> {\n     inside_public_path: bool,\n     exact_paths: DefIdMap<Vec<Symbol>>,\n     modules: Vec<Module<'tcx>>,\n-    map: Map<'tcx>,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -87,7 +85,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             CRATE_DEF_ID,\n             cx.tcx.hir().root_module().spans.inner_span,\n         );\n-        let map = cx.tcx.hir();\n \n         RustdocVisitor {\n             cx,\n@@ -96,7 +93,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             inside_public_path: true,\n             exact_paths: Default::default(),\n             modules: vec![om],\n-            map,\n         }\n     }\n \n@@ -105,6 +101,94 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         self.exact_paths.entry(did).or_insert_with(|| def_id_to_path(tcx, did));\n     }\n \n+    pub(crate) fn visit(mut self) -> Module<'tcx> {\n+        let root_module = self.cx.tcx.hir().root_module();\n+        self.visit_mod_contents(CRATE_DEF_ID, root_module);\n+\n+        let mut top_level_module = self.modules.pop().unwrap();\n+\n+        // `#[macro_export] macro_rules!` items are reexported at the top level of the\n+        // crate, regardless of where they're defined. We want to document the\n+        // top level rexport of the macro, not its original definition, since\n+        // the rexport defines the path that a user will actually see. Accordingly,\n+        // we add the rexport as an item here, and then skip over the original\n+        // definition in `visit_item()` below.\n+        //\n+        // We also skip `#[macro_export] macro_rules!` that have already been inserted,\n+        // it can happen if within the same module a `#[macro_export] macro_rules!`\n+        // is declared but also a reexport of itself producing two exports of the same\n+        // macro in the same module.\n+        let mut inserted = FxHashSet::default();\n+        for export in self.cx.tcx.module_reexports(CRATE_DEF_ID).unwrap_or(&[]) {\n+            if let Res::Def(DefKind::Macro(_), def_id) = export.res &&\n+                let Some(local_def_id) = def_id.as_local() &&\n+                self.cx.tcx.has_attr(def_id, sym::macro_export) &&\n+                inserted.insert(def_id)\n+            {\n+                    let item = self.cx.tcx.hir().expect_item(local_def_id);\n+                    top_level_module.items.push((item, None, None));\n+            }\n+        }\n+\n+        self.cx.cache.hidden_cfg = self\n+            .cx\n+            .tcx\n+            .hir()\n+            .attrs(CRATE_HIR_ID)\n+            .iter()\n+            .filter(|attr| attr.has_name(sym::doc))\n+            .flat_map(|attr| attr.meta_item_list().into_iter().flatten())\n+            .filter(|attr| attr.has_name(sym::cfg_hide))\n+            .flat_map(|attr| {\n+                attr.meta_item_list()\n+                    .unwrap_or(&[])\n+                    .iter()\n+                    .filter_map(|attr| {\n+                        Cfg::parse(attr.meta_item()?)\n+                            .map_err(|e| self.cx.sess().diagnostic().span_err(e.span, e.msg))\n+                            .ok()\n+                    })\n+                    .collect::<Vec<_>>()\n+            })\n+            .chain(\n+                [Cfg::Cfg(sym::test, None), Cfg::Cfg(sym::doc, None), Cfg::Cfg(sym::doctest, None)]\n+                    .into_iter(),\n+            )\n+            .collect();\n+\n+        self.cx.cache.exact_paths = self.exact_paths;\n+        top_level_module\n+    }\n+\n+    /// This method will go through the given module items in two passes:\n+    /// 1. The items which are not glob imports/reexports.\n+    /// 2. The glob imports/reexports.\n+    fn visit_mod_contents(&mut self, def_id: LocalDefId, m: &'tcx hir::Mod<'tcx>) {\n+        debug!(\"Going through module {:?}\", m);\n+        // Keep track of if there were any private modules in the path.\n+        let orig_inside_public_path = self.inside_public_path;\n+        self.inside_public_path &= self.cx.tcx.local_visibility(def_id).is_public();\n+\n+        // Reimplementation of `walk_mod` because we need to do it in two passes (explanations in\n+        // the second loop):\n+        for &i in m.item_ids {\n+            let item = self.cx.tcx.hir().item(i);\n+            if !matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n+                self.visit_item(item);\n+            }\n+        }\n+        for &i in m.item_ids {\n+            let item = self.cx.tcx.hir().item(i);\n+            // To match the way import precedence works, visit glob imports last.\n+            // Later passes in rustdoc will de-duplicate by name and kind, so if glob-\n+            // imported items appear last, then they'll be the ones that get discarded.\n+            if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n+                self.visit_item(item);\n+            }\n+        }\n+        self.inside_public_path = orig_inside_public_path;\n+    }\n+\n     /// Tries to resolve the target of a `pub use` statement and inlines the\n     /// target if it is defined locally and would not be documented otherwise,\n     /// or when it is specifically requested with `please_inline`.\n@@ -197,7 +281,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         &mut self,\n         item: &'tcx hir::Item<'_>,\n         renamed: Option<Symbol>,\n-        parent_id: Option<hir::HirId>,\n+        parent_id: Option<LocalDefId>,\n     ) {\n         self.modules.last_mut().unwrap().items.push((item, renamed, parent_id))\n     }\n@@ -330,65 +414,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n     }\n \n-    pub(crate) fn visit(mut self) -> Module<'tcx> {\n-        let root_module = self.cx.tcx.hir().root_module();\n-        self.visit_mod_contents(CRATE_DEF_ID, root_module);\n-\n-        let mut top_level_module = self.modules.pop().unwrap();\n-\n-        // `#[macro_export] macro_rules!` items are reexported at the top level of the\n-        // crate, regardless of where they're defined. We want to document the\n-        // top level rexport of the macro, not its original definition, since\n-        // the rexport defines the path that a user will actually see. Accordingly,\n-        // we add the rexport as an item here, and then skip over the original\n-        // definition in `visit_item()` below.\n-        //\n-        // We also skip `#[macro_export] macro_rules!` that have already been inserted,\n-        // it can happen if within the same module a `#[macro_export] macro_rules!`\n-        // is declared but also a reexport of itself producing two exports of the same\n-        // macro in the same module.\n-        let mut inserted = FxHashSet::default();\n-        for export in self.cx.tcx.module_reexports(CRATE_DEF_ID).unwrap_or(&[]) {\n-            if let Res::Def(DefKind::Macro(_), def_id) = export.res &&\n-                let Some(local_def_id) = def_id.as_local() &&\n-                self.cx.tcx.has_attr(def_id, sym::macro_export) &&\n-                inserted.insert(def_id)\n-            {\n-                    let item = self.cx.tcx.hir().expect_item(local_def_id);\n-                    top_level_module.items.push((item, None, None));\n-            }\n-        }\n-\n-        self.cx.cache.hidden_cfg = self\n-            .cx\n-            .tcx\n-            .hir()\n-            .attrs(CRATE_HIR_ID)\n-            .iter()\n-            .filter(|attr| attr.has_name(sym::doc))\n-            .flat_map(|attr| attr.meta_item_list().into_iter().flatten())\n-            .filter(|attr| attr.has_name(sym::cfg_hide))\n-            .flat_map(|attr| {\n-                attr.meta_item_list()\n-                    .unwrap_or(&[])\n-                    .iter()\n-                    .filter_map(|attr| {\n-                        Cfg::parse(attr.meta_item()?)\n-                            .map_err(|e| self.cx.sess().diagnostic().span_err(e.span, e.msg))\n-                            .ok()\n-                    })\n-                    .collect::<Vec<_>>()\n-            })\n-            .chain(\n-                [Cfg::Cfg(sym::test, None), Cfg::Cfg(sym::doc, None), Cfg::Cfg(sym::doctest, None)]\n-                    .into_iter(),\n-            )\n-            .collect();\n-\n-        self.cx.cache.exact_paths = self.exact_paths;\n-        top_level_module\n-    }\n-\n     /// This method will create a new module and push it onto the \"modules stack\" then call\n     /// `visit_mod_contents`. Once done, it'll remove it from the \"modules stack\" and instead\n     /// add into the list of modules of the current module.\n@@ -400,34 +425,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let last = self.modules.pop().unwrap();\n         self.modules.last_mut().unwrap().mods.push(last);\n     }\n-\n-    /// This method will go through the given module items in two passes:\n-    /// 1. The items which are not glob imports/reexports.\n-    /// 2. The glob imports/reexports.\n-    fn visit_mod_contents(&mut self, def_id: LocalDefId, m: &'tcx hir::Mod<'tcx>) {\n-        debug!(\"Going through module {:?}\", m);\n-        // Keep track of if there were any private modules in the path.\n-        let orig_inside_public_path = self.inside_public_path;\n-        self.inside_public_path &= self.cx.tcx.local_visibility(def_id).is_public();\n-\n-        // Reimplementation of `walk_mod`:\n-        for &i in m.item_ids {\n-            let item = self.cx.tcx.hir().item(i);\n-            if !matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n-                self.visit_item(item);\n-            }\n-        }\n-        for &i in m.item_ids {\n-            let item = self.cx.tcx.hir().item(i);\n-            // To match the way import precedence works, visit glob imports last.\n-            // Later passes in rustdoc will de-duplicate by name and kind, so if glob-\n-            // imported items appear last, then they'll be the ones that get discarded.\n-            if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n-                self.visit_item(item);\n-            }\n-        }\n-        self.inside_public_path = orig_inside_public_path;\n-    }\n }\n \n // We need to implement this visitor so it'll go everywhere and retrieve items we're interested in\n@@ -436,7 +433,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RustdocVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n     fn nested_visit_map(&mut self) -> Self::Map {\n-        self.map\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {"}]}