{"sha": "13dc237037c8ef66423639c622d6018f1cf9a37e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZGMyMzcwMzdjOGVmNjY0MjM2MzljNjIyZDYwMThmMWNmOWEzN2U=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-24T18:50:09Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-24T18:50:09Z"}, "message": "Remove workaround for deref issue that no longer exists.\n\nThe double underscores were used to work around issue #12808, which was\nsolved in 2016.", "tree": {"sha": "b9e314c4322dc3df60db5ef7c4a8f89622999c54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e314c4322dc3df60db5ef7c4a8f89622999c54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13dc237037c8ef66423639c622d6018f1cf9a37e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13dc237037c8ef66423639c622d6018f1cf9a37e", "html_url": "https://github.com/rust-lang/rust/commit/13dc237037c8ef66423639c622d6018f1cf9a37e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13dc237037c8ef66423639c622d6018f1cf9a37e/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eff9b0b29a8898c839d46f3c66526710afed68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff9b0b29a8898c839d46f3c66526710afed68a", "html_url": "https://github.com/rust-lang/rust/commit/4eff9b0b29a8898c839d46f3c66526710afed68a"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "162eab2388d554e905c684bcd7ad4b2948f8a6aa", "filename": "library/std/src/sys_common/remutex.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13dc237037c8ef66423639c622d6018f1cf9a37e/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13dc237037c8ef66423639c622d6018f1cf9a37e/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs?ref=13dc237037c8ef66423639c622d6018f1cf9a37e", "patch": "@@ -37,9 +37,7 @@ impl<T> RefUnwindSafe for ReentrantMutex<T> {}\n /// guarded data.\n #[must_use = \"if unused the ReentrantMutex will immediately unlock\"]\n pub struct ReentrantMutexGuard<'a, T: 'a> {\n-    // funny underscores due to how Deref currently works (it disregards field\n-    // privacy).\n-    __lock: &'a ReentrantMutex<T>,\n+    lock: &'a ReentrantMutex<T>,\n }\n \n impl<T> !marker::Send for ReentrantMutexGuard<'_, T> {}\n@@ -129,23 +127,23 @@ impl<T: fmt::Debug + 'static> fmt::Debug for ReentrantMutex<T> {\n \n impl<'mutex, T> ReentrantMutexGuard<'mutex, T> {\n     fn new(lock: &'mutex ReentrantMutex<T>) -> ReentrantMutexGuard<'mutex, T> {\n-        ReentrantMutexGuard { __lock: lock }\n+        ReentrantMutexGuard { lock }\n     }\n }\n \n impl<T> Deref for ReentrantMutexGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        &self.__lock.data\n+        &self.lock.data\n     }\n }\n \n impl<T> Drop for ReentrantMutexGuard<'_, T> {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n-            self.__lock.inner.unlock();\n+            self.lock.inner.unlock();\n         }\n     }\n }"}]}