{"sha": "f5dfcd694bfd9922ee94f59465e31200310a6a39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZGZjZDY5NGJmZDk5MjJlZTk0ZjU5NDY1ZTMxMjAwMzEwYTZhMzk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-21T11:51:44Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-21T11:51:44Z"}, "message": "fallout2", "tree": {"sha": "8c586cf62b07c4eab832aa1272c6bc1c651adc4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c586cf62b07c4eab832aa1272c6bc1c651adc4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5dfcd694bfd9922ee94f59465e31200310a6a39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXaSpQAAoJEFbW7qD8Z6xGtNkP+QHZlsMO9ovWj0gnXH2WTDIx\nii5P7BAHWjDe/EIfpGcTHWu9RYDYg79sIa77XdgqpcmqNNLltuIZ4CTrAVTfpXzy\n2QVMcIjp+sHL1AdH8GTHAT/J/lE//AD903raKM13oMnMfNkMPO+FpF5ghsrJlRsD\nepU+RSC1ZrqAUNv1xh7sOhUJEGS7S3Wo0+3VAmretVX0GztvgfzwsHKQlQOQ+679\nwJVNv/HtknAYJZmuvMJobmRl5jCbAGQYxTJawYLEJ1crOWwvF9jv6yB6iJPsjWtE\nwMCKVxElumVaOVJ+6MUEe3qwF3wvvF7E3yGBg5plmUFhz4C++tcLuO0gOBFxRv42\nQHAZr3sDHgxZP/MxjGCwnJMEw1qAiK8gHUmx+cikUx47u97TLM5Z51G32YldXjlG\nWCVVGga4Wc/4WsDam5GKQV+IxohImA+ZXZJhJySiGkxKibuKOEbzfmZGDpY5jyLH\nXOEsACWd6KxsDsWM7lk+UOmtK9mQmXsaQIdVG8N/LOWc1kMFnT5TzozD689fn5Hs\ni/EFLMWefMQaiqsyoQZVKOM/7DQty6MDM+TuuAbKks6YAM02mJZFbznEJy7TnFXW\nYb4RiTgBvB2kHiscgJd1Cw0yEE2OTfKQV2yKsS8jBEGprlvKEMMuRma+WRKZRZc7\nNRxqkLzKvySo3iAvlZrH\n=BV68\n-----END PGP SIGNATURE-----", "payload": "tree 8c586cf62b07c4eab832aa1272c6bc1c651adc4c\nparent 48a5f8446d0e23c37a36c808fb68b2796e044ca7\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466509904 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466509904 +0200\n\nfallout2"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5dfcd694bfd9922ee94f59465e31200310a6a39", "html_url": "https://github.com/rust-lang/rust/commit/f5dfcd694bfd9922ee94f59465e31200310a6a39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5dfcd694bfd9922ee94f59465e31200310a6a39/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a5f8446d0e23c37a36c808fb68b2796e044ca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a5f8446d0e23c37a36c808fb68b2796e044ca7", "html_url": "https://github.com/rust-lang/rust/commit/48a5f8446d0e23c37a36c808fb68b2796e044ca7"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "e578fbf6d68ca3fbbc6d747d273582d266194a36", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f5dfcd694bfd9922ee94f59465e31200310a6a39/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5dfcd694bfd9922ee94f59465e31200310a6a39/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=f5dfcd694bfd9922ee94f59465e31200310a6a39", "patch": "@@ -334,31 +334,30 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n /// Get all arms that are unbounded `PatRange`s.\n fn all_ranges(cx: &LateContext, arms: &[Arm]) -> Vec<SpannedRange<ConstVal>> {\n     arms.iter()\n-        .filter_map(|arm| {\n+        .flat_map(|arm| {\n             if let Arm { ref pats, guard: None, .. } = *arm {\n-                Some(pats.iter().filter_map(|pat| {\n-                    if_let_chain! {[\n-                        let PatKind::Range(ref lhs, ref rhs) = pat.node,\n-                        let Ok(lhs) = eval_const_expr_partial(cx.tcx, lhs, ExprTypeChecked, None),\n-                        let Ok(rhs) = eval_const_expr_partial(cx.tcx, rhs, ExprTypeChecked, None)\n-                    ], {\n-                        return Some(SpannedRange { span: pat.span, node: (lhs, rhs) });\n-                    }}\n-\n-                    if_let_chain! {[\n-                        let PatKind::Lit(ref value) = pat.node,\n-                        let Ok(value) = eval_const_expr_partial(cx.tcx, value, ExprTypeChecked, None)\n-                    ], {\n-                        return Some(SpannedRange { span: pat.span, node: (value.clone(), value) });\n-                    }}\n-\n-                    None\n-                }))\n+                pats.iter()\n             } else {\n+                [].iter()\n+            }.filter_map(|pat| {\n+                if_let_chain! {[\n+                    let PatKind::Range(ref lhs, ref rhs) = pat.node,\n+                    let Ok(lhs) = eval_const_expr_partial(cx.tcx, lhs, ExprTypeChecked, None),\n+                    let Ok(rhs) = eval_const_expr_partial(cx.tcx, rhs, ExprTypeChecked, None)\n+                ], {\n+                    return Some(SpannedRange { span: pat.span, node: (lhs, rhs) });\n+                }}\n+\n+                if_let_chain! {[\n+                    let PatKind::Lit(ref value) = pat.node,\n+                    let Ok(value) = eval_const_expr_partial(cx.tcx, value, ExprTypeChecked, None)\n+                ], {\n+                    return Some(SpannedRange { span: pat.span, node: (value.clone(), value) });\n+                }}\n+\n                 None\n-            }\n+            })\n         })\n-        .flat_map(IntoIterator::into_iter)\n         .collect()\n }\n "}]}