{"sha": "01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNjc0ZmJlMDZhYTJkMDVmOGRhZmJiOGEyN2JhNmJkMjNmYTA5ZTE=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2018-09-08T11:50:19Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2018-10-27T10:47:11Z"}, "message": "Correct alignment of atomic types and (re)add Atomic{I,U}128\n\nLLVM requires that atomic loads and stores be aligned to at least the size of the type.", "tree": {"sha": "625649f40505a0bb90e034efb257f129b7980ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/625649f40505a0bb90e034efb257f129b7980ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "html_url": "https://github.com/rust-lang/rust/commit/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f42cbde015c44a019e8b6dceca472a1532f36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f42cbde015c44a019e8b6dceca472a1532f36a", "html_url": "https://github.com/rust-lang/rust/commit/10f42cbde015c44a019e8b6dceca472a1532f36a"}], "stats": {"total": 189, "additions": 169, "deletions": 20}, "files": [{"sha": "b9c3123936d938a5b144b3009b6d255b4f870d08", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "patch": "@@ -124,6 +124,7 @@ pub fn spin_loop_hint() {\n /// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[repr(align(1))]\n pub struct AtomicBool {\n     v: UnsafeCell<u8>,\n }\n@@ -147,6 +148,9 @@ unsafe impl Sync for AtomicBool {}\n /// This type has the same in-memory representation as a `*mut T`.\n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(target_pointer_width = \"16\", repr(align(2)))]\n+#[cfg_attr(target_pointer_width = \"32\", repr(align(4)))]\n+#[cfg_attr(target_pointer_width = \"64\", repr(align(8)))]\n pub struct AtomicPtr<T> {\n     p: UnsafeCell<*mut T>,\n }\n@@ -1088,6 +1092,7 @@ macro_rules! atomic_int {\n      $s_int_type:expr, $int_ref:expr,\n      $extra_feature:expr,\n      $min_fn:ident, $max_fn:ident,\n+     $align:expr,\n      $int_type:ident $atomic_type:ident $atomic_init:ident) => {\n         /// An integer type which can be safely shared between threads.\n         ///\n@@ -1101,6 +1106,7 @@ macro_rules! atomic_int {\n         ///\n         /// [module-level documentation]: index.html\n         #[$stable]\n+        #[repr(align($align))]\n         pub struct $atomic_type {\n             v: UnsafeCell<$int_type>,\n         }\n@@ -1831,6 +1837,7 @@ atomic_int! {\n     \"i8\", \"../../../std/primitive.i8.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n+    1,\n     i8 AtomicI8 ATOMIC_I8_INIT\n }\n #[cfg(target_has_atomic = \"8\")]\n@@ -1844,6 +1851,7 @@ atomic_int! {\n     \"u8\", \"../../../std/primitive.u8.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n+    1,\n     u8 AtomicU8 ATOMIC_U8_INIT\n }\n #[cfg(target_has_atomic = \"16\")]\n@@ -1857,6 +1865,7 @@ atomic_int! {\n     \"i16\", \"../../../std/primitive.i16.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n+    2,\n     i16 AtomicI16 ATOMIC_I16_INIT\n }\n #[cfg(target_has_atomic = \"16\")]\n@@ -1870,6 +1879,7 @@ atomic_int! {\n     \"u16\", \"../../../std/primitive.u16.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n+    2,\n     u16 AtomicU16 ATOMIC_U16_INIT\n }\n #[cfg(target_has_atomic = \"32\")]\n@@ -1883,6 +1893,7 @@ atomic_int! {\n     \"i32\", \"../../../std/primitive.i32.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n+    4,\n     i32 AtomicI32 ATOMIC_I32_INIT\n }\n #[cfg(target_has_atomic = \"32\")]\n@@ -1896,6 +1907,7 @@ atomic_int! {\n     \"u32\", \"../../../std/primitive.u32.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n+    4,\n     u32 AtomicU32 ATOMIC_U32_INIT\n }\n #[cfg(target_has_atomic = \"64\")]\n@@ -1909,6 +1921,7 @@ atomic_int! {\n     \"i64\", \"../../../std/primitive.i64.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n+    8,\n     i64 AtomicI64 ATOMIC_I64_INIT\n }\n #[cfg(target_has_atomic = \"64\")]\n@@ -1922,8 +1935,49 @@ atomic_int! {\n     \"u64\", \"../../../std/primitive.u64.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n+    8,\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n+#[cfg(target_has_atomic = \"128\")]\n+atomic_int! {\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"i128\", \"../../../std/primitive.i128.html\",\n+    \"#![feature(integer_atomics)]\\n\\n\",\n+    atomic_min, atomic_max,\n+    16,\n+    i128 AtomicI128 ATOMIC_I128_INIT\n+}\n+#[cfg(target_has_atomic = \"128\")]\n+atomic_int! {\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"u128\", \"../../../std/primitive.u128.html\",\n+    \"#![feature(integer_atomics)]\\n\\n\",\n+    atomic_umin, atomic_umax,\n+    16,\n+    u128 AtomicU128 ATOMIC_U128_INIT\n+}\n+#[cfg(target_pointer_width = \"16\")]\n+macro_rules! ptr_width {\n+    () => { 2 }\n+}\n+#[cfg(target_pointer_width = \"32\")]\n+macro_rules! ptr_width {\n+    () => { 4 }\n+}\n+#[cfg(target_pointer_width = \"64\")]\n+macro_rules! ptr_width {\n+    () => { 8 }\n+}\n #[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n@@ -1935,6 +1989,7 @@ atomic_int!{\n     \"isize\", \"../../../std/primitive.isize.html\",\n     \"\",\n     atomic_min, atomic_max,\n+    ptr_width!(),\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n #[cfg(target_has_atomic = \"ptr\")]\n@@ -1948,6 +2003,7 @@ atomic_int!{\n     \"usize\", \"../../../std/primitive.usize.html\",\n     \"\",\n     atomic_umin, atomic_umax,\n+    ptr_width!(),\n     usize AtomicUsize ATOMIC_USIZE_INIT\n }\n "}, {"sha": "f70a68c72489a457df330d85794677f40ce912ca", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "patch": "@@ -482,14 +482,12 @@ impl Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    pub fn atomic_load(&self, ptr: &'ll Value, order: AtomicOrdering, align: Align) -> &'ll Value {\n+    pub fn atomic_load(&self, ptr: &'ll Value, order: AtomicOrdering, size: Size) -> &'ll Value {\n         self.count_insn(\"load.atomic\");\n         unsafe {\n             let load = llvm::LLVMRustBuildAtomicLoad(self.llbuilder, ptr, noname(), order);\n-            // FIXME(eddyb) Isn't it UB to use `pref` instead of `abi` here?\n-            // However, 64-bit atomic loads on `i686-apple-darwin` appear to\n-            // require `___atomic_load` with ABI-alignment, so it's staying.\n-            llvm::LLVMSetAlignment(load, align.pref() as c_uint);\n+            // LLVM requires the alignment of atomic loads to be at least the size of the type.\n+            llvm::LLVMSetAlignment(load, size.bytes() as c_uint);\n             load\n         }\n     }\n@@ -564,15 +562,14 @@ impl Builder<'a, 'll, 'tcx> {\n     }\n \n     pub fn atomic_store(&self, val: &'ll Value, ptr: &'ll Value,\n-                        order: AtomicOrdering, align: Align) {\n+                        order: AtomicOrdering, size: Size) {\n         debug!(\"Store {:?} -> {:?}\", val, ptr);\n         self.count_insn(\"store.atomic\");\n         let ptr = self.check_store(val, ptr);\n         unsafe {\n             let store = llvm::LLVMRustBuildAtomicStore(self.llbuilder, val, ptr, order);\n-            // FIXME(eddyb) Isn't it UB to use `pref` instead of `abi` here?\n-            // Also see `atomic_load` for more context.\n-            llvm::LLVMSetAlignment(store, align.pref() as c_uint);\n+            // LLVM requires the alignment of atomic stores to be at least the size of the type.\n+            llvm::LLVMSetAlignment(store, size.bytes() as c_uint);\n         }\n     }\n "}, {"sha": "596a1d5e8a5842bc78950ca6a780ab22c641b3e9", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "patch": "@@ -477,8 +477,8 @@ pub fn codegen_intrinsic_call(\n                 \"load\" => {\n                     let ty = substs.type_at(0);\n                     if int_type_width_signed(ty, cx).is_some() {\n-                        let align = cx.align_of(ty);\n-                        bx.atomic_load(args[0].immediate(), order, align)\n+                        let size = cx.size_of(ty);\n+                        bx.atomic_load(args[0].immediate(), order, size)\n                     } else {\n                         return invalid_monomorphization(ty);\n                     }\n@@ -487,8 +487,8 @@ pub fn codegen_intrinsic_call(\n                 \"store\" => {\n                     let ty = substs.type_at(0);\n                     if int_type_width_signed(ty, cx).is_some() {\n-                        let align = cx.align_of(ty);\n-                        bx.atomic_store(args[1].immediate(), args[0].immediate(), order, align);\n+                        let size = cx.size_of(ty);\n+                        bx.atomic_store(args[1].immediate(), args[0].immediate(), order, size);\n                         return;\n                     } else {\n                         return invalid_monomorphization(ty);"}, {"sha": "137ba7d449acb102866aebc68d075e03ad9eed06", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "patch": "@@ -264,6 +264,9 @@ impl RefUnwindSafe for atomic::AtomicI32 {}\n #[cfg(target_has_atomic = \"64\")]\n #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n impl RefUnwindSafe for atomic::AtomicI64 {}\n+#[cfg(target_has_atomic = \"128\")]\n+#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+impl RefUnwindSafe for atomic::AtomicI128 {}\n \n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n@@ -280,6 +283,9 @@ impl RefUnwindSafe for atomic::AtomicU32 {}\n #[cfg(target_has_atomic = \"64\")]\n #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n impl RefUnwindSafe for atomic::AtomicU64 {}\n+#[cfg(target_has_atomic = \"128\")]\n+#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+impl RefUnwindSafe for atomic::AtomicU128 {}\n \n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]"}, {"sha": "2c8128b1907b6a8f945da16069321effbbe041a3", "filename": "src/test/run-make-fulldeps/atomic-lock-free/atomic_lock_free.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs?ref=01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "patch": "@@ -58,6 +58,14 @@ pub unsafe fn atomic_u64(x: *mut u64) {\n pub unsafe fn atomic_i64(x: *mut i64) {\n     atomic_xadd(x, 1);\n }\n+#[cfg(target_has_atomic = \"128\")]\n+pub unsafe fn atomic_u128(x: *mut u128) {\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"128\")]\n+pub unsafe fn atomic_i128(x: *mut i128) {\n+    atomic_xadd(x, 1);\n+}\n #[cfg(target_has_atomic = \"ptr\")]\n pub unsafe fn atomic_usize(x: *mut usize) {\n     atomic_xadd(x, 1);"}, {"sha": "8771765de294e82037a4df79204419a089f7be31", "filename": "src/test/run-pass/atomic-alignment.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Ftest%2Frun-pass%2Fatomic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Ftest%2Frun-pass%2Fatomic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fatomic-alignment.rs?ref=01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(cfg_target_has_atomic)]\n+#![feature(integer_atomics)]\n+\n+use std::mem::{align_of, size_of};\n+use std::sync::atomic::*;\n+\n+fn main() {\n+    #[cfg(target_has_atomic = \"8\")]\n+    assert_eq!(align_of::<AtomicBool>(), size_of::<AtomicBool>());\n+    #[cfg(target_has_atomic = \"ptr\")]\n+    assert_eq!(align_of::<AtomicPtr<u8>>(), size_of::<AtomicPtr<u8>>());\n+    #[cfg(target_has_atomic = \"8\")]\n+    assert_eq!(align_of::<AtomicU8>(), size_of::<AtomicU8>());\n+    #[cfg(target_has_atomic = \"8\")]\n+    assert_eq!(align_of::<AtomicI8>(), size_of::<AtomicI8>());\n+    #[cfg(target_has_atomic = \"16\")]\n+    assert_eq!(align_of::<AtomicU16>(), size_of::<AtomicU16>());\n+    #[cfg(target_has_atomic = \"16\")]\n+    assert_eq!(align_of::<AtomicI16>(), size_of::<AtomicI16>());\n+    #[cfg(target_has_atomic = \"32\")]\n+    assert_eq!(align_of::<AtomicU32>(), size_of::<AtomicU32>());\n+    #[cfg(target_has_atomic = \"32\")]\n+    assert_eq!(align_of::<AtomicI32>(), size_of::<AtomicI32>());\n+    #[cfg(target_has_atomic = \"64\")]\n+    assert_eq!(align_of::<AtomicU64>(), size_of::<AtomicU64>());\n+    #[cfg(target_has_atomic = \"64\")]\n+    assert_eq!(align_of::<AtomicI64>(), size_of::<AtomicI64>());\n+    #[cfg(target_has_atomic = \"128\")]\n+    assert_eq!(align_of::<AtomicU128>(), size_of::<AtomicU128>());\n+    #[cfg(target_has_atomic = \"128\")]\n+    assert_eq!(align_of::<AtomicI128>(), size_of::<AtomicI128>());\n+    #[cfg(target_has_atomic = \"ptr\")]\n+    assert_eq!(align_of::<AtomicUsize>(), size_of::<AtomicUsize>());\n+    #[cfg(target_has_atomic = \"ptr\")]\n+    assert_eq!(align_of::<AtomicIsize>(), size_of::<AtomicIsize>());\n+}"}, {"sha": "6b70c1ea294c55a0977ef32dd3157cf5b49cae73", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs?ref=01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "patch": "@@ -61,6 +61,16 @@ pub unsafe fn atomic_u64(x: *mut u64) {\n pub unsafe fn atomic_i64(x: *mut i64) {\n     atomic_xadd(x, 1);\n }\n+#[cfg(target_has_atomic = \"128\")]\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+pub unsafe fn atomic_u128(x: *mut u128) {\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"128\")]\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+pub unsafe fn atomic_i128(x: *mut i128) {\n+    atomic_xadd(x, 1);\n+}\n #[cfg(target_has_atomic = \"ptr\")]\n //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n pub unsafe fn atomic_usize(x: *mut usize) {\n@@ -81,6 +91,8 @@ fn main() {\n     //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n     cfg!(target_has_atomic = \"64\");\n     //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+    cfg!(target_has_atomic = \"128\");\n+    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n     cfg!(target_has_atomic = \"ptr\");\n     //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n }"}, {"sha": "81f20112a12ffc96356ccb0842144be86c4b3588", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr?ref=01674fbe06aa2d05f8dafbb8a27ba6bd23fa09e1", "patch": "@@ -65,59 +65,83 @@ LL | #[cfg(target_has_atomic = \"64\")]\n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:64:7\n    |\n-LL | #[cfg(target_has_atomic = \"ptr\")]\n+LL | #[cfg(target_has_atomic = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:69:7\n    |\n+LL | #[cfg(target_has_atomic = \"128\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:74:7\n+   |\n+LL | #[cfg(target_has_atomic = \"ptr\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:79:7\n+   |\n LL | #[cfg(target_has_atomic = \"ptr\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:76:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:86:10\n    |\n LL |     cfg!(target_has_atomic = \"8\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:78:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:88:10\n    |\n LL |     cfg!(target_has_atomic = \"16\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:80:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:90:10\n    |\n LL |     cfg!(target_has_atomic = \"32\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:82:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:92:10\n    |\n LL |     cfg!(target_has_atomic = \"64\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:84:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:94:10\n+   |\n+LL |     cfg!(target_has_atomic = \"128\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:96:10\n    |\n LL |     cfg!(target_has_atomic = \"ptr\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 18 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}