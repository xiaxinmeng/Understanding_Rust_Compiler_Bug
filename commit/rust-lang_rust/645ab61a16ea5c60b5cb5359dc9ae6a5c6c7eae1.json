{"sha": "645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "node_id": "C_kwDOAAsO6NoAKDY0NWFiNjFhMTZlYTVjNjBiNWNiNTM1OWRjOWFlNmE1YzZjN2VhZTE", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-11-28T13:37:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-28T13:37:24Z"}, "message": "Merge pull request #317 from rust-lang/fix-exports\n\nRemove reexport of simd::*", "tree": {"sha": "81e43647bd8b2403d747f7a7d9473c85643f5516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81e43647bd8b2403d747f7a7d9473c85643f5516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhLmUCRBK7hj4Ov3rIwAAsRQIABvp7E2lHbfTRg/Bwk5S0BtF\nTfy394vHiBGs2ySuJevj3qBAynXLhvLotbGgnQZrkGqiIuqPC2yIHyR1bnT8lqbV\nHd2Vqqze4zm6ogzjJjS4IE4FVngSHkWBX2Mcf0DntVBsp+jGVw4uG73HvexSat/i\nlXsKaAM/rnct4hQXbRXOQJhfRrIdGqhpIdcTOqSo3MtgcfYlLYNDTOhlxUwe9Yi4\nBtT5jQumlDL9VJQ1XeUNCj0xwp3A7TKX6Ogrk/uyJjb/jJNgramW0sVtH2HuBajJ\nAW3SsiMNltcvxoVxAkpzXGduN1ysTrFkHSvMHEuPxD7pgZ6EdIPdnF5rWe94yNg=\n=0R4X\n-----END PGP SIGNATURE-----\n", "payload": "tree 81e43647bd8b2403d747f7a7d9473c85643f5516\nparent 6e30c6eca3780d18f12335517970a5b9c2dfce7e\nparent db8b23cea5ac9b45fafef65d95702f41cc02d486\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1669642644 -0500\ncommitter GitHub <noreply@github.com> 1669642644 -0500\n\nMerge pull request #317 from rust-lang/fix-exports\n\nRemove reexport of simd::*"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "html_url": "https://github.com/rust-lang/rust/commit/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e30c6eca3780d18f12335517970a5b9c2dfce7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e30c6eca3780d18f12335517970a5b9c2dfce7e", "html_url": "https://github.com/rust-lang/rust/commit/6e30c6eca3780d18f12335517970a5b9c2dfce7e"}, {"sha": "db8b23cea5ac9b45fafef65d95702f41cc02d486", "url": "https://api.github.com/repos/rust-lang/rust/commits/db8b23cea5ac9b45fafef65d95702f41cc02d486", "html_url": "https://github.com/rust-lang/rust/commit/db8b23cea5ac9b45fafef65d95702f41cc02d486"}], "stats": {"total": 92, "additions": 47, "deletions": 45}, "files": [{"sha": "a6359d1e0be5c9ae7a62e4216290b0f085301e2f", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -21,4 +21,3 @@\n #[path = \"mod.rs\"]\n mod core_simd;\n pub use self::core_simd::simd;\n-pub use simd::*;"}, {"sha": "3181826ef59a659df203c31d08469924bcbe98c3", "filename": "crates/core_simd/tests/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fautoderef.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -1,6 +1,6 @@\n // Test that we handle all our \"auto-deref\" cases correctly.\n #![feature(portable_simd)]\n-use core_simd::f32x4;\n+use core_simd::simd::f32x4;\n \n #[cfg(target_arch = \"wasm32\")]\n use wasm_bindgen_test::*;"}, {"sha": "faafa5fa51f1877415b91e3bebbab084920fb1f5", "filename": "crates/core_simd/tests/mask_ops_impl/mask_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask_macros.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -2,7 +2,7 @@ macro_rules! mask_tests {\n     { $vector:ident, $lanes:literal } => {\n         #[cfg(test)]\n         mod $vector {\n-            use core_simd::$vector as Vector;\n+            use core_simd::simd::$vector as Vector;\n             const LANES: usize = $lanes;\n \n             #[cfg(target_arch = \"wasm32\")]"}, {"sha": "9f8bad1c36c082e6a9bbe9bc01b65d4e66b8f5c6", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -13,11 +13,13 @@ macro_rules! test_mask_api {\n             #[cfg(target_arch = \"wasm32\")]\n             use wasm_bindgen_test::*;\n \n+            use core_simd::simd::Mask;\n+\n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn set_and_test() {\n                 let values = [true, false, false, true, false, false, true, false];\n-                let mut mask = core_simd::Mask::<$type, 8>::splat(false);\n+                let mut mask = Mask::<$type, 8>::splat(false);\n                 for (lane, value) in values.iter().copied().enumerate() {\n                     mask.set(lane, value);\n                 }\n@@ -29,90 +31,90 @@ macro_rules! test_mask_api {\n             #[test]\n             #[should_panic]\n             fn set_invalid_lane() {\n-                let mut mask = core_simd::Mask::<$type, 8>::splat(false);\n+                let mut mask = Mask::<$type, 8>::splat(false);\n                 mask.set(8, true);\n                 let _ = mask;\n             }\n \n             #[test]\n             #[should_panic]\n             fn test_invalid_lane() {\n-                let mask = core_simd::Mask::<$type, 8>::splat(false);\n+                let mask = Mask::<$type, 8>::splat(false);\n                 let _ = mask.test(8);\n             }\n \n             #[test]\n             fn any() {\n-                assert!(!core_simd::Mask::<$type, 8>::splat(false).any());\n-                assert!(core_simd::Mask::<$type, 8>::splat(true).any());\n-                let mut v = core_simd::Mask::<$type, 8>::splat(false);\n+                assert!(!Mask::<$type, 8>::splat(false).any());\n+                assert!(Mask::<$type, 8>::splat(true).any());\n+                let mut v = Mask::<$type, 8>::splat(false);\n                 v.set(2, true);\n                 assert!(v.any());\n             }\n \n             #[test]\n             fn all() {\n-                assert!(!core_simd::Mask::<$type, 8>::splat(false).all());\n-                assert!(core_simd::Mask::<$type, 8>::splat(true).all());\n-                let mut v = core_simd::Mask::<$type, 8>::splat(false);\n+                assert!(!Mask::<$type, 8>::splat(false).all());\n+                assert!(Mask::<$type, 8>::splat(true).all());\n+                let mut v = Mask::<$type, 8>::splat(false);\n                 v.set(2, true);\n                 assert!(!v.all());\n             }\n \n             #[test]\n             fn roundtrip_int_conversion() {\n                 let values = [true, false, false, true, false, false, true, false];\n-                let mask = core_simd::Mask::<$type, 8>::from_array(values);\n+                let mask = Mask::<$type, 8>::from_array(values);\n                 let int = mask.to_int();\n                 assert_eq!(int.to_array(), [-1, 0, 0, -1, 0, 0, -1, 0]);\n-                assert_eq!(core_simd::Mask::<$type, 8>::from_int(int), mask);\n+                assert_eq!(Mask::<$type, 8>::from_int(int), mask);\n             }\n \n             #[test]\n             fn roundtrip_bitmask_conversion() {\n-                use core_simd::ToBitMask;\n+                use core_simd::simd::ToBitMask;\n                 let values = [\n                     true, false, false, true, false, false, true, false,\n                     true, true, false, false, false, false, false, true,\n                 ];\n-                let mask = core_simd::Mask::<$type, 16>::from_array(values);\n+                let mask = Mask::<$type, 16>::from_array(values);\n                 let bitmask = mask.to_bitmask();\n                 assert_eq!(bitmask, 0b1000001101001001);\n-                assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);\n+                assert_eq!(Mask::<$type, 16>::from_bitmask(bitmask), mask);\n             }\n \n             #[test]\n             fn roundtrip_bitmask_conversion_short() {\n-                use core_simd::ToBitMask;\n+                use core_simd::simd::ToBitMask;\n \n                 let values = [\n                     false, false, false, true,\n                 ];\n-                let mask = core_simd::Mask::<$type, 4>::from_array(values);\n+                let mask = Mask::<$type, 4>::from_array(values);\n                 let bitmask = mask.to_bitmask();\n                 assert_eq!(bitmask, 0b1000);\n-                assert_eq!(core_simd::Mask::<$type, 4>::from_bitmask(bitmask), mask);\n+                assert_eq!(Mask::<$type, 4>::from_bitmask(bitmask), mask);\n \n                 let values = [true, false];\n-                let mask = core_simd::Mask::<$type, 2>::from_array(values);\n+                let mask = Mask::<$type, 2>::from_array(values);\n                 let bitmask = mask.to_bitmask();\n                 assert_eq!(bitmask, 0b01);\n-                assert_eq!(core_simd::Mask::<$type, 2>::from_bitmask(bitmask), mask);\n+                assert_eq!(Mask::<$type, 2>::from_bitmask(bitmask), mask);\n             }\n \n             #[test]\n             fn cast() {\n-                fn cast_impl<T: core_simd::MaskElement>()\n+                fn cast_impl<T: core_simd::simd::MaskElement>()\n                 where\n-                    core_simd::Mask<$type, 8>: Into<core_simd::Mask<T, 8>>,\n+                    Mask<$type, 8>: Into<Mask<T, 8>>,\n                 {\n                     let values = [true, false, false, true, false, false, true, false];\n-                    let mask = core_simd::Mask::<$type, 8>::from_array(values);\n+                    let mask = Mask::<$type, 8>::from_array(values);\n \n                     let cast_mask = mask.cast::<T>();\n                     assert_eq!(values, cast_mask.to_array());\n \n-                    let into_mask: core_simd::Mask<T, 8> = mask.into();\n+                    let into_mask: Mask<T, 8> = mask.into();\n                     assert_eq!(values, into_mask.to_array());\n                 }\n \n@@ -126,15 +128,15 @@ macro_rules! test_mask_api {\n             #[cfg(feature = \"generic_const_exprs\")]\n             #[test]\n             fn roundtrip_bitmask_array_conversion() {\n-                use core_simd::ToBitMaskArray;\n+                use core_simd::simd::ToBitMaskArray;\n                 let values = [\n                     true, false, false, true, false, false, true, false,\n                     true, true, false, false, false, false, false, true,\n                 ];\n-                let mask = core_simd::Mask::<$type, 16>::from_array(values);\n+                let mask = Mask::<$type, 16>::from_array(values);\n                 let bitmask = mask.to_bitmask_array();\n                 assert_eq!(bitmask, [0b01001001, 0b10000011]);\n-                assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask_array(bitmask), mask);\n+                assert_eq!(Mask::<$type, 16>::from_bitmask_array(bitmask), mask);\n             }\n         }\n     }\n@@ -150,9 +152,10 @@ mod mask_api {\n \n #[test]\n fn convert() {\n+    use core_simd::simd::Mask;\n     let values = [true, false, false, true, false, false, true, false];\n     assert_eq!(\n-        core_simd::Mask::<i8, 8>::from_array(values),\n-        core_simd::Mask::<i32, 8>::from_array(values).into()\n+        Mask::<i8, 8>::from_array(values),\n+        Mask::<i32, 8>::from_array(values).into()\n     );\n }"}, {"sha": "3a02f3f01e1cf8c36b233f01f6d342aec725c015", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -7,7 +7,7 @@ macro_rules! impl_unary_op_test {\n         test_helpers::test_lanes! {\n             fn $fn<const LANES: usize>() {\n                 test_helpers::test_unary_elementwise(\n-                    &<core_simd::Simd<$scalar, LANES> as core::ops::$trait>::$fn,\n+                    &<core_simd::simd::Simd<$scalar, LANES> as core::ops::$trait>::$fn,\n                     &$scalar_fn,\n                     &|_| true,\n                 );\n@@ -27,7 +27,7 @@ macro_rules! impl_binary_op_test {\n     { $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident, $scalar_fn:expr } => {\n         mod $fn {\n             use super::*;\n-            use core_simd::Simd;\n+            use core_simd::simd::Simd;\n \n             test_helpers::test_lanes! {\n                 fn normal<const LANES: usize>() {\n@@ -64,7 +64,7 @@ macro_rules! impl_binary_checked_op_test {\n     { $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident, $scalar_fn:expr, $check_fn:expr } => {\n         mod $fn {\n             use super::*;\n-            use core_simd::Simd;\n+            use core_simd::simd::Simd;\n \n             test_helpers::test_lanes! {\n                 fn normal<const LANES: usize>() {\n@@ -173,7 +173,7 @@ macro_rules! impl_signed_tests {\n     { $scalar:tt } => {\n         mod $scalar {\n             use core_simd::simd::SimdInt;\n-            type Vector<const LANES: usize> = core_simd::Simd<Scalar, LANES>;\n+            type Vector<const LANES: usize> = core_simd::simd::Simd<Scalar, LANES>;\n             type Scalar = $scalar;\n \n             impl_common_integer_tests! { Vector, Scalar }\n@@ -314,7 +314,7 @@ macro_rules! impl_unsigned_tests {\n     { $scalar:tt } => {\n         mod $scalar {\n             use core_simd::simd::SimdUint;\n-            type Vector<const LANES: usize> = core_simd::Simd<Scalar, LANES>;\n+            type Vector<const LANES: usize> = core_simd::simd::Simd<Scalar, LANES>;\n             type Scalar = $scalar;\n \n             impl_common_integer_tests! { Vector, Scalar }\n@@ -348,8 +348,8 @@ macro_rules! impl_unsigned_tests {\n macro_rules! impl_float_tests {\n     { $scalar:tt, $int_scalar:tt } => {\n         mod $scalar {\n-            use core_simd::SimdFloat;\n-            type Vector<const LANES: usize> = core_simd::Simd<Scalar, LANES>;\n+            use core_simd::simd::SimdFloat;\n+            type Vector<const LANES: usize> = core_simd::simd::Simd<Scalar, LANES>;\n             type Scalar = $scalar;\n \n             impl_unary_op_test!(Scalar, Neg::neg);"}, {"sha": "0ae8f83b8b97dce9fa792f4359ba8ffeae432c03", "filename": "crates/core_simd/tests/pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fpointers.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -1,6 +1,6 @@\n #![feature(portable_simd, strict_provenance)]\n \n-use core_simd::{Simd, SimdConstPtr, SimdMutPtr};\n+use core_simd::simd::{Simd, SimdConstPtr, SimdMutPtr};\n \n macro_rules! common_tests {\n     { $constness:ident } => {"}, {"sha": "8b9638ad466712c299aebe4e19904de11e40ce11", "filename": "crates/core_simd/tests/round.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fround.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -5,7 +5,7 @@ macro_rules! float_rounding_test {\n         mod $scalar {\n             use std_float::StdFloat;\n \n-            type Vector<const LANES: usize> = core_simd::Simd<$scalar, LANES>;\n+            type Vector<const LANES: usize> = core_simd::simd::Simd<$scalar, LANES>;\n             type Scalar = $scalar;\n             type IntScalar = $int_scalar;\n "}, {"sha": "8cd7c33e823fb799901d53cddf36825ced6c29ec", "filename": "crates/core_simd/tests/swizzle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fswizzle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fswizzle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fswizzle.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -1,5 +1,5 @@\n #![feature(portable_simd)]\n-use core_simd::{Simd, Swizzle};\n+use core_simd::simd::{Simd, Swizzle};\n \n #[cfg(target_arch = \"wasm32\")]\n use wasm_bindgen_test::*;"}, {"sha": "be0ee4349c579ceb6d89f55a88977bed48fc36cb", "filename": "crates/core_simd/tests/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -2,7 +2,7 @@\n #![allow(incomplete_features)]\n #![cfg(feature = \"generic_const_exprs\")]\n \n-use core_simd::Simd;\n+use core_simd::simd::Simd;\n \n #[test]\n fn byte_convert() {"}, {"sha": "859e3b94f2cd4fa8fee3b6ef00b036a8a18aca18", "filename": "crates/core_simd/tests/try_from_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Ftry_from_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Fcore_simd%2Ftests%2Ftry_from_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ftry_from_slice.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -6,7 +6,7 @@ use wasm_bindgen_test::*;\n #[cfg(target_arch = \"wasm32\")]\n wasm_bindgen_test_configure!(run_in_browser);\n \n-use core_simd::i32x4;\n+use core_simd::simd::i32x4;\n \n #[test]\n #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]"}, {"sha": "b26cdc311a215678e3083960c4e477d5b412f7f9", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "patch": "@@ -401,7 +401,7 @@ macro_rules! test_lanes {\n \n                 fn implementation<const $lanes: usize>()\n                 where\n-                    core_simd::LaneCount<$lanes>: core_simd::SupportedLaneCount,\n+                    core_simd::simd::LaneCount<$lanes>: core_simd::simd::SupportedLaneCount,\n                 $body\n \n                 #[cfg(target_arch = \"wasm32\")]\n@@ -508,7 +508,7 @@ macro_rules! test_lanes_panic {\n \n                 fn implementation<const $lanes: usize>()\n                 where\n-                    core_simd::LaneCount<$lanes>: core_simd::SupportedLaneCount,\n+                    core_simd::simd::LaneCount<$lanes>: core_simd::simd::SupportedLaneCount,\n                 $body\n \n                 $crate::test_lanes_helper!("}]}