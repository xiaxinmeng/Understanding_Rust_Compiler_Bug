{"sha": "ca0f9975199b5fbe177dc61d493d411f67c66880", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMGY5OTc1MTk5YjVmYmUxNzdkYzYxZDQ5M2Q0MTFmNjdjNjY4ODA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-20T22:25:20Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-22T23:45:27Z"}, "message": "Factor out a repeated `config.no_integrated_as` test.", "tree": {"sha": "7aa5614dfd27a78e5df0854e5809482586838fef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aa5614dfd27a78e5df0854e5809482586838fef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca0f9975199b5fbe177dc61d493d411f67c66880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0f9975199b5fbe177dc61d493d411f67c66880", "html_url": "https://github.com/rust-lang/rust/commit/ca0f9975199b5fbe177dc61d493d411f67c66880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca0f9975199b5fbe177dc61d493d411f67c66880/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a147cd070e4b8824aafc7fa9f20d6fdf34eb3bf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a147cd070e4b8824aafc7fa9f20d6fdf34eb3bf9", "html_url": "https://github.com/rust-lang/rust/commit/a147cd070e4b8824aafc7fa9f20d6fdf34eb3bf9"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "62ac2381e8cd8e3e2fded02b0b0e4e946cc20d02", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ca0f9975199b5fbe177dc61d493d411f67c66880/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0f9975199b5fbe177dc61d493d411f67c66880/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=ca0f9975199b5fbe177dc61d493d411f67c66880", "patch": "@@ -749,29 +749,31 @@ pub(crate) unsafe fn codegen(\n             })?;\n         }\n \n-        if config_emit_normal_obj && !config.no_integrated_as {\n-            let _timer = cgcx\n-                .prof\n-                .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n-            with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                write_output_file(\n-                    diag_handler,\n-                    tm,\n-                    cpm,\n-                    llmod,\n-                    &obj_out,\n-                    llvm::FileType::ObjectFile,\n-                )\n-            })?;\n-        } else if config_emit_normal_obj && config.no_integrated_as {\n-            let _timer = cgcx\n-                .prof\n-                .generic_activity_with_arg(\"LLVM_module_codegen_asm_to_obj\", &module.name[..]);\n-            let assembly = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n-            run_assembler(cgcx, diag_handler, &assembly, &obj_out);\n-\n-            if !config.emit_asm && !cgcx.save_temps {\n-                drop(fs::remove_file(&assembly));\n+        if config_emit_normal_obj {\n+            if !config.no_integrated_as {\n+                let _timer = cgcx\n+                    .prof\n+                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n+                with_codegen(tm, llmod, config.no_builtins, |cpm| {\n+                    write_output_file(\n+                        diag_handler,\n+                        tm,\n+                        cpm,\n+                        llmod,\n+                        &obj_out,\n+                        llvm::FileType::ObjectFile,\n+                    )\n+                })?;\n+            } else {\n+                let _timer = cgcx\n+                    .prof\n+                    .generic_activity_with_arg(\"LLVM_module_codegen_asm_to_obj\", &module.name[..]);\n+                let assembly = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n+                run_assembler(cgcx, diag_handler, &assembly, &obj_out);\n+\n+                if !config.emit_asm && !cgcx.save_temps {\n+                    drop(fs::remove_file(&assembly));\n+                }\n             }\n         }\n "}]}