{"sha": "257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1N2VkODk5Yzg2YWNmNmI0ZWUwZjZkYzlkNmNmYzllYjk4ZTM1YTU=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-12T17:24:42Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-12T17:24:42Z"}, "message": "Add tests", "tree": {"sha": "28995747f5df4ee0c851a2548937e220ddf5f306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28995747f5df4ee0c851a2548937e220ddf5f306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5", "html_url": "https://github.com/rust-lang/rust/commit/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a601302ff0217b91589b5a7310a8a23adb843fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a601302ff0217b91589b5a7310a8a23adb843fdc", "html_url": "https://github.com/rust-lang/rust/commit/a601302ff0217b91589b5a7310a8a23adb843fdc"}], "stats": {"total": 130, "additions": 88, "deletions": 42}, "files": [{"sha": "c8d6e95dd6e096917545ded3f894e0e3cd0d93cf", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs?ref=257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5", "patch": "@@ -1,4 +1,5 @@\n #![feature(never_type)]\n+#![feature(never_type_fallback)]\n #![feature(exhaustive_patterns)]\n #![deny(unreachable_patterns)]\n enum Foo {}\n@@ -42,7 +43,17 @@ macro_rules! match_false {\n }\n \n fn foo(x: Foo) {\n-    match_empty!(x); // ok\n+    match x {} // ok\n+    match x {\n+        _ => {}, //~ ERROR unreachable pattern\n+    }\n+    match x {\n+        _ if false => {}, //~ ERROR unreachable pattern\n+    }\n+}\n+\n+fn never(x: !) {\n+    match x {} // ok\n     match x {\n         _ => {}, //~ ERROR unreachable pattern\n     }"}, {"sha": "9ec9d737e89b3492096b5aa2ac985dc2e6aed89a", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5", "patch": "@@ -1,35 +1,47 @@\n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:47:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:48:9\n    |\n LL |         _ => {},\n    |         ^\n    |\n note: the lint level is defined here\n-  --> $DIR/match-empty-exhaustive_patterns.rs:3:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:4:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:50:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:51:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:57:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:58:9\n+   |\n+LL |         _ => {},\n+   |         ^\n+\n+error: unreachable pattern\n+  --> $DIR/match-empty-exhaustive_patterns.rs:61:9\n+   |\n+LL |         _ if false => {},\n+   |         ^\n+\n+error: unreachable pattern\n+  --> $DIR/match-empty-exhaustive_patterns.rs:68:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:61:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:72:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:64:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:75:18\n    |\n LL |     match_empty!(0u8);\n    |                  ^^^\n@@ -38,7 +50,7 @@ LL |     match_empty!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:66:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:77:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -50,7 +62,7 @@ LL |     match_empty!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:68:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:79:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -64,7 +76,7 @@ LL |       match_empty!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:70:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:81:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -79,7 +91,7 @@ LL |       match_empty!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:72:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:83:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -96,7 +108,7 @@ LL |       match_empty!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:74:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:85:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -117,7 +129,7 @@ LL |       match_empty!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:76:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:87:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -131,7 +143,7 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    = note: the matched value is of type `NonEmptyEnum5`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:79:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:90:18\n    |\n LL |     match_false!(0u8);\n    |                  ^^^ pattern `_` not covered\n@@ -140,7 +152,7 @@ LL |     match_false!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:81:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:92:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -152,7 +164,7 @@ LL |     match_false!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:83:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:94:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -166,7 +178,7 @@ LL |       match_false!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:85:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:96:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -181,7 +193,7 @@ LL |       match_false!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:87:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:98:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -198,7 +210,7 @@ LL |       match_false!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:89:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:100:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -219,7 +231,7 @@ LL |       match_false!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:91:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:102:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -232,6 +244,6 @@ LL |       match_false!(NonEmptyEnum5::V1);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum5`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 20 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "609660a88f9b33cd607555188cc96e754fd2bd8b", "filename": "src/test/ui/pattern/usefulness/match-empty.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs?ref=257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5", "patch": "@@ -1,4 +1,5 @@\n #![feature(never_type)]\n+#![feature(never_type_fallback)]\n #![deny(unreachable_patterns)]\n enum Foo {}\n \n@@ -41,12 +42,25 @@ macro_rules! match_false {\n }\n \n fn foo(x: Foo) {\n-    match_empty!(x); // ok\n-    match_false!(x); // Not detected as unreachable nor exhaustive.\n-    //~^ ERROR non-exhaustive patterns: `_` not covered\n+    match x {} // ok\n     match x {\n         _ => {}, // Not detected as unreachable, see #55123.\n     }\n+    match x {\n+    //~^ ERROR non-exhaustive patterns: `_` not covered\n+        _ if false => {}, // Not detected as unreachable nor exhaustive.\n+    }\n+}\n+\n+fn never(x: !) {\n+    match x {} // ok\n+    match x {\n+        _ => {}, // Not detected as unreachable.\n+    }\n+    match x {\n+    //~^ ERROR non-exhaustive patterns: `_` not covered\n+        _ if false => {}, // Not detected as unreachable nor exhaustive.\n+    }\n }\n \n fn main() {"}, {"sha": "0218b6fda50be4c118843c291aa370acbf3132ce", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=257ed899c86acf6b4ee0f6dc9d6cfc9eb98e35a5", "patch": "@@ -1,17 +1,26 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:45:18\n+  --> $DIR/match-empty.rs:49:11\n    |\n LL | enum Foo {}\n    | ----------- `Foo` defined here\n ...\n-LL |     match_false!(x); // Not detected as unreachable nor exhaustive.\n-   |                  ^ pattern `_` not covered\n+LL |     match x {\n+   |           ^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n \n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty.rs:60:11\n+   |\n+LL |     match x {\n+   |           ^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `!`\n+\n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty.rs:63:18\n+  --> $DIR/match-empty.rs:77:18\n    |\n LL |     match_empty!(0u8);\n    |                  ^^^\n@@ -20,7 +29,7 @@ LL |     match_empty!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n-  --> $DIR/match-empty.rs:65:18\n+  --> $DIR/match-empty.rs:79:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -32,7 +41,7 @@ LL |     match_empty!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/match-empty.rs:67:18\n+  --> $DIR/match-empty.rs:81:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -46,7 +55,7 @@ LL |       match_empty!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/match-empty.rs:69:18\n+  --> $DIR/match-empty.rs:83:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -61,7 +70,7 @@ LL |       match_empty!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty.rs:71:18\n+  --> $DIR/match-empty.rs:85:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -78,7 +87,7 @@ LL |       match_empty!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty.rs:73:18\n+  --> $DIR/match-empty.rs:87:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -99,7 +108,7 @@ LL |       match_empty!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty.rs:75:18\n+  --> $DIR/match-empty.rs:89:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -113,7 +122,7 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    = note: the matched value is of type `NonEmptyEnum5`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:78:18\n+  --> $DIR/match-empty.rs:92:18\n    |\n LL |     match_false!(0u8);\n    |                  ^^^ pattern `_` not covered\n@@ -122,7 +131,7 @@ LL |     match_false!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n-  --> $DIR/match-empty.rs:80:18\n+  --> $DIR/match-empty.rs:94:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -134,7 +143,7 @@ LL |     match_false!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/match-empty.rs:82:18\n+  --> $DIR/match-empty.rs:96:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -148,7 +157,7 @@ LL |       match_false!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/match-empty.rs:84:18\n+  --> $DIR/match-empty.rs:98:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -163,7 +172,7 @@ LL |       match_false!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty.rs:86:18\n+  --> $DIR/match-empty.rs:100:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -180,7 +189,7 @@ LL |       match_false!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty.rs:88:18\n+  --> $DIR/match-empty.rs:102:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -201,7 +210,7 @@ LL |       match_false!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty.rs:90:18\n+  --> $DIR/match-empty.rs:104:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -214,6 +223,6 @@ LL |       match_false!(NonEmptyEnum5::V1);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum5`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}]}