{"sha": "13c54685ffbc153d4d675f13222dfb02b0f30926", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYzU0Njg1ZmZiYzE1M2Q0ZDY3NWYxMzIyMmRmYjAyYjBmMzA5MjY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-01T04:14:35Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-01T04:14:35Z"}, "message": "Use index instead of peekable", "tree": {"sha": "3f912b11087f4c7e3ee028ad25aff07fc64f5952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f912b11087f4c7e3ee028ad25aff07fc64f5952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13c54685ffbc153d4d675f13222dfb02b0f30926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13c54685ffbc153d4d675f13222dfb02b0f30926", "html_url": "https://github.com/rust-lang/rust/commit/13c54685ffbc153d4d675f13222dfb02b0f30926", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13c54685ffbc153d4d675f13222dfb02b0f30926/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1111773301a084ec8d0b6a2c81be5a756241ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1111773301a084ec8d0b6a2c81be5a756241ab", "html_url": "https://github.com/rust-lang/rust/commit/5f1111773301a084ec8d0b6a2c81be5a756241ab"}], "stats": {"total": 54, "additions": 19, "deletions": 35}, "files": [{"sha": "19d57baae4f282282d7ae13ff54fb997a873379f", "filename": "crates/ra_hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 19, "deletions": 35, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/13c54685ffbc153d4d675f13222dfb02b0f30926/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c54685ffbc153d4d675f13222dfb02b0f30926/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=13c54685ffbc153d4d675f13222dfb02b0f30926", "patch": "@@ -70,7 +70,16 @@ impl CrateDefMap {\n         path: &Path,\n         shadow: BuiltinShadowMode,\n     ) -> ResolvePathResult {\n-        let mut segments = path.segments.iter().enumerate().peekable();\n+        // if it is not the last segment, we prefer the module to the builtin\n+        let prefer_module = |index| {\n+            if index == path.segments.len() - 1 {\n+                shadow\n+            } else {\n+                BuiltinShadowMode::Module\n+            }\n+        };\n+\n+        let mut segments = path.segments.iter().enumerate();\n \n         let mut curr_per_ns: PerNs = match path.kind {\n             PathKind::DollarCrate(krate) => {\n@@ -98,29 +107,21 @@ impl CrateDefMap {\n                 if self.edition == Edition::Edition2015\n                     && (path.kind == PathKind::Abs || mode == ResolveMode::Import) =>\n             {\n-                let segment = match segments.next() {\n-                    Some((_, segment)) => segment,\n+                let (idx, segment) = match segments.next() {\n+                    Some((idx, segment)) => (idx, segment),\n                     None => return ResolvePathResult::empty(ReachedFixedPoint::Yes),\n                 };\n                 log::debug!(\"resolving {:?} in crate root (+ extern prelude)\", segment);\n \n-                self.resolve_name_in_crate_root_or_extern_prelude(\n-                    &segment.name,\n-                    prefer_module(&mut segments, shadow),\n-                )\n+                self.resolve_name_in_crate_root_or_extern_prelude(&segment.name, prefer_module(idx))\n             }\n             PathKind::Plain => {\n-                let segment = match segments.next() {\n-                    Some((_, segment)) => segment,\n+                let (idx, segment) = match segments.next() {\n+                    Some((idx, segment)) => (idx, segment),\n                     None => return ResolvePathResult::empty(ReachedFixedPoint::Yes),\n                 };\n                 log::debug!(\"resolving {:?} in module\", segment);\n-                self.resolve_name_in_module(\n-                    db,\n-                    original_module,\n-                    &segment.name,\n-                    prefer_module(&mut segments, shadow),\n-                )\n+                self.resolve_name_in_module(db, original_module, &segment.name, prefer_module(idx))\n             }\n             PathKind::Super => {\n                 if let Some(p) = self.modules[original_module].parent {\n@@ -150,7 +151,7 @@ impl CrateDefMap {\n             }\n         };\n \n-        while let Some((i, segment)) = segments.next() {\n+        for (i, segment) in segments {\n             let curr = match curr_per_ns.take_types() {\n                 Some(r) => r,\n                 None => {\n@@ -180,10 +181,7 @@ impl CrateDefMap {\n                     }\n \n                     // Since it is a qualified path here, it should not contains legacy macros\n-                    match self[module.local_id]\n-                        .scope\n-                        .get(&segment.name, prefer_module(&mut segments, shadow))\n-                    {\n+                    match self[module.local_id].scope.get(&segment.name, prefer_module(i)) {\n                         Some(res) => res.def,\n                         _ => {\n                             log::debug!(\"path segment {:?} not found\", segment.name);\n@@ -226,22 +224,8 @@ impl CrateDefMap {\n                 }\n             };\n         }\n-        return ResolvePathResult::with(curr_per_ns, ReachedFixedPoint::Yes, None);\n \n-        // if it is not the last segment, we prefer builtin as module\n-        fn prefer_module<I>(\n-            segments: &mut std::iter::Peekable<I>,\n-            shadow: BuiltinShadowMode,\n-        ) -> BuiltinShadowMode\n-        where\n-            I: Iterator,\n-        {\n-            if segments.peek().is_some() {\n-                BuiltinShadowMode::Module\n-            } else {\n-                shadow\n-            }\n-        }\n+        ResolvePathResult::with(curr_per_ns, ReachedFixedPoint::Yes, None)\n     }\n \n     fn resolve_name_in_module("}]}