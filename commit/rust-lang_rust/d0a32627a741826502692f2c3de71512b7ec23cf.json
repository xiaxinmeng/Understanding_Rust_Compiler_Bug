{"sha": "d0a32627a741826502692f2c3de71512b7ec23cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYTMyNjI3YTc0MTgyNjUwMjY5MmYyYzNkZTcxNTEyYjdlYzIzY2Y=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-09T10:21:13Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-09T10:21:13Z"}, "message": "Merge #767\n\n767: Extract project model to separate crate r=matklad a=flodiebold\n\nI'm looking into creating a separate crate that would allow getting a HIR db for a project for 'batch' analyses, and this seems to be an obvious first step. We'd probably want to change the error handling to not rely on failure, though, right?\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "ee3cef56bd9738f5c3b98caae9b8ce1b8dbf401f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee3cef56bd9738f5c3b98caae9b8ce1b8dbf401f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0a32627a741826502692f2c3de71512b7ec23cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a32627a741826502692f2c3de71512b7ec23cf", "html_url": "https://github.com/rust-lang/rust/commit/d0a32627a741826502692f2c3de71512b7ec23cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0a32627a741826502692f2c3de71512b7ec23cf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "34398a8756b56c323d3b4b2ef32fbca32d88a105", "url": "https://api.github.com/repos/rust-lang/rust/commits/34398a8756b56c323d3b4b2ef32fbca32d88a105", "html_url": "https://github.com/rust-lang/rust/commit/34398a8756b56c323d3b4b2ef32fbca32d88a105"}, {"sha": "e91a46eb0c4a355af25656d77dead55c2e29258e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91a46eb0c4a355af25656d77dead55c2e29258e", "html_url": "https://github.com/rust-lang/rust/commit/e91a46eb0c4a355af25656d77dead55c2e29258e"}], "stats": {"total": 351, "additions": 212, "deletions": 139}, "files": [{"sha": "56acb9a306635a8ecc4e5eacfee4b151d95e8de8", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0a32627a741826502692f2c3de71512b7ec23cf/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d0a32627a741826502692f2c3de71512b7ec23cf/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d0a32627a741826502692f2c3de71512b7ec23cf", "patch": "@@ -1008,7 +1008,6 @@ dependencies = [\n name = \"ra_lsp_server\"\n version = \"0.1.0\"\n dependencies = [\n- \"cargo_metadata 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1021,6 +1020,7 @@ dependencies = [\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n+ \"ra_project_model 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"ra_vfs 0.1.0\",\n@@ -1045,6 +1045,20 @@ dependencies = [\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ra_project_model\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"cargo_metadata 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_arena 0.1.0\",\n+ \"ra_db 0.1.0\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"test_utils 0.1.0\",\n+ \"walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"ra_syntax\"\n version = \"0.1.0\""}, {"sha": "405634fe00de9d42132700004ca236016f4240b5", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=d0a32627a741826502692f2c3de71512b7ec23cf", "patch": "@@ -91,6 +91,7 @@ impl CrateGraph {\n         assert!(prev.is_none());\n         crate_id\n     }\n+\n     pub fn add_dep(\n         &mut self,\n         from: CrateId,\n@@ -102,22 +103,40 @@ impl CrateGraph {\n         }\n         Ok(self.arena.get_mut(&from).unwrap().add_dep(name, to))\n     }\n+\n     pub fn is_empty(&self) -> bool {\n         self.arena.is_empty()\n     }\n+\n     pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n         self.arena[&crate_id].file_id\n     }\n+\n     pub fn crate_id_for_crate_root(&self, file_id: FileId) -> Option<CrateId> {\n         let (&crate_id, _) = self.arena.iter().find(|(_crate_id, data)| data.file_id == file_id)?;\n         Some(crate_id)\n     }\n+\n     pub fn dependencies<'a>(\n         &'a self,\n         crate_id: CrateId,\n     ) -> impl Iterator<Item = &'a Dependency> + 'a {\n         self.arena[&crate_id].dependencies.iter()\n     }\n+\n+    /// Extends this crate graph by adding a complete disjoint second crate\n+    /// graph.\n+    pub fn extend(&mut self, other: CrateGraph) {\n+        let start = self.arena.len() as u32;\n+        self.arena.extend(other.arena.into_iter().map(|(id, mut data)| {\n+            let new_id = CrateId(id.0 + start);\n+            for dep in &mut data.dependencies {\n+                dep.crate_id = CrateId(dep.crate_id.0 + start);\n+            }\n+            (new_id, data)\n+        }));\n+    }\n+\n     fn dfs_find(&self, target: CrateId, from: CrateId, visited: &mut FxHashSet<CrateId>) -> bool {\n         if !visited.insert(from) {\n             return false;"}, {"sha": "f46d7789309e14fcdcdc8e6e935672f81bfa2a96", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=d0a32627a741826502692f2c3de71512b7ec23cf", "patch": "@@ -19,7 +19,6 @@ url_serde = \"0.2.0\"\n lsp-types = \"0.55.0\"\n walkdir = \"2.2.7\"\n im = \"12.0.0\"\n-cargo_metadata = \"0.7.0\"\n rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n \n@@ -30,6 +29,7 @@ ra_ide_api = { path = \"../ra_ide_api\" }\n ra_arena = { path = \"../ra_arena\" }\n gen_lsp_server = { path = \"../gen_lsp_server\" }\n ra_vfs = { path = \"../ra_vfs\" }\n+ra_project_model = { path = \"../ra_project_model\" }\n \n [dev-dependencies]\n tempfile = \"3\""}, {"sha": "6800eb1388cf3b38bf1bf5c107e8572288c3f437", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=d0a32627a741826502692f2c3de71512b7ec23cf", "patch": "@@ -1,34 +1,13 @@\n-mod cargo_workspace;\n-mod sysroot;\n+use std::path::PathBuf;\n \n-use std::path::{Path, PathBuf};\n-\n-use failure::bail;\n use thread_worker::{WorkerHandle, Worker};\n \n use crate::Result;\n \n-pub use crate::project_model::{\n-    cargo_workspace::{CargoWorkspace, Package, Target, TargetKind},\n-    sysroot::Sysroot,\n+pub use ra_project_model::{\n+    ProjectWorkspace, CargoWorkspace, Package, Target, TargetKind, Sysroot,\n };\n \n-#[derive(Debug, Clone)]\n-pub struct ProjectWorkspace {\n-    pub(crate) cargo: CargoWorkspace,\n-    pub(crate) sysroot: Sysroot,\n-}\n-\n-impl ProjectWorkspace {\n-    pub fn discover(path: &Path) -> Result<ProjectWorkspace> {\n-        let cargo_toml = find_cargo_toml(path)?;\n-        let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml)?;\n-        let sysroot = Sysroot::discover(&cargo_toml)?;\n-        let res = ProjectWorkspace { cargo, sysroot };\n-        Ok(res)\n-    }\n-}\n-\n pub fn workspace_loader() -> (Worker<PathBuf, Result<ProjectWorkspace>>, WorkerHandle) {\n     thread_worker::spawn::<PathBuf, Result<ProjectWorkspace>, _>(\n         \"workspace loader\",\n@@ -42,18 +21,3 @@ pub fn workspace_loader() -> (Worker<PathBuf, Result<ProjectWorkspace>>, WorkerH\n         },\n     )\n }\n-\n-fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n-    if path.ends_with(\"Cargo.toml\") {\n-        return Ok(path.to_path_buf());\n-    }\n-    let mut curr = Some(path);\n-    while let Some(path) = curr {\n-        let candidate = path.join(\"Cargo.toml\");\n-        if candidate.exists() {\n-            return Ok(candidate);\n-        }\n-        curr = path.parent();\n-    }\n-    bail!(\"can't find Cargo.toml at {}\", path.display())\n-}"}, {"sha": "f97d240fabb0ed35e5f9669cf73cad431f7dfe7b", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 7, "deletions": 82, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=d0a32627a741826502692f2c3de71512b7ec23cf", "patch": "@@ -9,13 +9,12 @@ use ra_ide_api::{\n     SourceRootId\n };\n use ra_vfs::{Vfs, VfsChange, VfsFile, VfsRoot};\n-use rustc_hash::FxHashMap;\n use relative_path::RelativePathBuf;\n use parking_lot::RwLock;\n use failure::format_err;\n \n use crate::{\n-    project_model::{ProjectWorkspace, TargetKind},\n+    project_model::ProjectWorkspace,\n     Result,\n };\n \n@@ -57,88 +56,14 @@ impl ServerWorldState {\n             change.add_root(SourceRootId(r.0.into()), is_local);\n         }\n \n+        // Create crate graph from all the workspaces\n         let mut crate_graph = CrateGraph::default();\n+        let mut load = |path: &std::path::Path| {\n+            let vfs_file = vfs.load(path);\n+            vfs_file.map(|f| FileId(f.0.into()))\n+        };\n         for ws in workspaces.iter() {\n-            // First, load std\n-            let mut sysroot_crates = FxHashMap::default();\n-            for krate in ws.sysroot.crates() {\n-                if let Some(file_id) = vfs.load(krate.root(&ws.sysroot)) {\n-                    let file_id = FileId(file_id.0.into());\n-                    sysroot_crates.insert(krate, crate_graph.add_crate_root(file_id));\n-                }\n-            }\n-            for from in ws.sysroot.crates() {\n-                for to in from.deps(&ws.sysroot) {\n-                    let name = to.name(&ws.sysroot);\n-                    if let (Some(&from), Some(&to)) =\n-                        (sysroot_crates.get(&from), sysroot_crates.get(&to))\n-                    {\n-                        if let Err(_) = crate_graph.add_dep(from, name.clone(), to) {\n-                            log::error!(\"cyclic dependency between sysroot crates\")\n-                        }\n-                    }\n-                }\n-            }\n-\n-            let libstd = ws.sysroot.std().and_then(|it| sysroot_crates.get(&it).map(|&it| it));\n-\n-            let mut pkg_to_lib_crate = FxHashMap::default();\n-            let mut pkg_crates = FxHashMap::default();\n-            // Next, create crates for each package, target pair\n-            for pkg in ws.cargo.packages() {\n-                let mut lib_tgt = None;\n-                for tgt in pkg.targets(&ws.cargo) {\n-                    let root = tgt.root(&ws.cargo);\n-                    if let Some(file_id) = vfs.load(root) {\n-                        let file_id = FileId(file_id.0.into());\n-                        let crate_id = crate_graph.add_crate_root(file_id);\n-                        if tgt.kind(&ws.cargo) == TargetKind::Lib {\n-                            lib_tgt = Some(crate_id);\n-                            pkg_to_lib_crate.insert(pkg, crate_id);\n-                        }\n-                        pkg_crates.entry(pkg).or_insert_with(Vec::new).push(crate_id);\n-                    }\n-                }\n-\n-                // Set deps to the std and to the lib target of the current package\n-                for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                    if let Some(to) = lib_tgt {\n-                        if to != from {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, pkg.name(&ws.cargo).into(), to)\n-                            {\n-                                log::error!(\n-                                    \"cyclic dependency between targets of {}\",\n-                                    pkg.name(&ws.cargo)\n-                                )\n-                            }\n-                        }\n-                    }\n-                    if let Some(std) = libstd {\n-                        if let Err(_) = crate_graph.add_dep(from, \"std\".into(), std) {\n-                            log::error!(\"cyclic dependency on std for {}\", pkg.name(&ws.cargo))\n-                        }\n-                    }\n-                }\n-            }\n-\n-            // Now add a dep ednge from all targets of upstream to the lib\n-            // target of downstream.\n-            for pkg in ws.cargo.packages() {\n-                for dep in pkg.dependencies(&ws.cargo) {\n-                    if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n-                        for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                            if let Err(_) = crate_graph.add_dep(from, dep.name.clone(), to) {\n-                                log::error!(\n-                                    \"cyclic dependency {} -> {}\",\n-                                    pkg.name(&ws.cargo),\n-                                    dep.pkg.name(&ws.cargo)\n-                                )\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n+            crate_graph.extend(ws.to_crate_graph(&mut load));\n         }\n         change.set_crate_graph(crate_graph);\n "}, {"sha": "90f8b8398388beea15667b147bd02765bc186e05", "filename": "crates/ra_project_model/Cargo.toml", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=d0a32627a741826502692f2c3de71512b7ec23cf", "patch": "@@ -0,0 +1,21 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_project_model\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+\n+[dependencies]\n+log = \"0.4.5\"\n+rustc-hash = \"1.0\"\n+\n+failure = \"0.1.4\"\n+\n+walkdir = \"2.2.7\"\n+\n+cargo_metadata = \"0.7.0\"\n+\n+ra_arena = { path = \"../ra_arena\" }\n+ra_db = { path = \"../ra_db\" }\n+\n+[dev-dependencies]\n+test_utils = { path = \"../test_utils\" }"}, {"sha": "8adf463a6eef41a2253f8915aa18ec519ce8046e", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "renamed", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=d0a32627a741826502692f2c3de71512b7ec23cf", "patch": "@@ -1,17 +1,16 @@\n use std::path::{Path, PathBuf};\n \n use cargo_metadata::{MetadataCommand, CargoOpt};\n-use ra_syntax::SmolStr;\n use ra_arena::{Arena, RawId, impl_arena_id};\n use rustc_hash::FxHashMap;\n use failure::format_err;\n \n use crate::Result;\n \n-/// `CargoWorksapce` represents the logical structure of, well, a Cargo\n+/// `CargoWorkspace` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n ///\n-/// Note that internally, rust analyzer uses a differnet structure:\n+/// Note that internally, rust analyzer uses a different structure:\n /// `CrateGraph`. `CrateGraph` is lower-level: it knows only about the crates,\n /// while this knows about `Pacakges` & `Targets`: purely cargo-related\n /// concepts.\n@@ -31,7 +30,7 @@ impl_arena_id!(Target);\n \n #[derive(Debug, Clone)]\n struct PackageData {\n-    name: SmolStr,\n+    name: String,\n     manifest: PathBuf,\n     targets: Vec<Target>,\n     is_member: bool,\n@@ -41,13 +40,13 @@ struct PackageData {\n #[derive(Debug, Clone)]\n pub struct PackageDependency {\n     pub pkg: Package,\n-    pub name: SmolStr,\n+    pub name: String,\n }\n \n #[derive(Debug, Clone)]\n struct TargetData {\n     pkg: Package,\n-    name: SmolStr,\n+    name: String,\n     root: PathBuf,\n     kind: TargetKind,\n }\n@@ -162,9 +161,11 @@ impl CargoWorkspace {\n \n         Ok(CargoWorkspace { packages, targets })\n     }\n+\n     pub fn packages<'a>(&'a self) -> impl Iterator<Item = Package> + 'a {\n         self.packages.iter().map(|(id, _pkg)| id)\n     }\n+\n     pub fn target_by_root(&self, root: &Path) -> Option<Target> {\n         self.packages().filter_map(|pkg| pkg.targets(self).find(|it| it.root(self) == root)).next()\n     }", "previous_filename": "crates/ra_lsp_server/src/project_model/cargo_workspace.rs"}, {"sha": "3b1e0714998a390fc704b7c5b550f2157df131cc", "filename": "crates/ra_project_model/src/lib.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=d0a32627a741826502692f2c3de71512b7ec23cf", "patch": "@@ -0,0 +1,130 @@\n+mod cargo_workspace;\n+mod sysroot;\n+\n+use std::path::{Path, PathBuf};\n+\n+use failure::bail;\n+use rustc_hash::FxHashMap;\n+\n+use ra_db::{CrateGraph, FileId};\n+\n+pub use crate::{\n+    cargo_workspace::{CargoWorkspace, Package, Target, TargetKind},\n+    sysroot::Sysroot,\n+};\n+\n+// TODO use proper error enum\n+pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n+\n+#[derive(Debug, Clone)]\n+pub struct ProjectWorkspace {\n+    pub cargo: CargoWorkspace,\n+    pub sysroot: Sysroot,\n+}\n+\n+impl ProjectWorkspace {\n+    pub fn discover(path: &Path) -> Result<ProjectWorkspace> {\n+        let cargo_toml = find_cargo_toml(path)?;\n+        let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml)?;\n+        let sysroot = Sysroot::discover(&cargo_toml)?;\n+        let res = ProjectWorkspace { cargo, sysroot };\n+        Ok(res)\n+    }\n+\n+    pub fn to_crate_graph(&self, load: &mut dyn FnMut(&Path) -> Option<FileId>) -> CrateGraph {\n+        let mut crate_graph = CrateGraph::default();\n+        let mut sysroot_crates = FxHashMap::default();\n+        for krate in self.sysroot.crates() {\n+            if let Some(file_id) = load(krate.root(&self.sysroot)) {\n+                sysroot_crates.insert(krate, crate_graph.add_crate_root(file_id));\n+            }\n+        }\n+        for from in self.sysroot.crates() {\n+            for to in from.deps(&self.sysroot) {\n+                let name = to.name(&self.sysroot);\n+                if let (Some(&from), Some(&to)) =\n+                    (sysroot_crates.get(&from), sysroot_crates.get(&to))\n+                {\n+                    if let Err(_) = crate_graph.add_dep(from, name.into(), to) {\n+                        log::error!(\"cyclic dependency between sysroot crates\")\n+                    }\n+                }\n+            }\n+        }\n+\n+        let libstd = self.sysroot.std().and_then(|it| sysroot_crates.get(&it).map(|&it| it));\n+\n+        let mut pkg_to_lib_crate = FxHashMap::default();\n+        let mut pkg_crates = FxHashMap::default();\n+        // Next, create crates for each package, target pair\n+        for pkg in self.cargo.packages() {\n+            let mut lib_tgt = None;\n+            for tgt in pkg.targets(&self.cargo) {\n+                let root = tgt.root(&self.cargo);\n+                if let Some(file_id) = load(root) {\n+                    let crate_id = crate_graph.add_crate_root(file_id);\n+                    if tgt.kind(&self.cargo) == TargetKind::Lib {\n+                        lib_tgt = Some(crate_id);\n+                        pkg_to_lib_crate.insert(pkg, crate_id);\n+                    }\n+                    pkg_crates.entry(pkg).or_insert_with(Vec::new).push(crate_id);\n+                }\n+            }\n+\n+            // Set deps to the std and to the lib target of the current package\n+            for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n+                if let Some(to) = lib_tgt {\n+                    if to != from {\n+                        if let Err(_) = crate_graph.add_dep(from, pkg.name(&self.cargo).into(), to)\n+                        {\n+                            log::error!(\n+                                \"cyclic dependency between targets of {}\",\n+                                pkg.name(&self.cargo)\n+                            )\n+                        }\n+                    }\n+                }\n+                if let Some(std) = libstd {\n+                    if let Err(_) = crate_graph.add_dep(from, \"std\".into(), std) {\n+                        log::error!(\"cyclic dependency on std for {}\", pkg.name(&self.cargo))\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Now add a dep ednge from all targets of upstream to the lib\n+        // target of downstream.\n+        for pkg in self.cargo.packages() {\n+            for dep in pkg.dependencies(&self.cargo) {\n+                if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n+                    for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n+                        if let Err(_) = crate_graph.add_dep(from, dep.name.clone().into(), to) {\n+                            log::error!(\n+                                \"cyclic dependency {} -> {}\",\n+                                pkg.name(&self.cargo),\n+                                dep.pkg.name(&self.cargo)\n+                            )\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        crate_graph\n+    }\n+}\n+\n+fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n+    if path.ends_with(\"Cargo.toml\") {\n+        return Ok(path.to_path_buf());\n+    }\n+    let mut curr = Some(path);\n+    while let Some(path) = curr {\n+        let candidate = path.join(\"Cargo.toml\");\n+        if candidate.exists() {\n+            return Ok(candidate);\n+        }\n+        curr = path.parent();\n+    }\n+    bail!(\"can't find Cargo.toml at {}\", path.display())\n+}"}, {"sha": "8b87aa7bdafd755f410c7b9f54740f7cd698a40e", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "renamed", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=d0a32627a741826502692f2c3de71512b7ec23cf", "patch": "@@ -3,7 +3,6 @@ use std::{\n     process::Command,\n };\n \n-use ra_syntax::SmolStr;\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::Result;\n@@ -19,21 +18,21 @@ impl_arena_id!(SysrootCrate);\n \n #[derive(Debug, Clone)]\n struct SysrootCrateData {\n-    name: SmolStr,\n+    name: String,\n     root: PathBuf,\n     deps: Vec<SysrootCrate>,\n }\n \n impl Sysroot {\n-    pub(crate) fn std(&self) -> Option<SysrootCrate> {\n+    pub fn std(&self) -> Option<SysrootCrate> {\n         self.by_name(\"std\")\n     }\n \n-    pub(crate) fn crates<'a>(&'a self) -> impl Iterator<Item = SysrootCrate> + 'a {\n+    pub fn crates<'a>(&'a self) -> impl Iterator<Item = SysrootCrate> + 'a {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n \n-    pub(super) fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n+    pub fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n         let rustc_output = Command::new(\"rustc\")\n             .current_dir(cargo_toml.parent().unwrap())\n             .args(&[\"--print\", \"sysroot\"])\n@@ -80,16 +79,16 @@ impl Sysroot {\n }\n \n impl SysrootCrate {\n-    pub(crate) fn name(self, sysroot: &Sysroot) -> &SmolStr {\n+    pub fn name(self, sysroot: &Sysroot) -> &str {\n         &sysroot.crates[self].name\n     }\n-    pub(crate) fn root(self, sysroot: &Sysroot) -> &Path {\n+    pub fn root(self, sysroot: &Sysroot) -> &Path {\n         sysroot.crates[self].root.as_path()\n     }\n-    pub(crate) fn root_dir(self, sysroot: &Sysroot) -> &Path {\n+    pub fn root_dir(self, sysroot: &Sysroot) -> &Path {\n         self.root(sysroot).parent().unwrap()\n     }\n-    pub(crate) fn deps<'a>(self, sysroot: &'a Sysroot) -> impl Iterator<Item = SysrootCrate> + 'a {\n+    pub fn deps<'a>(self, sysroot: &'a Sysroot) -> impl Iterator<Item = SysrootCrate> + 'a {\n         sysroot.crates[self].deps.iter().map(|&it| it)\n     }\n }", "previous_filename": "crates/ra_lsp_server/src/project_model/sysroot.rs"}, {"sha": "7c7a85a75c4d470adaba5b4a75cac11377881174", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d0a32627a741826502692f2c3de71512b7ec23cf/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=d0a32627a741826502692f2c3de71512b7ec23cf", "patch": "@@ -15,7 +15,7 @@ drop_bomb = \"0.1.4\"\n parking_lot = \"0.7.0\"\n rowan = \"0.3.3\"\n \n-# ideally, `serde` should be enabled by `ra_lsp_serder`, but we enable it here\n+# ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n # to reduce number of compilations\n text_unit = { version = \"0.1.6\", features = [\"serde\"] }\n smol_str = { version = \"0.1.9\", features = [\"serde\"] }"}]}