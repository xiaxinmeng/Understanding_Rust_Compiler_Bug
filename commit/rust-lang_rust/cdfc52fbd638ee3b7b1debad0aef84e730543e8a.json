{"sha": "cdfc52fbd638ee3b7b1debad0aef84e730543e8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZmM1MmZiZDYzOGVlM2I3YjFkZWJhZDBhZWY4NGU3MzA1NDNlOGE=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-02-04T09:45:17Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-02-04T09:45:17Z"}, "message": "Try fast_reject::simplify_type in coherence before doing full check\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\nCo-authored-by: Ryan Levick <me@ryanlevick.com>", "tree": {"sha": "7ad2fbd1d65644afe6b960c8600640032bc7e2a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad2fbd1d65644afe6b960c8600640032bc7e2a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdfc52fbd638ee3b7b1debad0aef84e730543e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfc52fbd638ee3b7b1debad0aef84e730543e8a", "html_url": "https://github.com/rust-lang/rust/commit/cdfc52fbd638ee3b7b1debad0aef84e730543e8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdfc52fbd638ee3b7b1debad0aef84e730543e8a/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "html_url": "https://github.com/rust-lang/rust/commit/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "87f2ea16f8ae3fd4f671cbd01e6387382685676b", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cdfc52fbd638ee3b7b1debad0aef84e730543e8a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfc52fbd638ee3b7b1debad0aef84e730543e8a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=cdfc52fbd638ee3b7b1debad0aef84e730543e8a", "patch": "@@ -11,7 +11,7 @@ use crate::traits::{self, Normalized, Obligation, ObligationCause, SelectionCont\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, fast_reject, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n use std::iter;\n@@ -67,6 +67,36 @@ where\n            impl2_def_id={:?})\",\n         impl1_def_id, impl2_def_id,\n     );\n+    // Before doing expensive operations like entering an inference context, do\n+    // a quick check via fast_reject to tell if the impl headers could possibly\n+    // unify.\n+    let impl1_self = tcx.type_of(impl1_def_id);\n+    let impl2_self = tcx.type_of(impl2_def_id);\n+    let impl1_ref = tcx.impl_trait_ref(impl1_def_id);\n+    let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n+\n+    // Check if any of the input types definitely mismatch.\n+    if impl1_ref\n+        .iter()\n+        .flat_map(|tref| tref.substs.types())\n+        .zip(impl2_ref.iter().flat_map(|tref| tref.substs.types()))\n+        .chain(iter::once((impl1_self, impl2_self)))\n+        .any(|(ty1, ty2)| {\n+            let ty1 = fast_reject::simplify_type(tcx, ty1, false);\n+            let ty2 = fast_reject::simplify_type(tcx, ty2, false);\n+            if let (Some(ty1), Some(ty2)) = (ty1, ty2) {\n+                // Simplified successfully\n+                ty1 != ty2\n+            } else {\n+                // Types might unify\n+                false\n+            }\n+        })\n+    {\n+        // Some types involved are definitely different, so the impls couldn't possibly overlap.\n+        debug!(\"overlapping_impls: fast_reject early-exit\");\n+        return no_overlap();\n+    }\n \n     let overlaps = tcx.infer_ctxt().enter(|infcx| {\n         let selcx = &mut SelectionContext::intercrate(&infcx);"}]}