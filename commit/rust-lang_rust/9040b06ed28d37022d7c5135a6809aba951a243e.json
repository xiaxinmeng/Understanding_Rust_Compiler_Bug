{"sha": "9040b06ed28d37022d7c5135a6809aba951a243e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNDBiMDZlZDI4ZDM3MDIyZDdjNTEzNWE2ODA5YWJhOTUxYTI0M2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-13T13:09:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-13T13:09:22Z"}, "message": "Auto merge of #28286 - matklad:remove-dead-code, r=eddyb\n\nThere is a dead code in libsyntax/parser/parse.rs, when parsing structs.\r\n\r\nTwo functions are involved:\r\n\r\n* [parse_item_struct](https://github.com/rust-lang/rust/blob/cd9c9f048f6aa0be091cd9835771ba0712bead4e/src/libsyntax/parse/parser.rs#L4691)\r\n* [parse_tuple_struct_body](https://github.com/rust-lang/rust/blob/cd9c9f048f6aa0be091cd9835771ba0712bead4e/src/libsyntax/parse/parser.rs#L4769)\r\n\r\nThe problem is that both functions handle the case with unit structs. But because\r\n`parse_tuple_struct_body` is called from `parse_item_struct`, it never faces\r\nthis case.\r\n\r\nThis PR removes unit struct case from `parse_tuple_struct_body` function. I tested with `make -j8 check-statge1`.", "tree": {"sha": "a149621f28ca9bc64f653523421b664585177a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a149621f28ca9bc64f653523421b664585177a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9040b06ed28d37022d7c5135a6809aba951a243e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9040b06ed28d37022d7c5135a6809aba951a243e", "html_url": "https://github.com/rust-lang/rust/commit/9040b06ed28d37022d7c5135a6809aba951a243e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9040b06ed28d37022d7c5135a6809aba951a243e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd230ff12481ebeba720fb1ac1f610d93bb74920", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd230ff12481ebeba720fb1ac1f610d93bb74920", "html_url": "https://github.com/rust-lang/rust/commit/fd230ff12481ebeba720fb1ac1f610d93bb74920"}, {"sha": "c87a58fe4b5c2f64ecd1ad3697bdb0403c76af4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87a58fe4b5c2f64ecd1ad3697bdb0403c76af4c", "html_url": "https://github.com/rust-lang/rust/commit/c87a58fe4b5c2f64ecd1ad3697bdb0403c76af4c"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "2308787bf675799b0a3199287fced8f57ca0e0c1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 31, "deletions": 38, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9040b06ed28d37022d7c5135a6809aba951a243e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9040b06ed28d37022d7c5135a6809aba951a243e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9040b06ed28d37022d7c5135a6809aba951a243e", "patch": "@@ -4723,9 +4723,13 @@ impl<'a> Parser<'a> {\n             let fields = try!(self.parse_record_struct_body(&class_name));\n             (fields, None)\n         // Tuple-style struct definition with optional where-clause.\n-        } else {\n+        } else if self.token == token::OpenDelim(token::Paren) {\n             let fields = try!(self.parse_tuple_struct_body(&class_name, &mut generics));\n             (fields, Some(ast::DUMMY_NODE_ID))\n+        } else {\n+            let token_str = self.this_token_to_string();\n+            return Err(self.fatal(&format!(\"expected `where`, `{{`, `(`, or `;` after struct \\\n+                                            name, found `{}`\", token_str)))\n         };\n \n         Ok((class_name,\n@@ -4753,8 +4757,8 @@ impl<'a> Parser<'a> {\n             try!(self.bump());\n         } else {\n             let token_str = self.this_token_to_string();\n-            return Err(self.fatal(&format!(\"expected `where`, or `{}` after struct \\\n-                                name, found `{}`\", \"{\",\n+            return Err(self.fatal(&format!(\"expected `where`, or `{{` after struct \\\n+                                name, found `{}`\",\n                                 token_str)));\n         }\n \n@@ -4766,43 +4770,32 @@ impl<'a> Parser<'a> {\n                                    generics: &mut ast::Generics)\n                                    -> PResult<Vec<StructField>> {\n         // This is the case where we find `struct Foo<T>(T) where T: Copy;`\n-        if self.check(&token::OpenDelim(token::Paren)) {\n-            let fields = try!(self.parse_unspanned_seq(\n-                &token::OpenDelim(token::Paren),\n-                &token::CloseDelim(token::Paren),\n-                seq_sep_trailing_allowed(token::Comma),\n-                |p| {\n-                    let attrs = p.parse_outer_attributes();\n-                    let lo = p.span.lo;\n-                    let struct_field_ = ast::StructField_ {\n-                        kind: UnnamedField(try!(p.parse_visibility())),\n-                        id: ast::DUMMY_NODE_ID,\n-                        ty: try!(p.parse_ty_sum()),\n-                        attrs: attrs,\n-                    };\n-                    Ok(spanned(lo, p.span.hi, struct_field_))\n-                }));\n-\n-            if fields.is_empty() {\n-                return Err(self.fatal(&format!(\"unit-like struct definition should be \\\n-                    written as `struct {};`\",\n-                    class_name)));\n-            }\n+        // Unit like structs are handled in parse_item_struct function\n+        let fields = try!(self.parse_unspanned_seq(\n+            &token::OpenDelim(token::Paren),\n+            &token::CloseDelim(token::Paren),\n+            seq_sep_trailing_allowed(token::Comma),\n+            |p| {\n+                let attrs = p.parse_outer_attributes();\n+                let lo = p.span.lo;\n+                let struct_field_ = ast::StructField_ {\n+                    kind: UnnamedField(try!(p.parse_visibility())),\n+                    id: ast::DUMMY_NODE_ID,\n+                    ty: try!(p.parse_ty_sum()),\n+                    attrs: attrs,\n+                };\n+                Ok(spanned(lo, p.span.hi, struct_field_))\n+            }));\n \n-            generics.where_clause = try!(self.parse_where_clause());\n-            try!(self.expect(&token::Semi));\n-            Ok(fields)\n-        // This is the case where we just see struct Foo<T> where T: Copy;\n-        } else if self.token.is_keyword(keywords::Where) {\n-            generics.where_clause = try!(self.parse_where_clause());\n-            try!(self.expect(&token::Semi));\n-            Ok(Vec::new())\n-        // This case is where we see: `struct Foo<T>;`\n-        } else {\n-            let token_str = self.this_token_to_string();\n-            Err(self.fatal(&format!(\"expected `where`, `{}`, `(`, or `;` after struct \\\n-                name, found `{}`\", \"{\", token_str)))\n+        if fields.is_empty() {\n+            return Err(self.fatal(&format!(\"unit-like struct definition should be \\\n+                                            written as `struct {};`\",\n+                                           class_name)));\n         }\n+\n+        generics.where_clause = try!(self.parse_where_clause());\n+        try!(self.expect(&token::Semi));\n+        Ok(fields)\n     }\n \n     /// Parse a structure field declaration"}]}