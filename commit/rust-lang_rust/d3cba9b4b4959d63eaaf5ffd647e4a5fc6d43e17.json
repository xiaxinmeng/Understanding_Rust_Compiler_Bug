{"sha": "d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzY2JhOWI0YjQ5NTlkNjNlYWFmNWZmZDY0N2U0YTVmYzZkNDNlMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T15:42:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T15:42:02Z"}, "message": "Auto merge of #54270 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #53941 (rustdoc: Sort implementors)\n - #54181 (Suggest && and || instead of 'and' and 'or')\n - #54209 (Partially revert 674a5db \"Fix undesirable fallout [from macro modularization]\")\n - #54213 (De-overlap the lifetimes of `flow_inits` and `flow_{un,ever_}inits`.)\n - #54244 (Add a small search box to seach Rust's standary library)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "40497aff8f7d707791844dd498118d20653e0779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40497aff8f7d707791844dd498118d20653e0779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "html_url": "https://github.com/rust-lang/rust/commit/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32dc5a0783560c97f3c42dafad25dcee9cf6d723", "url": "https://api.github.com/repos/rust-lang/rust/commits/32dc5a0783560c97f3c42dafad25dcee9cf6d723", "html_url": "https://github.com/rust-lang/rust/commit/32dc5a0783560c97f3c42dafad25dcee9cf6d723"}, {"sha": "8b1e5e1f01d0250b7bfd843b2035c3fbf7fbafd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1e5e1f01d0250b7bfd843b2035c3fbf7fbafd5", "html_url": "https://github.com/rust-lang/rust/commit/8b1e5e1f01d0250b7bfd843b2035c3fbf7fbafd5"}], "stats": {"total": 358, "additions": 285, "deletions": 73}, "files": [{"sha": "b1788d8c32f02aa70d6c61d4c3e3b96776bc8044", "filename": "src/doc/index.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "patch": "@@ -43,6 +43,13 @@ Rust's standard library has [extensive API documentation](std/index.html),\n with explanations of how to use various things, as well as example code for\n accomplishing various tasks.\n \n+<div>\n+  <form action=\"std/index.html\" method=\"get\">\n+    <input type=\"search\" name=\"search\"/>\n+    <button>Search</button>\n+  </form>\n+</div>\n+\n ## The Rustc Book\n \n [The Rustc Book](rustc/index.html) describes the Rust compiler, `rustc`."}, {"sha": "3c694fe7b4e58d18ebe6e8c0b0762b5f475df9e0", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "patch": "@@ -177,24 +177,6 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         MaybeInitializedPlaces::new(tcx, mir, &mdpe),\n         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n     ));\n-    let flow_uninits = FlowAtLocation::new(do_dataflow(\n-        tcx,\n-        mir,\n-        id,\n-        &attributes,\n-        &dead_unwinds,\n-        MaybeUninitializedPlaces::new(tcx, mir, &mdpe),\n-        |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n-    ));\n-    let flow_ever_inits = FlowAtLocation::new(do_dataflow(\n-        tcx,\n-        mir,\n-        id,\n-        &attributes,\n-        &dead_unwinds,\n-        EverInitializedPlaces::new(tcx, mir, &mdpe),\n-        |bd, i| DebugFormatted::new(&bd.move_data().inits[i]),\n-    ));\n \n     let locals_are_invalidated_at_exit = match tcx.hir.body_owner_kind(id) {\n             hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => false,\n@@ -216,6 +198,12 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         &borrow_set,\n         &mut errors_buffer,\n     );\n+\n+    // The various `flow_*` structures can be large. We drop `flow_inits` here\n+    // so it doesn't overlap with the others below. This reduces peak memory\n+    // usage significantly on some benchmarks.\n+    drop(flow_inits);\n+\n     let regioncx = Rc::new(regioncx);\n \n     let flow_borrows = FlowAtLocation::new(do_dataflow(\n@@ -227,6 +215,24 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         Borrows::new(tcx, mir, regioncx.clone(), def_id, body_id, &borrow_set),\n         |rs, i| DebugFormatted::new(&rs.location(i)),\n     ));\n+    let flow_uninits = FlowAtLocation::new(do_dataflow(\n+        tcx,\n+        mir,\n+        id,\n+        &attributes,\n+        &dead_unwinds,\n+        MaybeUninitializedPlaces::new(tcx, mir, &mdpe),\n+        |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n+    ));\n+    let flow_ever_inits = FlowAtLocation::new(do_dataflow(\n+        tcx,\n+        mir,\n+        id,\n+        &attributes,\n+        &dead_unwinds,\n+        EverInitializedPlaces::new(tcx, mir, &mdpe),\n+        |bd, i| DebugFormatted::new(&bd.move_data().inits[i]),\n+    ));\n \n     let movable_generator = match tcx.hir.get(id) {\n         Node::Expr(&hir::Expr {"}, {"sha": "75311d938516f2b9da63c9480bbb1283932a53f8", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "patch": "@@ -2301,17 +2301,21 @@ fn document_non_exhaustive(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::R\n }\n \n fn name_key(name: &str) -> (&str, u64, usize) {\n+    let end = name.bytes()\n+        .rposition(|b| b.is_ascii_digit()).map_or(name.len(), |i| i + 1);\n+\n     // find number at end\n-    let split = name.bytes().rposition(|b| b < b'0' || b'9' < b).map_or(0, |s| s + 1);\n+    let split = name[0..end].bytes()\n+        .rposition(|b| !b.is_ascii_digit()).map_or(0, |i| i + 1);\n \n     // count leading zeroes\n     let after_zeroes =\n-        name[split..].bytes().position(|b| b != b'0').map_or(name.len(), |extra| split + extra);\n+        name[split..end].bytes().position(|b| b != b'0').map_or(name.len(), |extra| split + extra);\n \n     // sort leading zeroes last\n     let num_zeroes = after_zeroes - split;\n \n-    match name[split..].parse() {\n+    match name[split..end].parse() {\n         Ok(n) => (&name[..split], n, num_zeroes),\n         Err(_) => (name, 0, num_zeroes),\n     }\n@@ -2702,6 +2706,14 @@ fn bounds(t_bounds: &[clean::GenericBound]) -> String {\n     bounds\n }\n \n+fn compare_impl<'a, 'b>(lhs: &'a &&Impl, rhs: &'b &&Impl) -> Ordering {\n+    let lhs = format!(\"{}\", lhs.inner_impl());\n+    let rhs = format!(\"{}\", rhs.inner_impl());\n+\n+    // lhs and rhs are formatted as HTML, which may be unnecessary\n+    name_key(&lhs).cmp(&name_key(&rhs))\n+}\n+\n fn item_trait(\n     w: &mut fmt::Formatter,\n     cx: &Context,\n@@ -2905,9 +2917,12 @@ fn item_trait(\n                                          .map_or(true, |d| cache.paths.contains_key(&d)));\n \n \n-        let (synthetic, concrete): (Vec<&&Impl>, Vec<&&Impl>) = local.iter()\n+        let (mut synthetic, mut concrete): (Vec<&&Impl>, Vec<&&Impl>) = local.iter()\n             .partition(|i| i.inner_impl().synthetic);\n \n+        synthetic.sort_by(compare_impl);\n+        concrete.sort_by(compare_impl);\n+\n         if !foreign.is_empty() {\n             write!(w, \"\n                 <h2 id='foreign-impls' class='small-section-header'>\n@@ -4716,6 +4731,7 @@ fn test_name_sorting() {\n                  \"Fruit1\", \"Fruit01\",\n                  \"Fruit2\", \"Fruit02\",\n                  \"Fruit20\",\n+                 \"Fruit30x\",\n                  \"Fruit100\",\n                  \"Pear\"];\n     let mut sorted = names.to_owned();"}, {"sha": "48e034b117f187857dc3334c4b8cbece92b75aaf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "patch": "@@ -732,6 +732,22 @@ impl<'a> Parser<'a> {\n                   format!(\"expected {} here\", expect)))\n             };\n             let mut err = self.fatal(&msg_exp);\n+            if self.token.is_ident_named(\"and\") {\n+                err.span_suggestion_short_with_applicability(\n+                    self.span,\n+                    \"use `&&` instead of `and` for the boolean operator\",\n+                    \"&&\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            if self.token.is_ident_named(\"or\") {\n+                err.span_suggestion_short_with_applicability(\n+                    self.span,\n+                    \"use `||` instead of `or` for the boolean operator\",\n+                    \"||\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n             let sp = if self.token == token::Token::Eof {\n                 // This is EOF, don't want to point at the following char, but rather the last token\n                 self.prev_span\n@@ -4751,6 +4767,23 @@ impl<'a> Parser<'a> {\n                 e.span_label(sp, \"expected `{`\");\n             }\n \n+            if self.token.is_ident_named(\"and\") {\n+                e.span_suggestion_short_with_applicability(\n+                    self.span,\n+                    \"use `&&` instead of `and` for the boolean operator\",\n+                    \"&&\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            if self.token.is_ident_named(\"or\") {\n+                e.span_suggestion_short_with_applicability(\n+                    self.span,\n+                    \"use `||` instead of `or` for the boolean operator\",\n+                    \"||\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+\n             // Check to see if the user has written something like\n             //\n             //    if (cond)"}, {"sha": "60d19fbcd1a20a7c1fdc1e4368a13c5b6fddb91b", "filename": "src/test/rustdoc/issue-53812.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-53812.rs?ref=d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait MyIterator {\n+}\n+\n+pub struct MyStruct<T>(T);\n+\n+macro_rules! array_impls {\n+    ($($N:expr)+) => {\n+        $(\n+            impl<'a, T> MyIterator for &'a MyStruct<[T; $N]> {\n+            }\n+        )+\n+    }\n+}\n+\n+// @has issue_53812/trait.MyIterator.html '//*[@id=\"implementors-list\"]//h3[1]' 'MyStruct<[T; 0]>'\n+// @has - '//*[@id=\"implementors-list\"]//h3[2]' 'MyStruct<[T; 1]>'\n+// @has - '//*[@id=\"implementors-list\"]//h3[3]' 'MyStruct<[T; 2]>'\n+// @has - '//*[@id=\"implementors-list\"]//h3[4]' 'MyStruct<[T; 3]>'\n+// @has - '//*[@id=\"implementors-list\"]//h3[5]' 'MyStruct<[T; 10]>'\n+array_impls! { 10 3 2 1 0 }"}, {"sha": "d053b11772cd005933d2fbb10e3d3c27a7ccaff7", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs?ref=d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn test_and() {\n+    let a = true;\n+    let b = false;\n+    if a and b {\n+        //~^ ERROR expected `{`, found `and`\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_or() {\n+    let a = true;\n+    let b = false;\n+    if a or b {\n+        //~^ ERROR expected `{`, found `or`\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_and_par() {\n+    let a = true;\n+    let b = false;\n+    if (a and b) {\n+        //~^ ERROR expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `and`\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_or_par() {\n+    let a = true;\n+    let b = false;\n+    if (a or b) {\n+        //~^ ERROR expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `or`\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_while_and() {\n+    let a = true;\n+    let b = false;\n+    while a and b {\n+        //~^ ERROR expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `and`\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_while_or() {\n+    let a = true;\n+    let b = false;\n+    while a or b {\n+        //~^ ERROR expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `or`\n+        println!(\"both\");\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "22845775aed13c13c1582d2c966d81b51f32da61", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr?ref=d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "patch": "@@ -0,0 +1,54 @@\n+error: expected `{`, found `and`\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:14:10\n+   |\n+LL |     if a and b {\n+   |     --   ^^^ help: use `&&` instead of `and` for the boolean operator\n+   |     |\n+   |     this `if` statement has a condition, but no block\n+\n+error: expected `{`, found `or`\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:23:10\n+   |\n+LL |     if a or b {\n+   |     --   ^^ help: use `||` instead of `or` for the boolean operator\n+   |     |\n+   |     this `if` statement has a condition, but no block\n+\n+error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `and`\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:32:11\n+   |\n+LL |     if (a and b) {\n+   |           ^^^\n+   |           |\n+   |           expected one of 8 possible tokens here\n+   |           help: use `&&` instead of `and` for the boolean operator\n+\n+error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `or`\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:41:11\n+   |\n+LL |     if (a or b) {\n+   |           ^^\n+   |           |\n+   |           expected one of 8 possible tokens here\n+   |           help: use `||` instead of `or` for the boolean operator\n+\n+error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `and`\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:50:13\n+   |\n+LL |     while a and b {\n+   |             ^^^\n+   |             |\n+   |             expected one of `!`, `.`, `::`, `?`, `{`, or an operator here\n+   |             help: use `&&` instead of `and` for the boolean operator\n+\n+error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `or`\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:59:13\n+   |\n+LL |     while a or b {\n+   |             ^^\n+   |             |\n+   |             expected one of `!`, `.`, `::`, `?`, `{`, or an operator here\n+   |             help: use `||` instead of `or` for the boolean operator\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "f674123aac7a2684c73d3f183c46cf9b01a40d41", "filename": "src/test/ui/run-pass/macros/macro-comma-support.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Ftest%2Fui%2Frun-pass%2Fmacros%2Fmacro-comma-support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17/src%2Ftest%2Fui%2Frun-pass%2Fmacros%2Fmacro-comma-support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fmacros%2Fmacro-comma-support.rs?ref=d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "patch": "@@ -62,30 +62,30 @@ fn assert_ne() {\n \n #[test]\n fn cfg() {\n-    cfg!(pants);\n-    cfg!(pants,);\n-    cfg!(pants = \"pants\");\n-    cfg!(pants = \"pants\",);\n-    cfg!(all(pants));\n-    cfg!(all(pants),);\n-    cfg!(all(pants,));\n-    cfg!(all(pants,),);\n+    let _ = cfg!(pants);\n+    let _ = cfg!(pants,);\n+    let _ = cfg!(pants = \"pants\");\n+    let _ = cfg!(pants = \"pants\",);\n+    let _ = cfg!(all(pants));\n+    let _ = cfg!(all(pants),);\n+    let _ = cfg!(all(pants,));\n+    let _ = cfg!(all(pants,),);\n }\n \n #[test]\n fn column() {\n-    column!();\n+    let _ = column!();\n }\n \n // compile_error! is in a companion to this test in compile-fail\n \n #[test]\n fn concat() {\n-    concat!();\n-    concat!(\"hello\");\n-    concat!(\"hello\",);\n-    concat!(\"hello\", \" world\");\n-    concat!(\"hello\", \" world\",);\n+    let _ = concat!();\n+    let _ = concat!(\"hello\");\n+    let _ = concat!(\"hello\",);\n+    let _ = concat!(\"hello\", \" world\");\n+    let _ = concat!(\"hello\", \" world\",);\n }\n \n #[test]\n@@ -131,10 +131,10 @@ fn debug_assert_ne() {\n \n #[test]\n fn env() {\n-    env!(\"PATH\");\n-    env!(\"PATH\",);\n-    env!(\"PATH\", \"not found\");\n-    env!(\"PATH\", \"not found\",);\n+    let _ = env!(\"PATH\");\n+    let _ = env!(\"PATH\",);\n+    let _ = env!(\"PATH\", \"not found\");\n+    let _ = env!(\"PATH\", \"not found\",);\n }\n \n #[cfg(std)]\n@@ -158,58 +158,58 @@ fn eprintln() {\n \n #[test]\n fn file() {\n-    file!();\n+    let _ = file!();\n }\n \n #[cfg(std)]\n #[test]\n fn format() {\n-    format!(\"hello\");\n-    format!(\"hello\",);\n-    format!(\"hello {}\", \"world\");\n-    format!(\"hello {}\", \"world\",);\n+    let _ = format!(\"hello\");\n+    let _ = format!(\"hello\",);\n+    let _ = format!(\"hello {}\", \"world\");\n+    let _ = format!(\"hello {}\", \"world\",);\n }\n \n #[test]\n fn format_args() {\n-    format_args!(\"hello\");\n-    format_args!(\"hello\",);\n-    format_args!(\"hello {}\", \"world\");\n-    format_args!(\"hello {}\", \"world\",);\n+    let _ = format_args!(\"hello\");\n+    let _ = format_args!(\"hello\",);\n+    let _ = format_args!(\"hello {}\", \"world\");\n+    let _ = format_args!(\"hello {}\", \"world\",);\n }\n \n #[test]\n fn include() {\n-    include!(\"auxiliary/macro-comma-support.rs\");\n-    include!(\"auxiliary/macro-comma-support.rs\",);\n+    let _ = include!(\"auxiliary/macro-comma-support.rs\");\n+    let _ = include!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn include_bytes() {\n-    include_bytes!(\"auxiliary/macro-comma-support.rs\");\n-    include_bytes!(\"auxiliary/macro-comma-support.rs\",);\n+    let _ = include_bytes!(\"auxiliary/macro-comma-support.rs\");\n+    let _ = include_bytes!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn include_str() {\n-    include_str!(\"auxiliary/macro-comma-support.rs\");\n-    include_str!(\"auxiliary/macro-comma-support.rs\",);\n+    let _ = include_str!(\"auxiliary/macro-comma-support.rs\");\n+    let _ = include_str!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn line() {\n-    line!();\n+    let _ = line!();\n }\n \n #[test]\n fn module_path() {\n-    module_path!();\n+    let _ = module_path!();\n }\n \n #[test]\n fn option_env() {\n-    option_env!(\"PATH\");\n-    option_env!(\"PATH\",);\n+    let _ = option_env!(\"PATH\");\n+    let _ = option_env!(\"PATH\",);\n }\n \n #[test]\n@@ -309,10 +309,10 @@ fn unreachable() {\n #[test]\n fn vec() {\n     let _: Vec<()> = vec![];\n-    vec![0];\n-    vec![0,];\n-    vec![0, 1];\n-    vec![0, 1,];\n+    let _ = vec![0];\n+    let _ = vec![0,];\n+    let _ = vec![0, 1];\n+    let _ = vec![0, 1,];\n }\n \n // give a test body access to a fmt::Formatter, which seems\n@@ -340,21 +340,21 @@ macro_rules! test_with_formatter {\n test_with_formatter! {\n     #[test]\n     fn write(f: &mut fmt::Formatter) {\n-        write!(f, \"hello\");\n-        write!(f, \"hello\",);\n-        write!(f, \"hello {}\", \"world\");\n-        write!(f, \"hello {}\", \"world\",);\n+        let _ = write!(f, \"hello\");\n+        let _ = write!(f, \"hello\",);\n+        let _ = write!(f, \"hello {}\", \"world\");\n+        let _ = write!(f, \"hello {}\", \"world\",);\n     }\n }\n \n test_with_formatter! {\n     #[test]\n     fn writeln(f: &mut fmt::Formatter) {\n-        writeln!(f);\n-        writeln!(f,);\n-        writeln!(f, \"hello\");\n-        writeln!(f, \"hello\",);\n-        writeln!(f, \"hello {}\", \"world\");\n-        writeln!(f, \"hello {}\", \"world\",);\n+        let _ = writeln!(f);\n+        let _ = writeln!(f,);\n+        let _ = writeln!(f, \"hello\");\n+        let _ = writeln!(f, \"hello\",);\n+        let _ = writeln!(f, \"hello {}\", \"world\");\n+        let _ = writeln!(f, \"hello {}\", \"world\",);\n     }\n }"}]}