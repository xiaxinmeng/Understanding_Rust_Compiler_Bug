{"sha": "78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "node_id": "C_kwDOAAsO6NoAKDc4ZWZhZjQzZTRlOWVmODg2NGZhYTNkYTNhNGZlMWJkNWM0NWRjZTE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-08T02:02:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-15T03:17:20Z"}, "message": "remove tcx from ObligationCauseCode::span", "tree": {"sha": "04b99d2af79eefaae4acf5fcb57e6737d62328cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04b99d2af79eefaae4acf5fcb57e6737d62328cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "html_url": "https://github.com/rust-lang/rust/commit/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b6ab912976e5345769e9ac62831974e4a4579f", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b6ab912976e5345769e9ac62831974e4a4579f", "html_url": "https://github.com/rust-lang/rust/commit/27b6ab912976e5345769e9ac62831974e4a4579f"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "1e8b212276f2f310a4ef48d7e29d7c96a8e8fcc7", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "patch": "@@ -714,10 +714,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n     }\n \n     fn const_equate(&mut self, _a: Const<'tcx>, _b: Const<'tcx>) {\n-        span_bug!(\n-            self.cause.span(self.infcx.tcx),\n-            \"generic_const_exprs: unreachable `const_equate`\"\n-        );\n+        span_bug!(self.cause.span(), \"generic_const_exprs: unreachable `const_equate`\");\n     }\n \n     fn normalization() -> NormalizationStrategy {"}, {"sha": "4f59215c70b9216d6d585c8683ac034937839dae", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "patch": "@@ -1435,7 +1435,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         swap_secondary_and_primary: bool,\n         force_label: bool,\n     ) {\n-        let span = cause.span(self.tcx);\n+        let span = cause.span();\n \n         // For some types of errors, expected-found does not make\n         // sense, so just ignore the values we were given.\n@@ -2085,7 +2085,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         debug!(\"report_and_explain_type_error(trace={:?}, terr={:?})\", trace, terr);\n \n-        let span = trace.cause.span(self.tcx);\n+        let span = trace.cause.span();\n         let failure_code = trace.cause.as_failure_code(terr);\n         let mut diag = match failure_code {\n             FailureCode::Error0038(did) => {"}, {"sha": "998699158ff484d57c8154ae99c3793fd2748ed4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "patch": "@@ -204,7 +204,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         expected_substs: SubstsRef<'tcx>,\n         actual_substs: SubstsRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let span = cause.span(self.tcx());\n+        let span = cause.span();\n         let msg = format!(\n             \"implementation of `{}` is not general enough\",\n             self.tcx().def_path_str(trait_def_id),"}, {"sha": "95b6c4ce1f296085a59944675847c18be9f897e5", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "patch": "@@ -27,10 +27,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         if let Some(span) = self.tcx.hir().span_if_local(trait_item_def_id) {\n             let item_name = self.tcx.item_name(impl_item_def_id.to_def_id());\n-            err.span_label(\n-                span,\n-                format!(\"definition of `{}` from trait\", item_name),\n-            );\n+            err.span_label(span, format!(\"definition of `{}` from trait\", item_name));\n         }\n \n         err.span_label(error_span, format!(\"impl has extra requirement {}\", requirement));"}, {"sha": "d8cc7d3feb0d0df5a519e73348d60c5fce1e39e9", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> ObligationCause<'tcx> {\n         ObligationCause { span, body_id: hir::CRATE_HIR_ID, code: Default::default() }\n     }\n \n-    pub fn span(&self, _tcx: TyCtxt<'tcx>) -> Span {\n+    pub fn span(&self) -> Span {\n         match *self.code() {\n             ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                 arm_span,"}, {"sha": "81f5dcc45b93eab49dbbfba27c747d1b5bae2d04", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "patch": "@@ -603,7 +603,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         ),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n-                                obligation.cause.span(self.selcx.tcx()),\n+                                obligation.cause.span(),\n                                 \"ConstEquate: const_eval_resolve returned an unexpected error\"\n                             )\n                         }"}, {"sha": "32669e23db96b7674b220146cd3434bbd3005b20", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "patch": "@@ -84,7 +84,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         // Run canonical query. If overflow occurs, rerun from scratch but this time\n         // in standard trait query mode so that overflow is handled appropriately\n         // within `SelectionContext`.\n-        self.tcx.at(obligation.cause.span(self.tcx)).evaluate_obligation(c_pred)\n+        self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n     }\n \n     // Helper function that canonicalizes and runs the query. If an"}, {"sha": "fa2d2c751d929660c52526b21ebc960a176b8b07", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "patch": "@@ -742,7 +742,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         | (_, Err(ErrorHandled::Reported(_))) => Ok(EvaluatedToErr),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n-                                obligation.cause.span(self.tcx()),\n+                                obligation.cause.span(),\n                                 \"ConstEquate: const_eval_resolve returned an unexpected error\"\n                             )\n                         }"}, {"sha": "6020898dbe21c1933e06eca71e0b26325dcd21ab", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "patch": "@@ -298,7 +298,7 @@ fn compare_predicate_entailment<'tcx>(\n \n             let mut diag = struct_span_err!(\n                 tcx.sess,\n-                cause.span(tcx),\n+                cause.span(),\n                 E0053,\n                 \"method `{}` has an incompatible type for trait\",\n                 trait_m.name\n@@ -492,7 +492,7 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n         TypeError::ArgumentSorts(ExpectedFound { .. }, i) => {\n             (impl_args.nth(i).unwrap(), trait_args.and_then(|mut args| args.nth(i)))\n         }\n-        _ => (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id)),\n+        _ => (cause.span(), tcx.hir().span_if_local(trait_m.def_id)),\n     }\n }\n "}, {"sha": "e205eba44571f128a66d00a721d288efb3e77569", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "patch": "@@ -1838,7 +1838,7 @@ fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, mut span: Span, id: hir::HirI\n             if let Some(hir::Generics { predicates, .. }) =\n                 hir_node.and_then(|node| node.generics())\n             {\n-                let obligation_span = obligation.cause.span(fcx.tcx);\n+                let obligation_span = obligation.cause.span();\n \n                 span = predicates\n                     .iter()"}]}