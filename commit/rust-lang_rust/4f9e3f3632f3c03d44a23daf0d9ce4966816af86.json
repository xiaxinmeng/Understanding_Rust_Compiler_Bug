{"sha": "4f9e3f3632f3c03d44a23daf0d9ce4966816af86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOWUzZjM2MzJmM2MwM2Q0NGEyM2RhZjBkOWNlNDk2NjgxNmFmODY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T15:19:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T15:52:02Z"}, "message": "Fix typos", "tree": {"sha": "6cd908da2b3a48c395894b3505fdfda08d1be2b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd908da2b3a48c395894b3505fdfda08d1be2b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f9e3f3632f3c03d44a23daf0d9ce4966816af86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9e3f3632f3c03d44a23daf0d9ce4966816af86", "html_url": "https://github.com/rust-lang/rust/commit/4f9e3f3632f3c03d44a23daf0d9ce4966816af86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f9e3f3632f3c03d44a23daf0d9ce4966816af86/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8ce5b37b597679796b3ebc57afd55af49449b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8ce5b37b597679796b3ebc57afd55af49449b0", "html_url": "https://github.com/rust-lang/rust/commit/1b8ce5b37b597679796b3ebc57afd55af49449b0"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "17c7e691e28866832bd598cbec228e85a7042d1b", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9e3f3632f3c03d44a23daf0d9ce4966816af86/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9e3f3632f3c03d44a23daf0d9ce4966816af86/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4f9e3f3632f3c03d44a23daf0d9ce4966816af86", "patch": "@@ -226,10 +226,10 @@ where\n \n     /// Define a legacy textual scoped macro in module\n     ///\n-    /// We use a map `legacy_macros` to store all legacy textual scoped macros visable per module.\n+    /// We use a map `legacy_macros` to store all legacy textual scoped macros visible per module.\n     /// It will clone all macros from parent legacy scope, whose definition is prior to\n     /// the definition of current module.\n-    /// And also, `macro_use` on a module will import all legacy macros visable inside to\n+    /// And also, `macro_use` on a module will import all legacy macros visible inside to\n     /// current legacy scope, with possible shadowing.\n     fn define_legacy_macro(&mut self, module_id: LocalModuleId, name: Name, macro_: MacroDefId) {\n         // Always shadowing"}]}