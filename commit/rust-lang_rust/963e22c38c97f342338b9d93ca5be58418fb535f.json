{"sha": "963e22c38c97f342338b9d93ca5be58418fb535f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2M2UyMmMzOGM5N2YzNDIzMzhiOWQ5M2NhNWJlNTg0MThmYjUzNWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-05-08T19:58:42Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-05T20:09:32Z"}, "message": "added a few comments", "tree": {"sha": "b007c289012a9710863223ff717f3ae059bc87f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b007c289012a9710863223ff717f3ae059bc87f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/963e22c38c97f342338b9d93ca5be58418fb535f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/963e22c38c97f342338b9d93ca5be58418fb535f", "html_url": "https://github.com/rust-lang/rust/commit/963e22c38c97f342338b9d93ca5be58418fb535f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/963e22c38c97f342338b9d93ca5be58418fb535f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cdd7f8387bf1dc08bbd1c11abd83cb1f892e6cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdd7f8387bf1dc08bbd1c11abd83cb1f892e6cd", "html_url": "https://github.com/rust-lang/rust/commit/2cdd7f8387bf1dc08bbd1c11abd83cb1f892e6cd"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "92c5df72d8c161d2453cb98b9f349532b3a1fdb4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/963e22c38c97f342338b9d93ca5be58418fb535f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963e22c38c97f342338b9d93ca5be58418fb535f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=963e22c38c97f342338b9d93ca5be58418fb535f", "patch": "@@ -571,6 +571,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     /// Given the type/lifetime/const arguments provided to some path (along with\n     /// an implicit `Self`, if this is a trait reference), returns the complete\n     /// set of substitutions. This may involve applying defaulted type parameters.\n+    /// Also returns back constriants on associated types.\n     ///\n     /// Note that the type listing given here is *exactly* what the user provided.\n     fn create_substs_for_ast_path<'a>(&self,\n@@ -1091,6 +1092,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 }), binding.span));\n             }\n             ConvertedBindingKind::Constraint(ref ast_bounds) => {\n+                // \"Desugar\" a constraint like `T: Iterator<Item: Debug>` to\n+                //\n+                // `<T as Iterator>::Item: Debug`\n+                //\n                 // Calling `skip_binder` is okay, because the predicates are re-bound later by\n                 // `instantiate_poly_trait_ref`.\n                 let param_ty = tcx.mk_projection(assoc_ty.def_id, candidate.skip_binder().substs);"}]}