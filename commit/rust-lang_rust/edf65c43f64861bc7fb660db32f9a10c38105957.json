{"sha": "edf65c43f64861bc7fb660db32f9a10c38105957", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZjY1YzQzZjY0ODYxYmM3ZmI2NjBkYjMyZjlhMTBjMzgxMDU5NTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-16T23:36:13Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-18T12:24:57Z"}, "message": "ast: Document Item and ForeignItem", "tree": {"sha": "66e1fe4942236303057b2b6ddd8e585ae32812a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66e1fe4942236303057b2b6ddd8e585ae32812a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edf65c43f64861bc7fb660db32f9a10c38105957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edf65c43f64861bc7fb660db32f9a10c38105957", "html_url": "https://github.com/rust-lang/rust/commit/edf65c43f64861bc7fb660db32f9a10c38105957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edf65c43f64861bc7fb660db32f9a10c38105957/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084f3bcfd4e378d5c2b6daccda5c963c757c1bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/084f3bcfd4e378d5c2b6daccda5c963c757c1bc5", "html_url": "https://github.com/rust-lang/rust/commit/084f3bcfd4e378d5c2b6daccda5c963c757c1bc5"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "ccccc3bfb04ecb1441fa592ab738a21e1bf66f92", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/edf65c43f64861bc7fb660db32f9a10c38105957/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf65c43f64861bc7fb660db32f9a10c38105957/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=edf65c43f64861bc7fb660db32f9a10c38105957", "patch": "@@ -1476,9 +1476,9 @@ impl fmt::Display for Unsafety {\n \n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub enum ImplPolarity {\n-    /// impl Trait for Type\n+    /// `impl Trait for Type`\n     Positive,\n-    /// impl !Trait for Type\n+    /// `impl !Trait for Type`\n     Negative,\n }\n \n@@ -1494,10 +1494,10 @@ impl fmt::Debug for ImplPolarity {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum FunctionRetTy {\n-    /// Functions with return type ! that always\n+    /// Functions with return type `!`that always\n     /// raise an error or exit (i.e. never return to the caller)\n     NoReturn(Span),\n-    /// Return type is not specified. Functions default to () and\n+    /// Return type is not specified. Functions default to `()` and\n     /// closures default to inference. Span points to where return\n     /// type would be inserted.\n     DefaultReturn(Span),\n@@ -1553,7 +1553,9 @@ pub struct VariantArg {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum VariantKind {\n+    /// Tuple variant, e.g. `Foo(A, B)`\n     TupleVariantKind(Vec<VariantArg>),\n+    /// Struct variant, e.g. `Foo {x: A, y: B}`\n     StructVariantKind(P<StructDef>),\n }\n \n@@ -1568,6 +1570,7 @@ pub struct Variant_ {\n     pub attrs: Vec<Attribute>,\n     pub kind: VariantKind,\n     pub id: NodeId,\n+    /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n     pub vis: Visibility,\n }\n@@ -1718,6 +1721,9 @@ pub struct StructDef {\n   FIXME (#3300): Should allow items to be anonymous. Right now\n   we just use dummy names for anon items.\n  */\n+/// An item\n+///\n+/// The name might be a dummy name in case of anonymous items\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Item {\n     pub ident: Ident,\n@@ -1730,19 +1736,27 @@ pub struct Item {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Item_ {\n-    // Optional location (containing arbitrary characters) from which\n-    // to fetch the crate sources.\n-    // For example, extern crate whatever = \"github.com/rust-lang/rust\".\n+    /// An`extern crate` item, with optional original crate name,\n+    /// e.g. `extern crate foo` or `extern crate \"foo-bar\" as foo`\n     ItemExternCrate(Option<(InternedString, StrStyle)>),\n+    /// A `use` or `pub use` item\n     ItemUse(P<ViewPath>),\n \n+    /// A `static` item\n     ItemStatic(P<Ty>, Mutability, P<Expr>),\n+    /// A `const` item\n     ItemConst(P<Ty>, P<Expr>),\n+    /// A function declaration\n     ItemFn(P<FnDecl>, Unsafety, Abi, Generics, P<Block>),\n+    /// A module\n     ItemMod(Mod),\n+    /// An external module\n     ItemForeignMod(ForeignMod),\n+    /// A type alias, e.g. `type Foo = Bar<u8>`\n     ItemTy(P<Ty>, Generics),\n+    /// An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n     ItemEnum(EnumDef, Generics),\n+    /// A struct definition, e.g. `struct Foo<A> {x: A}`\n     ItemStruct(P<StructDef>, Generics),\n     /// Represents a Trait Declaration\n     ItemTrait(Unsafety,\n@@ -1751,8 +1765,9 @@ pub enum Item_ {\n               Vec<P<TraitItem>>),\n \n     // Default trait implementations\n-    // `impl Trait for ..`\n+    // `impl Trait for .. {}`\n     ItemDefaultImpl(Unsafety, TraitRef),\n+    /// An implementation, eg `impl<A> Trait for Foo { .. }`\n     ItemImpl(Unsafety,\n              ImplPolarity,\n              Generics,\n@@ -1794,10 +1809,13 @@ pub struct ForeignItem {\n     pub vis: Visibility,\n }\n \n+/// An item within an `extern` block\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ForeignItem_ {\n+    /// A foreign function\n     ForeignItemFn(P<FnDecl>, Generics),\n-    ForeignItemStatic(P<Ty>, /* is_mutbl */ bool),\n+    /// A foreign static item (`static ext: u8`), with optional mutability\n+    ForeignItemStatic(P<Ty>, bool),\n }\n \n impl ForeignItem_ {"}]}