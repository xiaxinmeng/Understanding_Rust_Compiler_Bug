{"sha": "2fcabf2dd7fb71617d9af078cc64245fc790823f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmY2FiZjJkZDdmYjcxNjE3ZDlhZjA3OGNjNjQyNDVmYzc5MDgyM2Y=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-08-10T02:14:06Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-08-16T19:21:16Z"}, "message": "look into extern prelude to provide sugestions", "tree": {"sha": "55103d44c5415b10f3ec22da89f39a5cf54818f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55103d44c5415b10f3ec22da89f39a5cf54818f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fcabf2dd7fb71617d9af078cc64245fc790823f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fcabf2dd7fb71617d9af078cc64245fc790823f", "html_url": "https://github.com/rust-lang/rust/commit/2fcabf2dd7fb71617d9af078cc64245fc790823f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fcabf2dd7fb71617d9af078cc64245fc790823f/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfbbe6d426f33439d9c5fb6d592bcde10953411f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbbe6d426f33439d9c5fb6d592bcde10953411f", "html_url": "https://github.com/rust-lang/rust/commit/bfbbe6d426f33439d9c5fb6d592bcde10953411f"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "a1338710b6b4bddc8169ee9356a44b89e01532af", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2fcabf2dd7fb71617d9af078cc64245fc790823f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcabf2dd7fb71617d9af078cc64245fc790823f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2fcabf2dd7fb71617d9af078cc64245fc790823f", "patch": "@@ -4331,9 +4331,29 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                           -> Vec<ImportSuggestion>\n         where FilterFn: Fn(Def) -> bool\n     {\n-        self.lookup_import_candidates_from_module(\n-            lookup_name, namespace, self.graph_root, true, filter_fn\n-        )\n+        let mut suggestions = vec![];\n+\n+        suggestions.extend(\n+            self.lookup_import_candidates_from_module(\n+                lookup_name, namespace, self.graph_root, keywords::Crate.name(), filter_fn\n+            )\n+        );\n+\n+        if self.session.features_untracked().extern_prelude {\n+            let extern_prelude_names = self.extern_prelude.clone();\n+            for &krate_name in extern_prelude_names.iter() {\n+                let krate_ident = Ident::with_empty_ctxt(krate_name);\n+                let external_prelude_module =  self.load_extern_prelude_crate_if_needed(krate_ident);\n+\n+                suggestions.extend(\n+                    self.lookup_import_candidates_from_module(\n+                        lookup_name, namespace, external_prelude_module, krate_name, filter_fn\n+                    )\n+                );\n+            }\n+        }\n+\n+        suggestions\n     }\n \n     fn find_module(&mut self,"}]}