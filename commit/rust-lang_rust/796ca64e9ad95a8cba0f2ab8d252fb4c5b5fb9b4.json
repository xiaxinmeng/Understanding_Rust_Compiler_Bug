{"sha": "796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NmNhNjRlOWFkOTVhOGNiYTBmMmFiOGQyNTJmYjRjNWI1ZmI5YjQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-10T19:39:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-14T13:14:51Z"}, "message": "Move traits::query::outlives_bounds::explicit_outlives_bounds to infer::outlives.", "tree": {"sha": "3629334feaf937a716e0a776072430802cf77066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3629334feaf937a716e0a776072430802cf77066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4", "html_url": "https://github.com/rust-lang/rust/commit/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98444ca53e8a589cd681fb2788fc37c4859d399c", "url": "https://api.github.com/repos/rust-lang/rust/commits/98444ca53e8a589cd681fb2788fc37c4859d399c", "html_url": "https://github.com/rust-lang/rust/commit/98444ca53e8a589cd681fb2788fc37c4859d399c"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "714108f88ecf6431d819da34b86bd160db91ca2e", "filename": "src/librustc_infer/infer/outlives/env.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fenv.rs?ref=796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4", "patch": "@@ -1,11 +1,13 @@\n use crate::infer::{GenericKind, InferCtxt};\n-use crate::traits::query::outlives_bounds::{self, OutlivesBound};\n+use crate::traits::query::OutlivesBound;\n use rustc::ty::free_region_map::FreeRegionMap;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_span::Span;\n \n+use super::explicit_outlives_bounds;\n+\n /// The `OutlivesEnvironment` collects information about what outlives\n /// what in a given type-checking setting. For example, if we have a\n /// where-clause like `where T: 'a` in scope, then the\n@@ -76,7 +78,7 @@ impl<'a, 'tcx> OutlivesEnvironment<'tcx> {\n             region_bound_pairs_accum: vec![],\n         };\n \n-        env.add_outlives_bounds(None, outlives_bounds::explicit_outlives_bounds(param_env));\n+        env.add_outlives_bounds(None, explicit_outlives_bounds(param_env));\n \n         env\n     }"}, {"sha": "75cf742de31a7a5f01f6e186dd22aef176219724", "filename": "src/librustc_infer/infer/outlives/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs?ref=796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4", "patch": "@@ -3,3 +3,25 @@\n pub mod env;\n pub mod obligations;\n pub mod verify;\n+\n+use rustc::traits::query::OutlivesBound;\n+use rustc::ty;\n+\n+pub fn explicit_outlives_bounds<'tcx>(\n+    param_env: ty::ParamEnv<'tcx>,\n+) -> impl Iterator<Item = OutlivesBound<'tcx>> + 'tcx {\n+    debug!(\"explicit_outlives_bounds()\");\n+    param_env.caller_bounds.into_iter().filter_map(move |predicate| match predicate {\n+        ty::Predicate::Projection(..)\n+        | ty::Predicate::Trait(..)\n+        | ty::Predicate::Subtype(..)\n+        | ty::Predicate::WellFormed(..)\n+        | ty::Predicate::ObjectSafe(..)\n+        | ty::Predicate::ClosureKind(..)\n+        | ty::Predicate::TypeOutlives(..)\n+        | ty::Predicate::ConstEvaluatable(..) => None,\n+        ty::Predicate::RegionOutlives(ref data) => data\n+            .no_bound_vars()\n+            .map(|ty::OutlivesPredicate(r_a, r_b)| OutlivesBound::RegionSubRegion(r_b, r_a)),\n+    })\n+}"}, {"sha": "9ce17bcec27325314a66311ccc5f9d66cc6aa580", "filename": "src/librustc_infer/traits/query/outlives_bounds.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4/src%2Flibrustc_infer%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4/src%2Flibrustc_infer%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4", "patch": "@@ -82,22 +82,3 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         result.value\n     }\n }\n-\n-pub fn explicit_outlives_bounds<'tcx>(\n-    param_env: ty::ParamEnv<'tcx>,\n-) -> impl Iterator<Item = OutlivesBound<'tcx>> + 'tcx {\n-    debug!(\"explicit_outlives_bounds()\");\n-    param_env.caller_bounds.into_iter().filter_map(move |predicate| match predicate {\n-        ty::Predicate::Projection(..)\n-        | ty::Predicate::Trait(..)\n-        | ty::Predicate::Subtype(..)\n-        | ty::Predicate::WellFormed(..)\n-        | ty::Predicate::ObjectSafe(..)\n-        | ty::Predicate::ClosureKind(..)\n-        | ty::Predicate::TypeOutlives(..)\n-        | ty::Predicate::ConstEvaluatable(..) => None,\n-        ty::Predicate::RegionOutlives(ref data) => data\n-            .no_bound_vars()\n-            .map(|ty::OutlivesPredicate(r_a, r_b)| OutlivesBound::RegionSubRegion(r_b, r_a)),\n-    })\n-}"}, {"sha": "283d78062f361f8a93b8f49449004afe4a2ace9a", "filename": "src/librustc_mir/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=796ca64e9ad95a8cba0f2ab8d252fb4c5b5fb9b4", "patch": "@@ -1,11 +1,12 @@\n use rustc::mir::ConstraintCategory;\n+use rustc::traits::query::OutlivesBound;\n use rustc::ty::free_region_map::FreeRegionRelations;\n use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n+use rustc_infer::infer::outlives;\n use rustc_infer::infer::region_constraints::GenericKind;\n use rustc_infer::infer::InferCtxt;\n-use rustc_infer::traits::query::outlives_bounds::{self, OutlivesBound};\n use rustc_infer::traits::query::type_op::{self, TypeOp};\n use rustc_span::DUMMY_SP;\n use std::rc::Rc;\n@@ -266,7 +267,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n \n         // Insert the facts we know from the predicates. Why? Why not.\n         let param_env = self.param_env;\n-        self.add_outlives_bounds(outlives_bounds::explicit_outlives_bounds(param_env));\n+        self.add_outlives_bounds(outlives::explicit_outlives_bounds(param_env));\n \n         // Finally:\n         // - outlives is reflexive, so `'r: 'r` for every region `'r`"}]}