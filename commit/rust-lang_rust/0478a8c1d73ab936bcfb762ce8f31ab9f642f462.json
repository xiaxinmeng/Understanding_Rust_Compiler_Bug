{"sha": "0478a8c1d73ab936bcfb762ce8f31ab9f642f462", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NzhhOGMxZDczYWI5MzZiY2ZiNzYyY2U4ZjMxYWI5ZjY0MmY0NjI=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2015-01-10T09:14:38Z"}, "committer": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-01-19T13:22:16Z"}, "message": "add unit test for non string/numeric map keys", "tree": {"sha": "5e8ce5a7166be8b47fd20ff3223b0fc54eedab31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e8ce5a7166be8b47fd20ff3223b0fc54eedab31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0478a8c1d73ab936bcfb762ce8f31ab9f642f462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0478a8c1d73ab936bcfb762ce8f31ab9f642f462", "html_url": "https://github.com/rust-lang/rust/commit/0478a8c1d73ab936bcfb762ce8f31ab9f642f462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0478a8c1d73ab936bcfb762ce8f31ab9f642f462/comments", "author": null, "committer": null, "parents": [{"sha": "d727f9910729625039defffd4058b907ca984bb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d727f9910729625039defffd4058b907ca984bb9", "html_url": "https://github.com/rust-lang/rust/commit/d727f9910729625039defffd4058b907ca984bb9"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "0364d9544b1aaf52be0fd9958b798ef335d6a790", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0478a8c1d73ab936bcfb762ce8f31ab9f642f462/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0478a8c1d73ab936bcfb762ce8f31ab9f642f462/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=0478a8c1d73ab936bcfb762ce8f31ab9f642f462", "patch": "@@ -2583,7 +2583,7 @@ mod tests {\n     use super::DecoderError::*;\n     use super::JsonEvent::*;\n     use super::{Json, from_str, DecodeResult, DecoderError, JsonEvent, Parser,\n-                StackElement, Stack, Decoder};\n+                StackElement, Stack, Decoder, Encoder, EncoderError};\n     use std::{i64, u64, f32, f64, io};\n     use std::collections::BTreeMap;\n     use std::num::Float;\n@@ -3892,6 +3892,25 @@ mod tests {\n         assert_eq!(None::<int>.to_json(), Null);\n     }\n \n+    #[test]\n+    fn test_encode_hashmap_with_arbitrary_key() {\n+        use std::str::from_utf8;\n+        use std::io::Writer;\n+        use std::collections::HashMap;\n+        use std::fmt;\n+        #[derive(PartialEq, Eq, Hash, RustcEncodable)]\n+        struct ArbitraryType(uint);\n+        let mut hm: HashMap<ArbitraryType, bool> = HashMap::new();\n+        hm.insert(ArbitraryType(1), true);\n+        let mut mem_buf = Vec::new();\n+        let mut encoder = Encoder::new(&mut mem_buf as &mut fmt::Writer);\n+        let result = hm.encode(&mut encoder);\n+        match result.unwrap_err() {\n+            EncoderError::BadHashmapKey => (),\n+            _ => panic!(\"expected bad hash map key\")\n+        }\n+    }\n+\n     #[bench]\n     fn bench_streaming_small(b: &mut Bencher) {\n         b.iter( || {"}]}