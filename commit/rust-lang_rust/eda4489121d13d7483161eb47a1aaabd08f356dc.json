{"sha": "eda4489121d13d7483161eb47a1aaabd08f356dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYTQ0ODkxMjFkMTNkNzQ4MzE2MWViNDdhMWFhYWJkMDhmMzU2ZGM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-24T19:10:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-24T19:10:16Z"}, "message": "Rollup merge of #69433 - matthiaskrgr:bool_cmp, r=eddyb\n\ndon't explicitly compare against true or false", "tree": {"sha": "289c0df9f7ea53427ffd838c273103ce4c5f8612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289c0df9f7ea53427ffd838c273103ce4c5f8612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eda4489121d13d7483161eb47a1aaabd08f356dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVB+YCRBK7hj4Ov3rIwAAdHIIAHmo71YWAbrdhzjK7CR5gXQd\nER4ACRt/J1MTfriQX1XAlg35iYBt/nSvC//SxtN5XUml9u07okC1jEF7v2zh7AVi\n+1tcNGyy3I7RFB932HWUl/GRv/3PC9hp4oSZVRc74R/qzSfdW6y8yU9KT59O04ya\nSUIbeOSAElXB0xugYCMEufOiVYSd+UNNOH9H72pZQZIxRH/KHVz0Dw4KYVwXDF7U\nxAACEU1E0TtrI64wcDss9f5/ZqM7D5rAXslyCfO5CwcHte/ElKmfzlzKP5zZuf0c\nAHv4POcY86/6wGLaRE8PBW6bvgTnRAjG+eCCi67wU7Op1CTdQ/kR0JM/P6Vt9Zs=\n=rIRg\n-----END PGP SIGNATURE-----\n", "payload": "tree 289c0df9f7ea53427ffd838c273103ce4c5f8612\nparent cfed378da225b3cced2b1b1d190e4bf77096ff54\nparent addd7426bef5342fb7a46756dcf2cb03eb39c739\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582571416 +0100\ncommitter GitHub <noreply@github.com> 1582571416 +0100\n\nRollup merge of #69433 - matthiaskrgr:bool_cmp, r=eddyb\n\ndon't explicitly compare against true or false\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eda4489121d13d7483161eb47a1aaabd08f356dc", "html_url": "https://github.com/rust-lang/rust/commit/eda4489121d13d7483161eb47a1aaabd08f356dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eda4489121d13d7483161eb47a1aaabd08f356dc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfed378da225b3cced2b1b1d190e4bf77096ff54", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfed378da225b3cced2b1b1d190e4bf77096ff54", "html_url": "https://github.com/rust-lang/rust/commit/cfed378da225b3cced2b1b1d190e4bf77096ff54"}, {"sha": "addd7426bef5342fb7a46756dcf2cb03eb39c739", "url": "https://api.github.com/repos/rust-lang/rust/commits/addd7426bef5342fb7a46756dcf2cb03eb39c739", "html_url": "https://github.com/rust-lang/rust/commit/addd7426bef5342fb7a46756dcf2cb03eb39c739"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "052603f6e5e60092f641ec6a348f658eea943e3e", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=eda4489121d13d7483161eb47a1aaabd08f356dc", "patch": "@@ -598,7 +598,7 @@ impl AllocationDefinedness {\n     pub fn all_bytes_undef(&self) -> bool {\n         // The `ranges` are run-length encoded and of alternating definedness.\n         // So if `ranges.len() > 1` then the second block is a range of defined.\n-        self.initial == false && self.ranges.len() == 1\n+        !self.initial && self.ranges.len() == 1\n     }\n }\n "}, {"sha": "0eb567da10356f88bf276416074ae4f8da3fcb1d", "filename": "src/librustc_mir/dataflow/generic/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs?ref=eda4489121d13d7483161eb47a1aaabd08f356dc", "patch": "@@ -104,7 +104,7 @@ where\n     ) -> Self {\n         let bits_per_block = analysis.bits_per_block(body);\n \n-        let bottom_value_set = if A::BOTTOM_VALUE == true {\n+        let bottom_value_set = if A::BOTTOM_VALUE {\n             BitSet::new_filled(bits_per_block)\n         } else {\n             BitSet::new_empty(bits_per_block)"}, {"sha": "eccdac2fb9987b5dbc5d0f0f994bff909fd5380e", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=eda4489121d13d7483161eb47a1aaabd08f356dc", "patch": "@@ -821,7 +821,7 @@ where\n         let bits_per_block = denotation.bits_per_block();\n         let num_blocks = body.basic_blocks().len();\n \n-        let on_entry = if D::BOTTOM_VALUE == true {\n+        let on_entry = if D::BOTTOM_VALUE {\n             vec![BitSet::new_filled(bits_per_block); num_blocks]\n         } else {\n             vec![BitSet::new_empty(bits_per_block); num_blocks]"}, {"sha": "5b2e5a9e454eafadad109ca74440cf7eb30d8c79", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=eda4489121d13d7483161eb47a1aaabd08f356dc", "patch": "@@ -1171,13 +1171,13 @@ impl<'a> Parser<'a> {\n                 let comma_after_doc_seen = self.eat(&token::Comma);\n                 // `seen_comma` is always false, because we are inside doc block\n                 // condition is here to make code more readable\n-                if seen_comma == false && comma_after_doc_seen == true {\n+                if !seen_comma && comma_after_doc_seen {\n                     seen_comma = true;\n                 }\n                 if comma_after_doc_seen || self.token == token::CloseDelim(token::Brace) {\n                     err.emit();\n                 } else {\n-                    if seen_comma == false {\n+                    if !seen_comma {\n                         let sp = self.sess.source_map().next_point(previous_span);\n                         err.span_suggestion(\n                             sp,"}, {"sha": "fa1dc3f450a4b407b5d8b034a0e4809d794a45ef", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=eda4489121d13d7483161eb47a1aaabd08f356dc", "patch": "@@ -444,7 +444,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 PathSource::Expr(Some(parent)) => {\n                     suggested = path_sep(err, &parent);\n                 }\n-                PathSource::Expr(None) if followed_by_brace == true => {\n+                PathSource::Expr(None) if followed_by_brace => {\n                     if let Some((sp, snippet)) = closing_brace {\n                         err.span_suggestion(\n                             sp,"}, {"sha": "cb6e028ab86ca2581c78dfdb1cf86f57ecae3599", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=eda4489121d13d7483161eb47a1aaabd08f356dc", "patch": "@@ -495,7 +495,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(hir_id) => hir_id,\n                 None => return false,\n             };\n-            if self.tcx.has_typeck_tables(def_id) == false {\n+            if !self.tcx.has_typeck_tables(def_id) {\n                 return false;\n             }\n             let fn_sig = {\n@@ -512,7 +512,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Some(hir_id) => hir_id,\n                     None => return false,\n                 };\n-                if self.tcx.has_typeck_tables(def_id) == false {\n+                if !self.tcx.has_typeck_tables(def_id) {\n                     return false;\n                 }\n                 match self.tcx.typeck_tables_of(def_id).liberated_fn_sigs().get(hir_id) {"}, {"sha": "56f7b07cfc843f6d96b3c35ecd6816322bcb2afa", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=eda4489121d13d7483161eb47a1aaabd08f356dc", "patch": "@@ -465,7 +465,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n                 }\n                 _ => true,\n             };\n-            return if is_allowed_tag == false {\n+            return if !is_allowed_tag {\n                 if is_start {\n                     Some(Event::Start(Tag::Paragraph))\n                 } else {\n@@ -671,7 +671,7 @@ impl LangString {\n                 \"\" => {}\n                 \"should_panic\" => {\n                     data.should_panic = true;\n-                    seen_rust_tags = seen_other_tags == false;\n+                    seen_rust_tags = !seen_other_tags;\n                 }\n                 \"no_run\" => {\n                     data.no_run = true;"}, {"sha": "bda220d88063549272442ef26b36da49ed78fee9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=eda4489121d13d7483161eb47a1aaabd08f356dc", "patch": "@@ -4049,7 +4049,7 @@ fn get_next_url(used_links: &mut FxHashSet<String>, url: String) -> String {\n         return url;\n     }\n     let mut add = 1;\n-    while used_links.insert(format!(\"{}-{}\", url, add)) == false {\n+    while !used_links.insert(format!(\"{}-{}\", url, add)) {\n         add += 1;\n     }\n     format!(\"{}-{}\", url, add)"}, {"sha": "71cff637c12727f0cd5152b4413021190f355cf4", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=eda4489121d13d7483161eb47a1aaabd08f356dc", "patch": "@@ -340,12 +340,12 @@ pub fn look_for_tests<'tcx>(\n \n     find_testable_code(&dox, &mut tests, ErrorCodes::No, false);\n \n-    if check_missing_code == true && tests.found_tests == 0 {\n+    if check_missing_code && tests.found_tests == 0 {\n         let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n         cx.tcx.struct_span_lint_hir(lint::builtin::MISSING_DOC_CODE_EXAMPLES, hir_id, sp, |lint| {\n             lint.build(\"missing code example in this documentation\").emit()\n         });\n-    } else if check_missing_code == false\n+    } else if !check_missing_code\n         && tests.found_tests > 0\n         && !cx.renderinfo.borrow().access_levels.is_public(item.def_id)\n     {"}, {"sha": "620f9f56a6ae8881ae50d3a674dade1807497adb", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda4489121d13d7483161eb47a1aaabd08f356dc/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=eda4489121d13d7483161eb47a1aaabd08f356dc", "patch": "@@ -253,9 +253,9 @@ pub fn get_differences(against: &CssPath, other: &CssPath, v: &mut Vec<String>)\n                     break;\n                 }\n             }\n-            if found == false {\n+            if !found {\n                 v.push(format!(\"  Missing \\\"{}\\\" rule\", child.name));\n-            } else if found_working == false {\n+            } else if !found_working {\n                 v.extend(tmp.iter().cloned());\n             }\n         }"}]}