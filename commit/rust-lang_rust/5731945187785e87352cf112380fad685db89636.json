{"sha": "5731945187785e87352cf112380fad685db89636", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MzE5NDUxODc3ODVlODczNTJjZjExMjM4MGZhZDY4NWRiODk2MzY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-08T08:29:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-08T08:29:22Z"}, "message": "Apply suggestions from code review\r\n\r\ntypos\n\nCo-Authored-By: RalfJung <post@ralfj.de>", "tree": {"sha": "7f4601efc663c73879aabfc5909f42d366fae295", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f4601efc663c73879aabfc5909f42d366fae295"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5731945187785e87352cf112380fad685db89636", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcqwZiCRBK7hj4Ov3rIwAAdHIIAAJWjCtFBqHLzvqrAJmviYqG\n+Ykt/BCRAwrW/EEh0QigupQACawpJ6Oh74dhY/GSqQ+dOHk9yxU0kdK5QcHE5B3p\no5hE1mv/zR2n9OoEv7YPDTijmvzZFnn2AhNXV+9RcIdz9apK+WXkrVMZCwm3nqbB\nTUL6fzDZMtJmd8Y17wcuI60DKzQiSPZ3KnnrUwp+6dq5AatMLaM49+qBwBMmSTGT\nWPgFwXCfPtngERvIcRhw3I+BuNGtLB5doJErOVSbHeUBb6TLvvT69GCJ7Q31RGQ5\ntkC67W3IRSFTRiLkjA/H/cjG4romn7dLBnxSSf1kVPUTkHFz8xBh+uRi9lmuxa4=\n=Slod\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f4601efc663c73879aabfc5909f42d366fae295\nparent b00fd57075263f928a59b0d375f004427077c53a\nauthor Ralf Jung <post@ralfj.de> 1554712162 +0200\ncommitter GitHub <noreply@github.com> 1554712162 +0200\n\nApply suggestions from code review\r\n\r\ntypos\n\nCo-Authored-By: RalfJung <post@ralfj.de>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5731945187785e87352cf112380fad685db89636", "html_url": "https://github.com/rust-lang/rust/commit/5731945187785e87352cf112380fad685db89636", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5731945187785e87352cf112380fad685db89636/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b00fd57075263f928a59b0d375f004427077c53a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b00fd57075263f928a59b0d375f004427077c53a", "html_url": "https://github.com/rust-lang/rust/commit/b00fd57075263f928a59b0d375f004427077c53a"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "048d51acaf2a22c193be99587b76bd1f7333c14b", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5731945187785e87352cf112380fad685db89636/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5731945187785e87352cf112380fad685db89636/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=5731945187785e87352cf112380fad685db89636", "patch": "@@ -910,7 +910,7 @@ where\n     /// create such an allocation.\n     /// This is essentially `force_to_memplace`.\n     ///\n-    /// This supports unsized types and returnes the computed size to avoid some\n+    /// This supports unsized types and returns the computed size to avoid some\n     /// redundant computation when copying; use `force_allocation` for a simpler, sized-only\n     /// version.\n     pub fn force_allocation_maybe_sized("}, {"sha": "d76d3a3301620a61f52fa8dbf05dd5d81bcde04b", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5731945187785e87352cf112380fad685db89636/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5731945187785e87352cf112380fad685db89636/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=5731945187785e87352cf112380fad685db89636", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n \n         for (i, method) in methods.iter().enumerate() {\n             if let Some((def_id, substs)) = *method {\n-                // resolve for vtable: insert thims where needed\n+                // resolve for vtable: insert shims where needed\n                 let substs = self.subst_and_normalize_erasing_regions(substs)?;\n                 let instance = ty::Instance::resolve_for_vtable(\n                     *self.tcx,"}]}