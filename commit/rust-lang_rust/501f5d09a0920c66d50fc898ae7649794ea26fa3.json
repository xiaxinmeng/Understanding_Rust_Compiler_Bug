{"sha": "501f5d09a0920c66d50fc898ae7649794ea26fa3", "node_id": "C_kwDOAAsO6NoAKDUwMWY1ZDA5YTA5MjBjNjZkNTBmYzg5OGFlNzY0OTc5NGVhMjZmYTM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-17T15:32:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-17T15:32:36Z"}, "message": "interpret/validity: reject references to uninhabited types", "tree": {"sha": "d0ba72e0fa0fa2976b81974d2151cdaf64e69c7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ba72e0fa0fa2976b81974d2151cdaf64e69c7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/501f5d09a0920c66d50fc898ae7649794ea26fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/501f5d09a0920c66d50fc898ae7649794ea26fa3", "html_url": "https://github.com/rust-lang/rust/commit/501f5d09a0920c66d50fc898ae7649794ea26fa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/501f5d09a0920c66d50fc898ae7649794ea26fa3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "735efc0c703812343a5e5d19b600dac73b8a89f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/735efc0c703812343a5e5d19b600dac73b8a89f0", "html_url": "https://github.com/rust-lang/rust/commit/735efc0c703812343a5e5d19b600dac73b8a89f0"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "8770ed956e61f99ceee6929bb3df87c9c89ac541", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/501f5d09a0920c66d50fc898ae7649794ea26fa3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501f5d09a0920c66d50fc898ae7649794ea26fa3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=501f5d09a0920c66d50fc898ae7649794ea26fa3", "patch": "@@ -412,22 +412,27 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             self.path,\n             err_ub!(AlignmentCheckFailed { required, has }) =>\n                 {\n-                    \"an unaligned {} (required {} byte alignment but found {})\",\n-                    kind,\n+                    \"an unaligned {kind} (required {} byte alignment but found {})\",\n                     required.bytes(),\n                     has.bytes()\n                 },\n             err_ub!(DanglingIntPointer(0, _)) =>\n-                { \"a null {}\", kind },\n+                { \"a null {kind}\" },\n             err_ub!(DanglingIntPointer(i, _)) =>\n-                { \"a dangling {} (address 0x{:x} is unallocated)\", kind, i },\n+                { \"a dangling {kind} (address 0x{i:x} is unallocated)\" },\n             err_ub!(PointerOutOfBounds { .. }) =>\n-                { \"a dangling {} (going beyond the bounds of its allocation)\", kind },\n+                { \"a dangling {kind} (going beyond the bounds of its allocation)\" },\n             // This cannot happen during const-eval (because interning already detects\n             // dangling pointers), but it can happen in Miri.\n             err_ub!(PointerUseAfterFree(..)) =>\n-                { \"a dangling {} (use-after-free)\", kind },\n+                { \"a dangling {kind} (use-after-free)\" },\n         );\n+        // Do not allow pointers to uninhabited types.\n+        if place.layout.abi.is_uninhabited() {\n+            throw_validation_failure!(self.path,\n+                { \"a {kind} pointing to uninhabited type {}\", place.layout.ty }\n+            )\n+        }\n         // Recursive checking\n         if let Some(ref mut ref_tracking) = self.ref_tracking {\n             // Proceed recursively even for ZST, no reason to skip them!"}, {"sha": "473497501113ceaa74e25740b651fe1c150bff6c", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501f5d09a0920c66d50fc898ae7649794ea26fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/501f5d09a0920c66d50fc898ae7649794ea26fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr?ref=501f5d09a0920c66d50fc898ae7649794ea26fa3", "patch": "@@ -11,7 +11,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:18:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a value of uninhabited type Bar\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "c5a71e5be51b663cbb56953bced96032c81bb096", "filename": "src/test/ui/consts/validate_never_arrays.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501f5d09a0920c66d50fc898ae7649794ea26fa3/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/501f5d09a0920c66d50fc898ae7649794ea26fa3/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr?ref=501f5d09a0920c66d50fc898ae7649794ea26fa3", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:4:1\n    |\n LL | const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>[0]: encountered a value of the never type `!`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to uninhabited type [!; 1]\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}]}