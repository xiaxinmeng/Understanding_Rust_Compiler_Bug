{"sha": "add8f9680e2214c0e44978f1c24a62bd342d9a18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZDhmOTY4MGUyMjE0YzBlNDQ5NzhmMWMyNGE2MmJkMzQyZDlhMTg=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-12-23T13:46:54Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-01-21T19:45:08Z"}, "message": "[std::vec] Rename .head_opt() to .head(), drop the old .head() behavior", "tree": {"sha": "93288ac675b736eba7e2727e44e3596b4fc77c2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93288ac675b736eba7e2727e44e3596b4fc77c2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/add8f9680e2214c0e44978f1c24a62bd342d9a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/add8f9680e2214c0e44978f1c24a62bd342d9a18", "html_url": "https://github.com/rust-lang/rust/commit/add8f9680e2214c0e44978f1c24a62bd342d9a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/add8f9680e2214c0e44978f1c24a62bd342d9a18/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d25334d63a206dc9f7465119be983929782a124a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d25334d63a206dc9f7465119be983929782a124a", "html_url": "https://github.com/rust-lang/rust/commit/d25334d63a206dc9f7465119be983929782a124a"}], "stats": {"total": 35, "additions": 6, "deletions": 29}, "files": [{"sha": "ff029565cf1a49d018fa536c4f46d0a6e2dba3da", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/add8f9680e2214c0e44978f1c24a62bd342d9a18/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add8f9680e2214c0e44978f1c24a62bd342d9a18/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=add8f9680e2214c0e44978f1c24a62bd342d9a18", "patch": "@@ -666,7 +666,7 @@ impl<'a> Iterator<char> for Normalizations<'a> {\n     fn next(&mut self) -> Option<char> {\n         use unicode::decompose::canonical_combining_class;\n \n-        match self.buffer.head_opt() {\n+        match self.buffer.head() {\n             Some(&(c, 0)) => {\n                 self.sorted = false;\n                 self.buffer.shift();"}, {"sha": "983d2def7b564c2806b0e9d20ad70067850836ed", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/add8f9680e2214c0e44978f1c24a62bd342d9a18/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add8f9680e2214c0e44978f1c24a62bd342d9a18/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=add8f9680e2214c0e44978f1c24a62bd342d9a18", "patch": "@@ -942,10 +942,8 @@ pub trait ImmutableVector<'a, T> {\n     /// Returns the element of a vector at the given index, or `None` if the\n     /// index is out of bounds\n     fn get(&self, index: uint) -> Option<&'a T>;\n-    /// Returns the first element of a vector, failing if the vector is empty.\n-    fn head(&self) -> &'a T;\n     /// Returns the first element of a vector, or `None` if it is empty\n-    fn head_opt(&self) -> Option<&'a T>;\n+    fn head(&self) -> Option<&'a T>;\n     /// Returns all but the first element of a vector\n     fn tail(&self) -> &'a [T];\n     /// Returns all but the first `n' elements of a vector\n@@ -1123,13 +1121,7 @@ impl<'a,T> ImmutableVector<'a, T> for &'a [T] {\n     }\n \n     #[inline]\n-    fn head(&self) -> &'a T {\n-        if self.len() == 0 { fail!(\"head: empty vector\") }\n-        &self[0]\n-    }\n-\n-    #[inline]\n-    fn head_opt(&self) -> Option<&'a T> {\n+    fn head(&self) -> Option<&'a T> {\n         if self.len() == 0 { None } else { Some(&self[0]) }\n     }\n \n@@ -3054,27 +3046,12 @@ mod tests {\n \n     #[test]\n     fn test_head() {\n-        let mut a = ~[11];\n-        assert_eq!(a.head(), &11);\n-        a = ~[11, 12];\n-        assert_eq!(a.head(), &11);\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    fn test_head_empty() {\n-        let a: ~[int] = ~[];\n-        a.head();\n-    }\n-\n-    #[test]\n-    fn test_head_opt() {\n         let mut a = ~[];\n-        assert_eq!(a.head_opt(), None);\n+        assert_eq!(a.head(), None);\n         a = ~[11];\n-        assert_eq!(a.head_opt().unwrap(), &11);\n+        assert_eq!(a.head().unwrap(), &11);\n         a = ~[11, 12];\n-        assert_eq!(a.head_opt().unwrap(), &11);\n+        assert_eq!(a.head().unwrap(), &11);\n     }\n \n     #[test]"}]}