{"sha": "226ab7fd759d94e81d6831f869e41502a7f183c7", "node_id": "C_kwDOAAsO6NoAKDIyNmFiN2ZkNzU5ZDk0ZTgxZDY4MzFmODY5ZTQxNTAyYTdmMTgzYzc", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2023-01-02T20:15:45Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2023-01-03T14:54:46Z"}, "message": "jsondoclint: Add option to dump errors as json.\n\nThe output looks like:\n{\n  \"errors\": [\n    {\n      \"id\": \"2:2017:1833\",\n      \"kind\": {\n        \"NotFound\": [\n          [\n            {\"Field\": \"index\"},\n            {\"Field\": \"0:0:1571\"},\n            {\"Field\": \"links\"},\n            {\"Field\": \"pointer::read\"}\n          ]\n        ]\n      }\n    }\n  ],\n  \"path\": \"/home/nixon/dev/rust/rust/build/x86_64-unknown-linux-gnu/test/rustdoc-json/intra-doc-links/pointer_method/pointer_method.json\"\n}", "tree": {"sha": "607d51cb6f5cb9883068c5a2834153dd7a30dee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/607d51cb6f5cb9883068c5a2834153dd7a30dee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/226ab7fd759d94e81d6831f869e41502a7f183c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/226ab7fd759d94e81d6831f869e41502a7f183c7", "html_url": "https://github.com/rust-lang/rust/commit/226ab7fd759d94e81d6831f869e41502a7f183c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/226ab7fd759d94e81d6831f869e41502a7f183c7/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95329080d317f01f22ddce1dec8be693ef4b29f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/95329080d317f01f22ddce1dec8be693ef4b29f4", "html_url": "https://github.com/rust-lang/rust/commit/95329080d317f01f22ddce1dec8be693ef4b29f4"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "bb438f288f2e91d1d3f4424c28c7e33f64d6db5a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/226ab7fd759d94e81d6831f869e41502a7f183c7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/226ab7fd759d94e81d6831f869e41502a7f183c7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=226ab7fd759d94e81d6831f869e41502a7f183c7", "patch": "@@ -2115,6 +2115,7 @@ dependencies = [\n  \"clap 4.0.15\",\n  \"fs-err\",\n  \"rustdoc-json-types\",\n+ \"serde\",\n  \"serde_json\",\n ]\n "}, {"sha": "8990310a4f474073ad3233a3d5d99773c21c4458", "filename": "src/tools/jsondoclint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/226ab7fd759d94e81d6831f869e41502a7f183c7/src%2Ftools%2Fjsondoclint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/226ab7fd759d94e81d6831f869e41502a7f183c7/src%2Ftools%2Fjsondoclint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2FCargo.toml?ref=226ab7fd759d94e81d6831f869e41502a7f183c7", "patch": "@@ -10,4 +10,5 @@ anyhow = \"1.0.62\"\n clap = { version = \"4.0.15\", features = [\"derive\"] }\n fs-err = \"2.8.1\"\n rustdoc-json-types = { version = \"0.1.0\", path = \"../../rustdoc-json-types\" }\n+serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.85\""}, {"sha": "a183c4068ce85af48f175517fbd9ae56896ef1f2", "filename": "src/tools/jsondoclint/src/json_find.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/226ab7fd759d94e81d6831f869e41502a7f183c7/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226ab7fd759d94e81d6831f869e41502a7f183c7/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs?ref=226ab7fd759d94e81d6831f869e41502a7f183c7", "patch": "@@ -1,8 +1,9 @@\n use std::fmt::Write;\n \n+use serde::Serialize;\n use serde_json::Value;\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Serialize)]\n pub enum SelectorPart {\n     Field(String),\n     Index(usize),"}, {"sha": "05e938f4f7df4f906afcb73ac7cdb757c8c33c10", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/226ab7fd759d94e81d6831f869e41502a7f183c7/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226ab7fd759d94e81d6831f869e41502a7f183c7/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=226ab7fd759d94e81d6831f869e41502a7f183c7", "patch": "@@ -1,25 +1,34 @@\n+use std::io::{BufWriter, Write};\n+\n use anyhow::{bail, Result};\n use clap::Parser;\n use fs_err as fs;\n use rustdoc_json_types::{Crate, Id, FORMAT_VERSION};\n+use serde::Serialize;\n use serde_json::Value;\n \n pub(crate) mod item_kind;\n mod json_find;\n mod validator;\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Serialize, Clone)]\n struct Error {\n     kind: ErrorKind,\n     id: Id,\n }\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Serialize, Clone)]\n enum ErrorKind {\n     NotFound(Vec<json_find::Selector>),\n     Custom(String),\n }\n \n+#[derive(Debug, Serialize)]\n+struct JsonOutput {\n+    path: String,\n+    errors: Vec<Error>,\n+}\n+\n #[derive(Parser)]\n struct Cli {\n     /// The path to the json file to be linted\n@@ -28,10 +37,13 @@ struct Cli {\n     /// Show verbose output\n     #[arg(long)]\n     verbose: bool,\n+\n+    #[arg(long)]\n+    json_output: Option<String>,\n }\n \n fn main() -> Result<()> {\n-    let Cli { path, verbose } = Cli::parse();\n+    let Cli { path, verbose, json_output } = Cli::parse();\n \n     let contents = fs::read_to_string(&path)?;\n     let krate: Crate = serde_json::from_str(&contents)?;\n@@ -42,6 +54,13 @@ fn main() -> Result<()> {\n     let mut validator = validator::Validator::new(&krate, krate_json);\n     validator.check_crate();\n \n+    if let Some(json_output) = json_output {\n+        let output = JsonOutput { path: path.clone(), errors: validator.errs.clone() };\n+        let mut f = BufWriter::new(fs::File::create(json_output)?);\n+        serde_json::to_writer(&mut f, &output)?;\n+        f.flush()?;\n+    }\n+\n     if !validator.errs.is_empty() {\n         for err in validator.errs {\n             match err.kind {"}]}