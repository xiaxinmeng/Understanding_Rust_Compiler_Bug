{"sha": "e16d71b706e54b3f21305b2042635b94a69b879e", "node_id": "C_kwDOAAsO6NoAKGUxNmQ3MWI3MDZlNTRiM2YyMTMwNWIyMDQyNjM1Yjk0YTY5Yjg3OWU", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-16T03:25:25Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-16T16:09:14Z"}, "message": "format `Const`'s less verbosely", "tree": {"sha": "2a499a42f8f955c61e53a737bdd996005bc7c9f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a499a42f8f955c61e53a737bdd996005bc7c9f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e16d71b706e54b3f21305b2042635b94a69b879e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e16d71b706e54b3f21305b2042635b94a69b879e", "html_url": "https://github.com/rust-lang/rust/commit/e16d71b706e54b3f21305b2042635b94a69b879e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e16d71b706e54b3f21305b2042635b94a69b879e/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9239760da89cd8e9a51536beeb0a23762064037d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9239760da89cd8e9a51536beeb0a23762064037d", "html_url": "https://github.com/rust-lang/rust/commit/9239760da89cd8e9a51536beeb0a23762064037d"}], "stats": {"total": 112, "additions": 71, "deletions": 41}, "files": [{"sha": "1a4bd14815f93460e1e6917573ae8b00df86a5d9", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e16d71b706e54b3f21305b2042635b94a69b879e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16d71b706e54b3f21305b2042635b94a69b879e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=e16d71b706e54b3f21305b2042635b94a69b879e", "patch": "@@ -6,7 +6,6 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LocalDefId;\n use rustc_macros::HashStable;\n-use std::fmt;\n \n mod int;\n mod kind;\n@@ -21,15 +20,6 @@ pub use valtree::*;\n #[rustc_pass_by_value]\n pub struct Const<'tcx>(pub(super) Interned<'tcx, ConstData<'tcx>>);\n \n-impl<'tcx> fmt::Debug for Const<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // This reflects what `Const` looked liked before `Interned` was\n-        // introduced. We print it like this to avoid having to update expected\n-        // output in a lot of tests.\n-        write!(f, \"Const {{ ty: {:?}, kind: {:?} }}\", self.ty(), self.kind())\n-    }\n-}\n-\n /// Typed constant value.\n #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, TyEncodable, TyDecodable)]\n pub struct ConstData<'tcx> {"}, {"sha": "1dd4f8a243741fb6e9a16ac8996aa57325bf32e1", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16d71b706e54b3f21305b2042635b94a69b879e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16d71b706e54b3f21305b2042635b94a69b879e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=e16d71b706e54b3f21305b2042635b94a69b879e", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> UnevaluatedConst<'tcx> {\n }\n \n /// Represents a constant in Rust.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n #[derive(Hash, HashStable, TypeFoldable, TypeVisitable)]\n #[derive(derive_more::From)]\n pub enum ConstKind<'tcx> {\n@@ -128,7 +128,7 @@ impl<'tcx> ConstKind<'tcx> {\n }\n \n /// An inference variable for a const, for use in const generics.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]\n+#[derive(Copy, Clone, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]\n pub enum InferConst<'tcx> {\n     /// Infer the value of the const.\n     Var(ty::ConstVid<'tcx>),"}, {"sha": "a8193c3e5591f94acf3d491d5fb6fbef56f76caa", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e16d71b706e54b3f21305b2042635b94a69b879e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16d71b706e54b3f21305b2042635b94a69b879e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e16d71b706e54b3f21305b2042635b94a69b879e", "patch": "@@ -703,7 +703,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Error(_) => p!(\"[type error]\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n-                ty::BoundTyKind::Anon => self.pretty_print_bound_var(debruijn, bound_ty.var)?,\n+                ty::BoundTyKind::Anon => debug_bound_var(&mut self, debruijn, bound_ty.var)?,\n                 ty::BoundTyKind::Param(_, s) => match self.should_print_verbose() {\n                     true if debruijn == ty::INNERMOST => p!(write(\"^{}\", s)),\n                     true => p!(write(\"^{}_{}\", debruijn.index(), s)),\n@@ -741,7 +741,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Placeholder(placeholder) => match placeholder.bound.kind {\n                 ty::BoundTyKind::Anon => {\n-                    self.pretty_print_placeholder_var(placeholder.universe, placeholder.bound.var)?\n+                    debug_placeholder_var(&mut self, placeholder.universe, placeholder.bound.var)?;\n                 }\n                 ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n             },\n@@ -1164,30 +1164,6 @@ pub trait PrettyPrinter<'tcx>:\n         traits.entry(trait_ref).or_default().extend(proj_ty);\n     }\n \n-    fn pretty_print_bound_var(\n-        &mut self,\n-        debruijn: ty::DebruijnIndex,\n-        var: ty::BoundVar,\n-    ) -> Result<(), Self::Error> {\n-        if debruijn == ty::INNERMOST {\n-            write!(self, \"^{}\", var.index())\n-        } else {\n-            write!(self, \"^{}_{}\", debruijn.index(), var.index())\n-        }\n-    }\n-\n-    fn pretty_print_placeholder_var(\n-        &mut self,\n-        ui: ty::UniverseIndex,\n-        var: ty::BoundVar,\n-    ) -> Result<(), Self::Error> {\n-        if ui == ty::UniverseIndex::ROOT {\n-            write!(self, \"!{}\", var.index())\n-        } else {\n-            write!(self, \"!{}_{}\", ui.index(), var.index())\n-        }\n-    }\n-\n     fn ty_infer_name(&self, _: ty::TyVid) -> Option<Symbol> {\n         None\n     }\n@@ -1321,7 +1297,7 @@ pub trait PrettyPrinter<'tcx>:\n         define_scoped_cx!(self);\n \n         if self.should_print_verbose() {\n-            p!(write(\"Const({:?}: {:?})\", ct.kind(), ct.ty()));\n+            p!(write(\"{:?}\", ct));\n             return Ok(self);\n         }\n \n@@ -1380,9 +1356,11 @@ pub trait PrettyPrinter<'tcx>:\n             }\n \n             ty::ConstKind::Bound(debruijn, bound_var) => {\n-                self.pretty_print_bound_var(debruijn, bound_var)?\n+                debug_bound_var(&mut self, debruijn, bound_var)?\n             }\n-            ty::ConstKind::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n+            ty::ConstKind::Placeholder(placeholder) => {\n+                debug_placeholder_var(&mut self, placeholder.universe, placeholder.bound)?;\n+            },\n             // FIXME(generic_const_exprs):\n             // write out some legible representation of an abstract const?\n             ty::ConstKind::Expr(_) => p!(\"[const expr]\"),\n@@ -3067,3 +3045,27 @@ pub struct OpaqueFnEntry<'tcx> {\n     fn_trait_ref: Option<ty::PolyTraitRef<'tcx>>,\n     return_ty: Option<ty::Binder<'tcx, Term<'tcx>>>,\n }\n+\n+pub fn debug_bound_var<T: std::fmt::Write>(\n+    fmt: &mut T,\n+    debruijn: ty::DebruijnIndex,\n+    var: ty::BoundVar,\n+) -> Result<(), std::fmt::Error> {\n+    if debruijn == ty::INNERMOST {\n+        write!(fmt, \"^{}\", var.index())\n+    } else {\n+        write!(fmt, \"^{}_{}\", debruijn.index(), var.index())\n+    }\n+}\n+\n+pub fn debug_placeholder_var<T: std::fmt::Write>(\n+    fmt: &mut T,\n+    universe: ty::UniverseIndex,\n+    bound: ty::BoundVar,\n+) -> Result<(), std::fmt::Error> {\n+    if universe == ty::UniverseIndex::ROOT {\n+        write!(fmt, \"!{}\", bound.index())\n+    } else {\n+        write!(fmt, \"!{}_{}\", universe.index(), bound.index())\n+    }\n+}"}, {"sha": "16cb6c910463a81d42cbed1a8207faea8c1e5485", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e16d71b706e54b3f21305b2042635b94a69b879e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16d71b706e54b3f21305b2042635b94a69b879e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=e16d71b706e54b3f21305b2042635b94a69b879e", "patch": "@@ -192,6 +192,44 @@ impl<'tcx> fmt::Debug for AliasTy<'tcx> {\n     }\n }\n \n+impl<'tcx> fmt::Debug for ty::InferConst<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            InferConst::Var(var) => write!(f, \"{var:?}\"),\n+            InferConst::Fresh(var) => write!(f, \"Fresh({var:?})\"),\n+        }\n+    }\n+}\n+\n+impl<'tcx> fmt::Debug for ty::Const<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // This reflects what `Const` looked liked before `Interned` was\n+        // introduced. We print it like this to avoid having to update expected\n+        // output in a lot of tests.\n+        write!(f, \"Const {{ ty: {:?}, kind: {:?} }}\", self.ty(), self.kind())\n+    }\n+}\n+\n+impl<'tcx> fmt::Debug for ty::ConstKind<'tcx> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        use ty::ConstKind::*;\n+        match self {\n+            Param(param) => write!(f, \"{param:?}\"),\n+            Infer(var) => write!(f, \"{var:?}\"),\n+            Bound(debruijn, var) => ty::print::debug_bound_var(f, *debruijn, *var),\n+            Placeholder(placeholder) => {\n+                ty::print::debug_placeholder_var(f, placeholder.universe, placeholder.bound)\n+            }\n+            Unevaluated(uv) => {\n+                f.debug_tuple(\"Unevaluated\").field(&uv.substs).field(&uv.def).finish()\n+            }\n+            Value(valtree) => write!(f, \"{valtree:?}\"),\n+            Error(_) => write!(f, \"[const error]\"),\n+            Expr(expr) => write!(f, \"{expr:?}\"),\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Atomic structs\n //"}]}