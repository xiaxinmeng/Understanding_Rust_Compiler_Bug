{"sha": "b0514a6a0a420f640affed81eae1376bf2809f6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNTE0YTZhMGE0MjBmNjQwYWZmZWQ4MWVhZTEzNzZiZjI4MDlmNmU=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-10T14:48:09Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-10T15:07:16Z"}, "message": "Rename Option::get_or_insert_default", "tree": {"sha": "aac16f517a8e65d7f2af921a29bf98781a8fa9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac16f517a8e65d7f2af921a29bf98781a8fa9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0514a6a0a420f640affed81eae1376bf2809f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0514a6a0a420f640affed81eae1376bf2809f6e", "html_url": "https://github.com/rust-lang/rust/commit/b0514a6a0a420f640affed81eae1376bf2809f6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0514a6a0a420f640affed81eae1376bf2809f6e/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d9624242df6bfe6c0a298867dd2bd527263424", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d9624242df6bfe6c0a298867dd2bd527263424", "html_url": "https://github.com/rust-lang/rust/commit/a4d9624242df6bfe6c0a298867dd2bd527263424"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "93c17057590e60274694818f7ca4b516dfae9a91", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0514a6a0a420f640affed81eae1376bf2809f6e/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0514a6a0a420f640affed81eae1376bf2809f6e/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=b0514a6a0a420f640affed81eae1376bf2809f6e", "patch": "@@ -25,7 +25,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n #![feature(option_expect_none)]\n-#![feature(option_get_or_default)]\n+#![feature(option_get_or_insert_default)]\n #![feature(or_patterns)]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]"}, {"sha": "6f5fa858e25379bd9ad93a231cf2784da25a2e37", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0514a6a0a420f640affed81eae1376bf2809f6e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0514a6a0a420f640affed81eae1376bf2809f6e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=b0514a6a0a420f640affed81eae1376bf2809f6e", "patch": "@@ -392,7 +392,8 @@ impl BasicCoverageBlockData {\n             }\n         }\n         let operand = counter_kind.as_operand_id();\n-        if let Some(replaced) = self.edge_from_bcbs.get_or_default().insert(from_bcb, counter_kind)\n+        if let Some(replaced) =\n+            self.edge_from_bcbs.get_or_insert_default().insert(from_bcb, counter_kind)\n         {\n             Error::from_string(format!(\n                 \"attempt to set an edge counter more than once; from_bcb: \\"}, {"sha": "f1a0f455cd0918a8602984a012f00986b75c650b", "filename": "library/core/src/option.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b0514a6a0a420f640affed81eae1376bf2809f6e/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0514a6a0a420f640affed81eae1376bf2809f6e/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=b0514a6a0a420f640affed81eae1376bf2809f6e", "patch": "@@ -854,55 +854,55 @@ impl<T> Option<T> {\n     // Entry-like operations to insert if None and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Inserts the default value into the option if it is [`None`], then\n+    /// Inserts `value` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(option_get_or_default)]\n-    ///\n     /// let mut x = None;\n     ///\n     /// {\n-    ///     let y: &mut u32 = x.get_or_default();\n-    ///     assert_eq!(y, &0);\n+    ///     let y: &mut u32 = x.get_or_insert(5);\n+    ///     assert_eq!(y, &5);\n     ///\n     ///     *y = 7;\n     /// }\n     ///\n     /// assert_eq!(x, Some(7));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"option_get_or_default\", issue = \"82901\")]\n-    pub fn get_or_default(&mut self) -> &mut T\n-    where\n-        T: Default,\n-    {\n-        self.get_or_insert_with(Default::default)\n+    #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n+    pub fn get_or_insert(&mut self, value: T) -> &mut T {\n+        self.get_or_insert_with(|| value)\n     }\n \n-    /// Inserts `value` into the option if it is [`None`], then\n+    /// Inserts the default value into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(option_get_or_insert_default)]\n+    ///\n     /// let mut x = None;\n     ///\n     /// {\n-    ///     let y: &mut u32 = x.get_or_insert(5);\n-    ///     assert_eq!(y, &5);\n+    ///     let y: &mut u32 = x.get_or_insert_default();\n+    ///     assert_eq!(y, &0);\n     ///\n     ///     *y = 7;\n     /// }\n     ///\n     /// assert_eq!(x, Some(7));\n     /// ```\n     #[inline]\n-    #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    pub fn get_or_insert(&mut self, value: T) -> &mut T {\n-        self.get_or_insert_with(|| value)\n+    #[unstable(feature = \"option_get_or_insert_default\", issue = \"82901\")]\n+    pub fn get_or_insert_default(&mut self) -> &mut T\n+    where\n+        T: Default,\n+    {\n+        self.get_or_insert_with(Default::default)\n     }\n \n     /// Inserts a value computed from `f` into the option if it is [`None`],"}]}