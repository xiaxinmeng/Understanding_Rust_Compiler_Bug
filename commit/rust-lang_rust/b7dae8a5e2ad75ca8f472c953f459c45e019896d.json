{"sha": "b7dae8a5e2ad75ca8f472c953f459c45e019896d", "node_id": "C_kwDOAAsO6NoAKGI3ZGFlOGE1ZTJhZDc1Y2E4ZjQ3MmM5NTNmNDU5YzQ1ZTAxOTg5NmQ", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-10-02T13:15:40Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-10-02T13:15:40Z"}, "message": "remove unneeded attributes", "tree": {"sha": "ce0e4de5bd1e60b77f5694e22433d14e361783e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce0e4de5bd1e60b77f5694e22433d14e361783e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7dae8a5e2ad75ca8f472c953f459c45e019896d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dae8a5e2ad75ca8f472c953f459c45e019896d", "html_url": "https://github.com/rust-lang/rust/commit/b7dae8a5e2ad75ca8f472c953f459c45e019896d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7dae8a5e2ad75ca8f472c953f459c45e019896d/comments", "author": null, "committer": null, "parents": [{"sha": "6acc29f88b2fdf7a048fae77b031b803f86e1551", "url": "https://api.github.com/repos/rust-lang/rust/commits/6acc29f88b2fdf7a048fae77b031b803f86e1551", "html_url": "https://github.com/rust-lang/rust/commit/6acc29f88b2fdf7a048fae77b031b803f86e1551"}], "stats": {"total": 12, "additions": 0, "deletions": 12}, "files": [{"sha": "ff3b7bc2c90474c072f082ab6087ede3f5d4d652", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7dae8a5e2ad75ca8f472c953f459c45e019896d/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dae8a5e2ad75ca8f472c953f459c45e019896d/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=b7dae8a5e2ad75ca8f472c953f459c45e019896d", "patch": "@@ -2293,8 +2293,6 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog(self, base: Self) -> u32 {\n             assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n             self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n@@ -2317,8 +2315,6 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog2(self) -> u32 {\n             self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n         }\n@@ -2340,8 +2336,6 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog10(self) -> u32 {\n             self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n         }"}, {"sha": "d921ff9ba102655d40970332f39347d819d7cc12", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7dae8a5e2ad75ca8f472c953f459c45e019896d/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dae8a5e2ad75ca8f472c953f459c45e019896d/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=b7dae8a5e2ad75ca8f472c953f459c45e019896d", "patch": "@@ -705,8 +705,6 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog(self, base: Self) -> u32 {\n             assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n             self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n@@ -729,8 +727,6 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog2(self) -> u32 {\n             self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n         }\n@@ -752,8 +748,6 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog10(self) -> u32 {\n             self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n         }"}]}