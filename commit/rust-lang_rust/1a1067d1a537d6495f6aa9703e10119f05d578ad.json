{"sha": "1a1067d1a537d6495f6aa9703e10119f05d578ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMTA2N2QxYTUzN2Q2NDk1ZjZhYTk3MDNlMTAxMTlmMDVkNTc4YWQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-30T20:27:28Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-30T20:49:19Z"}, "message": "Make the default parallelism 1\n\nThis changes the default parallelism for parallel compilers to one,\ninstead of the previous default, which was \"num cpus\". This is likely\nnot an optimal default long-term, but it is a good default for testing\nwhether parallel compilers are not a significant regression over a\nsequential compiler.\n\nNotably, this in theory makes a parallel-enabled compiler behave\nexactly like a sequential compiler with respect to the jobserver.", "tree": {"sha": "a19f805f1a1d564317e26a15b53bab787ef217a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19f805f1a1d564317e26a15b53bab787ef217a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a1067d1a537d6495f6aa9703e10119f05d578ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1067d1a537d6495f6aa9703e10119f05d578ad", "html_url": "https://github.com/rust-lang/rust/commit/1a1067d1a537d6495f6aa9703e10119f05d578ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a1067d1a537d6495f6aa9703e10119f05d578ad/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3639c68595e59a17884c70d9e1881a00e789bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3639c68595e59a17884c70d9e1881a00e789bfc", "html_url": "https://github.com/rust-lang/rust/commit/a3639c68595e59a17884c70d9e1881a00e789bfc"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "ca8e503bdf0b3eabb804eec6dfe5d09cce6b5205", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a1067d1a537d6495f6aa9703e10119f05d578ad/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1067d1a537d6495f6aa9703e10119f05d578ad/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1a1067d1a537d6495f6aa9703e10119f05d578ad", "patch": "@@ -813,6 +813,7 @@ macro_rules! options {\n         pub const parse_list: Option<&str> = Some(\"a space-separated list of strings\");\n         pub const parse_opt_list: Option<&str> = Some(\"a space-separated list of strings\");\n         pub const parse_opt_comma_list: Option<&str> = Some(\"a comma-separated list of strings\");\n+        pub const parse_threads: Option<&str> = Some(\"a number\");\n         pub const parse_uint: Option<&str> = Some(\"a number\");\n         pub const parse_passes: Option<&str> =\n             Some(\"a space-separated list of passes, or `all`\");\n@@ -956,6 +957,14 @@ macro_rules! options {\n             }\n         }\n \n+        fn parse_threads(slot: &mut usize, v: Option<&str>) -> bool {\n+            match v.and_then(|s| s.parse().ok()) {\n+                Some(0) => { *slot = ::num_cpus::get(); true },\n+                Some(i) => { *slot = i; true },\n+                None => false\n+            }\n+        }\n+\n         fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool {\n             match v.and_then(|s| s.parse().ok()) {\n                 Some(i) => { *slot = i; true },\n@@ -1259,7 +1268,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"prints the LLVM optimization passes being run\"),\n     ast_json: bool = (false, parse_bool, [UNTRACKED],\n         \"print the AST as JSON and halt\"),\n-    threads: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+    // We default to 1 here since we want to behave like\n+    // a sequential compiler for now. This'll likely be adjusted\n+    // in the future. Note that -Zthreads=0 is the way to get\n+    // the num_cpus behavior.\n+    threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n     ast_json_noexpand: bool = (false, parse_bool, [UNTRACKED],\n         \"print the pre-expansion AST as JSON and halt\"),\n@@ -2160,14 +2173,14 @@ pub fn build_session_options_and_crate_config(\n         }\n     }\n \n-    if debugging_opts.threads == Some(0) {\n+    if debugging_opts.threads == 0 {\n         early_error(\n             error_format,\n             \"value for threads must be a positive non-zero integer\",\n         );\n     }\n \n-    if debugging_opts.threads.unwrap_or(1) > 1 && debugging_opts.fuel.is_some() {\n+    if debugging_opts.threads > 1 && debugging_opts.fuel.is_some() {\n         early_error(\n             error_format,\n             \"optimization fuel is incompatible with multiple threads\","}, {"sha": "52f120ba4ca3f57732cb530292702ffe493183da", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a1067d1a537d6495f6aa9703e10119f05d578ad/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1067d1a537d6495f6aa9703e10119f05d578ad/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=1a1067d1a537d6495f6aa9703e10119f05d578ad", "patch": "@@ -897,16 +897,10 @@ impl Session {\n         ret\n     }\n \n-    /// Returns the number of query threads that should be used for this\n-    /// compilation\n-    pub fn threads_from_count(query_threads: Option<usize>) -> usize {\n-        query_threads.unwrap_or(::num_cpus::get())\n-    }\n-\n     /// Returns the number of query threads that should be used for this\n     /// compilation\n     pub fn threads(&self) -> usize {\n-        Self::threads_from_count(self.opts.debugging_opts.threads)\n+        self.opts.debugging_opts.threads\n     }\n \n     /// Returns the number of codegen units that should be used for this"}, {"sha": "dae8fb242d58cd69cada05ce9ed638480bcfd3d7", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a1067d1a537d6495f6aa9703e10119f05d578ad/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1067d1a537d6495f6aa9703e10119f05d578ad/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=1a1067d1a537d6495f6aa9703e10119f05d578ad", "patch": "@@ -147,5 +147,8 @@ where\n     F: FnOnce() -> R + Send,\n     R: Send,\n {\n-    util::spawn_thread_pool(edition, None, &None, f)\n+    // the 1 here is duplicating code in config.opts.debugging_opts.threads\n+    // which also defaults to 1; it ultimately doesn't matter as the default\n+    // isn't threaded, and just ignores this parameter\n+    util::spawn_thread_pool(edition, 1, &None, f)\n }"}, {"sha": "0439aaa9463e6e6be9ca80f0cc33217dbd7831c5", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a1067d1a537d6495f6aa9703e10119f05d578ad/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1067d1a537d6495f6aa9703e10119f05d578ad/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=1a1067d1a537d6495f6aa9703e10119f05d578ad", "patch": "@@ -173,7 +173,7 @@ pub fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f:\n #[cfg(not(parallel_compiler))]\n pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n-    _threads: Option<usize>,\n+    _threads: usize,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n ) -> R {\n@@ -198,7 +198,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n #[cfg(parallel_compiler)]\n pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n-    threads: Option<usize>,\n+    threads: usize,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n ) -> R {\n@@ -209,7 +209,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     let mut config = ThreadPoolBuilder::new()\n         .acquire_thread_handler(jobserver::acquire_thread)\n         .release_thread_handler(jobserver::release_thread)\n-        .num_threads(Session::threads_from_count(threads))\n+        .num_threads(threads)\n         .deadlock_handler(|| unsafe { ty::query::handle_deadlock() });\n \n     if let Some(size) = get_stack_size() {"}]}