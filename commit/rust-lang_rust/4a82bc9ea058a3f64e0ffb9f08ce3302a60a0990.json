{"sha": "4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990", "node_id": "C_kwDOAAsO6NoAKDRhODJiYzllYTA1OGEzZjY0ZTBmZmI5ZjA4Y2UzMzAyYTYwYTA5OTA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-04T08:56:59Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-20T09:50:07Z"}, "message": "`bool` to custom enum", "tree": {"sha": "fbc8679b52f11d7c85b69398adb2784df729d586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbc8679b52f11d7c85b69398adb2784df729d586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990", "html_url": "https://github.com/rust-lang/rust/commit/4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced65022dae81b46e629262d8458cc3e5ac8cec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced65022dae81b46e629262d8458cc3e5ac8cec1", "html_url": "https://github.com/rust-lang/rust/commit/ced65022dae81b46e629262d8458cc3e5ac8cec1"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "809e7ce2e745b39f3e93dd1d29f7205eb22d6784", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990", "patch": "@@ -30,6 +30,13 @@ pub struct Discr<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n+/// Used as an input to [`TyCtxt::uses_unique_generic_params`].\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub enum IgnoreRegions {\n+    Yes,\n+    No,\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub enum NotUniqueParam<'tcx> {\n     DuplicateParam(ty::GenericArg<'tcx>),\n@@ -461,20 +468,18 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn uses_unique_generic_params(\n         self,\n         substs: SubstsRef<'tcx>,\n-        ignore_regions: bool,\n+        ignore_regions: IgnoreRegions,\n     ) -> Result<(), NotUniqueParam<'tcx>> {\n         let mut seen = GrowableBitSet::default();\n         for arg in substs {\n             match arg.unpack() {\n                 GenericArgKind::Lifetime(lt) => {\n-                    if !ignore_regions {\n-                        match lt.kind() {\n-                            ty::ReEarlyBound(p) => {\n-                                if !seen.insert(p.index) {\n-                                    return Err(NotUniqueParam::DuplicateParam(lt.into()));\n-                                }\n-                            }\n-                            _ => return Err(NotUniqueParam::NotParam(lt.into())),\n+                    if ignore_regions == IgnoreRegions::No {\n+                        let ty::ReEarlyBound(p) = lt.kind() else {\n+                            return Err(NotUniqueParam::NotParam(lt.into()))\n+                        };\n+                        if !seen.insert(p.index) {\n+                            return Err(NotUniqueParam::DuplicateParam(lt.into()));\n                         }\n                     }\n                 }"}, {"sha": "f8853014d2fd4ac212ac46e95cff18984cfd12db", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990", "patch": "@@ -5,6 +5,7 @@ use rustc_errors::{struct_span_err, ErrorGuaranteed};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{self, Predicate, Ty, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::dropck_outlives::AtExt;\n@@ -66,7 +67,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n     self_type_did: DefId,\n     drop_impl_substs: SubstsRef<'tcx>,\n ) -> Result<(), ErrorGuaranteed> {\n-    let Err(arg) = tcx.uses_unique_generic_params(drop_impl_substs, false) else {\n+    let Err(arg) = tcx.uses_unique_generic_params(drop_impl_substs, IgnoreRegions::No) else {\n         return Ok(())\n     };\n "}, {"sha": "eb6217f1174968dbb453399c252a036e0f46ac9f", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=4a82bc9ea058a3f64e0ffb9f08ce3302a60a0990", "patch": "@@ -8,6 +8,7 @@ use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::subst::InternalSubsts;\n+use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{self, ImplPolarity, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_session::lint;\n use rustc_span::def_id::{DefId, LocalDefId};\n@@ -354,7 +355,7 @@ fn lint_auto_trait_impls(tcx: TyCtxt<'_>, trait_def_id: DefId, impls: &[LocalDef\n         // Impls which completely cover a given root type are fine as they\n         // disable auto impls entirely. So only lint if the substs\n         // are not a permutation of the identity substs.\n-        match tcx.uses_unique_generic_params(substs, true) {\n+        match tcx.uses_unique_generic_params(substs, IgnoreRegions::Yes) {\n             Ok(()) => {} // ok\n             Err(arg) => {\n                 // Ideally:"}]}