{"sha": "e95f119d68008891193cdc10cf2ebc33e73c693c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NWYxMTlkNjgwMDg4OTExOTNjZGMxMGNmMmViYzMzZTczYzY5M2M=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-08-29T12:03:57Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-08-29T12:03:57Z"}, "message": "rustfmt tests", "tree": {"sha": "a9648c41c3ecd5837673eaaffd52dcb8a553f366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9648c41c3ecd5837673eaaffd52dcb8a553f366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e95f119d68008891193cdc10cf2ebc33e73c693c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e95f119d68008891193cdc10cf2ebc33e73c693c", "html_url": "https://github.com/rust-lang/rust/commit/e95f119d68008891193cdc10cf2ebc33e73c693c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e95f119d68008891193cdc10cf2ebc33e73c693c/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "744312754dc3a3c36d2a609bb24889cb1b7994de", "url": "https://api.github.com/repos/rust-lang/rust/commits/744312754dc3a3c36d2a609bb24889cb1b7994de", "html_url": "https://github.com/rust-lang/rust/commit/744312754dc3a3c36d2a609bb24889cb1b7994de"}], "stats": {"total": 126, "additions": 64, "deletions": 62}, "files": [{"sha": "3e9afdd5b13ae5fcec20ab7bf501d511c4c893e8", "filename": "src/test/compile-fail/rfc1623.rs", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e95f119d68008891193cdc10cf2ebc33e73c693c/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95f119d68008891193cdc10cf2ebc33e73c693c/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1623.rs?ref=e95f119d68008891193cdc10cf2ebc33e73c693c", "patch": "@@ -10,89 +10,91 @@\n \n #![allow(dead_code)]\n \n-fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 { a }\n+fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 {\n+    a\n+}\n \n // the boundaries of elision\n-static NON_ELIDABLE_FN : &fn(&u8, &u8) -> &u8 =\n-//~^ ERROR: missing lifetime specifier\n-        &(non_elidable as fn(&u8, &u8) -> &u8);\n+static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 = &(non_elidable as fn(&u8, &u8) -> &u8);\n \n struct SomeStruct<'x, 'y, 'z: 'x> {\n     foo: &'x Foo<'z>,\n     bar: &'x Bar<'z>,\n     f: &'y for<'a, 'b: 'a> Fn(&'a Foo<'b>) -> &'a Bar<'b>,\n }\n \n-fn id<T>(t: T) -> T { t }\n+fn id<T>(t: T) -> T {\n+    t\n+}\n \n-static SOME_STRUCT : &SomeStruct = SomeStruct {\n+static SOME_STRUCT: &SomeStruct = SomeStruct {\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n };\n \n // very simple test for a 'static static with default lifetime\n-static STATIC_STR : &'static str = \"&'static str\";\n-const CONST_STR : &'static str = \"&'static str\";\n+static STATIC_STR: &'static str = \"&'static str\";\n+const CONST_STR: &'static str = \"&'static str\";\n \n // this should be the same as without default:\n-static EXPLICIT_STATIC_STR : &'static str = \"&'static str\";\n-const EXPLICIT_CONST_STR : &'static str = \"&'static str\";\n+static EXPLICIT_STATIC_STR: &'static str = \"&'static str\";\n+const EXPLICIT_CONST_STR: &'static str = \"&'static str\";\n \n // a function that elides to an unbound lifetime for both in- and output\n-fn id_u8_slice(arg: &[u8]) -> &[u8] { arg }\n+fn id_u8_slice(arg: &[u8]) -> &[u8] {\n+    arg\n+}\n \n // one with a function, argument elided\n-static STATIC_SIMPLE_FN : &'static fn(&[u8]) -> &[u8] =\n-        &(id_u8_slice as fn(&[u8]) -> &[u8]);\n-const CONST_SIMPLE_FN : &'static fn(&[u8]) -> &[u8] =\n-        &(id_u8_slice as fn(&[u8]) -> &[u8]);\n+static STATIC_SIMPLE_FN: &'static fn(&[u8]) -> &[u8] = &(id_u8_slice as fn(&[u8]) -> &[u8]);\n+const CONST_SIMPLE_FN: &'static fn(&[u8]) -> &[u8] = &(id_u8_slice as fn(&[u8]) -> &[u8]);\n \n // this should be the same as without elision\n-static STATIC_NON_ELIDED_fN : &'static for<'a> fn(&'a [u8]) -> &'a [u8] =\n-        &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n-const CONST_NON_ELIDED_fN : &'static for<'a> fn(&'a [u8]) -> &'a [u8] =\n-        &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n+static STATIC_NON_ELIDED_fN: &'static for<'a> fn(&'a [u8]) -> &'a [u8] =\n+    &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n+const CONST_NON_ELIDED_fN: &'static for<'a> fn(&'a [u8]) -> &'a [u8] =\n+    &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n \n // another function that elides, each to a different unbound lifetime\n-fn multi_args(a: &u8, b: &u8, c: &u8) { }\n+fn multi_args(a: &u8, b: &u8, c: &u8) {}\n \n-static STATIC_MULTI_FN : &'static fn(&u8, &u8, &u8) =\n-        &(multi_args as fn(&u8, &u8, &u8));\n-const CONST_MULTI_FN : &'static fn(&u8, &u8, &u8) =\n-        &(multi_args as fn(&u8, &u8, &u8));\n+static STATIC_MULTI_FN: &'static fn(&u8, &u8, &u8) = &(multi_args as fn(&u8, &u8, &u8));\n+const CONST_MULTI_FN: &'static fn(&u8, &u8, &u8) = &(multi_args as fn(&u8, &u8, &u8));\n \n struct Foo<'a> {\n-    bools: &'a [bool]\n+    bools: &'a [bool],\n }\n \n-static STATIC_FOO : Foo<'static> = Foo { bools: &[true, false] };\n-const CONST_FOO : Foo<'static> = Foo { bools: &[true, false] };\n+static STATIC_FOO: Foo<'static> = Foo { bools: &[true, false] };\n+const CONST_FOO: Foo<'static> = Foo { bools: &[true, false] };\n \n type Bar<'a> = Foo<'a>;\n \n-static STATIC_BAR : Bar<'static> = Bar { bools: &[true, false] };\n-const CONST_BAR : Bar<'static> = Bar { bools: &[true, false] };\n+static STATIC_BAR: Bar<'static> = Bar { bools: &[true, false] };\n+const CONST_BAR: Bar<'static> = Bar { bools: &[true, false] };\n \n type Baz<'a> = fn(&'a [u8]) -> Option<u8>;\n \n-fn baz(e: &[u8]) -> Option<u8> { e.first().map(|x| *x) }\n+fn baz(e: &[u8]) -> Option<u8> {\n+    e.first().map(|x| *x)\n+}\n \n-static STATIC_BAZ : &'static Baz<'static> = &(baz as Baz);\n-const CONST_BAZ : &'static Baz<'static> = &(baz as Baz);\n+static STATIC_BAZ: &'static Baz<'static> = &(baz as Baz);\n+const CONST_BAZ: &'static Baz<'static> = &(baz as Baz);\n \n-static BYTES : &'static [u8] = &[1, 2, 3];\n+static BYTES: &'static [u8] = &[1, 2, 3];\n \n fn main() {\n     let x = &[1u8, 2, 3];\n     let y = x;\n \n-    //this works, so lifetime < `'static` is valid\n+    // this works, so lifetime < `'static` is valid\n     assert_eq!(Some(1), STATIC_BAZ(y));\n     assert_eq!(Some(1), CONST_BAZ(y));\n \n     let y = &[1u8, 2, 3];\n-    //^~ ERROR: borrowed values does not live long enough\n+    // ^~ ERROR: borrowed values does not live long enough\n     STATIC_BAZ(BYTES); // BYTES has static lifetime\n     CONST_BAZ(y); // This forces static lifetime, which y has not\n }"}, {"sha": "17453933c8abcdc35b87ca4a20a409d8ec817b8d", "filename": "src/test/run-pass/rfc1623.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e95f119d68008891193cdc10cf2ebc33e73c693c/src%2Ftest%2Frun-pass%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95f119d68008891193cdc10cf2ebc33e73c693c/src%2Ftest%2Frun-pass%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1623.rs?ref=e95f119d68008891193cdc10cf2ebc33e73c693c", "patch": "@@ -11,56 +11,56 @@\n #![allow(dead_code)]\n \n // very simple test for a 'static static with default lifetime\n-static STATIC_STR : &str = \"&'static str\";\n-const CONST_STR : &str = \"&'static str\";\n+static STATIC_STR: &str = \"&'static str\";\n+const CONST_STR: &str = \"&'static str\";\n \n // this should be the same as without default:\n-static EXPLICIT_STATIC_STR : &'static str = \"&'static str\";\n-const EXPLICIT_CONST_STR : &'static str = \"&'static str\";\n+static EXPLICIT_STATIC_STR: &'static str = \"&'static str\";\n+const EXPLICIT_CONST_STR: &'static str = \"&'static str\";\n \n // a function that elides to an unbound lifetime for both in- and output\n-fn id_u8_slice(arg: &[u8]) -> &[u8] { arg }\n+fn id_u8_slice(arg: &[u8]) -> &[u8] {\n+    arg\n+}\n \n // one with a function, argument elided\n-static STATIC_SIMPLE_FN : &fn(&[u8]) -> &[u8] =\n-        &(id_u8_slice as fn(&[u8]) -> &[u8]);\n-const CONST_SIMPLE_FN : &fn(&[u8]) -> &[u8] =\n-        &(id_u8_slice as fn(&[u8]) -> &[u8]);\n+static STATIC_SIMPLE_FN: &fn(&[u8]) -> &[u8] = &(id_u8_slice as fn(&[u8]) -> &[u8]);\n+const CONST_SIMPLE_FN: &fn(&[u8]) -> &[u8] = &(id_u8_slice as fn(&[u8]) -> &[u8]);\n \n // this should be the same as without elision\n-static STATIC_NON_ELIDED_fN : &for<'a> fn(&'a [u8]) -> &'a [u8] =\n-        &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n-const CONST_NON_ELIDED_fN : &for<'a> fn(&'a [u8]) -> &'a [u8] =\n-        &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n+static STATIC_NON_ELIDED_fN: &for<'a> fn(&'a [u8]) -> &'a [u8] =\n+    &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n+const CONST_NON_ELIDED_fN: &for<'a> fn(&'a [u8]) -> &'a [u8] =\n+    &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n \n // another function that elides, each to a different unbound lifetime\n-fn multi_args(a: &u8, b: &u8, c: &u8) { }\n+fn multi_args(a: &u8, b: &u8, c: &u8) {}\n \n-static STATIC_MULTI_FN : &fn(&u8, &u8, &u8) =\n-        &(multi_args as fn(&u8, &u8, &u8));\n-const CONST_MULTI_FN : &fn(&u8, &u8, &u8) =\n-        &(multi_args as fn(&u8, &u8, &u8));\n+static STATIC_MULTI_FN: &fn(&u8, &u8, &u8) = &(multi_args as fn(&u8, &u8, &u8));\n+const CONST_MULTI_FN: &fn(&u8, &u8, &u8) = &(multi_args as fn(&u8, &u8, &u8));\n \n struct Foo<'a> {\n-    bools: &'a [bool]\n+    bools: &'a [bool],\n }\n \n-static STATIC_FOO : Foo = Foo { bools: &[true, false] };\n-const CONST_FOO : Foo = Foo { bools: &[true, false] };\n+static STATIC_FOO: Foo = Foo { bools: &[true, false] };\n+const CONST_FOO: Foo = Foo { bools: &[true, false] };\n \n type Bar<'a> = Foo<'a>;\n \n-static STATIC_BAR : Bar = Bar { bools: &[true, false] };\n-const CONST_BAR : Bar = Bar { bools: &[true, false] };\n+static STATIC_BAR: Bar = Bar { bools: &[true, false] };\n+const CONST_BAR: Bar = Bar { bools: &[true, false] };\n \n type Baz<'a> = fn(&'a [u8]) -> Option<u8>;\n \n-fn baz(e: &[u8]) -> Option<u8> { e.first().map(|x| *x) }\n+fn baz(e: &[u8]) -> Option<u8> {\n+    e.first().map(|x| *x)\n+}\n \n-static STATIC_BAZ : &Baz = &(baz as Baz);\n-const CONST_BAZ : &Baz = &(baz as Baz);\n+static STATIC_BAZ: &Baz = &(baz as Baz);\n+const CONST_BAZ: &Baz = &(baz as Baz);\n \n-static BYTES : &[u8] = &[1, 2, 3];\n+static BYTES: &[u8] = &[1, 2, 3];\n \n fn main() {\n     // make sure that the lifetime is actually elided (and not defaulted)"}]}