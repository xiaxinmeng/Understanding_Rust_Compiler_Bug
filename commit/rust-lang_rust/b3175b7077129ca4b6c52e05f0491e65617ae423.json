{"sha": "b3175b7077129ca4b6c52e05f0491e65617ae423", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMTc1YjcwNzcxMjljYTRiNmM1MmUwNWYwNDkxZTY1NjE3YWU0MjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-14T06:37:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-14T06:37:33Z"}, "message": "Move current file to MacroResolver", "tree": {"sha": "a76be37817ca3df2f55e79a237a8d38e5825dcb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a76be37817ca3df2f55e79a237a8d38e5825dcb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3175b7077129ca4b6c52e05f0491e65617ae423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3175b7077129ca4b6c52e05f0491e65617ae423", "html_url": "https://github.com/rust-lang/rust/commit/b3175b7077129ca4b6c52e05f0491e65617ae423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3175b7077129ca4b6c52e05f0491e65617ae423/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "debf95eb1b79a54ed482ea01f1716e5ff1faf0b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/debf95eb1b79a54ed482ea01f1716e5ff1faf0b6", "html_url": "https://github.com/rust-lang/rust/commit/debf95eb1b79a54ed482ea01f1716e5ff1faf0b6"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "d1af8ee3990904d35ef49d8c1021a9af7785df9f", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3175b7077129ca4b6c52e05f0491e65617ae423/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3175b7077129ca4b6c52e05f0491e65617ae423/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=b3175b7077129ca4b6c52e05f0491e65617ae423", "patch": "@@ -40,8 +40,8 @@ pub(crate) fn body_with_source_map_query(\n             (src.file_id, src.ast.body())\n         }\n     };\n-    let resolver = hir_def::body::MacroResolver::new(db, def.module(db).id);\n-    let (body, source_map) = Body::new(db, resolver, file_id, params, body);\n+    let resolver = hir_def::body::MacroResolver::new(db, file_id, def.module(db).id);\n+    let (body, source_map) = Body::new(db, resolver, params, body);\n     (Arc::new(body), Arc::new(source_map))\n }\n "}, {"sha": "7e84e91135dce70d6575ed5724e9211a04c633c7", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3175b7077129ca4b6c52e05f0491e65617ae423/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3175b7077129ca4b6c52e05f0491e65617ae423/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=b3175b7077129ca4b6c52e05f0491e65617ae423", "patch": "@@ -18,12 +18,18 @@ use crate::{\n \n pub struct MacroResolver {\n     crate_def_map: Arc<CrateDefMap>,\n+    current_file_id: HirFileId,\n     module: ModuleId,\n }\n \n impl MacroResolver {\n-    pub fn new(db: &impl DefDatabase2, module: ModuleId) -> MacroResolver {\n-        MacroResolver { crate_def_map: db.crate_def_map(module.krate), module }\n+    pub fn new(\n+        db: &impl DefDatabase2,\n+        current_file_id: HirFileId,\n+        module: ModuleId,\n+    ) -> MacroResolver {\n+        let crate_def_map = db.crate_def_map(module.krate);\n+        MacroResolver { crate_def_map, current_file_id, module }\n     }\n \n     fn resolve_path_as_macro(&self, db: &impl DefDatabase2, path: &Path) -> Option<MacroDefId> {\n@@ -77,11 +83,10 @@ impl Body {\n     pub fn new(\n         db: &impl DefDatabase2,\n         resolver: MacroResolver,\n-        file_id: HirFileId,\n         params: Option<ast::ParamList>,\n         body: Option<ast::Expr>,\n     ) -> (Body, BodySourceMap) {\n-        lower::lower(db, resolver, file_id, params, body)\n+        lower::lower(db, resolver, params, body)\n     }\n \n     pub fn params(&self) -> &[PatId] {"}, {"sha": "1a990101ff334722dc6ff94bafcad6e3b21ee52c", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b3175b7077129ca4b6c52e05f0491e65617ae423/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3175b7077129ca4b6c52e05f0491e65617ae423/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=b3175b7077129ca4b6c52e05f0491e65617ae423", "patch": "@@ -31,15 +31,15 @@ use crate::{\n pub(super) fn lower(\n     db: &impl DefDatabase2,\n     resolver: MacroResolver,\n-    file_id: HirFileId,\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n ) -> (Body, BodySourceMap) {\n+    let original_file_id = resolver.current_file_id;\n+\n     ExprCollector {\n         resolver,\n         db,\n-        original_file_id: file_id,\n-        current_file_id: file_id,\n+        original_file_id,\n         source_map: BodySourceMap::default(),\n         body: Body {\n             exprs: Arena::default(),\n@@ -55,7 +55,6 @@ struct ExprCollector<DB> {\n     db: DB,\n     resolver: MacroResolver,\n     original_file_id: HirFileId,\n-    current_file_id: HirFileId,\n \n     body: Body,\n     source_map: BodySourceMap,\n@@ -101,12 +100,12 @@ where\n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n         let ptr = Either::A(ptr);\n         let id = self.body.exprs.alloc(expr);\n-        if self.current_file_id == self.original_file_id {\n+        if self.resolver.current_file_id == self.original_file_id {\n             self.source_map.expr_map.insert(ptr, id);\n         }\n         self.source_map\n             .expr_map_back\n-            .insert(id, Source { file_id: self.current_file_id, ast: ptr });\n+            .insert(id, Source { file_id: self.resolver.current_file_id, ast: ptr });\n         id\n     }\n     // desugared exprs don't have ptr, that's wrong and should be fixed\n@@ -117,20 +116,22 @@ where\n     fn alloc_expr_field_shorthand(&mut self, expr: Expr, ptr: AstPtr<ast::RecordField>) -> ExprId {\n         let ptr = Either::B(ptr);\n         let id = self.body.exprs.alloc(expr);\n-        if self.current_file_id == self.original_file_id {\n+        if self.resolver.current_file_id == self.original_file_id {\n             self.source_map.expr_map.insert(ptr, id);\n         }\n         self.source_map\n             .expr_map_back\n-            .insert(id, Source { file_id: self.current_file_id, ast: ptr });\n+            .insert(id, Source { file_id: self.resolver.current_file_id, ast: ptr });\n         id\n     }\n     fn alloc_pat(&mut self, pat: Pat, ptr: PatPtr) -> PatId {\n         let id = self.body.pats.alloc(pat);\n-        if self.current_file_id == self.original_file_id {\n+        if self.resolver.current_file_id == self.original_file_id {\n             self.source_map.pat_map.insert(ptr, id);\n         }\n-        self.source_map.pat_map_back.insert(id, Source { file_id: self.current_file_id, ast: ptr });\n+        self.source_map\n+            .pat_map_back\n+            .insert(id, Source { file_id: self.resolver.current_file_id, ast: ptr });\n         id\n     }\n \n@@ -445,8 +446,8 @@ where\n             ast::Expr::RangeExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::Expr::MacroCall(e) => {\n                 let ast_id = AstId::new(\n-                    self.current_file_id,\n-                    self.db.ast_id_map(self.current_file_id).ast_id(&e),\n+                    self.resolver.current_file_id,\n+                    self.db.ast_id_map(self.resolver.current_file_id).ast_id(&e),\n                 );\n \n                 if let Some(path) = e.path().and_then(|path| self.parse_path(path)) {\n@@ -457,9 +458,9 @@ where\n                             if let Some(expr) = ast::Expr::cast(node) {\n                                 log::debug!(\"macro expansion {:#?}\", expr.syntax());\n                                 let old_file_id =\n-                                    std::mem::replace(&mut self.current_file_id, file_id);\n+                                    std::mem::replace(&mut self.resolver.current_file_id, file_id);\n                                 let id = self.collect_expr(expr);\n-                                self.current_file_id = old_file_id;\n+                                self.resolver.current_file_id = old_file_id;\n                                 return id;\n                             }\n                         }\n@@ -581,7 +582,7 @@ where\n     }\n \n     fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n-        let hygiene = Hygiene::new(self.db, self.current_file_id);\n+        let hygiene = Hygiene::new(self.db, self.resolver.current_file_id);\n         Path::from_src(path, &hygiene)\n     }\n }"}]}